void sub_1002E67D4(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD v8[5];
  int v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 == 1)
  {
    v10 = v3;
    v11 = v4;
    v7 = sub_1000419F4();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1002E6844;
    v8[3] = &unk_1009173C0;
    v8[4] = a1;
    v9 = a3;
    sub_100023D84(v7, v8);
  }
}

void sub_1002E6844(uint64_t a1, __n128 a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  NSObject *v14;
  void **v15;
  NSObject *v16;
  void *v17;
  id v18;
  void *v19;
  __n128 v20;
  void *__p[2];
  char v22;
  uint8_t buf[4];
  void **v24;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)(v3 + 224);
  v5 = (_QWORD *)(v3 + 232);
  if (v4 != (_QWORD *)(v3 + 232))
  {
    a2.n128_u64[0] = 136315138;
    v20 = a2;
    while (1)
    {
      v7 = v4[4];
      v6 = v4[5];
      v8 = *(unsigned int *)(a1 + 40);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      if ((_DWORD)v9 != 3)
        break;
      if (!(_DWORD)v8)
        v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 72))(v6, v7);
      if (*(_QWORD *)(v6 + 216))
      {
        sub_10006F010(v9, v6, v7, 5, 1);
        (***(void (****)(_QWORD, _QWORD, uint64_t))(v6 + 216))(*(_QWORD *)(v6 + 216), 0, v8);
      }
LABEL_15:
      v11 = (_QWORD *)v4[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v4[2];
          v13 = *v12 == (_QWORD)v4;
          v4 = v12;
        }
        while (!v13);
      }
      v4 = v12;
      if (v12 == v5)
        goto LABEL_28;
    }
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    if ((_DWORD)v10 || (v10 = sub_10006AB38(v6), !(_DWORD)v10) || (v10 = sub_100408E08(v6), (v10 & 1) != 0))
    {
      if ((_DWORD)v8)
        goto LABEL_13;
    }
    else
    {
      v14 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000340DC(v7, (uint64_t)__p);
        v15 = v22 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = v20.n128_u32[0];
        v24 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Overriding power to off for session %s", buf, 0xCu);
        if (v22 < 0)
          operator delete(__p[0]);
      }
    }
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 72))(v6, v7);
    v8 = 0;
LABEL_13:
    if (*(_QWORD *)(v6 + 120))
    {
      sub_10006F010(v10, v6, v7, 5, 1);
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v6 + 120) + 200))(*(_QWORD *)(v6 + 120), 0, v8);
    }
    goto LABEL_15;
  }
LABEL_28:
  if (!*(_DWORD *)(a1 + 40))
  {
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_100924E70);
    if (!*((_BYTE *)off_100977B38 + 202))
    {
      v16 = qword_1009998F0;
      if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Power toggled off, clearing state restoration data", (uint8_t *)__p, 2u);
      }
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager", *(_OWORD *)&v20));
      v18 = sub_1002E6B5C();
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      objc_msgSend(v17, "removeItemAtURL:error:", v19, 0);

    }
  }
}

void sub_1002E6B40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1002E6B5C()
{
  if (qword_100991AD8 != -1)
    dispatch_once(&qword_100991AD8, &stru_100924BD0);
  return (id)qword_100991AD0;
}

void sub_1002E6B9C(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002E6C04;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_1002E6C04(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _BOOL4 v11;
  int v12;
  uint64_t v13;
  BOOL v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  NSObject *v23;
  int v24;
  void *v25;
  id v26;
  void *v27;
  NSObject *v28;
  __int128 v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  const char *v33;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)buf = 67109120;
    LODWORD(v31) = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setting AppManager denylist %d", buf, 8u);
  }
  *(_BYTE *)(v2 + 179) = *(_BYTE *)(a1 + 40);
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_100924BF0);
  if (sub_10002527C((uint64_t)off_100978128) == 1)
  {
    LODWORD(v6) = *(_BYTE *)(a1 + 40) == 0;
    v7 = *(_QWORD **)(v2 + 224);
    if (v7 != (_QWORD *)(v2 + 232))
    {
      *(_QWORD *)&v5 = 138543362;
      v29 = v5;
      while (1)
      {
        v8 = v7[5];
        v9 = *(_QWORD *)(v8 + 120);
        if (v9)
        {
          if (*(_BYTE *)(v8 + 36))
          {
            v10 = qword_100999898;
            v11 = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT);
            v12 = *(unsigned __int8 *)(a1 + 40);
            if (v11)
            {
              v13 = *(_QWORD *)(v8 + 88);
              v14 = v12 == 0;
              v15 = "needs";
              if (v14)
                v15 = "does not need";
              *(_DWORD *)buf = 138543618;
              v31 = v13;
              v32 = 2082;
              v33 = v15;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "BundleIdentifier %{public}@ %{public}s restricted state operation. Update manager state", buf, 0x16u);
              v9 = *(_QWORD *)(v8 + 120);
              v12 = *(unsigned __int8 *)(a1 + 40);
            }
            (*(void (**)(uint64_t, _QWORD, BOOL))(*(_QWORD *)v9 + 208))(v9, 0, v12 != 0);
            goto LABEL_26;
          }
          if (!*(_BYTE *)(v8 + 37))
            break;
        }
LABEL_26:
        v21 = (_QWORD *)v7[1];
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = (_QWORD *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (_QWORD *)v7[2];
            v14 = *v22 == (_QWORD)v7;
            v7 = v22;
          }
          while (!v14);
        }
        v7 = v22;
        if (v22 == (_QWORD *)(v2 + 232))
          goto LABEL_32;
      }
      v16 = v7[4];
      v17 = *(_QWORD *)v8;
      if ((_DWORD)v6)
      {
        v18 = (*(uint64_t (**)(_QWORD))(v17 + 16))(v7[5]);
        if ((_DWORD)v18 || (v18 = sub_10006AB38(v8), !(_DWORD)v18))
        {
          v6 = 1;
          goto LABEL_25;
        }
        v18 = sub_100408E08(v8);
        if ((_DWORD)v18)
        {
          v6 = *(unsigned __int8 *)(v2 + 179) ^ 1u;
LABEL_25:
          sub_10006F010(v18, v8, v16, 5, 1);
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v8 + 120) + 200))(*(_QWORD *)(v8 + 120), 0, v6);
          goto LABEL_26;
        }
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v17 + 72))(v7[5], v7[4]);
        v19 = qword_100999898;
        v18 = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO);
        if ((_DWORD)v18)
        {
          v20 = *(_QWORD *)(v8 + 88);
          *(_DWORD *)buf = v29;
          v31 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Faking off power state for bundleIdentifier %{public}@", buf, 0xCu);
        }
      }
      v6 = 0;
      goto LABEL_25;
    }
LABEL_32:
    if (!(_DWORD)v6)
    {
      v23 = qword_1009998F0;
      if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
      {
        v24 = *(unsigned __int8 *)(a1 + 40);
        *(_DWORD *)buf = 67109120;
        LODWORD(v31) = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Denylist mode turned %d, clearing state restoration data", buf, 8u);
      }
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager", v29));
      v26 = sub_1002E6B5C();
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      objc_msgSend(v25, "removeItemAtURL:error:", v27, 0);

      sub_1002DD240(v2);
    }
  }
  else
  {
    v28 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Ignoring denylist change while power is not ON", buf, 2u);
    }
  }
}

void sub_1002E6FD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002E6FF4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _QWORD *v5;
  NSObject *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  id v13;
  __int16 v14;
  void **v15;

  v3 = a2;
  v4 = sub_1002E7160(a1, v3, 1);
  v5 = (_QWORD *)(a1 + 232);
  v6 = qword_100999898;
  if (v5 == v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      sub_1006DD6E0();
    v9 = sub_100069D20();
    (*(void (**)(uint64_t, id))(*(_QWORD *)v9 + 128))(v9, v3);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
    {
      sub_1000340DC(v4[4], (uint64_t)__p);
      if (v11 >= 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      *(_DWORD *)buf = 138543618;
      v13 = v3;
      v14 = 2082;
      v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Dispatching queued pairing request for device \"%{public}@\" to session \"%{public}s\"", buf, 0x16u);
      if (v11 < 0)
        operator delete(__p[0]);
    }
    v8 = sub_100069D20();
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
  }

}

void sub_1002E7144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1002E7160(uint64_t a1, void *a2, char a3)
{
  id v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  id *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  v5 = a2;
  v6 = _os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit");
  v7 = (_QWORD *)(a1 + 232);
  v8 = *(_QWORD **)(a1 + 224);
  if (!v6)
  {
LABEL_13:
    if (v8 != v7)
    {
      v13 = (_QWORD *)(a1 + 232);
      do
      {
        v14 = v8[5];
        v15 = *(unsigned __int8 *)(v14 + 129);
        if (v15 == 16)
        {
          v16 = v8;
          if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v14 + 16))(v8[5]))
          {
            v16 = v13;
            if ((sub_1002E0C24(v14, (uint64_t)v5) & 1) != 0)
              goto LABEL_36;
          }
        }
        else if (v15 == 32 && (a3 & 1) == 0 && *(_DWORD *)(v14 + 32) == 2)
        {
          if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v14 + 16))(v8[5])
            && (sub_1002E0C24(v14, (uint64_t)v5) & 1) != 0)
          {
            goto LABEL_36;
          }
          if (v13 == v7)
            v16 = v8;
          else
            v16 = v13;
        }
        else
        {
          v16 = v13;
        }
        v17 = (_QWORD *)v8[1];
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (_QWORD *)v8[2];
            v12 = *v18 == (_QWORD)v8;
            v8 = v18;
          }
          while (!v12);
        }
        v13 = v16;
        v8 = v18;
      }
      while (v18 != v7);
      goto LABEL_37;
    }
LABEL_35:
    v16 = (_QWORD *)(a1 + 232);
    goto LABEL_37;
  }
  if (v8 == v7)
    goto LABEL_35;
  while (1)
  {
    v9 = (id *)v8[5];
    if (!(*((unsigned int (**)(id *))*v9 + 2))(v9)
      && objc_msgSend(v9[11], "containsString:", CFSTR("com.apple.deviceaccessd"))
      && (sub_1002E0C24((uint64_t)v9, (uint64_t)v5) & 1) != 0)
    {
      break;
    }
    v10 = (_QWORD *)v8[1];
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = (_QWORD *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (_QWORD *)v8[2];
        v12 = *v11 == (_QWORD)v8;
        v8 = v11;
      }
      while (!v12);
    }
    v8 = v11;
    if (v11 == v7)
    {
      v8 = *(_QWORD **)(a1 + 224);
      goto LABEL_13;
    }
  }
LABEL_36:
  v16 = v8;
LABEL_37:

  return v16;
}

void sub_1002E7330(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E734C(uint64_t a1, void *a2)
{
  sub_1002E6FF4(a1 - 8, a2);
}

void sub_1002E7354()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "LeConnectionManager Paused now", v1, 2u);
  }
}

void sub_1002E73BC()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "LeConnectionManager Active now", v1, 2u);
  }
}

void sub_1002E7424(uint64_t a1, void *a2, unsigned int a3)
{
  id v5;

  v5 = a2;
  if (a3)
    sub_1002E7488(a1, v5, 1u, a3, 1);

}

void sub_1002E7474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002E7488(uint64_t a1, void *a2, unsigned int a3, unsigned int a4, int a5)
{
  id v7;
  void *v8;
  int v9;
  int v10;
  NSObject *v11;
  __int128 v12;
  const char *v13;
  std::string *v14;
  uint64_t v15;
  id v16;
  id v17;
  _BOOL4 v18;
  uint64_t v19;
  id v20;
  __CFString *v21;
  _QWORD *v22;
  const char *v23;
  int v24;
  unsigned int v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  void *i;
  void *v33;
  NSObject *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  _BYTE *v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  BOOL v51;
  _BYTE *v52;
  _QWORD *v53;
  id *v54;
  unint64_t v55;
  void *v56;
  NSObject *v57;
  std::string *v58;
  _QWORD *v59;
  _QWORD *v60;
  __int128 v61;
  const char *v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  char v66;
  int v67;
  char v70;
  unsigned int v71;
  _QWORD v72[4];
  id v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79[3];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  std::string v84;
  void *__p[2];
  char v86;
  _BYTE v87[12];
  __int16 v88;
  _BYTE *v89;
  char v90;
  _BYTE v91[128];
  _BYTE buf[32];
  __int16 v93;
  int v94;
  __int16 v95;
  id v96;
  __int16 v97;
  __CFString *v98;
  __int16 v99;
  unsigned int v100;

  v7 = a2;
  v67 = a5;
  v70 = a3 | a5;
  v71 = a3;
  if ((a3 | a5) == 1)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100924CB0);
    v8 = off_1009778C0;
    sub_100091AE8(__p, "_CTKD_");
    v9 = sub_10000628C((uint64_t)v8, v7, (uint64_t)__p);
    if (v86 < 0)
      operator delete(__p[0]);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100924CB0);
    v10 = sub_100659944((uint64_t)off_1009778C0, v7);
    v11 = qword_1009998D0;
    if (os_log_type_enabled((os_log_t)qword_1009998D0, OS_LOG_TYPE_DEFAULT))
    {
      if (a3)
        v13 = "ready";
      else
        v13 = "disconnected";
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100924CB0);
      sub_10000602C((uint64_t)off_1009778C0, v7, (uint64_t)&v84);
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v84;
      else
        v14 = (std::string *)v84.__r_.__value_.__r.__words[0];
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100924CB0);
      v15 = sub_1000589DC((uint64_t)off_1009778C0, v7, 1);
      v16 = sub_1006498DC(v15);
      v17 = (id)objc_claimAutoreleasedReturnValue(v16);
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100924CB0);
      v18 = sub_100656AC0((uint64_t)off_1009778C0, v7);
      if (v18)
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_100924CB0);
        v19 = sub_1000589DC((uint64_t)off_1009778C0, v7, 0);
        v20 = sub_1006498DC(v19);
        v21 = (__CFString *)objc_claimAutoreleasedReturnValue(v20);
      }
      else
      {
        v21 = &stru_100941758;
      }
      *(_DWORD *)buf = 136447746;
      *(_QWORD *)&buf[4] = v13;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v7;
      *(_WORD *)&buf[22] = 2082;
      *(_QWORD *)&buf[24] = v14;
      v93 = 1024;
      v94 = v10;
      v95 = 2114;
      v96 = v17;
      v97 = 2114;
      v98 = v21;
      v99 = 1024;
      v100 = a4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Device %{public}s - {cbuuid: %{public}@, devicename: %{public}s, lmHandle: 0x%x, adv-addr: %{public}@, resolved-addr: %{public}@, result: %d}", buf, 0x40u);
      if (v18)

      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);

    }
    if (v9)
      sub_1002E8534(a1, v7, v71, a4);
    if (v71)
      sub_1002E0D4C(a1, v7);
    v22 = *(_QWORD **)(a1 + 224);
    if (v22 != (_QWORD *)(a1 + 232))
    {
      v64 = a1 + 104;
      v23 = "disconnection";
      if (v71)
        v23 = "connection";
      v62 = v23;
      if (v71)
        v24 = 2;
      else
        v24 = 1;
      v63 = v24;
      if (a4)
        v25 = 0;
      else
        v25 = v71;
      if (a4)
        v26 = v71;
      else
        v26 = 0;
      v65 = v25;
      v66 = v26;
      *(_QWORD *)&v12 = 67109634;
      v61 = v12;
      while (1)
      {
        v27 = v22[4];
        v28 = v22[5];
        memset(&v84, 0, sizeof(v84));
        sub_10050945C(v27, &v84);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28) == 1)
        {
          if ((v71 & 1) == 0)
          {
            objc_msgSend(*(id *)(v28 + 80), "removeObjectForKey:", v7);
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v29 = *(id *)(v28 + 216);
            v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v80, v91, 16);
            if (v30)
            {
              v31 = *(_QWORD *)v81;
              do
              {
                for (i = 0; i != v30; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v81 != v31)
                    objc_enumerationMutation(v29);
                  v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v28 + 216), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v80 + 1) + 8 * (_QWORD)i), v61));
                  objc_msgSend(v33, "removeObjectForKey:", v7);

                }
                v30 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v80, v91, 16);
              }
              while (v30);
            }

            if (!sub_10040D6C0(v28, v7, 0) && *(_BYTE *)(v28 + 28))
            {
              v34 = qword_100999898;
              if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEBUG))
              {
                sub_1000340DC(v27, (uint64_t)v87);
                v52 = v87;
                if (v90 < 0)
                  v52 = *(_BYTE **)v87;
                *(_QWORD *)buf = v61;
                *(_WORD *)&buf[8] = 2082;
                *(_QWORD *)&buf[10] = v52;
                *(_WORD *)&buf[18] = 2114;
                *(_QWORD *)&buf[20] = v7;
                _os_log_debug_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "deviceConnectionChanged, isConnection=%d, Notifying listeners that %{public}s is not interested in %{public}@", buf, 0x1Cu);
                if (v90 < 0)
                  operator delete(*(void **)v87);
              }
              sub_1002E4784((os_unfair_lock_s *)a1, v27, v7);
            }
          }
          goto LABEL_103;
        }
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28))
          break;
LABEL_103:
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v84.__r_.__value_.__l.__data_);
        v49 = (_QWORD *)v22[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v22[2];
            v51 = *v50 == (_QWORD)v22;
            v22 = v50;
          }
          while (!v51);
        }
        v22 = v50;
        if (v50 == (_QWORD *)(a1 + 232))
          goto LABEL_116;
      }
      v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v28 + 248), "objectForKeyedSubscript:", v7));
      if (sub_1003FD330(v28))
      {
        *(_QWORD *)v87 = 0;
        if (qword_1009778A8 != -1)
          dispatch_once(&qword_1009778A8, &stru_100924C30);
        v36 = off_1009778A0;
        sub_100030BCC(buf, v7);
        if (sub_100623C54((uint64_t)v36, buf, v87))
        {
          v37 = sub_1002B5578();
          if (v71)
            sub_1002B8A14(v37, *(unint64_t *)v87, v64);
          else
            sub_1002B8AEC(v37, *(unint64_t *)v87, v64);
        }
      }
      if (v35)
      {
        v38 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000340DC(v27, (uint64_t)buf);
          v39 = buf;
          if (buf[23] < 0)
            v39 = *(_BYTE **)buf;
          *(_DWORD *)v87 = 138543618;
          *(_QWORD *)&v87[4] = v7;
          v88 = 2082;
          v89 = v39;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Dispatching connection status update for device \"%{public}@\" to session \"%{public}s\"", v87, 0x16u);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (v65)
        {
          memset(buf, 0, 24);
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_100924CB0);
          sub_100658D7C((uint64_t)off_1009778C0, v7, (uint64_t *)buf);
          v40 = sub_100065478();
          sub_1002F6144(v79, (const void ***)buf);
          (*(void (**)(uint64_t, id, uint64_t *, _QWORD))(*(_QWORD *)v40 + 672))(v40, v7, v79, 0);
          sub_100056BAC((uint64_t)v79, (char *)v79[1]);
          sub_1002E41CC(v41, v27, v28, v7, 0, 0);
          sub_100056BAC((uint64_t)buf, *(char **)&buf[8]);
        }
        else
        {
          v44 = objc_msgSend(*(id *)(v28 + 80), "removeObjectForKey:", v7);
          if (v71)
          {
            sub_1002E41CC((uint64_t)v44, v27, v28, v7, a4, 0);
LABEL_102:

            goto LABEL_103;
          }
          v45 = objc_msgSend(v35, "enableAutoReconnect");
          sub_1002E86F0((uint64_t)v45, v27, v28, v7, a4, (uint64_t)v45);
          if (objc_msgSend(v35, "enableAutoReconnect"))
          {
            v46 = sub_1000419F4();
            v72[0] = _NSConcreteStackBlock;
            v72[1] = 3221225472;
            v72[2] = sub_1002E8978;
            v72[3] = &unk_100924AE8;
            v75 = a1;
            v76 = v27;
            v77 = v28;
            v73 = v7;
            v78 = v67;
            v74 = v35;
            sub_100041A34(v46, v72);

          }
          else
          {
            objc_msgSend(*(id *)(v28 + 248), "removeObjectForKey:", v7);
          }
        }
        if (!*(_BYTE *)(v28 + 24) && *(_BYTE *)(v28 + 129) == 4)
        {
          if (v71)
          {
            if ((objc_msgSend(v35, "connectionAlerts") & 1) == 0)
              goto LABEL_83;
          }
          else if (!objc_msgSend(v35, "disconnectionAlerts"))
          {
LABEL_83:
            v42 = qword_100999898;
            if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
            {
              sub_1000340DC(v27, (uint64_t)v87);
              v43 = v87;
              if (v90 < 0)
                v43 = *(_BYTE **)v87;
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = v62;
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v43;
              *(_WORD *)&buf[22] = 2114;
              *(_QWORD *)&buf[24] = v7;
              _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "Suppressing %{public}s alert on session \"%{public}s\" for device \"%{public}@\"", buf, 0x20u);
              if (v90 < 0)
                operator delete(*(void **)v87);
            }
            goto LABEL_95;
          }
          v47 = sub_100069D20();
          (*(void (**)(uint64_t, unint64_t, id, _QWORD))(*(_QWORD *)v47 + 96))(v47, v27, v7, v63);
        }
      }
LABEL_95:
      if (*(_BYTE *)(v28 + 45))
      {
        if (qword_1009778B8 != -1)
          dispatch_once(&qword_1009778B8, &stru_100924C90);
        sub_100696524(qword_1009778B0, v7, 1);
      }
      if ((v66 & 1) == 0)
      {
        v48 = *(_QWORD *)(v28 + 120);
        if (v48)
          (*(void (**)(uint64_t, _QWORD, id, _QWORD))(*(_QWORD *)v48 + 24))(v48, 0, v7, v71);
      }
      goto LABEL_102;
    }
  }
LABEL_116:
  v53 = *(_QWORD **)(a1 + 224);
  if (v53 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v55 = v53[4];
      v54 = (id *)v53[5];
      if (!(*((unsigned int (**)(id *))*v54 + 2))(v54))
      {
        v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54[31], "objectForKeyedSubscript:", v7));
        if (v56)
        {
          if ((v70 & 1) == 0)
          {
            sub_1002E41CC((uint64_t)objc_msgSend(v54[10], "removeObjectForKey:", v7), v55, (uint64_t)v54, v7, a4, 0);
            objc_msgSend(v54[31], "removeObjectForKey:", v7);
          }
        }
        else
        {
          v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54[32], "objectForKey:", v7));
          if (v56)
          {
            v57 = qword_100999898;
            if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
            {
              sub_1000340DC(v55, (uint64_t)&v84);
              v58 = (v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &v84
                  : (std::string *)v84.__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = 138543874;
              *(_QWORD *)&buf[4] = v7;
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v58;
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = v67;
              _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Reconnecting device \"%{public}@\" for session \"%{public}s\" linkReady %d", buf, 0x1Cu);
              if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v84.__r_.__value_.__l.__data_);
            }
            objc_msgSend(v54[32], "removeObjectForKey:", v7, v61);
            sub_1003FD8BC((uint64_t)v54, v55, v7, v56);
          }
        }

      }
      v59 = (_QWORD *)v53[1];
      if (v59)
      {
        do
        {
          v60 = v59;
          v59 = (_QWORD *)*v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          v60 = (_QWORD *)v53[2];
          v51 = *v60 == (_QWORD)v53;
          v53 = v60;
        }
        while (!v51);
      }
      v53 = v60;
    }
    while (v60 != (_QWORD *)(a1 + 232));
  }

}

void sub_1002E8058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  void *v58;
  void *v59;

  if (a52 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1002E8160(uint64_t a1, void *a2, unsigned int a3)
{
  sub_1002E7424(a1 - 24, a2, a3);
}

void sub_1002E8168(uint64_t a1, void *a2, char a3, int a4, char a5, int a6)
{
  id v11;
  uint64_t v12;
  id v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  char v20;

  v11 = a2;
  v12 = sub_1000419F4();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1002E8244;
  v14[3] = &unk_100918840;
  v16 = a1;
  v13 = v11;
  v15 = v13;
  v19 = a3;
  v20 = a5;
  v17 = a4;
  v18 = a6;
  sub_100041A34(v12, v14);

}

void sub_1002E8224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1002E8244(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(unsigned __int8 *)(a1 + 56);
    v6 = *(unsigned __int8 *)(a1 + 57);
    v7 = *(_DWORD *)(a1 + 48);
    v8 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)buf = 138544386;
    v18 = v4;
    v19 = 1024;
    v20 = v5;
    v21 = 1024;
    v22 = v7;
    v23 = 1024;
    v24 = v6;
    v25 = 1024;
    v26 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PeerInfoCB device:%{public}@ peerVersion:%d peerFeatures:%x localVersoin:%d localFeatures:%x", buf, 0x24u);
  }
  v9 = *(_QWORD **)(v2 + 224);
  v10 = (_QWORD *)(v2 + 232);
  if (v9 != (_QWORD *)(v2 + 232))
  {
    do
    {
      v11 = v9[4];
      v12 = (_QWORD *)v9[5];
      v13 = (*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
      if (!(_DWORD)v13)
        sub_1002E83B0(v13, v11, v12, *(void **)(a1 + 32), 0);
      v14 = (_QWORD *)v9[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v9[2];
          v16 = *v15 == (_QWORD)v9;
          v9 = v15;
        }
        while (!v16);
      }
      v9 = v15;
    }
    while (v15 != v10);
  }
}

void sub_1002E83B0(uint64_t a1, uint64_t a2, _QWORD *a3, void *a4, int a5)
{
  id v8;
  NSObject *v9;
  _BOOL8 v10;
  int v11;
  id v12;

  v8 = a4;
  if ((sub_1002E0C24((uint64_t)a3, (uint64_t)v8) & 1) != 0)
  {
    v9 = qword_100999898;
    v10 = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      v11 = 138543362;
      v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device %{public}@ ready for CL", (uint8_t *)&v11, 0xCu);
    }
    sub_10006F010(v10, (uint64_t)a3, a2, 10, 1);
    sub_100404030(a3, v8, a5);
  }

}

void sub_1002E84CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E84E4(uint64_t a1, void *a2, char a3, int a4, char a5, int a6)
{
  sub_1002E8168(a1 - 24, a2, a3, a4, a5, a6);
}

void sub_1002E84EC(uint64_t a1, void *a2, unsigned int a3)
{
  sub_1002E7488(a1, a2, 0, a3, 1);
}

void sub_1002E84FC(uint64_t a1, void *a2, unsigned int a3)
{
  sub_1002E7488(a1 - 24, a2, 0, a3, 1);
}

void sub_1002E8510(uint64_t a1, void *a2, unsigned int a3)
{
  sub_1002E7488(a1, a2, 0, a3, 0);
}

void sub_1002E8520(uint64_t a1, void *a2, unsigned int a3)
{
  sub_1002E7488(a1 - 24, a2, 0, a3, 0);
}

void sub_1002E8534(uint64_t a1, void *a2, int a3, int a4)
{
  id v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  NSObject *v17;
  _BOOL8 v18;
  uint64_t v19;
  int v20;
  id v21;
  __int16 v22;
  uint64_t v23;

  v7 = a2;
  if (a4)
    goto LABEL_17;
  if (!a3)
    goto LABEL_17;
  v8 = *(_QWORD **)(a1 + 224);
  v9 = (_QWORD *)(a1 + 232);
  if (v8 == (_QWORD *)(a1 + 232))
    goto LABEL_17;
  while ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v8[5] + 16))(v8[5]))
  {
LABEL_11:
    v14 = (_QWORD *)v8[1];
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = (_QWORD *)v8[2];
        v16 = *v15 == (_QWORD)v8;
        v8 = v15;
      }
      while (!v16);
    }
    v8 = v15;
    if (v15 == v9)
      goto LABEL_17;
  }
  v10 = v8[5];
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v10 + 248), "objectForKeyedSubscript:", v7));
  v12 = sub_1002E0C24(v10, (uint64_t)v7);
  if (v11)
    v13 = v12;
  else
    v13 = 0;
  if (v13 != 1 || !objc_msgSend(v11, "enableTransportBridging"))
  {

    goto LABEL_11;
  }
  v17 = qword_100999898;
  v18 = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT);
  if (v18)
  {
    v19 = *(_QWORD *)(v10 + 88);
    v20 = 138543618;
    v21 = v7;
    v22 = 2114;
    v23 = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Bridgable device %{public}@ connected for %{public}@", (uint8_t *)&v20, 0x16u);
  }
  sub_1002F0AC0(v18, v10, v7);

LABEL_17:
}

void sub_1002E86C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002E86F0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v10;
  NSObject *v11;
  _BOOL8 v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  NSObject *v16;
  CFAbsoluteTime Current;
  void *__p[2];
  char v19;
  uint8_t buf[32];
  __int128 v21;
  uint64_t v22;

  v10 = a4;
  v11 = qword_1009998C8;
  v12 = os_log_type_enabled((os_log_t)qword_1009998C8, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    v13 = *(_QWORD *)(a3 + 88);
    v14 = "N";
    *(_DWORD *)buf = 138543874;
    if ((_DWORD)a6)
      v14 = "Y";
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v13;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "App disconnected - {cbuuid: %{public}@, bundle: %{public}@, reconnecting: %s}", buf, 0x20u);
  }
  sub_10006F010(v12, a3, a2, 10, 1);
  sub_100405C1C(a3, v10, a5, a6);
  v15 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 344))(v15))
  {
    v16 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      Current = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = Current + 5.0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Adding grace period fLastGattAssertionGraceInit %f", buf, 0xCu);
    }
    *(CFAbsoluteTime *)(a3 + 56) = CFAbsoluteTimeGetCurrent() + 5.0;
  }
  v22 = 0;
  v21 = 0u;
  memset(buf, 0, sizeof(buf));
  sub_100091AE8(__p, (char *)objc_msgSend(*(id *)(a3 + 88), "UTF8String"));
  sub_10047D58C((uint64_t)buf, (__int128 *)__p, *(_BYTE *)(a3 + 129), v10, a5);
  if (v19 < 0)
    operator delete(__p[0]);
  if (qword_10097AC48 != -1)
    dispatch_once(&qword_10097AC48, &stru_100924DF0);
  sub_10006544C(qword_10097AC40, (uint64_t)buf);

  if ((char)buf[31] < 0)
    operator delete(*(void **)&buf[8]);

}

void sub_1002E8930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1002E8978(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  void **v13;
  int v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  void **v20;
  __int16 v21;
  int v22;

  v1 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD **)(v1 + 232);
  v2 = (_QWORD *)(v1 + 232);
  v3 = v4;
  if (v4)
  {
    v6 = *(_QWORD *)(a1 + 56);
    v7 = v2;
    do
    {
      v8 = v3[4];
      v9 = v8 >= v6;
      if (v8 >= v6)
        v10 = v3;
      else
        v10 = v3 + 1;
      if (v9)
        v7 = v3;
      v3 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != v2 && v6 >= v7[4])
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + 248), "removeObjectForKey:", *(_QWORD *)(a1 + 32));
      v11 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_QWORD *)(a1 + 32);
        sub_1000340DC(*(_QWORD *)(a1 + 56), (uint64_t)__p);
        if (v16 >= 0)
          v13 = __p;
        else
          v13 = (void **)__p[0];
        v14 = *(unsigned __int8 *)(a1 + 72);
        *(_DWORD *)buf = 138543874;
        v18 = v12;
        v19 = 2082;
        v20 = v13;
        v21 = 1024;
        v22 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Auto Reconnecting device \"%{public}@\" for session \"%{public}s\" linkReady %d", buf, 0x1Cu);
        if (v16 < 0)
          operator delete(__p[0]);
      }
      sub_1003FD8BC(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 56), *(void **)(a1 + 32), *(void **)(a1 + 40));
    }
  }
}

void sub_1002E8AD0(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  id v11;

  v11 = a3;
  v9 = sub_10000A1A4(a1, a2, 0);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 120);
    if (v10)
      (*(void (**)(uint64_t, _QWORD, id, uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, 0, v11, a4, a5);
  }

}

void sub_1002E8B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002E8B60(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  sub_1002E8AD0(a1 - 24, a2, a3, a4, a5);
}

void sub_1002E8B68(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  int v17;
  id v18;

  v9 = a2;
  v10 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
  {
    v17 = 138543362;
    v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Dispatching connection parameters update for device \"%{public}@\"", (uint8_t *)&v17, 0xCu);
  }
  v11 = *(_QWORD **)(a1 + 224);
  v12 = (_QWORD *)(a1 + 232);
  if (v11 != v12)
  {
    do
    {
      v13 = *(_QWORD *)(v11[5] + 120);
      if (v13)
        (*(void (**)(uint64_t, _QWORD, id, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 216))(v13, 0, v9, a3, a4, a5);
      v14 = (_QWORD *)v11[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v11[2];
          v16 = *v15 == (_QWORD)v11;
          v11 = v15;
        }
        while (!v16);
      }
      v11 = v15;
    }
    while (v15 != v12);
  }

}

void sub_1002E8CA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E8CBC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1002E8B68(a1 - 24, a2, a3, a4, a5);
}

void sub_1002E8CCC(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;
  unint64_t v23;
  NSObject *v24;
  NSObject *v25;
  void **v26;
  uint64_t v27;
  void *__p[2];
  char v29;
  uint8_t buf[4];
  id v31;
  __int16 v32;
  void **v33;

  v15 = a3;
  v18 = *(_QWORD **)(a1 + 232);
  v17 = (_QWORD *)(a1 + 232);
  v16 = v18;
  if (!v18)
    goto LABEL_12;
  v19 = v17;
  do
  {
    v20 = v16[4];
    v21 = v20 >= a2;
    if (v20 >= a2)
      v22 = v16;
    else
      v22 = v16 + 1;
    if (v21)
      v19 = v16;
    v16 = (_QWORD *)*v22;
  }
  while (*v22);
  if (v19 != v17 && (v23 = v19[4], v23 <= a2))
  {
    v25 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
    {
      sub_1000340DC(v23, (uint64_t)__p);
      v26 = v29 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 138543618;
      v31 = v15;
      v32 = 2082;
      v33 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Dispatching leDeviceTimeSyncResponse for device \"%{public}@\" to session \"%{public}s\"", buf, 0x16u);
      if (v29 < 0)
        operator delete(__p[0]);
    }
    v27 = *(_QWORD *)(v19[5] + 120);
    if (v27)
      (*(void (**)(uint64_t, _QWORD, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 224))(v27, 0, v15, a4, a5, a6, a7, a8);
  }
  else
  {
LABEL_12:
    v24 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "leDeviceTimeSyncResponse no session found", (uint8_t *)__p, 2u);
    }
  }

}

void sub_1002E8EA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E8EC0(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1002E8CCC(a1 - 24, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1002E8EC8(uint64_t a1, void *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  id v11;

  v11 = a2;
  v5 = *(_QWORD **)(a1 + 224);
  v6 = (_QWORD *)(a1 + 232);
  if (v5 != v6)
  {
    do
    {
      v7 = *(_QWORD *)(v5[5] + 120);
      if (v7)
        (*(void (**)(uint64_t, _QWORD, id, uint64_t))(*(_QWORD *)v7 + 232))(v7, 0, v11, a3);
      v8 = (_QWORD *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != v6);
  }

}

void sub_1002E8F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002E8F84(uint64_t a1, void *a2, uint64_t a3)
{
  sub_1002E8EC8(a1 - 24, a2, a3);
}

void sub_1002E8F8C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  id v22;

  v22 = a2;
  v15 = *(_QWORD **)(a1 + 224);
  v16 = (_QWORD *)(a1 + 232);
  if (v15 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v17 = v15[5];
      v18 = *(_QWORD *)(v17 + 120);
      if (v18 && *(_BYTE *)(v17 + 184))
      {
        if ((_DWORD)a3 == 138)
        {
          if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v17 + 16))(v15[5]))
          {
            sub_100409D94(v17, v22, 138, a4, a5, a6, a7, a8);
            goto LABEL_8;
          }
          v18 = *(_QWORD *)(v17 + 120);
        }
        (*(void (**)(uint64_t, _QWORD, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))(*(_QWORD *)v18 + 80))(v18, 0, v22, a3, a4, a5, a6, a7, a8);
      }
LABEL_8:
      v19 = (_QWORD *)v15[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v15[2];
          v21 = *v20 == (_QWORD)v15;
          v15 = v20;
        }
        while (!v21);
      }
      v15 = v20;
    }
    while (v20 != v16);
  }

}

void sub_1002E90C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002E90E0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  sub_1002E8F8C(a1 - 24, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1002E90E8(uint64_t a1, void *a2, const void *a3)
{
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _BYTE __dst[26092];

  v5 = a2;
  v6 = *(_QWORD **)(a1 + 224);
  v7 = (_QWORD *)(a1 + 232);
  if (v6 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v8 = v6[5];
      v9 = *(_QWORD *)(v8 + 120);
      if (v9 && *(_BYTE *)(v8 + 185))
      {
        memcpy(__dst, a3, sizeof(__dst));
        (*(void (**)(uint64_t, _QWORD, id, _BYTE *))(*(_QWORD *)v9 + 88))(v9, 0, v5, __dst);
      }
      v10 = (_QWORD *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v6[2];
          v12 = *v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      v6 = v11;
    }
    while (v11 != v7);
  }

}

void sub_1002E91F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E9210(uint64_t a1, void *a2, const void *a3)
{
  sub_1002E90E8(a1 - 24, a2, a3);
}

void sub_1002E9218(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, char a8, char a9, char a10, char a11, char a12, __int16 a13, int a14, char a15)
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  id v30;

  v30 = a2;
  v17 = *(_QWORD **)(a1 + 224);
  v18 = (_QWORD *)(a1 + 232);
  if (v17 != v18)
  {
    do
    {
      v19 = *(_QWORD *)(v17[5] + 120);
      if (v19)
      {
        BYTE4(v24) = a15;
        LODWORD(v24) = a14;
        HIWORD(v23) = a13;
        BYTE4(v23) = a12;
        BYTE3(v23) = a11;
        BYTE2(v23) = a10;
        BYTE1(v23) = a9;
        LOBYTE(v23) = a8;
        (*(void (**)(uint64_t, _QWORD, id, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 96))(v19, 0, v30, a3, a4, a5, a6, a7, v23, v24);
      }
      v20 = (_QWORD *)v17[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v17[2];
          v22 = *v21 == (_QWORD)v17;
          v17 = v21;
        }
        while (!v22);
      }
      v17 = v21;
    }
    while (v21 != v18);
  }

}

void sub_1002E9334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{

  _Unwind_Resume(a1);
}

void sub_1002E9348(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, char a8, char a9, char a10, char a11, char a12, __int16 a13, int a14, char a15)
{
  sub_1002E9218(a1 - 24, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

void sub_1002E9388(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  id v19;

  v19 = a2;
  v13 = *(_QWORD **)(a1 + 224);
  v14 = (_QWORD *)(a1 + 232);
  if (v13 != v14)
  {
    do
    {
      v15 = *(_QWORD *)(v13[5] + 120);
      if (v15)
        (*(void (**)(uint64_t, _QWORD, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 104))(v15, 0, v19, a3, a4, a5, a6, a7);
      v16 = (_QWORD *)v13[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v13[2];
          v18 = *v17 == (_QWORD)v13;
          v13 = v17;
        }
        while (!v18);
      }
      v13 = v17;
    }
    while (v17 != v14);
  }

}

void sub_1002E9460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002E9474(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_1002E9388(a1 - 24, a2, a3, a4, a5, a6, a7);
}

void sub_1002E947C(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4)
{
  id v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _OWORD v18[2];
  unsigned __int8 v19[16];

  v7 = a2;
  v8 = *(_QWORD **)(a1 + 224);
  v9 = (_QWORD *)(a1 + 232);
  if (v8 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v10 = v8[5];
      if (*(_QWORD *)(v10 + 120))
      {
        v11 = v8[4];
        if (qword_1009778A8 != -1)
          dispatch_once(&qword_1009778A8, &stru_100924C30);
        v12 = off_1009778A0;
        sub_100030BCC(v19, v7);
        if (sub_1006243B4((uint64_t)v12, v11, v19))
        {
          v13 = *(_QWORD *)(v10 + 120);
          v14 = a3[1];
          v18[0] = *a3;
          v18[1] = v14;
          (*(void (**)(uint64_t, _QWORD, id, _OWORD *, uint64_t))(*(_QWORD *)v13 + 112))(v13, 0, v7, v18, a4);
        }
      }
      v15 = (_QWORD *)v8[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v8[2];
          v17 = *v16 == (_QWORD)v8;
          v8 = v16;
        }
        while (!v17);
      }
      v8 = v16;
    }
    while (v16 != v9);
  }

}

void sub_1002E95D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E95F0(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4)
{
  sub_1002E947C(a1 - 24, a2, a3, a4);
}

void sub_1002E95F8(uint64_t a1)
{
  uint64_t v2;

  if (!*(_BYTE *)(a1 + 176))
  {
    v2 = sub_1000419F4();
    sub_100475CEC(v2, 5000, &stru_100924B08);
    *(_BYTE *)(a1 + 176) = 1;
  }
}

void sub_1002E9638(id a1)
{
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100924DD0);
  sub_1002E9678((uint64_t)off_100978168);
}

void sub_1002E9678(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  NSObject *v5;
  uint8_t v6[16];

  *(_BYTE *)(a1 + 176) = 0;
  sub_1002DD240(a1);
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100924C30);
  v2 = sub_100069E14((uint64_t)off_1009778A0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (objc_msgSend(v3, "count"))
  {

LABEL_6:
    sub_1002E95F8(a1);
    return;
  }
  v4 = objc_msgSend(*(id *)(a1 + 328), "count");

  if (v4)
    goto LABEL_6;
  v5 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Stopping device disconnection watchdog, as there are no more devices connected", v6, 2u);
  }
}

void sub_1002E9768(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E9778(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t *a5, unsigned int a6, uint64_t a7, void *a8)
{
  id v15;
  id v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  NSObject *v31;
  void *v32;
  void *v33[2];
  char v34;
  void *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  void *__p[2];
  char v39;
  uint8_t buf[16];
  int v41;

  v15 = a3;
  v16 = a8;
  v19 = *(_QWORD **)(a1 + 232);
  v18 = (_QWORD *)(a1 + 232);
  v17 = v19;
  if (v19)
  {
    v20 = v18;
    do
    {
      v21 = v17[4];
      v22 = v21 >= a2;
      if (v21 >= a2)
        v23 = v17;
      else
        v23 = v17 + 1;
      if (v22)
        v20 = v17;
      v17 = (_QWORD *)*v23;
    }
    while (*v23);
    if (v20 != v18 && v20[4] <= a2 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v20[5] + 16))(v20[5]))
    {
      v24 = v20[5];
      ++*(_QWORD *)(v24 + 368);
      if (*(_BYTE *)(v24 + 186))
      {
        if (qword_1009778B8 != -1)
          dispatch_once(&qword_1009778B8, &stru_100924C90);
        sub_10069B014(qword_1009778B0, 60);
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_100924CB0);
        v25 = off_1009778C0;
        sub_100091AE8(__p, "PrivateModeDevice");
        sub_1006576F0((uint64_t)v25, v15, (unsigned __int8 *)__p);
        if (v39 < 0)
          operator delete(__p[0]);
      }
      v26 = *(_QWORD *)(a4 + 8);
      v36 = 0;
      v37 = 0;
      v35 = 0;
      v27 = (uint64_t)sub_1000B61B8((char *)&v35, *(__int128 **)(v26 + 64), *(__int128 **)(v26 + 72), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v26 + 72) - *(_QWORD *)(v26 + 64)) >> 2));
      v28 = (unsigned __int8 *)v35;
      v29 = v36;
      if (v35 == v36)
      {
        v30 = (unsigned __int8 *)v35;
      }
      else
      {
        while (1)
        {
          *(_OWORD *)buf = xmmword_10073B594;
          v41 = 0;
          v27 = sub_100072DF0(v28, buf);
          if ((v27 & 1) != 0)
            break;
          v28 += 20;
          if (v28 == v29)
          {
            v28 = v29;
            break;
          }
        }
        v30 = v28;
        v28 = v36;
      }
      if (v30 != v28)
      {
        v31 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Set TAG as CarPlay", buf, 2u);
        }
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_100924CB0);
        v32 = off_1009778C0;
        sub_100091AE8(v33, "_CARPLAY_DEVICE_");
        v27 = sub_1006576F0((uint64_t)v32, v15, (unsigned __int8 *)v33);
        if (v34 < 0)
          operator delete(v33[0]);
      }
      sub_10006F010(v27, v24, a2, 10, 0);
      sub_100403538(v24, v15, a4, a5, a6, a7, v16);
      if (v35)
      {
        v36 = (unsigned __int8 *)v35;
        operator delete(v35);
      }
    }
  }

}

void sub_1002E9A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;

  if (a15 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void sub_1002E9AFC(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t *a5, unsigned int a6, uint64_t a7, void *a8)
{
  sub_1002E9778(a1 - 32, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1002E9B04(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t v16;
  NSObject *v17;
  _BOOL8 v18;
  void **v19;
  void *__p[2];
  char v21;
  uint8_t buf[4];
  void **v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;

  v7 = *(_QWORD **)(a1 + 232);
  v5 = (_QWORD *)(a1 + 232);
  v6 = v7;
  if (v7)
  {
    v12 = v5;
    do
    {
      v13 = v6[4];
      v14 = v13 >= a2;
      if (v13 >= a2)
        v15 = v6;
      else
        v15 = v6 + 1;
      if (v14)
        v12 = v6;
      v6 = (_QWORD *)*v15;
    }
    while (*v15);
    if (v12 != v5 && v12[4] <= a2 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v12[5] + 16))(v12[5]))
    {
      v16 = v12[5];
      v17 = qword_100999898;
      v18 = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT);
      if (v18)
      {
        sub_1000340DC(a2, (uint64_t)__p);
        if (v21 >= 0)
          v19 = __p;
        else
          v19 = (void **)__p[0];
        *(_DWORD *)buf = 136446978;
        v23 = v19;
        v24 = 1024;
        v25 = a3;
        v26 = 2048;
        v27 = a4;
        v28 = 2048;
        v29 = a5;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "leScanComplete session %{public}s result=%d totalRXTimeMS:%llu BtMCRxTimeMS:%llu", buf, 0x26u);
        if (v21 < 0)
          operator delete(__p[0]);
      }
      sub_10006F010(v18, v16, a2, 10, 0);
      sub_1004053B0(v16, a2, a3, a4);
    }
  }
}

void sub_1002E9C94(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  sub_1002E9B04(a1 - 32, a2, a3, a4, a5);
}

_QWORD *sub_1002E9C9C(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  v3 = (_QWORD *)result[28];
  v4 = result + 29;
  if (v3 != result + 29)
  {
    do
    {
      v7 = (_QWORD *)v3[5];
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
      if (!(_DWORD)result)
      {
        result = (_QWORD *)v7[15];
        if (result)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*result + 64))(result, 0, a2, a3);
      }
      v8 = (_QWORD *)v3[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v3[2];
          v10 = *v9 == (_QWORD)v3;
          v3 = v9;
        }
        while (!v10);
      }
      v3 = v9;
    }
    while (v9 != v4);
  }
  return result;
}

_QWORD *sub_1002E9D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002E9C9C((_QWORD *)(a1 - 32), a2, a3);
}

void sub_1002E9D54()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "LE Scans Paused", v1, 2u);
  }
}

void sub_1002E9DBC()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "LE Scans Resumed", v1, 2u);
  }
}

void sub_1002E9E24(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  id v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;

  v9 = a3;
  v10 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v19 = 138543874;
    v20 = v9;
    v21 = 1024;
    v22 = a4;
    v23 = 1024;
    v24 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "notifyLeSensorStateChanged: device: %{public}@, state: %d, type: %d", (uint8_t *)&v19, 0x18u);
  }
  v13 = *(_QWORD **)(a1 + 232);
  v12 = (_QWORD *)(a1 + 232);
  v11 = v13;
  if (v13)
  {
    v14 = v12;
    do
    {
      v15 = v11[4];
      v16 = v15 >= a2;
      if (v15 >= a2)
        v17 = v11;
      else
        v17 = v11 + 1;
      if (v16)
        v14 = v11;
      v11 = (_QWORD *)*v17;
    }
    while (*v17);
    if (v14 != v12 && v14[4] <= a2 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v14[5] + 16))(v14[5]))
    {
      v18 = v14[5];
      if (*(_BYTE *)(v18 + 304))
        (*(void (**)(_QWORD, unint64_t, id, uint64_t, uint64_t))(**(_QWORD **)(v18 + 120) + 280))(*(_QWORD *)(v18 + 120), a2, v9, a4, a5);
    }
  }

}

void sub_1002E9F7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E9F98(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  NSObject *v22;
  uint32_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  void **v27;
  void *__p[2];
  char v29;
  uint8_t buf[4];
  const char *v31;

  v11 = a2;
  v14 = *(_QWORD **)(a1 + 232);
  v13 = (_QWORD *)(a1 + 232);
  v12 = v14;
  if (!v14)
    goto LABEL_13;
  v15 = v13;
  do
  {
    v16 = v12[4];
    v17 = v16 >= a3;
    if (v16 >= a3)
      v18 = v12;
    else
      v18 = v12 + 1;
    if (v17)
      v15 = v12;
    v12 = (_QWORD *)*v18;
  }
  while (*v18);
  if (v15 == v13 || v15[4] > a3 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[5] + 16))(v15[5]))
  {
LABEL_13:
    v19 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0]) = 0;
      v20 = "Received GATT command complete for unregistered central session";
      v21 = (uint8_t *)__p;
      v22 = v19;
      v23 = 2;
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, v20, v21, v23);
    }
  }
  else
  {
    v24 = v15[5];
    v25 = (uint64_t)sub_1002E0C24(v24, (uint64_t)v11);
    if ((v25 & 1) != 0)
    {
      if (*(_QWORD *)(v24 + 120))
      {
        sub_10006F010(v25, v24, a3, 10, 1);
        (*(void (**)(_QWORD, _QWORD, id, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v24 + 120) + 160))(*(_QWORD *)(v24 + 120), 0, v11, a4, a5, a6);
      }
    }
    else
    {
      v26 = qword_100999898;
      if (!os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
        goto LABEL_16;
      if (!a3)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "NULL";
        v20 = "Received GATT command complete for session \"%{public}s\" with unknown device";
        v21 = buf;
        v22 = v26;
        v23 = 12;
        goto LABEL_15;
      }
      sub_1000340DC(a3, (uint64_t)__p);
      if (v29 >= 0)
        v27 = __p;
      else
        v27 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v31 = (const char *)v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Received GATT command complete for session \"%{public}s\" with unknown device", buf, 0xCu);
      if (v29 < 0)
        operator delete(__p[0]);
    }
  }
LABEL_16:

}

void sub_1002EA1CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002EA1EC(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1002E9F98(a1 - 48, a2, a3, a4, a5, a6);
}

void sub_1002EA1F4(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void **v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  int v23;
  NSObject *v24;
  _BOOL8 v25;
  void **v26;
  int v27;
  uint64_t v29;
  void **v30;
  const char *v31;
  NSObject *v32;
  uint32_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  void *__p[2];
  char v38;
  uint8_t buf[4];
  void **v40;
  __int16 v41;
  void **v42;

  v11 = a2;
  v14 = *(_QWORD **)(a1 + 232);
  v13 = (_QWORD *)(a1 + 232);
  v12 = v14;
  if (v14)
  {
    v15 = v13;
    do
    {
      v16 = v12[4];
      v17 = v16 >= a3;
      if (v16 >= a3)
        v18 = v12;
      else
        v18 = v12 + 1;
      if (v17)
        v15 = v12;
      v12 = (_QWORD *)*v18;
    }
    while (*v18);
    if (v15 != v13 && v15[4] <= a3 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[5] + 16))(v15[5]))
    {
      v20 = v15[5];
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v20 + 248), "objectForKeyedSubscript:", v11));
      v22 = v21;
      if (v21)
      {
        if (*(_BYTE *)(v20 + 24) || (v23 = *(unsigned __int8 *)(v20 + 129), (v23 & 0x30) != 0))
        {
          v24 = qword_100999898;
          v25 = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO);
          if (v25)
          {
            sub_1000340DC(a3, (uint64_t)__p);
            v26 = v38 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 138543618;
            v40 = v11;
            v41 = 2082;
            v42 = v26;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Dispatching GATT indication for device \"%{public}@\" to session \"%{public}s\"", buf, 0x16u);
            if (v38 < 0)
              operator delete(__p[0]);
          }
          if (sub_10006F010(v25, v20, a3, 10, 1))
          {
            v27 = *(unsigned __int8 *)(v20 + 129);
            if (v27 == 8 || v27 == 4)
              (*(void (**)(_QWORD, _QWORD, void **, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(v20 + 120)
                                                                                        + 120))(*(_QWORD *)(v20 + 120), 0, v11, 1, 10, 0);
          }
          sub_100407CB0((_QWORD *)v20, v11, a4, a5, a6, 0);
          goto LABEL_48;
        }
        if (v23 != 2)
        {
          if (objc_msgSend(v21, "notificationAlerts"))
          {
            v34 = sub_100069D20();
            (*(void (**)(uint64_t, unint64_t, void **, uint64_t))(*(_QWORD *)v34 + 96))(v34, a3, v11, 3);
            goto LABEL_48;
          }
          v35 = qword_100999898;
          if (!os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
            goto LABEL_48;
          sub_1000340DC(a3, (uint64_t)__p);
          if (v38 >= 0)
            v36 = __p;
          else
            v36 = (void **)__p[0];
          *(_DWORD *)buf = 138543618;
          v40 = v11;
          v41 = 2082;
          v42 = v36;
          v31 = "Ignoring indication for device \"%{public}@\" on suspended session \"%{public}s\" ";
          v32 = v35;
          v33 = 22;
LABEL_38:
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, v31, buf, v33);
          if (v38 < 0)
            operator delete(__p[0]);
        }
      }
      else
      {
        v29 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
        {
          sub_1000340DC(a3, (uint64_t)__p);
          if (v38 >= 0)
            v30 = __p;
          else
            v30 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v40 = v30;
          v31 = "Received GATT indication for session \"%{public}s\" with unknown device";
          v32 = v29;
          v33 = 12;
          goto LABEL_38;
        }
      }
LABEL_48:

      goto LABEL_15;
    }
  }
  v19 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Received GATT indication for unregistered central session", (uint8_t *)__p, 2u);
  }
LABEL_15:

}

void sub_1002EA578(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002EA5AC(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void **v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  id v15;
  __int16 v16;
  void **v17;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 224);
  if (v4 != (_QWORD *)(a1 + 232))
  {
    do
    {
      if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v4[5] + 16))(v4[5]))
      {
        v8 = v4[5];
        if (*(_QWORD *)(v8 + 120))
        {
          v9 = v4[4];
          if ((sub_1002E0C24(v4[5], (uint64_t)v3) & 1) != 0)
          {
            v10 = qword_100999898;
            if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
            {
              sub_1000340DC(v9, (uint64_t)__p);
              v11 = __p;
              if (v13 < 0)
                v11 = (void **)__p[0];
              *(_DWORD *)buf = 138543618;
              v15 = v3;
              v16 = 2082;
              v17 = v11;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Dispatching GAP name update for device \"%{public}@\" to session \"%{public}s\"", buf, 0x16u);
              if (v13 < 0)
                operator delete(__p[0]);
            }
            (*(void (**)(_QWORD, _QWORD, id))(**(_QWORD **)(v8 + 120) + 32))(*(_QWORD *)(v8 + 120), 0, v3);
          }
        }
      }
      v5 = (_QWORD *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != (_QWORD *)(a1 + 232));
  }

}

void sub_1002EA760(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002EA780(uint64_t a1, void *a2)
{
  sub_1002EA5AC(a1 - 40, a2);
}

void sub_1002EA788(uint64_t a1, void *a2, uint64_t *a3)
{
  NSObject *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  BTUUID *v13;
  void *v14;
  _OWORD *v15;
  __int128 v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  _BYTE *v28;
  uint64_t v29;
  _QWORD *v30;
  NSObject *v31;
  _BOOL8 v32;
  int v33;
  void **v34;
  void **v35;
  void **v36;
  _QWORD *v37;
  _QWORD *v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  _QWORD *v43;
  void *v44[2];
  char v45;
  void *v46;
  _DWORD *v47;
  char *v48;
  void *v49[2];
  char v50;
  _BYTE __p[22];
  __int16 v52;
  void **v53;
  uint8_t buf[16];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[144];
  uint64_t v62;

  v42 = a2;
  v5 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v42;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "GATT Device %@ services discovered", buf, 0xCu);
  }
  v6 = *(_QWORD **)(a1 + 224);
  v43 = (_QWORD *)(a1 + 232);
  if (v6 != (_QWORD *)(a1 + 232))
  {
    do
    {
      if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v6[5] + 16))(v6[5]))
      {
        v8 = v6[4];
        v7 = (_QWORD *)v6[5];
        if (sub_100401BB8(v7, v42))
        {
          v9 = (uint64_t)sub_10040563C((uint64_t)v7, (uint64_t)v42);
          if ((v9 & 1) == 0)
            sub_1002EAD70(v9, v8, (uint64_t)v7, v42, 1u);
        }
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v6[5] + 16))(v6[5]) == 1
        && objc_msgSend(*(id *)(v6[5] + 232), "count"))
      {
        v11 = v6[4];
        v10 = v6[5];
        v46 = 0;
        v47 = 0;
        v48 = 0;
        v62 = 0;
        v60 = 0u;
        memset(v61, 0, sizeof(v61));
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        *(_OWORD *)buf = 0u;
        v55 = 0u;
        sub_100272ADC((uint64_t)buf);
        for (i = *a3; i != a3[1]; i += 20)
        {
          v49[0] = 0;
          v49[1] = 0;
          v13 = +[BTUUID UUIDWithBytes:length:](BTUUID, "UUIDWithBytes:length:", v49, sub_1000689E4((unsigned __int8 *)i, v49));
          v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          if (objc_msgSend(*(id *)(v10 + 232), "containsObject:", v14))
          {
            v15 = v47;
            if (v47 >= (_DWORD *)v48)
            {
              v18 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v47 - (_BYTE *)v46) >> 2);
              v19 = v18 + 1;
              if (v18 + 1 > 0xCCCCCCCCCCCCCCCLL)
                abort();
              if (0x999999999999999ALL * ((v48 - (_BYTE *)v46) >> 2) > v19)
                v19 = 0x999999999999999ALL * ((v48 - (_BYTE *)v46) >> 2);
              if (0xCCCCCCCCCCCCCCCDLL * ((v48 - (_BYTE *)v46) >> 2) >= 0x666666666666666)
                v20 = 0xCCCCCCCCCCCCCCCLL;
              else
                v20 = v19;
              if (v20)
                v21 = (char *)sub_1000B58EC((uint64_t)&v48, v20);
              else
                v21 = 0;
              v22 = &v21[20 * v18];
              v23 = *(_OWORD *)i;
              *((_DWORD *)v22 + 4) = *(_DWORD *)(i + 16);
              *(_OWORD *)v22 = v23;
              v25 = (char *)v46;
              v24 = (char *)v47;
              v26 = v22;
              if (v47 != v46)
              {
                do
                {
                  v27 = *(_OWORD *)(v24 - 20);
                  *((_DWORD *)v26 - 1) = *((_DWORD *)v24 - 1);
                  *(_OWORD *)(v26 - 20) = v27;
                  v26 -= 20;
                  v24 -= 20;
                }
                while (v24 != v25);
                v24 = (char *)v46;
              }
              v17 = v22 + 20;
              v46 = v26;
              v47 = v22 + 20;
              v48 = &v21[20 * v20];
              if (v24)
                operator delete(v24);
            }
            else
            {
              v16 = *(_OWORD *)i;
              v47[4] = *(_DWORD *)(i + 16);
              *v15 = v16;
              v17 = (_DWORD *)v15 + 5;
            }
            v47 = v17;
            sub_10006887C(i, __p);
            if (v52 >= 0)
              v28 = __p;
            else
              v28 = *(_BYTE **)__p;
            if (v52 >= 0)
              v29 = HIBYTE(v52);
            else
              v29 = *(_QWORD *)&__p[8];
            v30 = sub_1002614D8(buf, (uint64_t)v28, v29);
            sub_1002614D8(v30, (uint64_t)" ", 1);
            if (SHIBYTE(v52) < 0)
              operator delete(*(void **)__p);
          }

        }
        if (v47 != v46 && *(_QWORD *)(v10 + 120))
        {
          v31 = qword_100999898;
          v32 = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO);
          if (v32)
          {
            std::stringbuf::str(&buf[8]);
            v33 = v50;
            v34 = (void **)v49[0];
            sub_1000340DC(v11, (uint64_t)v44);
            v35 = v49;
            if (v33 < 0)
              v35 = v34;
            v36 = v44;
            if (v45 < 0)
              v36 = (void **)v44[0];
            *(_DWORD *)__p = 136446722;
            *(_QWORD *)&__p[4] = v35;
            *(_WORD *)&__p[12] = 2114;
            *(_QWORD *)&__p[14] = v42;
            v52 = 2082;
            v53 = v36;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Dispatching solicited services update [%{public}s] for device \"%{public}@\" to session \"%{public}s\"", __p, 0x20u);
            if (v45 < 0)
              operator delete(v44[0]);
            if (v50 < 0)
              operator delete(v49[0]);
          }
          sub_10006F010(v32, v10, v11, 10, 0);
          (*(void (**)(_QWORD, _QWORD, id, void **))(**(_QWORD **)(v10 + 120) + 184))(*(_QWORD *)(v10 + 120), 0, v42, &v46);
        }
        *(_QWORD *)buf = v41;
        *(_QWORD *)&buf[*(_QWORD *)(v41 - 24)] = v40;
        if (SHIBYTE(v59) < 0)
          operator delete(*((void **)&v58 + 1));
        std::streambuf::~streambuf(&buf[8]);
        std::ios::~ios(v61);
        if (v46)
        {
          v47 = v46;
          operator delete(v46);
        }
      }
      v37 = (_QWORD *)v6[1];
      if (v37)
      {
        do
        {
          v38 = v37;
          v37 = (_QWORD *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          v38 = (_QWORD *)v6[2];
          v39 = *v38 == (_QWORD)v6;
          v6 = v38;
        }
        while (!v39);
      }
      v6 = v38;
    }
    while (v38 != v43);
  }

}

void sub_1002EACD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39)
{
  if (a31 < 0)
    operator delete(__p);
  sub_100272CFC((uint64_t)&a39);
  if (a23)
    operator delete(a23);

  _Unwind_Resume(a1);
}

void sub_1002EAD70(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned int a5)
{
  id v8;
  NSObject *v9;
  _BOOL8 v10;
  void **v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  void **v15;
  __int16 v16;
  id v17;
  __int16 v18;
  unsigned int v19;

  v8 = a4;
  v9 = qword_100999898;
  v10 = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    sub_1000340DC(a2, (uint64_t)__p);
    if (v13 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    v15 = v11;
    v16 = 2112;
    v17 = v8;
    v18 = 1024;
    v19 = a5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "sending connectionEvent session:%s device:%@ connected:%d", buf, 0x1Cu);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  sub_10006F010(v10, a3, a2, 5, 1);
  sub_100405648(a3, v8, a5);

}

void sub_1002EAEA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002EAEBC(uint64_t a1, void *a2, uint64_t *a3)
{
  sub_1002EA788(a1 - 40, a2, a3);
}

void sub_1002EAEC4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  id v13;

  v13 = a2;
  v7 = *(_QWORD **)(a1 + 224);
  v8 = (_QWORD *)(a1 + 232);
  if (v7 != (_QWORD *)(a1 + 232))
  {
    do
    {
      if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v7[5] + 16))(v7[5]))
      {
        v9 = (_QWORD *)v7[5];
        if ((sub_1002E0C24((uint64_t)v9, (uint64_t)v13) & 1) != 0)
          sub_100407B6C(v9, v13, a3, a4);
      }
      v10 = (_QWORD *)v7[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v7[2];
          v12 = *v11 == (_QWORD)v7;
          v7 = v11;
        }
        while (!v12);
      }
      v7 = v11;
    }
    while (v11 != v8);
  }

}

void sub_1002EAF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002EAFA8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_1002EAEC4(a1 - 40, a2, a3, a4);
}

_QWORD *sub_1002EAFB0(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  uint64_t v6;

  v1 = (_QWORD *)result[28];
  v2 = result + 29;
  if (v1 != result + 29)
  {
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v1[5] + 16))(v1[5]);
      if (!(_DWORD)result)
      {
        v6 = v1[5];
        result = objc_msgSend(*(id *)(v6 + 248), "count");
        if (result)
        {
          result = *(_QWORD **)(v6 + 120);
          if (result)
            result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 192))(result, 0);
        }
      }
      v3 = (_QWORD *)v1[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v1[2];
          v5 = *v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
  return result;
}

_QWORD *sub_1002EB05C(uint64_t a1)
{
  return sub_1002EAFB0((_QWORD *)(a1 - 40));
}

void sub_1002EB06C(uint64_t a1, void *a2, unsigned int a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v5 = a2;
  v11 = 0;
  v6 = sub_1002EB168(a1, a3, &v11);
  if (v6 && v11)
  {
    v7 = *(void **)(v6 + 216);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (unsigned __int16)a3));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v8));

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v9, "setObject:forKey:", v10, v5);

  }
}

void sub_1002EB128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1002EB168(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned int v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  v3 = *(_QWORD **)(a1 + 224);
  v4 = (_QWORD *)(a1 + 232);
  if (v3 == (_QWORD *)(a1 + 232))
    return 0;
  v6 = HIWORD(a2);
  while (1)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v3[5] + 16))(v3[5]) == 1)
    {
      result = v3[5];
      if (v6 == *(unsigned __int16 *)(result + 224))
        break;
    }
    v8 = (_QWORD *)v3[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v3[2];
        v10 = *v9 == (_QWORD)v3;
        v3 = v9;
      }
      while (!v10);
    }
    v3 = v9;
    if (v9 == v4)
      return 0;
  }
  if (a3)
    *a3 = v3[4];
  return result;
}

void sub_1002EB214(uint64_t a1, void *a2, unsigned int a3)
{
  sub_1002EB06C(a1 - 56, a2, a3);
}

_QWORD *sub_1002EB21C(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  v1 = (_QWORD *)result[28];
  v2 = result + 29;
  if (v1 != result + 29)
  {
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v1[5] + 16))(v1[5]);
      if ((_DWORD)result != 3)
      {
        result = *(_QWORD **)(v1[5] + 120);
        if (result)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 168))(result, 0);
      }
      v3 = (_QWORD *)v1[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v1[2];
          v5 = *v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
  return result;
}

_QWORD *sub_1002EB2B0(uint64_t a1)
{
  return sub_1002EB21C((_QWORD *)(a1 - 56));
}

void sub_1002EB2B8(os_unfair_lock_s *a1, void *a2, unsigned int *a3, unsigned __int16 *a4, uint64_t a5, unsigned int *a6, char a7)
{
  id v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unsigned int *size;
  _BOOL8 v20;
  uint64_t v21;
  std::string *p_p;
  unsigned int *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (**v29)();
  unsigned int *v30;
  int v31;
  uint64_t (**v32)();
  unsigned int *v33;
  uint64_t v34;
  std::string __p;
  uint64_t (**v36)();
  unsigned int *v37;

  v13 = a2;
  v34 = 0;
  v14 = *a3;
  v15 = sub_1002EB168((uint64_t)a1, *a3, &v34);
  v16 = v15;
  v17 = v34;
  if (v15)
    v18 = v34 == 0;
  else
    v18 = 1;
  if (v18)
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      sub_1006DD7CC();
    if (qword_10097AC18 != -1)
      dispatch_once(&qword_10097AC18, &stru_100924C70);
    v32 = &off_100918258;
    v33 = 0;
    sub_1003F3CD4(qword_10097AC10, a6, 242, (uint64_t)&v32, (int *)a3);
    v32 = &off_100918258;
    size = v33;
    if (v33)
      goto LABEL_37;
  }
  else if (*(_BYTE *)(v15 + 24) || (*(_BYTE *)(v15 + 129) & 0x30) != 0)
  {
    if (!sub_10040D6C0(v15, v13, 1) && *(_BYTE *)(v16 + 28))
    {
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEBUG))
      {
        sub_1000340DC(v34, (uint64_t)&v32);
        sub_1006DD788();
      }
      sub_1002E4784(a1, v34, v13);
    }
    v20 = sub_1000452EC(a5);
    if (v20)
    {
      sub_10006F010(v20, v16, v34, 10, 0);
      LODWORD(__p.__r_.__value_.__l.__data_) = (unsigned __int16)v14;
      sub_10040B9D4((_QWORD *)v16, 0, v13, (unsigned int *)&__p, a4, a6);
      if ((a7 & 1) != 0)
      {
        v21 = sub_10005D5A4();
        p_p = &__p;
        sub_10050945C(v34, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v23 = *(unsigned int **)(a5 + 8);
        v29 = &off_100918258;
        v30 = v23;
        if (v23)
          sub_10003C37C((uint64_t)v23);
        (*(void (**)(uint64_t, uint64_t, std::string *, id, uint64_t (***)()))(*(_QWORD *)v21 + 40))(v21, 4, p_p, v13, &v29);
        v29 = &off_100918258;
        if (v30)
          sub_100056AAC(v30);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_38;
    }
    v24 = *a4;
    if (sub_10003F8C4(a5) >= v24)
    {
      if (qword_10097AC18 != -1)
        dispatch_once(&qword_10097AC18, &stru_100924C70);
      v25 = qword_10097AC10;
      v26 = sub_10003EB18(a5);
      v27 = *a4;
      v28 = sub_10003F8C4(a5);
      sub_10003994C(&__p, (const void *)(v26 + v27), v28 - *a4);
      v31 = 0;
      sub_1003F3CD4(v25, a6, 0, (uint64_t)&__p, &v31);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_100918258;
    }
    else
    {
      if (qword_10097AC18 != -1)
        dispatch_once(&qword_10097AC18, &stru_100924C70);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_100918258;
      __p.__r_.__value_.__l.__size_ = 0;
      sub_1003F3CD4(qword_10097AC10, a6, 7, (uint64_t)&__p, (int *)a3);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_100918258;
    }
    size = (unsigned int *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
LABEL_37:
      sub_100056AAC(size);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
    {
      sub_1000340DC(v17, (uint64_t)&v32);
      sub_1006DD744();
    }
    if (qword_10097AC18 != -1)
      dispatch_once(&qword_10097AC18, &stru_100924C70);
    v36 = &off_100918258;
    v37 = 0;
    sub_1003F3CD4(qword_10097AC10, a6, 242, (uint64_t)&v36, (int *)a3);
    v36 = &off_100918258;
    size = v37;
    if (v37)
      goto LABEL_37;
  }
LABEL_38:

}

void sub_1002EB6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;

  _Unwind_Resume(a1);
}

void sub_1002EB78C(uint64_t a1, void *a2, unsigned int *a3, unsigned __int16 *a4, uint64_t a5, unsigned int *a6, char a7)
{
  sub_1002EB2B8((os_unfair_lock_s *)(a1 - 56), a2, a3, a4, a5, a6, a7);
}

void sub_1002EB794(os_unfair_lock_s *a1, void *a2, unsigned int **a3, unsigned int *a4, int a5)
{
  id v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  std::string *p_p;
  uint64_t (**v20)();
  unsigned int *v21;
  uint64_t (**v22)();
  unsigned int *v23;
  uint64_t v24;
  std::string __p;
  uint64_t (**v26)();
  unsigned int *v27;

  v9 = a2;
  v10 = *a3;
  if (*a3 == a3[1])
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_FAULT))
      sub_1006DD82C();
    if (qword_10097AC18 != -1)
      dispatch_once(&qword_10097AC18, &stru_100924C70);
    v22 = &off_100918258;
    v23 = 0;
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    sub_1003F3CD4(qword_10097AC10, a4, 242, (uint64_t)&v22, (int *)&__p);
    v22 = &off_100918258;
LABEL_17:
    v15 = v23;
    if (!v23)
      goto LABEL_42;
    goto LABEL_18;
  }
  v24 = 0;
  v11 = sub_1002EB168((uint64_t)a1, *v10, &v24);
  v12 = v11;
  v13 = v24;
  if (v11)
    v14 = v24 == 0;
  else
    v14 = 1;
  if (v14)
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      sub_1006DD7CC();
    if (qword_10097AC18 != -1)
      dispatch_once(&qword_10097AC18, &stru_100924C70);
    v22 = &off_100918258;
    v23 = 0;
    sub_1003F3CD4(qword_10097AC10, a4, 242, (uint64_t)&v22, (int *)v10);
    v22 = &off_100918258;
    goto LABEL_17;
  }
  if (*(_BYTE *)(v11 + 24) || (*(_BYTE *)(v11 + 129) & 0x30) != 0)
  {
    v16 = sub_10040D6C0(v11, v9, 1);
    if (!(_DWORD)v16 && *(_BYTE *)(v12 + 28))
    {
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEBUG))
      {
        sub_1000340DC(v24, (uint64_t)&v22);
        sub_1006DD89C();
      }
      sub_1002E4784(a1, v24, v9);
    }
    v17 = a3[1];
    while (v10 != v17)
    {
      *v10 = *(unsigned __int16 *)v10;
      v10 += 8;
    }
    sub_10006F010(v16, v12, v24, 10, 0);
    sub_10040BBC8((_QWORD *)v12, 0, v9, a3, a4);
    if (a5)
    {
      v18 = sub_10005D5A4();
      sub_10050945C(v24, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v20 = &off_100918258;
      v21 = 0;
      (*(void (**)(uint64_t, uint64_t, std::string *, id, uint64_t (***)()))(*(_QWORD *)v18 + 40))(v18, 4, p_p, v9, &v20);
      v20 = &off_100918258;
      if (v21)
        sub_100056AAC(v21);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_42;
  }
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
  {
    sub_1000340DC(v13, (uint64_t)&v22);
    sub_1006DD858();
  }
  if (qword_10097AC18 != -1)
    dispatch_once(&qword_10097AC18, &stru_100924C70);
  v26 = &off_100918258;
  v27 = 0;
  sub_1003F3CD4(qword_10097AC10, a4, 242, (uint64_t)&v26, (int *)v10);
  v26 = &off_100918258;
  v15 = v27;
  if (v27)
LABEL_18:
    sub_100056AAC(v15);
LABEL_42:

}

void sub_1002EBB2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1002EBBB4(uint64_t a1, void *a2, unsigned int **a3, unsigned int *a4, int a5)
{
  sub_1002EB794((os_unfair_lock_s *)(a1 - 56), a2, a3, a4, a5);
}

void sub_1002EBBBC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  int64_t v6;
  _BYTE *v7;
  void **v8;
  _BYTE *v9;
  std::string::size_type v10;
  std::string *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  std::string __str;
  std::string v16;
  char v17;

  v4 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEBUG))
    sub_1006DD8E0(a1, v4);
  sub_1000340DC(*(_QWORD *)(a1 + 40), (uint64_t)&__str);
  v5 = __p;
  sub_1000340DC(*(_QWORD *)(a1 + 40), (uint64_t)__p);
  if ((v14 & 0x80u) == 0)
    v6 = v14;
  else
    v6 = (int64_t)__p[1];
  if ((v14 & 0x80u) != 0)
    v5 = (void **)__p[0];
  v7 = (char *)v5 + v6;
  if (v6 >= 1)
  {
    v8 = v5;
    do
    {
      v9 = memchr(v8, 45, v6);
      if (!v9)
        break;
      if (*v9 == 45)
        goto LABEL_14;
      v8 = (void **)(v9 + 1);
      v6 = v7 - (_BYTE *)v8;
    }
    while (v7 - (_BYTE *)v8 > 0);
  }
  v9 = v7;
LABEL_14:
  if (v9 == v7)
    v10 = -1;
  else
    v10 = v9 - (_BYTE *)v5;
  std::string::basic_string(&v16, &__str, 0, v10, (std::allocator<char> *)&v17);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v16;
  else
    v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11));
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)a2 + 24))(a2, v12, *(_QWORD *)(a1 + 32), 1);

}

void sub_1002EBD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

void sub_1002EBD84(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;

  v2 = a2;
  v4 = v2;
  if (qword_1009778C8 == -1)
  {
    v3 = v2;
  }
  else
  {
    dispatch_once(&qword_1009778C8, &stru_100924CB0);
    v3 = v4;
  }
  sub_100653040((uint64_t)off_1009778C0, v3);

}

void sub_1002EBDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002EBE00(os_unfair_lock_s *a1, unsigned int *a2, void *a3, int a4)
{
  id v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  _BYTE v14[24];
  uint64_t v15;

  v7 = a3;
  v15 = 0;
  v8 = *a2;
  v9 = sub_1002EB168((uint64_t)a1, *a2, &v15);
  v10 = v9;
  if (v9)
    v11 = v15 == 0;
  else
    v11 = 1;
  if (v11)
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      sub_1006DD7CC();
  }
  else
  {
    v12 = sub_10040D6C0(v9, v7, 1);
    if (!(_DWORD)v12 && *(_BYTE *)(v10 + 28))
    {
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEBUG))
      {
        sub_1000340DC(v15, (uint64_t)v14);
        sub_1006DD9AC();
      }
      sub_1002E4784(a1, v15, v7);
    }
    sub_10006F010(v12, v10, v15, 10, 0);
    v13 = (unsigned __int16)v8;
    sub_10040BEB8((_QWORD *)v10, 0, &v13, v7, a4);
  }

}

void sub_1002EBF6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002EBF8C(uint64_t a1, unsigned int *a2, void *a3, int a4)
{
  sub_1002EBE00((os_unfair_lock_s *)(a1 - 56), a2, a3, a4);
}

void sub_1002EBF94(uint64_t a1, unsigned int *a2, void *a3)
{
  id v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v5 = a3;
  v13 = 0;
  v6 = *a2;
  v7 = sub_1002EB168(a1, *a2, &v13);
  v8 = (_QWORD *)v7;
  v9 = v13;
  if (v7)
    v10 = v13 == 0;
  else
    v10 = 1;
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      sub_1006DD7CC();
  }
  else
  {
    if (*(_QWORD *)(v7 + 120) && *(_BYTE *)(v7 + 24))
    {
      v11 = sub_100069D20();
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, v9, 10, 0);
    }
    v12 = (unsigned __int16)v6;
    sub_10040C02C(v8, 0, &v12, v5);
  }

}

void sub_1002EC078(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002EC08C(uint64_t a1, unsigned int *a2, void *a3)
{
  sub_1002EBF94(a1 - 56, a2, a3);
}

BOOL sub_1002EC094(uint64_t a1, void *a2, BOOL *a3)
{
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  _BOOL8 v8;

  v5 = a2;
  v6 = sub_1002E7160(a1, v5, 0);
  v7 = (_QWORD *)(a1 + 232);
  if (a3 && v7 != v6)
    *a3 = *(_DWORD *)(v6[5] + 32) == 2;
  v8 = v7 != v6;

  return v8;
}

void sub_1002EC108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1002EC118(uint64_t a1, void *a2, BOOL *a3)
{
  return sub_1002EC094(a1 - 64, a2, a3);
}

void sub_1002EC120(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  void **v12;
  uint64_t v13;
  NSObject *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint8_t buf[4];
  id v30;
  __int16 v31;
  void **v32;

  v7 = a2;
  v8 = sub_1002E7160(a1, v7, 0);
  v9 = v8;
  if ((_QWORD *)(a1 + 232) == v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      sub_1006DD9F0();
  }
  else
  {
    v10 = v8[5];
    if (*(_DWORD *)(v10 + 32) == 2)
    {
      v11 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000340DC(v9[4], (uint64_t)__p);
        v12 = (SBYTE7(v18) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 138543618;
        v30 = v7;
        v31 = 2082;
        v32 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Dispatching programmatic pairing request for device \"%{public}@\" to session \"%{public}s\"", buf, 0x16u);
        if (SBYTE7(v18) < 0)
          operator delete(__p[0]);
      }
      v13 = *(_QWORD *)(v10 + 120);
      if (v13)
      {
        (*(void (**)(uint64_t, _QWORD, id, uint64_t, uint64_t))(*(_QWORD *)v13 + 128))(v13, 0, v7, a3, a4);
      }
      else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      {
        sub_1000340DC(v9[4], (uint64_t)__p);
        sub_1006DDA54();
      }
    }
    else
    {
      v14 = qword_100999898;
      if ((_DWORD)a3 == 5)
      {
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
          sub_1006DDAA0();
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        *(_OWORD *)__p = 0u;
        v18 = 0u;
        sub_10068CC70(__p, 0, 0);
        if (qword_1009778B8 != -1)
          dispatch_once(&qword_1009778B8, &stru_100924C90);
        sub_100696A18(qword_1009778B0, 0, v7, 0, (uint64_t)__p);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000340DC(v9[4], (uint64_t)__p);
          v15 = (SBYTE7(v18) & 0x80u) == 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 138543618;
          v30 = v7;
          v31 = 2082;
          v32 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Displaying pairing request alert for device \"%{public}@\" on behalf of session \"%{public}s\"", buf, 0x16u);
          if (SBYTE7(v18) < 0)
            operator delete(__p[0]);
        }
        v16 = sub_100069D20();
        (*(void (**)(uint64_t, id, uint64_t, uint64_t))(*(_QWORD *)v16 + 112))(v16, v7, a3, a4);
        if ((_DWORD)a3 == 1)
        {
          if (qword_1009778B8 != -1)
            dispatch_once(&qword_1009778B8, &stru_100924C90);
          sub_1006966C0(qword_1009778B0, v7, 1, a4);
        }
      }
    }
  }

}

void sub_1002EC470(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002EC49C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_1002EC120(a1 - 64, a2, a3, a4);
}

void sub_1002EC4A4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  void *v14;
  int v15;
  NSObject *v16;
  void *v17;
  _BOOL4 v18;
  void *v19;
  int v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  NSObject *v26;
  void *v27[2];
  char v28;
  uint64_t v29[3];
  void *v30[2];
  char v31;
  void *__p[2];
  char v33;
  uint8_t buf[32];
  __int128 v35;
  uint64_t v36;
  _BYTE v37[24];

  v5 = a2;
  sub_1002A8EA8(20, 0, v5);
  v6 = sub_100069D20();
  (*(void (**)(uint64_t, id))(*(_QWORD *)v6 + 128))(v6, v5);
  v7 = *(_QWORD **)(a1 + 224);
  v8 = (_QWORD *)(a1 + 232);
  if (v7 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v9 = v7[5];
      if (*(_DWORD *)(v9 + 32))
      {
        v10 = *(_QWORD *)(v9 + 120);
        if (v10)
          (*(void (**)(uint64_t, _QWORD, id, uint64_t))(*(_QWORD *)v10 + 136))(v10, 0, v5, a3);
      }
      v11 = (_QWORD *)v7[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v7[2];
          v13 = *v12 == (_QWORD)v7;
          v7 = v12;
        }
        while (!v13);
      }
      v7 = v12;
    }
    while (v12 != v8);
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100924CB0);
  v14 = off_1009778C0;
  sub_100091AE8(__p, "_CTKD_");
  v15 = sub_10000628C((uint64_t)v14, v5, (uint64_t)__p);
  if (v33 < 0)
    operator delete(__p[0]);
  v16 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Pairing completed, checking if %{public}@ has tag \"_CTKD_\" %d", buf, 0x12u);
  }
  if (v15)
  {
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100924C30);
    v17 = off_1009778A0;
    sub_100030BCC(buf, v5);
    v18 = sub_100069F08((uint64_t)v17, buf);
    sub_1002E8534(a1, v5, v18, a3);
  }
  if (!(_DWORD)a3)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100924CB0);
    v19 = off_1009778C0;
    sub_100091AE8(v30, "_UNPAIR_AFTER_DISCONNECTION_");
    v20 = sub_10000628C((uint64_t)v19, v5, (uint64_t)v30);
    v21 = v20;
    if (v31 < 0)
    {
      operator delete(v30[0]);
      if ((v21 & 1) == 0)
        goto LABEL_22;
    }
    else if (!v20)
    {
      goto LABEL_22;
    }
    v22 = *(_QWORD **)(a1 + 224);
    if (v22 != v8)
    {
      while (1)
      {
        v23 = v22[5];
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23))
        {
          if (sub_1002E0C24(v23, (uint64_t)v5))
            break;
        }
        v24 = (_QWORD *)v22[1];
        if (v24)
        {
          do
          {
            v25 = v24;
            v24 = (_QWORD *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v25 = (_QWORD *)v22[2];
            v13 = *v25 == (_QWORD)v22;
            v22 = v25;
          }
          while (!v13);
        }
        v22 = v25;
        if (v25 == v8)
          goto LABEL_22;
      }
      v26 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      {
        sub_1000340DC(v22[4], (uint64_t)v29);
        sub_1006DDB04((uint64_t)v5, v29, (uint64_t)v37, v26);
      }
      v36 = 0;
      v35 = 0u;
      memset(buf, 0, sizeof(buf));
      sub_100091AE8(v27, (char *)objc_msgSend(*(id *)(v23 + 88), "UTF8String"));
      sub_10047D540((uint64_t)buf, (__int128 *)v27, *(_BYTE *)(v23 + 129), v5, 0, 178);
      if (v28 < 0)
        operator delete(v27[0]);
      if (qword_10097AC48 != -1)
        dispatch_once(&qword_10097AC48, &stru_100924DF0);
      sub_10006544C(qword_10097AC40, (uint64_t)buf);

      if ((char)buf[31] < 0)
        operator delete(*(void **)&buf[8]);
    }
  }
LABEL_22:

}

void sub_1002EC890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  void *v30;

  _Unwind_Resume(a1);
}

void sub_1002EC914(uint64_t a1, void *a2, uint64_t a3)
{
  sub_1002EC4A4(a1 - 72, a2, a3);
}

void sub_1002EC91C(_QWORD *a1, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  id v9;

  v9 = a2;
  v3 = (_QWORD *)a1[28];
  if (v3 != a1 + 29)
  {
    do
    {
      v4 = v3[5];
      if (*(_DWORD *)(v4 + 32))
      {
        v5 = *(_QWORD *)(v4 + 120);
        if (v5)
        {
          (*(void (**)(uint64_t, _QWORD, id))(*(_QWORD *)v5 + 144))(v5, 0, v9);
          (*(void (**)(_QWORD *, id, _QWORD))(*a1 + 64))(a1, v9, 0);
        }
      }
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != a1 + 29);
  }

}

void sub_1002EC9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002EC9F0(uint64_t a1, void *a2)
{
  sub_1002EC91C((_QWORD *)(a1 - 72), a2);
}

void sub_1002EC9F8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  NSObject *v15;
  int v16;
  id v17;

  v5 = a2;
  v6 = *(_QWORD **)(a1 + 224);
  v7 = (_QWORD *)(a1 + 232);
  if (v6 != (_QWORD *)(a1 + 232))
  {
    do
    {
      if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v6[5] + 16))(v6[5]))
      {
        v11 = v6[5];
        if (*(_QWORD *)(v11 + 120))
        {
          if ((sub_1002E0C24(v6[5], (uint64_t)v5) & 1) != 0)
          {
            (*(void (**)(_QWORD, _QWORD, id, uint64_t))(**(_QWORD **)(v11 + 120) + 152))(*(_QWORD *)(v11 + 120), 0, v5, a3);
            if (sub_100401BB8((_QWORD *)v11, v5))
            {
              v12 = (uint64_t)sub_10040563C(v11, (uint64_t)v5);
              if ((v12 & 1) == 0)
                sub_1002EAD70(v12, v6[4], v11, v5, 1u);
            }
          }
        }
      }
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != v7);
  }
  if ((a3 & 1) != 0)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100924CB0);
    v13 = sub_1000067B8((uint64_t)off_1009778C0, v5);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

    if (v14)
    {
      v15 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
      {
        v16 = 138412290;
        v17 = v5;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Resetting FindMy invalid LTK's for device %@", (uint8_t *)&v16, 0xCu);
      }
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100924CB0);
      sub_100660E84((uint64_t)off_1009778C0, v5);
    }
  }

}

void sub_1002ECC04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002ECC24(uint64_t a1, void *a2, uint64_t a3)
{
  sub_1002EC9F8(a1 - 72, a2, a3);
}

void sub_1002ECC2C(uint64_t a1, char a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  uint64_t v8;

  if ((a2 & 1) != 0)
  {
    v3 = mach_continuous_time() * *(unsigned int *)(a1 + 184) / *(unsigned int *)(a1 + 188) / 0x3B9ACA00;
    v4 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v7 = 134217984;
      v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "System Keybag was unlocked, boot time is %lld sec", (uint8_t *)&v7, 0xCu);
    }
    v5 = sub_100038E50();
    sub_1002B43D4(v5 + 448, a1 + 80);
    if (*(_BYTE *)(a1 + 312))
    {
      v6 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v7) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "System Keybag was unlocked but buddyHasNotCompleted is true", (uint8_t *)&v7, 2u);
      }
    }
    else
    {
      sub_1002ECD90(a1, v3);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
  {
    sub_1006DDB74();
  }
}

void sub_1002ECD90(uint64_t a1, unint64_t a2)
{
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  unsigned __int8 v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[6];
  _QWORD v26[6];
  id v27;
  uint8_t buf[4];
  void *v29;

  v4 = sub_1002E6B5C();
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = qword_1009998F0;
  if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "absoluteString"));
    *(_DWORD *)buf = 138412290;
    v29 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Reading state restoration data after unlock at %@", buf, 0xCu);

  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "URLByDeletingLastPathComponent"));
  v27 = 0;
  v10 = objc_msgSend(v8, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v9, 1, 0, &v27);
  v11 = v27;

  if ((v10 & 1) == 0 && os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_ERROR))
    sub_1006DDBCC();
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v13 = sub_1002E6B5C();
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "path"));
  v16 = objc_msgSend(v12, "fileExistsAtPath:", v15);

  if ((v16 & 1) != 0)
  {
    v17 = sub_1002E6B5C();
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithContentsOfURL:](NSDictionary, "dictionaryWithContentsOfURL:", v18));

    if (a2 < 0x12D)
    {
      v23 = sub_1000419F4();
      v24 = 1000 * (unsigned __int16)word_10097AC0C;
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_1002EDD28;
      v25[3] = &unk_100918868;
      v25[5] = a1;
      v22 = v25;
      v25[4] = v19;
      sub_100475CEC(v23, v24, v25);
    }
    else
    {
      v20 = sub_1000419F4();
      v21 = 1000 * (unsigned __int16)word_10097AC0E;
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_1002ED118;
      v26[3] = &unk_100918868;
      v26[5] = a1;
      v22 = v26;
      v26[4] = v19;
      sub_100475CEC(v20, v21, v26);
    }

  }
  else if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_ERROR))
  {
    sub_1006DDBA0();
  }

}

void sub_1002ED074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1002ED110(uint64_t a1, char a2)
{
  sub_1002ECC2C(a1 - 80, a2);
}

void sub_1002ED118(uint64_t a1)
{
  sub_1002ED124(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32));
}

void sub_1002ED124(uint64_t a1, void *a2)
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  void *v11;
  void *v12;
  id obj;
  _OWORD v14[4];
  _OWORD v15[4];
  _BYTE v16[128];
  _DWORD buf[3];
  __int16 v18;
  void *v19;
  _BYTE v20[128];

  v10 = a2;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", CFSTR("centralSessions")));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", CFSTR("peripheralSessions")));
  sub_100069D20();
  v2 = qword_1009998F0;
  if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "allKeys"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "allKeys"));
    buf[0] = 138543618;
    *(_QWORD *)&buf[1] = v3;
    v18 = 2114;
    v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "RestoreAppSessions - Central:%{public}@ - Peripheral:%{public}@", (uint8_t *)buf, 0x16u);

  }
  memset(v15, 0, sizeof(v15));
  obj = v12;
  if (objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v15, v20, 16))
  {
    v5 = **((_QWORD **)&v15[0] + 1);
    v6 = qword_1009998F0;
    if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 138543362;
      *(_QWORD *)&buf[1] = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Restoring session for %{public}@", (uint8_t *)buf, 0xCu);
    }
    operator new();
  }

  memset(v14, 0, sizeof(v14));
  v7 = v11;
  if (objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", v14, v16, 16))
  {
    v8 = **((_QWORD **)&v14[0] + 1);
    v9 = qword_1009998F0;
    if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 138543362;
      *(_QWORD *)&buf[1] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Restoring Peripheral session for %{public}@", (uint8_t *)buf, 0xCu);
    }
    operator new();
  }

}

void sub_1002EDBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1002EDD28(uint64_t a1)
{
  sub_1002ED124(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32));
}

uint64_t sub_1002EDD34(uint64_t a1, int a2, int a3)
{
  uint64_t v3;

  switch(a2)
  {
    case 2:
      if (!a3)
        a1 = sub_1002EDD84(a1);
      break;
    case 3:
      if (!a3)
        a1 = sub_1002EDF14(a1);
      break;
    case 6:
      if (!a3)
      {
        v3 = 1;
        goto LABEL_8;
      }
      break;
    case 7:
      if (!a3)
      {
        v3 = 0;
LABEL_8:
        a1 = (uint64_t)sub_1002EE09C((_QWORD *)a1, v3);
      }
      break;
    default:
      return a1;
  }
  return a1;
}

uint64_t sub_1002EDD84(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  NSObject *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  unsigned __int8 v9;
  uint8_t buf[4];
  int v11;

  v9 = 0;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100924CD0);
  result = sub_1004A4164((uint64_t)off_100977A50, &v9);
  v3 = *(_QWORD **)(a1 + 224);
  if (v3 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v4 = (_QWORD *)v3[5];
      result = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
      if ((_DWORD)result == 3)
      {
        v5 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          v11 = v9;
          _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "classic: notifyDiscoverabiltyChanged: %d", buf, 8u);
        }
        result = v4[27];
        if (result)
          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)result + 16))(result, 0, v9);
      }
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != (_QWORD *)(a1 + 232));
  }
  return result;
}

uint64_t sub_1002EDF14(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  NSObject *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  unsigned __int8 v9;
  uint8_t buf[4];
  int v11;

  v9 = 0;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100924CD0);
  result = sub_1004A5288((uint64_t)off_100977A50, &v9);
  v3 = *(_QWORD **)(a1 + 224);
  if (v3 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v4 = (_QWORD *)v3[5];
      result = (*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
      if ((_DWORD)result == 3)
      {
        v5 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v11 = v9;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "classic: notifyConnectabilityChanged: %d", buf, 8u);
        }
        result = v4[27];
        if (result)
          result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)result + 8))(result, 0, v9);
      }
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != (_QWORD *)(a1 + 232));
  }
  return result;
}

_QWORD *sub_1002EE09C(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint8_t buf[4];
  int v11;

  v2 = (_QWORD *)result[28];
  v3 = result + 29;
  if (v2 != result + 29)
  {
    do
    {
      v5 = (_QWORD *)v2[5];
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
      if ((_DWORD)result == 3)
      {
        v6 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v11 = a2;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "classic: notifyInquiryStateChanged: %d", buf, 8u);
        }
        result = (_QWORD *)v5[27];
        if (result)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*result + 24))(result, 0, a2);
      }
      v7 = (_QWORD *)v2[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v2[2];
          v9 = *v8 == (_QWORD)v2;
          v2 = v8;
        }
        while (!v9);
      }
      v2 = v8;
    }
    while (v8 != v3);
  }
  return result;
}

uint64_t sub_1002EE1E4(uint64_t a1, int a2, int a3)
{
  return sub_1002EDD34(a1 - 128, a2, a3);
}

void sub_1002EE1EC(uint64_t a1, unsigned __int8 *a2, int a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint8_t buf[4];
  int v13;

  v3 = *(_QWORD **)(a1 + 224);
  v4 = (_QWORD *)(a1 + 232);
  if (v3 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v7 = (_QWORD *)v3[5];
      if ((*(unsigned int (**)(_QWORD *))(*v7 + 16))(v7) == 3)
      {
        v8 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v13 = a3;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "classic: pairingStarted incoming?: %d", buf, 8u);
        }
        if (v7[28])
          sub_10040E9E8((uint64_t)v7, 0, a2);
      }
      v9 = (_QWORD *)v3[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v3[2];
          v11 = *v10 == (_QWORD)v3;
          v3 = v10;
        }
        while (!v11);
      }
      v3 = v10;
    }
    while (v10 != v4);
  }
}

void sub_1002EE33C(uint64_t a1, unsigned __int8 *a2, int a3)
{
  sub_1002EE1EC(a1 - 136, a2, a3);
}

void sub_1002EE344(uint64_t a1, unsigned __int8 *a2, int a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  v3 = *(_QWORD **)(a1 + 224);
  v4 = (_QWORD *)(a1 + 232);
  if (v3 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v7 = (_QWORD *)v3[5];
      if ((*(unsigned int (**)(_QWORD *))(*v7 + 16))(v7) == 3)
      {
        v8 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          v13 = a3;
          v14 = 1024;
          v15 = a3;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "classic: pairingComplete: %d (0x%x)", buf, 0xEu);
        }
        if (v7[28])
          sub_10040EB3C((uint64_t)v7, 0, a2, a3);
      }
      v9 = (_QWORD *)v3[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v3[2];
          v11 = *v10 == (_QWORD)v3;
          v3 = v10;
        }
        while (!v11);
      }
      v3 = v10;
    }
    while (v10 != v4);
  }
}

void sub_1002EE4A4(uint64_t a1, unsigned __int8 *a2, int a3)
{
  sub_1002EE344(a1 - 136, a2, a3);
}

void sub_1002EE4AC(uint64_t a1, unsigned __int8 *a2, int a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  v3 = *(_QWORD **)(a1 + 224);
  v4 = (_QWORD *)(a1 + 232);
  if (v3 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v7 = (_QWORD *)v3[5];
      if ((*(unsigned int (**)(_QWORD *))(*v7 + 16))(v7) == 3)
      {
        v8 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          v13 = a3;
          v14 = 1024;
          v15 = a3;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "classic: deviceWillUnpair: %d (0x%x)", buf, 0xEu);
        }
        if (v7[28])
          sub_10040ECB0((uint64_t)v7, 0, a2);
      }
      v9 = (_QWORD *)v3[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v3[2];
          v11 = *v10 == (_QWORD)v3;
          v3 = v10;
        }
        while (!v11);
      }
      v3 = v10;
    }
    while (v10 != v4);
  }
}

void sub_1002EE60C(uint64_t a1, unsigned __int8 *a2, int a3)
{
  sub_1002EE4AC(a1 - 136, a2, a3);
}

void sub_1002EE614(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  id v6;
  void *v7;
  NSObject *v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _DWORD v17[2];
  __int16 v18;
  uint64_t v19;
  _QWORD v20[2];

  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100924CB0);
  v20[0] = 0;
  v20[1] = 0;
  sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133], 1u, 0, 0, 0, (unsigned __int8 *)v20);
  v6 = sub_100030DF4((const unsigned __int8 *)v20);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = qword_100999898;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v9 = a2[1324];
      v17[0] = 67109376;
      v17[1] = v9;
      v18 = 2048;
      v19 = sub_100449844((uint64_t)a2);
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "UN: notifyDeviceConnected: ACL? %d, sevices: %lu", (uint8_t *)v17, 0x12u);
    }
    v10 = *(_QWORD **)(a1 + 224);
    v11 = (_QWORD *)(a1 + 232);
    if (v10 != (_QWORD *)(a1 + 232))
    {
      v12 = 2 * a2[1324];
      do
      {
        v13 = v10[5];
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13) == 3)
          sub_10040E00C(v13, v7, a3, v12);
        v14 = (_QWORD *)v10[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (_QWORD *)v10[2];
            v16 = *v15 == (_QWORD)v10;
            v10 = v15;
          }
          while (!v16);
        }
        v10 = v15;
      }
      while (v15 != v11);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
  {
    sub_1006DDC30();
  }

}

void sub_1002EE814(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002EE834(uint64_t a1, unsigned __int8 *a2, int a3, int a4, uint64_t a5)
{
  NSObject *v10;
  _BYTE *v11;
  NSObject *v12;
  NSObject *v13;
  _BYTE *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  _BYTE __p[12];
  char v20;
  _BYTE buf[12];
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  v10 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC((uint64_t)a2, (uint64_t)__p);
    v11 = v20 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v11;
    v22 = 1024;
    v23 = a3;
    v24 = 1024;
    v25 = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "AppManager::serviceEvent Device: %{public}s BTServiceID: %d, BTServiceSpecificEvent %d", buf, 0x18u);
    if (v20 < 0)
      operator delete(*(void **)__p);
  }
  if ((a4 - 11) < 2)
  {
    sub_1002EEAE0(a1, a2, a3, a4, a5);
  }
  else if (a4 == 701)
  {
    v13 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8((uint64_t)a2, buf);
      v14 = v25 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)__p = 136446210;
      *(_QWORD *)&__p[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "UN: notify name changed after remote name request %{public}s", __p, 0xCu);
      if (SHIBYTE(v25) < 0)
        operator delete(*(void **)buf);
    }
    if (!(_DWORD)a5)
    {
      v15 = *(_QWORD **)(a1 + 224);
      if (v15 != (_QWORD *)(a1 + 232))
      {
        do
        {
          if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[5] + 16))(v15[5]) == 3)
            (*(void (**)(_QWORD, unsigned __int8 *))(**(_QWORD **)(v15[5] + 216) + 32))(*(_QWORD *)(v15[5] + 216), a2);
          v16 = (_QWORD *)v15[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (_QWORD *)v15[2];
              v18 = *v17 == (_QWORD)v15;
              v15 = v17;
            }
            while (!v18);
          }
          v15 = v17;
        }
        while (v17 != (_QWORD *)(a1 + 232));
      }
    }
  }
  else if (a4 == 4)
  {
    if (qword_100978190 != -1)
      dispatch_once(&qword_100978190, &stru_100924E90);
    if ((sub_1004391E8((uint64_t)off_100978188, (uint64_t)a2) & 1) == 0)
    {
      v12 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEBUG))
        sub_1006DDC5C((uint64_t)a2, v12);
      sub_1002EE614(a1, a2, a5);
    }
  }
}

void sub_1002EEAE0(uint64_t a1, unsigned __int8 *a2, int a3, int a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  uint8_t *v12;
  int v13;
  char v14;
  uint8_t buf[8];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  char v20;
  uint8_t v21[4];
  uint8_t *v22;

  v10 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = a4;
    v16 = 1024;
    v17 = a3;
    v18 = 1024;
    v19 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "UN: notifyServiceConnectionChanged  event: %d, for serviceID: 0x%x, result %d ", buf, 0x14u);
  }
  if (a4 == 11)
  {
    if ((_DWORD)a5 == 114 || (_DWORD)a5 == 109)
    {
      if ((sub_10043E93C(a2) & 1) != 0)
      {
LABEL_23:
        sub_1002EE614(a1, a2, 0);
        return;
      }
      v14 = 0;
      sub_100043758(&v14);
      v13 = 0;
      v11 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8((uint64_t)a2, buf);
        v12 = v20 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v21 = 136446210;
        v22 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "UN: force pairing to %{public}s", v21, 0xCu);
        if (v20 < 0)
          operator delete(*(void **)buf);
      }
      if (sub_10025495C((uint64_t)sub_1002EED4C, (uint64_t)(a2 + 128), (__int128 *)&unk_100924B28, &v13, 1))
      {
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
          sub_1006DDCE8();
      }
      sub_1002EE614(a1, a2, 0);
      sub_100043728(&v14);
    }
    else
    {
      if (a3 == -1 && (_DWORD)a5)
      {
        sub_1002EE614(a1, a2, a5);
        return;
      }
      if (!(_DWORD)a5 && sub_100449844((uint64_t)a2) == 1)
        goto LABEL_23;
    }
  }
}

void sub_1002EED24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_1002EED44(uint64_t a1, unsigned __int8 *a2, int a3, int a4, uint64_t a5)
{
  sub_1002EE834(a1 - 144, a2, a3, a4, a5);
}

void sub_1002EED4C(uint64_t a1, int a2)
{
  NSObject *v3;
  _DWORD v4[2];

  v3 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "UN: Pairing complete with status %d", (uint8_t *)v4, 8u);
  }
}

void sub_1002EEDEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[6];

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002EEE50;
  v5[3] = &unk_100918090;
  v5[4] = a1;
  v5[5] = a2;
  sub_100041A34(v4, v5);
}

void sub_1002EEE50(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD **)(v1 + 224);
  v3 = (_QWORD *)(v1 + 232);
  if (v2 != (_QWORD *)(v1 + 232))
  {
    do
    {
      v5 = v2[5];
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) == 3)
        sub_10040EE04(v5, 0, *(_QWORD *)(a1 + 40));
      v6 = (_QWORD *)v2[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v2[2];
          v8 = *v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != v3);
  }
}

void sub_1002EEEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = a1 - 152;
  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002EEE50;
  v5[3] = &unk_100918090;
  v5[4] = v3;
  v5[5] = a2;
  sub_100041A34(v4, v5);
}

void sub_1002EEF58(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = *(_QWORD **)(a1 + 224);
  v3 = (_QWORD *)(a1 + 232);
  if (v2 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v5 = v2[5];
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) == 3)
        sub_10040F0C0(v5, 0, a2);
      v6 = (_QWORD *)v2[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v2[2];
          v8 = *v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != v3);
  }
}

void sub_1002EEFF0(uint64_t a1, unsigned __int8 *a2)
{
  sub_1002EEF58(a1 - 160, a2);
}

uint64_t sub_1002EEFF8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  NSObject *v13;
  void **v14;
  id obj;
  void *__p[2];
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint8_t buf[4];
  void **v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  _BOOL4 v29;
  __int16 v30;
  _BOOL4 v31;
  _BYTE v32[128];

  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100924DD0);
  v2 = sub_10000A1A4((uint64_t)off_100978168, a2, 2u);
  if (v2 && (v3 = v2, !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2)))
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    obj = *(id *)(v3 + 336);
    v5 = 0;
    v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v32, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v21;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v21 != v7)
            objc_enumerationMutation(obj);
          v9 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v8);
          if (qword_1009778A8 != -1)
            dispatch_once(&qword_1009778A8, &stru_100924C30);
          v10 = off_1009778A0;
          sub_100030BCC(buf, v9);
          v11 = sub_100069F08((uint64_t)v10, buf);
          if (qword_1009778B8 != -1)
            dispatch_once(&qword_1009778B8, &stru_100924C90);
          v12 = sub_100030864(qword_1009778B0, v9);
          v13 = qword_1009998F0;
          if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
          {
            sub_1000340DC(a2, (uint64_t)__p);
            v14 = __p;
            if (v19 < 0)
              v14 = (void **)__p[0];
            *(_DWORD *)buf = 136446978;
            v25 = v14;
            v26 = 2114;
            v27 = v9;
            v28 = 1024;
            v29 = v12;
            v30 = 1024;
            v31 = v11;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Session %{public}s is associated with %{public}@ : isPaired %d, isConnected %d", buf, 0x22u);
            if (v19 < 0)
              operator delete(__p[0]);
          }
          v5 = (v5 + v12);
          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v32, 16);
      }
      while (v6);
    }

  }
  else
  {
    v4 = qword_1009998F0;
    v5 = 0;
    if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "No central session found for associated session", buf, 2u);
      return 0;
    }
  }
  return v5;
}

void sub_1002EF2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1002EF308(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  __int128 v22;
  uint8_t v23;
  char v24[15];
  uint8_t buf[4];
  id v26;

  v3 = a2;
  if (!objc_msgSend(*(id *)(a1 + 296), "containsObject:", v3))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v7 = qword_1009998F0;
    if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v26 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Resurrecting zombie application \"%{public}@\"", buf, 0xCu);
    }
    v9 = *(_QWORD **)(a1 + 224);
    if (v9 == (_QWORD *)(a1 + 232))
    {
LABEL_26:
      sub_1002DF540(a1, v3, 15);
      v21 = sub_100069D20();
      (*(void (**)(uint64_t, id, void *, void *))(*(_QWORD *)v21 + 16))(v21, v3, v5, v6);
      objc_msgSend(*(id *)(a1 + 296), "addObject:", v3);

      goto LABEL_27;
    }
    *(_QWORD *)&v8 = 138543362;
    v22 = v8;
    while (1)
    {
      v10 = v9[5];
      if (objc_msgSend(*(id *)(v10 + 88), "isEqualToString:", v3, v22)
        && *(_BYTE *)(v10 + 24)
        && *(_QWORD *)(v10 + 96))
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10) == 1)
        {
          objc_msgSend(v6, "addObject:", *(_QWORD *)(v10 + 96));
          v11 = qword_1009998F0;
          if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
          {
            v12 = *(void **)(v10 + 96);
            *(_DWORD *)buf = v22;
            v26 = v12;
            v13 = v11;
            v14 = "Peripheral session is undead: %{public}@";
LABEL_19:
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v14, buf, 0xCu);
          }
        }
        else
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10))
          {
            v15 = qword_100999898;
            if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
              sub_1006DDD48(&v23, v24, v15);
            goto LABEL_20;
          }
          objc_msgSend(v5, "addObject:", *(_QWORD *)(v10 + 96));
          v16 = qword_1009998F0;
          if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
          {
            v17 = *(void **)(v10 + 96);
            *(_DWORD *)buf = v22;
            v26 = v17;
            v13 = v16;
            v14 = "Central session is undead: %{public}@";
            goto LABEL_19;
          }
        }
      }
LABEL_20:
      v18 = (_QWORD *)v9[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v9[2];
          v20 = *v19 == (_QWORD)v9;
          v9 = v19;
        }
        while (!v20);
      }
      v9 = v19;
      if (v19 == (_QWORD *)(a1 + 232))
        goto LABEL_26;
    }
  }
  v4 = qword_1009998F0;
  if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v26 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Already attempting to resurrect \"%{public}@\"", buf, 0xCu);
  }
LABEL_27:

}

void sub_1002EF618(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002EF650(uint64_t a1)
{
  sub_1002EF65C(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32));
}

void sub_1002EF65C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  BOOL v6;
  NSObject *v7;
  _BOOL4 v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  unint64_t *i;
  unint64_t *v33;
  void *__p[2];
  char v35;
  _BYTE v36[12];
  __int16 v37;
  uint64_t v38;
  char v39;
  __int128 buf;
  char *v41;

  v3 = a2;
  v4 = qword_1009998F0;
  if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138543362;
    *(_QWORD *)((char *)&buf + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Verifying Application Resurrected <%{public}@>", (uint8_t *)&buf, 0xCu);
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 304), "objectForKey:", v3));
  v6 = v5 == 0;

  v7 = qword_1009998F0;
  v8 = os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Verify Application Resurrected for Id <%{public}@> was not in resurrectionTimers", (uint8_t *)&buf, 0xCu);
    }
  }
  else
  {
    if (v8)
    {
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Removing Application Id <%{public}@>", (uint8_t *)&buf, 0xCu);
    }
    objc_msgSend(*(id *)(a1 + 304), "removeObjectForKey:", v3);
  }
  buf = 0uLL;
  v41 = 0;
  v9 = *(_QWORD **)(a1 + 224);
  if (v9 == (_QWORD *)(a1 + 232))
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v12 = v9[4];
      v11 = v9[5];
      if (objc_msgSend(*(id *)(v11 + 88), "isEqualToString:", v3))
      {
        if (*(_QWORD *)(v11 + 120))
        {
          v10 = 1;
        }
        else
        {
          v13 = qword_1009998F0;
          if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
          {
            v14 = *(_QWORD *)(v11 + 88);
            v15 = *(_QWORD *)(v11 + 96);
            *(_DWORD *)v36 = 138543618;
            *(_QWORD *)&v36[4] = v14;
            v37 = 2114;
            v38 = v15;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Reaping Disconnected Session %{public}@ %{public}@", v36, 0x16u);
          }
          v16 = *((_QWORD *)&buf + 1);
          if (*((_QWORD *)&buf + 1) >= (unint64_t)v41)
          {
            v18 = (uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 3;
            if ((unint64_t)(v18 + 1) >> 61)
              abort();
            v19 = (uint64_t)&v41[-buf] >> 2;
            if (v19 <= v18 + 1)
              v19 = v18 + 1;
            if ((unint64_t)&v41[-buf] >= 0x7FFFFFFFFFFFFFF8)
              v20 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v20 = v19;
            if (v20)
              v21 = (char *)sub_10007ABA0((uint64_t)&v41, v20);
            else
              v21 = 0;
            v22 = &v21[8 * v18];
            *(_QWORD *)v22 = v12;
            v17 = v22 + 8;
            v23 = (char *)*((_QWORD *)&buf + 1);
            v24 = (char *)buf;
            if (*((_QWORD *)&buf + 1) != (_QWORD)buf)
            {
              do
              {
                v25 = *((_QWORD *)v23 - 1);
                v23 -= 8;
                *((_QWORD *)v22 - 1) = v25;
                v22 -= 8;
              }
              while (v23 != v24);
              v23 = (char *)buf;
            }
            *(_QWORD *)&buf = v22;
            *((_QWORD *)&buf + 1) = v17;
            v41 = &v21[8 * v20];
            if (v23)
              operator delete(v23);
          }
          else
          {
            **((_QWORD **)&buf + 1) = v12;
            v17 = (_QWORD *)(v16 + 8);
          }
          *((_QWORD *)&buf + 1) = v17;
        }
        if (!*(_BYTE *)(v11 + 39))
        {
          v26 = qword_100999898;
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
          {
            v27 = *(_QWORD *)(v11 + 88);
            *(_DWORD *)v36 = 138543362;
            *(_QWORD *)&v36[4] = v27;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "App Restored but TCCDone missing %{public}@", v36, 0xCu);
          }
          if (objc_msgSend(*(id *)(v11 + 88), "isEqual:", CFSTR("com.teslamotors.TeslaApp")))
          {
            if (qword_10097AA70 != -1)
              dispatch_once(&qword_10097AA70, &stru_100924EB0);
            v28 = qword_10097AA68;
            sub_100091AE8(v36, "App Restoration");
            sub_100091AE8(__p, "TCCDoneMissing");
            sub_10047C59C(60.0, v28, (uint64_t *)v36, (uint64_t *)__p);
            if (v35 < 0)
              operator delete(__p[0]);
            if (v39 < 0)
              operator delete(*(void **)v36);
          }
        }
      }
      v29 = (_QWORD *)v9[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD *)v9[2];
          v31 = *v30 == (_QWORD)v9;
          v9 = v30;
        }
        while (!v31);
      }
      v9 = v30;
    }
    while (v30 != (_QWORD *)(a1 + 232));
    v33 = (unint64_t *)*((_QWORD *)&buf + 1);
    for (i = (unint64_t *)buf; i != v33; ++i)
      sub_100019A7C(a1, *i, 1);
  }
  objc_msgSend(*(id *)(a1 + 296), "removeObject:", v3);
  if ((v10 & 1) == 0 && os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
    sub_1006DDDE8();
  if (objc_msgSend(*(id *)(a1 + 352), "containsObject:", v3)
    && os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
  {
    sub_1006DDD84();
  }
  if ((_QWORD)buf)
  {
    *((_QWORD *)&buf + 1) = buf;
    operator delete((void *)buf);
  }

}

void sub_1002EFB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30)
{
  void *v30;

  _Unwind_Resume(a1);
}

void sub_1002EFB8C(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const char *v9;

  v4 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "Completed";
    if (a2)
      v5 = "Needs to run.";
    v8 = 136446210;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Current SetupBuddy state: %{public}s.", (uint8_t *)&v8, 0xCu);
  }
  *(_BYTE *)(a1 + 312) = a2;
  LOBYTE(v8) = 0;
  v6 = sub_100038E50();
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v6 + 104))(v6, &v8);
  if ((_BYTE)v8)
  {
    if (*(_BYTE *)(a1 + 312))
      return;
    sub_1002ECD90(a1, 0);
  }
  if (!*(_BYTE *)(a1 + 312))
  {
    v7 = sub_100038E50();
    sub_1002B43D4(v7 + 488, a1 + 120);
  }
}

void sub_1002EFCA0(uint64_t a1, int a2)
{
  sub_1002EFB8C(a1 - 120, a2);
}

void sub_1002EFCA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint32_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  void *__p[2];
  char v24;
  char v25;
  int v26;
  _BYTE buf[14];
  int v28;
  __int16 v29;
  int v30;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100924F10);
  v2 = sub_10006D488((uint64_t)off_1009778E0, *(_QWORD *)(a1 + 40), 0);
  if (v2)
  {
    v3 = v2;
    if (sub_100442964(v2))
    {
      if (qword_100977A78 != -1)
        dispatch_once(&qword_100977A78, &stru_100924D70);
      v4 = sub_100496DBC((uint64_t)off_100977A70, v3);
      if ((v4 & 0x100000) == 0)
      {
        v5 = v4;
        v6 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
        {
          v7 = *(_QWORD *)(a1 + 32);
          if (qword_100977A78 != -1)
            dispatch_once(&qword_100977A78, &stru_100924D70);
          *(_DWORD *)buf = 138543874;
          *(_QWORD *)&buf[4] = v7;
          *(_WORD *)&buf[12] = 1024;
          v28 = v5;
          v29 = 1024;
          v30 = sub_100498AC8((uint64_t)off_100977A70, v3);
          _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Attempting to disconnectUnusedDevices to %{public}@ that doesn't have GATT connected (connected services %d, supported services %d)", buf, 0x18u);
        }
        return;
      }
      v26 = 0;
      sub_10011344C(&v26, 0);
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100924CB0);
      v8 = sub_100656BD8((uint64_t)off_1009778C0, *(void **)(a1 + 32)) + (unsigned __int16)word_10097AC08;
      v9 = v26;
      v10 = qword_100999898;
      v11 = v8 - v26;
      if (v8 >= v26)
      {
        if (!os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
          return;
        v20 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v20;
        *(_WORD *)&buf[12] = 1024;
        v28 = v11;
        v16 = "Device \"%{public}@\" is unused, but is within the grace period for %d more seconds - skipping";
        v17 = v10;
        v18 = OS_LOG_TYPE_INFO;
        v19 = 18;
        goto LABEL_27;
      }
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v8;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Disconnecting due to grace time %d curTime %d", buf, 0xEu);
      }
      v12 = sub_100027F68();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12))
      {
        v25 = 0;
        v13 = sub_100027F68();
        sub_100091AE8(buf, "CATT");
        sub_100091AE8(__p, "DisableClassicGraceTimer");
        (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v13 + 72))(v13, buf, __p, &v25);
        if (v24 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v30) < 0)
          operator delete(*(void **)buf);
        if (v25)
        {
          v14 = qword_100999898;
          if (!os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
            return;
          v15 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v15;
          v16 = "Grace timer disabled for classic devices, not disconnecting %{public}@";
          v17 = v14;
          v18 = OS_LOG_TYPE_DEFAULT;
          v19 = 12;
LABEL_27:
          _os_log_impl((void *)&_mh_execute_header, v17, v18, v16, buf, v19);
          return;
        }
      }
      v21 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        v22 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Disconnecting GATT for unused classic device \"%{public}@\"", buf, 0xCu);
      }
      if (qword_100977A78 != -1)
        dispatch_once(&qword_100977A78, &stru_100924D70);
      sub_100499FC8((uint64_t)off_100977A70, v3, 0x100000);
    }
  }
}

void sub_1002F00A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

NSMutableSet *sub_1002F00DC(uint64_t a1, void *a2)
{
  id v3;
  NSMutableSet *v4;
  _QWORD *v5;
  void *v6;
  void *p_p;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  NSObject *v20;
  void **v21;
  uint64_t v22;
  void *__p;
  uint64_t v25;
  unsigned __int8 v26;
  __int128 v27;
  _OWORD v28[4];
  void *v29[2];
  __int128 v30;
  __int128 v31;
  _BYTE v32[144];
  uint64_t v33;
  uint8_t buf[4];
  void **v35;

  v3 = a2;
  v33 = 0;
  v31 = 0u;
  memset(v32, 0, sizeof(v32));
  *(_OWORD *)v29 = 0u;
  v30 = 0u;
  memset(v28, 0, sizeof(v28));
  v27 = 0u;
  sub_1002613AC((uint64_t)&v27);
  v4 = objc_opt_new(NSMutableSet);
  v5 = *(_QWORD **)(a1 + 224);
  if (v5 != (_QWORD *)(a1 + 232))
  {
    while (1)
    {
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v5[5] + 16))(v5[5]))
        goto LABEL_13;
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v5[5] + 248), "objectForKeyedSubscript:", v3));
      if (!objc_msgSend(v6, "opportunistic"))
        break;
      sub_1000340DC(v5[4], (uint64_t)&__p);
      if ((v26 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v26 & 0x80u) == 0)
        v8 = v26;
      else
        v8 = v25;
      v9 = sub_1002614D8(v28, (uint64_t)p_p, v8);
      sub_1002614D8(v9, (uint64_t)":(ignored) ", 11);
      if ((char)v26 < 0)
        operator delete(__p);
LABEL_23:

      v17 = (_QWORD *)v5[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v5[2];
          v19 = *v18 == (_QWORD)v5;
          v5 = v18;
        }
        while (!v19);
      }
      v5 = v18;
      if (v18 == (_QWORD *)(a1 + 232))
        goto LABEL_29;
    }

LABEL_13:
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v5[5] + 80), "objectForKeyedSubscript:", v3));
    if (v6)
    {
      sub_1000340DC(v5[4], (uint64_t)&__p);
      if ((v26 & 0x80u) == 0)
        v10 = &__p;
      else
        v10 = __p;
      if ((v26 & 0x80u) == 0)
        v11 = v26;
      else
        v11 = v25;
      v12 = sub_1002614D8(v28, (uint64_t)v10, v11);
      v13 = sub_1002614D8(v12, (uint64_t)":", 1);
      v14 = sub_1002F04A8((int)objc_msgSend(v6, "intValue"));
      v15 = strlen(v14);
      v16 = sub_1002614D8(v13, (uint64_t)v14, v15);
      sub_1002614D8(v16, (uint64_t)" ", 1);
      if ((char)v26 < 0)
        operator delete(__p);
      -[NSMutableSet addObject:](v4, "addObject:", v6);
    }
    goto LABEL_23;
  }
LABEL_29:
  v20 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
  {
    std::stringbuf::str((char *)v28 + 8);
    v21 = (v26 & 0x80u) == 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    v35 = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "desired latencies:%s", buf, 0xCu);
    if ((char)v26 < 0)
      operator delete(__p);
  }
  *(_QWORD *)((char *)&v28[-1]
  *(_QWORD *)&v28[0] = v22;
  if (SHIBYTE(v30) < 0)
    operator delete(v29[1]);
  std::streambuf::~streambuf((char *)v28 + 8);
  std::ios::~ios(v32);

  return v4;
}

void sub_1002F0418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  void *v17;

  sub_1006CC5C8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

const char *sub_1002F04A8(int a1)
{
  if ((a1 + 11) > 0xD)
    return "unknown";
  else
    return off_100924F50[a1 + 11];
}

uint64_t sub_1002F04D0(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  char v4;
  uint64_t v5;
  unsigned __int16 v6;
  void *v7;
  unsigned int v8;
  _QWORD *v9;
  const char *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  _QWORD *v24;
  const char *v25;
  size_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  const char *v31;
  uint64_t v32;
  _QWORD *v33;
  NSObject *v34;
  void *p_p;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *__p;
  char v42;
  __int128 v43;
  _OWORD v44[4];
  void *v45[2];
  __int128 v46;
  __int128 v47;
  _BYTE v48[144];
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int16 v54;
  __int16 v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint8_t buf[4];
  void *v62;
  _BYTE v63[128];

  v60 = 0;
  v59 = 0;
  v58 = 0;
  v57 = 0;
  v56 = 0;
  v55 = 0;
  v54 = 0;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v2 = a2;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v50, v63, 16);
  if (v3)
  {
    v4 = 0;
    v5 = 0;
    v40 = *(_QWORD *)v51;
    v6 = -1;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v51 != v40)
          objc_enumerationMutation(v2);
        v8 = objc_msgSend(*(id *)(*((_QWORD *)&v50 + 1) + 8 * (_QWORD)v7), "intValue");
        if (qword_1009778A8 != -1)
          dispatch_once(&qword_1009778A8, &stru_100924C30);
        if (!sub_100623350(off_1009778A0, v8, (__int16 *)&v60 + 1, (__int16 *)&v60, (__int16 *)&v58, (__int16 *)&v58 + 1, (_WORD *)&v59 + 1, (__int16 *)&v59, (_WORD *)&v57 + 1, &v57, (_WORD *)&v56 + 1, &v56, &v55, (_BYTE *)&v54 + 1, &v54))
        {
          v49 = 0;
          v47 = 0u;
          memset(v48, 0, sizeof(v48));
          *(_OWORD *)v45 = 0u;
          v46 = 0u;
          memset(v44, 0, sizeof(v44));
          v43 = 0u;
          sub_1002613AC((uint64_t)&v43);
          v9 = sub_1002614D8(v44, (uint64_t)"evaluating sessionLatency:", 26);
          v10 = sub_1002F04A8(v8);
          v11 = strlen(v10);
          v12 = sub_1002614D8(v9, (uint64_t)v10, v11);
          v13 = sub_1002614D8(v12, (uint64_t)" [LeConnectionLatency", 21);
          v14 = sub_1002F04A8(v5);
          v15 = strlen(v14);
          v16 = sub_1002614D8(v13, (uint64_t)v14, v15);
          v17 = sub_1002614D8(v16, (uint64_t)"/", 1);
          v18 = (_QWORD *)std::ostream::operator<<(v17, v6);
          v19 = sub_1002614D8(v18, (uint64_t)"ms/", 3);
          if ((v4 & 1) != 0)
            v20 = "High";
          else
            v20 = "Low";
          if ((v4 & 1) != 0)
            v21 = 4;
          else
            v21 = 3;
          v22 = sub_1002614D8(v19, (uint64_t)v20, v21);
          sub_1002614D8(v22, (uint64_t)"]-->", 4);
          if ((v4 & 1) != 0)
            v23 = v5;
          else
            v23 = v8;
          if ((unsigned __int16)v60 != v6 || (unsigned __int16)v60 != HIWORD(v60))
            v23 = v5;
          if ((unsigned __int16)v60 >= v6)
            v4 |= (unsigned __int16)v60 == v6 && (unsigned __int16)v60 == HIWORD(v60);
          else
            v4 = (unsigned __int16)v60 == HIWORD(v60);
          if ((unsigned __int16)v60 >= v6)
            v5 = v23;
          else
            v5 = v8;
          if ((unsigned __int16)v60 < v6)
            v6 = v60;
          v24 = sub_1002614D8(v44, (uint64_t)"[LeConnectionLatency", 20);
          v25 = sub_1002F04A8(v5);
          v26 = strlen(v25);
          v27 = sub_1002614D8(v24, (uint64_t)v25, v26);
          v28 = sub_1002614D8(v27, (uint64_t)"/", 1);
          v29 = (_QWORD *)std::ostream::operator<<(v28, v6);
          v30 = sub_1002614D8(v29, (uint64_t)"ms/", 3);
          if ((v4 & 1) != 0)
            v31 = "High";
          else
            v31 = "Low";
          if ((v4 & 1) != 0)
            v32 = 4;
          else
            v32 = 3;
          v33 = sub_1002614D8(v30, (uint64_t)v31, v32);
          sub_1002614D8(v33, (uint64_t)"]", 1);
          v34 = qword_100999898;
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
          {
            std::stringbuf::str((char *)v44 + 8);
            p_p = &__p;
            if (v42 < 0)
              p_p = __p;
            *(_DWORD *)buf = 136315138;
            v62 = p_p;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "%s", buf, 0xCu);
            if (v42 < 0)
              operator delete(__p);
          }
          *(_QWORD *)&v43 = v39;
          *(_QWORD *)((char *)&v44[-1] + *(_QWORD *)(v39 - 24)) = v38;
          *(_QWORD *)&v44[0] = v37;
          if (SHIBYTE(v46) < 0)
            operator delete(v45[1]);
          std::streambuf::~streambuf((char *)v44 + 8);
          std::ios::~ios(v48);
        }
        v7 = (char *)v7 + 1;
      }
      while (v3 != v7);
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v50, v63, 16);
    }
    while (v3);
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_1002F0988(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F09D0(uint64_t a1, void *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  id v11;

  v11 = a2;
  v5 = *(_QWORD **)(a1 + 224);
  v6 = (_QWORD *)(a1 + 232);
  if (v5 != (_QWORD *)(a1 + 232))
  {
    do
    {
      if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v5[5] + 16))(v5[5]))
      {
        v10 = v5[5];
        if (*(_QWORD *)(v10 + 120))
        {
          if ((sub_1002E0C24(v5[5], (uint64_t)v11) & 1) != 0)
            (*(void (**)(_QWORD, _QWORD, id, uint64_t))(**(_QWORD **)(v10 + 120) + 176))(*(_QWORD *)(v10 + 120), 0, v11, a3);
        }
      }
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v6);
  }

}

void sub_1002F0AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002F0AC0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  int v5;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  id v11;
  __int16 v12;
  uint64_t v13;

  v4 = a3;
  v5 = *(_BYTE *)(a2 + 129) & 0x30;
  v6 = qword_100999898;
  v7 = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      v10 = 138543362;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Foreground active, notifying ServiceManager CTKD device %{public}@ connected to bridge", (uint8_t *)&v10, 0xCu);
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100924CB0);
    v8 = sub_1000589DC((uint64_t)off_1009778C0, v4, 0);
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_100924D70);
    sub_10049A5C0((uint64_t)off_100977A70, v8);
  }
  else if (v7)
  {
    v9 = *(_QWORD *)(a2 + 88);
    v10 = 138543618;
    v11 = v4;
    v12 = 2114;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "TransportBridging enabled, CTKD device %{public}@ connected, but %{public}@ is not foregrounded, not bridging.", (uint8_t *)&v10, 0x16u);
  }

}

void sub_1002F0C44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F0C5C(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  id *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  void *v15;
  _BOOL4 v16;
  std::string *v17;
  uint64_t v18;
  _QWORD *v19;
  std::string::size_type size;
  char *v21;
  uint64_t v22;
  std::string *v23;
  uint64_t v24;
  uint64_t (**v25)();
  unsigned int *v26;
  __int128 v27;
  _OWORD v28[4];
  void *__p[2];
  __int128 v30;
  __int128 v31;
  _OWORD v32[9];
  uint64_t v33;
  _QWORD v34[2];
  std::string v35[5];
  uint64_t v36;

  v7 = a2;
  v8 = a3;
  v33 = 0;
  v31 = 0u;
  memset(v32, 0, sizeof(v32));
  *(_OWORD *)__p = 0u;
  v30 = 0u;
  memset(v28, 0, sizeof(v28));
  v27 = 0u;
  sub_1002613AC((uint64_t)&v27);
  v9 = *(_QWORD **)(a1 + 224);
  if (v9 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v10 = v9[4];
      v11 = (id *)v9[5];
      if (!(*((unsigned int (**)(id *))*v11 + 2))(v11))
      {
        sub_1003FD350((uint64_t)v11, v7, v8);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11[31], "objectForKeyedSubscript:", v7));
        if (v15)
        {
          v16 = sub_1003FD330((uint64_t)v11);

          if (v16)
          {
            sub_10050945C(v10, v35);
            v17 = (v35[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? v35
                : (std::string *)v35[0].__r_.__value_.__r.__words[0];
            v18 = (v35[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(v35[0].__r_.__value_.__r.__words[2])
                : v35[0].__r_.__value_.__l.__size_;
            v19 = sub_1002614D8(v28, (uint64_t)v17, v18);
            sub_1002614D8(v19, (uint64_t)",", 1);
            if (SHIBYTE(v35[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v35[0].__r_.__value_.__l.__data_);
          }
        }
      }
      v12 = (_QWORD *)v9[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v9[2];
          v14 = *v13 == (_QWORD)v9;
          v9 = v13;
        }
        while (!v14);
      }
      v9 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 232));
  }
  if ((a4 & 1) != 0)
  {
    std::stringbuf::str((char *)v28 + 8);
    if (SHIBYTE(v35[0].__r_.__value_.__r.__words[2]) < 0)
    {
      size = v35[0].__r_.__value_.__l.__size_;
      operator delete(v35[0].__r_.__value_.__l.__data_);
      if (!size)
      {
LABEL_29:
        v22 = sub_10005D5A4();
        std::stringbuf::str((char *)v28 + 8);
        if ((v35[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = v35;
        else
          v23 = (std::string *)v35[0].__r_.__value_.__r.__words[0];
        v25 = &off_100918258;
        v26 = 0;
        (*(void (**)(uint64_t, uint64_t, std::string *, id, uint64_t (***)()))(*(_QWORD *)v22 + 40))(v22, 4, v23, v7, &v25);
        v25 = &off_100918258;
        if (v26)
          sub_100056AAC(v26);
        if (SHIBYTE(v35[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35[0].__r_.__value_.__l.__data_);
        goto LABEL_36;
      }
    }
    else if (!*((_BYTE *)&v35[0].__r_.__value_.__s + 23))
    {
      goto LABEL_29;
    }
    v34[0] = 0;
    v34[1] = 0;
    std::ostream::sentry::sentry(v34, v28);
    v21 = (char *)v28 + *(_QWORD *)(*(_QWORD *)&v28[0] - 24);
    if ((v21[32] & 5) == 0)
    {
      (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v21 + 5)
                                                                                           + 32))(v35, *((_QWORD *)v21 + 5), -1, 1, 16);
      if (v36 == -1)
        std::ios_base::clear((std::ios_base *)((char *)v28 + *(_QWORD *)(*(_QWORD *)&v28[0] - 24)), *(_DWORD *)((char *)&v28[2] + *(_QWORD *)(*(_QWORD *)&v28[0] - 24)) | 4);
    }
    std::ostream::sentry::~sentry(v34);
    v35[0].__r_.__value_.__s.__data_[0] = 0;
    sub_1002614D8(v28, (uint64_t)v35, 1);
    goto LABEL_29;
  }
LABEL_36:
  *(_QWORD *)((char *)&v28[-1]
  *(_QWORD *)&v28[0] = v24;
  if (SHIBYTE(v30) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v28 + 8);
  std::ios::~ios(v32);

}

void sub_1002F0FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  uint64_t v5;
  va_list va;

  va_start(va, a3);
  std::ostream::sentry::~sentry(v5 - 248);
  sub_1006CC5C8((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1002F1048(uint64_t a1, void *a2, void *a3, char a4)
{
  sub_1002F0C5C(a1 - 104, a2, a3, a4);
}

void sub_1002F1050(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD v15[2];
  _QWORD v16[2];
  uint8_t buf[4];
  int v18;

  v2 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[36];
    *(_DWORD *)buf = 67109120;
    v18 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending Daily LEAppConnect metrics to CoreAnalytics %d", buf, 8u);
  }
  v4 = (_QWORD *)a1[34];
  v5 = a1 + 35;
  if (v4 != a1 + 35)
  {
    do
    {
      v6 = *((_BYTE *)v4 + 55);
      if (v6 < 0)
      {
        if (v4[5])
        {
LABEL_8:
          if (*((_BYTE *)v4 + 56))
          {
            v7 = v4 + 4;
            v15[0] = CFSTR("BundleID");
            if (v6 < 0)
              v7 = (_QWORD *)*v7;
            v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7, v15[0]));
            v15[1] = CFSTR("ConnectAttemptWatermark");
            v16[0] = v8;
            v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)v4 + 56)));
            v16[1] = v9;
            v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 2));

            v11 = sub_100065478();
            (*(void (**)(uint64_t, void *))(*(_QWORD *)v11 + 328))(v11, v10);

          }
        }
      }
      else if (*((_BYTE *)v4 + 55))
      {
        goto LABEL_8;
      }
      v12 = (_QWORD *)v4[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v4[2];
          v14 = *v13 == (_QWORD)v4;
          v4 = v13;
        }
        while (!v14);
      }
      v4 = v13;
    }
    while (v13 != v5);
  }
  sub_100056BAC((uint64_t)(a1 + 34), (char *)a1[35]);
  a1[35] = 0;
  a1[36] = 0;
  a1[34] = v5;
}

void sub_1002F122C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002F125C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  id *v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _DWORD v16[2];
  __int16 v17;
  id v18;

  v5 = a2;
  v6 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v16[0] = 67109378;
    v16[1] = a3;
    v17 = 2114;
    v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending ancsAuthChanged to %d for device %{public}@", (uint8_t *)v16, 0x12u);
  }
  v7 = *(_QWORD **)(a1 + 224);
  v8 = (_QWORD *)(a1 + 232);
  if (v7 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v7[5] + 16))(v7[5]);
      v10 = (id *)v7[5];
      if (v9)
      {
        if ((*((unsigned int (**)(_QWORD))*v10 + 2))(v7[5]) == 1)
          sub_1003FC9E4(v7[5], v5, a3);
      }
      else
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10[31], "objectForKeyedSubscript:", v5));
        v12 = v11;
        if (v11 && objc_msgSend(v11, "ancsRequired"))
          sub_1003FC9E4((uint64_t)v10, v5, a3);

      }
      v13 = (_QWORD *)v7[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v7[2];
          v15 = *v14 == (_QWORD)v7;
          v7 = v14;
        }
        while (!v15);
      }
      v7 = v14;
    }
    while (v14 != v8);
  }

}

void sub_1002F13EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1002F1418(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v3 = (_QWORD *)result[28];
  v4 = result + 29;
  if (v3 != result + 29)
  {
    do
    {
      result = *(_QWORD **)(v3[5] + 120);
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*result + 72))(result, 0, a2, a3);
      v7 = (_QWORD *)v3[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v3[2];
          v9 = *v8 == (_QWORD)v3;
          v3 = v8;
        }
        while (!v9);
      }
      v3 = v8;
    }
    while (v8 != v4);
  }
  return result;
}

_QWORD *sub_1002F14AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002F1418((_QWORD *)(a1 - 24), a2, a3);
}

uint64_t sub_1002F14B4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  v2 = *(_QWORD **)(a1 + 224);
  if (v2 == (_QWORD *)(a1 + 232))
    return 0;
  while (v2[5] != a2)
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    v2 = v4;
    if (v4 == (_QWORD *)(a1 + 232))
      return 0;
  }
  return v2[4];
}

uint64_t sub_1002F1518(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned __int16 v6;
  void **v7;
  void *v8;
  unsigned __int16 v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  void *__p[2];
  char v15;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 224);
  v5 = (_QWORD *)(a1 + 232);
  if (v4 == (_QWORD *)(a1 + 232))
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      sub_1000340DC(v4[4], (uint64_t)__p);
      if (v15 >= 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7));
      if (v15 < 0)
        operator delete(__p[0]);
      v9 = (unsigned __int16)objc_msgSend(v8, "containsString:", v3);

      v10 = (_QWORD *)v4[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v4[2];
          v12 = *v11 == (_QWORD)v4;
          v4 = v11;
        }
        while (!v12);
      }
      v6 += v9;
      v4 = v11;
    }
    while (v11 != v5);
  }

  return v6;
}

void sub_1002F1618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1002F164C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  void **v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  void **v14;

  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEBUG))
    sub_1006DDE4C();
  v4 = *(_QWORD **)(a1 + 224);
  if (v4 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v5 = v4[5];
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) == 1 && *(_BYTE *)(v5 + 264))
      {
        v6 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000340DC(v4[4], (uint64_t)__p);
          v7 = v12 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v14 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "AppManager::requestOfflineAdvertisingData notifying %{public}s", buf, 0xCu);
          if (v12 < 0)
            operator delete(__p[0]);
        }
        sub_10040CD00((_QWORD *)v5, a2);
      }
      v8 = (_QWORD *)v4[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v4[2];
          v10 = *v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v4 = v9;
    }
    while (v9 != (_QWORD *)(a1 + 232));
  }
}

void sub_1002F17EC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v1 = *(_QWORD **)(a1 + 224);
  v2 = (_QWORD *)(a1 + 232);
  if (v1 != (_QWORD *)(a1 + 232))
  {
    do
    {
      if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v1[5] + 16))(v1[5]))
        sub_1002F1878(a1, v1[4]);
      v4 = (_QWORD *)v1[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v1[2];
          v6 = *v5 == (_QWORD)v1;
          v1 = v5;
        }
        while (!v6);
      }
      v1 = v5;
    }
    while (v5 != v2);
  }
}

void sub_1002F1878(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  id v10;
  void *v11;
  char v12[24];

  if (a2)
  {
    v4 = *(_QWORD **)(a1 + 232);
    v2 = (_QWORD *)(a1 + 232);
    v3 = v4;
    if (v4)
    {
      v6 = v2;
      do
      {
        v7 = v3[4];
        v8 = v7 >= a2;
        if (v7 >= a2)
          v9 = v3;
        else
          v9 = v3 + 1;
        if (v8)
          v6 = v3;
        v3 = (_QWORD *)*v9;
      }
      while (*v9);
      if (v6 != v2 && v6[4] <= a2 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v6[5] + 16))(v6[5]))
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_100924CB0);
        v10 = sub_100651630((uint64_t)off_1009778C0);
        v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        if (sub_100404F44(v6[5], v11) && os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEBUG))
        {
          sub_1000340DC(a2, (uint64_t)v12);
          sub_1006DDEAC();
        }

      }
    }
  }
}

void sub_1002F19AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002F19C8(uint64_t result)
{
  *(_BYTE *)(result + 180) = 1;
  return result;
}

uint64_t sub_1002F19D4(uint64_t result)
{
  *(_BYTE *)(result + 92) = 1;
  return result;
}

id sub_1002F19E0(uint64_t a1)
{
  id result;
  _QWORD *v3;
  _QWORD *v4;
  id *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  *(_BYTE *)(a1 + 180) = 0;
  result = objc_msgSend(*(id *)(a1 + 320), "removeAllObjects");
  v3 = *(_QWORD **)(a1 + 224);
  v4 = (_QWORD *)(a1 + 232);
  if (v3 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v5 = (id *)v3[5];
      result = (id)(*((uint64_t (**)(id *))*v5 + 2))(v5);
      if (!(_DWORD)result)
      {
        result = v5[49];
        if (result)
        {
          result = objc_msgSend(result, "count");
          if (result)
          {
            v15 = 0u;
            v16 = 0u;
            v13 = 0u;
            v14 = 0u;
            v9 = v5[49];
            v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
            if (v10)
            {
              v11 = *(_QWORD *)v14;
              do
              {
                for (i = 0; i != v10; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v14 != v11)
                    objc_enumerationMutation(v9);
                  sub_100409F54((uint64_t)v5, *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i), 0, 0);
                }
                v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
              }
              while (v10);
            }

            result = objc_msgSend(v5[49], "removeAllObjects");
          }
        }
      }
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  return result;
}

void sub_1002F1B6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1002F1B8C(uint64_t a1)
{
  return sub_1002F19E0(a1 - 88);
}

void sub_1002F1B94(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  uint64_t v5;

  v3 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 138543362;
    v5 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "GATT Device %{public}@ connected", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1002F1C34(uint64_t a1, uint64_t a2)
{
  sub_1002F1B94(a1, a2);
}

void sub_1002F1C3C(uint64_t a1, void *a2, int a3)
{
  id v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  id *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  unsigned int v17;
  NSObject *v18;
  int v19;
  id v20;

  v5 = a2;
  v6 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v19 = 138543362;
    v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "GATT Device %{public}@ disconnected", (uint8_t *)&v19, 0xCu);
  }
  v7 = *(_QWORD **)(a1 + 224);
  if (v7 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v8 = v7[4];
      v9 = (id *)v7[5];
      if (!(*((unsigned int (**)(id *))*v9 + 2))(v9))
      {
        v10 = sub_10040563C((uint64_t)v9, (uint64_t)v5);
        if ((_DWORD)v10)
          sub_1002EAD70((uint64_t)v10, v8, (uint64_t)v9, v5, 0);
        if (a3 == 1)
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9[31], "objectForKeyedSubscript:", v5));
          v12 = v11;
          if (v11)
          {
            v13 = objc_msgSend(v11, "enableAutoReconnect");
            sub_1002E86F0((uint64_t)v13, v8, (uint64_t)v9, v5, 0, (uint64_t)v13);
          }

        }
      }
      v14 = (_QWORD *)v7[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v7[2];
          v16 = *v15 == (_QWORD)v7;
          v7 = v15;
        }
        while (!v16);
      }
      v7 = v15;
    }
    while (v15 != (_QWORD *)(a1 + 232));
  }
  if (a3 == 1)
  {
    v17 = objc_msgSend(*(id *)(a1 + 328), "containsObject:", v5);
    v18 = qword_100999898;
    if (v17)
    {
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        v19 = 138543362;
        v20 = v5;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Removing %{public}@ from classic gatt device tracking list", (uint8_t *)&v19, 0xCu);
      }
      objc_msgSend(*(id *)(a1 + 328), "removeObject:", v5);
    }
    else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_FAULT))
    {
      sub_1006DDEF8();
    }
  }

}

void sub_1002F1E60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F1E90(uint64_t a1, void *a2, int a3)
{
  sub_1002F1C3C(a1 - 96, a2, a3);
}

void sub_1002F1E98(uint64_t a1, void *a2, int a3, int a4)
{
  id v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  NSObject *v18;
  NSObject *v19;
  int v20;
  uint8_t v21[4];
  id v22;
  uuid_t dst;
  _BYTE buf[18];
  __int16 v25;
  int v26;

  v7 = a2;
  v8 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543874;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    v25 = 1024;
    v26 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "GATT Device %{public}@ ready isInitiator=%d mtu=%d", buf, 0x18u);
  }
  v20 = 0;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  sub_100030BCC(buf, v7);
  if (qword_10097AC28 != -1)
    dispatch_once(&qword_10097AC28, &stru_100924CF0);
  v9 = qword_10097AC20;
  uuid_copy(dst, buf);
  if (sub_100484478(v9, dst, &v20))
  {
    v10 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v21 = 138543362;
      v22 = v7;
      _os_log_fault_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Failed to get GATT transport for device %{public}@, this is not good", v21, 0xCu);
      v10 = qword_100999898;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_1006DDF90();
  }
  else
  {
    v11 = *(_QWORD **)(a1 + 224);
    if (v11 != (_QWORD *)(a1 + 232))
    {
      do
      {
        v12 = v11[4];
        v13 = v11[5];
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13) && sub_100405498(v13, v7))
        {
          v14 = (uint64_t)sub_10040563C(v13, (uint64_t)v7);
          if ((v14 & 1) == 0)
            sub_1002EAD70(v14, v12, v13, v7, 1u);
        }
        v15 = (_QWORD *)v11[1];
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = (_QWORD *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (_QWORD *)v11[2];
            v17 = *v16 == (_QWORD)v11;
            v11 = v16;
          }
          while (!v17);
        }
        v11 = v16;
      }
      while (v16 != (_QWORD *)(a1 + 232));
    }
    if (v20 == 1)
    {
      if ((objc_msgSend(*(id *)(a1 + 328), "containsObject:", v7) & 1) == 0)
      {
        v18 = qword_100999898;
        if (v7)
        {
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v21 = 138543362;
            v22 = v7;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Keeping track of classic device %{public}@", v21, 0xCu);
          }
          objc_msgSend(*(id *)(a1 + 328), "addObject:", v7);
        }
        else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
        {
          sub_1006DDF64();
        }
      }
    }
    else
    {
      v19 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Starting device disconnection watchdog", v21, 2u);
      }
      sub_1002E7488(a1, v7, 1u, 0, 0);
    }
    sub_1002E95F8(a1);
  }

}

void sub_1002F21CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F21F0(uint64_t a1, void *a2, int a3, int a4)
{
  sub_1002F1E98(a1 - 96, a2, a3, a4);
}

uint64_t sub_1002F21F8(uint64_t a1, void *a2)
{
  id v2;
  int v3;
  _BOOL4 v4;
  uint64_t v5;
  unsigned __int8 *v6;
  NSObject *v7;
  int v9;
  id v10;
  __int16 v11;
  int v12;
  __int16 v13;
  _BOOL4 v14;
  __int16 v15;
  _BOOL4 v16;

  v2 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100924CB0);
  v3 = sub_100656CE8((uint64_t)off_1009778C0, v2);
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100924C90);
  v4 = sub_100030864(qword_1009778B0, v2);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100924CB0);
  v5 = sub_1000589DC((uint64_t)off_1009778C0, v2, 0);
  if (v5)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100924F10);
    v6 = (unsigned __int8 *)sub_10006D488((uint64_t)off_1009778E0, v5, 0);
    if (v6)
      LODWORD(v5) = sub_10043E93C(v6);
    else
      LODWORD(v5) = 0;
  }
  v7 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 138544130;
    v10 = v2;
    v11 = 1024;
    v12 = v5;
    v13 = 1024;
    v14 = v4;
    v15 = 1024;
    v16 = v3 != 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Device %{public}@ classicPaired %d, lePaired %d, discoveredViaLeScan %d", (uint8_t *)&v9, 0x1Eu);
  }

  return v5 & ((v3 == 0) & ~v4);
}

void sub_1002F23E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1002F240C(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = *(_QWORD **)(a1 + 232);
  v2 = (_QWORD *)(a1 + 232);
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  return v5 != v2 && v5[4] <= a2 && (v9 = v5[5]) != 0 && *(_BYTE *)(v9 + 24) != 0;
}

BOOL sub_1002F2468(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = *(_QWORD **)(a1 + 232);
  v2 = (_QWORD *)(a1 + 232);
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  return v5 != v2 && v5[4] <= a2 && (v9 = v5[5]) != 0 && *(_BYTE *)(v9 + 505) != 0;
}

BOOL sub_1002F24C4(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = *(_QWORD **)(a1 + 232);
  v2 = (_QWORD *)(a1 + 232);
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  return v5 != v2 && v5[4] <= a2 && (v9 = v5[5]) != 0 && *(_BYTE *)(v9 + 506) != 0;
}

uint64_t sub_1002F2520(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = a3;
  if (!a2)
    goto LABEL_17;
  v8 = *(_QWORD **)(a1 + 232);
  v7 = (_QWORD *)(a1 + 232);
  v6 = v8;
  if (v8)
  {
    v9 = v7;
    do
    {
      v10 = v6[4];
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = v6;
      else
        v12 = v6 + 1;
      if (v11)
        v9 = v6;
      v6 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 != v7 && v9[4] <= a2 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v9[5] + 16))(v9[5]))
    {
      v14 = v9[5];
      if (v14)
      {
        v13 = sub_100408588(v14, v5);
        goto LABEL_18;
      }
LABEL_17:
      v13 = 1;
      goto LABEL_18;
    }
  }
  v13 = 0;
LABEL_18:

  return v13;
}

void sub_1002F25D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F25E4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  NSObject *v17;
  void **v18;
  unint64_t v19;
  void *v20[2];
  char v21;
  _BYTE __p[12];
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  void *v26;

  v6 = (_QWORD *)(a1 + 232);
  v5 = *(_QWORD **)(a1 + 232);
  if (!v5)
    goto LABEL_12;
  v7 = (_QWORD *)(a1 + 232);
  do
  {
    v8 = v5[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v5;
    else
      v10 = v5 + 1;
    if (v9)
      v7 = v5;
    v5 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == v6 || v7[4] > a2)
LABEL_12:
    v7 = (_QWORD *)(a1 + 232);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  if (v7 != v6 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v7[5] + 16))(v7[5]))
  {
    v12 = v7[5];
    if (v12)
    {
      v13 = *a3;
      v14 = a3[1];
      if (*a3 != v14)
      {
        do
        {
          sub_10006887C(v13, __p);
          if (v25 >= 0)
            v15 = __p;
          else
            v15 = *(_BYTE **)__p;
          v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15));
          objc_msgSend(v11, "addObject:", v16);

          if (SHIBYTE(v25) < 0)
            operator delete(*(void **)__p);
          v13 += 20;
        }
        while (v13 != v14);
      }
      objc_storeStrong((id *)(v12 + 224), v11);
    }
  }
  v17 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000340DC(a2, (uint64_t)v20);
    if (v21 >= 0)
      v18 = v20;
    else
      v18 = (void **)v20[0];
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 2);
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v18;
    v23 = 2048;
    v24 = v19;
    v25 = 2112;
    v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Limiting session %s services (%lu) %@", __p, 0x20u);
    if (v21 < 0)
      operator delete(v20[0]);
  }

}

void sub_1002F2804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1002F2848(uint64_t a1, unint64_t a2, unsigned __int16 **a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  void *v15;
  NSObject *v16;
  void **v17;
  uint64_t v18;
  void *__p[2];
  char v20;
  uint8_t buf[4];
  void **v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  void *v26;

  v6 = (_QWORD *)(a1 + 232);
  v5 = *(_QWORD **)(a1 + 232);
  if (!v5)
    goto LABEL_12;
  v7 = (_QWORD *)(a1 + 232);
  do
  {
    v8 = v5[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v5;
    else
      v10 = v5 + 1;
    if (v9)
      v7 = v5;
    v5 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == v6 || v7[4] > a2)
LABEL_12:
    v7 = (_QWORD *)(a1 + 232);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  if (v7 != v6 && !(*(unsigned int (**)(_QWORD))(*(_QWORD *)v7[5] + 16))(v7[5]))
  {
    v12 = v7[5];
    if (v12)
    {
      v13 = *a3;
      v14 = a3[1];
      if (*a3 != v14)
      {
        do
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *v13));
          objc_msgSend(v11, "addObject:", v15);

          ++v13;
        }
        while (v13 != v14);
      }
      objc_storeStrong((id *)(v12 + 232), v11);
    }
  }
  v16 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000340DC(a2, (uint64_t)__p);
    if (v20 >= 0)
      v17 = __p;
    else
      v17 = (void **)__p[0];
    v18 = a3[1] - *a3;
    *(_DWORD *)buf = 136315650;
    v22 = v17;
    v23 = 2048;
    v24 = v18;
    v25 = 2112;
    v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Limiting session %s manufacturer IDs (%lu) %@", buf, 0x20u);
    if (v20 < 0)
      operator delete(__p[0]);
  }

}

void sub_1002F2A24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F2A50(uint64_t a1, unint64_t a2, uint64_t **a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  NSMutableArray *v12;
  NSObject *v13;
  void **v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  void *v20;
  void *__p[2];
  char v22;
  uint8_t buf[4];
  void **v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  NSMutableArray *v28;

  v7 = *(_QWORD **)(a1 + 232);
  v5 = (_QWORD *)(a1 + 232);
  v6 = v7;
  if (!v7)
    goto LABEL_12;
  v8 = v5;
  do
  {
    v9 = v6[4];
    v10 = v9 >= a2;
    if (v9 >= a2)
      v11 = v6;
    else
      v11 = v6 + 1;
    if (v10)
      v8 = v6;
    v6 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v8 != v5 && v8[4] <= a2)
  {
    v12 = objc_opt_new(NSMutableArray);
    if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v8[5] + 16))(v8[5]))
    {
      v16 = v8[5];
      if (v16)
      {
        v17 = *a3;
        v18 = a3[1];
        if (*a3 != v18)
        {
          do
          {
            v19 = v17;
            if (*((char *)v17 + 23) < 0)
              v19 = (uint64_t *)*v17;
            v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v19));
            -[NSMutableArray addObject:](v12, "addObject:", v20);

            v17 += 3;
          }
          while (v17 != v18);
        }
        objc_storeStrong((id *)(v16 + 240), v12);
      }
    }
  }
  else
  {
LABEL_12:
    v12 = objc_opt_new(NSMutableArray);
  }
  v13 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000340DC(a2, (uint64_t)__p);
    if (v22 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    v15 = 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3);
    *(_DWORD *)buf = 136315650;
    v24 = v14;
    v25 = 2048;
    v26 = v15;
    v27 = 2112;
    v28 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Limiting session %s scan name substrings (%lu) %@", buf, 0x20u);
    if (v22 < 0)
      operator delete(__p[0]);
  }

}

void sub_1002F2C44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F2C70(uint64_t a1, void *a2, void *a3, __int128 **a4, uint64_t a5, __int128 **a6)
{
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *__p[3];
  _QWORD v24[3];
  void **v25;

  v11 = a2;
  v12 = a3;
  v13 = sub_1000419F4();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3321888768;
  v16[2] = sub_1002F2E44;
  v16[3] = &unk_100924B60;
  v19 = a1;
  v14 = v11;
  v17 = v14;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  sub_1000B61B8((char *)&v20, *a4, a4[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a4[1] - (char *)*a4) >> 2));
  sub_1002F64C0(__p, a5);
  memset(v24, 0, sizeof(v24));
  sub_1002A46F4((char *)v24, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v15 = v12;
  v18 = v15;
  sub_100041A34(v13, v16);

  v25 = (void **)v24;
  sub_100091BF8(&v25);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }

}

void sub_1002F2DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v24 - 72) = v23;
  sub_100091BF8((void ***)(v24 - 72));
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);

  _Unwind_Resume(a1);
}

void sub_1002F2E44(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  id *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  void *v10;
  void *v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  void *v14;
  void *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  _QWORD *v23;
  void *__p[2];
  char v25;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD **)(v1 + 224);
  v3 = (_QWORD *)(v1 + 232);
  if (v2 != (_QWORD *)(v1 + 232))
  {
    v23 = (_QWORD *)(v1 + 232);
    do
    {
      v5 = (id *)v2[5];
      if (objc_msgSend(v5[11], "isEqualToString:", *(_QWORD *)(a1 + 32), v23)
        && !(*((unsigned int (**)(id *))*v5 + 2))(v5)
        && sub_10006AB38((uint64_t)v5))
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
        v7 = *(_QWORD *)(a1 + 56);
        v8 = *(_QWORD *)(a1 + 64);
        while (v7 != v8)
        {
          sub_10006887C(v7, __p);
          if (v25 >= 0)
            v9 = __p;
          else
            v9 = (void **)__p[0];
          v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));
          objc_msgSend(v6, "addObject:", v10);

          if (v25 < 0)
            operator delete(__p[0]);
          v7 += 20;
        }
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 1));
        v12 = *(unsigned __int16 **)(a1 + 80);
        v13 = *(unsigned __int16 **)(a1 + 88);
        while (v12 != v13)
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *v12));
          objc_msgSend(v11, "addObject:", v14);

          ++v12;
        }
        v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 3)));
        v17 = *(uint64_t **)(a1 + 104);
        v16 = *(uint64_t **)(a1 + 112);
        while (v17 != v16)
        {
          v18 = v17;
          if (*((char *)v17 + 23) < 0)
            v18 = (uint64_t *)*v17;
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18));
          objc_msgSend(v15, "addObject:", v19);

          v17 += 3;
        }
        sub_1004080F4((uint64_t)v5, 1, *(void **)(a1 + 40), v6, v11, v15);

        v3 = v23;
      }
      v20 = (_QWORD *)v2[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v2[2];
          v22 = *v21 == (_QWORD)v2;
          v2 = v21;
        }
        while (!v22);
      }
      v2 = v21;
    }
    while (v21 != v3);
  }
}

void sub_1002F3088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

char *sub_1002F30F0(uint64_t a1, __int128 **a2)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v4 = a1 + 56;
  *(_QWORD *)(a1 + 72) = 0;
  sub_1000B61B8((char *)(a1 + 56), a2[7], a2[8], 0xCCCCCCCCCCCCCCCDLL * (((char *)a2[8] - (char *)a2[7]) >> 2));
  sub_1002F64C0((_QWORD *)(v4 + 24), (uint64_t)(a2 + 10));
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  return sub_1002A46F4((char *)(a1 + 104), a2[13], a2[14], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[14] - (char *)a2[13]) >> 3));
}

void sub_1002F3180(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 88) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 64) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F31B4(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)(a1 + 104);
  sub_100091BF8(&v4);
  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(_QWORD *)(a1 + 64) = v3;
    operator delete(v3);
  }
}

void sub_1002F3208(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002F32B8;
  v6[3] = &unk_100918868;
  v8 = a1;
  v5 = v3;
  v7 = v5;
  sub_100041A34(v4, v6);

}

void sub_1002F3298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1002F32B8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  id *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD **)(v1 + 224);
  v3 = (_QWORD *)(v1 + 232);
  if (v2 != (_QWORD *)(v1 + 232))
  {
    do
    {
      v5 = (id *)v2[5];
      if (objc_msgSend(v5[11], "isEqualToString:", *(_QWORD *)(a1 + 32))
        && !(*((unsigned int (**)(id *))*v5 + 2))(v5)
        && sub_10006AB38((uint64_t)v5))
      {
        sub_1004080F4((uint64_t)v5, 0, 0, 0, 0, 0);
      }
      v6 = (_QWORD *)v2[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v2[2];
          v8 = *v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != v3);
  }
}

void sub_1002F3378(uint64_t a1)
{
  id v2;
  NSObject *v3;
  _QWORD *v4;
  NSObject *v5;
  _QWORD *v6;
  uint64_t i;
  double v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  int v14;
  id v15;
  CFAbsoluteTime Current;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t buf[4];
  _BYTE v25[14];
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;

  v2 = objc_alloc_init((Class)NSDateFormatter);
  objc_msgSend(v2, "setDateFormat:", CFSTR("yyyy-MM-dd H:mm:ss"));
  v3 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)v25 = CFAbsoluteTimeGetCurrent();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump:         fScreenOffWakeHistoryMap: %f", buf, 0xCu);
  }
  v4 = *(_QWORD **)(a1 + 400);
  v20 = (_QWORD *)(a1 + 408);
  if (v4 != (_QWORD *)(a1 + 408))
  {
    do
    {
      v5 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        v6 = v4 + 4;
        if (*((char *)v4 + 55) < 0)
          v6 = (_QWORD *)*v6;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v25 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:         %{public}s:", buf, 0xCu);
      }
      v21 = 0;
      v22 = 0;
      v23 = 0;
      sub_1002F753C(&v21, (uint64_t)(v4 + 7));
      for (i = v22; (uint64_t *)i != &v21; i = *(_QWORD *)(i + 8))
      {
        v8 = *(double *)(i + 16);
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v8));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "stringFromDate:", v9));
        LODWORD(v11) = llround((v8 - floor(v8)) * 1000.0);
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%000d"), v10, v11));
        v13 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          v14 = *(unsigned __int8 *)(i + 24);
          v15 = objc_msgSend(objc_retainAutorelease(v12), "UTF8String");
          Current = CFAbsoluteTimeGetCurrent();
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)v25 = v14;
          *(_WORD *)&v25[4] = 2082;
          *(_QWORD *)&v25[6] = v15;
          v26 = 2048;
          v27 = v8;
          v28 = 2048;
          v29 = Current - v8;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "statedump:       reason %d time:%{public}s %.3f secs(%-12.2f secs ago)", buf, 0x26u);
        }

      }
      sub_10002074C(&v21);
      v17 = (_QWORD *)v4[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v4[2];
          v19 = *v18 == (_QWORD)v4;
          v4 = v18;
        }
        while (!v19);
      }
      v4 = v18;
    }
    while (v18 != v20);
  }

}

void sub_1002F365C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002F36B0(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;

  v9 = a3;
  v10 = sub_10000A1A4(a1, a2, 0);
  if (v10)
    v11 = sub_100409EC0(v10, a2, v9, a4, a5);
  else
    v11 = 12;

  return v11;
}

void sub_1002F372C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002F373C(uint64_t a1, unint64_t a2, void *a3, int a4, void *a5)
{
  id v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;

  v9 = a3;
  v10 = a5;
  v11 = sub_10000A1A4(a1, a2, 2u);
  if (v11)
  {
    v12 = *(_QWORD **)(a1 + 224);
    v13 = (_QWORD *)(a1 + 232);
    if (v12 == (_QWORD *)(a1 + 232))
    {
LABEL_13:
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11))
      {
        v19 = sub_100409F54(v11, v9, a4, v10);
        goto LABEL_20;
      }
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
        sub_1006DE020();
    }
    else
    {
      while (1)
      {
        if (v12[4] != a2)
        {
          v14 = (_QWORD *)v12[5];
          if (!(*(unsigned int (**)(_QWORD *))(*v14 + 16))(v14))
          {
            v15 = (void *)v14[49];
            if (v15)
            {
              if (objc_msgSend(v15, "containsObject:", v9))
                break;
            }
          }
        }
        v16 = (_QWORD *)v12[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v12[2];
            v18 = *v17 == (_QWORD)v12;
            v12 = v17;
          }
          while (!v18);
        }
        v12 = v17;
        if (v17 == v13)
          goto LABEL_13;
      }
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
        sub_1006DE04C();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
  {
    sub_1006DDFF4();
  }
  v19 = 3;
LABEL_20:

  return v19;
}

void sub_1002F38DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002F3900(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002F39B0;
  v6[3] = &unk_100918868;
  v8 = a1;
  v5 = v3;
  v7 = v5;
  sub_100041A34(v4, v6);

}

void sub_1002F3990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1002F39B0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  id *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  id v11;
  int v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v12 = 138412290;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "FastLEConnection:AppManager::fastLeConnectionDisabledForDevice device %@", (uint8_t *)&v12, 0xCu);
  }
  v5 = *(_QWORD **)(v2 + 224);
  v6 = (_QWORD *)(v2 + 232);
  if (v5 != v6)
  {
    do
    {
      v7 = (id *)v5[5];
      if (!(*((unsigned int (**)(id *))*v7 + 2))(v7))
      {
        v11 = v7[49];
        if (v11)
        {
          if (objc_msgSend(v11, "count"))
            objc_msgSend(v7[49], "removeObject:", *(_QWORD *)(a1 + 32));
        }
      }
      v8 = (_QWORD *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != v6);
  }
}

void sub_1002F3AE4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002F3B94;
  v6[3] = &unk_100918868;
  v8 = a1;
  v5 = v3;
  v7 = v5;
  sub_100041A34(v4, v6);

}

void sub_1002F3B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1002F3B94(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  int v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v11 = 138543362;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Device %{public}@ evicted", (uint8_t *)&v11, 0xCu);
  }
  v5 = *(_QWORD **)(v2 + 224);
  v6 = (_QWORD *)(v2 + 232);
  if (v5 != v6)
  {
    do
    {
      v7 = (_QWORD *)v5[5];
      if (!(*(unsigned int (**)(_QWORD *))(*v7 + 16))(v7))
        sub_10040A35C(v7, *(void **)(a1 + 32));
      v8 = (_QWORD *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != v6);
  }
}

void sub_1002F3CB0(uint64_t a1, void *a2)
{
  sub_1002F3AE4(a1 - 168, a2);
}

void sub_1002F3CB8(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  id v3;
  uint64_t v4;
  void *i;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  __int128 v9;
  _QWORD *v10;
  id *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  NSObject *v17;
  _BYTE *v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  NSObject *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  NSObject *v35;
  id v36;
  uint64_t v37;
  void *j;
  id v39;
  NSObject *v40;
  id v41;
  NSObject *v42;
  id v43;
  uint64_t v44;
  void *k;
  id v46;
  NSObject *v47;
  NSObject *v48;
  _QWORD *v49;
  id *v50;
  uint64_t v51;
  NSObject *v52;
  _BYTE *v53;
  id v54;
  BOOL v55;
  id v56;
  uint64_t v57;
  void *m;
  id v59;
  NSObject *v60;
  _QWORD *v61;
  _QWORD *v62;
  NSObject *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  NSObject *v69;
  _BYTE *v70;
  NSObject *v71;
  _QWORD *v72;
  NSObject *v73;
  _BYTE *v74;
  _QWORD *v75;
  _QWORD *v76;
  id v77;
  uint64_t v78;
  void *n;
  NSObject *v80;
  uint64_t v81;
  NSObject *v82;
  id v83;
  uint64_t v84;
  void *ii;
  NSObject *v86;
  id v87;
  NSObject *v88;
  id v89;
  uint64_t v90;
  void *jj;
  NSObject *v92;
  id v93;
  NSObject *v94;
  NSObject *v95;
  id v96;
  uint64_t v97;
  void *kk;
  NSObject *v99;
  id v100;
  NSObject *v101;
  _QWORD *v102;
  uint64_t v103;
  NSObject *v104;
  id v105;
  _QWORD *v106;
  _QWORD *v107;
  id v108;
  uint64_t v109;
  void *mm;
  NSObject *v111;
  uint64_t v112;
  _QWORD *v113;
  NSObject *v114;
  uint64_t v115;
  int v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  NSObject *v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  NSObject *v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  NSObject *v131;
  _QWORD *v132;
  uint64_t v133;
  void *v134;
  BOOL v135;
  NSObject *v136;
  _BYTE *v137;
  id v138;
  uint64_t v139;
  void *nn;
  NSObject *v141;
  uint64_t v142;
  void *v143;
  const char *v144;
  _QWORD *v145;
  _QWORD *v146;
  NSObject *v147;
  _QWORD *v148;
  uint64_t v149;
  NSObject *v150;
  _BYTE *v151;
  _QWORD *v152;
  _QWORD *v153;
  NSObject *v154;
  __int128 v155;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  id *v160;
  id v161;
  id v162;
  int v163;
  int v164;
  int v165;
  id v166;
  id obj;
  id obja;
  id objb;
  id objc;
  id objd;
  id obje;
  id objf;
  id objg;
  id objh;
  id obji;
  id objj;
  id objk;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  _BYTE v223[128];
  _BYTE v224[128];
  _BYTE v225[128];
  _BYTE v226[128];
  _BYTE v227[128];
  _BYTE v228[128];
  _BYTE v229[128];
  _BYTE v230[128];
  uint8_t v231[128];
  _BYTE buf[14];
  const char *v233;
  id v234;
  __int16 v235;
  int v236;
  __int16 v237;
  int v238;
  __int16 v239;
  int v240;
  __int16 v241;
  int v242;
  __int16 v243;
  int v244;
  __int16 v245;
  int v246;
  uint8_t v247[128];
  uint8_t v248[4];
  _BYTE *v249;
  _BYTE v250[128];

  v1 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: ---------------- Application Manager ----------------", buf, 2u);
    v1 = qword_100999898;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 176))
      v2 = "running";
    else
      v2 = "stopped";
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: Cleanup Timer: %{public}s", buf, 0xCu);
    v1 = qword_100999898;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: Known Classic GATT peripheral UUID's:", buf, 2u);
  }
  v221 = 0u;
  v222 = 0u;
  v219 = 0u;
  v220 = 0u;
  obj = *(id *)(a1 + 328);
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v219, v250, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v220;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v220 != v4)
          objc_enumerationMutation(obj);
        v6 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          v7 = *(_QWORD *)(*((_QWORD *)&v219 + 1) + 8 * (_QWORD)i);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "statedump: \t%{public}@", buf, 0xCu);
        }
      }
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v219, v250, 16);
    }
    while (v3);
  }

  v8 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "statedump: CBCentralSessions interested in devices:", buf, 2u);
  }
  v10 = *(_QWORD **)(a1 + 224);
  v158 = (_QWORD *)(a1 + 232);
  if (v10 != (_QWORD *)(a1 + 232))
  {
    *(_QWORD *)&v9 = 136446210;
    v155 = v9;
    do
    {
      v12 = v10[4];
      v11 = (id *)v10[5];
      v157 = v10;
      if (!(*((unsigned int (**)(id *))*v11 + 2))(v11))
      {
        v17 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000340DC(v12, (uint64_t)buf);
          v18 = buf;
          if (SBYTE1(v234) < 0)
            v18 = *(_BYTE **)buf;
          *(_DWORD *)v248 = v155;
          v249 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "statedump: \t\"%{public}s\":", v248, 0xCu);
          if (SBYTE1(v234) < 0)
            operator delete(*(void **)buf);
          v17 = qword_100999898;
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "statedump:         deviceConnections:", buf, 2u);
        }
        if (objc_msgSend(v11[31], "count", v155))
        {
          v217 = 0u;
          v218 = 0u;
          v215 = 0u;
          v216 = 0u;
          obja = v11[31];
          v19 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v215, v247, 16);
          if (v19)
          {
            v20 = *(_QWORD *)v216;
            v159 = *(_QWORD *)v216;
            v160 = v11;
            do
            {
              v21 = 0;
              v161 = v19;
              do
              {
                if (*(_QWORD *)v216 != v20)
                  objc_enumerationMutation(obja);
                v166 = *(id *)(*((_QWORD *)&v215 + 1) + 8 * (_QWORD)v21);
                v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11[31], "objectForKeyedSubscript:"));
                v23 = qword_100999898;
                if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138543362;
                  *(_QWORD *)&buf[4] = v166;
                  _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "statedump: \t\t         Peripheral:\"%{public}@\"", buf, 0xCu);
                  v23 = qword_100999898;
                }
                if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
                {
                  if (objc_msgSend(v22, "connectionAlerts"))
                    v24 = 89;
                  else
                    v24 = 78;
                  v165 = v24;
                  if (objc_msgSend(v22, "disconnectionAlerts"))
                    v25 = 89;
                  else
                    v25 = 78;
                  v164 = v25;
                  if (objc_msgSend(v22, "notificationAlerts"))
                    v26 = 89;
                  else
                    v26 = 78;
                  v163 = v26;
                  v162 = objc_msgSend(v22, "delay");
                  if (objc_msgSend(v22, "wantsObjectDiscoveryData"))
                    v27 = 89;
                  else
                    v27 = 78;
                  if (objc_msgSend(v22, "enableTransportBridging"))
                    v28 = 89;
                  else
                    v28 = 78;
                  if (objc_msgSend(v22, "disableLeGATT"))
                    v29 = 89;
                  else
                    v29 = 78;
                  if (objc_msgSend(v22, "ancsRequired"))
                    v30 = 89;
                  else
                    v30 = 78;
                  v31 = objc_msgSend(v22, "hideFromBTSettings");
                  v32 = objc_msgSend(v22, "enableAutoReconnect");
                  *(_DWORD *)buf = 67111424;
                  if (v31)
                    v33 = 89;
                  else
                    v33 = 78;
                  *(_DWORD *)&buf[4] = v165;
                  if (v32)
                    v34 = 89;
                  else
                    v34 = 78;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v164;
                  LOWORD(v233) = 1024;
                  *(_DWORD *)((char *)&v233 + 2) = v163;
                  HIWORD(v233) = 2048;
                  v234 = v162;
                  v235 = 1024;
                  v236 = v27;
                  v237 = 1024;
                  v238 = v28;
                  v239 = 1024;
                  v240 = v29;
                  v241 = 1024;
                  v242 = v30;
                  v243 = 1024;
                  v244 = v33;
                  v245 = 1024;
                  v246 = v34;
                  _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "statedump: \t\t         \toptions: connectAlrts:%c disconAlrts:%c notifAlrts:%c delay:%lu ObjDisc:%c TrsprtBrdge:%c noLeGATT:%c ANCS:%c hide:%c autoReconn:%c", buf, 0x42u);
                  v20 = v159;
                  v11 = v160;
                  v19 = v161;
                }

                v21 = (char *)v21 + 1;
              }
              while (v19 != v21);
              v19 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v215, v247, 16);
            }
            while (v19);
          }

        }
        v35 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "statedump:         pending deviceConnections:", buf, 2u);
        }
        if (objc_msgSend(v11[32], "count"))
        {
          v213 = 0u;
          v214 = 0u;
          v211 = 0u;
          v212 = 0u;
          objb = v11[32];
          v36 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v211, v231, 16);
          if (v36)
          {
            v37 = *(_QWORD *)v212;
            do
            {
              for (j = 0; j != v36; j = (char *)j + 1)
              {
                if (*(_QWORD *)v212 != v37)
                  objc_enumerationMutation(objb);
                v39 = *(id *)(*((_QWORD *)&v211 + 1) + 8 * (_QWORD)j);
                v40 = qword_100999898;
                if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138543362;
                  *(_QWORD *)&buf[4] = v39;
                  _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "statedump: \t\t         Peripheral:\"%{public}@\"", buf, 0xCu);
                }

              }
              v36 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v211, v231, 16);
            }
            while (v36);
          }

        }
        (*((void (**)(id *))*v11 + 15))(v11);
        v41 = v11[49];
        if (v41 && objc_msgSend(v41, "count"))
        {
          v42 = qword_100999898;
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump:         Fast LE Connection Devices:", buf, 2u);
          }
          v209 = 0u;
          v210 = 0u;
          v207 = 0u;
          v208 = 0u;
          objc = v11[49];
          v43 = objc_msgSend(objc, "countByEnumeratingWithState:objects:count:", &v207, v230, 16);
          if (v43)
          {
            v44 = *(_QWORD *)v208;
            do
            {
              for (k = 0; k != v43; k = (char *)k + 1)
              {
                if (*(_QWORD *)v208 != v44)
                  objc_enumerationMutation(objc);
                v46 = *(id *)(*((_QWORD *)&v207 + 1) + 8 * (_QWORD)k);
                v47 = qword_100999898;
                if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138543362;
                  *(_QWORD *)&buf[4] = v46;
                  _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "statedump: \t\t         Peripheral:\"%{public}@\"", buf, 0xCu);
                }

              }
              v43 = objc_msgSend(objc, "countByEnumeratingWithState:objects:count:", &v207, v230, 16);
            }
            while (v43);
          }

        }
      }
      v13 = v157;
      v14 = (_QWORD *)v157[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v13[2];
          v16 = *v15 == (_QWORD)v13;
          v13 = v15;
        }
        while (!v16);
      }
      v10 = v15;
    }
    while (v15 != v158);
  }
  v48 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "statedump: CBPeripheralSession interested in devices:", buf, 2u);
  }
  v49 = *(_QWORD **)(a1 + 224);
  if (v49 != v158)
  {
    do
    {
      v51 = v49[4];
      v50 = (id *)v49[5];
      if ((*((unsigned int (**)(id *))*v50 + 2))(v50) == 1)
      {
        v52 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000340DC(v51, (uint64_t)buf);
          v53 = buf;
          if (SBYTE1(v234) < 0)
            v53 = *(_BYTE **)buf;
          *(_DWORD *)v248 = 136446210;
          v249 = v53;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "statedump: \t\"%{public}s\":", v248, 0xCu);
          if (SBYTE1(v234) < 0)
            operator delete(*(void **)buf);
          v52 = qword_100999898;
        }
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "statedump:         devices Read/Write GATT:", buf, 2u);
        }
        v54 = v50[32];
        v55 = objc_msgSend(v54, "count") == 0;

        if (!v55)
        {
          v205 = 0u;
          v206 = 0u;
          v203 = 0u;
          v204 = 0u;
          objd = v50[32];
          v56 = objc_msgSend(objd, "countByEnumeratingWithState:objects:count:", &v203, v229, 16);
          if (v56)
          {
            v57 = *(_QWORD *)v204;
            do
            {
              for (m = 0; m != v56; m = (char *)m + 1)
              {
                if (*(_QWORD *)v204 != v57)
                  objc_enumerationMutation(objd);
                v59 = *(id *)(*((_QWORD *)&v203 + 1) + 8 * (_QWORD)m);
                v60 = qword_100999898;
                if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138543362;
                  *(_QWORD *)&buf[4] = v59;
                  _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "statedump: \t\t         Peripheral:\"%{public}@\"", buf, 0xCu);
                }

              }
              v56 = objc_msgSend(objd, "countByEnumeratingWithState:objects:count:", &v203, v229, 16);
            }
            while (v56);
          }

        }
      }
      v61 = (_QWORD *)v49[1];
      if (v61)
      {
        do
        {
          v62 = v61;
          v61 = (_QWORD *)*v61;
        }
        while (v61);
      }
      else
      {
        do
        {
          v62 = (_QWORD *)v49[2];
          v16 = *v62 == (_QWORD)v49;
          v49 = v62;
        }
        while (!v16);
      }
      v49 = v62;
    }
    while (v62 != v158);
  }
  v63 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "statedump: Registered Connecton Events:", buf, 2u);
  }
  v64 = *(_QWORD **)(a1 + 224);
  if (v64 != v158)
  {
    do
    {
      v66 = v64[4];
      v65 = v64[5];
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v65 + 16))(v65)
        && (*(_QWORD *)(v65 + 288) || objc_msgSend(*(id *)(v65 + 264), "count")))
      {
        v69 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000340DC(v66, (uint64_t)buf);
          v70 = SBYTE1(v234) >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)v248 = 136446210;
          v249 = v70;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "statedump: \t\"%{public}s\":", v248, 0xCu);
          if (SBYTE1(v234) < 0)
            operator delete(*(void **)buf);
        }
        if (*(_BYTE *)(v65 + 305))
        {
          v71 = qword_100999898;
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "statedump: \t\tAll Devices", buf, 2u);
          }
        }
        else
        {
          v72 = *(_QWORD **)(v65 + 272);
          if (v72 != (_QWORD *)(v65 + 280))
          {
            do
            {
              v73 = qword_100999898;
              if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
              {
                sub_10006887C((uint64_t)(v72 + 4), buf);
                v74 = SBYTE1(v234) >= 0 ? buf : *(_BYTE **)buf;
                *(_DWORD *)v248 = 136446210;
                v249 = v74;
                _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "statedump: \t\tGATT Service:\"%{public}s\"", v248, 0xCu);
                if (SBYTE1(v234) < 0)
                  operator delete(*(void **)buf);
              }
              v75 = (_QWORD *)v72[1];
              if (v75)
              {
                do
                {
                  v76 = v75;
                  v75 = (_QWORD *)*v75;
                }
                while (v75);
              }
              else
              {
                do
                {
                  v76 = (_QWORD *)v72[2];
                  v16 = *v76 == (_QWORD)v72;
                  v72 = v76;
                }
                while (!v16);
              }
              v72 = v76;
            }
            while (v76 != (_QWORD *)(v65 + 280));
          }
          v201 = 0u;
          v202 = 0u;
          v199 = 0u;
          v200 = 0u;
          obje = *(id *)(v65 + 264);
          v77 = objc_msgSend(obje, "countByEnumeratingWithState:objects:count:", &v199, v228, 16);
          if (v77)
          {
            v78 = *(_QWORD *)v200;
            do
            {
              for (n = 0; n != v77; n = (char *)n + 1)
              {
                if (*(_QWORD *)v200 != v78)
                  objc_enumerationMutation(obje);
                v80 = qword_100999898;
                if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
                {
                  v81 = *(_QWORD *)(*((_QWORD *)&v199 + 1) + 8 * (_QWORD)n);
                  *(_DWORD *)buf = 138543362;
                  *(_QWORD *)&buf[4] = v81;
                  _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "statedump: \t\tPeripheral:\"%{public}@\"", buf, 0xCu);
                }
              }
              v77 = objc_msgSend(obje, "countByEnumeratingWithState:objects:count:", &v199, v228, 16);
            }
            while (v77);
          }

        }
      }
      v67 = (_QWORD *)v64[1];
      if (v67)
      {
        do
        {
          v68 = v67;
          v67 = (_QWORD *)*v67;
        }
        while (v67);
      }
      else
      {
        do
        {
          v68 = (_QWORD *)v64[2];
          v16 = *v68 == (_QWORD)v64;
          v64 = v68;
        }
        while (!v16);
      }
      v64 = v68;
    }
    while (v68 != v158);
  }
  v82 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "statedump: Apps allowed to use bluetooth:", buf, 2u);
  }
  v197 = 0u;
  v198 = 0u;
  v195 = 0u;
  v196 = 0u;
  objf = *(id *)(a1 + 336);
  v83 = objc_msgSend(objf, "countByEnumeratingWithState:objects:count:", &v195, v227, 16);
  if (v83)
  {
    v84 = *(_QWORD *)v196;
    do
    {
      for (ii = 0; ii != v83; ii = (char *)ii + 1)
      {
        if (*(_QWORD *)v196 != v84)
          objc_enumerationMutation(objf);
        v86 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          v87 = objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v195 + 1) + 8 * (_QWORD)ii)), "UTF8String");
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v87;
          _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "statedump: \t\"%{public}s\":", buf, 0xCu);
        }
      }
      v83 = objc_msgSend(objf, "countByEnumeratingWithState:objects:count:", &v195, v227, 16);
    }
    while (v83);
  }

  v88 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "statedump: Apps disallowed to use bluetooth:", buf, 2u);
  }
  v193 = 0u;
  v194 = 0u;
  v191 = 0u;
  v192 = 0u;
  objg = *(id *)(a1 + 344);
  v89 = objc_msgSend(objg, "countByEnumeratingWithState:objects:count:", &v191, v226, 16);
  if (v89)
  {
    v90 = *(_QWORD *)v192;
    do
    {
      for (jj = 0; jj != v89; jj = (char *)jj + 1)
      {
        if (*(_QWORD *)v192 != v90)
          objc_enumerationMutation(objg);
        v92 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          v93 = objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v191 + 1) + 8 * (_QWORD)jj)), "UTF8String");
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v93;
          _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "statedump: \t\"%{public}s\":", buf, 0xCu);
        }
      }
      v89 = objc_msgSend(objg, "countByEnumeratingWithState:objects:count:", &v191, v226, 16);
    }
    while (v89);
  }

  v94 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "statedump: Apps Interested in FindMy devices:", buf, 2u);
  }
  objc_msgSend(*(id *)(a1 + 320), "enumerateKeysAndObjectsUsingBlock:", &stru_100924BB0, v155);
  v95 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "statedump: Sessions pending TCC:", buf, 2u);
  }
  v189 = 0u;
  v190 = 0u;
  v187 = 0u;
  v188 = 0u;
  objh = *(id *)(a1 + 352);
  v96 = objc_msgSend(objh, "countByEnumeratingWithState:objects:count:", &v187, v225, 16);
  if (v96)
  {
    v97 = *(_QWORD *)v188;
    do
    {
      for (kk = 0; kk != v96; kk = (char *)kk + 1)
      {
        if (*(_QWORD *)v188 != v97)
          objc_enumerationMutation(objh);
        v99 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          v100 = objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v187 + 1) + 8 * (_QWORD)kk)), "UTF8String");
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v100;
          _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "statedump: \t\"%{public}s\":", buf, 0xCu);
        }
      }
      v96 = objc_msgSend(objh, "countByEnumeratingWithState:objects:count:", &v187, v225, 16);
    }
    while (v96);
  }

  v101 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "statedump: Sessions with readyForTCCSent:", buf, 2u);
  }
  v102 = *(_QWORD **)(a1 + 224);
  if (v102 != v158)
  {
    do
    {
      v103 = v102[5];
      obji = *(id *)(v103 + 88);
      if (objc_msgSend(*(id *)(a1 + 352), "containsObject:"))
      {
        if (*(_BYTE *)(v103 + 38))
        {
          v104 = qword_100999898;
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
          {
            v105 = objc_msgSend(objc_retainAutorelease(obji), "UTF8String");
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v105;
            _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "statedump: \t\"%{public}s\":", buf, 0xCu);
          }
        }
      }

      v106 = (_QWORD *)v102[1];
      if (v106)
      {
        do
        {
          v107 = v106;
          v106 = (_QWORD *)*v106;
        }
        while (v106);
      }
      else
      {
        do
        {
          v107 = (_QWORD *)v102[2];
          v16 = *v107 == (_QWORD)v102;
          v102 = v107;
        }
        while (!v16);
      }
      v102 = v107;
    }
    while (v107 != v158);
  }
  v185 = 0u;
  v186 = 0u;
  v183 = 0u;
  v184 = 0u;
  objj = *(id *)(a1 + 296);
  v108 = objc_msgSend(objj, "countByEnumeratingWithState:objects:count:", &v183, v224, 16);
  if (v108)
  {
    v109 = *(_QWORD *)v184;
    do
    {
      for (mm = 0; mm != v108; mm = (char *)mm + 1)
      {
        if (*(_QWORD *)v184 != v109)
          objc_enumerationMutation(objj);
        v111 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          v112 = *(_QWORD *)(*((_QWORD *)&v183 + 1) + 8 * (_QWORD)mm);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v112;
          _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "statedump: Applications to be Resurrected %{public}@", buf, 0xCu);
        }
      }
      v108 = objc_msgSend(objj, "countByEnumeratingWithState:objects:count:", &v183, v224, 16);
    }
    while (v108);
  }

  v113 = *(_QWORD **)(a1 + 248);
  v114 = qword_100999898;
  if (v113 != (_QWORD *)(a1 + 256))
  {
    do
    {
      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
      {
        v115 = v113[4];
        v116 = *((_DWORD *)v113 + 10);
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v115;
        *(_WORD *)&buf[12] = 1024;
        LODWORD(v233) = v116;
        _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "statedump: Bundle checkin map: BundleID %{public}@, checkinTimes %d", buf, 0x12u);
        v114 = qword_100999898;
      }
      v117 = (_QWORD *)v113[1];
      if (v117)
      {
        do
        {
          v118 = v117;
          v117 = (_QWORD *)*v117;
        }
        while (v117);
      }
      else
      {
        do
        {
          v118 = (_QWORD *)v113[2];
          v16 = *v118 == (_QWORD)v113;
          v113 = v118;
        }
        while (!v16);
      }
      v113 = v118;
    }
    while (v118 != (_QWORD *)(a1 + 256));
  }
  if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "statedump: Sessions with pending FindMy device connections:", buf, 2u);
  }
  v119 = *(_QWORD **)(a1 + 224);
  if (v119 != v158)
  {
    do
    {
      v120 = (_QWORD *)v119[5];
      if (!(*(unsigned int (**)(_QWORD *))(*v120 + 16))(v120) && v120[41])
      {
        v123 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          v124 = v120[11];
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v124;
          _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEFAULT, "statedump:     %{public}@:", buf, 0xCu);
        }
        v125 = (_QWORD *)v120[39];
        v126 = v120 + 40;
        if (v125 != v120 + 40)
        {
          v127 = qword_100999898;
          do
          {
            if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
            {
              v128 = v125[4];
              *(_DWORD *)buf = 138543362;
              *(_QWORD *)&buf[4] = v128;
              _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEFAULT, "statedump:     %{public}@:", buf, 0xCu);
              v127 = qword_100999898;
            }
            v129 = (_QWORD *)v125[1];
            if (v129)
            {
              do
              {
                v130 = v129;
                v129 = (_QWORD *)*v129;
              }
              while (v129);
            }
            else
            {
              do
              {
                v130 = (_QWORD *)v125[2];
                v16 = *v130 == (_QWORD)v125;
                v125 = v130;
              }
              while (!v16);
            }
            v125 = v130;
          }
          while (v130 != v126);
        }
      }
      v121 = (_QWORD *)v119[1];
      if (v121)
      {
        do
        {
          v122 = v121;
          v121 = (_QWORD *)*v121;
        }
        while (v121);
      }
      else
      {
        do
        {
          v122 = (_QWORD *)v119[2];
          v16 = *v122 == (_QWORD)v119;
          v119 = v122;
        }
        while (!v16);
      }
      v119 = v122;
    }
    while (v122 != v158);
  }
  v131 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEFAULT, "statedump: Sessions with pending latency requirements for device connections:", buf, 2u);
  }
  v132 = *(_QWORD **)(a1 + 224);
  if (v132 != v158)
  {
    do
    {
      if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v132[5] + 16))(v132[5]))
      {
        v133 = v132[5];
        v134 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v133 + 80), "allKeys"));
        v135 = objc_msgSend(v134, "count") == 0;

        if (!v135)
        {
          v136 = qword_100999898;
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
          {
            sub_1000340DC(v132[4], (uint64_t)buf);
            v137 = buf;
            if (SBYTE1(v234) < 0)
              v137 = *(_BYTE **)buf;
            *(_DWORD *)v248 = 136446210;
            v249 = v137;
            _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_DEFAULT, "statedump:     %{public}s:", v248, 0xCu);
            if (SBYTE1(v234) < 0)
              operator delete(*(void **)buf);
          }
          v181 = 0u;
          v182 = 0u;
          v179 = 0u;
          v180 = 0u;
          objk = *(id *)(v133 + 80);
          v138 = objc_msgSend(objk, "countByEnumeratingWithState:objects:count:", &v179, v223, 16);
          if (v138)
          {
            v139 = *(_QWORD *)v180;
            do
            {
              for (nn = 0; nn != v138; nn = (char *)nn + 1)
              {
                if (*(_QWORD *)v180 != v139)
                  objc_enumerationMutation(objk);
                v141 = qword_100999898;
                if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
                {
                  v142 = *(_QWORD *)(*((_QWORD *)&v179 + 1) + 8 * (_QWORD)nn);
                  v143 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v133 + 80), "objectForKeyedSubscript:", v142));
                  v144 = sub_1002F04A8((int)objc_msgSend(v143, "intValue"));
                  *(_DWORD *)buf = 138543618;
                  *(_QWORD *)&buf[4] = v142;
                  *(_WORD *)&buf[12] = 2080;
                  v233 = v144;
                  _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_DEFAULT, "statedump:         %{public}@-->%s", buf, 0x16u);

                }
              }
              v138 = objc_msgSend(objk, "countByEnumeratingWithState:objects:count:", &v179, v223, 16);
            }
            while (v138);
          }

        }
      }
      v145 = (_QWORD *)v132[1];
      if (v145)
      {
        do
        {
          v146 = v145;
          v145 = (_QWORD *)*v145;
        }
        while (v145);
      }
      else
      {
        do
        {
          v146 = (_QWORD *)v132[2];
          v16 = *v146 == (_QWORD)v132;
          v132 = v146;
        }
        while (!v16);
      }
      v132 = v146;
    }
    while (v146 != v158);
  }
  v147 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v147, OS_LOG_TYPE_DEFAULT, "statedump: CBCentralManager LE Sessions:", buf, 2u);
  }
  v148 = *(_QWORD **)(a1 + 224);
  if (v148 != v158)
  {
    do
    {
      v149 = v148[4];
      if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v148[5] + 16))(v148[5]))
      {
        v150 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000340DC(v149, (uint64_t)buf);
          v151 = SBYTE1(v234) >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)v248 = 136446210;
          v249 = v151;
          _os_log_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_DEFAULT, "statedump: \t\"%{public}s\":", v248, 0xCu);
          if (SBYTE1(v234) < 0)
            operator delete(*(void **)buf);
        }
      }
      v152 = (_QWORD *)v148[1];
      if (v152)
      {
        do
        {
          v153 = v152;
          v152 = (_QWORD *)*v152;
        }
        while (v152);
      }
      else
      {
        do
        {
          v153 = (_QWORD *)v148[2];
          v16 = *v153 == (_QWORD)v148;
          v148 = v153;
        }
        while (!v16);
      }
      v148 = v153;
    }
    while (v153 != v158);
  }
  v154 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_DEFAULT, "statedump: fScreenOffWakeHistoryMap:", buf, 2u);
  }
  sub_1002F3378(a1);
}

void sub_1002F5840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{

  _Unwind_Resume(a1);
}

void sub_1002F5930(id a1, NSString *a2, NSSet *a3, BOOL *a4)
{
  NSObject *v6;
  int v7;
  NSString *v8;
  __int16 v9;
  NSSet *v10;

  v6 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138543618;
    v8 = a2;
    v9 = 2112;
    v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "statedump: \t\"%{public}@\":%@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_1002F5A04(uint64_t a1)
{
  sub_1002F6004(a1);
  operator delete();
}

void sub_1002F5A38(uint64_t a1, void *a2, uint64_t a3)
{
  sub_1002F09D0(a1 - 40, a2, a3);
}

void sub_1002F5A40(uint64_t a1, void *a2, uint64_t a3)
{
  sub_1002F09D0(a1 - 56, a2, a3);
}

uint64_t sub_1002F5A50(uint64_t a1)
{
  return sub_1002F6004(a1 - 136);
}

void sub_1002F5A58(uint64_t a1)
{
  sub_1002F6004(a1 - 136);
  operator delete();
}

uint64_t sub_1002F5A84(uint64_t a1)
{
  return sub_1002F6004(a1 - 152);
}

void sub_1002F5A8C(uint64_t a1)
{
  sub_1002F6004(a1 - 152);
  operator delete();
}

uint64_t sub_1002F5AC0(uint64_t a1)
{
  return sub_1002F6004(a1 - 160);
}

void sub_1002F5AC8(uint64_t a1)
{
  sub_1002F6004(a1 - 160);
  operator delete();
}

void sub_1002F5AF4(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_1002F5BA8(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1002F5BA8(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1002F5DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_1002F5DE4(_DWORD *a1, const std::string *a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  _DWORD *v17;

  v17 = sub_10047D368(a1, 25);
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0;
  *((_QWORD *)v17 + 3) = 0;
  std::string::operator=((std::string *)(v17 + 2), a2);
  a1[8] = a3;
  a1[9] = a4;
  a1[10] = a5;
  a1[11] = a6;
  a1[12] = a7;
  a1[13] = a8;
  a1[14] = a9;
  return a1;
}

void sub_1002F5E74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002F5E90(uint64_t a1, const unsigned __int8 *a2, char a3, uint64_t a4, uint64_t *a5)
{
  uuid_copy((unsigned __int8 *)a1, a2);
  *(_BYTE *)(a1 + 16) = a3;
  sub_10001FE6C((_QWORD *)(a1 + 24), a4);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  sub_1002F6350((_QWORD *)(a1 + 48), *a5, a5[1], 0x8E38E38E38E38E39 * ((a5[1] - *a5) >> 1));
  return a1;
}

void sub_1002F5F0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F5F28(id a1)
{
  uint64_t v1;
  void **v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *__p[2];
  uint64_t v7;

  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  sub_100091AE8(__p, "");
  v1 = sub_100038E50();
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v1 + 168))(v1, __p);
  if (v7 >= 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:](NSURL, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", v2, 1, 0));
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "URLByAppendingPathComponent:", CFSTR("/Library/Database/com.apple.bluetooth-restoration-v1.plist")));
  v5 = (void *)qword_100991AD0;
  qword_100991AD0 = v4;

  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_1002F5FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F6004(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = off_1009243E0;
  *(_QWORD *)(a1 + 8) = off_100924620;
  *(_QWORD *)(a1 + 16) = off_100924658;
  *(_QWORD *)(a1 + 24) = off_100924678;
  *(_QWORD *)(a1 + 32) = off_100924728;
  *(_QWORD *)(a1 + 40) = off_100924788;
  *(_QWORD *)(a1 + 48) = &off_1009247C8;
  *(_QWORD *)(a1 + 56) = off_1009247E0;
  *(_QWORD *)(a1 + 64) = off_100924828;
  *(_QWORD *)(a1 + 72) = off_100924848;
  *(_QWORD *)(a1 + 80) = &off_100924870;
  *(_QWORD *)(a1 + 88) = off_100924888;
  *(_QWORD *)(a1 + 96) = off_1009248B8;
  *(_QWORD *)(a1 + 104) = &off_1009248E0;
  *(_QWORD *)(a1 + 112) = off_1009248F8;
  *(_QWORD *)(a1 + 120) = &off_100924920;
  *(_QWORD *)(a1 + 128) = &off_100924938;
  *(_QWORD *)(a1 + 136) = off_100924950;
  *(_QWORD *)(a1 + 144) = &off_100924990;
  *(_QWORD *)(a1 + 152) = off_1009249A8;
  *(_QWORD *)(a1 + 160) = off_100924A20;
  *(_QWORD *)(a1 + 168) = &off_100924A48;
  sub_1002F655C(a1 + 400, *(_QWORD **)(a1 + 408));
  v4 = (void **)(a1 + 376);
  sub_100091BF8(&v4);

  sub_100056BAC(a1 + 272, *(char **)(a1 + 280));
  sub_100010D8C(a1 + 248, *(_QWORD **)(a1 + 256));
  sub_10001A82C(a1 + 224, *(_QWORD **)(a1 + 232));
  v2 = *(void **)(a1 + 200);
  if (v2)
  {
    *(_QWORD *)(a1 + 208) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t *sub_1002F6144(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002F6198(a1, *a2, a2 + 1);
  return a1;
}

void sub_1002F6180(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100056BAC(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002F6198(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1002F621C(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1002F621C(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;
  const void **v10;

  v9 = 0;
  v10 = 0;
  v6 = (uint64_t **)sub_1002A4958(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1002F62A8((uint64_t)a1, a4, v8);
    sub_100004078(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

_QWORD *sub_1002F62A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  _QWORD *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x38uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = v7 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_10003430C(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    result[2] = *(_QWORD *)(a2 + 16);
  }
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1002F6334(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void **v3;

  *v1 = 0;
  sub_1002A4BA0(v2, v3);
  _Unwind_Resume(a1);
}

void sub_1002F6350(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    sub_1002F63A0(a1, a4);
    sub_1002F63F0((uint64_t)a1, a2, a3);
  }
}

char *sub_1002F63A0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xE38E38E38E38E39)
    abort();
  result = (char *)sub_1002F6478((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[18 * v4];
  return result;
}

void sub_1002F63F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 8);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a2 + v7;
      uuid_copy((unsigned __int8 *)(v4 + v7), (const unsigned __int8 *)(a2 + v7));
      *(_WORD *)(v4 + v7 + 16) = *(_WORD *)(a2 + v7 + 16);
      v7 += 18;
    }
    while (v8 + 18 != a3);
    v4 += v7;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_1002F6470(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_1002F6478(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E39)
    sub_10007ABD4();
  return operator new(18 * a2);
}

_QWORD *sub_1002F64C0(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    sub_1002F6524(a1, v5 >> 1);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *sub_1002F6524(_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    abort();
  result = (char *)sub_1002B54AC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void sub_1002F655C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1002F655C(a1, *a2);
    sub_1002F655C(a1, a2[1]);
    sub_1002F65A4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1002F65A4(uint64_t a1)
{
  sub_10002074C((_QWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1002F65E0(id a1)
{
  operator new();
}

void sub_1002F6620()
{
  operator delete();
}

void sub_1002F6644(id a1)
{
  operator new();
}

void sub_1002F6684()
{
  operator delete();
}

void sub_1002F66A8(id a1)
{
  operator new();
}

void sub_1002F66E8()
{
  operator delete();
}

void sub_1002F670C(id a1)
{
  operator new();
}

void sub_1002F674C()
{
  operator delete();
}

void sub_1002F6770(id a1)
{
  operator new();
}

void sub_1002F67B0()
{
  operator delete();
}

void sub_1002F67D4(id a1)
{
  operator new();
}

void sub_1002F6814()
{
  operator delete();
}

void sub_1002F6838(id a1)
{
  operator new();
}

void sub_1002F6878()
{
  operator delete();
}

void sub_1002F689C(id a1)
{
  operator new();
}

void sub_1002F68DC()
{
  operator delete();
}

void sub_1002F6900(id a1)
{
  operator new();
}

void sub_1002F6940()
{
  operator delete();
}

void sub_1002F6964(id a1)
{
  operator new();
}

void sub_1002F69A4()
{
  operator delete();
}

void sub_1002F69C8(id a1)
{
  operator new();
}

void sub_1002F6A08()
{
  operator delete();
}

void sub_1002F6A2C(id a1)
{
  operator new();
}

void sub_1002F6A6C()
{
  operator delete();
}

void sub_1002F6A90(id a1)
{
  operator new();
}

void sub_1002F6AD0()
{
  operator delete();
}

void sub_1002F6AF4(id a1)
{
  operator new();
}

void sub_1002F6B34()
{
  operator delete();
}

void sub_1002F6B58(id a1)
{
  operator new();
}

void sub_1002F6B98()
{
  operator delete();
}

void sub_1002F6BBC(id a1)
{
  operator new();
}

void sub_1002F6BFC()
{
  operator delete();
}

void sub_1002F6C20(id a1)
{
  operator new();
}

uint64_t *sub_1002F6C4C(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = sub_1000040CC(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

void sub_1002F6C84(id a1)
{
  operator new();
}

void sub_1002F6CC4()
{
  operator delete();
}

void sub_1002F6CE8(id a1)
{
  operator new();
}

void sub_1002F6D28()
{
  operator delete();
}

uint64_t **sub_1002F6D4C(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    sub_100004078(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1002F6E10(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 9;
        sub_1002F6E94((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1002F6E94(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[6];
  if (v3)
  {
    a2[7] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[3];
  if (v4)
  {
    a2[4] = v4;
    operator delete(v4);
  }
}

uint64_t sub_1002F6ED8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *__p;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15;
  unsigned __int8 *v16;
  char *v17;
  uint64_t v18;

  v2 = *a1;
  v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 1);
  v4 = v3 + 1;
  if (v3 + 1 > 0xE38E38E38E38E38)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0x8E38E38E38E38E39 * ((v8 - v2) >> 1);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x71C71C71C71C71CLL)
    v10 = 0xE38E38E38E38E38;
  else
    v10 = v4;
  v18 = v7;
  if (v10)
    v11 = (char *)sub_1002F6478(v7, v10);
  else
    v11 = 0;
  __p = v11;
  v15 = (unsigned __int8 *)&v11[18 * v3];
  v16 = v15;
  v17 = &v11[18 * v10];
  uuid_copy(v15, (const unsigned __int8 *)a2);
  *((_WORD *)v15 + 8) = *(_WORD *)(a2 + 16);
  v16 += 18;
  sub_1002F707C(a1, &__p);
  v12 = a1[1];
  if (v16 != v15)
    v16 = &v15[(v16 - v15 - 18) % 0x12uLL];
  if (__p)
    operator delete(__p);
  return v12;
}

void sub_1002F7028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002F707C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v5 == *a1)
  {
    v7 = a2[1];
  }
  else
  {
    do
    {
      v7 = v6 - 18;
      uuid_copy((unsigned __int8 *)(v6 - 18), (const unsigned __int8 *)(v5 - 18));
      *(_WORD *)(v6 - 2) = *(_WORD *)(v5 - 2);
      v5 -= 18;
      v6 -= 18;
    }
    while (v5 != v4);
  }
  a2[1] = v7;
  v8 = *a1;
  *a1 = v7;
  a2[1] = v8;
  v9 = a1[1];
  a1[1] = a2[2];
  a2[2] = v9;
  v10 = a1[2];
  a1[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
}

void sub_1002F7130(id a1)
{
  operator new();
}

void sub_1002F7170()
{
  operator delete();
}

_OWORD *sub_1002F7194(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  v6 = (void **)sub_10001F574((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_BYTE *)v7 + 56) = 0;
    sub_100004078(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_1002F7230(id a1)
{
  operator new();
}

void sub_1002F7348()
{
  operator delete();
}

void sub_1002F736C(id a1)
{
  operator new();
}

void sub_1002F73AC()
{
  operator delete();
}

void sub_1002F73D0(id a1)
{
  operator new();
}

void sub_1002F7410(id a1)
{
  operator new();
}

void sub_1002F7450()
{
  operator delete();
}

void sub_1002F7474(id a1)
{
  operator new();
}

void sub_1002F74B4()
{
  operator delete();
}

void sub_1002F74D8(id a1)
{
  operator new();
}

void sub_1002F7518()
{
  operator delete();
}

_QWORD *sub_1002F753C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x20uLL);
      v7[1] = *(_OWORD *)(v3 + 16);
      *(_QWORD *)v7 = v6;
      *((_QWORD *)v7 + 1) = a1;
      *((_QWORD *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1002F75C0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10002074C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002F75D4(_QWORD *result, uint64_t a2, uint64_t a3, float a4)
{
  int v4;
  _QWORD *v5;

  if (v4 >= 0)
    v5 = result;
  else
    v5 = (_QWORD *)*result;
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = v5;
  *(_WORD *)(a3 + 12) = 2114;
  *(_QWORD *)(a3 + 14) = a2;
  return result;
}

uint64_t sub_1002F760C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  *(_QWORD *)(v3 - 24) = a2;
  return sub_1000340DC(a1, (uint64_t)va);
}

void sub_1002F761C(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_fault_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0xCu);
}

_QWORD *sub_1002F7630(_QWORD *result, uint64_t a2, int a3, float a4)
{
  int v4;
  _QWORD *v5;

  if (v4 >= 0)
    v5 = result;
  else
    v5 = (_QWORD *)*result;
  *(float *)a2 = a4;
  *(_DWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 8) = 2082;
  *(_QWORD *)(a2 + 10) = v5;
  return result;
}

void sub_1002F7654(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x12u);
}

void sub_1002F7664(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 8u);
}

void sub_1002F7674(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_1002F768C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (sub_1004F94A0())
    operator new();
  v0 = qword_100999878;
  if (os_log_type_enabled((os_log_t)qword_100999878, OS_LOG_TYPE_ERROR))
    sub_1006DE080(v0, v1, v2, v3, v4, v5, v6, v7);
}

void sub_1002F7814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    sub_1002F9530((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002F788C(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  id v6;
  uint64_t v7;
  id v8;
  _QWORD v10[4];
  id v11;
  _QWORD *v12;
  char v13;
  _QWORD v14[2];
  uint8_t buf[4];
  const char *v16;

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, (uint64_t)(a1 + 8));
  v4 = qword_100999878;
  if (os_log_type_enabled((os_log_t)qword_100999878, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "remote and installed";
    if ((_DWORD)a2)
      v5 = "installed";
    *(_DWORD *)buf = 136315138;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Querying %s assets", buf, 0xCu);
  }
  v6 = objc_msgSend(objc_alloc((Class)MAAssetQuery), "initWithType:", *a1);
  objc_msgSend(v6, "setDoNotBlockBeforeFirstUnlock:", 1);
  objc_msgSend(v6, "setDoNotBlockOnNetworkStatus:", a2);
  if ((_DWORD)a2)
    v7 = 1;
  else
    v7 = 2;
  objc_msgSend(v6, "returnTypes:", v7);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1002F83AC;
  v10[3] = &unk_100925008;
  v12 = a1;
  v13 = a2;
  v8 = v6;
  v11 = v8;
  objc_msgSend(v8, "queryMetaData:", v10);

  return sub_100034234((uint64_t)v14);
}

void sub_1002F79FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002F7A38(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int64_t v4;
  int v5;
  NSObject *v6;
  xpc_object_t v7;
  _QWORD v8[5];
  void *__p[2];
  char v10;
  uint8_t buf[8];
  char v12;
  char v13;

  v13 = 0;
  v2 = sub_100027F68();
  sub_100091AE8(buf, "MobileAsset");
  sub_100091AE8(__p, "EnableFiveMinDownloads");
  v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v2 + 72))(v2, buf, __p, &v13);
  if (v10 < 0)
    operator delete(__p[0]);
  v4 = XPC_ACTIVITY_INTERVAL_1_DAY;
  if (v12 < 0)
    operator delete(*(void **)buf);
  if (v13)
    v5 = v3;
  else
    v5 = 0;
  if (v5 == 1)
  {
    v6 = qword_100999878;
    if (os_log_type_enabled((os_log_t)qword_100999878, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: Enabling aggressive 5 minute download timer!", buf, 2u);
    }
    v4 = XPC_ACTIVITY_INTERVAL_5_MIN;
  }
  v7 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v7, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, 1);
  xpc_dictionary_set_uint64(v7, XPC_ACTIVITY_NETWORK_DOWNLOAD_SIZE, 0x400uLL);
  xpc_dictionary_set_int64(v7, XPC_ACTIVITY_INTERVAL, v4);
  xpc_dictionary_set_string(v7, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002F8118;
  v8[3] = &unk_100924FC0;
  v8[4] = a1;
  xpc_activity_register("com.apple.bluetooth.mobileassets", v7, v8);
  xpc_release(v7);
}

void sub_1002F7C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002F7C38(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD v4[2];

  v1 = a1;
  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, (uint64_t)(a1 + 8));
  v2 = (_QWORD *)v1[2];
  v1 += 2;
  sub_1002F95D8((uint64_t)(v1 - 1), v2);
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  return sub_100034234((uint64_t)v4);
}

uint64_t sub_1002F7C88(uint64_t a1, int a2)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  _QWORD v8[2];
  int v9;

  v9 = a2;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 64);
  v4 = *(uint64_t **)(a1 + 16);
  if (!v4)
  {
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  while (1)
  {
    v5 = *((_DWORD *)v4 + 8);
    if (v5 <= a2)
      break;
LABEL_6:
    v4 = (uint64_t *)*v4;
    if (!v4)
      goto LABEL_7;
  }
  if (v5 < a2)
  {
    ++v4;
    goto LABEL_6;
  }
  v6 = *sub_1002F7D20(a1 + 8, &v9);
LABEL_8:
  sub_100034234((uint64_t)v8);
  return v6;
}

void sub_1002F7D0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002F7D20(uint64_t a1, int *a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
LABEL_8:
    abort();
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4)
        break;
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

void sub_1002F7D6C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _QWORD *v4;
  id v5;
  void *v6;
  NSObject *v7;
  std::string *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  std::string buf;
  uint8_t v13[4];
  std::string *v14;

  v2 = qword_100999878;
  if (os_log_type_enabled((os_log_t)qword_100999878, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ---------------- MobileAsset Manager ----------------", (uint8_t *)&buf, 2u);
    v2 = qword_100999878;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 128);
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fRetryLocalAssetReadCounter:%d", (uint8_t *)&buf, 8u);
  }
  v4 = *(_QWORD **)(a1 + 8);
  if (v4 != (_QWORD *)(a1 + 16))
  {
    do
    {
      v5 = sub_10057F7A8(v4[5]);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      if (v6)
      {
        v7 = qword_100999878;
        if (os_log_type_enabled((os_log_t)qword_100999878, OS_LOG_TYPE_DEFAULT))
        {
          sub_1002F7F70(v6, &buf);
          v8 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &buf
             : (std::string *)buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)v13 = 136446210;
          v14 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", v13, 0xCu);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
      }

      v9 = (_QWORD *)v4[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v4[2];
          v11 = *v10 == (_QWORD)v4;
          v4 = v10;
        }
        while (!v11);
      }
      v4 = v10;
    }
    while (v10 != (_QWORD *)(a1 + 16));
  }
}

void sub_1002F7F58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F7F70(void *a1@<X1>, std::string *a2@<X8>)
{
  id v3;
  uint64_t v4;
  unsigned int v5;
  size_t v6;
  std::string *v7;
  const void *p_p;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  std::string v12;
  std::string v13;
  void *__p;
  size_t v15;
  uint64_t v16;

  v3 = a1;
  __p = 0;
  v15 = 0;
  v16 = 0;
  sub_1002F9388(v3, &__p);
  v5 = sub_1002F8DC4(v4, v3);
  if (v16 >= 0)
    v6 = HIBYTE(v16);
  else
    v6 = v15;
  memset(&v13, 0, sizeof(v13));
  v7 = &v13;
  sub_1002D6774((uint64_t)&v13, v6 + 2);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (v16 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    memmove(v7, p_p, v6);
  }
  strcpy((char *)v7 + v6, " v");
  std::to_string(&v12, v5);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v12;
  else
    v9 = (std::string *)v12.__r_.__value_.__r.__words[0];
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  else
    size = v12.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v13, (const std::string::value_type *)v9, size);
  *a2 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16) < 0)
    operator delete(__p);

}

void sub_1002F80BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);

  _Unwind_Resume(a1);
}

void sub_1002F8118(uint64_t a1, xpc_activity_t activity)
{
  uint64_t *v3;
  xpc_activity_state_t state;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  xpc_activity_state_t v15;

  v3 = *(uint64_t **)(a1 + 32);
  state = xpc_activity_get_state(activity);
  v5 = qword_100999878;
  if (os_log_type_enabled((os_log_t)qword_100999878, OS_LOG_TYPE_DEFAULT))
  {
    v14 = 134217984;
    v15 = state;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "com.apple.bluetooth.mobileassets activity triggered with state %ld", (uint8_t *)&v14, 0xCu);
  }
  if (state == 2)
  {
    sub_1002F8218(v3);
    if (!xpc_activity_set_state(activity, 5))
    {
      v6 = qword_100999878;
      if (os_log_type_enabled((os_log_t)qword_100999878, OS_LOG_TYPE_ERROR))
        sub_1006DE0B4(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }
}

id sub_1002F8218(uint64_t *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[5];
  uint8_t buf[16];

  v2 = qword_100999878;
  if (os_log_type_enabled((os_log_t)qword_100999878, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Downloading MobileBluetoothAssets catalog", buf, 2u);
  }
  v3 = *a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002F82C4;
  v5[3] = &unk_100924FE0;
  v5[4] = a1;
  return +[MAAsset startCatalogDownload:then:](MAAsset, "startCatalogDownload:then:", v3, v5);
}

void sub_1002F82C4(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  NSObject *v4;
  _BOOL8 v5;
  int v6;
  const char *v7;

  v3 = *(_QWORD **)(a1 + 32);
  v4 = qword_100999878;
  v5 = os_log_type_enabled((os_log_t)qword_100999878, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    v6 = 136315138;
    v7 = sub_1002F8388(v5, a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Catalog download completed with result: %s", (uint8_t *)&v6, 0xCu);
  }
  if (!a2)
    sub_1002F788C(v3, 0);
}

const char *sub_1002F8388(uint64_t a1, unint64_t a2)
{
  if (a2 > 0x24)
    return "UnknownDownloadResultType";
  else
    return off_1009250B8[a2];
}

void sub_1002F83AC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  _BOOL8 v6;
  const char *v7;
  int v8;
  void *v9;
  uint8_t *v10;
  NSObject *v11;
  std::string *p_p;
  uint64_t **v13;
  NSObject *v14;
  std::string *v15;
  uint8_t *v16;
  uint8_t *v17;
  BOOL v18;
  uint64_t v19;
  unsigned int v20;
  dispatch_time_t v21;
  _QWORD block[5];
  std::string __p;
  uint8_t v24[4];
  std::string *v25;
  uint8_t buf[24];

  v4 = *(_QWORD *)(a1 + 40);
  v5 = qword_100999878;
  v6 = os_log_type_enabled((os_log_t)qword_100999878, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    v7 = sub_1002F87F4(v6, a2);
    v8 = *(unsigned __int8 *)(v4 + 128);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Mobile asset query completed with result: %s fRetryLocalAssetReadCounter:%d", buf, 0x12u);
  }
  if (!a2 || a2 == 2 && *(_BYTE *)(a1 + 48))
  {
    memset(buf, 0, sizeof(buf));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "results"));
    sub_1002F8818(v4, v9, (uint64_t)buf);

    v10 = *(uint8_t **)buf;
    if (*(uint8_t **)buf != &buf[8])
    {
      do
      {
        if (*(_BYTE *)(a1 + 48))
        {
          v11 = qword_100999878;
          if (os_log_type_enabled((os_log_t)qword_100999878, OS_LOG_TYPE_DEFAULT))
          {
            sub_1002F7F70(*((void **)v10 + 5), &__p);
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)v24 = 136315138;
            v25 = p_p;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Reading %s asset", v24, 0xCu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v10 + 32);
          v13 = sub_1002F940C((uint64_t **)(v4 + 8), (int *)v10 + 8, (uint64_t)&unk_100740F58, &__p);
          (*(void (**)(uint64_t *, _QWORD))(*v13[5] + 16))(v13[5], *((_QWORD *)v10 + 5));
          *(_BYTE *)(v4 + 128) = 0;
        }
        else if (objc_msgSend(*((id *)v10 + 5), "wasLocal"))
        {
          v14 = qword_100999878;
          if (os_log_type_enabled((os_log_t)qword_100999878, OS_LOG_TYPE_DEBUG))
          {
            sub_1002F7F70(*((void **)v10 + 5), &__p);
            v15 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)v24 = 136315138;
            v25 = v15;
            _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s asset is already present, no need to redownload", v24, 0xCu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          sub_1002F8A74(v4, *((void **)v10 + 5));
        }
        v16 = (uint8_t *)*((_QWORD *)v10 + 1);
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = *(uint8_t **)v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (uint8_t *)*((_QWORD *)v10 + 2);
            v18 = *(_QWORD *)v17 == (_QWORD)v10;
            v10 = v17;
          }
          while (!v18);
        }
        v10 = v17;
      }
      while (v17 != &buf[8]);
    }
    sub_1002F9630((uint64_t)buf, *(_QWORD **)&buf[8]);
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    v20 = *(unsigned __int8 *)(v4 + 128);
    if (v20 <= 4)
    {
      *(_BYTE *)(v4 + 128) = v20 + 1;
      v21 = dispatch_time(0, 5000000000);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1002F8C0C;
      block[3] = &unk_100917378;
      block[4] = v4;
      dispatch_after(v21, (dispatch_queue_t)&_dispatch_main_q, block);
    }
  }
  if (*(_BYTE *)(a1 + 48) && !*(_QWORD *)(v4 + 24))
  {
    if (qword_10097AA70 != -1)
      dispatch_once(&qword_10097AA70, &stru_100925098);
    v19 = qword_10097AA68;
    sub_100091AE8(buf, "MobileAsset");
    sub_100091AE8(&__p, "No assets found from querying local assets");
    sub_10047C59C(0.0, v19, (uint64_t *)buf, (uint64_t *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
  }
}

void sub_1002F8790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

const char *sub_1002F87F4(uint64_t a1, unint64_t a2)
{
  if (a2 > 0xE)
    return "UnknownQueryResultType";
  else
    return off_1009251E0[a2];
}

void sub_1002F8818(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  uint64_t **v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  id v17;
  uint64_t **v18;
  id v19;
  id obj;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int *v26;
  _BYTE v27[128];

  v5 = a2;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = (uint64_t **)(a3 + 8);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  obj = v5;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v23;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v23 != v8)
          objc_enumerationMutation(obj);
        v10 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v9);
        v21 = 0;
        v11 = sub_1002F8C18(a1, v10);
        v21 = v11;
        v12 = *v6;
        if (!*v6)
        {
LABEL_11:
          v26 = &v21;
          v14 = sub_1002F940C((uint64_t **)a3, &v21, (uint64_t)&unk_100740F58, &v26);
          v15 = v10;
          v16 = v14[5];
          v14[5] = v15;
          goto LABEL_12;
        }
        while (1)
        {
          v13 = *((_DWORD *)v12 + 8);
          if (v11 >= v13)
            break;
LABEL_10:
          v12 = (uint64_t *)*v12;
          if (!v12)
            goto LABEL_11;
        }
        if (v13 < v11)
        {
          ++v12;
          goto LABEL_10;
        }
        v26 = &v21;
        v16 = sub_1002F940C((uint64_t **)a3, &v21, (uint64_t)&unk_100740F58, &v26)[5];
        v17 = sub_1002F8DC4((uint64_t)v16, v16);
        if (sub_1002F8DC4((uint64_t)v17, v10) > v17)
        {
          v26 = &v21;
          v18 = sub_1002F940C((uint64_t **)a3, &v21, (uint64_t)&unk_100740F58, &v26);
          objc_storeStrong((id *)v18 + 5, v10);
        }
LABEL_12:

        v9 = (char *)v9 + 1;
      }
      while (v9 != v7);
      v19 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
      v7 = v19;
    }
    while (v19);
  }

}

void sub_1002F8A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  sub_1002F9630(v9, *(_QWORD **)(v9 + 8));
  _Unwind_Resume(a1);
}

void sub_1002F8A74(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  std::string *p_p;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  std::string __p;
  uint8_t buf[4];
  std::string *v13;

  v3 = a2;
  v4 = qword_100999878;
  if (os_log_type_enabled((os_log_t)qword_100999878, OS_LOG_TYPE_DEFAULT))
  {
    sub_1002F7F70(v3, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v13 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Downloading %s asset", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  objc_msgSend(v3, "logAsset");
  v6 = objc_alloc_init((Class)MADownloadOptions);
  objc_msgSend(v6, "setDiscretionary:", 0);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002F8E3C;
  v8[3] = &unk_100925050;
  v10 = a1;
  v7 = v3;
  v9 = v7;
  objc_msgSend(v7, "startDownload:then:", v6, v8);

}

void sub_1002F8BD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002F8C0C(uint64_t a1)
{
  return sub_1002F788C(*(_QWORD *)(a1 + 32), 1);
}

BOOL sub_1002F8C18(uint64_t a1, void *a2)
{
  uint64_t v4;
  unint64_t *p_p;
  BOOL v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  void *__p;
  __int128 v13;

  __p = 0;
  v13 = 0uLL;
  sub_1002F9388(a2, &__p);
  if (SHIBYTE(v13) < 0)
  {
    p_p = (unint64_t *)__p;
    if ((_QWORD)v13 != 21)
    {
      if ((_QWORD)v13 != 23
        || (*(_QWORD *)__p == 0x6C42656C69626F4DLL ? (v6 = *((_QWORD *)__p + 1) == 0x4468746F6F746575) : (v6 = 0),
            v6 ? (v7 = *(_QWORD *)((char *)__p + 15) == 0x6573616261746144) : (v7 = 0),
            !v7))
      {
        v4 = 0;
LABEL_33:
        operator delete(p_p);
        return v4;
      }
      v4 = 1;
      if ((HIBYTE(v13) & 0x80) == 0)
        return v4;
LABEL_32:
      p_p = (unint64_t *)__p;
      goto LABEL_33;
    }
  }
  else
  {
    if (HIBYTE(v13) != 21)
    {
      if (HIBYTE(v13) != 23)
        return 0;
      return __p == (void *)0x6C42656C69626F4DLL
          && (_QWORD)v13 == 0x4468746F6F746575
          && *(_QWORD *)((char *)&v13 + 7) == 0x6573616261746144;
    }
    p_p = (unint64_t *)&__p;
  }
  v8 = 0x4D6F62696C65426CLL;
  v9 = bswap64(*p_p);
  if (v9 == 0x4D6F62696C65426CLL
    && (v8 = 0x7565746F6F746843, v9 = bswap64(p_p[1]), v9 == 0x7565746F6F746843)
    && (v8 = 0x7468436F6E666967, v9 = bswap64(*(unint64_t *)((char *)p_p + 13)), v9 == 0x7468436F6E666967))
  {
    v10 = 0;
  }
  else if (v9 < v8)
  {
    v10 = -1;
  }
  else
  {
    v10 = 1;
  }
  v4 = 2 * (v10 == 0);
  if ((HIBYTE(v13) & 0x80) != 0)
    goto LABEL_32;
  return v4;
}

id sub_1002F8DC4(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "attributes"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", ASAttributeContentVersion));
  v4 = objc_msgSend(v3, "intValue");

  return v4;
}

void sub_1002F8E20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002F8E3C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  std::string *p_p;
  uint64_t v7;
  const char *v8;
  uint64_t **v9;
  id v10;
  void *v11;
  uint64_t **v12;
  _QWORD v13[4];
  int v14;
  std::string __p;
  uint8_t buf[4];
  std::string *v17;
  __int16 v18;
  const char *v19;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = qword_100999878;
  if (!os_log_type_enabled((os_log_t)qword_100999878, OS_LOG_TYPE_DEFAULT))
    goto LABEL_5;
  p_p = &__p;
  sub_1002F7F70(*(void **)(a1 + 32), &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v8 = sub_1002F8388(v7, a2);
  *(_DWORD *)buf = 136315394;
  v17 = p_p;
  v18 = 2080;
  v19 = v8;
  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s asset download completed with result: %s", buf, 0x16u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (a2)
      return;
  }
  else
  {
LABEL_5:
    if (a2)
      return;
  }
  *(_DWORD *)buf = sub_1002F8C18(v4, *(void **)(a1 + 32));
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  v9 = sub_1002F940C((uint64_t **)(v4 + 8), (int *)buf, (uint64_t)&unk_100740F58, &__p);
  v10 = sub_10057F7A8((uint64_t)v9[5]);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  if (sub_1002F9044((uint64_t)v11, *(void **)(a1 + 32), v11))
    sub_1002F911C(v4, v11);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  v12 = sub_1002F940C((uint64_t **)(v4 + 8), (int *)buf, (uint64_t)&unk_100740F58, &__p);
  (*(void (**)(uint64_t *, _QWORD))(*v12[5] + 16))(v12[5], *(_QWORD *)(a1 + 32));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1002F9264;
  v13[3] = &unk_100925028;
  v14 = *(_DWORD *)buf;
  sub_1002F91A8((os_unfair_lock_s *)(v4 + 32), v13);

}

void sub_1002F902C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002F9044(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v9;
  void *v10;

  v4 = a2;
  v5 = a3;
  v6 = v5;
  if (!v5 || objc_msgSend(v5, "state") == (id)5 || objc_msgSend(v6, "state") == (id)6)
  {
    v7 = 0;
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "assetId"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "assetId"));
    v7 = objc_msgSend(v9, "isEqualToString:", v10) ^ 1;

  }
  return v7;
}

void sub_1002F90F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1002F911C(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;
  uint64_t v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002F927C;
  v4[3] = &unk_100925050;
  v5 = a2;
  v6 = a1;
  v3 = v5;
  objc_msgSend(v3, "purge:", v4);

}

void sub_1002F9190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1002F91A8(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002F923C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002F9264(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned int *)(a1 + 32));
}

void sub_1002F927C(uint64_t a1, unint64_t a2)
{
  NSObject *v4;
  std::string *p_p;
  const char *v6;
  std::string __p;
  uint8_t buf[4];
  std::string *v9;
  __int16 v10;
  const char *v11;

  v4 = qword_100999878;
  if (os_log_type_enabled((os_log_t)qword_100999878, OS_LOG_TYPE_DEFAULT))
  {
    sub_1002F7F70(*(void **)(a1 + 32), &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (a2 > 0xB)
      v6 = "UnknownPurgeResultType";
    else
      v6 = off_100925258[a2];
    *(_DWORD *)buf = 136315394;
    v9 = p_p;
    v10 = 2080;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Outdated %s asset has been purged with result %s", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1002F9388(void *a1@<X1>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "attributes"));
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", CFSTR("AssetName"))));
  sub_100091AE8(a2, (char *)objc_msgSend(v3, "UTF8String"));

}

void sub_1002F93EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t **sub_1002F940C(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    sub_100004078(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1002F94CC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 111) < 0)
      operator delete(*(void **)(a2 + 88));
    *(_QWORD *)a2 = off_100925080;

    sub_100069BDC(a2 + 8);
    operator delete();
  }
}

void sub_1002F9530(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100056BAC(a2 + 232, *(char **)(a2 + 240));
    sub_10001A82C(a2 + 208, *(_QWORD **)(a2 + 216));
    sub_100056BAC(a2 + 184, *(char **)(a2 + 192));
    sub_10001A82C(a2 + 160, *(_QWORD **)(a2 + 168));
    sub_100056BAC(a2 + 136, *(char **)(a2 + 144));
    sub_100056BAC(a2 + 112, *(char **)(a2 + 120));
    sub_100056BAC(a2 + 88, *(char **)(a2 + 96));
    *(_QWORD *)a2 = off_100925080;

    sub_100069BDC(a2 + 8);
    operator delete();
  }
}

void sub_1002F95D8(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  if (a2)
  {
    sub_1002F95D8(a1, *a2);
    sub_1002F95D8(a1, a2[1]);
    v4 = a2[5];
    a2[5] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    operator delete(a2);
  }
}

void sub_1002F9630(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1002F9630(a1, *a2);
    sub_1002F9630(a1, a2[1]);

    operator delete(a2);
  }
}

void sub_1002F9678(id a1)
{
  operator new();
}

void sub_1002F96B8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1009252C8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  atomic_store(0, (unsigned __int8 *)(a1 + 40));
  atomic_store(0, (unsigned __int8 *)(a1 + 41));
}

uint64_t sub_1002F96E0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009252C8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1002F971C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009252C8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  operator delete();
}

void sub_1002F9768(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD block[6];
  int v18;
  uint8_t buf[4];
  void *v20;

  if (a3)
  {
    v5 = a3;
    v6 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "description"));
      *(_DWORD *)buf = 138412290;
      v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Publishing device with the following properties %@", buf, 0xCu);

    }
    atomic_store(1u, (unsigned __int8 *)(a1 + 40));
    CFRetain(v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](AudioDeviceManager, "sharedManager"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002F98F8;
    block[3] = &unk_1009180B0;
    block[4] = a1;
    block[5] = v5;
    v18 = a2;
    dispatch_async((dispatch_queue_t)objc_msgSend(v8, "getXpcQueue"), block);

  }
  else
  {
    v9 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006DE0E8(v9, v10, v11, v12, v13, v14, v15, v16);
  }
}

void sub_1002F98D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F98F8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  xpc_object_t v4;
  void *v5;
  BOOL v6;
  id v7;
  NSObject *v8;
  __int128 v9;
  NSObject *v10;
  void *v11;
  void *__p[2];
  uint64_t v13;
  uint8_t buf[4];
  _BOOL4 v15;
  __int16 v16;
  _BOOL4 v17;
  __int16 v18;
  void *v19;
  xpc_object_t values[2];
  char *keys[2];

  *(_OWORD *)keys = *(_OWORD *)off_1009252D8;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)_CFXPCCreateXPCObjectFromCFObject(*(_QWORD *)(a1 + 40));
  values[0] = xpc_int64_create(*(int *)(a1 + 48));
  values[1] = v3;
  v4 = xpc_dictionary_create((const char *const *)keys, values, 2uLL);
  v5 = v4;
  if (v3)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (v6)
  {
    v7 = *(id *)(a1 + 40);
    v8 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "description"));
      *(_DWORD *)buf = 67109634;
      v15 = v3 == 0;
      v16 = 1024;
      v17 = v5 == 0;
      v18 = 2112;
      v19 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to create an xpc msg (reason: xpcProperties %d, xpcArgs %d) to send publish msg with following parameters %@", buf, 0x18u);

    }
    (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 80))(*(_QWORD *)(v2 + 32));
  }
  else
  {
    v7 = (id)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](AudioDeviceManager, "sharedManager"));
    if (*(char *)(v2 + 31) < 0)
    {
      sub_10003430C(__p, *(void **)(v2 + 8), *(_QWORD *)(v2 + 16));
    }
    else
    {
      v9 = *(_OWORD *)(v2 + 8);
      v13 = *(_QWORD *)(v2 + 24);
      *(_OWORD *)__p = v9;
    }
    objc_msgSend(v7, "publishAndRegisterDevice:withArgs:uid:device:", 2, v5, __p, v2);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }

  CFRelease(*(CFTypeRef *)(a1 + 40));
  xpc_release(v5);
  if (v3)
  {
    xpc_release(v3);
  }
  else
  {
    v10 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006DE118((int *)(a1 + 48), v10);
  }
  xpc_release(values[0]);
}

void sub_1002F9B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1002F9B58(uint64_t a1, uint64_t a2, const void *a3)
{
  NSObject *v6;
  void *v7;
  _QWORD block[7];

  v6 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEBUG))
    sub_1006DE18C(a2, v6);
  CFRetain(a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](AudioDeviceManager, "sharedManager"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002F9C28;
  block[3] = &unk_1009210D8;
  block[4] = a1;
  block[5] = a2;
  block[6] = a3;
  dispatch_async((dispatch_queue_t)objc_msgSend(v7, "getXpcQueue"), block);

}

void sub_1002F9C18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F9C28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  xpc_object_t v7;
  NSObject *v8;
  xpc_object_t values;
  char *keys;

  v2 = *(_QWORD *)(a1 + 32);
  v5 = *(char **)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v6 = (uint64_t *)(a1 + 40);
  keys = v5;
  values = (xpc_object_t)_CFXPCCreateXPCObjectFromCFObject(v4);
  v7 = xpc_dictionary_create((const char *const *)&keys, &values, 1uLL);
  sub_1002F9D08(v2, 3, (uint64_t)v7);
  xpc_release(v7);
  if (values)
  {
    xpc_release(values);
  }
  else
  {
    v8 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006DE1FC(v6, v8);
  }
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

void sub_1002F9D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *__p[2];
  uint64_t v15;

  v6 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEBUG))
    sub_1006DE270(a2, v6, v7, v8, v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](AudioDeviceManager, "sharedManager"));
  if (*(char *)(a1 + 31) < 0)
  {
    sub_10003430C(__p, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 24);
  }
  objc_msgSend(v13, "sendMsg:withArgs:uid:", a2, a3, __p);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);

}

void sub_1002F9DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1002F9DF8(uint64_t a1)
{
  void *v2;
  _QWORD block[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](AudioDeviceManager, "sharedManager"));
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002F9E80;
  block[3] = &unk_100917378;
  block[4] = a1;
  dispatch_async((dispatch_queue_t)objc_msgSend(v2, "getXpcQueue"), block);

}

void sub_1002F9E70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002F9E80(uint64_t a1)
{
  sub_1002F9D08(*(_QWORD *)(a1 + 32), 8, 0);
}

void sub_1002F9E90(uint64_t a1)
{
  unsigned __int8 *v2;
  unsigned __int8 v3;
  NSObject *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD block[5];
  uint8_t buf[16];

  v2 = (unsigned __int8 *)(a1 + 41);
  v3 = atomic_load((unsigned __int8 *)(a1 + 41));
  v4 = qword_1009997E0;
  if ((v3 & 1) != 0 && os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Close called when Plugin device is already in closing state.", buf, 2u);
    v4 = qword_1009997E0;
  }
  atomic_store(1u, v2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending XpcAudioPluginDevice close", buf, 2u);
  }
  v5 = atomic_load((unsigned __int8 *)(a1 + 40));
  if ((v5 & 1) != 0)
  {
    sub_1002F9D08(a1, 4, 0);
  }
  else
  {
    v6 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006DE2D4(v6, v7, v8, v9, v10, v11, v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](AudioDeviceManager, "sharedManager"));
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002F9FF8;
    block[3] = &unk_100917378;
    block[4] = a1;
    dispatch_async((dispatch_queue_t)objc_msgSend(v14, "getXpcQueue"), block);

  }
}

void sub_1002F9FE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002F9FF8(uint64_t a1)
{
  return sub_1002FA000(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1002FA000(uint64_t a1)
{
  unsigned __int8 v2;
  NSObject *v3;
  uint8_t v5[16];
  uint8_t buf[16];

  v2 = atomic_load((unsigned __int8 *)(a1 + 41));
  v3 = qword_1009997E0;
  if ((v2 & 1) == 0 && os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "readyForDelete called when Plugin device isn't in closing state.", buf, 2u);
    v3 = qword_1009997E0;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "XpcAudioPluginDevice is closing ready for delete", v5, 2u);
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32));
}

void sub_1002FA0CC(uint64_t a1, xpc_object_t xdict)
{
  unsigned __int8 *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  int64_t int64;
  xpc_object_t value;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  void (*v17)(void);
  NSObject *v18;
  void (*v19)(void);
  NSObject *v20;
  NSObject *v21;
  _QWORD v22[6];

  v3 = (unsigned __int8 *)(a1 + 40);
  v4 = atomic_load((unsigned __int8 *)(a1 + 40));
  if ((v4 & 1) == 0 || (v5 = atomic_load((unsigned __int8 *)(a1 + 41)), (v5 & 1) != 0))
  {
    v18 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006DE304(v3, a1, v18);
  }
  else
  {
    int64 = xpc_dictionary_get_int64(xdict, "kBTAudioMsgId");
    value = xpc_dictionary_get_value(xdict, "kBTAudioMsgArgs");
    v9 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEBUG))
      sub_1006DE398(int64, v9, v10, v11, v12, v13, v14, v15);
    switch((int)int64)
    {
      case 3:
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3221225472;
        v22[2] = sub_1002FA434;
        v22[3] = &unk_1009252E8;
        v22[4] = a1;
        xpc_dictionary_apply(value, v22);
        return;
      case 5:
        sub_1002FA32C(a1, value);
        return;
      case 6:
        v19 = *(void (**)(void))(**(_QWORD **)(a1 + 32) + 16);
        goto LABEL_23;
      case 7:
        v19 = *(void (**)(void))(**(_QWORD **)(a1 + 32) + 24);
        goto LABEL_23;
      case 9:
      case 10:
      case 11:
        v16 = (const void *)_CFXPCCreateCFObjectFromXPCObject(value);
        v17 = *(void (**)(void))(**(_QWORD **)(a1 + 32) + 48);
        goto LABEL_12;
      case 14:
        sub_1002FA3DC(a1, (uint64_t)value);
        return;
      case 20:
        v20 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v22[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Received Uni-Bi Direction Transition", (uint8_t *)v22, 2u);
        }
        v19 = *(void (**)(void))(**(_QWORD **)(a1 + 32) + 40);
        goto LABEL_23;
      case 21:
        v21 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v22[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Received Bi-Uni Direction Transition", (uint8_t *)v22, 2u);
        }
        v19 = *(void (**)(void))(**(_QWORD **)(a1 + 32) + 32);
LABEL_23:
        v19();
        break;
      default:
        v16 = (const void *)_CFXPCCreateCFObjectFromXPCObject(value);
        v17 = *(void (**)(void))(**(_QWORD **)(a1 + 32) + 88);
LABEL_12:
        v17();
        CFRelease(v16);
        break;
    }
  }
}

uint64_t sub_1002FA32C(uint64_t a1, xpc_object_t xdict)
{
  void *value;
  xpc_object_t v5;
  size_t v6;
  void *v7;
  void *v9;
  void *region;

  value = xpc_dictionary_get_value(xdict, "kBTAudioMsgArgDeviceSharedMemoryOutput");
  v5 = xpc_dictionary_get_value(xdict, "kBTAudioMsgArgDeviceSharedMemoryInput");
  region = 0;
  if (value)
    value = (void *)xpc_shmem_map(value, &region);
  v9 = 0;
  if (v5)
  {
    v6 = xpc_shmem_map(v5, &v9);
    v7 = v9;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  return (*(uint64_t (**)(_QWORD, void *, void *, void *, size_t))(**(_QWORD **)(a1 + 32) + 8))(*(_QWORD *)(a1 + 32), region, value, v7, v6);
}

void sub_1002FA3DC(uint64_t a1, uint64_t a2)
{
  const __CFBoolean *v3;
  const __CFBoolean *v4;
  _BOOL8 v5;

  v3 = (const __CFBoolean *)_CFXPCCreateCFObjectFromXPCObject(a2);
  if (v3)
  {
    v4 = v3;
    v5 = CFBooleanGetValue(v3) != 0;
    (*(void (**)(_QWORD, _BOOL8))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32), v5);
    CFRelease(v4);
  }
}

uint64_t sub_1002FA434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  const void *v5;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = (const void *)_CFXPCCreateCFObjectFromXPCObject(a3);
  (***(void (****)(_QWORD, uint64_t, const void *))(v4 + 32))(*(_QWORD *)(v4 + 32), a2, v5);
  CFRelease(v5);
  return 1;
}

uint64_t sub_1002FA48C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1002FA49C(int a1, char *__s1, const char *a3, int a4)
{
  int8x8_t v8;
  uint64_t result;
  uint8x8_t v10;
  CFStringRef v11;
  CFStringRef v12;
  __CFDictionary *Mutable;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  const __CFString *v18;
  unsigned int v19;
  NSObject *v20;
  unsigned int v21;
  uint8_t buf[4];
  unsigned int v23;

  v21 = 0;
  if (!strcmp(__s1, "00:00:00:00:00:00"))
  {
    v15 = qword_100999850;
    result = os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_FAULT);
    if ((_DWORD)result)
    {
      sub_1006DE3FC(v15, v16, v17);
      return 0;
    }
  }
  else
  {
    if (!a1)
      return 4294902295;
    result = 4294902295;
    if (a1 <= 1024)
    {
      v8.i32[0] = a1;
      v10 = (uint8x8_t)vcnt_s8(v8);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.i32[0] <= 1u)
      {
        v11 = CFStringCreateWithCString(kCFAllocatorDefault, a3, 0x8000100u);
        if (v11)
        {
          v12 = v11;
          Mutable = (__CFDictionary *)sub_1002FA7DC((int *)&v21, __s1, 0, 0);
          v14 = qword_100999850;
          if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            v23 = v21;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "BTKCSetData calling _BTKCGetDataCopy, returned %d", buf, 8u);
          }
          if (v21 == -34019)
          {
            if (!Mutable)
              goto LABEL_41;
            goto LABEL_40;
          }
          if (!Mutable)
          {
            Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            if (!Mutable)
            {
              v21 = 4;
LABEL_41:
              CFRelease(v12);
              return v21;
            }
          }
          if (a1 > 63)
          {
            if (a1 <= 255)
            {
              if (a1 == 64)
              {
                v18 = CFSTR("MagicAccKey");
              }
              else
              {
                if (a1 != 128)
                  goto LABEL_38;
                v18 = CFSTR("MagicAccHint");
              }
            }
            else
            {
              switch(a1)
              {
                case 256:
                  v18 = CFSTR("MagicAccRachet");
                  break;
                case 512:
                  v18 = CFSTR("GuestAccIRK");
                  break;
                case 1024:
                  v18 = CFSTR("GuestAccEncKey");
                  break;
                default:
                  goto LABEL_38;
              }
            }
          }
          else
          {
            v18 = CFSTR("Pincode");
            switch(a1)
            {
              case 1:
                break;
              case 2:
                v18 = CFSTR("LinkKey");
                break;
              case 3:
              case 5:
              case 6:
              case 7:
                goto LABEL_38;
              case 4:
                v18 = CFSTR("LinkKeyType");
                break;
              case 8:
                v18 = CFSTR("LocalAddress");
                break;
              default:
                if (a1 == 16)
                {
                  v18 = CFSTR("MagicAccIRK");
                }
                else
                {
                  if (a1 != 32)
                    goto LABEL_38;
                  v18 = CFSTR("MagicAccEncKey");
                }
                break;
            }
          }
          CFDictionarySetValue(Mutable, v18, v12);
LABEL_38:
          v19 = sub_1002FAEE0(__s1, 0, Mutable, 0, 0, a4, 1);
          v21 = v19;
          v20 = qword_100999850;
          if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            v23 = v19;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "BTKCSetData calling _BTKCSetData, returned %d", buf, 8u);
          }
LABEL_40:
          CFRelease(Mutable);
          goto LABEL_41;
        }
        return 4294902295;
      }
    }
  }
  return result;
}

const void *sub_1002FA7DC(int *a1, const char *a2, const __CFString *a3, int a4)
{
  CFStringRef v7;
  __CFDictionary *Mutable;
  const __CFString *v9;
  const void *v10;
  CFBooleanRef v11;
  OSStatus v12;
  int v13;
  CFTypeID TypeID;
  BOOL v15;
  const __CFString *Value;
  NSObject *v17;
  __CFDictionary *v18;
  CFStringRef v19;
  __CFDictionary *v20;
  OSStatus v21;
  NSObject *v22;
  NSObject *v23;
  OSStatus v24;
  NSObject *v25;
  OSStatus v26;
  CFTypeID v27;
  CFPropertyListRef v28;
  const void *v29;
  NSObject *v30;
  CFTypeID v31;
  NSObject *v32;
  NSObject *v34;
  const char *CStringPtr;
  const __CFData *data;
  const __CFData *dataa;
  int *v38;
  CFTypeRef result;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  const char *v46;
  CFRange v47;

  result = 0;
  v7 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
  if (a3)
    v9 = a3;
  else
    v9 = CFSTR("MobileBluetooth");
  CFDictionaryAddValue(Mutable, kSecAttrService, v9);
  CFDictionaryAddValue(Mutable, kSecAttrAccount, v7);
  v10 = (const void *)kSecUseSystemKeychain;
  CFDictionaryAddValue(Mutable, kSecUseSystemKeychain, kCFBooleanTrue);
  CFDictionaryAddValue(Mutable, kSecMatchLimit, kSecMatchLimitOne);
  CFDictionaryAddValue(Mutable, kSecReturnData, kCFBooleanTrue);
  if (a4)
    v11 = kCFBooleanTrue;
  else
    v11 = kCFBooleanFalse;
  CFDictionaryAddValue(Mutable, kSecAttrSynchronizable, v11);
  CFDictionaryAddValue(Mutable, kSecReturnAttributes, kCFBooleanTrue);
  v12 = SecItemCopyMatching(Mutable, &result);
  v13 = v12;
  if (!result || v12)
  {
    if (v12 == -25300)
    {
      v29 = 0;
      v13 = -25300;
LABEL_37:
      v19 = v7;
      goto LABEL_46;
    }
LABEL_34:
    v30 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v42 = a2;
      v43 = 1024;
      v44 = v13;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Failed to query keychain for device %{public}s with result %d", buf, 0x12u);
    }
    v29 = 0;
    goto LABEL_37;
  }
  v38 = a1;
  TypeID = CFDictionaryGetTypeID();
  v15 = TypeID == CFGetTypeID(result);
  a1 = v38;
  if (!v15)
    goto LABEL_34;
  Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)result, CFSTR("agrp"));
  data = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)result, CFSTR("v_Data"));
  CStringPtr = CFStringGetCStringPtr(Value, 0x8000100u);
  v17 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446722;
    v42 = a2;
    v43 = 1024;
    v44 = 0;
    v45 = 2080;
    v46 = CStringPtr;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "_BTKCGetDataCopy found keychain item for device %{public}s with result %d with accessgroup=%s", buf, 0x1Cu);
  }
  if (!Value
    || (v47.length = CFStringGetLength(Value),
        v47.location = 0,
        CFStringCompareWithOptions(Value, CFSTR("com.apple.bluetooth"), v47, 1uLL) == kCFCompareEqualTo))
  {
    a1 = v38;
    v19 = v7;
LABEL_39:
    v28 = CFPropertyListCreateWithData(kCFAllocatorDefault, data, 2uLL, 0, 0);
LABEL_40:
    v29 = v28;
    if (v28)
    {
      v31 = CFDictionaryGetTypeID();
      if (v31 != CFGetTypeID(v29))
      {
        v32 = qword_100999850;
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
          sub_1006DE430((uint64_t)a2, v29, v32);
        CFRelease(v29);
        v29 = 0;
      }
    }
    v13 = 0;
    goto LABEL_46;
  }
  v18 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(v18, kSecClass, kSecClassGenericPassword);
  CFDictionaryAddValue(v18, kSecAttrService, v9);
  v19 = v7;
  CFDictionaryAddValue(v18, kSecAttrAccount, v7);
  CFDictionaryAddValue(v18, v10, kCFBooleanTrue);
  v20 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(v20, kSecAttrAccessGroup, CFSTR("com.apple.bluetooth"));
  v21 = SecItemUpdate(v18, v20);
  CFRelease(v20);
  v22 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446466;
    v42 = a2;
    v43 = 1024;
    v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "updating keychain access group for device %{public}s with result %d", buf, 0x12u);
  }
  if (!v21)
  {
    a1 = v38;
    goto LABEL_39;
  }
  v23 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446466;
    v42 = a2;
    v43 = 1024;
    v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "failed to update keychain access group for device %{public}s with result %d", buf, 0x12u);
  }
  a1 = v38;
  if (v21 != -25299)
    goto LABEL_39;
  v24 = SecItemDelete(v18);
  if (v18)
    CFRelease(v18);
  if (v24)
  {
    v25 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v42 = a2;
      v43 = 1024;
      v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "failed to delete duplicate keychain item for device %{public}s with result %d", buf, 0x12u);
    }
  }
  if (result)
  {
    CFRelease(result);
    result = 0;
  }
  CFDictionaryAddValue(Mutable, kSecAttrAccessGroup, CFSTR("com.apple.bluetooth"));
  v26 = SecItemCopyMatching(Mutable, &result);
  v13 = v26;
  if (!result || v26)
  {
    if (v26 == -25300)
    {
      v29 = 0;
      v13 = -25300;
      goto LABEL_46;
    }
  }
  else
  {
    v27 = CFDictionaryGetTypeID();
    if (v27 == CFGetTypeID(result))
    {
      dataa = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)result, CFSTR("v_Data"));
      v28 = CFPropertyListCreateWithData(kCFAllocatorDefault, dataa, 2uLL, 0, 0);
      goto LABEL_40;
    }
  }
  v34 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v42 = a2;
    v43 = 1024;
    v44 = v13;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Failed to query keychain with access group com.apple.bluetooth for device %{public}s with result %d", buf, 0x12u);
  }
  v29 = 0;
LABEL_46:
  if (result)
    CFRelease(result);
  if (Mutable)
    CFRelease(Mutable);
  if (v19)
    CFRelease(v19);
  if (a1)
    *a1 = v13;
  return v29;
}

uint64_t sub_1002FAEE0(const char *a1, const char *a2, const void *a3, const __CFString *a4, int a5, int a6, char a7)
{
  NSObject *v12;
  CFStringRef v13;
  CFStringRef v14;
  NSObject *v15;
  uint64_t v16;
  __CFDictionary *Mutable;
  const __CFString *v18;
  CFBooleanRef v19;
  const void *v20;
  __CFDictionary *v21;
  NSObject *v22;
  OSStatus v23;
  __CFDictionary *v24;
  CFDataRef v25;
  const void **v26;
  CFStringRef v27;
  const char *v29;
  const __CFString *v30;
  CFBooleanRef v31;
  CFStringRef v32;
  CFDataRef value;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  int v39;

  v12 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446466;
    v37 = a1;
    v38 = 1024;
    v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "_BTKCSetData found keychain item for device %{public}s with result %d, updating", buf, 0x12u);
  }
  if (CFDictionaryGetCount((CFDictionaryRef)a3))
  {
    v29 = a1;
    v13 = CFStringCreateWithCString(kCFAllocatorDefault, a1, 0x8000100u);
    value = CFPropertyListCreateData(kCFAllocatorDefault, a3, kCFPropertyListXMLFormat_v1_0, 0, 0);
    if (a2)
      v14 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
    else
      v14 = 0;
    Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
    if (a4)
      v18 = a4;
    else
      v18 = CFSTR("MobileBluetooth");
    v30 = v18;
    CFDictionaryAddValue(Mutable, kSecAttrService, v18);
    v32 = v13;
    CFDictionaryAddValue(Mutable, kSecAttrAccount, v13);
    CFDictionaryAddValue(Mutable, kSecAttrAccessGroup, CFSTR("com.apple.bluetooth"));
    if (a5)
      v19 = kCFBooleanTrue;
    else
      v19 = kCFBooleanFalse;
    v31 = v19;
    CFDictionaryAddValue(Mutable, kSecAttrSynchronizable, v19);
    v20 = (const void *)kSecUseSystemKeychain;
    CFDictionaryAddValue(Mutable, kSecUseSystemKeychain, kCFBooleanTrue);
    v21 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(v21, kSecValueData, value);
    if (v14)
      CFDictionaryAddValue(v21, kSecAttrLabel, v14);
    if ((a7 & 1) == 0)
      CFDictionaryAddValue(v21, kSecAttrSysBound, &off_1009606A0);
    if (a6)
      CFDictionaryAddValue(v21, kSecAttrAccessible, kSecAttrAccessibleUntilReboot);
    if (a5)
      CFDictionaryAddValue(v21, kSecAttrSyncViewHint, CFSTR("PCS-MasterKey"));
    v22 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v37 = v29;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "updating keychain data for device %{public}s", buf, 0xCu);
    }
    v23 = SecItemUpdate(Mutable, v21);
    CFRelease(v21);
    CFRelease(Mutable);
    if (!v23)
    {
      v16 = 0;
      v27 = v32;
      v25 = value;
      goto LABEL_44;
    }
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_1006DE554();
    v24 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(v24, kSecClass, kSecClassGenericPassword);
    CFDictionaryAddValue(v24, kSecAttrService, v30);
    CFDictionaryAddValue(v24, kSecAttrAccount, v32);
    v25 = value;
    CFDictionaryAddValue(v24, kSecValueData, value);
    v26 = (const void **)&kSecAttrAccessibleAlwaysPrivate;
    if (!a5)
      v26 = (const void **)&kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
    if (a6)
      v26 = (const void **)&kSecAttrAccessibleUntilReboot;
    CFDictionaryAddValue(v24, kSecAttrAccessible, *v26);
    CFDictionaryAddValue(v24, v20, kCFBooleanTrue);
    CFDictionaryAddValue(v24, kSecAttrAccessGroup, CFSTR("com.apple.bluetooth"));
    CFDictionaryAddValue(v24, kSecAttrSynchronizable, v31);
    if (a5)
      CFDictionaryAddValue(v24, kSecAttrSyncViewHint, CFSTR("PCS-MasterKey"));
    if ((a7 & 1) == 0)
      CFDictionaryAddValue(v24, kSecAttrSysBound, &off_1009606A0);
    v27 = v32;
    if (v14)
      CFDictionaryAddValue(v24, kSecAttrLabel, v14);
    v16 = SecItemAdd(v24, 0);
    if ((_DWORD)v16 && os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
    {
      sub_1006DE4F4();
      if (!v24)
        goto LABEL_44;
    }
    else if (!v24)
    {
LABEL_44:
      if (v27)
        CFRelease(v27);
      if (v25)
        CFRelease(v25);
      if (v14)
        CFRelease(v14);
      return v16;
    }
    CFRelease(v24);
    goto LABEL_44;
  }
  v15 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "will not update an empty dict.", buf, 2u);
  }
  return 0;
}

uint64_t sub_1002FB49C(int a1, const char *a2, char *a3, int *a4, const __CFDictionary **a5, int8x8_t a6)
{
  uint64_t result;
  uint8x8_t v8;
  const __CFDictionary *v12;
  const __CFString *v13;
  NSObject *v14;
  const __CFString *Value;
  const __CFString *v16;
  CFTypeID TypeID;
  unsigned int v18;
  uint8_t buf[4];
  unsigned int v20;

  v18 = 0;
  if (!a1)
    return 4294902295;
  result = 4294902295;
  if (a1 <= 256)
  {
    a6.i32[0] = a1;
    v8 = (uint8x8_t)vcnt_s8(a6);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.i32[0] <= 1u)
    {
      v12 = *a5;
      if (*a5)
        goto LABEL_5;
      *a5 = (const __CFDictionary *)sub_1002FA7DC((int *)&v18, a2, 0, 0);
      v14 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v20 = v18;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "BTKCGetData calling _BTKCGetDataCopy, returned %d", buf, 8u);
      }
      result = 4294933277;
      if (v18 != -34019)
      {
        v12 = *a5;
        if (!*a5)
        {
          *a3 = 0;
          *a4 = 0;
          return 4294902294;
        }
LABEL_5:
        if (a1 <= 31)
        {
          v13 = CFSTR("Pincode");
          switch(a1)
          {
            case 1:
              break;
            case 2:
              v13 = CFSTR("LinkKey");
              break;
            case 3:
            case 5:
            case 6:
            case 7:
              goto LABEL_30;
            case 4:
              v13 = CFSTR("LinkKeyType");
              break;
            case 8:
              v13 = CFSTR("LocalAddress");
              break;
            default:
              if (a1 != 16)
                goto LABEL_30;
              v13 = CFSTR("MagicAccIRK");
              break;
          }
LABEL_27:
          Value = (const __CFString *)CFDictionaryGetValue(v12, v13);
          if (Value)
          {
            v16 = Value;
            TypeID = CFStringGetTypeID();
            if (TypeID == CFGetTypeID(v16))
            {
              CFStringGetCString(v16, a3, *a4, 0x8000100u);
              *a4 = strlen(a3);
              return v18;
            }
          }
          goto LABEL_30;
        }
        if (a1 > 127)
        {
          if (a1 == 128)
          {
            v13 = CFSTR("MagicAccHint");
            goto LABEL_27;
          }
          if (a1 == 256)
          {
            v13 = CFSTR("MagicAccRachet");
            goto LABEL_27;
          }
        }
        else
        {
          if (a1 == 32)
          {
            v13 = CFSTR("MagicAccEncKey");
            goto LABEL_27;
          }
          if (a1 == 64)
          {
            v13 = CFSTR("MagicAccKey");
            goto LABEL_27;
          }
        }
LABEL_30:
        *a3 = 0;
        *a4 = 0;
        return 155;
      }
    }
  }
  return result;
}

uint64_t sub_1002FB6F0(char *a1, unsigned int a2)
{
  NSObject *v4;
  __CFDictionary *v5;
  NSObject *v6;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint8_t buf[4];
  unsigned int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  char *v23;

  v17 = 0;
  v4 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109634;
    v19 = a2;
    v20 = 1040;
    v21 = 6;
    v22 = 2096;
    v23 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Deleting keychain data (mask=%02x) for %{bluetooth:BD_ADDR}.6P)", buf, 0x18u);
  }
  v5 = (__CFDictionary *)sub_1002FA7DC((int *)&v17, a1, 0, 0);
  v6 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v19 = v17;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BTKCDeleteData calling _BTKCGetDataCopy, returned %d", buf, 8u);
  }
  if (v17 == -34019)
  {
    if (!v5)
      return 4294933277;
    goto LABEL_42;
  }
  if (!v17 && !v5)
  {
    v8 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_1006DE5B4(v8, v9, v10, v11, v12, v13, v14, v15);
    return 4294902294;
  }
  if (!v5)
    return 4294902294;
  if ((a2 & 1) != 0)
  {
    CFDictionaryRemoveValue(v5, CFSTR("Pincode"));
    if ((a2 & 2) == 0)
    {
LABEL_15:
      if ((a2 & 4) == 0)
        goto LABEL_16;
      goto LABEL_32;
    }
  }
  else if ((a2 & 2) == 0)
  {
    goto LABEL_15;
  }
  CFDictionaryRemoveValue(v5, CFSTR("LinkKey"));
  if ((a2 & 4) == 0)
  {
LABEL_16:
    if ((a2 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_33;
  }
LABEL_32:
  CFDictionaryRemoveValue(v5, CFSTR("LinkKeyType"));
  if ((a2 & 0x10) == 0)
  {
LABEL_17:
    if ((a2 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_34;
  }
LABEL_33:
  CFDictionaryRemoveValue(v5, CFSTR("MagicAccIRK"));
  if ((a2 & 0x20) == 0)
  {
LABEL_18:
    if ((a2 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_34:
  CFDictionaryRemoveValue(v5, CFSTR("MagicAccEncKey"));
  if ((a2 & 0x40) == 0)
  {
LABEL_19:
    if ((a2 & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_36;
  }
LABEL_35:
  CFDictionaryRemoveValue(v5, CFSTR("MagicAccKey"));
  if ((a2 & 0x80) == 0)
  {
LABEL_20:
    if ((a2 & 0x100) == 0)
      goto LABEL_21;
    goto LABEL_37;
  }
LABEL_36:
  CFDictionaryRemoveValue(v5, CFSTR("MagicAccHint"));
  if ((a2 & 0x100) == 0)
  {
LABEL_21:
    if ((a2 & 0x200) == 0)
      goto LABEL_22;
    goto LABEL_38;
  }
LABEL_37:
  CFDictionaryRemoveValue(v5, CFSTR("MagicAccRachet"));
  if ((a2 & 0x200) == 0)
  {
LABEL_22:
    if ((a2 & 0x400) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_38:
  CFDictionaryRemoveValue(v5, CFSTR("GuestAccIRK"));
  if ((a2 & 0x400) != 0)
LABEL_23:
    CFDictionaryRemoveValue(v5, CFSTR("GuestAccEncKey"));
LABEL_24:
  if (CFDictionaryGetCount(v5) == 1 && CFDictionaryContainsKey(v5, CFSTR("LocalAddress")))
    CFDictionaryRemoveValue(v5, CFSTR("LocalAddress"));
  if (CFDictionaryGetCount(v5))
    v16 = sub_1002FAEE0(a1, 0, v5, 0, 0, 0, 1);
  else
    v16 = sub_1002FB9EC(a1, 0, 0);
  v17 = v16;
LABEL_42:
  CFRelease(v5);
  return v17;
}

uint64_t sub_1002FB9EC(char *cStr, const __CFString *a2, int a3)
{
  CFStringRef v6;
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  const __CFString *v9;
  CFBooleanRef v10;
  uint64_t v11;
  NSObject *v12;
  int v14;
  char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;

  v6 = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    v11 = 0;
    if (!v6)
      return v11;
    goto LABEL_12;
  }
  v8 = Mutable;
  CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
  if (a2)
    v9 = a2;
  else
    v9 = CFSTR("MobileBluetooth");
  CFDictionaryAddValue(v8, kSecAttrService, v9);
  CFDictionaryAddValue(v8, kSecAttrAccount, v6);
  if (a3)
    v10 = kCFBooleanTrue;
  else
    v10 = kCFBooleanFalse;
  CFDictionaryAddValue(v8, kSecAttrSynchronizable, v10);
  CFDictionaryAddValue(v8, kSecUseSystemKeychain, kCFBooleanTrue);
  v11 = SecItemDelete(v8);
  if ((_DWORD)v11)
  {
    v12 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 136446722;
      v15 = cStr;
      v16 = 1024;
      v17 = v11;
      v18 = 1024;
      v19 = a3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Failed to remove item from keychain for device %{public}s with result %d sync=%d", (uint8_t *)&v14, 0x18u);
    }
  }
  CFRelease(v8);
  if (v6)
LABEL_12:
    CFRelease(v6);
  return v11;
}

uint64_t sub_1002FBBD8(void **a1)
{
  __CFDictionary *Mutable;
  __CFDictionary *v3;
  OSStatus v4;
  CFTypeRef v5;
  CFIndex Count;
  CFIndex v7;
  const __CFDictionary *ValueAtIndex;
  const __CFString *Value;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int v27;
  __int16 v28;
  CFTypeRef result;
  uint8_t buf[4];
  char *v31;
  char buffer[16];
  __int128 v33;

  result = 0;
  *(_OWORD *)buffer = 0u;
  v33 = 0u;
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
    return 0;
  v3 = Mutable;
  CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
  CFDictionaryAddValue(v3, kSecAttrService, CFSTR("MobileBluetooth"));
  CFDictionaryAddValue(v3, kSecMatchLimit, kSecMatchLimitAll);
  CFDictionaryAddValue(v3, kSecReturnAttributes, kCFBooleanTrue);
  CFDictionaryAddValue(v3, kSecUseSystemKeychain, kCFBooleanTrue);
  v4 = SecItemCopyMatching(v3, &result);
  v5 = result;
  if (!v4 && result)
  {
    Count = CFArrayGetCount((CFArrayRef)result);
    if (Count)
    {
      v7 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)result, v7);
        if (ValueAtIndex)
        {
          Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, kSecAttrAccount);
          if (CFStringGetCString(Value, buffer, 32, 0x8000100u))
          {
            v28 = 0;
            v27 = 0;
            if (!sub_10006D80C((uint64_t)&v27, (unsigned __int8 *)buffer))
              goto LABEL_19;
            if (!(_BYTE)v27)
            {
              v14 = 1;
              while (v14 != 6)
              {
                if (*((unsigned __int8 *)&v27 + v14++))
                {
                  if ((unint64_t)(v14 - 2) <= 4)
                    goto LABEL_10;
                  break;
                }
              }
LABEL_19:
              v16 = qword_100999850;
              if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446210;
                v31 = buffer;
                _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Read invalid address %{public}s from keychain, not creating a device", buf, 0xCu);
              }
              goto LABEL_36;
            }
LABEL_10:
            if (qword_1009778E8 != -1)
              dispatch_once(&qword_1009778E8, &stru_100925308);
            v10 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v27, 1);
            if (!sub_10046EA5C((uint64_t)a1, v10))
            {
              v12 = (uint64_t *)a1[1];
              v11 = (unint64_t)a1[2];
              if ((unint64_t)v12 >= v11)
              {
                v17 = ((char *)v12 - (_BYTE *)*a1) >> 3;
                if ((unint64_t)(v17 + 1) >> 61)
                  abort();
                v18 = v11 - (_QWORD)*a1;
                v19 = v18 >> 2;
                if (v18 >> 2 <= (unint64_t)(v17 + 1))
                  v19 = v17 + 1;
                if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
                  v20 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v20 = v19;
                if (v20)
                  v21 = (char *)sub_10007ABA0((uint64_t)(a1 + 2), v20);
                else
                  v21 = 0;
                v22 = (uint64_t *)&v21[8 * v17];
                *v22 = v10;
                v13 = v22 + 1;
                v24 = (char *)*a1;
                v23 = (char *)a1[1];
                if (v23 != *a1)
                {
                  do
                  {
                    v25 = *((_QWORD *)v23 - 1);
                    v23 -= 8;
                    *--v22 = v25;
                  }
                  while (v23 != v24);
                  v23 = (char *)*a1;
                }
                *a1 = v22;
                a1[1] = v13;
                a1[2] = &v21[8 * v20];
                if (v23)
                  operator delete(v23);
              }
              else
              {
                *v12 = v10;
                v13 = v12 + 1;
              }
              a1[1] = v13;
            }
          }
        }
LABEL_36:
        if (++v7 == Count)
          goto LABEL_41;
      }
    }
    goto LABEL_41;
  }
  if (v4 != -25300)
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_1006DE61C();
LABEL_41:
    v5 = result;
  }
  if (v5)
    CFRelease(v5);
  CFRelease(v3);
  return 0;
}

CFStringRef sub_1002FBF8C(int a1)
{
  const __CFAllocator *v1;
  const __CFString *v2;
  CFStringRef result;

  switch(a1)
  {
    case 0:
    case 5:
      v1 = kCFAllocatorDefault;
      v2 = CFSTR("Long-term Key");
      goto LABEL_16;
    case 1:
    case 6:
      v1 = kCFAllocatorDefault;
      v2 = CFSTR("Long-term Key Length");
      goto LABEL_16;
    case 2:
    case 7:
      v1 = kCFAllocatorDefault;
      v2 = CFSTR("Long-term Key Type");
      goto LABEL_16;
    case 3:
    case 8:
      v1 = kCFAllocatorDefault;
      v2 = CFSTR("Encrypted Diversifier");
      goto LABEL_16;
    case 4:
    case 9:
      v1 = kCFAllocatorDefault;
      v2 = CFSTR("Random Number");
      goto LABEL_16;
    case 10:
      v1 = kCFAllocatorDefault;
      v2 = CFSTR("Remote IRK");
      goto LABEL_16;
    case 12:
      v1 = kCFAllocatorDefault;
      v2 = CFSTR("Remote CSRK");
      goto LABEL_16;
    case 13:
      v1 = kCFAllocatorDefault;
      v2 = CFSTR("Local CSRK");
      goto LABEL_16;
    case 14:
      v1 = kCFAllocatorDefault;
      v2 = CFSTR("Local Sign Counter");
      goto LABEL_16;
    case 15:
      v1 = kCFAllocatorDefault;
      v2 = CFSTR("Remote Sign Counter");
      goto LABEL_16;
    case 16:
      v1 = kCFAllocatorDefault;
      v2 = CFSTR("Derive LKLTK");
LABEL_16:
      result = CFStringCreateCopy(v1, v2);
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_FAULT))
        sub_1006DE67C();
      result = 0;
      break;
  }
  return result;
}

id sub_1002FC10C(const void *a1, int a2, const void *a3)
{
  __CFDictionary *Mutable;
  __CFDictionary *v7;
  CFBooleanRef v8;
  OSStatus v9;
  CFIndex Count;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v13;
  void *Value;
  id v15;
  unint64_t v16;
  NSObject *v17;
  const void *v18;
  id v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  NSObject *v29;
  void *v31;
  uint8_t v32;
  char v33[15];
  uint8_t v34;
  char v35[7];
  CFTypeRef result;
  uint8_t buf[4];
  const void *v38;

  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  result = 0;
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v7 = Mutable;
  if (Mutable)
  {
    CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
    CFDictionaryAddValue(v7, kSecAttrService, a1);
    CFDictionaryAddValue(v7, kSecMatchLimit, kSecMatchLimitAll);
    CFDictionaryAddValue(v7, kSecReturnAttributes, kCFBooleanTrue);
    CFDictionaryAddValue(v7, kSecUseSystemKeychain, kCFBooleanTrue);
    if (a2)
      v8 = kCFBooleanTrue;
    else
      v8 = kCFBooleanFalse;
    CFDictionaryAddValue(v7, kSecAttrSynchronizable, v8);
    v9 = SecItemCopyMatching(v7, &result);
    if (v9 || !result)
    {
      v29 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v38) = v9;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Failed to query keychain with result %d", buf, 8u);
      }
    }
    else
    {
      Count = CFArrayGetCount((CFArrayRef)result);
      if (Count >= 1)
      {
        for (i = 0; i != Count; ++i)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)result, i);
          v13 = ValueAtIndex;
          if (ValueAtIndex)
          {
            Value = (void *)CFDictionaryGetValue(ValueAtIndex, kSecAttrAccount);
            if (Value)
            {
              v15 = Value;
              v16 = sub_100649C7C(v15);
              if (v16)
              {
                if (a3)
                {
                  v17 = qword_100999850;
                  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)buf = 134217984;
                    v38 = a3;
                    _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Local address is not zero!! 0x%llx", buf, 0xCu);
                  }
                }
                v18 = CFDictionaryGetValue(v13, kSecAttrLabel);
                if (v18
                  && (v19 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", v18)) != 0)
                {
                  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v16));
                  objc_msgSend(v31, "setObject:forKey:", v20, v19);

                }
                else
                {
                  v22 = qword_100999850;
                  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 138543362;
                    v38 = v18;
                    _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Unable to build UUID from string %{public}@", buf, 0xCu);
                  }
                }

                a3 = 0;
              }
              else
              {
                v23 = qword_100999850;
                if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
                  sub_1006DE750(&v34, v35, v23);

              }
            }
            else
            {
              v21 = qword_100999850;
              if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_FAULT))
                sub_1006DE71C(&v32, v33, v21);
            }
          }
        }
      }
    }
    if (result)
      CFRelease(result);
    CFRelease(v7);
    v28 = v31;
    v27 = v31;
  }
  else
  {
    v24 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_1006DE6E8(v24, v25, v26);
    v27 = 0;
    v28 = v31;
  }

  return v27;
}

void sub_1002FC558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

id sub_1002FC5A4(const void *a1)
{
  return sub_1002FC10C(CFSTR("BluetoothLE"), 0, a1);
}

id sub_1002FC5B8()
{
  return sub_1002FC10C(CFSTR("BluetoothLESync"), 1, 0);
}

uint64_t sub_1002FC5CC(uint64_t a1, void *a2, int a3, const void **a4)
{
  id v7;
  void **v8;
  id v9;
  uint64_t v10;
  char *v11;
  void *__p[2];
  char v14;

  v7 = a2;
  if (CFDictionaryGetCount((CFDictionaryRef)*a4) < 1)
  {
    sub_1000217F4(a1);
    if (v14 >= 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    v10 = sub_1002FB9EC(v11, CFSTR("BluetoothLE"), a3);
  }
  else
  {
    v8 = __p;
    sub_1000217F4(a1);
    if (v14 < 0)
      v8 = (void **)__p[0];
    v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "UUIDString")));
    v10 = sub_1002FAEE0((const char *)v8, (const char *)objc_msgSend(v9, "UTF8String"), *a4, CFSTR("BluetoothLE"), a3, 0, 1);

  }
  if (v14 < 0)
    operator delete(__p[0]);
  CFRelease(CFSTR("BluetoothLE"));

  return v10;
}

void sub_1002FC6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1002FC720(uint64_t a1, void *a2, unsigned int a3, const UInt8 *a4, CFIndex a5, int a6, const void **a7, int a8)
{
  const __CFString *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CFStringRef v23;
  __CFDictionary *Mutable;
  CFDataRef v25;
  void **v26;
  NSObject *v27;
  const __CFString *v28;
  __CFDictionary *Value;
  __CFDictionary *v30;
  void **v31;
  id v32;
  char *v33;
  uint64_t v34;
  id v37;
  unsigned int v38;
  void *__p[2];
  char v40;

  v37 = a2;
  v38 = 0;
  if (((a3 == 10) & a6) != 0)
    v14 = CFSTR("BluetoothLESync");
  else
    v14 = CFSTR("BluetoothLE");
  if (!a4)
  {
    v15 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_FAULT))
      sub_1006DE784(v15, v16, v17, v18, v19, v20, v21, v22);
  }
  v23 = sub_1002FBF8C(a3);
  Mutable = (__CFDictionary *)*a7;
  if (!*a7)
  {
    sub_1000217F4(a1);
    if (v40 >= 0)
      v26 = __p;
    else
      v26 = (void **)__p[0];
    *a7 = sub_1002FA7DC((int *)&v38, (const char *)v26, v14, a6);
    if (v40 < 0)
      operator delete(__p[0]);
    v27 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v38;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "BTKCSetLEData calling _BTKCGetDataCopy, returned %d", (uint8_t *)__p, 8u);
    }
    if (v38 == -34019)
      goto LABEL_51;
    Mutable = (__CFDictionary *)*a7;
    if (!*a7)
    {
      Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 6, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      *a7 = Mutable;
      if (!Mutable)
        goto LABEL_10;
    }
  }
  if (a5)
  {
    v25 = CFDataCreate(kCFAllocatorDefault, a4, a5);
    if (!v25)
    {
LABEL_10:
      v38 = 4;
      goto LABEL_51;
    }
  }
  else
  {
    CFDictionaryRemoveValue(Mutable, v23);
    v25 = 0;
  }
  if (a3 >= 5)
  {
    if (a3 - 5 > 4)
    {
      Value = (__CFDictionary *)*a7;
      if (a5)
      {
        CFDictionarySetValue(Value, v23, v25);
        goto LABEL_38;
      }
LABEL_37:
      CFDictionaryRemoveValue(Value, v23);
LABEL_38:
      if (a8)
      {
        if (CFDictionaryGetCount((CFDictionaryRef)*a7) < 1)
        {
          sub_1000217F4(a1);
          if (v40 >= 0)
            v33 = (char *)__p;
          else
            v33 = (char *)__p[0];
          v38 = sub_1002FB9EC(v33, v14, a6);
        }
        else
        {
          v31 = __p;
          sub_1000217F4(a1);
          if (v40 < 0)
            v31 = (void **)__p[0];
          v32 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "UUIDString")));
          v38 = sub_1002FAEE0((const char *)v31, (const char *)objc_msgSend(v32, "UTF8String"), *a7, v14, a6, 0, 1);

        }
        if (v40 < 0)
          operator delete(__p[0]);
      }
      if (v25)
        goto LABEL_50;
      goto LABEL_51;
    }
    v28 = CFSTR("Local Encryption");
  }
  else
  {
    v28 = CFSTR("Remote Encryption");
  }
  Value = (__CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)*a7, v28);
  v30 = Value;
  if (!a4 || !a5)
  {
    if (!Value)
      goto LABEL_38;
    goto LABEL_37;
  }
  if (Value)
  {
LABEL_32:
    CFDictionarySetValue(v30, v23, v25);
    goto LABEL_38;
  }
  v30 = CFDictionaryCreateMutable(kCFAllocatorDefault, 4, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v30)
  {
    CFDictionarySetValue((CFMutableDictionaryRef)*a7, v28, v30);
    CFRelease(v30);
    goto LABEL_32;
  }
  v38 = 4;
  if (v25)
LABEL_50:
    CFRelease(v25);
LABEL_51:
  if (v23)
    CFRelease(v23);
  CFRelease(v14);
  v34 = v38;

  return v34;
}

void sub_1002FCAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1002FCB48(uint64_t a1, void *a2, unsigned int a3, const UInt8 *a4, CFIndex a5, int a6)
{
  id v11;
  uint64_t v12;
  CFTypeRef cf;

  v11 = a2;
  cf = 0;
  v12 = sub_1002FC720(a1, v11, a3, a4, a5, a6, &cf, 1);
  if (cf)
    CFRelease(cf);

  return v12;
}

void sub_1002FCBD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002FCBE4(uint64_t a1, unsigned int a2, uint64_t a3, _DWORD *a4, const __CFString *a5, int a6, const __CFDictionary **a7)
{
  CFStringRef v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const __CFDictionary *v23;
  NSObject *v24;
  uint8_t *v25;
  NSObject *v26;
  const __CFString *v27;
  const __CFData *Value;
  unsigned int v30;
  uint8_t buf[8];
  char v32;

  v14 = sub_1002FBF8C(a2);
  v30 = 0;
  if (!a3)
  {
    v15 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_FAULT))
      sub_1006DE784(v15, v16, v17, v18, v19, v20, v21, v22);
  }
  *a4 = 0;
  v23 = *a7;
  if (*a7)
  {
    v24 = qword_100999850;
    if (!os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      goto LABEL_16;
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "_BTKCCopyLEData using cached dictionary", buf, 2u);
LABEL_15:
    v23 = *a7;
    if (!*a7)
      goto LABEL_24;
LABEL_16:
    if (a2 >= 5)
    {
      if (a2 - 5 > 4)
      {
LABEL_21:
        Value = (const __CFData *)CFDictionaryGetValue(v23, v14);
        if (Value && CFDataGetLength(Value))
          operator new[]();
        goto LABEL_24;
      }
      v27 = CFSTR("Local Encryption");
    }
    else
    {
      v27 = CFSTR("Remote Encryption");
    }
    v23 = (const __CFDictionary *)CFDictionaryGetValue(v23, v27);
    if (!v23)
      goto LABEL_24;
    goto LABEL_21;
  }
  sub_1000217F4(a1);
  if (v32 >= 0)
    v25 = buf;
  else
    v25 = *(uint8_t **)buf;
  *a7 = (const __CFDictionary *)sub_1002FA7DC((int *)&v30, (const char *)v25, a5, a6);
  if (v32 < 0)
    operator delete(*(void **)buf);
  v26 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v30;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "_BTKCCopyLEData calling _BTKCGetDataCopy, returned %d", buf, 8u);
  }
  if (v30 != -34019)
    goto LABEL_15;
LABEL_24:
  if (v14)
    CFRelease(v14);
  return v30;
}

void sub_1002FCE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002FCE68(uint64_t a1, unsigned int a2, uint64_t a3, _DWORD *a4, const __CFString *a5, int a6)
{
  uint64_t v6;
  CFTypeRef cf;

  cf = 0;
  v6 = sub_1002FCBE4(a1, a2, a3, a4, a5, a6, (const __CFDictionary **)&cf);
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_1002FCEA8(uint64_t result, unsigned int a2, uint64_t a3, _DWORD *a4, _DWORD *a5, int a6, const __CFDictionary **a7)
{
  const __CFString *v9;
  int v10;

  v10 = 0;
  if (a3)
  {
    if (a6)
      v9 = CFSTR("BluetoothLESync");
    else
      v9 = CFSTR("BluetoothLE");
    result = sub_1002FCBE4(result, a2, a3, &v10, v9, a6, a7);
    *a4 = v10;
    *a5 = result;
  }
  return result;
}

void sub_1002FCF04(uint64_t a1, unsigned int a2, uint64_t a3, _DWORD *a4, _DWORD *a5, uint64_t a6, _DWORD *a7, _DWORD *a8)
{
  int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  NSObject *v26;
  int v27;
  uint8_t buf[4];
  int v29;

  v27 = 0;
  if (a3 && a4)
  {
    v16 = sub_1002FCE68(a1, a2, a3, &v27, CFSTR("BluetoothLE"), 0);
LABEL_9:
    *a4 = v27;
    goto LABEL_10;
  }
  if (a6 && a7
    || (v17 = qword_100999850, !os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_FAULT)))
  {
    if (!a3)
      goto LABEL_12;
  }
  else
  {
    sub_1006DE7F4(v17, v18, v19, v20, v21, v22, v23, v24);
    if (!a3)
      goto LABEL_12;
  }
  v16 = sub_1002FCE68(a1, a2, a3, &v27, CFSTR("BluetoothLE"), 0);
  if (a4)
    goto LABEL_9;
LABEL_10:
  if (a5)
    *a5 = v16;
LABEL_12:
  if (a6)
  {
    v25 = sub_1002FCE68(a1, a2, a6, &v27, CFSTR("BluetoothLESync"), 1);
    v26 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v29 = v25;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "BTKCCopyLEData is calling _BTKCCopyLEData, returned %d", buf, 8u);
    }
    if (a7)
      *a7 = v27;
    if (a8)
      *a8 = v25;
  }
}

uint64_t sub_1002FD0B8(uint64_t a1, uint64_t a2, int a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  void *__p[2];
  char v12;

  sub_1000217F4(a1);
  if (v12 >= 0)
    v5 = (char *)__p;
  else
    v5 = (char *)__p[0];
  v6 = sub_1002FB9EC(v5, CFSTR("BluetoothLE"), 0);
  v7 = v6;
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if (!(_DWORD)v7)
      goto LABEL_10;
  }
  else if (!(_DWORD)v6)
  {
    goto LABEL_10;
  }
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
    sub_1006DE864();
LABEL_10:
  if (a3)
  {
    sub_1000217F4(a1);
    if (v12 >= 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    v7 = sub_1002FB9EC(v8, CFSTR("BluetoothLESync"), 1);
    if (v12 < 0)
      operator delete(__p[0]);
    if ((_DWORD)v7)
    {
      v9 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v7;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Could not erase LE Data from synced keychain with result %d", (uint8_t *)__p, 8u);
      }
    }
  }
  return v7;
}

void sub_1002FD228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002FD250(int a1, UInt8 *a2, uint64_t a3, unsigned int *a4)
{
  const char *v6;
  const __CFDictionary *v7;
  unsigned int v8;
  NSObject *v9;
  const __CFData *Value;
  const __CFData *v12;
  CFTypeID TypeID;
  unsigned int Length;
  unsigned int v15;
  uint8_t buf[4];
  unsigned int v17;
  CFRange v18;

  v15 = 0;
  if ((a1 - 18) > 0xFFFFFFF1)
  {
    if ((a1 - 4) >= 0xE)
      return 4294902292;
    v6 = off_100925328[a1 - 4];
LABEL_10:
    v7 = (const __CFDictionary *)sub_1002FA7DC((int *)&v15, v6, CFSTR("BluetoothGlobal"), 0);
    v8 = v15;
    if (v15)
    {
      v9 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v17 = v8;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "_BTKCGetDataCopy returned %d", buf, 8u);
        v8 = v15;
      }
      if (v8 == -34019)
      {
        if (!v7)
          return 4294933277;
        goto LABEL_23;
      }
    }
    if (v7)
    {
      Value = (const __CFData *)CFDictionaryGetValue(v7, CFSTR("KEY"));
      if (Value && (v12 = Value, TypeID = CFDataGetTypeID(), TypeID == CFGetTypeID(v12)))
      {
        Length = CFDataGetLength(v12);
        *a4 = Length;
        if (Length)
        {
          v18.length = Length;
          v18.location = 0;
          CFDataGetBytes(v12, v18, a2);
        }
      }
      else
      {
        v15 = -65004;
      }
LABEL_23:
      CFRelease(v7);
      return v15;
    }
    return 4294902292;
  }
  switch(a1)
  {
    case 1:
      v6 = "Encryption Root";
      goto LABEL_10;
    case 2:
      v6 = "Identity Root";
      goto LABEL_10;
    case 19:
      v6 = "Non Connectable identity address";
      goto LABEL_10;
  }
  return 4294902295;
}

uint64_t sub_1002FD428(unsigned int a1, const UInt8 *a2, unsigned int a3)
{
  uint64_t v6;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v8;
  CFDataRef v9;
  CFDataRef v10;
  const char *v11;
  __CFDictionary *v12;
  char v13;

  if (a1 - 18 > 0xFFFFFFF1 || (v6 = 4294902295, a1 <= 0x13) && ((1 << a1) & 0x80006) != 0)
  {
    Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      v8 = Mutable;
      v9 = CFDataCreate(kCFAllocatorDefault, a2, a3);
      if (v9)
      {
        v10 = v9;
        CFDictionarySetValue(v8, CFSTR("KEY"), v9);
        v6 = 0;
        switch(a1)
        {
          case 1u:
            v11 = "Encryption Root";
            goto LABEL_17;
          case 2u:
            v11 = "Identity Root";
            goto LABEL_17;
          case 4u:
            v11 = "Cloud Master Key Root";
            goto LABEL_17;
          case 5u:
            v11 = "Cloud Private Key Root";
            goto LABEL_17;
          case 6u:
            v11 = "Cloud Public Key Root";
            goto LABEL_17;
          case 7u:
            v11 = "Cloud Nonce Root";
            goto LABEL_17;
          case 8u:
            v11 = "Identity Root Key";
            goto LABEL_17;
          case 9u:
            v11 = "Cloud FC Address";
LABEL_17:
            v12 = v8;
            v13 = 1;
            goto LABEL_27;
          case 0xAu:
            v11 = "CT TTK BUFF";
            goto LABEL_26;
          case 0xBu:
            v11 = "CT TKPeriod";
            goto LABEL_26;
          case 0xCu:
            v11 = "CT Last RPI And Address";
            goto LABEL_26;
          case 0xDu:
            v11 = "CT TEK BUFF V2 LEN";
            goto LABEL_26;
          case 0xEu:
            v11 = "CT TEK BUFF V2";
            goto LABEL_26;
          case 0xFu:
            v11 = "Local Device Identifier";
            goto LABEL_26;
          case 0x11u:
            v11 = "Non Connectable identity root";
            goto LABEL_26;
          case 0x13u:
            v11 = "Non Connectable identity address";
LABEL_26:
            v12 = v8;
            v13 = 0;
LABEL_27:
            v6 = sub_1002FAEE0(v11, 0, v12, CFSTR("BluetoothGlobal"), 0, 0, v13);
            break;
          default:
            break;
        }
        CFRelease(v10);
      }
      else
      {
        v6 = 4;
      }
      CFRelease(v8);
    }
    else
    {
      return 4;
    }
  }
  return v6;
}

uint64_t sub_1002FD630(int a1)
{
  if (a1 == 4)
    return sub_1002FB9EC("Cloud Master Key Root", CFSTR("BluetoothGlobal"), 0);
  else
    return 4294902295;
}

uint64_t sub_1002FD658(const void *a1)
{
  NSObject *v2;
  __CFDictionary *Mutable;
  __CFDictionary *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  const void *v12;

  v2 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 138412290;
    v12 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Deleting all keychain data for service:%@", (uint8_t *)&v11, 0xCu);
  }
  if (a1)
  {
    Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      v4 = Mutable;
      CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
      CFDictionaryAddValue(v4, kSecAttrService, a1);
      CFDictionaryAddValue(v4, kSecAttrSynchronizable, kCFBooleanFalse);
      CFDictionaryAddValue(v4, kSecUseSystemKeychain, kCFBooleanTrue);
      CFDictionaryAddValue(v4, kSecAttrAccessGroup, CFSTR("com.apple.bluetooth"));
      do
        v5 = SecItemDelete(v4);
      while (!(_DWORD)v5);
      v6 = v5;
      CFRelease(v4);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v7 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_1006DE8C4(v7, v8, v9);
    return 3;
  }
  return v6;
}

uint64_t sub_1002FD80C()
{
  sub_1002FD658(CFSTR("BluetoothGlobal"));
  sub_1002FD658(CFSTR("BluetoothLE"));
  sub_1002FD658(CFSTR("MobileBluetooth"));
  return 0;
}

void sub_1002FD844(id a1)
{
  operator new();
}

void sub_1002FD884()
{
  operator delete();
}

void sub_1002FD8A8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

void sub_1002FD8D4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 2u);
}

void sub_1002FD8E0(_QWORD *a1, uint64_t a2, __int16 a3)
{
  uint64_t v6;

  v6 = sub_1002BC5A0((uint64_t)a1, "HFPSendThread");
  *(_QWORD *)v6 = off_1009253A8;
  *(_QWORD *)(v6 + 152) = a2;
  *(_WORD *)(v6 + 168) = a3;
  *(_QWORD *)(v6 + 176) = 0;
  a1[25] = 0;
  a1[26] = 0;
  a1[24] = 0;
  operator new[]();
}

void sub_1002FDBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002FDC70(uint64_t a1)
{
  uint64_t *v2;
  _QWORD v4[2];

  *(_QWORD *)a1 = off_1009253A8;
  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, *(_QWORD *)(a1 + 152) + 760);
  v2 = sub_1004CCD90(*(_QWORD *)(a1 + 152), *(unsigned __int16 *)(a1 + 168));
  if (v2)
    sub_10057D1BC((uint64_t)v2);
  *(_QWORD *)(a1 + 176) = 0;
  sub_100034234((uint64_t)v4);
  if (*(_QWORD *)(a1 + 184))
    operator delete[]();
  return sub_1002BC138(a1);
}

void sub_1002FDCFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 184))
    operator delete[]();
  sub_1002BC138(v1);
  _Unwind_Resume(a1);
}

void sub_1002FDD40(uint64_t a1)
{
  sub_1002FDC70(a1);
  operator delete();
}

unint64_t sub_1002FDD64(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  unint64_t result;
  _DWORD v6[2];

  v2 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 216);
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "calculateSleepIntervalInUs codec type:%d", (uint8_t *)v6, 8u);
  }
  v4 = *(_DWORD *)(a1 + 216);
  result = 7500;
  if (v4 > 129)
  {
    if (v4 == 130)
      return 10000;
    if (v4 != 255)
    {
      if (v4 == 256)
        return result;
      return (unint64_t)(float)((float)((float)((float)*(unint64_t *)(a1 + 224) / 16000.0) * 1000.0)
                                     * 1000.0);
    }
    return 15000;
  }
  if ((v4 - 128) < 2)
    return 15000;
  if (v4 != 2)
  {
    if (v4 == 127)
      return result;
    return (unint64_t)(float)((float)((float)((float)*(unint64_t *)(a1 + 224) / 16000.0) * 1000.0) * 1000.0);
  }
  return (unint64_t)((float)*(unint64_t *)(a1 + 224) / 32000.0 * 1000.0 * 1000.0);
}

uint64_t sub_1002FDEB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  NSObject *v6;

  v2 = (uint64_t *)(a1 + 160);
  v1 = *(_QWORD *)(a1 + 160);
  if (!v1)
  {
    result = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    sub_1006DE9D8();
    return 0;
  }
  v3 = *(_DWORD *)(a1 + 216);
  if (v3 == 129)
    return 1;
  if (v3 != 128)
    return 0;
  v4 = sub_10026B8EC(v1 + 400);
  if (v4)
    return sub_100442118(v4, 41);
  v6 = qword_100999808;
  result = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    sub_1006DEA08(v2, v6);
    return 0;
  }
  return result;
}

uint64_t sub_1002FDF6C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  NSObject *v7;
  unsigned __int16 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  uint8_t buf[4];
  const char *v15;

  v13[0] = 0;
  v13[1] = 0;
  v2 = (uint64_t *)(a1 + 152);
  sub_10003415C((uint64_t)v13, *(_QWORD *)(a1 + 152) + 760);
  v3 = sub_1004CCD90(*v2, *(unsigned __int16 *)(a1 + 168));
  if (v3 && v3[74] == a1)
  {
    v5 = *(unsigned __int16 *)(a1 + 242);
    if (!*(_WORD *)(a1 + 242))
      goto LABEL_11;
    v6 = *(_QWORD *)(a1 + 224);
    v7 = qword_100999808;
    if (v6 > v5 && os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v15 = "fAudioBytesOutstanding >= fAudioBufferSize";
      _os_log_fault_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
      v6 = *(_QWORD *)(a1 + 224);
      LOWORD(v5) = *(_WORD *)(a1 + 242);
      v7 = qword_100999808;
    }
    v8 = v5 - v6;
    *(_WORD *)(a1 + 242) = v8;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v15) = v8;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Draining controller voice to %d bytes", buf, 8u);
      v8 = *(_WORD *)(a1 + 242);
    }
    if (!v8)
LABEL_11:
      sub_1002FE1A4(a1, 1u);
    if (*(_DWORD *)(a1 + 296) != 2)
      goto LABEL_22;
    if (*(_BYTE *)(a1 + 300))
    {
      v9 = 576 - *(unsigned __int16 *)(a1 + 242);
      v10 = *(_QWORD *)(a1 + 224);
      *(_BYTE *)(a1 + 300) = 0;
      v11 = v9 / v10;
    }
    else
    {
      v11 = 1;
    }
    if (sub_1002FDEB8(a1))
    {
      if (!sub_1002D455C(*(_QWORD *)(a1 + 160)))
        goto LABEL_22;
      if (sub_1002D455C(*(_QWORD *)(a1 + 160)) >= 4 && !*(_WORD *)(a1 + 242))
      {
        v11 = 2;
        do
        {
LABEL_21:
          sub_1002FE438(a1);
          --v11;
        }
        while (v11);
        goto LABEL_22;
      }
    }
    if (v11)
      goto LABEL_21;
LABEL_22:
    v4 = 1;
    goto LABEL_23;
  }
  v4 = 0;
LABEL_23:
  sub_100034234((uint64_t)v13);
  return v4;
}

void sub_1002FE180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FE1A4(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  _QWORD v33[2];
  uint8_t buf[4];
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  unint64_t v43;
  __int16 v44;
  int v45;

  v33[0] = 0;
  v33[1] = 0;
  sub_10003415C((uint64_t)v33, *(_QWORD *)(a1 + 152) + 760);
  v4 = *(unsigned int *)(a1 + 296);
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      if (!(_DWORD)v4)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
          goto LABEL_26;
        goto LABEL_22;
      }
      if ((_DWORD)v4 == 2)
      {
        if (sub_1002FDEB8(a1))
        {
          if (sub_1002D455C(*(_QWORD *)(a1 + 160)) > 1)
            goto LABEL_26;
        }
        else
        {
          v23 = *(_QWORD *)(a1 + 192);
          if (sub_1002D4554(*(_QWORD *)(a1 + 160)) + v23 >= *(_QWORD *)(a1 + 224) * *(int *)(a1 + 304))
            goto LABEL_26;
        }
        v22 = 1;
        goto LABEL_25;
      }
    }
    else if (a2)
    {
      v13 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
        sub_1006DE8F8(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else if ((_DWORD)v4 == 1)
    {
      if (*(_WORD *)(a1 + 242))
      {
        v5 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
          sub_1006DEA7C(v5, v6, v7, v8, v9, v10, v11, v12);
      }
      if (sub_1002FDEB8(a1))
      {
        if (sub_1002D455C(*(_QWORD *)(a1 + 160)) < 2)
          goto LABEL_26;
        goto LABEL_21;
      }
      v21 = *(_QWORD *)(a1 + 192);
      if (sub_1002D4554(*(_QWORD *)(a1 + 160)) + v21 >= *(_QWORD *)(a1 + 224) * *(int *)(a1 + 304))
      {
LABEL_21:
        *(_BYTE *)(a1 + 300) = 1;
LABEL_22:
        v22 = 2;
LABEL_25:
        *(_DWORD *)(a1 + 296) = v22;
      }
    }
  }
LABEL_26:
  v24 = *(unsigned int *)(a1 + 296);
  if ((_DWORD)v4 != (_DWORD)v24)
  {
    v25 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_INFO))
    {
      v26 = *(_QWORD *)(a1 + 8 * a2 + 272);
      v27 = *(_QWORD *)(a1 + 248 + 8 * v4);
      v28 = *(_QWORD *)(a1 + 248 + 8 * v24);
      v29 = *(_QWORD *)(a1 + 8 * *(unsigned int *)(a1 + 336) + 312);
      v30 = sub_1002D455C(*(_QWORD *)(a1 + 160));
      v31 = *(unsigned __int16 *)(a1 + 242);
      *(_DWORD *)buf = 136447490;
      v35 = v26;
      v36 = 2082;
      v37 = v27;
      v38 = 2082;
      v39 = v28;
      v40 = 2082;
      v41 = v29;
      v42 = 2048;
      v43 = v30;
      v44 = 1024;
      v45 = v31;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Input: %{public}s. State: %{public}s -> %{public}s. SendState %{public}s, %zu, %hu", buf, 0x3Au);
    }
  }
  return sub_100034234((uint64_t)v33);
}

void sub_1002FE418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FE438(uint64_t a1)
{
  int v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, *(_QWORD *)(a1 + 152) + 760);
  v2 = *(_DWORD *)(a1 + 336);
  switch(v2)
  {
    case 2:
      goto LABEL_7;
    case 1:
LABEL_6:
      sub_1002FE510(a1);
      *(_DWORD *)(a1 + 336) = 2;
LABEL_7:
      *(_QWORD *)(a1 + 192) = 0;
      *(_QWORD *)(a1 + 200) = 0;
      *(_DWORD *)(a1 + 336) = 0;
      return sub_100034234((uint64_t)v12);
    case 0:
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
      {
        sub_1002FE1A4(a1, 2u);
        return sub_100034234((uint64_t)v12);
      }
      *(_DWORD *)(a1 + 336) = 1;
      goto LABEL_6;
  }
  v3 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
    sub_1006DE8F8(v3, v4, v5, v6, v7, v8, v9, v10);
  return sub_100034234((uint64_t)v12);
}

void sub_1002FE4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FE510(uint64_t a1)
{
  char *v2;
  unint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  unsigned int v15;
  NSObject *v16;
  uint64_t v17;
  uint8_t v19;
  _BYTE v20[15];
  uint8_t v21[4];
  uint64_t v22;
  uint8_t buf[4];
  unint64_t v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;

  v2 = *(char **)(a1 + 184);
  v3 = *(_QWORD *)(a1 + 192);
  if (!v2)
  {
    v4 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
      sub_1006DEB64(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  for (; v3; v3 -= v12)
  {
    if (v3 >= *(_QWORD *)(a1 + 224))
      v12 = *(_QWORD *)(a1 + 224);
    else
      v12 = v3;
    v13 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(unsigned __int16 *)(a1 + 242);
      *(_DWORD *)buf = 134218752;
      v24 = v12;
      v25 = 2048;
      v26 = v3;
      v27 = 1024;
      v28 = v17;
      v29 = 2048;
      v30 = v12 + v17;
      _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, ">> Sending, %zu bytes of total %zu. Oustanding %d -> %lu", buf, 0x26u);
    }
    if (*(_QWORD *)(a1 + 176))
    {
      buf[0] = 0;
      sub_100043758(buf);
      sub_10018D544(*(__int16 **)(a1 + 176), v2, (unsigned __int16)v12, 1);
      sub_10004339C(buf);
      sub_100043728(buf);
    }
    else
    {
      v14 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006DEB30(&v19, v20, v14);
    }
    v15 = (unsigned __int16)(*(_WORD *)(a1 + 242) + v12);
    *(_WORD *)(a1 + 242) += v12;
    if (v15 >= 0x2D1)
    {
      v16 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
        sub_1006DEAEC(v21, &v22, v16);
    }
    v2 += v12;
  }
  return 1;
}

void sub_1002FE704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

size_t sub_1002FE720(uint64_t a1)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  NSObject *v5;
  size_t result;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  NSObject *v10;
  unint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  __int16 v15;
  unint64_t v16;
  __int16 v17;
  int v18;

  v2 = *(char **)(a1 + 184);
  v3 = sub_1002D4554(*(_QWORD *)(a1 + 160));
  v4 = *(_QWORD *)(a1 + 224);
  if (v3 >= v4)
  {
    result = sub_1002D4564(*(_QWORD *)(a1 + 160), v2, v4 * *(int *)(a1 + 220));
    if (result)
    {
      v9 = result;
      *(_QWORD *)(a1 + 192) = result;
      v10 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEBUG))
      {
        v11 = sub_1002D4554(*(_QWORD *)(a1 + 160));
        v12 = *(unsigned __int16 *)(a1 + 242);
        v13 = 134218496;
        v14 = v9;
        v15 = 2048;
        v16 = v11;
        v17 = 1024;
        v18 = v12;
        _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Filling, read %zu bytes, shared %zu, oustanding %d", (uint8_t *)&v13, 0x1Cu);
      }
      return 1;
    }
  }
  else
  {
    v5 = qword_100999808;
    result = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_INFO);
    if ((_DWORD)result)
    {
      v7 = sub_1002D4554(*(_QWORD *)(a1 + 160));
      v8 = *(_QWORD *)(a1 + 192);
      v13 = 134218240;
      v14 = v7;
      v15 = 2048;
      v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Filling done, not enough data.  shared %zu, fill %zu", (uint8_t *)&v13, 0x16u);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002FE89C(uint64_t a1)
{
  return sub_1002FE1A4(a1, 0);
}

uint64_t sub_1002FE8A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 176) = a2;
  return result;
}

uint64_t sub_1002FE8AC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 176);
}

BOOL sub_1002FE8B4(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  _BOOL8 result;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  NSObject *v25;
  unint64_t v26;
  unint64_t v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  NSObject *v45;
  char v46;
  _BYTE *v47;
  unint64_t v48;
  NSObject *v49;
  unint64_t v50;
  NSObject *v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  _BYTE *v57;
  unint64_t v58;
  unint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  _BYTE v65[24];
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;

  v2 = *(_BYTE **)(a1 + 208);
  v3 = sub_10002527C(*(_QWORD *)(a1 + 184) + 400);
  if (_os_feature_enabled_impl("AudioAccessoryFeatures", "SeamlessAudioTransition") && v3 == 130)
  {
    if (*(_BYTE *)(a1 + 333))
    {
      if (sub_1002FEE0C(a1))
      {
LABEL_5:
        *(_QWORD *)(a1 + 232) = 0;
        *(_QWORD *)(a1 + 216) = *(_QWORD *)(a1 + 248);
LABEL_6:
        sub_10057CD38(*(_QWORD *)(a1 + 184));
        return 1;
      }
      return 0;
    }
    goto LABEL_9;
  }
  if ((v3 - 128) < 3 || v3 == 255)
  {
LABEL_9:
    if (*(_QWORD *)(a1 + 216))
    {
      v5 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
        sub_1006DED10(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    v13 = *(_QWORD *)(a1 + 248);
    if (v13 <= 1)
    {
      v14 = qword_100999808;
      result = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      goto LABEL_14;
    }
    v21 = sub_1002D455C(*(_QWORD *)(a1 + 184));
    if (v21 < sub_1002FEF84(a1))
      return 0;
    v22 = sub_1002D45D0(*(_QWORD *)(a1 + 184), v2 + 2, *(_QWORD *)(a1 + 248) - 2);
    if (v22)
    {
      v23 = v22;
      v24 = *(_BYTE *)(a1 + 264);
      *(_BYTE *)(a1 + 264) = v24 + 1;
      *v2 = v24;
      v2[1] = v22;
      v25 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEBUG))
      {
        v61 = *(_QWORD *)(a1 + 248);
        v26 = v23 + 4;
        v64 = 134218240;
        *(_QWORD *)v65 = v61;
        *(_WORD *)&v65[8] = 2048;
        *(_QWORD *)&v65[10] = v23 + 4;
        _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Buffer Length: %zu, offset: %lu", (uint8_t *)&v64, 0x16u);
      }
      else
      {
        v26 = v23 + 4;
      }
      v27 = *(_QWORD *)(a1 + 248);
      if (v27 < v26)
      {
        v28 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
        {
          v64 = 67109120;
          *(_DWORD *)v65 = v27;
          _os_log_fault_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "Byte offset exceeds data buffer length, buffer length: %d", (uint8_t *)&v64, 8u);
          v27 = *(_QWORD *)(a1 + 248);
        }
      }
      if (v27 >= v26)
      {
        v50 = sub_1002D45D0(*(_QWORD *)(a1 + 184), &v2[v23 + 4], v27 - v26);
        v51 = qword_100999808;
        if (v50)
        {
          v52 = v50;
          if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_INFO))
          {
            v53 = *(unsigned __int8 *)(a1 + 264);
            v54 = *(_QWORD *)(a1 + 248);
            v55 = *(unsigned __int16 *)(a1 + 266);
            v64 = 67110400;
            *(_DWORD *)v65 = v53;
            *(_WORD *)&v65[4] = 2048;
            *(_QWORD *)&v65[6] = v23;
            *(_WORD *)&v65[14] = 2048;
            *(_QWORD *)&v65[16] = v52;
            v66 = 2048;
            v67 = v54;
            v68 = 1024;
            v69 = v55;
            v70 = 1024;
            v71 = v55 + 1;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "HF Seq:%hhu, Sending %zu+%zu of %zu filled. Outstanding %d -> %d", (uint8_t *)&v64, 0x32u);
          }
          v56 = *(_BYTE *)(a1 + 264);
          *(_BYTE *)(a1 + 264) = v56 + 1;
          v57 = &v2[v23];
          v57[2] = v56;
          v57[3] = v52;
          v58 = (unint64_t)&v2[-*(_QWORD *)(a1 + 208)];
          v59 = *(_QWORD *)(a1 + 248);
          if (v58 > v59)
          {
            v60 = qword_100999808;
            if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
              sub_1006DEC90(v58, v59, v60);
          }
          goto LABEL_5;
        }
        result = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEBUG);
        if (result)
        {
          sub_1006DEC64();
          return 0;
        }
      }
      else
      {
        v29 = qword_100999808;
        result = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR);
        if (result)
        {
          sub_1006DEBD4(v27, v29, v30, v31, v32, v33, v34, v35);
          return 0;
        }
      }
    }
    else
    {
      result = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        sub_1006DEC38();
        return 0;
      }
    }
    return result;
  }
  if (*(_QWORD *)(a1 + 216))
  {
    v36 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
      sub_1006DED10(v36, v37, v38, v39, v40, v41, v42, v43);
  }
  v13 = *(_QWORD *)(a1 + 248);
  if (v13 > 1)
  {
    v44 = sub_1002D45D0(*(_QWORD *)(a1 + 184), v2 + 2, v13 - 2);
    v45 = qword_100999808;
    result = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEBUG);
    if (v44)
    {
      if (result)
      {
        v62 = *(_QWORD *)(a1 + 248);
        v63 = *(unsigned __int16 *)(a1 + 266);
        v64 = 134218752;
        *(_QWORD *)v65 = v44;
        *(_WORD *)&v65[8] = 2048;
        *(_QWORD *)&v65[10] = v62;
        *(_WORD *)&v65[18] = 1024;
        *(_DWORD *)&v65[20] = v63;
        v66 = 1024;
        LODWORD(v67) = v63 + 1;
        _os_log_debug_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "HF Sending %zu of %zu filled. Oustanding %d -> %d ", (uint8_t *)&v64, 0x22u);
      }
      v46 = *(_BYTE *)(a1 + 264);
      *(_BYTE *)(a1 + 264) = v46 + 1;
      *v2 = v46;
      v2[1] = v44;
      v47 = &v2[-*(_QWORD *)(a1 + 208)];
      v48 = *(_QWORD *)(a1 + 248);
      if ((unint64_t)v47 > v48)
      {
        v49 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
        {
          v64 = 134218240;
          *(_QWORD *)v65 = v47;
          *(_WORD *)&v65[8] = 2048;
          *(_QWORD *)&v65[10] = v48;
          _os_log_fault_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_FAULT, "wrote %ld bytes to audio buffer when max size is %zu", (uint8_t *)&v64, 0x16u);
          v48 = *(_QWORD *)(a1 + 248);
        }
      }
      *(_QWORD *)(a1 + 232) = 0;
      *(_QWORD *)(a1 + 216) = v48;
      goto LABEL_6;
    }
    if (result)
    {
      sub_1006DED80();
      return 0;
    }
  }
  else
  {
    v14 = qword_100999808;
    result = os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR);
    if (result)
    {
LABEL_14:
      sub_1006DEBD4(v13, v14, v15, v16, v17, v18, v19, v20);
      return 0;
    }
  }
  return result;
}

BOOL sub_1002FEE0C(uint64_t a1)
{
  char *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  v2 = *(char **)(a1 + 208);
  if (*(_QWORD *)(a1 + 216))
  {
    v3 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
      sub_1006DED10(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  v11 = sub_1002D45D0(*(_QWORD *)(a1 + 184), v2, *(_QWORD *)(a1 + 248));
  v12 = v11;
  if (v11)
  {
    bzero(&v2[v11], *(_QWORD *)(a1 + 248) - v11);
    v13 = mach_absolute_time();
    v14 = *(_QWORD *)(a1 + 184);
    if (*(_BYTE *)(a1 + 268))
    {
      v15 = *(_QWORD *)(v14 + 576);
      if (v15)
      {
        sub_1002FF1C0(a1, v2);
        v16 = *(_QWORD *)(a1 + 184);
        *(_WORD *)(v16 + 572) += sub_1002BC144(a1, v13 - v15) / (10 * *(int *)(a1 + 244));
        sub_1002FF1C0(a1, v2);
        v14 = *(_QWORD *)(a1 + 184);
      }
      *(_BYTE *)(a1 + 268) = 0;
    }
    v17 = *(unsigned __int16 *)(v14 + 572);
    v2[5] = (v17 >> 15) | 0xF8;
    v2[6] = v17 >> 7;
    v2[7] = v17 & 0x7F;
    v18 = *(_QWORD *)(a1 + 184);
    ++*(_WORD *)(v18 + 572);
    if (*(_BYTE *)(v18 + 396))
    {
      sub_1002FF1C0(a1, v2);
      v18 = *(_QWORD *)(a1 + 184);
    }
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a1 + 248);
    sub_10057CD38(v18);
    *(_QWORD *)(*(_QWORD *)(a1 + 184) + 576) = v13;
  }
  else if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEBUG))
  {
    sub_1006DEDAC();
  }
  return v12 != 0;
}

uint64_t sub_1002FEF84(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(unsigned int *)(a1 + 240);
  result = 2;
  if ((int)v1 <= 129)
  {
    if ((v1 - 128) < 2)
      return result;
    if ((_DWORD)v1 == 127)
      return 1;
    goto LABEL_8;
  }
  if ((_DWORD)v1 != 256)
  {
    if ((_DWORD)v1 == 255)
      return result;
    if ((_DWORD)v1 != 130)
    {
LABEL_8:
      v3 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006DEDD8(v1, v3, v4, v5, v6, v7, v8, v9);
    }
  }
  return 1;
}

uint64_t sub_1002FF00C(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  NSObject *v8;
  int v10;
  unsigned int v11;
  _QWORD v12[2];
  uint8_t buf[4];
  unsigned int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;

  v12[0] = 0;
  v12[1] = 0;
  v4 = (uint64_t *)(a1 + 176);
  sub_10003415C((uint64_t)v12, *(_QWORD *)(a1 + 176) + 760);
  v5 = sub_1004CCD90(*v4, *(unsigned __int16 *)(a1 + 192));
  if (v5 && v5[74] == a1)
  {
    v6 = sub_1002D455C(*(_QWORD *)(a1 + 184));
    if (v6 < sub_1002FEF84(a1))
    {
      v7 = *(_DWORD *)(a1 + 172) + a2;
      *(_DWORD *)(a1 + 172) = v7;
      if (v7 < 0x3D)
        return sub_100034234((uint64_t)v12);
      v8 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
      {
        v10 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 184) + 572);
        v11 = 10 * *(_DWORD *)(a1 + 244);
        *(_DWORD *)buf = 67109632;
        v14 = v7;
        v15 = 1024;
        v16 = v10;
        v17 = 1024;
        v18 = v7 / v11;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Overwait detected %d currentSequenceNumber %d incrementing sequenceNumber by %d", buf, 0x14u);
        v7 = *(_DWORD *)(a1 + 172);
      }
      *(_WORD *)(*(_QWORD *)(a1 + 184) + 572) += v7 / (10 * *(_DWORD *)(a1 + 244));
    }
    *(_DWORD *)(a1 + 172) = 0;
    return sub_100034234((uint64_t)v12);
  }
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
    sub_1006DEE3C();
  return sub_100034234((uint64_t)v12);
}

void sub_1002FF1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002FF1C0(uint64_t a1, _BYTE *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  v4 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a2[9] | ((a2[8] & 0xF) << 8);
    v6 = (a2[3] << 7) & 0x7F80 | ((a2[2] & 7) << 15) | a2[4] & 0x7F;
    v7 = a2[1] | ((*a2 & 7) << 8);
    v8 = (a2[6] << 7) & 0x7F80 | ((a2[5] & 1) << 15) | a2[7] & 0x7F;
    v9 = *(_QWORD *)(a1 + 184);
    v10 = *(unsigned __int16 *)(v9 + 572);
    v11 = *(unsigned __int8 *)(a1 + 268);
    v12 = *(_QWORD *)(v9 + 576);
    v13[0] = 67110912;
    v13[1] = v7;
    v14 = 1024;
    v15 = v6;
    v16 = 1024;
    v17 = v5;
    v18 = 1024;
    v19 = v8;
    v20 = 1024;
    v21 = v10;
    v22 = 1024;
    v23 = v11;
    v24 = 2048;
    v25 = v12;
    v26 = 2048;
    v27 = mach_absolute_time();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "bluetoothd: FrameNumber: %d; HostTime(ms): %d; FrameLength: %d sequenceNumberDecoded %d, newSequenceNumber %d fInt"
      "erIOSessionSeqCompensation %d anchortimestamp %llu currentTimestamp %llu",
      (uint8_t *)v13,
      0x3Au);
  }
}

void sub_1002FF318(_QWORD *a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v11;

  v11 = sub_1002BC784((uint64_t)a1, "HFPSendThreadHostCodec", a8);
  *(_QWORD *)v11 = off_100925428;
  *(_DWORD *)(v11 + 172) = 0;
  *(_QWORD *)(v11 + 176) = a2;
  *(_WORD *)(v11 + 192) = a3;
  *(_QWORD *)(v11 + 200) = 0;
  a1[28] = 0;
  a1[29] = 0;
  a1[27] = 0;
  operator new[]();
}

void sub_1002FF688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002FF704(uint64_t a1)
{
  uint64_t *v2;
  _QWORD v4[2];

  *(_QWORD *)a1 = off_100925428;
  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, *(_QWORD *)(a1 + 176) + 760);
  v2 = sub_1004CCD90(*(_QWORD *)(a1 + 176), *(unsigned __int16 *)(a1 + 192));
  if (v2)
    sub_10057D1BC((uint64_t)v2);
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  sub_100034234((uint64_t)v4);
  if (*(_QWORD *)(a1 + 208))
    operator delete[]();
  return sub_1002BC7D8(a1);
}

void sub_1002FF794(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + 208))
    operator delete[]();
  sub_1002BC7D8(v1);
  _Unwind_Resume(a1);
}

void sub_1002FF7D8(uint64_t a1)
{
  sub_1002FF704(a1);
  operator delete();
}

unint64_t sub_1002FF7FC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  unint64_t result;
  _DWORD v6[2];

  v2 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 240);
    v6[0] = 67109120;
    v6[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "calculateSleepIntervalInUs codec type:%d", (uint8_t *)v6, 8u);
  }
  v4 = *(_DWORD *)(a1 + 240);
  result = 7500;
  if (v4 > 129)
  {
    if (v4 == 130)
      return 10000;
    if (v4 != 255)
    {
      if (v4 == 256)
        return result;
      return (unint64_t)(float)((float)((float)((float)*(unint64_t *)(a1 + 248) / 16000.0) * 1000.0)
                                     * 1000.0);
    }
    return 15000;
  }
  if ((v4 - 128) < 2)
    return 15000;
  if (v4 != 2)
  {
    if (v4 == 127)
      return result;
    return (unint64_t)(float)((float)((float)((float)*(unint64_t *)(a1 + 248) / 16000.0) * 1000.0) * 1000.0);
  }
  return (unint64_t)((float)*(unint64_t *)(a1 + 248) / 32000.0 * 1000.0 * 1000.0);
}

uint64_t sub_1002FF950(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  NSObject *v9;
  NSObject *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  _QWORD v23[2];
  uint8_t buf[4];
  _QWORD v25[2];

  v23[0] = 0;
  v23[1] = 0;
  v2 = (uint64_t *)(a1 + 176);
  sub_10003415C((uint64_t)v23, *(_QWORD *)(a1 + 176) + 760);
  v3 = sub_1004CCD90(*v2, *(unsigned __int16 *)(a1 + 192));
  if (v3 && v3[74] == a1)
  {
    if (!*(_WORD *)(a1 + 266))
      goto LABEL_16;
    v5 = sub_1002BC7D0(a1);
    v6 = *(unsigned __int16 *)(a1 + 266);
    v7 = *(_QWORD *)(a1 + 248);
    if ((v5 & 1) != 0)
    {
      v8 = v7 <= v6 ? v6 - v7 : 0;
    }
    else
    {
      if (v7 > v6)
      {
        v9 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136446210;
          v25[0] = "fAudioBytesOutstanding >= fAudioBufferSize";
          _os_log_fault_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
          v7 = *(_QWORD *)(a1 + 248);
          LOWORD(v6) = *(_WORD *)(a1 + 266);
        }
      }
      v8 = v6 - v7;
    }
    *(_WORD *)(a1 + 266) = v8;
    v10 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEBUG))
    {
      v21 = sub_1002D455C(*(_QWORD *)(a1 + 184));
      *(_DWORD *)buf = 67109376;
      LODWORD(v25[0]) = v8;
      WORD2(v25[0]) = 2048;
      *(_QWORD *)((char *)v25 + 6) = v21;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Draining controller voice to %d bytes, frame available %zu", buf, 0x12u);
      v8 = *(_WORD *)(a1 + 266);
    }
    if (!v8)
LABEL_16:
      sub_1002FFC68(a1, 1u);
    v11 = sub_1002D455C(*(_QWORD *)(a1 + 184));
    if (v11 >= sub_1002FEF84(a1) && *(_DWORD *)(a1 + 320) == 1)
      sub_1002FFC68(a1, 0);
    if (*(_DWORD *)(a1 + 320) != 2)
      goto LABEL_35;
    if (*(_BYTE *)(a1 + 324))
    {
      v12 = 576 - *(unsigned __int16 *)(a1 + 266);
      v13 = *(_QWORD *)(a1 + 248);
      *(_BYTE *)(a1 + 324) = 0;
      v14 = v12 / v13;
    }
    else
    {
      v14 = 1;
    }
    v15 = *(_DWORD *)(a1 + 240);
    if ((v15 - 127) < 4 || v15 == 256)
    {
      if (!sub_1002D455C(*(_QWORD *)(a1 + 184)))
      {
LABEL_35:
        v4 = 1;
        goto LABEL_36;
      }
      v16 = sub_1002BC7D0(a1);
      v17 = *(_QWORD *)(a1 + 184);
      if (v16)
      {
        v18 = sub_1002D455C(v17);
        v14 = v18 / sub_1002FEF84(a1);
      }
      else
      {
        v19 = sub_1002D455C(v17);
        if (v19 <= sub_1002FEF84(a1) || *(_DWORD *)(a1 + 240) == 130)
        {
          v14 = 1;
          goto LABEL_34;
        }
        v22 = sub_1002D455C(*(_QWORD *)(a1 + 184));
        if (v22 >= 2 * (sub_1002FEF84(a1) & 0x7FuLL) && !*(_WORD *)(a1 + 266))
        {
          v14 = 2;
          goto LABEL_34;
        }
      }
    }
    if (!v14)
      goto LABEL_35;
    do
    {
LABEL_34:
      sub_1002FFF2C(a1);
      --v14;
    }
    while (v14);
    goto LABEL_35;
  }
  v4 = 0;
LABEL_36:
  sub_100034234((uint64_t)v23);
  return v4;
}

void sub_1002FFC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FFC68(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  uint8_t buf[4];
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  unint64_t v47;
  __int16 v48;
  int v49;

  v37[0] = 0;
  v37[1] = 0;
  sub_10003415C((uint64_t)v37, *(_QWORD *)(a1 + 176) + 760);
  v4 = *(unsigned int *)(a1 + 320);
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      if ((_DWORD)v4)
      {
        if ((_DWORD)v4 == 2)
        {
          v15 = *(_DWORD *)(a1 + 240);
          if ((v15 - 127) < 4 || v15 == 256)
          {
            v16 = sub_1002D455C(*(_QWORD *)(a1 + 184));
            if (v16 >= sub_1002FEF84(a1))
              goto LABEL_21;
          }
          else
          {
            v36 = *(_QWORD *)(a1 + 216);
            if (sub_1002D4554(*(_QWORD *)(a1 + 184)) + v36 >= *(_QWORD *)(a1 + 248) * *(int *)(a1 + 328))
              goto LABEL_21;
          }
          v17 = 1;
LABEL_20:
          *(_DWORD *)(a1 + 320) = v17;
        }
      }
      else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1))
      {
        goto LABEL_19;
      }
    }
    else if (a2)
    {
      v18 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
        sub_1006DE8F8(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    else if ((_DWORD)v4 == 1)
    {
      if (*(_WORD *)(a1 + 266))
      {
        v5 = qword_100999808;
        if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
          sub_1006DEA7C(v5, v6, v7, v8, v9, v10, v11, v12);
      }
      v13 = *(_DWORD *)(a1 + 240);
      if ((v13 - 127) >= 4 && v13 != 256)
      {
        v35 = *(_QWORD *)(a1 + 216);
        if (sub_1002D4554(*(_QWORD *)(a1 + 184)) + v35 < *(_QWORD *)(a1 + 248) * *(int *)(a1 + 328))
          goto LABEL_21;
        goto LABEL_10;
      }
      v14 = sub_1002D455C(*(_QWORD *)(a1 + 184));
      if (v14 >= sub_1002FEF84(a1))
      {
LABEL_10:
        *(_BYTE *)(a1 + 324) = 1;
LABEL_19:
        v17 = 2;
        goto LABEL_20;
      }
    }
  }
LABEL_21:
  v26 = *(unsigned int *)(a1 + 320);
  if ((_DWORD)v4 != (_DWORD)v26)
  {
    v27 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_INFO))
    {
      v28 = *(_QWORD *)(a1 + 8 * a2 + 296);
      v29 = *(_QWORD *)(a1 + 272 + 8 * v4);
      v30 = *(_QWORD *)(a1 + 272 + 8 * v26);
      v31 = *(_QWORD *)(a1 + 8 * *(unsigned int *)(a1 + 360) + 336);
      v32 = sub_1002D455C(*(_QWORD *)(a1 + 184));
      v33 = *(unsigned __int16 *)(a1 + 266);
      *(_DWORD *)buf = 136447490;
      v39 = v28;
      v40 = 2082;
      v41 = v29;
      v42 = 2082;
      v43 = v30;
      v44 = 2082;
      v45 = v31;
      v46 = 2048;
      v47 = v32;
      v48 = 1024;
      v49 = v33;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Input: %{public}s. State: %{public}s -> %{public}s. SendState %{public}s, %zu, %hu", buf, 0x3Au);
    }
  }
  return sub_100034234((uint64_t)v37);
}

void sub_1002FFF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FFF2C(uint64_t a1)
{
  int v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, *(_QWORD *)(a1 + 176) + 760);
  v2 = *(_DWORD *)(a1 + 360);
  switch(v2)
  {
    case 2:
      goto LABEL_7;
    case 1:
LABEL_6:
      sub_1002FFFFC(a1);
      *(_DWORD *)(a1 + 360) = 2;
LABEL_7:
      *(_QWORD *)(a1 + 216) = 0;
      *(_QWORD *)(a1 + 224) = 0;
      *(_DWORD *)(a1 + 360) = 0;
      return sub_100034234((uint64_t)v12);
    case 0:
      if (!sub_1002FE8B4(a1))
      {
        sub_1002FFC68(a1, 2u);
        return sub_100034234((uint64_t)v12);
      }
      *(_DWORD *)(a1 + 360) = 1;
      goto LABEL_6;
  }
  v3 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
    sub_1006DE8F8(v3, v4, v5, v6, v7, v8, v9, v10);
  return sub_100034234((uint64_t)v12);
}

void sub_1002FFFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FFFFC(uint64_t a1)
{
  char *v2;
  unint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  uint8_t v19;
  _BYTE v20[15];
  uint8_t v21[4];
  uint64_t v22;
  uint8_t buf[4];
  unint64_t v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;

  v2 = *(char **)(a1 + 208);
  v3 = *(_QWORD *)(a1 + 216);
  if (!v2)
  {
    v4 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
      sub_1006DEB64(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  for (; v3; v3 -= v12)
  {
    if (v3 >= *(_QWORD *)(a1 + 248))
      v12 = *(_QWORD *)(a1 + 248);
    else
      v12 = v3;
    v13 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(unsigned __int16 *)(a1 + 266);
      *(_DWORD *)buf = 134218752;
      v24 = v12;
      v25 = 2048;
      v26 = v3;
      v27 = 1024;
      v28 = v17;
      v29 = 2048;
      v30 = v12 + v17;
      _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, ">> Sending, %zu bytes of total %zu. Oustanding %d -> %lu", buf, 0x26u);
    }
    if (*(_QWORD *)(a1 + 200))
    {
      buf[0] = 0;
      sub_100043758(buf);
      if (*(_BYTE *)(a1 + 332))
      {
        v14 = sub_10026B8EC(*(_QWORD *)(a1 + 184) + 400);
        sub_10025A754(v14 + 128, v2, (unsigned __int16)v12);
      }
      else
      {
        sub_10018D544(*(__int16 **)(a1 + 200), v2, (unsigned __int16)v12, 1);
      }
      sub_10004339C(buf);
      sub_100043728(buf);
    }
    else
    {
      v15 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006DEB30(&v19, v20, v15);
    }
    *(_WORD *)(a1 + 266) += v12;
    if ((sub_1002BC7D0(a1) & 1) == 0 && *(unsigned __int16 *)(a1 + 266) >= 0x2D1u)
    {
      v16 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_FAULT))
        sub_1006DEAEC(v21, &v22, v16);
    }
    v2 += v12;
  }
  return 1;
}

void sub_100300224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

intptr_t sub_100300248(uint64_t a1)
{
  intptr_t result;

  sub_1002FFC68(a1, 0);
  result = sub_1002BC7D0(a1);
  if ((_DWORD)result)
    return sub_1002BCA34(a1);
  return result;
}

uint64_t sub_100300288(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 200) = a2;
  return result;
}

uint64_t sub_100300290(uint64_t a1)
{
  return *(_QWORD *)(a1 + 200);
}

uint64_t sub_100300298(uint64_t a1, int a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  _BOOL4 v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  int v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  int v30;
  char v31;
  NSObject *v32;
  uint64_t v33;
  int v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  int v38;
  unsigned __int8 v39;
  NSObject *v40;
  int v42;
  int v43;
  int v44;
  char v45;
  void *__p[2];
  char v47;
  char v48;
  _BYTE buf[14];
  char v50;

  v4 = sub_100300C7C(a1, a2);
  *(_QWORD *)v4 = off_1009254E8;
  *(_BYTE *)(v4 + 1176) = 0;
  *(_DWORD *)(v4 + 1180) = 4135;
  *(int32x2_t *)(v4 + 1184) = vdup_n_s32(0x80000007);
  *(_WORD *)(v4 + 1192) = 0;
  *(_QWORD *)(v4 + 1216) = 0;
  *(_DWORD *)(v4 + 1430) = 0;
  *(_DWORD *)(v4 + 1440) = 0;
  *(_WORD *)(v4 + 1444) = 0;
  *(_DWORD *)(v4 + 1203) = 0;
  *(_WORD *)(v4 + 1207) = 0;
  if ((a2 - 2000) < 0x7D0
    || ((a2 - 1) < 0x7CF ? (v5 = a2 == 9) : (v5 = 1), !v5 || a2 == 6000))
  {
    *(_BYTE *)(a1 + 160) = 1;
  }
  v48 = 0;
  v6 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "SupportsMultipleAdvertising");
  v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v48);
  if (v47 < 0)
    operator delete(__p[0]);
  if (v50 < 0)
  {
    operator delete(*(void **)buf);
    if (!v7)
      goto LABEL_21;
  }
  else if (!v7)
  {
    goto LABEL_21;
  }
  v8 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (v48)
      v9 = "enabled";
    else
      v9 = "disabled";
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: Overriding Multiple Advertising support - %{public}s", buf, 0xCu);
  }
  *(_BYTE *)(a1 + 160) = v48;
LABEL_21:
  v10 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 360))(v10) & 1) == 0)
  {
    v11 = sub_10003BE44();
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 336))(v11);
    v13 = (a2 - 2000) < 0xFFFFF837 ? 1 : v12;
    if ((v13 & 1) == 0)
    {
      LOBYTE(v44) = 0;
      v14 = sub_100027F68();
      sub_100091AE8(buf, "CATT");
      sub_100091AE8(__p, "AllowAppleDevices");
      (*(void (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v14 + 72))(v14, buf, __p, &v44);
      if (v47 < 0)
        operator delete(__p[0]);
      if (v50 < 0)
        operator delete(*(void **)buf);
      v15 = v44;
      v16 = qword_1009997E8;
      v17 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
      if (v15)
      {
        if (v17)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Warning: Allowing CATT between Apple Devices, transport switch will be turned off", buf, 2u);
        }
      }
      else
      {
        if (v17)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Enable transport switch on non-iPad devices", buf, 2u);
        }
        *(_DWORD *)(a1 + 1180) |= 0x100000u;
      }
    }
  }
  if (a2 == 19)
  {
    *(_DWORD *)(a1 + 1180) |= 0x200000u;
  }
  else if ((a2 - 19) >= 0x7BD && (*(_DWORD *)(a1 + 712) - 2001) > 0x7CE)
  {
    goto LABEL_61;
  }
  LOBYTE(v44) = 0;
  *(_DWORD *)(a1 + 1180) |= 0x40000u;
  v18 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "DisableSensorTrack");
  (*(void (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v18 + 72))(v18, buf, __p, &v44);
  if (v47 < 0)
    operator delete(__p[0]);
  if (v50 < 0)
    operator delete(*(void **)buf);
  if ((_BYTE)v44)
  {
    v19 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Force Disable SensorTrack", buf, 2u);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 1180) |= 8u;
  }
  if ((a2 - 20) < 0x7BC || (*(_DWORD *)(a1 + 712) - 2001) <= 0x7CE)
  {
    *(_DWORD *)(a1 + 1180) |= 0x1000000u;
    LOBYTE(v44) = 0;
    v20 = sub_100027F68();
    sub_100091AE8(buf, "LE");
    sub_100091AE8(__p, "DisableControllerBTClock");
    v21 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v20 + 72))(v20, buf, __p, &v44);
    if (v47 < 0)
      operator delete(__p[0]);
    if (v50 < 0)
      operator delete(*(void **)buf);
    if ((_BYTE)v44)
      v22 = v21;
    else
      v22 = 0;
    if (v22 == 1)
    {
      *(_BYTE *)(a1 + 1208) = 1;
      v23 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Force Disable  DisableControllerBTClock", buf, 2u);
      }
      *(_DWORD *)(a1 + 1180) &= ~0x1000000u;
    }
  }
LABEL_61:
  v45 = 0;
  v24 = sub_100027F68();
  sub_100091AE8(buf, "Magnet");
  sub_100091AE8(__p, "DisableClassic");
  (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v24 + 72))(v24, buf, __p, &v45);
  if (v47 < 0)
    operator delete(__p[0]);
  if (v50 < 0)
    operator delete(*(void **)buf);
  if (v45)
    *(_BYTE *)(a1 + 1193) = 1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 3296))(a1);
  *(_WORD *)(a1 + 1200) = 0;
  v25 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "forceHostSlowDownLEScanOnACLProtectMode");
  v26 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v25 + 72))(v25, buf, __p, a1 + 1201);
  if (v47 < 0)
    operator delete(__p[0]);
  if (v50 < 0)
  {
    operator delete(*(void **)buf);
    if (!v26)
      goto LABEL_79;
  }
  else if (!v26)
  {
    goto LABEL_79;
  }
  v27 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 1201))
      v28 = "Yes";
    else
      v28 = "No";
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Overriding HostSlowDownLEScanOnACLProtectMode - %{public}s", buf, 0xCu);
  }
  *(_BYTE *)(a1 + 1200) = 1;
LABEL_79:
  *(_BYTE *)(a1 + 1202) = 87;
  v44 = 0;
  v29 = sub_100027F68();
  sub_100091AE8(buf, "Zone");
  sub_100091AE8(__p, "CuffoffRSSIValue");
  v30 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v29 + 88))(v29, buf, __p, &v44);
  if (v47 < 0)
    operator delete(__p[0]);
  if (v50 < 0)
  {
    operator delete(*(void **)buf);
    if (!v30)
      goto LABEL_87;
  }
  else if (!v30)
  {
    goto LABEL_87;
  }
  v31 = v44;
  *(_BYTE *)(a1 + 1202) = v44;
  v32 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v31;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Zone Cutoff RSSI value = -%d dBm", buf, 8u);
  }
LABEL_87:
  *(_BYTE *)(a1 + 1446) = 0;
  *(_DWORD *)(a1 + 1448) = 0;
  v43 = 0;
  v33 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ForceRssiThresholdOrderType19");
  v34 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v33 + 88))(v33, buf, __p, &v43);
  if (v47 < 0)
    operator delete(__p[0]);
  if (v50 < 0)
  {
    operator delete(*(void **)buf);
    if (!v34)
      goto LABEL_95;
  }
  else if (!v34)
  {
    goto LABEL_95;
  }
  *(_BYTE *)(a1 + 1446) = 1;
  v35 = v43;
  *(_DWORD *)(a1 + 1448) = v43;
  v36 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 1;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v35;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Force %d RSSI Threshold Order RSSI value = %d ", buf, 0xEu);
  }
LABEL_95:
  *(_WORD *)(a1 + 1452) = 2048;
  v42 = 0;
  v37 = sub_100027F68();
  sub_100091AE8(buf, "AoS");
  sub_100091AE8(__p, "MaxRetryInFrames");
  v38 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v37 + 128))(v37, buf, __p, &v42);
  if (v47 < 0)
    operator delete(__p[0]);
  if (v50 < 0)
  {
    operator delete(*(void **)buf);
    if (!v38)
      goto LABEL_103;
  }
  else if (!v38)
  {
    goto LABEL_103;
  }
  *(_BYTE *)(a1 + 1452) = 1;
  v39 = v42;
  *(_BYTE *)(a1 + 1453) = v42;
  v40 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = 1;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v39;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Override Advanced sniff mode Parameters %d, MaxRetryInFrames= %d ", buf, 0xEu);
  }
LABEL_103:
  *(_BYTE *)(a1 + 1435) = 0;
  *(_WORD *)(a1 + 1438) = 0;
  return a1;
}

void sub_100300BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  sub_100300D04(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_100300C7C(uint64_t a1, int a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_100927718;
  v4 = a1 + 72;
  sub_1000160D0(a1 + 8);
  sub_1000160D0(v4);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_BYTE *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 164) = 0;
  *(_DWORD *)(a1 + 712) = a2;
  *(_DWORD *)(a1 + 716) = 0;
  return a1;
}

void sub_100300CF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100069BDC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100300D04(uint64_t a1)
{
  *(_QWORD *)a1 = &off_100927718;
  sub_10001A82C(a1 + 136, *(_QWORD **)(a1 + 144));
  sub_100069BDC(a1 + 72);
  sub_100069BDC(a1 + 8);
  return a1;
}

uint64_t sub_100300D50(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100300DC4;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100991AE8 != -1)
    dispatch_once(&qword_100991AE8, block);
  return byte_100991AE0;
}

void sub_100300DC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *p_p;
  char *v5;
  void *v6;
  char *v7;
  void *__p;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 32);
  __p = 0;
  v9 = 0;
  v10 = 0;
  if (*(_DWORD *)(v1 + 712) == 22)
  {
    v2 = sub_10034D3CC();
    if (!(*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v2 + 64))(v2, &__p))
    {
      if (SHIBYTE(v10) < 0)
      {
        v3 = v9;
        if (!v9)
          goto LABEL_3;
        p_p = (char *)__p;
      }
      else
      {
        v3 = HIBYTE(v10);
        if (!HIBYTE(v10))
          goto LABEL_3;
        p_p = (char *)&__p;
      }
      if (v3 >= 2)
      {
        v5 = &p_p[v3];
        v6 = p_p;
        do
        {
          v7 = (char *)memchr(v6, 67, v3 - 1);
          if (!v7)
            break;
          if (*(_WORD *)v7 == 12355)
          {
            if (v7 != v5 && v7 - p_p != -1)
              byte_100991AE0 = 1;
            break;
          }
          v6 = v7 + 1;
          v3 = v5 - (_BYTE *)v6;
        }
        while (v5 - (_BYTE *)v6 >= 2);
      }
    }
  }
LABEL_3:
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
    sub_1006DEE6C();
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
}

void sub_100300EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100300EFC(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100300F70;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100991AF8 != -1)
    dispatch_once(&qword_100991AF8, block);
  return byte_100991AF0;
}

void sub_100300F70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *p_p;
  char *v5;
  void *v6;
  char *v7;
  void *__p;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 32);
  __p = 0;
  v9 = 0;
  v10 = 0;
  if (*(_DWORD *)(v1 + 712) == 22)
  {
    v2 = sub_10034D3CC();
    if (!(*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v2 + 64))(v2, &__p))
    {
      if (SHIBYTE(v10) < 0)
      {
        v3 = v9;
        if (!v9)
          goto LABEL_3;
        p_p = (char *)__p;
      }
      else
      {
        v3 = HIBYTE(v10);
        if (!HIBYTE(v10))
          goto LABEL_3;
        p_p = (char *)&__p;
      }
      if (v3 >= 2)
      {
        v5 = &p_p[v3];
        v6 = p_p;
        do
        {
          v7 = (char *)memchr(v6, 67, v3 - 1);
          if (!v7)
            break;
          if (*(_WORD *)v7 == 12867)
          {
            if (v7 != v5 && v7 - p_p != -1)
              byte_100991AF0 = 1;
            break;
          }
          v6 = v7 + 1;
          v3 = v5 - (_BYTE *)v6;
        }
        while (v5 - (_BYTE *)v6 >= 2);
      }
    }
  }
LABEL_3:
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
    sub_1006DEED8();
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
}

void sub_10030108C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003010A8(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10030111C;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100991B08 != -1)
    dispatch_once(&qword_100991B08, block);
  return byte_100991B00;
}

void sub_10030111C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *p_p;
  char *v5;
  void *v6;
  char *v7;
  void *__p;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 32);
  __p = 0;
  v9 = 0;
  v10 = 0;
  if (*(_DWORD *)(v1 + 712) == 24)
  {
    v2 = sub_10034D3CC();
    if (!(*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v2 + 64))(v2, &__p))
    {
      if (SHIBYTE(v10) < 0)
      {
        v3 = v9;
        if (!v9)
          goto LABEL_3;
        p_p = (char *)__p;
      }
      else
      {
        v3 = HIBYTE(v10);
        if (!HIBYTE(v10))
          goto LABEL_3;
        p_p = (char *)&__p;
      }
      if (v3 >= 2)
      {
        v5 = &p_p[v3];
        v6 = p_p;
        do
        {
          v7 = (char *)memchr(v6, 66, v3 - 1);
          if (!v7)
            break;
          if (*(_WORD *)v7 == 12354)
          {
            if (v7 != v5 && v7 - p_p != -1)
              byte_100991B00 = 1;
            break;
          }
          v6 = v7 + 1;
          v3 = v5 - (_BYTE *)v6;
        }
        while (v5 - (_BYTE *)v6 >= 2);
      }
    }
  }
LABEL_3:
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
    sub_1006DEF44();
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
}

void sub_100301238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100301254(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003012C8;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100991B18 != -1)
    dispatch_once(&qword_100991B18, block);
  return byte_100991B10;
}

void sub_1003012C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *p_p;
  char *v5;
  void *v6;
  char *v7;
  void *__p;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 32);
  __p = 0;
  v9 = 0;
  v10 = 0;
  if (*(_DWORD *)(v1 + 712) == 24)
  {
    v2 = sub_10034D3CC();
    if (!(*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v2 + 64))(v2, &__p))
    {
      if (SHIBYTE(v10) < 0)
      {
        v3 = v9;
        if (!v9)
          goto LABEL_3;
        p_p = (char *)__p;
      }
      else
      {
        v3 = HIBYTE(v10);
        if (!HIBYTE(v10))
          goto LABEL_3;
        p_p = (char *)&__p;
      }
      if (v3 >= 2)
      {
        v5 = &p_p[v3];
        v6 = p_p;
        do
        {
          v7 = (char *)memchr(v6, 67, v3 - 1);
          if (!v7)
            break;
          if (*(_WORD *)v7 == 12355)
          {
            if (v7 != v5 && v7 - p_p != -1)
              byte_100991B10 = 1;
            break;
          }
          v6 = v7 + 1;
          v3 = v5 - (_BYTE *)v6;
        }
        while (v5 - (_BYTE *)v6 >= 2);
      }
    }
  }
LABEL_3:
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
    sub_1006DEFB0();
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
}

void sub_1003013E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100301400(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100301474;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100991B28 != -1)
    dispatch_once(&qword_100991B28, block);
  return byte_100991B20;
}

void sub_100301474(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *p_p;
  char *v5;
  void *v6;
  char *v7;
  void *__p;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 32);
  __p = 0;
  v9 = 0;
  v10 = 0;
  if (*(_DWORD *)(v1 + 712) == 24)
  {
    v2 = sub_10034D3CC();
    if (!(*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v2 + 64))(v2, &__p))
    {
      if (SHIBYTE(v10) < 0)
      {
        v3 = v9;
        if (!v9)
          goto LABEL_3;
        p_p = (char *)__p;
      }
      else
      {
        v3 = HIBYTE(v10);
        if (!HIBYTE(v10))
          goto LABEL_3;
        p_p = (char *)&__p;
      }
      if (v3 >= 2)
      {
        v5 = &p_p[v3];
        v6 = p_p;
        do
        {
          v7 = (char *)memchr(v6, 67, v3 - 1);
          if (!v7)
            break;
          if (*(_WORD *)v7 == 12867)
          {
            if (v7 != v5 && v7 - p_p != -1)
              byte_100991B20 = 1;
            break;
          }
          v6 = v7 + 1;
          v3 = v5 - (_BYTE *)v6;
        }
        while (v5 - (_BYTE *)v6 >= 2);
      }
    }
  }
LABEL_3:
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
    sub_1006DF01C();
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
}

void sub_100301590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003015AC(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100301620;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100991B38 != -1)
    dispatch_once(&qword_100991B38, block);
  return byte_100991B30;
}

void sub_100301620(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *p_p;
  char *v5;
  void *v6;
  char *v7;
  void *__p;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 32);
  __p = 0;
  v9 = 0;
  v10 = 0;
  if (*(_DWORD *)(v1 + 712) == 26)
  {
    v2 = sub_10034D3CC();
    if (!(*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v2 + 64))(v2, &__p))
    {
      if (SHIBYTE(v10) < 0)
      {
        v3 = v9;
        if (!v9)
          goto LABEL_3;
        p_p = (char *)__p;
      }
      else
      {
        v3 = HIBYTE(v10);
        if (!HIBYTE(v10))
          goto LABEL_3;
        p_p = (char *)&__p;
      }
      if (v3 >= 2)
      {
        v5 = &p_p[v3];
        v6 = p_p;
        do
        {
          v7 = (char *)memchr(v6, 66, v3 - 1);
          if (!v7)
            break;
          if (*(_WORD *)v7 == 12354)
          {
            if (v7 != v5 && v7 - p_p != -1)
              byte_100991B30 = 1;
            break;
          }
          v6 = v7 + 1;
          v3 = v5 - (_BYTE *)v6;
        }
        while (v5 - (_BYTE *)v6 >= 2);
      }
    }
  }
LABEL_3:
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
    sub_1006DF088();
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
}

void sub_10030173C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100301758(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003017CC;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100991B48 != -1)
    dispatch_once(&qword_100991B48, block);
  return byte_100991B40;
}

void sub_1003017CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *p_p;
  char *v5;
  void *v6;
  char *v7;
  void *__p;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 32);
  __p = 0;
  v9 = 0;
  v10 = 0;
  if (*(_DWORD *)(v1 + 712) == 26)
  {
    v2 = sub_10034D3CC();
    if (!(*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v2 + 64))(v2, &__p))
    {
      if (SHIBYTE(v10) < 0)
      {
        v3 = v9;
        if (!v9)
          goto LABEL_3;
        p_p = (char *)__p;
      }
      else
      {
        v3 = HIBYTE(v10);
        if (!HIBYTE(v10))
          goto LABEL_3;
        p_p = (char *)&__p;
      }
      if (v3 >= 2)
      {
        v5 = &p_p[v3];
        v6 = p_p;
        do
        {
          v7 = (char *)memchr(v6, 67, v3 - 1);
          if (!v7)
            break;
          if (*(_WORD *)v7 == 12867)
          {
            if (v7 != v5 && v7 - p_p != -1)
              byte_100991B40 = 1;
            break;
          }
          v6 = v7 + 1;
          v3 = v5 - (_BYTE *)v6;
        }
        while (v5 - (_BYTE *)v6 >= 2);
      }
    }
  }
LABEL_3:
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
    sub_1006DF0F4();
  if (SHIBYTE(v10) < 0)
    operator delete(__p);
}

void sub_1003018E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100301904(uint64_t a1)
{
  uint64_t v2;
  int v3;
  __int16 v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  __int16 v8;
  NSObject *v9;
  void *__p[2];
  char v11;
  int v12;
  uint8_t buf[8];
  char v14;

  v12 = 0;
  v2 = sub_100027F68();
  sub_100091AE8(buf, "Magnet");
  sub_100091AE8(__p, "ForcedLERSSIValue");
  v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v2 + 88))(v2, buf, __p, &v12);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
  {
    operator delete(*(void **)buf);
    if (v3)
      goto LABEL_5;
LABEL_9:
    *(_BYTE *)(a1 + 1194) = 0;
    goto LABEL_10;
  }
  if (!v3)
    goto LABEL_9;
LABEL_5:
  v4 = v12;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Enable force LE RSSI value = %d dBm", buf, 8u);
  }
  *(_BYTE *)(a1 + 1194) = 1;
  *(_WORD *)(a1 + 1196) = v4;
LABEL_10:
  v6 = sub_100027F68();
  sub_100091AE8(buf, "Magnet");
  sub_100091AE8(__p, "ForcedClassicRSSIValue");
  v7 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v6 + 88))(v6, buf, __p, &v12);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
  {
    operator delete(*(void **)buf);
    if (v7)
      goto LABEL_14;
LABEL_18:
    *(_BYTE *)(a1 + 1195) = 0;
    return;
  }
  if (!v7)
    goto LABEL_18;
LABEL_14:
  v8 = v12;
  v9 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Enable force Classic RSSI value = %d dBm", buf, 8u);
  }
  *(_BYTE *)(a1 + 1195) = 1;
  *(_WORD *)(a1 + 1198) = v8;
}

void sub_100301B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

BOOL sub_100301B5C(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 712);
  if (v1 < 0x7D0)
  {
    if (v1 - 19 < 8)
      return 1;
  }
  else if (v1 <= 0xF9F && v1 != 2000)
  {
    return 1;
  }
  return v1 == 6000;
}

BOOL sub_100301B9C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 712);
  return v1 == 6000 || (v1 - 22) < 0x7BA;
}

BOOL sub_100301BBC(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 22) < 0x7BA;
}

BOOL sub_100301BD0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 22) < 0x7BA;
}

BOOL sub_100301BE4(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 22) < 0x7BA;
}

BOOL sub_100301BF8(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 20) < 7;
}

BOOL sub_100301C0C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 712);
  return v1 == 6000 || (v1 - 20) < 7;
}

BOOL sub_100301C28(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 22) < 0x7BA;
}

BOOL sub_100301C3C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 22) < 0x7BA;
}

BOOL sub_100301C50(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 22) < 5;
}

BOOL sub_100301C64(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 19) < 8;
}

BOOL sub_100301C78()
{
  return (*(_DWORD *)(sub_1000438A4() + 712) - 21) < 0x7BB;
}

uint64_t sub_100301C9C()
{
  return 0;
}

BOOL sub_100301CA4(uint64_t a1)
{
  _BOOL4 v2;
  _BOOL8 result;
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;

  if (qword_100991B50 != -1)
    dispatch_once(&qword_100991B50, &stru_100926358);
  v2 = sub_100333BD0(a1, 0x14u);
  result = 0;
  if (v2 && byte_100991B58)
  {
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (byte_100991B59)
        v5 = "Enabled";
      else
        v5 = "Disabled";
      v6 = 136315138;
      v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Overriding Apple Enhanced Advertising Report support to : %s", (uint8_t *)&v6, 0xCu);
    }
    return byte_100991B59 != 0;
  }
  return result;
}

void sub_100301DBC(id a1)
{
  uint64_t v1;
  void *__p[2];
  char v3;
  void *v4[2];
  char v5;

  v1 = sub_100027F68();
  sub_100091AE8(v4, "LE");
  sub_100091AE8(__p, "AppleExtendedAdvertisingReport");
  byte_100991B58 = (*(uint64_t (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v1 + 72))(v1, v4, __p, &byte_100991B59);
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
}

void sub_100301E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL sub_100301E80()
{
  return (*(_DWORD *)(sub_1000438A4() + 712) - 21) < 6;
}

BOOL sub_100301EA4(uint64_t a1)
{
  return (*(_DWORD *)(sub_1000438A4() + 712) - 1) <= 0x7CE
      && (*(_DWORD *)(a1 + 712) - 22) < 5;
}

BOOL sub_100301EEC(uint64_t a1)
{
  return (*(_DWORD *)(sub_1000438A4() + 712) - 1) <= 0x7CE
      && (*(_DWORD *)(a1 + 712) - 24) < 3;
}

uint64_t sub_100301F34(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 712);
  if (v1 < 0x7D0)
  {
    if (v1 - 19 < 8)
      return 1;
  }
  else if (v1 <= 0xF9F && v1 != 2000)
  {
    return 1;
  }
  return 0;
}

BOOL sub_100301F6C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 21) < 6;
}

BOOL sub_100301F80(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 2001) < 0x7CF;
}

BOOL sub_100301F94(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 20) < 7;
}

BOOL sub_100301FA8(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 712);
  if (!v1)
    return 0;
  if (v1 > 0x7CF)
    return v1 <= 0xF9F && v1 != 2000;
  return v1 - 20 < 7;
}

BOOL sub_100301FE8()
{
  return sub_10005F864() == 28 || sub_10005F864() == 23;
}

BOOL sub_100302018(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 2001) < 0x7CF;
}

uint64_t sub_10030202C()
{
  unsigned int v0;

  v0 = sub_10005F864() - 183;
  return (v0 < 0x20) & (0xF3FF0F0F >> v0);
}

BOOL sub_10030205C()
{
  return sub_10005F864() == 148;
}

BOOL sub_100302078(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 1) < 0x7CF;
}

BOOL sub_10030208C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 22) < 0x7BA;
}

BOOL sub_1003020A0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 712) == 22;
}

BOOL sub_1003020B0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 22) < 0x7BA;
}

uint64_t sub_1003020C4(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 712);
  if (v1 - 1 > 0x7CE)
    return 0;
  if (v1 > 0x17)
    return 2;
  return v1 > 0x15;
}

uint64_t sub_1003020FC(_DWORD *a1)
{
  if ((a1[178] - 22) > 0x7B9)
    return 0;
  else
    return (*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 32))(a1) ^ 1;
}

uint64_t sub_100302134(_DWORD *a1)
{
  unsigned int v1;

  v1 = a1[178];
  if (!v1)
    return 0;
  if (v1 > 0x7CF)
    return v1 - 2001 < 0x7CF;
  if (v1 < 0x14)
    return 0;
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 32))(a1))
  {
    v1 = a1[178];
    if (v1 >= 0x7D0)
      return v1 - 2001 < 0x7CF;
    return 0;
  }
  return 1;
}

BOOL sub_1003021A0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 2001) < 0x7CF;
}

BOOL sub_1003021B4(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 712);
  if (!v1)
    return 0;
  if (v1 <= 0x7CF)
    return v1 > 0x12;
  return v1 < 0xFA0 && v1 != 2000;
}

BOOL sub_1003021F0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 20) < 0x7BC;
}

BOOL sub_100302204(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 24) < 0x7B8;
}

uint64_t sub_100302218(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 712);
  if (v1 < 0x7D0)
  {
    if (v1 > 0xE)
      return 1;
  }
  else if (v1 <= 0xF9F && v1 != 2000)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_10030224C(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 712);
  if (!v1)
    return v1 == 6000;
  if (v1 > 0x7CF)
  {
    if (v1 > 0xF9F || v1 == 2000)
      return v1 == 6000;
    return 1;
  }
  if (v1 - 19 < 8)
    return 1;
  return v1 == 6000;
}

uint64_t sub_100302294(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 712);
  if (!v1)
    return v1 == 6000;
  if (v1 > 0x7CF)
  {
    if (v1 > 0xF9F || v1 == 2000)
      return v1 == 6000;
    return 1;
  }
  if (v1 - 19 < 8)
    return 1;
  return v1 == 6000;
}

BOOL sub_1003022DC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 712) == 26;
}

BOOL sub_1003022EC(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 712);
  if (v1 < 0x7D0)
  {
    if (v1 - 19 < 8)
      return 1;
  }
  else if (v1 <= 0xF9F && v1 != 2000)
  {
    return 1;
  }
  return v1 >> 4 > 0x176;
}

uint64_t sub_10030232C(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 712);
  if (v1 < 0x7D0)
  {
    if (v1 - 19 < 4)
      return 1;
  }
  else if (v1 <= 0xF9F && v1 != 2000)
  {
    return 1;
  }
  return 0;
}

BOOL sub_100302364(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 2001) < 0x7CF;
}

uint64_t sub_100302378(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 712);
  if (!v1)
    return 0;
  if (v1 > 0x7CF)
  {
    if (v1 <= 0xF9F && v1 != 2000)
      return 2;
    return 0;
  }
  if (v1 < 0x13)
    return 0;
  if (v1 < 0x16)
    return 1;
  else
    return 2;
}

uint64_t sub_1003023C4(_DWORD *a1)
{
  int v1;
  BOOL v2;

  v1 = a1[178];
  if ((v1 - 1) <= 0x7CE
    && (v1 != 22 ? (v2 = v1 == 24) : (v2 = 1),
        v2 || v1 == 26 && ((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 64))(a1) & 1) != 0))
  {
    return 32;
  }
  else
  {
    return 8;
  }
}

uint64_t sub_100302414(_DWORD *a1)
{
  uint64_t result;
  unsigned int v3;

  result = _os_feature_enabled_impl("CoreLocation", "StandardUT");
  if ((_DWORD)result)
  {
    v3 = a1[178];
    if (v3 - 22 <= 0x7B9
      && (v3 < 0x19 || v3 == 26 && ((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 56))(a1) & 1) == 0))
    {
      return 8;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100302488(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

unint64_t sub_100302494(uint64_t a1)
{
  int v2;

  if ((*(_DWORD *)(a1 + 712) - 20) < 7)
    return 1;
  v2 = sub_10005F864();
  if ((v2 - 154) <= 0x3C)
    return (0x1E7FE1E1E0000003uLL >> (v2 + 102)) & 1;
  else
    return 0;
}

uint64_t sub_1003024E0(uint64_t a1)
{
  if (MGGetBoolAnswer(CFSTR("DeviceSupportsAOP2")) && sub_10005F7EC())
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2472))(a1);
  else
    return 0;
}

uint64_t sub_100302534(_DWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  result = MGGetBoolAnswer(CFSTR("DeviceSupportsAOP"));
  if ((_DWORD)result)
  {
    result = sub_10005F7EC();
    if ((_DWORD)result)
    {
      result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 2472))(a1);
      if ((_DWORD)result)
      {
        if ((a1[178] - 22) > 4)
        {
          return 0;
        }
        else
        {
          v3 = sub_10003BE44();
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 352))(v3);
          if ((_DWORD)result)
            return (int)sub_10005F864() > 41;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1003025B8()
{
  if (qword_100991B60 != -1)
    dispatch_once(&qword_100991B60, &stru_100926378);
  return byte_100991B5A;
}

void sub_1003025F8(id a1)
{
  byte_100991B5A = MGGetBoolAnswer(CFSTR("DeviceProximityCapability"));
}

uint64_t sub_10030261C(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2368))(a1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2376))(a1) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2392))(a1);
  }
}

uint64_t sub_100302678()
{
  unsigned int v0;

  v0 = sub_10005F864() - 154;
  return (v0 < 0x3D) & (0x1E7FE1E1E0000003uLL >> v0);
}

uint64_t sub_1003026AC(uint64_t a1)
{
  return (char)-*(_BYTE *)(a1 + 1202);
}

uint64_t sub_1003026BC()
{
  return 0;
}

uint64_t sub_1003026C4(_DWORD *a1)
{
  unsigned int v2;

  if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 2456))(a1) & 1) != 0)
    return 0;
  v2 = a1[178];
  if (!v2)
    return 0;
  if (v2 > 0x7CF)
    return v2 - 2001 < 0x7CF;
  if (v2 < 0x15)
    return 0;
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 32))(a1))
  {
    v2 = a1[178];
    if (v2 >= 0x7D0)
      return v2 - 2001 < 0x7CF;
    return 0;
  }
  return 1;
}

BOOL sub_100302744(uint64_t a1)
{
  unsigned int v1;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 1180) & 8) == 0)
    return 0;
  v1 = *(_DWORD *)(a1 + 712);
  if (!v1)
    return 0;
  if (v1 <= 0x7CF)
    return v1 > 0x12;
  result = 0;
  if (v1 <= 0xF9F && v1 != 2000)
    return 1;
  return result;
}

BOOL sub_100302788(uint64_t a1)
{
  unsigned int v1;
  _BOOL8 result;

  if ((*(_BYTE *)(a1 + 1180) & 8) == 0)
    return 0;
  v1 = *(_DWORD *)(a1 + 712);
  if (!v1)
    return 0;
  if (v1 <= 0x7CF)
    return v1 > 0x15;
  result = 0;
  if (v1 <= 0xF9F && v1 != 2000)
    return 1;
  return result;
}

BOOL sub_1003027CC(uint64_t a1)
{
  return (*(_BYTE *)(a1 + 1180) & 8) != 0 && (*(_DWORD *)(a1 + 712) - 21) < 0x7BB;
}

uint64_t sub_1003027F0(uint64_t a1)
{
  int v1;
  uint64_t result;

  if ((*(_BYTE *)(a1 + 1183) & 0x10) == 0)
    return 0;
  v1 = *(_DWORD *)(a1 + 712);
  if ((v1 - 1) > 0x7CE)
    return 0;
  if (v1 == 21)
    return 1;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result)
    return 1;
  return result;
}

BOOL sub_10030283C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 19) < 0x7BD;
}

uint64_t sub_100302850()
{
  return 0;
}

BOOL sub_100302858(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 24) < 0x7B8;
}

BOOL sub_10030286C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 24) < 0x7B8;
}

uint64_t sub_100302880(uint64_t a1)
{
  uint64_t result;

  result = _os_feature_enabled_impl("BluetoothFeatures", "HandsfreeAoS");
  if ((_DWORD)result)
    return (*(_DWORD *)(a1 + 712) - 24) < 0x7B8;
  return result;
}

uint64_t sub_1003028C4()
{
  return _os_feature_enabled_impl("AudioDSP", "EnhancedAirPodsVoice");
}

BOOL sub_1003028D8(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 24) < 0x7B8;
}

BOOL sub_1003028EC(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 24) < 0x7B8;
}

BOOL sub_100302900(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 24) < 0x7B8;
}

BOOL sub_100302914(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 22) < 0x7BA;
}

BOOL sub_100302928(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 24) < 0x7B8;
}

uint64_t sub_10030293C()
{
  return 0;
}

uint64_t sub_100302944(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 712) = a2;
  return 0;
}

uint64_t sub_100302950()
{
  return 0;
}

uint64_t sub_100302958()
{
  return 0;
}

uint64_t sub_100302960(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  void *__p[2];
  char v17;
  char v18;
  _BYTE buf[12];
  char v20;

  v18 = 0;
  v2 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "OverrideSupportLEAdvTxPowerIncrease");
  v3 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v2 + 72))(v2, buf, __p, &v18);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v20 < 0)
  {
    operator delete(*(void **)buf);
    if (v3)
      goto LABEL_5;
  }
  else if (v3)
  {
LABEL_5:
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (v18)
        v5 = "enabled";
      else
        v5 = "disabled";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Warning: Support LE Adv Tx Power Increase - %{public}s", buf, 0xCu);
    }
    v6 = v18 == 0;
    return !v6;
  }
  v8 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 384))(v8))
  {
    v12 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 352))(v12))
    {
      v13 = *(_DWORD *)(a1 + 712);
      if ((v13 - 1) <= 0x7CE)
      {
        if (v13 == 22)
        {
          if (sub_10005F864() == 43 || sub_10005F864() == 42)
            return 1;
          v13 = *(_DWORD *)(a1 + 712);
        }
        if ((v13 - 24) < 0x7B8)
          return 1;
      }
    }
    else
    {
      v14 = sub_10003BE44();
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 344))(v14);
      if (!(_DWORD)result)
        return result;
      v15 = sub_10005F864() - 204;
      if (v15 <= 0xA)
        return (0x79Fu >> v15) & 1;
    }
    return 0;
  }
  v9 = *(_DWORD *)(a1 + 712);
  if (v9 - 1 > 0x7CE)
    return 0;
  if (v9 != 24)
    return v9 > 0x18;
  v10 = sub_10005F864();
  v6 = v10 == 230 || (v10 & 0xFFFFFFF8) == 232 || (v10 & 0xFFFFFFFC) == 240;
  return !v6;
}

void sub_100302B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100302BC8()
{
  sub_1000438A4();
  return 0;
}

BOOL sub_100302BE0()
{
  uint64_t v0;
  int v1;
  NSObject *v2;
  const char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  char v10;
  _BYTE buf[12];
  char v12;

  v10 = 0;
  v0 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "OverrideSupportLEConnTxPowerIncrease");
  v1 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v0 + 72))(v0, buf, __p, &v10);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
  {
    operator delete(*(void **)buf);
    if (v1)
      goto LABEL_5;
  }
  else if (v1)
  {
LABEL_5:
    v2 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (v10)
        v3 = "enabled";
      else
        v3 = "disabled";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Warning: Support LE Connection Tx Power Increase - %{public}s", buf, 0xCu);
    }
    return v10 != 0;
  }
  v5 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 384))(v5) & 1) == 0)
  {
    v6 = sub_10003BE44();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 352))(v6) & 1) == 0)
    {
      v7 = sub_10003BE44();
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 344))(v7);
    }
  }
  return 0;
}

void sub_100302D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100302D94(uint64_t a1)
{
  if ((*(_DWORD *)(a1 + 712) - 20) >= 0x7BC)
    return 48;
  else
    return 32;
}

BOOL sub_100302DB0(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 2001) < 0x7CF;
}

BOOL sub_100302DC4(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 2001) < 0x7CF;
}

BOOL sub_100302DD8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 712) > 0x17u;
}

uint64_t sub_100302DE8(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 712);
  if (v1)
  {
    if (v1 > 0x7CF)
    {
      if (v1 - 2002 < 0x7CE)
        return 1;
    }
    else if (v1 - 20 < 7)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_100302E20()
{
  return 0;
}

uint64_t sub_100302E28()
{
  return 0;
}

uint64_t sub_100302E30()
{
  return 0;
}

BOOL sub_100302E38(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 712);
  if (!v1)
    return 0;
  if (v1 > 0x7CF)
    return v1 <= 0xF9F && v1 != 2000;
  return v1 > 0x15;
}

uint64_t sub_100302E74(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x58u);
}

uint64_t sub_100302EC0(uint64_t a1, char a2, __int16 a3, uint64_t a4, int a5)
{
  _QWORD v6[5];
  __int16 v7;
  char v8;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100302F24;
  v6[3] = &unk_100926398;
  v6[4] = a4;
  v7 = a3;
  v8 = a2;
  return sub_100042FD0(a1, 88, a5, v6, 0);
}

uint64_t sub_100302F24(uint64_t a1)
{
  unint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  NSObject *v7;
  const char *v9;
  void *p_p;
  void *__p;
  char v12;
  int v13;
  __int16 v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  int v20;

  v2 = sub_100225368(*(_QWORD *)(a1 + 32));
  v13 = v2;
  v14 = WORD2(v2);
  v3 = (_BYTE *)sub_10019AEA4((uint64_t)&v13);
  if (v3)
  {
    v4 = sub_1001FD594(v3, *(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42));
    v5 = v4;
    if (*(_BYTE *)(a1 + 42) || (_DWORD)v4 != 408)
    {
LABEL_8:
      if (!(_DWORD)v5)
        return v5;
      goto LABEL_9;
    }
  }
  else
  {
    v5 = 101;
  }
  v6 = (_BYTE *)sub_10019AF68(*(_QWORD *)(a1 + 32));
  if (v6)
  {
    v5 = sub_1001FD594(v6, *(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42));
    goto LABEL_8;
  }
LABEL_9:
  v7 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    if (*(_BYTE *)(a1 + 42))
      v9 = "enable";
    else
      v9 = "disable";
    sub_1000217F4(*(_QWORD *)(a1 + 32));
    if (v12 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315650;
    v16 = v9;
    v17 = 2080;
    v18 = p_p;
    v19 = 1024;
    v20 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Could not %s phy statistics for address %s result %d", buf, 0x1Cu);
    if (v12 < 0)
      operator delete(__p);
  }
  return v5;
}

uint64_t sub_1003030B0(uint64_t a1, int a2, __int16 a3, uint64_t a4, int a5)
{
  _QWORD v6[5];
  int v7;
  __int16 v8;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100303114;
  v6[3] = &unk_1009263B8;
  v6[4] = a4;
  v8 = a3;
  v7 = a2;
  return sub_100042FD0(a1, 88, a5, v6, 0);
}

uint64_t sub_100303114(uint64_t a1)
{
  unint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  NSObject *v7;
  void *p_p;
  int v10;
  void *__p;
  char v12;
  int v13;
  __int16 v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;

  v2 = sub_100225368(*(_QWORD *)(a1 + 32));
  v13 = v2;
  v14 = WORD2(v2);
  v3 = (_BYTE *)sub_10019AEA4((uint64_t)&v13);
  if (v3)
  {
    v4 = sub_1001FD6B0(v3, *(unsigned __int16 *)(a1 + 44), *(unsigned __int8 *)(a1 + 40));
    v5 = v4;
    if (*(_DWORD *)(a1 + 40) || (_DWORD)v4 != 408)
    {
LABEL_8:
      if (!(_DWORD)v5)
        return v5;
      goto LABEL_9;
    }
  }
  else
  {
    v5 = 101;
  }
  v6 = (_BYTE *)sub_10019AF68(*(_QWORD *)(a1 + 32));
  if (v6)
  {
    v5 = sub_1001FD6B0(v6, *(unsigned __int16 *)(a1 + 44), *(unsigned __int8 *)(a1 + 40));
    goto LABEL_8;
  }
LABEL_9:
  v7 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1000217F4(*(_QWORD *)(a1 + 32));
    if (v12 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    v10 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 136315650;
    v16 = p_p;
    v17 = 1024;
    v18 = v10;
    v19 = 1024;
    v20 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Could not config dual core phy statistics for address %s, config %d, result %d", buf, 0x18u);
    if (v12 < 0)
      operator delete(__p);
  }
  return v5;
}

uint64_t sub_100303284(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x104u);
}

uint64_t sub_1003032D0(uint64_t a1, int a2)
{
  _QWORD v3[5];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100303330;
  v3[3] = &unk_1009263D8;
  v3[4] = a1;
  v4 = a2;
  return sub_100042FD0(a1, 260, a2, v3, 0);
}

uint64_t sub_100303330(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  _DWORD v5[2];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(v1 + 1184);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "fEnabledFilteringFeatures: %x", (uint8_t *)v5, 8u);
  }
  return sub_1001F6BC0();
}

uint64_t sub_100303400(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xC5u);
}

uint64_t sub_10030344C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD v5[6];
  char v6;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003034B0;
  v5[3] = &unk_1009263F8;
  v5[4] = a2;
  v5[5] = a3;
  v6 = a4;
  return sub_100042FD0(a1, 197, a4, v5, 0);
}

uint64_t sub_1003034B0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v4;
  int v6;
  const char *v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (BYTE6(v2))
  {
    if (BYTE6(v2) != 1 || (~v2 & 0xC00000000000) != 0)
    {
      v4 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      {
        v6 = 136446210;
        v7 = "BTAddressIsPublic(address) || BTAddressIsStatic(address)";
        _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v6, 0xCu);
        v2 = *(_QWORD *)(a1 + 32);
      }
    }
  }
  LOBYTE(v6) = BYTE5(v2);
  BYTE1(v6) = BYTE4(v2);
  BYTE2(v6) = BYTE3(v2);
  HIBYTE(v6) = BYTE2(v2);
  LOBYTE(v7) = BYTE1(v2);
  BYTE1(v7) = v2;
  return sub_1001F6D68((v2 & 0xFF000000000000) != 0, (uint64_t)&v6, *(_QWORD *)(a1 + 40));
}

uint64_t sub_1003035E0(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xFDu);
}

uint64_t sub_10030362C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD v5[5];
  char v6;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10030368C;
  v5[3] = &unk_1009263D8;
  v5[4] = a2;
  v6 = a4;
  return sub_100042FD0(a1, 253, a4, v5, 0);
}

uint64_t sub_10030368C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v4;
  int v6;
  const char *v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (BYTE6(v2))
  {
    if (BYTE6(v2) != 1 || (~v2 & 0xC00000000000) != 0)
    {
      v4 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      {
        v6 = 136446210;
        v7 = "BTAddressIsPublic(address) || BTAddressIsStatic(address)";
        _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v6, 0xCu);
        v2 = *(_QWORD *)(a1 + 32);
      }
    }
  }
  return sub_1001F6CD0(0, v2);
}

uint64_t sub_100303784(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xC6u);
}

uint64_t sub_1003037D0(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD v4[5];
  char v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10030382C;
  v4[3] = &unk_1009263D8;
  v4[4] = a2;
  v5 = a3;
  return sub_100042FD0(a1, 198, a3, v4, 0);
}

uint64_t sub_10030382C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v4;
  int v6;
  const char *v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (BYTE6(v2))
  {
    if (BYTE6(v2) != 1 || (~v2 & 0xC00000000000) != 0)
    {
      v4 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      {
        v6 = 136446210;
        v7 = "BTAddressIsPublic(address) || BTAddressIsStatic(address)";
        _os_log_fault_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v6, 0xCu);
        v2 = *(_QWORD *)(a1 + 32);
      }
    }
  }
  LOBYTE(v6) = BYTE5(v2);
  BYTE1(v6) = BYTE4(v2);
  BYTE2(v6) = BYTE3(v2);
  HIBYTE(v6) = BYTE2(v2);
  LOBYTE(v7) = BYTE1(v2);
  BYTE1(v7) = v2;
  return sub_1001F6DFC((v2 & 0xFF000000000000) != 0, (uint64_t)&v6);
}

uint64_t sub_100303954(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xC7u);
}

uint64_t sub_1003039A0(uint64_t a1, int a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1003039FC;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 199, a2, v3, 0);
}

uint64_t sub_1003039FC()
{
  return sub_1001F6E90();
}

uint64_t sub_100303A14(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xC9u);
}

int sub_100303A60(id a1)
{
  return sub_100073E60();
}

uint64_t sub_100303A6C(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char v4;

  v1 = *(_QWORD *)(a1 + 32);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 2456))(v1))
  {
    v4 = 0;
    return sub_100014314((uint64_t)&v4, 0);
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 2448))(v1))
  {
    v3 = 0;
    return sub_1001F7034((uint64_t)&v3);
  }
  else
  {
    return sub_1001F6F18();
  }
}

uint64_t sub_100303B58(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xC9u);
}

uint64_t sub_100303BA4(uint64_t a1, __int128 *a2, int a3)
{
  _QWORD v4[5];
  __int128 v5;
  int v6;
  char v7;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100303C3C;
  v4[3] = &unk_100926498;
  v4[4] = a1;
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 4);
  v7 = a3;
  return sub_100042FD0(a1, 201, a3, v4, 0);
}

uint64_t sub_100303C3C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  _QWORD v4[2];

  v1 = *(_BYTE **)(a1 + 32);
  if (!v1[1176])
    return 114;
  v4[0] = 0;
  v4[1] = 0;
  v2 = sub_1000689E4((unsigned __int8 *)(a1 + 40), v4);
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v1 + 2456))(v1))
    return sub_100014314((uint64_t)v4, v2);
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v1 + 2448))(v1))
    return sub_1001F7034((uint64_t)v4);
  return sub_1001F6FA0((uint64_t)v4);
}

uint64_t sub_100303D78(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x9Au);
}

uint64_t sub_100303DC4(uint64_t a1, uint64_t a2, char a3, char a4, int a5)
{
  _QWORD v6[5];
  char v7;
  char v8;
  char v9;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100303E2C;
  v6[3] = &unk_100926398;
  v6[4] = a2;
  v7 = a3;
  v8 = a4;
  v9 = a5;
  return sub_100042FD0(a1, 154, a5, v6, 0);
}

uint64_t sub_100303E2C(uint64_t a1)
{
  uint64_t (*v1)(int);

  if (*(_BYTE *)(a1 + 42))
    v1 = sub_100303D78;
  else
    v1 = 0;
  return sub_1001F53D0(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), (uint64_t)v1);
}

uint64_t sub_100303E54(int a1, int a2)
{
  NSObject *v4;
  _DWORD v6[2];

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "leaBuffersize %d", (uint8_t *)v6, 8u);
  }
  LOBYTE(dword_100991B68) = a2;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x9Cu);
}

uint64_t sub_100303F3C(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100303FA8;
  v3[3] = &unk_100917378;
  v3[4] = a2;
  return sub_100042FD0(a1, 156, 1, &stru_1009264B8, v3);
}

int sub_100303F9C(id a1)
{
  return sub_1001F52C0();
}

uint64_t sub_100303FA8(uint64_t result)
{
  **(_QWORD **)(result + 32) = dword_100991B68;
  return result;
}

uint64_t sub_100303FBC(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x9Du);
}

uint64_t sub_100304008(uint64_t a1, char a2, int a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100304064;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 157, a3, v4, 0);
}

uint64_t sub_100304064()
{
  return sub_1001F5348();
}

uint64_t sub_100304084(int a1, char a2)
{
  LOBYTE(dword_100991B68) = a2;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xCEu);
}

uint64_t sub_1003040D8(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  _QWORD v5[5];

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2408))(a1) & 1) != 0)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100304174;
    v5[3] = &unk_100917378;
    v5[4] = a2;
    return sub_100042FD0(a1, 206, 1, &stru_1009264F8, v5);
  }
  else
  {
    result = 0;
    *a2 = 0;
  }
  return result;
}

int sub_100304168(id a1)
{
  return sub_1001F7150();
}

uint64_t sub_100304174(uint64_t result)
{
  **(_BYTE **)(result + 32) = dword_100991B68;
  return result;
}

uint64_t sub_100304188(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xCFu);
}

uint64_t sub_1003041D4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  int v9;
  _QWORD v11[2];
  uint8_t buf[4];
  const char *v13;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2408))(a1))
    return 1;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 72);
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v7 = sub_1000438E4(a1, 207);
    *(_DWORD *)buf = 136446210;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
  }
  if (sub_1000431F4(a1, 207))
  {
    v8 = sub_1003043CC(a1);
    if (!(_DWORD)v8)
    {
      buf[0] = 0;
      sub_100043758(buf);
      v9 = sub_1001F71D8(a2, a3);
      sub_10004339C(buf);
      if (!v9)
      {
        if (qword_100977A58 != -1)
          dispatch_once(&qword_100977A58, &stru_100926C78);
        v9 = sub_1000433A4((uint64_t)off_100977A50, 207);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 640))(a1, 1);
      }
      v8 = v9 != 0;
      sub_100043728(buf);
    }
    sub_1000445D4(a1, 0xCFu);
  }
  else
  {
    v8 = 2;
  }
  sub_100034234((uint64_t)v11);
  return v8;
}

void sub_100304398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003043CC(uint64_t a1)
{
  _QWORD v3[5];
  _QWORD v4[5];

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2408))(a1))
    return 1;
  v3[4] = a1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100304734;
  v4[3] = &unk_100926538;
  v4[4] = a1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100304748;
  v3[3] = &unk_100917378;
  return sub_100042FD0(a1, 205, 1, v4, v3);
}

uint64_t sub_10030446C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xD1u);
}

uint64_t sub_1003044B8(uint64_t a1, uint64_t a2, __int16 a3, int a4)
{
  _QWORD v9[5];
  __int16 v10;
  char v11;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2408))(a1))
    return 1;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100304558;
  v9[3] = &unk_100926398;
  v9[4] = a2;
  v10 = a3;
  v11 = a4;
  return sub_100042FD0(a1, 209, a4, v9, 0);
}

uint64_t sub_100304558(uint64_t a1)
{
  return sub_1001F7270(*(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

uint64_t sub_10030457C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xD2u);
}

uint64_t sub_1003045C8(uint64_t a1)
{
  _QWORD v3[5];

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2408))(a1))
    return 1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10030465C;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  return sub_100042FD0(a1, 210, 1, &stru_100926518, v3);
}

int sub_100304650(id a1)
{
  return sub_1001F7308();
}

uint64_t sub_10030465C(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 1180) &= ~0x10000u;
  return result;
}

uint64_t sub_100304670(_DWORD *a1, int a2)
{
  int v4;
  unsigned int v5;

  if (!(*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 2408))(a1))
    return 1;
  v4 = a1[295];
  if (!a2)
  {
    if ((v4 & 0x10000) != 0)
    {
      v5 = v4 & 0xFFFEFFFF;
      goto LABEL_9;
    }
    return 0;
  }
  if ((v4 & 0x10000) != 0)
    return 0;
  v5 = v4 | 0x10000;
LABEL_9:
  a1[295] = v5;
  return (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 352))(a1, 1);
}

uint64_t sub_1003046E8(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xCDu);
}

uint64_t sub_100304734()
{
  return sub_1001F5BE4();
}

uint64_t sub_100304748(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 1192) = 1;
  return result;
}

uint64_t sub_100304758(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xD3u);
}

uint64_t sub_1003047A4(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, __int16 a5, char a6, char a7, char a8, uint64_t a9)
{
  _QWORD v10[5];
  _QWORD v11[7];
  __int16 v12;
  __int16 v13;
  char v14;
  char v15;
  char v16;

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10030483C;
  v11[3] = &unk_100926558;
  v12 = a3;
  v11[4] = a2;
  v11[5] = a4;
  v13 = a5;
  v14 = a6;
  v15 = a7;
  v16 = a8;
  v11[6] = a9;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100304888;
  v10[3] = &unk_100917378;
  v10[4] = a1;
  return sub_100042FD0(a1, 211, 1, v11, v10);
}

uint64_t sub_10030483C(uint64_t a1)
{
  return sub_1001F7A08(*(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 56), *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 58));
}

uint64_t sub_100304888(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 768))(*(_QWORD *)(a1 + 32), 1);
}

uint64_t sub_10030489C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xD4u);
}

uint64_t sub_1003048E8(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, __int16 a5, char a6, char a7, uint64_t a8)
{
  _QWORD v9[7];
  __int16 v10;
  __int16 v11;
  char v12;
  char v13;

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10030495C;
  v9[3] = &unk_100926578;
  v10 = a3;
  v9[4] = a2;
  v9[5] = a4;
  v11 = a5;
  v12 = a6;
  v13 = a7;
  v9[6] = a8;
  return sub_100042FD0(a1, 212, 1, v9, &stru_100926598);
}

uint64_t sub_10030495C(uint64_t a1)
{
  return sub_1001F7A08(*(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 56), *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 58));
}

uint64_t sub_1003049AC(uint64_t a1, char a2, uint64_t a3, __int16 a4, uint64_t a5, __int16 a6)
{
  uint64_t result;
  _QWORD v13[6];
  __int16 v14;
  __int16 v15;
  char v16;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 3552))(a1);
  if ((_DWORD)result)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100305200;
    v13[3] = &unk_100926658;
    v16 = a2;
    v14 = a4;
    v13[4] = a3;
    v13[5] = a5;
    v15 = a6;
    return sub_100042FD0(a1, 227, 1, v13, 0);
  }
  return result;
}

uint64_t sub_100304A58(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xDBu);
}

uint64_t sub_100304AA4(uint64_t a1)
{
  return sub_1001F74A0(*(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 56), *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 58));
}

uint64_t sub_100304B04(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 768))(*(_QWORD *)(a1 + 32), 1);
}

uint64_t sub_100304B18(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xDEu);
}

uint64_t sub_100304B64(uint64_t a1, char a2, char a3, uint64_t a4)
{
  _QWORD v5[5];
  _QWORD v6[5];
  char v7;
  char v8;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100304BE8;
  v6[3] = &unk_1009265D8;
  v7 = a2;
  v8 = a3;
  v6[4] = a4;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100304C04;
  v5[3] = &unk_100917378;
  v5[4] = a1;
  return sub_100042FD0(a1, 222, 1, v6, v5);
}

uint64_t sub_100304BE8(uint64_t a1)
{
  return sub_1001F756C(*(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), *(_QWORD *)(a1 + 32));
}

uint64_t sub_100304C04(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 768))(*(_QWORD *)(a1 + 32), 1);
}

uint64_t sub_100304C18(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xB5u);
}

uint64_t sub_100304C64(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7, char a8)
{
  uint64_t v16;
  _QWORD v18[4];
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v16 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 592))(v16))
    return 2;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100304D38;
  v18[3] = &unk_1009265F8;
  v19 = a2;
  v20 = a3;
  v21 = a4;
  v22 = a5;
  v23 = a6;
  v24 = a7;
  v25 = a8;
  return sub_100042FD0(a1, 181, 1, v18, 0);
}

uint64_t sub_100304D38(unsigned __int8 *a1)
{
  return sub_100006870(a1[32], a1[33], a1[34], a1[35], a1[36]);
}

uint64_t sub_100304D64(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xB6u);
}

uint64_t sub_100304DB0(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9, uint64_t a10, char a11)
{
  uint64_t v19;
  _QWORD v21[8];
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v19 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 592))(v19))
    return 2;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100304E94;
  v21[3] = &unk_100926618;
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v21[4] = a5;
  v21[5] = a6;
  v25 = a8;
  v26 = a9;
  v21[6] = a7;
  v21[7] = a10;
  v27 = a11;
  return sub_100042FD0(a1, 182, 1, v21, 0);
}

uint64_t sub_100304E94(uint64_t a1)
{
  return sub_10000B608(*(unsigned __int8 *)(a1 + 64), *(unsigned __int8 *)(a1 + 65), *(unsigned __int8 *)(a1 + 66), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 67), *(unsigned __int8 *)(a1 + 68));
}

uint64_t sub_100304EE8(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xDCu);
}

uint64_t sub_100304F34(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, __int16 a5, char a6, char a7, char a8, uint64_t a9, char a10, char a11, char a12)
{
  _QWORD v13[7];
  __int16 v14;
  __int16 v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100304FC4;
  v13[3] = &unk_1009265B8;
  v14 = a3;
  v13[4] = a2;
  v13[5] = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v18 = a8;
  v13[6] = a9;
  v19 = a10;
  v20 = a11;
  v21 = a12;
  return sub_100042FD0(a1, 220, 1, v13, 0);
}

uint64_t sub_100304FC4(uint64_t a1)
{
  return sub_1001F74A0(*(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 56), *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 58));
}

uint64_t sub_100305024(int a1, int a2, int a3)
{
  NSObject *v6;
  _DWORD v8[2];
  __int16 v9;
  int v10;

  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v8[0] = 67109376;
    v8[1] = a2;
    v9 = 1024;
    v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Advanced match filter : Total %d  remainaing: %d", (uint8_t *)v8, 0xEu);
  }
  LOBYTE(xmmword_100991B70) = a2;
  BYTE1(xmmword_100991B70) = a3;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xE2u);
}

uint64_t sub_100305124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100305190;
  v4[3] = &unk_100918090;
  v4[4] = a2;
  v4[5] = a3;
  return sub_100042FD0(a1, 226, 1, &stru_100926638, v4);
}

int sub_100305184(id a1)
{
  return sub_1001F76B0();
}

uint64_t sub_100305190(uint64_t result)
{
  **(_BYTE **)(result + 32) = xmmword_100991B70;
  **(_BYTE **)(result + 40) = BYTE1(xmmword_100991B70);
  return result;
}

uint64_t sub_1003051B4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xE3u);
}

uint64_t sub_100305200(uint64_t a1)
{
  return sub_1001F7738(*(unsigned __int8 *)(a1 + 52), *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 48), *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 50));
}

uint64_t sub_100305220(int a1, unsigned int a2, unsigned int a3, int a4, int a5, unsigned int a6, unsigned int a7, int a8, int a9, int a10, int a11, int a12, int a13, unsigned int a14, unsigned int a15, unsigned int a16, unsigned int a17, int a18, int a19, int a20,int a21,int a22,int a23,int a24,int a25,int a26,int a27,int a28,int a29,int a30,int a31,int a32,int a33,int a34,int a35,int a36,int a37,int a38,int a39,int a40,int a41,int a42,int a43,int a44,int a45,int a46,int a47,int a48,int a49,int a50,int a51,int a52,int a53,int a54,int a55,int a56,int a57,int a58)
{
  NSObject *v58;
  unint64_t v62;
  unint64_t v64;
  uint8_t buf[4];
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;

  v62 = __PAIR64__(a7, a6);
  v64 = __PAIR64__(a3, a2);
  v58 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109632;
    v67 = v64;
    v68 = 1024;
    v69 = HIDWORD(v64);
    v70 = 1024;
    v71 = a4;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_INFO, "getLPCoreStatisticsCB : TotalTime %d:%d:%d ", buf, 0x14u);
  }
  *(_QWORD *)&xmmword_100991B70 = v64;
  DWORD2(xmmword_100991B70) = a4;
  HIDWORD(xmmword_100991B70) = a5;
  *(_QWORD *)&xmmword_100991B80 = v62;
  DWORD2(xmmword_100991B80) = a8;
  HIDWORD(xmmword_100991B80) = a9;
  dword_100991B90 = a10;
  dword_100991B94 = a11;
  dword_100991B98 = a12;
  dword_100991B9C = a13;
  *(_QWORD *)&xmmword_100991BA0 = __PAIR64__(a15, a14);
  *((_QWORD *)&xmmword_100991BA0 + 1) = __PAIR64__(a17, a16);
  dword_100991BB0 = a18;
  dword_100991BB4 = a19;
  dword_100991BB8 = a20;
  dword_100991BBC = a21;
  dword_100991BC0 = a22;
  dword_100991BC4 = a23;
  dword_100991BC8 = a24;
  dword_100991BCC = a25;
  dword_100991BD0 = a26;
  dword_100991BD4 = a27;
  dword_100991BD8 = a28;
  dword_100991BDC = a29;
  dword_100991BE0 = a30;
  dword_100991BE4 = a31;
  dword_100991BE8 = a32;
  dword_100991BEC = a33;
  dword_100991BF0 = a34;
  dword_100991BF4 = a35;
  dword_100991BF8 = a36;
  dword_100991BFC = a37;
  dword_100991C00 = a38;
  dword_100991C04 = a39;
  dword_100991C08 = a40;
  dword_100991C0C = a41;
  dword_100991C10 = a42;
  dword_100991C14 = a43;
  dword_100991C18 = a44;
  dword_100991C1C = a45;
  dword_100991C20 = a46;
  dword_100991C24 = a47;
  dword_100991C28 = a48;
  dword_100991C2C = a49;
  dword_100991C30 = a50;
  dword_100991C34 = a51;
  dword_100991C38 = a52;
  dword_100991C3C = a53;
  dword_100991C40 = a54;
  dword_100991C44 = a55;
  dword_100991C48 = a56;
  dword_100991C4C = a57;
  dword_100991C50 = a58;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xE4u);
}

uint64_t sub_1003055CC()
{
  uint64_t result;
  uint64_t v1;
  _OWORD v2[8];
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  v6 = 0u;
  v3 = 0u;
  v4 = 0u;
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_100926C98);
  v9 = 0u;
  v10 = 0u;
  sub_100677CA0((uint64_t)off_100977FA8, (uint64_t)&v9);
  sub_10022B874(0x5Fu, 0, &v3);
  v2[6] = v9;
  v2[7] = v10;
  v2[0] = v3;
  v2[1] = v4;
  v2[2] = v5;
  v2[3] = v6;
  v2[4] = v7;
  v2[5] = v8;
  result = sub_100065478();
  if (result)
  {
    v1 = sub_100065478();
    return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v1 + 208))(v1, v2);
  }
  return result;
}

uint64_t sub_100305688(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,__int128 a30,__int128 a31,__int128 a32,__int128 a33,uint64_t a34)
{
  _QWORD v35[10];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _QWORD v62[4];
  int v63;

  v62[0] = _NSConcreteStackBlock;
  v62[1] = 3221225472;
  v62[2] = sub_10030578C;
  v62[3] = &unk_100926678;
  v63 = a2;
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_1003057A0;
  v35[3] = &unk_100926698;
  v35[4] = a3;
  v35[5] = a4;
  v35[6] = a5;
  v35[7] = a6;
  v35[8] = a7;
  v35[9] = a8;
  v36 = a9;
  v37 = a10;
  v38 = a11;
  v39 = a12;
  v40 = a13;
  v41 = a14;
  v42 = a15;
  v43 = a16;
  v44 = a17;
  v45 = a18;
  v46 = a19;
  v47 = a20;
  v48 = a21;
  v49 = a22;
  v50 = a23;
  v51 = a24;
  v52 = a25;
  v53 = a26;
  v54 = a27;
  v55 = a28;
  v56 = a29;
  v57 = a30;
  v58 = a31;
  v59 = a32;
  v60 = a33;
  v61 = a34;
  return sub_100042FD0(a1, 228, 1, v62, v35);
}

uint64_t sub_10030578C()
{
  return sub_1001F77E4();
}

uint64_t sub_1003057A0(uint64_t result)
{
  _DWORD *v1;
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;

  v1 = *(_DWORD **)(result + 40);
  **(_DWORD **)(result + 32) = xmmword_100991B70;
  *v1 = DWORD1(xmmword_100991B70);
  v2 = *(_DWORD **)(result + 56);
  **(_DWORD **)(result + 48) = DWORD2(xmmword_100991B70);
  *v2 = HIDWORD(xmmword_100991B70);
  v3 = *(_DWORD **)(result + 72);
  **(_DWORD **)(result + 64) = xmmword_100991B80;
  *v3 = DWORD1(xmmword_100991B80);
  v4 = *(_DWORD **)(result + 88);
  **(_DWORD **)(result + 80) = DWORD2(xmmword_100991B80);
  *v4 = HIDWORD(xmmword_100991B80);
  v5 = *(_DWORD **)(result + 104);
  **(_DWORD **)(result + 96) = dword_100991B90;
  *v5 = dword_100991B94;
  v6 = *(_DWORD **)(result + 120);
  **(_DWORD **)(result + 112) = dword_100991B98;
  *v6 = dword_100991B9C;
  v7 = *(_DWORD **)(result + 136);
  **(_DWORD **)(result + 128) = xmmword_100991BA0;
  *v7 = DWORD1(xmmword_100991BA0);
  v8 = *(_DWORD **)(result + 152);
  **(_DWORD **)(result + 144) = DWORD2(xmmword_100991BA0);
  *v8 = HIDWORD(xmmword_100991BA0);
  v9 = *(_DWORD **)(result + 168);
  **(_DWORD **)(result + 160) = dword_100991BB0;
  *v9 = dword_100991BB4;
  v10 = *(_DWORD **)(result + 184);
  **(_DWORD **)(result + 176) = dword_100991BB8;
  *v10 = dword_100991BBC;
  v11 = *(_DWORD **)(result + 200);
  **(_DWORD **)(result + 192) = dword_100991BC0;
  *v11 = dword_100991BC4;
  v12 = *(_DWORD **)(result + 216);
  **(_DWORD **)(result + 208) = dword_100991BC8;
  *v12 = dword_100991BCC;
  v13 = *(_DWORD **)(result + 232);
  **(_DWORD **)(result + 224) = dword_100991BD0;
  *v13 = dword_100991BD4;
  v14 = *(_DWORD **)(result + 248);
  **(_DWORD **)(result + 240) = dword_100991BD8;
  *v14 = dword_100991BDC;
  v15 = *(_DWORD **)(result + 264);
  **(_DWORD **)(result + 256) = dword_100991BE0;
  *v15 = dword_100991BE4;
  v16 = *(_DWORD **)(result + 280);
  **(_DWORD **)(result + 272) = dword_100991BE8;
  *v16 = dword_100991BEC;
  v17 = *(_DWORD **)(result + 296);
  **(_DWORD **)(result + 288) = dword_100991BF0;
  *v17 = dword_100991BF4;
  v18 = *(_DWORD **)(result + 312);
  **(_DWORD **)(result + 304) = dword_100991BF8;
  *v18 = dword_100991BFC;
  v19 = *(_DWORD **)(result + 328);
  **(_DWORD **)(result + 320) = dword_100991C00;
  *v19 = dword_100991C04;
  v20 = *(_DWORD **)(result + 344);
  **(_DWORD **)(result + 336) = dword_100991C08;
  *v20 = dword_100991C0C;
  v21 = *(_DWORD **)(result + 360);
  **(_DWORD **)(result + 352) = dword_100991C10;
  *v21 = dword_100991C14;
  v22 = *(_DWORD **)(result + 376);
  **(_DWORD **)(result + 368) = dword_100991C18;
  *v22 = dword_100991C1C;
  v23 = *(_DWORD **)(result + 392);
  **(_DWORD **)(result + 384) = dword_100991C20;
  *v23 = dword_100991C24;
  v24 = *(_DWORD **)(result + 408);
  **(_DWORD **)(result + 400) = dword_100991C28;
  *v24 = dword_100991C2C;
  v25 = *(_DWORD **)(result + 424);
  **(_DWORD **)(result + 416) = dword_100991C30;
  *v25 = dword_100991C34;
  v26 = *(_DWORD **)(result + 440);
  **(_DWORD **)(result + 432) = dword_100991C38;
  *v26 = dword_100991C3C;
  v27 = *(_DWORD **)(result + 456);
  **(_DWORD **)(result + 448) = dword_100991C40;
  *v27 = dword_100991C44;
  v28 = *(_DWORD **)(result + 472);
  **(_DWORD **)(result + 464) = dword_100991C48;
  *v28 = dword_100991C4C;
  **(_DWORD **)(result + 480) = dword_100991C50;
  return result;
}

uint64_t sub_1003059E8(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "BD_VSC_LE_META_GET_SCAN_STATS completed status %d.", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xE5u);
}

uint64_t sub_100305ABC(uint64_t a1, char a2)
{
  char v4;
  _QWORD v6[4];
  char v7;
  char v8;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2248))(a1);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100305B3C;
  v6[3] = &unk_1009264D8;
  v7 = a2;
  v8 = v4;
  return sub_100042FD0(a1, 229, 1, v6, 0);
}

uint64_t sub_100305B3C()
{
  return sub_1001F786C();
}

uint64_t sub_100305B54(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xDDu);
}

uint64_t sub_100305BA0(uint64_t a1, char a2)
{
  _QWORD v3[5];
  _QWORD v4[4];
  char v5;

  v3[4] = a1;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100305C18;
  v4[3] = &unk_100926418;
  v5 = a2;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100305C28;
  v3[3] = &unk_100917378;
  return sub_100042FD0(a1, 221, 1, v4, v3);
}

uint64_t sub_100305C18()
{
  return sub_1001F7628();
}

uint64_t sub_100305C28(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 768))(*(_QWORD *)(a1 + 32), 1);
}

uint64_t sub_100305C3C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xE0u);
}

uint64_t sub_100305C88(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _QWORD v5[5];
  _QWORD v6[6];
  char v7;
  char v8;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100305D0C;
  v6[3] = &unk_1009266B8;
  v6[4] = a1;
  v6[5] = a3;
  v7 = a2;
  v8 = a4;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100305DFC;
  v5[3] = &unk_100917378;
  v5[4] = a1;
  return sub_100042FD0(a1, 224, 1, v6, v5);
}

uint64_t sub_100305D0C(uint64_t a1)
{
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 32) + 712) - 22) > 0x7B9)
    return sub_1001F78F4(*(_BYTE *)(a1 + 48));
  sub_1000746A4(*(_QWORD *)(a1 + 40));
  return sub_1001F7980();
}

uint64_t sub_100305DFC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 768))(*(_QWORD *)(a1 + 32), 1);
}

uint64_t sub_100305E10(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xE1u);
}

uint64_t sub_100305E5C(uint64_t a1, uint64_t a2, char a3, char a4, char a5)
{
  _QWORD v6[5];
  _QWORD v7[5];
  char v8;
  char v9;
  char v10;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100305EE4;
  v7[3] = &unk_100926398;
  v7[4] = a2;
  v8 = a3;
  v9 = a5;
  v10 = a4;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100305F04;
  v6[3] = &unk_100917378;
  v6[4] = a1;
  return sub_100042FD0(a1, 225, 1, v7, v6);
}

uint64_t sub_100305EE4()
{
  return sub_1001F7980();
}

uint64_t sub_100305F04(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 768))(*(_QWORD *)(a1 + 32), 1);
}

uint64_t sub_100305F18(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xADu);
}

uint64_t sub_100305F64()
{
  return sub_1001F5C6C();
}

uint64_t sub_100305F74(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xDAu);
}

uint64_t sub_100305FC0(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10030601C;
  v3[3] = &unk_100926538;
  v3[4] = a2;
  return sub_100042FD0(a1, 218, 1, v3, 0);
}

uint64_t sub_10030601C()
{
  return sub_1001F7AB4();
}

uint64_t sub_10030602C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xDAu);
}

uint64_t sub_100306078(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD v4[5];
  char v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003060D8;
  v4[3] = &unk_1009263D8;
  v5 = a2;
  v4[4] = a3;
  return sub_100042FD0(a1, 223, 1, v4, 0);
}

uint64_t sub_1003060D8(uint64_t a1)
{
  return sub_1001F7B3C(*(_BYTE *)(a1 + 40), 0, *(_QWORD *)(a1 + 32));
}

uint64_t sub_1003060F4(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD v4[5];
  char v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100306154;
  v4[3] = &unk_1009263D8;
  v5 = a2;
  v4[4] = a3;
  return sub_100042FD0(a1, 223, 1, v4, 0);
}

uint64_t sub_100306154(uint64_t a1)
{
  return sub_1001F7B3C(*(_BYTE *)(a1 + 40), 1u, *(_QWORD *)(a1 + 32));
}

uint64_t sub_100306170(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xD7u);
}

uint64_t sub_1003061BC(_DWORD *a1, int a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];
  char v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, (uint64_t)(a1 + 18));
  if (*(_DWORD *)(sub_1000438A4() + 712) && *(_DWORD *)(sub_1000438A4() + 712) <= 0x7CFu)
  {
    v4 = a1[295];
    if (a2)
    {
      if ((v4 & 0x80000) == 0)
      {
        v5 = v4 | 0x80000;
LABEL_12:
        a1[295] = v5;
        v6 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 352))(a1, 1);
        goto LABEL_7;
      }
    }
    else if ((v4 & 0x80000) != 0)
    {
      v5 = v4 & 0xFFF7FFFF;
      goto LABEL_12;
    }
    v7 = 0;
    goto LABEL_8;
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1003062BC;
  v9[3] = &unk_100926418;
  v10 = a2;
  v6 = sub_100042FD0((uint64_t)a1, 215, 1, v9, 0);
LABEL_7:
  v7 = v6;
LABEL_8:
  sub_100034234((uint64_t)v11);
  return v7;
}

void sub_1003062A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100034234(v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_1003062BC()
{
  return sub_1001F7BE4();
}

uint64_t sub_1003062CC(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xD5u);
}

uint64_t sub_100306318(uint64_t a1, uint64_t a2, char a3, int a4)
{
  _QWORD v5[5];
  char v6;
  char v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100306380;
  v5[3] = &unk_1009265D8;
  v5[4] = a2;
  v6 = a3;
  v7 = a4;
  return sub_100042FD0(a1, 213, a4, v5, 0);
}

uint64_t sub_100306380(uint64_t a1)
{
  uint64_t (*v1)(int);

  if (*(_BYTE *)(a1 + 41))
    v1 = sub_1003062CC;
  else
    v1 = 0;
  return sub_1001F7C6C(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40) != 0, 0xBB8u, (uint64_t)v1);
}

uint64_t sub_1003063B0(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xA1u);
}

uint64_t sub_1003063FC(uint64_t a1, char a2, int a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100306458;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 161, a3, v4, 0);
}

uint64_t sub_100306458()
{
  return sub_1001F5548();
}

uint64_t sub_100306478(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xA2u);
}

uint64_t sub_1003064C4(uint64_t a1, char a2, int a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100306520;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 162, a3, v4, 0);
}

uint64_t sub_100306520()
{
  return sub_1001F55D0();
}

uint64_t sub_100306540(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x15u);
}

uint64_t sub_10030658C(uint64_t a1, char a2, int a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003065E8;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 21, a3, v4, 0);
}

uint64_t sub_1003065E8()
{
  return sub_1001F86D4();
}

uint64_t sub_100306610(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xA9u);
}

uint64_t sub_10030665C(uint64_t a1, char a2, int a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003066B8;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 169, a3, v4, 0);
}

uint64_t sub_1003066B8()
{
  return sub_1001F5658();
}

uint64_t sub_1003066D8(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x19u);
}

uint64_t sub_100306724(uint64_t a1, unint64_t a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  uint64_t (*v8)(int);
  int v9;
  _QWORD v11[2];
  uint8_t buf[4];
  const char *v13;

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 72);
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v7 = sub_1000438E4(a1, 25);
    *(_DWORD *)buf = 136446210;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
  }
  if (sub_1000431F4(a1, 25))
  {
    buf[0] = 0;
    sub_100043758(buf);
    if ((_DWORD)a3)
      v8 = sub_1003066D8;
    else
      v8 = 0;
    v9 = sub_1001F8138(a2, (uint64_t)v8);
    sub_10004339C(buf);
    if (v9)
    {
      if (v9 == 101)
      {
        a3 = 3;
      }
      else if (v9 == 122)
      {
        a3 = 7;
      }
      else
      {
        a3 = 1;
      }
    }
    else if ((_DWORD)a3)
    {
      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_100926C78);
      a3 = sub_1000433A4((uint64_t)off_100977A50, 25) != 0;
      goto LABEL_20;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006DF224();
LABEL_20:
    sub_1000445D4(a1, 0x19u);
    sub_100043728(buf);
    goto LABEL_21;
  }
  a3 = 2;
LABEL_21:
  sub_100034234((uint64_t)v11);
  return a3;
}

void sub_1003068F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100306928(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xA7u);
}

uint64_t sub_100306974(uint64_t a1, uint64_t a2, char a3, int a4)
{
  _QWORD v5[5];
  char v6;
  char v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003069DC;
  v5[3] = &unk_1009265D8;
  v5[4] = a2;
  v6 = a3;
  v7 = a4;
  return sub_100042FD0(a1, 167, a4, v5, 0);
}

uint64_t sub_1003069DC(uint64_t a1)
{
  uint64_t (*v1)(int);

  if (*(_BYTE *)(a1 + 41))
    v1 = sub_100306928;
  else
    v1 = 0;
  return sub_1001F56E0(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), (uint64_t)v1);
}

uint64_t sub_100306A00(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xCAu);
}

uint64_t sub_100306A4C(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD v4[5];
  char v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100306AA8;
  v4[3] = &unk_1009263D8;
  v4[4] = a2;
  v5 = a3;
  return sub_100042FD0(a1, 202, a3, v4, 0);
}

uint64_t sub_100306AA8(uint64_t a1)
{
  uint64_t (*v1)(int);
  __int16 v3;
  char v4;

  v3 = -21335;
  v4 = -80;
  if (*(_BYTE *)(a1 + 40))
    v1 = sub_100306A00;
  else
    v1 = 0;
  return sub_1001F7D58(*(_QWORD *)(a1 + 32), (uint64_t)&v3, 3, (uint64_t)v1);
}

uint64_t sub_100306AF8(int a1, char a2, char a3)
{
  LOBYTE(xmmword_100991B70) = a2;
  BYTE1(xmmword_100991B70) = a3;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xCBu);
}

uint64_t sub_100306B54(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13)
{
  _QWORD v14[6];
  _QWORD v15[6];
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100306C08;
  v15[3] = &unk_100926738;
  v16 = a3;
  v15[4] = a1;
  v15[5] = a2;
  v17 = a6;
  v18 = a7;
  v19 = a8;
  v20 = a9;
  v21 = a10;
  v22 = a11;
  v23 = a12;
  v24 = a13;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100306D04;
  v14[3] = &unk_100918090;
  v14[4] = a4;
  v14[5] = a5;
  return sub_100042FD0(a1, 203, 1, v15, v14);
}

uint64_t sub_100306C08(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v4;
  int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 32);
  LOBYTE(a2) = *(_BYTE *)(a1 + 48);
  LODWORD(v2) = vcvtpd_s64_f64((double)*(unint64_t *)&a2 / 1.25);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 2440))(v4))
    return sub_1001F7EB8(*(_QWORD *)(a1 + 40), v2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 2432))(v4);
  v7 = *(_QWORD *)(a1 + 40);
  if (v6)
    return sub_1001F7FEC(v7);
  else
    return sub_1001F7E24(v7);
}

uint64_t sub_100306D04(uint64_t result)
{
  **(_BYTE **)(result + 32) = xmmword_100991B70;
  **(_BYTE **)(result + 40) = BYTE1(xmmword_100991B70);
  return result;
}

uint64_t sub_100306D28(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xCCu);
}

uint64_t sub_100306D74(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v5;
  const char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v13;
  char v15;
  _QWORD v16[2];
  uint8_t buf[4];
  const char *v18;

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 72);
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v6 = sub_1000438E4(a1, 204);
    *(_DWORD *)buf = 136446210;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
  }
  if (!sub_1000431F4(a1, 204))
  {
    v8 = 2;
    goto LABEL_19;
  }
  v15 = 0;
  sub_100043758(&v15);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2440))(a1))
  {
    v9 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v10 = "Error sending SensorIncreaseScanParams, sensor track V3 not supported ";
      v11 = v9;
      v12 = 2;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
    }
LABEL_13:
    v7 = 114;
    goto LABEL_14;
  }
  if (!a3)
  {
    v13 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v18) = 0;
      v10 = "Error sending SensorIncreaseScanParams, rssiIncreaseScanThreshold is disabled : %d ";
      v11 = v13;
      v12 = 8;
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  v7 = sub_1001F7F64();
LABEL_14:
  sub_10004339C(&v15);
  if (!v7)
  {
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100926C78);
    v7 = sub_1000433A4((uint64_t)off_100977A50, 204);
  }
  sub_1000445D4(a1, 0xCCu);
  v8 = v7 != 0;
  sub_100043728(&v15);
LABEL_19:
  sub_100034234((uint64_t)v16);
  return v8;
}

void sub_100306FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100306FFC(int a1, char a2, char a3)
{
  LOBYTE(xmmword_100991B70) = a2;
  BYTE1(xmmword_100991B70) = a3;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xCBu);
}

uint64_t sub_100307058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[6];
  _QWORD v6[6];

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1003070D4;
  v6[3] = &unk_100926758;
  v6[4] = a1;
  v6[5] = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003071AC;
  v5[3] = &unk_100918090;
  v5[4] = a3;
  v5[5] = a4;
  return sub_100042FD0(a1, 203, 1, v6, v5);
}

uint64_t sub_1003070D4(uint64_t a1)
{
  uint64_t v2;
  int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 2440))(v2))
    return sub_1001F7EB8(*(_QWORD *)(a1 + 40), 0);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2432))(v2);
  v5 = *(_QWORD *)(a1 + 40);
  if (v4)
    return sub_1001F7FEC(v5);
  else
    return sub_1001F7E24(v5);
}

uint64_t sub_1003071AC(uint64_t result)
{
  **(_BYTE **)(result + 32) = xmmword_100991B70;
  **(_BYTE **)(result + 40) = BYTE1(xmmword_100991B70);
  return result;
}

uint64_t sub_1003071D0(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xD6u);
}

uint64_t sub_10030721C(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8)
{
  _QWORD v9[5];
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;

  if (!a2)
    return 3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10030729C;
  v9[3] = &unk_100926778;
  v9[4] = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v14 = a7;
  v15 = a8;
  return sub_100042FD0(a1, 214, 1, v9, 0);
}

uint64_t sub_10030729C(uint64_t a1)
{
  char *v1;
  char v2;
  _QWORD v4[2];
  uint64_t v5;

  v5 = 0;
  v1 = *(char **)(a1 + 32);
  v2 = *v1;
  v4[0] = v1 + 1;
  v4[1] = *(_QWORD *)(a1 + 40);
  LODWORD(v5) = *(_DWORD *)(a1 + 48);
  BYTE4(v5) = v2;
  return sub_1001F82DC(v4);
}

uint64_t sub_1003072E8(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x1Eu);
}

uint64_t sub_100307334(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100307390;
  v3[3] = &unk_100926538;
  v3[4] = a2;
  return sub_100042FD0(a1, 30, 1, v3, 0);
}

uint64_t sub_100307390()
{
  return sub_1001F9C94();
}

uint64_t sub_1003073A0(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x1Fu);
}

uint64_t sub_1003073EC(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100307448;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 31, 1, v3, 0);
}

uint64_t sub_100307448()
{
  return sub_1001F9D1C();
}

uint64_t sub_10030745C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x20u);
}

uint64_t sub_1003074A8(uint64_t a1, uint64_t a2, char a3, char a4)
{
  _QWORD v5[5];
  char v6;
  char v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10030750C;
  v5[3] = &unk_1009265D8;
  v5[4] = a2;
  v6 = a3;
  v7 = a4;
  return sub_100042FD0(a1, 32, 1, v5, 0);
}

uint64_t sub_10030750C(uint64_t a1)
{
  return sub_1001F9AFC(*(unsigned __int16 **)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), (uint64_t)sub_10030745C);
}

uint64_t sub_100307528(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x28u);
}

uint64_t sub_100307574(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD v4[5];
  char v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003075D4;
  v4[3] = &unk_1009263D8;
  v4[4] = a2;
  v5 = a3;
  return sub_100042FD0(a1, 40, 1, v4, 0);
}

uint64_t sub_1003075D4(uint64_t a1)
{
  return sub_1001F9F84(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), (uint64_t)sub_100307528);
}

uint64_t sub_1003075EC(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xACu);
}

uint64_t sub_100307638(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100307694;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 172, 1, v3, 0);
}

uint64_t sub_100307694()
{
  return sub_1001F6110();
}

uint64_t sub_1003076A4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x36u);
}

uint64_t sub_1003076F0(uint64_t a1, void *a2, char a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  char v10;
  uint64_t v11;
  unsigned __int8 v12[16];

  v5 = a2;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100926CB8);
  v11 = 0;
  v6 = off_1009778A0;
  sub_100030BCC(v12, v5);
  if (sub_100623C54((uint64_t)v6, v12, &v11))
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100307828;
    v9[3] = &unk_1009263D8;
    v9[4] = v11;
    v10 = a3;
    v7 = sub_100042FD0(a1, 54, 1, v9, 0);
  }
  else
  {
    v7 = 7;
  }

  return v7;
}

void sub_10030780C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100307828(uint64_t a1)
{
  return sub_1001FA25C(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), (uint64_t)sub_1003076A4);
}

uint64_t sub_100307840(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xB7u);
}

uint64_t sub_10030788C(uint64_t a1, char a2, __int16 a3, char a4, __int16 a5, char a6)
{
  _QWORD v7[4];
  __int16 v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1003078F8;
  v7[3] = &unk_1009265F8;
  v10 = a2;
  v8 = a3;
  v11 = a4;
  v9 = a5;
  v12 = a6;
  return sub_100042FD0(a1, 183, 1, v7, 0);
}

uint64_t sub_1003078F8()
{
  return sub_1001F6220();
}

uint64_t sub_10030791C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xBAu);
}

uint64_t sub_100307968(uint64_t a1, char a2, __int16 a3, char a4)
{
  _QWORD v5[4];
  __int16 v6;
  char v7;
  char v8;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003079CC;
  v5[3] = &unk_100926678;
  v7 = a2;
  v6 = a3;
  v8 = a4;
  return sub_100042FD0(a1, 186, 1, v5, 0);
}

uint64_t sub_1003079CC()
{
  return sub_1001F62A8();
}

uint64_t sub_1003079E8(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xC2u);
}

uint64_t sub_100307A34(uint64_t a1, __int16 a2, char a3, char a4)
{
  _QWORD v5[5];
  __int16 v6;
  char v7;
  char v8;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100307A9C;
  v5[3] = &unk_100926798;
  v5[4] = a1;
  v6 = a2;
  v7 = a4;
  v8 = a3;
  return sub_100042FD0(a1, 194, 1, v5, 0);
}

uint64_t sub_100307A9C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  int v4;
  int v5;
  int v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = sub_1000438E4(*(_QWORD *)(a1 + 32), 194);
    v4 = *(unsigned __int16 *)(a1 + 40);
    v5 = *(unsigned __int8 *)(a1 + 42);
    v7 = 136446722;
    v8 = v3;
    v9 = 1024;
    v10 = v4;
    v11 = 1024;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending: %{public}s LM Handle 0x%02x  enable %d", (uint8_t *)&v7, 0x18u);
  }
  return sub_1001F6A28();
}

uint64_t sub_100307B7C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xC3u);
}

uint64_t sub_100307BC8(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100307C24;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 195, 1, v3, 0);
}

uint64_t sub_100307C24()
{
  return sub_1001F6B38();
}

uint64_t sub_100307C3C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xB9u);
}

uint64_t sub_100307C88(uint64_t a1, char a2, __int16 a3)
{
  _QWORD v4[4];
  __int16 v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100307CE8;
  v4[3] = &unk_1009267D8;
  v6 = a2;
  v5 = a3;
  return sub_100042FD0(a1, 185, 1, v4, 0);
}

uint64_t sub_100307CE8()
{
  return sub_1001F6330();
}

uint64_t sub_100307D00(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xBBu);
}

uint64_t sub_100307D4C(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD v4[5];
  char v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100307DAC;
  v4[3] = &unk_1009263D8;
  v5 = a2;
  v4[4] = a3;
  return sub_100042FD0(a1, 187, 1, v4, 0);
}

uint64_t sub_100307DAC(uint64_t a1)
{
  return sub_1001F63B8(*(unsigned __int8 *)(a1 + 40), *(_QWORD *)(a1 + 32), (uint64_t)sub_100307D00);
}

uint64_t sub_100307DC4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xBDu);
}

uint64_t sub_100307E10(uint64_t a1, int a2, int a3, int a4)
{
  _QWORD v7[5];
  int v8;
  int v9;
  char v10;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100307E80;
  v7[3] = &unk_1009263F8;
  if (!a2)
    a3 = 0;
  if (!a2)
    a4 = 0;
  v7[4] = a1;
  v10 = a2;
  v8 = a3;
  v9 = a4;
  return sub_100042FD0(a1, 189, 1, v7, 0);
}

uint64_t sub_100307E80(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = sub_1000438E4(*(_QWORD *)(a1 + 32), 189);
    v4 = *(unsigned __int8 *)(a1 + 48);
    v5 = *(_DWORD *)(a1 + 40);
    v6 = *(_DWORD *)(a1 + 44);
    v8 = 136446978;
    v9 = v3;
    v10 = 1024;
    v11 = v4;
    v12 = 1024;
    v13 = v5;
    v14 = 1024;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending: %{public}s enable %d, duration %d, interval %d", (uint8_t *)&v8, 0x1Eu);
  }
  return sub_1001F6510();
}

uint64_t sub_100307F60(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xBEu);
}

uint64_t sub_100307FAC(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100308008;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 190, 1, v3, 0);
}

uint64_t sub_100308008()
{
  return sub_1001F6598();
}

uint64_t sub_100308018(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xBFu);
}

uint64_t sub_100308064(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD v4[5];
  char v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003080C4;
  v4[3] = &unk_1009263D8;
  v5 = a2;
  v4[4] = a3;
  return sub_100042FD0(a1, 191, 1, v4, 0);
}

uint64_t sub_1003080C4()
{
  return sub_1001F6620();
}

uint64_t sub_1003080DC(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xC0u);
}

uint64_t sub_100308128(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100308184;
  v3[3] = &unk_100926538;
  v3[4] = a2;
  return sub_100042FD0(a1, 192, 1, v3, 0);
}

uint64_t sub_100308184()
{
  return sub_1001F66A8();
}

uint64_t sub_100308194(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xF5u);
}

uint64_t sub_1003081E0(uint64_t a1, void *a2, char a3, char a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  _QWORD v11[5];
  char v12;
  char v13;
  uint64_t v14;
  unsigned __int8 v15[16];

  v7 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2760))(a1))
  {
    v14 = 0;
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100926CB8);
    v8 = off_1009778A0;
    sub_100030BCC(v15, v7);
    if (sub_100623C54((uint64_t)v8, v15, &v14))
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_100308348;
      v11[3] = &unk_1009265D8;
      v12 = a3;
      v13 = a4;
      v11[4] = v14;
      v9 = sub_100042FD0(a1, 245, 1, v11, 0);
    }
    else
    {
      v9 = 7;
    }
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_100308328(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100308348(uint64_t a1)
{
  unsigned int v2;
  __int16 v4;

  v4 = 0;
  if (*(_BYTE *)(a1 + 40))
  {
    LOBYTE(v4) = sub_10020691C(0);
    v2 = 1;
  }
  else
  {
    v2 = 0;
  }
  if (*(_BYTE *)(a1 + 41))
    *(_BYTE *)((unint64_t)&v4 | v2) = sub_10020691C(1u);
  return sub_1001FE3F4();
}

uint64_t sub_1003083D0(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x10Cu);
}

uint64_t sub_10030841C(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  unsigned int v7;
  _QWORD v9[4];
  unsigned int v10;

  v6 = sub_1000438A4();
  v7 = a3 & 0xFFFFFFFE;
  if (a2)
    v7 = a3 & 0xFFFFFFFE | a2 | 0xA;
  if ((*(_DWORD *)(v6 + 712) - 1) >= 0x7CF)
    v7 = a3 & 0xFFFFFFFE | a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1003084C4;
  v9[3] = &unk_100926678;
  v10 = v7;
  return sub_100042FD0(a1, 268, 1, v9, 0);
}

uint64_t sub_1003084C4()
{
  return sub_1001FBA14();
}

uint64_t sub_1003084D4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x10Eu);
}

uint64_t sub_100308520(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10030857C;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 270, 1, v3, 0);
}

uint64_t sub_10030857C()
{
  return sub_1001FBA9C();
}

uint64_t sub_10030858C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xF6u);
}

uint64_t sub_1003085D8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;
  unsigned __int8 v9[16];

  v3 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2760))(a1))
  {
    v8 = 0;
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100926CB8);
    v4 = off_1009778A0;
    sub_100030BCC(v9, v3);
    if (sub_100623C54((uint64_t)v4, v9, &v8))
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_100308728;
      v7[3] = &unk_100926538;
      v7[4] = v8;
      v5 = sub_100042FD0(a1, 246, 1, v7, 0);
    }
    else
    {
      v5 = 7;
    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_100308708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100308728()
{
  return sub_1001FE504();
}

uint64_t sub_100308740(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;
  unsigned __int8 v9[16];

  v3 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2760))(a1))
  {
    v8 = 0;
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100926CB8);
    v4 = off_1009778A0;
    sub_100030BCC(v9, v3);
    if (sub_100623C54((uint64_t)v4, v9, &v8))
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_100308890;
      v7[3] = &unk_100926538;
      v7[4] = v8;
      v5 = sub_100042FD0(a1, 246, 1, v7, 0);
    }
    else
    {
      v5 = 7;
    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_100308870(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100308890()
{
  return sub_1001FE504();
}

uint64_t sub_1003088AC(uint64_t a1)
{
  return sub_100042FD0(a1, 28, 0, &stru_1009267F8, &stru_100926818);
}

int sub_1003088C8(id a1)
{
  return sub_1001F9634();
}

uint64_t sub_1003088D8(uint64_t a1, const void *a2, unsigned int a3, const void *a4, unsigned int a5)
{
  _QWORD **v10;
  _QWORD *v11;
  _QWORD **v12;
  BOOL v13;
  uint64_t (**v15)();
  unsigned int *v16;
  uint64_t (**v17)();
  unsigned int *v18;
  _QWORD **v19;
  _QWORD *v20[2];
  _QWORD v21[2];

  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 8);
  v19 = 0;
  v20[0] = 0;
  v20[1] = 0;
  sub_10031F434((uint64_t *)&v19, a1 + 136);
  sub_100034264((uint64_t)v21);
  v17 = 0;
  v18 = 0;
  sub_10003994C(&v17, a2, a3);
  v15 = 0;
  v16 = 0;
  sub_10003994C(&v15, a4, a5);
  v10 = v19;
  if (v19 != v20)
  {
    do
    {
      (*(void (**)(_QWORD *, uint64_t (***)(), uint64_t (***)()))*v10[4])(v10[4], &v17, &v15);
      v11 = v10[1];
      if (v11)
      {
        do
        {
          v12 = (_QWORD **)v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD **)v10[2];
          v13 = *v12 == v10;
          v10 = v12;
        }
        while (!v13);
      }
      v10 = v12;
    }
    while (v12 != v20);
  }
  v15 = &off_100918258;
  if (v16)
    sub_100056AAC(v16);
  v17 = &off_100918258;
  if (v18)
    sub_100056AAC(v18);
  sub_10001A82C((uint64_t)&v19, v20[0]);
  sub_100034234((uint64_t)v21);
  return 0;
}

void sub_100308A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, ...)
{
  uint64_t v7;
  va_list va;
  _QWORD *v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD *);
  v10 = va_arg(va1, _QWORD);
  if (a6)
    sub_100056AAC(a6);
  sub_10001A82C((uint64_t)va, v9);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100308A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD **v13;
  BOOL v14;
  _QWORD **v16;
  _QWORD *v17[2];
  _QWORD v18[2];

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 8);
  v16 = 0;
  v17[0] = 0;
  v17[1] = 0;
  sub_10031F434((uint64_t *)&v16, a1 + 136);
  sub_100034264((uint64_t)v18);
  v10 = v16;
  if (v16 != v17)
  {
    v11 = a2 & 0xFFFFFFFFFFFFLL;
    do
    {
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*v10[4] + 72))(v10[4], v11, a3, a4, a5);
      v12 = v10[1];
      if (v12)
      {
        do
        {
          v13 = (_QWORD **)v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD **)v10[2];
          v14 = *v13 == v10;
          v10 = v13;
        }
        while (!v14);
      }
      v10 = v13;
    }
    while (v13 != v17);
  }
  sub_10001A82C((uint64_t)&v16, v17[0]);
  sub_100034234((uint64_t)v18);
  return 0;
}

void sub_100308B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  sub_10001A82C((uint64_t)va, v5);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100308BA4(uint64_t a1, char a2)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100926CB8);
  sub_10063F4E8((uint64_t)off_1009778A0, a1, a2);
}

uint64_t sub_100308BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 3072))(v8, a1, a2, a3, a4);
}

void sub_100308C48(uint64_t a1, char a2, uint64_t a3, int a4, __int16 a5, int a6, int a7)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100926CB8);
  sub_10063F5A4((uint64_t)off_1009778A0, a1, a2, a3, a4, a5, a6, a7);
}

void sub_100308CE0(uint64_t a1, int a2, int a3, int a4, int a5, char *a6, unsigned int a7, char a8, char a9, char a10, __int16 a11, char a12, char a13, char a14)
{
  char v14;
  int v19;
  char *v21;
  char v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char v26;
  int v27;
  int v29;
  char v30;
  int v31;
  int v32;

  v14 = a7;
  v19 = a2;
  v21 = a6;
  if (a7 >= 2)
  {
    v23 = a6 + 1;
    v22 = *a6;
    v24 = a7 - 1;
    v21 = a6;
    v25 = a6 + 1;
    do
    {
      v27 = *v25++;
      v26 = v27;
      if (v27 < v22)
      {
        v22 = v26;
        v21 = v23;
      }
      v23 = v25;
      --v24;
    }
    while (v24);
  }
  if (qword_1009778A8 != -1)
  {
    v31 = a4;
    v32 = a5;
    v29 = a3;
    v30 = a8;
    dispatch_once(&qword_1009778A8, &stru_100926CB8);
    v19 = a2;
    a3 = v29;
    a8 = v30;
    a4 = v31;
    a5 = v32;
  }
  sub_10061F1CC((uint64_t)off_1009778A0, a1, v19, a3, a4, a5, (uint64_t)a6, v14, a8, a9, a10, *v21, a11, 0, a13, a14);
}

void sub_100308E18(uint64_t a1, int a2, char a3)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100926CB8);
  sub_10063F91C((uint64_t)off_1009778A0, a1, a2 == 2, a3);
}

uint64_t sub_100308E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10034FCFC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a1, a2);
}

void sub_100308EB8(uint64_t a1, int a2)
{
  char v2;

  if (a2)
  {
    v2 = a2;
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100926C78);
    sub_1004A391C((uint64_t)off_100977A50, a1, v2);
  }
}

uint64_t sub_100308F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 3024))(v10, a1, a2, a3, a4, a5);
}

uint64_t sub_100308F74(_BYTE *a1, unsigned int a2)
{
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD v8[14];

  memset(v8, 0, 223);
  sub_1000438A4();
  if (sub_100331430())
    v4 = 217;
  else
    v4 = 215;
  sub_1000438A4();
  if (!sub_100331430())
    v4 -= 2;
  if ((*a1 & 0x80) != 0)
  {
    if (a2 < 0xC9)
      v4 -= 18;
  }
  else if ((*a1 & 0x60) != 0
         && (v5 = sub_10003BE44(), !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 384))(v5)))
  {
    v4 -= 34;
  }
  else
  {
    v4 -= 38;
  }
  if (a2 != v4)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Chipsets/LEHardwareModel.cpp");
  memcpy(v8, a1, v4);
  v6 = sub_1000438A4();
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v6 + 3032))(v6, v8);
  return v4;
}

uint64_t sub_1003090A8(void *__src, size_t __n)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD v5[14];

  memset(&v5[11], 0, 44);
  if ((_DWORD)__n == 173)
    v2 = 173;
  else
    v2 = 220;
  memset(v5, 0, 176);
  if ((_DWORD)v2 != (_DWORD)__n)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Chipsets/LEHardwareModel.cpp");
  memcpy(v5, __src, __n);
  v3 = sub_1000438A4();
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v3 + 3040))(v3, v5);
  return v2;
}

uint64_t sub_100309170(_OWORD *a1, int a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v9[10];
  _OWORD v10[2];

  if (a2 != 189)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Chipsets/LEHardwareModel.cpp");
  v2 = a1[9];
  v9[8] = a1[8];
  v9[9] = v2;
  v10[0] = a1[10];
  *(_OWORD *)((char *)v10 + 13) = *(_OWORD *)((char *)a1 + 173);
  v3 = a1[5];
  v9[4] = a1[4];
  v9[5] = v3;
  v4 = a1[7];
  v9[6] = a1[6];
  v9[7] = v4;
  v5 = a1[1];
  v9[0] = *a1;
  v9[1] = v5;
  v6 = a1[3];
  v9[2] = a1[2];
  v9[3] = v6;
  v7 = sub_1000438A4();
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v7 + 3048))(v7, v9);
  return 189;
}

uint64_t sub_100309224(__int128 *a1, int a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;

  if (a2 != 24)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Chipsets/LEHardwareModel.cpp");
  v4 = *a1;
  v5 = *((_QWORD *)a1 + 2);
  v2 = sub_1000438A4();
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v2 + 3056))(v2, &v4);
  return 24;
}

uint64_t sub_100309284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 3064))(v6, a1, a2, a3);
}

void sub_1003092C8(__int128 *a1)
{
  _OWORD *v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[6];
  _QWORD v18[6];
  uint64_t v19;
  _OWORD *v20;

  if (sub_100065478())
  {
    v2 = malloc_type_malloc(0xFBuLL, 0x10000404B49FA39uLL);
    if (v2)
    {
      v3 = v2;
      v4 = *a1;
      v5 = a1[1];
      v6 = a1[3];
      v2[2] = a1[2];
      v2[3] = v6;
      *v2 = v4;
      v2[1] = v5;
      v7 = a1[4];
      v8 = a1[5];
      v9 = a1[7];
      v2[6] = a1[6];
      v2[7] = v9;
      v2[4] = v7;
      v2[5] = v8;
      v10 = a1[8];
      v11 = a1[9];
      v12 = a1[11];
      v2[10] = a1[10];
      v2[11] = v12;
      v2[8] = v10;
      v2[9] = v11;
      v13 = a1[12];
      v14 = a1[13];
      v15 = a1[14];
      *(_OWORD *)((char *)v2 + 235) = *(__int128 *)((char *)a1 + 235);
      v2[13] = v14;
      v2[14] = v15;
      v2[12] = v13;
      v18[0] = 0;
      v18[1] = v18;
      v18[2] = 0x4012000000;
      v18[3] = sub_100062570;
      v18[4] = nullsub_19;
      v19 = 0;
      v20 = 0;
      v18[5] = &unk_10083E079;
      sub_10047D368(&v19, 0);
      v20 = v3;
      v16 = sub_1000419F4();
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_100309404;
      v17[3] = &unk_100919528;
      v17[4] = v18;
      v17[5] = v3;
      sub_100041A34(v16, v17);
      _Block_object_dispose(v18, 8);
    }
  }
}

void sub_1003093EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100309404(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100065478();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 120))(v2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  free(*(void **)(a1 + 40));
}

void sub_100309440(_OWORD *a1)
{
  _OWORD *v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[6];
  _QWORD v16[6];
  uint64_t v17;
  _OWORD *v18;

  if (sub_100065478())
  {
    v2 = malloc_type_malloc(0xDCuLL, 0x1000040EC76111FuLL);
    if (v2)
    {
      v3 = v2;
      v4 = a1[1];
      *v2 = *a1;
      v2[1] = v4;
      v5 = a1[2];
      v6 = a1[3];
      v7 = a1[5];
      v2[4] = a1[4];
      v2[5] = v7;
      v2[2] = v5;
      v2[3] = v6;
      v8 = a1[6];
      v9 = a1[7];
      v10 = a1[9];
      v2[8] = a1[8];
      v2[9] = v10;
      v2[6] = v8;
      v2[7] = v9;
      v11 = a1[10];
      v12 = a1[11];
      v13 = a1[12];
      *(_OWORD *)((char *)v2 + 204) = *(_OWORD *)((char *)a1 + 204);
      v2[11] = v12;
      v2[12] = v13;
      v2[10] = v11;
      v16[0] = 0;
      v16[1] = v16;
      v16[2] = 0x4012000000;
      v16[3] = sub_100309574;
      v16[4] = nullsub_200;
      v17 = 0;
      v18 = 0;
      v16[5] = &unk_10083E079;
      sub_10047D368(&v17, 1);
      v18 = v3;
      v14 = sub_1000419F4();
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_100309584;
      v15[3] = &unk_100919528;
      v15[4] = v16;
      v15[5] = v3;
      sub_100041A34(v14, v15);
      _Block_object_dispose(v16, 8);
    }
  }
}

void sub_10030955C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_100309574(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_100309584(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100065478();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 120))(v2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  free(*(void **)(a1 + 40));
}

void sub_1003095C0(__int128 *a1)
{
  _OWORD *v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _QWORD v8[6];
  _QWORD v9[6];
  uint64_t v10;
  _OWORD *v11;

  if (sub_100065478())
  {
    v2 = malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
    if (v2)
    {
      v3 = v2;
      v4 = *a1;
      v5 = a1[1];
      v6 = a1[3];
      v2[2] = a1[2];
      v2[3] = v6;
      *v2 = v4;
      v2[1] = v5;
      v9[0] = 0;
      v9[1] = v9;
      v9[2] = 0x4012000000;
      v9[3] = sub_1003096C4;
      v9[4] = nullsub_201;
      v10 = 0;
      v11 = 0;
      v9[5] = &unk_10083E079;
      sub_10047D368(&v10, 2);
      v11 = v3;
      v7 = sub_1000419F4();
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_1003096D4;
      v8[3] = &unk_100919528;
      v8[4] = v9;
      v8[5] = v3;
      sub_100041A34(v7, v8);
      _Block_object_dispose(v9, 8);
    }
  }
}

void sub_1003096AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1003096C4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1003096D4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100065478();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 120))(v2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  free(*(void **)(a1 + 40));
}

void sub_100309710(_OWORD *a1)
{
  _OWORD *v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[6];
  _QWORD v16[6];
  uint64_t v17;
  _OWORD *v18;

  if (sub_100065478())
  {
    v2 = malloc_type_malloc(0xE0uLL, 0x10000405DF52C91uLL);
    if (v2)
    {
      v3 = v2;
      v4 = a1[1];
      *v2 = *a1;
      v2[1] = v4;
      v5 = a1[2];
      v6 = a1[3];
      v7 = a1[5];
      v2[4] = a1[4];
      v2[5] = v7;
      v2[2] = v5;
      v2[3] = v6;
      v8 = a1[6];
      v9 = a1[7];
      v10 = a1[9];
      v2[8] = a1[8];
      v2[9] = v10;
      v2[6] = v8;
      v2[7] = v9;
      v11 = a1[10];
      v12 = a1[11];
      v13 = a1[13];
      v2[12] = a1[12];
      v2[13] = v13;
      v2[10] = v11;
      v2[11] = v12;
      v16[0] = 0;
      v16[1] = v16;
      v16[2] = 0x4012000000;
      v16[3] = sub_10030983C;
      v16[4] = nullsub_202;
      v17 = 0;
      v18 = 0;
      v16[5] = &unk_10083E079;
      sub_10047D368(&v17, 3);
      v18 = v3;
      v14 = sub_1000419F4();
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_10030984C;
      v15[3] = &unk_100919528;
      v15[4] = v16;
      v15[5] = v3;
      sub_100041A34(v14, v15);
      _Block_object_dispose(v16, 8);
    }
  }
}

void sub_100309824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_10030983C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_10030984C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100065478();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 120))(v2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  free(*(void **)(a1 + 40));
}

void sub_100309888(_OWORD *a1)
{
  _OWORD *v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[6];
  _QWORD v16[6];
  uint64_t v17;
  _OWORD *v18;

  if (sub_100065478())
  {
    v2 = malloc_type_malloc(0xDAuLL, 0x10000400A093148uLL);
    if (v2)
    {
      v3 = v2;
      v4 = a1[1];
      *v2 = *a1;
      v2[1] = v4;
      v5 = a1[2];
      v6 = a1[3];
      v7 = a1[5];
      v2[4] = a1[4];
      v2[5] = v7;
      v2[2] = v5;
      v2[3] = v6;
      v8 = a1[6];
      v9 = a1[7];
      v10 = a1[9];
      v2[8] = a1[8];
      v2[9] = v10;
      v2[6] = v8;
      v2[7] = v9;
      v11 = a1[10];
      v12 = a1[11];
      v13 = a1[12];
      *(_OWORD *)((char *)v2 + 202) = *(_OWORD *)((char *)a1 + 202);
      v2[11] = v12;
      v2[12] = v13;
      v2[10] = v11;
      v16[0] = 0;
      v16[1] = v16;
      v16[2] = 0x4012000000;
      v16[3] = sub_1003099BC;
      v16[4] = nullsub_203;
      v17 = 0;
      v18 = 0;
      v16[5] = &unk_10083E079;
      sub_10047D368(&v17, 4);
      v18 = v3;
      v14 = sub_1000419F4();
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_1003099CC;
      v15[3] = &unk_100919528;
      v15[4] = v16;
      v15[5] = v3;
      sub_100041A34(v14, v15);
      _Block_object_dispose(v16, 8);
    }
  }
}

void sub_1003099A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1003099BC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1003099CC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100065478();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 120))(v2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  free(*(void **)(a1 + 40));
}

void sub_100309A08(__int128 *a1)
{
  _OWORD *v2;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[6];
  _QWORD v17[6];
  uint64_t v18;
  _OWORD *v19;

  if (sub_100065478())
  {
    v2 = malloc_type_malloc(0xF0uLL, 0x100004019FCA701uLL);
    if (v2)
    {
      v3 = v2;
      v4 = *a1;
      v5 = a1[2];
      v2[1] = a1[1];
      v2[2] = v5;
      *v2 = v4;
      v6 = a1[3];
      v7 = a1[4];
      v8 = a1[6];
      v2[5] = a1[5];
      v2[6] = v8;
      v2[3] = v6;
      v2[4] = v7;
      v9 = a1[7];
      v10 = a1[8];
      v11 = a1[10];
      v2[9] = a1[9];
      v2[10] = v11;
      v2[7] = v9;
      v2[8] = v10;
      v12 = a1[11];
      v13 = a1[12];
      v14 = a1[14];
      v2[13] = a1[13];
      v2[14] = v14;
      v2[11] = v12;
      v2[12] = v13;
      v17[0] = 0;
      v17[1] = v17;
      v17[2] = 0x4012000000;
      v17[3] = sub_100309B3C;
      v17[4] = nullsub_204;
      v18 = 0;
      v19 = 0;
      v17[5] = &unk_10083E079;
      sub_10047D368(&v18, 5);
      v19 = v3;
      v15 = sub_1000419F4();
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_100309B4C;
      v16[3] = &unk_100919528;
      v16[4] = v17;
      v16[5] = v3;
      sub_100041A34(v15, v16);
      _Block_object_dispose(v17, 8);
    }
  }
}

void sub_100309B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_100309B3C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_100309B4C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100065478();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 120))(v2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  free(*(void **)(a1 + 40));
}

uint64_t sub_100309B88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 3080))(v4, a1, a2);
}

uint64_t sub_100309BBC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 3088))(v2, a1);
}

uint64_t sub_100309BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 3096))(v4, a1, a2);
}

uint64_t sub_100309C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 3104))(v10, a1, a2, a3, a4, a5);
}

uint64_t sub_100309C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 3112))(v4, a1, a2);
}

uint64_t sub_100309CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 3120))(v4, a1, a2);
}

uint64_t sub_100309CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 3128))(v4, a1, a2);
}

uint64_t sub_100309D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 3136))(v6, a1, a2, a3);
}

uint64_t sub_100309D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 3144))(v4, a1, a2);
}

uint64_t sub_100309D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 a8)
{
  uint64_t v16;
  __int16 v18;

  v16 = sub_1000438A4();
  v18 = a8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16))(*(_QWORD *)v16 + 3152))(v16, a1, a2, a3, a4, a5, a6, a7, v18);
}

uint64_t sub_100309E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 3160))(v8, a1, a2, a3, a4);
}

uint64_t sub_100309E64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 3168))(v4, a1, a2);
}

uint64_t sub_100309E98(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 3176))(v2, a1);
}

uint64_t sub_100309EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 3200))(v4, a1, a2);
}

uint64_t sub_100309EF8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 3208))(v2, a1);
}

uint64_t sub_100309F24(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 3216))(v2, a1);
}

uint64_t sub_100309F50(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 3232))(v2, a1);
}

uint64_t sub_100309F7C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 3224))(v2, a1);
}

uint64_t sub_100309FA8(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[10];

  memset(&v13[1], 0, 143);
  v12 = 0u;
  v13[0] = 0u;
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  *(_WORD *)((char *)&v9 + 7) = *(_WORD *)(a1 + 85);
  BYTE6(v9) = *(_BYTE *)(a1 + 87);
  WORD5(v9) = *(_WORD *)(a1 + 88);
  BYTE9(v9) = *(_BYTE *)(a1 + 90);
  WORD5(v11) = *(_DWORD *)(a1 + 14);
  WORD4(v11) = *(_WORD *)(a1 + 4);
  HIWORD(v11) = *(_DWORD *)(a1 + 18) + WORD5(v11);
  WORD6(v10) = *(_DWORD *)(a1 + 26);
  v1 = *(_DWORD *)(a1 + 30);
  HIWORD(v10) = v1;
  WORD6(v11) = *(_DWORD *)(a1 + 81);
  WORD3(v12) = *(_DWORD *)(a1 + 38) + *(_DWORD *)(a1 + 22) + *(_DWORD *)(a1 + 54);
  WORD2(v12) = *(_DWORD *)(a1 + 42) + WORD6(v10) + *(_DWORD *)(a1 + 58);
  v2 = *(_DWORD *)(a1 + 62);
  v3 = *(_DWORD *)(a1 + 46) + v1;
  WORD3(v13[0]) = v3 + *(_DWORD *)(a1 + 34) + *(_DWORD *)(a1 + 50) + v2 + *(_DWORD *)(a1 + 66);
  WORD1(v13[0]) = v3 + v2;
  WORD2(v13[1]) = *(_WORD *)(a1 + 99);
  *(_QWORD *)((char *)v13 + 12) = *(_QWORD *)(a1 + 91);
  *(_OWORD *)((char *)&v13[1] + 6) = *(_OWORD *)(a1 + 101);
  v4 = *(_OWORD *)(a1 + 117);
  v5 = *(_OWORD *)(a1 + 133);
  v6 = *(_OWORD *)(a1 + 149);
  *(_OWORD *)((char *)&v13[5] + 5) = *(_OWORD *)(a1 + 164);
  *(_OWORD *)((char *)&v13[4] + 6) = v6;
  *(_OWORD *)((char *)&v13[3] + 6) = v5;
  *(_OWORD *)((char *)&v13[2] + 6) = v4;
  v7 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v7 + 3032))(v7, &v9);
}

uint64_t sub_10030A124(uint64_t a1)
{
  __int16 v1;
  __int16 v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v9[10];

  v5 = 0u;
  v6 = 0u;
  memset(&v9[1], 0, 143);
  v8 = 0u;
  v9[0] = 0u;
  v7 = 0u;
  WORD1(v5) = *(_WORD *)a1;
  v1 = *(_WORD *)(a1 + 2);
  v2 = *(_WORD *)(a1 + 4);
  LOWORD(v6) = v2 + v1;
  WORD1(v6) = v2;
  WORD3(v6) = *(_WORD *)(a1 + 8);
  WORD6(v5) = *(_WORD *)(a1 + 12);
  *(_WORD *)((char *)&v5 + 7) = *(_WORD *)(a1 + 15);
  BYTE6(v5) = *(_BYTE *)(a1 + 17);
  WORD5(v5) = *(_WORD *)(a1 + 18);
  BYTE9(v5) = BYTE11(v5);
  *(_QWORD *)((char *)v9 + 12) = *(_QWORD *)(a1 + 21);
  WORD2(v9[1]) = *(_WORD *)(a1 + 29);
  *(_OWORD *)((char *)&v9[1] + 6) = *(_OWORD *)(a1 + 31);
  *(_OWORD *)((char *)&v9[5] + 5) = *(_OWORD *)(a1 + 94);
  *(_OWORD *)((char *)&v9[4] + 6) = *(_OWORD *)(a1 + 79);
  *(_OWORD *)((char *)&v9[3] + 6) = *(_OWORD *)(a1 + 63);
  *(_OWORD *)((char *)&v9[2] + 6) = *(_OWORD *)(a1 + 47);
  if (*(_BYTE *)(a1 + 14) == 2)
    HIWORD(v5) = v1;
  v3 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v3 + 3032))(v3, &v5);
}

void sub_10030A24C(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100926CD8);
  sub_10053494C(qword_100977900, *(_WORD *)a1, *(_BYTE *)(a1 + 23), *(_WORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 15) / (*(unsigned __int8 *)(a1 + 7) + *(unsigned __int8 *)(a1 + 15)), *(_BYTE *)(a1 + 3), *(_BYTE *)(a1 + 27), *(_BYTE *)(a1 + 28), *(_WORD *)(a1 + 29), HIBYTE(*(_WORD *)(a1 + 29)));
}

void sub_10030A2D4(uint64_t a1)
{
  if (qword_100977908 != -1)
    dispatch_once(&qword_100977908, &stru_100926CD8);
  sub_100534A34(qword_100977900, a1);
}

uint64_t sub_10030A324(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 3184))(v4, a1, a2);
}

uint64_t sub_10030A358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 3192))(v8, a1, a2, a3, a4);
}

uint64_t sub_10030A3A4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 1096))(v2, a1);
}

uint64_t sub_10030A3D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 1104))(v2, a1);
}

uint64_t sub_10030A3FC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 1112))(v2, a1);
}

uint64_t sub_10030A428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  v8 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 1120))(v8, a1 & 0xFFFFFFFFFFFFLL, a2, a3, a4);
}

uint64_t sub_10030A474(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 1128))(v2, a1);
}

uint64_t sub_10030A4A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 3240))(v4, a1, a2);
}

uint64_t sub_10030A4D4(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];

  v4 = sub_1000438A4();
  v5 = a2[3];
  v8[2] = a2[2];
  v8[3] = v5;
  v8[4] = a2[4];
  v6 = a2[1];
  v8[0] = *a2;
  v8[1] = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v4 + 3248))(v4, a1, v8);
}

uint64_t sub_10030A558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  v12 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12
                                                                                                  + 3256))(v12, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10030A5BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 3264))(v10, a1, a2, a3, a4, a5);
}

uint64_t sub_10030A618(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 3272))(v2, a1);
}

uint64_t sub_10030A644(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 3280))(v2, a1);
}

uint64_t sub_10030A670(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 3288))(v2, a1);
}

uint64_t sub_10030A69C(uint64_t a1, void (**a2)(uint64_t a1, char a2))
{
  int v3;
  uint64_t result;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (!a2)
    return 1;
  *a2 = sub_100308BA4;
  a2[1] = (void (*)(uint64_t, char))sub_100308BFC;
  a2[42] = (void (*)(uint64_t, char))sub_100308CE0;
  a2[43] = (void (*)(uint64_t, char))sub_100308C48;
  a2[2] = (void (*)(uint64_t, char))sub_100308E18;
  a2[3] = (void (*)(uint64_t, char))sub_100308E84;
  a2[4] = (void (*)(uint64_t, char))sub_100308EB8;
  a2[5] = (void (*)(uint64_t, char))sub_100308F18;
  a2[6] = (void (*)(uint64_t, char))sub_100309284;
  a2[7] = (void (*)(uint64_t, char))sub_1003092C8;
  a2[8] = (void (*)(uint64_t, char))sub_100309440;
  a2[9] = (void (*)(uint64_t, char))sub_1003095C0;
  a2[10] = (void (*)(uint64_t, char))sub_100309710;
  a2[11] = (void (*)(uint64_t, char))sub_100309888;
  a2[30] = (void (*)(uint64_t, char))sub_100309FA8;
  a2[31] = (void (*)(uint64_t, char))sub_10030A124;
  a2[12] = (void (*)(uint64_t, char))sub_100309A08;
  a2[13] = (void (*)(uint64_t, char))sub_100308F74;
  a2[14] = (void (*)(uint64_t, char))sub_1003090A8;
  a2[15] = (void (*)(uint64_t, char))sub_100309170;
  a2[16] = (void (*)(uint64_t, char))sub_100309B88;
  a2[17] = (void (*)(uint64_t, char))sub_100309BBC;
  a2[18] = (void (*)(uint64_t, char))sub_100309BE8;
  a2[19] = (void (*)(uint64_t, char))sub_100309C1C;
  a2[20] = (void (*)(uint64_t, char))nullsub_205;
  a2[21] = (void (*)(uint64_t, char))sub_100309C7C;
  a2[22] = (void (*)(uint64_t, char))sub_100309CB0;
  a2[23] = (void (*)(uint64_t, char))sub_100309CE4;
  a2[24] = (void (*)(uint64_t, char))sub_100309D18;
  a2[25] = (void (*)(uint64_t, char))sub_100309D5C;
  a2[28] = (void (*)(uint64_t, char))sub_100309E18;
  a2[29] = (void (*)(uint64_t, char))sub_100309E64;
  a2[26] = (void (*)(uint64_t, char))sub_100309E98;
  a2[27] = (void (*)(uint64_t, char))sub_100309D90;
  a2[32] = (void (*)(uint64_t, char))sub_10030A324;
  a2[33] = (void (*)(uint64_t, char))sub_10030A358;
  a2[34] = (void (*)(uint64_t, char))sub_100309EC4;
  a2[35] = (void (*)(uint64_t, char))sub_100309F24;
  a2[36] = (void (*)(uint64_t, char))sub_100309EF8;
  a2[37] = (void (*)(uint64_t, char))sub_100309F50;
  a2[38] = (void (*)(uint64_t, char))sub_100309F7C;
  a2[39] = (void (*)(uint64_t, char))sub_10030A24C;
  a2[40] = (void (*)(uint64_t, char))sub_10030A2D4;
  a2[41] = (void (*)(uint64_t, char))sub_100309224;
  a2[44] = (void (*)(uint64_t, char))sub_10030A3A4;
  a2[45] = (void (*)(uint64_t, char))sub_10030A3D0;
  a2[46] = (void (*)(uint64_t, char))sub_10030A3FC;
  a2[47] = (void (*)(uint64_t, char))sub_10030A428;
  a2[48] = (void (*)(uint64_t, char))sub_10030A474;
  a2[49] = (void (*)(uint64_t, char))sub_10030A4A0;
  a2[50] = (void (*)(uint64_t, char))sub_10030A4D4;
  v3 = _os_feature_enabled_impl("BluetoothFeatures", "ADVOverConnection");
  result = 0;
  v5 = sub_10030A558;
  if (!v3)
    v5 = 0;
  a2[52] = (void (*)(uint64_t, char))v5;
  a2[53] = (void (*)(uint64_t, char))sub_10030A5BC;
  a2[54] = (void (*)(uint64_t, char))sub_10030A618;
  a2[55] = (void (*)(uint64_t, char))sub_10030A644;
  a2[56] = (void (*)(uint64_t, char))sub_10030A670;
  return result;
}

uint64_t sub_10030A91C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xAEu);
}

uint64_t sub_10030A968(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 4u);
}

uint64_t sub_10030A9B4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 5u);
}

uint64_t sub_10030AA00(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x27u);
}

uint64_t sub_10030AA4C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x99u);
}

uint64_t sub_10030AA98(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x32u);
}

uint64_t sub_10030AAE4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x5Fu);
}

uint64_t sub_10030AB30(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x7Cu);
}

uint64_t sub_10030AB7C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x7Fu);
}

uint64_t sub_10030ABC8(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x80u);
}

uint64_t sub_10030AC14(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x81u);
}

uint64_t sub_10030AC60(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x82u);
}

uint64_t sub_10030ACAC(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xABu);
}

uint64_t sub_10030ACF8(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x34u);
}

uint64_t sub_10030AD44(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8)
{
  NSObject *v15;
  const char *v16;
  uint64_t (*v17)(int);
  int v18;
  uint64_t v19;
  char v21;
  int v22;
  uint64_t v23;
  int v24;
  NSObject *v25;
  _QWORD v27[4];
  char v28;
  char v29;
  void *__p[2];
  char v31;
  int v32;
  char v33;
  _QWORD v34[2];
  int v35;
  int v36;
  __int16 v37;
  _BYTE buf[12];
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int *v50;

  v35 = 0;
  v36 = a2;
  v37 = WORD2(a2);
  v34[0] = 0;
  v34[1] = 0;
  sub_10003415C((uint64_t)v34, a1 + 72);
  if (sub_1000431F4(a1, 4))
  {
    v15 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v16 = sub_1000438E4(a1, 4);
      *(_DWORD *)buf = 136447746;
      *(_QWORD *)&buf[4] = v16;
      v39 = 1024;
      v40 = a4;
      v41 = 1024;
      v42 = a5;
      v43 = 1024;
      v44 = a6;
      v45 = 1024;
      v46 = a3;
      v47 = 1040;
      v48 = 6;
      v49 = 2096;
      v50 = &v36;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending: %{public}s, requesterID 0x%x, high %d, enableEPA %d, type %d, addr %{bluetooth:BD_ADDR}.6P", buf, 0x34u);
    }
    v33 = 0;
    sub_100043758(&v33);
    if (a7)
      v17 = sub_10030A968;
    else
      v17 = 0;
    v18 = sub_1001F8554((uint64_t)&v36, a4, a5, &v35, (uint64_t)v17);
    sub_10004339C(&v33);
    if (!v18 && a7)
    {
      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_100926C78);
      v18 = sub_1000433A4((uint64_t)off_100977A50, 4);
    }
    sub_1000445D4(a1, 4u);
    v19 = v18 != 3603 && v18 != 0;
    if ((v18 == 3603 || !v18) && a6)
    {
      if (a3 == 22 || a3 == 17)
        v21 = 60;
      else
        v21 = 45;
      if (a8)
        LOBYTE(v22) = 75;
      else
        LOBYTE(v22) = v21;
      v32 = 0;
      v23 = sub_100027F68();
      sub_100091AE8(buf, "ePA");
      sub_100091AE8(__p, "iPAMaxThreshold");
      v24 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v23 + 88))(v23, buf, __p, &v32);
      if (v31 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v42) < 0)
        operator delete(*(void **)buf);
      if (v24)
      {
        v22 = -v32;
        v25 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v22;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Warning: Setting user defined iPA-Max threshold to -%d dBm through defaults write", buf, 8u);
        }
      }
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_10030B100;
      v27[3] = &unk_1009264D8;
      v28 = v22;
      v29 = a7;
      v19 = sub_100042FD0(a1, 174, a7, v27, 0);
    }
    sub_100043728(&v33);
  }
  else
  {
    v19 = 2;
  }
  sub_100034234((uint64_t)v34);
  return v19;
}

void sub_10030B094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a20 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  sub_100043728(&a24);
  sub_100034234((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_10030B100()
{
  return sub_1001F5ECC();
}

uint64_t sub_10030B120(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD v4[5];
  char v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10030B180;
  v4[3] = &unk_1009263D8;
  v4[4] = a2;
  v5 = a3;
  return sub_100042FD0(a1, 5, 1, v4, 0);
}

uint64_t sub_10030B180(uint64_t a1)
{
  return sub_1001F9EB4(*(_QWORD *)(a1 + 32) + 128);
}

uint64_t sub_10030B19C(uint64_t a1, char a2, char a3, char a4, char a5, char a6)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];
  char v17;
  char v18;
  char v19;
  char v20;
  _QWORD v21[4];
  char v22;
  char v23;
  char v24;
  _QWORD v25[4];
  char v26;
  char v27;
  char v28;
  char v29;

  if (*(_DWORD *)(sub_1000438A4() + 712) < 0x13u)
  {
    if (*(_DWORD *)(sub_1000438A4() + 712) < 0xFu)
    {
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_10030B328;
      v16[3] = &unk_100926678;
      v17 = a3;
      v18 = a4;
      v19 = a5;
      v20 = a6;
      v12 = v16;
      v13 = a1;
      v14 = 39;
    }
    else
    {
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_10030B30C;
      v21[3] = &unk_1009267D8;
      v22 = a3;
      v23 = a4;
      v24 = a6;
      v12 = v21;
      v13 = a1;
      v14 = 50;
    }
  }
  else
  {
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_10030B2EC;
    v25[3] = &unk_100926678;
    v26 = a2;
    v27 = a3;
    v28 = a4;
    v29 = a6;
    v12 = v25;
    v13 = a1;
    v14 = 95;
  }
  return sub_100042FD0(v13, v14, 1, v12, 0);
}

uint64_t sub_10030B2EC()
{
  return sub_1001FD1DC();
}

uint64_t sub_10030B30C()
{
  return sub_1001FD154();
}

uint64_t sub_10030B328()
{
  return sub_1001F9DA4();
}

uint64_t sub_10030B348(uint64_t a1, char a2, char a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10030B3A8;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 171, 1, v4, 0);
}

uint64_t sub_10030B3A8()
{
  return sub_1001F6198();
}

uint64_t sub_10030B3C0(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6, char a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[5];
  char v19;
  char v20;
  char v21;
  char v22;
  _QWORD v23[5];
  char v24;
  char v25;
  char v26;
  _QWORD v27[5];
  char v28;
  char v29;
  char v30;
  char v31;

  if (*(_DWORD *)(sub_1000438A4() + 712) < 0x13u)
  {
    if (*(_DWORD *)(sub_1000438A4() + 712) < 0xFu)
    {
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_10030B654;
      v18[3] = &unk_100926798;
      v18[4] = a2;
      v19 = a4;
      v20 = a5;
      v21 = a6;
      v22 = a7;
      v14 = v18;
      v15 = a1;
      v16 = 39;
    }
    else
    {
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_10030B5C0;
      v23[3] = &unk_100926398;
      v23[4] = a2;
      v24 = a4;
      v25 = a5;
      v26 = a7;
      v14 = v23;
      v15 = a1;
      v16 = 50;
    }
  }
  else
  {
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_10030B528;
    v27[3] = &unk_100926798;
    v27[4] = a2;
    v28 = a3;
    v29 = a4;
    v30 = a5;
    v31 = a7;
    v14 = v27;
    v15 = a1;
    v16 = 95;
  }
  return sub_100042FD0(v15, v16, 1, v14, 0);
}

uint64_t sub_10030B528(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  v1 = sub_100182588(*(_QWORD *)(a1 + 32) + 128, &v4);
  if (!(_DWORD)v1)
    return sub_1001FD1DC();
  v2 = v1;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006DF290();
  return v2;
}

uint64_t sub_10030B5C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  v1 = sub_100182588(*(_QWORD *)(a1 + 32) + 128, &v4);
  if (!(_DWORD)v1)
    return sub_1001FD154();
  v2 = v1;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006DF290();
  return v2;
}

uint64_t sub_10030B654(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  v1 = sub_100182588(*(_QWORD *)(a1 + 32) + 128, &v4);
  if (!(_DWORD)v1)
    return sub_1001F9DA4();
  v2 = v1;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006DF290();
  return v2;
}

uint64_t sub_10030B6EC(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10030B748;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 153, 1, v3, 0);
}

uint64_t sub_10030B748()
{
  return sub_1001F9E2C();
}

uint64_t sub_10030B758(uint64_t a1, char a2, int a3, char a4, char a5, char a6, char a7)
{
  _QWORD v8[4];
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (!a3)
    return 7;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10030B7D4;
  v8[3] = &unk_1009265F8;
  v10 = a4;
  v11 = a5;
  v12 = a7;
  v13 = a6;
  v14 = a2;
  v9 = a3;
  return sub_100042FD0(a1, 124, 1, v8, 0);
}

uint64_t sub_10030B7D4()
{
  return sub_1001FD264();
}

uint64_t sub_10030B854(uint64_t a1, char a2, uint64_t a3, char a4, char a5, char a6, char a7)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;

  if (!a3)
    return 2;
  v22 = 0;
  v13 = sub_100182588(a3 + 128, &v22);
  if ((_DWORD)v13)
  {
    v14 = v13;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006DF290();
  }
  else
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10030B95C;
    v16[3] = &unk_100926838;
    v17 = a4;
    v18 = a5;
    v19 = a7;
    v20 = a6;
    v21 = a2;
    v16[4] = v22;
    return sub_100042FD0(a1, 124, 1, v16, 0);
  }
  return v14;
}

uint64_t sub_10030B95C()
{
  return sub_1001FD264();
}

uint64_t sub_10030B9E0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  _QWORD v5[6];
  char v6;

  if (!a2)
    return 7;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10030BA4C;
  v5[3] = &unk_1009263F8;
  v6 = a3;
  v5[4] = a2;
  v5[5] = a4;
  return sub_100042FD0(a1, 124, 1, v5, 0);
}

uint64_t sub_10030BA4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  v1 = sub_100182588(*(_QWORD *)(a1 + 32) + 128, &v4);
  if (!(_DWORD)v1)
    return sub_1001FD264();
  v2 = v1;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006DF290();
  return v2;
}

uint64_t sub_10030BAE0(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _QWORD v5[5];
  char v6;
  char v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10030BB44;
  v5[3] = &unk_1009265D8;
  v5[4] = a3;
  v6 = a2;
  v7 = a4;
  return sub_100042FD0(a1, 127, 1, v5, 0);
}

uint64_t sub_10030BB44()
{
  return sub_1001FD2EC();
}

uint64_t sub_10030BB94(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _QWORD v5[5];
  char v6;
  char v7;

  if (!a3)
    return 2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10030BC04;
  v5[3] = &unk_1009265D8;
  v5[4] = a3;
  v6 = a2;
  v7 = a4;
  return sub_100042FD0(a1, 128, 1, v5, 0);
}

uint64_t sub_10030BC04()
{
  return sub_1001FD374();
}

uint64_t sub_10030BC1C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v8[5];
  char v9;
  _QWORD v10[2];

  if (!a3)
    return 2;
  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 72);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10030BCDC;
  v8[3] = &unk_1009263D8;
  v8[4] = a3;
  v9 = a2;
  v6 = sub_100042FD0(a1, 129, 1, v8, 0);
  sub_100034234((uint64_t)v10);
  return v6;
}

void sub_10030BCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10030BCDC()
{
  return sub_1001FD484();
}

uint64_t sub_10030BCF4(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10030BD50;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 130, 1, v3, 0);
}

uint64_t sub_10030BD50()
{
  return sub_1001FD50C();
}

uint64_t sub_10030BD60(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6)
{
  _QWORD v7[5];
  char v8;
  char v9;
  char v10;
  char v11;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10030BDCC;
  v7[3] = &unk_100926798;
  v7[4] = a2;
  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = a6;
  return sub_100042FD0(a1, 52, 1, v7, 0);
}

uint64_t sub_10030BDCC()
{
  return sub_1001FD3FC();
}

uint64_t sub_10030BDF4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 *v12;
  uint64_t v13;
  _QWORD **v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD **v17;
  BOOL v18;
  _QWORD **v20;
  _QWORD *v21[2];
  _QWORD v22[2];

  v22[0] = 0;
  v22[1] = 0;
  sub_10003415C((uint64_t)v22, a1 + 8);
  v20 = 0;
  v21[0] = 0;
  v21[1] = 0;
  sub_10031F434((uint64_t *)&v20, a1 + 136);
  v12 = sub_10019ACEC(a2);
  if (sub_10019AB28((uint64_t)v12))
  {
    v13 = sub_10019B144((uint64_t)v12);
    v14 = v20;
    if (v20 != v21)
    {
      v15 = v13;
      do
      {
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v14[4] + 8))(v14[4], v15, a3, a4, a5, a6);
        v16 = v14[1];
        if (v16)
        {
          do
          {
            v17 = (_QWORD **)v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD **)v14[2];
            v18 = *v17 == v14;
            v14 = v17;
          }
          while (!v18);
        }
        v14 = v17;
      }
      while (v17 != v21);
    }
  }
  sub_10001A82C((uint64_t)&v20, v21[0]);
  sub_100034234((uint64_t)v22);
  return 0;
}

void sub_10030BF10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  sub_10001A82C((uint64_t)va, v5);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10030BF40(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD **v9;
  BOOL v10;
  _QWORD **v12;
  _QWORD *v13[2];
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 8);
  v12 = 0;
  v13[0] = 0;
  v13[1] = 0;
  sub_10031F434((uint64_t *)&v12, a1 + 136);
  v4 = sub_10019ACEC(*(unsigned __int16 *)(a2 + 2));
  if (sub_10019AB28((uint64_t)v4))
  {
    v5 = sub_10019B144((uint64_t)v4);
    v6 = v12;
    if (v12 != v13)
    {
      v7 = v5;
      do
      {
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v6[4] + 16))(v6[4], a2, v7);
        v8 = v6[1];
        if (v8)
        {
          do
          {
            v9 = (_QWORD **)v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (_QWORD **)v6[2];
            v10 = *v9 == v6;
            v6 = v9;
          }
          while (!v10);
        }
        v6 = v9;
      }
      while (v9 != v13);
    }
  }
  sub_10001A82C((uint64_t)&v12, v13[0]);
  sub_100034234((uint64_t)v14);
  return 0;
}

void sub_10030C030(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  sub_10001A82C((uint64_t)va, v5);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10030C060(uint64_t a1, unsigned __int16 *a2)
{
  __int128 *v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD **v9;
  BOOL v10;
  _QWORD **v12;
  _QWORD *v13[2];
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 8);
  v12 = 0;
  v13[0] = 0;
  v13[1] = 0;
  sub_10031F434((uint64_t *)&v12, a1 + 136);
  v4 = sub_10019ACEC(*a2);
  if (sub_10019AB28((uint64_t)v4))
  {
    v5 = sub_10019B144((uint64_t)v4);
    v6 = v12;
    if (v12 != v13)
    {
      v7 = v5;
      do
      {
        (*(void (**)(_QWORD *, unsigned __int16 *, uint64_t))(*v6[4] + 24))(v6[4], a2, v7);
        v8 = v6[1];
        if (v8)
        {
          do
          {
            v9 = (_QWORD **)v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (_QWORD **)v6[2];
            v10 = *v9 == v6;
            v6 = v9;
          }
          while (!v10);
        }
        v6 = v9;
      }
      while (v9 != v13);
    }
  }
  sub_10001A82C((uint64_t)&v12, v13[0]);
  sub_100034234((uint64_t)v14);
  return 0;
}

void sub_10030C150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  sub_10001A82C((uint64_t)va, v5);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10030C180(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD **v9;
  BOOL v10;
  _QWORD **v12;
  _QWORD *v13[2];
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 8);
  v12 = 0;
  v13[0] = 0;
  v13[1] = 0;
  sub_10031F434((uint64_t *)&v12, a1 + 136);
  v4 = sub_10019ACEC(*(unsigned __int16 *)(a2 + 7));
  if (sub_10019AB28((uint64_t)v4))
  {
    v5 = sub_10019B144((uint64_t)v4);
    v6 = v12;
    if (v12 != v13)
    {
      v7 = v5;
      do
      {
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v6[4] + 32))(v6[4], a2, v7);
        v8 = v6[1];
        if (v8)
        {
          do
          {
            v9 = (_QWORD **)v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (_QWORD **)v6[2];
            v10 = *v9 == v6;
            v6 = v9;
          }
          while (!v10);
        }
        v6 = v9;
      }
      while (v9 != v13);
    }
  }
  sub_10001A82C((uint64_t)&v12, v13[0]);
  sub_100034234((uint64_t)v14);
  return 0;
}

void sub_10030C270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  sub_10001A82C((uint64_t)va, v5);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10030C2A0(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD **v9;
  BOOL v10;
  _QWORD **v12;
  _QWORD *v13[2];
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 8);
  v12 = 0;
  v13[0] = 0;
  v13[1] = 0;
  sub_10031F434((uint64_t *)&v12, a1 + 136);
  v4 = sub_10019ACEC(*(unsigned __int16 *)(a2 + 2));
  if (sub_10019AB28((uint64_t)v4))
  {
    v5 = sub_10019B144((uint64_t)v4);
    v6 = v12;
    if (v12 != v13)
    {
      v7 = v5;
      do
      {
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v6[4] + 40))(v6[4], a2, v7);
        v8 = v6[1];
        if (v8)
        {
          do
          {
            v9 = (_QWORD **)v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (_QWORD **)v6[2];
            v10 = *v9 == v6;
            v6 = v9;
          }
          while (!v10);
        }
        v6 = v9;
      }
      while (v9 != v13);
    }
  }
  sub_10001A82C((uint64_t)&v12, v13[0]);
  sub_100034234((uint64_t)v14);
  return 0;
}

void sub_10030C390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  _QWORD *v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD *);
  v6 = va_arg(va1, _QWORD);
  sub_10001A82C((uint64_t)va, v5);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10030C3C0(uint64_t a1, unsigned __int8 *a2)
{
  unint64_t v3;
  NSObject *v4;
  int v5;
  void *p_p;
  const char *v7;
  int v8;
  int v9;
  const char *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  NSObject *v17;
  uint8_t *v19;
  void *__p;
  __int16 v21;
  uint8_t *v22;
  char v23;
  uint8_t buf[8];
  __int16 v25;
  void *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;

  v3 = ((unint64_t)a2[2] << 40) | ((unint64_t)a2[3] << 32) | ((unint64_t)a2[4] << 24) | ((unint64_t)a2[5] << 16) | ((unint64_t)a2[6] << 8) | a2[7];
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int16 *)a2;
    sub_10064960C(v3);
    if (v23 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (a2[8])
      v7 = "ACL";
    else
      v7 = "SCO";
    v8 = a2[10];
    v9 = a2[11];
    if (a2[9])
      v10 = "eLNAOn";
    else
      v10 = "eLNAByPass";
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&buf[4] = v5;
    v25 = 2080;
    v26 = p_p;
    if (v8)
      v11 = "BTSC";
    else
      v11 = "BTMC";
    v27 = 2080;
    v28 = v7;
    v12 = "Central";
    v29 = 2080;
    if (v9)
      v12 = "Peripheral";
    v30 = v10;
    v31 = 2080;
    v32 = v11;
    v33 = 2080;
    v34 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Scan Core Classic Connection Event: lm handle: 0x%x, BT address: %s, link type: %s, Elna mode: %s, Initiated Core: %s, role: %s", buf, 0x3Au);
    if (v23 < 0)
      operator delete(__p);
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100926CF8);
  v13 = sub_10006D488((uint64_t)off_1009778E0, v3, 0);
  if (v13)
  {
    v14 = v13;
    v15 = a2[10];
    if (a2[10])
    {
      if (v15 == 1)
      {
        ++*(_WORD *)(v13 + 1406);
      }
      else
      {
        v17 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        {
          sub_10043E5F8(v14, buf);
          if (SBYTE3(v28) >= 0)
            v19 = buf;
          else
            v19 = *(uint8_t **)buf;
          LODWORD(__p) = 67109378;
          HIDWORD(__p) = v15;
          v21 = 2082;
          v22 = v19;
          _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Scan Core Classic Connection Event: Invalid core initiator value %d for %{public}s", (uint8_t *)&__p, 0x12u);
          if (SBYTE3(v28) < 0)
            operator delete(*(void **)buf);
        }
      }
    }
    else
    {
      ++*(_WORD *)(v13 + 1408);
    }
  }
  else
  {
    v16 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006DF2F0(v3, v16);
  }
  return 0;
}

uint64_t sub_10030C694(uint64_t a1, const void *a2)
{
  _BYTE __dst[260];

  memcpy(__dst, a2, sizeof(__dst));
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_100926C98);
  sub_1006758AC((uint64_t)off_100977FA8, __dst);
  return 0;
}

uint64_t sub_10030C6FC(uint64_t a1, _DWORD *a2)
{
  NSObject *v3;

  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
    sub_1006DF3A0(a2, v3);
  return 0;
}

uint64_t sub_10030C748(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v4[2];
  int v5;

  v2 = *(_OWORD *)(a2 + 16);
  v4[0] = *(_OWORD *)a2;
  v4[1] = v2;
  v5 = *(_DWORD *)(a2 + 32);
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_100926D18);
  sub_1004BB7FC((uint64_t)off_100977B38, v4);
  return 0;
}

void sub_10030C7AC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  NSObject *v5;
  int v6;
  void *v7;
  id v8;
  void *v9;
  unsigned int v10;
  void *v11;
  id v12;
  void *v13;
  _DWORD v14[2];
  unsigned __int8 uu[8];
  uint64_t v16;

  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100926D38);
  *(_QWORD *)uu = 0;
  v16 = 0;
  sub_10003F924((uint64_t)off_1009778C0, a3, 0, 1u, 0, 0, uu);
  if (uuid_is_null(uu))
  {
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(unsigned __int16 *)(a2 + 204);
      v14[0] = 67109120;
      v14[1] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Something is wrong. Skipping update LE metrics connectionHandle : %d", (uint8_t *)v14, 8u);
    }
  }
  else if (*(_WORD *)(a2 + 18))
  {
    if ((unsigned __int16)(*(_WORD *)(a2 + 18) + 127) <= 0x93u)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100926D38);
      v7 = off_1009778C0;
      v8 = sub_100030DF4(uu);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      sub_10065D5A4((uint64_t)v7, v9, *(__int16 *)(a2 + 18));

    }
    v10 = *(unsigned __int16 *)(a2 + 21) + *(unsigned __int16 *)(a2 + 23);
    if (v10)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100926D38);
      v11 = off_1009778C0;
      v12 = sub_100030DF4(uu);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      sub_10065D6B0((uint64_t)v11, v13, 100 * *(unsigned __int16 *)(a2 + 23) / v10);

    }
  }
}

void sub_10030C990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10030C9AC(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  int v4;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  NSObject *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint8_t buf[4];
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  int v103;

  v4 = *(unsigned __int16 *)(a2 + 202);
  if (*(_WORD *)(a2 + 202))
  {
    if (*a3)
    {
LABEL_3:
      v6 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(unsigned __int16 *)(a2 + 6);
        v8 = *(unsigned __int16 *)(a2 + 14);
        v9 = *(__int16 *)(a2 + 16);
        v10 = *(unsigned __int16 *)(a2 + 30);
        v11 = *(unsigned __int16 *)(a2 + 32);
        v12 = *(unsigned __int16 *)(a2 + 34);
        v13 = *(unsigned __int16 *)(a2 + 36);
        v14 = *(unsigned __int8 *)(a2 + 185);
        v15 = *(unsigned __int8 *)(a2 + 187);
        v16 = *(unsigned __int8 *)(a2 + 189);
        v17 = *(unsigned __int8 *)(a2 + 191);
        v18 = *(unsigned __int8 *)(a2 + 193);
        v19 = *(unsigned __int8 *)(a2 + 195);
        v20 = *(unsigned __int8 *)(a2 + 197);
        v21 = *(unsigned __int8 *)(a2 + 199);
        v22 = *(unsigned __int8 *)(a2 + 201);
        v23 = *(unsigned __int8 *)(a2 + 190);
        v24 = *(unsigned __int8 *)(a2 + 192);
        v25 = *(unsigned __int8 *)(a2 + 194);
        v26 = *(unsigned __int8 *)(a2 + 184);
        v27 = *(unsigned __int8 *)(a2 + 186);
        v28 = *(unsigned __int8 *)(a2 + 188);
        v29 = *(unsigned __int8 *)(a2 + 196);
        v30 = *(unsigned __int8 *)(a2 + 198);
        v51 = *(unsigned __int8 *)(a2 + 200);
        *(_DWORD *)buf = 67115520;
        v53 = v4;
        v54 = 1024;
        v55 = v7;
        v56 = 1024;
        v57 = v8;
        v58 = 1024;
        v59 = v9;
        v60 = 1024;
        v61 = v10;
        v62 = 1024;
        v63 = v11;
        v64 = 1024;
        v65 = v12;
        v66 = 1024;
        v67 = v13;
        v68 = 1024;
        v69 = v14;
        v70 = 1024;
        v71 = v15;
        v72 = 1024;
        v73 = v16;
        v74 = 1024;
        v75 = v17;
        v76 = 1024;
        v77 = v18;
        v78 = 1024;
        v79 = v19;
        v80 = 1024;
        v81 = v20;
        v82 = 1024;
        v83 = v21;
        v84 = 1024;
        v85 = v22;
        v86 = 1024;
        v87 = v23;
        v88 = 1024;
        v89 = v24;
        v90 = 1024;
        v91 = v25;
        v92 = 1024;
        v93 = v26;
        v94 = 1024;
        v95 = v27;
        v96 = 1024;
        v97 = v28;
        v98 = 1024;
        v99 = v29;
        v100 = 1024;
        v101 = v30;
        v102 = 1024;
        v103 = v51;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Classic [0x%x]: time %3d, coex %3d, rssi %3d, tx [S=%3d:F=%3d], rx [S=%3d:F=%3d], Pkt Tx{%d %d %d}{%d %d %d}{%d %d %d} Rx{%d %d %d}{%d %d %d}{%d %d %d}", buf, 0x9Eu);
      }
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_100926CF8);
      v31 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)a3, 1);
      if (v31)
      {
        v32 = v31;
        v33 = *(__int16 *)(a2 + 16);
        if ((v33 + 127) <= 0x93)
          sub_100444FE4(v31, v33);
        v34 = *(unsigned __int16 *)(a2 + 36);
        v35 = *(unsigned __int16 *)(a2 + 34) + v34;
        if (v35)
          sub_100445000(v32, 100 * v34 / v35);
      }
      return;
    }
    v36 = 1;
    while (v36 != 6)
    {
      if (a3[v36++])
      {
        if ((unint64_t)(v36 - 2) <= 4)
          goto LABEL_3;
        break;
      }
    }
  }
  v38 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v39 = *(unsigned __int16 *)(a2 + 204);
    v40 = *(unsigned __int16 *)(a2 + 4);
    v41 = *(unsigned __int16 *)(a2 + 12);
    v42 = *(__int16 *)(a2 + 18);
    v43 = *(unsigned __int16 *)(a2 + 21);
    v44 = *(unsigned __int16 *)(a2 + 23);
    v45 = *(unsigned __int16 *)(a2 + 25);
    v46 = *(unsigned __int16 *)(a2 + 27);
    v47 = *(unsigned __int8 *)(a2 + 180);
    v48 = *(unsigned __int8 *)(a2 + 181);
    v49 = *(unsigned __int8 *)(a2 + 182);
    v50 = *(unsigned __int8 *)(a2 + 183);
    *(_DWORD *)buf = 67111936;
    v53 = v39;
    v54 = 1024;
    v55 = v40;
    v56 = 1024;
    v57 = v41;
    v58 = 1024;
    v59 = v42;
    v60 = 1024;
    v61 = v43;
    v62 = 1024;
    v63 = v44;
    v64 = 1024;
    v65 = v45;
    v66 = 1024;
    v67 = v46;
    v68 = 1024;
    v69 = v47;
    v70 = 1024;
    v71 = v48;
    v72 = 1024;
    v73 = v49;
    v74 = 1024;
    v75 = v50;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Le [0x%x]: time %3d, coex %3d, rssi %3d, tx [S=%3d:F=%3d], rx [S=%3d:F=%3d], 1M {rx %d, tx %d}, 2M {rx %d, tx %d}", buf, 0x4Au);
  }
}

uint64_t sub_10030CD44(uint64_t a1, _WORD *a2)
{
  __int16 v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  int v8;
  int v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  char v12;
  unsigned int v13;
  void *v14;
  __int128 *v15;
  __int16 v16;
  unsigned __int16 v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  __int128 *v21;
  __int16 v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  __int128 v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;

  v4 = a2[2];
  v5 = a2[3];
  v6 = a2[4];
  v7 = a2[5];
  v23 = a2[9];
  v24 = *(unsigned __int16 *)((char *)a2 + 23);
  v26 = *(unsigned __int16 *)((char *)a2 + 21);
  v27 = *(unsigned __int16 *)((char *)a2 + 25);
  v25 = *(unsigned __int16 *)((char *)a2 + 27);
  v8 = (unsigned __int16)a2[16];
  v28 = (unsigned __int16)a2[15];
  v29 = (unsigned __int16)a2[17];
  v9 = (unsigned __int16)a2[18];
  *(_QWORD *)(a1 + 1216) = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_100926D18);
  v10 = v6 + v4;
  v11 = v7 + v5;
  v12 = sub_1004BAA7C(off_100977B38);
  if (*(_BYTE *)(a1 + 1434)
    || (v13 = v11 + v10, v13 > *(unsigned __int16 *)(a1 + 1430))
    || v13 < *(unsigned __int16 *)(a1 + 1432))
  {
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100926CB8);
    v14 = off_1009778A0;
    v15 = sub_10019ACEC((unsigned __int16)a2[102]);
    sub_10063F738((uint64_t)v14, (uint64_t)v15, v10, v11, v12, *(_QWORD *)(a1 + 1216), 0);
  }
  if (*(_BYTE *)(a1 + 1435))
  {
    v16 = *(_WORD *)(a1 + 1438);
    v17 = (unsigned __int16)(v16 + 1) <= 0xFFF0u ? v16 + 1 : 0;
    *(_WORD *)(a1 + 1438) = v17;
    if (!(v17 % *(unsigned __int16 *)(a1 + 1436)))
    {
      v18 = 100 * v9 / (v9 + v29);
      v19 = *(_QWORD *)(a1 + 1216);
      if (qword_1009778A8 != -1)
        dispatch_once(&qword_1009778A8, &stru_100926CB8);
      v20 = off_1009778A0;
      v21 = sub_10019ACEC((unsigned __int16)a2[102]);
      LOWORD(v30) = v23;
      WORD1(v30) = 100 * v24 / (v24 + v26);
      WORD2(v30) = v26;
      WORD3(v30) = 100 * v8 / (v8 + v28);
      WORD4(v30) = v28;
      WORD5(v30) = 100 * v25 / (v25 + v27);
      WORD6(v30) = v27;
      HIWORD(v30) = v18;
      v31 = v29;
      v32 = 0;
      v33 = 0;
      v34 = v19;
      sub_10063F82C((uint64_t)v20, (uint64_t)v21, &v30, 0);
    }
  }
  return 0;
}

uint64_t sub_10030CFC8(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v5;
  int v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  unsigned __int8 *v44;
  unint64_t v45;
  uint64_t v46;
  __int128 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  int v52;
  __int16 v53;
  _QWORD v54[7];
  int v55;
  _QWORD v56[5];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _BYTE v68[30];
  int v69;
  __int16 v70;
  _QWORD v71[4];
  int v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _OWORD v84[2];
  uint8_t buf[16];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _OWORD v96[2];

  if (a3)
  {
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(unsigned __int16 *)(a2 + 202);
      v7 = *(unsigned __int16 *)(a2 + 204);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v6;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PhyStats caused system to wake up -- Classic connection handle = 0x%02x, LE connection handle = 0x%02x", buf, 0xEu);
    }
    v8 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8))
    {
      v9 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *(unsigned __int16 *)(a2 + 202);
        v11 = *(unsigned __int16 *)(a2 + 204);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v10;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PhyStats caused system to wake up -- Classic connection handle = 0x%02x, LE connection handle = 0x%02x -- getting ABCSnapshot ", buf, 0xEu);
      }
      sub_10047D244("PhyStats", "parseWakeupCause", 60.0);
    }
  }
  if (*(_BYTE *)(a1 + 1194) && *(_WORD *)(a2 + 18))
    *(_WORD *)(a2 + 18) = *(_WORD *)(a1 + 1196);
  if (*(_BYTE *)(a1 + 1195) && *(_WORD *)(a2 + 16))
    *(_WORD *)(a2 + 16) = *(_WORD *)(a1 + 1198);
  v12 = sub_1000438A4();
  if ((sub_1003335A8(v12) & 1) == 0)
  {
    v13 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006DF480(v13, v14, v15, v16, v17, v18, v19, v20);
  }
  v21 = sub_1000438A4();
  result = sub_1003335A8(v21);
  if ((_DWORD)result)
  {
    v23 = *(_OWORD *)(a2 + 176);
    v95 = *(_OWORD *)(a2 + 160);
    v96[0] = v23;
    *(_OWORD *)((char *)v96 + 14) = *(_OWORD *)(a2 + 190);
    v24 = *(_OWORD *)(a2 + 112);
    v91 = *(_OWORD *)(a2 + 96);
    v92 = v24;
    v25 = *(_OWORD *)(a2 + 144);
    v93 = *(_OWORD *)(a2 + 128);
    v94 = v25;
    v26 = *(_OWORD *)(a2 + 48);
    v87 = *(_OWORD *)(a2 + 32);
    v88 = v26;
    v27 = *(_OWORD *)(a2 + 80);
    v89 = *(_OWORD *)(a2 + 64);
    v90 = v27;
    v28 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)buf = *(_OWORD *)a2;
    v86 = v28;
    if (*(_BYTE *)(a1 + 1193))
    {
      sub_1000F12B8(0, (uint64_t)buf);
      v29 = v96[0];
      *(_OWORD *)(a1 + 1384) = v95;
      *(_OWORD *)(a1 + 1400) = v29;
      *(_OWORD *)(a1 + 1414) = *(_OWORD *)((char *)v96 + 14);
      v30 = v92;
      *(_OWORD *)(a1 + 1320) = v91;
      *(_OWORD *)(a1 + 1336) = v30;
      v31 = v94;
      *(_OWORD *)(a1 + 1352) = v93;
      *(_OWORD *)(a1 + 1368) = v31;
      v32 = v88;
      *(_OWORD *)(a1 + 1256) = v87;
      *(_OWORD *)(a1 + 1272) = v32;
      v33 = v90;
      *(_OWORD *)(a1 + 1288) = v89;
      *(_OWORD *)(a1 + 1304) = v33;
      v34 = v86;
      *(_OWORD *)(a1 + 1224) = *(_OWORD *)buf;
      *(_OWORD *)(a1 + 1240) = v34;
      *(_QWORD *)(a1 + 1216) = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
      return 0;
    }
    v55 = 0;
    if (sub_100172B4C((uint64_t)buf, &v55))
    {
      v35 = v96[0];
      *(_OWORD *)(a1 + 1384) = v95;
      *(_OWORD *)(a1 + 1400) = v35;
      *(_OWORD *)(a1 + 1414) = *(_OWORD *)((char *)v96 + 14);
      v36 = v92;
      *(_OWORD *)(a1 + 1320) = v91;
      *(_OWORD *)(a1 + 1336) = v36;
      v37 = v94;
      *(_OWORD *)(a1 + 1352) = v93;
      *(_OWORD *)(a1 + 1368) = v37;
      v38 = v88;
      *(_OWORD *)(a1 + 1256) = v87;
      *(_OWORD *)(a1 + 1272) = v38;
      v39 = v90;
      *(_OWORD *)(a1 + 1288) = v89;
      *(_OWORD *)(a1 + 1304) = v39;
      v40 = v86;
      *(_OWORD *)(a1 + 1224) = *(_OWORD *)buf;
      *(_OWORD *)(a1 + 1240) = v40;
      *(_QWORD *)(a1 + 1216) = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
      sub_10030CD44(a1, (_WORD *)a2);
      v41 = sub_10006BBEC();
      v71[1] = 3221225472;
      v82 = v94;
      v83 = v95;
      v84[0] = v96[0];
      *(_OWORD *)((char *)v84 + 14) = *(_OWORD *)((char *)v96 + 14);
      v78 = v90;
      v79 = v91;
      v80 = v92;
      v81 = v93;
      v74 = v86;
      v75 = v87;
      v76 = v88;
      v77 = v89;
      v71[0] = _NSConcreteStackBlock;
      v71[2] = sub_10030D514;
      v71[3] = &unk_100926858;
      v73 = *(_OWORD *)buf;
      v72 = v55;
      sub_100041A34(v41, v71);
      return 0;
    }
    v42 = sub_10003BE44();
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v42 + 336))(v42) || !*(_WORD *)(a2 + 204))
    {
LABEL_28:
      v53 = 0;
      v52 = 0;
      if (*(_WORD *)(a2 + 202))
      {
        v47 = sub_10019ACEC(*(unsigned __int16 *)(a2 + 202));
        if (sub_10019AB28((uint64_t)v47))
        {
          v48 = sub_10019B144((uint64_t)v47);
          v52 = *(_DWORD *)v48;
          v53 = *(_WORD *)(v48 + 4);
        }
      }
      v49 = sub_10006BBEC();
      v56[1] = 3321888768;
      v66 = v94;
      v67 = v95;
      *(_OWORD *)v68 = v96[0];
      *(_OWORD *)&v68[14] = *(_OWORD *)((char *)v96 + 14);
      v62 = v90;
      v63 = v91;
      v64 = v92;
      v65 = v93;
      v58 = v86;
      v59 = v87;
      v60 = v88;
      v61 = v89;
      v56[0] = _NSConcreteStackBlock;
      v56[2] = sub_10030D570;
      v56[3] = &unk_100926878;
      v56[4] = a1;
      v57 = *(_OWORD *)buf;
      v69 = v52;
      v70 = v53;
      sub_100041A34(v49, v56);
      if (sub_100065478())
      {
        v50 = sub_100065478();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 568))(v50, a2);
      }
      return 0;
    }
    v43 = sub_10019ACEC(*(unsigned __int16 *)(a2 + 204));
    if (sub_10019AC00((uint64_t)v43))
    {
      v44 = (unsigned __int8 *)sub_10019B0F0((uint64_t)v43);
      if (v44)
      {
        v45 = ((unint64_t)v44[1] << 40) | ((unint64_t)v44[2] << 32) | ((unint64_t)v44[3] << 24) | ((unint64_t)v44[4] << 16) | ((unint64_t)v44[5] << 8) | v44[6] | ((unint64_t)*v44 << 48);
        if (v45)
        {
          v46 = sub_10006BBEC();
          v54[0] = _NSConcreteStackBlock;
          v54[1] = 3221225472;
          v54[2] = sub_10030D568;
          v54[3] = &unk_1009210D8;
          v54[4] = a1;
          v54[5] = a2;
          v54[6] = v45;
          sub_100041A34(v46, v54);
          goto LABEL_28;
        }
      }
    }
    v51 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v52) = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "No BT address to update PhyStats", (uint8_t *)&v52, 2u);
    }
    return 1;
  }
  return result;
}

uint64_t sub_10030D514(uint64_t a1)
{
  if (qword_10097AB78 != -1)
    dispatch_once(&qword_10097AB78, &stru_100926D58);
  return sub_1006B6A0C(qword_10097AB70, a1 + 36, *(unsigned int *)(a1 + 32));
}

void sub_10030D568(uint64_t a1)
{
  sub_10030C7AC(a1, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_10030D570(uint64_t a1)
{
  sub_10030C9AC(a1, a1 + 40, (_BYTE *)(a1 + 246));
}

uint64_t sub_10030D57C(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a2 + 246);
  *(_WORD *)(result + 250) = *(_WORD *)(a2 + 250);
  *(_DWORD *)(result + 246) = v2;
  return result;
}

uint64_t sub_10030D594(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;

  if (!a2)
    return 3;
  if (sub_100065478())
  {
    v5 = sub_100065478();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 528))(v5, a2);
  }
  if (a3)
    sub_10047D244("HIDLatencyStats", "parseWakeupCause", 60.0);
  return 0;
}

uint64_t sub_10030D600(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  __int128 v3;
  __int128 v4;
  _OWORD v6[5];

  v3 = a3[3];
  v6[2] = a3[2];
  v6[3] = v3;
  v6[4] = a3[4];
  v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  sub_100217F24(a2, v6);
  return 0;
}

uint64_t sub_10030D66C(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _DWORD v21[2];
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;

  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *a2;
    v5 = *((_DWORD *)a2 + 1);
    v6 = a2[8];
    v7 = *((_DWORD *)a2 + 3);
    v8 = *((_DWORD *)a2 + 4);
    v9 = *((_DWORD *)a2 + 5);
    v10 = *((_DWORD *)a2 + 6);
    v11 = *((_DWORD *)a2 + 7);
    v12 = *((_DWORD *)a2 + 8);
    v14 = *((_DWORD *)a2 + 9);
    v13 = *((_DWORD *)a2 + 10);
    v15 = *((_DWORD *)a2 + 11);
    v16 = *((_DWORD *)a2 + 12);
    v17 = (char)a2[52];
    v18 = (char)a2[53];
    v19 = (char)a2[54];
    v21[0] = 67112960;
    v21[1] = v4;
    v22 = 1024;
    v23 = v5;
    v24 = 1024;
    v25 = v6;
    v26 = 1024;
    v27 = v7;
    v28 = 1024;
    v29 = v8;
    v30 = 1024;
    v31 = v9;
    v32 = 1024;
    v33 = v10;
    v34 = 1024;
    v35 = v11;
    v36 = 1024;
    v37 = v12;
    v38 = 1024;
    v39 = v14;
    v40 = 1024;
    v41 = v13;
    v42 = 1024;
    v43 = v15;
    v44 = 1024;
    v45 = v16;
    v46 = 1024;
    v47 = v17;
    v48 = 1024;
    v49 = v18;
    v50 = 1024;
    v51 = v19;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "vseAdvStatsEvent - ver %u duration %u (secs) instance %u num ADVs [total %u NonExtended %u Extended %u] Ch [37 %u 38 %u 39 %u] FailedOnAllCh %u Denied by [Coex %u BT %u Others %u] txPower [min %d max %d mode %d]", (uint8_t *)v21, 0x62u);
  }
  return 0;
}

uint64_t sub_10030D7B8(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 2760))(a1);
  return 0;
}

uint64_t sub_10030D7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_100217F88(a2, a3, a4, a5, a6);
  return 0;
}

uint64_t sub_10030D804(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t result;
  int v6;
  void **v7;
  int v8;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  void **v14;
  __int16 v15;
  int v16;

  if (!a2)
    return 3;
  v3 = qword_1009997E8;
  v4 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v4)
  {
    v6 = *a2;
    sub_10030D914(a2[1], __p);
    if (v10 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    v8 = a2[2];
    *(_DWORD *)buf = 67109634;
    v12 = v6;
    v13 = 2080;
    v14 = v7;
    v15 = 1024;
    v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "vseAntennaRestrictEvent - version %u status %s AntennaBlockingBitMask 0x%02x", buf, 0x18u);
    if (v10 < 0)
      operator delete(__p[0]);
    return 0;
  }
  return result;
}

_QWORD *sub_10030D914@<X0>(unsigned int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0xB)
    v2 = "Unknown";
  else
    v2 = off_100926DD8[(char)a1];
  return sub_100091AE8(a2, v2);
}

uint64_t sub_10030D940(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t result;
  int v6;
  int v7;
  int v8;
  const char *v9;
  const char *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;

  if (!a2)
    return 3;
  v3 = qword_1009997E8;
  v4 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v4)
  {
    v6 = *a2;
    v7 = a2[7];
    v8 = a2[4];
    v9 = "Switched";
    if (!a2[8])
      v9 = "Not Switched";
    if (a2[9])
      v10 = "Gated By Hybrid Coex";
    else
      v10 = "None";
    v11[0] = 67110146;
    v11[1] = v6;
    v12 = 1024;
    v13 = v7;
    v14 = 1024;
    v15 = v8;
    v16 = 2080;
    v17 = v9;
    v18 = 2080;
    v19 = v10;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "vseAntennaDiversityEvent - version %u ThresholdTriggered %u DiversityRSSIThreshold %u DiversityAntennaSwitched %s ReasonForGating %s", (uint8_t *)v11, 0x28u);
    return 0;
  }
  return result;
}

_QWORD *sub_10030DA64@<X0>(unsigned int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0x12)
    v2 = "NA";
  else
    v2 = off_100926E38[(char)a1];
  return sub_100091AE8(a2, v2);
}

uint64_t sub_10030DA90(uint64_t a1, __int128 *a2, char a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  NSObject *global_queue;
  _QWORD block[5];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[22];
  char v26;

  v6 = sub_1000438A4();
  if (sub_100333618(v6))
  {
    v7 = a2[9];
    v23 = a2[8];
    v24 = v7;
    *(_OWORD *)v25 = a2[10];
    v8 = a2[5];
    v19 = a2[4];
    v20 = v8;
    v9 = a2[7];
    v21 = a2[6];
    v22 = v9;
    v10 = a2[1];
    v15 = *a2;
    v16 = v10;
    v11 = a2[3];
    v17 = a2[2];
    v18 = v11;
    *(_QWORD *)&v25[14] = *(_QWORD *)((char *)a2 + 174);
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030DB8C;
    block[3] = &unk_1009268A8;
    block[4] = a1;
    v26 = a3;
    dispatch_async(global_queue, block);
  }
  return 0;
}

_BYTE *sub_10030DB8C(uint64_t a1)
{
  __int128 *v2;
  _BOOL4 v3;
  uint64_t v4;
  int v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  unint64_t v22;
  char *v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  NSObject *v28;
  int v29;
  const char *v30;
  std::string *v31;
  std::string *v32;
  std::string *v33;
  std::string *v34;
  std::string *v35;
  std::string *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  void *v41;
  int v42;
  int v43;
  uint64_t v44;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  void *__p[2];
  char v50;
  __int128 v51;
  uint64_t v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;
  char v59;
  int v60;
  __int16 v61;
  _BYTE v62[56];
  std::string *v63;
  __int16 v64;
  std::string *v65;
  __int16 v66;
  std::string *v67;

  v61 = 0;
  v60 = 0;
  v59 = 0;
  sub_100043758(&v59);
  v2 = sub_10019ACEC(*(unsigned __int16 *)(a1 + 40));
  v3 = sub_10019AC00((uint64_t)v2);
  if (v3)
  {
    *((_BYTE *)v2 + 280) = *(_BYTE *)(a1 + 222);
LABEL_4:
    sub_10004339C(&v59);
    v48 = 0;
    goto LABEL_5;
  }
  if (sub_100182620((uint64_t)v2, (uint64_t)&v60))
    goto LABEL_4;
  sub_10004339C(&v59);
  *(_DWORD *)v62 = v60;
  *(_WORD *)&v62[4] = v61;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100926CF8);
  v48 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)v62, 1);
LABEL_5:
  v4 = 0;
  LOWORD(v5) = 0;
  v6 = 0;
  memset(&v58, 0, sizeof(v58));
  memset(&v57, 0, sizeof(v57));
  memset(&v56, 0, sizeof(v56));
  memset(&v55, 0, sizeof(v55));
  memset(&v54, 0, sizeof(v54));
  memset(&v53, 0, sizeof(v53));
  do
  {
    std::to_string((std::string *)v62, *(char *)(a1 + v4 + 42));
    if (v62[23] >= 0)
      v7 = v62;
    else
      v7 = *(const std::string::value_type **)v62;
    if (v62[23] >= 0)
      v8 = v62[23];
    else
      v8 = *(_QWORD *)&v62[8];
    std::string::append(&v58, v7, v8);
    if ((v62[23] & 0x80000000) != 0)
      operator delete(*(void **)v62);
    std::to_string((std::string *)v62, *(char *)(a1 + v4 + 72));
    if (v62[23] >= 0)
      v9 = v62;
    else
      v9 = *(const std::string::value_type **)v62;
    if (v62[23] >= 0)
      v10 = v62[23];
    else
      v10 = *(_QWORD *)&v62[8];
    std::string::append(&v57, v9, v10);
    if ((v62[23] & 0x80000000) != 0)
      operator delete(*(void **)v62);
    std::string::append(&v58, " ");
    std::string::append(&v57, " ");
    v6 += *(char *)(a1 + v4 + 42);
    v5 = (__int16)(v5 + *(char *)(a1 + v4++ + 72));
  }
  while (v4 != 30);
  v46 = v3;
  v47 = (uint64_t)v2;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  do
  {
    v14 = a1 + v11;
    if ((v11 & 1) != 0)
    {
      v22 = *(char *)(v14 + 102);
      v23 = "Unknown";
      if (v22 <= 3)
        v23 = off_100926EF0[v22];
      sub_100091AE8(v62, v23);
      if (v62[23] >= 0)
        v24 = v62;
      else
        v24 = *(const std::string::value_type **)v62;
      if (v62[23] >= 0)
        v25 = v62[23];
      else
        v25 = *(_QWORD *)&v62[8];
      std::string::append(&v55, v24, v25);
      if ((v62[23] & 0x80000000) != 0)
        operator delete(*(void **)v62);
      sub_10030DA64(*(unsigned __int8 *)(a1 + v11 + 162), v62);
      if (v62[23] >= 0)
        v26 = v62;
      else
        v26 = *(const std::string::value_type **)v62;
      if (v62[23] >= 0)
        v27 = v62[23];
      else
        v27 = *(_QWORD *)&v62[8];
      std::string::append(&v53, v26, v27);
      if ((v62[23] & 0x80000000) != 0)
        operator delete(*(void **)v62);
      std::string::append(&v55, " ");
      v21 = &v53;
    }
    else
    {
      v15 = *(char *)(v14 + 102);
      v16 = "Unknown";
      if (v15 <= 3)
        v16 = off_100926ED0[v15];
      sub_100091AE8(v62, v16);
      if (v62[23] >= 0)
        v17 = v62;
      else
        v17 = *(const std::string::value_type **)v62;
      if (v62[23] >= 0)
        v18 = v62[23];
      else
        v18 = *(_QWORD *)&v62[8];
      std::string::append(&v56, v17, v18);
      if ((v62[23] & 0x80000000) != 0)
        operator delete(*(void **)v62);
      sub_10030DA64(*(unsigned __int8 *)(a1 + v11 + 162), v62);
      if (v62[23] >= 0)
        v19 = v62;
      else
        v19 = *(const std::string::value_type **)v62;
      if (v62[23] >= 0)
        v20 = v62[23];
      else
        v20 = *(_QWORD *)&v62[8];
      std::string::append(&v54, v19, v20);
      if ((v62[23] & 0x80000000) != 0)
        operator delete(*(void **)v62);
      std::string::append(&v56, " ");
      v21 = &v54;
    }
    std::string::append(v21, " ");
    v12 += *(unsigned __int8 *)(v14 + 102);
    v13 += *(unsigned __int8 *)(a1 + v11++ + 162);
  }
  while (v11 != 60);
  v28 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v29 = *(unsigned __int16 *)(a1 + 40);
    v30 = "Yes";
    if (!*(_BYTE *)(a1 + 222))
      v30 = "No";
    v31 = &v58;
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v31 = (std::string *)v58.__r_.__value_.__r.__words[0];
    v32 = &v57;
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v32 = (std::string *)v57.__r_.__value_.__r.__words[0];
    v33 = &v56;
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v33 = (std::string *)v56.__r_.__value_.__r.__words[0];
    v34 = &v55;
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v34 = (std::string *)v55.__r_.__value_.__r.__words[0];
    v35 = &v54;
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v35 = (std::string *)v54.__r_.__value_.__r.__words[0];
    v36 = &v53;
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v36 = (std::string *)v53.__r_.__value_.__r.__words[0];
    *(_DWORD *)v62 = 67111170;
    *(_DWORD *)&v62[4] = v29;
    *(_WORD *)&v62[8] = 1024;
    *(_DWORD *)&v62[10] = v29;
    *(_WORD *)&v62[14] = 2080;
    *(_QWORD *)&v62[16] = v30;
    *(_WORD *)&v62[24] = 2082;
    *(_QWORD *)&v62[26] = v31;
    *(_WORD *)&v62[34] = 2082;
    *(_QWORD *)&v62[36] = v32;
    *(_WORD *)&v62[44] = 2082;
    *(_QWORD *)&v62[46] = v33;
    *(_WORD *)&v62[54] = 2082;
    v63 = v34;
    v64 = 2082;
    v65 = v35;
    v66 = 2082;
    v67 = v36;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Disconnect connection handle: 0x%x (%d) wakeUp: %s SNR: %{public}s RSSI: %{public}s\nRetransmission Rx: %{public}s Retransmission Tx: %{public}s Packet Type Rx: %{public}s Packet Type Tx: %{public}s", v62, 0x54u);
  }
  memset(v62, 0, sizeof(v62));
  *(_WORD *)v62 = *(_WORD *)(a1 + 40);
  sub_10030DA64((((v13 + ((-30583 * (__int16)v13) >> 16)) >> 5)+ (((v13 + ((-30583 * (__int16)v13) >> 16)) & 0x8000) >> 15)), &v51);
  if ((v62[39] & 0x80000000) != 0)
    operator delete(*(void **)&v62[16]);
  *(_OWORD *)&v62[16] = v51;
  *(_QWORD *)&v62[32] = v52;
  *(_WORD *)&v62[6] = ((__int16)((34953 * (__int16)v6) >> 16) >> 4)
                    + (((v6 + ((-30583 * (__int16)v6) >> 16)) & 0x8000) >> 15);
  *(_WORD *)&v62[4] = ((__int16)((34953 * v5) >> 16) >> 4)
                    + (((v5 + ((-30583 * v5) >> 16)) & 0x8000) >> 15);
  *(_WORD *)&v62[8] = ((__int16)((34953 * (__int16)v12) >> 16) >> 5)
                    + (((v12 + ((-30583 * (__int16)v12) >> 16)) & 0x8000) >> 15);
  *(_QWORD *)&v62[48] = v48;
  sub_1002213E8(v47, &v62[2]);
  v62[44] = v46;
  v37 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37))
  {
    v38 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 408))(v38))
    {
      if (v5 >= 30 && v46)
      {
        if (qword_1009778A8 != -1)
          dispatch_once(&qword_1009778A8, &stru_100926CB8);
        v39 = sub_100624724((uint64_t)off_1009778A0, v47);
        v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_100926D38);
        v41 = off_1009778C0;
        sub_100091AE8(__p, "BluetoothTVRemote");
        v42 = sub_10000628C((uint64_t)v41, v40, (uint64_t)__p);
        v43 = v42;
        if (v50 < 0)
        {
          operator delete(__p[0]);
          if (!v43)
          {
LABEL_98:

            goto LABEL_99;
          }
        }
        else if (!v42)
        {
          goto LABEL_98;
        }
        sub_10047D244("AppleTVInternal", "AppleTVRemoteDisconnectionInvalidRSSI", 60.0);
        goto LABEL_98;
      }
    }
  }
LABEL_99:
  if (sub_100065478())
  {
    v44 = sub_100065478();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v44 + 256))(v44, v62);
  }
  if ((v62[39] & 0x80000000) != 0)
    operator delete(*(void **)&v62[16]);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  return sub_100043728(&v59);
}

void sub_10030E2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  sub_100043728((_BYTE *)(v57 - 201));
  _Unwind_Resume(a1);
}

uint64_t sub_10030E410(uint64_t a1, int a2, int a3)
{
  __int128 *v4;
  NSObject *v5;
  _DWORD v7[2];

  v4 = sub_10019ACEC(a2);
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "HDR PPT = %d", (uint8_t *)v7, 8u);
  }
  if (sub_10019AB28((uint64_t)v4))
    *((_BYTE *)v4 + 288) = a3;
  return 0;
}

uint64_t sub_10030E4D8(uint64_t a1, int a2, int a3)
{
  __int128 *v4;
  NSObject *v5;
  _DWORD v7[2];

  v4 = sub_10019ACEC(a2);
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "HDR Change connection Packet Type = %d", (uint8_t *)v7, 8u);
  }
  if (sub_10019AB28((uint64_t)v4))
    *((_DWORD *)v4 + 71) = a3;
  return 0;
}

uint64_t sub_10030E5A0(uint64_t a1, int a2, int a3)
{
  __int128 *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  int v10;
  int v11;

  v4 = sub_10019ACEC(a2);
  v5 = sub_10019B144((uint64_t)v4);
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v10 = 67109120;
    v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "HRB Band changed band = %02X", (uint8_t *)&v10, 8u);
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100926CF8);
  v7 = *(_DWORD *)v5;
  LOWORD(v11) = *(_WORD *)(v5 + 4);
  v10 = v7;
  v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v10, 0);
  if (qword_100978120 != -1)
    dispatch_once(&qword_100978120, &stru_100926D78);
  sub_100265AAC(qword_100978118, v8, a3);
  if (sub_10019AB28((uint64_t)v4))
    *((_BYTE *)v4 + 289) = a3;
  if (_os_feature_enabled_impl("BluetoothFeatures", "BandSwitchManager"))
  {
    if (qword_100977B18 != -1)
      dispatch_once(&qword_100977B18, &stru_100926D98);
    sub_1002C0E04(qword_100977B10, v5, a3);
  }
  return 0;
}

uint64_t sub_10030E750(uint64_t a1, int a2, int a3, int a4)
{
  __int128 *v6;
  uint64_t v7;
  NSObject *v8;
  _DWORD v10[2];
  __int16 v11;
  int v12;

  v6 = sub_10019ACEC(a2);
  v7 = sub_10019B144((uint64_t)v6);
  v8 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v10[0] = 67109376;
    v10[1] = a3;
    v11 = 1024;
    v12 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "HRB Band changed Failed, band = %02X, status = %d", (uint8_t *)v10, 0xEu);
  }
  if (sub_10019AB28((uint64_t)v6))
    *((_BYTE *)v6 + 289) = a3;
  if (_os_feature_enabled_impl("BluetoothFeatures", "BandSwitchManager"))
  {
    if (qword_100977B18 != -1)
      dispatch_once(&qword_100977B18, &stru_100926D98);
    sub_1002C1460(qword_100977B10, v7, a3, a4);
  }
  return 0;
}

uint64_t sub_10030E890(uint64_t a1, int a2, int a3)
{
  NSObject *v5;
  __int128 *v6;
  uint64_t v7;
  _DWORD v9[2];

  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v9[0] = 67109120;
    v9[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "HRB Peripheral Allowed Bands Received, bands = %02X", (uint8_t *)v9, 8u);
  }
  v6 = sub_10019ACEC(a2);
  v7 = sub_10019B144((uint64_t)v6);
  if (_os_feature_enabled_impl("BluetoothFeatures", "BandSwitchManager"))
  {
    if (qword_100977B18 != -1)
      dispatch_once(&qword_100977B18, &stru_100926D98);
    sub_1002C18E8(qword_100977B10, v7);
  }
  return 0;
}

uint64_t sub_10030E9A4(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _DWORD v5[2];

  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "HRB Band Classification Request band = %d", (uint8_t *)v5, 8u);
  }
  if (_os_feature_enabled_impl("BluetoothFeatures", "BandSwitchManager"))
  {
    if (qword_100977B18 != -1)
      dispatch_once(&qword_100977B18, &stru_100926D98);
    nullsub_90(qword_100977B10, a2);
  }
  return 0;
}

uint64_t sub_10030EA98(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9)
{
  NSObject *v17;
  __int128 *v18;
  uint64_t v19;
  _QWORD **v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD **v23;
  BOOL v24;
  NSObject *v25;
  int v27;
  _QWORD v28[2];
  uint8_t v29[4];
  int v30;
  uint8_t buf[8];
  _QWORD *v32;
  _BYTE v33[10];
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;

  v17 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67110912;
    *(_DWORD *)&buf[4] = a2;
    LOWORD(v32) = 1024;
    *(_DWORD *)((char *)&v32 + 2) = a3;
    HIWORD(v32) = 1024;
    *(_DWORD *)v33 = a4;
    *(_WORD *)&v33[4] = 1024;
    *(_DWORD *)&v33[6] = a5;
    v34 = 1024;
    v35 = a6;
    v36 = 1024;
    v37 = a7;
    v38 = 1024;
    v39 = a8;
    v40 = 1024;
    v41 = a9;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Advanced Sniff Mode Change status = %d lmHandle=%x, mode=%d anchorPointHost=%d anchorPointController=%d maxAge=%d(ms), maxRetry=%d(frames), sniffInterval=%d(slots)", buf, 0x32u);
  }
  v28[0] = 0;
  v28[1] = 0;
  sub_10003415C((uint64_t)v28, a1 + 8);
  *(_QWORD *)buf = 0;
  v32 = 0;
  *(_QWORD *)v33 = 0;
  sub_10031F434((uint64_t *)buf, a1 + 136);
  sub_100034264((uint64_t)v28);
  v18 = sub_10019ACEC(a3);
  if (sub_10019AB28((uint64_t)v18))
  {
    v19 = sub_10019B144((uint64_t)v18);
    v20 = *(_QWORD ***)buf;
    if (*(_QWORD ***)buf != &v32)
    {
      v21 = v19;
      do
      {
        LOWORD(v27) = a9;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))(*v20[4] + 80))(v20[4], a2, v21, a4, a5, a6, a7, a8, v27);
        v22 = v20[1];
        if (v22)
        {
          do
          {
            v23 = (_QWORD **)v22;
            v22 = (_QWORD *)*v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (_QWORD **)v20[2];
            v24 = *v23 == v20;
            v20 = v23;
          }
          while (!v24);
        }
        v20 = v23;
      }
      while (v23 != &v32);
    }
  }
  else
  {
    v25 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v29 = 67109120;
      v30 = a3;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "vseAdvancedSniffModeChange Bad lmHandle: %x", v29, 8u);
    }
  }
  sub_10001A82C((uint64_t)buf, v32);
  sub_100034234((uint64_t)v28);
  return 0;
}

void sub_10030ECE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16)
{
  sub_10001A82C((uint64_t)&a15, a16);
  sub_100034234((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_10030ED24(uint64_t a1, int a2, int a3, int a4, int a5)
{
  NSObject *v9;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;

  v9 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v11[0] = 67109888;
    v11[1] = a2;
    v12 = 1024;
    v13 = a3;
    v14 = 1024;
    v15 = a4;
    v16 = 1024;
    v17 = a5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Advanced Sniff Anchor Point Timestamp Report lmHandle=%x sniffInterval=%x anchorPointHost=%d anchorPointController=%d", (uint8_t *)v11, 0x1Au);
  }
  return 0;
}

uint64_t sub_10030EDFC(uint64_t a1, int a2, int a3)
{
  NSObject *v5;
  _DWORD v7[2];
  __int16 v8;
  int v9;

  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v7[0] = 67109376;
    v7[1] = a2;
    v8 = 1024;
    v9 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Flow Status lmHandle=%x flow=%d", (uint8_t *)v7, 0xEu);
  }
  return 0;
}

uint64_t sub_10030EEB8(uint64_t a1, const void *a2, unsigned int a3)
{
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_100926C98);
  sub_10066FEC0((uint64_t)off_100977FA8, a2, a3);
  return 0;
}

uint64_t sub_10030EF18(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint8_t v5[16];

  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "AdvRead Buffer Full VSE", v5, 2u);
  }
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_100926C98);
  nullsub_90(off_100977FA8, a2);
  return 0;
}

uint64_t sub_10030EFBC(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v6[2];

  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4 = *(unsigned __int8 *)(a2 + 6);
    v6[0] = 67109120;
    v6[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Match Buffer Data Match Event VSE - payload = %d", (uint8_t *)v6, 8u);
  }
  return 0;
}

uint64_t sub_10030F064(uint64_t a1, _OWORD *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v6[2];

  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4 = *(_DWORD *)a2;
    v6[0] = 67109120;
    v6[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Match Buffer Read VSE - native clock = %d", (uint8_t *)v6, 8u);
  }
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_100926C98);
  sub_100672438((uint64_t)off_100977FA8, a2);
  return 0;
}

uint64_t sub_10030F144(uint64_t a1, uint64_t a2)
{
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_100926C98);
  sub_100673324((uint64_t)off_100977FA8, a2);
  return 0;
}

uint64_t sub_10030F19C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x98u);
}

uint64_t sub_10030F1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD **v8;
  _QWORD *v9;
  _QWORD **v10;
  BOOL v11;
  _QWORD **v13;
  _QWORD *v14[2];
  _QWORD v15[2];

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 8);
  v13 = 0;
  v14[0] = 0;
  v14[1] = 0;
  sub_10031F434((uint64_t *)&v13, a1 + 136);
  v8 = v13;
  if (v13 != v14)
  {
    do
    {
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v8[4] + 48))(v8[4], a2, a3, a4);
      v9 = v8[1];
      if (v9)
      {
        do
        {
          v10 = (_QWORD **)v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD **)v8[2];
          v11 = *v10 == v8;
          v8 = v10;
        }
        while (!v11);
      }
      v8 = v10;
    }
    while (v10 != v14);
  }
  sub_10001A82C((uint64_t)&v13, v14[0]);
  sub_100034234((uint64_t)v15);
  return 0;
}

void sub_10030F2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10030F2F4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x93u);
}

uint64_t sub_10030F340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD **v12;
  _QWORD *v13;
  _QWORD **v14;
  BOOL v15;
  _QWORD **v17;
  _QWORD *v18[2];
  _QWORD v19[2];

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 8);
  v17 = 0;
  v18[0] = 0;
  v18[1] = 0;
  sub_10031F434((uint64_t *)&v17, a1 + 136);
  v12 = v17;
  if (v17 != v18)
  {
    do
    {
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v12[4] + 56))(v12[4], a2, a3, a4, a5, a6);
      v13 = v12[1];
      if (v13)
      {
        do
        {
          v14 = (_QWORD **)v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD **)v12[2];
          v15 = *v14 == v12;
          v12 = v14;
        }
        while (!v15);
      }
      v12 = v14;
    }
    while (v14 != v18);
  }
  sub_10001A82C((uint64_t)&v17, v18[0]);
  sub_100034234((uint64_t)v19);
  return 0;
}

void sub_10030F43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10030F464(uint64_t a1, char a2, int a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10030F4C0;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 147, a3, v4, 0);
}

uint64_t sub_10030F4C0()
{
  return sub_1001F5CF4();
}

uint64_t sub_10030F4E0(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x94u);
}

uint64_t sub_10030F52C(uint64_t a1, char a2, int a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10030F588;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 148, a3, v4, 0);
}

uint64_t sub_10030F588()
{
  return sub_1001F5D7C();
}

uint64_t sub_10030F5C0(int a1, int a2)
{
  NSObject *v4;
  _DWORD v6[2];

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "power %d", (uint8_t *)v6, 8u);
  }
  LODWORD(xmmword_100991B70) = a2;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0);
}

uint64_t sub_10030F6A8(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10030F714;
  v3[3] = &unk_100917378;
  v3[4] = a2;
  return sub_100042FD0(a1, 0, 1, &stru_1009268C8, v3);
}

int sub_10030F708(id a1)
{
  return sub_1001F875C();
}

uint64_t sub_10030F714(uint64_t result)
{
  **(_DWORD **)(result + 32) = xmmword_100991B70;
  return result;
}

uint64_t sub_10030F728(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x17u);
}

uint64_t sub_10030F774(uint64_t a1, char a2, int a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10030F7D0;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 23, a3, v4, 0);
}

uint64_t sub_10030F7D0()
{
  return sub_1001F87E4();
}

uint64_t sub_10030F7F0(int a1, int a2)
{
  NSObject *v4;
  _DWORD v6[2];

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "isWbsSupported %d", (uint8_t *)v6, 8u);
  }
  LOBYTE(xmmword_100991B70) = a2;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x95u);
}

uint64_t sub_10030F8D8(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD v4[5];
  _QWORD v5[4];
  char v6;

  v4[4] = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10030F94C;
  v5[3] = &unk_100926418;
  v6 = a3;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10030F964;
  v4[3] = &unk_100917378;
  return sub_100042FD0(a1, 149, a3, v5, v4);
}

uint64_t sub_10030F94C()
{
  return sub_1001F5238();
}

uint64_t sub_10030F964(uint64_t result)
{
  **(_BYTE **)(result + 32) = (_BYTE)xmmword_100991B70 != 0;
  return result;
}

uint64_t sub_10030F980(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 8u);
}

uint64_t sub_10030F9CC(uint64_t a1, uint64_t a2, char a3, int a4)
{
  _QWORD v5[5];
  char v6;
  char v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10030FA34;
  v5[3] = &unk_1009265D8;
  v5[4] = a2;
  v6 = a3;
  v7 = a4;
  return sub_100042FD0(a1, 8, a4, v5, 0);
}

uint64_t sub_10030FA34(uint64_t a1)
{
  uint64_t (*v1)(int);

  if (*(_BYTE *)(a1 + 41))
    v1 = sub_10030F980;
  else
    v1 = 0;
  return sub_1001F88F4(*(unsigned __int8 *)(a1 + 40), *(_QWORD *)(a1 + 32) + 128, (uint64_t)v1);
}

uint64_t sub_10030FA5C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x96u);
}

uint64_t sub_10030FAA8(uint64_t a1, uint64_t a2, char a3, int a4)
{
  _QWORD v5[5];
  char v6;
  char v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10030FB10;
  v5[3] = &unk_1009265D8;
  v5[4] = a2;
  v6 = a3;
  v7 = a4;
  return sub_100042FD0(a1, 150, a4, v5, 0);
}

uint64_t sub_10030FB10(uint64_t a1)
{
  uint64_t (*v1)(int);

  if (*(_BYTE *)(a1 + 41))
    v1 = sub_10030FA5C;
  else
    v1 = 0;
  return sub_1001F5E04(*(unsigned __int8 *)(a1 + 40), *(_QWORD *)(a1 + 32) + 128, (uint64_t)v1);
}

uint64_t sub_10030FB38(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xAFu);
}

uint64_t sub_10030FB84(uint64_t a1, int a2, int a3, int a4)
{
  _QWORD v5[4];
  int v6;
  int v7;
  char v8;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10030FBE8;
  v5[3] = &unk_1009263D8;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return sub_100042FD0(a1, 175, a4, v5, 0);
}

uint64_t sub_10030FBE8()
{
  return sub_1001F5F54();
}

uint64_t sub_10030FC08(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 1u);
}

uint64_t sub_10030FC54(uint64_t a1)
{
  return sub_100042FD0(a1, 1, 1, &stru_1009268E8, 0);
}

int sub_10030FC6C(id a1)
{
  return sub_1001F89BC();
}

uint64_t sub_10030FC7C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 6u);
}

uint64_t sub_10030FCC8(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  const char *v4;
  int v5;
  uint64_t v6;
  _QWORD v8[2];
  int v9;
  char v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;

  v10 = 9;
  v9 = 134809857;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 72);
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v3 = sub_1000438E4(a1, 1);
    v4 = sub_1000438E4(a1, 6);
    *(_DWORD *)buf = 136446466;
    v12 = v3;
    v13 = 2082;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Sending: %{public}s and %{public}s", buf, 0x16u);
  }
  if (sub_1000431F4(a1, 1) && sub_1000431F4(a1, 6))
  {
    buf[0] = 0;
    sub_100043758(buf);
    v5 = sub_1001F8A44((uint64_t)&v9);
    sub_10004339C(buf);
    if (!v5)
    {
      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_100926C78);
      sub_1000433A4((uint64_t)off_100977A50, 6);
      sub_10006D81C(buf);
      v5 = sub_1001F89BC();
      sub_10004339C(buf);
      if (!v5)
      {
        if (qword_100977A58 != -1)
          dispatch_once(&qword_100977A58, &stru_100926C78);
        v5 = sub_1000433A4((uint64_t)off_100977A50, 1);
      }
    }
    sub_1000445D4(a1, 1u);
    sub_1000445D4(a1, 6u);
    v6 = v5 != 0;
    sub_100043728(buf);
  }
  else
  {
    sub_1000445D4(a1, 1u);
    sub_1000445D4(a1, 6u);
    v6 = 2;
  }
  sub_100034234((uint64_t)v8);
  return v6;
}

void sub_10030FEF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10030FF28(int a1, int a2, int a3)
{
  NSObject *v6;
  _DWORD v8[2];
  __int16 v9;
  int v10;

  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v8[0] = 67109376;
    v8[1] = a2;
    v9 = 1024;
    v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "connection handle %x rssi %d", (uint8_t *)v8, 0xEu);
  }
  LOBYTE(xmmword_100991B70) = a3;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 3u);
}

uint64_t sub_100310020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[5];
  _QWORD v5[5];

  v4[4] = a3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100310098;
  v5[3] = &unk_100926538;
  v5[4] = a2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003100A8;
  v4[3] = &unk_100917378;
  return sub_100042FD0(a1, 3, 1, v5, v4);
}

uint64_t sub_100310098(uint64_t a1)
{
  return sub_1001F8AD8(*(_QWORD *)(a1 + 32), (uint64_t)sub_10030FF28);
}

uint64_t sub_1003100A8(uint64_t result)
{
  **(_BYTE **)(result + 32) = xmmword_100991B70;
  return result;
}

uint64_t sub_1003100BC()
{
  return 0;
}

uint64_t sub_1003100C4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 1u);
}

uint64_t sub_100310110(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 7u);
}

uint64_t sub_10031015C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 9u);
}

uint64_t sub_1003101A8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  _QWORD v10[2];
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 72);
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v5 = sub_1000438E4(a1, 1);
    v6 = sub_1000438E4(a1, 7);
    v7 = sub_1000438E4(a1, 9);
    *(_DWORD *)buf = 136446722;
    v12 = v5;
    v13 = 2082;
    v14 = v6;
    v15 = 2082;
    v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending: %{public}s, %{public}s, %{public}s", buf, 0x20u);
  }
  if (sub_1000431F4(a1, 1) && sub_1000431F4(a1, 7) && sub_1000431F4(a1, 9))
  {
    buf[0] = 0;
    sub_100043758(buf);
    v8 = sub_1001F89BC();
    sub_10004339C(buf);
    if (!(_DWORD)v8)
    {
      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_100926C78);
      v8 = sub_1000433A4((uint64_t)off_100977A50, 1);
      if (!(_DWORD)v8)
      {
        sub_10006D81C(buf);
        v8 = sub_1001F8B88();
        sub_10004339C(buf);
        if (!(_DWORD)v8)
        {
          if (qword_100977A58 != -1)
            dispatch_once(&qword_100977A58, &stru_100926C78);
          v8 = sub_1000433A4((uint64_t)off_100977A50, 7);
          if (!(_DWORD)v8)
          {
            sub_10006D81C(buf);
            v8 = sub_1001F8C10(a2 + 128, (uint64_t)sub_10031015C);
            sub_10004339C(buf);
            if (!(_DWORD)v8)
            {
              if (qword_100977A58 != -1)
                dispatch_once(&qword_100977A58, &stru_100926C78);
              v8 = sub_1000433A4((uint64_t)off_100977A50, 9);
            }
          }
        }
      }
    }
    sub_1000445D4(a1, 1u);
    sub_1000445D4(a1, 7u);
    sub_1000445D4(a1, 9u);
    sub_100043728(buf);
  }
  else
  {
    sub_1000445D4(a1, 1u);
    sub_1000445D4(a1, 7u);
    sub_1000445D4(a1, 9u);
    v8 = 3601;
  }
  sub_100034234((uint64_t)v10);
  return v8;
}

void sub_100310470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1003104A4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _BOOL8 v5;
  uint8_t v7[16];
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 72);
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "setScoRouteI2S16K", v7, 2u);
  }
  v5 = sub_1003101A8(a1, a2) != 0;
  sub_100034234((uint64_t)v8);
  return v5;
}

void sub_10031054C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100310560(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint8_t v6[16];

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "setScoRouteI2S8K", v6, 2u);
  }
  return sub_1003101A8(a1, a2) != 0;
}

uint64_t sub_1003105EC(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xFu);
}

uint64_t sub_100310638(uint64_t a1, __int16 a2, uint64_t a3)
{
  _QWORD v4[5];
  __int16 v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100310698;
  v4[3] = &unk_1009265D8;
  v4[4] = a3;
  v5 = a2;
  return sub_100042FD0(a1, 15, 1, v4, 0);
}

uint64_t sub_100310698(uint64_t a1)
{
  return sub_1001F8CC0(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1003106B0(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x10u);
}

uint64_t sub_1003106FC(uint64_t a1, __int16 a2, uint64_t a3)
{
  _QWORD v4[5];
  __int16 v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10031075C;
  v4[3] = &unk_1009265D8;
  v4[4] = a3;
  v5 = a2;
  return sub_100042FD0(a1, 16, 1, v4, 0);
}

uint64_t sub_10031075C(uint64_t a1)
{
  return sub_1001F8D54(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100310774(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xEu);
}

uint64_t sub_1003107C0(uint64_t a1, __int16 a2, uint64_t a3)
{
  _QWORD v4[5];
  __int16 v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100310820;
  v4[3] = &unk_1009265D8;
  v4[4] = a3;
  v5 = a2;
  return sub_100042FD0(a1, 14, 1, v4, 0);
}

uint64_t sub_100310820(uint64_t a1)
{
  return sub_1001F8DE8(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100310838(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xDu);
}

uint64_t sub_100310884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[6];

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003108E0;
  v5[3] = &unk_100926758;
  v5[4] = a4;
  v5[5] = a3;
  return sub_100042FD0(a1, 13, 1, v5, 0);
}

uint64_t sub_1003108E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t (**v7)();
  unsigned int *v8;
  uint64_t (**v9)();
  unsigned int *v10;
  void *__p[2];
  __int128 v12;

  v2 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)__p = 0u;
  v12 = 0u;
  sub_1004806B4((uint64_t)__p, 0);
  sub_10048071C((uint64_t)__p, **(_WORD **)(a1 + 40));
  sub_10048071C((uint64_t)__p, 0);
  sub_1004806E0((uint64_t)__p, *(_BYTE *)(*(_QWORD *)(a1 + 40) + 2));
  sub_10048071C((uint64_t)__p, *(_WORD *)(*(_QWORD *)(a1 + 40) + 4));
  sub_10003994C(&v9, __p[1], v12 - (unint64_t)__p[1]);
  v3 = sub_10003EB18((uint64_t)&v9);
  sub_10003994C(&v7, __p[1], v12 - (unint64_t)__p[1]);
  v4 = sub_10003F8C4((uint64_t)&v7);
  v5 = sub_1001F8E7C(v2 + 128, v3, v4, (uint64_t)sub_100310838);
  v7 = &off_100918258;
  if (v8)
    sub_100056AAC(v8);
  v9 = &off_100918258;
  if (v10)
    sub_100056AAC(v10);
  if (__p[1])
  {
    *(void **)&v12 = __p[1];
    operator delete(__p[1]);
  }
  return v5;
}

void sub_1003109E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (a12)
    sub_100056AAC(a12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100310A4C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x9Bu);
}

uint64_t sub_100310A98(uint64_t a1, char a2, char a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];
  char v13;
  _QWORD v14[5];
  char v15;
  char v16;

  if (*(_DWORD *)(sub_1000438A4() + 712) < 0x7D0u || *(_DWORD *)(sub_1000438A4() + 712) > 0xF9Fu)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100310BEC;
    v12[3] = &unk_1009263D8;
    v12[4] = a4;
    v13 = a2;
    v8 = v12;
    v9 = a1;
    v10 = 155;
  }
  else
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100310B84;
    v14[3] = &unk_1009265D8;
    v14[4] = a4;
    v15 = a2;
    v16 = a3;
    v8 = v14;
    v9 = a1;
    v10 = 91;
  }
  return sub_100042FD0(v9, v10, 1, v8, 0);
}

uint64_t sub_100310B84()
{
  return sub_1001FA14C();
}

uint64_t sub_100310BA0(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x5Bu);
}

uint64_t sub_100310BEC(uint64_t a1)
{
  return sub_1001F5490(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), (uint64_t)sub_100310A4C);
}

uint64_t sub_100310C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];

  v6 = a4 + 128;
  if (sub_100331480())
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100310D28;
    v13[3] = &unk_100926758;
    v13[4] = v6;
    v13[5] = a3;
    v7 = v13;
    v8 = a1;
    v9 = 152;
  }
  else if (*(_DWORD *)(sub_1000438A4() + 712) < 0x7D0u || *(_DWORD *)(sub_1000438A4() + 712) > 0xF9Fu)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100310DE8;
    v11[3] = &unk_100926758;
    v11[4] = v6;
    v11[5] = a3;
    v7 = v11;
    v8 = a1;
    v9 = 151;
  }
  else
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100310D7C;
    v12[3] = &unk_100926758;
    v12[4] = a3;
    v12[5] = v6;
    v7 = v12;
    v8 = a1;
    v9 = 91;
  }
  return sub_100042FD0(v8, v9, 1, v7, 0);
}

uint64_t sub_100310D28(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = *(unsigned __int8 **)(a1 + 40);
  return sub_1001F9034(*(_QWORD *)(a1 + 32), *v1, v1[1], v1[2], v1[3], v1[4], v1[5], v1[6], v1[16], (uint64_t)sub_10030F19C);
}

uint64_t sub_100310D7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v2 + 17) == 1)
  {
    result = sub_100182588(v1, &v4);
    if ((_DWORD)result)
      return result;
  }
  else
  {
    result = sub_1001825D4(v1, &v4);
    if ((_DWORD)result)
      return result;
  }
  return sub_1001FA14C();
}

uint64_t sub_100310DE8(uint64_t a1)
{
  unsigned __int16 *v1;

  v1 = *(unsigned __int16 **)(a1 + 40);
  return sub_1001F8F44(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)v1, v1[4], v1[5], v1[6], v1[7], (uint64_t)sub_100310E10);
}

uint64_t sub_100310E10(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x97u);
}

uint64_t sub_100310E5C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 2u);
}

uint64_t sub_100310EA8(uint64_t a1, __int16 a2)
{
  _QWORD v3[4];
  __int16 v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100310F04;
  v3[3] = &unk_1009264D8;
  v4 = a2;
  return sub_100042FD0(a1, 2, 1, v3, 0);
}

uint64_t sub_100310F04()
{
  return sub_1001F913C();
}

uint64_t sub_100310F14(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xA8u);
}

uint64_t sub_100310F60(uint64_t a1, __int16 a2, char a3, char a4, char a5, char a6)
{
  _QWORD v7[4];
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100310FD0;
  v7[3] = &unk_100926908;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = a6;
  return sub_100042FD0(a1, 168, 1, v7, &stru_100926928);
}

uint64_t sub_100310FD0(uint64_t a1)
{
  __int16 v2;
  int v3;

  v2 = *(_WORD *)(a1 + 32);
  v3 = *(_DWORD *)(a1 + 34);
  return sub_1001F59B8((uint64_t)&v2);
}

uint64_t sub_10031100C(int a1, const void *a2, size_t __n)
{
  word_100991C70 = __n;
  memcpy(&xmmword_100991B70, a2, __n);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x12u);
}

uint64_t sub_10031106C(uint64_t a1, char a2, __int16 a3, char a4, uint64_t a5, char a6, __int16 a7, __int16 a8, char a9, char a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15)
{
  _QWORD v16[6];
  _QWORD v17[4];
  __int16 v18;
  __int16 v19;
  __int16 v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100311128;
  v17[3] = &unk_1009263B8;
  v18 = a3;
  v21 = a2;
  v22 = a4;
  v23 = a6;
  v19 = a7;
  v20 = a8;
  v24 = a9;
  v25 = a10;
  v26 = a11;
  v27 = a12;
  v28 = a13;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100311190;
  v16[3] = &unk_100918090;
  v16[4] = a14;
  v16[5] = a15;
  return sub_100042FD0(a1, 18, 1, v17, v16);
}

uint64_t sub_100311128(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  LOBYTE(v2) = *(_BYTE *)(a1 + 32);
  WORD1(v2) = *(unsigned __int8 *)(a1 + 38);
  BYTE4(v2) = *(_BYTE *)(a1 + 39);
  BYTE6(v2) = *(_BYTE *)(a1 + 40);
  LODWORD(v3) = *(_DWORD *)(a1 + 34);
  HIDWORD(v3) = *(_DWORD *)(a1 + 41);
  LOBYTE(v4) = *(_BYTE *)(a1 + 45);
  return sub_1001F924C((uint64_t)&v2);
}

void *sub_100311190(void *result)
{
  _WORD *v1;

  v1 = (_WORD *)*((_QWORD *)result + 4);
  if ((unsigned __int16)word_100991C70 <= (unsigned __int16)*v1)
  {
    *v1 = word_100991C70;
    return memcpy(*((void **)result + 5), &xmmword_100991B70, (unsigned __int16)word_100991C70);
  }
  return result;
}

uint64_t sub_1003111C4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x13u);
}

uint64_t sub_100311210(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD v4[5];
  char v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100311270;
  v4[3] = &unk_1009263D8;
  v5 = a2;
  v4[4] = a3;
  return sub_100042FD0(a1, 19, 1, v4, 0);
}

uint64_t sub_100311270(uint64_t a1)
{
  __int16 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  char v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  char v15;
  char v16;
  uint64_t v17;
  __int16 v18;
  char v19;
  char v20;
  uint64_t v21;
  __int16 v22;

  v7 = *(_BYTE *)(a1 + 40);
  v1 = *(__int16 **)(a1 + 32);
  v8 = *v1;
  v2 = *(_QWORD *)(v1 + 1);
  v10 = v1[5];
  v9 = v2;
  v11 = *((_BYTE *)v1 + 12);
  v12 = *((_BYTE *)v1 + 13);
  v3 = *(_QWORD *)(v1 + 7);
  v14 = v1[11];
  v13 = v3;
  v15 = *((_BYTE *)v1 + 24);
  v16 = *((_BYTE *)v1 + 25);
  v4 = *(_QWORD *)(v1 + 13);
  v18 = v1[17];
  v17 = v4;
  v19 = *((_BYTE *)v1 + 36);
  v20 = *((_BYTE *)v1 + 37);
  v5 = *(_QWORD *)(v1 + 19);
  v22 = v1[23];
  v21 = v5;
  return sub_1001F92E0((uint64_t)&v7);
}

uint64_t sub_100311348(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x14u);
}

uint64_t sub_100311394(uint64_t a1, char a2, int a3, char a4, uint64_t a5)
{
  _QWORD v6[5];
  int v7;
  char v8;
  char v9;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1003113FC;
  v6[3] = &unk_1009263B8;
  v8 = a2;
  v7 = a3;
  v9 = a4;
  v6[4] = a5;
  return sub_100042FD0(a1, 20, 1, v6, 0);
}

uint64_t sub_1003113FC(uint64_t a1)
{
  int v1;
  uint64_t *v2;
  __int16 v3;
  _BYTE v5[6];
  uint64_t v6;
  __int16 v7;

  v5[0] = 1;
  v5[1] = *(_BYTE *)(a1 + 44);
  v1 = *(_DWORD *)(a1 + 40);
  v5[2] = v1 != 3;
  v5[3] = (v1 - 1) < 2;
  v5[4] = v1 == 2;
  v5[5] = *(_BYTE *)(a1 + 45);
  v2 = *(uint64_t **)(a1 + 32);
  v3 = *((_WORD *)v2 + 4);
  v6 = *v2;
  v7 = v3;
  return sub_1001F9374((uint64_t)v5);
}

uint64_t sub_1003114A8(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xA4u);
}

uint64_t sub_1003114F4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x1Au);
}

uint64_t sub_100311540(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];
  char v12;
  _QWORD v13[5];
  char v14;

  if (*(_DWORD *)(sub_1000438A4() + 712) >= 6u
    && (v6 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 120))(v6)))
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100311628;
    v13[3] = &unk_1009263D8;
    v13[4] = a2;
    v14 = a3;
    v7 = v13;
    v8 = a1;
    v9 = 26;
  }
  else
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100311640;
    v11[3] = &unk_1009263D8;
    v12 = a3;
    v11[4] = a2;
    v7 = v11;
    v8 = a1;
    v9 = 164;
  }
  return sub_100042FD0(v8, v9, 1, v7, 0);
}

uint64_t sub_100311628()
{
  return sub_1001F9524();
}

uint64_t sub_100311640()
{
  return sub_1001F5930();
}

uint64_t sub_100311658(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x18u);
}

uint64_t sub_1003116A4()
{
  return sub_1001F91C4();
}

uint64_t sub_1003116B4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x16u);
}

uint64_t sub_100311700(uint64_t a1, void *a2, __int16 a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD v9[5];
  __int16 v10;
  uint64_t v11;
  unsigned __int8 v12[16];

  v5 = a2;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100926CB8);
  v11 = 0;
  v6 = off_1009778A0;
  sub_100030BCC(v12, v5);
  if (sub_100623C54((uint64_t)v6, v12, &v11))
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100311838;
    v9[3] = &unk_1009265D8;
    v9[4] = v11;
    v10 = a3;
    v7 = sub_100042FD0(a1, 22, 1, v9, 0);
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_10031181C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100311838(uint64_t a1)
{
  return sub_1001F9408(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100311850(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xCu);
}

uint64_t sub_10031189C(uint64_t a1, __int16 a2)
{
  _QWORD v3[4];
  __int16 v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1003118F8;
  v3[3] = &unk_1009264D8;
  v4 = a2;
  return sub_100042FD0(a1, 12, 1, v3, 0);
}

uint64_t sub_1003118F8()
{
  return sub_1001F949C();
}

uint64_t sub_100311908(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xF8u);
}

uint64_t sub_100311954(uint64_t a1, __int16 a2)
{
  _QWORD v3[4];
  __int16 v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1003119B0;
  v3[3] = &unk_1009264D8;
  v4 = a2;
  return sub_100042FD0(a1, 248, 1, v3, 0);
}

uint64_t sub_1003119B0()
{
  return sub_1001FD7E4();
}

uint64_t sub_1003119C0(int a1, const void *a2, size_t __n)
{
  word_100991C70 = __n;
  memcpy(&xmmword_100991B70, a2, __n);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x11u);
}

uint64_t sub_100311A20(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[6];
  _QWORD v6[4];
  char v7;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100311A9C;
  v6[3] = &unk_100926418;
  v7 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100311AAC;
  v5[3] = &unk_100918090;
  v5[4] = a3;
  v5[5] = a4;
  return sub_100042FD0(a1, 17, 1, v6, v5);
}

uint64_t sub_100311A9C()
{
  return sub_1001F95AC();
}

void *sub_100311AAC(void *result)
{
  _WORD *v1;

  v1 = (_WORD *)*((_QWORD *)result + 4);
  if ((unsigned __int16)word_100991C70 <= (unsigned __int16)*v1)
  {
    *v1 = word_100991C70;
    return memcpy(*((void **)result + 5), &xmmword_100991B70, (unsigned __int16)word_100991C70);
  }
  return result;
}

uint64_t sub_100311AE0(int a1, int a2, int a3, int a4, int a5)
{
  NSObject *v10;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;

  v10 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v12[0] = 67109888;
    v12[1] = a2;
    v13 = 1024;
    v14 = a3;
    v15 = 1024;
    v16 = a4;
    v17 = 1024;
    v18 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "transmitting %d, receiving %d, sleep %d, others %d", (uint8_t *)v12, 0x1Au);
  }
  LOWORD(xmmword_100991B70) = a2;
  WORD1(xmmword_100991B70) = a3;
  WORD2(xmmword_100991B70) = a4;
  WORD3(xmmword_100991B70) = a5;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x9Eu);
}

uint64_t sub_100311C04(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[8];
  _QWORD v8[4];
  __int16 v9;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100311C84;
  v8[3] = &unk_1009264D8;
  v9 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100311C9C;
  v7[3] = &unk_1009181F8;
  v7[4] = a3;
  v7[5] = a4;
  v7[6] = a5;
  v7[7] = a6;
  return sub_100042FD0(a1, 158, 1, v8, v7);
}

uint64_t sub_100311C84()
{
  return sub_1001F5798();
}

uint64_t sub_100311C9C(uint64_t result)
{
  _WORD *v1;
  _WORD *v2;

  v1 = *(_WORD **)(result + 40);
  **(_WORD **)(result + 32) = xmmword_100991B70;
  *v1 = WORD1(xmmword_100991B70);
  v2 = *(_WORD **)(result + 56);
  **(_WORD **)(result + 48) = WORD2(xmmword_100991B70);
  *v2 = WORD3(xmmword_100991B70);
  return result;
}

uint64_t sub_100311CD0(int a1, int a2, int a3, int a4, int a5)
{
  NSObject *v10;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;

  LODWORD(xmmword_100991B70) = a2;
  DWORD1(xmmword_100991B70) = a3;
  DWORD2(xmmword_100991B70) = a4;
  HIDWORD(xmmword_100991B70) = a5;
  v10 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109888;
    v12[1] = a2;
    v13 = 1024;
    v14 = a3;
    v15 = 1024;
    v16 = a4;
    v17 = 1024;
    v18 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): iPACount: %u, ePACount: %u, iPAThreadCount: %u, ePAThreadCount: %u", (uint8_t *)v12, 0x1Au);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xA0u);
}

uint64_t sub_100311DEC(int a1, int *a2)
{
  NSObject *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  double v15;
  double v16;
  double v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v40;
  _BYTE v41[74];
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *a2;
    LODWORD(v5) = a2[1];
    LODWORD(v6) = a2[2];
    LODWORD(v7) = a2[3];
    LODWORD(v8) = a2[4];
    v15 = (float)a2[38] / 100.0;
    LODWORD(v9) = a2[42];
    v16 = (float)a2[41] / 100.0;
    LODWORD(v10) = a2[43];
    LODWORD(v11) = a2[44];
    LODWORD(v12) = a2[45];
    LODWORD(v13) = a2[46];
    v40 = 67112192;
    v17 = (double)a2[47];
    *(_DWORD *)v41 = v14;
    *(_WORD *)&v41[4] = 2048;
    *(double *)&v41[6] = (double)v5 / 100.0;
    *(_WORD *)&v41[14] = 2048;
    *(double *)&v41[16] = (double)v6 / 100.0;
    *(_WORD *)&v41[24] = 2048;
    *(double *)&v41[26] = (double)v7 / 100.0;
    *(_WORD *)&v41[34] = 2048;
    *(double *)&v41[36] = (double)v8 / 100.0;
    *(_WORD *)&v41[44] = 2048;
    *(double *)&v41[46] = v15;
    *(_WORD *)&v41[54] = 2048;
    *(double *)&v41[56] = v16;
    *(_WORD *)&v41[64] = 2048;
    *(double *)&v41[66] = (double)v9 / 100.0;
    v42 = 2048;
    v43 = (double)v10 / 100.0;
    v44 = 2048;
    v45 = (double)v11 / 100.0;
    v46 = 2048;
    v47 = (double)v12 / 100.0;
    v48 = 2048;
    v49 = (double)v13 / 100.0;
    v50 = 2048;
    v51 = v17 / 100.0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): commandType %d, txPct %0.1f%%, rxPct %0.1f%%, sleepPct %0.1f%%, idlePct %0.1f%% LP:%0.1f%% EPA:%0.1f%% TxBfEPA:%0.1f%% RxScan%0.1f%%, MainCore:%0.1f%%:%0.1f%%, ScanCore:%0.1f%%: %0.1f%%", (uint8_t *)&v40, 0x80u);
    v4 = qword_1009997E8;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v18) = a2[48];
    LODWORD(v19) = a2[49];
    v40 = 134218240;
    *(double *)v41 = (double)v18 / 100.0;
    *(_WORD *)&v41[8] = 2048;
    *(double *)&v41[10] = (double)v19 / 100.0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): m154Tx %0.1f%%,m154Rx %0.1f%%", (uint8_t *)&v40, 0x16u);
    v4 = qword_1009997E8;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v23 = a2[50];
    v24 = a2[51];
    LODWORD(v20) = a2[52];
    LODWORD(v21) = a2[53];
    v40 = 67110912;
    LODWORD(v22) = a2[55];
    v25 = (double)a2[54] / 100.0;
    v26 = *((_QWORD *)a2 + 28);
    v27 = *((_QWORD *)a2 + 29);
    *(_DWORD *)v41 = v23;
    *(_WORD *)&v41[4] = 1024;
    *(_DWORD *)&v41[6] = v24;
    *(_WORD *)&v41[10] = 2048;
    *(double *)&v41[12] = (double)v20 / 100.0;
    *(_WORD *)&v41[20] = 2048;
    *(double *)&v41[22] = (double)v21 / 100.0;
    *(_WORD *)&v41[30] = 2048;
    *(double *)&v41[32] = v25;
    *(_WORD *)&v41[40] = 2048;
    *(double *)&v41[42] = (double)v22 / 100.0;
    *(_WORD *)&v41[50] = 2048;
    *(_QWORD *)&v41[52] = v26;
    *(_WORD *)&v41[60] = 2048;
    *(_QWORD *)&v41[62] = v27;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): ipa5g %u, epa5g %u, txbf5gTxPct %0.1f%%, mrc5gRxPct %0.1f%%, epa5gTxPct %0.1f%%, txbf5gEpaRxPct %0.1f%%, duration5gTx %llu, duration5gRx %llu", (uint8_t *)&v40, 0x4Au);
  }
  v28 = *(_OWORD *)a2;
  v29 = *((_OWORD *)a2 + 2);
  xmmword_100991C90 = *((_OWORD *)a2 + 1);
  xmmword_100991CA0 = v29;
  xmmword_100991C80 = v28;
  v30 = *((_OWORD *)a2 + 3);
  v31 = *((_OWORD *)a2 + 4);
  v32 = *((_OWORD *)a2 + 6);
  xmmword_100991CD0 = *((_OWORD *)a2 + 5);
  xmmword_100991CE0 = v32;
  xmmword_100991CB0 = v30;
  xmmword_100991CC0 = v31;
  v33 = *((_OWORD *)a2 + 7);
  v34 = *((_OWORD *)a2 + 8);
  v35 = *((_OWORD *)a2 + 10);
  xmmword_100991D10 = *((_OWORD *)a2 + 9);
  *(_OWORD *)&dword_100991D20 = v35;
  xmmword_100991CF0 = v33;
  xmmword_100991D00 = v34;
  v36 = *((_OWORD *)a2 + 11);
  v37 = *((_OWORD *)a2 + 12);
  v38 = *((_OWORD *)a2 + 14);
  xmmword_100991D50 = *((_OWORD *)a2 + 13);
  *(_OWORD *)&qword_100991D60 = v38;
  xmmword_100991D30 = v36;
  *(_OWORD *)&dword_100991D40 = v37;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x9Fu);
}

uint64_t sub_100312138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v5;
  uint64_t v6;
  int v7;
  _BOOL4 v8;
  uint64_t v9;
  _BOOL4 v10;
  _BOOL4 v11;
  char v12;
  unsigned __int8 v13;
  NSObject *v14;
  const char *v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  NSObject *v21;
  const char *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v52;
  _QWORD v53[2];
  uint8_t buf[4];
  const char *v55;
  __int16 v56;
  int v57;

  v53[0] = 0;
  v53[1] = 0;
  sub_10003415C((uint64_t)v53, a1 + 72);
  sub_1000438A4();
  v5 = sub_1003314D0();
  v6 = sub_1000438A4();
  v7 = sub_1003314F4(v6);
  sub_1000438A4();
  v8 = sub_100331540();
  v9 = sub_1000438A4();
  v10 = sub_100331560(v9);
  v11 = v10;
  if (v5)
    v12 = 2;
  else
    v12 = 1;
  if (v7)
    v12 = 3;
  if (v8)
    v12 = 4;
  if (v10)
    v13 = 5;
  else
    v13 = v12;
  v14 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v15 = sub_1000438E4(a1, 159);
    *(_DWORD *)buf = 136446466;
    v55 = v15;
    v56 = 1024;
    v57 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): Sending: %{public}s, version=%d", buf, 0x12u);
  }
  if (sub_1000431F4(a1, 159))
  {
    v52 = 0;
    sub_100043758(&v52);
    v16 = sub_1001F5820();
    sub_10004339C(&v52);
    if (!v16)
    {
      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_100926C78);
      v16 = sub_1000433A4((uint64_t)off_100977A50, 159);
      if (!v16)
      {
        v17 = xmmword_100991C90;
        *(_OWORD *)a3 = xmmword_100991C80;
        *(_OWORD *)(a3 + 16) = v17;
        v18 = xmmword_100991CB0;
        *(_OWORD *)(a3 + 32) = xmmword_100991CA0;
        *(_OWORD *)(a3 + 48) = v18;
        v19 = xmmword_100991CD0;
        *(_OWORD *)(a3 + 64) = xmmword_100991CC0;
        *(_OWORD *)(a3 + 80) = v19;
        v20 = xmmword_100991CF0;
        *(_OWORD *)(a3 + 96) = xmmword_100991CE0;
        *(_OWORD *)(a3 + 112) = v20;
        *(_OWORD *)(a3 + 128) = xmmword_100991D00;
        *(_QWORD *)(a3 + 144) = xmmword_100991D10;
        if (sub_1000431F4(a1, 160))
        {
          v21 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            v22 = sub_1000438E4(a1, 160);
            *(_DWORD *)buf = 136446210;
            v55 = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): Sending: %{public}s", buf, 0xCu);
          }
          sub_10006D81C(&v52);
          v16 = sub_1001F58A8();
          sub_10004339C(&v52);
          if (!v16)
          {
            if (qword_100977A58 != -1)
              dispatch_once(&qword_100977A58, &stru_100926C78);
            v16 = sub_1000433A4((uint64_t)off_100977A50, 160);
            if (!v16)
            {
              *(_QWORD *)(a3 + 152) = xmmword_100991B70;
              v23 = DWORD2(xmmword_100991D10);
              v24 = HIDWORD(xmmword_100991D10);
              if (!v5)
              {
                v23 = 0;
                v24 = 0;
              }
              *(_DWORD *)(a3 + 160) = v23;
              *(_DWORD *)(a3 + 164) = v24;
              v25 = dword_100991D20;
              v26 = unk_100991D24;
              if (!v5)
              {
                v25 = 0;
                v26 = 0;
              }
              *(_DWORD *)(a3 + 168) = v25;
              *(_DWORD *)(a3 + 172) = v26;
              v27 = dword_100991D28;
              v28 = unk_100991D2C;
              if (!v7)
                v28 = 0;
              v29 = xmmword_100991D30;
              v30 = DWORD1(xmmword_100991D30);
              if (!v7)
              {
                v29 = 0;
                v30 = 0;
              }
              *(_DWORD *)(a3 + 184) = v29;
              *(_DWORD *)(a3 + 188) = v30;
              v31 = DWORD2(xmmword_100991D30);
              v32 = HIDWORD(xmmword_100991D30);
              if (!v7)
              {
                v31 = 0;
                v32 = 0;
              }
              *(_DWORD *)(a3 + 192) = v31;
              *(_DWORD *)(a3 + 196) = v32;
              v33 = dword_100991D40;
              v34 = unk_100991D44;
              if (!v8)
              {
                v33 = 0;
                v34 = 0;
              }
              *(_DWORD *)(a3 + 200) = v33;
              *(_DWORD *)(a3 + 204) = v34;
              v35 = dword_100991D48;
              v36 = unk_100991D4C;
              if (!v11)
              {
                v35 = 0;
                v36 = 0;
              }
              *(_DWORD *)(a3 + 216) = v35;
              *(_DWORD *)(a3 + 220) = v36;
              v37 = xmmword_100991D50;
              if (!v11)
                v37 = 0;
              *(_WORD *)(a3 + 224) = v37;
              v38 = WORD2(xmmword_100991D50);
              if (!v11)
                v38 = 0;
              *(_WORD *)(a3 + 226) = v38;
              v39 = WORD4(xmmword_100991D50);
              if (!v11)
                v39 = 0;
              *(_WORD *)(a3 + 228) = v39;
              if (!v11)
                v27 = 0;
              *(_DWORD *)(a3 + 176) = v27;
              *(_DWORD *)(a3 + 180) = v28;
              v41 = qword_100991D60;
              v40 = unk_100991D68;
              if (!v11)
              {
                v41 = 0;
                v40 = 0;
              }
              *(_QWORD *)(a3 + 232) = v41;
              *(_QWORD *)(a3 + 240) = v40;
            }
          }
        }
        else
        {
          v16 = 0;
        }
      }
    }
    sub_1000445D4(a1, 0x9Fu);
    sub_1000445D4(a1, 0xA0u);
    v50 = v16 != 0;
    sub_100043728(&v52);
  }
  else
  {
    v42 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006DF4F0(v42, v43, v44, v45, v46, v47, v48, v49);
    sub_1000445D4(a1, 0x9Fu);
    sub_1000445D4(a1, 0xA0u);
    v50 = 2;
  }
  sub_100034234((uint64_t)v53);
  return v50;
}

void sub_100312564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
  sub_100043728(&a13);
  sub_100034234((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1003125B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, unsigned int a14, unsigned int a15)
{
  NSObject *v20;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  unsigned int v50;
  __int16 v51;
  unsigned int v52;

  v20 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67112448;
    v26 = a2;
    v27 = 1024;
    v28 = a3;
    v29 = 1024;
    v30 = a4;
    v31 = 1024;
    v32 = a5;
    v33 = 1024;
    v34 = a6;
    v35 = 1024;
    v36 = a7;
    v37 = 1024;
    v38 = a8;
    v39 = 1024;
    v40 = a9;
    v41 = 1024;
    v42 = a10;
    v43 = 1024;
    v44 = a11;
    v45 = 1024;
    v46 = a12;
    v47 = 1024;
    v48 = a13;
    v49 = 1024;
    v50 = a14;
    v51 = 1024;
    v52 = a15;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): durationTotal %d, durationActive %d, durationIdle %d, durationSleep %d disableCounter %d, iPATxBT %d, ePATxBT %d, iPATxLE %d, ePATxLE %d, connectedRxBT %d, connectedRxLE %d, scanRxBT %d scanRxLE %d, totalPHYCal %d", buf, 0x56u);
  }
  LODWORD(xmmword_100991B70) = a2;
  DWORD1(xmmword_100991B70) = a3;
  DWORD2(xmmword_100991B70) = a4;
  HIDWORD(xmmword_100991B70) = a5;
  LODWORD(xmmword_100991B80) = a6;
  DWORD1(xmmword_100991B80) = a7;
  DWORD2(xmmword_100991B80) = a8;
  HIDWORD(xmmword_100991B80) = a9;
  dword_100991B90 = a10;
  dword_100991B94 = a11;
  dword_100991B98 = a12;
  dword_100991B9C = a13;
  *(_QWORD *)&xmmword_100991BA0 = __PAIR64__(a15, a14);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x2Eu);
}

uint64_t sub_100312798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, uint64_t a12)
{
  _QWORD v13[11];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10031282C;
  v13[3] = &unk_100926968;
  v13[4] = a2;
  v13[5] = a3;
  v13[6] = a4;
  v13[7] = a5;
  v13[8] = a6;
  v13[9] = a7;
  v13[10] = a8;
  v14 = a9;
  v15 = a10;
  v16 = a11;
  v17 = a12;
  return sub_100042FD0(a1, 46, 1, &stru_100926948, v13);
}

int sub_100312820(id a1)
{
  return sub_1001FA43C();
}

uint64_t sub_10031282C(uint64_t result)
{
  _DWORD *v1;
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;

  v1 = *(_DWORD **)(result + 40);
  **(_DWORD **)(result + 32) = xmmword_100991B70;
  *v1 = DWORD1(xmmword_100991B70);
  v2 = *(_DWORD **)(result + 56);
  **(_DWORD **)(result + 48) = DWORD2(xmmword_100991B70);
  *v2 = HIDWORD(xmmword_100991B70);
  v3 = *(_DWORD **)(result + 72);
  **(_DWORD **)(result + 64) = xmmword_100991B80;
  *v3 = DWORD1(xmmword_100991B80);
  v4 = *(_DWORD **)(result + 88);
  **(_DWORD **)(result + 80) = DWORD2(xmmword_100991B80);
  *v4 = HIDWORD(xmmword_100991B80);
  v5 = *(_DWORD **)(result + 104);
  **(_DWORD **)(result + 96) = dword_100991B90;
  *v5 = dword_100991B94;
  v6 = *(_DWORD **)(result + 120);
  **(_DWORD **)(result + 112) = dword_100991B98;
  *v6 = dword_100991B9C;
  v7 = *(_DWORD **)(result + 136);
  **(_DWORD **)(result + 128) = xmmword_100991BA0;
  *v7 = DWORD1(xmmword_100991BA0);
  return result;
}

uint64_t sub_1003128C4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x2Fu);
}

uint64_t sub_100312910(uint64_t a1)
{
  return sub_100042FD0(a1, 47, 1, &stru_100926988, 0);
}

int sub_100312928(id a1)
{
  return sub_1001FA4C4();
}

uint64_t sub_100312934(int a1, int a2, int a3, int a4, int a5)
{
  NSObject *v10;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;

  v10 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109888;
    v12[1] = a2;
    v13 = 1024;
    v14 = a3;
    v15 = 1024;
    v16 = a4;
    v17 = 1024;
    v18 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "total %d, successful %d, downgraded %d, involuntaryDowngraded %d", (uint8_t *)v12, 0x1Au);
  }
  LODWORD(xmmword_100991B70) = a2;
  DWORD1(xmmword_100991B70) = a3;
  DWORD2(xmmword_100991B70) = a4;
  HIDWORD(xmmword_100991B70) = a5;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x30u);
}

uint64_t sub_100312A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[8];

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100312AC0;
  v6[3] = &unk_1009181F8;
  v6[4] = a2;
  v6[5] = a3;
  v6[6] = a4;
  v6[7] = a5;
  return sub_100042FD0(a1, 48, 1, &stru_1009269A8, v6);
}

int sub_100312AB4(id a1)
{
  return sub_1001FA54C();
}

uint64_t sub_100312AC0(uint64_t result)
{
  _DWORD *v1;
  _DWORD *v2;

  v1 = *(_DWORD **)(result + 40);
  **(_DWORD **)(result + 32) = xmmword_100991B70;
  *v1 = DWORD1(xmmword_100991B70);
  v2 = *(_DWORD **)(result + 56);
  **(_DWORD **)(result + 48) = DWORD2(xmmword_100991B70);
  *v2 = HIDWORD(xmmword_100991B70);
  return result;
}

uint64_t sub_100312AF4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x31u);
}

uint64_t sub_100312B40(uint64_t a1)
{
  return sub_100042FD0(a1, 49, 1, &stru_1009269C8, 0);
}

int sub_100312B58(id a1)
{
  return sub_1001FA5D4();
}

uint64_t sub_100312B64(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xAAu);
}

uint64_t sub_100312BB0(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100312C0C;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 170, 1, v3, 0);
}

uint64_t sub_100312C0C()
{
  return sub_1001F5A4C();
}

uint64_t sub_100312C1C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x1Du);
}

uint64_t sub_100312C68(uint64_t a1, uint64_t a2, char a3, char a4, char a5)
{
  _QWORD v6[5];
  char v7;
  char v8;
  char v9;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100312CD0;
  v6[3] = &unk_100926398;
  v6[4] = a2;
  v7 = a3;
  v8 = a4;
  v9 = a5;
  return sub_100042FD0(a1, 29, 1, v6, 0);
}

uint64_t sub_100312CD0(uint64_t a1)
{
  return sub_1001F9BBC(*(_QWORD *)(a1 + 32) + 128, *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41), *(unsigned __int8 *)(a1 + 42), (uint64_t)sub_100312C1C);
}

uint64_t sub_100312CF4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x2Bu);
}

uint64_t sub_100312D40(uint64_t a1)
{
  uint64_t i;
  char v3;
  uint64_t result;
  _QWORD v5[4];
  char v6;

  for (i = 0; i != 6; ++i)
  {
    v3 = byte_10097AC60[i];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100312DE0;
    v5[3] = &unk_100926418;
    v6 = v3;
    result = sub_100042FD0(a1, 43, 1, v5, 0);
  }
  return result;
}

uint64_t sub_100312DE0()
{
  return sub_1001FA1D4();
}

uint64_t sub_100312DF0(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x2Cu);
}

uint64_t sub_100312E3C(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  _BOOL8 v7;
  const char *v8;
  _QWORD v10[2];
  uint8_t buf[24];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 72);
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v5 = sub_1000438E4(a1, 44);
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
  }
  if (sub_1000431F4(a1, 44))
  {
    v6 = qword_1009997E8;
    v7 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      v8 = "Disabling";
      if (a2)
        v8 = "Enabling";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s FW Log Streaming", buf, 0xCu);
    }
    IOBTDebug::create((IOBTDebug *)v7);
  }
  sub_100034234((uint64_t)v10);
  return 2;
}

void sub_100313190(_Unwind_Exception *a1, uint64_t a2, ...)
{
  IOBTDebug *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, IOBTDebug *);
  sub_10031F900((IOBTDebug **)va, 0);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003131E0(int a1, _DWORD *a2, unsigned int a3)
{
  if (!a1 && a2 && a3 >= 4)
  {
    LOBYTE(xmmword_100991B70) = 4;
    *(_DWORD *)((char *)&xmmword_100991B70 + 1) = *a2;
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xA5u);
}

uint64_t sub_100313254(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[6];
  _QWORD v8[4];
  char v9;
  char v10;
  char v11;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1003132D8;
  v8[3] = &unk_1009267D8;
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1003132F4;
  v7[3] = &unk_100918090;
  v7[4] = a6;
  v7[5] = a5;
  return sub_100042FD0(a1, 165, 1, v8, v7);
}

uint64_t sub_1003132D8()
{
  return sub_1001F5AD4();
}

void *sub_1003132F4(uint64_t a1)
{
  void *result;
  size_t v3;

  result = *(void **)(a1 + 32);
  if (result)
  {
    v3 = xmmword_100991B70;
    **(_WORD **)(a1 + 40) = xmmword_100991B70;
    return memcpy(result, (char *)&xmmword_100991B70 + 1, v3);
  }
  return result;
}

uint64_t sub_10031331C(int a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v4;

  if (!a1 && a2 && a3 >= 9)
  {
    LOBYTE(xmmword_100991B70) = 9;
    v4 = *a2;
    BYTE9(xmmword_100991B70) = *((_BYTE *)a2 + 8);
    *(_QWORD *)((char *)&xmmword_100991B70 + 1) = v4;
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xA6u);
}

uint64_t sub_100313398(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7, uint64_t a8, uint64_t a9)
{
  _QWORD v10[6];
  _QWORD v11[4];
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10031342C;
  v11[3] = &unk_100926908;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100313454;
  v10[3] = &unk_100918090;
  v10[4] = a9;
  v10[5] = a8;
  return sub_100042FD0(a1, 166, 1, v11, v10);
}

uint64_t sub_10031342C()
{
  return sub_1001F5B5C();
}

void *sub_100313454(uint64_t a1)
{
  void *result;
  size_t v3;

  result = *(void **)(a1 + 32);
  if (result)
  {
    v3 = xmmword_100991B70;
    **(_WORD **)(a1 + 40) = xmmword_100991B70;
    return memcpy(result, (char *)&xmmword_100991B70 + 1, v3);
  }
  return result;
}

uint64_t sub_10031347C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x2Du);
}

uint64_t sub_1003134C8(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100313524;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 45, 1, v3, 0);
}

uint64_t sub_100313524()
{
  return sub_1001FCEE4();
}

uint64_t sub_100313534(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x33u);
}

uint64_t sub_100313580(uint64_t a1)
{
  return sub_100042FD0(a1, 51, 1, &stru_1009269E8, 0);
}

int sub_100313598(id a1)
{
  return sub_1001F96BC();
}

uint64_t sub_1003135A4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x29u);
}

uint64_t sub_1003135F0(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10031364C;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 41, 1, v3, 0);
}

uint64_t sub_10031364C()
{
  return sub_1001FA03C();
}

uint64_t sub_10031365C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x2Au);
}

uint64_t sub_1003136A8(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100313704;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 42, 1, v3, 0);
}

uint64_t sub_100313704()
{
  return sub_1001FA0C4();
}

uint64_t sub_100313714(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x35u);
}

uint64_t sub_100313760(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1003137BC;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 53, 1, v3, 0);
}

uint64_t sub_1003137BC()
{
  return sub_1001FCA1C();
}

uint64_t sub_1003137CC(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x37u);
}

uint64_t sub_100313818(uint64_t a1, char a2, int a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100313874;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 55, a3, v4, 0);
}

uint64_t sub_100313874()
{
  return sub_1001FA65C();
}

uint64_t sub_100313894(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xB0u);
}

uint64_t sub_1003138E0(uint64_t a1, char a2, char a3, __int16 a4, __int16 a5, __int16 a6)
{
  _QWORD v7[4];
  __int16 v8;
  __int16 v9;
  __int16 v10;
  char v11;
  char v12;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10031394C;
  v7[3] = &unk_100926538;
  v11 = a2;
  v12 = a3;
  v8 = a4;
  v9 = a5;
  v10 = a6;
  return sub_100042FD0(a1, 176, 1, v7, 0);
}

uint64_t sub_10031394C()
{
  return sub_1001FD86C();
}

uint64_t sub_100313970(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xB2u);
}

uint64_t sub_1003139BC(uint64_t a1, uint64_t a2, int a3, __int16 a4)
{
  _QWORD v5[5];
  int v6;
  __int16 v7;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100313A20;
  v5[3] = &unk_1009263B8;
  v5[4] = a2;
  v6 = a3;
  v7 = a4;
  return sub_100042FD0(a1, 178, 1, v5, 0);
}

uint64_t sub_100313A20()
{
  return sub_1001FD8F4();
}

uint64_t sub_100313A3C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x38u);
}

uint64_t sub_100313A88(uint64_t a1, char a2, int a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100313AE4;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 56, a3, v4, 0);
}

uint64_t sub_100313AE4(uint64_t a1)
{
  uint64_t result;

  result = sub_1001FA6E4();
  BYTE10(xmmword_100998F98) = *(_BYTE *)(a1 + 32);
  return result;
}

uint64_t sub_100313B2C(int a1, int a2)
{
  NSObject *v4;
  _DWORD v6[2];

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Proprietary (HDR) Local Read Features=%d", (uint8_t *)v6, 8u);
  }
  dword_100998F94 = a2;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x39u);
}

uint64_t sub_100313C18(uint64_t a1, int a2)
{
  return sub_100042FD0(a1, 57, a2, &stru_100926A08, 0);
}

int sub_100313C30(id a1)
{
  return sub_1001FA76C();
}

uint64_t sub_100313C3C(int a1, int a2, int a3)
{
  NSObject *v6;
  __int128 *v7;
  NSObject *v8;
  _DWORD v10[2];

  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v10[0] = 67109120;
    v10[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Proprietary (HDR) Remote Read Features=%d", (uint8_t *)v10, 8u);
  }
  v7 = sub_10019ACEC(a2);
  if (sub_10019AB28((uint64_t)v7))
  {
    *((_DWORD *)v7 + 73) = a3;
  }
  else if (sub_10005549C())
  {
    sub_100054530("Device disconnected during the name request. Ignoring event.");
    v8 = sub_1000544A0(0x5Cu);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1006CEF28(v8);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x3Au);
}

uint64_t sub_100313D7C(uint64_t a1, __int16 a2, int a3)
{
  _QWORD v4[4];
  __int16 v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100313DD4;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  return sub_100042FD0(a1, 58, a3, v4, 0);
}

uint64_t sub_100313DD4()
{
  return sub_1001FA7F4();
}

uint64_t sub_100313DE4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x3Bu);
}

uint64_t sub_100313E30(uint64_t a1, __int16 a2, int a3, int a4)
{
  _QWORD v5[4];
  int v6;
  __int16 v7;
  char v8;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100313E98;
  v5[3] = &unk_1009265F8;
  v7 = a2;
  v6 = a3;
  v8 = a4;
  return sub_100042FD0(a1, 59, a4, v5, 0);
}

uint64_t sub_100313E98()
{
  return sub_1001FA87C();
}

uint64_t sub_100313EBC(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x3Cu);
}

uint64_t sub_100313F08(uint64_t a1, __int16 a2, int a3, int a4, __int16 a5, __int16 a6, char a7, int a8, unsigned __int8 a9)
{
  _QWORD v10[4];
  int v11;
  int v12;
  int v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  char v17;
  unsigned __int8 v18;

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100313F80;
  v10[3] = &unk_100926778;
  v14 = a2;
  v11 = a3;
  v12 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  v13 = a8;
  v18 = a9;
  return sub_100042FD0(a1, 60, a9, v10, 0);
}

uint64_t sub_100313F80()
{
  return sub_1001FA904();
}

uint64_t sub_100313FB4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x3Du);
}

uint64_t sub_100314000(uint64_t a1, uint64_t a2, int a3, int a4, __int16 a5, __int16 a6, char a7, int a8, unsigned __int8 a9)
{
  _QWORD v10[5];
  int v11;
  int v12;
  int v13;
  __int16 v14;
  __int16 v15;
  char v16;
  unsigned __int8 v17;

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100314078;
  v10[3] = &unk_100926A28;
  v10[4] = a2;
  v11 = a3;
  v12 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v13 = a8;
  v17 = a9;
  return sub_100042FD0(a1, 61, a9, v10, 0);
}

uint64_t sub_100314078()
{
  return sub_1001FA98C();
}

uint64_t sub_1003140AC(int a1, uint64_t a2, int a3, int a4)
{
  NSObject *v7;
  uint64_t result;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;

  v7 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 67109632;
    v9[1] = a1;
    v10 = 1024;
    v11 = a3;
    v12 = 1024;
    v13 = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SCO Buffer Size Control callback status=%d controllerBufferSize=%d controllerNumBuffer=%d", (uint8_t *)v9, 0x14u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  result = sub_100043784(a1, 0x3Eu);
  if (!a1)
  {
    sub_10018D638(a3, 1);
    return sub_10018D67C();
  }
  return result;
}

uint64_t sub_1003141B8(uint64_t a1, char a2, __int16 a3, char a4, int a5)
{
  _QWORD v6[4];
  __int16 v7;
  char v8;
  char v9;
  char v10;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100314220;
  v6[3] = &unk_100926A48;
  v8 = a2;
  v7 = a3;
  v9 = a4;
  v10 = a5;
  return sub_100042FD0(a1, 62, a5, v6, 0);
}

uint64_t sub_100314220()
{
  return sub_1001FAA14();
}

uint64_t sub_100314248(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HBR Control callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x3Fu);
}

uint64_t sub_10031431C(uint64_t a1, char a2, int a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100314378;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 63, a3, v4, 0);
}

uint64_t sub_100314378()
{
  return sub_1001FAA9C();
}

uint64_t sub_100314398(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HRB Allowed Bands callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x40u);
}

uint64_t sub_10031446C(uint64_t a1, char a2, int a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003144C8;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 64, a3, v4, 0);
}

uint64_t sub_1003144C8()
{
  return sub_1001FAB24();
}

uint64_t sub_1003144E8(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HRB Classification Bands callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x41u);
}

uint64_t sub_1003145BC(uint64_t a1, char a2, int a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100314618;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 65, a3, v4, 0);
}

uint64_t sub_100314618()
{
  return sub_1001FABAC();
}

uint64_t sub_100314638(uint64_t a1, uint64_t a2, __int16 a3, char a4, __int16 a5, char a6, char a7, char a8)
{
  _QWORD v9[5];
  __int16 v10;
  __int16 v11;
  char v12;
  char v13;
  char v14;
  char v15;

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1003146AC;
  v9[3] = &unk_100926758;
  v9[4] = a2;
  v10 = a3;
  v12 = a4;
  v11 = a5;
  v13 = a6;
  v14 = a7;
  v15 = a8;
  return sub_100042FD0(a1, 66, 1, v9, 0);
}

uint64_t sub_1003146AC()
{
  return sub_1001FAC34();
}

uint64_t sub_1003146D0(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "HRB Change Connection Band callback status=%d", (uint8_t *)v4, 8u);
  }
  if (_os_feature_enabled_impl("BluetoothFeatures", "BandSwitchManager"))
  {
    if (qword_100977B18 != -1)
      dispatch_once(&qword_100977B18, &stru_100926D98);
    sub_1002C176C(qword_100977B10, a1);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x43u);
}

uint64_t sub_1003147F4(uint64_t a1, __int16 a2, char a3, int a4)
{
  _QWORD v5[4];
  __int16 v6;
  char v7;
  char v8;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10031485C;
  v5[3] = &unk_100926678;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return sub_100042FD0(a1, 67, a4, v5, 0);
}

uint64_t sub_10031485C()
{
  return sub_1001FACBC();
}

uint64_t sub_100314880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = sub_10019AE90(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1416))(a1, v7, a3, a4);
}

uint64_t sub_1003148CC(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HRB Write Scan Enable callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x44u);
}

uint64_t sub_1003149A0(uint64_t a1, char a2, char a3, int a4)
{
  _QWORD v5[4];
  char v6;
  char v7;
  char v8;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100314A08;
  v5[3] = &unk_1009267D8;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return sub_100042FD0(a1, 68, a4, v5, 0);
}

uint64_t sub_100314A08()
{
  return sub_1001FAD44();
}

uint64_t sub_100314A2C(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HRB Write Page Scan Activity callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x45u);
}

uint64_t sub_100314B00(uint64_t a1, __int16 a2, __int16 a3, int a4)
{
  _QWORD v5[4];
  __int16 v6;
  __int16 v7;
  char v8;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100314B68;
  v5[3] = &unk_100926A48;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return sub_100042FD0(a1, 69, a4, v5, 0);
}

uint64_t sub_100314B68()
{
  return sub_1001FADCC();
}

uint64_t sub_100314B8C(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HRB Set AFH Host Channle Classification callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x47u);
}

uint64_t sub_100314C60(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  _QWORD v7[7];
  char v8;
  char v9;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100314CC8;
  v7[3] = &unk_100926A28;
  v8 = a2;
  v7[4] = a3;
  v7[5] = a4;
  v7[6] = a5;
  v9 = a6;
  return sub_100042FD0(a1, 71, a6, v7, 0);
}

uint64_t sub_100314CC8()
{
  return sub_1001FAE54();
}

uint64_t sub_100314CF0(int a1, int a2, int a3, char a4, int a5, int *a6, int *a7, int *a8, char a9)
{
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  _DWORD v22[2];
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v17 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v22[0] = 67109888;
    v22[1] = a1;
    v23 = 1024;
    v24 = a2;
    v25 = 1024;
    v26 = a3;
    v27 = 1024;
    v28 = a5;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Get Essential Power Database Entries status=%d vscVersion=%d, countryCode=%d, pCap=%d", (uint8_t *)v22, 0x1Au);
  }
  LOBYTE(xmmword_100991B70) = a2;
  BYTE1(xmmword_100991B70) = a3;
  BYTE2(xmmword_100991B70) = a4;
  BYTE3(xmmword_100991B70) = a5;
  v18 = *a6;
  BYTE8(xmmword_100991B70) = *((_BYTE *)a6 + 4);
  DWORD1(xmmword_100991B70) = v18;
  v19 = *a7;
  BYTE13(xmmword_100991B70) = *((_BYTE *)a7 + 4);
  *(_DWORD *)((char *)&xmmword_100991B70 + 9) = v19;
  v20 = *a8;
  BYTE2(xmmword_100991B80) = *((_BYTE *)a8 + 4);
  *(_DWORD *)((char *)&xmmword_100991B70 + 14) = v20;
  BYTE3(xmmword_100991B80) = a9;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x48u);
}

uint64_t sub_100314E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  _QWORD v11[12];
  _QWORD v12[8];
  unsigned __int8 v13;

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100314F00;
  v12[3] = &unk_100926A68;
  v12[4] = a2;
  v12[5] = a3;
  v12[6] = a4;
  v12[7] = a5;
  v13 = a10;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100314F34;
  v11[3] = &unk_100926A88;
  v11[4] = a2;
  v11[5] = a6;
  v11[6] = a3;
  v11[7] = a4;
  v11[8] = a7;
  v11[9] = a8;
  v11[10] = a9;
  v11[11] = a5;
  return sub_100042FD0(a1, 72, a10, v12, v11);
}

uint64_t sub_100314F00()
{
  return sub_1001FAEDC();
}

uint64_t sub_100314F34(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;

  **(_BYTE **)(result + 32) = xmmword_100991B70;
  **(_BYTE **)(result + 40) = BYTE1(xmmword_100991B70);
  **(_BYTE **)(result + 48) = BYTE2(xmmword_100991B70);
  **(_BYTE **)(result + 56) = BYTE3(xmmword_100991B70);
  v1 = *(_QWORD *)(result + 64);
  v2 = DWORD1(xmmword_100991B70);
  *(_BYTE *)(v1 + 4) = BYTE8(xmmword_100991B70);
  *(_DWORD *)v1 = v2;
  v3 = *(_QWORD *)(result + 72);
  v4 = *(_DWORD *)((char *)&xmmword_100991B70 + 9);
  *(_BYTE *)(v3 + 4) = BYTE13(xmmword_100991B70);
  *(_DWORD *)v3 = v4;
  v5 = *(_QWORD *)(result + 80);
  v6 = *(_DWORD *)((char *)&xmmword_100991B70 + 14);
  *(_BYTE *)(v5 + 4) = BYTE2(xmmword_100991B80);
  *(_DWORD *)v5 = v6;
  **(_BYTE **)(result + 88) = BYTE3(xmmword_100991B80);
  return result;
}

uint64_t sub_100314FB8(int a1, __int16 a2, char a3, char a4, char a5, char a6, char a7, char a8, int a9)
{
  NSObject *v15;
  uint8_t buf[4];
  int v20;

  v15 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v20 = a1;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "HRB Read Enhanced Transmit Power Level callback status=%d", buf, 8u);
  }
  LOWORD(xmmword_100991B70) = a2;
  BYTE2(xmmword_100991B70) = a3;
  BYTE3(xmmword_100991B70) = a4;
  BYTE4(xmmword_100991B70) = a5;
  BYTE5(xmmword_100991B70) = a6;
  BYTE6(xmmword_100991B70) = a7;
  BYTE7(xmmword_100991B70) = a8;
  DWORD2(xmmword_100991B70) = a9;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x4Bu);
}

uint64_t sub_100315118(uint64_t a1, __int16 a2, char a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, uint64_t a12)
{
  _QWORD v13[8];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[4];
  __int16 v19;
  char v20;
  char v21;

  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1003151BC;
  v18[3] = &unk_100926678;
  v19 = a2;
  v20 = a3;
  v21 = a4;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1003151E0;
  v13[3] = &unk_100926AA8;
  v13[4] = a5;
  v13[5] = a6;
  v13[6] = a7;
  v13[7] = a8;
  v14 = a9;
  v15 = a10;
  v16 = a11;
  v17 = a12;
  return sub_100042FD0(a1, 75, a4, v18, v13);
}

uint64_t sub_1003151BC()
{
  return sub_1001FAF64();
}

uint64_t sub_1003151E0(uint64_t result)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(result + 40);
  **(_WORD **)(result + 32) = xmmword_100991B70;
  *v1 = BYTE2(xmmword_100991B70);
  **(_BYTE **)(result + 48) = BYTE3(xmmword_100991B70);
  **(_BYTE **)(result + 56) = BYTE4(xmmword_100991B70);
  **(_BYTE **)(result + 64) = BYTE5(xmmword_100991B70);
  **(_BYTE **)(result + 72) = BYTE6(xmmword_100991B70);
  **(_BYTE **)(result + 80) = BYTE7(xmmword_100991B70);
  **(_BYTE **)(result + 88) = BYTE8(xmmword_100991B70);
  **(_BYTE **)(result + 96) = BYTE9(xmmword_100991B70);
  **(_BYTE **)(result + 104) = BYTE10(xmmword_100991B70);
  **(_BYTE **)(result + 112) = BYTE11(xmmword_100991B70);
  return result;
}

uint64_t sub_10031526C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v18;

  v18 = sub_10019AE90(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1464))(a1, v18, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_100315308(int a1, uint64_t *a2, __int128 *a3)
{
  NSObject *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _DWORD v16[2];

  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v16[0] = 67109120;
    v16[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "HRB Read AFH Channel Map callback status=%d", (uint8_t *)v16, 8u);
  }
  if (!a1)
  {
    v7 = *a2;
    WORD4(xmmword_100991B70) = *((_WORD *)a2 + 4);
    *(_QWORD *)&xmmword_100991B70 = v7;
    v8 = a3[4];
    v9 = a3[5];
    v10 = a3[3];
    *(_OWORD *)((char *)&dword_100991B98 + 2) = a3[2];
    *(_OWORD *)((char *)&dword_100991BC8 + 2) = v9;
    *(_OWORD *)((char *)&dword_100991BB8 + 2) = v8;
    *(__int128 *)((char *)&xmmword_100991BA0 + 10) = v10;
    v11 = a3[8];
    v12 = a3[9];
    v13 = a3[7];
    *(_OWORD *)((char *)&dword_100991BD8 + 2) = a3[6];
    *(_OWORD *)((char *)&dword_100991C08 + 2) = v12;
    *(_OWORD *)((char *)&dword_100991BF8 + 2) = v11;
    *(_OWORD *)((char *)&dword_100991BE8 + 2) = v13;
    v14 = *a3;
    *(__int128 *)((char *)&xmmword_100991B80 + 10) = a3[1];
    *(__int128 *)((char *)&xmmword_100991B70 + 10) = v14;
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x46u);
}

uint64_t sub_100315444(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD v6[6];
  _QWORD v7[4];
  __int16 v8;
  char v9;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1003154C8;
  v7[3] = &unk_1009267D8;
  v8 = a2;
  v9 = a5;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1003154E8;
  v6[3] = &unk_100918090;
  v6[4] = a3;
  v6[5] = a4;
  return sub_100042FD0(a1, 70, a5, v7, v6);
}

uint64_t sub_1003154C8()
{
  return sub_1001FAFEC();
}

__n128 sub_1003154E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = xmmword_100991B70;
  *(_WORD *)(v1 + 8) = WORD4(xmmword_100991B70);
  *(_QWORD *)v1 = v2;
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(__int128 *)((char *)&xmmword_100991B80 + 10);
  *(_OWORD *)v3 = *(__int128 *)((char *)&xmmword_100991B70 + 10);
  *(_OWORD *)(v3 + 16) = v4;
  v5 = *(_OWORD *)((char *)&dword_100991B98 + 2);
  v6 = *(__int128 *)((char *)&xmmword_100991BA0 + 10);
  v7 = *(_OWORD *)((char *)&dword_100991BC8 + 2);
  *(_OWORD *)(v3 + 64) = *(_OWORD *)((char *)&dword_100991BB8 + 2);
  *(_OWORD *)(v3 + 80) = v7;
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)(v3 + 48) = v6;
  result = *(__n128 *)((char *)&dword_100991BD8 + 2);
  v9 = *(_OWORD *)((char *)&dword_100991BE8 + 2);
  v10 = *(_OWORD *)((char *)&dword_100991C08 + 2);
  *(_OWORD *)(v3 + 128) = *(_OWORD *)((char *)&dword_100991BF8 + 2);
  *(_OWORD *)(v3 + 144) = v10;
  *(__n128 *)(v3 + 96) = result;
  *(_OWORD *)(v3 + 112) = v9;
  return result;
}

uint64_t sub_100315548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;

  v9 = sub_10019AE90(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1480))(a1, v9, a3, a4, a5);
}

uint64_t sub_10031559C(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HRB Read Limit Channel Map callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x49u);
}

uint64_t sub_100315670(uint64_t a1, char a2, int a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003156CC;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 73, a3, v4, 0);
}

uint64_t sub_1003156CC()
{
  return sub_1001FB074();
}

uint64_t sub_1003156EC(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HRB Set Band Edges callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x4Au);
}

uint64_t sub_1003157C0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  _QWORD v7[7];
  char v8;
  char v9;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100315828;
  v7[3] = &unk_100926A28;
  v8 = a2;
  v7[4] = a3;
  v7[5] = a4;
  v7[6] = a5;
  v9 = a6;
  return sub_100042FD0(a1, 74, a6, v7, 0);
}

uint64_t sub_100315828()
{
  return sub_1001FB0FC();
}

uint64_t sub_100315850(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Enhanced Tx Test callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x4Cu);
}

uint64_t sub_100315924(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6, uint64_t a7, char a8, char a9, char a10, char a11, __int16 a12, char a13, char a14, unsigned __int8 a15)
{
  _QWORD v16[6];
  __int16 v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  unsigned __int8 v28;

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1003159CC;
  v16[3] = &unk_100926498;
  v18 = a3;
  v19 = a4;
  v20 = a5;
  v21 = a6;
  v16[4] = a2;
  v16[5] = a7;
  v22 = a8;
  v23 = a9;
  v24 = a10;
  v25 = a11;
  v17 = a12;
  v26 = a13;
  v27 = a14;
  v28 = a15;
  return sub_100042FD0(a1, 76, a15, v16, 0);
}

uint64_t sub_1003159CC(uint64_t a1)
{
  return sub_1001FB184(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 50));
}

uint64_t sub_100315A38(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5, char a6, char a7, char a8, char a9, char a10, __int16 a11, unsigned __int8 a12)
{
  _QWORD v13[5];
  __int16 v14;
  __int16 v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  unsigned __int8 v23;

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100315ACC;
  v13[3] = &unk_100926778;
  v13[4] = a2;
  v14 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  v20 = a8;
  v21 = a9;
  v22 = a10;
  v15 = a11;
  v23 = a12;
  return sub_100042FD0(a1, 77, a12, v13, 0);
}

uint64_t sub_100315ACC(uint64_t a1)
{
  return sub_1001FB23C(*(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

uint64_t sub_100315B34(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Enhanced Rx Test callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x4Eu);
}

uint64_t sub_100315C08(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7, char a8, char a9, char a10, char a11, __int16 a12, unsigned __int8 a13)
{
  _QWORD v14[4];
  __int16 v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  unsigned __int8 v26;

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100315CA4;
  v14[3] = &unk_100926838;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  v21 = a7;
  v22 = a8;
  v23 = a9;
  v24 = a10;
  v25 = a11;
  v15 = a12;
  v26 = a13;
  return sub_100042FD0(a1, 78, a13, v14, 0);
}

uint64_t sub_100315CA4(uint64_t a1)
{
  return sub_1001FB2DC(*(unsigned __int8 *)(a1 + 34), *(unsigned __int8 *)(a1 + 35));
}

uint64_t sub_100315D0C(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Advanced Sniff Mode callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x4Fu);
}

uint64_t sub_100315DE0(uint64_t a1, __int16 a2, __int16 a3, char a4, char a5, char a6, __int16 a7, __int16 a8, __int16 a9, __int16 a10, __int16 a11, __int16 a12, char a13, char a14, unsigned __int8 a15)
{
  char v20;
  __int16 v21;
  __int16 v22;
  NSObject *v23;
  int v24;
  char v26;
  char v27;
  _QWORD v28[4];
  __int16 v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  unsigned __int8 v42;
  uint8_t buf[4];
  int v44;

  v20 = a13;
  v21 = a12;
  v22 = a11;
  if (*(_BYTE *)(a1 + 1452))
  {
    v26 = a4;
    v27 = a6;
    v23 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      v24 = *(unsigned __int8 *)(a1 + 1453);
      *(_DWORD *)buf = 67109120;
      v44 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Advanced Sniff Mode Override MaxRetryInFrames=%d", buf, 8u);
    }
    a5 = *(_BYTE *)(a1 + 1453);
    v20 = a13;
    a6 = v27;
    a4 = v26;
    v21 = a12;
    v22 = a11;
  }
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_100315F70;
  v28[3] = &unk_100926AC8;
  v29 = a2;
  v30 = a3;
  v37 = a4;
  v38 = a5;
  v39 = a6;
  v31 = a7;
  v32 = a8;
  v33 = a9;
  v34 = a10;
  v35 = v22;
  v36 = v21;
  v40 = v20;
  v41 = a14;
  v42 = a15;
  return sub_100042FD0(a1, 79, a15, v28, 0);
}

uint64_t sub_100315F70(uint64_t a1)
{
  return sub_1001FB384(*(unsigned __int16 *)(a1 + 32), *(unsigned __int16 *)(a1 + 34));
}

uint64_t sub_100315FE0(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Exit Advanced Sniff Mode callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x50u);
}

uint64_t sub_1003160B4(uint64_t a1, __int16 a2, int a3)
{
  _QWORD v4[4];
  __int16 v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100316110;
  v4[3] = &unk_1009267D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 80, a3, v4, 0);
}

uint64_t sub_100316110()
{
  return sub_1001FB43C();
}

uint64_t sub_100316130(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Advanced Sniff Reconfigure callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x51u);
}

uint64_t sub_100316204(uint64_t a1, __int16 a2, __int16 a3, __int16 a4, __int16 a5, char a6, __int16 a7, int a8)
{
  _QWORD v9[4];
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  char v15;
  char v16;

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100316278;
  v9[3] = &unk_100926798;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  v15 = a6;
  v14 = a7;
  v16 = a8;
  return sub_100042FD0(a1, 81, a8, v9, 0);
}

uint64_t sub_100316278()
{
  return sub_1001FB4C4();
}

uint64_t sub_1003162AC(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Set Peripheral Max Age callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x52u);
}

uint64_t sub_100316380(uint64_t a1, __int16 a2, char a3, int a4)
{
  _QWORD v5[4];
  __int16 v6;
  char v7;
  char v8;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003163E8;
  v5[3] = &unk_100926678;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return sub_100042FD0(a1, 82, a4, v5, 0);
}

uint64_t sub_1003163E8()
{
  return sub_1001FB54C();
}

uint64_t sub_10031640C(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "LMP Flow callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x53u);
}

uint64_t sub_1003164E0(uint64_t a1, __int16 a2, char a3, int a4)
{
  _QWORD v5[4];
  __int16 v6;
  char v7;
  char v8;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100316548;
  v5[3] = &unk_100926678;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return sub_100042FD0(a1, 83, a4, v5, 0);
}

uint64_t sub_100316548()
{
  return sub_1001FB5D4();
}

uint64_t sub_10031656C(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "AoS Empty Packet Report callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x54u);
}

uint64_t sub_100316640(uint64_t a1, __int16 a2, char a3, int a4)
{
  _QWORD v5[4];
  __int16 v6;
  char v7;
  char v8;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003166A8;
  v5[3] = &unk_100926678;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return sub_100042FD0(a1, 84, a4, v5, 0);
}

uint64_t sub_1003166A8()
{
  return sub_1001FB65C();
}

uint64_t sub_1003166CC(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Control AoS callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x55u);
}

uint64_t sub_1003167A0(uint64_t a1, char a2, int a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003167FC;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 85, a3, v4, 0);
}

uint64_t sub_1003167FC()
{
  return sub_1001FB6E4();
}

uint64_t sub_10031681C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x56u);
}

uint64_t sub_100316868(uint64_t a1, void *a2, char a3, char a4, char a5)
{
  id v9;
  void *v10;
  uint64_t v11;
  _QWORD v13[5];
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  unsigned __int8 v18[16];

  v9 = a2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2528))(a1))
  {
    v17 = 0;
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100926CB8);
    v10 = off_1009778A0;
    sub_100030BCC(v18, v9);
    if (sub_100623C54((uint64_t)v10, v18, &v17))
    {
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_1003169D8;
      v13[3] = &unk_100926398;
      v13[4] = v17;
      v14 = a3;
      v15 = a4;
      v16 = a5;
      v11 = sub_100042FD0(a1, 86, 1, v13, 0);
    }
    else
    {
      v11 = 7;
    }
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void sub_1003169B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003169D8()
{
  return sub_1001F7390();
}

uint64_t sub_1003169FC(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x57u);
}

uint64_t sub_100316A48(uint64_t a1, char a2, char a3, char a4, int a5, char a6)
{
  uint64_t result;
  _QWORD v13[4];
  int v14;
  char v15;
  char v16;
  char v17;
  char v18;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2536))(a1);
  if ((_DWORD)result)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100316AF8;
    v13[3] = &unk_100926538;
    v15 = a2;
    v16 = a3;
    v17 = a4;
    v14 = a5;
    v18 = a6;
    return sub_100042FD0(a1, 87, 1, v13, 0);
  }
  return result;
}

uint64_t sub_100316AF8()
{
  return sub_1001F7418();
}

uint64_t sub_100316B1C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x5Au);
}

uint64_t sub_100316B68(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100316BC4;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 90, 1, v3, 0);
}

uint64_t sub_100316BC4()
{
  return sub_1001FDA04();
}

uint64_t sub_100316BD4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x5Cu);
}

uint64_t sub_100316C20(uint64_t a1, char a2, int a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100316C7C;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 92, a3, v4, 0);
}

uint64_t sub_100316C7C()
{
  return sub_1001FB76C();
}

uint64_t sub_100316C9C(int a1, int a2, int a3, int a4)
{
  NSObject *v8;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;

  v8 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v10[0] = 67109632;
    v10[1] = a2;
    v11 = 1024;
    v12 = a3;
    v13 = 1024;
    v14 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "ePA GPIO state: enabled %d, num %d, sleep %d", (uint8_t *)v10, 0x14u);
  }
  LOBYTE(xmmword_100991B70) = a2;
  BYTE1(xmmword_100991B70) = a3;
  BYTE2(xmmword_100991B70) = a4;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x5Du);
}

uint64_t sub_100316DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD v6[7];
  _QWORD v7[4];
  char v8;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100316E38;
  v7[3] = &unk_100926418;
  v8 = a5;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100316E50;
  v6[3] = &unk_1009210D8;
  v6[4] = a2;
  v6[5] = a3;
  v6[6] = a4;
  return sub_100042FD0(a1, 93, a5, v7, v6);
}

uint64_t sub_100316E38()
{
  return sub_1001FB7F4();
}

_BYTE **sub_100316E50(_BYTE **result)
{
  *result[4] = xmmword_100991B70;
  *result[5] = BYTE1(xmmword_100991B70);
  *result[6] = BYTE2(xmmword_100991B70);
  return result;
}

uint64_t sub_100316E80(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xFEu);
}

uint64_t sub_100316ECC(uint64_t a1, char a2, char a3, char a4, char a5)
{
  _QWORD v6[4];
  char v7;
  char v8;
  char v9;
  char v10;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100316F34;
  v6[3] = &unk_100926678;
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = a5;
  return sub_100042FD0(a1, 254, 1, v6, 0);
}

uint64_t sub_100316F34()
{
  return sub_1001FDA8C();
}

uint64_t sub_100316F54(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x5Eu);
}

uint64_t sub_100316FA0(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD v4[5];
  char v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100317000;
  v4[3] = &unk_1009263D8;
  v4[4] = a2;
  v5 = a3;
  return sub_100042FD0(a1, 94, 1, v4, 0);
}

uint64_t sub_100317000()
{
  return sub_1001FDB14();
}

uint64_t sub_100317018(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xB1u);
}

uint64_t sub_100317064(uint64_t a1, char a2, char a3, int a4)
{
  _QWORD v5[4];
  char v6;
  char v7;
  char v8;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003170CC;
  v5[3] = &unk_1009267D8;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return sub_100042FD0(a1, 177, a4, v5, 0);
}

uint64_t sub_1003170CC()
{
  return sub_1001F886C();
}

uint64_t sub_1003170F0(int a1, const void *a2, size_t __n)
{
  *(_DWORD *)((char *)&xmmword_100991B70 + 9) = 0;
  *(_QWORD *)((char *)&xmmword_100991B70 + 1) = 0;
  LOBYTE(xmmword_100991B70) = __n;
  if (!a1 && __n <= 0xC)
    memcpy((char *)&xmmword_100991B70 + 1, a2, __n);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xB3u);
}

uint64_t sub_10031716C(int a1, const void *a2, size_t __n)
{
  unk_100991C5C = 0u;
  *(_OWORD *)((char *)&dword_100991C50 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100991C40 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100991C30 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100991C20 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100991C10 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100991C00 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100991BF0 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100991BE0 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100991BD0 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100991BC0 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100991BB0 + 1) = 0u;
  *(__int128 *)((char *)&xmmword_100991BA0 + 1) = 0u;
  *(_OWORD *)((char *)&dword_100991B90 + 1) = 0u;
  *(__int128 *)((char *)&xmmword_100991B80 + 1) = 0u;
  *(__int128 *)((char *)&xmmword_100991B70 + 1) = 0u;
  LOBYTE(xmmword_100991B70) = __n;
  if (!a1 && __n <= 0xFB)
    memcpy((char *)&xmmword_100991B70 + 1, a2, __n);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xB4u);
}

uint64_t sub_100317224(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD v6[6];
  _QWORD v7[4];
  __int16 v8;
  char v9;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1003172A8;
  v7[3] = &unk_1009267D8;
  v8 = a2;
  v9 = a5;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1003172C8;
  v6[3] = &unk_100918090;
  v6[4] = a3;
  v6[5] = a4;
  return sub_100042FD0(a1, 179, a5, v7, v6);
}

uint64_t sub_1003172A8()
{
  return sub_1001FDB9C();
}

void sub_1003172C8(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32))
  {
    if (xmmword_100991B70 > 0xCu)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006DF5B0();
    }
    else
    {
      **(_BYTE **)(a1 + 40) = xmmword_100991B70;
      memcpy(*(void **)(a1 + 32), (char *)&xmmword_100991B70 + 1, xmmword_100991B70);
    }
  }
}

uint64_t sub_100317348(uint64_t a1, __int16 a2, char a3, uint64_t a4, uint64_t a5, int a6)
{
  _QWORD v7[6];
  _QWORD v8[4];
  __int16 v9;
  char v10;
  char v11;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1003173CC;
  v8[3] = &unk_100926678;
  v9 = a2;
  v10 = a3;
  v11 = a6;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1003173F0;
  v7[3] = &unk_100918090;
  v7[4] = a4;
  v7[5] = a5;
  return sub_100042FD0(a1, 180, a6, v8, v7);
}

uint64_t sub_1003173CC()
{
  return sub_1001FDC24();
}

void sub_1003173F0(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32))
  {
    if (xmmword_100991B70 > 0xFBu)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006DF614();
    }
    else
    {
      **(_BYTE **)(a1 + 40) = xmmword_100991B70;
      memcpy(*(void **)(a1 + 32), (char *)&xmmword_100991B70 + 1, xmmword_100991B70);
    }
  }
}

uint64_t sub_100317470(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x17u);
}

uint64_t sub_1003174BC(uint64_t a1, char a2, char a3, int a4)
{
  _QWORD v5[4];
  char v6;
  char v7;
  char v8;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100317524;
  v5[3] = &unk_1009267D8;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return sub_100042FD0(a1, 23, a4, v5, 0);
}

uint64_t sub_100317524()
{
  return sub_1001FDCAC();
}

uint64_t sub_100317550(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x60u);
}

uint64_t sub_10031759C(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1003175F8;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 96, 1, v3, 0);
}

uint64_t sub_1003175F8()
{
  return sub_1001FB87C();
}

uint64_t sub_100317608(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  NSObject *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD v10[4];
  uint64_t (**v11)();
  unsigned int *v12;
  uint64_t (**v13)();
  unsigned int *v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  unsigned int v18;

  v13 = 0;
  v14 = 0;
  sub_10003994C(&v13, a2, a3);
  if (a3 >= 3)
  {
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *a2;
      v7 = __rev16(*(unsigned __int16 *)(a2 + 1));
      *(_DWORD *)buf = 67109376;
      v16 = v6;
      v17 = 1024;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "HostwakeReport: type(%d), reasonCode(%d)", buf, 0xEu);
    }
  }
  v8 = sub_10006BBEC();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  v10[2] = sub_10031779C;
  v10[3] = &unk_100926AE8;
  v11 = &off_100918258;
  v12 = v14;
  if (v14)
    sub_10003C37C((uint64_t)v14);
  sub_100041A34(v8, v10);
  v11 = &off_100918258;
  if (v12)
    sub_100056AAC(v12);
  v13 = &off_100918258;
  if (v14)
    sub_100056AAC(v14);
  return 0;
}

void sub_100317758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14, uint64_t a15, unsigned int *a16)
{
  if (a14)
    sub_100056AAC(a14);
  if (a16)
    sub_100056AAC(a16);
  _Unwind_Resume(exception_object);
}

void sub_10031779C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t (**v4)();
  unsigned int *v5;

  v2 = sub_10005D5A4();
  v3 = *(unsigned int **)(a1 + 40);
  v4 = &off_100918258;
  v5 = v3;
  if (v3)
    sub_10003C37C((uint64_t)v3);
  (*(void (**)(uint64_t, uint64_t (***)(), _QWORD, const char *, const char *, const char *))(*(_QWORD *)v2 + 32))(v2, &v4, 0, "", "", "");
  v4 = &off_100918258;
  if (v5)
    sub_100056AAC(v5);
}

void sub_100317818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  if (a10)
    sub_100056AAC(a10);
  _Unwind_Resume(exception_object);
}

void sub_100317834(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &off_100918258;
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
    sub_10003C37C(v3);
}

void sub_100317854(uint64_t a1)
{
  unsigned int *v1;

  *(_QWORD *)(a1 + 32) = &off_100918258;
  v1 = *(unsigned int **)(a1 + 40);
  if (v1)
    sub_100056AAC(v1);
}

uint64_t sub_100317870(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x61u);
}

uint64_t sub_1003178BC(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100317918;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 97, 1, v3, 0);
}

uint64_t sub_100317918()
{
  return sub_1001FB904();
}

uint64_t sub_100317928(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x62u);
}

uint64_t sub_100317974(uint64_t a1, int a2, char a3, __int16 a4)
{
  _QWORD v5[4];
  int v6;
  __int16 v7;
  char v8;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003179D8;
  v5[3] = &unk_1009265F8;
  v6 = a2;
  v8 = a3;
  v7 = a4;
  return sub_100042FD0(a1, 98, 1, v5, 0);
}

uint64_t sub_1003179D8()
{
  return sub_1001FB98C();
}

uint64_t sub_1003179F4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x63u);
}

uint64_t sub_100317A40(uint64_t a1, __int16 a2, __int16 a3)
{
  _QWORD v4[4];
  __int16 v5;
  __int16 v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100317AA0;
  v4[3] = &unk_100926678;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 99, 1, v4, 0);
}

uint64_t sub_100317AA0()
{
  return sub_1001FBB24();
}

uint64_t sub_100317AB8(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x64u);
}

uint64_t sub_100317B04(uint64_t a1, __int16 a2, char a3, char a4, char a5, uint64_t a6, char a7, char a8, __int16 a9, __int16 a10, char a11, __int16 a12, __int16 a13)
{
  _QWORD v14[5];
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100317BA0;
  v14[3] = &unk_100926B18;
  v15 = a2;
  v20 = a3;
  v21 = a4;
  v22 = a5;
  v14[4] = a6;
  v23 = a7;
  v24 = a8;
  v16 = a9;
  v17 = a10;
  v25 = a11;
  v18 = a12;
  v19 = a13;
  return sub_100042FD0(a1, 100, 1, v14, 0);
}

uint64_t sub_100317BA0(uint64_t a1)
{
  return sub_1001F8088(*(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 50));
}

uint64_t sub_100317C04(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x66u);
}

uint64_t sub_100317C50(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100317CAC;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 102, 1, v3, 0);
}

uint64_t sub_100317CAC()
{
  return sub_1001FD0CC();
}

uint64_t sub_100317CBC(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "enable2MBPHYForDenylistedDevicesCB status %d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x65u);
}

uint64_t sub_100317D90(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100317DEC;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 101, 1, v3, 0);
}

uint64_t sub_100317DEC()
{
  return sub_1001FDD34();
}

uint64_t sub_100317DFC(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "enableWirelessSplitterCB status %d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x67u);
}

uint64_t sub_100317ED0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8)
{
  _QWORD v9[6];
  __int16 v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;
  char v14;

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100317F40;
  v9[3] = &unk_100926738;
  v9[4] = a3;
  v9[5] = a4;
  v14 = a2;
  v10 = a5;
  v11 = a6;
  v12 = a7;
  v13 = a8;
  return sub_100042FD0(a1, 103, 1, v9, 0);
}

uint64_t sub_100317F40(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v3 = 0;
  v4 = 0;
  result = sub_100182588(*(_QWORD *)(a1 + 32), &v4);
  if (!(_DWORD)result)
  {
    result = sub_100182588(*(_QWORD *)(a1 + 40), &v3);
    if (!(_DWORD)result)
      return sub_1001FDE00();
  }
  return result;
}

uint64_t sub_100317FAC(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x68u);
}

uint64_t sub_100317FF8(uint64_t a1, __int16 a2, char a3, uint64_t a4, char a5, __int16 a6, char a7, char a8, char a9)
{
  _QWORD v10[5];
  __int16 v11;
  __int16 v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100318074;
  v10[3] = &unk_1009263F8;
  v11 = a2;
  v13 = a3;
  v10[4] = a4;
  v14 = a5;
  v12 = a6;
  v15 = a7;
  v16 = a8;
  v17 = a9;
  return sub_100042FD0(a1, 104, 1, v10, 0);
}

uint64_t sub_100318074(uint64_t a1)
{
  return sub_1001FBC34(*(unsigned __int16 *)(a1 + 40));
}

uint64_t sub_1003180C0(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x72u);
}

uint64_t sub_10031810C(uint64_t a1, __int16 a2, char a3, uint64_t a4, char a5, __int16 a6, char a7, char a8, char a9, char a10, char a11, uint64_t a12, uint64_t a13)
{
  _QWORD v14[7];
  __int16 v15;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1003181A0;
  v14[3] = &unk_100926B38;
  v15 = a2;
  v17 = a3;
  v18 = a5;
  v16 = a6;
  v19 = a7;
  v20 = a8;
  v21 = a9;
  v22 = a10;
  v23 = a11;
  v14[4] = a4;
  v14[5] = a12;
  v14[6] = a13;
  return sub_100042FD0(a1, 114, 1, v14, 0);
}

uint64_t sub_1003181A0(uint64_t a1)
{
  return sub_1001FC0D4(*(unsigned __int16 *)(a1 + 56), 0, *(unsigned __int8 *)(a1 + 60), *(_QWORD *)(a1 + 32));
}

uint64_t sub_100318204(uint64_t a1, __int16 a2, char a3, uint64_t a4, char a5, __int16 a6, char a7, char a8, char a9, char a10, char a11, uint64_t a12, uint64_t a13)
{
  _QWORD v14[7];
  __int16 v15;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100318298;
  v14[3] = &unk_100926B38;
  v15 = a2;
  v17 = a3;
  v18 = a5;
  v16 = a6;
  v19 = a7;
  v20 = a8;
  v21 = a9;
  v22 = a10;
  v23 = a11;
  v14[4] = a4;
  v14[5] = a12;
  v14[6] = a13;
  return sub_100042FD0(a1, 114, 1, v14, 0);
}

uint64_t sub_100318298(uint64_t a1)
{
  return sub_1001FC0D4(*(unsigned __int16 *)(a1 + 56), 1, *(unsigned __int8 *)(a1 + 60), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1003182FC(uint64_t a1, __int16 a2)
{
  _QWORD v3[4];
  __int16 v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100318358;
  v3[3] = &unk_1009264D8;
  v4 = a2;
  return sub_100042FD0(a1, 114, 1, v3, 0);
}

uint64_t sub_100318358(uint64_t a1)
{
  int v2;
  __int16 v3;

  v3 = 0;
  v2 = 0;
  return sub_1001FC0D4(*(unsigned __int16 *)(a1 + 32), 2, 0, (uint64_t)&v2);
}

uint64_t sub_1003183B4(int a1, char a2, char a3, char a4, char a5)
{
  LOBYTE(xmmword_100991B70) = a2;
  BYTE1(xmmword_100991B70) = a3;
  BYTE2(xmmword_100991B70) = a4;
  BYTE3(xmmword_100991B70) = a5;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x69u);
}

uint64_t sub_100318418(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4, _WORD *a5)
{
  NSObject *v9;
  const char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  _OWORD v18[5];
  uint8_t buf[4];
  _BYTE v20[28];
  _OWORD v21[2];

  v18[0] = 0uLL;
  sub_10003415C((uint64_t)v18, a1 + 72);
  v9 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v10 = sub_1000438E4(a1, 105);
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
  }
  if (sub_1000431F4(a1, 105))
  {
    v17 = 0;
    sub_100043758(&v17);
    v11 = sub_1001FBCC4();
    sub_10004339C(&v17);
    if (!v11)
    {
      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_100926C78);
      v11 = sub_1000433A4((uint64_t)off_100977A50, 105);
      *a3 = BYTE1(xmmword_100991B70);
      *a4 = BYTE2(xmmword_100991B70);
      *a5 = BYTE3(xmmword_100991B70);
    }
    memset((char *)&v18[1] + 8, 0, 56);
    if (BYTE1(xmmword_100991B70) <= 0x64u)
    {
      if (BYTE1(xmmword_100991B70))
      {
        if (BYTE1(xmmword_100991B70) % 0x14u)
          v12 = BYTE1(xmmword_100991B70) / 0x14u + 1;
        else
          v12 = BYTE1(xmmword_100991B70) / 0x14u;
      }
      else
      {
        v12 = 0;
      }
    }
    else
    {
      v12 = 6;
    }
    *((_DWORD *)&v18[1] + v12 + 2) = 1;
    if ((*a4 & 1) != 0)
    {
      if (BYTE3(xmmword_100991B70) <= 0x64u)
      {
        if (BYTE3(xmmword_100991B70))
        {
          if (BYTE3(xmmword_100991B70) % 0x14u)
            v14 = BYTE3(xmmword_100991B70) / 0x14u + 1;
          else
            v14 = BYTE3(xmmword_100991B70) / 0x14u;
        }
        else
        {
          v14 = 0;
        }
      }
      else
      {
        v14 = 6;
      }
      *((_DWORD *)&v18[3] + v14 + 1) = 1;
    }
    *(_DWORD *)buf = 1;
    *(_OWORD *)v20 = *(_OWORD *)((char *)&v18[1] + 8);
    *(_OWORD *)&v20[12] = *(_OWORD *)((char *)&v18[2] + 4);
    v21[0] = *(_OWORD *)((char *)&v18[3] + 4);
    *(_OWORD *)((char *)v21 + 12) = v18[4];
    if (sub_100065478())
    {
      v15 = sub_100065478();
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v15 + 200))(v15, buf);
    }
    sub_1000445D4(a1, 0x69u);
    v13 = v11 != 0;
    sub_100043728(&v17);
  }
  else
  {
    v13 = 2;
  }
  sub_100034234((uint64_t)v18);
  return v13;
}

void sub_1003186BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003186F4(_DWORD *a1, unsigned int a2, __int16 a3, int a4, int a5, int a6, int a7, char a8, char a9, unsigned __int16 a10, unsigned __int16 a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15, char a16)
{
  __int16 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v33;
  const char *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  _QWORD v40[4];
  __int16 v41;
  __int16 v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;
  _QWORD v48[4];
  __int16 v49;
  __int16 v50;
  __int16 v51;
  unsigned __int16 v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  _QWORD v58[7];
  __int16 v59;
  __int16 v60;
  __int16 v61;
  unsigned __int16 v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  unsigned __int8 v68;
  char v69;
  uint8_t buf[4];
  const char *v71;
  __int16 v72;
  int v73;

  if (!sub_10005F7EC())
    return 2;
  v24 = a3 & 0xFFF0 | (a4 != 0) | (2 * (a5 != 0)) | (4 * (a6 != 0)) | (8 * (a7 != 0));
  v25 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 256))(v25))
  {
    v58[0] = _NSConcreteStackBlock;
    v58[1] = 3221225472;
    v58[2] = sub_100318B3C;
    v58[3] = &unk_100926B58;
    v59 = a2;
    v60 = v24 & 0xFF1F | (32 * (a9 != 0)) | ((a10 != 0) << 6) | ((a11 != 0) << 7);
    v63 = a4;
    v61 = a5;
    v64 = a6;
    v65 = a7;
    v66 = a8;
    v67 = a9;
    v62 = a11;
    v68 = a13;
    v58[4] = a12;
    v58[5] = a14;
    v58[6] = a15;
    v69 = a16;
    v26 = v58;
    v27 = (uint64_t)a1;
    v28 = 108;
    return sub_100042FD0(v27, v28, 1, v26, 0);
  }
  v30 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 248))(v30))
  {
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472;
    v48[2] = sub_100318BFC;
    v48[3] = &unk_100926838;
    v49 = a2;
    v50 = v24 & 0xFF1F | (32 * (a9 != 0)) | ((a10 != 0) << 6) | ((a11 != 0) << 7);
    v53 = a4;
    v51 = a5;
    v54 = a6;
    v55 = a7;
    v56 = a8;
    v57 = a9;
    v52 = a11;
    v26 = v48;
    v27 = (uint64_t)a1;
    v28 = 107;
    return sub_100042FD0(v27, v28, 1, v26, 0);
  }
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_100318C9C;
  v40[3] = &unk_1009265D8;
  v41 = a2;
  v42 = v24;
  v44 = a4;
  v43 = a5;
  v45 = a6;
  v46 = a7;
  v47 = a8;
  v29 = sub_100042FD0((uint64_t)a1, 106, 1, v40, 0);
  v33 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v34 = sub_1000438E4((uint64_t)a1, 106);
    *(_DWORD *)buf = 136446466;
    v71 = v34;
    v72 = 1024;
    v73 = v29;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "%{public}s returned with result: %d", buf, 0x12u);
  }
  v35 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 352))(v35))
  {
    v36 = a1[178];
    if (v36)
    {
      if (v36 <= 0x7CF && !(_DWORD)v29)
      {
        v37 = a9 != 0;
        if (a10)
          v37 |= 2u;
        v29 = a11 ? v37 | 4 : v37;
        if ((_DWORD)v29)
        {
          v38 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 2480))(a1);
          v39 = *(_QWORD *)a1;
          if (v38)
            return (*(uint64_t (**)(_DWORD *, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, char))(v39 + 2848))(a1, a2, v29, a9, a10, a11, a12, a13, a14, a15, a16);
          else
            return (*(uint64_t (**)(_DWORD *, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(v39 + 2840))(a1, a2, v29, a9, a10, a11);
        }
      }
    }
  }
  return v29;
}

uint64_t sub_100318B3C(uint64_t a1)
{
  return sub_1001FBDE4(*(unsigned __int16 *)(a1 + 56), *(unsigned __int16 *)(a1 + 58), *(unsigned __int8 *)(a1 + 64), *(unsigned __int16 *)(a1 + 60), *(unsigned __int8 *)(a1 + 65), *(unsigned __int8 *)(a1 + 66), *(unsigned __int8 *)(a1 + 67));
}

uint64_t sub_100318BB0(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x6Cu);
}

uint64_t sub_100318BFC(uint64_t a1)
{
  return sub_1001FBD4C(*(unsigned __int16 *)(a1 + 32), *(unsigned __int16 *)(a1 + 34));
}

uint64_t sub_100318C50(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x6Bu);
}

uint64_t sub_100318C9C()
{
  return sub_100073D50();
}

uint64_t sub_100318CC8(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x6Du);
}

uint64_t sub_100318D14(uint64_t a1, __int16 a2, char a3, char a4, __int16 a5, __int16 a6)
{
  _QWORD v7[4];
  __int16 v8;
  __int16 v9;
  __int16 v10;
  char v11;
  char v12;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100318D80;
  v7[3] = &unk_100926538;
  v8 = a2;
  v11 = a3;
  v12 = a4;
  v9 = a5;
  v10 = a6;
  return sub_100042FD0(a1, 109, 1, v7, 0);
}

uint64_t sub_100318D80()
{
  return sub_1001FBE9C();
}

uint64_t sub_100318DA4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x6Eu);
}

uint64_t sub_100318DF0(uint64_t a1, __int16 a2, char a3, char a4, __int16 a5, __int16 a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, char a11)
{
  _QWORD v12[7];
  __int16 v13;
  __int16 v14;
  __int16 v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100318E74;
  v12[3] = &unk_1009265B8;
  v13 = a2;
  v16 = a3;
  v17 = a4;
  v14 = a5;
  v15 = a6;
  v18 = a8;
  v12[4] = a7;
  v12[5] = a9;
  v12[6] = a10;
  v19 = a11;
  return sub_100042FD0(a1, 110, 1, v12, 0);
}

uint64_t sub_100318E74(uint64_t a1)
{
  return sub_1001FBF24(*(unsigned __int16 *)(a1 + 56), *(unsigned __int8 *)(a1 + 62), *(char *)(a1 + 63));
}

uint64_t sub_100318ECC(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x70u);
}

uint64_t sub_100318F18(uint64_t a1, __int16 a2, char a3, char a4, char a5)
{
  _QWORD v6[4];
  __int16 v7;
  char v8;
  char v9;
  char v10;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100318F80;
  v6[3] = &unk_100926A48;
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = a5;
  return sub_100042FD0(a1, 112, 1, v6, 0);
}

uint64_t sub_100318F80()
{
  return sub_1001FBFC4();
}

uint64_t sub_100318FA0(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x71u);
}

uint64_t sub_100318FEC(uint64_t a1, __int16 a2, __int16 a3)
{
  _QWORD v4[4];
  __int16 v5;
  __int16 v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10031904C;
  v4[3] = &unk_100926678;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 113, 1, v4, 0);
}

uint64_t sub_10031904C()
{
  return sub_1001FC04C();
}

uint64_t sub_100319064(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x74u);
}

uint64_t sub_1003190B0(uint64_t a1, __int16 a2, char a3, char a4, char a5, char a6)
{
  _QWORD v13[4];
  __int16 v14;
  char v15;
  char v16;
  char v17;
  char v18;

  if (!sub_10005F7EC())
    return 2;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100319160;
  v13[3] = &unk_100926908;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a6;
  return sub_100042FD0(a1, 116, 1, v13, 0);
}

uint64_t sub_100319160()
{
  return sub_1001FC184();
}

uint64_t sub_100319184(int a1, int a2, int a3)
{
  NSObject *v6;
  _DWORD v8[2];
  __int16 v9;
  int v10;

  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v8[0] = 67109376;
    v8[1] = a2;
    v9 = 1024;
    v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Match Buffer Read : subOpcode %d, numEntries %d", (uint8_t *)v8, 0xEu);
  }
  LOBYTE(xmmword_100991B70) = a2;
  BYTE1(xmmword_100991B70) = a3;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x75u);
}

uint64_t sub_100319284(uint64_t a1, __int16 a2, uint64_t a3)
{
  _QWORD v4[5];
  _QWORD v5[4];
  __int16 v6;

  v4[4] = a3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003192FC;
  v5[3] = &unk_1009264D8;
  v6 = a2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10031930C;
  v4[3] = &unk_100917378;
  return sub_100042FD0(a1, 117, 1, v5, v4);
}

uint64_t sub_1003192FC()
{
  return sub_1001FC20C();
}

uint64_t sub_10031930C(uint64_t result)
{
  **(_BYTE **)(result + 32) = BYTE1(xmmword_100991B70);
  return result;
}

uint64_t sub_100319320(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x76u);
}

uint64_t sub_10031936C(uint64_t a1, char a2, int a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003193C8;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 118, a3, v4, 0);
}

uint64_t sub_1003193C8()
{
  return sub_1001FC294();
}

uint64_t sub_1003193E8(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x77u);
}

uint64_t sub_100319434(uint64_t a1, __int16 a2, char a3, int a4)
{
  _QWORD v5[4];
  __int16 v6;
  char v7;
  char v8;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10031949C;
  v5[3] = &unk_100926678;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return sub_100042FD0(a1, 119, a4, v5, 0);
}

uint64_t sub_10031949C()
{
  return sub_1001FC31C();
}

uint64_t sub_1003194C0(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x78u);
}

uint64_t sub_10031950C(uint64_t a1, char a2, char a3, int a4)
{
  _QWORD v5[4];
  char v6;
  char v7;
  char v8;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100319574;
  v5[3] = &unk_1009267D8;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return sub_100042FD0(a1, 120, a4, v5, 0);
}

uint64_t sub_100319574()
{
  return sub_1001FC3A4();
}

uint64_t sub_100319598(int a1, int a2)
{
  NSObject *v4;
  _DWORD v6[2];

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Read Connection Event Counter : connEventCounter %d", (uint8_t *)v6, 8u);
  }
  LOWORD(xmmword_100991B70) = a2;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x79u);
}

uint64_t sub_100319680(uint64_t a1, __int16 a2, uint64_t a3, int a4)
{
  _QWORD v5[5];
  _QWORD v6[4];
  __int16 v7;
  char v8;

  v5[4] = a3;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100319700;
  v6[3] = &unk_1009267D8;
  v7 = a2;
  v8 = a4;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100319720;
  v5[3] = &unk_100917378;
  return sub_100042FD0(a1, 121, a4, v6, v5);
}

uint64_t sub_100319700()
{
  return sub_1001FC42C();
}

uint64_t sub_100319720(uint64_t result)
{
  **(_WORD **)(result + 32) = xmmword_100991B70;
  return result;
}

uint64_t sub_100319734(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x7Au);
}

uint64_t sub_100319780(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5, int a6)
{
  _QWORD v7[5];
  char v8;
  _QWORD v9[6];
  __int16 v10;
  char v11;
  char v12;
  char v13;

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100319810;
  v9[3] = &unk_100926658;
  v9[4] = a1;
  v9[5] = a2;
  v11 = a5;
  v10 = a3;
  v12 = a4;
  v13 = a6;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100319870;
  v7[3] = &unk_100918888;
  v7[4] = a2;
  v8 = a5;
  return sub_100042FD0(a1, 122, a6, v9, v7);
}

uint64_t sub_100319810(uint64_t a1)
{
  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 220) != *(unsigned __int8 *)(a1 + 50))
    return sub_1001FC4B4();
  sub_1000445D4(*(_QWORD *)(a1 + 32), 0x7Au);
  return 408;
}

uint64_t sub_100319870(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 220) = *(_BYTE *)(result + 40) != 0;
  return result;
}

uint64_t sub_100319888(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x7Bu);
}

uint64_t sub_1003198D4(uint64_t a1, char a2, int a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100319930;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 123, a3, v4, 0);
}

uint64_t sub_100319930()
{
  return sub_1001FC53C();
}

uint64_t sub_100319950(int a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  xmmword_100991B70 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  v5 = a2[4];
  xmmword_100991BA0 = a2[3];
  *(_OWORD *)&dword_100991BB0 = v5;
  xmmword_100991B80 = v3;
  *(_OWORD *)&dword_100991B90 = v4;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xFFu);
}

uint64_t sub_1003199BC(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD v4[5];
  _QWORD v5[4];
  char v6;

  v4[4] = a3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100319A38;
  v5[3] = &unk_100926418;
  v6 = a2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100319A50;
  v4[3] = &unk_100917378;
  return sub_100042FD0(a1, 255, a2, v5, v4);
}

uint64_t sub_100319A38()
{
  return sub_1001FC5C4();
}

__n128 sub_100319A50(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;
  __int128 v4;

  v1 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v1 = xmmword_100991B70;
  result = (__n128)xmmword_100991B80;
  v3 = *(_OWORD *)&dword_100991B90;
  v4 = *(_OWORD *)&dword_100991BB0;
  *(_OWORD *)(v1 + 48) = xmmword_100991BA0;
  *(_OWORD *)(v1 + 64) = v4;
  *(__n128 *)(v1 + 16) = result;
  *(_OWORD *)(v1 + 32) = v3;
  return result;
}

uint64_t sub_100319A78(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _QWORD v5[5];
  _QWORD v6[4];
  int v7;
  char v8;

  v5[4] = a4;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100319AF0;
  v6[3] = &unk_100926A48;
  v7 = a2;
  v8 = a3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100319B10;
  v5[3] = &unk_100917378;
  return sub_100042FD0(a1, 255, a3, v6, v5);
}

uint64_t sub_100319AF0()
{
  return sub_1001FC64C();
}

__n128 sub_100319B10(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;
  __int128 v4;

  v1 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)v1 = xmmword_100991B70;
  result = (__n128)xmmword_100991B80;
  v3 = *(_OWORD *)&dword_100991B90;
  v4 = *(_OWORD *)&dword_100991BB0;
  *(_OWORD *)(v1 + 48) = xmmword_100991BA0;
  *(_OWORD *)(v1 + 64) = v4;
  *(__n128 *)(v1 + 16) = result;
  *(_OWORD *)(v1 + 32) = v3;
  return result;
}

uint64_t sub_100319B38(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x100u);
}

uint64_t sub_100319B84(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD v6[6];
  int v7;
  char v8;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100319BE8;
  v6[3] = &unk_100926658;
  v7 = a2;
  v6[4] = a3;
  v6[5] = a4;
  v8 = a5;
  return sub_100042FD0(a1, 256, a5, v6, 0);
}

uint64_t sub_100319BE8(uint64_t a1)
{
  return sub_1001FC6D4(*(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 32), *(void **)(a1 + 40));
}

uint64_t sub_100319C0C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x101u);
}

uint64_t sub_100319C58(uint64_t a1, char a2, char a3, char a4, int a5)
{
  _QWORD v6[4];
  char v7;
  char v8;
  char v9;
  char v10;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100319CC0;
  v6[3] = &unk_100926678;
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = a5;
  return sub_100042FD0(a1, 257, a5, v6, 0);
}

uint64_t sub_100319CC0()
{
  return sub_1001FC774();
}

uint64_t sub_100319CE8(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x102u);
}

uint64_t sub_100319D34(uint64_t a1, char a2, char a3, int a4)
{
  _QWORD v5[4];
  char v6;
  char v7;
  char v8;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100319D9C;
  v5[3] = &unk_1009267D8;
  v6 = a2;
  v7 = a3;
  v8 = a4;
  return sub_100042FD0(a1, 258, a4, v5, 0);
}

uint64_t sub_100319D9C()
{
  return sub_1001FC7FC();
}

uint64_t sub_100319DC0(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x103u);
}

uint64_t sub_100319E0C(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD v4[5];
  char v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100319E68;
  v4[3] = &unk_1009263D8;
  v4[4] = a2;
  v5 = a3;
  return sub_100042FD0(a1, 259, a3, v4, 0);
}

uint64_t sub_100319E68()
{
  return sub_1001FC884();
}

uint64_t sub_100319E88(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xF9u);
}

uint64_t sub_100319ED4(uint64_t a1, char a2, char a3, char a4, int a5)
{
  _QWORD v6[4];
  char v7;
  char v8;
  char v9;
  char v10;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100319F3C;
  v6[3] = &unk_100926678;
  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = a5;
  return sub_100042FD0(a1, 249, a5, v6, 0);
}

uint64_t sub_100319F3C()
{
  return sub_1001FC90C();
}

uint64_t sub_100319F64(_DWORD *a1)
{
  unsigned int v1;
  uint64_t v4;
  uint64_t v5;

  v1 = a1[178];
  if (v1 < 0x7D0)
  {
    if (v1)
    {
      v4 = sub_10003BE44();
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 344))(v4) & 1) != 0)
      {
        return 1;
      }
      else
      {
        v5 = sub_10003BE44();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 384))(v5))
        {
          if ((a1[178] - 2000) < 0xFFFFF839)
            return 4;
          else
            return 5;
        }
        else if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 1992))(a1))
        {
          return 5;
        }
        else
        {
          return 4;
        }
      }
    }
  }
  else
  {
    if (v1 < 0xFA0)
      return 4;
    if (v1 == 6000)
      return 5;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
    sub_1006DF678();
  return 0;
}

uint64_t sub_10031A050(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2536))(a1))
    return 2;
  else
    return 0;
}

uint64_t sub_10031A078(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x7Du);
}

uint64_t sub_10031A0C4(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10031A120;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 125, 1, v3, 0);
}

uint64_t sub_10031A120()
{
  return sub_1001FD97C();
}

uint64_t sub_10031A130(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x85u);
}

uint64_t sub_10031A17C(uint64_t a1, int a2)
{
  _QWORD v3[4];
  int v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10031A1D8;
  v3[3] = &unk_100926678;
  v4 = a2;
  return sub_100042FD0(a1, 133, 1, v3, 0);
}

uint64_t sub_10031A1D8()
{
  return sub_1001FA3B4();
}

uint64_t sub_10031A1E8(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x7Eu);
}

uint64_t sub_10031A234(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10031A290;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 126, 1, v3, 0);
}

uint64_t sub_10031A290()
{
  return sub_1001FBBAC();
}

uint64_t sub_10031A2A0(uint64_t a1, char a2, char a3, __int16 a4, __int16 a5)
{
  uint64_t v9;
  _QWORD v11[4];
  __int16 v12;
  __int16 v13;
  char v14;
  char v15;

  v9 = sub_10006BBEC();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10031A324;
  v11[3] = &unk_1009186B0;
  v14 = a2;
  v15 = a3;
  v12 = a4;
  v13 = a5;
  sub_100041A34(v9, v11);
  return 0;
}

uint64_t sub_10031A324(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10005D5A4();
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v2 + 56))(v2, *(unsigned __int8 *)(a1 + 36), *(unsigned __int8 *)(a1 + 37), *(unsigned __int16 *)(a1 + 32), *(unsigned __int16 *)(a1 + 34));
}

uint64_t sub_10031A35C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x83u);
}

uint64_t sub_10031A3A8(uint64_t a1, __int16 a2, int a3, int a4, uint64_t a5, __int16 a6)
{
  _QWORD v7[5];
  int v8;
  int v9;
  __int16 v10;
  __int16 v11;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10031A410;
  v7[3] = &unk_100926778;
  v10 = a2;
  v8 = a3;
  v9 = a4;
  v7[4] = a5;
  v11 = a6;
  return sub_100042FD0(a1, 131, 1, v7, 0);
}

uint64_t sub_10031A410()
{
  return sub_1001FCF6C();
}

uint64_t sub_10031A430(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x89u);
}

uint64_t sub_10031A47C(uint64_t a1, char a2, __int16 a3, char a4, char a5, char a6, char a7, char a8, char a9, char a10, __int16 a11, __int16 a12, __int16 a13, char a14, int a15, int a16, int a17, char a18, int a19)
{
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  _QWORD v31[4];
  int v32;
  int v33;
  int v34;
  int v35;
  __int16 v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  uint8_t buf[16];

  v27 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 744))(v27) & 1) != 0)
  {
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_10031A5F0;
    v31[3] = &unk_1009265B8;
    v40 = a2;
    v36 = a3;
    v41 = a4;
    v42 = a5;
    v43 = a6;
    v44 = a7;
    v45 = a8;
    v46 = a9;
    v47 = a10;
    v37 = a11;
    v38 = a12;
    v39 = a13;
    v48 = a14;
    v32 = a15;
    v33 = a16;
    v49 = a18;
    v34 = a17;
    v35 = a19;
    return sub_100042FD0(a1, 137, 1, v31, 0);
  }
  else
  {
    v29 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v28 = 2;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "isRssiStatisticAndDetectionEnabled is not supported", buf, 2u);
    }
    else
    {
      return 2;
    }
  }
  return v28;
}

uint64_t sub_10031A5F0(uint64_t a1)
{
  return sub_1001FCFF4(*(unsigned __int8 *)(a1 + 56), *(unsigned __int16 *)(a1 + 48), *(unsigned __int8 *)(a1 + 57), *(char *)(a1 + 58), *(char *)(a1 + 59));
}

uint64_t sub_10031A678(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  _DWORD v13[2];
  __int16 v14;
  int v15;

  v8 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 768))(v8) & 1) != 0)
  {
    *(_WORD *)(a1 + 1430) = a2;
    *(_WORD *)(a1 + 1432) = a3;
    *(_BYTE *)(a1 + 1434) = a4 != 0;
    v9 = qword_1009997E8;
    v10 = 0;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v13[0] = 67109376;
      v13[1] = a2;
      v14 = 1024;
      v15 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "configureMinMaxUsageNotification is now : max:%d min:%d", (uint8_t *)v13, 0xEu);
      return 0;
    }
  }
  else
  {
    v11 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13[0]) = 0;
      v10 = 2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "isBluetoothUsageEnabled is not supported", (uint8_t *)v13, 2u);
    }
    else
    {
      return 2;
    }
  }
  return v10;
}

uint64_t sub_10031A7C0(uint64_t a1, char a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  _DWORD v11[2];

  v6 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 776))(v6) & 1) != 0)
  {
    *(_BYTE *)(a1 + 1435) = a2;
    *(_WORD *)(a1 + 1438) = 0;
    *(_WORD *)(a1 + 1436) = a3;
    v7 = qword_1009997E8;
    v8 = 0;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 67109120;
      v11[1] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "configurePhyStatisticsUsageNotification is now : subrate Factor:%d", (uint8_t *)v11, 8u);
      return 0;
    }
  }
  else
  {
    v9 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11[0]) = 0;
      v8 = 2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "isBluetoothPhyStatisticsUsageEnabled is not supported", (uint8_t *)v11, 2u);
    }
    else
    {
      return 2;
    }
  }
  return v8;
}

uint64_t sub_10031A8F0(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x84u);
}

uint64_t sub_10031A93C(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10031A998;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 132, 1, v3, 0);
}

uint64_t sub_10031A998()
{
  return sub_1001FC994();
}

uint64_t sub_10031A9A8(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6, char a7, char a8, char a9)
{
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  int v20;
  uint64_t result;
  int v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  char v28;
  char v29;
  char v30;
  char v31;
  _QWORD v32[5];
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  _QWORD v39[5];
  char v40;
  char v41;
  char v42;

  v17 = sub_1000438A4();
  v18 = sub_100333DE4(v17, 5);
  v19 = sub_1000438A4();
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 2576))(v19);
  result = 3;
  if (a2)
  {
    if (v18)
      v22 = 2;
    else
      v22 = 1;
    if (v20)
      v23 = 3;
    else
      v23 = v22;
    if (v23 == 3)
    {
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      v32[2] = sub_10031ABFC;
      v32[3] = &unk_1009263B8;
      v32[4] = a2;
      v33 = a3;
      v34 = a4;
      v35 = a5;
      v36 = a7;
      v37 = a8;
      v38 = a9;
      v24 = v32;
      v25 = a1;
      v26 = 239;
    }
    else if (v23 == 1)
    {
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_10031AB58;
      v39[3] = &unk_100926398;
      v39[4] = a2;
      v40 = a3;
      v41 = a4;
      v42 = a5;
      v24 = v39;
      v25 = a1;
      v26 = 233;
    }
    else
    {
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472;
      v27[2] = sub_10031ACB0;
      v27[3] = &unk_100926798;
      v27[4] = a2;
      v28 = a3;
      v29 = a4;
      v30 = a5;
      v31 = a6;
      v24 = v27;
      v25 = a1;
      v26 = 235;
    }
    return sub_100042FD0(v25, v26, 1, v24, 0);
  }
  return result;
}

uint64_t sub_10031AB58(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  v4 = 1;
  v1 = *(char **)(a1 + 32);
  v2 = *v1;
  v5 = v1 + 1;
  LOBYTE(v6) = v2;
  BYTE1(v6) = *(_BYTE *)(a1 + 40);
  WORD1(v6) = *(_WORD *)(a1 + 41);
  return sub_1001F8374((uint64_t)&v4);
}

uint64_t sub_10031ABB0(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xE9u);
}

uint64_t sub_10031ABFC(uint64_t a1)
{
  char *v1;
  char v2;
  _QWORD v4[2];
  char v5;
  char v6;
  __int16 v7;
  char v8;
  char v9;
  __int16 v10;

  v4[0] = 3;
  v1 = *(char **)(a1 + 32);
  v2 = *v1;
  v4[1] = v1 + 1;
  v5 = v2;
  v6 = *(_BYTE *)(a1 + 40);
  v7 = *(_WORD *)(a1 + 41);
  v8 = 0;
  v9 = *(_BYTE *)(a1 + 43);
  v10 = *(_WORD *)(a1 + 44);
  return sub_1001F8374((uint64_t)v4);
}

uint64_t sub_10031AC64(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xEFu);
}

uint64_t sub_10031ACB0(uint64_t a1)
{
  char *v1;
  char v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  v4 = 2;
  v1 = *(char **)(a1 + 32);
  v2 = *v1;
  v5 = v1 + 1;
  LOBYTE(v6) = v2;
  *(_DWORD *)((char *)&v6 + 1) = *(_DWORD *)(a1 + 40);
  return sub_1001F8374((uint64_t)&v4);
}

uint64_t sub_10031AD00(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xEBu);
}

uint64_t sub_10031AD4C(int a1, int a2, int a3, int a4)
{
  NSObject *v8;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;

  v8 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109888;
    v10[1] = a1;
    v11 = 1024;
    v12 = a2;
    v13 = 1024;
    v14 = a3;
    v15 = 1024;
    v16 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "pollStatsForDevicesAddedToFilterAcceptListWithOptionsCB: status %d, numAdvs %u, rssi %d, lastRssiTimeDifference %u msec", (uint8_t *)v10, 0x1Au);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xEAu);
}

uint64_t sub_10031AE54(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  if (!a2)
    return 3;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10031AEBC;
  v3[3] = &unk_100926538;
  v3[4] = a2;
  return sub_100042FD0(a1, 234, 1, v3, 0);
}

uint64_t sub_10031AEBC(uint64_t a1)
{
  char *v1;
  char v2;
  _BYTE *v4;
  uint64_t v5;

  v5 = 0;
  v1 = *(char **)(a1 + 32);
  v2 = *v1;
  v4 = v1 + 1;
  LOBYTE(v5) = v2;
  return sub_1001F840C(&v4);
}

uint64_t sub_10031AEF8(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x86u);
}

uint64_t sub_10031AF44(uint64_t a1, char a2, __int16 a3, __int16 a4, char a5, char a6, char a7, char a8, char a9, char a10)
{
  char v10;
  _QWORD v14[4];
  __int16 v15;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;

  if (*(_DWORD *)(a1 + 712) > 0x17u)
    v10 = a7;
  else
    v10 = 0;
  if ((v10 & 1) == 0)
  {
    a8 = 0;
    a9 = 0;
    a10 = 0;
  }
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10031AFE8;
  v14[3] = &unk_100926398;
  v17 = a2;
  v15 = a3;
  v16 = a4;
  v18 = a5;
  v19 = a6;
  v20 = v10;
  v21 = a8;
  v22 = a9;
  v23 = a10;
  return sub_100042FD0(a1, 134, 1, v14, 0);
}

uint64_t sub_10031AFE8(uint64_t a1)
{
  return sub_1001F6730(*(unsigned __int8 *)(a1 + 36), *(unsigned __int16 *)(a1 + 32));
}

uint64_t sub_10031B03C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x87u);
}

uint64_t sub_10031B088(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,int a31,char a32)
{
  _QWORD v33[4];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  _BYTE v59[108];

  *(_DWORD *)&v59[104] = a30;
  *(_QWORD *)&v59[96] = a29;
  *(_QWORD *)&v59[88] = a28;
  *(_QWORD *)&v59[80] = a27;
  *(_QWORD *)&v59[72] = a26;
  *(_QWORD *)&v59[64] = a25;
  *(_QWORD *)&v59[56] = a24;
  *(_QWORD *)&v59[48] = a23;
  *(_QWORD *)&v59[40] = a22;
  *(_QWORD *)&v59[32] = a21;
  *(_QWORD *)&v59[24] = a20;
  *(_QWORD *)&v59[16] = a19;
  *(_QWORD *)&v59[8] = a18;
  *(_QWORD *)v59 = a17;
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_10031B198;
  v33[3] = &unk_100926B78;
  v42 = a2;
  v43 = a3;
  v44 = a4;
  v45 = a5;
  v46 = a6;
  v47 = a7;
  v48 = a8;
  v49 = a9;
  v50 = a10;
  v51 = a11;
  v52 = a12;
  v53 = a13;
  v54 = a14;
  v55 = a15;
  v56 = a16;
  v57 = v59[0];
  v34 = *(_OWORD *)&v59[4];
  v35 = *(_OWORD *)&v59[20];
  v36 = *(_OWORD *)&v59[36];
  v37 = *(_OWORD *)&v59[52];
  v38 = *(_OWORD *)&v59[68];
  v39 = *(_OWORD *)&v59[84];
  v40 = *(_QWORD *)&v59[100];
  v41 = a31;
  v58 = a32;
  return sub_100042FD0(a1, 135, 1, v33, 0);
}

uint64_t sub_10031B198(uint64_t a1)
{
  return sub_1001F67C8(*(unsigned __int8 *)(a1 + 140), *(unsigned __int8 *)(a1 + 141), *(unsigned __int8 *)(a1 + 142), *(unsigned __int8 *)(a1 + 143), *(unsigned __int8 *)(a1 + 144), *(unsigned __int8 *)(a1 + 145), *(unsigned __int8 *)(a1 + 146), *(unsigned __int8 *)(a1 + 147), *(_QWORD *)(a1 + 148), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104),
           *(_QWORD *)(a1 + 112),
           *(_QWORD *)(a1 + 120),
           *(_QWORD *)(a1 + 128),
           *(_DWORD *)(a1 + 136),
           *(_BYTE *)(a1 + 156),
           (uint64_t)sub_10031B03C);
}

uint64_t sub_10031B228(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x88u);
}

uint64_t sub_10031B274(uint64_t a1, char a2)
{
  _QWORD v3[4];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10031B2D0;
  v3[3] = &unk_100926418;
  v4 = a2;
  return sub_100042FD0(a1, 136, 1, v3, 0);
}

uint64_t sub_10031B2D0()
{
  return sub_1001F69A0();
}

uint64_t sub_10031B2E0(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL4 v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__p[2];
  char v24;
  void *v25[2];
  unsigned __int8 v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;

  if (qword_10097AC70 != -1)
    dispatch_once(&qword_10097AC70, &stru_100926DB8);
  v6 = sub_1002F7C88(qword_10097AC68, 2);
  if (a3)
  {
    if (a2 == 1)
    {
      v27 = 0;
      v28 = 0;
      v29 = 0;
      sub_1005D9F88(v6, (uint64_t *)&v27);
      v7 = *(_DWORD *)(a1 + 712);
      if (v7 - 1 <= 0x7CE)
      {
        LODWORD(__p[0]) = v7 > 0xC;
LABEL_7:
        v25[0] = __p;
        v8 = sub_10031FA08(&v27, (int *)__p, (uint64_t)&unk_100740F58, (_DWORD **)v25);
LABEL_29:
        v10 = *((unsigned __int8 *)v8 + 32);
        sub_10001A82C((uint64_t)&v27, v28);
        return v10;
      }
      goto LABEL_14;
    }
    return 100;
  }
  switch(a2)
  {
    case 131091:
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v11 = sub_1005DA02C(v6, (uint64_t *)&v27);
      if (GestaltGetDeviceClass(v11) != 7)
      {
        v10 = 100;
LABEL_33:
        sub_100056BAC((uint64_t)&v27, v28);
        return v10;
      }
      sub_1003CD900((uint64_t)v25);
      v12 = v26;
      if ((v26 & 0x80u) != 0)
        v12 = (unint64_t)v25[1];
      if (v12)
      {
        sub_1003CD900((uint64_t)__p);
        v13 = &v28 != (char **)sub_10001F2AC((uint64_t)&v27, (const void **)__p);
        if (v24 < 0)
          operator delete(__p[0]);
        if ((v26 & 0x80) == 0)
          goto LABEL_23;
      }
      else
      {
        v13 = 0;
        if ((v26 & 0x80) == 0)
        {
LABEL_23:
          if (v13)
          {
            sub_1003CD900((uint64_t)v25);
            __p[0] = v25;
            v10 = *((unsigned __int8 *)sub_1002F7194(&v27, (const void **)v25, (uint64_t)&unk_100740F58, (_OWORD **)__p)
                  + 56);
            if ((char)v26 < 0)
              operator delete(v25[0]);
          }
          else
          {
            v14 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
              sub_1006DF6E4(v14, v15, v16, v17, v18, v19, v20, v21);
            v10 = 5;
          }
          goto LABEL_33;
        }
      }
      operator delete(v25[0]);
      goto LABEL_23;
    case 4:
      return sub_1005D9FE8(v6);
    case 3:
      v27 = 0;
      v28 = 0;
      v29 = 0;
      sub_1005D9F88(v6, (uint64_t *)&v27);
      v9 = *(_DWORD *)(a1 + 712);
      if (v9 - 1 <= 0x7CE)
      {
        LODWORD(__p[0]) = v9 > 0xC;
        goto LABEL_7;
      }
LABEL_14:
      LODWORD(__p[0]) = 2;
      v25[0] = __p;
      v8 = sub_10031FA08(&v27, (int *)__p, (uint64_t)&unk_100740F58, (_DWORD **)v25);
      goto LABEL_29;
  }
  return 100;
}

void sub_10031B61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,_QWORD *a22)
{
  sub_10001A82C((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

uint64_t sub_10031B698(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xECu);
}

uint64_t sub_10031B6E4(uint64_t a1, int a2, int a3, int a4, char a5)
{
  int v10;
  NSObject *v11;
  uint64_t result;
  const char *v13;
  NSObject *v14;
  const char *v15;
  int v16;
  int v17;
  const char *v18;
  _QWORD v19[5];
  __int16 v20;
  __int16 v21;
  char v22;
  _QWORD v23[4];
  __int16 v24;
  __int16 v25;
  char v26;
  char v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  _BYTE v31[10];
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;

  v10 = *(unsigned __int8 *)(a1 + 1203);
  if (v10 == a2 && (!a2 || *(unsigned __int16 *)(a1 + 1206) == a3 && *(unsigned __int16 *)(a1 + 1204) == a4))
  {
    v11 = qword_1009997E8;
    result = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      v13 = "No";
      *(_DWORD *)buf = 136315650;
      if (a2)
        v13 = "Yes";
      v29 = v13;
      v30 = 1024;
      *(_DWORD *)v31 = a3;
      *(_WORD *)&v31[4] = 1024;
      *(_DWORD *)&v31[6] = a4;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "btscLeSetConnectionScan: same as current ScanCore config enable %s interval %d window %d", buf, 0x18u);
      return 0;
    }
  }
  else
  {
    v14 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v15 = "Yes";
      v16 = *(unsigned __int16 *)(a1 + 1206);
      v17 = *(unsigned __int16 *)(a1 + 1204);
      if (v10)
        v18 = "Yes";
      else
        v18 = "No";
      *(_DWORD *)buf = 136316418;
      if (!a2)
        v15 = "No";
      v29 = v18;
      v30 = 2080;
      *(_QWORD *)v31 = v15;
      *(_WORD *)&v31[8] = 1024;
      v32 = v16;
      v33 = 1024;
      v34 = a3;
      v35 = 1024;
      v36 = v17;
      v37 = 1024;
      v38 = a4;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "btscLeSetConnectionScan: ScanCore Connection Scan Params to be updated enabled %s -> %s interval %d -> %d window %d -> %d", buf, 0x2Eu);
    }
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_10031B930;
    v23[3] = &unk_100926908;
    v26 = a2;
    v24 = a3;
    v25 = a4;
    v27 = a5;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10031B950;
    v19[3] = &unk_100926B98;
    v19[4] = a1;
    v22 = a2;
    v20 = a3;
    v21 = a4;
    return sub_100042FD0(a1, 236, 1, v23, v19);
  }
  return result;
}

uint64_t sub_10031B930(uint64_t a1)
{
  return sub_1001F84A4(*(unsigned __int8 *)(a1 + 36), *(_WORD *)(a1 + 32), *(_WORD *)(a1 + 34));
}

uint64_t sub_10031B950(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  *(_BYTE *)(v1 + 1203) = *(_BYTE *)(result + 44);
  *(_WORD *)(v1 + 1206) = *(_WORD *)(result + 40);
  *(_WORD *)(v1 + 1204) = *(_WORD *)(result + 42);
  return result;
}

BOOL sub_10031B970()
{
  return sub_10005F864() == 154;
}

uint64_t sub_10031B98C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xFAu);
}

uint64_t sub_10031B9D8(uint64_t a1, char a2)
{
  NSObject *v5;
  _QWORD v6[4];
  char v7;
  uint8_t buf[4];
  const char *v9;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 3448))(a1) & 1) != 0)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10031BAE8;
    v6[3] = &unk_100926418;
    v7 = a2;
    return sub_100042FD0(a1, 250, 1, v6, 0);
  }
  else
  {
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446210;
      v9 = sub_1000438E4(a1, 250);
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "setAGCTableOverrideCB %{public}s is not implemented on this platform", buf, 0xCu);
    }
    return 2;
  }
}

uint64_t sub_10031BAE8()
{
  return sub_1001FDE88();
}

void sub_10031BAF8(int a1, __int128 *a2, int a3)
{
  __int128 v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a3 == 32)
  {
    v4 = a2[1];
    xmmword_100991B70 = *a2;
    xmmword_100991B80 = v4;
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100926C78);
    sub_100043784(a1, 0xFBu);
  }
  else
  {
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006DF714(v5, v6, v7, v8, v9, v10, v11, v12);
  }
}

uint64_t sub_10031BB90(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD v4[5];
  char v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10031BC00;
  v4[3] = &unk_100918888;
  v4[4] = a2;
  v5 = a3;
  return sub_100042FD0(a1, 251, 1, &stru_100926BB8, v4);
}

int sub_10031BBF4(id a1)
{
  return sub_1001FDF10();
}

void *sub_10031BC00(uint64_t a1)
{
  size_t v1;

  if (*(unsigned __int8 *)(a1 + 40) >= 0x20u)
    v1 = 32;
  else
    v1 = *(unsigned __int8 *)(a1 + 40);
  return memcpy(*(void **)(a1 + 32), &xmmword_100991B70, v1);
}

uint64_t sub_10031BC24(uint64_t a1, const void *a2, size_t __n)
{
  int v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;

  v3 = __n;
  if ((_DWORD)a1)
  {
    v4 = a1;
    byte_100991C6B = 0;
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006DF7FC(v3, v4, v5);
  }
  else if (__n > 0xFB)
  {
    v6 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006DF780(v3, v6);
    byte_100991C6B = 0;
    LODWORD(v4) = 114;
  }
  else
  {
    byte_100991C6B = __n;
    memcpy(&xmmword_100991B70, a2, __n);
    LODWORD(v4) = 0;
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(v4, 0xFCu);
}

uint64_t sub_10031BD18(uint64_t a1, int a2, char a3, uint64_t a4)
{
  _QWORD v5[5];
  char v6;
  _QWORD v7[4];
  int v8;
  char v9;

  if ((a3 + 4) > 5u)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10031BDEC;
    v7[3] = &unk_100926A48;
    v8 = a2;
    v9 = a3;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10031BE04;
    v5[3] = &unk_100918888;
    v6 = a3;
    v5[4] = a4;
    return sub_100042FD0(a1, 252, 1, v7, v5);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006DF870();
    return 3;
  }
}

uint64_t sub_10031BDEC()
{
  return sub_1001FDF98();
}

void sub_10031BE04(uint64_t a1)
{
  if (byte_100991C6B == *(_BYTE *)(a1 + 40))
  {
    memcpy(*(void **)(a1 + 32), &xmmword_100991B70, byte_100991C6B);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006DF8D0();
  }
}

uint64_t sub_10031BE78(uint64_t a1, unsigned int a2)
{
  if ((*(_DWORD *)(a1 + 712) - 2000) <= 0x7CF)
    return (171 * a2) >> 10;
  else
    return a2 >> 1;
}

uint64_t sub_10031BE9C()
{
  unsigned int v0;
  unsigned int v1;
  unsigned int v2;

  v0 = *(_DWORD *)(sub_1000438A4() + 712);
  v1 = v0 - 1;
  if (v0 <= 0x15)
    v2 = 28;
  else
    v2 = 102;
  if (v1 >= 0x7CF)
    return 0;
  else
    return v2;
}

uint64_t sub_10031BED0()
{
  unsigned int v0;
  unsigned int v1;
  unsigned __int8 v2;

  v0 = *(_DWORD *)(sub_1000438A4() + 712);
  v1 = v0 - 1;
  if (v0 <= 0x15)
    v2 = 63;
  else
    v2 = -38;
  if (v1 >= 0x7CF)
    return 0;
  return v2;
}

uint64_t sub_10031BF08(uint64_t a1, _OWORD *a2, _QWORD *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  *a2 = *(_OWORD *)(a1 + 1224);
  v3 = *(_OWORD *)(a1 + 1240);
  v4 = *(_OWORD *)(a1 + 1256);
  v5 = *(_OWORD *)(a1 + 1288);
  a2[3] = *(_OWORD *)(a1 + 1272);
  a2[4] = v5;
  a2[1] = v3;
  a2[2] = v4;
  v6 = *(_OWORD *)(a1 + 1304);
  v7 = *(_OWORD *)(a1 + 1320);
  v8 = *(_OWORD *)(a1 + 1352);
  a2[7] = *(_OWORD *)(a1 + 1336);
  a2[8] = v8;
  a2[5] = v6;
  a2[6] = v7;
  v9 = *(_OWORD *)(a1 + 1368);
  v10 = *(_OWORD *)(a1 + 1384);
  v11 = *(_OWORD *)(a1 + 1400);
  *(_OWORD *)((char *)a2 + 190) = *(_OWORD *)(a1 + 1414);
  a2[10] = v10;
  a2[11] = v11;
  a2[9] = v9;
  *a3 = *(_QWORD *)(a1 + 1216);
  return 0;
}

uint64_t sub_10031BF5C(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x8Au);
}

uint64_t sub_10031BFA8(uint64_t a1, char a2, char a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, char a11)
{
  _QWORD v12[4];
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  char v20;
  char v21;
  char v22;

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10031C024;
  v12[3] = &unk_100926558;
  v20 = a2;
  v21 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = a8;
  v18 = a9;
  v19 = a10;
  v22 = a11;
  return sub_100042FD0(a1, 138, 1, v12, 0);
}

uint64_t sub_10031C024(uint64_t a1)
{
  return sub_1001FE020(*(unsigned __int8 *)(a1 + 60), *(unsigned __int8 *)(a1 + 61));
}

uint64_t sub_10031C074(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x8Bu);
}

uint64_t sub_10031C0C0(uint64_t a1, char a2, char a3)
{
  _QWORD v4[4];
  char v5;
  char v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10031C120;
  v4[3] = &unk_1009264D8;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 139, 1, v4, 0);
}

uint64_t sub_10031C120()
{
  return sub_1001FE0C0();
}

BOOL sub_10031C138()
{
  int v0;
  unsigned int v1;
  unsigned int v2;

  v0 = *(_DWORD *)(sub_1000438A4() + 712);
  v1 = v0 - 2001;
  v2 = v0 - 21;
  return v1 < 0x7CF || v2 < 6;
}

uint64_t sub_10031C164(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xEEu);
}

uint64_t sub_10031C1B0(uint64_t a1, __int16 a2, char a3, char a4, char a5, char a6, char a7)
{
  _QWORD v8[4];
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10031C220;
  v8[3] = &unk_1009265F8;
  v9 = a2;
  v10 = a3;
  v11 = a4;
  v12 = a5;
  v13 = a6;
  v14 = a7;
  return sub_100042FD0(a1, 238, 1, v8, 0);
}

uint64_t sub_10031C220()
{
  return sub_1001F70C8();
}

uint64_t sub_10031C248(int a1, int a2)
{
  NSObject *v4;
  _DWORD v6[2];

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "loadMSFFileCB: status = %d", (uint8_t *)v6, 8u);
  }
  if ((a1 || a2) && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006DF934();
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x105u);
}

uint64_t sub_10031C354(uint64_t a1, char a2, __int16 a3, uint64_t a4, __int16 a5, int a6)
{
  _QWORD v7[5];
  __int16 v8;
  __int16 v9;
  char v10;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10031C3BC;
  v7[3] = &unk_100926838;
  v10 = a2;
  v8 = a3;
  v7[4] = a4;
  v9 = a5;
  return sub_100042FD0(a1, 261, a6, v7, 0);
}

uint64_t sub_10031C3BC(uint64_t a1)
{
  return sub_1001FE148(*(unsigned __int8 *)(a1 + 44), *(_WORD *)(a1 + 40), *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 42));
}

uint64_t sub_10031C3DC(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "loadPwrRegulatoryFileCB: status = %d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x106u);
}

uint64_t sub_10031C4B0(uint64_t a1, uint64_t a2, __int16 a3, int a4)
{
  _QWORD v5[5];
  __int16 v6;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10031C514;
  v5[3] = &unk_1009265D8;
  v5[4] = a2;
  v6 = a3;
  return sub_100042FD0(a1, 262, a4, v5, 0);
}

uint64_t sub_10031C514(uint64_t a1)
{
  return sub_1001FE200(*(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

uint64_t sub_10031C52C(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "loadPwrRegulatoryFileA3CB: status = %d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x107u);
}

uint64_t sub_10031C600(uint64_t a1, __int16 a2, uint64_t a3, __int16 a4, int a5)
{
  _QWORD v6[5];
  __int16 v7;
  __int16 v8;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10031C664;
  v6[3] = &unk_100926798;
  v7 = a2;
  v6[4] = a3;
  v8 = a4;
  return sub_100042FD0(a1, 263, a5, v6, 0);
}

uint64_t sub_10031C664(uint64_t a1)
{
  return sub_1001FE2B8(*(unsigned __int16 *)(a1 + 40), *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 42));
}

uint64_t sub_10031C680(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x108u);
}

uint64_t sub_10031C6CC(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10031C728;
  v3[3] = &unk_100926538;
  v3[4] = a2;
  return sub_100042FD0(a1, 264, 1, v3, 0);
}

uint64_t sub_10031C728(uint64_t a1)
{
  return sub_1001FE7AC(*(_QWORD *)(a1 + 32));
}

uint64_t sub_10031C738(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2752))(a1);
}

uint64_t sub_10031C744(uint64_t a1)
{
  uint64_t result;

  result = _os_feature_enabled_impl("BluetoothFeatures", "FastLEConnectionNoLTK");
  if ((_DWORD)result)
    return (*(_DWORD *)(a1 + 712) - 21) < 6;
  return result;
}

uint64_t sub_10031C788()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  NSObject *v3;
  void *__p[2];
  char v6;
  unsigned __int8 v7;
  uint8_t buf[8];
  char v9;

  v7 = 0;
  v0 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "SupportsChannelSounding");
  v1 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(_QWORD *)v0 + 72))(v0, buf, __p, &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
  {
    operator delete(*(void **)buf);
    if (!(_DWORD)v1)
      return v1;
  }
  else if (!(_DWORD)v1)
  {
    return v1;
  }
  v2 = v7;
  v1 = v7 != 0;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Overriding Channel sounding support to : %d", buf, 8u);
  }
  return v1;
}

void sub_10031C8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10031C8F0()
{
  return 0;
}

uint64_t sub_10031C8F8(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xF0u);
}

uint64_t sub_10031C944(unsigned __int8 *a1, uint64_t a2, char a3, int a4, uint64_t a5)
{
  NSObject *v10;
  id v11;
  void *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD v17[7];
  char v18;
  char v19;
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  v10 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v11 = sub_100021770(a2);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v13 = a1[1444];
    *(_DWORD *)buf = 138412802;
    v21 = v12;
    v22 = 1024;
    v23 = a4;
    v24 = 1024;
    v25 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "FastLEConnection:writeStoredLTKForDevice %@ length:%d fStoredLTKCount:%d", buf, 0x18u);

  }
  if (!(*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)a1 + 2744))(a1))
    return 11;
  v14 = a1[1444];
  if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)a1 + 2752))(a1))
    v15 = 16;
  else
    v15 = 8;
  if (v15 <= v14)
    return 23;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10031CADC;
  v17[3] = &unk_100926A28;
  v17[4] = a1;
  v17[5] = a2;
  v18 = a3;
  v19 = a4;
  v17[6] = a5;
  return sub_100042FD0((uint64_t)a1, 240, 1, v17, 0);
}

uint64_t sub_10031CADC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = sub_1001FE36C();
  if (!(_DWORD)result)
    ++*(_BYTE *)(v1 + 1444);
  return result;
}

uint64_t sub_10031CB24(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xF1u);
}

uint64_t sub_10031CB70(unsigned __int8 *a1, uint64_t a2, char a3)
{
  NSObject *v6;
  id v7;
  void *v8;
  int v9;
  _QWORD v11[6];
  char v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  int v16;

  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = sub_100021770(a2);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = a1[1444];
    *(_DWORD *)buf = 138412546;
    v14 = v8;
    v15 = 1024;
    v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "FastLEConnection:removeStoredLTKForDevice %@ fStoredLTKCount:%d", buf, 0x12u);

  }
  if (!a1[1444])
    return 0;
  if (!(*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)a1 + 2744))(a1))
    return 11;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10031CCC4;
  v11[3] = &unk_1009263F8;
  v11[4] = a1;
  v11[5] = a2;
  v12 = a3;
  return sub_100042FD0((uint64_t)a1, 241, 1, v11, 0);
}

uint64_t sub_10031CCC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = sub_1001FE47C();
  if (!(_DWORD)result)
    --*(_BYTE *)(v1 + 1444);
  return result;
}

uint64_t sub_10031CD04(int a1, int a2, size_t size, const void *a4)
{
  int v4;
  char v6;
  unsigned int v7;
  void *v9;

  v4 = a1;
  if (!a1)
  {
    v6 = a2;
    v4 = 105;
    if (a2)
    {
      v7 = size;
      if ((_DWORD)size)
      {
        if (a4)
        {
          v9 = malloc_type_malloc(size, 0x7DE9EBBAuLL);
          *((_QWORD *)&xmmword_100991B70 + 1) = v9;
          if (v9)
          {
            LOBYTE(xmmword_100991B70) = v6;
            WORD1(xmmword_100991B70) = v7;
            memcpy(v9, a4, v7);
            v4 = 0;
          }
          else
          {
            v4 = 106;
          }
        }
      }
    }
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(v4, 0xF2u);
}

uint64_t sub_10031CDC4(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  NSObject *v8;
  int v9;
  _QWORD v11[7];
  uint8_t buf[4];
  int v13;

  v8 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *a3;
    *(_DWORD *)buf = 67109120;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "FastLEConnection:readLocalControllerCachedInfo maxLen:%d", buf, 8u);
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2744))(a1))
    return 11;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10031CEFC;
  v11[3] = &unk_1009210D8;
  v11[4] = a3;
  v11[5] = a2;
  v11[6] = a4;
  return sub_100042FD0(a1, 242, 1, &stru_100926BD8, v11);
}

int sub_10031CEF0(id a1)
{
  return sub_1001FE58C();
}

void sub_10031CEFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  NSObject *v5;
  int v7;
  void *v8;
  unsigned int v9;
  void *v10;
  void *v11;
  _DWORD v12[2];
  __int16 v13;
  void *v14;

  v2 = *((_QWORD *)&xmmword_100991B70 + 1);
  v3 = WORD1(xmmword_100991B70);
  if (*((_QWORD *)&xmmword_100991B70 + 1))
    v4 = WORD1(xmmword_100991B70) == 0;
  else
    v4 = 1;
  if (v4)
  {
    **(_BYTE **)(a1 + 32) = 0;
    **(_BYTE **)(a1 + 40) = 0;
  }
  else
  {
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = xmmword_100991B70;
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v2, v3));
      v12[0] = 67109378;
      v12[1] = v7;
      v13 = 2112;
      v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "FastLEConnection:readLocalControllerCachedInfo version:%d data:%@", (uint8_t *)v12, 0x12u);

    }
    v9 = **(unsigned __int8 **)(a1 + 32);
    **(_BYTE **)(a1 + 40) = xmmword_100991B70;
    if (WORD1(xmmword_100991B70) < v9)
      LOBYTE(v9) = BYTE2(xmmword_100991B70);
    **(_BYTE **)(a1 + 32) = v9;
    v10 = *(void **)(a1 + 48);
    v11 = (void *)*((_QWORD *)&xmmword_100991B70 + 1);
    memcpy(v10, *((const void **)&xmmword_100991B70 + 1), WORD1(xmmword_100991B70));
    free(v11);
  }
}

uint64_t sub_10031D058(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xF3u);
}

uint64_t sub_10031D0A4(unsigned __int8 *a1, uint64_t a2, int a3, int a4, unsigned int a5, uint64_t a6)
{
  NSObject *v12;
  id v13;
  void *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t result;
  __int16 v19;
  _QWORD v20[7];
  __int16 v21;
  char v22;
  BOOL v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  unsigned int v31;
  __int16 v32;
  int v33;

  v12 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v13 = sub_100021770(a2);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v15 = a1[1445];
    *(_DWORD *)buf = 138413314;
    v25 = v14;
    v26 = 1024;
    v27 = a3;
    v28 = 1024;
    v29 = a4;
    v30 = 1024;
    v31 = a5;
    v32 = 1024;
    v33 = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "FastLEConnection:writePeerControllerCachedInfo %@ resolvedAddress:%d version:%d length:%d fStoredPeerControllerCachedInfo:%d", buf, 0x24u);

  }
  if (!(*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)a1 + 2744))(a1))
    return 11;
  v16 = a1[1445];
  if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)a1 + 2752))(a1))
    v17 = 16;
  else
    v17 = 8;
  result = 23;
  if (v17 > v16)
  {
    v20[0] = _NSConcreteStackBlock;
    if (a5 >= 0x17)
      v19 = 23;
    else
      v19 = a5;
    v20[1] = 3221225472;
    v20[2] = sub_10031D260;
    v20[3] = &unk_100926BF8;
    v20[4] = a1;
    v20[5] = a2;
    v22 = a3;
    v23 = a4 != 0;
    v21 = v19;
    v20[6] = a6;
    return sub_100042FD0((uint64_t)a1, 243, 1, v20, 0);
  }
  return result;
}

uint64_t sub_10031D260(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = sub_1001FE614();
  if (!(_DWORD)result)
    ++*(_BYTE *)(v1 + 1445);
  return result;
}

uint64_t sub_10031D2AC(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xF3u);
}

uint64_t sub_10031D2F8(unsigned __int8 *a1, uint64_t a2, char a3)
{
  NSObject *v6;
  id v7;
  void *v8;
  int v9;
  _QWORD v11[6];
  char v12;
  uint8_t buf[4];
  void *v14;
  __int16 v15;
  int v16;

  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = sub_100021770(a2);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = a1[1445];
    *(_DWORD *)buf = 138412546;
    v14 = v8;
    v15 = 1024;
    v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "FastLEConnection:removePeerControllerCachedInfo %@ fStoredPeerControllerCachedInfo:%d", buf, 0x12u);

  }
  if (!a1[1445])
    return 0;
  if (!(*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)a1 + 2744))(a1))
    return 11;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10031D44C;
  v11[3] = &unk_1009263F8;
  v11[4] = a1;
  v11[5] = a2;
  v12 = a3;
  return sub_100042FD0((uint64_t)a1, 243, 1, v11, 0);
}

uint64_t sub_10031D44C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 32);
  result = sub_1001FE614();
  if (!(_DWORD)result)
    --*(_BYTE *)(v1 + 1445);
  return result;
}

uint64_t sub_10031D498(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0xF4u);
}

uint64_t sub_10031D4E4(uint64_t a1, int a2)
{
  NSObject *v4;
  _QWORD v6[4];
  char v7;
  uint8_t buf[4];
  int v9;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "FastLEConnection:setMaxInstantUpdateForFastLEConnection %d", buf, 8u);
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2744))(a1))
    return 11;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10031D5F4;
  v6[3] = &unk_100926418;
  v7 = a2;
  return sub_100042FD0(a1, 244, 1, v6, 0);
}

uint64_t sub_10031D5F4()
{
  return sub_1001FE69C();
}

uint64_t sub_10031D604(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x10Au);
}

uint64_t sub_10031D650(uint64_t a1, int a2, char a3, int a4, char a5, char a6)
{
  NSObject *v12;
  NSObject *v13;
  _QWORD v15[4];
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint8_t buf[4];
  int v22;

  v12 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v22 = a2;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "FastLEConnection:setLEAdvTxPowerIncrease %d", buf, 8u);
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2568))(a1))
    return 11;
  if ((a4 - 21) <= 0xAEu)
  {
    v13 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v22 = a4;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "TxPowerDesired is not supported (%d dBm)", buf, 8u);
    }
    return 11;
  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10031D7E8;
  v15[3] = &unk_100926A48;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  return sub_100042FD0(a1, 266, 1, v15, 0);
}

uint64_t sub_10031D7E8()
{
  return sub_1001FE724();
}

BOOL sub_10031D80C(uint64_t a1)
{
  unsigned int v2;
  _BOOL8 v3;
  NSObject *v4;
  _DWORD v7[2];

  if (!_os_feature_enabled_impl("BluetoothFeatures", "IncomingLeConnectionDenyList"))
    goto LABEL_6;
  v2 = *(_DWORD *)(a1 + 712);
  if (!v2)
    goto LABEL_6;
  if (v2 > 0x7CF)
  {
    v3 = v2 < 0xFA0 && v2 != 2000;
    goto LABEL_7;
  }
  v3 = 1;
  if (v2 <= 0x14 && v2 != 19)
LABEL_6:
    v3 = 0;
LABEL_7:
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "supportsIncomingLEConnectionsDenyList %d", (uint8_t *)v7, 8u);
  }
  return v3;
}

uint64_t sub_10031D904(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x8Eu);
}

uint64_t sub_10031D950(uint64_t a1, int a2)
{
  NSObject *v4;
  _QWORD v6[4];
  char v7;
  uint8_t buf[4];
  int v9;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "LEHardwareModel::enableIncomingLEConnectionDenyList %d", buf, 8u);
  }
  if (byte_100991D70 == a2)
    return 0;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2768))(a1))
    return 11;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10031DA78;
  v6[3] = &unk_100926418;
  v7 = a2;
  return sub_100042FD0(a1, 142, 1, v6, 0);
}

uint64_t sub_10031DA78(uint64_t a1)
{
  byte_100991D70 = *(_BYTE *)(a1 + 32);
  return sub_1001FE840();
}

uint64_t sub_10031DA90(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x8Cu);
}

uint64_t sub_10031DADC(_DWORD *a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  void *v6;
  uint64_t v7;
  int v8;
  _QWORD v10[5];
  uint8_t buf[4];
  void *v12;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v5 = sub_100021770(a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    *(_DWORD *)buf = 138412290;
    v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "LEHardwareModel::addAddressToIncomingLEConnectionDenyList %@", buf, 0xCu);

  }
  if (!(*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 2768))(a1))
    return 11;
  v7 = sub_10031D950((uint64_t)a1, 1);
  if (!(_DWORD)v7)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10031DC40;
    v10[3] = &unk_100926538;
    v10[4] = a2;
    v7 = sub_100042FD0((uint64_t)a1, 140, 1, v10, 0);
    v8 = a1[360];
    if (!(_DWORD)v7 || v8)
      a1[360] = v8 + 1;
    else
      sub_10031D950((uint64_t)a1, 0);
  }
  return v7;
}

uint64_t sub_10031DC40(uint64_t a1)
{
  return sub_1001FE8C8(*(_QWORD *)(a1 + 32));
}

uint64_t sub_10031DC50(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x8Du);
}

uint64_t sub_10031DC9C(_DWORD *a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  void *v6;
  uint64_t result;
  int v8;
  _QWORD v9[5];
  uint8_t buf[4];
  void *v11;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v5 = sub_100021770(a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    *(_DWORD *)buf = 138412290;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "LEHardwareModel::removeAddressFromIncomingLEConnectionDenyList %@", buf, 0xCu);

  }
  if (!(*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 2768))(a1))
    return 11;
  if (!a1[360])
    return 12;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10031DDF4;
  v9[3] = &unk_100926538;
  v9[4] = a2;
  result = sub_100042FD0((uint64_t)a1, 141, 1, v9, 0);
  if (!(_DWORD)result)
  {
    v8 = a1[360] - 1;
    a1[360] = v8;
    if (!v8)
      sub_10031D950((uint64_t)a1, 0);
    return 0;
  }
  return result;
}

uint64_t sub_10031DDF4(uint64_t a1)
{
  return sub_1001FE95C(*(_QWORD *)(a1 + 32));
}

uint64_t sub_10031DE04(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x8Fu);
}

uint64_t sub_10031DE50(_DWORD *a1)
{
  NSObject *v2;
  uint64_t result;
  uint8_t v4[16];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "LEHardwareModel::clearIncomingLEConnectionDenyList()", v4, 2u);
  }
  if (!(*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 2768))(a1))
    return 11;
  a1[360] = 0;
  result = sub_100042FD0((uint64_t)a1, 143, 1, &stru_100926C18, 0);
  if (!(_DWORD)result)
  {
    sub_10031D950((uint64_t)a1, 0);
    return 0;
  }
  return result;
}

int sub_10031DF08(id a1)
{
  return sub_1001FE9F0();
}

uint64_t sub_10031DF14(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x109u);
}

uint64_t sub_10031DF60(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x10Bu);
}

uint64_t sub_10031DFAC(uint64_t *a1, uint64_t a2, int a3, __int16 a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8, __int16 a9, uint64_t a10, char a11, char a12, char a13, char a14)
{
  uint64_t v19;
  uint64_t v21;
  uint64_t (*v22)(void);
  _QWORD v26[6];
  __int16 v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v19 = sub_1000438A4();
  if (sub_100333D94(v19))
  {
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_10031E140;
    v26[3] = &unk_100926A68;
    v33 = a14;
    v34 = a3;
    v27 = a4;
    v28 = a5;
    v29 = a6;
    v30 = a7;
    v31 = a8;
    v32 = a9;
    v26[4] = a2;
    v26[5] = a10;
    v35 = a11;
    v36 = a12;
    v37 = a13;
    return sub_100042FD0((uint64_t)a1, 265, 1, v26, 0);
  }
  else
  {
    v21 = *a1;
    if (a3)
      v22 = *(uint64_t (**)(void))(v21 + 1136);
    else
      v22 = *(uint64_t (**)(void))(v21 + 1816);
    return v22();
  }
}

uint64_t sub_10031E140(uint64_t a1)
{
  char *v1;
  char v2;
  int v3;
  char v4;
  uint64_t v5;
  BOOL v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  __int16 v12;

  v12 = 0;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  v1 = *(char **)(a1 + 32);
  v2 = *v1;
  *((_QWORD *)&v8 + 1) = v1 + 1;
  BYTE1(v8) = v2;
  v3 = *(unsigned __int8 *)(a1 + 60);
  BYTE11(v10) = *(_BYTE *)(a1 + 60);
  v4 = *(_BYTE *)(a1 + 61);
  if (v4)
  {
    *(_QWORD *)((char *)&v9 + 2) = *(_QWORD *)(a1 + 48);
    *(_DWORD *)((char *)&v9 + 10) = *(_DWORD *)(a1 + 56);
    v4 = 1;
    LOBYTE(v9) = 1;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5 || (v11 == *(_DWORD *)(v5 + 1) ? (v6 = v12 == *(_WORD *)(v5 + 5)) : (v6 = 0), v6))
  {
    BYTE14(v9) = -1;
    *(_QWORD *)&v10 = &v11;
  }
  else
  {
    BYTE14(v9) = *(_BYTE *)v5;
    *(_QWORD *)&v10 = v5 + 1;
    v4 |= 2u;
    LOBYTE(v9) = v4;
  }
  if (*(_BYTE *)(a1 + 62))
  {
    BYTE8(v10) = *(_BYTE *)(a1 + 62);
    v4 |= 4u;
    LOBYTE(v9) = v4;
  }
  if (*(_BYTE *)(a1 + 63))
  {
    BYTE9(v10) = *(_BYTE *)(a1 + 63);
    v4 |= 8u;
    LOBYTE(v9) = v4;
  }
  if (*(_BYTE *)(a1 + 64))
  {
    BYTE10(v10) = *(_BYTE *)(a1 + 64);
    v4 |= 0x10u;
    LOBYTE(v9) = v4;
  }
  if (v3)
    LOBYTE(v9) = v4 | 0x20;
  return sub_1001FEA78((uint64_t)&v8);
}

uint64_t sub_10031E24C(uint64_t a1, int a2, const void *a3, unsigned int a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  _QWORD v17[2];

  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 72);
  v16 = 0;
  sub_100043758(&v16);
  v14 = sub_1001FEC40(a2, a3, a4, a5, a6, v11, v12, v13);
  sub_100043728(&v16);
  sub_100034234((uint64_t)v17);
  return v14;
}

void sub_10031E2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
  sub_100043728(&a13);
  sub_100034234((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_10031E300(uint64_t a1, __int16 a2, __int16 a3)
{
  _QWORD v4[4];
  __int16 v5;
  __int16 v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10031E360;
  v4[3] = &unk_100926678;
  v5 = a2;
  v6 = a3;
  return sub_100042FD0(a1, 267, 1, v4, 0);
}

uint64_t sub_10031E360()
{
  return sub_1001FEB20();
}

uint64_t sub_10031E378(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x10Du);
}

uint64_t sub_10031E3C4(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD v4[5];
  char v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10031E424;
  v4[3] = &unk_1009263D8;
  v5 = a2;
  v4[4] = a3;
  return sub_100042FD0(a1, 269, 1, v4, 0);
}

uint64_t sub_10031E424(uint64_t a1)
{
  return sub_1001FEBA8(*(unsigned __int8 *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

uint64_t sub_10031E43C(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Init Done callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x91u);
}

uint64_t sub_10031E510(uint64_t a1)
{
  return sub_100042FD0(a1, 145, 1, &stru_100926C38, 0);
}

int sub_10031E528(id a1)
{
  return sub_1001FECC0();
}

uint64_t sub_10031E534(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Set Random Seed callback status=%d", (uint8_t *)v4, 8u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x92u);
}

uint64_t sub_10031E608(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10031E664;
  v3[3] = &unk_100926538;
  v3[4] = a2;
  return sub_100042FD0(a1, 146, 1, v3, 0);
}

uint64_t sub_10031E664()
{
  return sub_1001FEDD0();
}

uint64_t sub_10031E674(int a1, __int16 a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8, __int16 a9)
{
  NSObject *v17;
  _DWORD v19[2];

  v17 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v19[0] = 67109120;
    v19[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Get FW Versions callback status=%d", (uint8_t *)v19, 8u);
  }
  LOWORD(xmmword_100991B70) = a2;
  WORD1(xmmword_100991B70) = a3;
  WORD2(xmmword_100991B70) = a4;
  WORD3(xmmword_100991B70) = a5;
  WORD4(xmmword_100991B70) = a6;
  WORD5(xmmword_100991B70) = a7;
  WORD6(xmmword_100991B70) = a8;
  HIWORD(xmmword_100991B70) = a9;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x90u);
}

uint64_t sub_10031E7B0(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10031E81C;
  v3[3] = &unk_100917378;
  v3[4] = a2;
  return sub_100042FD0(a1, 144, 1, &stru_100926C58, v3);
}

int sub_10031E810(id a1)
{
  return sub_1001FED48();
}

double sub_10031E81C(uint64_t a1)
{
  double result;

  result = *(double *)&xmmword_100991B70;
  *(_OWORD *)*(_QWORD *)(a1 + 32) = xmmword_100991B70;
  return result;
}

uint64_t sub_10031E830(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100926C78);
  return sub_100043784(a1, 0x10Fu);
}

uint64_t sub_10031E87C(uint64_t a1, uint64_t a2, char a3, int *a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  _BOOL4 v12;
  _QWORD *v13;
  uint64_t v14;
  _BOOL4 v15;
  BOOL v16;
  int v17;
  int v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _QWORD v22[6];
  char v23;
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[5];
  char v27;
  _QWORD v28[5];
  char v29;
  _QWORD v30[5];
  _QWORD v31[6];
  char v32;

  v8 = a1;
  v9 = *a4;
  if (*a4 == 129)
  {
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10031EC5C;
    v22[3] = &unk_1009263F8;
    v22[4] = a4;
    v22[5] = a2;
    v23 = a3;
    v11 = 1;
    sub_100042FD0(a1, 238, 1, v22, 0);
  }
  else
  {
    if (v9 == 128)
    {
      v12 = *((_BYTE *)a4 + 20) != 0;
      if (*((_BYTE *)a4 + 27))
      {
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472;
        v25[2] = sub_10031EC20;
        v25[3] = &unk_100926758;
        v25[4] = a2;
        v25[5] = a4;
        v13 = v25;
        v14 = 40;
      }
      else
      {
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472;
        v24[2] = sub_10031EC38;
        v24[3] = &unk_100926758;
        v24[4] = a2;
        v24[5] = a4;
        v13 = v24;
        v14 = 32;
      }
      return sub_100042FD0(a1, v14, v12, v13, 0);
    }
    if (v9)
    {
      return 1;
    }
    else
    {
      if ((*((_BYTE *)a4 + 21) & 1) != 0)
      {
        v15 = *((_BYTE *)a4 + 20) != 0;
        v31[0] = _NSConcreteStackBlock;
        v31[1] = 3221225472;
        v31[2] = sub_10031EB60;
        v31[3] = &unk_1009263F8;
        v31[4] = a5;
        v31[5] = a4;
        v32 = a3;
        v10 = sub_100042FD0(a1, 4, v15, v31, 0);
      }
      else
      {
        v10 = 1;
      }
      if (v10)
        v16 = v10 == 3603;
      else
        v16 = 1;
      v17 = v16;
      v11 = v17 ^ 1u;
      v18 = a4[1];
      if ((v18 & 1) != 0 && v17 && *((_BYTE *)a4 + 16))
      {
        v19 = *((_BYTE *)a4 + 20) != 0;
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472;
        v30[2] = sub_10031EBB0;
        v30[3] = &unk_100926538;
        v30[4] = a4;
        v11 = sub_100042FD0(v8, 174, v19, v30, 0);
        v18 = a4[1];
      }
      if ((v18 & 4) != 0)
      {
        v20 = *((_BYTE *)a4 + 20) != 0;
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472;
        v28[2] = sub_10031EBD0;
        v28[3] = &unk_1009263D8;
        v29 = a3;
        v28[4] = a4;
        v11 = sub_100042FD0(v8, 169, v20, v28, 0);
      }
      if ((*((_BYTE *)a4 + 21) & 2) != 0)
      {
        v12 = *((_BYTE *)a4 + 20) != 0;
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_10031EBFC;
        v26[3] = &unk_1009263D8;
        v26[4] = a2;
        v27 = a3;
        v13 = v26;
        a1 = v8;
        v14 = 5;
        return sub_100042FD0(a1, v14, v12, v13, 0);
      }
    }
  }
  return v11;
}

uint64_t sub_10031EB60(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(int);
  int v4;

  v4 = 0;
  v1 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v1 + 20))
    v2 = sub_10030A968;
  else
    v2 = 0;
  return sub_1001F8554(*(_QWORD *)(a1 + 32), *(unsigned int *)(v1 + 12), *(_BYTE *)(a1 + 48) != 0, &v4, (uint64_t)v2);
}

uint64_t sub_10031EBB0()
{
  return sub_1001F5ECC();
}

uint64_t sub_10031EBD0()
{
  return sub_1001F5658();
}

uint64_t sub_10031EBFC(uint64_t a1)
{
  return sub_1001F9EB4(*(_QWORD *)(a1 + 32) + 48);
}

uint64_t sub_10031EC20(uint64_t a1)
{
  return sub_1001F9F84(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 27), (uint64_t)sub_100307528);
}

uint64_t sub_10031EC38(uint64_t a1)
{
  return sub_1001F9AFC(*(unsigned __int16 **)(a1 + 32), *(_BYTE *)(*(_QWORD *)(a1 + 40) + 28) != 0, 0, (uint64_t)sub_10030745C);
}

uint64_t sub_10031EC5C()
{
  return sub_1001F70C8();
}

uint64_t sub_10031EC8C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  _BOOL4 v8;
  _QWORD v10[7];
  __int16 v11;
  char v12;

  v4 = *(_DWORD *)a4;
  v5 = 1;
  if (*(int *)a4 <= 127)
  {
    if (v4)
    {
      if (v4 == 1)
      {
        v6 = a4 + 23;
        v7 = 4;
LABEL_11:
        v8 = *(_BYTE *)(a4 + 20) != 0;
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        v10[2] = sub_10031ED5C;
        v10[3] = &unk_100926718;
        v12 = a3;
        v10[4] = a2;
        v10[5] = a4;
        v11 = v7;
        v10[6] = v6;
        return sub_100042FD0(a1, 271, v8, v10, 0);
      }
      return v5;
    }
    v6 = a4 + 21;
LABEL_10:
    v7 = 2;
    goto LABEL_11;
  }
  if (v4 == 128)
  {
    v6 = a4 + 27;
    goto LABEL_10;
  }
  if (v4 == 129)
  {
    v6 = a4 + 29;
    v7 = 3;
    goto LABEL_11;
  }
  return v5;
}

uint64_t sub_10031ED5C()
{
  return sub_1001FEE58();
}

uint64_t sub_10031ED84(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;

  if (!a5)
  {
    v10 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006DF994(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  v22 = 0;
  sub_100043758(&v22);
  v18 = sub_10019B008(a2);
  sub_10004339C(&v22);
  if (v18)
  {
    *(_BYTE *)(a5 + 20) = a4;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1944))(a1))
      v19 = sub_10031EC8C(a1, v18, a3, a5);
    else
      v19 = sub_10031E87C(a1, v18, a3, (int *)a5, a2);
    v20 = v19;
  }
  else
  {
    v20 = 12;
  }
  sub_100043728(&v22);
  return v20;
}

void sub_10031EE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_10031EE8C(uint64_t a1, uint64_t a2, int a3, char a4, char a5)
{
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a2 || a3 != 128)
  {
    v9 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006DFA04(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  *(_DWORD *)a2 = a3;
  *(_BYTE *)(a2 + 27) = a4;
  *(_BYTE *)(a2 + 28) = a5;
}

void sub_10031EF04(uint64_t a1, uint64_t a2, int a3, char a4, int a5, int a6, int a7, int a8, char a9)
{
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  int v26;
  uint64_t v27;
  int v28;
  NSObject *v29;
  void *__p[2];
  char v31;
  int v32;
  uint8_t buf[8];
  char v34;

  if (!a2 || a3)
  {
    v16 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006DFA74(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  *(_DWORD *)a2 = a3;
  *(_DWORD *)(a2 + 4) = a5;
  *(_DWORD *)(a2 + 8) = a6;
  *(_DWORD *)(a2 + 12) = a7;
  *(_BYTE *)(a2 + 16) = a8;
  *(_BYTE *)(a2 + 17) = a9;
  *(_BYTE *)(a2 + 21) = a4;
  *(_BYTE *)(a2 + 22) = 0;
  if ((a5 & 1) != 0 && a8)
  {
    if (a6 == 22 || a6 == 17)
      v25 = 60;
    else
      v25 = 45;
    v32 = 0;
    if (a9)
      LOBYTE(v26) = 75;
    else
      LOBYTE(v26) = v25;
    v27 = sub_100027F68();
    sub_100091AE8(buf, "ePA");
    sub_100091AE8(__p, "iPAMaxThreshold");
    v28 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v27 + 88))(v27, buf, __p, &v32);
    if (v31 < 0)
      operator delete(__p[0]);
    if (v34 < 0)
    {
      operator delete(*(void **)buf);
      if (!v28)
      {
LABEL_24:
        *(_BYTE *)(a2 + 22) = v26;
        return;
      }
    }
    else if (!v28)
    {
      goto LABEL_24;
    }
    v26 = -v32;
    v29 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v26;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Warning: Setting user defined iPA-Max threshold to -%d dBm through defaults write", buf, 8u);
    }
    goto LABEL_24;
  }
}

void sub_10031F0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_10031F108(uint64_t a1, uint64_t a2, int a3, __int16 a4, char a5, char a6)
{
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a2 || a3 != 1)
  {
    v11 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006DFAE4(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  *(_DWORD *)a2 = a3;
  *(_WORD *)(a2 + 23) = a4;
  *(_BYTE *)(a2 + 25) = a5;
  *(_BYTE *)(a2 + 26) = a6;
}

void sub_10031F188(uint64_t a1, uint64_t a2, int a3, char a4, __int16 a5)
{
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a2 || a3 != 129)
  {
    v9 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006DFB54(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  *(_DWORD *)a2 = a3;
  *(_BYTE *)(a2 + 29) = a4;
  *(_WORD *)(a2 + 30) = a5;
}

BOOL sub_10031F200(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(a1 + 712);
  return v1 >= 0x7D0 && v1 <= 0xF9F && v1 != 2000;
}

void sub_10031F234(uint64_t a1)
{
  sub_100300D04(a1);
  operator delete();
}

uint64_t sub_10031F258()
{
  return 0;
}

uint64_t sub_10031F260()
{
  return 0;
}

uint64_t sub_10031F268()
{
  return 1;
}

uint64_t sub_10031F270()
{
  return 0;
}

uint64_t sub_10031F278()
{
  return 0;
}

uint64_t sub_10031F280()
{
  return 0;
}

uint64_t sub_10031F288()
{
  return 0;
}

uint64_t sub_10031F290()
{
  return 0;
}

uint64_t sub_10031F298()
{
  return 0;
}

uint64_t sub_10031F2A0()
{
  return 0;
}

uint64_t sub_10031F2A8()
{
  return 0;
}

uint64_t sub_10031F2B0()
{
  return 2;
}

uint64_t sub_10031F2B8()
{
  return 2;
}

uint64_t sub_10031F2C0()
{
  return 2;
}

uint64_t sub_10031F2C8()
{
  return 2;
}

uint64_t sub_10031F2D0()
{
  return 2;
}

uint64_t sub_10031F2D8()
{
  return 2;
}

uint64_t sub_10031F2E0()
{
  return 2;
}

uint64_t sub_10031F2E8()
{
  return 2;
}

uint64_t sub_10031F2F0()
{
  return 2;
}

uint64_t sub_10031F2F8()
{
  return 2;
}

uint64_t sub_10031F300()
{
  return 1;
}

void sub_10031F308(id a1)
{
  operator new();
}

void sub_10031F348()
{
  operator delete();
}

void sub_10031F36C(id a1)
{
  operator new();
}

void sub_10031F3AC()
{
  operator delete();
}

void sub_10031F3D0(id a1)
{
  operator new();
}

void sub_10031F410()
{
  operator delete();
}

uint64_t *sub_10031F434(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10031F488(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_10031F470(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001A82C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10031F488(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_10031F50C(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_10031F50C(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v6 = (uint64_t **)sub_1002CCF34(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    sub_100004078(a1, v11, v8, v7);
  }
  return v7;
}

void sub_10031F594(id a1)
{
  operator new();
}

void sub_10031F5D4()
{
  operator delete();
}

void sub_10031F5F8(id a1)
{
  operator new();
}

void sub_10031F638()
{
  operator delete();
}

void sub_10031F65C(id a1)
{
  operator new();
}

void sub_10031F774()
{
  operator delete();
}

void sub_10031F798(id a1)
{
  operator new();
}

void sub_10031F7D8()
{
  operator delete();
}

void sub_10031F7FC(id a1)
{
  operator new();
}

void sub_10031F828(id a1)
{
  operator new();
}

void sub_10031F878()
{
  operator delete();
}

void sub_10031F89C(id a1)
{
  operator new();
}

void sub_10031F8DC()
{
  operator delete();
}

IOBTDebug *sub_10031F900(IOBTDebug **a1, IOBTDebug *a2)
{
  IOBTDebug *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    IOBTDebug::~IOBTDebug(result);
    operator delete();
  }
  return result;
}

void sub_10031F93C(id a1)
{
  operator new();
}

void sub_10031F9BC()
{
  uint64_t v0;
  uint64_t v1;
  void **v2;
  void *v3;

  v3 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v0 + 48) = v3;
    operator delete(v3);
  }
  sub_1002F95D8(v1, *(_QWORD **)(v0 + 16));

  operator delete();
}

uint64_t **sub_10031FA08(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((_BYTE *)v11 + 32) = 0;
    sub_100004078(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_10031FAC8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  NSObject *v4;
  _BOOL4 v5;
  uint64_t v6;
  void *__p[2];
  char v9;
  unsigned int v10;
  uint8_t buf[8];
  uint8_t *v12;
  uint64_t v13;
  int v14;

  v0 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0))
    goto LABEL_12;
  v10 = 0;
  v1 = sub_100027F68();
  sub_100091AE8(buf, "HWRepair");
  sub_100091AE8(__p, "BlueToolBTResult");
  v2 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned int *))(*(_QWORD *)v1 + 88))(v1, buf, __p, &v10);
  if (v10)
    v3 = v2;
  else
    v3 = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((v3 & 1) != 0)
      goto LABEL_9;
LABEL_12:
    clock_gettime_nsec_np(_CLOCK_MONOTONIC);
    *(_QWORD *)buf = 0;
    v12 = buf;
    v13 = 0x2020000000;
    v14 = 0;
    operator new();
  }
  operator delete(*(void **)buf);
  if ((v3 & 1) == 0)
    goto LABEL_12;
LABEL_9:
  v4 = qword_1009997E8;
  v5 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  v6 = v10;
  if (v5)
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Using override value (%d) for runBlueTool BTResult", buf, 8u);
    return v10;
  }
  return v6;
}

void sub_10031FDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 105) < 0)
    operator delete(*(void **)(v28 - 128));
  _Unwind_Resume(exception_object);
}

void sub_10031FE60(uint64_t a1)
{
  NSObject *v1;

  if (*(_QWORD *)(a1 + 120))
  {
    v1 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006DFBC4(v1);
  }
  sub_10034FFF8();
}

uint64_t sub_10031FF5C(_QWORD *a1, xpc_object_t object)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t (*v13)(void);
  int64_t int64;
  uint64_t v15;
  _BOOL4 v17;
  NSObject *v18;
  int v19;
  const char *string;
  int64_t v21;
  NSObject *v22;
  uint64_t v23;
  char __str[16];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v4 = a1[5];
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    int64 = xpc_dictionary_get_int64(object, "result");
    v15 = int64;
    v17 = int64 == 10 || int64 == 13;
    if (int64)
    {
      if ((int64 == 13 || int64 == 10) && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006DFCC4();
      v18 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006DFC40((uint64_t)a1, v15, v18);
    }
    else
    {
      v22 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v23 = a1[6];
        *(_DWORD *)__str = 136446210;
        *(_QWORD *)&__str[4] = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "BlueTool finished running %{public}s script", (uint8_t *)__str, 0xCu);
      }
    }
    if (v17)
      v19 = 2;
    else
      v19 = 1;
    if (!v15)
      v19 = 0;
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v19;
    *(_DWORD *)(v4 + 128) = *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
    string = xpc_dictionary_get_string(object, "firmware");
    v21 = xpc_dictionary_get_int64(object, "manufacturer");
    if (string)
      std::string::assign((std::string *)(v4 + 96), string);
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    *(_OWORD *)__str = 0u;
    v25 = 0u;
    snprintf(__str, 0x80uLL, "%lld/%s", v21, string);
    clock_gettime_nsec_np(_CLOCK_MONOTONIC);
    result = sub_100065478();
    if (result)
    {
      v13 = *(uint64_t (**)(void))(*(_QWORD *)sub_100065478() + 64);
      return v13();
    }
  }
  else
  {
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006DFCF0((uint64_t)a1, v5, v6, v7, v8, v9, v10, v11);
    *(_DWORD *)(v4 + 128) = 213;
    *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
    clock_gettime_nsec_np(_CLOCK_MONOTONIC);
    result = sub_100065478();
    if (result)
    {
      v13 = *(uint64_t (**)(void))(*(_QWORD *)sub_100065478() + 64);
      return v13();
    }
  }
  return result;
}

uint64_t sub_10032023C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    sub_10026C408(result);
    operator delete();
  }
  return result;
}

void sub_100320270(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  const char *v7;

  v2 = *(_QWORD *)(a1 + 120);
  if (v2
    || (v5 = qword_1009997E8, os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
    && (v6 = 136446210,
        v7 = "fPowerAssertion != NULL",
        _os_log_fault_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v6, 0xCu), (v2 = *(_QWORD *)(a1 + 120)) != 0))
  {
    v3 = qword_1009998D8;
    if (!os_log_type_enabled((os_log_t)qword_1009998D8, OS_LOG_TYPE_DEFAULT)
      || (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2),
          v6 = 136315138,
          v7 = (const char *)v4,
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Destroying %s", (uint8_t *)&v6, 0xCu),
          (v2 = *(_QWORD *)(a1 + 120)) != 0))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    }
    *(_QWORD *)(a1 + 120) = 0;
  }
}

void sub_1003203B4(uint64_t a1, int a2)
{
  int v3;
  __uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;

  if (a2)
  {
    if (!*(_BYTE *)(a1 + 132))
    {
      v3 = dword_100991D78++;
      v4 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
      v5 = v4;
      if (v3)
      {
        if (v4 > qword_100991D80 + 5000000000)
        {
          v6 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
            sub_1006DFEC0(v5, v6, v7);
          v8 = dword_100991D78;
          if (dword_100991D78 < 0xB)
          {
            dword_100991D78 = 0;
            v11 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
              sub_1006DFE4C(v11);
          }
          else
          {
            v9 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
              sub_1006DFDC8(v5, v8, v9);
            *(_BYTE *)(a1 + 132) = 1;
          }
        }
      }
      else
      {
        qword_100991D80 = v4;
        v10 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
          sub_1006DFD58(v5, v10);
      }
    }
  }
  else
  {
    dword_100991D78 = 0;
    *(_BYTE *)(a1 + 132) = 0;
  }
}

void sub_1003204F8()
{
  operator new();
}

void sub_100320648()
{
  operator delete();
}

void sub_100320680(uint64_t a1, xpc_object_t object)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *string;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;

  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    string = xpc_dictionary_get_string(object, "output");
    if (string)
      strlcpy(*(char **)(a1 + 40), string, *(_QWORD *)(a1 + 48));
    v12 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(a1 + 40);
      v15 = 136446466;
      v16 = v13;
      v17 = 2082;
      v18 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "BlueTool finished running \"%{public}s\" command - output was \"%{public}s\"", (uint8_t *)&v15, 0x16u);
    }
  }
  else
  {
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006DFF3C(a1, v4, v5, v6, v7, v8, v9, v10);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
}

uint64_t sub_1003207B0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    sub_10026C408(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1003207E4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint8_t v5[16];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Booting chipset", v5, 2u);
  }
  v3 = sub_1003208A4(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v3);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1) == 11)
    return sub_10031FAC8();
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

uint64_t sub_1003208A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  __uint64_t v6;
  uint64_t v7;
  void **v8;
  unsigned int v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  __uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  std::string::size_type v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  std::string *p_buf;
  void *v23[2];
  char v24;
  void *v25;
  int v26;
  char v27;
  int v28;
  __int16 v29;
  uint8_t v30[4];
  std::string *v31;
  _BYTE __p[64];
  std::string buf;

  v29 = 0;
  v28 = 0;
  sub_100192EF8((uint64_t)&v28);
  if (sub_1001702EC() != 7 && sub_1001702EC() != 8 || sub_10016F720())
    return 11;
  v27 = 0;
  v4 = sub_100027F68();
  sub_100091AE8(__p, "ChipBoot");
  sub_100091AE8(&buf, "DisableInitChipSimpleFast");
  (*(void (**)(uint64_t, _BYTE *, std::string *, char *))(*(_QWORD *)v4 + 72))(v4, __p, &buf, &v27);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v5 = qword_1009997E8;
  if (v27)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006DFFDC();
    return 11;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__p = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Booting chipset simple and fast", __p, 2u);
  }
  v6 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  v26 = 0;
  v25 = 0;
  memset(&__p[4], 0, 60);
  *(_DWORD *)__p = 1818845542;
  v7 = sub_100038E50();
  sub_100091AE8(v23, ".bin");
  v8 = (void **)(a1 + 96);
  v2 = (*(uint64_t (**)(uint64_t, void **, void **, int *, uint64_t))(*(_QWORD *)v7 + 408))(v7, v23, &v25, &v26, a1 + 96);
  if (v24 < 0)
    operator delete(v23[0]);
  if ((_DWORD)v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006DFFA4();
    goto LABEL_28;
  }
  v9 = sub_10016F8AC();
  if (!v9)
  {
    v10 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Function Level Reset (FLR) of Bluetooth PCIe transport -- Completed", (uint8_t *)&buf, 2u);
    }
    v11 = sub_10016F8C4();
    if (!v11)
    {
      v15 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "PCIe successfully transferred firmware image file", (uint8_t *)&buf, 2u);
      }
      if (!std::string::compare((const std::string *)(a1 + 96), 0, 0xEuLL, "/etc/bluetool/"))
      {
        *(_OWORD *)__p = *(_OWORD *)"override";
        memset(&__p[16], 0, 48);
      }
      else
      {
        v16 = sub_100038E50();
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v16 + 344))(&buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          v17 = (void *)buf.__r_.__value_.__r.__words[0];
          strncpy(__p, buf.__r_.__value_.__l.__data_, 0x40uLL);
          operator delete(v17);
        }
        else
        {
          strncpy(__p, (const char *)&buf, 0x40uLL);
        }
        __p[63] = 0;
        v18 = std::string::rfind((const std::string *)(a1 + 96), 47, 0xFFFFFFFFFFFFFFFFLL);
        std::string::basic_string(&buf, (const std::string *)(a1 + 96), v18 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v30);
        if (*(char *)(a1 + 119) < 0)
          operator delete(*v8);
        *(_OWORD *)v8 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(_QWORD *)(a1 + 112) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
      }
      v19 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 119) < 0)
          v8 = (void **)*v8;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Setting firmware filename to %s", (uint8_t *)&buf, 0xCu);
      }
      v20 = sub_10034D3CC();
      (*(void (**)(uint64_t, int *))(*(_QWORD *)v20 + 32))(v20, &v28);
      sub_100192EF8((uint64_t)&v28);
      v21 = qword_1009997E8;
      v2 = 0;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10046E9BC((unsigned __int8 *)&v28, &buf);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_buf = &buf;
        else
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        *(_DWORD *)v30 = 136315138;
        v31 = p_buf;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Providing the local device address of %s", v30, 0xCu);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        v2 = 0;
      }
      goto LABEL_28;
    }
    if (v11 != 1220)
    {
      v2 = 2410;
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v9 == 1220)
  {
LABEL_27:
    v2 = 2411;
    goto LABEL_28;
  }
  v2 = 2408;
LABEL_28:
  if (v25)
    free(v25);
  v12 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v2;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Booting chipset simple and fast returns %d", (uint8_t *)&buf, 8u);
  }
  v13 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  if (sub_100065478())
  {
    v14 = sub_100065478();
    (*(void (**)(uint64_t, _BYTE *, uint64_t, const char *, __uint64_t))(*(_QWORD *)v14 + 64))(v14, __p, v2, "boot", (v13 - v6) / 0xF4240);
  }
  return v2;
}

void sub_100320DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100320E20(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Powering on chipset", v4, 2u);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1) == 11)
    return sub_10031FAC8();
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

uint64_t sub_100320EC4(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Powering off chipset", v4, 2u);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1) == 11)
    return sub_10031FAC8();
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
}

uint64_t sub_100320F68(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  uint8_t v4[16];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Resetting chipset", v4, 2u);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  return result;
}

uint64_t sub_100320FF4(int a1, char *name, uint64_t a3)
{
  const __CFDictionary *v4;
  io_service_t MatchingService;
  io_object_t v6;
  uint64_t v7;
  const __CFData *v8;
  const __CFData *v9;
  NSObject *v10;
  UInt8 buffer[4];
  __int16 v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  UInt8 *v17;
  CFRange v18;

  v4 = IOServiceNameMatching(name);
  if (!v4)
    return 1;
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v4);
  if (!MatchingService)
    return 1;
  v6 = MatchingService;
  v13 = 0;
  *(_DWORD *)buffer = 0;
  v7 = 1;
  v8 = (const __CFData *)IORegistryEntrySearchCFProperty(MatchingService, "IODeviceTree", CFSTR("local-mac-address"), kCFAllocatorDefault, 1u);
  if (v8)
  {
    v9 = v8;
    v18.location = 0;
    v18.length = 6;
    CFDataGetBytes(v8, v18, buffer);
    *(_DWORD *)a3 = *(_DWORD *)buffer;
    *(_WORD *)(a3 + 4) = v13;
    v10 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      v15 = 6;
      v16 = 2096;
      v17 = buffer;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "DeviceTree address = %{bluetooth:BD_ADDR}.6P", buf, 0x12u);
    }
    CFRelease(v9);
    v7 = 0;
  }
  IOObjectRelease(v6);
  return v7;
}

uint64_t sub_100321158(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v5;
  int v7;

  if (*(_BYTE *)(a1 + 80))
  {
LABEL_2:
    v3 = *(_DWORD *)(a1 + 80);
    *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 84);
    *(_DWORD *)a2 = v3;
    return 0;
  }
  v5 = 0;
  while (v5 != 5)
  {
    if (*(unsigned __int8 *)(a1 + 81 + v5++))
    {
      if ((unint64_t)(v5 - 1) <= 4)
        goto LABEL_2;
      break;
    }
  }
  v7 = sub_100320FF4(a1, "marconi-bt", a2);
  if (!v7)
    return 0;
  return sub_100320FF4(v7, "bluetooth", a2);
}

uint64_t sub_1003211E8(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_WORD *)(result + 84) = *((_WORD *)a2 + 2);
  *(_DWORD *)(result + 80) = v2;
  return result;
}

uint64_t sub_1003211FC()
{
  return 203;
}

uint64_t sub_100321204()
{
  return 203;
}

uint64_t sub_10032120C(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 119) < 0)
  {
    if (*(_QWORD *)(a1 + 104))
      goto LABEL_3;
  }
  else if (*(_BYTE *)(a1 + 119))
  {
LABEL_3:
    std::string::operator=(this, (const std::string *)(a1 + 96));
    return 0;
  }
  return 203;
}

uint64_t sub_100321250(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1 + 4, a2);
  return 0;
}

uint64_t sub_10032126C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 132))
    return 214;
  else
    return *(unsigned int *)(a1 + 128);
}

uint64_t sub_100321284()
{
  CFPropertyListRef v0;
  const void *v1;
  uint64_t v2;
  NSObject *v3;
  _DWORD v5[2];

  v0 = CFPreferencesCopyAppValue(CFSTR("defaultPoweredState"), CFSTR("com.apple.BTServer"));
  if (v0)
  {
    v1 = v0;
    if (CFEqual(v0, CFSTR("off")))
    {
      v2 = 0;
    }
    else
    {
      CFEqual(v1, CFSTR("on"));
      v2 = 1;
    }
    CFRelease(v1);
  }
  else
  {
    v2 = 1;
  }
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Default power state : %d", (uint8_t *)v5, 8u);
  }
  return v2;
}

uint64_t sub_10032137C(uint64_t a1, int a2)
{
  NSObject *v3;
  const __CFString *v4;
  const __CFString *v5;
  _DWORD v7[2];

  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Write default power state : %d", (uint8_t *)v7, 8u);
  }
  v4 = CFSTR("on");
  if (a2 != 1)
    v4 = 0;
  if (a2)
    v5 = v4;
  else
    v5 = CFSTR("off");
  CFPreferencesSetAppValue(CFSTR("defaultPoweredState"), v5, CFSTR("com.apple.BTServer"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.BTServer"));
}

uint64_t sub_10032145C()
{
  CFPropertyListRef v0;
  const void *v1;
  uint64_t v2;
  NSObject *v3;
  _DWORD v5[2];

  v0 = CFPreferencesCopyAppValue(CFSTR("defaultAirplaneModePowerState"), CFSTR("com.apple.BTServer"));
  if (v0)
  {
    v1 = v0;
    if (CFEqual(v0, CFSTR("off")))
    {
      v2 = 0;
    }
    else
    {
      CFEqual(v1, CFSTR("on"));
      v2 = 1;
    }
    CFRelease(v1);
  }
  else
  {
    v2 = 1;
  }
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Default airplane mode power state : %d", (uint8_t *)v5, 8u);
  }
  return v2;
}

uint64_t sub_100321554(uint64_t a1, int a2)
{
  NSObject *v3;
  const __CFString *v4;
  const __CFString *v5;
  _DWORD v7[2];

  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Write default airplane mode power state : %d", (uint8_t *)v7, 8u);
  }
  v4 = CFSTR("on");
  if (a2 != 1)
    v4 = 0;
  if (a2)
    v5 = v4;
  else
    v5 = CFSTR("off");
  CFPreferencesSetAppValue(CFSTR("defaultAirplaneModePowerState"), v5, CFSTR("com.apple.BTServer"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.BTServer"));
}

uint64_t sub_100321634(uint64_t a1, int a2, int a3)
{
  CFAbsoluteTime Current;
  CFDateRef v6;
  CFDateRef v7;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  int v12;
  int valuePtr;

  valuePtr = a3;
  Current = CFAbsoluteTimeGetCurrent();
  v6 = CFDateCreate(kCFAllocatorDefault, Current + (double)a2);
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E0008();
    return 1;
  }
  v7 = v6;
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!Mutable)
  {
    CFRelease(v7);
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E0034();
    return 1;
  }
  v9 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("scheduledby"), CFSTR("BT_Wakeup"));
  CFDictionarySetValue(v9, CFSTR("time"), v7);
  if (a3 >= 1)
  {
    v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (v10)
    {
      v11 = v10;
      CFDictionarySetValue(v9, CFSTR("leeway"), v10);
      CFRelease(v11);
    }
  }
  v12 = IOPMRequestSysWake(v9);
  CFRelease(v9);
  CFRelease(v7);
  if (v12)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E0060();
    return 1;
  }
  return 0;
}

uint64_t sub_1003217C4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t sub_1003217CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 88) = a2;
  return result;
}

uint64_t sub_1003217D4(uint64_t a1)
{
  *(_QWORD *)a1 = off_100926F48;
  *(_QWORD *)(a1 + 8) = off_100927008;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_100069BDC(a1 + 16);
  return a1;
}

void sub_10032181C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100926F48;
  *(_QWORD *)(a1 + 8) = off_100927008;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  sub_100069BDC(a1 + 16);
  operator delete();
}

void sub_10032187C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x12u);
}

void sub_100321888(uint64_t a1, char a2, char a3, int a4)
{
  *(_QWORD *)a1 = off_100927030;
  *(_BYTE *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 9) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  sub_1000160D0(a1 + 16);
  sub_1000160D0(a1 + 88);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  sub_1000160D0(a1 + 176);
  operator new();
}

void sub_100321948()
{
  operator delete();
}

uint64_t sub_1003219A8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100927030;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    sub_100475CC8(v2);
    operator delete();
  }
  sub_100069BDC(a1 + 176);
  sub_10001A82C(a1 + 152, *(_QWORD **)(a1 + 160));
  sub_100069BDC(a1 + 88);
  sub_100069BDC(a1 + 16);
  return a1;
}

id sub_100321A20(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  void *v11;
  NSString *v13;
  _QWORD v14[2];
  unint64_t v15;
  unint64_t *v16;

  v14[1] = 0;
  v15 = a2;
  v14[0] = 0;
  sub_10003415C((uint64_t)v14, a1 + 88);
  v6 = *(_QWORD **)(a1 + 160);
  v5 = (_QWORD *)(a1 + 160);
  v4 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = v5;
  do
  {
    v8 = v4[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v9)
      v7 = v4;
    v4 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != v5 && v7[4] <= a2)
  {
    v16 = &v15;
    v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(sub_10002252C((uint64_t **)v5 - 1, &v15, (uint64_t)&unk_100740F58, (uint64_t **)&v16)[5] + 8));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v13);
  }
  else
  {
LABEL_12:
    v11 = 0;
  }
  sub_100034234((uint64_t)v14);
  return v11;
}

void sub_100321AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100321B00(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  int *v16;
  int v18;
  NSObject *v19;
  int v20;
  int v21[2];
  _QWORD v22[2];
  unint64_t v23;
  uint8_t buf[8];
  __int16 v25;
  int v26;
  __int16 v27;
  _OWORD *v28;
  __int16 v29;
  int v30;
  termios v31;
  _OWORD __s1[16];

  v22[1] = 0;
  v23 = a2;
  v22[0] = 0;
  sub_10003415C((uint64_t)v22, a1 + 88);
  v5 = (uint64_t **)(a1 + 160);
  v4 = *(_QWORD **)(a1 + 160);
  if (v4)
  {
    v6 = (uint64_t **)(a1 + 160);
    do
    {
      v7 = v4[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = v4;
      else
        v9 = v4 + 1;
      if (v8)
        v6 = (uint64_t **)v4;
      v4 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 != v5 && (unint64_t)v6[4] <= a2)
      goto LABEL_15;
  }
  v10 = *(_QWORD *)(a1 + 168);
  sub_100034264((uint64_t)v22);
  if (!*(_BYTE *)(a1 + 9) && v10)
  {
    sub_100034188((uint64_t)v22);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 152) + 40);
    *(_QWORD *)&__s1[0] = &v23;
    sub_10002252C(v5 - 1, &v23, (uint64_t)&unk_100740F58, (uint64_t **)__s1)[5] = v11;
LABEL_15:
    v12 = 1;
    goto LABEL_22;
  }
  *(_QWORD *)v21 = 0;
  memset(__s1, 0, sizeof(__s1));
  memset(&v31, 0, sizeof(v31));
  v13 = openpty(&v21[1], v21, (char *)__s1, 0, 0);
  v14 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v21[1];
    v25 = 1024;
    v26 = v21[0];
    v27 = 2080;
    v28 = __s1;
    v29 = 1024;
    v30 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Tried to open PTY with central = %d, peripheral = %d, name = %s - result was %d", buf, 0x1Eu);
  }
  if (!v13)
  {
    if (*(_BYTE *)(a1 + 8) == 2)
    {
      v18 = fcntl(v21[1], 3);
      v19 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Flags are 0x%08x", buf, 8u);
      }
      fcntl(v21[1], 4, v18 | 4u);
    }
    tcgetattr(v21[1], &v31);
    cfsetspeed(&v31, 0x38400uLL);
    cfmakeraw(&v31);
    tcsetattr(v21[1], 0, &v31);
    v20 = 3145728;
    ioctl(v21[1], 0x80085402uLL, &v20);
    operator new();
  }
  v15 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    v16 = __error();
    sub_1006E008C(v16, (uint64_t)buf, v15);
  }
  v12 = 0;
LABEL_22:
  sub_100034234((uint64_t)v22);
  return v12;
}

void sub_10032202C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100322080(uint64_t a1)
{
  return sub_10032208C(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_10032208C(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  ssize_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  int *v28;
  uint64_t *v30[2];
  _QWORD v31[2];
  unint64_t v32;
  char v33[8];

  v31[1] = 0;
  v32 = a2;
  v31[0] = 0;
  sub_10003415C((uint64_t)v31, a1 + 88);
  v4 = *(_QWORD **)(a1 + 160);
  if (!v4)
    goto LABEL_12;
  v5 = (_QWORD *)(a1 + 160);
  do
  {
    v6 = v4[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v4;
    else
      v8 = v4 + 1;
    if (v7)
      v5 = v4;
    v4 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != (_QWORD *)(a1 + 160) && v5[4] <= a2)
  {
    v30[0] = (uint64_t *)&v32;
    v17 = sub_10002252C((uint64_t **)(a1 + 152), &v32, (uint64_t)&unk_100740F58, v30)[5];
    sub_100034264((uint64_t)v31);
    v30[0] = 0;
    v30[1] = 0;
    sub_10003415C((uint64_t)v30, a1 + 176);
    v18 = read(*(_DWORD *)v17, *(void **)(v17 + 40), *(unsigned int *)(a1 + 12));
    if (v18 < 1)
    {
      v27 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        v28 = __error();
        sub_1006E012C(v28, (uint64_t)v33, v27);
      }
    }
    else
    {
      *(_BYTE *)(v17 + 32) = 1;
      dispatch_suspend(*(dispatch_object_t *)(v17 + 24));
      if (((*(uint64_t (**)(uint64_t, unint64_t, _QWORD, ssize_t))(*(_QWORD *)a1 + 24))(a1, v32, *(_QWORD *)(v17 + 40), v18) & 1) == 0)
      {
        v19 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006E00FC(v19, v20, v21, v22, v23, v24, v25, v26);
      }
    }
    sub_100034234((uint64_t)v30);
  }
  else
  {
LABEL_12:
    v9 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E00CC(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  return sub_100034234((uint64_t)v31);
}

void sub_100322254(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100034234((uint64_t)va);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100322288(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 32))
  {
    dispatch_release(*(dispatch_object_t *)(v2 + 24));
    v2 = *(_QWORD *)(a1 + 32);
  }
  result = close(*(_DWORD *)v2);
  **(_DWORD **)(a1 + 32) = -1;
  return result;
}

void sub_1003222D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v3[6];

  v2 = *(_QWORD *)(a1 + 80);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100322328;
  v3[3] = &unk_100918090;
  v3[4] = a1;
  v3[5] = a2;
  sub_100041A34(v2, v3);
}

uint64_t sub_100322328(uint64_t a1)
{
  return sub_100322334(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_100322334(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t *v13[2];
  _QWORD v14[2];
  unint64_t v15;

  v14[1] = 0;
  v15 = a2;
  v14[0] = 0;
  sub_10003415C((uint64_t)v14, a1 + 88);
  v4 = *(_QWORD **)(a1 + 160);
  if (v4)
  {
    v5 = (uint64_t **)(a1 + 152);
    v6 = (_QWORD *)(a1 + 160);
    do
    {
      v7 = v4[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = v4;
      else
        v9 = v4 + 1;
      if (v8)
        v6 = v4;
      v4 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 != (_QWORD *)(a1 + 160) && v6[4] <= a2)
    {
      v13[0] = (uint64_t *)&v15;
      v10 = sub_10002252C(v5, &v15, (uint64_t)&unk_100740F58, v13)[5];
      sub_100015ECC((uint64_t)v5, &v15);
      if (*(_BYTE *)(a1 + 9) || !*(_QWORD *)(a1 + 168))
      {
        sub_100034264((uint64_t)v14);
        v13[0] = 0;
        v13[1] = 0;
        sub_10003415C((uint64_t)v13, a1 + 176);
        sub_100475C60(*(_QWORD *)(v10 + 16));
        v11 = *(NSObject **)(v10 + 24);
        if (!v11)
          sub_1003224A4(v10);
        dispatch_set_finalizer_f(v11, (dispatch_function_t)sub_1003224A4);
        dispatch_set_context(*(dispatch_object_t *)(v10 + 24), (void *)v10);
        if (*(_BYTE *)(v10 + 32))
        {
          *(_BYTE *)(v10 + 32) = 0;
          dispatch_resume(*(dispatch_object_t *)(v10 + 24));
        }
        dispatch_source_cancel(*(dispatch_source_t *)(v10 + 24));
        sub_100034234((uint64_t)v13);
      }
    }
  }
  return sub_100034234((uint64_t)v14);
}

void sub_10032247C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003224A4(uint64_t a1)
{
  uint64_t v2;

  close(*(_DWORD *)(a1 + 4));
  *(_DWORD *)(a1 + 4) = -1;
  free(*(void **)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  free(*(void **)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100475CC8(v2);
    operator delete();
  }
  operator delete();
}

void sub_10032251C(uint64_t a1)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *(_QWORD *)(a1 + 80);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100322574;
  v2[3] = &unk_100917378;
  v2[4] = a1;
  sub_100041A34(v1, v2);
}

uint64_t sub_100322574(uint64_t a1)
{
  return sub_10032257C(*(_QWORD *)(a1 + 32));
}

uint64_t sub_10032257C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 88);
  while (1)
  {
    v2 = *(_QWORD *)(a1 + 152);
    if (v2 == a1 + 160)
      break;
    v3 = *(_QWORD *)(v2 + 32);
    sub_100034264((uint64_t)v5);
    sub_100322334(a1, v3);
    sub_100034188((uint64_t)v5);
  }
  return sub_100034234((uint64_t)v5);
}

void sub_1003225F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100322608(uint64_t a1, unint64_t a2, uint64_t a3, int a4, int a5)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  id v22;
  _QWORD v24[4];
  id v25;
  int v26;
  _QWORD v27[2];
  unint64_t v28;
  unint64_t *v29;

  v27[1] = 0;
  v28 = a2;
  v27[0] = 0;
  sub_10003415C((uint64_t)v27, a1 + 88);
  v12 = *(_QWORD **)(a1 + 160);
  v11 = (_QWORD *)(a1 + 160);
  v10 = v12;
  if (v12)
  {
    v13 = v11;
    do
    {
      v14 = v10[4];
      v15 = v14 >= a2;
      if (v14 >= a2)
        v16 = v10;
      else
        v16 = v10 + 1;
      if (v15)
        v13 = v10;
      v10 = (_QWORD *)*v16;
    }
    while (*v16);
    if (v13 != v11 && v13[4] <= a2)
    {
      v29 = &v28;
      v17 = sub_10002252C((uint64_t **)v11 - 1, &v28, (uint64_t)&unk_100740F58, (uint64_t **)&v29)[5];
      sub_100034264((uint64_t)v27);
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a3, a4));
      v19 = 4;
      if (!a5)
        v19 = 0;
      v20 = *(_DWORD *)(v17 + v19);
      v21 = *(_QWORD *)(v17 + 16);
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_100322780;
      v24[3] = &unk_1009173A0;
      v25 = v18;
      v26 = v20;
      v22 = v18;
      sub_100041A34(v21, v24);

    }
  }
  return sub_100034234((uint64_t)v27);
}

void sub_100322754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100322780(uint64_t a1)
{
  id v2;
  NSObject *v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "length");
  if (v2 != (id)write(*(_DWORD *)(a1 + 40), objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "bytes"), (size_t)objc_msgSend(*(id *)(a1 + 32), "length")))
  {
    v3 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E016C(v3);
  }
}

uint64_t sub_10032280C(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[2];
  unint64_t v22;
  unint64_t *v23;

  v21[1] = 0;
  v22 = a2;
  v21[0] = 0;
  sub_10003415C((uint64_t)v21, a1 + 88);
  v6 = *(_QWORD **)(a1 + 160);
  v5 = (_QWORD *)(a1 + 160);
  v4 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = v5;
  do
  {
    v8 = v4[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v9)
      v7 = v4;
    v4 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != v5 && v7[4] <= a2)
  {
    v23 = &v22;
    v20 = sub_10002252C((uint64_t **)v5 - 1, &v22, (uint64_t)&unk_100740F58, (uint64_t **)&v23)[5];
    sub_100034264((uint64_t)v21);
    if (*(_BYTE *)(v20 + 32))
    {
      *(_BYTE *)(v20 + 32) = 0;
      dispatch_resume(*(dispatch_object_t *)(v20 + 24));
    }
  }
  else
  {
LABEL_12:
    v11 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E00CC(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  return sub_100034234((uint64_t)v21);
}

void sub_1003228FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100322910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = sub_100069D20();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 176))(v10, a1, a2, a3, a4, a5);
}

uint64_t sub_10032296C(uint64_t a1)
{
  void *v2;
  NSArray *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;

  *(_QWORD *)a1 = off_100927060;
  *(_QWORD *)(a1 + 8) = off_100927420;
  *(_QWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = &off_1009276C8;
  sub_1003305FC(a1 + 72);
  *(_WORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 5;
  *(_BYTE *)(a1 + 100) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  *(_BYTE *)(a1 + 127) = 0;
  *(_BYTE *)(a1 + 218) = 0;
  *(_WORD *)(a1 + 220) = 0;
  *(_BYTE *)(a1 + 222) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 183) = 0;
  *(_QWORD *)(a1 + 190) = 0;
  *(_DWORD *)(a1 + 224) = 1;
  *(_BYTE *)(a1 + 228) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_WORD *)(a1 + 241) = 0;
  *(_DWORD *)(a1 + 237) = 0;
  *(_DWORD *)(a1 + 243) = 257;
  *(_BYTE *)(a1 + 247) = 1;
  *(_QWORD *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 257) = 1;
  *(_QWORD *)(a1 + 268) = &_mh_execute_header;
  *(_QWORD *)(a1 + 258) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 60000;
  sub_1000160D0(a1 + 296);
  *(_BYTE *)(a1 + 360) = 0;
  *(_WORD *)(a1 + 198) = 0;
  *(_BYTE *)(a1 + 204) = 0;
  *(_BYTE *)(a1 + 219) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 212) = 0;
  *(_WORD *)(a1 + 216) = 0;
  v2 = objc_autoreleasePoolPush();
  v3 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 1uLL, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = objc_alloc((Class)NSString);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectAtIndexedSubscript:", 0));
  v7 = objc_msgSend(v5, "initWithFormat:", CFSTR("%@/Logs/Bluetooth"), v6);
  v8 = (void *)qword_100991D88;
  qword_100991D88 = (uint64_t)v7;

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_100991D88, "stringByAppendingPathComponent:", CFSTR("PacketLogs")));
  v10 = objc_msgSend(v9, "copy");
  v11 = (void *)qword_100991D90;
  qword_100991D90 = (uint64_t)v10;

  objc_autoreleasePoolPop(v2);
  *(_QWORD *)(a1 + 24) = dispatch_queue_create("com.apple.MobileBluetooth.debugSettings", 0);
  return a1;
}

void sub_100322B4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100069BDC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100322B84(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_100927060;
  *(_QWORD *)(a1 + 8) = off_100927420;
  v2 = a1 + 8;
  notify_cancel(*(_DWORD *)(a1 + 20));
  notify_cancel(*(_DWORD *)(a1 + 16));
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100927598);
  sub_100069060((uint64_t)off_100977A50 + 64, v2);
  sub_100069BDC(a1 + 296);
  return a1;
}

void sub_100322C10(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100069BDC(v1 + 296);
  _Unwind_Resume(a1);
}

void sub_100322C28(uint64_t a1)
{
  sub_100322B84(a1);
  operator delete();
}

void sub_100322C4C(_BYTE *a1, BOOL *a2, BOOL *a3, unsigned __int8 *a4)
{
  BOOL v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  NSObject *v15;
  const char *v16;
  const char *v17;
  int v18;
  const char *v19;
  unsigned __int8 v20;
  void *__p[2];
  char v22;
  char v23;
  _BYTE buf[12];
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;

  v23 = 0;
  v8 = ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1) & 1) != 0 || a1[89] != 0;
  *a2 = v8;
  v9 = ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1) & 1) != 0 || a1[89] != 0;
  *a3 = v9;
  v10 = *(_DWORD *)(sub_1000438A4() + 712);
  v11 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 344))(v11))
    v12 = v10 == 0;
  else
    v12 = 1;
  if (!v12 && v10 == 9)
  {
    *a2 = 0;
    *a3 = 0;
  }
  sub_100091AE8(buf, "HCITraces");
  sub_100091AE8(__p, "StackDebugEnabled");
  (*(void (**)(_BYTE *, _BYTE *, void **, char *))(*(_QWORD *)a1 + 72))(a1, buf, __p, &v23);
  if (v22 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v27) < 0)
    operator delete(*(void **)buf);
  if (v23)
  {
    *a2 = 1;
    *a3 = 1;
  }
  if (!(*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1))
    goto LABEL_31;
  v20 = 0;
  sub_100091AE8(buf, "Stack");
  sub_100091AE8(__p, "HCILiteLogging");
  (*(void (**)(_BYTE *, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)a1 + 72))(a1, buf, __p, &v20);
  if (v22 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v27) < 0)
    operator delete(*(void **)buf);
  v13 = _os_feature_enabled_impl("BluetoothFeatures", "PacketlogLite");
  if ((v13 & ~(*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1)) != 1 || v23)
  {
    if (((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1) & v13) == 1)
    {
      v14 = v20;
      *a4 = v20;
      if (!v14)
        goto LABEL_32;
      goto LABEL_29;
    }
LABEL_31:
    *a4 = 0;
    goto LABEL_32;
  }
  *a4 = 1;
LABEL_29:
  if (!*a3)
    *a3 = 1;
LABEL_32:
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 24))(a1))
  {
    *a2 = 1;
    *a3 = 1;
  }
  sub_100091AE8(buf, "HCITraces");
  sub_100091AE8(__p, "HCILiveTraces");
  (*(void (**)(_BYTE *, _BYTE *, void **, BOOL *))(*(_QWORD *)a1 + 72))(a1, buf, __p, a2);
  if (v22 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v27) < 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "HCITraces");
  sub_100091AE8(__p, "HCIFileTraces");
  (*(void (**)(_BYTE *, _BYTE *, void **, BOOL *))(*(_QWORD *)a1 + 72))(a1, buf, __p, a3);
  if (v22 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v27) < 0)
    operator delete(*(void **)buf);
  v15 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v16 = "enabled";
    if (*a2)
      v17 = "enabled";
    else
      v17 = "disabled";
    v18 = *a4;
    if (*a3)
      v19 = "enabled";
    else
      v19 = "disabled";
    *(_DWORD *)buf = 136446722;
    if (!v18)
      v16 = "disabled";
    *(_QWORD *)&buf[4] = v17;
    v25 = 2082;
    v26 = v19;
    v27 = 2082;
    v28 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "liveTracing:%{public}s fileTracing:%{public}s hciLiteLogging:%{public}s", buf, 0x20u);
  }
}

void sub_100323028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_10032307C(char a1)
{
  _QWORD block[4];
  char v2;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10032C374;
  block[3] = &unk_100927558;
  v2 = a1;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

uint64_t sub_1003230D4(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1003230E4(uint64_t a1)
{
  uint64_t (***v1)(_QWORD);
  NSObject *v2;
  uint8_t v4[16];

  v1 = *(uint64_t (****)(_QWORD))(a1 + 32);
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Root prefs changed", v4, 2u);
  }
  return (**v1)(v1);
}

void sub_100323164(_BYTE *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string::size_type v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  void *v25;
  void *v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  std::string *v30;
  __int128 v31;
  void **v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  void **v38;
  std::string::size_type v39;
  void *v40;
  id v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  void **v46;
  std::string::size_type v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  std::string *v52;
  uint64_t v53;
  std::string *v54;
  __int128 v55;
  void **v56;
  std::string::size_type v57;
  char v58;
  std::string v59;
  std::string v60;
  void *__p[2];
  int64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  std::string v69;

  a1[88] = 1;
  memset(&v69, 0, sizeof(v69));
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v2 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v2 + 24))(v2, &v66))
  {
    v29 = HIBYTE(v68);
    if (v68 < 0)
      v29 = v67;
    if (v29)
    {
      std::operator+<char>(&v60, "Product: ", &v66);
      v30 = std::string::append(&v60, "\n");
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v62 = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      if (v62 >= 0)
        v32 = __p;
      else
        v32 = (void **)__p[0];
      if (v62 >= 0)
        v33 = HIBYTE(v62);
      else
        v33 = (std::string::size_type)__p[1];
      std::string::append(&v69, (const std::string::value_type *)v32, v33);
      if (SHIBYTE(v62) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
    }
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(gCBDaemonServer, "stackController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "controllerInfo"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firmwareVersion"));
  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(gCBDaemonServer, "stackController"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "controllerInfo"));
    v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "firmwareVersion")));
    sub_100091AE8(&v59, (char *)objc_msgSend(v8, "UTF8String"));
    v9 = std::string::insert(&v59, 0, "Firmware Version: ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v60, "\n");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v62 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (v62 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if (v62 >= 0)
      v14 = HIBYTE(v62);
    else
      v14 = (std::string::size_type)__p[1];
    std::string::append(&v69, (const std::string::value_type *)v13, v14);
    if (SHIBYTE(v62) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);

  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "chipsetID"));

  if (v15)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(gCBDaemonServer, "stackController"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "controllerInfo"));
    v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "chipsetID")));
    sub_100091AE8(&v59, (char *)objc_msgSend(v18, "UTF8String"));
    v19 = std::string::insert(&v59, 0, "Chipset: ");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v60, "\n");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v62 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (v62 >= 0)
      v23 = __p;
    else
      v23 = (void **)__p[0];
    if (v62 >= 0)
      v24 = HIBYTE(v62);
    else
      v24 = (std::string::size_type)__p[1];
    std::string::append(&v69, (const std::string::value_type *)v23, v24);
    if (SHIBYTE(v62) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);

  }
  if (objc_msgSend(v4, "hciTransportType"))
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(gCBDaemonServer, "stackController"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "controllerInfo"));
    v27 = objc_msgSend(v26, "hciTransportType");
    if (v27 > 4)
      v28 = "?";
    else
      v28 = off_100927618[v27];
    sub_100091AE8(&v59, v28);
    v34 = std::string::insert(&v59, 0, "Transport: ");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    v36 = std::string::append(&v60, "\n");
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v62 = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    if (v62 >= 0)
      v38 = __p;
    else
      v38 = (void **)__p[0];
    if (v62 >= 0)
      v39 = HIBYTE(v62);
    else
      v39 = (std::string::size_type)__p[1];
    std::string::append(&v69, (const std::string::value_type *)v38, v39);
    if (SHIBYTE(v62) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);

  }
  v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firmwareName"));

  if (v40)
  {
    v41 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "firmwareName")));
    sub_100091AE8(&v59, (char *)objc_msgSend(v41, "UTF8String"));
    v42 = std::string::insert(&v59, 0, "Firmware Filename: ");
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    v44 = std::string::append(&v60, "\n");
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v62 = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    if (v62 >= 0)
      v46 = __p;
    else
      v46 = (void **)__p[0];
    if (v62 >= 0)
      v47 = HIBYTE(v62);
    else
      v47 = (std::string::size_type)__p[1];
    std::string::append(&v69, (const std::string::value_type *)v46, v47);
    if (SHIBYTE(v62) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);

  }
  v48 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v48 + 32))(v48, &v63, 1))
  {
    v53 = HIBYTE(v65);
    if (v65 < 0)
      v53 = v64;
    if (v53)
    {
      std::operator+<char>(&v60, "Software: ", &v63);
      v54 = std::string::append(&v60, "\n");
      v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v62 = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      if (v62 >= 0)
        v56 = __p;
      else
        v56 = (void **)__p[0];
      if (v62 >= 0)
        v57 = HIBYTE(v62);
      else
        v57 = (std::string::size_type)__p[1];
      std::string::append(&v69, (const std::string::value_type *)v56, v57);
      if (SHIBYTE(v62) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
    }
  }
  v59.__r_.__value_.__s.__data_[0] = 0;
  sub_100091AE8(__p, "Stack");
  sub_100091AE8(&v60, "HCILiteLogging");
  (*(void (**)(_BYTE *, void **, std::string *, std::string *))(*(_QWORD *)a1 + 72))(a1, __p, &v60, &v59);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62) < 0)
    operator delete(__p[0]);
  v49 = _os_feature_enabled_impl("BluetoothFeatures", "PacketlogLite");
  if (((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1) | v49 ^ 1) != 1
    || ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1) & v49) == 1
    && v59.__r_.__value_.__s.__data_[0])
  {
    std::string::append(&v69, "HCILite Logging Mode\n");
  }
  v58 = 0;
  v50 = sub_100027F68();
  sub_100091AE8(__p, "LE");
  sub_100091AE8(&v60, "EnableXPCLog");
  v51 = (*(uint64_t (**)(uint64_t, void **, std::string *, char *))(*(_QWORD *)v50 + 72))(v50, __p, &v60, &v58);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v62) & 0x80000000) == 0)
  {
    if (!v51)
      goto LABEL_88;
    goto LABEL_87;
  }
  operator delete(__p[0]);
  if (v51)
LABEL_87:
    a1[236] = 1;
LABEL_88:
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = &v69;
  else
    v52 = (std::string *)v69.__r_.__value_.__r.__words[0];
  sub_10011C804((const char *)v52);
  sub_10032EBA4((void (***)(_QWORD, _QWORD, const UInt8 *, _QWORD))a1 + 8);
  sub_100330600((uint64_t)(a1 + 72));
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 488))(a1, 1);
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1))
    sub_100323B80((uint64_t)a1);
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 520))(a1);
  (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 824))(a1);

  if (SHIBYTE(v65) < 0)
    operator delete(v63);
  if (SHIBYTE(v68) < 0)
    operator delete(v66);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
}

void sub_10032394C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  void **v41;
  uint64_t v42;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);

  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  if (*(char *)(v42 - 65) < 0)
    operator delete(*v41);
  _Unwind_Resume(a1);
}

void sub_100323B80(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  const char *v19;
  _BYTE *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  void *v27[2];
  char v28;
  std::string v29;
  std::string __p;
  std::string v31;
  std::string buf;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;

  v2 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2))
    return;
  memset(&v31, 0, sizeof(v31));
  *(_DWORD *)(a1 + 96) = 5;
  sub_100091AE8(&buf, "Diversity");
  sub_100091AE8(&__p, "DiversityMode");
  *(_BYTE *)(a1 + 93) = (*(uint64_t (**)(uint64_t, std::string *, std::string *, std::string *))(*(_QWORD *)a1 + 56))(a1, &buf, &__p, &v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a1 + 93))
  {
    if (!std::string::compare(&v31, "AUTO"))
    {
      *(_DWORD *)(a1 + 96) = 5;
      v3 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v4 = "Diversity mode override: Auto";
    }
    else if (!std::string::compare(&v31, "AUTO_NO_COEX"))
    {
      *(_DWORD *)(a1 + 96) = 4;
      v3 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v4 = "Diversity mode override: Auto with no cellular coex support";
    }
    else if (!std::string::compare(&v31, "DISABLED"))
    {
      *(_DWORD *)(a1 + 96) = 3;
      v3 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v4 = "Diversity mode override: Disabled";
    }
    else if (!std::string::compare(&v31, "FORCE_ANT0"))
    {
      *(_DWORD *)(a1 + 96) = 0;
      v3 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v4 = "Diversity mode override: Force Antenna 0";
    }
    else if (!std::string::compare(&v31, "FORCE_ANT1"))
    {
      *(_DWORD *)(a1 + 96) = 1;
      v3 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v4 = "Diversity mode override: Force Antenna 1";
    }
    else if (!std::string::compare(&v31, "MRC_BF"))
    {
      *(_DWORD *)(a1 + 96) = 6;
      v3 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v4 = "Diversity/beamforming mode override: MRC diversity with tx beamforming";
    }
    else if (!std::string::compare(&v31, "HYBRID_BF"))
    {
      *(_DWORD *)(a1 + 96) = 7;
      v3 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v4 = "Diversity/beamforming mode override: Hybrid diversity with tx beamforming";
    }
    else if (!std::string::compare(&v31, "MRC_DISABLE_BF"))
    {
      *(_DWORD *)(a1 + 96) = 8;
      v3 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v4 = "Diversity/beamforming mode override: MRC diversity without tx beamforming";
    }
    else
    {
      *(_BYTE *)(a1 + 93) = 0;
      v3 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v4 = "Warning: Diversity mode override: Invalid.  Using default diversity mode.";
    }
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v4, (uint8_t *)&buf, 2u);
  }
LABEL_34:
  memset(&__p, 0, sizeof(__p));
  *(_DWORD *)(a1 + 104) = 0;
  sub_100091AE8(&buf, "Diversity");
  sub_100091AE8(&v29, "DiversityLogMode");
  *(_BYTE *)(a1 + 100) = (*(uint64_t (**)(uint64_t, std::string *, std::string *, std::string *))(*(_QWORD *)a1 + 56))(a1, &buf, &v29, &__p);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a1 + 100))
  {
    if (!std::string::compare(&__p, "LOG_DENIALS"))
    {
      *(_DWORD *)(a1 + 104) = 3;
      v5 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_52;
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v6 = "Diversity log mode override: Log Denials";
      goto LABEL_51;
    }
    if (!std::string::compare(&__p, "LOG_CHANNELS"))
    {
      *(_DWORD *)(a1 + 104) = 4;
      v5 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_52;
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v6 = "Diversity log mode override: Log Channels";
      goto LABEL_51;
    }
    if (!std::string::compare(&__p, "DISABLED"))
    {
      *(_DWORD *)(a1 + 104) = 0;
      v5 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_52;
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v6 = "Diversity log mode override: Log Disabled";
      goto LABEL_51;
    }
    if (std::string::compare(&__p, "LOG_DENIALS_3ANT"))
    {
      *(_BYTE *)(a1 + 100) = 0;
      v5 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_52;
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v6 = "Warning: Diversity log mode override: Invalid.  Override disabled.";
LABEL_51:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&buf, 2u);
      goto LABEL_52;
    }
    *(_DWORD *)(a1 + 104) = 5;
  }
LABEL_52:
  v7 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 144))(v7))
    goto LABEL_69;
  memset(&buf, 0, sizeof(buf));
  *(_DWORD *)(a1 + 224) = 1;
  sub_100091AE8(&v29, "Diversity");
  sub_100091AE8(v27, "DiversityAntennaConfig");
  *(_BYTE *)(a1 + 222) = (*(uint64_t (**)(uint64_t, std::string *, void **, std::string *))(*(_QWORD *)a1 + 56))(a1, &v29, v27, &buf);
  if (v28 < 0)
    operator delete(v27[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a1 + 222))
  {
    if (!std::string::compare(&buf, "DIVERSITY_ANT1"))
    {
      *(_DWORD *)(a1 + 224) = 1;
      v8 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_67;
      LOWORD(v29.__r_.__value_.__l.__data_) = 0;
      v9 = "Diversity antenna configuration override: Diversity Antenna 1";
    }
    else if (!std::string::compare(&buf, "DIVERSITY_ANT2"))
    {
      *(_DWORD *)(a1 + 224) = 2;
      v8 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_67;
      LOWORD(v29.__r_.__value_.__l.__data_) = 0;
      v9 = "Diversity antenna configuration override: Diversity Antenna 2";
    }
    else
    {
      *(_BYTE *)(a1 + 222) = 0;
      v8 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_67;
      LOWORD(v29.__r_.__value_.__l.__data_) = 0;
      v9 = "Warning: Diversity antenna configuration override: Invalid.  Using default diversity antenna.";
    }
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v29, 2u);
  }
LABEL_67:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_69:
  v10 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 152))(v10))
  {
    memset(&buf, 0, sizeof(buf));
    v26 = 0;
    sub_100091AE8(&v29, "Diversity");
    sub_100091AE8(v27, "Diversity2GThresholOverride");
    *(_BYTE *)(a1 + 172) = (*(uint64_t (**)(uint64_t, std::string *, void **, std::string *))(*(_QWORD *)a1 + 56))(a1, &v29, v27, &buf);
    if (v28 < 0)
      operator delete(v27[0]);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 172))
    {
      sub_100091AE8(&v29, "Diversity");
      sub_100091AE8(v27, "Diversity2GRSSIThreshold");
      v11 = (*(uint64_t (**)(uint64_t, std::string *, void **, int *))(*(_QWORD *)a1 + 88))(a1, &v29, v27, &v26);
      if (v28 < 0)
        operator delete(v27[0]);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (v11)
        *(_BYTE *)(a1 + 173) = v26;
    }
    sub_100091AE8(&v29, "Diversity");
    sub_100091AE8(v27, "Diversity5GThresholdOverride");
    *(_BYTE *)(a1 + 174) = (*(uint64_t (**)(uint64_t, std::string *, void **, std::string *))(*(_QWORD *)a1 + 56))(a1, &v29, v27, &buf);
    if (v28 < 0)
      operator delete(v27[0]);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(a1 + 174))
    {
      sub_100091AE8(&v29, "Diversity");
      sub_100091AE8(v27, "Diversity5GRSSIThreshold");
      v12 = (*(uint64_t (**)(uint64_t, std::string *, void **, int *))(*(_QWORD *)a1 + 88))(a1, &v29, v27, &v26);
      if (v28 < 0)
        operator delete(v27[0]);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (v12)
        *(_BYTE *)(a1 + 175) = v26;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  v13 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 160))(v13))
  {
    memset(&buf, 0, sizeof(buf));
    *(_DWORD *)(a1 + 232) = 0;
    sub_100091AE8(&v29, "Diversity");
    sub_100091AE8(v27, "BeamformingLogMode");
    *(_BYTE *)(a1 + 228) = (*(uint64_t (**)(uint64_t, std::string *, void **, std::string *))(*(_QWORD *)a1 + 56))(a1, &v29, v27, &buf);
    if (v28 < 0)
      operator delete(v27[0]);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (!*(_BYTE *)(a1 + 228))
      goto LABEL_109;
    if (!std::string::compare(&buf, "BF_MRC_LOG_ENABLED"))
    {
      *(_DWORD *)(a1 + 232) = 1;
      v14 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_109;
      LOWORD(v29.__r_.__value_.__l.__data_) = 0;
      v15 = "Beamforming log mode override: Log enabled";
    }
    else if (!std::string::compare(&buf, "BF_MRC_LOG_DISABLED"))
    {
      *(_DWORD *)(a1 + 232) = 0;
      v14 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_109;
      LOWORD(v29.__r_.__value_.__l.__data_) = 0;
      v15 = "Beamforming log mode override: Log disabled";
    }
    else
    {
      *(_BYTE *)(a1 + 228) = 0;
      v14 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_109;
      LOWORD(v29.__r_.__value_.__l.__data_) = 0;
      v15 = "Warning: Beamforming log mode override: Invalid. VSE Logging disabled.";
    }
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v29, 2u);
LABEL_109:
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  *(_BYTE *)(a1 + 108) = 0;
  sub_100091AE8(&buf, "Diversity");
  sub_100091AE8(&v29, "DiversityPeripheralOverride");
  (*(void (**)(uint64_t, std::string *, std::string *, uint64_t))(*(_QWORD *)a1 + 72))(a1, &buf, &v29, a1 + 108);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a1 + 108))
  {
    v16 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Diversity peripheral override: Enabled.  Diversity can now be enabled when role is peripheral.", (uint8_t *)&buf, 2u);
    }
  }
  *(_BYTE *)(a1 + 109) = 0;
  sub_100091AE8(&buf, "Diversity");
  sub_100091AE8(&v29, "DiversityCoexLogEnabled");
  (*(void (**)(uint64_t, std::string *, std::string *, uint64_t))(*(_QWORD *)a1 + 72))(a1, &buf, &v29, a1 + 109);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a1 + 109))
  {
    v17 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Diversity coex log: Enabled", (uint8_t *)&buf, 2u);
    }
  }
  memset(&v29, 0, sizeof(v29));
  *(_DWORD *)(a1 + 112) = 3;
  sub_100091AE8(&buf, "Diversity");
  sub_100091AE8(v27, "DiversityCoexCellOverride");
  *(_BYTE *)(a1 + 110) = (*(uint64_t (**)(uint64_t, std::string *, void **, std::string *))(*(_QWORD *)a1 + 56))(a1, &buf, v27, &v29);
  if (v28 < 0)
    operator delete(v27[0]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a1 + 110))
  {
    if (!std::string::compare(&v29, "CELL_OFF"))
    {
      *(_DWORD *)(a1 + 112) = 0;
      v18 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        v19 = "Diversity coex cell override: Cell off";
        goto LABEL_145;
      }
    }
    else if (!std::string::compare(&v29, "CELL_ON_ANT_0"))
    {
      *(_DWORD *)(a1 + 112) = 1;
      v18 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        v19 = "Diversity coex cell override: Cell on antenna 0";
        goto LABEL_145;
      }
    }
    else if (!std::string::compare(&v29, "CELL_ON_ANT_1"))
    {
      *(_DWORD *)(a1 + 112) = 2;
      v18 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        v19 = "Diversity coex cell override: Cell on antenna 1";
        goto LABEL_145;
      }
    }
    else if (!std::string::compare(&v29, "DISABLED"))
    {
      *(_DWORD *)(a1 + 112) = 3;
      v18 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        v19 = "Diversity coex cell override: Disabled";
        goto LABEL_145;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 110) = 0;
      v18 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        v19 = "Warning: Diversity coex cell override: Invalid.  Override disabled.";
LABEL_145:
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&buf, 2u);
      }
    }
  }
  sub_10032D5A8(a1, "DiversityCoexAFHMapOverride", (_BYTE *)(a1 + 116), a1 + 117, (uint64_t)"AFH map");
  sub_10032D5A8(a1, "DiversityCoexHAAMapC0B0Override", (_BYTE *)(a1 + 128), a1 + 129, (uint64_t)"HAA map C0B0");
  sub_10032D5A8(a1, "DiversityCoexHAAMapC0B1Override", (_BYTE *)(a1 + 139), a1 + 140, (uint64_t)"HAA map C0B1");
  v20 = (_BYTE *)(a1 + 150);
  sub_10032D5A8(a1, "DiversityCoexHAAMapC1B0Override", (_BYTE *)(a1 + 150), a1 + 151, (uint64_t)"HAA map C1B0");
  sub_10032D5A8(a1, "DiversityCoexHAAMapC1B1Override", (_BYTE *)(a1 + 161), a1 + 162, (uint64_t)"HAA map C1B1");
  v21 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v21 + 936))(v21, *(unsigned __int8 *)(a1 + 109), *(unsigned int *)(a1 + 112), *(unsigned __int8 *)(a1 + 116), a1 + 117)&& os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006E021C();
  }
  if (*(_BYTE *)(a1 + 128))
  {
    if (*(_BYTE *)(a1 + 139) && *v20)
    {
      v22 = *(unsigned __int8 *)(a1 + 161);
      *(_BYTE *)(a1 + 127) = v22;
      if (v22)
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 2) = *(_QWORD *)(a1 + 129);
        WORD1(buf.__r_.__value_.__r.__words[1]) = *(_WORD *)(a1 + 137);
        WORD2(buf.__r_.__value_.__r.__words[1]) = 256;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = *(_QWORD *)(a1 + 140);
        HIWORD(buf.__r_.__value_.__r.__words[2]) = *(_WORD *)(a1 + 148);
        v33 = 512;
        v34 = *(_QWORD *)(a1 + 151);
        v35 = *(_WORD *)(a1 + 159);
        v36 = 768;
        v23 = *(_QWORD *)(a1 + 162);
        v38 = *(_WORD *)(a1 + 170);
        v37 = v23;
        v24 = sub_1000438A4();
        if ((*(unsigned int (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v24 + 928))(v24, 4, &buf)
          && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        {
          sub_1006E01F0();
        }
        goto LABEL_162;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 127) = 0;
    }
LABEL_160:
    v25 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Warning: Diversity coex HAA maps ignored: all 4 HAA maps must be set", (uint8_t *)&buf, 2u);
    }
    goto LABEL_162;
  }
  *(_BYTE *)(a1 + 127) = 0;
  if (*(_BYTE *)(a1 + 139) || *v20 || *(_BYTE *)(a1 + 161))
    goto LABEL_160;
LABEL_162:
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_100324BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(exception_object);
}

void sub_100324D00(uint64_t a1)
{
  sub_100323164((_BYTE *)(a1 - 8));
}

uint64_t sub_100324D08(uint64_t result)
{
  *(_BYTE *)(result + 88) = 0;
  return result;
}

uint64_t sub_100324D10(uint64_t result)
{
  *(_BYTE *)(result + 80) = 0;
  return result;
}

uint64_t sub_100324D18(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 360);
}

void sub_100324D20(uint64_t a1)
{
  const void *v2;
  const void *v3;
  _BOOL4 v4;
  NSObject *v5;
  int v6;
  const void *v7;
  __int16 v8;
  const __CFString *v9;
  __int16 v10;
  _BOOL4 v11;

  v2 = (const void *)MGCopyAnswer(CFSTR("ReleaseType"), 0);
  v3 = v2;
  if (v2)
    v4 = CFEqual(v2, CFSTR("Vendor")) != 0;
  else
    v4 = 0;
  *(_BYTE *)(a1 + 360) = v4;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 138412802;
    v7 = v3;
    v8 = 2112;
    v9 = CFSTR("Vendor");
    v10 = 1024;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "check Vendor build %@ %@ %d", (uint8_t *)&v6, 0x1Cu);
  }
  if (v3)
    CFRelease(v3);
}

BOOL sub_100324E30()
{
  return MGCopyAnswer(CFSTR("ReleaseType"), 0) != 0;
}

uint64_t sub_100324E58(NSObject **a1)
{
  unsigned __int8 *v2;
  NSObject *v3;
  int v4;
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  char v9;
  char v10;
  _BOOL4 v11;
  NSObject *v12;
  const char *v13;
  const char *v14;
  NSObject *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _QWORD block[5];
  char v20;
  void *__p[2];
  char v22;
  _BYTE buf[14];
  const char *v24;
  char v25;

  *((_BYTE *)a1 + 248) = 0;
  v2 = (unsigned __int8 *)(a1 + 31);
  sub_100091AE8(buf, "ExposureNotification");
  sub_100091AE8(__p, "insecureDatabasePath");
  ((void (*)(NSObject **, _BYTE *, void **, unsigned __int8 *))(*a1)[9].isa)(a1, buf, __p, v2);
  if (v22 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
    operator delete(*(void **)buf);
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v4 = *v2;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "fInsecureDatabasePath is %d", buf, 8u);
  }
  *((_BYTE *)a1 + 252) = 0;
  sub_100091AE8(buf, "ExposureNotification");
  sub_100091AE8(__p, "RequireEntitlementAndProfileOnInternalForLogging");
  ((void (*)(NSObject **, _BYTE *, void **, _BYTE *))(*a1)[9].isa)(a1, buf, __p, (_BYTE *)a1 + 252);
  if (v22 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
    operator delete(*(void **)buf);
  v5 = ((uint64_t (*)(NSObject **))(*a1)[26].isa)(a1);
  *((_BYTE *)a1 + 249) = v5;
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *((unsigned __int8 *)a1 + 252);
    v8 = *v2;
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v5;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v7;
    LOWORD(v24) = 1024;
    *(_DWORD *)((char *)&v24 + 2) = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "loading fENAppHasLoggingEntitlement:%d fRequireENLoggingProfileOnInternal:%d fInsecureDatabasePath:%d", buf, 0x14u);
  }
  *((_BYTE *)a1 + 89) = CFPrefs_GetInt64(CFSTR("com.apple.bluetooth"), CFSTR("APLogCloudCollectionEnabled"), 0) != 0;
  v20 = 0;
  sub_100091AE8(buf, "HCI");
  sub_100091AE8(__p, "lmpRouting");
  ((void (*)(NSObject **, _BYTE *, void **, char *))(*a1)[9].isa)(a1, buf, __p, &v20);
  if (v22 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
    operator delete(*(void **)buf);
  v9 = ((uint64_t (*)(NSObject **))(*a1)[1].isa)(a1);
  if (v20)
    v10 = 1;
  else
    v10 = v9;
  v11 = (v10 & 1) != 0 || *((_BYTE *)a1 + 89) != 0;
  *((_BYTE *)a1 + 237) = v11;
  v12 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v13 = "disabled";
    if (v11)
      v13 = "enabled";
    v14 = " [cloud]";
    if (!*((_BYTE *)a1 + 89))
      v14 = "";
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2080;
    v24 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "LMP logging is %s%s", buf, 0x16u);
  }
  v15 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003252A4;
  block[3] = &unk_100917378;
  block[4] = a1;
  dispatch_async(v15, block);
  result = ((uint64_t (*)(NSObject **, _QWORD))(*a1)[61].isa)(a1, 0);
  if (*((_BYTE *)a1 + 88))
  {
    sub_10032EBA4((void (***)(_QWORD, _QWORD, const UInt8 *, _QWORD))a1 + 8);
    sub_100330600((uint64_t)(a1 + 9));
    if (((unsigned int (*)(NSObject **))(*a1)[1].isa)(a1))
      sub_100323B80((uint64_t)a1);
    ((void (*)(NSObject **))(*a1)[65].isa)(a1);
    ((void (*)(NSObject **))(*a1)[103].isa)(a1);
    v17 = sub_100038E50();
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
    v18 = sub_100016B48();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 144))(v18);
  }
  return result;
}

void sub_100325258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void sub_1003252A4(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *p_p;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned __int8 v14;
  void *v15;
  unsigned __int8 v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  const char *v24;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  const char *v28;
  NSObject *v29;
  const char *v30;
  NSObject *v31;
  const char *v32;
  _BYTE *v33;
  NSObject *v34;
  const char *v35;
  _BYTE *v36;
  NSObject *v37;
  const char *v38;
  NSObject *v39;
  char v40;
  _BYTE *v41;
  _BYTE *v42;
  char v43;
  _BYTE *v44;
  _QWORD *v45;
  void *v46;
  float v47;
  uint64_t v48;
  double v49;
  int v50;
  int v51;
  _DWORD *v52;
  void *v53;
  float v54;
  NSObject *v55;
  _DWORD *v56;
  NSObject *v57;
  const char *v58;
  NSObject *v59;
  const char *v60;
  NSObject *v61;
  const char *v62;
  int *v63;
  _BYTE *v64;
  NSObject *v65;
  const char *v66;
  const char *v67;
  int v68;
  const char *v69;
  NSObject *v70;
  const char *v71;
  const char *v72;
  int v73;
  const char *v74;
  int v75;
  const char *v76;
  int v77;
  const char *v78;
  const char *v79;
  const char *v80;
  int v81;
  NSObject *v82;
  NSObject *v83;
  const char *v84;
  NSObject *v85;
  const char *v86;
  NSObject *v87;
  NSObject *v88;
  NSObject *v89;
  NSObject *v90;
  NSObject *v91;
  NSObject *v92;
  NSObject *v93;
  NSObject *v94;
  NSObject *v95;
  NSObject *v96;
  NSObject *v97;
  NSObject *v98;
  int *v99;
  int v100;
  NSObject *v101;
  int *v102;
  int v103;
  NSObject *v104;
  int v105;
  int v106;
  unsigned __int8 v107;
  void *v108[2];
  char v109;
  void *v110[2];
  char v111;
  __int16 v112;
  __int16 v113;
  __int16 v114;
  __int16 v115;
  __int16 v116;
  int v117;
  int v118;
  int v119;
  __int16 v120;
  int v121;
  int v122;
  int v123;
  int v124;
  unint64_t v125[2];
  void *__p;
  uint64_t v127;
  uint64_t v128;
  _BYTE buf[14];
  const char *v130;
  _BYTE v131[10];
  __int16 v132;
  const char *v133;
  __int16 v134;
  const char *v135;
  __int16 v136;
  const char *v137;
  __int16 v138;
  const char *v139;

  v1 = *(_BYTE **)(a1 + 32);
  v1[250] = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 240))(v1);
  v1[251] = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 248))(v1);
  (*(void (**)(_BYTE *))(*(_QWORD *)v1 + 256))(v1);
  sub_100328884((uint64_t)v1);
  sub_100091AE8(buf, "ControllerStatistics");
  sub_100091AE8(&__p, "ControllerStatisticsEnabled");
  (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, &__p, v1 + 197);
  if (SHIBYTE(v128) < 0)
    operator delete(__p);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  memset(v125, 0, 14);
  v123 = 8;
  v124 = 1023;
  v121 = 0;
  v122 = 100000;
  v120 = 0;
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(&__p, "TimeStampPeriodically");
  (*(void (**)(_BYTE *, _BYTE *, void **, unint64_t *))(*(_QWORD *)v1 + 72))(v1, buf, &__p, v125);
  if (SHIBYTE(v128) < 0)
    operator delete(__p);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(&__p, "DisableDiagnosticsPeriodically");
  (*(void (**)(_BYTE *, _BYTE *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, &__p, (char *)v125 + 1);
  if (SHIBYTE(v128) < 0)
    operator delete(__p);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(&__p, "CrashLoggingDisabled");
  (*(void (**)(_BYTE *, _BYTE *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, &__p, (char *)v125 + 2);
  if (SHIBYTE(v128) < 0)
    operator delete(__p);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(&__p, "AccessoryW1LogModule");
  (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(_QWORD *)v1 + 88))(v1, buf, &__p, &v124);
  if (SHIBYTE(v128) < 0)
    operator delete(__p);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(&__p, "AccessoryW1LogLevel");
  (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(_QWORD *)v1 + 88))(v1, buf, &__p, &v123);
  if (SHIBYTE(v128) < 0)
    operator delete(__p);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(&__p, "AccessoryLogPrintInterval");
  (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(_QWORD *)v1 + 88))(v1, buf, &__p, &v122);
  if (SHIBYTE(v128) < 0)
    operator delete(__p);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(&__p, "AccessoryLogPowerLoggingInterval");
  (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(_QWORD *)v1 + 88))(v1, buf, &__p, &v121);
  if (SHIBYTE(v128) < 0)
    operator delete(__p);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(&__p, "TriggerAccessoryW1AWD");
  (*(void (**)(_BYTE *, _BYTE *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, &__p, (char *)&v120 + 1);
  if (SHIBYTE(v128) < 0)
    operator delete(__p);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(&__p, "DumpAccessoryW1TraceLog");
  (*(void (**)(_BYTE *, _BYTE *, void **, __int16 *))(*(_QWORD *)v1 + 72))(v1, buf, &__p, &v120);
  if (SHIBYTE(v128) < 0)
    operator delete(__p);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  *(_WORD *)((char *)v125 + 3) = v124;
  BYTE5(v125[0]) = v123;
  *(_DWORD *)((char *)v125 + 6) = v122;
  *(_DWORD *)((char *)&v125[1] + 2) = v121;
  if (qword_100978180 != -1)
    dispatch_once(&qword_100978180, &stru_1009275B8);
  sub_1003C2150(qword_100978178, v125[0], LODWORD(v125[1]) | ((unint64_t)WORD2(v125[1]) << 32));
  v118 = 0;
  v119 = 255;
  v117 = 2;
  v123 = 2;
  v124 = 255;
  v116 = 0;
  v115 = 0;
  v114 = 0;
  v113 = 0;
  v112 = 0;
  __p = 0;
  v127 = 0;
  v128 = 0;
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(v110, "AccessoryLogDevice");
  (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(_QWORD *)v1 + 88))(v1, buf, v110, &v119);
  if (v111 < 0)
    operator delete(v110[0]);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(v110, "AccessoryLog2Module");
  (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(_QWORD *)v1 + 88))(v1, buf, v110, &v124);
  if (v111 < 0)
    operator delete(v110[0]);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(v110, "AccessoryLogSubModule");
  (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(_QWORD *)v1 + 88))(v1, buf, v110, &v118);
  if (v111 < 0)
    operator delete(v110[0]);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(v110, "AccessoryLogType");
  (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(_QWORD *)v1 + 88))(v1, buf, v110, &v117);
  if (v111 < 0)
    operator delete(v110[0]);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(v110, "AccessoryLog2Level");
  (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(_QWORD *)v1 + 88))(v1, buf, v110, &v123);
  if (v111 < 0)
    operator delete(v110[0]);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(v110, "AccessoryLogStart");
  (*(void (**)(_BYTE *, _BYTE *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, v110, (char *)&v116 + 1);
  if (v111 < 0)
    operator delete(v110[0]);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(v110, "AccessoryLogStop");
  (*(void (**)(_BYTE *, _BYTE *, void **, __int16 *))(*(_QWORD *)v1 + 72))(v1, buf, v110, &v116);
  if (v111 < 0)
    operator delete(v110[0]);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(v110, "AccessoryLogConfigSet");
  (*(void (**)(_BYTE *, _BYTE *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, v110, (char *)&v115 + 1);
  if (v111 < 0)
    operator delete(v110[0]);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(v110, "AccessoryLogConfigGet");
  (*(void (**)(_BYTE *, _BYTE *, void **, __int16 *))(*(_QWORD *)v1 + 72))(v1, buf, v110, &v115);
  if (v111 < 0)
    operator delete(v110[0]);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(v110, "AccessoryLogDump");
  (*(void (**)(_BYTE *, _BYTE *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, v110, (char *)&v114 + 1);
  if (v111 < 0)
    operator delete(v110[0]);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(v110, "AccessoryLogDismiss");
  (*(void (**)(_BYTE *, _BYTE *, void **, __int16 *))(*(_QWORD *)v1 + 72))(v1, buf, v110, &v114);
  if (v111 < 0)
    operator delete(v110[0]);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(v110, "AccessoryVSCCaptureTraceHistory");
  (*(void (**)(_BYTE *, _BYTE *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, v110, (char *)&v113 + 1);
  if (v111 < 0)
    operator delete(v110[0]);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(v110, "AccessoryCoredumpEnable");
  (*(void (**)(_BYTE *, _BYTE *, void **, __int16 *))(*(_QWORD *)v1 + 72))(v1, buf, v110, &v113);
  if (v111 < 0)
    operator delete(v110[0]);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(v110, "AccessoryCoredumpAACP");
  (*(void (**)(_BYTE *, _BYTE *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, v110, (char *)&v112 + 1);
  if (v111 < 0)
    operator delete(v110[0]);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(v110, "AccessoryCoredumpDisable");
  (*(void (**)(_BYTE *, _BYTE *, void **, __int16 *))(*(_QWORD *)v1 + 72))(v1, buf, v110, &v112);
  if (v111 < 0)
    operator delete(v110[0]);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(v110, "AccessoryLogCommand");
  (*(void (**)(_BYTE *, _BYTE *, void **, void **))(*(_QWORD *)v1 + 56))(v1, buf, v110, &__p);
  if (v111 < 0)
    operator delete(v110[0]);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v2 = v119;
  v3 = v124;
  v5 = v117;
  v4 = v118;
  v6 = v123;
  if (qword_100978180 != -1)
    dispatch_once(&qword_100978180, &stru_1009275B8);
  sub_1003C2270(qword_100978178, (v5 << 24) | (unint64_t)(v6 << 32) | ((unint64_t)v4 << 16) | ((unint64_t)v3 << 8) | v2);
  if ((_BYTE)v120)
  {
    if (qword_100978180 != -1)
      dispatch_once(&qword_100978180, &stru_1009275B8);
    sub_1003C2818(qword_100978178, 0, 0);
  }
  if (HIBYTE(v120))
  {
    if (qword_100978180 != -1)
      dispatch_once(&qword_100978180, &stru_1009275B8);
    sub_1003C2368();
  }
  if (HIBYTE(v116))
  {
    if (qword_100978180 != -1)
      dispatch_once(&qword_100978180, &stru_1009275B8);
    sub_1003C0728(qword_100978178, 0, 1, 0);
  }
  if ((_BYTE)v116)
  {
    if (qword_100978180 != -1)
      dispatch_once(&qword_100978180, &stru_1009275B8);
    sub_1003C0728(qword_100978178, 0, 2, 0);
  }
  if (HIBYTE(v115))
  {
    if (qword_100978180 != -1)
      dispatch_once(&qword_100978180, &stru_1009275B8);
    sub_1003C0728(qword_100978178, 0, 3, 0);
  }
  if ((_BYTE)v115)
  {
    if (qword_100978180 != -1)
      dispatch_once(&qword_100978180, &stru_1009275B8);
    sub_1003C0728(qword_100978178, 0, 4, 0);
  }
  if (HIBYTE(v114))
  {
    if (qword_100978180 != -1)
      dispatch_once(&qword_100978180, &stru_1009275B8);
    sub_1003C0728(qword_100978178, 0, 5, 0);
  }
  if ((_BYTE)v114)
  {
    if (qword_100978180 != -1)
      dispatch_once(&qword_100978180, &stru_1009275B8);
    sub_1003C0728(qword_100978178, 0, 6, 0);
  }
  if (HIBYTE(v113))
  {
    if (qword_100978180 != -1)
      dispatch_once(&qword_100978180, &stru_1009275B8);
    sub_1003C0728(qword_100978178, 0, 7, 0);
  }
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v1 + 8))(v1))
  {
    if ((_BYTE)v112)
    {
      if (qword_100978180 != -1)
        dispatch_once(&qword_100978180, &stru_1009275B8);
      sub_1003C0728(qword_100978178, 0, 18, 0);
      sub_100091AE8(buf, "AccessoryLogging");
      sub_100091AE8(v110, "AccessoryCoredumpDisable");
      (*(void (**)(_BYTE *, _BYTE *, void **, _QWORD))(*(_QWORD *)v1 + 80))(v1, buf, v110, 0);
      if (v111 < 0)
        operator delete(v110[0]);
      if ((v131[1] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    else
    {
      if ((_BYTE)v113)
      {
        if (qword_100978180 != -1)
          dispatch_once(&qword_100978180, &stru_1009275B8);
        v7 = 16;
      }
      else
      {
        if (!HIBYTE(v112))
          goto LABEL_162;
        if (qword_100978180 != -1)
          dispatch_once(&qword_100978180, &stru_1009275B8);
        v7 = 17;
      }
      sub_1003C0728(qword_100978178, 0, v7, 0);
    }
  }
LABEL_162:
  v8 = HIBYTE(v128);
  if (v128 < 0)
    v8 = v127;
  if (v8)
  {
    sub_100091AE8(buf, "AccessoryLogging");
    sub_100091AE8(v110, "AccessoryLogCommand");
    sub_100091AE8(v108, "");
    (*(void (**)(_BYTE *, _BYTE *, void **, void **))(*(_QWORD *)v1 + 64))(v1, buf, v110, v108);
    if (v109 < 0)
      operator delete(v108[0]);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v128 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR(" ,")));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "componentsSeparatedByCharactersInSet:", v11));
    if (objc_msgSend(v12, "count") == (id)2)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", 0));
      v14 = objc_msgSend(v13, "intValue");

      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", 1));
      v16 = objc_msgSend(v15, "intValue");

      if (qword_100978180 != -1)
        dispatch_once(&qword_100978180, &stru_1009275B8);
      sub_1003C0728(qword_100978178, 0, v14, v16);
    }

  }
  v107 = 0;
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(v110, "BBFCTimeLogging");
  (*(void (**)(_BYTE *, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v1 + 72))(v1, buf, v110, &v107);
  if (v111 < 0)
    operator delete(v110[0]);
  if ((v131[1] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v17 = sub_100350148();
  (*(void (**)(void *, _QWORD))(*(_QWORD *)v17 + 16))(v17, v107);
  v1[216] = 0;
  v18 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 384))(v18))
  {
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(v110, "EnableUltraHighPriorityVSC");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 216);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v1 + 8))(v1))
  {
    v1[90] = 0;
    sub_100091AE8(buf, "Audio");
    sub_100091AE8(v110, "EnableAudioLogging");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 90);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v19 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[90])
        v20 = "enabled";
      else
        v20 = "disabled";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Audio Logging %{public}s", buf, 0xCu);
    }
    v1[91] = 0;
    sub_100091AE8(buf, "Audio");
    sub_100091AE8(v110, "DisableEnhancedAudioLogging");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 91);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v21 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[91])
        v22 = "enabled";
      else
        v22 = "disabled";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Audio Enhanced Logging %{public}s", buf, 0xCu);
    }
    v1[92] = 0;
    sub_100091AE8(buf, "Audio");
    sub_100091AE8(v110, "DisableAdaptiveEncoderBitrate");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 92);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v23 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[92])
        v24 = "enabled";
      else
        v24 = "disabled";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Audio Adaptive Encoder Bitrate %{public}s", buf, 0xCu);
    }
    v1[221] = 0;
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(v110, "Disable3EDR");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 221);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v25 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[221])
        v26 = "on";
      else
        v26 = "off";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Disable 3EDR packet type (force 2EDR instead) is %{public}s based on defaults write", buf, 0xCu);
    }
    v1[220] = 0;
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(v110, "DisableAdaptivePacketType");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 220);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v27 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[220])
        v28 = "enabled";
      else
        v28 = "disabled";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Audio Adaptive Packet type %{public}s", buf, 0xCu);
    }
    v1[176] = 0;
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(v110, "DisableAudioTimeSync");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 176);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v29 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[176])
        v30 = "enabled";
      else
        v30 = "disabled";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Audio Time Sync Disable %{public}s", buf, 0xCu);
    }
    v1[180] = 0;
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(v110, "SubJitterBufferEnable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 180);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v31 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[180])
        v32 = "enabled";
      else
        v32 = "disabled";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Sub Jitter Buffer %{public}s", buf, 0xCu);
    }
    v1[181] = 0;
    v33 = v1 + 181;
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(v110, "AdaptiveEQEnable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 181);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v34 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (*v33)
        v35 = "enabled";
      else
        v35 = "disabled";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Adaptive EQ %{public}s", buf, 0xCu);
    }
    v1[182] = 0;
    v36 = v1 + 182;
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(v110, "LoudnessCompensationEQEnable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 182);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v37 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (*v36)
        v38 = "enabled";
      else
        v38 = "disabled";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v38;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Loudness Compensation EQ %{public}s", buf, 0xCu);
    }
    LODWORD(v108[0]) = 0;
    v105 = 0;
    v106 = 0;
    sub_100091AE8(buf, "GyroJammingSimulationKey");
    sub_100091AE8(v110, "GyroJammingSimulationIsEnabledKey");
    (*(void (**)(_BYTE *, _BYTE *, void **, void **))(*(_QWORD *)v1 + 128))(v1, buf, v110, v108);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    sub_100091AE8(buf, "GyroJammingSimulationKey");
    sub_100091AE8(v110, "GyroJammingSimulationRightBudInfoKey");
    (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(_QWORD *)v1 + 128))(v1, buf, v110, &v106);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    sub_100091AE8(buf, "GyroJammingSimulationKey");
    sub_100091AE8(v110, "GyroJammingSimulationLeftBudInfoKey");
    (*(void (**)(_BYTE *, _BYTE *, void **, int *))(*(_QWORD *)v1 + 128))(v1, buf, v110, &v105);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v39 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&buf[4] = v108[0];
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = 1;
      LOWORD(v130) = 1024;
      *(_DWORD *)((char *)&v130 + 2) = v106;
      HIWORD(v130) = 1024;
      *(_DWORD *)v131 = v105;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "DebugSettings::loadDebugSettings: Gyro jam simulation is enabled = %u, info version = %u, right bud is jammed = %u, left bud is jammed = %u", buf, 0x1Au);
    }
    v40 = (char)v108[0];
    v41 = operator new(1uLL);
    *v41 = v40;
    v42 = operator new(2uLL);
    v42[1] = 1;
    *v42 = v40;
    operator delete(v41);
    v43 = v106;
    v44 = operator new(4uLL);
    v44[2] = v43;
    *(_WORD *)v44 = *(_WORD *)v42;
    operator delete(v42);
    v44[3] = v105;
    LODWORD(v42) = *v33;
    v45 = malloc_type_malloc(0x10uLL, 0x6C78F49FuLL);
    v46 = v45;
    v47 = 0.0;
    if ((_DWORD)v42)
      v47 = 1.0;
    *v45 = 514;
    *((_DWORD *)v45 + 2) = 1677721850;
    *((float *)v45 + 3) = v47;
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_1009275D8);
    sub_10027BC8C((uint64_t)off_100977A80, 1, 16, (uint64_t)v46);
    free(v46);
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_1009275D8);
    v48 = sub_10027BE48((uint64_t)off_100977A80);
    if (v48)
    {
      if (qword_100977E00 != -1)
        dispatch_once(&qword_100977E00, &stru_1009275F8);
      v49 = sub_1003E8A20((_QWORD *)qword_100977DF8, v48);
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_1009275D8);
      v50 = sub_10027BDD0(v49);
      if (v50)
      {
        v51 = *v36;
        v52 = malloc_type_malloc(0x10uLL, 0x81AC74C4uLL);
        v53 = v52;
        v54 = 0.0;
        if (v51)
          v54 = 1.0;
        *v52 = 258;
        v52[1] = v50 - 1;
        v52[2] = 1409286394;
        *((float *)v52 + 3) = v54;
        if (qword_100977A88 != -1)
          dispatch_once(&qword_100977A88, &stru_1009275D8);
        sub_10027958C((uint64_t)off_100977A80, v48, 1, 16, (uint64_t)v53);
        free(v53);
      }
      else
      {
        v55 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006E0248(v55, v49);
      }
    }
    *((_DWORD *)v1 + 65) = 0;
    sub_100091AE8(buf, "HFP");
    sub_100091AE8(v110, "HfpUplinkMode");
    v56 = v1 + 260;
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 128))(v1, buf, v110, v1 + 260);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (*v56 >= 3u)
      *v56 = 0;
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_1009275D8);
    sub_10027BB38((uint64_t)off_100977A80, 34, *v56, 1u);
    v1[178] = 0;
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(v110, "DisableSoftwareVolume");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 178);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v57 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[178])
        v58 = "enabled";
      else
        v58 = "disabled";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v58;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Software Volume Disable %{public}s", buf, 0xCu);
    }
    v1[179] = 0;
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(v110, "DisableVolumeUpdateToCM");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 179);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v59 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[179])
        v60 = "enabled";
      else
        v60 = "disabled";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v60;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Direct volume rocker update to CMSession %{public}s", buf, 0xCu);
    }
    v1[177] = 0;
    if (!v1[176])
    {
      sub_100091AE8(buf, "A2DP");
      sub_100091AE8(v110, "EnableRemoteAudioTimeSync");
      (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 177);
      if (v111 < 0)
        operator delete(v110[0]);
      if ((v131[1] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    v61 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[177])
        v62 = "enabled";
      else
        v62 = "disabled";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v62;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "Remote Audio Time Sync : %{public}s", buf, 0xCu);
    }
    v1[198] = 0;
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(v110, "DynamicLatencyDebugDisable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 198);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v1[199] = 0;
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(v110, "DynamicLatencyHighEnable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 199);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    *((_DWORD *)v1 + 50) = 0;
    v63 = (int *)(v1 + 200);
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(v110, "DynamicLatencyLowEnable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 88))(v1, buf, v110, v1 + 200);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    *((_DWORD *)v1 + 52) = 100;
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(v110, "DynamicAdaptiveLowJitterBufferCutoff");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 88))(v1, buf, v110, v1 + 208);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v1[214] = 0;
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(v110, "DynamicLatencyDefaultEnable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 214);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v1[215] = 0;
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(v110, "SpatialProfileTuningEnable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 215);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v1[204] = 0;
    v64 = v1 + 204;
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(v110, "DynamicAdaptiveLowJitterBufferDisable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 204);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v1[212] = 0;
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(v110, "DynamicAdaptiveLowDebugJitterBufferEnable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 212);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v1[213] = 0;
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(v110, "DynamicAdaptiveLowJitterBufferLogging");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 213);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v65 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v66 = "disabled";
      if (*v64)
        v67 = "disabled";
      else
        v67 = "enabled";
      v68 = v1[212];
      if (v1[213])
        v69 = "enabled";
      else
        v69 = "disabled";
      *(_DWORD *)buf = 136446722;
      if (v68)
        v66 = "enabled";
      *(_QWORD *)&buf[4] = v67;
      *(_WORD *)&buf[12] = 2082;
      v130 = v69;
      *(_WORD *)v131 = 2082;
      *(_QWORD *)&v131[2] = v66;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "Adaptive Low Latency is %{public}s, Logging is %{public}s DEBUG Low Latency is %{public}s", buf, 0x20u);
    }
    v1[217] = 0;
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(v110, "DisableSpatialOnMacOS");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 217);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v70 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v71 = "disabled";
      if (!v1[198])
        v71 = "enabled";
      v72 = "FORCED";
      v73 = v1[214];
      if (v1[199])
        v74 = "FORCED";
      else
        v74 = "NOT FORCED";
      v75 = v1[216];
      if (*v63 <= 0)
        v76 = "NOT FORCED";
      else
        v76 = "FORCED";
      v77 = v1[217];
      if (*v64)
        v78 = "NOT FORCED";
      else
        v78 = "FORCED";
      *(_DWORD *)buf = 136447746;
      if (v73)
        v79 = "FORCED";
      else
        v79 = "NOT FORCED";
      *(_QWORD *)&buf[4] = v71;
      *(_WORD *)&buf[12] = 2080;
      v130 = v74;
      v80 = "AUTO";
      *(_WORD *)v131 = 2080;
      if (!v75)
        v72 = "NOT FORCED";
      *(_QWORD *)&v131[2] = v76;
      if (v77)
        v80 = "FORCED OFF";
      v132 = 2080;
      v133 = v78;
      v134 = 2080;
      v135 = v79;
      v136 = 2080;
      v137 = v72;
      v138 = 2080;
      v139 = v80;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "A2DP Dynamic Latency is %{public}s, it is %s into HLM, it is %s into LLM, it is %s into adaptive latency,it is %s into MLM Ultra High Priority VSC is %s Spatial On MacOS is %s", buf, 0x48u);
    }
    v81 = *v63;
    if (*v63 >= 1)
    {
      v82 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v81;
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "A2DP Dynamic Latency JBL %i", buf, 8u);
      }
    }
    v1[218] = 0;
    sub_100091AE8(buf, "Audio");
    sub_100091AE8(v110, "EnableTailspinLogging");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 218);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v83 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[218])
        v84 = "enabled";
      else
        v84 = "disabled";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v84;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "A2DP Tailspin logging %{public}s", buf, 0xCu);
    }
    v1[219] = 0;
    sub_100091AE8(buf, "Audio");
    sub_100091AE8(v110, "DisableOverwaitMitigaton");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 219);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v85 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (v1[219])
        v86 = "disabled";
      else
        v86 = "enabled";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v86;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "A2DP Overwait Mitigation %{public}s", buf, 0xCu);
    }
    v1[238] = 0;
    sub_100091AE8(buf, "BTPageScan");
    sub_100091AE8(v110, "BTPageScanDisabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 238);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v1[238])
    {
      v87 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "BT Page Scan is explicitly disabled", buf, 2u);
      }
    }
    sub_100091AE8(buf, "GAPA");
    sub_100091AE8(v110, "ForceAuthPassEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 239);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v1[239])
    {
      v88 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "GAPA force auth pass explicitly enabled", buf, 2u);
      }
    }
    sub_100091AE8(buf, "GAPA");
    sub_100091AE8(v110, "ForceAuthFailEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 240);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v1[240])
    {
      v89 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "GAPA force auth fail explicitly enabled", buf, 2u);
      }
    }
    if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v1 + 8))(v1))
      v1[241] = 0;
    sub_100091AE8(buf, "GAPA");
    sub_100091AE8(v110, "HideAuthFailEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 241);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v1[241])
    {
      v90 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "GAPA hide auth fail explicitly enabled", buf, 2u);
      }
    }
    sub_100091AE8(buf, "GAPA");
    sub_100091AE8(v110, "ForceNonAppleMfgEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 242);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v1[242])
    {
      v91 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "GAPA force non Apple manufacturer explicitly enabled", buf, 2u);
      }
    }
    sub_100091AE8(buf, "GAPA");
    sub_100091AE8(v110, "AuthEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 243);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (!v1[243])
    {
      v92 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "GAPA auth explicity disabled", buf, 2u);
      }
    }
    sub_100091AE8(buf, "GAPA");
    sub_100091AE8(v110, "NonAuthEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 244);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (!v1[244])
    {
      v93 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "GAPA non-auth explicity disabled", buf, 2u);
      }
    }
    sub_100091AE8(buf, "GAPA");
    sub_100091AE8(v110, "ForceZeroEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 245);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v1[245])
    {
      v94 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "GAPA force zero device explicity enabled", buf, 2u);
      }
    }
    sub_100091AE8(buf, "GAPA");
    sub_100091AE8(v110, "ForceInvalidCertsEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 246);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v1[246])
    {
      v95 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "GAPA force invalid certificate support explicitly enabled", buf, 2u);
      }
    }
    sub_100091AE8(buf, "GAPA");
    sub_100091AE8(v110, "SkipCertFailEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 247);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v1[247])
    {
      v96 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "GAPA skip certificate fail explicitly enabled", buf, 2u);
      }
    }
    v1[257] = 1;
    sub_100091AE8(buf, "DebugLevel");
    sub_100091AE8(v110, "EnableNotifyCrashes");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 257);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v1[258] = 0;
    sub_100091AE8(buf, "XPC");
    sub_100091AE8(v110, "XpcStackshotReportEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 258);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v1[259] = 0;
    sub_100091AE8(buf, "XPC");
    sub_100091AE8(v110, "XpcAbcReportEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 259);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v1[264] = 0;
    sub_100091AE8(buf, "LEConnectedAudioServerModeKey");
    sub_100091AE8(v110, "LEConnectedAudioServerModeEnable");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 264);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v1[264])
    {
      v97 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "LE Connected Audio Server Mode enabled", buf, 2u);
      }
    }
    sub_100091AE8(buf, "LEConnectedAudioServerModeKey");
    sub_100091AE8(v110, "LEConnectedAudioFakeCISStackCallbacksEnabled");
    (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 72))(v1, buf, v110, v1 + 265);
    if (v111 < 0)
      operator delete(v110[0]);
    if ((v131[1] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v1[265])
    {
      v98 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEFAULT, "LE Connected Stack Bypass enabled", buf, 2u);
      }
    }
    if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming"))
    {
      *((_DWORD *)v1 + 67) = 0;
      sub_100091AE8(buf, "A2DP");
      sub_100091AE8(v110, "A2DPOverSniffJBL");
      v99 = (int *)(v1 + 268);
      (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 88))(v1, buf, v110, v1 + 268);
      if (v111 < 0)
        operator delete(v110[0]);
      if ((v131[1] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v100 = *v99;
      if ((*v99 - 301) <= 0xFFFFFEE1)
      {
        v100 = 60;
        *v99 = 60;
      }
      v101 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v100;
        _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "JBL Value: %d", buf, 8u);
      }
    }
    if (_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming"))
    {
      *((_DWORD *)v1 + 68) = 1;
      sub_100091AE8(buf, "A2DP");
      sub_100091AE8(v110, "A2DPOverSniffAACELDFrames");
      v102 = (int *)(v1 + 272);
      (*(void (**)(_BYTE *, _BYTE *, void **, _BYTE *))(*(_QWORD *)v1 + 88))(v1, buf, v110, v1 + 272);
      if (v111 < 0)
        operator delete(v110[0]);
      if ((v131[1] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v103 = *v102;
      if ((*v102 - 4) <= 0xFFFFFFFC)
      {
        v103 = 1;
        *v102 = 1;
      }
      v104 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v103;
        _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "Overriden AACELD Frame Count: %d", buf, 8u);
      }
    }
    operator delete(v44);
  }
  if (SHIBYTE(v128) < 0)
    operator delete(__p);
}

void sub_1003283DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a23 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  operator delete(a9);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(a1);
}

void sub_10032887C()
{
  JUMPOUT(0x100328874);
}

void sub_100328884(uint64_t a1)
{
  int v2;
  int v3;
  int AppBooleanValue;
  int v5;
  int v6;
  NSObject *v7;
  _BOOL4 v8;
  int v9;
  uint64_t v10;
  const char *p_p;
  const __CFString *v12;
  __CFDateFormatter *v13;
  const __CFDate *DateFromString;
  const __CFDate *v15;
  const __CFDate *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;
  CFAbsoluteTime Current;
  const __CFDate *v23;
  double AbsoluteTime;
  double v25;
  NSObject *v26;
  dispatch_time_t v27;
  void *v28;
  int v29;
  NSObject *v30;
  __CFDateFormatter *v31;
  const __CFDate *v32;
  CFStringRef StringWithDate;
  const __CFString *v34;
  void *v35;
  id v36;
  NSObject *v37;
  _QWORD v38[5];
  _QWORD handler[5];
  void *v40[2];
  char v41;
  Boolean keyExistsAndHasValidFormat;
  unsigned __int8 v43;
  int v44;
  int v45;
  __int16 v46;
  __int16 v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  __int16 v50;
  void *__p;
  uint64_t v52;
  _BYTE v53[10];
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  _BYTE buf[12];
  char v67;

  v50 = 0;
  v49 = 0;
  sub_100322C4C((_BYTE *)a1, (BOOL *)&v50 + 1, (BOOL *)&v50, &v49);
  v2 = 4997400;
  v48 = 0;
  v47 = 0;
  v46 = 0;
  v44 = 4997400;
  v45 = 3;
  v43 = 0;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  sub_100091AE8(&__p, "HCITraces");
  sub_100091AE8(buf, "UnlimitedHCIFileSize");
  (*(void (**)(uint64_t, void **, _BYTE *, char *))(*(_QWORD *)a1 + 72))(a1, &__p, buf, (char *)&v46 + 1);
  if (v67 < 0)
    operator delete(*(void **)buf);
  if ((v53[7] & 0x80000000) != 0)
    operator delete(__p);
  sub_100091AE8(&__p, "HCITraces");
  sub_100091AE8(buf, "RawAudioTrace");
  (*(void (**)(uint64_t, void **, _BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 72))(a1, &__p, buf, &v48);
  if (v67 < 0)
    operator delete(*(void **)buf);
  if ((v53[7] & 0x80000000) != 0)
    operator delete(__p);
  sub_100091AE8(&__p, "HCITraces");
  sub_100091AE8(buf, "HIDTrace");
  (*(void (**)(uint64_t, void **, _BYTE *, __int16 *))(*(_QWORD *)a1 + 72))(a1, &__p, buf, &v47);
  if (v67 < 0)
    operator delete(*(void **)buf);
  if ((v53[7] & 0x80000000) != 0)
    operator delete(__p);
  sub_100091AE8(&__p, "HCITraces");
  sub_100091AE8(buf, "AudioTimeSyncAudioLog");
  (*(void (**)(uint64_t, void **, _BYTE *, char *))(*(_QWORD *)a1 + 72))(a1, &__p, buf, (char *)&v47 + 1);
  if (v67 < 0)
    operator delete(*(void **)buf);
  if ((v53[7] & 0x80000000) != 0)
    operator delete(__p);
  sub_100091AE8(&__p, "HCITraces");
  sub_100091AE8(buf, "MaxFileSize");
  (*(void (**)(uint64_t, void **, _BYTE *, __int16 *))(*(_QWORD *)a1 + 72))(a1, &__p, buf, &v46);
  if (v67 < 0)
    operator delete(*(void **)buf);
  if ((v53[7] & 0x80000000) != 0)
    operator delete(__p);
  sub_100091AE8(&__p, "HCITraces");
  sub_100091AE8(buf, "MaxTraces");
  (*(void (**)(uint64_t, void **, _BYTE *, int *))(*(_QWORD *)a1 + 88))(a1, &__p, buf, &v45);
  if (v67 < 0)
    operator delete(*(void **)buf);
  if ((v53[7] & 0x80000000) != 0)
    operator delete(__p);
  sub_100091AE8(&__p, "HCITraces");
  sub_100091AE8(buf, "MaxFileSize");
  (*(void (**)(uint64_t, void **, _BYTE *, int *))(*(_QWORD *)a1 + 88))(a1, &__p, buf, &v44);
  if (v67 < 0)
    operator delete(*(void **)buf);
  if ((v53[7] & 0x80000000) != 0)
    operator delete(__p);
  sub_100091AE8(&__p, "HCITraces");
  sub_100091AE8(buf, "HCISkipAuth");
  (*(void (**)(uint64_t, void **, _BYTE *, unsigned __int8 *))(*(_QWORD *)a1 + 72))(a1, &__p, buf, &v43);
  if (v67 < 0)
    operator delete(*(void **)buf);
  if ((v53[7] & 0x80000000) != 0)
    operator delete(__p);
  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("enableHIDLogging"), CFSTR("com.apple.bluetooth"), &keyExistsAndHasValidFormat);
  keyExistsAndHasValidFormat = 0;
  v5 = CFPreferencesGetAppBooleanValue(CFSTR("enableHRMLogging"), CFSTR("com.apple.bluetooth"), &keyExistsAndHasValidFormat);
  v6 = v45;
  if (v45 < 0 || v44 <= 999999)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E02EC();
    v6 = 5;
    v44 = 4997400;
    v45 = 5;
  }
  else
  {
    v2 = v44;
  }
  if (HIBYTE(v46) && !(_BYTE)v46)
  {
    v2 = 200000000;
    v44 = 200000000;
  }
  v7 = qword_1009997E8;
  v8 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  v9 = v49;
  if (v8)
  {
    LODWORD(__p) = 67111424;
    HIDWORD(__p) = v48;
    LOWORD(v52) = 1024;
    *(_DWORD *)((char *)&v52 + 2) = v47;
    HIWORD(v52) = 1024;
    *(_DWORD *)v53 = AppBooleanValue != 0;
    *(_WORD *)&v53[4] = 1024;
    *(_DWORD *)&v53[6] = v2;
    v54 = 1024;
    v55 = v6;
    v56 = 1024;
    v57 = HIBYTE(v50);
    v58 = 1024;
    v59 = v50;
    v60 = 1024;
    v61 = HIBYTE(v47);
    v62 = 1024;
    v63 = v3;
    v64 = 1024;
    v65 = v49;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Set HCI config raw:%d HID:%d developerEnableHIDLogging:%d size:%d files:%d liveTracing:%d fileTracing:%d timesync:%d logENPackets:%d hciLiteLogging:%d", (uint8_t *)&__p, 0x3Eu);
    v2 = v44;
    v6 = v45;
  }
  sub_10011BB54(v48, (v47 | AppBooleanValue) != 0, v5 != 0, v2, v6, SHIBYTE(v50), v50, SHIBYTE(v47), v3, v9 != 0);
  sub_10011C06C(v43);
  __p = 0;
  v52 = 0;
  *(_QWORD *)v53 = 0;
  sub_100091AE8(buf, "HCITraces");
  sub_100091AE8(v40, "AutoDisableTime");
  if ((*(unsigned int (**)(uint64_t, _BYTE *, void **, void **))(*(_QWORD *)a1 + 56))(a1, buf, v40, &__p))
  {
    if (v53[7] >= 0)
      v10 = v53[7];
    else
      v10 = v52;
    if (v41 < 0)
      operator delete(v40[0]);
    if (v67 < 0)
    {
      operator delete(*(void **)buf);
      if (!v10)
        goto LABEL_74;
    }
    else if (!v10)
    {
      goto LABEL_74;
    }
    if (v53[7] >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    v12 = CFStringCreateWithCString(0, p_p, 0x600u);
    v13 = CFDateFormatterCreate(0, 0, kCFDateFormatterNoStyle, kCFDateFormatterNoStyle);
    CFDateFormatterSetFormat(v13, CFSTR("HH:mm:ss MM-dd-yyyy"));
    DateFromString = CFDateFormatterCreateDateFromString(0, v13, v12, 0);
    v15 = DateFromString;
    if (DateFromString)
    {
      v16 = *(const __CFDate **)(a1 + 40);
      if (!v16 || CFDateCompare(DateFromString, v16, 0))
      {
        v17 = *(NSObject **)(a1 + 32);
        if (v17)
        {
          dispatch_suspend(v17);
        }
        else
        {
          v18 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 24));
          *(_QWORD *)(a1 + 32) = v18;
          handler[0] = _NSConcreteStackBlock;
          handler[1] = 3221225472;
          handler[2] = sub_10032B18C;
          handler[3] = &unk_100917378;
          handler[4] = a1;
          dispatch_source_set_event_handler(v18, handler);
          v19 = *(NSObject **)(a1 + 32);
          v38[0] = _NSConcreteStackBlock;
          v38[1] = 3221225472;
          v38[2] = sub_10032B1B4;
          v38[3] = &unk_100917378;
          v38[4] = a1;
          dispatch_source_set_cancel_handler(v19, v38);
        }
        v20 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          v21 = &__p;
          if (v53[7] < 0)
            v21 = __p;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Enabling HCI unlimited tracing auto-disable for %s", buf, 0xCu);
        }
        Current = CFAbsoluteTimeGetCurrent();
        v23 = CFDateCreate(0, Current);
        AbsoluteTime = CFDateGetAbsoluteTime(v15);
        v25 = CFDateGetAbsoluteTime(v23);
        CFRelease(v23);
        v26 = *(NSObject **)(a1 + 32);
        v27 = dispatch_walltime(0, (uint64_t)((AbsoluteTime - v25) * 1000000000.0));
        dispatch_source_set_timer(v26, v27, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        dispatch_resume(*(dispatch_object_t *)(a1 + 32));
      }
      CFRelease(v15);
    }
    CFRelease(v13);
    CFRelease(v12);
  }
  else
  {
    if (v41 < 0)
      operator delete(v40[0]);
    if (v67 < 0)
      operator delete(*(void **)buf);
  }
LABEL_74:
  v28 = objc_autoreleasePoolPush();
  if ((_BYTE)v50)
  {
    v29 = sub_10011CBB8();
    v30 = qword_1009997E8;
    if (v29)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Successfully started HCI tracing", buf, 2u);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      sub_1006E02C0();
    }
  }
  else
  {
    v31 = CFDateFormatterCreate(kCFAllocatorDefault, 0, kCFDateFormatterShortStyle, kCFDateFormatterFullStyle);
    CFDateFormatterSetFormat(v31, CFSTR("yyyy_MM_dd-HH_mm_ss"));
    v32 = (const __CFDate *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    StringWithDate = CFDateFormatterCreateStringWithDate(kCFAllocatorDefault, v31, v32);
    if (v9)
      v34 = CFSTR("%@/bluetoothd-hcilite-%@.pklg");
    else
      v34 = CFSTR("%@/bluetoothd-hci-%@.pklg");
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v34, qword_100991D88, StringWithDate));
    CFRelease(v31);
    v36 = objc_retainAutorelease(v35);
    sub_10011D06C((uint64_t)objc_msgSend(v36, "UTF8String"));
    v37 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Successfully stopped HCI tracing", buf, 2u);
    }
    CFRelease(StringWithDate);

  }
  objc_autoreleasePoolPop(v28);
  if ((v53[7] & 0x80000000) != 0)
    operator delete(__p);
}

void sub_1003291FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1003292C8(_BYTE *a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  NSObject *v5;
  void *__p[2];
  char v7;
  unsigned int v8;
  uint8_t buf[8];
  char v10;

  v2 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 2400))(v2))
  {
    v8 = 0;
    sub_100091AE8(buf, "SPMI");
    sub_100091AE8(__p, "DebugControl");
    a1[255] = (*(uint64_t (**)(_BYTE *, uint8_t *, void **, unsigned int *))(*(_QWORD *)a1 + 128))(a1, buf, __p, &v8);
    if (v7 < 0)
      operator delete(__p[0]);
    if (v10 < 0)
      operator delete(*(void **)buf);
    if (a1[255])
    {
      v3 = v8;
      if (v8 > 3)
      {
        a1[255] = 0;
        v5 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006E0318(v3, v5);
      }
      else
      {
        a1[256] = v8;
        v4 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = v3;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "SPMI Debug Control is %{public}d", buf, 8u);
        }
      }
    }
  }
}

void sub_100329428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100329464(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  _BOOL8 v4;
  int v5;
  NSObject *v8;
  void *__p[2];
  char v10;
  uint8_t buf[8];
  char v12;
  char v13;

  v2 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2))
  {
    v4 = 0;
    return sub_100114A40(v4);
  }
  v3 = *(_DWORD *)(sub_1000438A4() + 712) - 2000;
  v4 = v3 < 0x7D0;
  v13 = 0;
  sub_100091AE8(buf, "Firmware");
  sub_100091AE8(__p, "DisableAppleFwLogsCapture");
  v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)a1 + 72))(a1, buf, __p, &v13);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
  {
    operator delete(*(void **)buf);
    if (!v5)
      return sub_100114A40(v4);
  }
  else if (!v5)
  {
    return sub_100114A40(v4);
  }
  v4 = v3 < 0x7D0 && v13 == 0;
  v8 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Default writes disabling AppleFwLogCapture", buf, 2u);
  }
  return sub_100114A40(v4);
}

void sub_10032958C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003295C0(uint64_t a1, uint64_t *a2, uint64_t *a3, std::string *a4)
{
  void *v7;
  uint64_t *v8;
  __CFString *v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  char isKindOfClass;

  v7 = objc_autoreleasePoolPush();
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  v10 = (void *)CFPreferencesCopyAppValue(v9, CFSTR("com.apple.MobileBluetooth.debug"));

  v11 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    if (*((char *)a3 + 23) >= 0)
      v12 = a3;
    else
      v12 = (uint64_t *)*a3;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", v13));

    v15 = objc_opt_class(NSString);
    isKindOfClass = objc_opt_isKindOfClass(v14, v15);
    if ((isKindOfClass & 1) != 0)
      std::string::assign(a4, (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v14), "UTF8String"));

  }
  else
  {
    isKindOfClass = 0;
  }

  objc_autoreleasePoolPop(v7);
  return isKindOfClass & 1;
}

void sub_1003296D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100329710(uint64_t a1, uint64_t *a2, int64x2_t *a3)
{
  uint64_t *v5;
  __CFString *v6;
  uint64_t v7;
  id v8;
  char v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *context;
  void *v37;
  void *__p[2];
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  int64x2_t v45;
  uint64_t v46;
  int64x2_t *v47;
  _BYTE v48[128];

  context = objc_autoreleasePoolPush();
  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  v6 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5));
  v37 = (void *)CFPreferencesCopyAppValue(v6, CFSTR("com.apple.MobileBluetooth.debug"));

  v7 = objc_opt_class(NSArray);
  if ((objc_opt_isKindOfClass(v37, v7) & 1) != 0)
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v8 = v37;
    v9 = 0;
    v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v41;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v41 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i);
          v14 = objc_opt_class(NSString);
          if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
          {
            v15 = objc_retainAutorelease(v13);
            sub_100091AE8(__p, (char *)objc_msgSend(v15, "UTF8String"));
            v17 = a3->u64[1];
            v16 = a3[1].u64[0];
            if (v17 >= v16)
            {
              v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - a3->i64[0]) >> 3);
              v20 = v19 + 1;
              if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
                abort();
              v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - a3->i64[0]) >> 3);
              if (2 * v21 > v20)
                v20 = 2 * v21;
              if (v21 >= 0x555555555555555)
                v22 = 0xAAAAAAAAAAAAAAALL;
              else
                v22 = v20;
              v47 = a3 + 1;
              if (v22)
                v23 = (char *)sub_1002A479C((uint64_t)a3[1].i64, v22);
              else
                v23 = 0;
              v24 = &v23[24 * v19];
              v25 = *(_OWORD *)__p;
              *((_QWORD *)v24 + 2) = v39;
              *(_OWORD *)v24 = v25;
              __p[1] = 0;
              v39 = 0;
              __p[0] = 0;
              v27 = a3->i64[0];
              v26 = a3->u64[1];
              if (v26 == a3->i64[0])
              {
                v30 = vdupq_n_s64(v26);
                v28 = &v23[24 * v19];
              }
              else
              {
                v28 = &v23[24 * v19];
                do
                {
                  v29 = *(_OWORD *)(v26 - 24);
                  *((_QWORD *)v28 - 1) = *(_QWORD *)(v26 - 8);
                  *(_OWORD *)(v28 - 24) = v29;
                  v28 -= 24;
                  *(_QWORD *)(v26 - 16) = 0;
                  *(_QWORD *)(v26 - 8) = 0;
                  *(_QWORD *)(v26 - 24) = 0;
                  v26 -= 24;
                }
                while (v26 != v27);
                v30 = *a3;
              }
              v31 = v24 + 24;
              a3->i64[0] = (uint64_t)v28;
              a3->i64[1] = (uint64_t)(v24 + 24);
              v45 = v30;
              v32 = a3[1].i64[0];
              a3[1].i64[0] = (uint64_t)&v23[24 * v22];
              v46 = v32;
              v44 = v30.i64[0];
              sub_1002A56A4((uint64_t)&v44);
              v33 = SHIBYTE(v39);
              a3->i64[1] = (uint64_t)v31;
              if (v33 < 0)
                operator delete(__p[0]);
            }
            else
            {
              v18 = *(_OWORD *)__p;
              *(_QWORD *)(v17 + 16) = v39;
              *(_OWORD *)v17 = v18;
              a3->i64[1] = v17 + 24;
            }

            v9 = 1;
          }
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
      }
      while (v10);
    }

    v34 = v9 & 1;
  }
  else
  {
    v34 = 0;
  }

  objc_autoreleasePoolPop(context);
  return v34;
}

void sub_100329A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_100329A74(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  uint64_t *v8;
  __CFString *v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t *v13;
  void *v14;
  uint64_t *v15;
  void *v16;
  uint64_t *v17;
  uint64_t *v18;
  void *v19;
  uint64_t *v20;
  void *v21;
  __CFString *v22;

  v7 = objc_autoreleasePoolPush();
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  v10 = (void *)CFPreferencesCopyAppValue(v9, CFSTR("com.apple.MobileBluetooth.debug"));

  v11 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    v12 = objc_msgSend(v10, "mutableCopy");
    if (*((char *)a4 + 23) >= 0)
      v13 = a4;
    else
      v13 = (uint64_t *)*a4;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
    if (*((char *)a3 + 23) >= 0)
      v15 = a3;
    else
      v15 = (uint64_t *)*a3;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15));
    objc_msgSend(v12, "setObject:forKey:", v14, v16);

    if (*((char *)a2 + 23) >= 0)
      v17 = a2;
    else
      v17 = (uint64_t *)*a2;
  }
  else
  {
    if (*((char *)a4 + 23) >= 0)
      v18 = a4;
    else
      v18 = (uint64_t *)*a4;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18));
    if (*((char *)a3 + 23) >= 0)
      v20 = a3;
    else
      v20 = (uint64_t *)*a3;
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20));
    v12 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObject:forKey:](NSDictionary, "dictionaryWithObject:forKey:", v19, v21));

    if (*((char *)a2 + 23) >= 0)
      v17 = a2;
    else
      v17 = (uint64_t *)*a2;
  }
  v22 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17));
  CFPreferencesSetAppValue(v22, v12, CFSTR("com.apple.MobileBluetooth.debug"));

  CFPreferencesAppSynchronize(CFSTR("com.apple.MobileBluetooth.debug"));
  objc_autoreleasePoolPop(v7);
}

void sub_100329C64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100329CD8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  void *v7;
  uint64_t *v8;
  __CFString *v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t *v14;
  void *v15;
  uint64_t *v16;
  void *v17;
  uint64_t *v18;
  void *v19;
  __CFString *v20;

  v7 = objc_autoreleasePoolPush();
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  v10 = (void *)CFPreferencesCopyAppValue(v9, CFSTR("com.apple.MobileBluetooth.debug"));

  v11 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    v12 = objc_msgSend(v10, "mutableCopy");
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a4));
    if (*((char *)a3 + 23) >= 0)
      v14 = a3;
    else
      v14 = (uint64_t *)*a3;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14));
    objc_msgSend(v12, "setObject:forKey:", v13, v15);

    if (*((char *)a2 + 23) >= 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
  }
  else
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a4));
    if (*((char *)a3 + 23) >= 0)
      v18 = a3;
    else
      v18 = (uint64_t *)*a3;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18));
    v12 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObject:forKey:](NSDictionary, "dictionaryWithObject:forKey:", v17, v19));

    if (*((char *)a2 + 23) >= 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
  }
  v20 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16));
  CFPreferencesSetAppValue(v20, v12, CFSTR("com.apple.MobileBluetooth.debug"));

  CFPreferencesAppSynchronize(CFSTR("com.apple.MobileBluetooth.debug"));
  objc_autoreleasePoolPop(v7);
}

void sub_100329EB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100329F2C(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  void *v7;
  uint64_t *v8;
  __CFString *v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t *v14;
  void *v15;
  uint64_t *v16;
  void *v17;
  uint64_t *v18;
  void *v19;
  __CFString *v20;

  v7 = objc_autoreleasePoolPush();
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  v10 = (void *)CFPreferencesCopyAppValue(v9, CFSTR("com.apple.MobileBluetooth.debug"));

  v11 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    v12 = objc_msgSend(v10, "mutableCopy");
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a4));
    if (*((char *)a3 + 23) >= 0)
      v14 = a3;
    else
      v14 = (uint64_t *)*a3;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14));
    objc_msgSend(v12, "setObject:forKey:", v13, v15);

    if (*((char *)a2 + 23) >= 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
  }
  else
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a4));
    if (*((char *)a3 + 23) >= 0)
      v18 = a3;
    else
      v18 = (uint64_t *)*a3;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18));
    v12 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObject:forKey:](NSDictionary, "dictionaryWithObject:forKey:", v17, v19));

    if (*((char *)a2 + 23) >= 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
  }
  v20 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16));
  CFPreferencesSetAppValue(v20, v12, CFSTR("com.apple.MobileBluetooth.debug"));

  CFPreferencesAppSynchronize(CFSTR("com.apple.MobileBluetooth.debug"));
  objc_autoreleasePoolPop(v7);
}

void sub_10032A10C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_10032A180(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  void *v7;
  uint64_t *v8;
  __CFString *v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  char isKindOfClass;
  int v17;

  v7 = objc_autoreleasePoolPush();
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  v10 = (void *)CFPreferencesCopyAppValue(v9, CFSTR("com.apple.MobileBluetooth.debug"));

  v11 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    if (*((char *)a3 + 23) >= 0)
      v12 = a3;
    else
      v12 = (uint64_t *)*a3;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", v13));

    v15 = objc_opt_class(NSNumber);
    isKindOfClass = objc_opt_isKindOfClass(v14, v15);
    if ((isKindOfClass & 1) != 0)
    {
      objc_msgSend(v14, "floatValue");
      *a4 = v17;
    }

  }
  else
  {
    isKindOfClass = 0;
  }

  objc_autoreleasePoolPop(v7);
  return isKindOfClass & 1;
}

void sub_10032A290(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10032A2C8(float a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  uint64_t *v8;
  __CFString *v9;
  void *v10;
  uint64_t v11;
  double v12;
  id v13;
  double v14;
  void *v15;
  uint64_t *v16;
  void *v17;
  uint64_t *v18;
  void *v19;
  uint64_t *v20;
  void *v21;
  __CFString *v22;

  v7 = objc_autoreleasePoolPush();
  if (*((char *)a3 + 23) >= 0)
    v8 = a3;
  else
    v8 = (uint64_t *)*a3;
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  v10 = (void *)CFPreferencesCopyAppValue(v9, CFSTR("com.apple.MobileBluetooth.debug"));

  v11 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    v13 = objc_msgSend(v10, "mutableCopy");
    *(float *)&v14 = a1;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v14));
    if (*((char *)a4 + 23) >= 0)
      v16 = a4;
    else
      v16 = (uint64_t *)*a4;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16));
    objc_msgSend(v13, "setObject:forKey:", v15, v17);

    if (*((char *)a3 + 23) >= 0)
      v18 = a3;
    else
      v18 = (uint64_t *)*a3;
  }
  else
  {
    *(float *)&v12 = a1;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v12));
    if (*((char *)a4 + 23) >= 0)
      v20 = a4;
    else
      v20 = (uint64_t *)*a4;
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20));
    v13 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObject:forKey:](NSDictionary, "dictionaryWithObject:forKey:", v19, v21));

    if (*((char *)a3 + 23) >= 0)
      v18 = a3;
    else
      v18 = (uint64_t *)*a3;
  }
  v22 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18));
  CFPreferencesSetAppValue(v22, v13, CFSTR("com.apple.MobileBluetooth.debug"));

  CFPreferencesAppSynchronize(CFSTR("com.apple.MobileBluetooth.debug"));
  objc_autoreleasePoolPop(v7);
}

void sub_10032A4B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_10032A524(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  void *v7;
  uint64_t *v8;
  __CFString *v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  char isKindOfClass;

  v7 = objc_autoreleasePoolPush();
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  v10 = (void *)CFPreferencesCopyAppValue(v9, CFSTR("com.apple.MobileBluetooth.debug"));

  v11 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    if (*((char *)a3 + 23) >= 0)
      v12 = a3;
    else
      v12 = (uint64_t *)*a3;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", v13));

    v15 = objc_opt_class(NSNumber);
    isKindOfClass = objc_opt_isKindOfClass(v14, v15);
    if ((isKindOfClass & 1) != 0)
      *a4 = objc_msgSend(v14, "unsignedIntValue");

  }
  else
  {
    isKindOfClass = 0;
  }

  objc_autoreleasePoolPop(v7);
  return isKindOfClass & 1;
}

void sub_10032A634(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10032A66C(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  void *v7;
  uint64_t *v8;
  __CFString *v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t *v14;
  void *v15;
  uint64_t *v16;
  void *v17;
  uint64_t *v18;
  void *v19;
  __CFString *v20;

  v7 = objc_autoreleasePoolPush();
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  v10 = (void *)CFPreferencesCopyAppValue(v9, CFSTR("com.apple.MobileBluetooth.debug"));

  v11 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    v12 = objc_msgSend(v10, "mutableCopy");
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a4));
    if (*((char *)a3 + 23) >= 0)
      v14 = a3;
    else
      v14 = (uint64_t *)*a3;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14));
    objc_msgSend(v12, "setObject:forKey:", v13, v15);

    if (*((char *)a2 + 23) >= 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
  }
  else
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a4));
    if (*((char *)a3 + 23) >= 0)
      v18 = a3;
    else
      v18 = (uint64_t *)*a3;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18));
    v12 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObject:forKey:](NSDictionary, "dictionaryWithObject:forKey:", v17, v19));

    if (*((char *)a2 + 23) >= 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
  }
  v20 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16));
  CFPreferencesSetAppValue(v20, v12, CFSTR("com.apple.MobileBluetooth.debug"));

  CFPreferencesAppSynchronize(CFSTR("com.apple.MobileBluetooth.debug"));
  objc_autoreleasePoolPop(v7);
}

void sub_10032A84C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_10032A8C0(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  void *v7;
  uint64_t *v8;
  __CFString *v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  char isKindOfClass;

  v7 = objc_autoreleasePoolPush();
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  v10 = (void *)CFPreferencesCopyAppValue(v9, CFSTR("com.apple.MobileBluetooth.debug"));

  v11 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    if (*((char *)a3 + 23) >= 0)
      v12 = a3;
    else
      v12 = (uint64_t *)*a3;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", v13));

    v15 = objc_opt_class(NSNumber);
    isKindOfClass = objc_opt_isKindOfClass(v14, v15);
    if ((isKindOfClass & 1) != 0)
      *a4 = objc_msgSend(v14, "unsignedLongLongValue");

  }
  else
  {
    isKindOfClass = 0;
  }

  objc_autoreleasePoolPop(v7);
  return isKindOfClass & 1;
}

void sub_10032A9D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10032AA08(uint64_t a1, uint64_t *a2, int64x2_t *a3)
{
  uint64_t *v5;
  __CFString *v6;
  uint64_t v7;
  id v8;
  char v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *context;
  void *v37;
  void *__p[2];
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  int64x2_t v45;
  uint64_t v46;
  int64x2_t *v47;
  _BYTE v48[128];

  context = objc_autoreleasePoolPush();
  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  v6 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5));
  v37 = (void *)CFPreferencesCopyAppValue(v6, CFSTR("com.apple.MobileBluetooth.debug"));

  v7 = objc_opt_class(NSArray);
  if ((objc_opt_isKindOfClass(v37, v7) & 1) != 0)
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v8 = v37;
    v9 = 0;
    v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v41;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v41 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i);
          v14 = objc_opt_class(NSString);
          if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
          {
            v15 = objc_retainAutorelease(v13);
            sub_100091AE8(__p, (char *)objc_msgSend(v15, "UTF8String"));
            v17 = a3->u64[1];
            v16 = a3[1].u64[0];
            if (v17 >= v16)
            {
              v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - a3->i64[0]) >> 3);
              v20 = v19 + 1;
              if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
                abort();
              v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - a3->i64[0]) >> 3);
              if (2 * v21 > v20)
                v20 = 2 * v21;
              if (v21 >= 0x555555555555555)
                v22 = 0xAAAAAAAAAAAAAAALL;
              else
                v22 = v20;
              v47 = a3 + 1;
              if (v22)
                v23 = (char *)sub_1002A479C((uint64_t)a3[1].i64, v22);
              else
                v23 = 0;
              v24 = &v23[24 * v19];
              v25 = *(_OWORD *)__p;
              *((_QWORD *)v24 + 2) = v39;
              *(_OWORD *)v24 = v25;
              __p[1] = 0;
              v39 = 0;
              __p[0] = 0;
              v27 = a3->i64[0];
              v26 = a3->u64[1];
              if (v26 == a3->i64[0])
              {
                v30 = vdupq_n_s64(v26);
                v28 = &v23[24 * v19];
              }
              else
              {
                v28 = &v23[24 * v19];
                do
                {
                  v29 = *(_OWORD *)(v26 - 24);
                  *((_QWORD *)v28 - 1) = *(_QWORD *)(v26 - 8);
                  *(_OWORD *)(v28 - 24) = v29;
                  v28 -= 24;
                  *(_QWORD *)(v26 - 16) = 0;
                  *(_QWORD *)(v26 - 8) = 0;
                  *(_QWORD *)(v26 - 24) = 0;
                  v26 -= 24;
                }
                while (v26 != v27);
                v30 = *a3;
              }
              v31 = v24 + 24;
              a3->i64[0] = (uint64_t)v28;
              a3->i64[1] = (uint64_t)(v24 + 24);
              v45 = v30;
              v32 = a3[1].i64[0];
              a3[1].i64[0] = (uint64_t)&v23[24 * v22];
              v46 = v32;
              v44 = v30.i64[0];
              sub_1002A56A4((uint64_t)&v44);
              v33 = SHIBYTE(v39);
              a3->i64[1] = (uint64_t)v31;
              if (v33 < 0)
                operator delete(__p[0]);
            }
            else
            {
              v18 = *(_OWORD *)__p;
              *(_QWORD *)(v17 + 16) = v39;
              *(_OWORD *)v17 = v18;
              a3->i64[1] = v17 + 24;
            }

            v9 = 1;
          }
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v40, v48, 16);
      }
      while (v10);
    }

    v34 = v9 & 1;
  }
  else
  {
    v34 = 0;
  }

  objc_autoreleasePoolPop(context);
  return v34;
}

void sub_10032AD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_10032AD6C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  void *v7;
  uint64_t *v8;
  __CFString *v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t *v14;
  void *v15;
  uint64_t *v16;
  void *v17;
  uint64_t *v18;
  void *v19;
  __CFString *v20;

  v7 = objc_autoreleasePoolPush();
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  v10 = (void *)CFPreferencesCopyAppValue(v9, CFSTR("com.apple.MobileBluetooth.debug"));

  v11 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
  {
    v12 = objc_msgSend(v10, "mutableCopy");
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a4));
    if (*((char *)a3 + 23) >= 0)
      v14 = a3;
    else
      v14 = (uint64_t *)*a3;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14));
    objc_msgSend(v12, "setObject:forKey:", v13, v15);

    if (*((char *)a2 + 23) >= 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
  }
  else
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a4));
    if (*((char *)a3 + 23) >= 0)
      v18 = a3;
    else
      v18 = (uint64_t *)*a3;
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18));
    v12 = (id)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObject:forKey:](NSDictionary, "dictionaryWithObject:forKey:", v17, v19));

    if (*((char *)a2 + 23) >= 0)
      v16 = a2;
    else
      v16 = (uint64_t *)*a2;
  }
  v20 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16));
  CFPreferencesSetAppValue(v20, v12, CFSTR("com.apple.MobileBluetooth.debug"));

  CFPreferencesAppSynchronize(CFSTR("com.apple.MobileBluetooth.debug"));
  objc_autoreleasePoolPop(v7);
}

void sub_10032AF4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL sub_10032AFC0(_BYTE *a1)
{
  return a1[237] || ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1) & 1) != 0 || a1[89] != 0;
}

BOOL sub_10032B008(_BYTE *a1)
{
  if (a1[250] || a1[248])
    return 1;
  if (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1) & 1) != 0)
    return 0;
  return os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT);
}

void sub_10032B05C(uint64_t a1)
{
  NSObject *v2;
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  CFTypeID v5;
  __CFDictionary *MutableCopy;
  uint8_t v7[16];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "HCI tracing timer expired - disabling unlimited tracing", v7, 2u);
  }
  v3 = (const __CFDictionary *)CFPreferencesCopyAppValue(CFSTR("HCITraces"), CFSTR("com.apple.MobileBluetooth.debug"));
  v4 = v3;
  if (v3 && (v5 = CFGetTypeID(v3), v5 == CFDictionaryGetTypeID()))
  {
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v4);
    CFDictionaryRemoveValue(MutableCopy, CFSTR("UnlimitedHCIFileSize"));
    CFDictionaryRemoveValue(MutableCopy, CFSTR("MaxFileSize"));
    CFDictionaryRemoveValue(MutableCopy, CFSTR("AutoDisableTime"));
  }
  else
  {
    MutableCopy = 0;
  }
  CFPreferencesSetAppValue(CFSTR("HCITraces"), MutableCopy, CFSTR("com.apple.MobileBluetooth.debug"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.MobileBluetooth.debug"));
  sub_100328884(a1);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v4)
    CFRelease(v4);
}

void sub_10032B18C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  dispatch_source_cancel(*(dispatch_source_t *)(v1 + 32));
  sub_10032B05C(v1);
}

void sub_10032B1B4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  dispatch_release(*(dispatch_object_t *)(v1 + 32));
  *(_QWORD *)(v1 + 32) = 0;
}

void sub_10032B1DC(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  int v12;
  _BOOL4 v13;
  _BOOL4 v14;
  _BOOL4 v15;
  int v16;
  _BOOL4 v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  std::string *v32;
  char v33;
  NSObject *global_queue;
  _BOOL4 v35;
  _BOOL4 v36;
  int v37;
  int v38;
  int v39;
  _BOOL4 v40;
  _QWORD block[4];
  std::string v42;
  void *v43[2];
  char v44;
  __int16 v45;
  BOOL v46;
  unsigned __int8 v47;
  __int16 v48;
  BOOL v49;
  BOOL v50;
  unsigned __int8 v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  void *__p[2];
  char v56;
  std::string v57;

  v4 = sub_100027F68();
  *(_BYTE *)(a1 + 196) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  sub_100091AE8(&v57, "FWStreamLogging");
  sub_100091AE8(__p, "FWCoreDumpEnable");
  (*(void (**)(uint64_t, std::string *, void **, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v57, __p, a1 + 196);
  if (v56 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  sub_100114920(*(unsigned __int8 *)(a1 + 196));
  if (!*(_BYTE *)(a1 + 88))
    return;
  sub_1000438A4();
  if (sub_100331A98())
  {
    LOBYTE(v43[0]) = 0;
    v5 = sub_100027F68();
    LOBYTE(v43[0]) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    sub_100091AE8(&v57, "Enable FW Logs");
    sub_100091AE8(__p, "FWEnhancedLoggingEnable");
    v6 = (*(uint64_t (**)(uint64_t, std::string *, void **, void **))(*(_QWORD *)a1 + 72))(a1, &v57, __p, v43);
    if (v56 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    v7 = *(unsigned __int8 *)(a1 + 183);
    v8 = v7 != LOBYTE(v43[0]);
    if (v7 != LOBYTE(v43[0]))
      *(_BYTE *)(a1 + 183) = v43[0];
    v9 = sub_10003BE44();
    v11 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 384))(v9)
       && (v10 = sub_100027F68(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10))
       && *(_DWORD *)(sub_1000438A4() + 712) > 0x17u;
    if (*(_BYTE *)(a1 + 183))
    {
      if (*(_DWORD *)(sub_1000438A4() + 712) == 15)
        v12 = 2048;
      else
        v12 = 3072;
      if (*(_DWORD *)(a1 + 184) != v12)
      {
        *(_DWORD *)(a1 + 184) = v12;
        v8 = 1;
      }
      if (*(_DWORD *)(a1 + 188) != 4)
      {
        *(_DWORD *)(a1 + 188) = 4;
        v8 = 1;
      }
      v54 = v11;
      v53 = v11;
      v52 = v11;
      v51 = 0;
      v50 = v11;
      v49 = v11;
      v48 = 0;
      v47 = 0;
      v46 = v11;
      v45 = 0;
      sub_100091AE8(&v57, "Route to HCI");
      sub_100091AE8(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(_QWORD *)a1 + 72))(a1, &v57, __p, &v54);
      if (v56 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      v13 = v54;
      sub_100091AE8(&v57, "Log Level Lite");
      sub_100091AE8(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(_QWORD *)a1 + 72))(a1, &v57, __p, &v53);
      if (v56 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      v14 = v53;
      sub_100091AE8(&v57, "Log Level Advanced");
      sub_100091AE8(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(_QWORD *)a1 + 72))(a1, &v57, __p, &v52);
      if (v56 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      v15 = v52;
      sub_100091AE8(&v57, "Voice");
      sub_100091AE8(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, unsigned __int8 *))(*(_QWORD *)a1 + 72))(a1, &v57, __p, &v51);
      if (v56 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      v16 = v51;
      sub_100091AE8(&v57, "CoEx");
      sub_100091AE8(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(_QWORD *)a1 + 72))(a1, &v57, __p, &v50);
      if (v56 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      v17 = v50;
      sub_100091AE8(&v57, "CoEx1");
      sub_100091AE8(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(_QWORD *)a1 + 72))(a1, &v57, __p, &v49);
      if (v56 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      v40 = v49;
      sub_100091AE8(&v57, "CoEx2");
      sub_100091AE8(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, char *))(*(_QWORD *)a1 + 72))(a1, &v57, __p, (char *)&v48 + 1);
      if (v56 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      v39 = HIBYTE(v48);
      sub_100091AE8(&v57, "LTE CoEx");
      sub_100091AE8(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, __int16 *))(*(_QWORD *)a1 + 72))(a1, &v57, __p, &v48);
      if (v56 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      v38 = v48;
      sub_100091AE8(&v57, "Apipe");
      sub_100091AE8(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, unsigned __int8 *))(*(_QWORD *)a1 + 72))(a1, &v57, __p, &v47);
      if (v56 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      v37 = v47;
      sub_100091AE8(&v57, "Non Connection");
      sub_100091AE8(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(_QWORD *)a1 + 72))(a1, &v57, __p, &v46);
      v35 = v17;
      if (v56 < 0)
        operator delete(__p[0]);
      v18 = v16;
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      v36 = v11;
      v19 = v46;
      sub_100091AE8(&v57, "Scan Core");
      sub_100091AE8(__p, "FWEnhancedLoggingEnable");
      v20 = a2;
      (*(void (**)(uint64_t, std::string *, void **, char *))(*(_QWORD *)a1 + 72))(a1, &v57, __p, (char *)&v45 + 1);
      v21 = v8;
      if (v56 < 0)
        operator delete(__p[0]);
      v22 = v6;
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      v23 = HIBYTE(v45);
      sub_100091AE8(&v57, "HP Link");
      sub_100091AE8(__p, "FWEnhancedLoggingEnable");
      (*(void (**)(uint64_t, std::string *, void **, __int16 *))(*(_QWORD *)a1 + 72))(a1, &v57, __p, &v45);
      v24 = v13 | (2 * v14) | (4 * v15) | (8 * v18) | (16 * v35) | (32 * v40) | (v39 << 6) | (v38 << 7) | (v37 << 8) | (v19 << 9);
      if (v56 < 0)
        operator delete(__p[0]);
      v25 = v24 | (v23 << 10);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      v26 = v25 | (v45 << 12);
      v6 = v22;
      v8 = v21;
      if (*(_DWORD *)(a1 + 192) != v26)
      {
        *(_DWORD *)(a1 + 192) = v26;
        v8 = 1;
      }
      a2 = v20;
      v11 = v36;
    }
    if (v8 || a2)
    {
      if (*(_BYTE *)(a1 + 183))
      {
        v27 = sub_1000438A4();
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v27 + 1248))(v27, 0, 0, 0);
      }
      v28 = sub_1000438A4();
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v28 + 1248))(v28, *(unsigned __int8 *)(a1 + 183), *(unsigned int *)(a1 + 184), *(unsigned int *)(a1 + 188));
      if (*(_BYTE *)(a1 + 183))
      {
        v29 = sub_1000438A4();
        if ((v6 | v11) == 1)
          v30 = *(unsigned int *)(a1 + 192);
        else
          v30 = 2;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 3368))(v29, v30);
      }
    }
  }
  v54 = 0;
  sub_100091AE8(&v57, "FWStreamLogging");
  sub_100091AE8(__p, "FWStreamLoggingTriggerLogDump");
  (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(_QWORD *)a1 + 72))(a1, &v57, __p, &v54);
  if (v56 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (v54)
  {
    sub_100091AE8(&v57, "FWStreamLogging");
    sub_100091AE8(__p, "FWStreamLoggingTriggerLogDump");
    (*(void (**)(uint64_t, std::string *, void **, _QWORD))(*(_QWORD *)a1 + 80))(a1, &v57, __p, 0);
    if (v56 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    memset(&v57, 0, sizeof(v57));
    sub_100091AE8(__p, "FWStreamLogging");
    sub_100091AE8(v43, "FWStreamLoggingLogDumpReason");
    v31 = (*(uint64_t (**)(uint64_t, void **, void **, std::string *))(*(_QWORD *)a1 + 56))(a1, __p, v43, &v57);
    if (v44 < 0)
      operator delete(v43[0]);
    if (v56 < 0)
    {
      operator delete(__p[0]);
      if ((v31 & 1) != 0)
        goto LABEL_101;
    }
    else if ((v31 & 1) != 0)
    {
LABEL_101:
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v57;
      else
        v32 = (std::string *)v57.__r_.__value_.__r.__words[0];
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 496))(a1, v32);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      goto LABEL_106;
    }
    std::string::assign(&v57, "Manually triggered log dump");
    goto LABEL_101;
  }
LABEL_106:
  v53 = 0;
  sub_100091AE8(&v57, "FWStreamLogging");
  sub_100091AE8(__p, "FWCoreDumpTrigger");
  (*(void (**)(uint64_t, std::string *, void **, BOOL *))(*(_QWORD *)a1 + 72))(a1, &v57, __p, &v53);
  if (v56 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (v53)
  {
    sub_100091AE8(&v57, "FWStreamLogging");
    sub_100091AE8(__p, "FWCoreDumpTrigger");
    (*(void (**)(uint64_t, std::string *, void **, _QWORD))(*(_QWORD *)a1 + 80))(a1, &v57, __p, 0);
    if (v56 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v57.__r_.__value_.__l.__data_);
    memset(&v57, 0, sizeof(v57));
    sub_100091AE8(__p, "FWStreamLogging");
    sub_100091AE8(v43, "FWCoreDumpReason");
    v33 = (*(uint64_t (**)(uint64_t, void **, void **, std::string *))(*(_QWORD *)a1 + 56))(a1, __p, v43, &v57);
    if (v44 < 0)
      operator delete(v43[0]);
    if (v56 < 0)
    {
      operator delete(__p[0]);
      if ((v33 & 1) != 0)
      {
LABEL_122:
        block[0] = _NSConcreteStackBlock;
        block[1] = 3321888768;
        block[2] = sub_10032BDB8;
        block[3] = &unk_100927460;
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          sub_10003430C(&v42, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
        else
          v42 = v57;
        global_queue = dispatch_get_global_queue(0, 0);
        dispatch_async(global_queue, block);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
        return;
      }
    }
    else if ((v33 & 1) != 0)
    {
      goto LABEL_122;
    }
    std::string::assign(&v57, "Manually triggered core dump");
    goto LABEL_122;
  }
}

void sub_10032BCC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a32 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 89) < 0)
    operator delete(*(void **)(v32 - 112));
  _Unwind_Resume(exception_object);
}

void sub_10032BDB8(uint64_t a1)
{
  void *v2;
  void *__p[2];
  uint64_t v4;

  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100927598);
  v2 = off_100977A50;
  if (*(char *)(a1 + 55) < 0)
  {
    sub_10003430C(__p, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 48);
  }
  sub_1004A37B0((uint64_t)v2, 3703, (__int128 *)__p);
}

void sub_10032BE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10032BE74(IOBTDebug *a1)
{
  NSObject *v1;
  uint8_t v2[8];

  if (*((_BYTE *)a1 + 183))
    IOBTDebug::create(a1);
  v1 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "FW log streaming disabled, skipping BTDebug log dump", v2, 2u);
  }
}

void sub_10032BF48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10031F900((IOBTDebug **)va, 0);
  _Unwind_Resume(a1);
}

void sub_10032BF60(uint64_t a1, uint64_t a2)
{
  sub_100330E28(a1 + 72, a2);
}

uint64_t sub_10032BF68(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v5;
  NSObject *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint8_t buf[4];

  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = -536870186;
  sub_1000438A4();
  v5 = sub_100331A98();
  if (v5 && a1[196])
    IOBTDebug::create((IOBTDebug *)v5);
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "FW PCIe core dumps disabled or not supported", buf, 2u);
  }
  if (*((_DWORD *)v9 + 6))
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 496))(a1, a3);

  _Block_object_dispose(&v8, 8);
  return 0;
}

void sub_10032C244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  IOBTDebug *v10;
  va_list va;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, IOBTDebug *);
  sub_10031F900((IOBTDebug **)va, 0);

  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10032C288(uint64_t a1, int a2)
{
  uint64_t v2;
  NSObject *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(v2 + 8) + 24) = a2;
  dispatch_group_leave(v3);
}

void sub_10032C298(void *a1, uint64_t a2)
{
  void (**v3)(id, _QWORD);
  NSObject *v4;
  _DWORD v5[2];

  v3 = objc_retainBlock(a1);
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PCIe core dump complete: 0x%08X", (uint8_t *)v5, 8u);
  }
  v3[2](v3, a2);

}

void sub_10032C35C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10032C374(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  int v14;
  int v15;
  __int16 v16;
  uint64_t v17;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 32);
    v14 = 67109376;
    v15 = v3;
    v16 = 2048;
    v17 = qword_100991DA0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "setDoubleHeightStatusBar: %d %p", (uint8_t *)&v14, 0x12u);
  }
  v4 = dword_100991DB8;
  if (!dword_100991DB8)
  {
    v4 = getpid();
    dword_100991DB8 = v4;
  }
  v5 = qword_100991DA0;
  if ((_DWORD)v4)
    v6 = qword_100991DA0 == 0;
  else
    v6 = 0;
  if (v6)
  {
    v7 = objc_claimAutoreleasedReturnValue(+[SBSStatusBarStyleOverridesAssertion assertionWithStatusBarStyleOverrides:forPID:exclusive:showsWhenForeground:](SBSStatusBarStyleOverridesAssertion, "assertionWithStatusBarStyleOverrides:forPID:exclusive:showsWhenForeground:", 0x200000, v4, 0, 1));
    v8 = (void *)qword_100991DA0;
    qword_100991DA0 = v7;

    LODWORD(v4) = dword_100991DB8;
    v5 = qword_100991DA0;
  }
  if ((_DWORD)v4 && v5)
  {
    if (*(_BYTE *)(a1 + 32))
    {
      if (qword_100991DB0)
      {
        objc_msgSend((id)qword_100991DB0, "invalidate");
        v9 = (void *)qword_100991DB0;
        qword_100991DB0 = 0;

      }
      if (!byte_100991DA8)
      {
        v10 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v14) = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Acquire assertion", (uint8_t *)&v14, 2u);
        }
        objc_msgSend((id)qword_100991DA0, "acquireWithHandler:invalidationHandler:", &stru_1009274D8, &stru_1009274F8);
        objc_msgSend((id)qword_100991DA0, "setStatusString:", CFSTR("Recording Bluetooth Data"));
      }
    }
    else if (byte_100991DA8 && !qword_100991DB0)
    {
      v12 = objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:repeats:block:](NSTimer, "scheduledTimerWithTimeInterval:repeats:block:", 0, &stru_100927538, 2.0));
      v13 = (void *)qword_100991DB0;
      qword_100991DB0 = v12;

    }
  }
  else
  {
    v11 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 67109376;
      v15 = v4;
      v16 = 2048;
      v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Couldn't get pid: %d or assertion: %p", (uint8_t *)&v14, 0x12u);
    }
  }
}

void sub_10032C5D4(id a1, BOOL a2)
{
  _BOOL4 v2;
  NSObject *v3;
  _DWORD v4[2];

  v2 = a2;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SBSStatusBarStyleOverridesAssertion: Acquire handler, acquired: %d", (uint8_t *)v4, 8u);
  }
  byte_100991DA8 = v2;
}

void sub_10032C67C(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "SBSStatusBarStyleOverridesAssertion: Invalidation handler", v2, 2u);
  }
  byte_100991DA8 = 0;
}

void sub_10032C6E8(id a1, NSTimer *a2)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Invalidating assert", v3, 2u);
  }
  objc_msgSend((id)qword_100991DA0, "invalidate");
  byte_100991DA8 = 0;
}

uint64_t sub_10032C760(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 176);
}

uint64_t sub_10032C768(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 180);
}

uint64_t sub_10032C770(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 178);
}

uint64_t sub_10032C778(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 179);
}

uint64_t sub_10032C780(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 177);
}

uint64_t sub_10032C788(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10032C7FC;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100991DC0 != -1)
    dispatch_once(&qword_100991DC0, block);
  return byte_100991DBC;
}

void sub_10032C7FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  void *__p[2];
  char v7;
  _BYTE buf[12];
  char v9;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ForcePhyStats");
  v3 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v2 + 72))(v2, buf, __p, &byte_100991DBC);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3)
      return;
  }
  else if (!v3)
  {
    return;
  }
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100991DBC)
      v5 = "enabled";
    else
      v5 = "disabled";
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Forcing PHY Stats - %{public}s", buf, 0xCu);
  }
  *(_BYTE *)(v1 + 197) = byte_100991DBC;
}

void sub_10032C944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032C980()
{
  if (qword_100991DD0 != -1)
    dispatch_once(&qword_100991DD0, &stru_100927578);
  return byte_100991DC8;
}

void sub_10032C9C0(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  void *__p[2];
  char v6;
  _BYTE buf[12];
  char v8;

  v1 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ForceLatencyStats");
  v2 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, __p, &byte_100991DC8);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2)
      return;
  }
  else if (!v2)
  {
    return;
  }
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100991DC8)
      v4 = "enabled";
    else
      v4 = "disabled";
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Forcing Latency Stats - %{public}s", buf, 0xCu);
  }
}

void sub_10032CAF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032CB30(uint64_t a1, uint64_t a2)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10032CBA4;
  block[3] = &unk_100917378;
  block[4] = a2;
  if (qword_100991DE0 != -1)
    dispatch_once(&qword_100991DE0, block);
  return byte_100991DD8;
}

void sub_10032CBA4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  __int16 v12;
  _BYTE buf[12];
  char v14;

  v12 = 0;
  v2 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ScanAllowListEnabled");
  (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v2 + 72))(v2, buf, __p, (char *)&v12 + 1);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(*(void **)buf);
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (HIBYTE(v12))
      v4 = "enabled";
    else
      v4 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "ScanAllowList is %s", buf, 0xCu);
  }
  if (HIBYTE(v12))
  {
    byte_100991DD8 = 1;
    v5 = sub_100027F68();
    sub_100091AE8(buf, "LEScanAgentList");
    (*(void (**)(uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v5 + 48))(v5, buf, *(_QWORD *)(a1 + 32));
    goto LABEL_23;
  }
  v6 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ScanDenyListEnabled");
  (*(void (**)(uint64_t, _BYTE *, void **, __int16 *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v12);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(*(void **)buf);
  v7 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if ((_BYTE)v12)
      v8 = "enabled";
    else
      v8 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ScanDenyList is %s", buf, 0xCu);
  }
  if ((_BYTE)v12)
  {
    byte_100991DD8 = 2;
    v9 = sub_100027F68();
    sub_100091AE8(buf, "LEScanAgentList");
    (*(void (**)(uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v9 + 48))(v9, buf, *(_QWORD *)(a1 + 32));
LABEL_23:
    if (v14 < 0)
      operator delete(*(void **)buf);
  }
}

void sub_10032CE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032CE80(uint64_t a1, uint64_t a2)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10032CEF4;
  block[3] = &unk_100917378;
  block[4] = a2;
  if (qword_100991DF0 != -1)
    dispatch_once(&qword_100991DF0, block);
  return byte_100991DE8;
}

void sub_10032CEF4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  __int16 v12;
  _BYTE buf[12];
  char v14;

  v12 = 0;
  v2 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ConnectionScanAllowListEnabled");
  (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v2 + 72))(v2, buf, __p, (char *)&v12 + 1);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(*(void **)buf);
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (HIBYTE(v12))
      v4 = "enabled";
    else
      v4 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "ConnectionScanAllowList is %s", buf, 0xCu);
  }
  if (HIBYTE(v12))
  {
    byte_100991DE8 = 1;
    v5 = sub_100027F68();
    sub_100091AE8(buf, "LEConnectionScanAgentList");
    (*(void (**)(uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v5 + 48))(v5, buf, *(_QWORD *)(a1 + 32));
    goto LABEL_23;
  }
  v6 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ConnectionScanDenyListEnabled");
  (*(void (**)(uint64_t, _BYTE *, void **, __int16 *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v12);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(*(void **)buf);
  v7 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if ((_BYTE)v12)
      v8 = "enabled";
    else
      v8 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ConnectionScanDenyList is %s", buf, 0xCu);
  }
  if ((_BYTE)v12)
  {
    byte_100991DE8 = 2;
    v9 = sub_100027F68();
    sub_100091AE8(buf, "LEConnectionScanAgentList");
    (*(void (**)(uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v9 + 48))(v9, buf, *(_QWORD *)(a1 + 32));
LABEL_23:
    if (v14 < 0)
      operator delete(*(void **)buf);
  }
}

void sub_10032D184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032D1D0(uint64_t a1, uint64_t a2)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10032D244;
  block[3] = &unk_100917378;
  block[4] = a2;
  if (qword_100991E00 != -1)
    dispatch_once(&qword_100991E00, block);
  return byte_100991DF8;
}

void sub_10032D244(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  __int16 v12;
  _BYTE buf[12];
  char v14;

  v12 = 0;
  v2 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "advAllowListEnabled");
  (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v2 + 72))(v2, buf, __p, (char *)&v12 + 1);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(*(void **)buf);
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (HIBYTE(v12))
      v4 = "enabled";
    else
      v4 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "AdvAllowList is %s", buf, 0xCu);
  }
  if (HIBYTE(v12))
  {
    byte_100991DF8 = 1;
    v5 = sub_100027F68();
    sub_100091AE8(buf, "AdvAgentList");
    (*(void (**)(uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v5 + 48))(v5, buf, *(_QWORD *)(a1 + 32));
    goto LABEL_23;
  }
  v6 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "AdvDenyListEnabled");
  (*(void (**)(uint64_t, _BYTE *, void **, __int16 *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v12);
  if (v11 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(*(void **)buf);
  v7 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if ((_BYTE)v12)
      v8 = "enabled";
    else
      v8 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "AdvDenyList is %s", buf, 0xCu);
  }
  if ((_BYTE)v12)
  {
    byte_100991DF8 = 2;
    v9 = sub_100027F68();
    sub_100091AE8(buf, "AdvAgentList");
    (*(void (**)(uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v9 + 48))(v9, buf, *(_QWORD *)(a1 + 32));
LABEL_23:
    if (v14 < 0)
      operator delete(*(void **)buf);
  }
}

void sub_10032D4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032D520(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 90);
}

uint64_t sub_10032D528(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 91);
}

uint64_t sub_10032D530(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 198);
}

uint64_t sub_10032D538(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 199);
}

uint64_t sub_10032D540(uint64_t a1)
{
  return *(unsigned int *)(a1 + 200);
}

uint64_t sub_10032D548(uint64_t a1)
{
  return *(unsigned int *)(a1 + 208);
}

uint64_t sub_10032D550(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 214);
}

uint64_t sub_10032D558(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 215);
}

BOOL sub_10032D560(uint64_t a1)
{
  return *(_BYTE *)(a1 + 204) == 0;
}

uint64_t sub_10032D570(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 212);
}

uint64_t sub_10032D578(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 213);
}

uint64_t sub_10032D580(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 217);
}

uint64_t sub_10032D588(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 216);
}

uint64_t sub_10032D590(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 92);
}

uint64_t sub_10032D598(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 220);
}

uint64_t sub_10032D5A0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 221);
}

void sub_10032D5A8(uint64_t a1, char *a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  std::string *p_str;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  uint64_t v16;
  void *__p[2];
  char v18;
  std::string __str;
  _BYTE buf[12];
  __int16 v21;
  std::string *v22;
  char v23;

  memset(&__str, 0, sizeof(__str));
  *(_QWORD *)a4 = 0;
  *(_WORD *)(a4 + 8) = 0;
  sub_100091AE8(buf, "Diversity");
  sub_100091AE8(__p, a2);
  v10 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, std::string *))(*(_QWORD *)a1 + 56))(a1, buf, __p, &__str);
  *a3 = v10;
  if (v18 < 0)
    operator delete(__p[0]);
  if (v23 < 0)
    operator delete(*(void **)buf);
  if (*a3)
  {
    if (sub_10032D7C0(v10, &__str, a4))
    {
      v11 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_14;
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a5;
      v21 = 2080;
      v22 = p_str;
      v13 = "Diversity coex %s override: %s";
      v14 = v11;
      v15 = 22;
    }
    else
    {
      *a3 = 0;
      v16 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_14;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = a5;
      v13 = "Warning: Diversity coex %s override: Invalid.  Override disabled.";
      v14 = v16;
      v15 = 12;
    }
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, buf, v15);
  }
LABEL_14:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_10032D770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_10032D7C0(int a1, std::string *__str, uint64_t a3)
{
  std::string::size_type size;
  std::string::size_type v6;
  unint64_t v7;
  BOOL v8;
  std::string *v9;
  int v10;
  char *__endptr;
  std::string v13;
  uint64_t v14;
  __int16 v15;

  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (size == 20)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v15 = 0;
    v14 = 0;
    while (1)
    {
      memset(&v13, 0, sizeof(v13));
      std::string::basic_string(&v13, __str, v6, 2uLL, (std::allocator<char> *)&__endptr);
      __endptr = 0;
      v9 = (v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v13
         : (std::string *)v13.__r_.__value_.__r.__words[0];
      *((_BYTE *)&v14 + v7) = strtol((const char *)v9, &__endptr, 16);
      v10 = *__endptr;
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
      if (v10)
        break;
      v8 = v7 > 8;
      v6 += 2;
      if (++v7 == 10)
      {
        *(_QWORD *)a3 = v14;
        *(_WORD *)(a3 + 8) = v15;
        return 1;
      }
    }
  }
  else
  {
    return 0;
  }
  return v8;
}

uint64_t sub_10032D904(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 93);
}

uint64_t sub_10032D90C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t sub_10032D914(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 100);
}

uint64_t sub_10032D91C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_10032D924(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 108);
}

uint64_t sub_10032D92C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 127);
}

uint64_t sub_10032D934(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 222);
}

uint64_t sub_10032D93C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 224);
}

uint64_t sub_10032D944(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 228);
}

uint64_t sub_10032D94C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 172);
}

uint64_t sub_10032D954(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 173);
}

uint64_t sub_10032D95C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 174);
}

uint64_t sub_10032D964(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 175);
}

uint64_t sub_10032D96C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 232);
}

void sub_10032D974(_BYTE *a1, int a2)
{
  uint64_t v4;
  const __CFString *v5;
  int v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;

  v4 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 352))(v4))
  {
    if (a1[249] != a2)
    {
      a1[249] = a2;
      if (a2)
        v5 = CFSTR("yes");
      else
        v5 = CFSTR("no");
      CFPreferencesSetAppValue(CFSTR("ENLoggingEntitledApp"), v5, CFSTR("com.apple.MobileBluetooth.debug"));
      CFPreferencesAppSynchronize(CFSTR("com.apple.MobileBluetooth.debug"));
      v6 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 208))(a1);
      v7 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v8 = a1[249];
        v10[0] = 67109376;
        v10[1] = v8;
        v11 = 1024;
        v12 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "fENAppHasLoggingEntitlement:%d plistEntitled:%d", (uint8_t *)v10, 0xEu);
      }
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 256))(a1);
      sub_100328884((uint64_t)a1);
    }
    v9 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "setENAppHasLoggingEntitlement", (uint8_t *)v10, 2u);
    }
  }
}

uint64_t sub_10032DAF4()
{
  return 1;
}

uint64_t sub_10032DAFC()
{
  return 0;
}

void sub_10032DB04(uint64_t a1, char a2, char a3)
{
  NSObject *v3;
  _QWORD v4[5];
  char v5;
  char v6;

  v3 = *(NSObject **)(a1 + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10032DB64;
  v4[3] = &unk_100920960;
  v4[4] = a1;
  v5 = a2;
  v6 = a3;
  dispatch_sync(v3, v4);
}

void sub_10032DB64(uint64_t a1)
{
  unsigned __int8 *v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  const __CFString *v7;
  const __CFString *v8;
  NSObject *v9;
  uint8_t v10[16];

  v2 = *(unsigned __int8 **)(a1 + 32);
  v3 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 352))(v3))
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 == v2[251])
    {
      v5 = *(unsigned __int8 *)(a1 + 41);
      v6 = v2[250];
      if (v5 == v6)
      {
LABEL_15:
        v9 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v10 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "setENLoggingParams", v10, 2u);
        }
        return;
      }
    }
    else
    {
      v2[251] = v4;
      if (v4)
        v7 = CFSTR("yes");
      else
        v7 = CFSTR("no");
      CFPreferencesSetAppValue(CFSTR("rpiLogging"), v7, CFSTR("com.apple.MobileBluetooth.debug"));
      CFPreferencesAppSynchronize(CFSTR("com.apple.MobileBluetooth.debug"));
      v5 = *(unsigned __int8 *)(a1 + 41);
      v6 = v2[250];
    }
    if (v5 != v6)
    {
      v2[250] = v5;
      if (v5)
        v8 = CFSTR("yes");
      else
        v8 = CFSTR("no");
      CFPreferencesSetAppValue(CFSTR("sensitiveLogging"), v8, CFSTR("com.apple.MobileBluetooth.debug"));
      CFPreferencesAppSynchronize(CFSTR("com.apple.MobileBluetooth.debug"));
    }
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v2 + 256))(v2);
    sub_100328884((uint64_t)v2);
    goto LABEL_15;
  }
}

BOOL sub_10032DCB0()
{
  CFPropertyListRef v0;
  const void *v1;
  _BOOL8 v2;

  v0 = CFPreferencesCopyAppValue(CFSTR("ENLoggingEntitledApp"), CFSTR("com.apple.MobileBluetooth.debug"));
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFEqual(v0, CFSTR("yes")) != 0;
  CFRelease(v1);
  return v2;
}

BOOL sub_10032DD0C()
{
  CFPropertyListRef v0;
  const void *v1;
  _BOOL8 v2;

  v0 = CFPreferencesCopyAppValue(CFSTR("sensitiveLogging"), CFSTR("com.apple.MobileBluetooth.debug"));
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFEqual(v0, CFSTR("yes")) != 0;
  CFRelease(v1);
  return v2;
}

BOOL sub_10032DD68()
{
  CFPropertyListRef v0;
  const void *v1;
  _BOOL8 v2;

  v0 = CFPreferencesCopyAppValue(CFSTR("rpiLogging"), CFSTR("com.apple.MobileBluetooth.debug"));
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFEqual(v0, CFSTR("yes")) != 0;
  CFRelease(v1);
  return v2;
}

void sub_10032DDC4(_BYTE *a1)
{
  _BOOL4 v2;
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  _BOOL4 v19;

  a1[253] = a1[250];
  v2 = ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1) && !a1[252] || a1[249])
    && a1[250]
    && a1[251] != 0;
  a1[254] = v2;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = a1[250];
    v5 = a1[251];
    v6 = a1[252];
    v7 = a1[249];
    v8 = a1[253];
    v9[0] = 67110400;
    v9[1] = v4;
    v10 = 1024;
    v11 = v5;
    v12 = 1024;
    v13 = v6;
    v14 = 1024;
    v15 = v7;
    v16 = 1024;
    v17 = v8;
    v18 = 1024;
    v19 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "fENSensitiveLogging: %d, fENRPILogging: %d, fRequireENLoggingProfileOnInternal:%d, fENAppHasLoggingEntitlement:%d, fPrivacySensitiveENLoggingEnabled:%d fRPIENLoggingEnabled: %d", (uint8_t *)v9, 0x26u);
  }
}

BOOL sub_10032DEF4(_BYTE *a1)
{
  _BOOL8 v2;
  NSObject *v3;
  int v4;
  int v5;
  _DWORD v7[2];
  __int16 v8;
  int v9;

  v2 = (((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1) & 1) != 0 || a1[249]) && a1[248] != 0;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = a1[249];
    v5 = a1[248];
    v7[0] = 67109376;
    v7[1] = v4;
    v8 = 1024;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "fENAppHasLoggingEntitlement:%d fInsecureDatabasePath:%d", (uint8_t *)v7, 0xEu);
  }
  return v2;
}

uint64_t sub_10032DFE0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 257);
}

uint64_t sub_10032DFE8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 258);
}

uint64_t sub_10032DFF0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 259);
}

uint64_t sub_10032DFF8(uint64_t a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, _BYTE *a6)
{
  return sub_10032E018(a1, "CBUseCaseDigitalID", a2, a3, a4, a5, a6);
}

uint64_t sub_10032E018(uint64_t a1, const std::string::value_type *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, _BYTE *a6, _BYTE *a7)
{
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  std::string *v17;
  int v18;
  NSObject *v19;
  std::string *v20;
  uint64_t v21;
  std::string *v22;
  int v23;
  NSObject *v24;
  std::string *v25;
  uint64_t v26;
  std::string *v27;
  int v28;
  NSObject *v29;
  std::string *v30;
  uint64_t v31;
  std::string *v32;
  int v33;
  NSObject *v34;
  std::string *v35;
  uint64_t v36;
  std::string *v37;
  int v38;
  NSObject *v39;
  std::string *v40;
  uint64_t v41;
  void *__p[2];
  char v44;
  std::string v45;
  int v46;
  int v47;
  int v48;
  int v49;
  _BYTE buf[12];
  __int16 v51;
  int v52;
  char v53;

  v13 = *a3;
  v48 = *a4;
  v49 = v13;
  v14 = *a5;
  v15 = *a6;
  v46 = *a7;
  v47 = v14;
  memset(&v45, 0, sizeof(v45));
  sub_100091AE8(&v45, "LEConnectionPrioritization");
  std::string::append(&v45, a2);
  v16 = sub_100027F68();
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v45;
  else
    v17 = (std::string *)v45.__r_.__value_.__r.__words[0];
  sub_100091AE8(buf, (char *)v17);
  sub_100091AE8(__p, "priority");
  v18 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v16 + 128))(v16, buf, __p, &v49);
  if (v44 < 0)
    operator delete(__p[0]);
  if (v53 < 0)
  {
    operator delete(*(void **)buf);
    if (!v18)
      goto LABEL_14;
  }
  else if (!v18)
  {
    goto LABEL_14;
  }
  v19 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v20 = &v45;
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v20 = (std::string *)v45.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v20;
    v51 = 1024;
    v52 = v49;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%s priority parameter set to %d", buf, 0x12u);
  }
LABEL_14:
  v21 = sub_100027F68();
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v45;
  else
    v22 = (std::string *)v45.__r_.__value_.__r.__words[0];
  sub_100091AE8(buf, (char *)v22);
  sub_100091AE8(__p, "protectWLAN");
  v23 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v21 + 128))(v21, buf, __p, &v48);
  if (v44 < 0)
    operator delete(__p[0]);
  if (v53 < 0)
  {
    operator delete(*(void **)buf);
    if (!v23)
      goto LABEL_28;
  }
  else if (!v23)
  {
    goto LABEL_28;
  }
  v24 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v25 = &v45;
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v25 = (std::string *)v45.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v25;
    v51 = 1024;
    v52 = v48;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%s protectWLAN parameter set to %d", buf, 0x12u);
  }
  v18 = 1;
LABEL_28:
  v26 = sub_100027F68();
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = &v45;
  else
    v27 = (std::string *)v45.__r_.__value_.__r.__words[0];
  sub_100091AE8(buf, (char *)v27);
  sub_100091AE8(__p, "protectLEA");
  v28 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v26 + 128))(v26, buf, __p, &v47);
  if (v44 < 0)
    operator delete(__p[0]);
  if (v53 < 0)
  {
    operator delete(*(void **)buf);
    if (!v28)
      goto LABEL_42;
  }
  else if (!v28)
  {
    goto LABEL_42;
  }
  v29 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v30 = &v45;
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v30 = (std::string *)v45.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v30;
    v51 = 1024;
    v52 = v47;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%s protectLEA parameter set to %d", buf, 0x12u);
  }
  v18 = 1;
LABEL_42:
  v31 = sub_100027F68();
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = &v45;
  else
    v32 = (std::string *)v45.__r_.__value_.__r.__words[0];
  sub_100091AE8(buf, (char *)v32);
  sub_100091AE8(__p, "protectHFPA2DP");
  v33 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v31 + 128))(v31, buf, __p, &v47);
  if (v44 < 0)
    operator delete(__p[0]);
  if (v53 < 0)
  {
    operator delete(*(void **)buf);
    if (!v33)
      goto LABEL_56;
  }
  else if (!v33)
  {
    goto LABEL_56;
  }
  v34 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v35 = &v45;
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v35 = (std::string *)v45.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v35;
    v51 = 1024;
    v52 = v15;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%s protectHFPA2DP parameter set to %d", buf, 0x12u);
  }
  v18 = 1;
LABEL_56:
  v36 = sub_100027F68();
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v37 = &v45;
  else
    v37 = (std::string *)v45.__r_.__value_.__r.__words[0];
  sub_100091AE8(buf, (char *)v37);
  sub_100091AE8(__p, "percentageWithCriticalPriority");
  v38 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v36 + 128))(v36, buf, __p, &v46);
  if (v44 < 0)
    operator delete(__p[0]);
  if (v53 < 0)
  {
    operator delete(*(void **)buf);
    if (v38)
    {
LABEL_63:
      v39 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v40 = &v45;
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v40 = (std::string *)v45.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v40;
        v51 = 1024;
        v52 = v46;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "%s percentageWithCriticalPriority parameter set to %d", buf, 0x12u);
      }
      goto LABEL_69;
    }
  }
  else if (v38)
  {
    goto LABEL_63;
  }
  if (v18)
  {
LABEL_69:
    *a3 = v49;
    *a4 = v48;
    *a5 = v47;
    *a6 = v15;
    *a7 = v46;
    v41 = 1;
    goto LABEL_71;
  }
  v41 = 0;
LABEL_71:
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  return v41;
}

void sub_10032E5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032E670(uint64_t a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, _BYTE *a6)
{
  return sub_10032E018(a1, "CBUseCaseDigitalIDTSA", a2, a3, a4, a5, a6);
}

uint64_t sub_10032E690(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 280) = a2;
  return result;
}

BOOL sub_10032E698(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 280);
  return !v3 || v3 + *(_QWORD *)(a1 + 288) * a2 < a3;
}

uint64_t sub_10032E6C0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 268);
}

uint64_t sub_10032E6C8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 272);
}

BOOL sub_10032E6D0(uint64_t a1)
{
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;
  char v7;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1))
    return 0;
  v7 = 0;
  sub_100091AE8(v5, "Scan");
  sub_100091AE8(__p, "EnableNearbyActionNoWakeAdvMatchingRuleScan");
  (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)a1 + 72))(a1, v5, __p, &v7);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  return v7 != 0;
}

void sub_10032E778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10032E7AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 253);
}

uint64_t sub_10032E7B4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 254);
}

uint64_t sub_10032E7BC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 89);
}

uint64_t sub_10032E7C4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 192);
}

uint64_t sub_10032E7CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 218);
}

uint64_t sub_10032E7D4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 219);
}

uint64_t sub_10032E7DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 236);
}

uint64_t sub_10032E7E4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 183);
}

uint64_t sub_10032E7EC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 196);
}

uint64_t sub_10032E7F4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 238);
}

uint64_t sub_10032E7FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 237);
}

uint64_t sub_10032E804(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 264);
}

uint64_t sub_10032E80C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 265);
}

uint64_t sub_10032E814(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 239);
}

uint64_t sub_10032E81C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 240);
}

uint64_t sub_10032E824(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 241);
}

uint64_t sub_10032E82C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 242);
}

uint64_t sub_10032E834(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 243);
}

uint64_t sub_10032E83C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 244);
}

uint64_t sub_10032E844(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 245);
}

uint64_t sub_10032E84C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 246);
}

uint64_t sub_10032E854(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 247);
}

uint64_t sub_10032E85C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 255);
}

uint64_t sub_10032E864(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 256);
}

uint64_t sub_10032E86C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 260);
}

void sub_10032E874(id a1)
{
  operator new();
}

void sub_10032E8B4()
{
  operator delete();
}

void sub_10032E8D8(id a1)
{
  operator new();
}

void sub_10032E918()
{
  operator delete();
}

void sub_10032E93C(id a1)
{
  operator new();
}

void sub_10032E97C()
{
  operator delete();
}

void sub_10032E9A0(id a1)
{
  operator new();
}

void sub_10032E9E0()
{
  operator delete();
}

void sub_10032EA04(_QWORD *a1)
{
  *a1 = &off_100927650;
  sub_10034FF28();
}

uint64_t sub_10032EA38(uint64_t a1)
{
  *(_QWORD *)a1 = &off_100927650;
  (***(void (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  return a1;
}

void sub_10032EA74(uint64_t a1)
{
  *(_QWORD *)a1 = &off_100927650;
  (***(void (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  operator delete();
}

uint64_t sub_10032EAC0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), 0, 0);
}

void sub_10032EAD8(uint64_t a1, unsigned int a2)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100927698);
  sub_1002A1670((uint64_t)off_100977A80, a2);
}

void sub_10032EB40(id a1)
{
  operator new();
}

void sub_10032EB80()
{
  operator delete();
}

void sub_10032EBA4(void (***a1)(_QWORD, _QWORD, const UInt8 *, _QWORD))
{
  NSObject *v2;
  _OWORD v3[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v3[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Firmware Debug Settings", (uint8_t *)v3, 2u);
  }
  memset(v3, 0, sizeof(v3));
  if (sub_10032EDD4(CFSTR("com.apple.MobileBluetooth.debug"), CFSTR("fw.TraceMode"), -1, 7, (const char **)off_10097AC78) != -1)sub_10032F0E0();
  if (sub_10032EDD4(CFSTR("com.apple.MobileBluetooth.debug"), CFSTR("fw.TraceLevel"), -1, 7, (const char **)off_10097ACB8) != -1)sub_10032F168();
  if (sub_10032F1F0(CFSTR("com.apple.MobileBluetooth.debug"), CFSTR("fw.TraceMask"), v3, 32))
    sub_10032F4C8();
  if (sub_10032F1F0(CFSTR("com.apple.MobileBluetooth.debug"), CFSTR("phy.TraceMask"), v3, 32))
    sub_10032F550();
  if (sub_10032EDD4(CFSTR("com.apple.MobileBluetooth.debug"), CFSTR("phy.TraceLevel"), -1, 256, 0) != -1)
    sub_10032F5D8();
  if (sub_10032EDD4(CFSTR("com.apple.MobileBluetooth.debug"), CFSTR("fw.CaptureTimeout"), -1, (uint64_t)&_mh_execute_header, 0) != -1)sub_10032F660();
  if (sub_10032EDD4(CFSTR("com.apple.MobileBluetooth.debug"), CFSTR("fw.TriggerCapture"), -1, (uint64_t)&_mh_execute_header, 0) != -1)sub_10032F6E8();
  if (sub_10032EDD4(CFSTR("com.apple.MobileBluetooth.debug"), CFSTR("fw.TapToRadar"), -1, 2, 0) != -1)
    sub_10032F820();
  sub_10032F8A8(a1, CFSTR("com.apple.MobileBluetooth.debug"), CFSTR("fw.GeneralDebug"));
}

uint64_t sub_10032EDD4(const __CFString *a1, CFStringRef theString, uint64_t a3, uint64_t a4, const char **a5)
{
  uint64_t v7;
  const char *CStringPtr;
  const __CFString *v11;
  NSObject *v12;
  CFTypeID v13;
  int Value;
  uint64_t v15;
  const char *v16;
  CFTypeID v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  const char **v21;
  const char *v22;
  uint64_t v23;
  BOOL v24;
  NSObject *v26;
  NSObject *v27;
  uint64_t valuePtr;
  _BYTE buf[12];
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;

  v7 = a3;
  valuePtr = a3;
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  v11 = (const __CFString *)CFPreferencesCopyAppValue(theString, a1);
  v12 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = CStringPtr;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Checking for %s", buf, 0xCu);
  }
  if (v11)
  {
    v13 = CFGetTypeID(v11);
    if (v13 == CFNumberGetTypeID())
    {
      Value = CFNumberGetValue((CFNumberRef)v11, kCFNumberSInt64Type, &valuePtr);
      v15 = valuePtr;
      v16 = "";
      if (Value && valuePtr > v7 && valuePtr < a4)
      {
        if (a5)
        {
LABEL_9:
          v16 = a5[v15];
          goto LABEL_31;
        }
LABEL_30:
        v16 = "int";
      }
    }
    else
    {
      v17 = CFGetTypeID(v11);
      if (v17 != CFStringGetTypeID() || (v18 = CFStringGetCStringPtr(v11, 0x8000100u)) == 0)
      {
        v16 = "";
        v15 = v7;
        goto LABEL_35;
      }
      v16 = v18;
      if (!a5)
        goto LABEL_21;
      v19 = *a5;
      if (*a5)
      {
        v20 = 0;
        v21 = a5 + 1;
        while (strcasecmp(v16, v19))
        {
          v22 = *v21++;
          v19 = v22;
          v20 += 0x100000000000000;
          if (!v22)
            goto LABEL_17;
        }
        v15 = v20 >> 56;
      }
      else
      {
LABEL_17:
        v15 = -1;
      }
      valuePtr = v15;
      if (v15 == v7)
      {
LABEL_21:
        *(_QWORD *)buf = 0;
        v23 = strtoq(v16, (char **)buf, 0);
        valuePtr = v23;
        if (**(_BYTE **)buf)
          v24 = 1;
        else
          v24 = v23 <= v7;
        if (v24 || v23 >= a4)
        {
          valuePtr = v7;
          v15 = v7;
          goto LABEL_31;
        }
        v15 = v23;
        if (a5)
          goto LABEL_9;
        goto LABEL_30;
      }
    }
LABEL_31:
    if (*v16 && v15 != v7)
    {
      v26 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = CStringPtr;
        v31 = 2080;
        v32 = v16;
        v33 = 2048;
        v34 = v15;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "\t%s = %s(%lld)", buf, 0x20u);
      }
LABEL_38:
      CFRelease(v11);
      return valuePtr;
    }
LABEL_35:
    v27 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = CStringPtr;
      v31 = 2080;
      v32 = v16;
      v33 = 2048;
      v34 = v15;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Warning: \tIllegal %s value %s(%lld), ignoring!", buf, 0x20u);
    }
    valuePtr = v7;
    goto LABEL_38;
  }
  return v7;
}

void sub_10032F0E0()
{
  int v0;
  NSObject *v1;
  uint8_t v2[16];

  sub_1000477B8();
  v0 = sub_1001FCA1C();
  sub_1000478A0();
  if (v0)
  {
    v1 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Warning: BT_VSC_SetTraceMode not implemented for current chipset!", v2, 2u);
    }
  }
}

void sub_10032F168()
{
  int v0;
  NSObject *v1;
  uint8_t v2[16];

  sub_1000477B8();
  v0 = sub_1001FCAA4();
  sub_1000478A0();
  if (v0)
  {
    v1 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Warning: BT_VSC_SetTraceLevel not implemented for current chipset!", v2, 2u);
    }
  }
}

void *sub_10032F1F0(const __CFString *a1, CFStringRef theString, void *a3, int a4)
{
  const char *CStringPtr;
  CFPropertyListRef v9;
  NSObject *v10;
  CFTypeID v11;
  CFIndex Length;
  const UInt8 *BytePtr;
  uint64_t v14;
  void *v15;
  const UInt8 *v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  CFTypeID v26;
  NSObject *v27;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  _BYTE v32[10];

  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  v9 = CFPreferencesCopyAppValue(theString, a1);
  v10 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v30 = CStringPtr;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Checking for %s", buf, 0xCu);
  }
  if (!v9)
    return 0;
  v11 = CFGetTypeID(v9);
  if (v11 == CFDataGetTypeID())
  {
    Length = CFDataGetLength((CFDataRef)v9);
    BytePtr = CFDataGetBytePtr((CFDataRef)v9);
    v15 = 0;
    if (BytePtr && Length)
    {
      v16 = BytePtr;
      __chkstk_darwin(BytePtr, v14);
      v18 = &buf[-((v17 + 16) & 0xFFFFFFFFFFFFFFF0)];
      bzero(v18, 3 * Length + 1);
      sub_1002532F8((uint64_t)v18, (unsigned __int16)(3 * Length + 1), (uint64_t)"%@", v19, v20, v21, v22, v23, (uint64_t)v16);
      v24 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v30 = CStringPtr;
        v31 = 2080;
        *(_QWORD *)v32 = v18;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "\t%s = <%s>", buf, 0x16u);
      }
      if (Length == a4)
      {
        memcpy(a3, v16, Length);
      }
      else
      {
        v27 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          v30 = CStringPtr;
          v31 = 1024;
          *(_DWORD *)v32 = Length;
          *(_WORD *)&v32[4] = 1024;
          *(_DWORD *)&v32[6] = a4;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Warning: \t\tIllegal %s value len %d expecting %d, ignoring!", buf, 0x18u);
        }
        a3 = 0;
      }
      v15 = a3;
    }
  }
  else
  {
    v25 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v26 = CFGetTypeID(v9);
      *(_DWORD *)buf = 136315394;
      v30 = CStringPtr;
      v31 = 2048;
      *(_QWORD *)v32 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Warning: \tIllegal %s data type %lu should be Data, ignoring!", buf, 0x16u);
    }
    v15 = 0;
  }
  CFRelease(v9);
  return v15;
}

void sub_10032F4C8()
{
  int v0;
  NSObject *v1;
  uint8_t v2[16];

  sub_1000477B8();
  v0 = sub_1001FCBB4();
  sub_1000478A0();
  if (v0)
  {
    v1 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Warning: BT_VSC_SetTraceMask not implemented for current chipset!", v2, 2u);
    }
  }
}

void sub_10032F550()
{
  int v0;
  NSObject *v1;
  uint8_t v2[16];

  sub_1000477B8();
  v0 = sub_1001FCC3C();
  sub_1000478A0();
  if (v0)
  {
    v1 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Warning: BT_VSC_SetPhyTraceMask not implemented for current chipset!", v2, 2u);
    }
  }
}

void sub_10032F5D8()
{
  int v0;
  NSObject *v1;
  uint8_t v2[16];

  sub_1000477B8();
  v0 = sub_1001FCB2C();
  sub_1000478A0();
  if (v0)
  {
    v1 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Warning: BT_VSC_SetPhyTraceLevel not implemented for current chipset!", v2, 2u);
    }
  }
}

void sub_10032F660()
{
  int v0;
  NSObject *v1;
  uint8_t v2[16];

  sub_1000477B8();
  v0 = sub_1001FCCC4();
  sub_1000478A0();
  if (v0)
  {
    v1 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Warning: BT_VSC_SetCaptureTimeout not implemented for current chipset!", v2, 2u);
    }
  }
}

void sub_10032F6E8()
{
  NSObject *v0;
  int v1;
  NSObject *v2;
  _BOOL4 v3;
  const char *v4;
  uint8_t *v5;
  __int16 v6;
  uint8_t v7[16];
  __int16 v8;
  uint8_t buf[16];

  v0 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "initiating FW triggerCapture", buf, 2u);
  }
  sub_1000477B8();
  v1 = sub_1001FCD4C();
  sub_1000478A0();
  v2 = qword_1009997E8;
  v3 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  if (v1)
  {
    if (!v3)
      return;
    v8 = 0;
    v4 = "Warning: BT_VSC_TriggerCapture not implemented for current chipset!";
    v5 = (uint8_t *)&v8;
    goto LABEL_10;
  }
  if (v3)
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "waiting for FW triggerCapture completion...", v7, 2u);
  }
  sub_10010B78C(byte_100991E08, 0);
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 0;
    v4 = "FW triggerCapture Completed";
    v5 = (uint8_t *)&v6;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v4, v5, 2u);
  }
}

void sub_10032F820()
{
  int v0;
  NSObject *v1;
  uint8_t v2[16];

  sub_1000477B8();
  v0 = sub_1001FCDD4();
  sub_1000478A0();
  if (v0)
  {
    v1 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Warning: BT_VSC_EnableTapToRadar not implemented for current chipset!", v2, 2u);
    }
  }
}

void sub_10032F8A8(void (***a1)(_QWORD, _QWORD, const UInt8 *, _QWORD), const __CFString *a2, CFStringRef theString)
{
  const char *CStringPtr;
  CFPropertyListRef v7;
  NSObject *v8;
  CFTypeID v9;
  CFIndex Count;
  NSObject *v11;
  __int128 v12;
  CFIndex v13;
  const __CFDictionary *ValueAtIndex;
  NSObject *v15;
  const __CFString *Value;
  const __CFString *v17;
  CFTypeID v18;
  const char *v19;
  NSObject *v20;
  const __CFData *v21;
  const __CFData *v22;
  CFTypeID v23;
  const UInt8 *BytePtr;
  NSObject *v25;
  unsigned int v26;
  const __CFData *v27;
  const __CFData *v28;
  CFTypeID v29;
  CFIndex Length;
  const UInt8 *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  uint64_t v44;
  CFTypeID v45;
  const char *v46;
  NSObject *v47;
  uint32_t v48;
  uint64_t v49;
  _QWORD v50[2];
  __int128 v51;
  __int128 v52;
  uint8_t buf[4];
  const char *v54;
  __int16 v55;
  CFTypeID v56;

  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  v7 = CFPreferencesCopyAppValue(theString, a2);
  v8 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v54 = CStringPtr;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Checking for %s", buf, 0xCu);
  }
  if (v7)
  {
    v9 = CFGetTypeID(v7);
    if (v9 == CFArrayGetTypeID())
    {
      Count = CFArrayGetCount((CFArrayRef)v7);
      v11 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v54 = CStringPtr;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "\t%s = (", buf, 0xCu);
      }
      if (Count >= 1)
      {
        v13 = 0;
        *(_QWORD *)&v12 = 67109120;
        v51 = v12;
        *(_QWORD *)&v12 = 136315138;
        v52 = v12;
        v50[0] = a1;
        do
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v7, v13);
          v15 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "\t\t{", buf, 2u);
          }
          Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("Description"));
          if (Value)
          {
            v17 = Value;
            v18 = CFGetTypeID(Value);
            if (v18 == CFStringGetTypeID())
            {
              v19 = CFStringGetCStringPtr(v17, 0x8000100u);
              v20 = qword_1009997E8;
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = v52;
                v54 = v19;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "\t\t\tDescription: %s;", buf, 0xCu);
              }
            }
          }
          v21 = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, CFSTR("Code"));
          if (v21 && (v22 = v21, v23 = CFGetTypeID(v21), v23 == CFDataGetTypeID()) && CFDataGetLength(v22) == 2)
          {
            BytePtr = CFDataGetBytePtr(v22);
            v25 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
            {
              v26 = bswap32(*(unsigned __int16 *)BytePtr) >> 16;
              *(_DWORD *)buf = v51;
              LODWORD(v54) = v26;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "\t\t\tCode: <%04X>;", buf, 8u);
            }
            v27 = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, CFSTR("Value"));
            if (!v27)
            {
              v42 = qword_1009997E8;
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Warning: \t\t\tValue: <empty>;",
                  buf,
                  2u);
              }
              LOWORD(Length) = 0;
              v31 = (const UInt8 *)"";
              goto LABEL_34;
            }
            v28 = v27;
            v29 = CFGetTypeID(v27);
            if (v29 == CFDataGetTypeID())
            {
              Length = CFDataGetLength(v28);
              v31 = CFDataGetBytePtr(v28);
              v50[1] = v50;
              __chkstk_darwin(v31, v32);
              v34 = (char *)v50 - ((v33 + 16) & 0xFFFFFFFFFFFFFFF0);
              bzero(v34, 3 * Length + 1);
              sub_1002532F8((uint64_t)v34, (unsigned __int16)(3 * Length + 1), (uint64_t)"%@", v35, v36, v37, v38, v39, (uint64_t)v31);
              v40 = qword_1009997E8;
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = v52;
                v54 = v34;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "\t\t\tValue: <%s>;", buf, 0xCu);
              }
              a1 = (void (***)(_QWORD, _QWORD, const UInt8 *, _QWORD))v50[0];
LABEL_34:
              v43 = qword_1009997E8;
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "\t\t}", buf, 2u);
              }
              (**a1)(a1, *(unsigned __int16 *)BytePtr, v31, (unsigned __int16)Length);
              goto LABEL_29;
            }
            v41 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Warning: \t\t\tValue: wrong type, ignoring this entry!", buf, 2u);
              v41 = qword_1009997E8;
            }
            if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              goto LABEL_29;
          }
          else
          {
            v41 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Warning: \t\t\tCode: missing or wrong type or len, ignoring this entry!", buf, 2u);
              v41 = qword_1009997E8;
            }
            if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              goto LABEL_29;
          }
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "\t\t}", buf, 2u);
LABEL_29:
          ++v13;
        }
        while (Count != v13);
      }
      v49 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_46;
      *(_WORD *)buf = 0;
      v46 = "\t)";
      v47 = v49;
      v48 = 2;
    }
    else
    {
      v44 = qword_1009997E8;
      if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
LABEL_46:
        CFRelease(v7);
        return;
      }
      v45 = CFGetTypeID(v7);
      *(_DWORD *)buf = 136315394;
      v54 = CStringPtr;
      v55 = 2048;
      v56 = v45;
      v46 = "Warning: \tIllegal %s data type %lu should be Array, ignoring!";
      v47 = v44;
      v48 = 22;
    }
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, v46, buf, v48);
    goto LABEL_46;
  }
}

void sub_10032FEB4()
{
  int v0;
  NSObject *v1;
  uint8_t v2[16];

  sub_1000477B8();
  v0 = sub_1001FCE5C();
  sub_1000478A0();
  if (v0)
  {
    v1 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Warning: BT_VSC_GeneralDebug not implemented for current chipset!", v2, 2u);
    }
  }
}

void sub_10032FF54(int a1)
{
  NSObject *v2;
  _DWORD v3[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BT_VSC_SetTraceMode completed with status 0x%08X", (uint8_t *)v3, 8u);
  }
}

void sub_10032FFF4(int a1)
{
  NSObject *v2;
  _DWORD v3[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BT_VSC_SetTraceLevel completed with status 0x%08X", (uint8_t *)v3, 8u);
  }
}

void sub_100330094(int a1)
{
  NSObject *v2;
  _DWORD v3[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BT_VSC_SetPhyTraceLevel completed with status 0x%08X", (uint8_t *)v3, 8u);
  }
}

void sub_100330134(int a1)
{
  NSObject *v2;
  _DWORD v3[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BT_VSC_SetTraceMask completed with status 0x%08X", (uint8_t *)v3, 8u);
  }
}

void sub_1003301D4(int a1)
{
  NSObject *v2;
  _DWORD v3[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BT_VSC_SetPhyTraceMask completed with status 0x%08X", (uint8_t *)v3, 8u);
  }
}

void sub_100330274(int a1)
{
  NSObject *v2;
  _DWORD v3[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BT_VSC_SetCaptureTimeout completed with status 0x%08X", (uint8_t *)v3, 8u);
  }
}

uint64_t sub_100330314(int a1)
{
  NSObject *v2;
  _DWORD v4[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BT_VSC_TriggerCapture completed with status 0x%08X", (uint8_t *)v4, 8u);
  }
  return sub_10010BA34(byte_100991E08);
}

void sub_1003303C0(int a1)
{
  NSObject *v2;
  _DWORD v3[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BT_VSC_EnableTapToRadar completed with status 0x%08X", (uint8_t *)v3, 8u);
  }
}

void sub_100330460(int a1)
{
  NSObject *v2;
  _DWORD v3[2];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BT_VSC_GeneralDebug completed with status 0x%08X", (uint8_t *)v3, 8u);
  }
}

_QWORD *sub_100330500(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  *a1 = &off_1009276E0;
  v9 = 0;
  sub_1001E4180(a1 + 1, &v9);
  v2 = a1[1];
  v3 = qword_1009997E8;
  v4 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_DWORD *)buf = 134217984;
      v11 = v2;
      v5 = "Warning: BT driver=0x%08llX";
      v6 = v3;
      v7 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
    }
  }
  else if (v4)
  {
    *(_WORD *)buf = 0;
    v5 = "Warning: BT driver not ready yet!, skipping";
    v6 = v3;
    v7 = 2;
    goto LABEL_6;
  }
  return a1;
}

void sub_100330600(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint8_t v10[16];
  uint8_t buf[16];
  __int128 v12;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Driver Debug Settings", buf, 2u);
  }
  *(_OWORD *)buf = 0u;
  v12 = 0u;
  if (*(_QWORD *)(a1 + 8))
  {
    v3 = sub_10032EDD4(CFSTR("com.apple.MobileBluetooth.debug"), CFSTR("driver.TraceMode"), -1, 5, (const char **)off_10097ACF8);
    if (v3 != -1)
      sub_100330840(a1, v3);
    v4 = sub_10032EDD4(CFSTR("com.apple.MobileBluetooth.debug"), CFSTR("driver.TraceLevel"), -1, 7, (const char **)off_10097AD28);
    if (v4 != -1)
      sub_10033093C(a1, v4);
    v5 = sub_10032F1F0(CFSTR("com.apple.MobileBluetooth.debug"), CFSTR("driver.TraceMask"), buf, 32);
    if (v5)
      sub_100330A38(a1, (uint64_t)v5);
    v6 = sub_10032EDD4(CFSTR("com.apple.MobileBluetooth.debug"), CFSTR("driver.CaptureTimeout"), -1, (uint64_t)&_mh_execute_header, 0);
    if (v6 != -1)
      sub_100330B34(a1, v6);
    v7 = sub_10032EDD4(CFSTR("com.apple.MobileBluetooth.debug"), CFSTR("driver.TriggerCapture"), -1, (uint64_t)&_mh_execute_header, 0);
    if (v7 != -1)
      sub_100330C30(a1, v7);
    v8 = sub_10032EDD4(CFSTR("com.apple.MobileBluetooth.debug"), CFSTR("driver.TapToRadar"), -1, 2, 0);
    if (v8 != -1)
      sub_100330D2C(a1, v8 != 0);
    sub_10032F8A8((void (***)(_QWORD, _QWORD, const UInt8 *, _QWORD))a1, CFSTR("com.apple.MobileBluetooth.debug"), CFSTR("driver.GeneralDebug"));
  }
  else
  {
    v9 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Warning: BT driver not ready yet!, skipping", v10, 2u);
    }
  }
}

void sub_100330840(uint64_t a1, unsigned __int8 a2)
{
  uint64_t (*v2)(_QWORD);
  int v3;
  int v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  uint64_t v9;
  _DWORD v10[2];

  v2 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 8) + 64);
  if (!v2)
  {
    v9 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(v10[0]) = 0;
    v6 = "Warning: HciDriver_t::setTraceMode not implemented for current chipset!";
    v7 = v9;
    v8 = 2;
    goto LABEL_7;
  }
  v3 = v2(a2);
  if (v3)
  {
    v4 = v3;
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      v6 = "Warning: Calling HciDriver_t::setTraceMode failed with status 0x%08X!";
      v7 = v5;
      v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }
}

void sub_10033093C(uint64_t a1, unsigned __int8 a2)
{
  uint64_t (*v2)(_QWORD);
  int v3;
  int v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  uint64_t v9;
  _DWORD v10[2];

  v2 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 8) + 72);
  if (!v2)
  {
    v9 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(v10[0]) = 0;
    v6 = "Warning: HciDriver_t::setTraceLevel not implemented for current chipset!";
    v7 = v9;
    v8 = 2;
    goto LABEL_7;
  }
  v3 = v2(a2);
  if (v3)
  {
    v4 = v3;
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      v6 = "Warning: Calling HciDriver_t::setTraceLevel failed with status 0x%08X!";
      v7 = v5;
      v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }
}

void sub_100330A38(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  int v3;
  int v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  uint64_t v9;
  _DWORD v10[2];

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 80);
  if (!v2)
  {
    v9 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(v10[0]) = 0;
    v6 = "Warning: HciDriver_t::setTraceMask not implemented for current chipset!";
    v7 = v9;
    v8 = 2;
    goto LABEL_7;
  }
  v3 = v2(a2);
  if (v3)
  {
    v4 = v3;
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      v6 = "Warning: Calling HciDriver_t::setTraceMask failed with status 0x%08X!";
      v7 = v5;
      v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }
}

void sub_100330B34(uint64_t a1, unsigned __int16 a2)
{
  uint64_t (*v2)(_QWORD);
  int v3;
  int v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  uint64_t v9;
  _DWORD v10[2];

  v2 = *(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 8) + 88);
  if (!v2)
  {
    v9 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(v10[0]) = 0;
    v6 = "Warning: HciDriver_t::setCaptureTimeout not implemented for current chipset!";
    v7 = v9;
    v8 = 2;
    goto LABEL_7;
  }
  v3 = v2(a2);
  if (v3)
  {
    v4 = v3;
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      v6 = "Warning: Calling HciDriver_t::setCaptureTimeout failed with status 0x%08X!";
      v7 = v5;
      v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }
}

void sub_100330C30(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  int v3;
  int v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  uint64_t v9;
  _DWORD v10[2];

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 96);
  if (!v2)
  {
    v9 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(v10[0]) = 0;
    v6 = "Warning: HciDriver_t::triggerCapture not implemented for current chipset!";
    v7 = v9;
    v8 = 2;
    goto LABEL_7;
  }
  v3 = v2(a2);
  if (v3)
  {
    v4 = v3;
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      v6 = "Warning: Calling HciDriver_t::triggerCapture failed with status 0x%08X!";
      v7 = v5;
      v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }
}

void sub_100330D2C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  int v3;
  int v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  uint64_t v9;
  _DWORD v10[2];

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 104);
  if (!v2)
  {
    v9 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(v10[0]) = 0;
    v6 = "Warning: HciDriver_t::enableTapToRadar not implemented for current chipset!";
    v7 = v9;
    v8 = 2;
    goto LABEL_7;
  }
  v3 = v2(a2);
  if (v3)
  {
    v4 = v3;
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      v6 = "Warning: Calling HciDriver_t::enableTapToRadar failed with status 0x%08X!";
      v7 = v5;
      v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }
}

void sub_100330E28(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  int v3;
  int v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  uint64_t v9;
  _DWORD v10[2];

  v2 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 120);
  if (!v2)
  {
    v9 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(v10[0]) = 0;
    v6 = "Warning: HciDriver_t::enableBtDriverFwTraces not implemented for current chipset!";
    v7 = v9;
    v8 = 2;
    goto LABEL_7;
  }
  v3 = v2(a2);
  if (v3)
  {
    v4 = v3;
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      v6 = "Warning: Calling HciDriver_t::enableBtDriverFwTraces failed with status 0x%08X!";
      v7 = v5;
      v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }
}

void sub_100330F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  int v5;
  int v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  uint64_t v11;
  _DWORD v12[2];

  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 112);
  if (!v4)
  {
    v11 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(v12[0]) = 0;
    v8 = "Warning: HciDriver_t::generalDebug not implemented for current chipset!";
    v9 = v11;
    v10 = 2;
    goto LABEL_7;
  }
  v5 = v4(a2, a3, a4);
  if (v5)
  {
    v6 = v5;
    v7 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v12[0] = 67109120;
      v12[1] = v6;
      v8 = "Warning: Calling HciDriver_t::generalDebug failed with status 0x%08X!";
      v9 = v7;
      v10 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)v12, v10);
    }
  }
}

uint64_t sub_100331028()
{
  uint64_t result;
  NSObject *v1;

  result = _os_feature_enabled_impl("BluetoothFeatures", "QoS");
  if ((_DWORD)result)
  {
    v1 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
      sub_1006E05AC(v1);
    return (sub_10005F864() & 0xFFFFFFFE) == 44;
  }
  return result;
}

uint64_t sub_100331090()
{
  unsigned int v0;
  unsigned int v1;
  _BOOL4 v2;
  BOOL v3;
  unsigned int v4;

  v0 = *(_DWORD *)(sub_1000438A4() + 712);
  v1 = v0 - 1;
  v2 = v0 - 2000 < 0x7D0;
  v3 = v0 >= 0xA;
  v4 = (0x1F3u >> v0) & 1;
  if (v3)
    v4 = 1;
  if (v1 <= 0x7CE)
    return v4;
  else
    return v2;
}

uint64_t sub_1003310D8()
{
  int v0;
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t result;
  __int16 v7;
  __int16 v8;

  v0 = *(_DWORD *)(sub_1000438A4() + 712);
  v1 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1))
  {
    if ((v0 - 18) <= 0x7BD)
    {
      v2 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v8 = 0;
        v3 = "UWBS supported, Mac, Chipset >= BCM_4364B3";
        v4 = (uint8_t *)&v8;
LABEL_11:
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, v4, 2u);
        return 1;
      }
      return 1;
    }
    return 0;
  }
  v5 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 336))(v5))
  {
    if ((v0 - 12) <= 0x7C3)
    {
      v2 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v7 = 0;
        v3 = "UWBS supported, Chipset >= BCM_4355C0";
        v4 = (uint8_t *)&v7;
        goto LABEL_11;
      }
      return 1;
    }
    return 0;
  }
  result = _os_feature_enabled_impl("BluetoothFeatures", "AACELDStereotvOS");
  if ((_DWORD)result)
    return ((sub_10005F864() - 148) & 0xFFFFFFF7) == 0;
  return result;
}

uint64_t sub_1003311F4()
{
  unsigned int v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v0 = *(_DWORD *)(sub_1000438A4() + 712);
  v1 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1))
    return v0 - 20 < 0x7BC;
  v2 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 328))(v2))
    v3 = v0 == 0;
  else
    v3 = 1;
  if (v3 || v0 > 0x7CF)
  {
    v5 = sub_10003BE44();
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 336))(v5))
      return 0;
    return ((sub_10005F864() - 148) & 0xFFFFFFF7) == 0;
  }
  else
  {
    if (v0 > 0x12)
      return 1;
    v4 = 1;
    v6 = sub_10005F864();
    if (((v6 - 81) > 0x1D || ((1 << (v6 - 81)) & 0x30C00003) == 0) && v6 != 19)
      return 0;
  }
  return v4;
}

uint64_t sub_1003312CC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  if (a2 > 6)
    return 0;
  if (((1 << a2) & 0x65) == 0)
    return 1;
  v2 = sub_10003BE44();
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 424))(v2) ^ 1;
}

uint64_t sub_10033131C(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *(_DWORD *)(a1 + 712);
  v2 = sub_10003BE44();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 328))(v2);
  if (v1)
    v4 = v3;
  else
    v4 = 0;
  if (v1 >= 0x7D0)
    v4 = 0;
  if (v1 > 0xE)
    return v4;
  else
    return 0;
}

BOOL sub_100331360(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 20) < 0x7BC;
}

uint64_t sub_100331374(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_DWORD *)(a1 + 712);
  v2 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 328))(v2) & 1) == 0)
  {
    v3 = sub_10003BE44();
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 384))(v3) || (v1 - 24) >= 0x7B8)
      return 0;
    return _os_feature_enabled_impl("BluetoothFeatures", "HandsfreeAoS");
  }
  if ((v1 - 24) <= 0x7B7)
    return _os_feature_enabled_impl("BluetoothFeatures", "HandsfreeAoS");
  return 0;
}

BOOL sub_1003313F4()
{
  uint64_t v0;

  v0 = sub_10003BE44();
  return ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 384))(v0) & 1) == 0
      && (sub_10005F864() & 0xFFFFFFFE) != 4;
}

BOOL sub_100331430()
{
  int v0;
  uint64_t v1;

  v0 = *(_DWORD *)(sub_1000438A4() + 712);
  v1 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1))
    return (v0 - 20) < 0x7BC;
  else
    return (v0 - 19) < 0x7BD;
}

BOOL sub_100331480()
{
  int v0;
  uint64_t v1;

  v0 = *(_DWORD *)(sub_1000438A4() + 712);
  v1 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1))
    return (v0 - 20) < 0x7BC;
  else
    return (v0 - 12) < 0x7C4;
}

BOOL sub_1003314D0()
{
  return (*(_DWORD *)(sub_1000438A4() + 712) - 20) < 0x7BC;
}

uint64_t sub_1003314F4(uint64_t a1)
{
  if ((*(_DWORD *)(sub_1000438A4() + 712) - 22) > 0x7B9)
    return 0;
  else
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) ^ 1;
}

BOOL sub_100331540()
{
  return (sub_10005F864() & 0xFFFFFFFE) == 44;
}

BOOL sub_100331560(uint64_t a1)
{
  uint64_t v2;
  int v3;

  if ((*(_DWORD *)(sub_1000438A4() + 712) - 1) <= 0x7CE
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) & 1) == 0
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
  {
    return 0;
  }
  v2 = 1;
  v3 = sub_10005F864();
  if (((v3 - 230) > 0x24 || ((1 << (v3 + 26)) & 0x1FFFFFF6FDLL) == 0)
    && ((v3 - 112) > 0x10 || ((1 << (v3 - 112)) & 0x1FF8F) == 0))
  {
    return (v3 - 44) < 6;
  }
  return v2;
}

BOOL sub_100331634()
{
  return (sub_10005F864() & 0xFFFFFFFE) == 40;
}

uint64_t sub_100331654()
{
  uint64_t v0;

  v0 = sub_10003BE44();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 424))(v0);
}

uint64_t sub_100331670()
{
  unsigned int v0;
  _BOOL4 v1;
  BOOL v2;
  int v3;
  BOOL v4;

  v0 = *(_DWORD *)(sub_1000438A4() + 712);
  v1 = v0 - 2001 < 2;
  v2 = v0 >= 0x1A;
  v4 = v0 == 26;
  v3 = (1 << v0) & 0x5589040;
  v4 = !v4 && v2 || v3 == 0;
  return !v4 || v1;
}

uint64_t sub_1003316B4()
{
  NSObject *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v9;
  _DWORD v10[2];

  v0 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "supports PER based power control check", (uint8_t *)v10, 2u);
  }
  v1 = *(_DWORD *)(sub_1000438A4() + 712);
  v2 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 352))(v2) & 1) != 0
    || (v3 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 360))(v3) & 1) != 0)
    || (v4 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 376))(v4) & 1) != 0))
  {
    v5 = 1;
  }
  else
  {
    v9 = sub_10003BE44();
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 424))(v9);
  }
  if ((v1 - 2000) < 0x7D0)
    v6 = v5;
  else
    v6 = 0;
  v7 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109120;
    v10[1] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "supports PER based power control check return : %d", (uint8_t *)v10, 8u);
  }
  return v6;
}

uint64_t sub_1003317F8()
{
  uint64_t v0;
  int v1;
  unsigned int v2;
  _BOOL8 v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v11;
  uint64_t v13;

  v0 = sub_10003BE44();
  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 384))(v0);
  v2 = *(_DWORD *)(sub_1000438A4() + 712);
  if (v1)
  {
    return v2 - 1 <= 0x7CE && (v2 == 14 || v2 > 0x12);
  }
  else
  {
    v5 = sub_10005F864();
    v4 = v5 - 147 <= 9 && ((1 << (v5 + 109)) & 0x20B) != 0 || v5 < 4;
    v6 = sub_10003BE44();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 352))(v6) & 1) != 0
      || (v7 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 360))(v7) & 1) != 0)
      || (v8 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 376))(v8) & 1) != 0))
    {
      v9 = 1;
    }
    else
    {
      v13 = sub_10003BE44();
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 424))(v13);
    }
    if (v2 - 1 <= 0x7CE)
    {
      if (v2 > 0xB || v2 == 9)
        v11 = v9;
      else
        v11 = 0;
      return v4 | v11;
    }
  }
  return v4;
}

uint64_t sub_100331900()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10003BE44();
  v1 = 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 384))(v0) & 1) == 0)
  {
    switch(sub_10005F864())
    {
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x59u:
      case 0x5Au:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
      case 0x5Eu:
      case 0x5Fu:
      case 0x60u:
      case 0x61u:
      case 0x62u:
      case 0x63u:
      case 0x64u:
      case 0x65u:
      case 0x66u:
      case 0x69u:
      case 0x6Au:
      case 0x6Bu:
      case 0x6Cu:
      case 0x6Fu:
      case 0x70u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x75u:
      case 0x77u:
      case 0x78u:
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
      case 0x7Du:
      case 0x7Eu:
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
      case 0x82u:
      case 0x83u:
      case 0x84u:
      case 0x85u:
      case 0x8Cu:
      case 0x8Du:
      case 0x8Eu:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x98u:
        v1 = 1;
        break;
      default:
        return v1;
    }
  }
  return v1;
}

BOOL sub_100331960()
{
  uint64_t v0;
  _BOOL8 v1;
  NSObject *v2;
  int v3;
  NSObject *v4;
  _DWORD v6[2];

  v0 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 384))(v0) & 1) != 0)
    return 0;
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "supports PER based power control check", (uint8_t *)v6, 2u);
  }
  v3 = sub_10005F864();
  v1 = (v3 - 154) <= 0x3C && ((1 << (v3 + 102)) & 0x1F7FFFFFE1E0F003) != 0
    || v3 == 27;
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "supports PER based power control check return : %d", (uint8_t *)v6, 8u);
  }
  return v1;
}

BOOL sub_100331A98()
{
  return (*(_DWORD *)(sub_1000438A4() + 712) - 19) < 0x7BD;
}

BOOL sub_100331ABC()
{
  return sub_10005F864() - 6 < 4;
}

uint64_t sub_100331ADC()
{
  unsigned int v0;
  uint64_t v1;
  BOOL v2;
  int v4;
  uint64_t v5;
  NSObject *v6;
  _DWORD v8[2];

  v0 = *(_DWORD *)(sub_1000438A4() + 712);
  if (v0 - 1 > 0x7CE)
    goto LABEL_18;
  if (v0 > 0xE)
  {
    v1 = 76;
    goto LABEL_31;
  }
  v2 = v0 > 0xB || v0 == 9;
  if (!v2 && v0 != 6)
  {
LABEL_18:
    v1 = 34;
    goto LABEL_31;
  }
  LODWORD(v1) = 34;
  v4 = sub_10005F864();
  if (v4 <= 61)
  {
    if (v4 >= 4)
    {
      if ((v4 - 57) >= 2)
      {
        if (v4 == 61)
          LODWORD(v1) = 48;
        goto LABEL_28;
      }
      goto LABEL_24;
    }
LABEL_20:
    LODWORD(v1) = 32;
    goto LABEL_28;
  }
  if (v4 > 157)
  {
    if ((v4 - 158) < 4)
      LODWORD(v1) = 42;
    goto LABEL_28;
  }
  if ((v4 - 79) < 2)
    goto LABEL_20;
  if (v4 == 62)
  {
    LODWORD(v1) = 44;
    goto LABEL_28;
  }
  if (v4 == 88)
LABEL_24:
    LODWORD(v1) = 36;
LABEL_28:
  v5 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 384))(v5))
    v1 = 56;
  else
    v1 = v1;
LABEL_31:
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = v1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ePA low Tx power is : %d", (uint8_t *)v8, 8u);
  }
  return v1;
}

uint64_t sub_100331C58()
{
  unsigned int v0;
  uint64_t v1;
  BOOL v2;
  int v4;
  uint64_t v5;
  NSObject *v6;
  _DWORD v8[2];

  v0 = *(_DWORD *)(sub_1000438A4() + 712);
  if (v0 - 1 > 0x7CE)
    goto LABEL_18;
  if (v0 >= 0xF)
  {
    if (sub_10005F864() == 147)
      v1 = 42;
    else
      v1 = 76;
    goto LABEL_42;
  }
  v2 = v0 > 0xB || v0 == 9;
  if (!v2 && v0 != 6)
  {
LABEL_18:
    v1 = 34;
    goto LABEL_42;
  }
  v4 = sub_10005F864();
  if (v4 <= 77)
  {
    if (v4 > 74)
    {
      if (v4 != 76)
        goto LABEL_37;
      goto LABEL_38;
    }
    if (v4 > 0x3E)
      goto LABEL_32;
    if (((1 << v4) & 0x3C0) != 0)
    {
      LODWORD(v1) = 54;
      goto LABEL_39;
    }
    if (((1 << v4) & 0x2200000000000000) != 0)
      goto LABEL_37;
    if (((1 << v4) & 0x4400000000000000) == 0)
    {
LABEL_32:
      if (v4 >= 2)
      {
        if ((v4 - 2) < 2)
        {
          LODWORD(v1) = 48;
          goto LABEL_39;
        }
        goto LABEL_47;
      }
LABEL_37:
      LODWORD(v1) = 52;
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  if (v4 > 87)
  {
    switch(v4)
    {
      case 'g':
      case 'm':
        goto LABEL_37;
      case 'h':
      case 'n':
        goto LABEL_38;
      case 'i':
      case 'j':
      case 'k':
      case 'l':
        goto LABEL_47;
      default:
        if ((v4 - 158) < 4)
        {
          LODWORD(v1) = 42;
          goto LABEL_39;
        }
        if (v4 != 88)
          goto LABEL_47;
        goto LABEL_37;
    }
  }
  if (v4 <= 79)
  {
    if (v4 != 78)
      goto LABEL_37;
    goto LABEL_38;
  }
  switch(v4)
  {
    case 'P':
      goto LABEL_38;
    case 'Q':
      goto LABEL_37;
    case 'R':
LABEL_38:
      LODWORD(v1) = 44;
      goto LABEL_39;
  }
LABEL_47:
  LODWORD(v1) = 34;
LABEL_39:
  v5 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 384))(v5))
    v1 = 56;
  else
    v1 = v1;
LABEL_42:
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = v1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ePA high Tx power is : %d", (uint8_t *)v8, 8u);
  }
  return v1;
}

uint64_t sub_100331E84()
{
  int v0;
  unsigned __int8 v1;
  NSObject *v2;
  _DWORD v4[2];

  if ((*(_DWORD *)(sub_1000438A4() + 712) - 12) > 0x7C3)
  {
    v1 = 34;
  }
  else
  {
    v0 = sub_10005F864();
    if ((v0 - 6) <= 3)
      v1 = 0x2E2A2E2Au >> (8 * (v0 - 6));
    else
      v1 = 34;
  }
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ePA mid Tx power is : %d", (uint8_t *)v4, 8u);
  }
  return v1;
}

BOOL sub_100331F68()
{
  return (*(_DWORD *)(sub_1000438A4() + 712) - 10) < 0x7C6;
}

uint64_t sub_100331F8C()
{
  uint64_t v0;
  unsigned int v1;
  int v2;
  uint64_t v3;
  uint64_t result;

  v0 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 352))(v0) & 1) != 0)
  {
    v1 = 1980;
    v2 = -20;
  }
  else
  {
    v3 = sub_10003BE44();
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 360))(v3);
    if (!(_DWORD)result)
      return result;
    v1 = 1976;
    v2 = -24;
  }
  return *(_DWORD *)(sub_1000438A4() + 712) + v2 < v1;
}

uint64_t sub_100331FF4()
{
  uint64_t result;

  result = _os_feature_enabled_impl("BluetoothFeatures", "ADVOverConnection");
  if ((_DWORD)result)
    return (*(_DWORD *)(sub_1000438A4() + 712) - 22) < 0x7BA;
  return result;
}

const char *sub_100332030(uint64_t a1, int a2)
{
  const char *result;

  if (a2 > 1999)
  {
    if (a2 > 2001)
    {
      if (a2 == 2002)
      {
        return "APPLE_M2_5";
      }
      else if (a2 == 6000)
      {
        return "APPLE_VIRTUAL";
      }
      else
      {
        return "Unknown Chipset";
      }
    }
    else if (a2 == 2000)
    {
      return "APPLE_M1";
    }
    else
    {
      return "APPLE_M2";
    }
  }
  else
  {
    result = "THIRD_PARTY_DONGLE";
    switch(a2)
    {
      case 0:
        return result;
      case 1:
        result = "BCM_4350C2";
        break;
      case 2:
        result = "BCM_20702A3";
        break;
      case 3:
        result = "BCM_20702B0";
        break;
      case 4:
        result = "BCM_4350";
        break;
      case 5:
        result = "BCM_4350A0";
        break;
      case 6:
        result = "BCM_4350C5";
        break;
      case 7:
        result = "BCM_20703A1";
        break;
      case 8:
        result = "BCM_20703A2";
        break;
      case 9:
        result = "BCM_43430";
        break;
      case 10:
        result = "BCM_43452";
        break;
      case 11:
        result = "BCM_4355B3";
        break;
      case 12:
        result = "BCM_4355C0";
        break;
      case 13:
        result = "BCM_4355C1";
        break;
      case 14:
        result = "BCM_4355";
        break;
      case 15:
        result = "BCM_4357";
        break;
      case 16:
        result = "BCM_4364";
        break;
      case 17:
        result = "BCM_4364B0";
        break;
      case 18:
        result = "BCM_4364B3";
        break;
      case 19:
        result = "BCM_4377";
        break;
      case 20:
        result = "BCM_4378";
        break;
      case 21:
        result = "BCM_4378B3";
        break;
      case 22:
        result = "BCM_4387";
        break;
      case 24:
        result = "BCM_4388";
        break;
      case 25:
        result = "BCM_4388C2";
        break;
      case 26:
        result = "BCM_4399";
        break;
      default:
        return "Unknown Chipset";
    }
  }
  return result;
}

const char *sub_1003321F8(int a1)
{
  if (a1 > 1)
  {
    if (a1 != 2)
    {
      if (a1 == 240)
        return "Advanced Sniff";
      return "Unknown";
    }
    return "Sniff";
  }
  else
  {
    if (a1)
    {
      if (a1 == 1)
        return "Reserved";
      return "Unknown";
    }
    return "Active";
  }
}

uint64_t sub_100332258(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  BOOL v8;
  int v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  __int128 *p_p;
  int v15;
  int v16;
  char *v17;
  __int128 *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  _BOOL8 v38;
  const char *v39;
  uint64_t i;
  NSObject *v41;
  _BOOL8 v42;
  const char *v43;
  int v45;
  int v46;
  NSObject *v47;
  uint8_t buf[16];
  __int128 __p;
  uint64_t v50;

  v2 = a1 + 373;
  v3 = *(_DWORD *)(a1 + 712);
  v4 = a1 + 168;
  bzero((void *)(a1 + 168), 0x220uLL);
  if (v3 - 1 <= 0x7CE)
  {
    *(_WORD *)(a1 + 171) = 257;
    *(_BYTE *)(a1 + 174) = 1;
    *(_BYTE *)(a1 + 176) = 1;
    *(_WORD *)(a1 + 178) = 257;
    *(_BYTE *)(a1 + 189) = 1;
    *(_BYTE *)(a1 + 193) = 1;
    *(_BYTE *)(a1 + 195) = 1;
    *(_WORD *)(v4 + 153) = 257;
    *(_WORD *)(a1 + 324) = 257;
    *(_WORD *)(v4 + 161) = 257;
    *(_BYTE *)(a1 + 335) = 1;
    *(_WORD *)(v4 + 169) = 257;
    *(_WORD *)(a1 + 198) = 257;
    *(_BYTE *)(a1 + 342) = 1;
    *(_BYTE *)(a1 + 293) = 1;
    *(_BYTE *)(a1 + 420) = 1;
    *(_BYTE *)(a1 + 319) = 1;
    *(_DWORD *)(v4 + 147) = 16843009;
    *(_DWORD *)(v4 + 199) = 16843009;
    *(_DWORD *)(a1 + 364) = 16843009;
    *(_QWORD *)v2 = 0x101010101010101;
    *(_BYTE *)(a1 + 212) = (*(_DWORD *)(sub_1000438A4() + 712) - 19) < 0x7BD;
    *(_BYTE *)(a1 + 301) = (*(_DWORD *)(sub_1000438A4() + 712) - 20) < 0x7BC;
    *(_BYTE *)(a1 + 192) = 1;
    *(_BYTE *)(a1 + 332) = 1;
    *(_WORD *)(a1 + 205) = 257;
    *(_DWORD *)(a1 + 201) = 16843009;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 2168))(a1) ^ 1;
    if (v3 == 9)
      LOBYTE(v5) = 0;
    *(_BYTE *)(a1 + 341) = v5;
    *(_BYTE *)(a1 + 386) = 1;
    *(_BYTE *)(a1 + 175) = 1;
    *(_BYTE *)(a1 + 177) = 1;
    *(_BYTE *)(a1 + 183) = 1;
    *(_WORD *)(a1 + 181) = 257;
    *(_BYTE *)(a1 + 326) = 1;
    *(_WORD *)(a1 + 384) = 257;
    v8 = v3 != 1 && v3 != 11 && v3 != 16;
    *(_WORD *)(a1 + 169) = 257;
    *(_BYTE *)(a1 + 209) = v8;
    *(_BYTE *)(a1 + 336) = 1;
    *(_BYTE *)(a1 + 194) = 1;
    *(_WORD *)(a1 + 190) = 257;
    *(_WORD *)(a1 + 185) = 257;
    *(_BYTE *)(a1 + 338) = 1;
    *(_BYTE *)(a1 + 333) = 1;
    *(_WORD *)(a1 + 381) = 257;
    *(_BYTE *)(a1 + 200) = 1;
    if (v3 == 6)
    {
      v9 = 0;
      v10 = 0;
      *(_BYTE *)(a1 + 343) = 1;
      *(_BYTE *)(a1 + 207) = 1;
      *(_BYTE *)(a1 + 340) = 1;
      goto LABEL_78;
    }
    if (v3 >= 0xA)
    {
      *(_BYTE *)(a1 + 196) = 1;
      if (v3 == 10)
        goto LABEL_77;
      *(_BYTE *)(a1 + 180) = 1;
      *(_BYTE *)(a1 + 207) = 1;
      *(_BYTE *)(a1 + 340) = 1;
      *(_BYTE *)(a1 + 173) = 1;
      *(_BYTE *)(a1 + 219) = 1;
      *(_BYTE *)(a1 + 222) = 1;
    }
    if (v3 == 15)
    {
      v9 = 0;
      v10 = 0;
      *(_WORD *)(a1 + 319) = 256;
      *(_WORD *)(a1 + 187) = 257;
      *(_BYTE *)(a1 + 343) = 1;
      *(_BYTE *)(a1 + 213) = 1;
      *(_BYTE *)(a1 + 218) = 1;
      *(_BYTE *)(a1 + 339) = 1;
      *(_BYTE *)(a1 + 345) = 1;
      *(_BYTE *)(a1 + 208) = 1;
      *(_BYTE *)(a1 + 321) = 0;
      goto LABEL_78;
    }
    if (v3 != 9)
    {
LABEL_45:
      if (v3 < 0xC)
        goto LABEL_77;
      v9 = 0;
      v10 = 0;
      *(_WORD *)(a1 + 319) = 256;
      *(_BYTE *)(a1 + 321) = 0;
      if (v3 < 0x13)
        goto LABEL_78;
      *(_WORD *)(a1 + 260) = 257;
      *(_BYTE *)(a1 + 339) = 1;
      *(_BYTE *)(a1 + 345) = 1;
      *(_BYTE *)(a1 + 347) = 1;
      *(_DWORD *)(a1 + 224) = 16843009;
      *(_WORD *)(a1 + 228) = 257;
      if (v3 <= 0x14)
        *(_BYTE *)(a1 + 188) = 1;
      *(_BYTE *)(a1 + 344) = 1;
      *(_BYTE *)(a1 + 210) = 1;
      *(_BYTE *)(a1 + 416) = 1;
      *(_WORD *)(a1 + 327) = 257;
      *(_BYTE *)(a1 + 264) = 1;
      *(_BYTE *)(a1 + 272) = 1;
      *(_BYTE *)(a1 + 282) = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2328))(a1) != 0;
      *(_WORD *)(a1 + 273) = 257;
      *(_BYTE *)(a1 + 279) = 1;
      *(_WORD *)(a1 + 283) = 257;
      *(_BYTE *)(a1 + 285) = 1;
      *(_WORD *)(a1 + 387) = 257;
      *(_BYTE *)(a1 + 389) = 1;
      *(_BYTE *)(a1 + 392) = 1;
      *(_BYTE *)(a1 + 394) = 1;
      *(_WORD *)(a1 + 398) = 257;
      *(_BYTE *)(a1 + 400) = 1;
      *(_WORD *)(a1 + 371) = 257;
      *(_WORD *)(a1 + 256) = 257;
      *(_BYTE *)(a1 + 360) = 1;
      *(_BYTE *)(a1 + 208) = 1;
      *(_BYTE *)(a1 + 353) = 1;
      *(_DWORD *)(a1 + 349) = 16843009;
      *(_DWORD *)(v2 + 56) = 16843009;
      if (v3 == 19)
      {
        *(_BYTE *)(a1 + 263) = 1;
      }
      else if ((v3 & 0xFFFFFFFE) == 0x14)
      {
        goto LABEL_57;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
      {
LABEL_58:
        if (v3 == 21)
        {
          v15 = 0;
          v9 = 1;
          *(_BYTE *)(a1 + 393) = 1;
          *(_BYTE *)(a1 + 265) = 1;
          *(_BYTE *)(a1 + 348) = 1;
          *(_BYTE *)(a1 + 240) = 1;
          v16 = 1;
          v10 = 1;
          goto LABEL_79;
        }
        if (v3 >= 0x16)
        {
          *(_BYTE *)(a1 + 356) = 1;
          *(_BYTE *)(a1 + 393) = 1;
          *(_BYTE *)(a1 + 230) = 1;
          *(_BYTE *)(a1 + 424) = 1;
          *(_BYTE *)(a1 + 406) = 1;
          *(_BYTE *)(a1 + 403) = 1;
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) & 1) == 0)
          {
            *(_BYTE *)(a1 + 423) = 1;
            *(_BYTE *)(a1 + 425) = 1;
          }
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 3552))(a1))
            *(_BYTE *)(a1 + 395) = 1;
          v9 = 1;
          *(_BYTE *)(a1 + 265) = 1;
          if ((v3 & 0xFFFFFFFE) == 0x14
            || (v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1), v3 - 24 < 3)
            || v46)
          {
            *(_BYTE *)(a1 + 348) = 1;
            *(_BYTE *)(a1 + 240) = 1;
          }
          v10 = 1;
LABEL_78:
          v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
          v16 = 0;
          v21 = 0;
          v15 = v9;
          if (!v20)
          {
LABEL_80:
            if (v3 >= 0x18)
            {
              *(_BYTE *)(a1 + 235) = 1;
              *(_DWORD *)(a1 + 231) = 16843009;
              *(_DWORD *)(a1 + 236) = 16842752;
              *(_BYTE *)(a1 + 243) = 1;
              *(_WORD *)(a1 + 241) = 257;
              *(_BYTE *)(a1 + 184) = 1;
              *(_BYTE *)(a1 + 334) = 1;
              *(_BYTE *)(a1 + 298) = 1;
              *(_WORD *)(a1 + 426) = 257;
              *(_WORD *)(a1 + 303) = 257;
              *(_QWORD *)(a1 + 247) = 0x101010101010101;
              *(_BYTE *)(a1 + 255) = 1;
            }
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2744))(a1))
            {
              *(_BYTE *)(a1 + 412) = 1;
              *(_DWORD *)(a1 + 408) = 16843009;
            }
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2760))(a1))
              *(_WORD *)(a1 + 413) = 257;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2096))(a1))
              *(_BYTE *)(a1 + 436) = 1;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2568))(a1))
              *(_BYTE *)(a1 + 434) = 1;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2576))(a1))
              *(_BYTE *)(a1 + 407) = 1;
            switch(v3)
            {
              case 6u:
                *(_BYTE *)(a1 + 208) = 1;
                if (v10)
                  goto LABEL_132;
                goto LABEL_145;
              case 0xAu:
                __p = 0uLL;
                v50 = 0;
                v22 = sub_10034D3CC();
                if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v22 + 64))(v22, &__p))
                  goto LABEL_120;
                v23 = HIBYTE(v50);
                if (v50 < 0)
                  v23 = *((_QWORD *)&__p + 1);
                if (!v23 || sub_100333154((uint64_t *)&__p, "Bacchus", 0) == -1)
                  goto LABEL_120;
                v24 = qword_1009997E8;
                if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_119;
                *(_WORD *)buf = 0;
                v25 = "BCM_43452 that supports Wireless Splitter";
                goto LABEL_118;
              case 0xCu:
                __p = 0uLL;
                v50 = 0;
                v26 = sub_10034D3CC();
                if (!(*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v26 + 64))(v26, &__p))
                {
                  v27 = HIBYTE(v50);
                  if (v50 < 0)
                    v27 = *((_QWORD *)&__p + 1);
                  if (v27
                    && (sub_100333154((uint64_t *)&__p, "Joy", 0) != -1
                     || sub_100333154((uint64_t *)&__p, "Anger", 0) != -1
                     || sub_100333154((uint64_t *)&__p, "Fear", 0) != -1
                     || sub_100333154((uint64_t *)&__p, "Elsa", 0) != -1
                     || sub_100333154((uint64_t *)&__p, "Kristoff", 0) != -1
                     || sub_100333154((uint64_t *)&__p, "Olaf", 0) != -1
                     || sub_100333154((uint64_t *)&__p, "Sven", 0) != -1))
                  {
                    v24 = qword_1009997E8;
                    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      v25 = "BCM_4355C0 that supports Wireless Splitter";
LABEL_118:
                      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v25, buf, 2u);
                    }
LABEL_119:
                    *(_BYTE *)(a1 + 271) = 1;
                  }
                }
LABEL_120:
                *(_BYTE *)(a1 + 208) = 1;
                goto LABEL_130;
              case 0xDu:
                __p = 0uLL;
                v50 = 0;
                v28 = sub_10034D3CC();
                if (!(*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v28 + 64))(v28, &__p))
                {
                  v29 = HIBYTE(v50);
                  if (v50 < 0)
                    v29 = *((_QWORD *)&__p + 1);
                  if (v29
                    && (sub_100333154((uint64_t *)&__p, "Figaro", 0) != -1
                     || sub_100333154((uint64_t *)&__p, "Rudder", 0) != -1))
                  {
                    v30 = qword_1009997E8;
                    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "BCM_4355C1 that supports Wireless Splitter", buf, 2u);
                    }
                    *(_BYTE *)(a1 + 271) = 1;
                  }
                }
LABEL_130:
                if ((SHIBYTE(v50) & 0x80000000) == 0)
                  goto LABEL_131;
                operator delete((void *)__p);
                if (!v10)
                  goto LABEL_145;
                goto LABEL_132;
              default:
                if (v3 < 0xF)
                {
LABEL_131:
                  if (!v10)
                    goto LABEL_145;
                }
                else
                {
                  *(_BYTE *)(a1 + 256) = 1;
                  *(_BYTE *)(a1 + 271) = 1;
                  *(_BYTE *)(a1 + 294) = 1;
                  if (!v10)
                    goto LABEL_145;
                }
LABEL_132:
                if ((v3 & 0xFFFFFFFE) == 0x14)
                  goto LABEL_136;
                v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) ^ 1;
                if ((v3 & 0xFFFFFFFD) == 0x18)
                  LOBYTE(v31) = 0;
                if ((v31 & 1) == 0)
LABEL_136:
                  *(_WORD *)(a1 + 401) = 257;
                v32 = sub_10003BE44();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 408))(v32))
                  *(_WORD *)(a1 + 357) = 257;
                *(_BYTE *)(a1 + 192) = 0;
                *(_BYTE *)(a1 + 323) = 1;
                *(_BYTE *)(a1 + 359) = 1;
                *(_BYTE *)(a1 + 396) = 1;
                *(_BYTE *)(a1 + 225) = 1;
                *(_BYTE *)(a1 + 272) = 1;
                *(_BYTE *)(a1 + 282) = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2328))(a1) != 0;
                *(_WORD *)(a1 + 273) = 257;
                if (v3 == 20)
                {
                  v33 = sub_10003BE44();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 328))(v33))
                    *(_BYTE *)(a1 + 277) = 1;
                }
                *(_BYTE *)(a1 + 279) = 1;
                *(_WORD *)(a1 + 283) = 257;
                *(_BYTE *)(a1 + 285) = 1;
                *(_BYTE *)(a1 + 292) = 1;
                *(_WORD *)(a1 + 295) = 257;
                *(_BYTE *)(a1 + 299) = 1;
                *(_BYTE *)(a1 + 355) = 1;
                *(_BYTE *)(a1 + 305) = 1;
                *(_BYTE *)(a1 + 297) = 1;
                if (sub_10005F7EC())
                {
                  *(_WORD *)(a1 + 290) = 257;
                  *(_DWORD *)(a1 + 286) = 16843009;
                }
                *(_BYTE *)(a1 + 417) = 1;
LABEL_145:
                if (v15)
                {
                  *(_BYTE *)(a1 + 354) = 1;
                  *(_BYTE *)(a1 + 300) = 1;
                  *(_BYTE *)(a1 + 396) = 1;
                  *(_BYTE *)(a1 + 302) = 1;
                  *(_BYTE *)(a1 + 404) = 1;
                  *(_BYTE *)(a1 + 225) = 1;
                  *(_BYTE *)(a1 + 272) = 1;
                  *(_BYTE *)(a1 + 282) = (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2328))(a1) != 0;
                  *(_WORD *)(a1 + 273) = 257;
                  *(_BYTE *)(a1 + 277) = 1;
                  *(_WORD *)(a1 + 279) = 257;
                  *(_BYTE *)(a1 + 281) = 1;
                  *(_WORD *)(a1 + 283) = 257;
                  *(_BYTE *)(a1 + 285) = 1;
                  *(_BYTE *)(a1 + 397) = 1;
                  *(_BYTE *)(a1 + 363) = 1;
                  v34 = sub_10003BE44();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 328))(v34))
                    *(_BYTE *)(a1 + 278) = 1;
                }
                v35 = sub_10003BE44();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 352))(v35))
                {
                  if (v3 <= 0x14 && ((1 << v3) & 0x189440) != 0)
                    goto LABEL_151;
                  v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) ^ 1;
                  if ((v3 & 0xFFFFFFFD) == 0x18)
                    LOBYTE(v45) = 0;
                  if ((v45 & 1) == 0)
LABEL_151:
                    *(_BYTE *)(a1 + 361) = 1;
                }
                v36 = sub_10003BE44();
                if ((v21 & (*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 408))(v36)) == 1)
                  *(_BYTE *)(a1 + 361) = 1;
                *(_BYTE *)(a1 + 415) = 0;
                if (v9)
                  *(_BYTE *)(a1 + 362) = 1;
                if (v3 - 21 <= 5)
                {
                  *(_WORD *)(a1 + 267) = 257;
                  *(_WORD *)(a1 + 306) = 257;
                }
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2768))(a1))
                  *(_DWORD *)(a1 + 308) = 16843009;
                break;
            }
            goto LABEL_160;
          }
LABEL_79:
          *(_BYTE *)(a1 + 405) = 1;
          v21 = v16;
          goto LABEL_80;
        }
        if (v3 == 20)
        {
          v9 = 0;
          v10 = 1;
          *(_BYTE *)(a1 + 348) = 1;
          *(_BYTE *)(a1 + 240) = 1;
          goto LABEL_78;
        }
LABEL_77:
        v9 = 0;
        v10 = 0;
        goto LABEL_78;
      }
LABEL_57:
      *(_BYTE *)(a1 + 353) = 0;
      goto LABEL_58;
    }
    __p = 0uLL;
    v50 = 0;
    v11 = sub_10034D3CC();
    if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v11 + 64))(v11, &__p))
    {
LABEL_40:
      v12 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "43430B0", buf, 2u);
      }
      *(_WORD *)(a1 + 368) = 0;
      *(_BYTE *)(a1 + 370) = 0;
      *(_BYTE *)(a1 + 341) = 0;
      *(_BYTE *)(a1 + 209) = 0;
      *(_QWORD *)v2 = 0;
LABEL_43:
      if (SHIBYTE(v50) < 0)
        operator delete((void *)__p);
      goto LABEL_45;
    }
    if (SHIBYTE(v50) < 0)
    {
      v13 = *((_QWORD *)&__p + 1);
      if (!*((_QWORD *)&__p + 1))
        goto LABEL_40;
      p_p = (__int128 *)__p;
    }
    else
    {
      v13 = HIBYTE(v50);
      if (!HIBYTE(v50))
        goto LABEL_40;
      p_p = &__p;
    }
    if (v13 >= 2)
    {
      v17 = (char *)p_p + v13;
      v18 = p_p;
      while (1)
      {
        v19 = (char *)memchr(v18, 66, v13 - 1);
        if (!v19)
          break;
        if (*(_WORD *)v19 == 12610)
        {
          if (v19 == v17 || v19 - (char *)p_p == -1)
            goto LABEL_40;
          v47 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "43430B1", buf, 2u);
          }
          *(_BYTE *)(a1 + 207) = 1;
          goto LABEL_43;
        }
        v18 = (__int128 *)(v19 + 1);
        v13 = v17 - (char *)v18;
        if (v17 - (char *)v18 < 2)
          goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  if (v3 - 2000 <= 0x7CF)
  {
    *(_BYTE *)(a1 + 169) = 1;
    *(_BYTE *)(a1 + 176) = 1;
    *(_BYTE *)(a1 + 189) = 1;
    *(_BYTE *)(a1 + 197) = 1;
    *(_BYTE *)(a1 + 191) = 1;
    *(_WORD *)(a1 + 171) = 257;
    *(_BYTE *)(a1 + 209) = 1;
    *(_BYTE *)(a1 + 199) = 1;
    *(_BYTE *)(a1 + 180) = 1;
    *(_BYTE *)(a1 + 211) = 1;
    *(_BYTE *)(a1 + 220) = 1;
    *(_BYTE *)(a1 + 185) = 1;
    *(_BYTE *)(a1 + 259) = 1;
    *(_BYTE *)(a1 + 293) = 1;
    *(_BYTE *)(a1 + 317) = 1;
    *(_BYTE *)(a1 + 315) = 1;
    *(_BYTE *)(a1 + 329) = 1;
    *(_BYTE *)(a1 + 335) = 1;
    *(_BYTE *)(a1 + 325) = 1;
    *(_BYTE *)(a1 + 330) = 1;
    *(_BYTE *)(a1 + 342) = 1;
    *(_BYTE *)(a1 + 223) = 1;
    *(_BYTE *)(a1 + 346) = 1;
    *(_BYTE *)(a1 + 369) = 1;
    *(_WORD *)(a1 + 382) = 257;
    *(_BYTE *)(a1 + 256) = 1;
    *(_BYTE *)(a1 + 262) = 1;
    *(_WORD *)(a1 + 269) = 257;
    *(_DWORD *)(a1 + 214) = 16843009;
    *(_DWORD *)(a1 + 364) = 16843009;
    *(_QWORD *)v2 = 0x101010101010101;
    if (v3 >= 0x7D1)
    {
      *(_BYTE *)(a1 + 258) = 1;
      *(_BYTE *)(a1 + 322) = 1;
      *(_BYTE *)(a1 + 392) = 1;
      *(_BYTE *)(a1 + 394) = 1;
      *(_BYTE *)(a1 + 415) = 1;
      *(_DWORD *)(a1 + 224) = 16843009;
      *(_DWORD *)(v2 + 13) = 16843009;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 3448))(a1))
        *(_BYTE *)(a1 + 418) = 1;
      if (sub_10005F7EC())
      {
        *(_BYTE *)(a1 + 288) = 1;
        *(_BYTE *)(a1 + 291) = 1;
      }
      *(_WORD *)(a1 + 305) = 257;
      *(_WORD *)(a1 + 371) = 257;
      *(_BYTE *)(a1 + 396) = 1;
      *(_WORD *)(a1 + 421) = 257;
      *(_BYTE *)(a1 + 433) = 1;
      *(_BYTE *)(a1 + 428) = 1;
      *(_BYTE *)(a1 + 307) = 1;
      *(_BYTE *)(a1 + 406) = 1;
      *(_BYTE *)(a1 + 333) = 1;
      *(_BYTE *)(a1 + 351) = 1;
      *(_BYTE *)(a1 + 314) = 1;
      *(_WORD *)(a1 + 312) = 257;
      if (v3 >= 0x7D2)
      {
        *(_BYTE *)(a1 + 419) = 1;
        *(_BYTE *)(a1 + 439) = 1;
      }
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2320))(a1))
      *(_WORD *)(a1 + 272) = 257;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2320))(a1)
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2472))(a1))
    {
      *(_BYTE *)(a1 + 279) = 1;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2472))(a1))
    {
      *(_BYTE *)(a1 + 285) = 1;
      *(_BYTE *)(a1 + 274) = 1;
      *(_WORD *)(a1 + 283) = 257;
      *(_WORD *)(a1 + 275) = 257;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2568))(a1))
      *(_BYTE *)(a1 + 434) = 1;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 2576))(a1))
      *(_BYTE *)(a1 + 407) = 1;
  }
LABEL_160:
  v37 = qword_1009997E8;
  v38 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  if (v38)
  {
    v39 = sub_100332030(v38, v3);
    LODWORD(__p) = 136446210;
    *(_QWORD *)((char *)&__p + 4) = v39;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "%{public}s supports the following VSCs", (uint8_t *)&__p, 0xCu);
  }
  for (i = 0; i != 272; ++i)
  {
    if (*(_BYTE *)(a1 + 168 + i))
    {
      v41 = qword_1009997E8;
      v42 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO);
      if (v42)
      {
        v43 = sub_1000438E4(v42, i);
        LODWORD(__p) = 136446210;
        *(_QWORD *)((char *)&__p + 4) = v43;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "%{public}s", (uint8_t *)&__p, 0xCu);
      }
    }
  }
  return 0;
}

void sub_100333124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_100333154(uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  int64_t v8;
  void *v9;
  char *v10;
  int64_t v11;
  char *v12;
  int v14;
  uint64_t v15;
  char *v16;

  v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v5 = *a1;
    v6 = a1[1];
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
  }
  v7 = strlen(__s);
  if (v6 < a3)
    return -1;
  v8 = v7;
  if (v7)
  {
    v9 = (void *)(v5 + a3);
    v10 = (char *)(v5 + v6);
    v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      v14 = *__s;
      do
      {
        v15 = v11 - v8;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16)
          break;
        v12 = v16;
        if (!memcmp(v16, __s, v8))
          goto LABEL_9;
        v9 = v12 + 1;
        v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    v12 = v10;
LABEL_9:
    if (v12 == v10)
      return -1;
    else
      return (unint64_t)&v12[-v5];
  }
  return a3;
}

uint64_t sub_100333228(int *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = (uint64_t)(a1 + 180);
  if (!(*(unsigned int (**)(int *, int *))(*(_QWORD *)a1 + 1224))(a1, a1 + 180))
  {
    result = sub_1001F4E30(a1[178], v2);
    if (!(_DWORD)result)
      return result;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E07B8();
  }
  return 110;
}

uint64_t sub_1003332A4()
{
  uint64_t result;

  result = sub_1000E74C4(sub_100333300);
  if ((_DWORD)result)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E08A4();
    return 110;
  }
  return result;
}

void sub_100333300(uint64_t a1, uint64_t a2, char *a3)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100928588);
  sub_1004A3B4C((uint64_t)off_100977A50, a1, a2, a3);
}

uint64_t sub_100333368()
{
  uint64_t result;

  result = sub_1000E74D4(sub_1003333C4);
  if ((_DWORD)result)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E0904();
    return 110;
  }
  return result;
}

void sub_1003333C4(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100928588);
  sub_1004A39F8((uint64_t)off_100977A50, a1);
}

uint64_t sub_100333414(uint64_t a1, uint64_t a2)
{
  _QWORD v4[2];
  uint64_t v5;

  v4[1] = 0;
  v5 = a2;
  v4[0] = 0;
  sub_10003415C((uint64_t)v4, a1 + 8);
  sub_10000F7A0((uint64_t **)(a1 + 136), (unint64_t *)&v5, &v5);
  return sub_100034234((uint64_t)v4);
}

void sub_100333464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100333478(uint64_t a1, unint64_t a2)
{
  _QWORD v4[2];
  unint64_t v5;

  v4[1] = 0;
  v5 = a2;
  v4[0] = 0;
  sub_10003415C((uint64_t)v4, a1 + 8);
  sub_100015ECC(a1 + 136, &v5);
  return sub_100034234((uint64_t)v4);
}

void sub_1003334C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003334D8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 164) == a3)
    return 0;
  if ((a3 - 1) > 3)
    return 1;
  result = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 8 * qword_10073E008[a3 - 1]))();
  if (!(_DWORD)result)
    *(_DWORD *)(a1 + 164) = a3;
  return result;
}

BOOL sub_100333540()
{
  unsigned int v0;

  v0 = *(_DWORD *)(sub_1000438A4() + 712) - 1;
  if (v0 >= 0xF9F && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006E0964();
  return v0 < 0x7CF;
}

uint64_t sub_1003335A8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 256);
}

uint64_t sub_1003335B0()
{
  return 2 * ((*(_DWORD *)(sub_1000438A4() + 712) - 19) < 0x7BD);
}

uint64_t sub_1003335D8()
{
  int v0;
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;

  v0 = *(_DWORD *)(sub_1000438A4() + 712);
  v1 = v0 - 19;
  if ((v0 - 2001) >= 0x7CF)
    v2 = 0;
  else
    v2 = 3;
  if (v0 == 19)
    v3 = 1;
  else
    v3 = 4;
  if (v1 <= 0x7BC)
    return v3;
  else
    return v2;
}

uint64_t sub_100333618(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 257);
}

uint64_t sub_100333620(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 416);
}

uint64_t sub_100333628(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 356);
}

BOOL sub_100333630()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v0 + 344))(v0)
    && (v1 = sub_1000438A4(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2376))(v1) & 1) != 0))
  {
    return 1;
  }
  else
  {
    return (*(_DWORD *)(sub_1000438A4() + 712) - 19) < 0x7BD;
  }
}

void sub_100333684()
{
  NSObject *v0;
  char v1;
  uint8_t buf[16];

  if (qword_100991E10 != -1)
    dispatch_once(&qword_100991E10, &stru_1009276E8);
  if (dword_10097AD68 == 3)
  {
    v0 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "BT Sleep now", buf, 2u);
    }
    v1 = 0;
    sub_100043758(&v1);
    sub_10010BA6C();
    sub_10004339C(&v1);
    sub_100043728(&v1);
  }
}

void sub_100333740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_100333754(id a1)
{
  dword_10097AD68 = sub_1001702EC();
}

uint64_t sub_100333770(uint64_t a1, uint64_t a2)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003337E4;
  block[3] = &unk_100917378;
  block[4] = a2;
  if (qword_100991E20 != -1)
    dispatch_once(&qword_100991E20, block);
  return byte_100991E18;
}

void sub_1003337E4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  int v5;
  void *__p[2];
  char v7;
  uint8_t buf[8];
  char v9;

  **(_BYTE **)(a1 + 32) = 0;
  v2 = sub_100027F68();
  sub_100091AE8(buf, "Device");
  sub_100091AE8(__p, "GazeOnHeadOverride");
  v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, _QWORD))(*(_QWORD *)v2 + 72))(v2, buf, __p, *(_QWORD *)(a1 + 32));
  if (v7 < 0)
    operator delete(__p[0]);
  if ((v9 & 0x80000000) == 0)
  {
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  operator delete(*(void **)buf);
  if (v3)
LABEL_5:
    byte_100991E18 = 1;
LABEL_6:
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = **(unsigned __int8 **)(a1 + 32);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "gazeOverrideConfiguration is %d", buf, 8u);
  }
}

void sub_100333914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100333950(uint64_t a1, uint64_t a2)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003339C4;
  block[3] = &unk_100917378;
  block[4] = a2;
  if (qword_100991E30 != -1)
    dispatch_once(&qword_100991E30, block);
  return byte_100991E28;
}

void sub_1003339C4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  int v5;
  void *__p[2];
  char v7;
  uint8_t buf[8];
  char v9;

  **(_BYTE **)(a1 + 32) = 0;
  v2 = sub_100027F68();
  sub_100091AE8(buf, "Device");
  sub_100091AE8(__p, "GazePresentOverride");
  v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, _QWORD))(*(_QWORD *)v2 + 72))(v2, buf, __p, *(_QWORD *)(a1 + 32));
  if (v7 < 0)
    operator delete(__p[0]);
  if ((v9 & 0x80000000) == 0)
  {
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  operator delete(*(void **)buf);
  if (v3)
LABEL_5:
    byte_100991E28 = 1;
LABEL_6:
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = **(unsigned __int8 **)(a1 + 32);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "forceGazePresentOverride is %d", buf, 8u);
  }
}

void sub_100333AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100333B30(uint64_t a1)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v2 = sub_10005F864() - 20;
  result = 2;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 85:
    case 86:
    case 87:
    case 88:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 132:
    case 155:
    case 156:
    case 157:
    case 158:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
      return result;
    default:
      v4 = sub_10003BE44();
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 344))(v4) & 1) != 0)
      {
        result = 0;
      }
      else
      {
        v5 = sub_10003BE44();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 384))(v5))
        {
          v6 = *(_DWORD *)(a1 + 712);
          v7 = v6 - 1;
          v8 = 2 * (v6 > 0x14);
          if (v7 <= 0x7CE)
            result = v8;
          else
            result = 0;
        }
        else
        {
          result = 1;
        }
      }
      break;
  }
  return result;
}

BOOL sub_100333BD0(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  _BOOL8 result;

  v2 = *(_DWORD *)(a1 + 712);
  if (!v2)
    return 0;
  if (a2 - 1 <= 0x7CE && v2 < 0x7D0)
    return v2 >= a2;
  if (v2 < 0x7D0)
    return 0;
  result = 0;
  if (a2 - 2000 <= 0x7CF && v2 <= 0xF9F)
    return v2 >= a2;
  return result;
}

uint64_t sub_100333C24(int a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100928588);
  return sub_100043784(a1, 0xF7u);
}

uint64_t sub_100333C70(_DWORD *a1, char a2)
{
  _QWORD v5[5];
  char v6;

  if ((a1[178] - 2001) > 0x7CE)
    return 0;
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 2648))(a1))
    a1[179] |= 1u;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100333D18;
  v5[3] = &unk_1009263D8;
  v5[4] = a1;
  v6 = a2;
  return sub_100042FD0((uint64_t)a1, 247, 1, v5, 0);
}

uint64_t sub_100333D18()
{
  return sub_1001F6C48();
}

BOOL sub_100333D3C()
{
  return (*(_DWORD *)(sub_1000438A4() + 712) - 19) < 0x7BD;
}

uint64_t sub_100333D60()
{
  int v0;

  v0 = *(_DWORD *)(sub_1000438A4() + 712);
  return ((v0 - 1) < 0x13) & (0x8B000u >> v0);
}

BOOL sub_100333D94(uint64_t a1)
{
  return _os_feature_enabled_impl("BluetoothFeatures", "FilterAcceptListUnifiedWatch")
      && (*(_DWORD *)(a1 + 712) - 2001) < 0x7CF;
}

BOOL sub_100333DE4(uint64_t a1, int a2)
{
  int v4;
  unsigned int v5;
  _BOOL8 result;
  int v7;

  v4 = _os_feature_enabled_impl("BluetoothFeatures", "FilterAcceptListUnifiedWatch");
  v5 = *(_DWORD *)(a1 + 712);
  if (v4 && v5 - 2001 < 0x7CF)
    return 1;
  if (v5 - 1 > 0xF9E)
    return 0;
  switch(a2)
  {
    case 0:
    case 1:
      v7 = *(unsigned __int8 *)(a1 + 382);
      goto LABEL_15;
    case 2:
    case 3:
    case 4:
      goto LABEL_8;
    case 5:
      goto LABEL_13;
    case 6:
      v7 = *(unsigned __int8 *)(a1 + 407);
      goto LABEL_15;
    default:
      if (a2 != 100)
        return 0;
LABEL_8:
      if (v5 > 0x7CF)
      {
        if (v5 != 2000)
          return 1;
      }
      else if (v5 - 20 < 7)
      {
        return 1;
      }
LABEL_13:
      v7 = *(unsigned __int8 *)(a1 + 403);
LABEL_15:
      result = v7 != 0;
      break;
  }
  return result;
}

void sub_100333EB4(uint64_t a1)
{
  sub_100300D04(a1);
  operator delete();
}

uint64_t sub_100333ED8()
{
  return 0;
}

uint64_t sub_100333EE0()
{
  return 0;
}

uint64_t sub_100333EE8()
{
  return 0;
}

uint64_t sub_100333EF0()
{
  return 0;
}

uint64_t sub_100333EF8()
{
  return 0;
}

uint64_t sub_100333F00()
{
  return 0;
}

uint64_t sub_100333F08()
{
  return 0;
}

uint64_t sub_100333F10()
{
  return 0;
}

uint64_t sub_100333F18()
{
  return 0;
}

uint64_t sub_100333F20()
{
  return 0;
}

uint64_t sub_100333F28()
{
  return 0;
}

uint64_t sub_100333F30()
{
  return 0;
}

uint64_t sub_100333F38()
{
  return 0;
}

uint64_t sub_100333F40()
{
  return 0;
}

uint64_t sub_100333F48()
{
  return 0;
}

uint64_t sub_100333F50()
{
  return 0;
}

uint64_t sub_100333F58()
{
  return 0;
}

uint64_t sub_100333F60()
{
  return 0;
}

uint64_t sub_100333F68()
{
  return 0;
}

uint64_t sub_100333F70()
{
  return 0;
}

uint64_t sub_100333F78()
{
  return 0;
}

uint64_t sub_100333F80(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t sub_100333F8C()
{
  return 0;
}

uint64_t sub_100333F94()
{
  return 0;
}

uint64_t sub_100333F9C(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t sub_100333FA8()
{
  return 0;
}

uint64_t sub_100333FB0()
{
  return 0;
}

uint64_t sub_100333FB8()
{
  return 0;
}

uint64_t sub_100333FC0()
{
  return 0;
}

uint64_t sub_100333FC8()
{
  return 2;
}

uint64_t sub_100333FD0()
{
  return 2;
}

uint64_t sub_100333FD8()
{
  return 2;
}

uint64_t sub_100333FE0()
{
  return 2;
}

uint64_t sub_100333FE8()
{
  return 2;
}

uint64_t sub_100333FF0()
{
  return 2;
}

uint64_t sub_100333FF8()
{
  return 2;
}

uint64_t sub_100334000()
{
  return 2;
}

uint64_t sub_100334008()
{
  return 2;
}

uint64_t sub_100334010()
{
  return 2;
}

uint64_t sub_100334018()
{
  return 2;
}

uint64_t sub_100334020()
{
  return 2;
}

uint64_t sub_100334028()
{
  return 2;
}

uint64_t sub_100334030()
{
  return 2;
}

uint64_t sub_100334038()
{
  return 2;
}

uint64_t sub_100334040()
{
  return 2;
}

uint64_t sub_100334048()
{
  return 2;
}

uint64_t sub_100334050()
{
  return 2;
}

uint64_t sub_100334058()
{
  return 2;
}

uint64_t sub_100334060()
{
  return 2;
}

uint64_t sub_100334068()
{
  return 2;
}

uint64_t sub_100334070()
{
  return 2;
}

uint64_t sub_100334078()
{
  return 2;
}

uint64_t sub_100334080()
{
  return 2;
}

uint64_t sub_100334088()
{
  return 2;
}

uint64_t sub_100334090()
{
  return 2;
}

uint64_t sub_100334098()
{
  return 2;
}

uint64_t sub_1003340A0()
{
  return 2;
}

uint64_t sub_1003340A8(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
  return 2;
}

uint64_t sub_1003340B4()
{
  return 2;
}

uint64_t sub_1003340BC()
{
  return 2;
}

uint64_t sub_1003340C4()
{
  return 2;
}

uint64_t sub_1003340CC()
{
  return 2;
}

uint64_t sub_1003340D4()
{
  return 2;
}

uint64_t sub_1003340DC()
{
  return 2;
}

uint64_t sub_1003340E4()
{
  return 2;
}

uint64_t sub_1003340EC()
{
  return 2;
}

uint64_t sub_1003340F4()
{
  return 2;
}

uint64_t sub_1003340FC()
{
  return 2;
}

uint64_t sub_100334104()
{
  return 2;
}

uint64_t sub_10033410C()
{
  return 2;
}

uint64_t sub_100334114()
{
  return 2;
}

uint64_t sub_10033411C()
{
  return 2;
}

uint64_t sub_10033412C()
{
  return 2;
}

uint64_t sub_100334134()
{
  return 2;
}

uint64_t sub_10033413C()
{
  return 2;
}

uint64_t sub_100334144()
{
  return 2;
}

uint64_t sub_10033414C()
{
  return 2;
}

uint64_t sub_100334154()
{
  return 2;
}

uint64_t sub_10033415C()
{
  return 2;
}

uint64_t sub_100334164()
{
  return 2;
}

uint64_t sub_10033416C()
{
  return 2;
}

uint64_t sub_100334174()
{
  return 2;
}

uint64_t sub_10033417C()
{
  return 2;
}

uint64_t sub_100334184()
{
  return 2;
}

uint64_t sub_10033418C()
{
  return 2;
}

uint64_t sub_100334194()
{
  return 2;
}

uint64_t sub_10033419C()
{
  return 2;
}

uint64_t sub_1003341A4()
{
  return 2;
}

uint64_t sub_1003341AC()
{
  return 2;
}

uint64_t sub_1003341B4()
{
  return 2;
}

uint64_t sub_1003341BC()
{
  return 2;
}

uint64_t sub_1003341C4()
{
  return 2;
}

uint64_t sub_1003341CC()
{
  return 2;
}

uint64_t sub_1003341D4()
{
  return 2;
}

uint64_t sub_1003341DC()
{
  return 2;
}

uint64_t sub_1003341E4()
{
  return 2;
}

uint64_t sub_1003341EC()
{
  return 2;
}

uint64_t sub_1003341F4()
{
  return 2;
}

uint64_t sub_1003341FC()
{
  return 2;
}

uint64_t sub_100334204()
{
  return 2;
}

uint64_t sub_10033420C()
{
  return 2;
}

uint64_t sub_100334214()
{
  return 2;
}

uint64_t sub_10033421C()
{
  return 2;
}

uint64_t sub_100334224()
{
  return 2;
}

uint64_t sub_10033422C()
{
  return 2;
}

uint64_t sub_100334234()
{
  return 2;
}

uint64_t sub_10033423C(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  return 2;
}

uint64_t sub_100334248()
{
  return 2;
}

uint64_t sub_100334250()
{
  return 2;
}

uint64_t sub_100334258()
{
  return 2;
}

uint64_t sub_100334260()
{
  return 2;
}

uint64_t sub_100334268()
{
  return 2;
}

uint64_t sub_100334270()
{
  return 2;
}

uint64_t sub_100334278()
{
  return 2;
}

uint64_t sub_100334280()
{
  return 2;
}

uint64_t sub_100334288()
{
  return 2;
}

uint64_t sub_100334290()
{
  return 2;
}

uint64_t sub_100334298()
{
  return 2;
}

uint64_t sub_1003342A0()
{
  return 2;
}

uint64_t sub_1003342A8()
{
  return 2;
}

uint64_t sub_1003342B0()
{
  return 2;
}

uint64_t sub_1003342B8()
{
  return 2;
}

uint64_t sub_1003342C0()
{
  return 2;
}

uint64_t sub_1003342C8()
{
  return 2;
}

uint64_t sub_1003342D0()
{
  return 2;
}

uint64_t sub_1003342D8()
{
  return 2;
}

uint64_t sub_1003342E0()
{
  return 2;
}

uint64_t sub_1003342E8()
{
  return 2;
}

uint64_t sub_1003342F0()
{
  return 2;
}

uint64_t sub_1003342F8()
{
  return 2;
}

uint64_t sub_100334300()
{
  return 2;
}

uint64_t sub_100334308()
{
  return 2;
}

uint64_t sub_100334310()
{
  return 2;
}

uint64_t sub_100334318()
{
  return 2;
}

uint64_t sub_100334320()
{
  return 2;
}

uint64_t sub_100334328()
{
  return 2;
}

uint64_t sub_100334330()
{
  return 2;
}

uint64_t sub_100334338()
{
  return 2;
}

uint64_t sub_100334340()
{
  return 2;
}

uint64_t sub_100334348()
{
  return 2;
}

uint64_t sub_100334350()
{
  return 2;
}

uint64_t sub_100334358()
{
  return 2;
}

uint64_t sub_100334360()
{
  return 2;
}

uint64_t sub_100334368()
{
  return 2;
}

uint64_t sub_100334370()
{
  return 2;
}

uint64_t sub_100334378()
{
  return 2;
}

uint64_t sub_100334380()
{
  return 2;
}

uint64_t sub_100334388()
{
  return 2;
}

uint64_t sub_100334390()
{
  return 2;
}

uint64_t sub_100334398()
{
  return 2;
}

uint64_t sub_1003343A0()
{
  return 2;
}

uint64_t sub_1003343A8()
{
  return 2;
}

uint64_t sub_1003343B0()
{
  return 2;
}

uint64_t sub_1003343B8()
{
  return 2;
}

uint64_t sub_1003343C0()
{
  return 2;
}

uint64_t sub_1003343C8()
{
  return 2;
}

uint64_t sub_1003343D0()
{
  return 2;
}

uint64_t sub_1003343D8()
{
  return 2;
}

uint64_t sub_1003343E0()
{
  return 2;
}

uint64_t sub_1003343E8()
{
  return 2;
}

uint64_t sub_1003343F0()
{
  return 2;
}

uint64_t sub_1003343F8()
{
  return 2;
}

uint64_t sub_100334400()
{
  return 2;
}

uint64_t sub_100334408()
{
  return 2;
}

uint64_t sub_100334410()
{
  return 2;
}

uint64_t sub_100334418()
{
  return 2;
}

uint64_t sub_100334420()
{
  return 2;
}

uint64_t sub_100334428()
{
  return 2;
}

uint64_t sub_100334430()
{
  return 2;
}

uint64_t sub_100334438()
{
  return 2;
}

uint64_t sub_100334440()
{
  return 2;
}

uint64_t sub_100334448()
{
  return 2;
}

uint64_t sub_100334450()
{
  return 2;
}

uint64_t sub_100334458()
{
  return 2;
}

uint64_t sub_100334460()
{
  return 2;
}

uint64_t sub_100334468()
{
  return 2;
}

uint64_t sub_100334470()
{
  return 2;
}

uint64_t sub_100334478()
{
  return 2;
}

uint64_t sub_100334480()
{
  return 2;
}

uint64_t sub_100334488()
{
  return 2;
}

uint64_t sub_100334490()
{
  return 2;
}

uint64_t sub_100334498()
{
  return 2;
}

uint64_t sub_1003344A0()
{
  return 2;
}

uint64_t sub_1003344A8()
{
  return 2;
}

uint64_t sub_1003344B0()
{
  return 2;
}

uint64_t sub_1003344B8()
{
  return 2;
}

uint64_t sub_1003344C0()
{
  return 2;
}

uint64_t sub_1003344C8()
{
  return 2;
}

uint64_t sub_1003344D0()
{
  return 2;
}

uint64_t sub_1003344D8()
{
  return 2;
}

uint64_t sub_1003344E0()
{
  return 2;
}

uint64_t sub_1003344E8()
{
  return 2;
}

uint64_t sub_1003344F0()
{
  return 2;
}

uint64_t sub_1003344F8()
{
  return 2;
}

uint64_t sub_100334500()
{
  return 2;
}

uint64_t sub_100334508()
{
  return 2;
}

uint64_t sub_100334510()
{
  return 2;
}

uint64_t sub_100334518()
{
  return 2;
}

uint64_t sub_100334520()
{
  return 2;
}

uint64_t sub_100334528()
{
  return 2;
}

uint64_t sub_100334530()
{
  return 2;
}

uint64_t sub_100334538()
{
  return 2;
}

uint64_t sub_100334540()
{
  return 2;
}

uint64_t sub_100334548()
{
  return 2;
}

uint64_t sub_100334550()
{
  return 2;
}

uint64_t sub_100334558()
{
  return 2;
}

uint64_t sub_100334560()
{
  return 2;
}

uint64_t sub_100334568()
{
  return 2;
}

uint64_t sub_100334570()
{
  return 2;
}

uint64_t sub_100334578()
{
  return 2;
}

uint64_t sub_100334580()
{
  return 2;
}

uint64_t sub_100334588()
{
  return 2;
}

uint64_t sub_100334590()
{
  return 2;
}

uint64_t sub_100334598()
{
  return 2;
}

uint64_t sub_1003345A0()
{
  return 2;
}

uint64_t sub_1003345A8()
{
  return 2;
}

uint64_t sub_1003345B0()
{
  return 2;
}

uint64_t sub_1003345B8()
{
  return 2;
}

uint64_t sub_1003345C0()
{
  return 2;
}

uint64_t sub_1003345C8()
{
  return 2;
}

uint64_t sub_1003345D0()
{
  return 0;
}

uint64_t sub_1003345D8()
{
  return 2;
}

uint64_t sub_1003345F0()
{
  return 0;
}

uint64_t sub_1003345F8()
{
  return 0;
}

uint64_t sub_100334600()
{
  return 0;
}

uint64_t sub_100334608()
{
  return 0;
}

uint64_t sub_100334610()
{
  return 0;
}

uint64_t sub_100334618()
{
  return 0;
}

uint64_t sub_100334620()
{
  return 0;
}

uint64_t sub_100334628()
{
  return 0;
}

uint64_t sub_100334630()
{
  return 0;
}

uint64_t sub_100334638()
{
  return 0;
}

uint64_t sub_100334640()
{
  return 0;
}

uint64_t sub_100334648()
{
  return 0;
}

uint64_t sub_100334650()
{
  return 0;
}

uint64_t sub_100334658()
{
  return 0;
}

uint64_t sub_100334660()
{
  return 0;
}

uint64_t sub_100334668()
{
  return 0;
}

uint64_t sub_100334670()
{
  return 0;
}

uint64_t sub_100334678()
{
  return 0;
}

uint64_t sub_100334680()
{
  return 0;
}

uint64_t sub_100334688()
{
  return 0;
}

uint64_t sub_100334690()
{
  return 0;
}

uint64_t sub_100334698()
{
  return 0;
}

uint64_t sub_1003346A0()
{
  return 0;
}

uint64_t sub_1003346A8()
{
  return 0;
}

uint64_t sub_1003346B0()
{
  return 0;
}

uint64_t sub_1003346B8()
{
  return 0;
}

uint64_t sub_1003346C0()
{
  return 0;
}

uint64_t sub_1003346C8()
{
  return 0;
}

uint64_t sub_1003346D0()
{
  return 0;
}

uint64_t sub_1003346D8()
{
  return 0;
}

uint64_t sub_1003346E0()
{
  return 0;
}

uint64_t sub_1003346E8()
{
  return 0;
}

uint64_t sub_1003346F0()
{
  return 0;
}

uint64_t sub_1003346F8()
{
  return 0;
}

uint64_t sub_100334700()
{
  return 0;
}

uint64_t sub_100334708()
{
  return 0;
}

uint64_t sub_100334710()
{
  return 0;
}

uint64_t sub_100334718()
{
  return 0;
}

uint64_t sub_100334720()
{
  return 0;
}

uint64_t sub_100334728()
{
  return 0;
}

uint64_t sub_100334730()
{
  return 0;
}

uint64_t sub_100334738()
{
  return 0;
}

uint64_t sub_100334740()
{
  return 0;
}

uint64_t sub_100334748()
{
  return 0;
}

uint64_t sub_100334750()
{
  return 0;
}

uint64_t sub_100334758()
{
  return 0;
}

uint64_t sub_100334760()
{
  return 0;
}

uint64_t sub_100334768()
{
  return 0;
}

uint64_t sub_100334770()
{
  return 0;
}

uint64_t sub_100334778()
{
  return 0;
}

uint64_t sub_100334780()
{
  return 0;
}

uint64_t sub_100334788()
{
  return 0;
}

uint64_t sub_100334790()
{
  return 0;
}

uint64_t sub_100334798()
{
  return 0;
}

uint64_t sub_1003347A0()
{
  return 0;
}

uint64_t sub_1003347A8()
{
  return 0;
}

uint64_t sub_1003347B0()
{
  return 0;
}

uint64_t sub_1003347B8()
{
  return 0;
}

uint64_t sub_1003347C0()
{
  return 0;
}

uint64_t sub_1003347C8()
{
  return 0;
}

uint64_t sub_1003347D0()
{
  return 0;
}

uint64_t sub_1003347D8()
{
  return 0;
}

uint64_t sub_1003347E0()
{
  return 0;
}

uint64_t sub_1003347E8()
{
  return 0;
}

uint64_t sub_1003347F0()
{
  return 0;
}

uint64_t sub_1003347F8()
{
  return 0;
}

uint64_t sub_100334800()
{
  return 0;
}

uint64_t sub_100334808()
{
  return 0;
}

uint64_t sub_100334810()
{
  return 0;
}

uint64_t sub_100334818()
{
  return 0;
}

uint64_t sub_100334820()
{
  return 0;
}

uint64_t sub_100334828()
{
  return 0;
}

uint64_t sub_100334830()
{
  return 0;
}

uint64_t sub_100334838()
{
  return 0;
}

uint64_t sub_100334840()
{
  return 0;
}

uint64_t sub_100334848()
{
  return 0;
}

uint64_t sub_100334850()
{
  return 0;
}

uint64_t sub_100334858()
{
  return 0;
}

uint64_t sub_100334860()
{
  return 0;
}

uint64_t sub_100334868()
{
  return 48;
}

uint64_t sub_100334870()
{
  return 0;
}

uint64_t sub_100334878()
{
  return 0;
}

uint64_t sub_100334880()
{
  return 0;
}

uint64_t sub_100334888()
{
  return 0;
}

uint64_t sub_100334890()
{
  return 0;
}

uint64_t sub_100334898()
{
  return 0;
}

uint64_t sub_1003348A0()
{
  return 0;
}

uint64_t sub_1003348A8()
{
  return 0;
}

uint64_t sub_1003348B0()
{
  return 0;
}

uint64_t sub_1003348B8()
{
  return 0;
}

uint64_t sub_1003348C0()
{
  return 0;
}

uint64_t sub_1003348C8()
{
  return 0;
}

uint64_t sub_1003348D0()
{
  return 0;
}

uint64_t sub_1003348D8()
{
  return 0;
}

uint64_t sub_1003348E0()
{
  return 0;
}

uint64_t sub_1003348E8()
{
  return 0;
}

uint64_t sub_1003348F0()
{
  return 0;
}

uint64_t sub_1003348F8()
{
  return 0;
}

uint64_t sub_100334900()
{
  return 2;
}

uint64_t sub_100334908()
{
  return 2;
}

uint64_t sub_100334910()
{
  return 2;
}

uint64_t sub_100334918()
{
  return 2;
}

uint64_t sub_100334920()
{
  return 2;
}

uint64_t sub_100334928()
{
  return 2;
}

uint64_t sub_100334930()
{
  return 2;
}

uint64_t sub_100334938()
{
  return 2;
}

uint64_t sub_100334940()
{
  return 2;
}

uint64_t sub_100334948()
{
  return 2;
}

uint64_t sub_100334950()
{
  return 2;
}

uint64_t sub_100334958()
{
  return 2;
}

uint64_t sub_100334960()
{
  return 2;
}

uint64_t sub_100334968()
{
  return 2;
}

uint64_t sub_100334970()
{
  return 2;
}

uint64_t sub_100334978()
{
  return 2;
}

uint64_t sub_100334980()
{
  return 2;
}

uint64_t sub_100334988()
{
  return 2;
}

uint64_t sub_100334990()
{
  return 2;
}

uint64_t sub_100334998()
{
  return 2;
}

uint64_t sub_1003349A0()
{
  return 2;
}

uint64_t sub_1003349A8()
{
  return 2;
}

uint64_t sub_1003349B0()
{
  return 2;
}

uint64_t sub_1003349B8()
{
  return 2;
}

uint64_t sub_1003349C0()
{
  return 2;
}

uint64_t sub_1003349C8()
{
  return 2;
}

uint64_t sub_1003349D0()
{
  return 2;
}

uint64_t sub_1003349D8()
{
  return 2;
}

uint64_t sub_1003349E0(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 712) = a2;
  return 0;
}

uint64_t sub_1003349EC()
{
  return 2;
}

uint64_t sub_1003349F4()
{
  return 2;
}

uint64_t sub_1003349FC()
{
  return 2;
}

uint64_t sub_100334A04()
{
  return 2;
}

uint64_t sub_100334A0C()
{
  return 2;
}

uint64_t sub_100334A14()
{
  return 2;
}

uint64_t sub_100334A1C()
{
  return 2;
}

uint64_t sub_100334A24()
{
  return 2;
}

uint64_t sub_100334A2C()
{
  return 2;
}

uint64_t sub_100334A34()
{
  return 2;
}

uint64_t sub_100334A3C()
{
  return 2;
}

uint64_t sub_100334A44()
{
  return 2;
}

uint64_t sub_100334A4C()
{
  return 2;
}

uint64_t sub_100334A54()
{
  return 2;
}

uint64_t sub_100334A5C()
{
  return 2;
}

uint64_t sub_100334A64()
{
  return 2;
}

uint64_t sub_100334A6C()
{
  return 2;
}

uint64_t sub_100334A74()
{
  return 2;
}

uint64_t sub_100334A7C()
{
  return 2;
}

uint64_t sub_100334A84()
{
  return 2;
}

uint64_t sub_100334A8C()
{
  return 2;
}

uint64_t sub_100334A94()
{
  return 2;
}

uint64_t sub_100334A9C()
{
  return 2;
}

uint64_t sub_100334AA4()
{
  return 2;
}

uint64_t sub_100334AAC()
{
  return 2;
}

uint64_t sub_100334AB4()
{
  return 2;
}

uint64_t sub_100334ABC()
{
  return 2;
}

uint64_t sub_100334AC4()
{
  return 2;
}

uint64_t sub_100334ACC()
{
  return 2;
}

uint64_t sub_100334AD4()
{
  return 2;
}

uint64_t sub_100334ADC()
{
  return 2;
}

uint64_t sub_100334AE4()
{
  return 2;
}

uint64_t sub_100334AEC()
{
  return 2;
}

uint64_t sub_100334AFC()
{
  return 2;
}

uint64_t sub_100334B04()
{
  return 0;
}

uint64_t sub_100334B0C()
{
  return 0;
}

uint64_t sub_100334B14()
{
  return 2;
}

uint64_t sub_100334B1C()
{
  return 2;
}

uint64_t sub_100334B24()
{
  return 2;
}

uint64_t sub_100334B2C()
{
  return 2;
}

uint64_t sub_100334B34()
{
  return 2;
}

uint64_t sub_100334B3C()
{
  return 2;
}

uint64_t sub_100334B44()
{
  return 2;
}

uint64_t sub_100334B4C()
{
  return 2;
}

uint64_t sub_100334B54()
{
  return 2;
}

uint64_t sub_100334B5C()
{
  return 2;
}

uint64_t sub_100334B64()
{
  return 0;
}

uint64_t sub_100334B6C()
{
  return 2;
}

uint64_t sub_100334B74()
{
  return 2;
}

uint64_t sub_100334B7C()
{
  return 2;
}

uint64_t sub_100334B84()
{
  return 0;
}

uint64_t sub_100334B8C()
{
  return 0;
}

uint64_t sub_100334B94()
{
  return 0;
}

uint64_t sub_100334B9C()
{
  return 0;
}

uint64_t sub_100334BA4()
{
  return 0;
}

uint64_t sub_100334BAC()
{
  return 0;
}

uint64_t sub_100334BB4()
{
  return 0;
}

uint64_t sub_100334BBC()
{
  return 8;
}

uint64_t sub_100334BC4()
{
  return 0;
}

uint64_t sub_100334BCC()
{
  return 2;
}

uint64_t sub_100334BD4()
{
  return 0;
}

uint64_t sub_100334BDC()
{
  return 0;
}

uint64_t sub_100334BE4()
{
  return 0;
}

uint64_t sub_100334BEC()
{
  return 2;
}

uint64_t sub_100334BF4()
{
  return 2;
}

uint64_t sub_100334BFC()
{
  return 2;
}

uint64_t sub_100334C04()
{
  return 2;
}

uint64_t sub_100334C0C()
{
  return 2;
}

uint64_t sub_100334C14()
{
  return 2;
}

uint64_t sub_100334C1C()
{
  return 2;
}

uint64_t sub_100334C24()
{
  return 2;
}

uint64_t sub_100334C2C()
{
  return 2;
}

uint64_t sub_100334C34()
{
  return 0;
}

uint64_t sub_100334C3C()
{
  return 0;
}

uint64_t sub_100334C44()
{
  return 0;
}

uint64_t sub_100334C4C()
{
  return 0;
}

void sub_100334C54(id a1)
{
  operator new();
}

void sub_100334C94()
{
  operator delete();
}

const char *sub_100334CB8(uint64_t a1)
{
  return sub_1000438E4(a1, a1);
}

_QWORD *sub_100334CC4(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  sub_1000160D0(a1 + 2);
  return a1;
}

uint64_t sub_100334CF0(uint64_t a1)
{
  NSObject *v2;
  dispatch_time_t v3;
  NSObject *global_queue;
  NSObject *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD handler[5];
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 16);
  v2 = *(NSObject **)(a1 + 8);
  if (v2)
  {
    v3 = dispatch_time(0, 10000000000);
    dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, global_queue);
    *(_QWORD *)(a1 + 8) = v5;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100334DFC;
    handler[3] = &unk_100917378;
    handler[4] = a1;
    dispatch_source_set_event_handler(v5, handler);
    v6 = *(NSObject **)(a1 + 8);
    v7 = dispatch_time(0, 10000000000);
    dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    dispatch_resume(*(dispatch_object_t *)(a1 + 8));
  }
  return sub_100034234((uint64_t)v10);
}

uint64_t sub_100334DFC(uint64_t a1)
{
  return sub_100334E04(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100334E04(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t v5[16];
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 16);
  if (*(_QWORD *)a1)
  {
    sqlite3_close(*(sqlite3 **)a1);
    *(_QWORD *)a1 = 0;
    v2 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Closed device database", v5, 2u);
    }
  }
  v3 = *(NSObject **)(a1 + 8);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(a1 + 8));
    *(_QWORD *)(a1 + 8) = 0;
  }
  return sub_100034234((uint64_t)v6);
}

void sub_100334EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100334EC0(uint64_t a1@<X8>)
{
  uint64_t v2;
  void *v3;
  char v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  void *__p[2];
  uint64_t v17;

  __p[0] = 0;
  __p[1] = 0;
  v17 = 0;
  sub_100091AE8(__p, "/Library/Application Support/BTServer/pincode_defaults.db");
  if (qword_10097AC70 != -1)
    dispatch_once(&qword_10097AC70, &stru_100928A70);
  v2 = sub_1002F7C88(qword_10097AC68, 1);
  if (v2)
  {
    v14[0] = 0;
    v14[1] = 0;
    v15 = 0;
    sub_1004BF7E4(v2, (uint64_t)v14);
    v3 = (void *)HIBYTE(v15);
    v4 = HIBYTE(v15);
    if (v15 < 0)
      v3 = v14[1];
    if (v3)
    {
      *(_OWORD *)a1 = *(_OWORD *)v14;
      v5 = v15;
LABEL_12:
      *(_QWORD *)(a1 + 16) = v5;
      goto LABEL_13;
    }
    if (SHIBYTE(v17) < 0)
    {
      sub_10003430C((_BYTE *)a1, __p[0], (unint64_t)__p[1]);
      if ((v15 & 0x8000000000000000) == 0)
        goto LABEL_13;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 16) = v17;
      if ((v4 & 0x80) == 0)
        goto LABEL_13;
    }
    operator delete(v14[0]);
  }
  else
  {
    v6 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_FAULT))
      sub_1006E09C4(v6, v7, v8, v9, v10, v11, v12, v13);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__p;
      v5 = v17;
      goto LABEL_12;
    }
    sub_10003430C((_BYTE *)a1, __p[0], (unint64_t)__p[1]);
  }
LABEL_13:
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
}

void sub_100335010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100335048(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  __darwin_ct_rune_t v11;
  __darwin_ct_rune_t v12;
  uint64_t v13;
  __darwin_ct_rune_t v14;
  __darwin_ct_rune_t v15;
  uint64_t v16;
  unsigned __int8 *v17;

  v3 = a2;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2;
  else
    v5 = *(unsigned __int8 **)a2;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  v6 = (char)a3[23];
  if (v6 >= 0)
    v7 = a3;
  else
    v7 = *(unsigned __int8 **)a3;
  if (v6 >= 0)
    v8 = a3[23];
  else
    v8 = *((_QWORD *)a3 + 1);
  if (v8)
  {
    v9 = &v5[v4];
    if (v4 < v8 || (v10 = (uint64_t)&v9[-v8 + 1], (unsigned __int8 *)v10 == v5))
    {
LABEL_20:
      v5 = v9;
    }
    else
    {
      while (1)
      {
        v11 = *v7;
        v12 = __toupper(*v5);
        if (v12 == __toupper(v11))
          break;
LABEL_19:
        if (++v5 == (unsigned __int8 *)v10)
          goto LABEL_20;
      }
      v13 = 1;
      while (v8 != v13)
      {
        v14 = v7[v13];
        v15 = __toupper(v5[v13++]);
        if (v15 != __toupper(v14))
          goto LABEL_19;
      }
    }
  }
  if ((char)v3[23] < 0)
  {
    v17 = v3;
    v3 = *(unsigned __int8 **)v3;
    v16 = *((_QWORD *)v17 + 1);
  }
  else
  {
    v16 = v3[23];
  }
  if (&v3[v16] == v5)
    return -1;
  else
    return v5 - v3;
}

void sub_100335160(const std::string *a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  unint64_t v6;
  __int128 v7;
  char *v8;
  __int128 v9;
  _OWORD v10[4];
  void *__p[2];
  __int128 v12;
  _OWORD v13[10];
  __int128 v14;
  uint64_t v15;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v14 = 0uLL;
  v15 = 0;
  memset(v13, 0, sizeof(v13));
  *(_OWORD *)__p = 0u;
  v12 = 0u;
  memset(v10, 0, sizeof(v10));
  v9 = 0u;
  sub_100335310((void (__cdecl ***)(std::istringstream *__hidden))&v9, a1, 8);
  while (1)
  {
    v5 = sub_1003353F4(&v9, (uint64_t)&v14, a2);
    if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0)
      break;
    v6 = *(_QWORD *)(a3 + 8);
    if (v6 >= *(_QWORD *)(a3 + 16))
    {
      v8 = sub_1002A553C((char **)a3, &v14);
    }
    else
    {
      if (SHIBYTE(v15) < 0)
      {
        sub_10003430C(*(_BYTE **)(a3 + 8), (void *)v14, *((unint64_t *)&v14 + 1));
      }
      else
      {
        v7 = v14;
        *(_QWORD *)(v6 + 16) = v15;
        *(_OWORD *)v6 = v7;
      }
      v8 = (char *)(v6 + 24);
      *(_QWORD *)(a3 + 8) = v6 + 24;
    }
    *(_QWORD *)(a3 + 8) = v8;
  }
  if (SBYTE7(v12) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf(v10);
  std::ios::~ios((char *)v13 + 8);
  if (SHIBYTE(v15) < 0)
    operator delete((void *)v14);
}

void sub_1003352CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_100091BF8(&a9);
  _Unwind_Resume(a1);
}

void (__cdecl ***sub_100335310(void (__cdecl ***a1)(std::istringstream *__hidden this), const std::string *a2, int a3))(std::istringstream *__hidden this)
{
  uint64_t v6;
  void (__cdecl **v7)(std::istringstream *__hidden);
  void (__cdecl **v8)(std::istringstream *__hidden);
  std::ios_base *v9;

  v6 = (uint64_t)(a1 + 2);
  *a1 = v7;
  *(_QWORD *)((char *)*(v7 - 3) + (_QWORD)a1) = v8;
  a1[1] = 0;
  v9 = (std::ios_base *)((char *)*(*a1 - 3) + (_QWORD)a1);
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  sub_100337C14(v6, a2, a3 | 8);
  return a1;
}

void sub_1003353CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::istream::~istream(v2, v3 + 8);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003353F4(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  v11 = 0;
  std::istream::sentry::sentry(&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (a3 == v7)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

uint64_t sub_100335520(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a1 + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf(v3);
  std::ios::~ios(a1 + 120);
  return a1;
}

sqlite3_stmt *sub_1003355A4(sqlite3 **a1, const std::string::value_type *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const std::string::value_type *v13;
  std::string *v14;
  const char *v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v18;
  std::string v19;
  _BYTE v20[24];

  if (!*a1)
  {
    v4 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_FAULT))
      sub_1006E0A6C(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  memset(&v19, 0, sizeof(v19));
  sub_100091AE8(&v19, "SELECT ");
  v12 = 0;
  v13 = "devices.id";
  do
  {
    std::string::append(&v19, v13);
    if (v12 <= 7)
      std::string::append(&v19, ", ");
    ++v12;
    v13 += 136;
  }
  while (v12 != 9);
  std::string::append(&v19, a2);
  v18 = 0;
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v19;
  else
    v14 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if (sqlite3_prepare(*a1, (const char *)v14, -1, &v18, 0)
    && os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
  {
    v15 = sqlite3_errmsg(*a1);
    sub_1006E0A34((uint64_t)v15, (uint64_t)v20);
  }
  v16 = v18;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  return v16;
}

void sub_100335714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

sqlite3_stmt *sub_100335744(sqlite3 **a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  const char *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v14;
  void *__p[2];
  uint64_t v16;
  _BYTE v17[24];

  if (!*a1)
  {
    v2 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_FAULT))
      sub_1006E0A6C(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  __p[0] = 0;
  __p[1] = 0;
  v16 = 0;
  sub_100091AE8(__p, "SELECT makes.name, makes.common_abbreviation, makes.make_name_match_BOOLean_modifiers FROM makes WHERE makes.name IS NOT NULL");
  v14 = 0;
  if (v16 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if (sqlite3_prepare(*a1, (const char *)v10, -1, &v14, 0)
    && os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
  {
    v11 = sqlite3_errmsg(*a1);
    sub_1006E0A34((uint64_t)v11, (uint64_t)v17);
  }
  v12 = v14;
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  return v12;
}

void sub_100335850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

sqlite3_stmt *sub_100335878(sqlite3 **a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  const char *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v14;
  void *__p[2];
  uint64_t v16;
  _BYTE v17[24];

  if (!*a1)
  {
    v2 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_FAULT))
      sub_1006E0A6C(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  __p[0] = 0;
  __p[1] = 0;
  v16 = 0;
  sub_100091AE8(__p, "SELECT makeGroups.make_group_name, makeGroups.make_group_friendly_names FROM makeGroups WHERE makeGroups.make_group_friendly_names IS NOT NULL");
  v14 = 0;
  if (v16 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if (sqlite3_prepare(*a1, (const char *)v10, -1, &v14, 0)
    && os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
  {
    v11 = sqlite3_errmsg(*a1);
    sub_1006E0A34((uint64_t)v11, (uint64_t)v17);
  }
  v12 = v14;
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  return v12;
}

void sub_100335984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003359AC(sqlite3 **a1, sqlite3_stmt *a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  int v16;
  int v17;
  const char *v18;
  const unsigned __int8 *v19;
  const unsigned __int8 *v20;
  uint64_t v21;
  NSObject *v22;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  int v28;

  if (!*a1)
  {
    v5 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_FAULT))
      sub_1006E0A6C(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  v13 = 0;
  while (1)
  {
    while (1)
    {
      v14 = sqlite3_step(a2);
      if (v14 != 100)
        break;
      if ((_DWORD)v13)
      {
        v15 = qword_100999850;
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
        {
          v16 = sqlite3_column_int(a2, 0);
          *(_DWORD *)buf = 67109376;
          v26 = v13;
          v27 = 1024;
          v28 = v16;
          _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Device database returned more than one row (%d and %d) - db is corrupt", buf, 0xEu);
        }
      }
      else
      {
        v13 = sqlite3_column_int(a2, 0);
        if (sqlite3_column_count(a2) >= 2)
        {
          v17 = 1;
          do
          {
            v18 = sqlite3_column_name(a2, v17);
            v19 = sqlite3_column_text(a2, v17);
            if (v18)
            {
              v20 = v19;
              if (v19)
              {
                v21 = 0;
                while (strcmp(v18, &aDevicesId[v21 + 200]))
                {
                  v21 += 136;
                  if (v21 == 1088)
                    goto LABEL_22;
                }
                (*(void (**)(uint64_t, const unsigned __int8 *))&aDevicesId[v21 + 264])(a3, v20);
              }
            }
LABEL_22:
            ++v17;
          }
          while (v17 < sqlite3_column_count(a2));
        }
      }
    }
    if (v14 == 1 || v14 == 21)
      break;
    if (v14 == 101)
      return v13;
  }
  v22 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
    sub_1006E0ADC(a1, v22);
  return v13;
}

BOOL sub_100335BDC(sqlite3 **a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char *v18;
  const char *v19;
  const unsigned __int8 *v20;
  const char *v21;
  unint64_t v22;
  char v23;
  void *v24;
  std::string *v25;
  std::string *v26;
  int64_t v27;
  int64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  std::string *v34;
  int64_t v35;
  char *v36;
  char *v37;
  std::string::size_type v39;
  std::string::size_type v40;
  char v41;
  void *v42;
  std::string *v43;
  int v44;
  unsigned __int8 *v45;
  int64_t v46;
  int64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  int v51;
  std::string *v52;
  int64_t v53;
  char *v54;
  std::string::size_type size;
  uint64_t v56;
  _BOOL8 result;
  NSObject *v58;
  NSObject *v59;
  NSObject *v60;
  NSObject *v61;
  std::string *p_str;
  std::string *v63;
  std::string *v64;
  std::string *v65;
  std::string *v66;
  std::string *v67;
  std::string::size_type v70;
  void *__p;
  void *__pa;
  std::string::value_type *__s;
  std::string __str;
  std::string v76;
  uint8_t buf[4];
  std::string *v78;
  __int16 v79;
  std::string::size_type v80;
  std::string v81;
  int v82;

  sub_10043F78C(a4, (uint64_t)&v81);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v81.__r_.__value_.__l.__size_;
    operator delete(v81.__r_.__value_.__l.__data_);
    if (size)
      goto LABEL_3;
  }
  else if (*((_BYTE *)&v81.__r_.__value_.__s + 23))
  {
LABEL_3:
    if (!*a1)
    {
      v5 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_FAULT))
        sub_1006E0A6C(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    v67 = (std::string *)(a3 + 88);
    while (1)
    {
      while (1)
      {
        v13 = sqlite3_step(a2);
        if (v13 > 20)
          break;
        if (v13 != 5)
        {
          if (v13 == 1)
            goto LABEL_115;
          goto LABEL_117;
        }
      }
      if (v13 != 100)
        break;
      if (sqlite3_column_count(a2) >= 1)
      {
        v14 = 0;
        LOBYTE(v15) = 0;
        LOBYTE(v16) = 0;
        v17 = 0;
        v18 = 0;
        __s = 0;
        do
        {
          v19 = sqlite3_column_name(a2, v14);
          v20 = sqlite3_column_text(a2, v14);
          if (v19)
          {
            v21 = (const char *)v20;
            if (!strcmp(v19, "name"))
            {
              __s = (std::string::value_type *)v21;
            }
            else if (!strcmp(v19, "common_abbreviation"))
            {
              v18 = (char *)v21;
            }
            else if (!strcmp(v19, "make_name_match_BOOLean_modifiers"))
            {
              v22 = atol(v21);
              v17 = v22 & 1;
              v16 = (v22 >> 1) & 1;
              v15 = (v22 >> 2) & 1;
            }
          }
          ++v14;
        }
        while (v14 < sqlite3_column_count(a2));
        if (__s)
        {
          memset(&v76, 0, sizeof(v76));
          if ((v16 & 1) != 0)
            std::string::assign(&v76, " ");
          std::string::append(&v76, __s);
          if ((v15 & 1) != 0)
            std::string::append(&v76, " ");
          if ((v17 & 1) != 0)
          {
            sub_10043F78C(a4, (uint64_t)&v81);
            v23 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
            v24 = (void *)v81.__r_.__value_.__r.__words[0];
            if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v25 = &v81;
            else
              v25 = (std::string *)v81.__r_.__value_.__r.__words[0];
            if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v26 = &v76;
            else
              v26 = (std::string *)v76.__r_.__value_.__r.__words[0];
            if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v27 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
            else
              v27 = v76.__r_.__value_.__l.__size_;
            if (v27)
            {
              if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v28 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
              else
                v28 = v81.__r_.__value_.__l.__size_;
              if (v28 >= v27)
              {
                __p = (void *)v81.__r_.__value_.__r.__words[0];
                v32 = (char *)v25 + v28;
                v33 = v26->__r_.__value_.__s.__data_[0];
                v34 = v25;
                do
                {
                  v35 = v28 - v27;
                  if (v35 == -1)
                    break;
                  v36 = (char *)memchr(v34, v33, v35 + 1);
                  if (!v36)
                    break;
                  v37 = v36;
                  if (!memcmp(v36, v26, v27))
                    goto LABEL_53;
                  v34 = (std::string *)(v37 + 1);
                  v28 = v32 - (v37 + 1);
                }
                while (v28 >= v27);
                v37 = v32;
LABEL_53:
                v29 = v37 != v32 && v37 - (char *)v25 != -1;
                v24 = __p;
              }
              else
              {
                v29 = 0;
              }
            }
            else
            {
              v29 = 1;
            }
            if (v23 < 0)
              operator delete(v24);
            if (v29)
            {
              sub_100091AE8(&v81, __s);
              std::string::operator=(v67, &v81);
              *(_BYTE *)(a3 + 80) = 1;
              if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v81.__r_.__value_.__l.__data_);
              v61 = qword_100999850;
              if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEBUG))
              {
                sub_10043F78C(a4, (uint64_t)&__str);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_str = &__str;
                else
                  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                v63 = &v76;
                if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v63 = (std::string *)v76.__r_.__value_.__r.__words[0];
                LODWORD(v81.__r_.__value_.__l.__data_) = 136446722;
                *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_str;
                WORD2(v81.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v81.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v63;
                HIWORD(v81.__r_.__value_.__r.__words[2]) = 1024;
                v82 = 1;
                goto LABEL_139;
              }
              goto LABEL_111;
            }
          }
          else
          {
            v30 = sub_10043F78C(a4, (uint64_t)&v81);
            v31 = sub_100335048(v30, (unsigned __int8 *)&v81, (unsigned __int8 *)&v76);
            if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v81.__r_.__value_.__l.__data_);
            if (v31 != -1)
            {
              sub_100091AE8(&v81, __s);
              std::string::operator=(v67, &v81);
              *(_BYTE *)(a3 + 80) = 1;
              if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v81.__r_.__value_.__l.__data_);
              v61 = qword_100999850;
              if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEBUG))
              {
                sub_10043F78C(a4, (uint64_t)&__str);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v64 = &__str;
                else
                  v64 = (std::string *)__str.__r_.__value_.__r.__words[0];
                v65 = &v76;
                if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v65 = (std::string *)v76.__r_.__value_.__r.__words[0];
                LODWORD(v81.__r_.__value_.__l.__data_) = 136446722;
                *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = (std::string::size_type)v64;
                WORD2(v81.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v81.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v65;
                HIWORD(v81.__r_.__value_.__r.__words[2]) = 1024;
                v82 = v17 & 1;
LABEL_139:
                _os_log_debug_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "Friendly Name: \"%{public}s\" to Make Name substring matched: \"%s\", require case sensitive match: %d", (uint8_t *)&v81, 0x1Cu);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
              }
LABEL_111:
              if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v76.__r_.__value_.__l.__data_);
              return 1;
            }
          }
          if (v18)
          {
            memset(&v81, 0, sizeof(v81));
            sub_100091AE8(&__str, v18);
            sub_100335160(&__str, 44, (uint64_t)&v81);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            v39 = v81.__r_.__value_.__l.__size_;
            v70 = v81.__r_.__value_.__l.__size_;
            v40 = v81.__r_.__value_.__r.__words[0];
            if (v81.__r_.__value_.__r.__words[0] != v81.__r_.__value_.__l.__size_)
            {
              while (1)
              {
                sub_10043F78C(a4, (uint64_t)&__str);
                v41 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                v42 = (void *)__str.__r_.__value_.__r.__words[0];
                v43 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                    ? &__str
                    : (std::string *)__str.__r_.__value_.__r.__words[0];
                v44 = *(char *)(v40 + 23);
                v45 = v44 >= 0 ? (unsigned __int8 *)v40 : *(unsigned __int8 **)v40;
                v46 = v44 >= 0 ? *(unsigned __int8 *)(v40 + 23) : *(_QWORD *)(v40 + 8);
                if (!v46)
                  break;
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v47 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                else
                  v47 = __str.__r_.__value_.__l.__size_;
                v48 = (char *)v43 + v47;
                if (v47 >= v46)
                {
                  __pa = (void *)__str.__r_.__value_.__r.__words[0];
                  v51 = *v45;
                  v52 = v43;
                  do
                  {
                    v53 = v47 - v46;
                    if (v53 == -1)
                      break;
                    v54 = (char *)memchr(v52, v51, v53 + 1);
                    if (!v54)
                      break;
                    v49 = v54;
                    if (!memcmp(v54, v45, v46))
                      goto LABEL_90;
                    v52 = (std::string *)(v49 + 1);
                    v47 = v48 - (v49 + 1);
                  }
                  while (v47 >= v46);
                  v49 = v48;
LABEL_90:
                  v39 = v70;
                  v42 = __pa;
                }
                else
                {
                  v49 = (char *)v43 + v47;
                }
                if (v49 == v48)
                  v50 = -1;
                else
                  v50 = v49 - (char *)v43;
                if (v41 < 0)
                  goto LABEL_95;
LABEL_96:
                if (v50 != -1)
                {
                  sub_100091AE8(&__str, __s);
                  std::string::operator=(v67, &__str);
                  *(_BYTE *)(a3 + 80) = 1;
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
                  v58 = qword_100999850;
                  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEBUG))
                  {
                    sub_10043F78C(a4, (uint64_t)&__str);
                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v66 = &__str;
                    else
                      v66 = (std::string *)__str.__r_.__value_.__r.__words[0];
                    if (*(char *)(v40 + 23) < 0)
                      v40 = *(_QWORD *)v40;
                    *(_DWORD *)buf = 136446466;
                    v78 = v66;
                    v79 = 2082;
                    v80 = v40;
                    _os_log_debug_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "Friendly Name: \"%{public}s\" to Make Abbreviation matched: \"%{public}s\"", buf, 0x16u);
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__str.__r_.__value_.__l.__data_);
                  }
                  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
                  sub_100091BF8((void ***)&__str);
                  goto LABEL_111;
                }
                v40 += 24;
                if (v40 == v39)
                  goto LABEL_98;
              }
              v50 = 0;
              if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
                goto LABEL_96;
LABEL_95:
              operator delete(v42);
              goto LABEL_96;
            }
LABEL_98:
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
            sub_100091BF8((void ***)&__str);
          }
          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v76.__r_.__value_.__l.__data_);
        }
      }
    }
    if (v13 == 21)
    {
LABEL_115:
      v59 = qword_100999850;
      result = os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      sub_1006E0C60(a1, v59);
      return 0;
    }
    if (v13 == 101)
      return 0;
LABEL_117:
    v60 = qword_100999850;
    result = os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_1006E0BD8(a4, v60);
    return 0;
  }
  v56 = qword_100999850;
  result = os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEBUG);
  if (!result)
    return result;
  sub_1006E0B58(a4, v56);
  return 0;
}

void sub_1003363A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100336450(sqlite3 **a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  char *v16;
  char *v17;
  const char *v18;
  const unsigned __int8 *v19;
  char *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  char v23;
  void *v24;
  std::string *p_p;
  int v26;
  unsigned __int8 *v27;
  int64_t v28;
  int64_t size;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  std::string *v34;
  int64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  _BOOL8 result;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  std::string *v43;
  char *__s;
  sqlite3 **v45;
  void *v47;
  unsigned __int8 *v48;
  std::string __p;
  void *v51;
  _QWORD *v52;
  uint64_t v53;
  uint8_t buf[4];
  std::string *v55;
  __int16 v56;
  unsigned __int8 *v57;

  sub_10043F78C(a4, (uint64_t)&v51);
  if ((SHIBYTE(v53) & 0x80000000) == 0)
  {
    if (HIBYTE(v53))
      goto LABEL_3;
LABEL_59:
    v38 = qword_100999850;
    result = os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    sub_1006E0CE0(a4, v38);
    return 0;
  }
  v37 = v52;
  operator delete(v51);
  if (!v37)
    goto LABEL_59;
LABEL_3:
  if (!*a1)
  {
    v6 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_FAULT))
      sub_1006E0A6C(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  v45 = a1;
  while (1)
  {
LABEL_7:
    while (1)
    {
      v14 = sqlite3_step(a2);
      if (v14 > 20)
        break;
      if (v14 != 5)
      {
        if (v14 != 1)
        {
LABEL_71:
          v42 = qword_100999850;
          result = os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR);
          if (!result)
            return result;
          sub_1006E0D60(a4, v42);
          return 0;
        }
        goto LABEL_69;
      }
    }
    if (v14 != 100)
    {
      if (v14 != 21)
      {
        if (v14 != 101)
          goto LABEL_71;
        return 0;
      }
LABEL_69:
      v41 = qword_100999850;
      result = os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      sub_1006E0DE8(a1, v41);
      return 0;
    }
    if (sqlite3_column_count(a2) >= 1)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = sqlite3_column_name(a2, v15);
        v19 = sqlite3_column_text(a2, v15);
        if (v18)
        {
          v20 = (char *)v19;
          if (!strcmp(v18, "make_group_name"))
          {
            v17 = v20;
          }
          else if (!strcmp(v18, "make_group_friendly_names"))
          {
            v16 = v20;
          }
        }
        ++v15;
      }
      while (v15 < sqlite3_column_count(a2));
      if (v17 && v16)
        break;
    }
  }
  v51 = 0;
  v52 = 0;
  v53 = 0;
  sub_100091AE8(&__p, v16);
  sub_100335160(&__p, 44, (uint64_t)&v51);
  __s = v17;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v22 = (unsigned __int8 *)v51;
  v21 = (unsigned __int8 *)v52;
  v48 = (unsigned __int8 *)v52;
  while (2)
  {
    if (v22 == v21)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
      sub_100091BF8((void ***)&__p);
      a1 = v45;
      goto LABEL_7;
    }
    sub_10043F78C(a4, (uint64_t)&__p);
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v24 = (void *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v26 = (char)v22[23];
    if (v26 >= 0)
      v27 = v22;
    else
      v27 = *(unsigned __int8 **)v22;
    if (v26 >= 0)
      v28 = v22[23];
    else
      v28 = *((_QWORD *)v22 + 1);
    if (v28)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v30 = (char *)p_p + size;
      if (size >= v28)
      {
        v47 = (void *)__p.__r_.__value_.__r.__words[0];
        v33 = *v27;
        v34 = p_p;
        do
        {
          v35 = size - v28;
          if (v35 == -1)
            break;
          v36 = (char *)memchr(v34, v33, v35 + 1);
          if (!v36)
            break;
          v31 = v36;
          if (!memcmp(v36, v27, v28))
            goto LABEL_47;
          v34 = (std::string *)(v31 + 1);
          size = v30 - (v31 + 1);
        }
        while (size >= v28);
        v31 = v30;
LABEL_47:
        v24 = v47;
      }
      else
      {
        v31 = (char *)p_p + size;
      }
      if (v31 == v30)
        v32 = -1;
      else
        v32 = v31 - (char *)p_p;
      if (v23 < 0)
LABEL_52:
        operator delete(v24);
    }
    else
    {
      v32 = 0;
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_52;
    }
    if (v32 == -1)
    {
      v22 += 24;
      v21 = v48;
      continue;
    }
    break;
  }
  sub_100091AE8(&__p, __s);
  std::string::operator=((std::string *)(a3 + 88), &__p);
  *(_BYTE *)(a3 + 80) = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v40 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEBUG))
  {
    sub_10043F78C(a4, (uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = &__p;
    else
      v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((char)v22[23] < 0)
      v22 = *(unsigned __int8 **)v22;
    *(_DWORD *)buf = 136446466;
    v55 = v43;
    v56 = 2082;
    v57 = v22;
    _os_log_debug_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "Friendly Name: \"%{public}s\" to Make Group matched: \"%{public}s\"", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  sub_100091BF8((void ***)&__p);
  return 1;
}

void sub_1003368B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  __p = &a21;
  sub_100091BF8((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100336910(sqlite3 **a1, uint64_t a2)
{
  const char *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  sqlite3_stmt *v10;
  NSObject *v11;
  _BYTE *v12;
  std::string *p_str;
  const char *v14;
  int v15;
  std::string *v16;
  int v17;
  const char *v18;
  int v19;
  char v20;
  char v21;
  _BYTE *v22;
  uint64_t v23;
  void *v24;
  sqlite3_stmt *v25;
  NSObject *v26;
  std::string *v27;
  std::string *v28;
  int v29;
  const char *v30;
  NSObject *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  std::string *v36;
  sqlite3_stmt *v37;
  sqlite3_stmt *v38;
  const char *v39;
  NSObject *v40;
  std::string *v41;
  sqlite3_stmt *v42;
  NSObject *v43;
  std::string *v44;
  _BYTE *v45;
  NSObject *v46;
  std::string *v47;
  sqlite3_stmt *v48;
  NSObject *v49;
  std::string *v50;
  NSObject *v51;
  std::string *v52;
  _BYTE *v53;
  NSObject *v54;
  std::string *v55;
  int v57;
  NSObject *v58;
  uint8_t *v59;
  int v60;
  NSObject *v61;
  _BYTE *v62;
  int v63;
  NSObject *v64;
  _BYTE *v65;
  int v66[2];
  int v67[2];
  _QWORD v68[2];
  uint8_t v69[4];
  _BYTE *v70;
  __int16 v71;
  int v72;
  _BYTE v73[28];
  uint64_t v74;
  uint8_t *v75;
  uint8_t v76[32];
  _BYTE v77[16];
  uint8_t buf[23];
  char v79;
  std::string __str;
  _BYTE v81[16];
  __int128 v82;
  void *v83[2];
  __int128 v84;
  void *v85[2];
  __int128 v86;
  void *__p[2];
  _OWORD v88[3];
  __int128 v89;
  uint64_t v90;

  v68[0] = 0;
  v68[1] = 0;
  sub_10003415C((uint64_t)v68, (uint64_t)(a1 + 2));
  v90 = 0;
  v89 = 0u;
  memset(v88, 0, sizeof(v88));
  v86 = 0u;
  *(_OWORD *)__p = 0u;
  v84 = 0u;
  *(_OWORD *)v85 = 0u;
  v82 = 0u;
  *(_OWORD *)v83 = 0u;
  sub_1005BCCCC((uint64_t)&v82 + 1);
  BYTE2(v83[0]) = 0;
  BYTE4(v83[0]) = 0;
  BYTE2(v85[0]) = 0;
  BYTE4(v85[0]) = 0;
  DWORD1(v88[1]) = 0;
  v84 = 0uLL;
  v83[1] = 0;
  LOBYTE(v85[0]) = 0;
  v86 = 0uLL;
  v85[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v88, 0, 19);
  __p[1] = 0;
  BYTE8(v88[1]) = 1;
  BYTE2(v90) = 0;
  *(_QWORD *)((char *)&v88[1] + 14) = 0;
  *(_QWORD *)((char *)&v88[1] + 9) = 0;
  v89 = 0uLL;
  *((_QWORD *)&v88[2] + 1) = 0;
  LOBYTE(v90) = 0;
  if (!*a1)
  {
    memset(v73, 0, 24);
    sub_100334EC0((uint64_t)v73);
    v4 = v73[23] >= 0 ? v73 : *(const char **)v73;
    v5 = sqlite3_open_v2(v4, a1, 1, 0);
    v6 = qword_100999850;
    if (v5)
    {
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      {
        v7 = sqlite3_errmsg(*a1);
        sub_1006E0EA0((uint64_t)v7, (uint64_t)v81);
      }
      sub_100334E04((uint64_t)a1);
    }
    else if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      v22 = v73;
      if (v73[23] < 0)
        v22 = *(_BYTE **)v73;
      LODWORD(__str.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Opened device database at location %s", (uint8_t *)&__str, 0xCu);
    }
    if ((v73[23] & 0x80000000) != 0)
      operator delete(*(void **)v73);
    if (v5)
    {
      v23 = 1;
      goto LABEL_158;
    }
  }
  sub_10043F78C(a2, (uint64_t)v73);
  if ((v73[23] & 0x80000000) != 0)
  {
    v9 = *(_QWORD *)&v73[8];
    operator delete(*(void **)v73);
    if (!v9)
    {
LABEL_43:
      v19 = 0;
      goto LABEL_44;
    }
  }
  else if (!v73[23])
  {
    goto LABEL_43;
  }
  v10 = sub_1003355A4(a1, " FROM devices, manufacturers, matching_rules_oui, oui_assignments, makes WHERE ((oui_assignments.oui = ?1) AND (matching_rules_oui.manufacturer_id = oui_assignments.manufacturer_id)) AND (matching_rules_oui.name = ?2) AND (matching_rules_oui.manufacturer_id = manufacturers.id) AND (matching_rules_oui.device_id = devices.id) AND CASE WHEN devices.make_id is NULL THEN (makes.id = 0) ELSE (devices.make_id = makes.id) END");
  if (!v10)
    goto LABEL_43;
  memset(v73, 0, 24);
  sub_10046E9BC((unsigned __int8 *)(a2 + 128), &__str);
  std::string::basic_string((std::string *)v73, &__str, 0, 8uLL, (std::allocator<char> *)buf);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  memset(&__str, 0, sizeof(__str));
  sub_10043F78C(a2, (uint64_t)&__str);
  v11 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    v12 = v73;
    if (v73[23] < 0)
      v12 = *(_BYTE **)v73;
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = p_str;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Looking up by OUI %s and Name %s", buf, 0x16u);
  }
  if (v73[23] >= 0)
    v14 = v73;
  else
    v14 = *(const char **)v73;
  if (v73[23] >= 0)
    v15 = v73[23];
  else
    v15 = *(_DWORD *)&v73[8];
  if (sqlite3_bind_text(v10, 1, v14, v15, 0)
    || ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (v16 = &__str)
      : (v16 = (std::string *)__str.__r_.__value_.__r.__words[0]),
        (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (v17 = HIBYTE(__str.__r_.__value_.__r.__words[2]))
      : (v17 = __str.__r_.__value_.__r.__words[1]),
        sqlite3_bind_text(v10, 2, (const char *)v16, v17, 0)))
  {
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
    {
      v18 = sqlite3_errmsg(*a1);
      sub_1006E0E68((uint64_t)v18, (uint64_t)v77);
    }
  }
  else
  {
    v57 = sub_1003359AC(a1, v10, (uint64_t)&v82);
    if (v57)
    {
      v58 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, buf);
        v59 = v79 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v76 = 136446466;
        *(_QWORD *)&v76[4] = v59;
        *(_WORD *)&v76[12] = 1024;
        *(_DWORD *)&v76[14] = v57;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Found a OUI profile for device %{public}s at row %d", v76, 0x12u);
        if (v79 < 0)
          operator delete(*(void **)buf);
      }
      v19 = 1;
      goto LABEL_39;
    }
  }
  v19 = 0;
LABEL_39:
  sqlite3_finalize(v10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if ((v73[23] & 0x80000000) != 0)
    operator delete(*(void **)v73);
LABEL_44:
  sub_10043F78C(a2, (uint64_t)v73);
  if ((v73[23] & 0x80000000) != 0)
  {
    if (!*(_QWORD *)&v73[8])
    {
      v24 = *(void **)v73;
LABEL_82:
      operator delete(v24);
      goto LABEL_83;
    }
  }
  else if (!v73[23])
  {
    goto LABEL_83;
  }
  if ((sub_10044B480(a2) & 1) != 0)
  {
    if ((v73[23] & 0x80000000) != 0)
      operator delete(*(void **)v73);
    goto LABEL_64;
  }
  v20 = sub_10044B4B4(a2);
  v21 = v20;
  if ((v73[23] & 0x80000000) == 0)
  {
    if ((v20 & 1) == 0)
      goto LABEL_83;
    goto LABEL_64;
  }
  operator delete(*(void **)v73);
  if ((v21 & 1) != 0)
  {
LABEL_64:
    v25 = sub_1003355A4(a1, " FROM devices, matching_rules_hash, makes WHERE ((matching_rules_hash.name IS NULL) OR (matching_rules_hash.name = ?1)) AND ((matching_rules_hash.primaryHash IS NULL) OR (matching_rules_hash.primaryHash = ?2)) AND ((matching_rules_hash.secondaryHash IS NULL) OR (matching_rules_hash.secondaryHash = ?3)) AND (matching_rules_hash.device_id = devices.id) AND CASE WHEN devices.make_id is NULL THEN (makes.id = 0) ELSE (devices.make_id = makes.id) END");
    if (!v25)
      goto LABEL_83;
    memset(&__str, 0, sizeof(__str));
    sub_10043F78C(a2, (uint64_t)&__str);
    memset(buf, 0, 20);
    sub_10044B488(a2, (uint64_t)buf);
    memset(v76, 0, 20);
    sub_10044B4BC(a2, (uint64_t)v76);
    v26 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      v27 = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v27 = (std::string *)__str.__r_.__value_.__r.__words[0];
      *(_DWORD *)v73 = 136316162;
      *(_QWORD *)&v73[4] = v27;
      *(_WORD *)&v73[12] = 1042;
      *(_DWORD *)&v73[14] = 20;
      *(_WORD *)&v73[18] = 2098;
      *(_QWORD *)&v73[20] = buf;
      v74 = 0x832000000140412;
      v75 = v76;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Looking up by name %s, primaryHash %{public}.20P, secondaryHash %{public}.20P", v73, 0x2Cu);
    }
    v28 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__str
        : (std::string *)__str.__r_.__value_.__r.__words[0];
    v29 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__str.__r_.__value_.__r.__words[2])
        : LODWORD(__str.__r_.__value_.__r.__words[1]);
    if (sqlite3_bind_text(v25, 1, (const char *)v28, v29, 0)
      || sqlite3_bind_blob(v25, 2, buf, 20, 0)
      || sqlite3_bind_blob(v25, 3, v76, 20, 0))
    {
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      {
        v30 = sqlite3_errmsg(*a1);
        sub_1006E0E68((uint64_t)v30, (uint64_t)v69);
      }
    }
    else
    {
      v60 = sub_1003359AC(a1, v25, (uint64_t)&v82);
      if (v60)
      {
        v61 = qword_100999850;
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(a2, v73);
          v62 = v73[23] >= 0 ? v73 : *(_BYTE **)v73;
          *(_DWORD *)v69 = 136446466;
          v70 = v62;
          v71 = 1024;
          v72 = v60;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "Found a hash profile for device %{public}s at row %d", v69, 0x12u);
          if ((v73[23] & 0x80000000) != 0)
            operator delete(*(void **)v73);
        }
        v19 = 1;
      }
    }
    sqlite3_finalize(v25);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_83;
    v24 = (void *)__str.__r_.__value_.__r.__words[0];
    goto LABEL_82;
  }
LABEL_83:
  *(_QWORD *)v66 = 0;
  *(_QWORD *)v67 = 0;
  if (sub_100444BF0(a2, &v67[1], v67, &v66[1], v66))
  {
    v31 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      v33 = v67[0];
      v32 = v67[1];
      v34 = v66[0];
      v35 = v66[1];
      sub_10043E5F8(a2, &__str);
      v36 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__str
          : (std::string *)__str.__r_.__value_.__r.__words[0];
      *(_DWORD *)v73 = 67110146;
      *(_DWORD *)&v73[4] = v32;
      *(_WORD *)&v73[8] = 1024;
      *(_DWORD *)&v73[10] = v33;
      *(_WORD *)&v73[14] = 1024;
      *(_DWORD *)&v73[16] = v35;
      *(_WORD *)&v73[20] = 1024;
      *(_DWORD *)&v73[22] = v34;
      *(_WORD *)&v73[26] = 2080;
      v74 = (uint64_t)v36;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Looking up by vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x for %s", v73, 0x24u);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    v37 = sub_1003355A4(a1, " FROM devices, matching_rules_did, makes WHERE ((matching_rules_did.vid_src IS NULL) OR (matching_rules_did.vid_src = ?1)) AND ((matching_rules_did.vid IS NULL) OR (matching_rules_did.vid = ?2)) AND ((matching_rules_did.pid IS NULL) OR (matching_rules_did.pid = ?3)) AND ((matching_rules_did.version IS NULL) OR (matching_rules_did.version = ?4)) AND (matching_rules_did.device_id = devices.id) AND CASE WHEN devices.make_id is NULL THEN (makes.id = 0) ELSE (devices.make_id = makes.id) END");
    v38 = v37;
    if (v37)
    {
      if (sqlite3_bind_int(v37, 1, v67[1])
        || sqlite3_bind_int(v38, 2, v67[0])
        || sqlite3_bind_int(v38, 3, v66[1])
        || sqlite3_bind_int(v38, 4, v66[0]))
      {
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
        {
          v39 = sqlite3_errmsg(*a1);
          sub_1006E0E68((uint64_t)v39, (uint64_t)v76);
        }
      }
      else
      {
        v63 = sub_1003359AC(a1, v38, (uint64_t)&v82);
        if (v63)
        {
          v64 = qword_100999850;
          if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(a2, v73);
            v65 = v73[23] >= 0 ? v73 : *(_BYTE **)v73;
            LODWORD(__str.__r_.__value_.__l.__data_) = 136446466;
            *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v65;
            WORD2(__str.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = v63;
            _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "Found a DID profile for device %{public}s at row %d", (uint8_t *)&__str, 0x12u);
            if ((v73[23] & 0x80000000) != 0)
              operator delete(*(void **)v73);
          }
          v19 = 1;
        }
      }
      sqlite3_finalize(v38);
    }
  }
  memset(v73, 0, 24);
  if (!LOBYTE(__p[0]) || (std::string::operator=((std::string *)v73, (const std::string *)&__p[1]), !LOBYTE(__p[0])))
  {
    v40 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, &__str);
      v41 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__str
          : (std::string *)__str.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v41;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Performing substring search for make name of device %{public}s", buf, 0xCu);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    v42 = sub_100335744(a1);
    if (v42)
    {
      if (sub_100335BDC(a1, v42, (uint64_t)&v82, a2))
      {
        if (LOBYTE(__p[0]))
          std::string::operator=((std::string *)v73, (const std::string *)&__p[1]);
        v43 = qword_100999850;
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(a2, &__str);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v44 = &__str;
          else
            v44 = (std::string *)__str.__r_.__value_.__r.__words[0];
          v45 = v73;
          if (v73[23] < 0)
            v45 = *(_BYTE **)v73;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v44;
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v45;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Found make of device: %{public}s, Make: %{public}s", buf, 0x16u);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
        v19 = 1;
      }
      else
      {
        v46 = qword_100999850;
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(a2, &__str);
          v47 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__str
              : (std::string *)__str.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v47;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "No make name found for device %{public}s", buf, 0xCu);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      sqlite3_finalize(v42);
      if (!LOBYTE(__p[0])
        || (std::string::operator=((std::string *)v73, (const std::string *)&__p[1]), !LOBYTE(__p[0])))
      {
        v48 = sub_100335878(a1);
        if (v48)
        {
          v49 = qword_100999850;
          if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(a2, &__str);
            v50 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__str
                : (std::string *)__str.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v50;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Performing friendly name search for make group of device %{public}s", buf, 0xCu);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (sub_100336450(a1, v48, (uint64_t)&v82, a2))
          {
            if (LOBYTE(__p[0]))
              std::string::operator=((std::string *)v73, (const std::string *)&__p[1]);
            v51 = qword_100999850;
            if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043E5F8(a2, &__str);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v52 = &__str;
              else
                v52 = (std::string *)__str.__r_.__value_.__r.__words[0];
              v53 = v73;
              if (v73[23] < 0)
                v53 = *(_BYTE **)v73;
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = v52;
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v53;
              _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Found make group of device: %{public}s, Make Group: %{public}s", buf, 0x16u);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
            }
            v19 = 1;
          }
          else
          {
            v54 = qword_100999850;
            if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043E5F8(a2, &__str);
              v55 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &__str
                  : (std::string *)__str.__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = v55;
              _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "No make group found for device %{public}s", buf, 0xCu);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
            }
          }
          sqlite3_finalize(v48);
        }
      }
    }
  }
  sub_100334CF0((uint64_t)a1);
  if (v19)
  {
    sub_1004418E0(a2);
    sub_100441954((uint64_t *)a2, (uint64_t)&v82);
  }
  if ((v73[23] & 0x80000000) != 0)
    operator delete(*(void **)v73);
  v23 = 0;
LABEL_158:
  if (SHIBYTE(v88[0]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(v86) < 0)
    operator delete(v85[1]);
  if (SHIBYTE(v84) < 0)
    operator delete(v83[1]);
  nullsub_90((char *)&v82 + 1, v8);
  sub_100034234((uint64_t)v68);
  return v23;
}

void sub_1003376D8(_Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_10026B73C((uint64_t)&a47, a2);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

unint64_t sub_1003377C8(uint64_t a1, char *a2)
{
  unint64_t result;
  uint64x2_t v4;
  int16x8_t v5;
  int16x8_t v6;
  BOOL v7;

  result = atol(a2);
  *(_BYTE *)(a1 + 49) = result & 1;
  *(_BYTE *)(a1 + 48) = 1;
  *(_BYTE *)(a1 + 19) = (result & 2) != 0;
  *(_BYTE *)(a1 + 18) = 1;
  *(_BYTE *)(a1 + 51) = (result & 4) != 0;
  *(_BYTE *)(a1 + 50) = 1;
  *(_BYTE *)(a1 + 112) = (result & 8) != 0;
  *(_BYTE *)(a1 + 113) = (result & 0x10) != 0;
  *(_BYTE *)(a1 + 114) = (result & 0x20) != 0;
  *(_BYTE *)(a1 + 121) = (result & 0x40) != 0;
  *(_BYTE *)(a1 + 122) = (result & 0x80) != 0;
  *(_BYTE *)(a1 + 123) = BYTE1(result) & 1;
  *(_BYTE *)(a1 + 132) = (result & 0x200) != 0;
  *(_BYTE *)(a1 + 133) = (result & 0x400) != 0;
  *(_BYTE *)(a1 + 120) = (result & 0x800) != 0;
  v4 = (uint64x2_t)vdupq_n_s64(result);
  v5 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_10073E040), (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_10073E030));
  *(int8x8_t *)v5.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v5), (int8x8_t)0x1000100010001);
  *(_DWORD *)(a1 + 140) = vmovn_s16(v5).u32[0];
  *(_BYTE *)(a1 + 144) = BYTE2(result) & 1;
  *(_BYTE *)(a1 + 145) = (result & 0x20000) != 0;
  *(int8x8_t *)(a1 + 147) = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_10073E060), (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_10073E050)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_10073E080), (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_10073E070)))), (int8x8_t)0x101010101010101);
  v6 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_10073E0A0), (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_10073E090));
  *(int8x8_t *)v6.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v6), (int8x8_t)0x1000100010001);
  *(_DWORD *)(a1 + 155) = vmovn_s16(v6).u32[0];
  *(_BYTE *)(a1 + 159) = (result & 0x40000000) != 0;
  v7 = (result & 0xFFFFFFFF80000000) != 0;
  *(_BYTE *)(a1 + 160) = v7;
  *(_BYTE *)(a1 + 161) = v7;
  *(_BYTE *)(a1 + 146) = v7;
  *(_BYTE *)(a1 + 162) = v7;
  return result;
}

void sub_100337938(std::string *a1, char *a2)
{
  std::string __str;

  sub_100091AE8(&__str, a2);
  std::string::operator=(a1 + 1, &__str);
  a1->__r_.__value_.__s.__data_[20] = 1;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_100337988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003379A4(uint64_t a1, char *a2)
{
  uint64_t v3;
  __n128 v5;

  sub_1005BCD34((char *)&v5, a2);
  sub_1005BCD5C((__n128 *)(a1 + 1), &v5);
  *(_BYTE *)a1 = 1;
  return nullsub_90(&v5, v3);
}

void sub_100337A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  nullsub_90(&a12, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_100337A34(uint64_t a1, char *a2)
{
  uint64_t result;

  if (a2)
    result = atoi(a2);
  else
    result = 0;
  *(_DWORD *)(a1 + 136) = result;
  return result;
}

uint64_t sub_100337A68(uint64_t a1, char *a2)
{
  uint64_t result;

  if (a2)
    result = atoi(a2);
  else
    result = 0;
  *(_DWORD *)(a1 + 128) = result;
  return result;
}

uint64_t sub_100337A9C(uint64_t result)
{
  *(_DWORD *)(result + 124) = 36;
  return result;
}

uint64_t sub_100337AA8(uint64_t a1, char *a2)
{
  uint64_t result;

  if (a2)
    result = atoi(a2);
  else
    result = 0;
  *(_DWORD *)(a1 + 116) = result;
  return result;
}

void sub_100337ADC(uint64_t a1, char *a2)
{
  std::string __str;

  sub_100091AE8(&__str, a2);
  std::string::operator=((std::string *)(a1 + 88), &__str);
  *(_BYTE *)(a1 + 80) = 1;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_100337B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100337B48(id a1)
{
  operator new();
}

void sub_100337BC8()
{
  uint64_t v0;
  uint64_t v1;
  void **v2;
  void *v3;

  v3 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v0 + 48) = v3;
    operator delete(v3);
  }
  sub_1002F95D8(v1, *(_QWORD **)(v0 + 16));

  operator delete();
}

uint64_t sub_100337C14(uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf(a1);
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  sub_100337CA4(a1);
  return a1;
}

void sub_100337C80(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_100337CA4(uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

uint64_t sub_100337DB4(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(_QWORD *)(a2 + 4) = result;
  return result;
}

void sub_100337DC0(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_debug_impl(a1, v13, OS_LOG_TYPE_DEBUG, a4, &buf, 0xCu);
}

_QWORD *sub_100337DD4(_QWORD *a1)
{
  void *v2;
  CFStringRef v3;
  void *v4;
  CFArrayRef v5;
  NSObject *v6;
  uint8_t v8[16];

  *a1 = &off_100928AA0;
  sub_1000160D0(a1 + 1);
  v2 = objc_autoreleasePoolPush();
  v3 = sub_100337F20();
  v4 = (void *)_CFPreferencesCopyKeyListWithContainer(CFSTR("com.apple.MobileBluetooth.devices"), kCFPreferencesCurrentUser, kCFPreferencesAnyHost, v3);
  v5 = CFPreferencesCopyKeyList(CFSTR("com.apple.MobileBluetooth.devices"), kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  if (!objc_msgSend(v4, "count") && -[__CFArray count](v5, "count"))
  {
    v6 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Using legacy keys", v8, 2u);
    }
    byte_10097AD70 = 0;
  }

  objc_autoreleasePoolPop(v2);
  return a1;
}

void sub_100337EF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100069BDC(v1);
  _Unwind_Resume(a1);
}

CFStringRef sub_100337F20()
{
  CFStringRef result;
  uint64_t v1;
  void **v2;
  void *__p[2];
  uint64_t v4;

  result = (CFStringRef)qword_100991E38;
  if (!qword_100991E38)
  {
    __p[0] = 0;
    __p[1] = 0;
    v4 = 0;
    v1 = sub_100038E50();
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v1 + 168))(v1, __p);
    if (v4 >= 0)
      v2 = __p;
    else
      v2 = (void **)__p[0];
    result = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v2, 0x8000100u);
    qword_100991E38 = (uint64_t)result;
    if (SHIBYTE(v4) < 0)
    {
      operator delete(__p[0]);
      return (CFStringRef)qword_100991E38;
    }
  }
  return result;
}

void sub_100337FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100337FCC(_QWORD *a1)
{
  *a1 = &off_100928AA0;
  sub_100069BDC(a1 + 1);
  return a1;
}

void sub_100337FFC(_QWORD *a1)
{
  *a1 = &off_100928AA0;
  sub_100069BDC(a1 + 1);
  operator delete();
}

uint64_t sub_10033803C(uint64_t a1, void **a2)
{
  CFStringRef v3;
  CFArrayRef v4;
  CFArrayRef v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFArray *v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void *context;
  int v36;
  __int16 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];

  context = objc_autoreleasePoolPush();
  if (byte_10097AD70)
  {
    v3 = sub_100337F20();
    v4 = (CFArrayRef)_CFPreferencesCopyKeyListWithContainer(CFSTR("com.apple.MobileBluetooth.devices"), kCFPreferencesCurrentUser, kCFPreferencesAnyHost, v3);
  }
  else
  {
    v4 = CFPreferencesCopyKeyList(CFSTR("com.apple.MobileBluetooth.devices"), kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  }
  v5 = v4;
  if (v4)
  {
    v6 = objc_opt_class(NSArray);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) == 0)
    {
      v7 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
        sub_1006E0ED8(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v15 = v5;
  v16 = -[__CFArray countByEnumeratingWithState:objects:count:](v15, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
  if (v16)
  {
    v17 = *(_QWORD *)v39;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v39 != v17)
          objc_enumerationMutation(v15);
        v19 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)v18);
        v37 = 0;
        v36 = 0;
        if (sub_10006D80C((uint64_t)&v36, (unsigned __int8 *)objc_msgSend(objc_retainAutorelease(v19), "UTF8String", context)))
        {
          if (qword_1009778E8 != -1)
            dispatch_once(&qword_1009778E8, &stru_100929098);
          v20 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v36, 1);
          v21 = v20;
          v23 = (uint64_t *)a2[1];
          v22 = (unint64_t)a2[2];
          if ((unint64_t)v23 >= v22)
          {
            v25 = ((char *)v23 - (_BYTE *)*a2) >> 3;
            if ((unint64_t)(v25 + 1) >> 61)
              abort();
            v26 = v22 - (_QWORD)*a2;
            v27 = v26 >> 2;
            if (v26 >> 2 <= (unint64_t)(v25 + 1))
              v27 = v25 + 1;
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
              v28 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v28 = v27;
            if (v28)
              v29 = (char *)sub_10007ABA0((uint64_t)(a2 + 2), v28);
            else
              v29 = 0;
            v30 = (uint64_t *)&v29[8 * v25];
            *v30 = v21;
            v24 = v30 + 1;
            v32 = (char *)*a2;
            v31 = (char *)a2[1];
            if (v31 != *a2)
            {
              do
              {
                v33 = *((_QWORD *)v31 - 1);
                v31 -= 8;
                *--v30 = v33;
              }
              while (v31 != v32);
              v31 = (char *)*a2;
            }
            *a2 = v30;
            a2[1] = v24;
            a2[2] = &v29[8 * v28];
            if (v31)
              operator delete(v31);
          }
          else
          {
            *v23 = v20;
            v24 = v23 + 1;
          }
          a2[1] = v24;
        }
        v18 = (char *)v18 + 1;
      }
      while (v18 != v16);
      v16 = -[__CFArray countByEnumeratingWithState:objects:count:](v15, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
    }
    while (v16);
  }

  objc_autoreleasePoolPop(context);
  return 0;
}

void sub_10033830C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100338344()
{
  const CFStringRef *v0;

  if (byte_10097AD70)
    v0 = &kCFPreferencesAnyUser;
  else
    v0 = &kCFPreferencesCurrentUser;
  return _CFPreferencesFlushCachesForIdentifier(CFSTR("com.apple.MobileBluetooth.devices"), *v0);
}

uint64_t sub_100338374()
{
  NSObject *v0;
  uint8_t v2[16];

  v0 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Disable cfprefs daemon cache", v2, 2u);
  }
  return _CFPreferencesSetDaemonCacheEnabled(CFSTR("com.apple.MobileBluetooth.devices"), kCFPreferencesCurrentUser, kCFPreferencesAnyHost, 0, 0);
}

uint64_t sub_100338404(uint64_t a1, uint64_t a2)
{
  char v3;
  NSObject *v4;
  void **v5;
  void *v6;
  uint64_t v7;
  int v8;
  void **v9;
  __CFString *v10;
  void **v11;
  __CFString *v12;
  NSObject *v13;
  void **v14;
  void *v15;
  uint64_t v16;
  int v18;
  __int16 v19;
  void *__p[2];
  char v21;
  uint8_t buf[4];
  void **v23;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100929098);
  v3 = sub_100471484((uint64_t)off_1009778E0);
  v4 = qword_1009997E8;
  if ((v3 & 1) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F78C(a2, (uint64_t)__p);
      v5 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v23 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Trying to delete device %s", buf, 0xCu);
      if (v21 < 0)
        operator delete(__p[0]);
    }
    v6 = objc_autoreleasePoolPush();
    v8 = *(_DWORD *)(a2 + 128);
    v7 = a2 + 128;
    *(_DWORD *)buf = v8;
    LOWORD(v23) = *(_WORD *)(v7 + 4);
    sub_10046E9BC(buf, __p);
    if (v21 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    v10 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));
    if (v21 < 0)
      operator delete(__p[0]);
    sub_100338728(v10, 0);

    objc_autoreleasePoolPop(v6);
    v18 = *(_DWORD *)v7;
    v19 = *(_WORD *)(v7 + 4);
    sub_10046E9BC((unsigned __int8 *)&v18, __p);
    if (v21 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    v12 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11));
    if (v21 < 0)
      operator delete(__p[0]);
    v13 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10046E9BC((unsigned __int8 *)&v18, __p);
      v14 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Deleting address %{public}s", buf, 0xCu);
      if (v21 < 0)
        operator delete(__p[0]);
    }
    v15 = (void *)sub_1003387A0(v12);
    v16 = objc_opt_class(NSDictionary);
    if ((objc_opt_isKindOfClass(v15, v16) & 1) != 0
      && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
    {
      sub_1006E0F48();
    }

    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E0F80(a2, v4);
    return 1;
  }
}

void sub_1003386D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_100338728(CFStringRef key, CFPropertyListRef value)
{
  CFStringRef v4;

  if (byte_10097AD70)
  {
    v4 = sub_100337F20();
    _CFPreferencesSetAppValueWithContainer(key, value, CFSTR("com.apple.MobileBluetooth.devices"), v4);
  }
  else
  {
    CFPreferencesSetValue(key, value, CFSTR("com.apple.MobileBluetooth.devices"), kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  }
}

CFPropertyListRef sub_1003387A0(CFStringRef key)
{
  CFStringRef v2;

  if (!byte_10097AD70)
    return CFPreferencesCopyValue(key, CFSTR("com.apple.MobileBluetooth.devices"), kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  v2 = sub_100337F20();
  return (CFPropertyListRef)_CFPreferencesCopyAppValueWithContainer(key, CFSTR("com.apple.MobileBluetooth.devices"), v2);
}

uint64_t sub_10033880C(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_10033881C(a1, a2, "Name", a3);
}

uint64_t sub_10033881C(uint64_t a1, unsigned __int8 *a2, const char *a3, std::string *a4)
{
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  NSObject *v13;

  v7 = objc_autoreleasePoolPush();
  v8 = sub_10033A540((uint64_t)v7, (uint64_t)a2, (uint64_t)a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = objc_opt_class(NSString);
  if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
  {
    v11 = objc_retainAutorelease(v9);
    std::string::assign(a4, (const std::string::value_type *)objc_msgSend(v11, "UTF8String"));

    objc_autoreleasePoolPop(v7);
    return 0;
  }
  else
  {

    objc_autoreleasePoolPop(v7);
    if (!strncmp("Name", a3, 4uLL) && sub_10043E93C(a2))
    {
      v13 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E1010((uint64_t)a2, v13);
    }
    return 1;
  }
}

void sub_100338918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100338928(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10033894C(a1, a2, "Name", a3);
  return 0;
}

uint64_t sub_10033894C(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  void *v8;
  uint64_t *v9;
  void *v10;

  v8 = objc_autoreleasePoolPush();
  if (*((char *)a4 + 23) >= 0)
    v9 = a4;
  else
    v9 = (uint64_t *)*a4;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));
  sub_10033A8E0(a1, a2, a3, v10);

  objc_autoreleasePoolPop(v8);
  return 0;
}

void sub_1003389D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003389E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"DevicePrimaryHash", a3, (id)0x14);
}

uint64_t sub_1003389F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5)
{
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v9 = objc_autoreleasePoolPush();
  v10 = sub_10033A540((uint64_t)v9, a2, a3);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = objc_opt_class(NSData);
  if ((objc_opt_isKindOfClass(v11, v12) & 1) != 0 && objc_msgSend(v11, "length") == a5)
  {
    objc_msgSend(v11, "getBytes:length:", a4, a5);
    v13 = 0;
  }
  else
  {
    v13 = 1;
  }

  objc_autoreleasePoolPop(v9);
  return v13;
}

void sub_100338AA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100338AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100338ADC(a1, a2, "DevicePrimaryHash", a3, 20);
  return 0;
}

uint64_t sub_100338ADC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  void *v11;

  v10 = objc_autoreleasePoolPush();
  if (a4)
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a4, a5));
  else
    v11 = 0;
  sub_10033A8E0(a1, a2, a3, v11);

  objc_autoreleasePoolPop(v10);
  return 0;
}

void sub_100338B6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100338B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"DeviceSecondaryHash", a3, (id)0x14);
}

uint64_t sub_100338B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100338ADC(a1, a2, "DeviceSecondaryHash", a3, 20);
  return 0;
}

uint64_t sub_100338BB8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return sub_1003389F8(a1, a2, (uint64_t)"DevicePrimaryHashData", a3, (id)a4);
}

uint64_t sub_100338BD0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  sub_100338ADC(a1, a2, "DevicePrimaryHashData", a3, a4);
  return 0;
}

uint64_t sub_100338BFC(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_10033881C(a1, a2, "DeviceBundleID", a3);
}

uint64_t sub_100338C0C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10033894C(a1, a2, "DeviceBundleID", a3);
  return 0;
}

uint64_t sub_100338C30(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_10033881C(a1, a2, "DeviceCarVendorName", a3);
}

uint64_t sub_100338C40(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10033894C(a1, a2, "DeviceCarVendorName", a3);
  return 0;
}

uint64_t sub_100338C64(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_10033881C(a1, a2, "DeviceManufacturerName", a3);
}

uint64_t sub_100338C74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10033894C(a1, a2, "DeviceManufacturerName", a3);
  return 0;
}

uint64_t sub_100338C98(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_10033881C(a1, a2, "DeviceModelName", a3);
}

uint64_t sub_100338CA8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10033894C(a1, a2, "DeviceModelName", a3);
  return 0;
}

uint64_t sub_100338CCC(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_10033881C(a1, a2, "DeviceHWRevision", a3);
}

uint64_t sub_100338CDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10033894C(a1, a2, "DeviceHWRevision", a3);
  return 0;
}

uint64_t sub_100338D00(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_10033881C(a1, a2, "DeviceFWRevision", a3);
}

uint64_t sub_100338D10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10033894C(a1, a2, "DeviceFWRevision", a3);
  return 0;
}

uint64_t sub_100338D34(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_10033881C(a1, a2, "DeviceSWRevision", a3);
}

uint64_t sub_100338D44(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10033894C(a1, a2, "DeviceSWRevision", a3);
  return 0;
}

uint64_t sub_100338D68(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_10033881C(a1, a2, "UserNameKey", a3);
}

uint64_t sub_100338D78(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10033894C(a1, a2, "UserNameKey", a3);
  return 0;
}

uint64_t sub_100338D9C(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_10033881C(a1, a2, "DefaultName", a3);
}

uint64_t sub_100338DAC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10033894C(a1, a2, "DefaultName", a3);
  return 0;
}

uint64_t sub_100338DD0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v24;
  std::string __p;
  unsigned int *v26;

  v6 = (_QWORD *)(a3 + 8);
  sub_10001A82C(a3, *(_QWORD **)(a3 + 8));
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 16) = 0;
  *v6 = 0;
  memset(&__p, 0, sizeof(__p));
  v7 = 1;
  if (!sub_10033881C(a1, a2, "ServiceHandsfree", &__p))
  {
    v8 = sub_100339400(0, &__p);
    v24 = 1;
    v26 = &v24;
    v7 = 0;
    *((_DWORD *)sub_10033EC4C((uint64_t **)a3, &v24, (uint64_t)&unk_100740F58, &v26) + 8) = v8;
  }
  if (!sub_10033881C(a1, a2, "ServicePhoneBook", &__p))
  {
    v9 = sub_100339400(0, &__p);
    v24 = 2;
    v26 = &v24;
    v7 = 0;
    *((_DWORD *)sub_10033EC4C((uint64_t **)a3, &v24, (uint64_t)&unk_100740F58, &v26) + 8) = v9;
  }
  if (!sub_10033881C(a1, a2, "ServiceRemote", &__p))
  {
    v10 = sub_100339400(0, &__p);
    v24 = 8;
    v26 = &v24;
    v7 = 0;
    *((_DWORD *)sub_10033EC4C((uint64_t **)a3, &v24, (uint64_t)&unk_100740F58, &v26) + 8) = v10;
  }
  if (!sub_10033881C(a1, a2, "ServiceA2DP", &__p))
  {
    v11 = sub_100339400(0, &__p);
    v24 = 16;
    v26 = &v24;
    v7 = 0;
    *((_DWORD *)sub_10033EC4C((uint64_t **)a3, &v24, (uint64_t)&unk_100740F58, &v26) + 8) = v11;
  }
  if (!sub_10033881C(a1, a2, "ServiceHID", &__p))
  {
    v12 = sub_100339400(0, &__p);
    v24 = 32;
    v26 = &v24;
    v7 = 0;
    *((_DWORD *)sub_10033EC4C((uint64_t **)a3, &v24, (uint64_t)&unk_100740F58, &v26) + 8) = v12;
  }
  if (!sub_10033881C(a1, a2, "ServiceWiAP", &__p))
  {
    v13 = sub_100339400(0, &__p);
    v24 = 128;
    v26 = &v24;
    v7 = 0;
    *((_DWORD *)sub_10033EC4C((uint64_t **)a3, &v24, (uint64_t)&unk_100740F58, &v26) + 8) = v13;
  }
  if (!sub_10033881C(a1, a2, "ServiceNetSharing", &__p))
  {
    v14 = sub_100339400(0, &__p);
    v24 = 256;
    v26 = &v24;
    v7 = 0;
    *((_DWORD *)sub_10033EC4C((uint64_t **)a3, &v24, (uint64_t)&unk_100740F58, &v26) + 8) = v14;
  }
  if (!sub_10033881C(a1, a2, "ServiceNetSharingUser", &__p))
  {
    v15 = sub_100339400(0, &__p);
    v24 = 4096;
    v26 = &v24;
    v7 = 0;
    *((_DWORD *)sub_10033EC4C((uint64_t **)a3, &v24, (uint64_t)&unk_100740F58, &v26) + 8) = v15;
  }
  if (!sub_10033881C(a1, a2, "ServiceGaming", &__p))
  {
    v16 = sub_100339400(0, &__p);
    v24 = 2048;
    v26 = &v24;
    v7 = 0;
    *((_DWORD *)sub_10033EC4C((uint64_t **)a3, &v24, (uint64_t)&unk_100740F58, &v26) + 8) = v16;
  }
  if (!sub_10033881C(a1, a2, "ServiceBraille", &__p))
  {
    v17 = sub_100339400(0, &__p);
    v24 = 0x2000;
    v26 = &v24;
    v7 = 0;
    *((_DWORD *)sub_10033EC4C((uint64_t **)a3, &v24, (uint64_t)&unk_100740F58, &v26) + 8) = v17;
  }
  if (!sub_10033881C(a1, a2, "ServiceMAP", &__p))
  {
    v18 = sub_100339400(0, &__p);
    v24 = 512;
    v26 = &v24;
    v7 = 0;
    *((_DWORD *)sub_10033EC4C((uint64_t **)a3, &v24, (uint64_t)&unk_100740F58, &v26) + 8) = v18;
  }
  if (!sub_10033881C(a1, a2, "ServiceWiAPSink", &__p))
  {
    v19 = sub_100339400(0, &__p);
    v24 = 0x20000;
    v26 = &v24;
    v7 = 0;
    *((_DWORD *)sub_10033EC4C((uint64_t **)a3, &v24, (uint64_t)&unk_100740F58, &v26) + 8) = v19;
  }
  if (!sub_10033881C(a1, a2, "ServiceWirelessCarPlay", &__p))
  {
    v20 = sub_100339400(0, &__p);
    v24 = 0x40000;
    v26 = &v24;
    v7 = 0;
    *((_DWORD *)sub_10033EC4C((uint64_t **)a3, &v24, (uint64_t)&unk_100740F58, &v26) + 8) = v20;
  }
  if (!sub_10033881C(a1, a2, "ServiceAACP", &__p))
  {
    v21 = sub_100339400(0, &__p);
    v24 = 0x80000;
    v26 = &v24;
    v7 = 0;
    *((_DWORD *)sub_10033EC4C((uint64_t **)a3, &v24, (uint64_t)&unk_100740F58, &v26) + 8) = v21;
  }
  if (!sub_10033881C(a1, a2, "ServiceGATT", &__p))
  {
    v22 = sub_100339400(0, &__p);
    v24 = 0x100000;
    v26 = &v24;
    v7 = 0;
    *((_DWORD *)sub_10033EC4C((uint64_t **)a3, &v24, (uint64_t)&unk_100740F58, &v26) + 8) = v22;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1003393A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100339400(int a1, std::string *this)
{
  uint64_t result;

  result = std::string::compare(this, "Unknown");
  if ((_DWORD)result)
  {
    if (!std::string::compare(this, "Unsupported"))
    {
      return 1;
    }
    else if (!std::string::compare(this, "Unlikely"))
    {
      return 2;
    }
    else if (!std::string::compare(this, "Likely"))
    {
      return 3;
    }
    else
    {
      return 4 * (std::string::compare(this, "Supported") == 0);
    }
  }
  return result;
}

uint64_t sub_1003394A0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  std::string __p;

  v3 = a3 + 1;
  v4 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    do
    {
      v7 = *((_DWORD *)v4 + 7);
      if (v7 <= 511)
      {
        if (v7 <= 15)
        {
          switch(v7)
          {
            case 1:
              sub_1003398AC((int *)v4 + 8, &__p);
              sub_10033894C(a1, a2, "ServiceHandsfree", (uint64_t *)&__p);
              goto LABEL_38;
            case 2:
              sub_1003398AC((int *)v4 + 8, &__p);
              sub_10033894C(a1, a2, "ServicePhoneBook", (uint64_t *)&__p);
              goto LABEL_38;
            case 8:
              sub_1003398AC((int *)v4 + 8, &__p);
              sub_10033894C(a1, a2, "ServiceRemote", (uint64_t *)&__p);
              goto LABEL_38;
          }
        }
        else if (v7 > 127)
        {
          if (v7 == 128)
          {
            sub_1003398AC((int *)v4 + 8, &__p);
            sub_10033894C(a1, a2, "ServiceWiAP", (uint64_t *)&__p);
            goto LABEL_38;
          }
          if (v7 == 256)
          {
            sub_1003398AC((int *)v4 + 8, &__p);
            sub_10033894C(a1, a2, "ServiceNetSharing", (uint64_t *)&__p);
            goto LABEL_38;
          }
        }
        else
        {
          if (v7 == 16)
          {
            sub_1003398AC((int *)v4 + 8, &__p);
            sub_10033894C(a1, a2, "ServiceA2DP", (uint64_t *)&__p);
            goto LABEL_38;
          }
          if (v7 == 32)
          {
            sub_1003398AC((int *)v4 + 8, &__p);
            sub_10033894C(a1, a2, "ServiceHID", (uint64_t *)&__p);
            goto LABEL_38;
          }
        }
      }
      else if (v7 >= 0x20000)
      {
        if (v7 >= 0x80000)
        {
          if (v7 == 0x80000)
          {
            sub_1003398AC((int *)v4 + 8, &__p);
            sub_10033894C(a1, a2, "ServiceAACP", (uint64_t *)&__p);
LABEL_38:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_40;
          }
          if (v7 == 0x100000)
          {
            sub_1003398AC((int *)v4 + 8, &__p);
            sub_10033894C(a1, a2, "ServiceGATT", (uint64_t *)&__p);
            goto LABEL_38;
          }
        }
        else
        {
          if (v7 == 0x20000)
          {
            sub_1003398AC((int *)v4 + 8, &__p);
            sub_10033894C(a1, a2, "ServiceWiAPSink", (uint64_t *)&__p);
            goto LABEL_38;
          }
          if (v7 == 0x40000)
          {
            sub_1003398AC((int *)v4 + 8, &__p);
            sub_10033894C(a1, a2, "ServiceWirelessCarPlay", (uint64_t *)&__p);
            goto LABEL_38;
          }
        }
      }
      else if (v7 > 4095)
      {
        if (v7 == 4096)
        {
          sub_1003398AC((int *)v4 + 8, &__p);
          sub_10033894C(a1, a2, "ServiceNetSharingUser", (uint64_t *)&__p);
          goto LABEL_38;
        }
        if (v7 == 0x2000)
        {
          sub_1003398AC((int *)v4 + 8, &__p);
          sub_10033894C(a1, a2, "ServiceBraille", (uint64_t *)&__p);
          goto LABEL_38;
        }
      }
      else
      {
        if (v7 == 512)
        {
          sub_1003398AC((int *)v4 + 8, &__p);
          sub_10033894C(a1, a2, "ServiceMAP", (uint64_t *)&__p);
          goto LABEL_38;
        }
        if (v7 == 2048)
        {
          sub_1003398AC((int *)v4 + 8, &__p);
          sub_10033894C(a1, a2, "ServiceGaming", (uint64_t *)&__p);
          goto LABEL_38;
        }
      }
LABEL_40:
      v8 = (_QWORD *)v4[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v4[2];
          v10 = *v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v4 = v9;
    }
    while (v9 != v3);
  }
  return 0;
}

void sub_100339858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_1003398AC@<X0>(int *a1@<X1>, std::string *a2@<X8>)
{
  uint64_t v3;
  std::string *result;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *a1;
  if (v3 < 5)
    return std::string::assign(a2, off_1009290B8[v3]);
  return result;
}

void sub_1003398F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_10033990C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  return sub_10033991C(a1, a2, (uint64_t)"PhonebookSyncSettings", a3);
}

BOOL sub_10033991C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  char isKindOfClass;

  v7 = objc_autoreleasePoolPush();
  v8 = sub_10033A540((uint64_t)v7, a2, a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = objc_opt_class(NSNumber);
  isKindOfClass = objc_opt_isKindOfClass(v9, v10);
  if ((isKindOfClass & 1) != 0)
    *a4 = objc_msgSend(v9, "intValue");

  objc_autoreleasePoolPop(v7);
  return (isKindOfClass & 1) == 0;
}

void sub_1003399A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003399B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1003399D8(a1, a2, "PhonebookSyncSettings", a3);
  return 0;
}

uint64_t sub_1003399D8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v8;
  void *v9;

  v8 = objc_autoreleasePoolPush();
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a4));
  sub_10033A8E0(a1, a2, a3, v9);

  objc_autoreleasePoolPop(v8);
  return 0;
}

void sub_100339A54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100339A64(uint64_t a1, uint64_t a2, int **a3)
{
  NSObject *v6;
  _BOOL4 v7;
  int *v8;
  NSObject *v9;
  unint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  int *v18;
  int *v19;
  int v20;
  int v22;
  uint8_t buf[4];
  int v24;

  v22 = -1;
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *a3 == a3[1];
    *(_DWORD *)buf = 67109120;
    v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Group list is empty: %d", buf, 8u);
  }
  sub_10033991C(a1, a2, (uint64_t)"PhonebookSyncGroup", &v22);
  v8 = *a3;
  a3[1] = *a3;
  v9 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v24 = v22;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Read group ID: %d", buf, 8u);
    v8 = a3[1];
  }
  v10 = (unint64_t)a3[2];
  if ((unint64_t)v8 >= v10)
  {
    v12 = *a3;
    v13 = v8 - *a3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
      abort();
    v15 = v10 - (_QWORD)v12;
    if (v15 >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = (char *)sub_1002B46E0((uint64_t)(a3 + 2), v16);
      v12 = *a3;
      v8 = a3[1];
    }
    else
    {
      v17 = 0;
    }
    v18 = (int *)&v17[4 * v13];
    v19 = (int *)&v17[4 * v16];
    *v18 = v22;
    v11 = v18 + 1;
    while (v8 != v12)
    {
      v20 = *--v8;
      *--v18 = v20;
    }
    *a3 = v18;
    a3[1] = v11;
    a3[2] = v19;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v8 = v22;
    v11 = v8 + 1;
  }
  a3[1] = v11;
  return 0;
}

uint64_t sub_100339C60(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  sub_1003399D8(a1, a2, "PhonebookSyncGroup", **a3);
  return 0;
}

uint64_t sub_100339C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1003399D8(a1, a2, "PhonebookSyncGroup", a3);
  return 0;
}

uint64_t sub_100339CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"DeviceClass", a3, (id)4);
}

uint64_t sub_100339CC0(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "DeviceClass", (uint64_t)&v4, 4);
  return 0;
}

BOOL sub_100339CF4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_100339D04(a1, a2, (uint64_t)"PincodeHasSucceeded", a3);
}

BOOL sub_100339D04(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  char isKindOfClass;

  v7 = objc_autoreleasePoolPush();
  v8 = sub_10033A540((uint64_t)v7, a2, a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = objc_opt_class(NSNumber);
  isKindOfClass = objc_opt_isKindOfClass(v9, v10);
  if ((isKindOfClass & 1) != 0)
    *a4 = objc_msgSend(v9, "BOOLValue");

  objc_autoreleasePoolPop(v7);
  return (isKindOfClass & 1) == 0;
}

void sub_100339D8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100339D9C(uint64_t a1, uint64_t a2, int a3)
{
  void *v6;
  void *v7;

  v6 = objc_autoreleasePoolPush();
  if (a3)
    v7 = &__kCFBooleanTrue;
  else
    v7 = &__kCFBooleanFalse;
  sub_10033A8E0(a1, a2, "PincodeHasSucceeded", v7);
  objc_autoreleasePoolPop(v6);
  return 0;
}

BOOL sub_100339E08(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_100339D04(a1, a2, (uint64_t)"AllowScoForTBT", a3);
}

uint64_t sub_100339E18(uint64_t a1, uint64_t a2, int a3)
{
  void *v6;
  void *v7;

  v6 = objc_autoreleasePoolPush();
  if (a3)
    v7 = &__kCFBooleanTrue;
  else
    v7 = &__kCFBooleanFalse;
  sub_10033A8E0(a1, a2, "AllowScoForTBT", v7);
  objc_autoreleasePoolPop(v6);
  return 0;
}

uint64_t sub_100339E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastAVRCPVersion", a3, (id)2);
}

uint64_t sub_100339E98(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "LastAVRCPVersion", (uint64_t)&v4, 2);
  return 0;
}

uint64_t sub_100339ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastPBAPVersion", a3, (id)2);
}

uint64_t sub_100339EE0(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "LastPBAPVersion", (uint64_t)&v4, 2);
  return 0;
}

uint64_t sub_100339F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastPBAPSupportedFeatures", a3, (id)2);
}

uint64_t sub_100339F28(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "LastPBAPSupportedFeatures", (uint64_t)&v4, 2);
  return 0;
}

uint64_t sub_100339F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastAVRCPControllerVersion", a3, (id)2);
}

uint64_t sub_100339F70(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "LastAVRCPControllerVersion", (uint64_t)&v4, 2);
  return 0;
}

uint64_t sub_100339FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastAVRCPControllerSupportedFeatures", a3, (id)2);
}

uint64_t sub_100339FB8(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "LastAVRCPControllerSupportedFeatures", (uint64_t)&v4, 2);
  return 0;
}

uint64_t sub_100339FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastAVRCPTargetVersion", a3, (id)2);
}

uint64_t sub_10033A000(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "LastAVRCPTargetVersion", (uint64_t)&v4, 2);
  return 0;
}

uint64_t sub_10033A034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastAVRCPTargetSupportedFeatures", a3, (id)2);
}

uint64_t sub_10033A048(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "LastAVRCPTargetSupportedFeatures", (uint64_t)&v4, 2);
  return 0;
}

uint64_t sub_10033A07C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastHandsfreeVersion", a3, (id)2);
}

uint64_t sub_10033A090(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "LastHandsfreeVersion", (uint64_t)&v4, 2);
  return 0;
}

uint64_t sub_10033A0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastHandsfreeSupportedFeatures", a3, (id)2);
}

uint64_t sub_10033A0D8(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "LastHandsfreeSupportedFeatures", (uint64_t)&v4, 2);
  return 0;
}

uint64_t sub_10033A10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastA2DPSinkVersion", a3, (id)2);
}

uint64_t sub_10033A120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100338ADC(a1, a2, "LastA2DPSinkVersion", a3, 2);
  return 0;
}

uint64_t sub_10033A148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastA2DPSinkSupportedFeatures", a3, (id)2);
}

uint64_t sub_10033A15C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100338ADC(a1, a2, "LastA2DPSinkSupportedFeatures", a3, 2);
  return 0;
}

uint64_t sub_10033A184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastMAPVersion", a3, (id)2);
}

uint64_t sub_10033A198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100338ADC(a1, a2, "LastMAPVersion", a3, 2);
  return 0;
}

uint64_t sub_10033A1C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastOBEXObjectPushVersion", a3, (id)2);
}

uint64_t sub_10033A1D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100338ADC(a1, a2, "LastOBEXObjectPushVersion", a3, 2);
  return 0;
}

uint64_t sub_10033A1FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastPNPInformationVersion", a3, (id)2);
}

uint64_t sub_10033A210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100338ADC(a1, a2, "LastPNPInformationVersion", a3, 2);
  return 0;
}

uint64_t sub_10033A238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastSerialPortVersion", a3, (id)2);
}

uint64_t sub_10033A24C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100338ADC(a1, a2, "LastSerialPortVersion", a3, 2);
  return 0;
}

uint64_t sub_10033A274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastHIDVersion", a3, (id)2);
}

uint64_t sub_10033A288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100338ADC(a1, a2, "LastHIDVersion", a3, 2);
  return 0;
}

uint64_t sub_10033A2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastGATTVersion", a3, (id)2);
}

uint64_t sub_10033A2C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100338ADC(a1, a2, "LastGATTVersion", a3, 2);
  return 0;
}

uint64_t sub_10033A2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastWIAPVersion", a3, (id)2);
}

uint64_t sub_10033A300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100338ADC(a1, a2, "LastWIAPVersion", a3, 2);
  return 0;
}

uint64_t sub_10033A328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastAVDTPVersion", a3, (id)2);
}

uint64_t sub_10033A33C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100338ADC(a1, a2, "LastAVDTPVersion", a3, 2);
  return 0;
}

uint64_t sub_10033A364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LastAVCTPVersion", a3, (id)2);
}

uint64_t sub_10033A378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100338ADC(a1, a2, "LastAVCTPVersion", a3, 2);
  return 0;
}

BOOL sub_10033A3A0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_100339D04(a1, a2, (uint64_t)"initiateSDPMirroringState", a3);
}

uint64_t sub_10033A3B0(uint64_t a1, uint64_t a2, int a3)
{
  void *v6;
  void *v7;

  v6 = objc_autoreleasePoolPush();
  if (a3)
    v7 = &__kCFBooleanTrue;
  else
    v7 = &__kCFBooleanFalse;
  sub_10033A8E0(a1, a2, "initiateSDPMirroringState", v7);
  objc_autoreleasePoolPop(v6);
  return 0;
}

uint64_t sub_10033A41C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"AssetLastCheckedTime", a3, (id)8);
}

uint64_t sub_10033A430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "AssetLastCheckedTime", (uint64_t)&v4, 8);
  return 0;
}

uint64_t sub_10033A464(uint64_t a1, uint64_t a2, uint64_t *a3, _BYTE *a4)
{
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;

  v7 = objc_autoreleasePoolPush();
  v8 = sub_10033A540((uint64_t)v7, a2, (uint64_t)"DeviceTags");
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = objc_opt_class(NSArray);
  if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
  {
    if (*((char *)a3 + 23) >= 0)
      v11 = a3;
    else
      v11 = (uint64_t *)*a3;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11));
    *a4 = objc_msgSend(v9, "containsObject:", v12);

    v13 = 0;
  }
  else
  {
    v13 = 1;
  }

  objc_autoreleasePoolPop(v7);
  return v13;
}

void sub_10033A520(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_10033A540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  int v13;
  __int16 v14;
  _BYTE __p[12];
  char v16;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100929098);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    v13 = *(_DWORD *)(a2 + 128);
    v14 = *(_WORD *)(a2 + 132);
    sub_10046E9BC((unsigned __int8 *)&v13, __p);
    if (v16 >= 0)
      v5 = __p;
    else
      v5 = *(_BYTE **)__p;
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5));
    if (v16 < 0)
      operator delete(*(void **)__p);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a3));
    v8 = (void *)sub_1003387A0(v6);
    v9 = objc_opt_class(NSDictionary);
    if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0)
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v7));
    else
      v10 = 0;

    return v10;
  }
  else
  {
    v11 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "System has not passed first unlock (or device prefs not read yet). Do not read device property %s", __p, 0xCu);
    }
    return 0;
  }
}

void sub_10033A6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t sub_10033A738(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;

  v6 = objc_autoreleasePoolPush();
  v7 = sub_10033A540((uint64_t)v6, a2, (uint64_t)"DeviceTags");
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (!v8 || (v9 = objc_opt_class(NSArray), (objc_opt_isKindOfClass(v8, v9) & 1) != 0))
  {
    if (*((char *)a3 + 23) >= 0)
      v10 = a3;
    else
      v10 = (_QWORD *)*a3;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v8));
    objc_msgSend(v12, "addObject:", v11);
    if (!_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
      goto LABEL_15;
    v13 = *((char *)a3 + 23);
    if (v13 < 0)
    {
      if (a3[1] != 34)
      {
LABEL_15:
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "allObjects"));
        v14 = sub_10033A8E0(a1, a2, "DeviceTags", v15);

        goto LABEL_16;
      }
      a3 = (_QWORD *)*a3;
    }
    else if (v13 != 34)
    {
      goto LABEL_15;
    }
    if (!memcmp(a3, "_DENY_INCOMING_CLASSIC_CONNECTION_", 0x22uLL))
      sub_100455CB8(a2, 1);
    goto LABEL_15;
  }
  v14 = 1;
LABEL_16:

  objc_autoreleasePoolPop(v6);
  return v14;
}

void sub_10033A8A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_10033A8E0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  void **v8;
  __CFString *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  void *v23;
  NSObject *v25;
  int v26;
  __int16 v27;
  uint8_t buf[4];
  void *v29;
  void *__p[2];
  char v31;

  v7 = a4;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100929098);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    v26 = *(_DWORD *)(a2 + 128);
    v27 = *(_WORD *)(a2 + 132);
    sub_10046E9BC((unsigned __int8 *)&v26, __p);
    if (v31 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
    if (v31 < 0)
      operator delete(__p[0]);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a3));
    *(_OWORD *)__p = 0uLL;
    sub_10003415C((uint64_t)__p, a1 + 8);
    v11 = (void *)sub_1003387A0(v9);
    if (v11)
    {
      v12 = objc_opt_class(NSDictionary);
      if ((objc_opt_isKindOfClass(v11, v12) & 1) == 0)
      {
        v13 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
          sub_1006E1098(v13, v14, v15, v16, v17, v18, v19, v20);
      }
    }
    else if (!v7)
    {
      v25 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v29 = a3;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Trying to write property %s but no dictionary", buf, 0xCu);
      }
      goto LABEL_18;
    }
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v11));
    objc_msgSend(v23, "setValue:forKey:", v7, v10);
    sub_100338728(v9, v23);

LABEL_18:
    sub_100034234((uint64_t)__p);

    v22 = 0;
    goto LABEL_19;
  }
  v21 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = a3;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "System has not passed first unlock (or device prefs not read yet). Do not write device property %s", (uint8_t *)__p, 0xCu);
  }
  v22 = 1;
LABEL_19:

  return v22;
}

void sub_10033AB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  sub_100034234((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10033ABD8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v6;
  id v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  int v18;
  _QWORD *v19;
  _QWORD *v20;
  void **v21;
  int v22;
  _QWORD *v23;
  _QWORD *v24;
  void **v25;
  void *__p[2];
  char v27;
  uint8_t buf[4];
  const void *v29;
  __int16 v30;
  void **v31;

  v6 = objc_autoreleasePoolPush();
  v7 = sub_10033A540((uint64_t)v6, a2, (uint64_t)"DeviceTags");
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](NSMutableArray, "arrayWithArray:", v8));

  if (v9)
  {
    if (*((char *)a3 + 23) >= 0)
      v10 = a3;
    else
      v10 = (_QWORD *)*a3;
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10));
    if (!objc_msgSend(v9, "containsObject:", v11))
    {
      v16 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        v22 = *((char *)a3 + 23);
        v23 = (_QWORD *)*a3;
        sub_10043E5F8(a2, __p);
        v24 = v22 >= 0 ? a3 : v23;
        v25 = v27 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446466;
        v29 = v24;
        v30 = 2082;
        v31 = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Tag: \"%{public}s\" wasn't stored for device %{public}s", buf, 0x16u);
        if (v27 < 0)
          operator delete(__p[0]);
      }
      v13 = 1;
      goto LABEL_16;
    }
    objc_msgSend(v9, "removeObject:", v11);
    v12 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
    {
      v18 = *((char *)a3 + 23);
      v19 = (_QWORD *)*a3;
      sub_10043E5F8(a2, __p);
      v20 = v18 >= 0 ? a3 : v19;
      v21 = v27 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v29 = v20;
      v30 = 2082;
      v31 = v21;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Removing tag: \"%{public}s\" for %{public}s from device settings", buf, 0x16u);
      if (v27 < 0)
        operator delete(__p[0]);
    }
    v13 = sub_10033A8E0(a1, a2, "DeviceTags", v9);
    if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
    {
      v14 = *((char *)a3 + 23);
      if (v14 < 0)
      {
        if (a3[1] == 34)
        {
          a3 = (_QWORD *)*a3;
          goto LABEL_20;
        }
      }
      else if (v14 == 34)
      {
LABEL_20:
        if (!memcmp(a3, "_DENY_INCOMING_CLASSIC_CONNECTION_", 0x22uLL))
          sub_100455CB8(a2, 0);
      }
    }
LABEL_16:

    goto LABEL_17;
  }
  v15 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, __p);
    sub_1006E1108((char *)__p, (uint64_t)buf, v15);
  }
  v13 = 1;
LABEL_17:

  objc_autoreleasePoolPop(v6);
  return v13;
}

void sub_10033AEEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10033AF28(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = objc_autoreleasePoolPush();
  sub_10033B168((uint64_t)v3, a2, (uint64_t)"DeviceTags");
  objc_autoreleasePoolPop(v3);
  return 0;
}

uint64_t sub_10033AF68(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v10;
  void *v11;

  v3 = objc_autoreleasePoolPush();
  v4 = sub_10033A540((uint64_t)v3, a2, (uint64_t)"DeviceTags");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = objc_opt_class(NSArray);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
  {
    v7 = qword_1009997E8;
    v8 = 0;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 138412290;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump:    Tags: %@", (uint8_t *)&v10, 0xCu);
      v8 = 0;
    }
  }
  else
  {
    v8 = 1;
  }

  objc_autoreleasePoolPop(v3);
  return v8;
}

void sub_10033B06C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10033B084(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  void *v5;

  v3 = objc_autoreleasePoolPush();
  v4 = sub_10033A540((uint64_t)v3, a2, (uint64_t)"DeviceTags");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_autoreleasePoolPop(v3);
  return v5;
}

BOOL sub_10033B0CC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  char isKindOfClass;

  v7 = objc_autoreleasePoolPush();
  v8 = sub_10033A540((uint64_t)v7, a2, a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = objc_opt_class(NSNumber);
  isKindOfClass = objc_opt_isKindOfClass(v9, v10);
  if ((isKindOfClass & 1) != 0)
    *a4 = (int)objc_msgSend(v9, "intValue");

  objc_autoreleasePoolPop(v7);
  return (isKindOfClass & 1) == 0;
}

void sub_10033B158(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10033B168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  NSObject *v20;
  int v21;
  __int16 v22;
  _BYTE __p[12];
  char v24;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100929098);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    v21 = *(_DWORD *)(a2 + 128);
    v22 = *(_WORD *)(a2 + 132);
    sub_10046E9BC((unsigned __int8 *)&v21, __p);
    if (v24 >= 0)
      v5 = __p;
    else
      v5 = *(_BYTE **)__p;
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5));
    if (v24 < 0)
      operator delete(*(void **)__p);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a3));
    v8 = (void *)sub_1003387A0(v6);
    if (v8)
    {
      v9 = objc_opt_class(NSDictionary);
      if ((objc_opt_isKindOfClass(v8, v9) & 1) == 0)
      {
        v10 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
          sub_1006E1098(v10, v11, v12, v13, v14, v15, v16, v17);
      }
    }
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v8));
    objc_msgSend(v18, "removeObjectForKey:", v7);
    sub_100338728(v6, v18);

    return 0;
  }
  else
  {
    v20 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "System has not passed first unlock (or device prefs not read yet). Do not delete device property %s", __p, 0xCu);
    }
    return 1;
  }
}

void sub_10033B350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t sub_10033B3AC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v8;
  void *v9;

  v8 = objc_autoreleasePoolPush();
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a4));
  sub_10033A8E0(a1, a2, a3, v9);

  objc_autoreleasePoolPop(v8);
  return 0;
}

void sub_10033B428(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10033B438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"EnableMAP", a3, (id)1);
}

uint64_t sub_10033B44C(uint64_t a1, uint64_t a2, char a3)
{
  char v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "EnableMAP", (uint64_t)&v4, 1);
  return 0;
}

uint64_t sub_10033B480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"WiAPAssoc", a3, (id)4);
}

uint64_t sub_10033B494(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "WiAPAssoc", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10033B4C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_t *v6;
  NSObject *v7;
  __int128 *v8;
  _BOOL4 v9;
  NSObject *v10;
  _BOOL4 v11;
  int v12;
  unsigned __int16 *v13;
  _BOOL4 v14;
  NSObject *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  __int16 v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned __int16 *v32;
  os_log_t *v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t **v37;
  uint64_t **v38;
  NSObject *v39;
  uint64_t v40;
  int v41;
  uint64_t **v42;
  unsigned int v43;
  void *v44;
  uint64_t v45;
  unsigned __int16 *v46;
  uint64_t v47;
  unsigned int *v48;
  uint8_t buf[16];
  __int128 v50;
  uint64_t v51;

  v46 = 0;
  v47 = 0;
  v45 = 0;
  v6 = (os_log_t *)&qword_1009997E8;
  v7 = qword_1009997E8;
  if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT)
    || ((sub_10043E5F8(a2, &v50), v51 >= 0) ? (v8 = &v50) : (v8 = (__int128 *)v50),
        *(_DWORD *)buf = 136446210,
        *(_QWORD *)&buf[4] = v8,
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Starting SDP record processing for device %{public}s", buf, 0xCu), (SHIBYTE(v51) & 0x80000000) == 0))
  {
    if (a2)
      goto LABEL_7;
    return 1;
  }
  operator delete((void *)v50);
  if (!a2)
    return 1;
LABEL_7:
  if (*(_QWORD *)(a3 + 16))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E1220();
    return 1;
  }
  v9 = sub_10033991C(a1, a2, (uint64_t)"SdpCacheVersion", &v45);
  v10 = qword_1009997E8;
  v11 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (v11)
    {
      LOWORD(v50) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Read SDP cache version failed", (uint8_t *)&v50, 2u);
    }
  }
  else
  {
    v12 = v45;
    if (v11)
    {
      LODWORD(v50) = 67109120;
      DWORD1(v50) = v45;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Read SDP cache version success %d", (uint8_t *)&v50, 8u);
    }
    if (v12 != 1)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E11F4();
      v24 = objc_autoreleasePoolPush();
      sub_10033B168((uint64_t)v24, a2, (uint64_t)"SdpCacheSize");
      objc_autoreleasePoolPop(v24);
      v25 = objc_autoreleasePoolPush();
      sub_10033B168((uint64_t)v25, a2, (uint64_t)"SdpCache");
      objc_autoreleasePoolPop(v25);
      v26 = objc_autoreleasePoolPush();
      sub_10033B168((uint64_t)v26, a2, (uint64_t)"SdpCacheVersion");
      objc_autoreleasePoolPop(v26);
      return 1;
    }
    sub_1003399D8(a1, a2, "SdpCacheVersion", 0);
  }
  v13 = (unsigned __int16 *)malloc_type_malloc(0xFA0uLL, 0xFDC7E519uLL);
  if (!v13)
  {
    v19 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v50) = 136446210;
      *(_QWORD *)((char *)&v50 + 4) = "pSerializedData";
      _os_log_fault_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v50, 0xCu);
      v19 = qword_1009997E8;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      sub_1006E1170();
    return 1;
  }
  v14 = sub_10033991C(a1, a2, (uint64_t)"SdpCacheSize", (_DWORD *)&v45 + 1);
  v42 = (uint64_t **)a3;
  v15 = qword_1009997E8;
  v16 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  if (v14)
  {
    if (v16)
    {
      LOWORD(v50) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "SDP record cache size is empty", (uint8_t *)&v50, 2u);
    }
    v17 = 0;
    v18 = 1;
  }
  else
  {
    if (v16)
    {
      LODWORD(v50) = 67109120;
      DWORD1(v50) = HIDWORD(v45);
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "SDP record cache size is %d", (uint8_t *)&v50, 8u);
    }
    if (v9)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E11C8();
      sub_1003399D8(a1, a2, "SdpCacheVersion", 0);
    }
    v20 = WORD2(v45);
    if ((HIDWORD(v45) - 1) > 0xF9F
      || sub_1003389F8(a1, a2, (uint64_t)"SdpCache", (uint64_t)v13, (id)HIDWORD(v45)))
    {
      goto LABEL_72;
    }
    v46 = v13;
    LOWORD(v47) = v20;
    HIWORD(v47) = 1;
    WORD1(v47) = v20;
    if ((v20 & 0xFFFE) == 0)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm");
    v28 = *v13;
    WORD2(v47) = 2;
    v41 = v28;
    if (!v28)
      goto LABEL_62;
    v29 = 0;
    v30 = 1;
    v40 = a1;
    do
    {
      v44 = 0;
      v44 = malloc_type_calloc(1uLL, 0x10uLL, 0x10F2040C8FBA5E1uLL);
      v31 = sub_1002C40C8((uint64_t *)&v46, (uint64_t)v44);
      if (HIBYTE(v47))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm", 1341, "virtual BTResult BT::DeviceSettings::readSDPRecord(Device *, SdpAttributes &)");
LABEL_68:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm");
      }
      if (WORD1(v47) - WORD2(v47) <= 1)
        goto LABEL_68;
      if (BYTE6(v47) != 1)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm");
      v32 = v13;
      v33 = v6;
      v34 = *(unsigned __int16 *)((char *)v46 + WORD2(v47));
      v30 &= v31;
      WORD2(v47) += 2;
      *((_QWORD *)&v50 + 1) = 0;
      v51 = 0;
      *(_QWORD *)&v50 = (char *)&v50 + 8;
      if (v34)
      {
        v35 = 0;
        while (1)
        {
          v43 = 0;
          memset(buf, 0, sizeof(buf));
          if (HIBYTE(v47))
            break;
          if (WORD1(v47) - WORD2(v47) <= 1 || BYTE6(v47) != 1)
            goto LABEL_65;
          v43 = *(unsigned __int16 *)((char *)v46 + WORD2(v47));
          WORD2(v47) += 2;
          v36 = sub_1002C40C8((uint64_t *)&v46, (uint64_t)buf);
          v48 = &v43;
          v37 = sub_10033ED08((uint64_t **)&v50, &v43, (uint64_t)&unk_100740F58, &v48);
          v30 &= v36;
          *(_OWORD *)(v37 + 5) = *(_OWORD *)buf;
          if (v34 <= ++v35)
            goto LABEL_58;
        }
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm", 1349, "virtual BTResult BT::DeviceSettings::readSDPRecord(Device *, SdpAttributes &)");
LABEL_65:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm");
      }
LABEL_58:
      *(_QWORD *)buf = &v44;
      v38 = (uint64_t **)(sub_1002BBB54(v42, (unint64_t *)&v44, (uint64_t)&unk_100740F58, (uint64_t **)buf) + 5);
      if (v38 != (uint64_t **)&v50)
        sub_10033EDC8(v38, (_QWORD *)v50, (_QWORD *)&v50 + 1);
      sub_10001A82C((uint64_t)&v50, *((_QWORD **)&v50 + 1));
      ++v29;
      v6 = v33;
      v13 = v32;
      a1 = v40;
    }
    while (v29 != v41);
    if (!v30)
    {
LABEL_72:
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
        sub_1006E119C();
      v21 = objc_autoreleasePoolPush();
      sub_10033B168((uint64_t)v21, a2, (uint64_t)"SdpCacheSize");
      objc_autoreleasePoolPop(v21);
      v22 = objc_autoreleasePoolPush();
      sub_10033B168((uint64_t)v22, a2, (uint64_t)"SdpCache");
      objc_autoreleasePoolPop(v22);
      v23 = objc_autoreleasePoolPush();
      sub_10033B168((uint64_t)v23, a2, (uint64_t)"SdpCacheVersion");
      objc_autoreleasePoolPop(v23);
    }
    else
    {
LABEL_62:
      sub_1003399D8(a1, a2, "SdpCacheVersion", 1);
      v39 = *v6;
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v50) = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "SDP cache read complete, writing version", (uint8_t *)&v50, 2u);
      }
    }
    v18 = 0;
    v17 = 1;
  }
  *(_DWORD *)(a2 + 608) = v17;
  free(v13);
  return v18;
}

void sub_10033BC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,_QWORD *a24)
{
  sub_10001A82C((uint64_t)&a23, a24);
  _Unwind_Resume(a1);
}

uint64_t sub_10033BC74(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  unsigned __int16 *v7;
  NSObject *v8;
  unsigned __int16 *v9;
  __int128 *v10;
  _QWORD *v11;
  unsigned __int16 v12;
  uint64_t v13;
  _OWORD *v14;
  __int16 v15;
  _QWORD *v16;
  _OWORD *v17;
  BOOL v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  NSObject *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  const char *v28;
  NSObject *v29;
  uint32_t v30;
  uint64_t v32;
  unsigned __int16 *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  __int128 __p;
  uint64_t v38;
  uint8_t buf[4];
  __int128 *v40;

  if (!a2)
    return 1;
  v6 = (_QWORD *)*a3;
  v7 = (unsigned __int16 *)malloc_type_malloc(0xFA0uLL, 0x113E263BuLL);
  v8 = qword_1009997E8;
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
    {
      LODWORD(__p) = 136446210;
      *(_QWORD *)((char *)&__p + 4) = "pSerializedData";
      _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&__p, 0xCu);
      v8 = qword_1009997E8;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_1006E1170();
    return 1;
  }
  v9 = v7;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, &__p);
    v10 = v38 >= 0 ? &__p : (__int128 *)__p;
    *(_DWORD *)buf = 136446210;
    v40 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Writing SDP record for device %{public}s to disk", buf, 0xCu);
    if (SHIBYTE(v38) < 0)
      operator delete((void *)__p);
  }
  v33 = v9;
  v34 = 4000;
  v36 = 2;
  v35 = 135072;
  v11 = a3 + 1;
  *v9 = 0;
  if (v6 != v11)
  {
    v12 = 0;
    while (sub_1002C4898((uint64_t *)&v33, (unsigned __int8 *)v6[4]))
    {
      if (HIBYTE(v36))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm", 1423, "virtual BTResult BT::DeviceSettings::writeSDPRecord(Device *, SdpAttributes &)");
LABEL_57:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm");
      }
      v13 = HIWORD(v35);
      if ((unsigned __int16)v35 - HIWORD(v35) <= 1)
        goto LABEL_57;
      if (v36 != 2)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm");
      *(unsigned __int16 *)((char *)v33 + HIWORD(v35)) = 0;
      HIWORD(v35) += 2;
      __p = 0uLL;
      v38 = 0;
      sub_10033F038((uint64_t)&__p, (uint64_t)(v6 + 5));
      ++v12;
      v14 = (_OWORD *)__p;
      if ((__int128 *)__p == (__int128 *)((char *)&__p + 8))
      {
        LOBYTE(v15) = 0;
        v19 = 0;
      }
      else
      {
        v15 = 0;
        while (1)
        {
          if (HIBYTE(v36))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm", 1430, "virtual BTResult BT::DeviceSettings::writeSDPRecord(Device *, SdpAttributes &)");
LABEL_54:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm");
          }
          if ((unsigned __int16)v35 - HIWORD(v35) <= 1 || v36 != 2)
            goto LABEL_54;
          *(unsigned __int16 *)((char *)v33 + HIWORD(v35)) = *((_DWORD *)v14 + 8);
          HIWORD(v35) += 2;
          ++v15;
          if (!sub_1002C4898((uint64_t *)&v33, (unsigned __int8 *)v14 + 40))
            break;
          v16 = (_QWORD *)*((_QWORD *)v14 + 1);
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (_OWORD *)*((_QWORD *)v14 + 2);
              v18 = *(_QWORD *)v17 == (_QWORD)v14;
              v14 = v17;
            }
            while (!v18);
          }
          v14 = v17;
          if (v17 == (__int128 *)((char *)&__p + 8))
            goto LABEL_30;
        }
        v12 = 0;
LABEL_30:
        v19 = HIBYTE(v15);
      }
      *((_BYTE *)v33 + v13) = v15;
      *((_BYTE *)v33 + v13 + 1) = v19;
      sub_10001A82C((uint64_t)&__p, *((_QWORD **)&__p + 1));
      v20 = (_QWORD *)v6[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v6[2];
          v18 = *v21 == (_QWORD)v6;
          v6 = v21;
        }
        while (!v18);
      }
      v6 = v21;
      if (v21 == v11)
      {
        if (!v12)
          break;
        *v33 = v12;
        v22 = HIWORD(v35);
        v23 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(__p) = 67109376;
          DWORD1(__p) = v22;
          WORD4(__p) = 1024;
          *(_DWORD *)((char *)&__p + 10) = v12;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "SDP record cache size %d with %d services", (uint8_t *)&__p, 0xEu);
        }
        if (v22 <= 0xFA0)
        {
          sub_1003399D8(a1, a2, "SdpCacheSize", v22);
          sub_100338ADC(a1, a2, "SdpCache", (uint64_t)v33, v22);
          sub_1003399D8(a1, a2, "SdpCacheVersion", 1);
          goto LABEL_45;
        }
        v32 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(__p) = 67109120;
          DWORD1(__p) = v22;
          v28 = "SDP record cache size %d larger than storage";
          v29 = v32;
          v30 = 8;
          goto LABEL_44;
        }
        goto LABEL_45;
      }
    }
  }
  v24 = objc_autoreleasePoolPush();
  sub_10033B168((uint64_t)v24, a2, (uint64_t)"SdpCacheSize");
  objc_autoreleasePoolPop(v24);
  v25 = objc_autoreleasePoolPush();
  sub_10033B168((uint64_t)v25, a2, (uint64_t)"SdpCache");
  objc_autoreleasePoolPop(v25);
  v26 = objc_autoreleasePoolPush();
  sub_10033B168((uint64_t)v26, a2, (uint64_t)"SdpCacheVersion");
  objc_autoreleasePoolPop(v26);
  v27 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    v28 = "Exiting Write SDP due to numOfServices being zero, wiping cache";
    v29 = v27;
    v30 = 2;
LABEL_44:
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v28, (uint8_t *)&__p, v30);
  }
LABEL_45:
  free(v9);
  return 0;
}

void sub_10033C234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033C258(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  int v10;

  v6 = 0;
  sub_10033991C(a1, a2, (uint64_t)"SdpCacheVersion", (_DWORD *)&v6 + 1);
  sub_10033991C(a1, a2, (uint64_t)"SdpCacheSize", &v6);
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v8 = HIDWORD(v6);
    v9 = 1024;
    v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SDP cache [version 0x%x, size 0x%x]", buf, 0xEu);
  }
  return 0;
}

uint64_t sub_10033C33C(uint64_t a1, _WORD *a2)
{
  NSObject *v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t (**v15)();
  unsigned int *v16;
  _BYTE __p[12];
  char v18;
  uint8_t buf[4];
  _BYTE *v20;

  v15 = &off_100918258;
  v16 = 0;
  v12 = 0;
  v13 = 0;
  if (sub_100444B3C(a2, (uint64_t)&v15, (_WORD *)&v13 + 1, &v13, (_WORD *)&v12 + 1, &v12))
  {
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8((uint64_t)a2, __p);
      v5 = v18 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Writing HID Data to disk for %{public}s", buf, 0xCu);
      if (v18 < 0)
        operator delete(*(void **)__p);
    }
    v6 = sub_10003F8C4((uint64_t)&v15);
    v14 = v6;
    if (v6 <= 0x1000)
    {
      sub_100338ADC(a1, (uint64_t)a2, "HIDDescriptorSize", (uint64_t)&v14, 8);
      v7 = sub_10003EB18((uint64_t)&v15);
      sub_100338ADC(a1, (uint64_t)a2, "HIDDescriptor", v7, v14);
      sub_100338ADC(a1, (uint64_t)a2, "HIDVendorID", (uint64_t)&v13 + 2, 2);
      sub_100338ADC(a1, (uint64_t)a2, "HIDVendorIDSource", (uint64_t)&v13, 2);
      sub_100338ADC(a1, (uint64_t)a2, "HIDProductID", (uint64_t)&v12 + 2, 2);
      sub_100338ADC(a1, (uint64_t)a2, "HIDVersion", (uint64_t)&v12, 2);
      v8 = 0;
      goto LABEL_15;
    }
    v9 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__p = 134217984;
      *(_QWORD *)&__p[4] = v6;
      _os_log_fault_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Writing HID descriptor size %zu which is too large!", __p, 0xCu);
      v9 = qword_1009997E8;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_1006E124C(v6, v9, v10);
  }
  v8 = 1;
LABEL_15:
  v15 = &off_100918258;
  if (v16)
    sub_100056AAC(v16);
  return v8;
}

void sub_10033C5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033C5CC(uint64_t a1, _WORD *a2)
{
  NSObject *v5;
  _BYTE *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  __int16 v14;
  size_t v15;
  __int128 buf;
  _BYTE __p[12];
  char v18;

  v15 = 0;
  if (sub_1003389F8(a1, (uint64_t)a2, (uint64_t)"HIDDescriptorSize", (uint64_t)&v15, (id)8))
    return 1;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8((uint64_t)a2, __p);
    v6 = v18 >= 0 ? __p : *(_BYTE **)__p;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Reading HID Data from disk for %{public}s", (uint8_t *)&buf, 0xCu);
    if (v18 < 0)
      operator delete(*(void **)__p);
  }
  v7 = (void *)v15;
  if (v15 > 0x1000)
  {
    v10 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__p = 134217984;
      *(_QWORD *)&__p[4] = v7;
      _os_log_fault_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Reading HID descriptor size %zu which is too large!", __p, 0xCu);
      v7 = (void *)v15;
      if (v15 <= 0x1000)
        goto LABEL_11;
      v10 = qword_1009997E8;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      sub_1006E1320((uint64_t)v7, v10, v11);
    return 1;
  }
LABEL_11:
  bzero(__p, 0x1000uLL);
  v14 = -1;
  v13 = 0;
  v12 = 0;
  if (sub_1003389F8(a1, (uint64_t)a2, (uint64_t)"HIDDescriptor", (uint64_t)__p, v7))
  {
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E12B4((uint64_t *)&v15, v8, v9);
  }
  sub_1003389F8(a1, (uint64_t)a2, (uint64_t)"HIDVendorID", (uint64_t)&v14, (id)2);
  sub_1003389F8(a1, (uint64_t)a2, (uint64_t)"HIDVendorIDSource", (uint64_t)&v13, (id)2);
  sub_1003389F8(a1, (uint64_t)a2, (uint64_t)"HIDProductID", (uint64_t)&v12 + 2, (id)2);
  sub_1003389F8(a1, (uint64_t)a2, (uint64_t)"HIDVersion", (uint64_t)&v12, (id)2);
  sub_10003994C(&buf, __p, v15);
  sub_100444970(a2, (uint64_t)&buf, v14, v13, SHIWORD(v12), v12);
  *(_QWORD *)&buf = &off_100918258;
  if (*((_QWORD *)&buf + 1))
    sub_100056AAC(*((unsigned int **)&buf + 1));
  return 0;
}

void sub_10033C888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12)
{
  if (a12)
    sub_100056AAC(a12);
  _Unwind_Resume(exception_object);
}

BOOL sub_10033C8B4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _BOOL8 result;
  int v5;

  v5 = 0;
  result = sub_10033991C(a1, a2, (uint64_t)"LastSeenTime", &v5);
  if (result)
    return 1;
  *a3 = v5;
  return result;
}

uint64_t sub_10033C900(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  sub_1003399D8(a1, a2, "LastSeenTime", *a3);
  return 0;
}

uint64_t sub_10033C924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"MicMode", a3, (id)4);
}

uint64_t sub_10033C938(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "MicMode", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10033C96C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"DoubleTapAction", a3, (id)4);
}

uint64_t sub_10033C980(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "DoubleTapAction", (uint64_t)&v4, 4);
  return 0;
}

BOOL sub_10033C9B4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_100339D04(a1, a2, (uint64_t)"InEarDetection", a3);
}

uint64_t sub_10033C9C4(uint64_t a1, uint64_t a2, int a3)
{
  void *v6;
  void *v7;

  v6 = objc_autoreleasePoolPush();
  if (a3)
    v7 = &__kCFBooleanTrue;
  else
    v7 = &__kCFBooleanFalse;
  sub_10033A8E0(a1, a2, "InEarDetection", v7);
  objc_autoreleasePoolPop(v6);
  return 0;
}

uint64_t sub_10033CA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"SmartRouteMode", a3, (id)4);
}

uint64_t sub_10033CA44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"SpatialAudio", a3, (id)4);
}

uint64_t sub_10033CA58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"SpatialAudioAllowed", a3, (id)4);
}

uint64_t sub_10033CA6C(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "SpatialAudioAllowed", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10033CAA0(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "SmartRouteMode", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10033CAD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"ListeningMode", a3, (id)4);
}

uint64_t sub_10033CAE8(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "ListeningMode", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10033CB1C(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  int64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int i;
  unint64_t v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v32;
  std::string v33;
  uint64_t v34;
  uint64_t *v35;
  char v36[8];
  uint64_t v37;
  __int16 v38;

  *(_QWORD *)v36 = 0;
  v37 = 0;
  v38 = 0;
  sub_100091C38(a3);
  sub_100091AE8(__p, "");
  v6 = a3[2];
  v7 = a3[1];
  if (v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a3) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a3) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v35 = a3 + 2;
    if (v12)
      v13 = (char *)sub_1002A479C((uint64_t)(a3 + 2), v12);
    else
      v13 = 0;
    v14 = &v13[24 * v9];
    v15 = *(_OWORD *)__p;
    *((_QWORD *)v14 + 2) = v32;
    *(_OWORD *)v14 = v15;
    __p[1] = 0;
    v32 = 0;
    __p[0] = 0;
    v17 = *a3;
    v16 = a3[1];
    if (v16 == *a3)
    {
      v20 = vdupq_n_s64(v16);
      v18 = &v13[24 * v9];
    }
    else
    {
      v18 = &v13[24 * v9];
      do
      {
        v19 = *(_OWORD *)(v16 - 24);
        *((_QWORD *)v18 - 1) = *(_QWORD *)(v16 - 8);
        *(_OWORD *)(v18 - 24) = v19;
        v18 -= 24;
        *(_QWORD *)(v16 - 16) = 0;
        *(_QWORD *)(v16 - 8) = 0;
        *(_QWORD *)(v16 - 24) = 0;
        v16 -= 24;
      }
      while (v16 != v17);
      v20 = *(int64x2_t *)a3;
    }
    v21 = (uint64_t)(v14 + 24);
    *a3 = (uint64_t)v18;
    a3[1] = (uint64_t)(v14 + 24);
    *(int64x2_t *)&v33.__r_.__value_.__r.__words[1] = v20;
    v22 = a3[2];
    a3[2] = (uint64_t)&v13[24 * v12];
    v34 = v22;
    v33.__r_.__value_.__r.__words[0] = v20.i64[0];
    sub_1002A56A4((uint64_t)&v33);
    v23 = SHIBYTE(v32);
    a3[1] = v21;
    if (v23 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v8 = *(_OWORD *)__p;
    *(_QWORD *)(v7 + 16) = v32;
    *(_OWORD *)v7 = v8;
    a3[1] = v7 + 24;
  }
  for (i = 1; ; ++i)
  {
    memset(&v33, 0, sizeof(v33));
    sprintf(v36, "AACPVersionInfo%d", i);
    if (sub_10033881C(a1, a2, v36, &v33))
      break;
    v25 = a3[1];
    if (v25 >= a3[2])
    {
      v27 = sub_1002A553C((char **)a3, (__int128 *)&v33);
    }
    else
    {
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_10003430C((_BYTE *)a3[1], v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
      }
      else
      {
        v26 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
        *(_QWORD *)(v25 + 16) = *((_QWORD *)&v33.__r_.__value_.__l + 2);
        *(_OWORD *)v25 = v26;
      }
      v27 = (char *)(v25 + 24);
      a3[1] = v25 + 24;
    }
    a3[1] = (uint64_t)v27;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  v29 = *a3;
  v28 = a3[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v28 - v29) >> 3) < sub_100449310((uint64_t)a2, 1))
    return 1;
  if (*(char *)(*a3 + 71) < 0)
  {
    if (!*(_QWORD *)(*a3 + 56))
      return 1;
  }
  else if (!*(_BYTE *)(*a3 + 71))
  {
    return 1;
  }
  return 0;
}

void sub_10033CDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033CE3C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  void *v9;
  void *v10[2];
  char v11;
  char v12[8];
  uint64_t v13;
  __int16 v14;

  *(_QWORD *)v12 = 0;
  v13 = 0;
  v14 = 0;
  sub_1004491B4(a2, 2u, v10);
  if (v11 < 0)
  {
    v9 = v10[1];
    operator delete(v10[0]);
    if (v9)
      goto LABEL_3;
  }
  else if (v11)
  {
LABEL_3:
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) >= 2)
    {
      v6 = 1;
      v7 = 24;
      do
      {
        sprintf(v12, "AACPVersionInfo%d", v6);
        sub_10033894C(a1, a2, v12, (uint64_t *)(*a3 + v7));
        ++v6;
        v7 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) > v6);
    }
    return 0;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006E1388();
  return 1;
}

uint64_t sub_10033CF88(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_10033881C(a1, a2, "ANCAssetVersion", a3);
}

uint64_t sub_10033CF98(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10033894C(a1, a2, "ANCAssetVersion", a3);
  return 0;
}

uint64_t sub_10033CFBC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;

  if (sub_1003389F8(a1, (uint64_t)a2, (uint64_t)"CaseInfoMessageVersion", (uint64_t)a3, (id)1))
  {
    v6 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E1438((uint64_t)a2, v6);
    return 1;
  }
  if (*a3 >= 2u)
    v7 = 8;
  else
    v7 = 2;
  if (sub_1003389F8(a1, (uint64_t)a2, (uint64_t)"CaseInfoVersion", (uint64_t)(a3 + 16), (id)v7))
  {
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E13B4((uint64_t)a2, v8);
    return 1;
  }
  sub_1003389F8(a1, (uint64_t)a2, (uint64_t)"CaseInfoVID", (uint64_t)(a3 + 2), (id)2);
  sub_1003389F8(a1, (uint64_t)a2, (uint64_t)"CaseInfoPID", (uint64_t)(a3 + 4), (id)4);
  sub_1003389F8(a1, (uint64_t)a2, (uint64_t)"CaseInfoVIDSource", (uint64_t)(a3 + 8), (id)2);
  sub_1003389F8(a1, (uint64_t)a2, (uint64_t)"CaseInfoColor", (uint64_t)(a3 + 10), (id)1);
  sub_10033881C(a1, a2, "CaseInfoName", (std::string *)(a3 + 32));
  return 0;
}

uint64_t sub_10033D11C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t *v6;
  uint64_t v7;

  v6 = (uint64_t *)(a3 + 32);
  if (*a3 >= 2u)
    v7 = 8;
  else
    v7 = 2;
  sub_100338ADC(a1, a2, "CaseInfoVersion", (uint64_t)(a3 + 16), v7);
  sub_100338ADC(a1, a2, "CaseInfoMessageVersion", (uint64_t)a3, 1);
  sub_100338ADC(a1, a2, "CaseInfoVID", (uint64_t)(a3 + 2), 2);
  sub_100338ADC(a1, a2, "CaseInfoPID", (uint64_t)(a3 + 4), 4);
  sub_100338ADC(a1, a2, "CaseInfoVIDSource", (uint64_t)(a3 + 8), 2);
  sub_100338ADC(a1, a2, "CaseInfoColor", (uint64_t)(a3 + 10), 1);
  sub_10033894C(a1, a2, "CaseInfoName", v6);
  return 0;
}

uint64_t sub_10033D218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"ListeningModeConfigs", a3, (id)4);
}

uint64_t sub_10033D22C(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "ListeningModeConfigs", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10033D260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"SingleClickMode", a3, (id)4);
}

uint64_t sub_10033D274(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "SingleClickMode", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10033D2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"DoubleClickMode", a3, (id)4);
}

uint64_t sub_10033D2BC(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "DoubleClickMode", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10033D2F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"ClickHoldMode", a3, (id)4);
}

uint64_t sub_10033D304(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "ClickHoldMode", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10033D338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"SingleClickInterval", a3, (id)4);
}

uint64_t sub_10033D34C(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "SingleClickInterval", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10033D380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"ClickHoldInterval", a3, (id)4);
}

uint64_t sub_10033D394(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "ClickHoldInterval", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10033D3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"OneBudANCMode", a3, (id)1);
}

uint64_t sub_10033D3DC(uint64_t a1, uint64_t a2, char a3)
{
  char v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "OneBudANCMode", (uint64_t)&v4, 1);
  return 0;
}

uint64_t sub_10033D410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"VolumeSwipeMode", a3, (id)1);
}

uint64_t sub_10033D424(uint64_t a1, uint64_t a2, char a3)
{
  char v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "VolumeSwipeMode", (uint64_t)&v4, 1);
  return 0;
}

uint64_t sub_10033D458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"VolumeSwipeInterval", a3, (id)4);
}

uint64_t sub_10033D46C(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "VolumeSwipeInterval", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10033D4A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"AdaptiveVolumeMode", a3, (id)1);
}

uint64_t sub_10033D4B4(uint64_t a1, uint64_t a2, char a3)
{
  char v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "AdaptiveVolumeMode", (uint64_t)&v4, 1);
  return 0;
}

uint64_t sub_10033D4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"CallManagementConfig", a3, (id)4);
}

uint64_t sub_10033D4FC(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "CallManagementConfig", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10033D530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"AdaptiveControlsProxStatusKey", a3, (id)8);
}

uint64_t sub_10033D544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "AdaptiveControlsProxStatusKey", (uint64_t)&v4, 8);
  return 0;
}

uint64_t sub_10033D578(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unsigned int v11;

  v11 = 0;
  if (sub_10033991C(a1, a2, (uint64_t)"AACPCapabilitiesLength", &v11))
    return 1;
  v7 = (void *)v11;
  if ((int)v11 < 1)
    return 12;
  v8 = *a3;
  v9 = a3[1] - *a3;
  if (v11 != v9)
  {
    v10 = 0;
    if (v11 <= v9)
    {
      if (v11 < v9)
        a3[1] = v8 + v11;
    }
    else
    {
      sub_10033F348(a3, v11 - v9, &v10);
      v8 = *a3;
    }
  }
  return sub_1003389F8(a1, a2, (uint64_t)"AACPCapabilitiesBits", v8, v7);
}

uint64_t sub_10033D634(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _BOOL4 v9;
  uint8_t v11[16];

  v6 = *a3;
  v7 = a3[1];
  if (v7 == *a3)
  {
    v8 = qword_1009997E8;
    v9 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
    LODWORD(v6) = v7;
    if (v9)
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "writeAACPCapabilityBits delete key", v11, 2u);
      v6 = *a3;
      v7 = a3[1];
    }
  }
  sub_1003399D8(a1, a2, "AACPCapabilitiesLength", (v7 - v6));
  sub_100338ADC(a1, a2, "AACPCapabilitiesBits", *a3, a3[1] - *a3);
  return 0;
}

uint64_t sub_10033D700(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  int v15;
  _QWORD v16[2];
  __int128 v17;
  unsigned int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;

  v18 = 0;
  v6 = sub_10033991C(a1, a2, (uint64_t)"AACPCapabilitiesIntegersLength", &v18);
  if (v6)
    return 1;
  v9 = v18;
  if (v18 - 256 < 0xFFFFFF01)
    return 12;
  if (v18 != (uint64_t)(a3[1] - *a3) >> 2)
  {
    *(_DWORD *)buf = 0;
    sub_10033D8D8((uint64_t)a3, v18, buf);
  }
  __chkstk_darwin(v6, v7);
  v10 = (char *)v16 - ((4 * v9 + 15) & 0x7FFFFFFF0);
  bzero(v10, 4 * v9);
  if (sub_1003389F8(a1, a2, (uint64_t)"AACPCapabulitiesIntegers", (uint64_t)v10, (id)(4 * v9)))
    return 1;
  v16[1] = v16;
  v12 = 0;
  v13 = qword_1009997E8;
  v14 = v10 + 3;
  *(_QWORD *)&v11 = 67109376;
  v17 = v11;
  do
  {
    v15 = *(_DWORD *)(v14 - 3);
    *(_DWORD *)(*a3 + 4 * v12) = v15;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = v17;
      v20 = v12;
      v21 = 1024;
      v22 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "readAACPCapabilityIntegers: index %d, value %d", buf, 0xEu);
      v13 = qword_1009997E8;
    }
    v14 += 4;
    ++v12;
  }
  while (v9 != v12);
  return 0;
}

void sub_10033D8D8(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_10033F45C((void **)a1, a2 - v3, a3);
  }
}

uint64_t sub_10033D908(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  int v31;

  v3 = a3[1] - *a3;
  if (v3 > 0x3FC)
    return 3;
  v6 = a2;
  v7 = a1;
  v8 = sub_1003399D8(a1, a2, "AACPCapabilitiesIntegersLength", v3 >> 2);
  v9 = a3[1];
  v10 = v9 - *a3;
  if (v9 == *a3)
  {
    v23 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, (os_log_type_t)v10))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "writeAACPCapabilityIntegers delete key", buf, 2u);
    }
    sub_100338ADC(v7, v6, "AACPCapabulitiesIntegers", 0, 0);
  }
  else
  {
    __chkstk_darwin(v8, v10);
    v12 = (char *)v24 - v11;
    bzero((char *)v24 - v11, v13);
    v15 = *a3;
    v16 = a3[1];
    if (v16 == *a3)
    {
      v22 = 0;
    }
    else
    {
      v24[1] = v24;
      v25 = v7;
      v26 = v6;
      v17 = 0;
      v18 = qword_1009997E8;
      *(_QWORD *)&v14 = 67109376;
      v27 = v14;
      do
      {
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          v19 = *(_DWORD *)(v15 + 4 * v17);
          *(_DWORD *)buf = v27;
          v29 = v17;
          v30 = 1024;
          v31 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "writeAACPCapabilityIntegers: index %d, value %d", buf, 0xEu);
          v18 = qword_1009997E8;
          v15 = *a3;
          v16 = a3[1];
        }
        v20 = v15 + 4 * v17;
        v21 = &v12[(4 * v17)];
        *(_WORD *)v21 = *(_DWORD *)v20;
        v21[2] = *(_WORD *)(v20 + 2);
        v21[3] = *(_BYTE *)(v20 + 3);
        ++v17;
        v22 = v16 - v15;
      }
      while (v17 < (v16 - v15) >> 2);
      v7 = v25;
      v6 = v26;
    }
    sub_100338ADC(v7, v6, "AACPCapabulitiesIntegers", (uint64_t)v12, v22);
  }
  return 0;
}

BOOL sub_10033DB44(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_100339D04(a1, a2, (uint64_t)"SpatialAudioPrefInitialized", a3);
}

uint64_t sub_10033DB54(uint64_t a1, uint64_t a2, int a3)
{
  void *v6;
  void *v7;

  v6 = objc_autoreleasePoolPush();
  if (a3)
    v7 = &__kCFBooleanTrue;
  else
    v7 = &__kCFBooleanFalse;
  sub_10033A8E0(a1, a2, "SpatialAudioPrefInitialized", v7);
  objc_autoreleasePoolPop(v6);
  return 0;
}

uint64_t sub_10033DBC0(uint64_t a1, uint64_t a2, int a3)
{
  void *v6;
  void *v7;

  v6 = objc_autoreleasePoolPush();
  if (a3)
    v7 = &__kCFBooleanTrue;
  else
    v7 = &__kCFBooleanFalse;
  sub_10033A8E0(a1, a2, "GuestMode", v7);
  objc_autoreleasePoolPop(v6);
  return 0;
}

BOOL sub_10033DC2C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_100339D04(a1, a2, (uint64_t)"GuestMode", a3);
}

uint64_t sub_10033DC3C(uint64_t a1, uint64_t a2, int a3)
{
  void *v6;
  void *v7;

  v6 = objc_autoreleasePoolPush();
  if (a3)
    v7 = &__kCFBooleanTrue;
  else
    v7 = &__kCFBooleanFalse;
  sub_10033A8E0(a1, a2, "GuestModeNotInContacts", v7);
  objc_autoreleasePoolPop(v6);
  return 0;
}

BOOL sub_10033DCA8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_100339D04(a1, a2, (uint64_t)"GuestModeNotInContacts", a3);
}

uint64_t sub_10033DCB8(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  sub_1003399D8(a1, a2, "GuestLastSeenTime", *a3);
  return 0;
}

BOOL sub_10033DCDC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _BOOL8 result;
  int v5;

  v5 = 0;
  result = sub_10033991C(a1, a2, (uint64_t)"GuestLastSeenTime", &v5);
  if (result)
    return 1;
  *a3 = v5;
  return result;
}

uint64_t sub_10033DD28(uint64_t a1, uint64_t a2, int a3)
{
  void *v6;
  void *v7;

  v6 = objc_autoreleasePoolPush();
  if (a3)
    v7 = &__kCFBooleanTrue;
  else
    v7 = &__kCFBooleanFalse;
  sub_10033A8E0(a1, a2, "OwnerAutoAggregation", v7);
  objc_autoreleasePoolPop(v6);
  return 0;
}

BOOL sub_10033DD94(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_100339D04(a1, a2, (uint64_t)"OwnerAutoAggregation", a3);
}

uint64_t sub_10033DDA4(uint64_t a1, uint64_t a2, int a3)
{
  void *v6;
  void *v7;

  v6 = objc_autoreleasePoolPush();
  if (a3)
    v7 = &__kCFBooleanTrue;
  else
    v7 = &__kCFBooleanFalse;
  sub_10033A8E0(a1, a2, "OwnerNoMagicPairing", v7);
  objc_autoreleasePoolPop(v6);
  return 0;
}

BOOL sub_10033DE10(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_100339D04(a1, a2, (uint64_t)"OwnerNoMagicPairing", a3);
}

uint64_t sub_10033DE20(uint64_t a1, uint64_t a2, int a3)
{
  void *v6;
  void *v7;

  v6 = objc_autoreleasePoolPush();
  if (a3)
    v7 = &__kCFBooleanTrue;
  else
    v7 = &__kCFBooleanFalse;
  sub_10033A8E0(a1, a2, "GuestPairingMode", v7);
  objc_autoreleasePoolPop(v6);
  return 0;
}

BOOL sub_10033DE8C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return sub_100339D04(a1, a2, (uint64_t)"GuestPairingMode", a3);
}

uint64_t sub_10033DE9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"ColorInfo", a3, (id)4);
}

uint64_t sub_10033DEB0(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "ColorInfo", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10033DEE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"MIDFeatureBits", a3, (id)4);
}

uint64_t sub_10033DEF8(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "MIDFeatureBits", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10033DF2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"DosimetrySensitivity", a3, (id)4);
}

uint64_t sub_10033DF40(uint64_t a1, uint64_t a2, float a3)
{
  float v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "DosimetrySensitivity", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10033DF74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  _OWORD v17[4];
  int v18;

  v18 = 0;
  memset(v17, 0, sizeof(v17));
  if (sub_1003389F8(a1, a2, (uint64_t)"DosimetryVolumeCurve", (uint64_t)v17, (id)0x44))
    return 1;
  v5 = 0;
  v6 = (_QWORD *)(a3 + 16);
  v7 = *(_DWORD **)(a3 + 8);
  do
  {
    if ((unint64_t)v7 >= *v6)
    {
      v9 = *(_DWORD **)a3;
      v10 = ((uint64_t)v7 - *(_QWORD *)a3) >> 2;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 62)
        abort();
      v12 = *v6 - (_QWORD)v9;
      if (v12 >> 1 > v11)
        v11 = v12 >> 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        v14 = (char *)sub_1002B46E0(a3 + 16, v13);
        v9 = *(_DWORD **)a3;
        v7 = *(_DWORD **)(a3 + 8);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[4 * v10];
      *(_DWORD *)v15 = *((_DWORD *)v17 + v5);
      v8 = v15 + 4;
      while (v7 != v9)
      {
        v16 = *--v7;
        *((_DWORD *)v15 - 1) = v16;
        v15 -= 4;
      }
      *(_QWORD *)a3 = v15;
      *(_QWORD *)(a3 + 8) = v8;
      *(_QWORD *)(a3 + 16) = &v14[4 * v13];
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v7 = *((_DWORD *)v17 + v5);
      v8 = v7 + 1;
    }
    *(_QWORD *)(a3 + 8) = v8;
    ++v5;
    v7 = v8;
  }
  while (v5 != 17);
  return 0;
}

uint64_t sub_10033E0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  size_t v10;
  uint64_t v12;

  v5 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  __chkstk_darwin(a1, v6 - *(_QWORD *)a3);
  v8 = (char *)&v12 - v7;
  bzero((char *)&v12 - v7, v9);
  v10 = v6 - (_QWORD)v5;
  if (v10)
    memmove(v8, v5, v10);
  sub_100338ADC(a1, a2, "DosimetryVolumeCurve", (uint64_t)v8, v10);
  return 0;
}

uint64_t sub_10033E1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"EncryptionKeySize", a3, (id)1);
}

uint64_t sub_10033E1CC(uint64_t a1, uint64_t a2, char a3)
{
  char v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "EncryptionKeySize", (uint64_t)&v4, 1);
  return 0;
}

uint64_t sub_10033E200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"EncryptionMode", a3, (id)1);
}

uint64_t sub_10033E214(uint64_t a1, uint64_t a2, char a3)
{
  char v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "EncryptionMode", (uint64_t)&v4, 1);
  return 0;
}

uint64_t sub_10033E248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"LowSecurityStatus", a3, (id)4);
}

uint64_t sub_10033E25C(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "LowSecurityStatus", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10033E290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"HIDDeviceBehavior", a3, (id)4);
}

uint64_t sub_10033E2A4(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "HIDDeviceBehavior", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10033E2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"UserSelectedDeviceType", a3, (id)1);
}

uint64_t sub_10033E2EC(uint64_t a1, uint64_t a2, char a3)
{
  char v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "UserSelectedDeviceType", (uint64_t)&v4, 1);
  return 0;
}

uint64_t sub_10033E320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"CarPlayType", a3, (id)4);
}

uint64_t sub_10033E334(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "CarPlayType", (uint64_t)&v4, 4);
  return 0;
}

void sub_10033E368(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  const char *v6;
  _BYTE *v7;
  _BYTE *v8;
  NSObject *v9;
  _BOOL4 v10;
  NSObject *v11;
  _BOOL4 v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  NSObject *v19;
  _BYTE *v20;
  _BOOL8 v21;
  NSObject *v22;
  _BYTE *v23;
  NSObject *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE buf[12];
  char v31;
  _BYTE __p[12];
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;

  v28 = 0;
  v29 = 0;
  v26 = 0;
  v27 = 0;
  if (sub_10033991C(a1, a2, (uint64_t)"DeviceIdVendorSource", (_DWORD *)&v29 + 1))
  {
    v4 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      return;
    sub_10043E5F8(a2, __p);
    if (v36 >= 0)
      v5 = __p;
    else
      v5 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v5;
    v6 = "Did not read property DID_VID_SOURCE_KEY on device %{public}s";
LABEL_19:
    v9 = v4;
LABEL_20:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v6, buf, 0xCu);
    if (SHIBYTE(v36) < 0)
      operator delete(*(void **)__p);
    return;
  }
  if (sub_10033991C(a1, a2, (uint64_t)"DeviceIdVendor", &v29))
  {
    v4 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      return;
    sub_10043E5F8(a2, __p);
    if (v36 >= 0)
      v7 = __p;
    else
      v7 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v7;
    v6 = "Did not read property DID_VID_KEY on device %{public}s";
    goto LABEL_19;
  }
  if (sub_10033991C(a1, a2, (uint64_t)"DeviceIdProduct", (_DWORD *)&v28 + 1))
  {
    v4 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      return;
    sub_10043E5F8(a2, __p);
    if (v36 >= 0)
      v8 = __p;
    else
      v8 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v8;
    v6 = "Did not read property DID_PID_KEY on device %{public}s";
    goto LABEL_19;
  }
  v10 = sub_10033991C(a1, a2, (uint64_t)"DeviceIdVersion", &v28);
  v11 = qword_1009997E8;
  v12 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if (!v12)
      return;
    sub_10043E5F8(a2, __p);
    if (v36 >= 0)
      v13 = __p;
    else
      v13 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v13;
    v6 = "Did not read property DID_VERSION_KEY on device %{public}s";
    v9 = v11;
    goto LABEL_20;
  }
  if (v12)
  {
    sub_10043E5F8(a2, buf);
    if (v31 >= 0)
      v14 = buf;
    else
      v14 = *(_BYTE **)buf;
    v16 = v29;
    v15 = HIDWORD(v29);
    v18 = v28;
    v17 = HIDWORD(v28);
    *(_DWORD *)__p = 136447234;
    *(_QWORD *)&__p[4] = v14;
    v33 = 1024;
    v34 = HIDWORD(v29);
    v35 = 1024;
    v36 = v29;
    v37 = 1024;
    v38 = HIDWORD(v28);
    v39 = 1024;
    v40 = v28;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "readDID %{public}s deviceId information: vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x", __p, 0x24u);
    if (v31 < 0)
      operator delete(*(void **)buf);
  }
  else
  {
    v16 = v29;
    v15 = HIDWORD(v29);
    v18 = v28;
    v17 = HIDWORD(v28);
  }
  sub_100445BAC(a2, v15, v16, v17, v18);
  if (!sub_10033991C(a1, a2, (uint64_t)"AppleDevFeatures", (_DWORD *)&v27 + 1))
  {
    v19 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v20 = v36 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Did read property APPLE_DEV_FEATURES_KEY on device %{public}s", buf, 0xCu);
      if (SHIBYTE(v36) < 0)
        operator delete(*(void **)__p);
    }
    sub_100445F58(a2, SHIDWORD(v27), 1);
  }
  v21 = sub_10033991C(a1, a2, (uint64_t)"AppleDevFeaturesVersion", &v27);
  if (!v21)
  {
    v22 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v23 = v36 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Did read property APPLE_DEV_FEATURES_VERSION_KEY on device %{public}s", buf, 0xCu);
      if (SHIBYTE(v36) < 0)
        operator delete(*(void **)__p);
    }
    sub_1004463C4(a2, (unsigned __int16)v27);
  }
  if (!sub_10033B0CC(v21, a2, (uint64_t)"AppleDevExtendedFeatures", &v26))
  {
    v24 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, __p);
      v25 = v36 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Did read property APPLE_DEV_EXTENDED_FEATURES_KEY on device %{public}s", buf, 0xCu);
      if (SHIBYTE(v36) < 0)
        operator delete(*(void **)__p);
    }
    sub_100446234(a2, __ROR8__(v26, 32), 1);
  }
}

void sub_10033E894(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  NSObject *v6;
  void **v7;
  NSObject *v8;
  void **v9;
  NSObject *v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t buf[4];
  void **v18;

  v15 = 0;
  v16 = 0;
  v13 = 0;
  v14 = 0;
  if (sub_100444BF0(a2, (_DWORD *)&v16 + 1, &v16, (_DWORD *)&v15 + 1, &v15))
  {
    sub_1003399D8(a1, a2, "DeviceIdVendorSource", HIDWORD(v16));
    sub_1003399D8(a1, a2, "DeviceIdVendor", v16);
    sub_1003399D8(a1, a2, "DeviceIdProduct", HIDWORD(v15));
    sub_1003399D8(a1, a2, "DeviceIdVersion", v15);
    if (sub_1004466D8(a2, (_DWORD *)&v14 + 1))
    {
      sub_1003399D8(a1, a2, "AppleDevFeatures", HIDWORD(v14));
      v4 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v5 = v12 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v18 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Did write APPLE_DEV_FEATURES_KEY info for %{public}s to disk", buf, 0xCu);
        if (v12 < 0)
          operator delete(__p[0]);
      }
    }
    if (sub_100446774(a2, &v14))
    {
      sub_1003399D8(a1, a2, "AppleDevFeaturesVersion", v14);
      v6 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v7 = v12 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v18 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Did write APPLE_DEV_FEATURES_VERSION_KEY info for %{public}s to disk", buf, 0xCu);
        if (v12 < 0)
          operator delete(__p[0]);
      }
    }
    if (sub_100446790(a2, &v13))
    {
      sub_10033B3AC(a1, a2, "AppleDevExtendedFeatures", HIDWORD(v13) | ((unint64_t)v13 << 32));
      v8 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        if (v12 >= 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Did write APPLE_DEV_EXTENDED_FEATURES_KEY info for %{public}s to disk", buf, 0xCu);
        if (v12 < 0)
          operator delete(__p[0]);
      }
    }
  }
  else
  {
    v10 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E14BC(a2, v10);
  }
}

uint64_t sub_10033EBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003389F8(a1, a2, (uint64_t)"GAPAFlags", a3, (id)4);
}

uint64_t sub_10033EBB4(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  sub_100338ADC(a1, a2, "GAPAFlags", (uint64_t)&v4, 4);
  return 0;
}

void sub_10033EBE8(id a1)
{
  operator new();
}

void sub_10033EC28()
{
  operator delete();
}

uint64_t *sub_10033EC4C(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    sub_100004078(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t **sub_10033ED08(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    sub_100004078(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **sub_10033EDC8(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_10001FD34((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          *(_OWORD *)(v8 + 5) = *(_OWORD *)(v9 + 5);
          sub_10033EF30(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = sub_10001FD34((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_1002C6244((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_10033EF9C(v5, (uint64_t)(a2 + 4));
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_10033EF1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002C6244((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10033EF30(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  sub_100004078(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

_OWORD *sub_10033EF9C(uint64_t **a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = operator new(0x38uLL);
  v5 = v4;
  v4[2] = *(_OWORD *)a2;
  *((_QWORD *)v4 + 6) = *(_QWORD *)(a2 + 16);
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (*((_DWORD *)v4 + 8) >= *((_DWORD *)v7 + 8))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  sub_100004078(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v5;
}

uint64_t sub_10033F038(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  sub_10033F08C((_OWORD *)a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_10033F074(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001A82C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_10033F08C(_OWORD *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)result + 1;
    do
    {
      result = sub_10033F110(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      v7 = (unsigned int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *sub_10033F110(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v10 = 0;
  v11 = 0;
  v6 = sub_10033F1A0(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    sub_100004078(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_10033F1A0(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_10033F348(_QWORD *a1, unint64_t a2, _BYTE *a3)
{
  unint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;

  v4 = a2;
  v7 = (_BYTE *)a1[1];
  v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = &v7[-*a1];
    v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0)
      abort();
    v10 = v6 - *a1;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = operator new(v11);
    else
      v12 = 0;
    v14 = &v8[(_QWORD)v12];
    v15 = &v8[(_QWORD)v12 + v4];
    v16 = &v8[(_QWORD)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    v17 = (_BYTE *)*a1;
    if (v7 != (_BYTE *)*a1)
    {
      do
      {
        v18 = *--v7;
        *--v14 = v18;
      }
      while (v7 != v17);
      v7 = (_BYTE *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
      operator delete(v7);
  }
}

void sub_10033F45C(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      abort();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)sub_1002B46E0(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

_QWORD *sub_10033F568(_QWORD *a1)
{
  NSObject *v2;

  *a1 = &off_1009290F0;
  v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  a1[1] = dispatch_queue_create("com.apple.MobileBluetooth.LeDeviceCache", v2);
  return a1;
}

uint64_t sub_10033F5B4(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1009290F0;
  dispatch_release(*(dispatch_object_t *)(a1 + 8));
  return a1;
}

void sub_10033F5E8(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1009290F0;
  dispatch_release(*(dispatch_object_t *)(a1 + 8));
  operator delete();
}

uint64_t sub_10033F62C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10033F6C0;
  block[3] = &unk_100918690;
  block[4] = &v6;
  block[5] = a1;
  block[6] = a2;
  dispatch_sync(v2, block);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_10033F6C0(_QWORD *a1)
{
  uint64_t v2;
  id v3;

  v2 = a1[5];
  v3 = (id)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](LeDeviceCache, "sharedInstance"));
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = objc_msgSend(v3, "initializeDatabases:queue:", a1[6], *(_QWORD *)(v2 + 8));

}

void sub_10033F718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10033F72C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  NSObject *v6;
  id v7;
  uint64_t *v8;
  _QWORD v9[4];
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __n128 (*v15)(__n128 *, __n128 *);
  void (*v16)(uint64_t);
  void *v17;
  _QWORD v18[3];
  void **v19;

  v5 = a2;
  v12 = 0;
  v13 = &v12;
  v14 = 0x4812000000;
  v15 = sub_10006257C;
  v16 = sub_100062370;
  v17 = &unk_10083E079;
  memset(v18, 0, sizeof(v18));
  v6 = *(NSObject **)(a1 + 8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10033F868;
  v9[3] = &unk_100929128;
  v11 = &v12;
  v7 = v5;
  v10 = v7;
  dispatch_sync(v6, v9);
  v8 = v13;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  sub_1002A46F4((char *)a3, (__int128 *)v8[6], (__int128 *)v8[7], 0xAAAAAAAAAAAAAAABLL * ((v8[7] - v8[6]) >> 3));

  _Block_object_dispose(&v12, 8);
  v19 = (void **)v18;
  sub_100091BF8(&v19);

}

void sub_10033F838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  *(_QWORD *)(v9 - 40) = v8;
  sub_100091BF8((void ***)(v9 - 40));

  _Unwind_Resume(a1);
}

void sub_10033F868(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void **v8;

  v2 = objc_autoreleasePoolPush();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](LeDeviceCache, "sharedInstance"));
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "findUUIDsWithCustomProperties:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    v6 = 0uLL;
    v7 = 0;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  sub_10034750C((uint64_t *)(v5 + 48));
  *(_OWORD *)(v5 + 48) = v6;
  *(_QWORD *)(v5 + 64) = v7;
  v7 = 0;
  v6 = 0uLL;
  v8 = (void **)&v6;
  sub_100091BF8(&v8);

  objc_autoreleasePoolPop(v2);
}

void sub_10033F914(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10033F924(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  id v7;
  NSObject *v8;
  id v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v7 = a2;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v8 = *(NSObject **)(a1 + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10033F9E8;
  v12[3] = &unk_100929150;
  v13 = v7;
  v14 = &v17;
  v15 = a3;
  v16 = a4;
  v9 = v7;
  dispatch_sync(v8, v12);
  v10 = v18[3];

  _Block_object_dispose(&v17, 8);
  return v10;
}

void sub_10033F9E8(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = objc_autoreleasePoolPush();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](LeDeviceCache, "sharedInstance"));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v3, "loadPairedDevice:address:ifMissing:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));

  objc_autoreleasePoolPop(v2);
}

void sub_10033FA4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10033FA5C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  _QWORD block[4];
  id v9;
  uint64_t v10;

  v5 = a3;
  v6 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10033FADC;
  block[3] = &unk_100918868;
  v9 = v5;
  v10 = a2;
  v7 = v5;
  dispatch_sync(v6, block);

}

void sub_10033FADC(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = objc_autoreleasePoolPush();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](LeDeviceCache, "sharedInstance"));
  objc_msgSend(v3, "removeDevicesDuplicatesOf:originalUuid:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));

  objc_autoreleasePoolPop(v2);
}

void sub_10033FB2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10033FB3C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  _QWORD block[4];
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;

  v5 = a2;
  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  v6 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10033FBF0;
  block[3] = &unk_100929178;
  v12 = &v14;
  v13 = a3;
  v11 = v5;
  v7 = v5;
  dispatch_sync(v6, block);
  v8 = *((unsigned int *)v15 + 6);

  _Block_object_dispose(&v14, 8);
  return v8;
}

void sub_10033FBF0(_QWORD *a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](LeDeviceCache, "sharedInstance"));
  *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = objc_msgSend(v2, "duplicatePairedDevicesForAddress:originalUuid:", a1[6], a1[4]);

}

void sub_10033FC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10033FC58(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  _QWORD block[5];

  if (!*a2 && os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
    sub_1006E1540();
  v4 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10033FCF4;
  block[3] = &unk_100917378;
  block[4] = a2;
  dispatch_sync(v4, block);
}

void sub_10033FCF4(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](LeDeviceCache, "sharedInstance"));
  objc_msgSend(v2, "writeDevice:", *(_QWORD *)(a1 + 32));

}

void sub_10033FD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10033FD4C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10033FDA0;
  block[3] = &unk_100917378;
  block[4] = a2;
  dispatch_sync(v2, block);
}

void sub_10033FDA0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](LeDeviceCache, "sharedInstance"));
  objc_msgSend(v2, "removeDevice:internal:", *(_QWORD *)(a1 + 32), 0);

}

void sub_10033FDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10033FDFC(uint64_t a1)
{
  dispatch_sync(*(dispatch_queue_t *)(a1 + 8), &stru_100929198);
}

void sub_10033FE0C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](LeDeviceCache, "sharedInstance"));
  objc_msgSend(v1, "clearAllDatabases");

}

void sub_10033FE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10033FE5C(uint64_t a1)
{
  dispatch_sync(*(dispatch_queue_t *)(a1 + 8), &stru_1009291B8);
}

void sub_10033FE6C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[LeDeviceCache sharedInstance](LeDeviceCache, "sharedInstance"));
  objc_msgSend(v1, "printDebug");

}

void sub_10033FEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10033FEBC(id a1)
{
  LeDeviceCache *v1;
  void *v2;

  if (!qword_100991E40)
  {
    v1 = objc_alloc_init(LeDeviceCache);
    v2 = (void *)qword_100991E40;
    qword_100991E40 = (uint64_t)v1;

  }
}

void sub_100340178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  if (a14 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);

  _Unwind_Resume(a1);
}

void sub_1003403B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100340674(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100340B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  _Unwind_Resume(exception_object);
}

void sub_100340BE0(uint64_t a1)
{
  NSObject *v2;
  id *v3;
  id v4;
  _QWORD *v5;
  NSObject *v6;
  NSObject *v7;
  _DWORD v8[2];

  v2 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = MKBDeviceUnlockedSinceBoot();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received MKB first unlock notification. MKBDeviceUnlockedSinceBoot returns : %d", (uint8_t *)v8, 8u);
  }
  if (MKBDeviceUnlockedSinceBoot() != 1
    && os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
  {
    sub_1006E1744();
  }
  v5 = *(_QWORD **)(a1 + 32);
  v3 = (id *)(a1 + 32);
  v4 = v5;
  if (!v5[3])
  {
    v6 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received first unlock notification - loading protected cache", (uint8_t *)v8, 2u);
      v4 = *v3;
    }
    if ((objc_msgSend(v4, "loadDatabase:", 1) & 1) != 0)
    {
      objc_msgSend(*v3, "updateProtectedCacheMetrics");
    }
    else
    {
      v7 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
        sub_1006E16C4(v3, v7);
    }
  }
}

void sub_100340E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100341184(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1003416E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1003418D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100341F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1003424A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100343574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  void *v38;

  _Unwind_Resume(a1);
}

void sub_10034396C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100344324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_100344658(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100344898(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
}

void sub_100344950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100344DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;

  if (a17 < 0)
    operator delete(__p);

  sub_100091BF8((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_100345354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;

  if (a17 < 0)
    operator delete(__p);

  sub_100091BF8((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_100345650(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1003458DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_100345AD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_100345D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_100346074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10034630C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100346548(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10034663C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100346724(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_100346BF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100347438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30)
{
  void *v30;

  _Unwind_Resume(a1);
}

void sub_10034750C(uint64_t *a1)
{
  if (*a1)
  {
    sub_100091C38(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_100347544(id a1)
{
  operator new();
}

void sub_10034765C()
{
  operator delete();
}

void sub_100347688(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_fault_impl(a1, a4, OS_LOG_TYPE_FAULT, a2, a3, 0x16u);
}

uint64_t sub_100347698(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2080;
  *(_QWORD *)(a3 + 14) = a2;
  return result;
}

void sub_1003476BC()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  qword_1009993F0 = objc_opt_class(NSString);
  qword_1009993F8 = objc_opt_class(NSString);
  qword_100999400 = objc_opt_class(NSNumber);
  qword_100999408 = objc_opt_class(NSString);
  qword_100999410 = objc_opt_class(NSString);
  qword_100999418 = objc_opt_class(NSNumber);
  qword_100999420 = objc_opt_class(NSNumber);
  qword_100999428 = objc_opt_class(NSNumber);
  qword_100999430 = objc_opt_class(NSString);
  qword_100999438 = objc_opt_class(NSString);
  objc_autoreleasePoolPop(v0);
}

_QWORD *sub_100347770(_QWORD *a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t i;
  void *__p[2];
  char v8;
  uint64_t v9;
  _QWORD *v10[3];
  void *__dst[2];
  uint64_t v12;
  void **v13;

  *a1 = off_100929228;
  a1[1] = a2;
  a1[2] = off_100929298;
  a1[3] = 0;
  a1[7] = 0;
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = a1 + 7;
  v3 = (uint64_t **)(a1 + 6);
  v4 = (uint64_t)(a1 + 9);
  a1[8] = 0;
  sub_10026C3D0((_DWORD)a1 + 72, (_DWORD)a1 + 16, "com.apple.BTServer.map", 0);
  for (i = qword_1009997B8; (_UNKNOWN *)i != &unk_1009997B0; i = *(_QWORD *)(i + 8))
  {
    __dst[0] = 0;
    __dst[1] = 0;
    v12 = 0;
    if (*(char *)(i + 39) < 0)
    {
      sub_10003430C(__dst, *(void **)(i + 16), *(_QWORD *)(i + 24));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(i + 16);
      v12 = *(_QWORD *)(i + 32);
    }
    memset(v10, 0, sizeof(v10));
    sub_100349444(__p, (__int128 *)__dst, v10);
    sub_10034A184(v3, (const void **)__p, (uint64_t)__p);
    v13 = (void **)&v9;
    sub_100349FC0(&v13);
    if (v8 < 0)
      operator delete(__p[0]);
    __p[0] = v10;
    sub_100349FC0((void ***)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__dst[0]);
  }
  sub_10026C40C(v4);
  sub_100347990((uint64_t)a1);
  return a1;
}

void sub_1003478D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  _QWORD **v25;

  sub_10034A0F8(v24, *v25);
  sub_10034A030((void ***)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100347948(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  sub_100349FC0(&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100347990(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[5];

  v2 = a1 + 72;
  sub_10026C614(a1 + 72, "kStart", 0, 0);
  v3 = sub_100038E50();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 432))(v3) & 1) == 0)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10034812C;
    v4[3] = &unk_1009203A0;
    v4[4] = a1;
    sub_10026C724(v2, "kGetImCoreInitialMessages", 0, v4);
  }
}

void sub_100347A30(uint64_t a1)
{
  _QWORD v1[5];

  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_100347A88;
  v1[3] = &unk_100917378;
  v1[4] = a1;
  sub_10026C4B8(a1 + 72, v1);
}

uint64_t sub_100347A88(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  return result;
}

size_t sub_100347AA0(uint64_t a1, char *a2)
{
  tm *v3;
  time_t v5;

  v5 = time(0);
  v3 = localtime(&v5);
  return strftime(a2, 0x10uLL, "%Y%m%dT%H%M%S", v3);
}

void sub_100347AF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  xpc_object_t v5;
  void *v6;
  const char *p_string;
  const char *v8;
  void **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *string;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v17;

  __p[0] = 0;
  __p[1] = 0;
  v17 = 0;
  v4 = *a2;
  if (*(char *)(*a2 + 111) < 0)
  {
    sub_10003430C(__p, *(void **)(v4 + 88), *(_QWORD *)(v4 + 96));
    v4 = *a2;
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v4 + 88);
    v17 = *(_QWORD *)(v4 + 104);
  }
  string = 0;
  v14 = 0;
  v15 = 0;
  sub_100347CAC(v4, (uint64_t)&string);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_1003496AC((_QWORD *)(*a2 + 136), 0, &v10);
  v5 = xpc_dictionary_create(0, 0, 0);
  v6 = v5;
  if (SHIBYTE(v15) < 0)
  {
    if (!v14)
      goto LABEL_10;
    p_string = string;
  }
  else
  {
    if (!HIBYTE(v15))
      goto LABEL_10;
    p_string = (const char *)&string;
  }
  xpc_dictionary_set_string(v5, "kRecipientPhoneNumber", p_string);
LABEL_10:
  if (SHIBYTE(v12) < 0)
  {
    if (!v11)
      goto LABEL_16;
    v8 = v10;
  }
  else
  {
    if (!HIBYTE(v12))
      goto LABEL_16;
    v8 = (const char *)&v10;
  }
  xpc_dictionary_set_string(v6, "kRecipientEmail", v8);
LABEL_16:
  if (v17 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  xpc_dictionary_set_string(v6, "kBody", (const char *)v9);
  sub_10026C614(a1 + 72, "kSendTextMessage", v6, 0);
  if (SHIBYTE(v12) < 0)
    operator delete(v10);
  if (SHIBYTE(v15) < 0)
    operator delete(string);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
}

void sub_100347C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void sub_100347CAC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v3[2];
  uint64_t v4;
  void *__p;
  char v6;

  sub_1003495B0((_QWORD *)(a1 + 136), 0, (uint64_t)v3);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_QWORD *)(a2 + 16) = v4;
  v3[1] = 0;
  v4 = 0;
  v3[0] = 0;
  if (v6 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v4) < 0)
      operator delete(v3[0]);
  }
}

void sub_100347D18(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::string __p;

  *a3 = 0;
  a3[1] = 0;
  if (*(char *)(a2 + 23) < 0)
    sub_10003430C(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  sub_100347DAC(a1, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100347D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100347DAC(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const std::string *v20;
  void **v21;

  v18 = 0;
  v19 = 0;
  v4 = *(_QWORD **)(a1 + 48);
  v5 = (_QWORD *)(a1 + 56);
  if (v4 == (_QWORD *)(a1 + 56))
  {
LABEL_13:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    while (1)
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      sub_1003494CC((char *)&v15, (_QWORD *)v4[7], (_QWORD *)v4[8], (uint64_t)(v4[8] - v4[7]) >> 4);
      v7 = v15;
      v8 = v16;
      v20 = a2;
      if (v15 != v16)
      {
        while (!sub_10034970C(&v20, v7))
        {
          v7 += 2;
          if (v7 == v8)
          {
            v7 = v8;
            break;
          }
        }
        if (v7 != v16)
          break;
      }
      v21 = (void **)&v15;
      sub_100349FC0(&v21);
      v9 = (_QWORD *)v4[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v4[2];
          v11 = *v10 == (_QWORD)v4;
          v4 = v10;
        }
        while (!v11);
      }
      v4 = v10;
      if (v10 == v5)
        goto LABEL_13;
    }
    *a3 = *v7;
    v12 = v7[1];
    a3[1] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v21 = (void **)&v15;
    sub_100349FC0(&v21);
  }
}

void sub_100347EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10009F88C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100347F0C(uint64_t a1, uint64_t *a2)
{
  uint64_t **v2;
  uint64_t v4;
  __int128 v5;
  NSObject *v6;
  xpc_object_t v7;
  void *v8;
  uint8_t *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string __p;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint8_t buf[16];
  uint64_t v17;

  v2 = (uint64_t **)a2;
  v14 = 0;
  v15 = 0;
  if (*((char *)a2 + 23) < 0)
    sub_10003430C(&__p, (void *)*a2, a2[1]);
  else
    __p = *(std::string *)a2;
  sub_100347DAC(a1, &__p, &v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v4 = v14;
  if (v14)
  {
    *(_BYTE *)(v14 + 122) = 1;
    memset(buf, 0, sizeof(buf));
    v17 = 0;
    if (*(char *)(v4 + 31) < 0)
    {
      sub_10003430C(buf, *(void **)(v4 + 8), *(_QWORD *)(v4 + 16));
    }
    else
    {
      v5 = *(_OWORD *)(v4 + 8);
      v17 = *(_QWORD *)(v4 + 24);
      *(_OWORD *)buf = v5;
    }
    v7 = xpc_dictionary_create(0, 0, 0);
    v8 = v7;
    if (v17 >= 0)
      v9 = buf;
    else
      v9 = *(uint8_t **)buf;
    xpc_dictionary_set_string(v7, "kMessageGUID", (const char *)v9);
    sub_10026C614(a1 + 72, "kMarkMessageRead", v8, 0);
    if (SHIBYTE(v17) < 0)
      operator delete(*(void **)buf);
  }
  else
  {
    v6 = qword_1009999B8;
    if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v2 + 23) < 0)
        v2 = (uint64_t **)*v2;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Could not mark message %s{public} read, guid does not exist", buf, 0xCu);
    }
  }
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1003480E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_10009F88C((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_10034812C(uint64_t a1, xpc_object_t xdict)
{
  _QWORD *v2;
  xpc_object_t value;
  void *v4;
  void *__p[2];
  char v6;

  v2 = *(_QWORD **)(a1 + 32);
  value = xpc_dictionary_get_value(xdict, "kMsgArgs");
  if (value)
  {
    v4 = value;
    sub_100091AE8(__p, "inbox");
    sub_1003481BC(v2, v4, (unsigned __int8 *)__p, 0);
    if (v6 < 0)
      operator delete(__p[0]);
  }
}

void sub_1003481A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1003481BC(_QWORD *a1, xpc_object_t xdict, unsigned __int8 *a3, int a4)
{
  xpc_object_t value;
  void *v8;
  uint64_t *v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  std::string *v23;
  __int128 v24;
  void **v25;
  int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  int v29;
  int v30;
  _DWORD *v32;
  int v33;
  unsigned __int16 *v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  void (***v50)(_QWORD, uint64_t *);
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  std::string v59;
  void *v60[2];
  char v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  void *__dst[2];
  uint64_t v67;
  std::string v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *__p[2];
  uint64_t v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  _QWORD applier[5];
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  __n128 (*v79)(__n128 *, __n128 *);
  void (*v80)(uint64_t);
  void *v81;
  _QWORD v82[3];
  _BYTE buf[12];
  __int16 v84;
  std::string *v85;
  __int16 v86;
  void **v87;

  value = xpc_dictionary_get_value(xdict, "kMessagesInfo");
  if (value)
  {
    v8 = value;
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
    {
      v76 = 0;
      v77 = &v76;
      v78 = 0x4812000000;
      v79 = sub_1000625A0;
      v80 = sub_100062398;
      v81 = &unk_10083E079;
      memset(v82, 0, sizeof(v82));
      applier[0] = _NSConcreteStackBlock;
      applier[1] = 3221225472;
      applier[2] = sub_100348838;
      applier[3] = &unk_1009292B8;
      applier[4] = &v76;
      xpc_array_apply(v8, applier);
      v10 = (uint64_t *)v77[6];
      v9 = (uint64_t *)v77[7];
      while (v10 != v9)
      {
        v12 = *v10;
        v11 = (std::__shared_weak_count *)v10[1];
        v73 = *v10;
        v74 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        if ((char)a3[23] < 0)
        {
          sub_10003430C(__p, *(void **)a3, *((_QWORD *)a3 + 1));
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)a3;
          v72 = *((_QWORD *)a3 + 2);
        }
        v69 = v12;
        v70 = v11;
        if (v11)
        {
          v15 = (unint64_t *)&v11->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        (*(void (**)(_QWORD *, void **, uint64_t *))(*a1 + 56))(a1, __p, &v69);
        v17 = v70;
        if (v70)
        {
          v18 = (unint64_t *)&v70->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        if (SHIBYTE(v72) < 0)
          operator delete(__p[0]);
        v20 = qword_1009999B8;
        if (!os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
          goto LABEL_34;
        v21 = a3;
        if ((char)a3[23] < 0)
          v21 = *(void **)a3;
        v22 = v73;
        sub_1003489E8(v73, &v68);
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &v68;
        else
          v23 = (std::string *)v68.__r_.__value_.__r.__words[0];
        if (*(char *)(v22 + 31) < 0)
        {
          sub_10003430C(__dst, *(void **)(v22 + 8), *(_QWORD *)(v22 + 16));
        }
        else
        {
          v24 = *(_OWORD *)(v22 + 8);
          v67 = *(_QWORD *)(v22 + 24);
          *(_OWORD *)__dst = v24;
        }
        v25 = __dst;
        if (v67 < 0)
          v25 = (void **)__dst[0];
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v21;
        v84 = 2080;
        v85 = v23;
        v86 = 2080;
        v87 = v25;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Inserting record into %s with shortGUID %s and messageGUID %s", buf, 0x20u);
        if (SHIBYTE(v67) < 0)
          operator delete(__dst[0]);
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v68.__r_.__value_.__l.__data_);
          if (!a4)
            goto LABEL_90;
        }
        else
        {
LABEL_34:
          if (!a4)
            goto LABEL_90;
        }
        v26 = a3[23];
        if ((char)a3[23] < 0)
        {
          v28 = *((_QWORD *)a3 + 1);
          if (v28 != 5)
            goto LABEL_53;
          v27 = *(unsigned __int8 **)a3;
        }
        else
        {
          v27 = a3;
          if (v26 != 5)
            goto LABEL_45;
        }
        v29 = *(_DWORD *)v27;
        v30 = v27[4];
        if (v29 == 1868721769 && v30 == 120)
        {
          v35 = sub_100038E50();
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 432))(v35))
          {
            v50 = (void (***)(_QWORD, uint64_t *))a1[1];
            v64 = v73;
            v65 = v74;
            if (v74)
            {
              v51 = (unint64_t *)&v74->__shared_owners_;
              do
                v52 = __ldxr(v51);
              while (__stxr(v52 + 1, v51));
            }
            (**v50)(v50, &v64);
            v43 = v65;
            if (!v65)
              goto LABEL_90;
            v53 = (unint64_t *)&v65->__shared_owners_;
            do
              v45 = __ldaxr(v53);
            while (__stlxr(v45 - 1, v53));
            goto LABEL_88;
          }
          v26 = a3[23];
          if ((v26 & 0x80) == 0)
          {
LABEL_45:
            v32 = a3;
            if (v26 == 4)
              goto LABEL_63;
            if (v26 != 6)
              goto LABEL_90;
            v33 = 0;
            v34 = (unsigned __int16 *)a3;
            goto LABEL_55;
          }
        }
        else if ((v26 & 0x80) == 0)
        {
          goto LABEL_45;
        }
        v28 = *((_QWORD *)a3 + 1);
LABEL_53:
        if (v28 != 6)
          goto LABEL_61;
        v34 = *(unsigned __int16 **)a3;
        v33 = 1;
LABEL_55:
        v36 = *(_DWORD *)v34;
        v37 = v34[2];
        if (v36 == 1651799407 && v37 == 30831)
        {
          v46 = a1[1];
          v62 = v73;
          v63 = v74;
          if (v74)
          {
            v47 = (unint64_t *)&v74->__shared_owners_;
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
          }
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v46 + 8))(v46, &v62, 1);
          v43 = v63;
          if (!v63)
            goto LABEL_90;
          v49 = (unint64_t *)&v63->__shared_owners_;
          do
            v45 = __ldaxr(v49);
          while (__stlxr(v45 - 1, v49));
          goto LABEL_88;
        }
        if (!v33)
          goto LABEL_90;
        v28 = *((_QWORD *)a3 + 1);
LABEL_61:
        if (v28 == 4)
        {
          v32 = *(_DWORD **)a3;
LABEL_63:
          if (*v32 != 1953391987)
            goto LABEL_90;
          sub_100091AE8(v60, "outbox");
          v39 = v73;
          sub_1003489E8(v73, &v59);
          sub_100348B7C((uint64_t)a1, (const void **)v60, (uint64_t **)&v59);
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v59.__r_.__value_.__l.__data_);
          if (v61 < 0)
            operator delete(v60[0]);
          v40 = a1[1];
          v57 = v39;
          v58 = v74;
          if (v74)
          {
            v41 = (unint64_t *)&v74->__shared_owners_;
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
          }
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v40 + 16))(v40, &v57);
          v43 = v58;
          if (!v58)
            goto LABEL_90;
          v44 = (unint64_t *)&v58->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
LABEL_88:
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
LABEL_90:
        v54 = v74;
        if (v74)
        {
          v55 = (unint64_t *)&v74->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v10 += 2;
      }
      _Block_object_dispose(&v76, 8);
      *(_QWORD *)buf = v82;
      sub_100349FC0((void ***)buf);
    }
  }
}

void sub_100348774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,char a49)
{
  uint64_t v49;

  sub_10009F88C((uint64_t)&a29);
  sub_10009F88C((uint64_t)&a49);
  _Block_object_dispose((const void *)(v49 - 216), 8);
  *(_QWORD *)(v49 - 144) = a10;
  sub_100349FC0((void ***)(v49 - 144));
  _Unwind_Resume(a1);
}

void sub_100348838()
{
  operator new();
}

void sub_1003489B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10009F88C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1003489E8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  const std::string *v3;
  std::string *v4;
  std::string::size_type size;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string v11;
  std::string v12;
  std::string v13;
  std::string v14;
  char v15;

  v3 = (const std::string *)(a1 + 8);
  std::string::basic_string(&v13, (const std::string *)(a1 + 8), 0, 8uLL, (std::allocator<char> *)&v12);
  std::string::basic_string(&v12, v3, 9uLL, 4uLL, (std::allocator<char> *)&v11);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v12;
  else
    v4 = (std::string *)v12.__r_.__value_.__r.__words[0];
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  else
    size = v12.__r_.__value_.__l.__size_;
  v6 = std::string::append(&v13, (const std::string::value_type *)v4, size);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string(&v11, v3, 0xEuLL, 3uLL, (std::allocator<char> *)&v15);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v11;
  else
    v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  else
    v9 = v11.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v14, (const std::string::value_type *)v8, v9);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_100348B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void sub_100348B7C(uint64_t a1, const void **a2, uint64_t **a3)
{
  const void **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  _BYTE v14[12];
  __int16 v15;
  const void **v16;

  v4 = a2;
  v5 = (uint64_t *)sub_10034983C(a1 + 48, a2);
  v6 = *v5;
  v7 = v5[1];
  *(_QWORD *)v14 = a3;
  if (v6 == v7)
    goto LABEL_19;
  v8 = v5;
  while (!sub_100349874((const std::string **)v14, (uint64_t *)v6))
  {
    v6 += 16;
    if (v6 == v7)
    {
      v6 = v7;
      break;
    }
  }
  v9 = v8[1];
  if (v6 == v9)
  {
LABEL_19:
    v13 = qword_1009999B8;
    if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a3 + 23) < 0)
        a3 = (uint64_t **)*a3;
      if (*((char *)v4 + 23) < 0)
        v4 = (const void **)*v4;
      *(_DWORD *)v14 = 136315394;
      *(_QWORD *)&v14[4] = a3;
      v15 = 2080;
      v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Deletion Failure on short GUID %s from folder %s", v14, 0x16u);
    }
  }
  else
  {
    v10 = qword_1009999B8;
    if (os_log_type_enabled((os_log_t)qword_1009999B8, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a3 + 23) < 0)
        a3 = (uint64_t **)*a3;
      if (*((char *)v4 + 23) < 0)
        v4 = (const void **)*v4;
      *(_DWORD *)v14 = 136315394;
      *(_QWORD *)&v14[4] = a3;
      v15 = 2080;
      v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Deletion Success on short GUID %s from folder %s", v14, 0x16u);
      v9 = v8[1];
    }
    if (v6 + 16 != v9)
    {
      do
      {
        v11 = v6 + 16;
        sub_100274874(v6, (__int128 *)(v6 + 16));
        v12 = v6 + 32;
        v6 += 16;
      }
      while (v12 != v9);
      v9 = v8[1];
      v6 = v11;
    }
    while (v9 != v6)
    {
      v9 -= 16;
      sub_10009F88C(v9);
    }
    v8[1] = v6;
  }
}

void sub_100348D68(uint64_t a1, char *a2, xpc_object_t object)
{
  uint64_t v6;
  _QWORD v7[5];
  __int128 __p;
  uint64_t v9;
  xpc_object_t v10;
  __int128 v11;
  uint64_t v12;

  xpc_retain(object);
  v11 = 0uLL;
  v12 = 0;
  sub_100091AE8(&v11, a2);
  if (qword_10097AD80 != -1)
    dispatch_once(&qword_10097AD80, &stru_100929340);
  v6 = qword_10097AD78;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  v7[2] = sub_100348EA8;
  v7[3] = &unk_1009292D8;
  v7[4] = a1;
  if (SHIBYTE(v12) < 0)
  {
    sub_10003430C(&__p, (void *)v11, *((unint64_t *)&v11 + 1));
  }
  else
  {
    __p = v11;
    v9 = v12;
  }
  v10 = object;
  sub_10048D538(v6, v7);
  if (SHIBYTE(v9) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v12) < 0)
    operator delete((void *)v11);
}

void sub_100348E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (*(char *)(v19 - 33) < 0)
    operator delete(*(void **)(v19 - 56));
  _Unwind_Resume(exception_object);
}

void sub_100348EA8(uint64_t a1)
{
  _QWORD *v2;
  _DWORD *v3;
  int v4;
  BOOL v5;
  uint64_t v7;
  uint64_t v11;
  int v12;
  void *v14;
  void **v15;
  void *v17;
  void *v18;
  _QWORD v19[2];
  char v20;
  _QWORD v21[2];
  char v22;
  _QWORD v23[2];
  char v24;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (_DWORD *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
  {
    v7 = *(_QWORD *)(a1 + 48);
    if (v7 == 13 && **(_QWORD **)v3 == 0x6567617373654D6BLL && *(_QWORD *)(*(_QWORD *)v3 + 5) == 0x6465646441656761)
      goto LABEL_41;
    if (v7 == 19)
    {
      if (**(_QWORD **)v3 == 0x676E69646E65506BLL
        && *(_QWORD *)(*(_QWORD *)v3 + 8) == 0x7373654D646E6553
        && *(_QWORD *)(*(_QWORD *)v3 + 11) == 0x6567617373654D64)
      {
LABEL_43:
        v18 = *(void **)(a1 + 64);
        sub_100091AE8(v21, "outbox");
        sub_1003481BC(v2, v18, (unsigned __int8 *)v21, 1);
        if ((v22 & 0x80000000) == 0)
          goto LABEL_46;
        v15 = (void **)v21;
        goto LABEL_45;
      }
      v7 = *(_QWORD *)(a1 + 48);
    }
    if (v7 != 12)
      goto LABEL_46;
    v3 = *(_DWORD **)v3;
LABEL_29:
    v11 = *(_QWORD *)v3;
    v12 = v3[2];
    if (v11 == 0x6567617373654D6BLL && v12 == 1953391955)
    {
      v14 = *(void **)(a1 + 64);
      sub_100091AE8(v19, "sent");
      sub_1003481BC(v2, v14, (unsigned __int8 *)v19, 1);
      if (v20 < 0)
      {
        v15 = (void **)v19;
        goto LABEL_45;
      }
    }
    goto LABEL_46;
  }
  v4 = *(unsigned __int8 *)(a1 + 63);
  if (v4 == 12)
    goto LABEL_29;
  if (v4 != 13)
  {
    if (v4 != 19)
      goto LABEL_46;
    v5 = *(_QWORD *)v3 == 0x676E69646E65506BLL && *(_QWORD *)(a1 + 48) == 0x7373654D646E6553;
    if (!v5 || *(_QWORD *)(a1 + 51) != 0x6567617373654D64)
      goto LABEL_46;
    goto LABEL_43;
  }
  if (*(_QWORD *)v3 == 0x6567617373654D6BLL && *(_QWORD *)(a1 + 45) == 0x6465646441656761)
  {
LABEL_41:
    v17 = *(void **)(a1 + 64);
    sub_100091AE8(v23, "inbox");
    sub_1003481BC(v2, v17, (unsigned __int8 *)v23, 1);
    if ((v24 & 0x80000000) == 0)
      goto LABEL_46;
    v15 = (void **)v23;
LABEL_45:
    operator delete(*v15);
  }
LABEL_46:
  xpc_release(*(xpc_object_t *)(a1 + 64));
}

void sub_100349118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100349160(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
    return sub_10003430C(result, *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  v3 = *(_OWORD *)(a2 + 40);
  result[2] = *(_QWORD *)(a2 + 56);
  *(_OWORD *)result = v3;
  return result;
}

void sub_100349190(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void sub_1003491A4(uint64_t a1, char *a2, void *a3)
{
  sub_100348D68(a1 - 16, a2, a3);
}

void sub_1003491B0(uint64_t a1)
{
  sub_100347990(a1 - 16);
}

void sub_1003491B8(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  void *__p[2];
  uint64_t v6;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v6 = *(_QWORD *)(a2 + 16);
  }
  sub_100349978(a1, (const void **)__p, a3);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_10034922C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100349248(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  uint64_t v5;
  void *v6[2];
  char v7;
  void *v8[2];
  char v9;

  sub_100091AE8(v8, "inbox");
  sub_100091AE8(v6, "deleted");
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
  }
  sub_100349D64(a1, (uint64_t)v8, (uint64_t)v6, (uint64_t)__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1003492FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_100349348(uint64_t a1, const void **a2, __int128 *a3)
{
  char **v4;

  v4 = (char **)sub_10034983C(a1 + 48, a2);
  return sub_100349BDC(v4, a3);
}

uint64_t sub_100349370(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_100929228;
  *(_QWORD *)(a1 + 16) = off_100929298;
  sub_10026C408(a1 + 72);
  sub_10034A0F8(a1 + 48, *(_QWORD **)(a1 + 56));
  v3 = (void **)(a1 + 24);
  sub_10034A030(&v3);
  return a1;
}

void sub_1003493D0(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_100929228;
  *(_QWORD *)(a1 + 16) = off_100929298;
  sub_10026C408(a1 + 72);
  sub_10034A0F8(a1 + 48, *(_QWORD **)(a1 + 56));
  v2 = (void **)(a1 + 24);
  sub_10034A030(&v2);
  operator delete();
}

_BYTE *sub_100349444(_BYTE *__dst, __int128 *a2, _QWORD **a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  *((_QWORD *)__dst + 3) = 0;
  *((_QWORD *)__dst + 4) = 0;
  *((_QWORD *)__dst + 5) = 0;
  sub_1003494CC(__dst + 24, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return __dst;
}

void sub_1003494B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_1003494CC(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = sub_100349540(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = a2[1];
      *v7 = *a2;
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

char *sub_100349540(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    abort();
  result = (char *)sub_10034957C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *sub_10034957C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_10007ABD4();
  return operator new(16 * a2);
}

_QWORD *sub_1003495B0@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;

  v4 = result[29];
  if (0x6DB6DB6DB6DB6DB7 * ((result[30] - v4) >> 3) <= a2)
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 0;
  }
  else
  {
    v6 = (__int128 *)(v4 + 56 * a2);
    if (*((char *)v6 + 23) < 0)
    {
      sub_10003430C((_BYTE *)a3, *(void **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)a3 = v7;
    }
    v8 = v4 + 56 * a2;
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(v8 + 24);
    result = (_QWORD *)(a3 + 32);
    v9 = (__int128 *)(v8 + 32);
    if (*((char *)v6 + 55) < 0)
    {
      return sub_10003430C(result, *(void **)v9, *(_QWORD *)(v4 + 56 * a2 + 40));
    }
    else
    {
      v10 = *v9;
      *(_QWORD *)(a3 + 48) = *((_QWORD *)v9 + 2);
      *(_OWORD *)result = v10;
    }
  }
  return result;
}

void sub_100349690(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1003496AC@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  __int128 *v4;
  __int128 v5;

  v3 = result[35];
  if (0xAAAAAAAAAAAAAAABLL * ((result[36] - v3) >> 3) <= a2)
    return sub_100091AE8(a3, "");
  v4 = (__int128 *)(v3 + 24 * a2);
  if (*((char *)v4 + 23) < 0)
    return sub_10003430C(a3, *(void **)v4, *((_QWORD *)v4 + 1));
  v5 = *v4;
  a3[2] = *((_QWORD *)v4 + 2);
  *(_OWORD *)a3 = v5;
  return result;
}

BOOL sub_10034970C(const std::string **a1, uint64_t *a2)
{
  std::string::size_type size;
  char v4;
  std::string *v5;
  std::string::size_type v6;
  const std::string *v7;
  std::string::size_type v8;
  const std::string *v9;
  std::string::size_type v10;
  _BOOL8 v11;
  std::string v13;

  memset(&v13, 0, sizeof(v13));
  sub_1003489E8(*a2, &v13);
  size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  v4 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  v5 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v13.__r_.__value_.__l.__size_;
  else
    v5 = &v13;
  if (size)
  {
    v6 = 0;
    while (v5->__r_.__value_.__s.__data_[v6] == 48)
    {
      if (size == ++v6)
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    v6 = -1;
  }
  v7 = *a1;
  if (SHIBYTE((*a1)->__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = (const std::string *)v7->__r_.__value_.__r.__words[0];
    v8 = v7->__r_.__value_.__l.__size_;
    if (!v8)
    {
LABEL_16:
      v10 = -1;
      goto LABEL_17;
    }
  }
  else
  {
    v8 = HIBYTE((*a1)->__r_.__value_.__r.__words[2]);
    v9 = *a1;
    if (!*((_BYTE *)&(*a1)->__r_.__value_.__s + 23))
      goto LABEL_16;
  }
  v10 = 0;
  while (v9->__r_.__value_.__s.__data_[v10] == 48)
  {
    if (v8 == ++v10)
      goto LABEL_16;
  }
LABEL_17:
  if (v6 == -1 && v10 == -1)
  {
    v11 = 1;
  }
  else
  {
    v11 = 0;
    if (v6 != -1 && v10 != -1)
    {
      v11 = std::string::compare(&v13, v6, 0xFFFFFFFFFFFFFFFFLL, v7, v10, 0xFFFFFFFFFFFFFFFFLL) == 0;
      v4 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
  }
  if (v4 < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v11;
}

void sub_100349820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10034983C(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  v2 = *sub_10001F574(a1, &v4, a2);
  if (!v2)
    abort();
  return v2 + 56;
}

BOOL sub_100349874(const std::string **a1, uint64_t *a2)
{
  std::string::size_type size;
  std::string *v4;
  std::string::size_type v5;
  const std::string *v6;
  std::string::size_type v7;
  const std::string *v8;
  std::string::size_type v9;
  int v10;
  std::string v12;

  memset(&v12, 0, sizeof(v12));
  sub_1003489E8(*a2, &v12);
  size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v12;
  else
    v4 = (std::string *)v12.__r_.__value_.__r.__words[0];
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v12.__r_.__value_.__l.__size_;
  if (size)
  {
    v5 = 0;
    while (v4->__r_.__value_.__s.__data_[v5] == 48)
    {
      if (size == ++v5)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    v5 = -1;
  }
  v6 = *a1;
  if (SHIBYTE((*a1)->__r_.__value_.__r.__words[2]) < 0)
  {
    v8 = (const std::string *)v6->__r_.__value_.__r.__words[0];
    v7 = v6->__r_.__value_.__l.__size_;
    if (!v7)
    {
LABEL_18:
      v9 = -1;
      goto LABEL_19;
    }
  }
  else
  {
    v7 = HIBYTE((*a1)->__r_.__value_.__r.__words[2]);
    v8 = *a1;
    if (!*((_BYTE *)&(*a1)->__r_.__value_.__s + 23))
      goto LABEL_18;
  }
  v9 = 0;
  while (v8->__r_.__value_.__s.__data_[v9] == 48)
  {
    if (v7 == ++v9)
      goto LABEL_18;
  }
LABEL_19:
  v10 = std::string::compare(&v12, v5, 0xFFFFFFFFFFFFFFFFLL, v6, v9, 0xFFFFFFFFFFFFFFFFLL);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v10 == 0;
}

void sub_10034995C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100349978(uint64_t a1@<X0>, const void **a2@<X1>, char **a3@<X8>)
{
  uint64_t v5;
  _QWORD **v6;
  __int128 *v7;
  __int128 *i;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  int64x2_t v30;
  char *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  __int128 *v35;
  __int128 *v36;
  uint64_t v37;
  __int128 **v38;
  int64x2_t v39;
  char *v40;
  _QWORD *v41;

  v5 = a1 + 48;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a1 + 56 != sub_10001F2AC(a1 + 48, a2))
  {
    v6 = (_QWORD **)sub_10034983C(v5, a2);
    v35 = 0;
    v36 = 0;
    v37 = 0;
    sub_1003494CC((char *)&v35, *v6, v6[1], ((char *)v6[1] - (char *)*v6) >> 4);
    v7 = v35;
    for (i = v36; v7 != i; ++v7)
    {
      v9 = *v7;
      v10 = (std::__shared_weak_count *)*((_QWORD *)v7 + 1);
      if (v10)
      {
        v11 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        v13 = a3[1];
        v14 = (unint64_t)a3[2];
        if ((unint64_t)v13 >= v14)
        {
LABEL_13:
          v34 = v9;
          v17 = (v13 - *a3) >> 4;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60)
            abort();
          v19 = v14 - (_QWORD)*a3;
          if (v19 >> 3 > v18)
            v18 = v19 >> 3;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
            v20 = 0xFFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          v41 = a3 + 2;
          v21 = (char *)sub_10034957C((uint64_t)(a3 + 2), v20);
          v23 = &v21[16 * v17];
          *(_OWORD *)v23 = v34;
          if (v10)
          {
            p_shared_owners = (unint64_t *)&v10->__shared_owners_;
            do
              v25 = __ldxr(p_shared_owners);
            while (__stxr(v25 + 1, p_shared_owners));
          }
          v27 = *a3;
          v26 = a3[1];
          if (v26 == *a3)
          {
            v30 = vdupq_n_s64((unint64_t)v26);
            v28 = &v21[16 * v17];
          }
          else
          {
            v28 = &v21[16 * v17];
            do
            {
              v29 = *((_OWORD *)v26 - 1);
              v26 -= 16;
              *((_OWORD *)v28 - 1) = v29;
              v28 -= 16;
              *(_QWORD *)v26 = 0;
              *((_QWORD *)v26 + 1) = 0;
            }
            while (v26 != v27);
            v30 = *(int64x2_t *)a3;
          }
          v16 = v23 + 16;
          *a3 = v28;
          a3[1] = v23 + 16;
          v39 = v30;
          v31 = a3[2];
          a3[2] = &v21[16 * v22];
          v40 = v31;
          v38 = (__int128 **)v30.i64[0];
          sub_100349D18((uint64_t)&v38);
          goto LABEL_28;
        }
        *(_OWORD *)v13 = v9;
        do
          v15 = __ldxr(v11);
        while (__stxr(v15 + 1, v11));
      }
      else
      {
        v13 = a3[1];
        v14 = (unint64_t)a3[2];
        if ((unint64_t)v13 >= v14)
          goto LABEL_13;
        *(_OWORD *)v13 = (unint64_t)v9;
      }
      v16 = v13 + 16;
LABEL_28:
      a3[1] = v16;
      if (v10)
      {
        v32 = (unint64_t *)&v10->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    v38 = &v35;
    sub_100349FC0((void ***)&v38);
  }
}

void sub_100349B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100349FC0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100349BDC(char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      abort();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)sub_10034957C(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = sub_100349D18((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

uint64_t sub_100349D18(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    sub_10009F88C(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100349D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void *v18[2];
  uint64_t v19;
  void *__p[2];
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  std::string __dst;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v25 = 0;
  v26 = 0;
  if (*(char *)(a4 + 23) < 0)
    sub_10003430C(&__dst, *(void **)a4, *(_QWORD *)(a4 + 8));
  else
    __dst = *(std::string *)a4;
  sub_100347DAC(a1, &__dst, &v25);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003430C(v22, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v22 = *(_OWORD *)a2;
    v23 = *(_QWORD *)(a2 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a4;
    v21 = *(_QWORD *)(a4 + 16);
  }
  sub_100348B7C(a1, (const void **)v22, (uint64_t **)__p);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10003430C(v18, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v18 = *(_OWORD *)a3;
    v19 = *(_QWORD *)(a3 + 16);
  }
  v16 = v25;
  v17 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)a1 + 56))(a1, v18, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
  v13 = v26;
  if (v26)
  {
    v14 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_100349F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a30 < 0)
    operator delete(__p);
  sub_10009F88C(v30 - 48);
  _Unwind_Resume(a1);
}

void sub_100349FA8()
{
  uint64_t v0;

  if (*(char *)(v0 - 57) < 0)
    operator delete(*(void **)(v0 - 80));
  JUMPOUT(0x100349FA0);
}

void sub_100349FC0(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_10009F88C(v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10034A030(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_10034A0B4((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10034A0B4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_10034A0F8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10034A0F8(a1, *a2);
    sub_10034A0F8(a1, a2[1]);
    sub_10034A140((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_10034A140(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  sub_100349FC0(&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_OWORD *sub_10034A184(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;

  v11 = 0;
  v5 = (void **)sub_10001F574((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v10 = 0;
    v6 = operator new(0x50uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v6 + 9) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    LOBYTE(v10) = 1;
    sub_100004078(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    sub_10034A258((uint64_t)v9, 0);
  }
  return v6;
}

void sub_10034A258(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_10034A140((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_10034A29C(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10034A2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    sub_10034A34C((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void sub_10034A31C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10034A340(uint64_t a1)
{
  sub_10034A34C(a1 + 24, *(_QWORD *)(a1 + 24));
}

void sub_10034A34C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 1007) < 0)
      operator delete(*(void **)(a2 + 984));
    sub_10057FE54(a2 + 560);
    sub_10057FE54(a2 + 136);
    if (*(char *)(a2 + 111) < 0)
      operator delete(*(void **)(a2 + 88));
    if (*(char *)(a2 + 87) < 0)
      operator delete(*(void **)(a2 + 64));
    if (*(char *)(a2 + 63) < 0)
      operator delete(*(void **)(a2 + 40));
    if (*(char *)(a2 + 31) < 0)
      operator delete(*(void **)(a2 + 8));
    operator delete();
  }
}

void sub_10034A3E4(id a1)
{
  operator new();
}

void sub_10034A424()
{
  operator delete();
}

uint64_t sub_10034A448(uint64_t a1, void *a2, void *a3, char a4)
{
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;

  v8 = a2;
  v9 = a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_100929370;
  *(_BYTE *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  objc_storeStrong((id *)(a1 + 8), a2);
  v10 = objc_alloc_init((Class)NSMutableArray);
  v11 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v10;

  v12 = objc_alloc_init((Class)NSMutableSet);
  v13 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v12;

  sub_10034A530(a1, v9);
  return a1;
}

void sub_10034A504(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10034A530(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  id v7;
  __int16 v8;
  uint64_t v9;

  v3 = a2;
  v4 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = 138412546;
    v7 = v3;
    v8 = 2112;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Adding %@ to %@ session", (uint8_t *)&v6, 0x16u);
  }
  objc_msgSend(*(id *)(a1 + 24), "addObject:", v3);
  sub_10034A80C(a1, v3);

}

void sub_10034A60C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10034A628(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_100929370;
  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  v3 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 8);
    v6 = 138412290;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Tearing down CattPendingConnection for %@", (uint8_t *)&v6, 0xCu);
  }

  return a1;
}

void sub_10034A704(uint64_t a1)
{
  sub_10034A628(a1);
  operator delete();
}

id sub_10034A728(uint64_t a1, int a2)
{
  void *v2;
  _QWORD v4[5];

  *(_BYTE *)(a1 + 16) = a2;
  if (!a2)
    return objc_msgSend(*(id *)(a1 + 32), "removeAllObjects");
  v2 = *(void **)(a1 + 24);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10034A798;
  v4[3] = &unk_100929380;
  v4[4] = a1;
  return objc_msgSend(v2, "enumerateObjectsUsingBlock:", v4);
}

void sub_10034A798(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  uint64_t v7;
  id v8;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = v6;
  if ((objc_msgSend(*(id *)(v7 + 32), "containsObject:") & 1) != 0)
    *a4 = 1;
  else
    sub_10034A80C(v7, v8);

}

void sub_10034A7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10034A80C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  unsigned int v8;
  int v9;
  NSObject *v10;
  void **v11;
  int v12;
  void *v13;
  NSObject *v14;
  id v15;
  void **v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  char v22;
  uint8_t buf[4];
  void **v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _BOOL4 v28;
  __int16 v29;
  _BOOL4 v30;
  __int16 v31;
  unsigned int v32;

  v3 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_1009293A0);
  v4 = sub_1000589DC((uint64_t)off_1009778C0, v3, 0);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_1009293C0);
  v5 = sub_10006D488((uint64_t)off_1009778E0, v4, 1);
  if (v5)
  {
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_1009293E0);
    v6 = *((_BYTE *)off_100977B38 + 197)
      || *((_BYTE *)off_100977B38 + 198)
      || *((_BYTE *)off_100977B38 + 199)
      || *((unsigned __int8 *)off_100977B38 + 204) != 0;
    v7 = sub_100453918(v5, 10);
    v8 = objc_msgSend(*(id *)(a1 + 32), "containsObject:", v3);
    if (sub_10043FDB4(v5) && (!*(_BYTE *)(a1 + 16) ? (v9 = 1) : (v9 = v6), (v9 | v8 | v7) == 1))
    {
      v10 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v5, __p);
        if (v22 >= 0)
          v11 = __p;
        else
          v11 = (void **)__p[0];
        v12 = *(unsigned __int8 *)(a1 + 16);
        *(_DWORD *)buf = 136447234;
        v24 = v11;
        v25 = 1024;
        v26 = v12;
        v27 = 1024;
        v28 = v6;
        v29 = 1024;
        v30 = v7;
        v31 = 1024;
        v32 = v8;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Not making outgoing page to device %{public}s isForegroundActive %d, streaming %d, tooRecentConnection %d, alreadyPaged %d", buf, 0x24u);
        if (v22 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      if (qword_100977A78 != -1)
        dispatch_once(&qword_100977A78, &stru_100929400);
      v13 = off_100977A70;
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_10034AB8C;
      v17[3] = &unk_1009183A0;
      v19 = a1;
      v20 = v5;
      v18 = v3;
      sub_1004965EC((uint64_t)v13, v17);

    }
  }
  else
  {
    v14 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v15 = sub_100021770(v4);
      v16 = (void **)objc_claimAutoreleasedReturnValue(v15);
      *(_DWORD *)buf = 138412290;
      v24 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "No device found for device %@", buf, 0xCu);

    }
  }

}

void sub_10034AB44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10034AB84(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 24), "count");
}

void sub_10034AB8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  NSObject *v5;
  std::string *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  std::string __p;
  uint8_t buf[4];
  std::string *v17;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100929400);
  v3 = (uint64_t *)(a1 + 48);
  v4 = sub_100496DBC((uint64_t)off_100977A70, *(_QWORD *)(a1 + 48));
  v5 = qword_100999898;
  if ((v4 & 0x100000) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      sub_1006E215C((uint64_t *)(a1 + 48), (uint64_t)v5);
    goto LABEL_20;
  }
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(*v3, &__p);
    v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136446210;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Making outgoing connection to device %{public}s for CATT", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100929400);
  v7 = *v3;
  memset(&__p, 0, sizeof(__p));
  v8 = sub_100495A98((int64x2_t *)off_100977A70, v7, 0x100000, &__p, 0);
  v9 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v9)
    {
LABEL_20:
      v11 = sub_1000419F4();
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_10034ADEC;
      v12[3] = &unk_100918868;
      v14 = v2;
      v13 = *(id *)(a1 + 32);
      sub_100041A34(v11, v12);

      return;
    }
  }
  else if (!v8)
  {
    goto LABEL_20;
  }
  v10 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
    sub_1006E20D0(v3, v10);
}

void sub_10034ADB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_10034ADEC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 32), "addObject:", *(_QWORD *)(a1 + 32));
}

void sub_10034ADF8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  id v7;
  __int16 v8;
  uint64_t v9;

  v3 = a2;
  v4 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = 138412546;
    v7 = v3;
    v8 = 2112;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Removing %@ from %@ session", (uint8_t *)&v6, 0x16u);
  }
  objc_msgSend(*(id *)(a1 + 24), "removeObject:", v3);

}

void sub_10034AEC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10034AEE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "description"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "description"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ isForegroundActive: %d Devices: %@, Devices already paged: %@"), v2, v3, v4, v5));

  return v6;
}

void sub_10034AF70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10034AF8C(id a1)
{
  operator new();
}

void sub_10034AFCC()
{
  operator delete();
}

void sub_10034AFF0(id a1)
{
  operator new();
}

void sub_10034B030()
{
  operator delete();
}

void sub_10034B054(id a1)
{
  operator new();
}

void sub_10034B16C()
{
  operator delete();
}

void sub_10034B190(id a1)
{
  operator new();
}

void sub_10034B1D0()
{
  operator delete();
}

uint64_t sub_10034B1F4(uint64_t a1, int a2, int a3, uint64_t a4)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1000160D0(a1 + 16);
  *(_DWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = a4;
  *(_DWORD *)(a1 + 96) = a3;
  sub_10034D158(a1 + 136);
  sub_10034D158(a1 + 12512);
  sub_1002A90C4((pthread_cond_t *)(a1 + 24864));
  sub_1000160D0(a1 + 24912);
  *(_QWORD *)(a1 + 12488) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 12496) = 0;
  *(_QWORD *)(a1 + 12504) = 0;
  *(_BYTE *)(a1 + 24976) = 0;
  *(_DWORD *)(a1 + 24977) = -1;
  *(_WORD *)(a1 + 24981) = -1;
  *(_QWORD *)(a1 + 24984) = 0;
  *(_QWORD *)(a1 + 24992) = dispatch_queue_create("com.apple.bluetooth.netrbclientqueue", 0);
  return a1;
}

void sub_10034B2E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v8;

  v6 = v4;
  sub_1002A912C(v6);
  sub_10034D19C(v5);
  sub_10034D19C(v3);
  sub_100069BDC(v2);
  v8 = *(std::__shared_weak_count **)(v1 + 8);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  _Unwind_Resume(a1);
}

uint64_t sub_10034B340(uint64_t a1)
{
  std::__shared_weak_count *v2;

  dispatch_release(*(dispatch_object_t *)(a1 + 24992));
  sub_100069BDC(a1 + 24912);
  sub_1002A912C(a1 + 24864);
  sub_10034D19C(a1 + 12512);
  sub_10034D19C(a1 + 136);
  sub_100069BDC(a1 + 16);
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_10034B3AC(uint64_t result)
{
  if (*(_QWORD *)(result + 88))
    operator new();
  return result;
}

uint64_t sub_10034B418(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  sched_param v8;
  pthread_attr_t v9;

  memset(&v9, 0, sizeof(v9));
  v8 = 0;
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E21E8();
    return 3470;
  }
  if (*(_QWORD *)(a1 + 24984))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E2298();
    return 3470;
  }
  *(_BYTE *)(a1 + 12496) = 0;
  if (sub_10034B66C(a1))
  {
    if (*(_DWORD *)(a1 + 80) != 1)
    {
LABEL_13:
      sub_10034D118(a1 + 136);
      sub_10034D118(a1 + 12512);
      *(_QWORD *)(a1 + 24984) = a2;
      sub_10034B8B4(a1);
      pthread_attr_init(&v9);
      pthread_attr_setdetachstate(&v9, 2);
      pthread_attr_getschedparam(&v9, &v8);
      v8.sched_priority = 50;
      pthread_attr_setschedparam(&v9, &v8);
      pthread_create((pthread_t *)(a1 + 128), &v9, (void *(__cdecl *)(void *))sub_10034B918, (void *)a1);
      pthread_create((pthread_t *)(a1 + 12488), &v9, (void *(__cdecl *)(void *))sub_10034B930, (void *)a1);
      pthread_create((pthread_t *)(a1 + 12504), &v9, (void *(__cdecl *)(void *))sub_10034B948, (void *)a1);
      return 0;
    }
    v5 = _NETRBClientCreate(*(_QWORD *)(a1 + 24992), &stru_100929440, 0);
    *(_QWORD *)(a1 + 120) = v5;
    if (v5)
    {
      if ((_NETRBClientIsAllowedMoreHost() & 1) != 0)
        goto LABEL_13;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E2240();
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      sub_1006E2214();
    }
    v6 = *(const void **)(a1 + 104);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 104) = 0;
    }
    v7 = *(_QWORD *)(a1 + 120);
    if (v7)
    {
      _NETRBClientDestroy(v7);
      *(_QWORD *)(a1 + 120) = 0;
    }
    return 2101;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E226C();
    return 3471;
  }
}

BOOL sub_10034B66C(uint64_t a1)
{
  unsigned int v2;
  CFDataRef v3;
  CFDataRef v4;
  int v5;
  const __CFString *v6;
  const __CFString *v7;
  CFDictionaryRef v8;
  CFDictionaryRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFBooleanRef v12;
  CFIndex v13;
  CFDictionaryRef v14;
  CFDictionaryRef v15;
  int v17;
  __int16 v18;
  void *values[4];
  void *keys[4];

  v18 = 0;
  v17 = 0;
  if (sub_100187E98((uint64_t)&v17))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E22C4();
    return *(_QWORD *)(a1 + 104) != 0;
  }
  v2 = *(_DWORD *)(a1 + 96);
  if (v2)
  {
    LOBYTE(v17) = v17 | 2;
    if (v2 != 1)
      *(_WORD *)((char *)&v17 + 1) = bswap32(v2) >> 16;
  }
  v3 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)&v17, 6);
  if (v3)
  {
    v4 = v3;
    keys[0] = CFSTR("InterfaceRole");
    v5 = *(_DWORD *)(a1 + 80);
    v6 = CFSTR("Bluetooth P2P");
    if (!v5)
      v6 = CFSTR("Bluetooth PAN");
    if (v5 == 1)
      v7 = CFSTR("Bluetooth PAN-NAP");
    else
      v7 = v6;
    values[0] = (void *)v7;
    v8 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (!v8)
      goto LABEL_26;
    v9 = v8;
    if (*(_DWORD *)(a1 + 80) == 2)
    {
      LODWORD(keys[0]) = 1000;
      v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, keys);
      if (!v10)
      {
LABEL_25:
        CFRelease(v9);
LABEL_26:
        CFRelease(v4);
        return *(_QWORD *)(a1 + 104) != 0;
      }
      v11 = v10;
      v12 = kCFBooleanTrue;
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
    keys[0] = (void *)kIOEthernetHardwareAddress;
    keys[1] = CFSTR("IOUserEthernetInterfaceMergeProperties");
    keys[2] = CFSTR("P2PInstance");
    keys[3] = CFSTR("MaxTransferUnit");
    values[0] = v4;
    values[1] = v9;
    values[2] = v12;
    values[3] = v11;
    if (v12)
      v13 = 4;
    else
      v13 = 2;
    v14 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, v13, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (v14)
    {
      v15 = v14;
      *(_QWORD *)(a1 + 104) = IOEthernetControllerCreate(kCFAllocatorDefault, v14);
      CFRelease(v15);
    }
    if (v11)
      CFRelease(v11);
    goto LABEL_25;
  }
  return *(_QWORD *)(a1 + 104) != 0;
}

int sub_10034B8AC(id a1, int a2, void *a3)
{
  return 0;
}

uint64_t sub_10034B8B4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 104);
  if (result)
  {
    IOEthernetControllerRegisterEnableCallback(result, nullsub_223, a1);
    IOEthernetControllerRegisterDisableCallback(*(_QWORD *)(a1 + 104), sub_10034BC4C, a1);
    return IOEthernetControllerRegisterPacketAvailableCallback(*(_QWORD *)(a1 + 104), sub_10034BC54, a1);
  }
  return result;
}

uint64_t sub_10034B918(uint64_t a1)
{
  sub_10034C1B0(a1);
  return 0;
}

uint64_t sub_10034B930(uint64_t a1)
{
  sub_10034BF90(a1);
  return 0;
}

uint64_t sub_10034B948(uint64_t a1)
{
  sub_10034BD3C(a1);
  return 0;
}

uint64_t sub_10034B960(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __CFRunLoop *v4;
  const void *v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 16);
  if (*(_QWORD *)(a1 + 24984))
  {
    *(_QWORD *)(a1 + 24984) = 0;
    if (*(_DWORD *)(a1 + 80) == 1)
    {
      v2 = *(_QWORD *)(a1 + 120);
      if (v2)
      {
        if ((_NETRBClientSetHostCount(v2, 4, 0) & 1) == 0
          && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        {
          sub_1006E2348();
        }
        if ((_NETRBClientStopService(*(_QWORD *)(a1 + 120)) & 1) == 0
          && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        {
          sub_1006E231C();
        }
        if ((_NETRBClientDestroy(*(_QWORD *)(a1 + 120)) & 1) == 0
          && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        {
          sub_1006E22F0();
        }
      }
    }
    *(_BYTE *)(a1 + 12496) = 0;
    sub_10034D1CC(a1 + 136);
    sub_10034D1CC(a1 + 12512);
    v3 = *(_QWORD *)(a1 + 104);
    if (v3)
      IOEthernetControllerSetLinkStatus(v3, 0);
    if (*(_QWORD *)(a1 + 112) && *(_QWORD *)(a1 + 104))
      IOEthernetControllerUnscheduleFromRunLoop();
    while (1)
    {
      v4 = *(__CFRunLoop **)(a1 + 112);
      if (!v4)
        break;
      CFRunLoopStop(v4);
      sub_100034264((uint64_t)v8);
      usleep(0x2710u);
      sub_100034188((uint64_t)v8);
    }
    v5 = *(const void **)(a1 + 104);
    if (v5)
    {
      CFRelease(v5);
      v6 = 0;
      *(_QWORD *)(a1 + 104) = 0;
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v6 = 2105;
  }
  sub_100034234((uint64_t)v8);
  return v6;
}

void sub_10034BAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10034BB10(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 120);
  if (result)
  {
    if (_NETRBClientIsAllowedMoreHost())
    {
      if ((_NETRBClientAddHost(*(_QWORD *)(a1 + 120), 4) & 1) != 0)
      {
        return 0;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006E2374();
        return 3472;
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E2240();
      return 3473;
    }
  }
  return result;
}

uint64_t sub_10034BBB0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 120);
  if (v1)
    _NETRBClientRemoveHost(v1, 4);
  return 0;
}

BOOL sub_10034BBD4(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 16);
  v2 = *(_QWORD *)(a1 + 104);
  if (v2)
    v3 = IOEthernetControllerSetLinkStatus(v2, 1) == 0;
  else
    v3 = 0;
  sub_100034234((uint64_t)v5);
  return v3;
}

void sub_10034BC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10034BC4C(uint64_t a1, uint64_t a2)
{
  return sub_10034B960(a2);
}

uint64_t sub_10034BC54(uint64_t a1, uint64_t a2)
{
  return sub_10034BEEC(a2);
}

uint64_t sub_10034BC5C(pthread_cond_t *a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, (uint64_t)&a1[519]);
  sub_1002A9188(a1 + 518);
  a1[260].__opaque[8] ^= 1u;
  return sub_100034234((uint64_t)v3);
}

void sub_10034BCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10034BCCC(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v7;

  result = 3474;
  if (a3 && *(_QWORD *)(a1 + 104))
  {
    v7 = a1 + 12512;
    result = sub_10034D204(a1 + 12512);
    if (result)
    {
      memcpy((void *)result, a2, a3);
      sub_10034D320(v7, a3);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10034BD3C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint8_t buf[4];
  int v14;

  v11 = 0;
  v12 = 0;
  v10 = 0;
  sub_10034CAA4(&v10, (_QWORD *)a1);
  while (1)
  {
    v2 = sub_10034D290(a1 + 12512, &v12);
    if (!v2)
      break;
    if (*(_BYTE *)(a1 + 24976) && (*(_BYTE *)v2 & 1) == 0)
    {
      v3 = *(_DWORD *)(a1 + 24977);
      *(_WORD *)(v2 + 4) = *(_WORD *)(a1 + 24981);
      *(_DWORD *)v2 = v3;
    }
    v4 = IOEthernetControllerWritePacket(*(_QWORD *)(a1 + 104));
    if (v4)
    {
      v5 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v14 = v4;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "OI_NETIFC_Write() failed with %d", buf, 8u);
      }
    }
    sub_10034D37C(a1 + 12512);
  }
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 0;
}

void sub_10034BECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10034BEEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;

  v2 = a1 + 136;
  result = sub_10034D204(a1 + 136);
  if (result)
  {
    v4 = result;
    do
    {
      result = IOEthernetControllerReadPacket(*(_QWORD *)(a1 + 104), v4, 1514);
      if (result < 1)
        break;
      if (*(_BYTE *)(a1 + 24976))
      {
        if ((*(_BYTE *)v4 & 1) == 0)
        {
          v5 = *(_DWORD *)(v4 + 6);
          *(_WORD *)(a1 + 24981) = *(_WORD *)(v4 + 10);
          *(_DWORD *)(a1 + 24977) = v5;
        }
      }
      sub_10034D320(v2, result);
      result = sub_10034D204(v2);
      v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_10034BF90(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, _QWORD);
  int v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint8_t buf[8];
  uint64_t v15;

  v12 = 0;
  v13 = 0;
  v11 = 0;
  sub_10034CAA4(&v11, (_QWORD *)a1);
  v2 = (_BYTE *)(a1 + 12496);
  while (1)
  {
    v3 = sub_10034D290(a1 + 136, &v13);
    if (!v3)
      break;
    if (*v2)
    {
      *(_QWORD *)buf = 0;
      v15 = 0;
      sub_10003415C((uint64_t)buf, a1 + 24912);
      if (*v2)
        sub_1002A9180((pthread_cond_t *)(a1 + 24864), (pthread_mutex_t **)buf);
      sub_100034234((uint64_t)buf);
    }
    sub_1000477B8();
    v4 = *(uint64_t (**)(uint64_t, _QWORD))(a1 + 24984);
    if (!v4)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E23A0();
      sub_1000478A0();
      break;
    }
    v5 = v4(v3, (unsigned __int16)v13);
    if (v5)
    {
      v6 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "BTStackReceiveCallBack returned error %d", buf, 8u);
      }
    }
    else
    {
      *v2 ^= 1u;
    }
    sub_1000478A0();
    pthread_yield_np();
    sub_10034D37C(a1 + 136);
  }
  *(_QWORD *)(a1 + 12488) = 0;
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return 0;
}

void sub_10034C17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10009F88C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10034C1B0(uint64_t a1)
{
  uint64_t IONetworkInterfaceObject;
  int i;
  const __CFString *CFProperty;
  int v6;
  const void *v7;
  const __SCPreferences *v8;
  const __SCPreferences *v9;
  SCNetworkSetRef v10;
  CFIndex Count;
  CFIndex v12;
  const __SCNetworkService *ValueAtIndex;
  SCNetworkInterfaceRef j;
  const __SCNetworkInterface *v15;
  xpc_object_t v16;
  char started;
  const void **v18;
  const void **v19;
  const __CFArray *v20;
  CFIndex v21;
  CFIndex v22;
  const __SCNetworkSet *v23;
  const __CFArray *v24;
  const __CFArray *v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  const __CFArray *v31;
  SCNetworkSetRef cf;
  const __CFArray *theArray;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _QWORD v36[2];
  char buffer[8];
  uint64_t v38;
  CFRange v39;

  v36[0] = 0;
  v36[1] = 0;
  sub_10003415C((uint64_t)v36, a1 + 16);
  v34 = 0;
  v35 = 0;
  sub_10034CAA4(&v34, (_QWORD *)a1);
  if (!*(_QWORD *)(a1 + 104))
    goto LABEL_78;
  IONetworkInterfaceObject = IOEthernetControllerGetIONetworkInterfaceObject();
  if ((_DWORD)IONetworkInterfaceObject)
  {
    sub_100034264((uint64_t)v36);
    for (i = -50; ; ++i)
    {
      CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(IONetworkInterfaceObject, CFSTR("BSD Name"), kCFAllocatorDefault, 0);
      if (CFProperty || i == 0)
        break;
      usleep(0x186A0u);
    }
    sub_100034188((uint64_t)v36);
    v6 = *(_DWORD *)(a1 + 80);
    if ((v6 | 2) != 2)
    {
      *(_QWORD *)buffer = 0;
      v38 = 0;
      if (CFProperty && CFStringGetCString(CFProperty, buffer, 16, 0x600u))
      {
        v16 = xpc_dictionary_create(0, 0, 0);
        xpc_dictionary_set_uint64(v16, netrbClientDeviceType, 4uLL);
        xpc_dictionary_set_string(v16, netrbClientInterfaceName, buffer);
        started = _NETRBClientStartService(*(_QWORD *)(a1 + 120), 0, 201, 302, v16);
        xpc_release(v16);
        if ((started & 1) != 0)
        {
          if ((_NETRBClientAddHost(*(_QWORD *)(a1 + 120), 4) & 1) != 0)
            goto LABEL_74;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
            sub_1006E2374();
        }
        else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        {
          sub_1006E2424();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        sub_1006E23F8();
      }
      sub_10034B3AC(a1);
LABEL_76:
      if (CFProperty)
        CFRelease(CFProperty);
      goto LABEL_78;
    }
    v7 = (const void *)_SCNetworkInterfaceCreateWithIONetworkInterfaceObject(IONetworkInterfaceObject);
    if (!v7)
    {
      SCError();
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E2450();
      goto LABEL_74;
    }
    v8 = SCPreferencesCreateWithAuthorization(kCFAllocatorDefault, CFSTR("BT-PAN"), 0, 0);
    v9 = v8;
    if (!v8)
    {
      SCError();
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E24B0();
      goto LABEL_73;
    }
    if (!SCPreferencesLock(v8, 1u))
    {
      SCPreferencesSynchronize(v9);
      if (!SCPreferencesLock(v9, 1u))
      {
        SCError();
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006E2510();
        goto LABEL_72;
      }
    }
    v10 = SCNetworkSetCopyCurrent(v9);
    cf = v10;
    if (v10)
    {
      if (SCNetworkSetEstablishDefaultInterfaceConfiguration(v10, v7) || !SCError())
      {
        theArray = SCNetworkServiceCopyAll(v9);
        if (theArray)
        {
          Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            v12 = 0;
LABEL_19:
            ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(theArray, v12);
            for (j = SCNetworkServiceGetInterface(ValueAtIndex); ; j = SCNetworkInterfaceGetInterface(v15))
            {
              v15 = j;
              if (!j)
              {
                if (++v12 != Count)
                  goto LABEL_19;
                goto LABEL_65;
              }
              if (CFEqual(v7, j))
                break;
            }
            v18 = (const void **)&kSCValNetIPv4ConfigMethodDHCP;
            if (v6 == 2)
              v18 = (const void **)&kSCValNetIPv4ConfigMethodLinkLocal;
            sub_10034C968(ValueAtIndex, kSCNetworkProtocolTypeIPv4, kSCPropNetIPv4ConfigMethod, *v18);
            v19 = (const void **)&kSCValNetIPv6ConfigMethodAutomatic;
            if (v6 == 2)
              v19 = (const void **)&kSCValNetIPv6ConfigMethodLinkLocal;
            sub_10034C968(ValueAtIndex, kSCNetworkProtocolTypeIPv6, kSCPropNetIPv6ConfigMethod, *v19);
            if (!ValueAtIndex)
              goto LABEL_65;
            v20 = SCNetworkSetCopyAll(v9);
            v31 = v20;
            if (!v20)
            {
              SCError();
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
                sub_1006E25FC();
              goto LABEL_67;
            }
            v21 = CFArrayGetCount(v20);
            if (v21 < 1)
            {
LABEL_61:
              if (SCPreferencesCommitChanges(v9))
              {
                if (!SCPreferencesApplyChanges(v9))
                {
                  SCError();
                  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
                    sub_1006E271C();
                }
              }
              else
              {
                SCError();
                if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
                  sub_1006E26BC();
              }
            }
            else
            {
              v22 = 0;
              while (1)
              {
                v23 = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v31, v22);
                v24 = SCNetworkSetCopyServices(v23);
                v25 = v24;
                if (!v24
                  || (v39.length = CFArrayGetCount(v24),
                      v39.location = 0,
                      v26 = CFArrayContainsValue(v25, v39, ValueAtIndex),
                      CFRelease(v25),
                      !v26))
                {
                  if (!SCNetworkSetAddService(v23, ValueAtIndex))
                    break;
                }
                if (v21 == ++v22)
                  goto LABEL_61;
              }
              SCError();
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
                sub_1006E265C();
            }
            SCPreferencesUnlock(v9);
            CFRelease(v31);
            goto LABEL_68;
          }
        }
LABEL_65:
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006E25D0();
LABEL_67:
        SCPreferencesUnlock(v9);
LABEL_68:
        if (theArray)
          CFRelease(theArray);
        if (cf)
          CFRelease(cf);
LABEL_72:
        CFRelease(v9);
LABEL_73:
        CFRelease(v7);
LABEL_74:
        *(_QWORD *)(a1 + 112) = CFRunLoopGetCurrent();
        if (*(_QWORD *)(a1 + 104))
        {
          IOEthernetControllerScheduleWithRunLoop();
          sub_100034264((uint64_t)v36);
          CFRunLoopRun();
          sub_100034188((uint64_t)v36);
        }
        goto LABEL_76;
      }
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E277C();
    }
    else
    {
      SCError();
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E2570();
    }
    theArray = 0;
    goto LABEL_67;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006E23CC();
LABEL_78:
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  sub_100034264((uint64_t)v36);
  v27 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  sub_100034234((uint64_t)v36);
  return 0;
}

void sub_10034C8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_10009F88C((uint64_t)va);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10034C944()
{
  operator delete();
}

uint64_t sub_10034C958(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
}

void sub_10034C968(const __SCNetworkService *a1, const __CFString *a2, const void *a3, const void *a4)
{
  const __SCNetworkProtocol *v8;
  const __CFDictionary *Configuration;
  __CFDictionary *MutableCopy;
  const __CFDictionary *v11;
  int v12;

  v8 = SCNetworkServiceCopyProtocol(a1, a2);
  if (v8)
  {
LABEL_4:
    Configuration = SCNetworkProtocolGetConfiguration(v8);
    if (Configuration)
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Configuration);
    else
      MutableCopy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v11 = MutableCopy;
    CFDictionarySetValue(MutableCopy, a3, a4);
    v12 = SCNetworkProtocolSetConfiguration(v8, v11);
    CFRelease(v11);
    if (v8)
      CFRelease(v8);
    if (!v12)
    {
      SCError();
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E283C();
    }
    return;
  }
  if (SCNetworkServiceAddProtocolType(a1, a2))
  {
    v8 = SCNetworkServiceCopyProtocol(a1, a2);
    goto LABEL_4;
  }
  SCError();
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006E27DC();
}

uint64_t sub_10034CAA4(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    a1[1] = v4;
    if (v4)
      return (uint64_t)a1;
  }
  else
  {
    a1[1] = 0;
  }
  sub_10034CAE4();
  return sub_10034CAE4();
}

uint64_t sub_10034CAE4()
{
  std::__libcpp_verbose_abort("bad_weak_ptr was thrown in -fno-exceptions mode");
  return sub_10034CAF8();
}

id *sub_10034CAF8(id *a1)
{

  return a1;
}

void sub_10034CB38(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  int v13;
  const char *v14;

  v4 = qword_100999980;
  if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
  {
    v13 = 136315138;
    v14 = "HciTransportOpen";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v13, 0xCu);
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  v5 = objc_retainBlock(*(id *)(a2 + 16));
  v6 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;

  v7 = objc_retainBlock(*(id *)(a2 + 48));
  v8 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v7;

  v9 = objc_retainBlock(*(id *)(a2 + 56));
  v10 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;

  v11 = objc_retainBlock(*(id *)(a2 + 64));
  v12 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v11;

}

void sub_10034CC44(_QWORD *a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  const char *v8;

  v2 = qword_100999980;
  if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136315138;
    v8 = "HciTransportClose";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v7, 0xCu);
  }
  v3 = (void *)a1[2];
  a1[2] = 0;

  v4 = (void *)a1[3];
  a1[3] = 0;

  v5 = (void *)a1[4];
  a1[4] = 0;

  v6 = (void *)a1[5];
  a1[5] = 0;

}

void sub_10034CD1C(uint64_t a1, uint64_t *a2)
{
  __int16 v3;
  uint64_t v4;
  dispatch_time_t v5;
  dispatch_queue_global_t global_queue;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD block[6];
  __int16 v17;

  if (*(_QWORD *)(a1 + 24))
  {
    v3 = *((_WORD *)a2 + 5);
    v4 = *a2;
    v5 = dispatch_time(0, 5000000);
    global_queue = dispatch_get_global_queue(0, 0);
    v7 = objc_claimAutoreleasedReturnValue(global_queue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10034CDFC;
    block[3] = &unk_1009186D0;
    v17 = v3;
    block[4] = a1;
    block[5] = v4;
    dispatch_after(v5, v7, block);

  }
  else
  {
    v8 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_ERROR))
      sub_1006E289C(v8, v9, v10, v11, v12, v13, v14, v15);
  }
}

_BYTE *sub_10034CDFC(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  NSObject *v3;
  int v4;
  char v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;

  v1 = *((_QWORD *)result + 4);
  if (*(_QWORD *)(v1 + 24))
  {
    v2 = result;
    v5 = 0;
    sub_100043758(&v5);
    v3 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *((unsigned __int16 *)v2 + 24);
      *(_DWORD *)buf = 136315394;
      v7 = "sendTransport_block_invoke";
      v8 = 1024;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s: send HCI event to virtual transport size %d", buf, 0x12u);
    }
    (*(void (**)(void))(*(_QWORD *)(v1 + 24) + 16))();
    sub_10004339C(&v5);
    return sub_100043728(&v5);
  }
  return result;
}

void sub_10034CEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  _Unwind_Resume(exception_object);
}

void sub_10034CF18(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  __int16 v4;
  uint64_t v5;
  dispatch_time_t v6;
  dispatch_queue_global_t global_queue;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD block[6];
  __int16 v18;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *((_WORD *)a2 + 5);
    v5 = *a2;
    v6 = dispatch_time(0, 1000000 * a3);
    global_queue = dispatch_get_global_queue(0, 0);
    v8 = objc_claimAutoreleasedReturnValue(global_queue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10034CFFC;
    block[3] = &unk_1009186D0;
    v18 = v4;
    block[4] = a1;
    block[5] = v5;
    dispatch_after(v6, v8, block);

  }
  else
  {
    v9 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_ERROR))
      sub_1006E2910(v9, v10, v11, v12, v13, v14, v15, v16);
  }
}

_BYTE *sub_10034CFFC(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  NSObject *v3;
  int v4;
  char v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;

  v1 = *((_QWORD *)result + 4);
  if (*(_QWORD *)(v1 + 24))
  {
    v2 = result;
    v5 = 0;
    sub_100043758(&v5);
    v3 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *((unsigned __int16 *)v2 + 24);
      *(_DWORD *)buf = 136315394;
      v7 = "sendTransportDelay_block_invoke";
      v8 = 1024;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s send HCI event to virtual transport size %d", buf, 0x12u);
    }
    (*(void (**)(void))(*(_QWORD *)(v1 + 24) + 16))();
    sub_10004339C(&v5);
    return sub_100043728(&v5);
  }
  return result;
}

void sub_10034D0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10034D118(uint64_t a1)
{
  uint64_t result;

  pthread_mutex_init((pthread_mutex_t *)a1, 0);
  result = pthread_cond_init((pthread_cond_t *)(a1 + 64), 0);
  *(_QWORD *)(a1 + 12336) = 0;
  *(_QWORD *)(a1 + 12341) = 0;
  return result;
}

uint64_t sub_10034D158(uint64_t a1)
{
  pthread_mutex_init((pthread_mutex_t *)a1, 0);
  pthread_cond_init((pthread_cond_t *)(a1 + 64), 0);
  *(_QWORD *)(a1 + 12336) = 0;
  *(_QWORD *)(a1 + 12341) = 0;
  return a1;
}

uint64_t sub_10034D19C(uint64_t a1)
{
  pthread_cond_destroy((pthread_cond_t *)(a1 + 64));
  pthread_mutex_destroy((pthread_mutex_t *)a1);
  return a1;
}

uint64_t sub_10034D1CC(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  *(_BYTE *)(a1 + 12348) = 1;
  pthread_cond_signal((pthread_cond_t *)(a1 + 64));
  return pthread_mutex_unlock((pthread_mutex_t *)a1);
}

uint64_t sub_10034D204(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = (_BYTE *)(a1 + 12348);
  if (*(_DWORD *)(a1 + 12344) == 8)
  {
    while (!*v2)
    {
      pthread_cond_wait((pthread_cond_t *)(a1 + 64), (pthread_mutex_t *)a1);
      if (*(_DWORD *)(a1 + 12344) != 8)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    if (!*v2)
    {
      v3 = a1 + 1528 * *(unsigned int *)(a1 + 12340) + 112;
      goto LABEL_7;
    }
  }
  v3 = 0;
LABEL_7:
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v3;
}

uint64_t sub_10034D290(uint64_t a1, _QWORD *a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v4 = (_BYTE *)(a1 + 12348);
  if (*(_DWORD *)(a1 + 12344))
  {
LABEL_4:
    if (!*v4)
    {
      v6 = a1 + 1528 * *(unsigned int *)(a1 + 12336);
      v5 = v6 + 112;
      *a2 = *(_QWORD *)(v6 + 1632);
      goto LABEL_7;
    }
  }
  else
  {
    while (!*v4)
    {
      pthread_cond_wait((pthread_cond_t *)(a1 + 64), (pthread_mutex_t *)a1);
      if (*(_DWORD *)(a1 + 12344))
        goto LABEL_4;
    }
  }
  v5 = 0;
LABEL_7:
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v5;
}

uint64_t sub_10034D320(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v4 = *(_DWORD *)(a1 + 12340);
  *(_QWORD *)(a1 + 1528 * v4 + 1632) = a2;
  *(_DWORD *)(a1 + 12340) = ((_BYTE)v4 + 1) & 7;
  v5 = *(_DWORD *)(a1 + 12344);
  *(_DWORD *)(a1 + 12344) = v5 + 1;
  if (!v5)
    pthread_cond_signal((pthread_cond_t *)(a1 + 64));
  return pthread_mutex_unlock((pthread_mutex_t *)a1);
}

uint64_t sub_10034D37C(uint64_t a1)
{
  int v2;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  *(_DWORD *)(a1 + 12336) = (*(_DWORD *)(a1 + 12336) + 1) & 7;
  v2 = *(_DWORD *)(a1 + 12344);
  *(_DWORD *)(a1 + 12344) = v2 - 1;
  if (v2 == 8)
    pthread_cond_signal((pthread_cond_t *)(a1 + 64));
  return pthread_mutex_unlock((pthread_mutex_t *)a1);
}

uint64_t sub_10034D3CC()
{
  if (qword_100991E58 != -1)
    dispatch_once(&qword_100991E58, &stru_100929498);
  return qword_100991E50;
}

void sub_10034D40C(id a1)
{
  operator new();
}

void sub_10034D480()
{
  operator delete();
}

void sub_10034D4A4(id a1)
{
  operator new();
}

void sub_10034D4E4()
{
  operator delete();
}

uint64_t sub_10034D508()
{
  if (qword_100991E78 != -1)
    dispatch_once(&qword_100991E78, &stru_1009294D8);
  return qword_100991E70;
}

void sub_10034D548(id a1)
{
  operator new();
}

void sub_10034D588()
{
  operator delete();
}

uint64_t sub_10034D5AC()
{
  if (qword_100991E88 != -1)
    dispatch_once(&qword_100991E88, &stru_1009294F8);
  return qword_100991E80;
}

void sub_10034D5EC(id a1)
{
  operator new();
}

void sub_10034D62C()
{
  operator delete();
}

uint64_t sub_10034D650()
{
  if (qword_100991E98 != -1)
    dispatch_once(&qword_100991E98, &stru_100929518);
  return qword_100991E90;
}

void sub_10034D690(id a1)
{
  operator new();
}

void sub_10034D6D0()
{
  operator delete();
}

void sub_10034D6F4(id a1)
{
  operator new();
}

void sub_10034D734()
{
  operator delete();
}

void sub_10034D758(id a1)
{
  char *v1;
  NSObject *v2;
  _BOOL8 v3;
  int v4;
  uint8_t buf[16];
  int v6;

  v1 = getenv("BT_CHIP");
  if (v1 && !strcmp(v1, "ACI BT"))
    operator new();
  if (qword_100991ED8 != -1)
    dispatch_once(&qword_100991ED8, &stru_100929598);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)qword_100991ED0 + 264))(qword_100991ED0))
    operator new();
  if (!qword_100991EB0)
  {
    v6 = 1046806126;
    *(_OWORD *)buf = xmmword_10073E0D0;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -1639077591;
    *(_OWORD *)buf = xmmword_10073E10C;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 1032708406;
    *(_OWORD *)buf = xmmword_10073E134;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -1527788847;
    *(_OWORD *)buf = xmmword_10073E1E8;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -350584140;
    *(_OWORD *)buf = xmmword_10073E210;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 317289457;
    *(_OWORD *)buf = xmmword_10073E300;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 289690957;
    *(_OWORD *)buf = xmmword_10073E3A0;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 414393924;
    *(_OWORD *)buf = xmmword_10073E3F0;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -232427879;
    *(_OWORD *)buf = xmmword_10073E47C;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 2030516999;
    *(_OWORD *)buf = xmmword_10073E4B8;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -1276010597;
    *(_OWORD *)buf = xmmword_10073E4E0;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -1902732724;
    *(_OWORD *)buf = xmmword_10073E508;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -342357580;
    *(_OWORD *)buf = xmmword_10073E530;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -820493242;
    *(_OWORD *)buf = xmmword_10073E558;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -61007701;
    *(_OWORD *)buf = xmmword_10073E56C;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -235416490;
    *(_OWORD *)buf = xmmword_10073E580;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -121925081;
    *(_OWORD *)buf = xmmword_10073E594;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 1126727276;
    *(_OWORD *)buf = xmmword_10073E5A8;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 300130091;
    *(_OWORD *)buf = xmmword_10073E5BC;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 343814884;
    *(_OWORD *)buf = xmmword_10073E5D0;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -1675932945;
    *(_OWORD *)buf = xmmword_10073E5E4;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 1278131292;
    *(_OWORD *)buf = xmmword_10073E5F8;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 659506830;
    *(_OWORD *)buf = xmmword_10073E620;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 1071957977;
    *(_OWORD *)buf = xmmword_10073E648;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 438437663;
    *(_OWORD *)buf = xmmword_10073E65C;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -382792827;
    *(_OWORD *)buf = xmmword_10073E670;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 1575123478;
    *(_OWORD *)buf = xmmword_10073E684;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 123138233;
    *(_OWORD *)buf = xmmword_10073E698;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 681511593;
    *(_OWORD *)buf = xmmword_10073E6AC;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 713503427;
    *(_OWORD *)buf = xmmword_10073E6C0;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -1632750650;
    *(_OWORD *)buf = xmmword_10073E6D4;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -1431778695;
    *(_OWORD *)buf = xmmword_10073E6E8;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 533419158;
    *(_OWORD *)buf = xmmword_10073E6FC;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 1106979518;
    *(_OWORD *)buf = xmmword_10073E710;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -1820426635;
    *(_OWORD *)buf = xmmword_10073E724;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -937652876;
    *(_OWORD *)buf = xmmword_10073E738;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -609570151;
    *(_OWORD *)buf = xmmword_10073E74C;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -874769875;
    *(_OWORD *)buf = xmmword_10073E760;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 1874287171;
    *(_OWORD *)buf = xmmword_10073E774;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -781324731;
    *(_OWORD *)buf = xmmword_10073E788;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 1223847566;
    *(_OWORD *)buf = xmmword_10073E79C;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 185580364;
    *(_OWORD *)buf = xmmword_10073E7B0;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 1214880059;
    *(_OWORD *)buf = xmmword_10073E7C4;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 426359977;
    *(_OWORD *)buf = xmmword_10073E7D8;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 345196535;
    *(_OWORD *)buf = xmmword_10073E7EC;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 440949464;
    *(_OWORD *)buf = xmmword_10073E800;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -695298128;
    *(_OWORD *)buf = xmmword_10073E814;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 804488105;
    *(_OWORD *)buf = xmmword_10073E83C;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 460218192;
    *(_OWORD *)buf = xmmword_10073E864;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 2144905009;
    *(_OWORD *)buf = xmmword_10073E88C;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 688565114;
    *(_OWORD *)buf = xmmword_10073E8B4;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -493418906;
    *(_OWORD *)buf = xmmword_10073E8C8;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -545612308;
    *(_OWORD *)buf = xmmword_10073E8DC;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 1178062702;
    *(_OWORD *)buf = xmmword_10073E8F0;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 958549802;
    *(_OWORD *)buf = xmmword_10073E904;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -12497897;
    *(_OWORD *)buf = xmmword_10073E918;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 1377540371;
    *(_OWORD *)buf = xmmword_10073E92C;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -518121279;
    *(_OWORD *)buf = xmmword_10073E940;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 1878025452;
    *(_OWORD *)buf = xmmword_10073E954;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 1725957070;
    *(_OWORD *)buf = xmmword_10073E968;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 538967431;
    *(_OWORD *)buf = xmmword_10073E97C;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 2060712151;
    *(_OWORD *)buf = xmmword_10073E990;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 802516499;
    *(_OWORD *)buf = xmmword_10073E9A4;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -1919324456;
    *(_OWORD *)buf = xmmword_10073E9B8;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 1127969586;
    *(_OWORD *)buf = xmmword_10073E9CC;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 1292009573;
    *(_OWORD *)buf = xmmword_10073E9E0;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 1737149739;
    *(_OWORD *)buf = xmmword_10073E9F4;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -1918230744;
    *(_OWORD *)buf = xmmword_10073EA08;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 1899561076;
    *(_OWORD *)buf = xmmword_10073EA1C;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -435113336;
    *(_OWORD *)buf = xmmword_10073EA44;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -1997581659;
    *(_OWORD *)buf = xmmword_10073EA58;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -1441055153;
    *(_OWORD *)buf = xmmword_10073EA6C;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -2098731532;
    *(_OWORD *)buf = xmmword_10073EA80;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -340360463;
    *(_OWORD *)buf = xmmword_10073EA94;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = 1605231531;
    *(_OWORD *)buf = xmmword_10073EAA8;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -584398440;
    *(_OWORD *)buf = xmmword_10073EABC;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v6 = -879476163;
    *(_OWORD *)buf = xmmword_10073EAD0;
    if (MGIsDeviceOneOfType(buf))
      operator new();
    v2 = (id)qword_1009997E8;
    v3 = os_log_type_enabled(v2, OS_LOG_TYPE_FAULT);
    if (v3)
    {
      v4 = MGGetProductType(v3);
      sub_1006E2984(v4, buf, v2);
    }

  }
}

void sub_10034F8D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10034FA40(id a1)
{
  operator new();
}

void sub_10034FA80()
{
  operator delete();
}

void sub_10034FAA4(id a1)
{
  operator new();
}

void sub_10034FAE4()
{
  operator delete();
}

uint64_t sub_10034FB08()
{
  if (qword_100991EE8 != -1)
    dispatch_once(&qword_100991EE8, &stru_1009295B8);
  return qword_100991EE0;
}

void sub_10034FB48(id a1)
{
  operator new();
}

uint64_t sub_10034FB88()
{
  if (qword_100991EF8 != -1)
    dispatch_once(&qword_100991EF8, &stru_1009295D8);
  return qword_100991EF0;
}

void sub_10034FBC8(id a1)
{
  if (sub_1004F9334())
    operator new();
}

void sub_10034FC10()
{
  operator delete();
}

void sub_10034FC34(id a1)
{
  operator new();
}

void sub_10034FC74()
{
  operator delete();
}

void sub_10034FC98(id a1)
{
  operator new();
}

void sub_10034FCD8()
{
  operator delete();
}

uint64_t sub_10034FCFC()
{
  if (qword_100991F28 != -1)
    dispatch_once(&qword_100991F28, &stru_100929638);
  return qword_100991F20;
}

void sub_10034FD3C(id a1)
{
  operator new();
}

void sub_10034FD7C()
{
  operator delete();
}

uint64_t sub_10034FDA0()
{
  if (qword_100991F38 != -1)
    dispatch_once(&qword_100991F38, &stru_100929658);
  return qword_100991F30;
}

void sub_10034FDE0(id a1)
{
  operator new();
}

void sub_10034FE20()
{
  operator delete();
}

void sub_10034FE44(id a1)
{
  operator new();
}

uint64_t sub_10034FE84()
{
  if (qword_100991F58 != -1)
    dispatch_once(&qword_100991F58, &stru_100929698);
  return qword_100991F50;
}

void sub_10034FEC4(id a1)
{
  operator new();
}

void sub_10034FF04()
{
  operator delete();
}

void sub_10034FF28()
{
  operator new();
}

void sub_10034FF6C()
{
  operator delete();
}

void sub_10034FF90()
{
  operator new();
}

void sub_10034FFD4()
{
  operator delete();
}

void sub_10034FFF8()
{
  operator new();
}

void sub_100350054()
{
  operator delete();
}

uint64_t sub_100350078()
{
  if (qword_10097AD90 != -1)
    dispatch_once(&qword_10097AD90, &stru_1009296D8);
  return qword_10097AD88;
}

id sub_1003500B8()
{
  id v0;

  if (_os_feature_enabled_impl("BluetoothFeatures", "FindMyBTDeviceManagement"))
  {
    if (qword_100991F68 != -1)
      dispatch_once(&qword_100991F68, &stru_1009296B8);
    v0 = (id)qword_100991F60;
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

void sub_10035011C(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[SPOwnerInterface cbPeripheralManagementSession](SPOwnerInterface, "cbPeripheralManagementSession"));
  v2 = (void *)qword_100991F60;
  qword_100991F60 = v1;

}

void *sub_100350148()
{
  if (qword_10097ADA0 != -1)
    dispatch_once(&qword_10097ADA0, &stru_1009296F8);
  return off_10097AD98;
}

void sub_100350188(id a1)
{
  operator new();
}

void sub_1003501C8()
{
  operator delete();
}

void sub_1003501EC(id a1)
{
  operator new();
}

void sub_10035022C()
{
  operator delete();
}

uint64_t sub_100350250(uint64_t a1, uint64_t a2, int a3)
{
  _BYTE *v6;
  _BYTE *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  _BYTE *v18;
  _BYTE *v19;

  sub_100350394((void **)&v18);
  v6 = v18;
  v7 = v19;
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  v8 = objc_autoreleasePoolPush();
  v9 = objc_alloc_init((Class)CNContactStore);
  v10 = v9;
  if ((_DWORD)a2 == -2)
  {
    v11 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v12 = (void *)v11;
  }
  else
  {
    v13 = sub_10035041C((uint64_t)v9, v9, a2);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v15 = sub_1003505C0(a1, v10, v14, 0, 0, -1, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v15);

  }
  if ((_DWORD)a2 != -1 && a3)
    sub_1003507C0(v11, v10, v12);
  v16 = objc_msgSend(v12, "count") + ((unint64_t)(v7 - v6) >> 2);

  objc_autoreleasePoolPop(v8);
  return v16;
}

void sub_10035036C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100350394(void **a1@<X8>)
{
  _DWORD *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = sub_1002B46E0((uint64_t)(a1 + 2), 1uLL);
  v3 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = &v2[v5];
  *v2 = 0;
  v7 = v2 + 1;
  while (v4 != v3)
  {
    v8 = *((_DWORD *)v4 - 1);
    v4 -= 4;
    *--v2 = v8;
  }
  *a1 = v2;
  a1[1] = v7;
  a1[2] = v6;
  if (v3)
    operator delete(v3);
  a1[1] = v7;
}

void sub_100350400(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id sub_10035041C(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v20;

  v4 = a2;
  if ((_DWORD)a3 == -1)
  {
    v18 = 0;
  }
  else
  {
    if ((_DWORD)a3 == -2)
    {
      v5 = qword_100999888;
      if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_FAULT))
        sub_1006E2A28(v5, v6, v7, v8, v9, v10, v11, v12);
    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[CNGroup predicateForiOSLegacyIdentifier:](CNGroup, "predicateForiOSLegacyIdentifier:", a3));
    v20 = 0;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "groupsMatchingPredicate:error:", v13, &v20));
    v15 = v20;
    if (objc_msgSend(v14, "count") == (id)1)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "firstObject"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "identifier"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[CNContact predicateForContactsInGroupWithIdentifier:](CNContact, "predicateForContactsInGroupWithIdentifier:", v17));

    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
        sub_1006E29C8();
      v18 = 0;
    }

  }
  return v18;
}

void sub_10035057C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

id sub_1003505C0(uint64_t a1, void *a2, void *a3, int a4, unsigned int a5, int a6, int a7)
{
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  _QWORD v25[4];
  id v26;
  id v27;

  v12 = a2;
  v13 = a3;
  v14 = objc_alloc((Class)CNContactFetchRequest);
  v15 = sub_100353614((uint64_t)v14, a4, a7);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  v17 = objc_msgSend(v14, "initWithKeysToFetch:", v16);

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  objc_msgSend(v17, "setPredicate:", v13);
  if (a4 == 2)
    objc_msgSend(v17, "setSortOrder:", 1);
  v27 = 0;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472;
  v25[2] = sub_1003537F8;
  v25[3] = &unk_100929760;
  v19 = v18;
  v26 = v19;
  objc_msgSend(v12, "enumerateContactsWithFetchRequest:error:usingBlock:", v17, &v27, v25);
  v20 = v27;
  if (v20)
  {
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
      sub_1006E2A98();

    v19 = 0;
  }
  else
  {
    sub_100353698(0, v19, a4);
    sub_100353754(v21, v19, a5, a6);
  }
  v22 = v26;
  v23 = v19;

  return v23;
}

void sub_100350774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1003507C0(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  unint64_t v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v4 = a2;
  v5 = a3;
  v15 = v4;
  v6 = objc_msgSend(objc_alloc((Class)CNFavorites), "initWithContactStore:", v4);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "entries"));
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v8)
  {
    v9 = 0;
    v10 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v17 != v10)
          objc_enumerationMutation(v7);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i), "contactProperty"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "contact"));

        v14 = objc_msgSend(v5, "indexOfObject:", v13);
        if (v14 == (id)0x7FFFFFFFFFFFFFFFLL)
        {
          objc_msgSend(v5, "insertObject:atIndex:", v13, v9);
        }
        else
        {
          if ((unint64_t)v14 < v9)
            goto LABEL_11;
          objc_msgSend(v5, "exchangeObjectAtIndex:withObjectAtIndex:", v14, v9);
        }
        ++v9;
LABEL_11:

      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v8);
  }

}

void sub_100350960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1003509BC()
{
  operator new();
}

void sub_100350A1C()
{
  operator delete();
}

uint64_t sub_100350A40()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  void *context;
  id v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v0 = objc_autoreleasePoolPush();
  v14 = objc_alloc_init((Class)CNContactStore);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v15 = objc_msgSend(objc_alloc((Class)CNFavorites), "initWithContactStore:", v14);
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "entries"));
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  context = v0;
  v3 = 0;
  if (v2)
  {
    v4 = *(_QWORD *)v17;
    v5 = CNActionTypeAudioCall;
    v6 = CNActionBundleIdentifierPhone;
    do
    {
      for (i = 0; i != v2; i = (char *)i + 1)
      {
        if (*(_QWORD *)v17 != v4)
          objc_enumerationMutation(v1);
        v8 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "actionType"));
        if ((objc_msgSend(v9, "isEqualToString:", v5) & 1) != 0)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "bundleIdentifier"));
          v11 = objc_msgSend(v10, "isEqualToString:", v6);

          v3 = v3 + v11;
        }
        else
        {

        }
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v2);
  }

  objc_autoreleasePoolPop(context);
  return v3;
}

void sub_100350BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_100350C4C(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, unsigned int a6, int a7)
{
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  void *v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *__p;
  _BYTE *v28;
  uint64_t v29;

  __p = 0;
  v28 = 0;
  v29 = 0;
  sub_100350394(&__p);
  v14 = __p;
  v15 = (v28 - (_BYTE *)__p) >> 2;
  if (v15 <= a5)
  {
    v18 = a5 - ((unint64_t)(v28 - (_BYTE *)__p) >> 2);
    v28 = __p;
  }
  else
  {
    if (a5)
    {
      v16 = (char *)__p + 4 * a5;
      v17 = v28 - v16;
      if (v28 != v16)
        memmove(__p, v16, v28 - v16);
      v28 = &v14[v17];
      v15 = (&v14[v17] - (_BYTE *)__p) >> 2;
    }
    if (v15 < a6)
      a6 -= v15;
    else
      a6 = 0;
    v18 = 0;
  }
  v19 = objc_autoreleasePoolPush();
  v20 = objc_alloc_init((Class)CNContactStore);
  v21 = v20;
  if ((_DWORD)a2 == -2)
  {
    v22 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v23 = (void *)v22;
  }
  else
  {
    v24 = sub_10035041C((uint64_t)v20, v20, a2);
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    v26 = sub_1003505C0(a1, v21, v25, a4, v18, a6, a7);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v26);

  }
  if ((_DWORD)a2 != -1)
  {
    if (a3)
      sub_1003507C0(v22, v21, v23);
  }
  operator new();
}

void sub_100350E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100350E70()
{
  operator new();
}

void sub_100350EF0()
{
  operator delete();
}

void sub_100350F34()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  id v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v0 = objc_autoreleasePoolPush();
  v12 = objc_alloc_init((Class)CNContactStore);
  v1 = objc_msgSend(objc_alloc((Class)CNFavorites), "initWithContactStore:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array", v0, v1, v12));
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "entries"));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v15;
    v5 = CNActionTypeAudioCall;
    v6 = CNActionBundleIdentifierPhone;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v4)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "actionType"));
        if ((objc_msgSend(v9, "isEqualToString:", v5) & 1) != 0)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "bundleIdentifier"));
          v11 = objc_msgSend(v10, "isEqualToString:", v6);

          if (v11)
            objc_msgSend(v13, "addObject:", v8);
        }
        else
        {

        }
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v3);
  }

  operator new();
}

void sub_100351130()
{
  operator delete();
}

void sub_1003511BC()
{
  operator new();
}

void sub_10035121C()
{
  operator delete();
}

uint64_t sub_100351240(unsigned int a1)
{
  void *v1;
  void *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  std::string v22;
  _BYTE v23[32];
  __int128 v24;
  uint64_t v25;

  v25 = 0;
  v24 = 0u;
  memset(v23, 0, sizeof(v23));
  memset(&v22, 0, sizeof(v22));
  if (a1 != 1)
  {
    if (!a1)
    {
      v1 = (void *)objc_claimAutoreleasedReturnValue(+[Communicator myNumber](Communicator, "myNumber"));
      v2 = v1;
      if (v1)
      {
        std::string::assign((std::string *)v23, (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v1), "UTF8String"));
      }
      else
      {
        v11 = qword_100999888;
        if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
          sub_1006E2B68(v11, v12, v13, v14, v15, v16, v17, v18);
        std::string::assign((std::string *)v23, "**APPLE**");
      }
      *(_DWORD *)&v23[24] = 2;
      v19 = sub_100355F10(CFSTR("MY_NUMBER"), CFSTR("My Number"));
      v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v19));
      std::string::assign(&v22, (const std::string::value_type *)objc_msgSend(v20, "UTF8String"));

      operator new();
    }
    if (a1 >= 3)
    {
      v3 = qword_100999888;
      if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_FAULT))
        sub_1006E2AF8(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25) < 0)
    operator delete((void *)v24);
  if ((v23[23] & 0x80000000) != 0)
    operator delete(*(void **)v23);
  return 0;
}

void sub_100351554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a35 < 0)
    operator delete(__p);
  if (*(char *)(v35 - 113) < 0)
    operator delete(*(void **)(v35 - 136));
  sub_100353374(v35 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_10035162C(uint64_t a1, uint64_t a2, int a3)
{
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;

  v5 = objc_autoreleasePoolPush();
  v6 = objc_alloc_init((Class)CNContactStore);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[CNContact predicateForLegacyIdentifier:](CNContact, "predicateForLegacyIdentifier:", a2));
  v8 = sub_100351794(a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "unifiedContactsMatchingPredicate:keysToFetch:error:", v7, v9, 0));
  if (objc_msgSend(v10, "count"))
    operator new();

  objc_autoreleasePoolPop(v5);
  return 0;
}

void sub_100351734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id sub_100351794(int a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  if ((a1 & 6) != 0)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[CNContactFormatter descriptorForRequiredKeysForStyle:](CNContactFormatter, "descriptorForRequiredKeysForStyle:", 0));
    objc_msgSend(v2, "addObject:", v3);

    if ((a1 & 4) != 0)
    {
      objc_msgSend(v2, "addObject:", CNContactPhoneticGivenNameKey);
      objc_msgSend(v2, "addObject:", CNContactPhoneticFamilyNameKey);
    }
  }
  if ((a1 & 0x80) != 0)
    objc_msgSend(v2, "addObject:", CNContactPhoneNumbersKey);
  if ((a1 & 8) != 0)
    objc_msgSend(v2, "addObject:", CNContactThumbnailImageDataKey);
  if ((a1 & 0x20) != 0)
    objc_msgSend(v2, "addObject:", CNContactPostalAddressesKey);
  if ((a1 & 0x100) != 0)
    objc_msgSend(v2, "addObject:", CNContactEmailAddressesKey);
  if ((a1 & 0x1000) != 0)
    objc_msgSend(v2, "addObject:", CNContactJobTitleKey);
  if ((a1 & 0x10000) != 0)
  {
    objc_msgSend(v2, "addObject:", CNContactOrganizationNameKey);
    objc_msgSend(v2, "addObject:", CNContactDepartmentNameKey);
  }
  if ((a1 & 0x100000) != 0)
    objc_msgSend(v2, "addObject:", CNContactUrlAddressesKey);
  if ((a1 & 0x200000) != 0)
    objc_msgSend(v2, "addObject:", CNContactIOSLegacyIdentifierKey);
  if ((a1 & 0x800000) != 0)
    objc_msgSend(v2, "addObject:", CNContactNicknameKey);
  return v2;
}

void sub_100351918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100351934(uint64_t a1, void *a2, int a3, int a4)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  std::string *v14;
  void *v15;
  void *v16;
  _BOOL4 v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *i;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  BOOL v40;
  void *v41;
  NSMutableData *v42;
  void *v43;
  id v44;
  __int16 v45;
  id v46;
  uint64_t v47;
  void *j;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  id v63;
  uint64_t v64;
  void *k;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  int v75;
  void *v76;
  id v77;
  uint64_t v78;
  void *m;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  int v85;
  id v86;
  id v87;
  id obj;
  std::string v91;
  void *v92[2];
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  std::string v98;
  std::string v99;
  std::string v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  void *v107[2];
  char v108;
  void *v109;
  char v110;
  void *v111;
  char v112;
  void *v113;
  char v114;
  void *v115;
  char v116;
  __int128 v117;
  __int128 v118;
  __int128 __src;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  std::string v129;
  __int128 __dst;
  uint64_t v131;
  int v132;
  __int128 __p;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  std::string v139;
  std::string v140;
  std::string v141;
  std::string v142;
  std::string v143;
  std::string v144;
  std::string v145;
  std::string v146;
  std::string v147;
  std::string __str;
  _BYTE v149[128];
  _BYTE v150[128];
  _BYTE v151[128];
  _BYTE v152[128];

  LODWORD(v5) = a3;
  v86 = a2;
  v85 = (int)v5;
  if ((v5 & 6) == 0)
    goto LABEL_45;
  if ((v5 & 2) != 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[CNContactFormatter stringFromContact:style:](CNContactFormatter, "stringFromContact:style:", v86, 0));
    v4 = v6;
    if (v6)
    {
      sub_100091AE8(&__str, (char *)objc_msgSend(objc_retainAutorelease(v6), "UTF8String"));
      std::string::operator=((std::string *)(a1 + 16), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "givenName"));
  v8 = objc_msgSend(v7, "length");
  if (!v8)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "familyName"));
    if (!objc_msgSend(v4, "length"))
    {

      goto LABEL_20;
    }
  }
  v9 = objc_msgSend(v86, "contactType") == (id)1;
  if (!v8)
  {

    if (v9)
      goto LABEL_20;
LABEL_13:
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "givenName"));
    v11 = v10;
    if (v10)
    {
      sub_100091AE8(&v145, (char *)objc_msgSend(objc_retainAutorelease(v10), "UTF8String"));
      std::string::operator=((std::string *)(a1 + 64), &v145);
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v145.__r_.__value_.__l.__data_);
    }

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "familyName"));
    v13 = v12;
    if (!v12)
      goto LABEL_28;
    v13 = objc_retainAutorelease(v12);
    sub_100091AE8(&v144, (char *)objc_msgSend(v13, "UTF8String"));
    std::string::operator=((std::string *)(a1 + 40), &v144);
    if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_28;
    v14 = &v144;
    goto LABEL_27;
  }

  if (!v9)
    goto LABEL_13;
LABEL_20:
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "organizationName"));
  if (!v15)
  {
    v13 = 0;
    goto LABEL_28;
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[CNContactsUserDefaults sharedDefaults](CNContactsUserDefaults, "sharedDefaults"));
  v17 = objc_msgSend(v16, "sortOrder") == (id)2;

  v18 = objc_retainAutorelease(v15);
  v13 = v18;
  if (v17)
  {
    sub_100091AE8(&v147, (char *)objc_msgSend(v18, "UTF8String"));
    std::string::operator=((std::string *)(a1 + 64), &v147);
    if ((SHIBYTE(v147.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_28;
    v14 = &v147;
  }
  else
  {
    sub_100091AE8(&v146, (char *)objc_msgSend(v18, "UTF8String"));
    std::string::operator=((std::string *)(a1 + 40), &v146);
    if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_28;
    v14 = &v146;
  }
LABEL_27:
  operator delete(v14->__r_.__value_.__l.__data_);
LABEL_28:

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "middleName"));
  v20 = v19;
  if (v19)
  {
    sub_100091AE8(&v143, (char *)objc_msgSend(objc_retainAutorelease(v19), "UTF8String"));
    std::string::operator=((std::string *)(a1 + 88), &v143);
    if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v143.__r_.__value_.__l.__data_);
  }

  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "namePrefix"));
  v22 = v21;
  if (v21)
  {
    sub_100091AE8(&v142, (char *)objc_msgSend(objc_retainAutorelease(v21), "UTF8String"));
    std::string::operator=((std::string *)(a1 + 112), &v142);
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v142.__r_.__value_.__l.__data_);
  }

  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "nameSuffix"));
  v5 = v23;
  if (v23)
  {
    sub_100091AE8(&v141, (char *)objc_msgSend(objc_retainAutorelease(v23), "UTF8String"));
    std::string::operator=((std::string *)(a1 + 136), &v141);
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v141.__r_.__value_.__l.__data_);
  }

  LOBYTE(v5) = v85;
  if ((v85 & 4) != 0)
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "phoneticFamilyName"));
    v25 = v24;
    if (v24)
    {
      sub_100091AE8(&v140, (char *)objc_msgSend(objc_retainAutorelease(v24), "UTF8String"));
      std::string::operator=((std::string *)(a1 + 160), &v140);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
    }

    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "phoneticGivenName"));
    v5 = v26;
    if (v26)
    {
      sub_100091AE8(&v139, (char *)objc_msgSend(objc_retainAutorelease(v26), "UTF8String"));
      std::string::operator=((std::string *)(a1 + 184), &v139);
      if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v139.__r_.__value_.__l.__data_);
    }

    LOBYTE(v5) = v85;
  }
LABEL_45:
  if ((v5 & 0x80) != 0)
  {
    v137 = 0u;
    v138 = 0u;
    v135 = 0u;
    v136 = 0u;
    obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "phoneNumbers"));
    v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v135, v152, 16);
    if (v27)
    {
      v28 = *(_QWORD *)v136;
      do
      {
        for (i = 0; i != v27; i = (char *)i + 1)
        {
          if (*(_QWORD *)v136 != v28)
            objc_enumerationMutation(obj);
          v30 = *(void **)(*((_QWORD *)&v135 + 1) + 8 * (_QWORD)i);
          *(_QWORD *)&v120 = 0;
          v118 = 0u;
          __src = 0u;
          v117 = 0u;
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "value"));
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "stringValue"));
          v33 = sub_100353804(v32);
          v34 = (void *)objc_claimAutoreleasedReturnValue(v33);

          v35 = objc_retainAutorelease(v34);
          std::string::assign((std::string *)&v117, (const std::string::value_type *)objc_msgSend(v35, "UTF8String"));
          v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "label"));
          v37 = v36;
          if (v36)
          {
            DWORD2(v118) = sub_100353A30(v36);
            if (a4)
            {
              v38 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[CNLabeledValue localizedStringForLabel:](CNLabeledValue, "localizedStringForLabel:", v37)));
              std::string::assign((std::string *)&__src, (const std::string::value_type *)objc_msgSend(v38, "UTF8String"));

            }
          }

          if (SBYTE7(v118) < 0)
          {
            sub_10003430C(&__dst, (void *)v117, *((unint64_t *)&v117 + 1));
          }
          else
          {
            __dst = v117;
            v131 = v118;
          }
          v132 = DWORD2(v118);
          if (SBYTE7(v120) < 0)
          {
            sub_10003430C(&__p, (void *)__src, *((unint64_t *)&__src + 1));
          }
          else
          {
            __p = __src;
            v134 = v120;
          }
          sub_100353318((uint64_t *)a1, &__dst);
          if (SHIBYTE(v134) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v131) < 0)
            operator delete((void *)__dst);

          if (SBYTE7(v120) < 0)
            operator delete((void *)__src);
          if (SBYTE7(v118) < 0)
            operator delete((void *)v117);
        }
        v27 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v135, v152, 16);
      }
      while (v27);
    }

    LOBYTE(v5) = v85;
  }
  if ((v5 & 8) != 0)
  {
    v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "thumbnailImageData"));
    v40 = v39 == 0;

    if (!v40)
    {
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "thumbnailImageData"));
      v42 = sub_100353B58(v41);
      v43 = (void *)objc_claimAutoreleasedReturnValue(v42);

      if (v43)
      {
        v44 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "base64EncodedStringWithOptions:", 0)));
        sub_100091AE8(&v129, (char *)objc_msgSend(v44, "UTF8String"));
        std::string::operator=((std::string *)(a1 + 208), &v129);
        if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v129.__r_.__value_.__l.__data_);

      }
    }
  }
  v45 = v85;
  if ((v85 & 0x20) != 0)
  {
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v87 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "postalAddresses"));
    v46 = objc_msgSend(v87, "countByEnumeratingWithState:objects:count:", &v125, v151, 16);
    if (v46)
    {
      v47 = *(_QWORD *)v126;
      do
      {
        for (j = 0; j != v46; j = (char *)j + 1)
        {
          if (*(_QWORD *)v126 != v47)
            objc_enumerationMutation(v87);
          v49 = *(void **)(*((_QWORD *)&v125 + 1) + 8 * (_QWORD)j);
          v123 = 0u;
          v124 = 0u;
          v121 = 0u;
          v122 = 0u;
          __src = 0u;
          v120 = 0u;
          v117 = 0u;
          v118 = 0u;
          v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "value"));
          v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "street"));

          if (v51)
            std::string::assign((std::string *)&v117, (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v51), "UTF8String"));

          v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "value"));
          v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "city"));

          if (v53)
            std::string::assign((std::string *)((char *)&v118 + 8), (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v53), "UTF8String"));

          v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "value"));
          v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "state"));

          if (v55)
            std::string::assign((std::string *)&v120, (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v55), "UTF8String"));

          v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "value"));
          v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "postalCode"));

          if (v57)
            std::string::assign((std::string *)((char *)&v121 + 8), (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v57), "UTF8String"));

          v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "value"));
          v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "country"));

          if (v59)
            std::string::assign((std::string *)&v123, (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v59), "UTF8String"));

          v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "label"));
          v61 = v60;
          if (v60)
            DWORD2(v124) = sub_100353A30(v60);

          sub_10035583C((char *)v107, &v117);
          sub_100355528((uint64_t *)(a1 + 256), (__int128 *)v107);
          if (v116 < 0)
            operator delete(v115);
          if (v114 < 0)
            operator delete(v113);
          if (v112 < 0)
            operator delete(v111);
          if (v110 < 0)
            operator delete(v109);
          if (v108 < 0)
            operator delete(v107[0]);
          if (SBYTE7(v124) < 0)
            operator delete((void *)v123);
          if (SHIBYTE(v122) < 0)
            operator delete(*((void **)&v121 + 1));
          if (SBYTE7(v121) < 0)
            operator delete((void *)v120);
          if (SHIBYTE(__src) < 0)
            operator delete(*((void **)&v118 + 1));
          if (SBYTE7(v118) < 0)
            operator delete((void *)v117);
        }
        v46 = objc_msgSend(v87, "countByEnumeratingWithState:objects:count:", &v125, v151, 16);
      }
      while (v46);
    }

    v45 = v85;
  }
  if ((v45 & 0x100) != 0)
  {
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "emailAddresses"));
    v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v103, v150, 16);
    if (v63)
    {
      v64 = *(_QWORD *)v104;
      do
      {
        for (k = 0; k != v63; k = (char *)k + 1)
        {
          if (*(_QWORD *)v104 != v64)
            objc_enumerationMutation(v62);
          v66 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * (_QWORD)k);
          v117 = 0uLL;
          *(_QWORD *)&v118 = 0;
          v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v66, "value"));
          v68 = v67;
          if (v67)
            std::string::assign((std::string *)&v117, (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v67), "UTF8String"));

          if (SBYTE7(v118) < 0)
          {
            sub_10003430C(&v101, (void *)v117, *((unint64_t *)&v117 + 1));
          }
          else
          {
            v101 = v117;
            v102 = v118;
          }
          sub_100353DF8(a1, &v101);
          if (SHIBYTE(v102) < 0)
            operator delete((void *)v101);
          if (SBYTE7(v118) < 0)
            operator delete((void *)v117);
        }
        v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v103, v150, 16);
      }
      while (v63);
    }

    v45 = v85;
  }
  if ((v45 & 0x1000) != 0)
  {
    v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "jobTitle"));
    v70 = v69;
    if (v69)
    {
      sub_100091AE8(&v100, (char *)objc_msgSend(objc_retainAutorelease(v69), "UTF8String"));
      std::string::operator=((std::string *)(a1 + 304), &v100);
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v100.__r_.__value_.__l.__data_);
    }

  }
  if ((v85 & 0x10000) != 0)
  {
    v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "organizationName"));
    v72 = v71;
    if (v71)
    {
      sub_100091AE8(&v99, (char *)objc_msgSend(objc_retainAutorelease(v71), "UTF8String"));
      std::string::operator=((std::string *)(a1 + 328), &v99);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v99.__r_.__value_.__l.__data_);
    }

    v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "departmentName"));
    v74 = v73;
    if (v73)
    {
      sub_100091AE8(&v98, (char *)objc_msgSend(objc_retainAutorelease(v73), "UTF8String"));
      std::string::operator=((std::string *)(a1 + 352), &v98);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
    }

  }
  v75 = v85;
  if ((v85 & 0x100000) != 0)
  {
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "urlAddresses"));
    v77 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v94, v149, 16);
    if (v77)
    {
      v78 = *(_QWORD *)v95;
      do
      {
        for (m = 0; m != v77; m = (char *)m + 1)
        {
          if (*(_QWORD *)v95 != v78)
            objc_enumerationMutation(v76);
          v80 = *(void **)(*((_QWORD *)&v94 + 1) + 8 * (_QWORD)m);
          v117 = 0uLL;
          *(_QWORD *)&v118 = 0;
          v81 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "value"));
          v82 = v81;
          if (v81)
            std::string::assign((std::string *)&v117, (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v81), "UTF8String"));

          if (SBYTE7(v118) < 0)
          {
            sub_10003430C(v92, (void *)v117, *((unint64_t *)&v117 + 1));
          }
          else
          {
            *(_OWORD *)v92 = v117;
            v93 = v118;
          }
          sub_100353E38(a1, (__int128 *)v92);
          if (SHIBYTE(v93) < 0)
            operator delete(v92[0]);
          if (SBYTE7(v118) < 0)
            operator delete((void *)v117);
        }
        v77 = objc_msgSend(v76, "countByEnumeratingWithState:objects:count:", &v94, v149, 16);
      }
      while (v77);
    }

    v75 = v85;
  }
  if ((v75 & 0x200000) != 0)
    *(_DWORD *)(a1 + 8) = objc_msgSend(v86, "iOSLegacyIdentifier") + 2;
  if ((v85 & 0x800000) != 0)
  {
    v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "nickname"));
    v84 = v83;
    if (v83)
    {
      sub_100091AE8(&v91, (char *)objc_msgSend(objc_retainAutorelease(v83), "UTF8String"));
      std::string::operator=((std::string *)(a1 + 400), &v91);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
    }

  }
}

void sub_10035270C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete((void *)STACK[0x3F0]);

  _Unwind_Resume(a1);
}

uint64_t sub_100352BD0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  if (a2 > 1)
    v2 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(a1, a2 - 2);
  else
    v2 = sub_100351240(a2);
  if (v2)
    operator new();
  return 0;
}

void sub_100352C54()
{
  operator delete();
}

uint64_t sub_100352C78(uint64_t a1, uint64_t *a2, int a3, unsigned int a4, int a5)
{
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;

  v10 = objc_autoreleasePoolPush();
  v11 = objc_alloc_init((Class)CNContactStore);
  if (*((char *)a2 + 23) < 0)
    a2 = (uint64_t *)*a2;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[CNContact predicateForContactsMatchingName:](CNContact, "predicateForContactsMatchingName:", v12));

  v14 = sub_1003505C0(a1, v11, v13, a3, a4, a5, 0);
  if (objc_claimAutoreleasedReturnValue(v14))
    operator new();

  objc_autoreleasePoolPop(v10);
  return 0;
}

void sub_100352DB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  operator delete();
}

uint64_t sub_100352E1C(uint64_t a1, uint64_t *a2, int a3, unsigned int a4, int a5)
{
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;

  v10 = objc_autoreleasePoolPush();
  v11 = objc_alloc_init((Class)CNContactStore);
  v12 = objc_alloc((Class)CNPhoneNumber);
  if (*((char *)a2 + 23) < 0)
    a2 = (uint64_t *)*a2;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
  v14 = objc_msgSend(v12, "initWithStringValue:", v13);

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[CNContact predicateForContactsMatchingPhoneNumber:](CNContact, "predicateForContactsMatchingPhoneNumber:", v14));
  v16 = sub_1003505C0(a1, v11, v15, a3, a4, a5, 0);
  if (objc_claimAutoreleasedReturnValue(v16))
    operator new();

  objc_autoreleasePoolPop(v10);
  return 0;
}

void sub_100352F7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  operator delete();
}

uint64_t sub_100352FEC(uint64_t a1, unsigned int a2)
{
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned int v12;

  v3 = objc_autoreleasePoolPush();
  v4 = objc_alloc_init((Class)CNContactStore);
  v5 = objc_msgSend(objc_alloc((Class)CNFavorites), "initWithContactStore:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "entries"));
  v7 = objc_msgSend(v6, "count");

  if ((unint64_t)v7 > a2)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "entries"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectAtIndexedSubscript:", a2));

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "actionType"));
    if ((objc_msgSend(v10, "isEqualToString:", CNActionTypeAudioCall) & 1) != 0)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "bundleIdentifier"));
      v12 = objc_msgSend(v11, "isEqualToString:", CNActionBundleIdentifierPhone);

      if (v12)
        operator new();
    }
    else
    {

    }
  }

  objc_autoreleasePoolPop(v3);
  return 0;
}

void sub_100353248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  if (a14 < 0)
    operator delete(__p);

  sub_100353374((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100353318(uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v4 = a1[31];
  v3 = a1 + 31;
  v5 = *(v3 - 1);
  if (v5 >= v4)
  {
    result = sub_1003551CC(a1 + 29, a2);
  }
  else
  {
    sub_1003552EC((int)v3, (_QWORD *)*(v3 - 1), a2);
    result = v5 + 56;
    a1[30] = v5 + 56;
  }
  a1[30] = result;
  return result;
}

void sub_10035336C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 240) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100353374(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1003533B4(_QWORD *a1@<X8>)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  BOOL v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  void *v14;
  __int128 v15;
  uint64_t v16;
  id v17;
  _QWORD v18[2];

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = objc_autoreleasePoolPush();
  v3 = objc_alloc_init((Class)CNContactStore);
  v18[0] = CNContactNicknameKey;
  v18[1] = CNContactGivenNameKey;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v18, 2));
  v5 = objc_alloc_init((Class)NSString);
  v17 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_ios_meContactWithKeysToFetch:error:", v4, &v17));
  v7 = v17;
  if (!v7)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "nickname"));
    v10 = objc_msgSend(v9, "length") == 0;

    if (v10)
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "givenName"));
      v13 = objc_msgSend(v12, "length") == 0;

      if (v13)
      {
        v14 = v5;
        goto LABEL_9;
      }
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "givenName"));
    }
    else
    {
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "nickname"));
    }
    v14 = (void *)v11;

LABEL_9:
    v5 = objc_retainAutorelease(v14);
    sub_100091AE8(&v15, (char *)objc_msgSend(v5, "UTF8String"));
    *(_OWORD *)a1 = v15;
    a1[2] = v16;
    goto LABEL_10;
  }
  v8 = qword_100999888;
  if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
    sub_1006E2B9C((uint64_t)v7, v8);
LABEL_10:

  objc_autoreleasePoolPop(v2);
}

void sub_1003535A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

id sub_100353614(uint64_t a1, int a2, int a3)
{
  void *v5;
  void *v6;

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v6 = v5;
  if (a2 == 1)
    objc_msgSend(v5, "addObject:", CNContactIOSLegacyIdentifierKey);
  if (a3)
    objc_msgSend(v6, "addObject:", CNContactPhoneNumbersKey);
  return v6;
}

void sub_100353688(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100353698(uint64_t a1, void *a2, int a3)
{
  id v4;

  v4 = a2;
  if (a3 == 1)
    objc_msgSend(v4, "sortUsingComparator:", &stru_100929738);

}

void sub_1003536E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

int64_t sub_1003536F4(id a1, CNContact *a2, CNContact *a3)
{
  CNContact *v4;
  unsigned int v5;
  unsigned int v6;
  int64_t v7;

  v4 = a3;
  v5 = -[CNContact iOSLegacyIdentifier](a2, "iOSLegacyIdentifier");
  v6 = -[CNContact iOSLegacyIdentifier](v4, "iOSLegacyIdentifier");
  if (v5 < v6)
    v7 = -1;
  else
    v7 = v5 > v6;

  return v7;
}

void sub_100353740(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100353754(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  unint64_t v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  v6 = a4 + a3;
  if ((unint64_t)objc_msgSend(v8, "count") > v6)
    objc_msgSend(v8, "removeObjectsInRange:", v6, (char *)objc_msgSend(v8, "count") - v6);
  if (a3)
  {
    if ((unint64_t)objc_msgSend(v8, "count") >= a3)
      v7 = a3;
    else
      v7 = objc_msgSend(v8, "count");
    objc_msgSend(v8, "removeObjectsInRange:", 0, v7);
  }

}

void sub_1003537E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_1003537F8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
}

id sub_100353804(void *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v1 = a1;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v2 = objc_msgSend(&off_1009611E8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
  if (v2)
  {
    v13 = *(_QWORD *)v15;
    do
    {
      v3 = 0;
      do
      {
        if (*(_QWORD *)v15 != v13)
          objc_enumerationMutation(&off_1009611E8);
        v4 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v3);
        v5 = objc_alloc_init((Class)NSNumberFormatter);
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale localeWithLocaleIdentifier:](NSLocale, "localeWithLocaleIdentifier:", v4));
        objc_msgSend(v5, "setLocale:", v6);

        v7 = 0;
        v8 = v1;
        do
        {
          v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v7));
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringFromNumber:", v9));
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "stringValue"));
          v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "stringByReplacingOccurrencesOfString:withString:", v10, v11));

          ++v7;
          v8 = v1;
        }
        while (v7 != 10);

        v3 = (char *)v3 + 1;
      }
      while (v3 != v2);
      v2 = objc_msgSend(&off_1009611E8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    }
    while (v2);
  }
  return v1;
}

void sub_1003539C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100353A30(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CNLabelPhoneNumberMobile) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CNLabelPhoneNumberiPhone) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CNLabelHome) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CNLabelWork) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CNLabelPhoneNumberMain) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CNLabelPhoneNumberHomeFax) & 1) != 0
         || (objc_msgSend(v1, "isEqualToString:", CNLabelPhoneNumberWorkFax) & 1) != 0
         || objc_msgSend(v1, "isEqualToString:", CNLabelPhoneNumberOtherFax))
  {
    v2 = 6;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_100353B48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NSMutableData *sub_100353B58(void *a1)
{
  const __CFData *v1;
  NSMutableData *v2;
  void *v3;
  const __CFDictionary *v4;
  CGImageSource *v5;
  CGImage *ThumbnailAtIndex;
  CGImageDestination *v7;
  const __CFDictionary *v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSMutableData *v18;
  CFStringRef v20;
  _UNKNOWN **v21;
  _QWORD v22[2];
  _QWORD v23[2];

  v1 = a1;
  v2 = objc_opt_new(NSMutableData);
  v3 = objc_autoreleasePoolPush();
  v22[0] = kCGImageSourceCreateThumbnailFromImageAlways;
  v22[1] = kCGImageSourceThumbnailMaxPixelSize;
  v23[0] = &__kCFBooleanTrue;
  v23[1] = &off_1009606B8;
  v4 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v23, v22, 2));
  v5 = CGImageSourceCreateWithData(v1, 0);
  ThumbnailAtIndex = CGImageSourceCreateThumbnailAtIndex(v5, 0, v4);
  v7 = CGImageDestinationCreateWithData((CFMutableDataRef)v2, CFSTR("public.jpeg"), 1uLL, 0);
  v20 = kCGImageDestinationLossyCompressionQuality;
  v21 = &off_100961398;
  v8 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1));
  CGImageDestinationAddImage(v7, ThumbnailAtIndex, v8);
  CGImageDestinationFinalize(v7);
  CFRelease(v5);
  CFRelease(ThumbnailAtIndex);
  CFRelease(v7);
  if (v2 && -[NSMutableData length](v2, "length"))
  {
    v9 = 1;
  }
  else
  {
    v10 = qword_100999888;
    if (os_log_type_enabled((os_log_t)qword_100999888, OS_LOG_TYPE_ERROR))
      sub_1006E2C0C(v10, v11, v12, v13, v14, v15, v16, v17);
    v9 = 0;
  }

  objc_autoreleasePoolPop(v3);
  if (v9)
    v18 = v2;
  else
    v18 = 0;

  return v18;
}

void sub_100353D3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100353D88(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_100353DF8(uint64_t a1, __int128 *a2)
{
  char **v3;
  unint64_t v4;
  char *result;

  v3 = (char **)(a1 + 280);
  v4 = *(_QWORD *)(a1 + 288);
  if (v4 >= *(_QWORD *)(a1 + 296))
  {
    result = sub_100355A1C(v3, a2);
  }
  else
  {
    sub_1003559C0(v3, a2);
    result = (char *)(v4 + 24);
  }
  *(_QWORD *)(a1 + 288) = result;
  return result;
}

char *sub_100353E38(uint64_t a1, __int128 *a2)
{
  char **v3;
  unint64_t v4;
  char *result;

  v3 = (char **)(a1 + 376);
  v4 = *(_QWORD *)(a1 + 384);
  if (v4 >= *(_QWORD *)(a1 + 392))
  {
    result = sub_100355BE0(v3, a2);
  }
  else
  {
    sub_100355B84(v3, a2);
    result = (char *)(v4 + 24);
  }
  *(_QWORD *)(a1 + 384) = result;
  return result;
}

uint64_t sub_100353E78(const std::string *a1)
{
  if (!std::string::compare(a1, "mobile"))
    return 1;
  if (!std::string::compare(a1, "iPhone"))
    return 2;
  if (!std::string::compare(a1, "home"))
    return 3;
  if (!std::string::compare(a1, "work"))
    return 4;
  if (!std::string::compare(a1, "main"))
    return 5;
  if (!std::string::compare(a1, "home fax")
    || !std::string::compare(a1, "work fax")
    || !std::string::compare(a1, "other fax"))
  {
    return 6;
  }
  return 0;
}

uint64_t sub_100353F64(uint64_t a1, size_t a2, void *a3)
{
  id v5;

  v5 = a3;
  sub_10058662C(a1, a2);
  *(_QWORD *)a1 = off_100929790;
  *(_QWORD *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return a1;
}

void sub_100353FBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100353FCC(uint64_t a1)
{

  return sub_100586684(a1);
}

id sub_100354004(uint64_t a1, int a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  if (*(_DWORD *)(a1 + 32) != a2)
  {
    *(_DWORD *)(a1 + 32) = a2;
    v3 = sub_100351794(a2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
    v5 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v4;

  }
  return *(id *)(a1 + 40);
}

_QWORD *sub_10035404C(_QWORD *a1, void *a2, _DWORD *a3, void *a4)
{
  id v7;
  id v8;

  v7 = a2;
  v8 = a4;
  sub_100353F64((uint64_t)a1, (unsigned __int16)((unsigned __int16)objc_msgSend(v8, "count") + ((a3[2] - *a3) >> 2)), v7);
  *a1 = off_1009297C0;
  sub_1002D70C0(a1 + 6, (uint64_t)a3);
  a1[9] = v8;

  return a1;
}

void sub_1003540D0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  sub_100353FCC(v2);

  _Unwind_Resume(a1);
}

uint64_t sub_1003540F4(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1009297C0;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  return sub_100353FCC(a1);
}

void sub_10035413C(uint64_t a1)
{
  sub_1003540F4(a1);
  operator delete();
}

uint64_t sub_100354160(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int16 v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v2 = *(_QWORD *)(a1 + 48);
  v1 = *(_QWORD *)(a1 + 56);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = *(id *)(a1 + 72);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  v5 = (unint64_t)(v1 - v2) >> 2;
  if (v4)
  {
    v6 = *(_QWORD *)v14;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v7);
        v9 = objc_autoreleasePoolPush();
        if (objc_msgSend(v8, "isKeyAvailable:", CNContactPhoneNumbersKey, (_QWORD)v13))
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "phoneNumbers"));
          v11 = (unsigned __int16)objc_msgSend(v10, "count");

          LOWORD(v5) = v5 + v11;
        }
        objc_autoreleasePoolPop(v9);
        v7 = (char *)v7 + 1;
      }
      while (v4 != v7);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v4);
  }

  return (unsigned __int16)v5;
}

void sub_1003542B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003542DC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 56) - v2) >> 2))
    operator new();
  return sub_100351240(*(_DWORD *)(v2 + 4 * a2));
}

void sub_100354418(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100354470(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v4 = sub_1004754C4(a2);
  v5 = objc_alloc_init((Class)CNContactStore);
  sub_100353F64(a1, v4, v5);

  *(_QWORD *)a1 = off_1009297F0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = 0;
  v6 = objc_alloc_init((Class)NSDateFormatter);
  v7 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v6;

  v8 = objc_msgSend(objc_alloc((Class)NSLocale), "initWithLocaleIdentifier:", CFSTR("en_US_POSIX"));
  objc_msgSend(*(id *)(a1 + 56), "setLocale:", v8);

  objc_msgSend(*(id *)(a1 + 56), "setDateFormat:", CFSTR("yyyyMMdd'T'HHmmss"));
  return a1;
}

void sub_100354530(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v3 = v2;

  sub_100353FCC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100354568(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009297F0;
  sub_100475454(*(_QWORD *)(a1 + 48));

  return sub_100353FCC(a1);
}

void sub_1003545A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100353FCC(v1);
  _Unwind_Resume(a1);
}

void sub_1003545C4(uint64_t a1)
{
  sub_100354568(a1);
  operator delete();
}

uint64_t sub_1003545E8(uint64_t a1)
{
  return (unsigned __int16)sub_1004754C4(*(_QWORD *)(a1 + 48));
}

void sub_100354604()
{
  operator new();
}

void sub_100354B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  uint64_t v29;

  if (a28 < 0)
    operator delete(__p);
  sub_100353374(v29 - 144);

  _Unwind_Resume(a1);
}

_QWORD *sub_100354C04(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v5 = a2;
  v6 = a3;
  sub_100353F64((uint64_t)a1, (unsigned __int16)objc_msgSend(v6, "count"), v5);
  *a1 = off_100929820;
  a1[6] = v6;

  return a1;
}

void sub_100354C68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100354C7C(uint64_t a1)
{

  return sub_100353FCC(a1);
}

void sub_100354CA4(uint64_t a1)
{

  sub_100353FCC(a1);
  operator delete();
}

uint64_t sub_100354CE0(uint64_t a1)
{
  return (unsigned __int16)objc_msgSend(*(id *)(a1 + 48), "count");
}

void sub_100354CFC()
{
  operator new();
}

void sub_100354F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  if (a14 < 0)
    operator delete(__p);

  sub_100353374((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_10035505C()
{
  void *v0;

  JUMPOUT(0x100355050);
}

void sub_100355068()
{
  JUMPOUT(0x100355050);
}

void sub_100355070()
{
  operator delete();
}

void sub_100355094()
{
  operator delete();
}

uint64_t sub_1003550A8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1009298D8;
  v2 = a1[3];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_100586684((uint64_t)a1);
}

void sub_1003550E8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1009298D8;
  v2 = a1[3];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_100586684((uint64_t)a1);
  operator delete();
}

uint64_t sub_10035513C(uint64_t a1)
{
  return (unsigned __int16)(28087
                          * ((*(_DWORD *)(*(_QWORD *)(a1 + 24) + 240)
                                          - *(_DWORD *)(*(_QWORD *)(a1 + 24) + 232)) >> 3));
}

void sub_100355164()
{
  operator new();
}

void sub_1003551A8()
{
  operator delete();
}

uint64_t sub_1003551CC(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  unint64_t v3;
  int v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  uint64_t *v15;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492)
    abort();
  v6 = (_DWORD)a1 + 16;
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v7 = 0x492492492492492;
  else
    v7 = v3;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)sub_100355428((uint64_t)(a1 + 2), v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = &v8[56 * v2];
  v14 = &v8[56 * v7];
  sub_1003552EC(v6, v12, a2);
  v13 = v12 + 56;
  sub_100355384(a1, &v11);
  v9 = a1[1];
  sub_100355470(&v11);
  return v9;
}

void sub_1003552D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100355470((void **)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_1003552EC(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v5;
  _BYTE *result;
  __int128 v7;

  if (*((char *)a3 + 23) < 0)
  {
    sub_10003430C(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    __dst[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)__dst = v5;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a3 + 6);
  result = __dst + 4;
  if (*((char *)a3 + 55) < 0)
    return sub_10003430C(result, *((void **)a3 + 4), *((_QWORD *)a3 + 5));
  v7 = a3[2];
  __dst[6] = *((_QWORD *)a3 + 6);
  *(_OWORD *)result = v7;
  return result;
}

void sub_100355368(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100355384(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 56;
      v6 = *(_OWORD *)(v3 - 56);
      *(_QWORD *)(v4 - 40) = *(_QWORD *)(v3 - 40);
      *(_OWORD *)(v4 - 56) = v6;
      *(_QWORD *)(v3 - 48) = 0;
      *(_QWORD *)(v3 - 40) = 0;
      *(_QWORD *)(v3 - 56) = 0;
      *(_DWORD *)(v4 - 32) = *(_DWORD *)(v3 - 32);
      v7 = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v7;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      v3 -= 56;
      v4 -= 56;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v8 = *result;
  *result = v5;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *sub_100355428(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    sub_10007ABD4();
  return operator new(56 * a2);
}

void **sub_100355470(void **a1)
{
  sub_1003554A0(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_1003554A0(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 56;
    sub_1003554E4(v4, i - 56);
  }
}

void sub_1003554E4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void *sub_100355528(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 7;
    if ((unint64_t)(v10 + 1) >> 57)
      abort();
    v11 = v5 - *a1;
    v12 = v11 >> 6;
    if (v11 >> 6 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFF80)
      v13 = 0x1FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)sub_100355720(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[128 * v10];
    v18 = &v14[128 * v13];
    sub_10035583C(v16, a2);
    v17 = v16 + 128;
    sub_100355634(a1, &v15);
    v9 = a1[1];
    result = sub_100355754(&v15);
  }
  else
  {
    result = sub_10035583C(*(char **)(v4 - 8), a2);
    v9 = v7 + 128;
    a1[1] = v7 + 128;
  }
  a1[1] = v9;
  return result;
}

void sub_100355614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100355634(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 128;
      v6 = *(_OWORD *)(v3 - 128);
      *(_QWORD *)(v4 - 112) = *(_QWORD *)(v3 - 112);
      *(_OWORD *)(v4 - 128) = v6;
      *(_QWORD *)(v3 - 120) = 0;
      *(_QWORD *)(v3 - 112) = 0;
      *(_QWORD *)(v3 - 128) = 0;
      v7 = *(_OWORD *)(v3 - 104);
      *(_QWORD *)(v4 - 88) = *(_QWORD *)(v3 - 88);
      *(_OWORD *)(v4 - 104) = v7;
      *(_QWORD *)(v3 - 96) = 0;
      *(_QWORD *)(v3 - 88) = 0;
      *(_QWORD *)(v3 - 104) = 0;
      v8 = *(_OWORD *)(v3 - 80);
      *(_QWORD *)(v4 - 64) = *(_QWORD *)(v3 - 64);
      *(_OWORD *)(v4 - 80) = v8;
      *(_QWORD *)(v3 - 72) = 0;
      *(_QWORD *)(v3 - 64) = 0;
      *(_QWORD *)(v3 - 80) = 0;
      v9 = *(_OWORD *)(v3 - 56);
      *(_QWORD *)(v4 - 40) = *(_QWORD *)(v3 - 40);
      *(_OWORD *)(v4 - 56) = v9;
      *(_QWORD *)(v3 - 56) = 0;
      *(_QWORD *)(v3 - 48) = 0;
      *(_QWORD *)(v3 - 40) = 0;
      v10 = *(_OWORD *)(v3 - 32);
      *(_QWORD *)(v4 - 16) = *(_QWORD *)(v3 - 16);
      *(_OWORD *)(v4 - 32) = v10;
      *(_QWORD *)(v3 - 32) = 0;
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_DWORD *)(v4 - 8) = *(_DWORD *)(v3 - 8);
      v3 -= 128;
      v4 -= 128;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v11 = *result;
  *result = v5;
  a2[1] = v11;
  v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void *sub_100355720(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57)
    sub_10007ABD4();
  return operator new(a2 << 7);
}

void **sub_100355754(void **a1)
{
  sub_100355784(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_100355784(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 128;
    sub_1003557C8(v4, i - 128);
  }
}

void sub_1003557C8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 119) < 0)
    operator delete(*(void **)(a2 + 96));
  if (*(char *)(a2 + 95) < 0)
    operator delete(*(void **)(a2 + 72));
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

char *sub_10035583C(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10003430C(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_10003430C(__dst + 48, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_10003430C(__dst + 72, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 72);
    *((_QWORD *)__dst + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  v8 = __dst + 96;
  if (*((char *)a2 + 119) < 0)
  {
    sub_10003430C(v8, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v9 = a2[6];
    *((_QWORD *)__dst + 14) = *((_QWORD *)a2 + 14);
    *(_OWORD *)v8 = v9;
  }
  *((_DWORD *)__dst + 30) = *((_DWORD *)a2 + 30);
  return __dst;
}

void sub_10035595C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1003559C0(_QWORD *result, __int128 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  v2 = result;
  v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    result = sub_10003430C((_BYTE *)result[1], *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_100355A14(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_100355A1C(char **a1, __int128 *a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  char *v19;
  char *v20;
  char *v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v2 = *a1;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v4;
  v25 = v7;
  if (v10)
    v11 = (char *)sub_1002A479C(v7, v10);
  else
    v11 = 0;
  v12 = &v11[24 * v3];
  v22 = v11;
  v23.i64[0] = (uint64_t)v12;
  v23.i64[1] = (uint64_t)v12;
  v24 = &v11[24 * v10];
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C(v12, *(void **)a2, *((_QWORD *)a2 + 1));
    v14 = (char *)v23.i64[1];
    v12 = (char *)v23.i64[0];
  }
  else
  {
    v13 = *a2;
    *((_QWORD *)v12 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v12 = v13;
    v14 = &v11[24 * v3];
  }
  v16 = *a1;
  v15 = (unint64_t)a1[1];
  if ((char *)v15 == *a1)
  {
    v18 = vdupq_n_s64(v15);
  }
  else
  {
    do
    {
      v17 = *(_OWORD *)(v15 - 24);
      *((_QWORD *)v12 - 1) = *(_QWORD *)(v15 - 8);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 24;
      *(_QWORD *)(v15 - 16) = 0;
      *(_QWORD *)(v15 - 8) = 0;
      *(_QWORD *)(v15 - 24) = 0;
      v15 -= 24;
    }
    while ((char *)v15 != v16);
    v18 = *(int64x2_t *)a1;
  }
  v19 = v14 + 24;
  *a1 = v12;
  a1[1] = v14 + 24;
  v23 = v18;
  v20 = a1[2];
  a1[2] = v24;
  v24 = v20;
  v22 = (char *)v18.i64[0];
  sub_1002A56A4((uint64_t)&v22);
  return v19;
}

void sub_100355B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002A56A4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100355B84(_QWORD *result, __int128 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  v2 = result;
  v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    result = sub_10003430C((_BYTE *)result[1], *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_100355BD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_100355BE0(char **a1, __int128 *a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  char *v19;
  char *v20;
  char *v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v2 = *a1;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v4;
  v25 = v7;
  if (v10)
    v11 = (char *)sub_1002A479C(v7, v10);
  else
    v11 = 0;
  v12 = &v11[24 * v3];
  v22 = v11;
  v23.i64[0] = (uint64_t)v12;
  v23.i64[1] = (uint64_t)v12;
  v24 = &v11[24 * v10];
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C(v12, *(void **)a2, *((_QWORD *)a2 + 1));
    v14 = (char *)v23.i64[1];
    v12 = (char *)v23.i64[0];
  }
  else
  {
    v13 = *a2;
    *((_QWORD *)v12 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v12 = v13;
    v14 = &v11[24 * v3];
  }
  v16 = *a1;
  v15 = (unint64_t)a1[1];
  if ((char *)v15 == *a1)
  {
    v18 = vdupq_n_s64(v15);
  }
  else
  {
    do
    {
      v17 = *(_OWORD *)(v15 - 24);
      *((_QWORD *)v12 - 1) = *(_QWORD *)(v15 - 8);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 24;
      *(_QWORD *)(v15 - 16) = 0;
      *(_QWORD *)(v15 - 8) = 0;
      *(_QWORD *)(v15 - 24) = 0;
      v15 -= 24;
    }
    while ((char *)v15 != v16);
    v18 = *(int64x2_t *)a1;
  }
  v19 = v14 + 24;
  *a1 = v12;
  a1[1] = v14 + 24;
  v23 = v18;
  v20 = a1[2];
  a1[2] = v24;
  v24 = v20;
  v22 = (char *)v18.i64[0];
  sub_1002A56A4((uint64_t)&v22);
  return v19;
}

void sub_100355D34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002A56A4((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100355D48(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (qword_100991F78 != -1)
    dispatch_once(&qword_100991F78, &stru_1009298F8);
  v8 = (id)qword_100991F70;
  v9 = v8;
  if (v8)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizations"));
    v11 = objc_claimAutoreleasedReturnValue(+[NSLocale preferredLanguages](NSLocale, "preferredLanguages"));
    v12 = (void *)v11;
    if (!v10
      || !v11
      || ((v13 = objc_autoreleasePoolPush(),
           v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle preferredLocalizationsFromArray:forPreferences:](NSBundle, "preferredLocalizationsFromArray:forPreferences:", v10, v12)), v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "firstObject")), v14, !v15)? (v16 = 0): (v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:localization:", v5, v6, v7, v15))), v15, objc_autoreleasePoolPop(v13), !v16))
    {
      v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", v5, v6, v7));
    }

  }
  else
  {
    v16 = v6;
  }

  return v16;
}

void sub_100355EC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

id sub_100355F10(void *a1, void *a2)
{
  id v2;

  v2 = sub_100355D48(a1, a2, CFSTR("Localizable"));
  return (id)objc_claimAutoreleasedReturnValue(v2);
}

id sub_100355F30(void *a1, void *a2)
{
  id v2;

  v2 = sub_100355D48(a1, a2, CFSTR("Localizable-Internal"));
  return (id)objc_claimAutoreleasedReturnValue(v2);
}

void sub_100355F50(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", CFSTR("/System/Library/PrivateFrameworks/MobileBluetooth.framework")));
  v1 = objc_claimAutoreleasedReturnValue(+[NSBundle bundleWithURL:](NSBundle, "bundleWithURL:"));
  v2 = (void *)qword_100991F70;
  qword_100991F70 = v1;

}

void sub_100355FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *sub_100355FCC(_QWORD *a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = off_100929928;
  a1[1] = off_100929A18;
  v3 = (_DWORD)a1 + 8;
  a1[2] = a2;
  v4 = (_DWORD)a1 + 24;
  v5 = sub_1004759E0();
  v6 = sub_10026C3D0(v4, v3, "com.apple.BTServer.avrcp", *(dispatch_queue_t *)(v5 + 8));
  sub_10026C40C(v6);
  return a1;
}

void sub_100356034(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10026C408(v1);
  _Unwind_Resume(a1);
}

void sub_10035604C(uint64_t a1)
{
  _QWORD v1[5];

  *(_QWORD *)(a1 + 16) = 0;
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_1003560A8;
  v1[3] = &unk_100917378;
  v1[4] = a1;
  sub_10026C4B8(a1 + 24, v1);
}

uint64_t sub_1003560A8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
  return result;
}

void sub_1003560C0(uint64_t a1, uint64_t a2, int a3)
{
  int64_t v5;
  xpc_object_t v6;
  void **v7;
  void *__p[2];
  char v9;

  if ((a3 - 501) <= 0xB && ((0xF1Fu >> (a3 + 11)) & 1) != 0)
  {
    v5 = qword_10073EB08[a3 - 501];
    v6 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v6, "kCommand", v5);
    sub_10046E9BC((unsigned __int8 *)(a2 + 128), __p);
    if (v9 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    xpc_dictionary_set_string(v6, "kSource", (const char *)v7);
    if (v9 < 0)
      operator delete(__p[0]);
    sub_1003561AC(a1, "SendCommand", v6, 0);
  }
}

void sub_100356190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1003561AC(uint64_t a1, char *a2, void *a3, void *a4)
{
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  char *v10;

  v6 = a1 + 24;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100359040;
  v8[3] = &unk_100929AF8;
  v9 = a4;
  v10 = a2;
  v7 = v9;
  sub_10026C614(v6, a2, a3, v8);

}

void sub_100356240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_100356258(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;
  uint64_t v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003562F4;
  v4[3] = &unk_100929A38;
  v5 = a2;
  v6 = a1;
  v3 = v5;
  sub_1003561AC(a1, "GetSettings", 0, v4);

}

void sub_1003562DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_1003562F4(uint64_t a1, int a2, xpc_object_t xdict)
{
  int v5;
  int v6;

  v5 = 1;
  v6 = 1;
  if (a2 == 4)
    sub_100356358(a1, xdict, &v6, &v5);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

unint64_t sub_100356358(int a1, xpc_object_t xdict, _DWORD *a3, _DWORD *a4)
{
  unint64_t int64;
  unint64_t result;

  int64 = xpc_dictionary_get_int64(xdict, "kRepeatMode");
  if (int64 <= 3)
    *a3 = dword_10073EB70[int64];
  result = xpc_dictionary_get_int64(xdict, "kShuffleMode");
  if (result <= 3)
    *a4 = dword_10073EB80[result];
  return result;
}

void sub_1003563D4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100356470;
  v4[3] = &unk_100929A60;
  v5 = a2;
  v3 = v5;
  sub_1003561AC(a1, "GetPlayStatus", 0, v4);

}

void sub_100356458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_100356470(uint64_t a1, int a2, xpc_object_t xdict)
{
  if (a2 == 4)
  {
    xpc_dictionary_get_double(xdict, "kTrackDuration");
    xpc_dictionary_get_double(xdict, "kTrackPosition");
    xpc_dictionary_get_int64(xdict, "kPlaybackState");
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100356510(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003565AC;
  v4[3] = &unk_100929A60;
  v5 = a2;
  v3 = v5;
  sub_1003561AC(a1, "GetElementAttributes", 0, v4);

}

void sub_100356594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1003565AC(uint64_t a1, int a2, void *a3)
{
  const char *string;
  const char *v7;
  const char *v8;
  const char *v9;
  xpc_object_t value;
  xpc_object_t v11;
  xpc_object_t v12;
  const char *v13;
  void *v14[2];
  void *v15[2];
  __int128 v16;
  void *v17[2];
  void *v18[2];
  __int128 v19;
  std::string __p;

  v19 = 0u;
  memset(&__p, 0, sizeof(__p));
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)v15 = 0u;
  v16 = 0u;
  *(_OWORD *)v14 = 0u;
  sub_100091AE8(v14, "");
  sub_100091AE8(&v15[1], "");
  sub_100091AE8(v17, "");
  sub_100091AE8(&v18[1], "");
  sub_100091AE8(&__p, "");
  if (a2 == 4)
  {
    string = xpc_dictionary_get_string(a3, "kTitle");
    if (string)
      std::string::assign((std::string *)v14, string);
    v7 = xpc_dictionary_get_string(a3, "kAlbum");
    if (v7)
      std::string::assign((std::string *)v17, v7);
    v8 = xpc_dictionary_get_string(a3, "kArtist");
    if (v8)
      std::string::assign((std::string *)&v15[1], v8);
    v9 = xpc_dictionary_get_string(a3, "kGenre");
    if (v9)
      std::string::assign((std::string *)&v18[1], v9);
    value = xpc_dictionary_get_value(a3, "kQueueIndex");
    if (value)
      xpc_int64_get_value(value);
    v11 = xpc_dictionary_get_value(a3, "kQueueCount");
    if (v11)
      xpc_int64_get_value(v11);
    v12 = xpc_dictionary_get_value(a3, "kDuration");
    if (v12)
      xpc_double_get_value(v12);
    v13 = xpc_dictionary_get_string(a3, "kImageHandle");
    if (v13)
      std::string::assign(&__p, v13);
  }
  (*(void (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2 == 4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[1]);
  if (SHIBYTE(v18[0]) < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v16) < 0)
    operator delete(v15[1]);
  if (SHIBYTE(v15[0]) < 0)
    operator delete(v14[0]);
}

void sub_1003567DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  sub_100356870((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100356870(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1003568E0(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  int v7;
  int64_t v8;
  int64_t v9;
  xpc_object_t v10;

  v4 = 3;
  v5 = -1;
  if (a2 == 2)
    v5 = 2;
  v6 = a2 == 3 || a2 == 2;
  if (a2 != 3)
    v4 = v5;
  v7 = a2 == 1 || v6;
  if (a2 == 1)
    v8 = 1;
  else
    v8 = v4;
  if (a3 == 1)
  {
    v9 = 1;
  }
  else if (a3 == 2)
  {
    v9 = 3;
  }
  else
  {
    if (!v7)
      return;
    v9 = -1;
  }
  v10 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v10, "kRepeatMode", v8);
  xpc_dictionary_set_int64(v10, "kShuffleMode", v9);
  sub_1003561AC(a1, "SetSettings", v10, 0);
}

void sub_1003569C8(uint64_t a1, void *a2, uint64_t a3)
{
  xpc_object_t v5;
  uint64_t i;

  v5 = xpc_array_create(0, 0);
  for (i = *(_QWORD *)(a3 + 8); i != a3; i = *(_QWORD *)(i + 8))
    xpc_array_set_int64(v5, 0xFFFFFFFFFFFFFFFFLL, *(unsigned int *)(i + 16));
  xpc_dictionary_set_value(a2, "kAttributeIDs", v5);
  xpc_release(v5);
}

const char *sub_100356A3C@<X0>(xpc_object_t xdict@<X1>, _QWORD *a2@<X8>)
{
  const char *result;

  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  if (xpc_dictionary_get_string(xdict, "kTitle"))
    operator new();
  if (xpc_dictionary_get_string(xdict, "kArtist"))
    operator new();
  if (xpc_dictionary_get_string(xdict, "kAlbum"))
    operator new();
  if (xpc_dictionary_get_string(xdict, "kTrackNumber"))
    operator new();
  if (xpc_dictionary_get_string(xdict, "kTrackCount"))
    operator new();
  if (xpc_dictionary_get_string(xdict, "kGenre"))
    operator new();
  if (xpc_dictionary_get_string(xdict, "kPlayingTime"))
    operator new();
  result = xpc_dictionary_get_string(xdict, "kImageHandle");
  if (result)
    operator new();
  return result;
}

void sub_100357034(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  operator delete();
}

void sub_100357170(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  xpc_object_t v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v5 = a3;
  v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v6, "kPlayerId", a2);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100357248;
  v8[3] = &unk_100929A60;
  v7 = v5;
  v9 = v7;
  sub_1003561AC(a1, "SetAddressedPlayer", v6, v8);

}

void sub_100357228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_100357248(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100357254(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  xpc_object_t v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v5 = a3;
  v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v6, "kPlayerId", a2);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10035732C;
  v8[3] = &unk_100929A60;
  v7 = v5;
  v9 = v7;
  sub_1003561AC(a1, "SetBrowsedPlayer", v6, v8);

}

void sub_10035730C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_10035732C(uint64_t a1, int a2, xpc_object_t xdict)
{
  xpc_object_t value;
  _QWORD v6[5];
  _QWORD v7[6];
  void *v8[3];

  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x4812000000;
  v7[3] = sub_1000625C4;
  v7[4] = sub_1000623C0;
  v7[5] = 0;
  v8[0] = v8;
  v8[1] = v8;
  v8[2] = 0;
  if (a2 == 4)
  {
    value = xpc_dictionary_get_value(xdict, "kFolders");
    xpc_dictionary_get_int64(xdict, "kNumItems");
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100357470;
    v6[3] = &unk_1009292B8;
    v6[4] = v7;
    xpc_array_apply(value, v6);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  _Block_object_dispose(v7, 8);
  sub_10035940C(v8);
}

void sub_10035744C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void **v6;
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  sub_10035940C(v6);
  _Unwind_Resume(a1);
}

uint64_t sub_100357470(uint64_t a1, int a2, xpc_object_t xstring)
{
  char *string_ptr;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;

  string_ptr = (char *)xpc_string_get_string_ptr(xstring);
  v5 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  sub_100091AE8(&v9, string_ptr);
  v6 = operator new(0x28uLL);
  v6[4] = v10;
  *((_OWORD *)v6 + 1) = v9;
  v7 = v5[6];
  v5 += 6;
  *v6 = v7;
  v6[1] = v5;
  *(_QWORD *)(v7 + 8) = v6;
  *v5 = v6;
  ++v5[2];
  return 1;
}

void sub_1003574E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100357504(uint64_t a1, unsigned int a2, BOOL a3, int64_t a4, void *a5)
{
  id v9;
  xpc_object_t v10;
  id v11;
  _QWORD v12[4];
  id v13;

  v9 = a5;
  v10 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v10, "kUidCounter", a2);
  xpc_dictionary_set_BOOL(v10, "kDotDot", a3);
  xpc_dictionary_set_int64(v10, "kUid", a4);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100357614;
  v12[3] = &unk_100929A60;
  v11 = v9;
  v13 = v11;
  sub_1003561AC(a1, "ChangePath", v10, v12);

}

void sub_1003575F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_100357614(uint64_t a1, int a2, xpc_object_t xdict)
{
  if (a2 == 4)
    xpc_dictionary_get_int64(xdict, "kNumItems");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100357664(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, void *a6)
{
  id v11;
  xpc_object_t v12;
  uint64_t v13;
  id v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  char v18;

  v11 = a6;
  v12 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v12, "kScope", a2);
  xpc_dictionary_set_int64(v12, "kStartItem", a3);
  xpc_dictionary_set_int64(v12, "kEndItem", a4);
  if (*(_QWORD *)(a5 + 16))
    sub_1003569C8(v13, v12, a5);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10035779C;
  v15[3] = &unk_100929AB0;
  v17 = a1;
  v18 = a2;
  v14 = v11;
  v16 = v14;
  sub_1003561AC(a1, "GetFolderItems", v12, v15);

}

void sub_10035777C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

_QWORD *sub_10035779C(uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t v4;
  xpc_object_t value;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[6];
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t *, uint64_t);
  _QWORD *(*v17)(uint64_t);
  uint64_t v18;
  _QWORD v19[3];

  v4 = *(_QWORD *)(a1 + 40);
  v13 = 0;
  v14 = &v13;
  v15 = 0x4812000000;
  v16 = sub_1003578F0;
  v17 = sub_100357938;
  v18 = 0;
  v19[0] = v19;
  v19[1] = v19;
  v19[2] = 0;
  if (a2 == 4)
  {
    value = xpc_dictionary_get_value(xdict, "kItems");
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100357940;
    v11[3] = &unk_100929A88;
    v12 = *(_BYTE *)(a1 + 48);
    v11[4] = &v13;
    v11[5] = v4;
    xpc_array_apply(value, v11);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v6 = v14;
  v7 = v14 + 6;
  v8 = (_QWORD *)v14[7];
  while (v8 != v7)
  {
    v9 = v8[2];
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v6 = v14;
    }
    v8 = (_QWORD *)v8[1];
    v7 = v6 + 6;
  }
  _Block_object_dispose(&v13, 8);
  return sub_10002074C(v19);
}

void sub_1003578CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  sub_10002074C(v8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003578F0(uint64_t *a1, uint64_t a2)
{
  a1[6] = (uint64_t)(a1 + 6);
  a1[7] = (uint64_t)(a1 + 6);
  a1[8] = 0;
  return sub_100359B74((uint64_t)(a1 + 6), a1 + 6, (_QWORD *)(a2 + 48));
}

void sub_100357924(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10002074C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100357938(uint64_t a1)
{
  return sub_10002074C((_QWORD *)(a1 + 48));
}

void sub_100357940(uint64_t a1, int a2, xpc_object_t xdict)
{
  _BOOL4 v5;
  xpc_object_t value;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;

  xpc_dictionary_get_string(xdict, "kName");
  if (*(_BYTE *)(a1 + 48))
  {
    v5 = xpc_dictionary_get_BOOL(xdict, "kIsFolder");
    xpc_dictionary_get_int64(xdict, "kUid");
    if (v5)
    {
      xpc_dictionary_get_int64(xdict, "kFolderType");
      operator new();
    }
    v15[0] = v15;
    v15[1] = v15;
    v16 = 0;
    value = xpc_dictionary_get_value(xdict, "kAttributes");
    if (value)
    {
      sub_100356A3C(value, &v12);
      sub_10002074C(v15);
      v7 = v14;
      if (v14)
      {
        v9 = v12;
        v8 = v13;
        v10 = *v13;
        *(_QWORD *)(v10 + 8) = *(_QWORD *)(v12 + 8);
        **(_QWORD **)(v9 + 8) = v10;
        v11 = v15[0];
        *(_QWORD *)(v15[0] + 8) = v8;
        *v8 = v11;
        *(_QWORD *)(v9 + 8) = v15;
        v14 = 0;
        v15[0] = v9;
        v16 += v7;
      }
      sub_10002074C(&v12);
    }
    operator new();
  }
  xpc_dictionary_get_int64(xdict, "kPlayerId");
  xpc_dictionary_get_int64(xdict, "kPlaybackState");
  operator new();
}

void sub_100357BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  sub_10002074C(&a19);
  _Unwind_Resume(a1);
}

void sub_100357C34(uint64_t a1, unsigned int a2, int64_t a3, unsigned int a4, uint64_t a5, void *a6)
{
  id v11;
  xpc_object_t v12;
  uint64_t v13;
  id v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;

  v11 = a6;
  v12 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v12, "kScope", a2);
  xpc_dictionary_set_int64(v12, "kUid", a3);
  xpc_dictionary_set_int64(v12, "kUidCounter", a4);
  sub_1003569C8(v13, v12, a5);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100357D60;
  v15[3] = &unk_100929A38;
  v17 = a1;
  v14 = v11;
  v16 = v14;
  sub_1003561AC(a1, "GetItemAttributes", v12, v15);

}

void sub_100357D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

_QWORD *sub_100357D60(uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v15 = (uint64_t)&v15;
  v16 = &v15;
  v17 = 0;
  if (a2 == 4)
  {
    sub_100356A3C(xdict, &v12);
    sub_10002074C(&v15);
    v4 = v14;
    if (v14)
    {
      v6 = v12;
      v5 = v13;
      v7 = *v13;
      *(_QWORD *)(v7 + 8) = *(_QWORD *)(v12 + 8);
      **(_QWORD **)(v6 + 8) = v7;
      v8 = v15;
      *(_QWORD *)(v15 + 8) = v5;
      *v5 = v8;
      *(_QWORD *)(v6 + 8) = &v15;
      v14 = 0;
      v15 = v6;
      v17 += v4;
    }
    sub_10002074C(&v12);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  for (i = v16; i != &v15; i = (uint64_t *)i[1])
  {
    v10 = i[2];
    if (v10)
    {
      if (*(char *)(v10 + 31) < 0)
        operator delete(*(void **)(v10 + 8));
      operator delete();
    }
  }
  return sub_10002074C(&v15);
}

void sub_100357E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10002074C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100357E88(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  xpc_object_t v6;
  void *v7;
  const char *v8;
  id v9;
  _QWORD v10[4];
  id v11;

  v5 = a3;
  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  if (*(char *)(a2 + 23) >= 0)
    v8 = (const char *)a2;
  else
    v8 = *(const char **)a2;
  xpc_dictionary_set_string(v6, "kSearchString", v8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100357F6C;
  v10[3] = &unk_100929A60;
  v9 = v5;
  v11 = v9;
  sub_1003561AC(a1, "Search", v7, v10);

}

void sub_100357F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_100357F6C(uint64_t a1, int a2, xpc_object_t xdict)
{
  if (a2 == 4)
    xpc_dictionary_get_int64(xdict, "kNumItems");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100357FC0(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  xpc_object_t v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v5 = a3;
  v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v6, "kScope", a2);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100358098;
  v8[3] = &unk_100929A60;
  v7 = v5;
  v9 = v7;
  sub_1003561AC(a1, "GetTotalNumberOfItems", v6, v8);

}

void sub_100358078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_100358098(uint64_t a1, int a2, xpc_object_t xdict)
{
  if (a2 == 4)
    xpc_dictionary_get_int64(xdict, "kNumItems");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1003580EC(uint64_t a1, unsigned int a2, int64_t a3, unsigned int a4, void *a5)
{
  id v9;
  xpc_object_t v10;
  id v11;
  _QWORD v12[4];
  id v13;

  v9 = a5;
  v10 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v10, "kScope", a2);
  xpc_dictionary_set_int64(v10, "kUid", a3);
  xpc_dictionary_set_int64(v10, "kUidCounter", a4);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1003581FC;
  v12[3] = &unk_100929A60;
  v11 = v9;
  v13 = v11;
  sub_1003561AC(a1, "PlayItem", v10, v12);

}

void sub_1003581DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1003581FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100358208(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  xpc_object_t v6;
  void *v7;
  const char *v8;
  id v9;
  _QWORD v10[4];
  id v11;

  v5 = a3;
  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  if (*(char *)(a2 + 23) >= 0)
    v8 = (const char *)a2;
  else
    v8 = *(const char **)a2;
  xpc_dictionary_set_string(v6, "kImageHandle", v8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1003582EC;
  v10[3] = &unk_100929A60;
  v9 = v5;
  v11 = v9;
  sub_1003561AC(a1, "GetImageProperties", v7, v10);

}

void sub_1003582CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1003582EC(uint64_t a1, int a2, xpc_object_t xdict)
{
  xpc_object_t array;
  xpc_object_t v6;
  xpc_object_t v7;
  _QWORD v8[5];
  _QWORD v9[5];
  _QWORD applier[5];
  _QWORD v11[6];
  void *__p;
  void *v13;
  uint64_t v14;
  _QWORD v15[6];
  void *v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[6];
  void *v20;
  void *v21;
  uint64_t v22;

  v19[0] = 0;
  v19[1] = v19;
  v19[2] = 0x4812000000;
  v19[3] = sub_10035855C;
  v19[4] = sub_100358580;
  v19[5] = &unk_10083E079;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x4812000000;
  v15[3] = sub_100358598;
  v15[4] = sub_1003585BC;
  v15[5] = &unk_10083E079;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x4812000000;
  v11[3] = sub_100358598;
  v11[4] = sub_1003585BC;
  v11[5] = &unk_10083E079;
  __p = 0;
  v13 = 0;
  v14 = 0;
  if (!a2)
  {
    array = xpc_dictionary_get_array(xdict, "kEncodings");
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 3221225472;
    applier[2] = sub_1003585D4;
    applier[3] = &unk_1009292B8;
    applier[4] = v19;
    xpc_array_apply(array, applier);
    v6 = xpc_dictionary_get_array(xdict, "kWidths");
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1003586CC;
    v9[3] = &unk_1009292B8;
    v9[4] = v15;
    xpc_array_apply(v6, v9);
    v7 = xpc_dictionary_get_array(xdict, "kHeights");
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1003587B0;
    v8[3] = &unk_1009292B8;
    v8[4] = v11;
    xpc_array_apply(v7, v8);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  _Block_object_dispose(v11, 8);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(v15, 8);
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  _Block_object_dispose(v19, 8);
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
}

void sub_1003584FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  uint64_t v40;
  void *v42;

  _Block_object_dispose(&a24, 8);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a33, 8);
  if (a39)
  {
    a40 = (uint64_t)a39;
    operator delete(a39);
  }
  _Block_object_dispose((const void *)(v40 - 136), 8);
  v42 = *(void **)(v40 - 88);
  if (v42)
  {
    *(_QWORD *)(v40 - 80) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(a1);
}

__n128 sub_10035855C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_100358580(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

__n128 sub_100358598(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1003585BC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t sub_1003585D4(uint64_t a1, int a2, xpc_object_t xint)
{
  _QWORD *v3;
  char value;
  char v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  _BYTE *v14;
  char *v15;
  _BYTE *v16;
  char v17;

  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  value = xpc_int64_get_value(xint);
  v5 = value;
  v7 = (_BYTE *)v3[7];
  v6 = v3[8];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v3[6];
    v10 = &v7[-v9];
    v11 = (uint64_t)&v7[-v9 + 1];
    if (v11 < 0)
      abort();
    v12 = v6 - v9;
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
      v14 = operator new(v13);
    else
      v14 = 0;
    v15 = &v14[v13];
    v10[(_QWORD)v14] = v5;
    v8 = (uint64_t)&v10[(_QWORD)v14 + 1];
    if (v7 == (_BYTE *)v9)
    {
      v14 = &v10[(_QWORD)v14];
    }
    else
    {
      v16 = &v7[~v9];
      do
      {
        v17 = *--v7;
        (v16--)[(_QWORD)v14] = v17;
      }
      while (v7 != (_BYTE *)v9);
      v7 = (_BYTE *)v3[6];
    }
    v3[6] = v14;
    v3[7] = v8;
    v3[8] = v15;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v7 = value;
    v8 = (uint64_t)(v7 + 1);
  }
  v3[7] = v8;
  return 1;
}

uint64_t sub_1003586CC(uint64_t a1, int a2, xpc_object_t xint)
{
  _QWORD *v3;
  __int16 value;
  __int16 v5;
  char *v6;
  unint64_t v7;
  _WORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  value = xpc_int64_get_value(xint);
  v5 = value;
  v6 = (char *)v3[7];
  v7 = v3[8];
  if ((unint64_t)v6 >= v7)
  {
    v9 = (char *)v3[6];
    v10 = v6 - v9;
    if (v6 - v9 <= -3)
      abort();
    v11 = v10 >> 1;
    v12 = v7 - (_QWORD)v9;
    if (v12 <= (v10 >> 1) + 1)
      v13 = v11 + 1;
    else
      v13 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)sub_1002B54AC((uint64_t)(v3 + 8), v14);
      v9 = (char *)v3[6];
      v6 = (char *)v3[7];
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[2 * v11];
    v17 = &v15[2 * v14];
    *(_WORD *)v16 = v5;
    v8 = v16 + 2;
    while (v6 != v9)
    {
      v18 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v16 - 1) = v18;
      v16 -= 2;
    }
    v3[6] = v16;
    v3[7] = v8;
    v3[8] = v17;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_WORD *)v6 = value;
    v8 = v6 + 2;
  }
  v3[7] = v8;
  return 1;
}

uint64_t sub_1003587B0(uint64_t a1, int a2, xpc_object_t xint)
{
  _QWORD *v3;
  __int16 value;
  __int16 v5;
  char *v6;
  unint64_t v7;
  _WORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  value = xpc_int64_get_value(xint);
  v5 = value;
  v6 = (char *)v3[7];
  v7 = v3[8];
  if ((unint64_t)v6 >= v7)
  {
    v9 = (char *)v3[6];
    v10 = v6 - v9;
    if (v6 - v9 <= -3)
      abort();
    v11 = v10 >> 1;
    v12 = v7 - (_QWORD)v9;
    if (v12 <= (v10 >> 1) + 1)
      v13 = v11 + 1;
    else
      v13 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)sub_1002B54AC((uint64_t)(v3 + 8), v14);
      v9 = (char *)v3[6];
      v6 = (char *)v3[7];
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[2 * v11];
    v17 = &v15[2 * v14];
    *(_WORD *)v16 = v5;
    v8 = v16 + 2;
    while (v6 != v9)
    {
      v18 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v16 - 1) = v18;
      v16 -= 2;
    }
    v3[6] = v16;
    v3[7] = v8;
    v3[8] = v17;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_WORD *)v6 = value;
    v8 = v6 + 2;
  }
  v3[7] = v8;
  return 1;
}

void sub_100358894(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, void *a5)
{
  id v9;
  xpc_object_t v10;
  void *v11;
  const char *v12;
  id v13;
  _QWORD v14[4];
  id v15;

  v9 = a5;
  v10 = xpc_dictionary_create(0, 0, 0);
  v11 = v10;
  if (*(char *)(a2 + 23) >= 0)
    v12 = (const char *)a2;
  else
    v12 = *(const char **)a2;
  xpc_dictionary_set_string(v10, "kImageHandle", v12);
  xpc_dictionary_set_int64(v11, "kWidth", a3);
  xpc_dictionary_set_int64(v11, "kHeight", a4);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1003589B0;
  v14[3] = &unk_100929A60;
  v13 = v9;
  v15 = v13;
  sub_1003561AC(a1, "GetImage", v11, v14);

}

void sub_100358990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_1003589B0(uint64_t a1, int a2, xpc_object_t xdict)
{
  size_t length;

  length = 0;
  if (!a2)
    xpc_dictionary_get_data(xdict, "kImageData", &length);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100358A1C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  xpc_object_t v6;
  void *v7;
  const char *v8;
  id v9;
  _QWORD v10[4];
  id v11;

  v5 = a3;
  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  if (*(char *)(a2 + 23) >= 0)
    v8 = (const char *)a2;
  else
    v8 = *(const char **)a2;
  xpc_dictionary_set_string(v6, "kImageHandle", v8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100358B00;
  v10[3] = &unk_100929A60;
  v9 = v5;
  v11 = v9;
  sub_1003561AC(a1, "GetImage", v7, v10);

}

void sub_100358AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_100358B00(uint64_t a1, int a2, xpc_object_t xdict)
{
  size_t length;

  length = 0;
  if (!a2)
    xpc_dictionary_get_data(xdict, "kImageData", &length);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100358B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[7];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100358BCC;
  v3[3] = &unk_100929AD0;
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
  sub_1003561AC(a1, "RegisterForPlaybackStateChanges", 0, v3);
}

uint64_t (***sub_100358BCC(_QWORD *a1, int a2, xpc_object_t xdict))(_QWORD, int64_t, _QWORD, _QWORD, _QWORD)
{
  uint64_t v4;
  int64_t int64;
  uint64_t (***result)(_QWORD, int64_t, _QWORD, _QWORD, _QWORD);

  v4 = a1[4];
  if (a2 == 4)
    int64 = xpc_dictionary_get_int64(xdict, "kPlaybackState");
  else
    int64 = 0;
  result = *(uint64_t (****)(_QWORD, int64_t, _QWORD, _QWORD, _QWORD))(v4 + 16);
  if (result)
    return (uint64_t (***)(_QWORD, int64_t, _QWORD, _QWORD, _QWORD))(**result)(result, int64, 0, a1[5], a1[6]);
  return result;
}

void sub_100358C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[7];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100358C94;
  v3[3] = &unk_100929AD0;
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
  sub_1003561AC(a1, "RegisterForTrackChanges", 0, v3);
}

uint64_t sub_100358C94(_QWORD *a1, int a2, xpc_object_t xdict)
{
  uint64_t v4;
  int64_t int64;
  uint64_t result;

  v4 = a1[4];
  if (a2 == 4)
    int64 = xpc_dictionary_get_int64(xdict, "kUid");
  else
    int64 = -1;
  result = *(_QWORD *)(v4 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t, int64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)result + 8))(result, int64, 0, a1[5], a1[6]);
  return result;
}

void sub_100358CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[7];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100358D5C;
  v3[3] = &unk_100929AD0;
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
  sub_1003561AC(a1, "RegisterForSettingsChanges", 0, v3);
}

uint64_t sub_100358D5C(_QWORD *a1, int a2, xpc_object_t xdict)
{
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;

  v4 = a1[4];
  v6 = 1;
  v7 = 1;
  if (a2 == 4)
    sub_100356358((int)a1, xdict, &v7, &v6);
  result = *(_QWORD *)(v4 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)result + 16))(result, v7, v6, 0, a1[5], a1[6]);
  return result;
}

void sub_100358DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[7];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100358E34;
  v3[3] = &unk_100929AD0;
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
  sub_1003561AC(a1, "RegisterForChanges", 0, v3);
}

uint64_t sub_100358E34(_QWORD *a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1[4] + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)result + 24))(result, 0, a1[5], a1[6]);
  return result;
}

void sub_100358E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[7];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100358EBC;
  v3[3] = &unk_100929AD0;
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
  sub_1003561AC(a1, "RegisterForChanges", 0, v3);
}

uint64_t sub_100358EBC(_QWORD *a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1[4] + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)result + 32))(result, 0, a1[5], a1[6]);
  return result;
}

void sub_100358EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[7];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100358F44;
  v3[3] = &unk_100929AD0;
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
  sub_1003561AC(a1, "RegisterForPlayerChanges", 0, v3);
}

int64_t sub_100358F44(_QWORD *a1, int a2, xpc_object_t xdict)
{
  uint64_t v4;
  int64_t result;
  uint64_t v6;

  v4 = a1[4];
  if (a2 == 4)
    result = xpc_dictionary_get_int64(xdict, "kPlayerId");
  else
    result = 1;
  v6 = *(_QWORD *)(v4 + 16);
  if (v6)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v6 + 40))(*(_QWORD *)(v4 + 16), (unsigned __int16)result, 0, 0, a1[5], a1[6]);
  return result;
}

void sub_100358FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[7];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100359014;
  v3[3] = &unk_100929AD0;
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
  sub_1003561AC(a1, "RegisterForChanges", 0, v3);
}

uint64_t sub_100359014(_QWORD *a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1[4] + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)result + 48))(result, 0, 0, a1[5], a1[6]);
  return result;
}

uint64_t sub_100359040(uint64_t a1, xpc_object_t object)
{
  NSObject *v4;
  xpc_object_t value;
  unsigned __int8 int64;
  uint64_t result;

  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    int64 = xpc_dictionary_get_int64(object, "kMsgStatus");
    value = xpc_dictionary_get_value(object, "kMsgArgs");
  }
  else
  {
    v4 = qword_100999840;
    if (os_log_type_enabled((os_log_t)qword_100999840, OS_LOG_TYPE_ERROR))
      sub_1006E2C48(a1, object, v4);
    value = 0;
    int64 = 3;
  }
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, xpc_object_t))(result + 16))(result, int64, value);
  return result;
}

uint64_t sub_1003590F8(uint64_t a1, char *__s1, void *a3)
{
  uint64_t (*v6)(void);
  uint64_t (*v7)(void);
  int64_t int64;
  uint64_t v10;
  int v11;
  int v12;

  if (!strcmp(__s1, "PlayerDidChange"))
  {
    xpc_dictionary_get_int64(a3, "kPlayerId");
    (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), 1, 0, 0);
    v7 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 16) + 40);
    return v7();
  }
  if (!strcmp(__s1, "PlaybackStateDidChange"))
  {
    xpc_dictionary_get_int64(a3, "kPlaybackState");
    v6 = ***(uint64_t (****)(void))(a1 + 16);
    return v6();
  }
  if (!strcmp(__s1, "TrackDidChange"))
  {
    int64 = xpc_dictionary_get_int64(a3, "kUid");
    return (*(uint64_t (**)(_QWORD, int64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 8))(*(_QWORD *)(a1 + 16), int64, 1, 0, 0);
  }
  if (!strcmp(__s1, "SettingsDidChange"))
  {
    v11 = 1;
    v12 = 1;
    sub_100356358(0, a3, &v12, &v11);
    v7 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 16) + 16);
    return v7();
  }
  if (strcmp(__s1, "PlaybackQueueDidChange"))
  {
    if (strcmp(__s1, "LibraryDidChange"))
    {
      v10 = sub_100027F68();
      sub_100576500(v10, 0);
    }
    v6 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 16) + 48);
    return v6();
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), 1, 0, 0);
}

uint64_t sub_1003592EC(uint64_t a1, char *a2, void *a3)
{
  return sub_1003590F8(a1 - 8, a2, a3);
}

void sub_1003592F4(uint64_t a1)
{
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), 0, 1, 0, 0);
  sub_1003561AC(a1, "RegisterForChanges", 0, 0);
}

void sub_100359344(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 - 8;
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), 0, 1, 0, 0);
  sub_1003561AC(v1, "RegisterForChanges", 0, 0);
}

_QWORD *sub_100359394(_QWORD *a1)
{
  *a1 = off_100929928;
  a1[1] = off_100929A18;
  sub_10026C408((uint64_t)(a1 + 3));
  return a1;
}

void sub_1003593C8(_QWORD *a1)
{
  *a1 = off_100929928;
  a1[1] = off_100929A18;
  sub_10026C408((uint64_t)(a1 + 3));
  operator delete();
}

void sub_10035940C(void **a1)
{
  void **v2;
  _QWORD **v3;
  _QWORD *v4;
  void **v5;

  if (a1[2])
  {
    v3 = (_QWORD **)*a1;
    v2 = (void **)a1[1];
    v4 = *v2;
    v4[1] = *((_QWORD *)*a1 + 1);
    *v3[1] = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (void **)v2[1];
        sub_10035946C((int)a1, v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_10035946C(int a1, void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

uint64_t sub_10035949C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100929B60;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_1003594D8(uint64_t a1)
{
  *(_QWORD *)a1 = off_100929B60;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  operator delete();
}

uint64_t sub_100359524(uint64_t a1)
{
  uint64_t v1;

  if (*(char *)(a1 + 47) < 0)
    v1 = *(_QWORD *)(a1 + 32);
  else
    LOWORD(v1) = *(unsigned __int8 *)(a1 + 47);
  return (unsigned __int16)(v1 + 31);
}

uint64_t sub_100359544()
{
  return 27;
}

uint64_t sub_10035954C(uint64_t a1, uint64_t a2, __int16 a3)
{
  int v4;

  *(_BYTE *)a2 = *(_BYTE *)(a1 + 10);
  *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a2 + 3) = *(_BYTE *)(a1 + 49);
  *(_BYTE *)(a2 + 5) = *(_BYTE *)(a1 + 50);
  *(_BYTE *)(a2 + 9) = *(_DWORD *)(a1 + 52);
  *(_BYTE *)(a2 + 8) = BYTE1(*(_DWORD *)(a1 + 52));
  *(_BYTE *)(a2 + 7) = *(_WORD *)(a1 + 54);
  *(_BYTE *)(a2 + 6) = *(_BYTE *)(a1 + 55);
  *(_BYTE *)(a2 + 10) = *(_BYTE *)(a1 + 56);
  *(_OWORD *)(a2 + 11) = *(_OWORD *)(a1 + 57);
  *(_BYTE *)(a2 + 28) = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a2 + 27) = *(_BYTE *)(a1 + 9);
  v4 = sub_1003595F8(a1, a2 + 29, (unsigned __int16)(a3 - 29));
  *(_WORD *)(a2 + 1) = bswap32(v4 + 26) >> 16;
  return (unsigned __int16)(v4 + 29);
}

uint64_t sub_1003595F8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  const std::string *v4;
  unsigned int v5;

  if (*(char *)(a1 + 47) < 0)
    v3 = *(_QWORD *)(a1 + 32);
  else
    LODWORD(v3) = *(unsigned __int8 *)(a1 + 47);
  v4 = (const std::string *)(a1 + 24);
  if ((unint64_t)(unsigned __int16)v3 + 2 <= a3)
    v5 = v3;
  else
    v5 = a3 - 2;
  *(_WORD *)a2 = bswap32(v5) >> 16;
  std::string::copy(v4, (std::string::value_type *)(a2 + 2), (unsigned __int16)v5, 0);
  return (unsigned __int16)(v5 + 2);
}

uint64_t sub_100359660(uint64_t a1)
{
  *(_QWORD *)a1 = off_100929B60;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_10035969C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100929B60;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  operator delete();
}

uint64_t sub_1003596E8(uint64_t a1)
{
  uint64_t v1;

  if (*(char *)(a1 + 47) < 0)
    v1 = *(_QWORD *)(a1 + 32);
  else
    LOWORD(v1) = *(unsigned __int8 *)(a1 + 47);
  return (unsigned __int16)(v1 + 17);
}

uint64_t sub_100359708()
{
  return 15;
}

uint64_t sub_100359710(uint64_t a1, uint64_t a2, __int16 a3)
{
  int v4;

  *(_BYTE *)a2 = *(_BYTE *)(a1 + 10);
  *(_QWORD *)(a2 + 3) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(a2 + 11) = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a2 + 12) = *(_BYTE *)(a1 + 49);
  *(_BYTE *)(a2 + 14) = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a2 + 13) = *(_BYTE *)(a1 + 9);
  v4 = sub_1003595F8(a1, a2 + 15, (unsigned __int16)(a3 - 15));
  *(_WORD *)(a2 + 1) = bswap32(v4 + 12) >> 16;
  return (unsigned __int16)(v4 + 15);
}

uint64_t sub_100359788(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 8) = 106;
  *(_BYTE *)(a1 + 10) = 3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_100929BD0;
  *(_BYTE *)(a1 + 48) = 0;
  sub_100359988((_QWORD *)(a1 + 56), a2);
  return a1;
}

void sub_1003597E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  *(_QWORD *)v1 = off_100929B60;
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_10035980C(uint64_t a1)
{
  sub_100359A20(a1);
  operator delete();
}

uint64_t sub_100359830(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 v2;
  uint64_t i;
  uint64_t v4;

  if (*(char *)(a1 + 47) < 0)
    v1 = *(_QWORD *)(a1 + 32);
  else
    LOWORD(v1) = *(unsigned __int8 *)(a1 + 47);
  v2 = v1 + 17;
  for (i = *(_QWORD *)(a1 + 64); i != a1 + 56; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_QWORD *)(i + 16);
    if (*(char *)(v4 + 31) < 0)
      v4 = *(_QWORD *)(v4 + 16);
    else
      LOWORD(v4) = *(unsigned __int8 *)(v4 + 31);
    v2 += v4 + 8;
  }
  return v2;
}

uint64_t sub_100359888()
{
  return 15;
}

uint64_t sub_100359890(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  int v14;
  int v15;
  uint64_t result;

  *(_BYTE *)a2 = *(_BYTE *)(a1 + 10);
  *(_QWORD *)(a2 + 3) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(a2 + 11) = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a2 + 13) = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a2 + 12) = *(_BYTE *)(a1 + 9);
  v6 = sub_1003595F8(a1, a2 + 14, (unsigned __int16)(a3 - 15));
  v7 = v6 + 15;
  v8 = (unsigned __int16)(v6 + 14);
  *(_BYTE *)(a2 + v8) = 0;
  v9 = a1 + 56;
  for (i = *(_QWORD *)(a1 + 64); i != v9; i = *(_QWORD *)(i + 8))
  {
    v11 = *(_QWORD *)(i + 16);
    if (*(char *)(v11 + 31) < 0)
      v12 = *(_QWORD *)(v11 + 16);
    else
      LOWORD(v12) = *(unsigned __int8 *)(v11 + 31);
    v13 = v12 + 8;
    v14 = a3 - (unsigned __int16)v7;
    if (v14 < v13)
      break;
    if (a3 <= (unsigned __int16)v7)
      LOWORD(v14) = 0;
    v15 = sub_100359AC0(v11, a2 + (unsigned __int16)v7, (unsigned __int16)v14);
    if (!v15)
      break;
    v7 += v15;
    ++*(_BYTE *)(a2 + v8);
  }
  result = (unsigned __int16)v7;
  *(_WORD *)(a2 + 1) = bswap32(v7 - 3) >> 16;
  return result;
}

_QWORD *sub_100359988(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_100359A0C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10002074C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100359A20(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *(_QWORD *)a1 = &off_100929BD0;
  v2 = (_QWORD *)(a1 + 56);
  for (i = *(_QWORD **)(a1 + 64); i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
    {
      if (*(char *)(v4 + 31) < 0)
        operator delete(*(void **)(v4 + 8));
      operator delete();
    }
  }
  sub_10002074C(v2);
  *(_QWORD *)a1 = off_100929B60;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_100359AC0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  const std::string *v5;
  unsigned int v6;

  if (a3 >= 8)
  {
    v4 = a1;
    *(_BYTE *)(a2 + 3) = *(_DWORD *)(a1 + 4);
    *(_BYTE *)(a2 + 2) = BYTE1(*(_DWORD *)(a1 + 4));
    *(_BYTE *)(a2 + 1) = *(_WORD *)(a1 + 6);
    *(_BYTE *)a2 = *(_BYTE *)(a1 + 7);
    *(_BYTE *)(a2 + 5) = *(_BYTE *)a1;
    *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 1);
    v5 = (const std::string *)(a1 + 8);
    if (*(char *)(v4 + 31) < 0)
      v4 = *(_QWORD *)(v4 + 16);
    else
      LODWORD(v4) = *(unsigned __int8 *)(v4 + 31);
    if ((unint64_t)(unsigned __int16)v4 + 8 <= a3)
      v6 = v4;
    else
      v6 = a3 - 8;
    *(_WORD *)(a2 + 6) = bswap32(v6) >> 16;
    std::string::copy(v5, (std::string::value_type *)(a2 + 8), (unsigned __int16)v6, 0);
    return (unsigned __int16)(v6 + 8);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100359B74(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a3[2];
  if (v3)
  {
    v5 = *a3;
    v4 = (uint64_t *)a3[1];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = v4;
    *v4 = v7;
    *a2 = v5;
    *(_QWORD *)(v5 + 8) = a2;
    *(_QWORD *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

void sub_100359BFC(id a1)
{
  AudioDeviceManager *v1;
  void *v2;

  v1 = objc_alloc_init(AudioDeviceManager);
  v2 = (void *)qword_100991F80;
  qword_100991F80 = (uint64_t)v1;

}

void sub_100359CA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100359D78(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "handleListenerEvent:", a2);
}

void sub_100359FB0()
{
  operator delete();
}

void sub_10035A1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  sub_100034234((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_10035A514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10035A540(uint64_t a1)
{
  return sub_1002FA000(*(_QWORD *)(a1 + 32));
}

void sub_10035A7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10035A8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10035A940()
{
  operator new();
}

void sub_10035A9D0()
{
  operator delete();
}

void sub_10035AAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10035AC24(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *i;

  if (result == a2)
  {
LABEL_4:
    result = a2;
  }
  else
  {
    while (*result != *a3)
    {
      if (++result == a2)
        goto LABEL_4;
    }
  }
  if (result != a2)
  {
    for (i = result + 1; i != a2; ++i)
    {
      if (*i != *a3)
        *result++ = *i;
    }
  }
  return result;
}

uint64_t *sub_10035AD0C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_10001F574((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_10035ADAC((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

_BYTE *sub_10035ADAC@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  _BYTE *result;
  __int128 *v9;
  __int128 v10;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = v7 + 32;
  v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_10003430C(result, *(void **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v10 = *v9;
    *((_QWORD *)v7 + 6) = *((_QWORD *)v9 + 2);
    *(_OWORD *)result = v10;
  }
  *((_QWORD *)v7 + 7) = 0;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_10035AE40(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1002A4BA0(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10035AE5C(uint64_t **a1, const void **a2)
{
  uint64_t v3;

  v3 = sub_10001F2AC((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  sub_100005290(a1, v3);
  return 1;
}

uint64_t sub_10035AEA0(uint64_t a1)
{
  *(_QWORD *)a1 = off_100929C68;
  *(_QWORD *)(a1 + 8) = &off_100929FE8;
  *(_QWORD *)(a1 + 16) = off_10092A000;
  *(_QWORD *)(a1 + 24) = &off_10092A040;
  *(_QWORD *)(a1 + 32) = off_10092A058;
  *(_QWORD *)(a1 + 40) = off_10092A088;
  *(_QWORD *)(a1 + 48) = off_10092A0D8;
  *(_QWORD *)(a1 + 56) = &off_10092A108;
  *(_QWORD *)(a1 + 64) = off_10092A120;
  *(_QWORD *)(a1 + 72) = &off_10092A1D0;
  *(_QWORD *)(a1 + 80) = off_10092A1E8;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 132) = 0;
  *(_WORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_WORD *)(a1 + 128) = 0;
  sub_1000160D0(a1 + 176);
  sub_1000160D0(a1 + 240);
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = a1 + 392;
  *(_QWORD *)(a1 + 408) = a1 + 416;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = a1 + 440;
  *(_BYTE *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = a1 + 480;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 496) = a1 + 504;
  *(_DWORD *)(a1 + 548) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 531) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 570) = 0;
  *(_QWORD *)(a1 + 556) = 0;
  *(_QWORD *)(a1 + 564) = 0;
  *(_BYTE *)(a1 + 578) = 1;
  *(_DWORD *)(a1 + 580) = -1;
  *(_QWORD *)(a1 + 584) = 0;
  *(_WORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 596) = 0;
  *(_DWORD *)(a1 + 608) = 0;
  *(_WORD *)(a1 + 612) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_DWORD *)(a1 + 648) = 1065353216;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 656) = a1 + 664;
  *(_QWORD *)(a1 + 800) = 0;
  return a1;
}

void sub_10035B01C(_Unwind_Exception *a1)
{
  uint64_t v1;
  id *v2;

  sub_100069BDC(v1);

  _Unwind_Resume(a1);
}

void sub_10035B044(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  NSMutableDictionary *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  xpc_object_t v24;
  _QWORD handler[5];

  if ((sub_10006540C() & 1) != 0)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092A470);
    sub_10007A76C((uint64_t)off_1009778E0 + 240, a1 + 32);
    if (qword_100978150 != -1)
      dispatch_once(&qword_100978150, &stru_10092A490);
    sub_1005B40C8(off_100978148, a1 + 16);
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_10092A4B0);
    sub_100494088(off_100977A70, a1 + 24);
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_10092A4D0);
    sub_1004B983C((uint64_t)off_100977B38, a1 + 40);
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_10092A4F0);
    sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 48);
    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_10092A510);
    sub_100695F80((_QWORD *)qword_1009778B0, a1 + 80);
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10092A530);
    sub_10061F358((uint64_t)off_1009778A0, a1 + 64, 0);
    if (qword_10097ADB8 != -1)
      dispatch_once(&qword_10097ADB8, &stru_10092A550);
    sub_1004FD2A8(qword_10097ADB0, a1 + 8);
    v2 = sub_100038E50();
    sub_100392EAC(v2 + 1208, a1 + 56);
    v3 = sub_100038E50();
    sub_100260F7C(v3 + 288, a1 + 72);
    v4 = objc_alloc_init((Class)NSMutableDictionary);
    v5 = *(void **)(a1 + 304);
    *(_QWORD *)(a1 + 304) = v4;

    v6 = objc_alloc_init((Class)NSMutableDictionary);
    v7 = *(void **)(a1 + 312);
    *(_QWORD *)(a1 + 312) = v6;

    v8 = objc_alloc_init((Class)NSMutableArray);
    v9 = *(void **)(a1 + 328);
    *(_QWORD *)(a1 + 328) = v8;

    v10 = objc_alloc_init((Class)NSMutableDictionary);
    v11 = *(void **)(a1 + 336);
    *(_QWORD *)(a1 + 336) = v10;

    v12 = objc_alloc_init((Class)NSMutableArray);
    v13 = *(void **)(a1 + 344);
    *(_QWORD *)(a1 + 344) = v12;

    v14 = objc_opt_new(NSMutableDictionary);
    v15 = *(void **)(a1 + 800);
    *(_QWORD *)(a1 + 800) = v14;

    v16 = objc_alloc_init((Class)NSMutableDictionary);
    v17 = *(void **)(a1 + 352);
    *(_QWORD *)(a1 + 352) = v16;

    v18 = objc_alloc_init((Class)NSMutableDictionary);
    v19 = *(void **)(a1 + 360);
    *(_QWORD *)(a1 + 360) = v18;

    v20 = objc_alloc_init((Class)NSMutableDictionary);
    v21 = *(void **)(a1 + 368);
    *(_QWORD *)(a1 + 368) = v20;

    v22 = objc_alloc_init((Class)NSMutableArray);
    v23 = *(void **)(a1 + 376);
    *(_QWORD *)(a1 + 376) = v22;

    sub_1003937DC(a1 + 384, *(_QWORD **)(a1 + 392));
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 384) = a1 + 392;
    v24 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_BOOL(v24, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_int64(v24, XPC_ACTIVITY_DELAY, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_int64(v24, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_MIN);
    xpc_dictionary_set_string(v24, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10035B488;
    handler[3] = &unk_10092A200;
    handler[4] = a1;
    xpc_activity_register(off_10097ADA8, v24, handler);
    sub_10035B744(a1);
    *(_BYTE *)(a1 + 681) = 0;
    *(_BYTE *)(a1 + 684) = 0;
    *(_BYTE *)(a1 + 682) = sub_10035B9C8();
    *(_BYTE *)(a1 + 683) = 0;
    *(_OWORD *)(a1 + 736) = 0u;
    *(_OWORD *)(a1 + 752) = 0u;
    *(_OWORD *)(a1 + 768) = 0u;
    *(_OWORD *)(a1 + 780) = 0u;

  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006E2ED8();
  }
}

void sub_10035B478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10035B488(uint64_t a1)
{
  sub_10035B490(*(_QWORD **)(a1 + 32));
}

void sub_10035B490(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void *v18;
  void *v19;
  _QWORD *v20;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v16) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending all day metrics to CoreAnalytics", (uint8_t *)&v16, 2u);
  }
  sub_10038A158((uint64_t)a1);
  v3 = sub_10006BBAC();
  v16 = _NSConcreteStackBlock;
  v17 = 3221225472;
  v18 = sub_10038AFBC;
  v19 = &unk_100917378;
  v20 = a1;
  sub_100041A34(v3, &v16);
  v4 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 352))(v4) & 1) != 0
    || (v5 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 376))(v5)))
  {
    sub_10036302C();
  }
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_10092A5D0);
  sub_100684C5C((uint64_t)off_100977FA8);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_10092A5F0);
  sub_1002F1050(off_100978168);
  v6 = a1[12];
  if (v6)
    (*(void (**)(void))(v6 + 16))();
  v7 = sub_10006BBAC();
  v16 = _NSConcreteStackBlock;
  v17 = 3221225472;
  v18 = sub_10038C8B8;
  v19 = &unk_100917378;
  v20 = a1;
  sub_100041A34(v7, &v16);
  v8 = sub_10006BBAC();
  v16 = _NSConcreteStackBlock;
  v17 = 3221225472;
  v18 = sub_10038CB60;
  v19 = &unk_100917378;
  v20 = a1;
  sub_100041A34(v8, &v16);
  v9 = sub_10006BBAC();
  v16 = _NSConcreteStackBlock;
  v17 = 3221225472;
  v18 = sub_10038CC94;
  v19 = &unk_100917378;
  v20 = a1;
  sub_100041A34(v9, &v16);
  v10 = sub_10006BBAC();
  v16 = _NSConcreteStackBlock;
  v17 = 3221225472;
  v18 = sub_10038CEDC;
  v19 = &unk_100917378;
  v20 = a1;
  sub_100041A34(v10, &v16);
  v11 = sub_10006BBAC();
  v16 = _NSConcreteStackBlock;
  v17 = 3221225472;
  v18 = sub_10038D024;
  v19 = &unk_100917378;
  v20 = a1;
  sub_100041A34(v11, &v16);
  v12 = sub_10006BBAC();
  v16 = _NSConcreteStackBlock;
  v17 = 3221225472;
  v18 = sub_10038D158;
  v19 = &unk_100917378;
  v20 = a1;
  sub_100041A34(v12, &v16);
  v13 = sub_10006BBAC();
  v16 = _NSConcreteStackBlock;
  v17 = 3221225472;
  v18 = sub_100391E54;
  v19 = &unk_100917378;
  v20 = a1;
  sub_100041A34(v13, &v16);
  v14 = sub_10006BBAC();
  v16 = _NSConcreteStackBlock;
  v17 = 3221225472;
  v18 = sub_10039210C;
  v19 = &unk_100917378;
  v20 = a1;
  sub_100041A34(v14, &v16);
  (*(void (**)(_QWORD *))(*a1 + 656))(a1);
  v15 = sub_10006BBAC();
  v16 = _NSConcreteStackBlock;
  v17 = 3221225472;
  v18 = sub_10038D534;
  v19 = &unk_100917378;
  v20 = a1;
  sub_100041A34(v15, &v16);
}

void sub_10035B744(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  NSObject *v5;
  unsigned int v6;
  void **v7;
  void *v8[2];
  char v9;
  unsigned int v10;
  void *__p;
  __int16 v12;
  void **v13;
  char v14;

  v10 = 90;
  v2 = sub_100027F68();
  sub_100091AE8(v8, "HID");
  sub_100091AE8(&__p, "HIDLatencyAnomalyThreshold");
  v3 = (*(uint64_t (**)(uint64_t, void **, void **, unsigned int *))(*(_QWORD *)v2 + 128))(v2, v8, &__p, &v10);
  if (v14 < 0)
    operator delete(__p);
  if (v9 < 0)
  {
    operator delete(v8[0]);
    if ((v3 & 1) != 0)
      goto LABEL_5;
LABEL_8:
    v10 = 90;
    goto LABEL_9;
  }
  if ((v3 & 1) == 0)
    goto LABEL_8;
LABEL_5:
  if (v10 <= 7)
  {
    *(_BYTE *)(a1 + 680) = 0;
    goto LABEL_11;
  }
  if (v10 <= 0xB)
  {
    v4 = 1;
    goto LABEL_10;
  }
  if (v10 <= 0xF)
  {
    v4 = 2;
    goto LABEL_10;
  }
  if (v10 <= 0x16)
  {
    v4 = 3;
    goto LABEL_10;
  }
  if (v10 <= 0x1E)
  {
    v4 = 4;
    goto LABEL_10;
  }
  if (v10 <= 0x2D)
  {
    v4 = 5;
    goto LABEL_10;
  }
  if (v10 <= 0x3C)
  {
    v4 = 6;
    goto LABEL_10;
  }
  if (v10 > 0x5A)
  {
    if (v10 > 0x78)
    {
      if (v10 > 0x96)
      {
        if (v10 > 0x1F4)
        {
          if (v10 > 0x2EE)
            v4 = 12;
          else
            v4 = 11;
        }
        else
        {
          v4 = 10;
        }
      }
      else
      {
        v4 = 9;
      }
    }
    else
    {
      v4 = 8;
    }
    goto LABEL_10;
  }
LABEL_9:
  v4 = 7;
LABEL_10:
  *(_BYTE *)(a1 + 680) = v4;
LABEL_11:
  v5 = (id)qword_1009997E8;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(unsigned __int8 *)(a1 + 680);
    sub_10038FBA0(v6, v8);
    if (v9 >= 0)
      v7 = v8;
    else
      v7 = (void **)v8[0];
    LODWORD(__p) = 67109378;
    HIDWORD(__p) = v6;
    v12 = 2080;
    v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "HID latency anomaly threshold bin index is %d for %s", (uint8_t *)&__p, 0x12u);
    if (v9 < 0)
      operator delete(v8[0]);
  }

}

void sub_10035B980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

uint64_t sub_10035B9C8()
{
  const __CFNumber *v0;
  const __CFNumber *v1;
  NSObject *v2;
  unsigned __int8 valuePtr;
  uint8_t buf[4];
  int v6;

  valuePtr = 0;
  v0 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("BTPowerStateMonitorNumOfDays"), CFSTR("com.apple.BTServer"));
  if (v0)
  {
    v1 = v0;
    CFNumberGetValue(v0, kCFNumberCharType, &valuePtr);
    CFRelease(v1);
  }
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v6 = valuePtr;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "readBTPowerStateMonitorNumOfDays : numOfDays = %d", buf, 8u);
  }
  return valuePtr;
}

uint64_t sub_10035BAA4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  int v4;
  NSObject *v5;
  _QWORD handler[5];
  uint8_t buf[4];
  int v9;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Registering for Core Time Change Notification", buf, 2u);
  }
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(a1 + 578);
    *(_DWORD *)buf = 67109120;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Core Time Initial AutoDateTimeEnabled: %d", buf, 8u);
  }
  v5 = *(NSObject **)(sub_10006BBAC() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10035BBDC;
  handler[3] = &unk_100927440;
  handler[4] = a1;
  return notify_register_dispatch("SignificantTimeChangeNotification", (int *)(a1 + 580), v5, handler);
}

void sub_10035BBDC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  _DWORD v4[2];

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 578) = TMIsAutomaticTimeEnabled() != 0;
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(v1 + 578);
    v4[0] = 67109120;
    v4[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Core Time Changed: AutoDateTimeEnabled: %d", (uint8_t *)v4, 8u);
  }
}

uint64_t sub_10035BC94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[5];
  _BYTE v6[320];
  _BYTE v7[328];

  memset(v7, 0, 320);
  sub_10039319C((uint64_t)v7, a2);
  v3 = sub_10006BBAC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_10035BDB8;
  v5[3] = &unk_10092A220;
  v5[4] = a1;
  sub_10039319C((uint64_t)v6, (uint64_t)v7);
  sub_100041A34(v3, v5);
  sub_100393448((uint64_t)v6);
  return sub_100393448((uint64_t)v7);
}

void sub_10035BD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;

  sub_100393448(v55);
  sub_100393448((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void sub_10035BDB8(uint64_t a1)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v32;
  void *v33;
  _QWORD *v34;
  void *v35;
  _QWORD *v36;
  void *v37;
  _QWORD *v38;
  void *v39;
  _QWORD *v40;
  void *v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  void *v45;
  void **v46;
  void *v47;
  void **v48;
  void *v49;
  _QWORD *v50;
  void *v51;
  void *v52;
  void *__p[2];
  uint64_t v54;
  void *v55[2];
  uint64_t v56;
  void *v57[2];
  uint64_t v58;
  void *v59[2];
  uint64_t v60;
  void *v61[2];
  uint64_t v62;

  v2 = *(_QWORD *)(a1 + 32);
  v61[0] = 0;
  v61[1] = 0;
  v62 = 0;
  sub_1002D1A98(v2 + 320, (unsigned __int8 *)(a1 + 40), 3);
  v59[0] = 0;
  v59[1] = 0;
  v60 = 0;
  sub_1002D1A98(v2 + 320, (unsigned __int8 *)(a1 + 104), 8);
  v57[0] = 0;
  v57[1] = 0;
  v58 = 0;
  sub_1002D1A98(v2 + 320, (unsigned __int8 *)(a1 + 112), 8);
  v55[0] = 0;
  v55[1] = 0;
  v56 = 0;
  sub_1002D1A98(v2 + 320, (unsigned __int8 *)(a1 + 288), 20);
  __p[0] = 0;
  __p[1] = 0;
  v54 = 0;
  sub_1002D1A98(v2 + 320, (unsigned __int8 *)(a1 + 308), 20);
  v3 = objc_alloc_init((Class)NSMutableDictionary);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v61));
  objc_msgSend(v3, "setObject:forKey:", v4, CFSTR("oui"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a1 + 43)));
  objc_msgSend(v3, "setObject:forKey:", v5, CFSTR("isHIDServicePresent"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 44)));
  objc_msgSend(v3, "setObject:forKey:", v6, CFSTR("chipsetManufacturerName"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 46)));
  objc_msgSend(v3, "setObject:forKey:", v7, CFSTR("lmpSubVersion"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a1 + 48)));
  objc_msgSend(v3, "setObject:forKey:", v8, CFSTR("lmpVersion"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 50)));
  objc_msgSend(v3, "setObject:forKey:", v9, CFSTR("gATTVersion"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 52)));
  objc_msgSend(v3, "setObject:forKey:", v10, CFSTR("wIAPVersion"));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 54)));
  objc_msgSend(v3, "setObject:forKey:", v11, CFSTR("mapProfileVersion"));

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 56)));
  objc_msgSend(v3, "setObject:forKey:", v12, CFSTR("handsfreeVersion"));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 58)));
  objc_msgSend(v3, "setObject:forKey:", v13, CFSTR("handsfreeFeatures"));

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 60)));
  objc_msgSend(v3, "setObject:forKey:", v14, CFSTR("a2DPVersion"));

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 62)));
  objc_msgSend(v3, "setObject:forKey:", v15, CFSTR("a2DPFeatures"));

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 64)));
  objc_msgSend(v3, "setObject:forKey:", v16, CFSTR("aVRCPVersion"));

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 66)));
  objc_msgSend(v3, "setObject:forKey:", v17, CFSTR("aVRCPFeatures"));

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 68)));
  objc_msgSend(v3, "setObject:forKey:", v18, CFSTR("pNPVersion"));

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 70)));
  objc_msgSend(v3, "setObject:forKey:", v19, CFSTR("obexObjectPushVersion"));

  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 72)));
  objc_msgSend(v3, "setObject:forKey:", v20, CFSTR("serialPortVersion"));

  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 74)));
  objc_msgSend(v3, "setObject:forKey:", v21, CFSTR("hIDVersion"));

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 76)));
  objc_msgSend(v3, "setObject:forKey:", v22, CFSTR("aVDTPVersion"));

  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a1 + 78)));
  objc_msgSend(v3, "setObject:forKey:", v23, CFSTR("aVCTPVersion"));

  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 80)));
  objc_msgSend(v3, "setObject:forKey:", v24, CFSTR("vendorIDSource"));

  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 84)));
  objc_msgSend(v3, "setObject:forKey:", v25, CFSTR("vendorID"));

  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 88)));
  objc_msgSend(v3, "setObject:forKey:", v26, CFSTR("productID"));

  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 92)));
  objc_msgSend(v3, "setObject:forKey:", v27, CFSTR("version"));

  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 96)));
  objc_msgSend(v3, "setObject:forKey:", v28, CFSTR("fwVersion"));

  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 100)));
  objc_msgSend(v3, "setObject:forKey:", v29, CFSTR("classOfDevice"));

  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v59));
  objc_msgSend(v3, "setObject:forKey:", v30, CFSTR("linkLayerRemoteSupportedFeatures"));

  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v57));
  objc_msgSend(v3, "setObject:forKey:", v31, CFSTR("classicExtendedFeaturesPage1"));

  v32 = (_QWORD *)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    v32 = (_QWORD *)*v32;
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v32));
  objc_msgSend(v3, "setObject:forKey:", v33, CFSTR("bundleID"));

  v34 = (_QWORD *)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    v34 = (_QWORD *)*v34;
  v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v34));
  objc_msgSend(v3, "setObject:forKey:", v35, CFSTR("disManufacturerNameString"));

  v36 = (_QWORD *)(a1 + 168);
  if (*(char *)(a1 + 191) < 0)
    v36 = (_QWORD *)*v36;
  v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v36));
  objc_msgSend(v3, "setObject:forKey:", v37, CFSTR("disModelNumberString"));

  v38 = (_QWORD *)(a1 + 192);
  if (*(char *)(a1 + 215) < 0)
    v38 = (_QWORD *)*v38;
  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v38));
  objc_msgSend(v3, "setObject:forKey:", v39, CFSTR("carVendorName"));

  v40 = (_QWORD *)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
    v40 = (_QWORD *)*v40;
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v40));
  objc_msgSend(v3, "setObject:forKey:", v41, CFSTR("disHardwareRevisionString"));

  v42 = (_QWORD *)(a1 + 240);
  if (*(char *)(a1 + 263) < 0)
    v42 = (_QWORD *)*v42;
  v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v42));
  objc_msgSend(v3, "setObject:forKey:", v43, CFSTR("disFirmwareRevisionString"));

  v44 = (_QWORD *)(a1 + 264);
  if (*(char *)(a1 + 287) < 0)
    v44 = (_QWORD *)*v44;
  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v44));
  objc_msgSend(v3, "setObject:forKey:", v45, CFSTR("disSoftwareRevisionString"));

  if (v56 >= 0)
    v46 = v55;
  else
    v46 = (void **)v55[0];
  v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v46));
  objc_msgSend(v3, "setObject:forKey:", v47, CFSTR("primaryHash"));

  if (v54 >= 0)
    v48 = __p;
  else
    v48 = (void **)__p[0];
  v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v48));
  objc_msgSend(v3, "setObject:forKey:", v49, CFSTR("secondaryHash"));

  v50 = (_QWORD *)(a1 + 328);
  if (*(char *)(a1 + 351) < 0)
  {
    if (!*(_QWORD *)(a1 + 336))
      goto LABEL_27;
    v50 = (_QWORD *)*v50;
    goto LABEL_26;
  }
  if (*(_BYTE *)(a1 + 351))
  {
LABEL_26:
    v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v50));
    objc_msgSend(v3, "setObject:forKey:", v51, CFSTR("friendlyName"));

  }
LABEL_27:
  v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a1 + 352)));
  objc_msgSend(v3, "setObject:forKey:", v52, CFSTR("isGHSServicePresent"));

  sub_100015CC8(v2, 0x30u, v3);
  if (SHIBYTE(v54) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v56) < 0)
    operator delete(v55[0]);
  if (SHIBYTE(v58) < 0)
    operator delete(v57[0]);
  if (SHIBYTE(v60) < 0)
    operator delete(v59[0]);
  if (SHIBYTE(v62) < 0)
    operator delete(v61[0]);
}

void sub_10035C670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;
  uint64_t v35;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (*(char *)(v35 - 49) < 0)
    operator delete(*(void **)(v35 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_10035C7A4(uint64_t a1, uint64_t a2)
{
  return sub_10039319C(a1 + 40, a2 + 40);
}

uint64_t sub_10035C7B0(uint64_t a1)
{
  return sub_100393448(a1 + 40);
}

void sub_10035C7B8(uint64_t a1, _OWORD *a2)
{
  NSObject *v3;
  _QWORD v4[6];
  _QWORD v5[6];
  _OWORD v6[2];

  v5[0] = 0;
  v5[1] = v5;
  v5[3] = sub_10006260C;
  v5[4] = nullsub_20;
  v5[2] = 0x5012000000;
  v5[5] = &unk_10083E079;
  v6[0] = *a2;
  *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)((char *)a2 + 12);
  v3 = *(NSObject **)(sub_10006BBAC() + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10035C884;
  v4[3] = &unk_100919528;
  v4[4] = v5;
  v4[5] = a1;
  dispatch_async(v3, v4);
  _Block_object_dispose(v5, 8);
}

void sub_10035C86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10035C884(uint64_t result)
{
  uint64_t v1;
  unsigned __int16 v2;
  int v3;

  v1 = *(_QWORD *)(result + 40);
  v2 = *(_WORD *)(v1 + 116) + *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 60);
  *(_WORD *)(v1 + 116) = v2;
  v3 = *(_DWORD *)(v1 + 108);
  *(_DWORD *)(v1 + 104) = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 48) + *(_DWORD *)(v1 + 104)) / v2;
  *(_DWORD *)(v1 + 108) = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 52) + v3) / v2;
  *(_DWORD *)(v1 + 112) = (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 56) + *(_DWORD *)(v1 + 112)) / v2;
  *(_WORD *)(v1 + 118) += *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 62);
  *(_WORD *)(v1 + 120) += *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 64);
  *(_WORD *)(v1 + 122) += *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 66);
  *(_WORD *)(v1 + 124) += *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 68);
  *(_WORD *)(v1 + 126) += *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 70);
  *(_WORD *)(v1 + 128) += *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 72);
  return result;
}

void sub_10035C984(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  unsigned int v5;
  id v6;

  v6 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("CBWHBMetricsKeyEventType")));
  v4 = v3;
  if (v3)
  {
    if ((objc_msgSend(v3, "isEqualToString:", CFSTR("RSSILevelEvent")) & 1) != 0)
    {
      v5 = 120;
LABEL_8:
      sub_100015CC8(a1, v5, v6);
      goto LABEL_9;
    }
    if ((objc_msgSend(v4, "isEqualToString:", CFSTR("CoexUpdateEvent")) & 1) != 0)
    {
      v5 = 119;
      goto LABEL_8;
    }
    if (objc_msgSend(v4, "isEqualToString:", CFSTR("WhbStateEvent")))
    {
      v5 = 121;
      goto LABEL_8;
    }
  }
LABEL_9:

}

void sub_10035CA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10035CA4C(uint64_t a1, void *a2)
{
  sub_100015CC8(a1, 0x48u, a2);
}

void sub_10035CA58(uint64_t a1, unsigned __int16 *a2)
{
  const __CFString *v3;
  const __CFString *v4;
  __int128 *v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  unsigned __int16 *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  __CFString *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[11];
  _QWORD v32[11];
  unsigned __int8 v33[16];

  v26 = a1;
  v29 = 0;
  v30 = 0;
  v3 = CFSTR("No Sync");
  if (a2[4] == 1)
    v3 = CFSTR("NACK or CRC");
  if (a2[4])
    v4 = v3;
  else
    v4 = CFSTR("No ReTx");
  if (*((_BYTE *)a2 + 44))
  {
    v5 = sub_10019ACEC(*a2);
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10092A530);
    v6 = sub_100624724((uint64_t)off_1009778A0, (uint64_t)v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    if (v7)
    {
      if (qword_1009778A8 != -1)
        dispatch_once(&qword_1009778A8, &stru_10092A530);
      v8 = off_1009778A0;
      sub_100030BCC(v33, v7);
      v9 = sub_100624B58((uint64_t)v8, v33);
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10092A570);
      v10 = sub_10065F76C((uint64_t)off_1009778C0, v7);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v12 = v11;
      if (v11 && (unint64_t)objc_msgSend(v11, "length", v26) >= 5)
      {
        v13 = (unsigned __int8 *)objc_msgSend(objc_retainAutorelease(v12), "bytes");
        HIDWORD(v30) = *v13;
        LODWORD(v30) = *(unsigned __int16 *)(v13 + 1);
        LODWORD(v29) = *(unsigned __int16 *)(v13 + 3);
      }
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10092A570);
      if (sub_10065C6B4((uint64_t)off_1009778C0, v7, 11))
        v28 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", "Magnet", +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding")));
      else
        v28 = CFSTR("Unspecified");

    }
    else
    {
      v9 = 0;
      v28 = CFSTR("Unspecified");
    }

  }
  else
  {
    v14 = *((_QWORD *)a2 + 6);
    if (v14)
      sub_100444BF0(v14, (_DWORD *)&v30 + 1, &v30, &v29, (_DWORD *)&v29 + 1);
    v9 = 0;
    v28 = CFSTR("Unspecified");
  }
  v31[0] = CFSTR("AvgRSSI");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", (__int16)a2[2], v26));
  v32[0] = v15;
  v31[1] = CFSTR("AvgSNR");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", (__int16)a2[3]));
  v32[1] = v16;
  v31[2] = CFSTR("AvgPacketType");
  if (*((char *)a2 + 39) >= 0)
    v17 = a2 + 8;
  else
    v17 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17));
  v32[2] = v18;
  v32[3] = v4;
  v31[3] = CFSTR("ReTxReason");
  v31[4] = CFSTR("IsLEDevice");
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a2 + 44)));
  v32[4] = v19;
  v31[5] = CFSTR("PeripheralLatency");
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v9));
  v32[5] = v20;
  v31[6] = CFSTR("PID");
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v29));
  v32[6] = v21;
  v31[7] = CFSTR("VID");
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v30));
  v32[7] = v22;
  v31[8] = CFSTR("Version");
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v29)));
  v32[8] = v23;
  v31[9] = CFSTR("VIDSource");
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v30)));
  v31[10] = CFSTR("LEDeviceUseCase");
  v32[9] = v24;
  v32[10] = v28;
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v32, v31, 11));

  sub_100015CC8(v27, 0x46u, v25);
}

void sub_10035CEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_10035D168(uint64_t a1, void *a2, int a3, unsigned int a4, uint64_t a5, void *a6, int a7)
{
  id v12;
  id v13;
  void *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  NSObject *v22;
  uint8_t buf[4];
  id v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  void *v28;

  v12 = a2;
  v13 = a6;
  v14 = v13;
  if (a4 - 9 > 0xFFFFFFF7)
  {
    if (v12 && a5 && v13)
    {
      v15 = a4 * a3;
      if (a4 * a3)
      {
        v16 = 0;
        do
        {
          switch(a4)
          {
            case 1u:
              v17 = *(unsigned __int8 *)(a5 + v16);
              if (a7)
                v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", v17));
              else
                v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v17));
              goto LABEL_27;
            case 2u:
              if (a7)
                v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", *(__int16 *)(a5 + v16)));
              else
                v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a5 + v16)));
              goto LABEL_27;
            case 3u:
              v19 = *(unsigned __int16 *)(a5 + v16) | (*(unsigned __int8 *)(a5 + v16 + 2) << 16);
              if (a7)
                goto LABEL_16;
              goto LABEL_30;
            case 4u:
              v19 = *(unsigned int *)(a5 + v16);
              if (a7)
LABEL_16:
                v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v19));
              else
LABEL_30:
                v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v19));
              goto LABEL_27;
            case 5u:
              v20 = *(unsigned int *)(a5 + v16) | ((unint64_t)*(unsigned __int8 *)(a5 + v16 + 4) << 32);
              if (a7)
                goto LABEL_26;
              goto LABEL_32;
            case 6u:
              v20 = *(unsigned int *)(a5 + v16) | ((unint64_t)*(unsigned __int8 *)(a5 + v16 + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(a5 + v16 + 5) << 40);
              if (a7)
                goto LABEL_26;
              goto LABEL_32;
            case 7u:
              v20 = *(unsigned int *)(a5 + v16) | ((unint64_t)*(unsigned __int8 *)(a5 + v16 + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(a5 + v16 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(a5 + v16 + 6) << 48);
              if (a7)
                goto LABEL_26;
              goto LABEL_32;
            case 8u:
              v20 = *(_QWORD *)(a5 + v16);
              if (a7)
LABEL_26:
                v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", v20));
              else
LABEL_32:
                v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v20));
LABEL_27:
              v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@_%u"), v12, v16 / a4));
              objc_msgSend(v14, "setObject:forKey:", v18, v21);

              break;
            default:
              v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@_%u"), v12, v16 / a4));
              objc_msgSend(v14, "setObject:forKey:", &off_1009606D0, v18);
              break;
          }

          v16 += a4;
        }
        while (v16 < v15);
      }
    }
    else
    {
      v22 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412802;
        v24 = v12;
        v25 = 2048;
        v26 = a5;
        v27 = 2112;
        v28 = v14;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "addExpandedArrayToDictionary: Invalid parameters. arrayName: %@, array: %p, dict: %@", buf, 0x20u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006E2F78();
  }

}

void sub_10035D840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10035D928()
{
  JUMPOUT(0x10035D920);
}

void sub_10035D930(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  double v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[28];
  double v22;
  __int128 v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  __int128 v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[2];

  v2 = *(_DWORD *)(a2 + 4);
  v3 = *(_DWORD *)(a2 + 8);
  v34 = *(_OWORD *)(a2 + 28);
  v35 = *(_OWORD *)(a2 + 44);
  v36[0] = *(_OWORD *)(a2 + 60);
  *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)(a2 + 72);
  v33 = *(_OWORD *)(a2 + 12);
  v4 = *(double *)(a2 + 88);
  v31 = *(_OWORD *)(a2 + 96);
  v32 = *(_DWORD *)(a2 + 112);
  v5 = v3 - v2;
  if (v2 - 1 >= 0x3B)
  {
    if (v2)
      v6 = vcvtad_u64_f64((double)v2 / 60.0);
    else
      v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  if (v5 - 1 >= 0x3B)
  {
    if (v3 == v2)
      v7 = 0;
    else
      v7 = vcvtad_u64_f64((double)v5 / 60.0);
  }
  else
  {
    v7 = 1;
  }
  v8 = *(_DWORD *)(a2 + 116);
  if (v3 - 1 < 0x3B)
  {
    v9 = 1;
LABEL_15:
    v10 = v8 / v9;
    goto LABEL_18;
  }
  if (v3)
  {
    v9 = vcvtad_u64_f64((double)v3 / 60.0);
    if (v9)
      goto LABEL_15;
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
LABEL_18:
  v11 = *(_QWORD *)(a2 + 120);
  if (v6)
    v4 = (double)v7 / (double)v6;
  v12 = sub_10006BBAC();
  v14[1] = 3221225472;
  v19 = v34;
  v20 = v35;
  *(_OWORD *)v21 = v36[0];
  *(_OWORD *)&v21[12] = *(_OWORD *)((char *)v36 + 12);
  v14[0] = _NSConcreteStackBlock;
  v14[2] = sub_10035DB44;
  v14[3] = &unk_10092A250;
  v14[4] = a1;
  v15 = v3 - v2;
  v16 = v2;
  v17 = v3;
  v18 = v33;
  v22 = v4;
  v23 = v31;
  v24 = v32;
  v25 = v8;
  v26 = v11;
  v27 = v10;
  v28 = v9;
  v29 = v6;
  v30 = v7;
  sub_100041A34(v12, v14);
}

void sub_10035DB44(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[13];
  _QWORD v18[13];

  v12 = *(_QWORD *)(a1 + 32);
  v17[0] = CFSTR("AccessoryPID");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 152)));
  v18[0] = v16;
  v17[1] = CFSTR("AoSCategory");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 164)));
  v18[1] = v15;
  v17[2] = CFSTR("EndReason");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 160)));
  v18[2] = v14;
  v17[3] = CFSTR("EndRetx");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(a1 + 112)));
  v18[3] = v13;
  v17[4] = CFSTR("EndRSSI");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(a1 + 120)));
  v18[4] = v2;
  v17[5] = CFSTR("GlitchesPerMin");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 168)));
  v18[5] = v3;
  v17[6] = CFSTR("ISMvsUBORatio");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 128)));
  v18[6] = v4;
  v17[7] = CFSTR("StartDelay");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 144)));
  v18[7] = v5;
  v17[8] = CFSTR("StartRetx");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(a1 + 96)));
  v18[8] = v6;
  v17[9] = CFSTR("StartRSSI");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(a1 + 104)));
  v18[9] = v7;
  v17[10] = CFSTR("TotalDuration");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 172)));
  v18[10] = v8;
  v17[11] = CFSTR("5GDuration");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 176)));
  v18[11] = v9;
  v17[12] = CFSTR("2GDuration");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 180)));
  v18[12] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 13));

  sub_100015CC8(v12, 6u, v11);
}

void sub_10035DE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_10035DED4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  unsigned int v5;
  int v6;
  double v7;
  double v8;
  std::string *v9;
  _BOOL4 v10;
  int **v11;
  int **v12;
  int v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  uint64_t v35;
  unsigned int *v36;
  signed int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  NSObject *v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  int32x2_t v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint32x2_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  std::string *p_str;
  const __CFString *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  _DWORD *v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  NSObject *v111;
  uint64_t v112;
  id v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  void *v144;
  unsigned int v145;
  void *v146;
  unsigned int v147;
  void *v148;
  unsigned int v149;
  void *v150;
  unsigned int v151;
  void *v152;
  unsigned int v153;
  void *v154;
  unsigned int v155;
  void *v156;
  unsigned int v157;
  void *v158;
  unsigned int v159;
  void *v160;
  unsigned int v161;
  void *v162;
  unsigned int v163;
  void *v164;
  unsigned int v165;
  void *v166;
  unsigned int v167;
  void *v168;
  unsigned int v169;
  void *v170;
  unsigned int v171;
  void *v172;
  unsigned int v173;
  void *v174;
  unsigned int v175;
  void *v176;
  unsigned int v177;
  void *v178;
  unsigned int v179;
  void *v180;
  unsigned int v181;
  void *v182;
  _BOOL4 v183;
  void *v184;
  __CFString *v185;
  unsigned int v186;
  uint32x2_t v187;
  void *v188;
  __CFString *v189;
  uint64_t v190;
  void *v191;
  void *__p[2];
  char v193;
  void *v194;
  char *v195;
  char *v196;
  void *v197;
  char *v198;
  char *v199;
  std::string v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD v203[61];
  _QWORD v204[61];
  std::string __str;

  v3 = *(_QWORD *)(a2 + 64);
  v202 = 0;
  v201 = 0;
  if (v3)
    sub_100444BF0(v3, (_DWORD *)&v202 + 1, &v202, &v201, (_DWORD *)&v201 + 1);
  memset(&v200, 0, sizeof(v200));
  sub_100091AE8(&v200, "");
  v5 = *(_DWORD *)(a2 + 108);
  v6 = *(_DWORD *)(a2 + 24);
  v197 = 0;
  v198 = 0;
  v199 = 0;
  v194 = 0;
  v195 = 0;
  v196 = 0;
  v8 = *(double *)(a2 + 128);
  v7 = *(double *)(a2 + 136);
  if (!v3)
  {
    v10 = 0;
    v189 = CFSTR("Unknown");
    goto LABEL_17;
  }
  sub_10043F78C(v3, (uint64_t)__p);
  sub_10035F924((uint64_t)__p, &__str);
  std::string::operator=(&v200, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v193 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v200.__r_.__value_.__l.__size_)
    {
      v9 = (std::string *)v200.__r_.__value_.__r.__words[0];
      goto LABEL_14;
    }
LABEL_15:
    v189 = CFSTR("Unknown");
    goto LABEL_16;
  }
  if (!*((_BYTE *)&v200.__r_.__value_.__s + 23))
    goto LABEL_15;
  v9 = &v200;
LABEL_14:
  v189 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v9, +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding")));
LABEL_16:
  v10 = sub_10043FCAC(v3);
LABEL_17:
  v186 = v5;
  v190 = v3;
  v183 = v10;
  v11 = *(int ***)(a2 + 328);
  v12 = *(int ***)(a2 + 336);
  if (v11 == v12)
  {
    v26 = v195;
  }
  else
  {
    do
    {
      v13 = **v11;
      v14 = v198;
      if (v198 >= v199)
      {
        v16 = (char *)v197;
        v17 = (v198 - (_BYTE *)v197) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          abort();
        v19 = v199 - (_BYTE *)v197;
        if ((v199 - (_BYTE *)v197) >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)sub_1002B46E0((uint64_t)&v199, v20);
          v16 = (char *)v197;
          v14 = v198;
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[4 * v17];
        *(_DWORD *)v22 = v13;
        v15 = v22 + 4;
        while (v14 != v16)
        {
          v23 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v23;
          v22 -= 4;
        }
        v197 = v22;
        v198 = v15;
        v199 = &v21[4 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_DWORD *)v198 = v13;
        v15 = v14 + 4;
      }
      v198 = v15;
      v24 = *((char *)*v11 + 8);
      v25 = v195;
      if (v195 >= v196)
      {
        v27 = (char *)v194;
        v28 = (v195 - (_BYTE *)v194) >> 2;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62)
          abort();
        v30 = v196 - (_BYTE *)v194;
        if ((v196 - (_BYTE *)v194) >> 1 > v29)
          v29 = v30 >> 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
          v31 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          v32 = (char *)sub_1002B46E0((uint64_t)&v196, v31);
          v27 = (char *)v194;
          v25 = v195;
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[4 * v28];
        *(_DWORD *)v33 = v24;
        v26 = v33 + 4;
        while (v25 != v27)
        {
          v34 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *((_DWORD *)v33 - 1) = v34;
          v33 -= 4;
        }
        v194 = v33;
        v195 = v26;
        v196 = &v32[4 * v31];
        if (v27)
          operator delete(v27);
      }
      else
      {
        *(_DWORD *)v195 = v24;
        v26 = v25 + 4;
      }
      v195 = v26;
      ++v11;
    }
    while (v11 != v12);
  }
  if (v194 == v26)
  {
    v35 = 0;
    v40 = 0;
    v37 = v6;
    v43 = v190;
    v44 = v186;
  }
  else
  {
    LODWORD(v35) = 0;
    v36 = (unsigned int *)v194;
    v37 = v6;
    do
    {
      v39 = *v36++;
      v38 = v39;
      if (v39 <= 0xFFFFFF9B)
        v35 = v35;
      else
        v35 = v38;
    }
    while (v36 != (unsigned int *)v26);
    v40 = *(_DWORD *)(a2 + 316) - ((unint64_t)(v26 - (_BYTE *)v194) >> 2);
    v41 = (id)qword_1009997E8;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      v42 = *(_DWORD *)(a2 + 316);
      LODWORD(__str.__r_.__value_.__l.__data_) = 67109632;
      HIDWORD(__str.__r_.__value_.__r.__words[0]) = v40;
      LOWORD(__str.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = v42;
      HIWORD(__str.__r_.__value_.__r.__words[1]) = 2048;
      __str.__r_.__value_.__r.__words[2] = (v195 - (_BYTE *)v194) >> 2;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "TotalFrameDropped calculation: totalFrameDropped = %d, a2dpMetric.fTotalPurgeCount = %u, rssiAtSkip.size() = %lu", (uint8_t *)&__str, 0x18u);
    }

    v43 = v190;
    v44 = v186;
  }
  if (v197 == v198)
  {
    v47 = 0;
    v45 = 0;
    goto LABEL_71;
  }
  v45 = *((_DWORD *)v198 - 1);
  if (v45 - 1 >= 0x3B)
  {
    if (v45)
    {
      v4 = (double)v45 / 60.0;
      v46 = vcvtad_u64_f64(v4);
      goto LABEL_69;
    }
    v47 = 0;
LABEL_71:
    v46 = 0;
    goto LABEL_72;
  }
  v46 = 1;
LABEL_69:
  v47 = (v40 & ~(v40 >> 31)) / v45;
LABEL_72:
  v48 = *(_DWORD *)(a2 + 248);
  v49 = v45 - v48;
  if (v45 != v48 && v48)
  {
    v4 = (double)v49 / (double)v48;
    *(double *)(a2 + 240) = v4;
  }
  v50 = v49 - 1 < 0x3B;
  if (v49 - 1 >= 0x3B && v45 != v48)
  {
    v4 = (double)v49 / 60.0;
    v50 = vcvtad_u64_f64(v4);
  }
  *(_DWORD *)(a2 + 252) = v50;
  v51 = v48 - 1 < 0x3B;
  if (v48 >= 0x3C)
  {
    v4 = (double)v48 / 60.0;
    v51 = vcvtad_u64_f64(v4);
  }
  *(_DWORD *)(a2 + 248) = v51;
  v52 = *(_DWORD *)(a2 + 232);
  if (v52 - 1 >= 0x3B)
  {
    if (v52)
    {
      v4 = (double)v52 / 60.0;
      v52 = vcvtad_u64_f64(v4);
    }
  }
  else
  {
    v52 = 1;
  }
  *(_DWORD *)(a2 + 232) = v52;
  v53 = *(_QWORD *)(a2 + 288);
  if (v53)
    v54 = *(_QWORD *)(a2 + 264) / v53;
  else
    v54 = 0;
  v55 = *(_QWORD *)(a2 + 280);
  if (v55)
  {
    v56 = *(unsigned int *)(a2 + 272) / v55;
    if (v46)
    {
LABEL_89:
      LODWORD(v4) = *(_DWORD *)(a2 + 256);
      v4 = (double)*(unint64_t *)&v4;
      v57 = v4 / (double)v46;
      goto LABEL_92;
    }
  }
  else
  {
    v56 = 0;
    if (v46)
      goto LABEL_89;
  }
  v57 = 0.0;
LABEL_92:
  v58 = *(unsigned int **)(a2 + 352);
  v59 = *(unsigned int **)(a2 + 360);
  if (v58 == v59)
  {
    v62 = 0;
    v61 = 0;
  }
  else
  {
    v60 = 0;
    v61 = 0;
    LODWORD(v62) = 0;
    do
    {
      v64 = *v58++;
      v63 = v64;
      v65 = v64 - 1;
      if (v64 <= v62)
        v66 = v62;
      else
        v66 = v63;
      if (v65 >= 0x64)
        v62 = v62;
      else
        v62 = v66;
      if (v65 >= 0x64)
        v63 = 0;
      else
        ++v61;
      v60 += v63;
    }
    while (v58 != v59);
    if (v61)
      v61 = v60 / v61;
  }
  v67 = v51 == 0;
  if (v51)
    v68 = 2 * *(char *)(a2 + 388) - (int)v54;
  else
    v68 = *(char *)(a2 + 388);
  if (v67)
    v69 = v61;
  else
    v69 = 2 * v61 - v56;
  *(_QWORD *)(a2 + 296) = v68;
  *(_QWORD *)(a2 + 304) = v69;
  if (v45 >> 7 > 0x2A2 || (v4 = (double)v45, v8 + v7 >= (double)v45))
  {
    v70 = 0;
  }
  else
  {
    v4 = v4 - (v8 + v7);
    v70 = v4;
  }
  v141 = v56;
  v142 = v54;
  v153 = v47;
  v163 = v40 & ~(v40 >> 31);
  v159 = v61;
  v181 = v46;
  if ((_DWORD)v202 != 76)
  {
    v175 = 0;
    v173 = 0;
    goto LABEL_137;
  }
  v71 = v8;
  if (v8 < 0x15180)
  {
    if (v71 - 1 < 0x3B)
    {
      v72 = 1;
LABEL_124:
      v175 = v72;
      goto LABEL_126;
    }
    if (v71)
    {
      v4 = (double)v71 / 60.0;
      v72 = vcvtad_u64_f64(v4);
      goto LABEL_124;
    }
  }
  v175 = 0;
LABEL_126:
  if (v70 - 1 >= 0x3B)
  {
    if (v70)
    {
      v4 = (double)v70 / 60.0;
      v73 = vcvtad_u64_f64(v4);
    }
    else
    {
      v73 = 0;
    }
  }
  else
  {
    v73 = 1;
  }
  v74 = v7;
  v173 = v73;
  if (v7 < 0x15180)
  {
    if (v74 - 1 < 0x3B)
    {
      v75 = 1;
LABEL_136:
      v177 = v75;
      goto LABEL_138;
    }
    if (v74)
    {
      v4 = (double)v74 / 60.0;
      v75 = vcvtad_u64_f64(v4);
      goto LABEL_136;
    }
  }
LABEL_137:
  v177 = 0;
LABEL_138:
  v76 = *(_DWORD *)(a2 + 412);
  if (v76)
  {
    v147 = (v76 >> 1) & 1;
    v149 = *(_DWORD *)(a2 + 412) & 1;
    v145 = (v76 >> 2) & 1;
    v143 = (v76 >> 3) & 1;
    if (v44)
      goto LABEL_140;
LABEL_143:
    v179 = 0;
    if (v37)
      goto LABEL_141;
    goto LABEL_144;
  }
  v149 = 0;
  v147 = 0;
  v145 = 0;
  v143 = 0;
  if (!v44)
    goto LABEL_143;
LABEL_140:
  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  v179 = ((double)*(unint64_t *)&v4 / (double)v44 * 100.0);
  if (v37)
  {
LABEL_141:
    v169 = *(_DWORD *)a2 / v37;
    v167 = *(_DWORD *)(a2 + 8) / v37;
    v165 = *(_DWORD *)(a2 + 16) / v37;
    v171 = *(_DWORD *)(a2 + 28) / v37;
    goto LABEL_145;
  }
LABEL_144:
  v171 = 0;
  v169 = 0;
  v167 = 0;
  v165 = 0;
LABEL_145:
  v77 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v77 + 136))(v77))
  {
    v161 = 0;
    v157 = 0;
    v81 = 0;
    v82 = 0;
    v83 = 0;
    goto LABEL_158;
  }
  v79 = *(_DWORD *)(a2 + 36);
  if (!v79)
  {
    v161 = 0;
    v80 = *(_DWORD *)(a2 + 40);
    if (v80)
      goto LABEL_148;
LABEL_151:
    v157 = 0;
    goto LABEL_152;
  }
  v80 = *(_DWORD *)(a2 + 40);
  v161 = vcvtas_u32_f32((float)((float)v79 * 100.0) / (float)(v80 + v79 + *(_DWORD *)(a2 + 60)));
  if (!v80)
    goto LABEL_151;
LABEL_148:
  v157 = vcvtas_u32_f32((float)((float)v80 * 100.0) / (float)(v80 + v79 + *(_DWORD *)(a2 + 60)));
LABEL_152:
  v84 = *(_DWORD *)(a2 + 44);
  v85 = *(_DWORD *)(a2 + 48);
  *(float *)v78.i32 = (float)v85;
  v86 = vcvtps_u32_f32((float)v85 / (float)v84);
  if (v84)
    v81 = v86;
  else
    v81 = 0;
  v82 = v80 + v79;
  if (v85)
  {
    LODWORD(v82) = vcvtps_u32_f32((float)v82 / *(float *)v78.i32);
    v83 = vcvt_u32_f32(vrndp_f32(vdiv_f32(vcvt_f32_u32(*(uint32x2_t *)(a2 + 52)), (float32x2_t)vdup_lane_s32(v78, 0))));
  }
  else
  {
    v83 = *(uint32x2_t *)(a2 + 52);
  }
LABEL_158:
  v187 = v83;
  v87 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v87 + 160))(v87) && (v88 = *(_DWORD *)(a2 + 60)) != 0)
  {
    v155 = vcvtas_u32_f32((float)((float)v88 * 100.0) / (float)(*(_DWORD *)(a2 + 36) + v88 + *(_DWORD *)(a2 + 40)));
    if (!v43)
      goto LABEL_171;
  }
  else
  {
    v155 = 0;
    if (!v43)
    {
LABEL_171:
      v90 = CFSTR("Unknown");
      goto LABEL_172;
    }
  }
  if (!sub_100442118(v43, 12))
  {
    v43 = 0;
    goto LABEL_171;
  }
  sub_1004491B4(v43, 0xAu, &__str);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  v90 = (const __CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_str));
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v43 = 1;
LABEL_172:
  v91 = *(_DWORD *)(a2 + 440);
  if (v91 < 0x15180)
  {
    if (v91 - 1 < 0x3B)
    {
      v92 = 1;
LABEL_177:
      v151 = v92;
      goto LABEL_179;
    }
    if (v91)
    {
      v92 = vcvtad_u64_f64((double)v91 / 60.0);
      goto LABEL_177;
    }
  }
  v151 = 0;
LABEL_179:
  if (*(char *)(a2 + 471) >= 0)
    v93 = a2 + 448;
  else
    v93 = *(_QWORD *)(a2 + 448);
  v191 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v93));
  v94 = *(char *)(a2 + 495);
  v185 = (__CFString *)v90;
  if (v94 < 0)
  {
    v95 = *(_DWORD **)(a2 + 472);
    if (*(_QWORD *)(a2 + 480) != 7)
    {
LABEL_190:
      v97 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v95));

      v191 = (void *)v97;
      goto LABEL_191;
    }
  }
  else
  {
    v95 = (_DWORD *)(a2 + 472);
    if (v94 != 7)
      goto LABEL_190;
  }
  if (*v95 != 1852534357 || *(_DWORD *)((char *)v95 + 3) != 1853321070)
    goto LABEL_190;
LABEL_191:
  v203[0] = CFSTR("AccessoryPID");
  v122 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v201));
  v204[0] = v122;
  v204[1] = v191;
  v203[1] = CFSTR("AudioCategory");
  v203[2] = CFSTR("AvgMaxGoodPcktsPerSwitch");
  v139 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v187.u32[0]));
  v204[2] = v139;
  v203[3] = CFSTR("AvgMinGoodPcktsPerSwitch");
  v188 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v187.u32[1]));
  v204[3] = v188;
  v203[4] = CFSTR("AvgPacketsPerSwitch");
  v138 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v82));
  v204[4] = v138;
  v203[5] = CFSTR("AvgSwitchesPerSecond");
  v137 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v81));
  v204[5] = v137;
  v203[6] = CFSTR("BitRateLowAvg");
  v121 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 376)));
  v204[6] = v121;
  v203[7] = CFSTR("BitRateMediumAvg");
  v136 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 380)));
  v204[7] = v136;
  v203[8] = CFSTR("BtRole");
  v135 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a2 + 320)));
  v204[8] = v135;
  v203[9] = CFSTR("DurationInMinutes");
  v182 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v181));
  v204[9] = v182;
  v203[10] = CFSTR("EpaCallTimeRatio");
  v180 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v179));
  v204[10] = v180;
  v204[11] = v90;
  v203[11] = CFSTR("FWVersion");
  v203[12] = CFSTR("HighLatencyDurationMins");
  v120 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v177));
  v204[12] = v120;
  v203[13] = CFSTR("HDRSession");
  v184 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v183));
  v204[13] = v184;
  v203[14] = CFSTR("IsAppleAudioDevice");
  v178 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v43));
  v204[14] = v178;
  v203[15] = CFSTR("LowLatencyDurationMins");
  v176 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v175));
  v204[15] = v176;
  v203[16] = CFSTR("MidLatencyDurationMins");
  v174 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v173));
  v204[16] = v174;
  v203[17] = CFSTR("MaxOverwaitDurationMs");
  v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + 504)));
  v204[17] = v119;
  v203[18] = CFSTR("NoiseFloorAvgOnGoodChannels");
  v172 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v171));
  v204[18] = v172;
  v203[19] = CFSTR("NoiseFloorMinOnGoodChannels");
  v134 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 32)));
  v204[19] = v134;
  v203[20] = CFSTR("NoiseFloor50Percentile");
  v170 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v169));
  v204[20] = v170;
  v203[21] = CFSTR("NoiseFloor50Max");
  v133 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 4)));
  v204[21] = v133;
  v203[22] = CFSTR("NoiseFloor75Percentile");
  v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v167));
  v204[22] = v118;
  v203[23] = CFSTR("NoiseFloor75Max");
  v168 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 12)));
  v204[23] = v168;
  v203[24] = CFSTR("NoiseFloor90Percentile");
  v166 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v165));
  v204[24] = v166;
  v203[25] = CFSTR("NoiseFloor90Max");
  v132 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 20)));
  v204[25] = v132;
  v203[26] = CFSTR("OverwaitCountMoreThan50ms");
  v131 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + 496)));
  v204[26] = v131;
  v203[27] = CFSTR("PacketLoss");
  v117 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v163));
  v204[27] = v117;
  v203[28] = CFSTR("PercentPacketsAnt0");
  v164 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v161));
  v204[28] = v164;
  v203[29] = CFSTR("PercentPacketsAnt1");
  v162 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v157));
  v204[29] = v162;
  v203[30] = CFSTR("PercentPacketsTxBF");
  v158 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v155));
  v204[30] = v158;
  v203[31] = CFSTR("ReTransmissionRate");
  v160 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v159));
  v204[31] = v160;
  v203[32] = CFSTR("ReTransmissionRateMax");
  v116 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v62));
  v204[32] = v116;
  v203[33] = CFSTR("RssiAverage");
  v98 = *(int *)(a2 + 424);
  if ((_DWORD)v98)
    v99 = *(_QWORD *)(a2 + 416) / v98;
  else
    v99 = 0;
  v156 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v99));
  v204[33] = v156;
  v203[34] = CFSTR("RssiMax");
  v130 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 432)));
  v204[34] = v130;
  v203[35] = CFSTR("RssiMin");
  v129 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 428)));
  v204[35] = v129;
  v203[36] = CFSTR("RssiAtSkip");
  v128 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v35));
  v204[36] = v128;
  v204[37] = v189;
  v203[37] = CFSTR("SanitizedDeviceName");
  v203[38] = CFSTR("SpatialProfileSessionDuration");
  v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v151));
  v204[38] = v115;
  v203[39] = CFSTR("SkipperMin");
  v154 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v153));
  v204[39] = v154;
  v203[40] = CFSTR("TxCountIncludingReTx");
  v152 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + 512)));
  v204[40] = v152;
  v203[41] = CFSTR("VendorID");
  v127 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v202));
  v204[41] = v127;
  v203[42] = CFSTR("Version");
  v126 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v201)));
  v204[42] = v126;
  v203[43] = CFSTR("VersionIDSource");
  v114 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v202)));
  v204[43] = v114;
  v203[44] = CFSTR("WirelessSplitterOff");
  v125 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v76 == 0));
  v204[44] = v125;
  v203[45] = CFSTR("WirelessSplitterGuestRole");
  v150 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v149));
  v204[45] = v150;
  v203[46] = CFSTR("WirelessSplitterOwnerRole");
  v148 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v147));
  v204[46] = v148;
  v203[47] = CFSTR("WirelessSplitterUser1Type");
  v146 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v145));
  v204[47] = v146;
  v203[48] = CFSTR("WirelessSplitterUser2Type");
  v112 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v143));
  v204[48] = v112;
  v203[49] = CFSTR("BTBand");
  if (*(char *)(a2 + 191) >= 0)
    v100 = a2 + 168;
  else
    v100 = *(_QWORD *)(a2 + 168);
  v144 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v100, v112));
  v204[49] = v144;
  v203[50] = CFSTR("TipiConnected");
  v124 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a2 + 192)));
  v204[50] = v124;
  v203[51] = CFSTR("AoSDuration");
  v123 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 232)));
  v204[51] = v123;
  v203[52] = CFSTR("ISMvsUBORatio");
  v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a2 + 240)));
  v204[52] = v101;
  v203[53] = CFSTR("2GDuration");
  v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 252)));
  v204[53] = v102;
  v203[54] = CFSTR("5GDuration");
  v103 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 248)));
  v204[54] = v103;
  v203[55] = CFSTR("FlushSessionRatio");
  v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v57));
  v204[55] = v104;
  v203[56] = CFSTR("AvgAoSRSSI5G");
  v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v142));
  v204[56] = v105;
  v203[57] = CFSTR("AvgAoSRSSI2G");
  v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(a2 + 296)));
  v204[57] = v106;
  v203[58] = CFSTR("AvgRetx5G");
  v107 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v141));
  v204[58] = v107;
  v203[59] = CFSTR("AvgRetx2G");
  v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *(_QWORD *)(a2 + 304)));
  v204[59] = v108;
  v203[60] = CFSTR("JitterBuffer");
  v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 312)));
  v204[60] = v109;
  v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v204, v203, 61));

  v111 = (id)qword_1009997E8;
  if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__str.__r_.__value_.__l.__data_) = 138412290;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v110;
    _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "A2dpLinkQuality stats %@", (uint8_t *)&__str, 0xCu);
  }

  sub_100015CC8(a1, 7u, v110);
  if (v194)
  {
    v195 = (char *)v194;
    operator delete(v194);
  }
  if (v197)
  {
    v198 = (char *)v197;
    operator delete(v197);
  }

  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
}

void sub_10035F4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *__p;
  void *a71;
  uint64_t v71;

  if (*(char *)(v71 - 137) < 0)
    operator delete(*(void **)(v71 - 160));

  if (__p)
    operator delete(__p);
  if (a71)
    operator delete(a71);

  if (SLOBYTE(STACK[0x21F]) < 0)
    operator delete((void *)STACK[0x208]);
  _Unwind_Resume(a1);
}

void sub_10035F924(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  char *v11[2];
  const void *v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[3];
  _QWORD v22[3];
  _QWORD v23[3];
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[3];
  _QWORD v29[3];
  _QWORD v30[3];
  _QWORD v31[3];
  _QWORD v32[3];
  _QWORD v33[3];
  _QWORD v34[3];
  _QWORD v35[3];
  _QWORD v36[3];
  _QWORD v37[3];
  _QWORD v38[3];
  _QWORD v39[3];
  _QWORD v40[3];
  _QWORD v41[3];
  _QWORD v42[3];
  _QWORD v43[3];
  _QWORD v44[3];
  _QWORD v45[3];
  _QWORD v46[3];
  _QWORD v47[3];
  _QWORD v48[3];
  _QWORD v49[3];
  _QWORD v50[3];
  _QWORD v51[3];
  _QWORD v52[3];
  _QWORD v53[3];
  _QWORD v54[3];
  _QWORD v55[3];
  _QWORD v56[3];
  _QWORD v57[3];
  _QWORD v58[3];
  _QWORD v59[3];
  _QWORD v60[3];
  _QWORD v61[3];
  _QWORD v62[3];
  _QWORD v63[3];
  _QWORD v64[3];
  _QWORD v65[3];
  _QWORD v66[3];
  _QWORD v67[3];
  _QWORD v68[3];
  _QWORD v69[3];
  _QWORD v70[3];
  _QWORD v71[3];
  _QWORD v72[3];
  _QWORD v73[3];
  _QWORD v74[3];
  _QWORD v75[3];
  _QWORD v76[3];

  v4 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4))
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    a2[2] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
  }
  else
  {
    v10 = 0;
    v11[0] = 0;
    v11[1] = 0;
    sub_100091AE8(v12, "accent");
    sub_100091AE8(v13, "audi");
    sub_100091AE8(v14, "azera");
    sub_100091AE8(v15, "blue&me");
    sub_100091AE8(v16, "bmw");
    sub_100091AE8(v17, "buick");
    sub_100091AE8(v18, "cadillac");
    sub_100091AE8(v19, "car m_media");
    sub_100091AE8(v20, "car multimedia");
    sub_100091AE8(v21, "chevrolet");
    sub_100091AE8(v22, "elantra");
    sub_100091AE8(v23, "ferrari");
    sub_100091AE8(v24, "genesis");
    sub_100091AE8(v25, "gmc");
    sub_100091AE8(v26, "handsfreelink");
    sub_100091AE8(v27, "hands free system");
    sub_100091AE8(v28, "jaguar");
    sub_100091AE8(v29, "kia motors");
    sub_100091AE8(v30, "lexus");
    sub_100091AE8(v31, "mazda");
    sub_100091AE8(v32, "mb bluetooth");
    sub_100091AE8(v33, "my-car");
    sub_100091AE8(v34, "my altima");
    sub_100091AE8(v35, "my armada");
    sub_100091AE8(v36, "my car");
    sub_100091AE8(v37, "my maxima");
    sub_100091AE8(v38, "my murano");
    sub_100091AE8(v39, "my pathfinder");
    sub_100091AE8(v40, "my rogue");
    sub_100091AE8(v41, "my sentra");
    sub_100091AE8(v42, "my titan");
    sub_100091AE8(v43, "my versa");
    sub_100091AE8(v44, "my quest");
    sub_100091AE8(v45, "pcm");
    sub_100091AE8(v46, "range rover");
    sub_100091AE8(v47, "santa fe");
    sub_100091AE8(v48, "sonata");
    sub_100091AE8(v49, "subaru");
    sub_100091AE8(v50, "sync");
    sub_100091AE8(v51, "tesla");
    sub_100091AE8(v52, "toyota");
    sub_100091AE8(v53, "tucson");
    sub_100091AE8(v54, "uconnect");
    sub_100091AE8(v55, "veloster");
    sub_100091AE8(v56, "vw");
    sub_100091AE8(v57, "aukey ep-b4");
    sub_100091AE8(v58, "bluebuds x");
    sub_100091AE8(v59, "dr-bt50");
    sub_100091AE8(v60, "freedom sprint");
    sub_100091AE8(v61, "hesh 2 wireless");
    sub_100091AE8(v62, "jabra rox wireless");
    sub_100091AE8(v63, "jaybird bluebud x");
    sub_100091AE8(v64, "jbl micro wireless");
    sub_100091AE8(v65, "koss bt540i");
    sub_100091AE8(v66, "lg hbs760");
    sub_100091AE8(v67, "marsee one x");
    sub_100091AE8(v68, "mdr-1rbt");
    sub_100091AE8(v69, "motorola s9-hd");
    sub_100091AE8(v70, "parrot zik 3");
    sub_100091AE8(v71, "pdx-b11 yamaha");
    sub_100091AE8(v72, "plt_m70");
    sub_100091AE8(v73, "presence");
    sub_100091AE8(v74, "s11-flex hd");
    sub_100091AE8(v75, "sb2 wireless");
    sub_100091AE8(v76, "sync by 50");
    sub_100393D54((uint64_t)&v10, v12, 65);
    v5 = 195;
    do
    {
      if (SHIBYTE(v12[v5 - 1]) < 0)
        operator delete(v11[v5 - 1]);
      v5 -= 3;
    }
    while (v5 * 8);
    if (*(char *)(a1 + 23) < 0)
    {
      v7 = *(_BYTE **)a1;
      v6 = (_BYTE *)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8));
    }
    else
    {
      v6 = (_BYTE *)(a1 + *(unsigned __int8 *)(a1 + 23));
      v7 = (_BYTE *)a1;
    }
    while (v7 != v6)
    {
      *v7 = __tolower(*v7);
      ++v7;
    }
    v8 = sub_10001F2AC((uint64_t)&v10, (const void **)a1);
    if (v11 == (char **)v8)
    {
      sub_100091AE8(a2, "");
    }
    else if (*(char *)(v8 + 55) < 0)
    {
      sub_10003430C(a2, *(void **)(v8 + 32), *(_QWORD *)(v8 + 40));
    }
    else
    {
      v9 = *(_OWORD *)(v8 + 32);
      a2[2] = *(_QWORD *)(v8 + 48);
      *(_OWORD *)a2 = v9;
    }
    sub_100056BAC((uint64_t)&v10, v11[0]);
  }
}

void sub_10036002C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = 1560;
  while (1)
  {
    if (*(char *)(v13 + v15 - 1) < 0)
      operator delete(*(void **)(v13 + v15 - 24));
    v15 -= 24;
    if (!v15)
      _Unwind_Resume(exception_object);
  }
}

uint64_t sub_1003600A0(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  _QWORD v5[5];
  _BYTE v6[192];
  __int128 v7[12];

  memset(v7, 0, sizeof(v7));
  sub_1003934E8((uint64_t)v7, a2);
  v3 = sub_10006BBAC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_100360180;
  v5[3] = &unk_10092A270;
  v5[4] = a1;
  sub_1003934E8((uint64_t)v6, v7);
  sub_100041A34(v3, v5);
  sub_10039365C((uint64_t)v6);
  return sub_10039365C((uint64_t)v7);
}

void sub_10036015C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10039365C(v1);
  sub_10039365C(v2 - 224);
  _Unwind_Resume(a1);
}

void sub_100360180(uint64_t a1)
{
  unsigned __int8 *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint8_t buf[4];
  void *v27;
  _QWORD v28[17];
  _QWORD v29[17];

  v2 = *(unsigned __int8 **)(a1 + 32);
  v28[0] = CFSTR("AccessoryPID");
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 76)));
  v29[0] = v25;
  v28[1] = CFSTR("AoSEnabled");
  v3 = (_QWORD *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
    v3 = (_QWORD *)*v3;
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3));
  v29[1] = v24;
  v28[2] = CFSTR("AudioCategory");
  v4 = (_QWORD *)(a1 + 104);
  if (*(char *)(a1 + 127) < 0)
    v4 = (_QWORD *)*v4;
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4));
  v29[2] = v23;
  v28[3] = CFSTR("BTBand");
  v5 = (_QWORD *)(a1 + 128);
  if (*(char *)(a1 + 151) < 0)
    v5 = (_QWORD *)*v5;
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5));
  v29[3] = v22;
  v28[4] = CFSTR("FWVersion");
  v6 = (_QWORD *)(a1 + 152);
  if (*(char *)(a1 + 175) < 0)
    v6 = (_QWORD *)*v6;
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
  v29[4] = v21;
  v28[5] = CFSTR("JitterBuffer");
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 176)));
  v29[5] = v20;
  v28[6] = CFSTR("NoiseFloor50Percentile");
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 180)));
  v29[6] = v19;
  v28[7] = CFSTR("NoiseFloor50Max");
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44)));
  v29[7] = v18;
  v28[8] = CFSTR("NumberOfClassicDevicesConnected");
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v2[528]));
  v29[8] = v17;
  v28[9] = CFSTR("NumberOfClassicHIDDevicesConnected");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v2[531]));
  v29[9] = v7;
  v28[10] = CFSTR("NumberOfLEDevicesConnected");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v2[529]));
  v29[10] = v8;
  v28[11] = CFSTR("NumberOfLEHIDDevicesConnected");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v2[530]));
  v29[11] = v9;
  v28[12] = CFSTR("ReTransmissionRate");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 184)));
  v29[12] = v10;
  v28[13] = CFSTR("RssiAverage");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 192)));
  v29[13] = v11;
  v28[14] = CFSTR("RssiMax");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 196)));
  v29[14] = v12;
  v28[15] = CFSTR("RssiMin");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 200)));
  v29[15] = v13;
  v28[16] = CFSTR("TipiConnected");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 204)));
  v29[16] = v14;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v29, v28, 17));

  v16 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v27 = v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "A2dpPacketFlush sendA2DPPacketFlushMetric stats %@", buf, 0xCu);
  }
  sub_100015CC8((uint64_t)v2, 8u, v15);

}

void sub_100360580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100360688(uint64_t a1, uint64_t a2)
{
  return sub_1003934E8(a1 + 40, (__int128 *)(a2 + 40));
}

uint64_t sub_100360694(uint64_t a1)
{
  return sub_10039365C(a1 + 40);
}

float sub_10036069C(unsigned __int8 *a1)
{
  NSObject *v2;
  float result;
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD v8[2];
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = a1[530];
    v5 = a1[529];
    v6 = a1[531];
    v7 = a1[528];
    v8[0] = 67109888;
    v8[1] = v7;
    v9 = 1024;
    v10 = v6;
    v11 = 1024;
    v12 = v5;
    v13 = 1024;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "NumberOfClassicDevicesConnected = %d, NumberOfClassicHIDDevicesConnected = %u, NumberOfLEDevicesConnected = %u, NumberOfLEHIDDevicesConnected = %u", (uint8_t *)v8, 0x1Au);
  }
  return result;
}

void sub_100360764(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  double v6;
  int v7;
  _BOOL4 v8;
  const __CFString *v9;
  double v10;
  NSObject *v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  std::string *v18;
  unsigned int v19;
  unsigned int v20;
  double v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int32x2_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint32x2_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  double v46;
  unint64_t v47;
  int32x2_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  unsigned int v94;
  void *v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  void *v99;
  unsigned int v100;
  void *v101;
  unsigned int v102;
  void *v103;
  unsigned int v104;
  void *v105;
  const __CFString *v106;
  void *v107;
  unsigned int v108;
  void *v109;
  unsigned int v110;
  void *v111;
  unsigned int v112;
  void *v113;
  unsigned int v114;
  void *v115;
  unsigned int v116;
  void *v117;
  unsigned int v118;
  void *v119;
  unsigned int v120;
  void *v121;
  const __CFString *v122;
  void *v123;
  unsigned int v124;
  void *v125;
  unsigned int v126;
  void *v127;
  unsigned int v128;
  void *v129;
  unsigned int v130;
  void *v131;
  int32x2_t v132;
  void *v133;
  uint32x2_t v134;
  void *v135;
  __CFString *v136;
  __CFString *v138;
  void *__p[2];
  char v140;
  std::string v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[56];
  _QWORD v145[56];
  uint8_t buf[8];
  __int16 v147;
  unsigned int v148;
  __int16 v149;
  _BYTE v150[10];
  _BYTE v151[6];
  __int16 v152;
  unsigned int v153;
  __int16 v154;
  unsigned int v155;
  __int16 v156;
  unsigned int v157;
  __int16 v158;
  int v159;
  __int16 v160;
  int v161;
  __int16 v162;
  int v163;
  __int16 v164;
  int v165;
  __int16 v166;
  int v167;

  v4 = *(_QWORD *)(a2 + 64);
  v142 = 0;
  v143 = 0;
  if (v4)
    sub_100444BF0(v4, (_DWORD *)&v143 + 1, &v143, &v142, (_DWORD *)&v142 + 1);
  v5 = *(_DWORD *)(a2 + 180);
  memset(&v141, 0, sizeof(v141));
  sub_100091AE8(&v141, "");
  v7 = *(_DWORD *)(a2 + 172);
  v8 = 1;
  if ((v7 - 128) >= 2)
    v8 = v7 == 255;
  if (v7 == 256 || v7 == 127)
  {
    LODWORD(v6) = *(_DWORD *)(a2 + 164);
    v6 = (double)*(unint64_t *)&v6 / 0.0075;
    v124 = v6;
    v106 = CFSTR("Mono");
    v9 = CFSTR("Cellular Voice Call");
LABEL_10:
    v122 = v9;
    goto LABEL_11;
  }
  if (v8)
  {
    LODWORD(v6) = *(_DWORD *)(a2 + 164);
    v6 = (double)*(unint64_t *)&v6 / 0.015;
    v124 = v6;
    v106 = CFSTR("Stereo");
    v9 = CFSTR("FaceTime");
    goto LABEL_10;
  }
  v124 = 0;
  v122 = CFSTR("Unknown");
  v106 = CFSTR("Unknown");
LABEL_11:
  if (v5)
  {
    LODWORD(v6) = *(_DWORD *)(a2 + 176);
    v10 = (double)*(unint64_t *)&v6;
    if (*(_BYTE *)(a2 + 237))
    {
      v6 = v10 / (double)*(unint64_t *)(a2 + 296) * 100.0;
      v130 = v6;
    }
    else
    {
      v130 = (v10 / (double)v5 * 100.0);
      v11 = (id)qword_1009997E8;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_DWORD *)(a2 + 176);
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&buf[4] = v12;
        v147 = 1024;
        v148 = v5;
        v149 = 2048;
        *(double *)v150 = (double)v12 / (double)v5;
        *(_WORD *)&v150[8] = 1024;
        *(_DWORD *)v151 = v130;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Calculated PLCUsage: %u / %u  i.e %lf * 100 = %u", buf, 0x1Eu);
      }

    }
    v13 = *(_DWORD *)(a2 + 180);
    v14 = v124 >= v13;
    v15 = v124 - v13;
    if (v15 != 0 && v14)
    {
      v94 = v15;
      v6 = (double)v15 / (double)v5 * 100.0;
      v126 = v6;
      goto LABEL_22;
    }
  }
  else
  {
    v130 = 0;
  }
  v126 = 0;
  v94 = 0;
LABEL_22:
  v16 = *(_DWORD *)(a2 + 164);
  if (v16 - 1 < 0x3B)
  {
    v17 = 1;
    goto LABEL_26;
  }
  if (v16)
  {
    v6 = (double)v16 / 60.0;
    v17 = vcvtad_u64_f64(v6);
LABEL_26:
    v128 = v17;
    if (!v4)
      goto LABEL_38;
    goto LABEL_27;
  }
  v128 = 0;
  if (!v4)
    goto LABEL_38;
LABEL_27:
  sub_10043F78C(v4, (uint64_t)__p);
  sub_10035F924((uint64_t)__p, buf);
  std::string::operator=(&v141, (const std::string *)buf);
  if ((v150[7] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (v140 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v141.__r_.__value_.__l.__size_)
    {
      v18 = (std::string *)v141.__r_.__value_.__r.__words[0];
      goto LABEL_36;
    }
  }
  else if (*((_BYTE *)&v141.__r_.__value_.__s + 23))
  {
    v18 = &v141;
LABEL_36:
    v136 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v18, +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding")));
    goto LABEL_39;
  }
LABEL_38:
  v136 = CFSTR("Unknown");
LABEL_39:
  v20 = *(_DWORD *)(a2 + 104);
  v19 = *(_DWORD *)(a2 + 108);
  if (v20)
  {
    if (v19)
    {
      if (*(_BYTE *)(a2 + 237))
      {
        v21 = (double)*(unint64_t *)(a2 + 248);
        v22 = (double)*(unint64_t *)(a2 + 280);
      }
      else
      {
        v21 = (double)(*(_DWORD *)(a2 + 132) + *(_DWORD *)(a2 + 128));
        v22 = (double)(v19 + v20);
      }
      v6 = v21 / v22 * 100.0;
      v118 = v6;
    }
    else
    {
      v118 = 0;
    }
    LODWORD(v6) = *(_DWORD *)(a2 + 128);
    *(double *)&v24 = (double)*(unint64_t *)&v6 / (double)v20 * 100.0;
    v120 = *(double *)&v24;
    LODWORD(v24) = *(_DWORD *)(a2 + 96);
    *(double *)&v25 = (double)v24 / (double)v20 * 100.0;
    v23 = *(double *)&v25;
    LODWORD(v25) = *(_DWORD *)(a2 + 112);
    *(double *)&v26 = (double)v25 / (double)v20 * 100.0;
    v100 = *(double *)&v26;
    LODWORD(v26) = *(_DWORD *)(a2 + 120);
    v6 = (double)v26 / (double)v20 * 100.0;
    v104 = v6;
    if (v19)
      goto LABEL_50;
LABEL_44:
    v98 = 0;
    v102 = 0;
    goto LABEL_51;
  }
  v118 = 0;
  v120 = 0;
  v23 = 0;
  v100 = 0;
  v104 = 0;
  if (!v19)
    goto LABEL_44;
LABEL_50:
  LODWORD(v6) = *(_DWORD *)(a2 + 116);
  *(double *)&v27 = (double)*(unint64_t *)&v6 / (double)v19 * 100.0;
  v98 = *(double *)&v27;
  LODWORD(v27) = *(_DWORD *)(a2 + 124);
  v102 = ((double)v27 / (double)v19 * 100.0);
LABEL_51:
  v28 = *(_DWORD *)(a2 + 24);
  if (v28)
  {
    v116 = *(_DWORD *)a2 / (int)v28;
    v114 = *(_DWORD *)(a2 + 16) / (int)v28;
    v112 = *(_DWORD *)(a2 + 28) / v28;
  }
  else
  {
    v116 = 0;
    v114 = 0;
    v112 = 0;
  }
  v29 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 136))(v29))
  {
    v33 = 0;
    v34 = 0;
    v110 = 0;
    v108 = 0;
    v35 = 0;
    goto LABEL_67;
  }
  v31 = *(_DWORD *)(a2 + 36);
  if (!v31)
  {
    v110 = 0;
    v32 = *(_DWORD *)(a2 + 40);
    if (v32)
      goto LABEL_57;
LABEL_60:
    v108 = 0;
    goto LABEL_61;
  }
  v32 = *(_DWORD *)(a2 + 40);
  v110 = vcvtas_u32_f32((float)((float)v31 * 100.0) / (float)(v32 + v31 + *(_DWORD *)(a2 + 60)));
  if (!v32)
    goto LABEL_60;
LABEL_57:
  v108 = vcvtas_u32_f32((float)((float)v32 * 100.0) / (float)(v32 + v31 + *(_DWORD *)(a2 + 60)));
LABEL_61:
  v36 = *(_DWORD *)(a2 + 44);
  v37 = *(_DWORD *)(a2 + 48);
  *(float *)v30.i32 = (float)v37;
  v38 = vcvtps_u32_f32((float)v37 / (float)v36);
  if (v36)
    v33 = v38;
  else
    v33 = 0;
  v34 = v32 + v31;
  if (v37)
  {
    LODWORD(v34) = vcvtps_u32_f32((float)v34 / *(float *)v30.i32);
    v35 = vcvt_u32_f32(vrndp_f32(vdiv_f32(vcvt_f32_u32(*(uint32x2_t *)(a2 + 52)), (float32x2_t)vdup_lane_s32(v30, 0))));
  }
  else
  {
    v35 = *(uint32x2_t *)(a2 + 52);
  }
LABEL_67:
  v134 = v35;
  v39 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v39 + 160))(v39) && (v40 = *(_DWORD *)(a2 + 60)) != 0)
  {
    LODWORD(v2) = vcvtas_u32_f32((float)((float)v40 * 100.0) / (float)(*(_DWORD *)(a2 + 36) + v40 + *(_DWORD *)(a2 + 40)));
    if (!v4)
      goto LABEL_79;
  }
  else
  {
    v2 = 0;
    if (!v4)
    {
LABEL_79:
      v43 = 0;
      v138 = CFSTR("Unknown");
      goto LABEL_80;
    }
  }
  if (!sub_100442118(v4, 12))
    goto LABEL_79;
  sub_1004491B4(v4, 0xAu, buf);
  if (v150[7] >= 0)
    v41 = buf;
  else
    v41 = *(uint8_t **)buf;
  v42 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v41));
  if ((v150[7] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v138 = (__CFString *)v42;
  v43 = 1;
LABEL_80:
  v133 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%dms"), *(_QWORD *)(a2 + 224)));
  v45 = *(_DWORD *)(a2 + 240);
  v44 = *(_DWORD *)(a2 + 244);
  if (*(_QWORD *)(a2 + 240))
  {
    v46 = (double)(v44 + v45);
    LODWORD(v97) = ((double)v44 / v46 * 100.0);
    HIDWORD(v97) = ((double)v45 / v46 * 100.0);
  }
  else
  {
    v97 = 0;
  }
  v47 = *(_QWORD *)(a2 + 280);
  if (v47)
    v48 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vmulq_f64(vdivq_f64(vcvtq_f64_u64(*(uint64x2_t *)(a2 + 264)), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v47), 0)), (float64x2_t)vdupq_n_s64(0x4059000000000000uLL))));
  else
    v48 = 0;
  v132 = v48;
  v49 = *(_QWORD *)(a2 + 296);
  if (v49)
    v96 = ((double)*(unint64_t *)(a2 + 288) / (double)v49 * 100.0);
  else
    v96 = 0;
  v50 = *(unsigned int *)(a2 + 232);
  sub_10036069C(a1);
  v51 = (id)qword_1009997E8;
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
  {
    v52 = *(_DWORD *)(a2 + 172);
    v53 = *(int *)(a2 + 200);
    if ((_DWORD)v53)
      v53 = *(_QWORD *)(a2 + 192) / v53;
    v55 = *(_DWORD *)(a2 + 216);
    v54 = *(_DWORD *)(a2 + 220);
    v56 = *(_DWORD *)(a2 + 240);
    v57 = *(_DWORD *)(a2 + 244);
    *(_DWORD *)buf = 67112192;
    *(_DWORD *)&buf[4] = v52;
    v147 = 1024;
    v148 = v128;
    v149 = 1024;
    *(_DWORD *)v150 = v130;
    *(_WORD *)&v150[4] = 1024;
    *(_DWORD *)&v150[6] = v126;
    *(_WORD *)v151 = 1024;
    *(_DWORD *)&v151[2] = 0;
    v152 = 1024;
    v153 = v5;
    v154 = 1024;
    v155 = v124;
    v156 = 1024;
    v157 = v94;
    v158 = 1024;
    v159 = v53;
    v160 = 1024;
    v161 = v54;
    v162 = 1024;
    v163 = v55;
    v164 = 1024;
    v165 = v56;
    v166 = 1024;
    v167 = v57;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Sending HFPLinkQuality stats: Codec = %u, DurationInMinutes = %u, PlcUsage = %u, MissingSCORate = %u, SilenceCycleRate = %u,[TotalFrameCount = %u, ExpectedSCOCount = %u, MissingSCOCount = %u] RssiAverage = %d, ReTransmission_RX = %u, ReTransmission_TX = %u 2GDurationSecs = %u 5GDurationSecs = %u", buf, 0x50u);
  }

  v144[0] = CFSTR("AvgMaxGoodPcktsPerSwitch");
  v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v134.u32[0]));
  v145[0] = v95;
  v144[1] = CFSTR("AvgMinGoodPcktsPerSwitch");
  v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v134.u32[1]));
  v145[1] = v93;
  v144[2] = CFSTR("AvgPacketsPerSwitch");
  v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v34));
  v145[2] = v92;
  v144[3] = CFSTR("AvgSwitchesPerSecond");
  v135 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v33));
  v145[3] = v135;
  v144[4] = CFSTR("BtRole");
  v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a2 + 161)));
  v145[4] = v91;
  v144[5] = CFSTR("CallCreationTime");
  v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + 224)));
  v145[5] = v90;
  v145[6] = v122;
  v144[6] = CFSTR("CallType");
  v144[7] = CFSTR("Codec");
  v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 172)));
  v145[7] = v89;
  v144[8] = CFSTR("CpuNorm");
  v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v23));
  v145[8] = v88;
  v144[9] = CFSTR("Desense");
  v125 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 0));
  v145[9] = v125;
  v144[10] = CFSTR("DurationInMinutes");
  v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v128));
  v145[10] = v87;
  v144[11] = CFSTR("EpaCallTimeRatio");
  v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v120));
  v145[11] = v86;
  v144[12] = CFSTR("EpaPacketRatio");
  v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v118));
  v145[12] = v85;
  v145[13] = v133;
  v144[13] = CFSTR("eSCOCreationTime");
  v144[14] = CFSTR("eSCOSetupFailure");
  v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v50));
  v145[14] = v84;
  v145[15] = v138;
  v144[15] = CFSTR("FWVersion");
  v144[16] = CFSTR("HDRSession");
  v129 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a2 + 236)));
  v145[16] = v129;
  v144[17] = CFSTR("IsAppleAudioDevice");
  v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v43));
  v145[17] = v83;
  v144[18] = CFSTR("MissingSCORate");
  v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v126));
  v145[18] = v82;
  v144[19] = CFSTR("NoiseFloor50Max");
  v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 4)));
  v145[19] = v81;
  v144[20] = CFSTR("NoiseFloor50Percentile");
  v117 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v116));
  v145[20] = v117;
  v144[21] = CFSTR("NoiseFloor90Max");
  v127 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 20)));
  v145[21] = v127;
  v144[22] = CFSTR("NoiseFloor90Percentile");
  v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v114));
  v145[22] = v115;
  v144[23] = CFSTR("NoiseFloorAverageGoodChannels");
  v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v112));
  v145[23] = v113;
  v144[24] = CFSTR("PercentPacketsAnt0");
  v111 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v110));
  v145[24] = v111;
  v144[25] = CFSTR("PercentPacketsAnt1");
  v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v108));
  v145[25] = v109;
  v144[26] = CFSTR("PercentPacketsTxBF");
  v123 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v2));
  v145[26] = v123;
  v144[27] = CFSTR("PlcUsage");
  v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v130));
  v145[27] = v80;
  v144[28] = CFSTR("ProductID");
  v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v142));
  v145[28] = v79;
  v144[29] = CFSTR("RssiAverage");
  v58 = *(int *)(a2 + 200);
  if ((_DWORD)v58)
    v59 = *(_QWORD *)(a2 + 192) / v58;
  else
    v59 = 0;
  v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v59));
  v145[29] = v78;
  v144[30] = CFSTR("RssiMax");
  v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 208)));
  v145[30] = v77;
  v144[31] = CFSTR("RssiMin");
  v131 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 204)));
  v145[31] = v131;
  v144[32] = CFSTR("ReTransmission_RX");
  v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 220)));
  v145[32] = v76;
  v144[33] = CFSTR("ReTransmission_TX");
  v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 216)));
  v145[33] = v75;
  v144[34] = CFSTR("RxNormFirstRXWindow");
  v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v104));
  v145[34] = v105;
  v144[35] = CFSTR("RxNormSecondRXWindow");
  v103 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v102));
  v145[35] = v103;
  v145[36] = v136;
  v144[36] = CFSTR("SanitizedDeviceName");
  v144[37] = CFSTR("SessionType");
  v145[37] = v106;
  v144[38] = CFSTR("SilenceCycleRate");
  v121 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 0));
  v145[38] = v121;
  v144[39] = CFSTR("TxNormFirstTXWindow");
  v107 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v100));
  v145[39] = v107;
  v144[40] = CFSTR("TxNormSecondTXWindow");
  v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v98));
  v145[40] = v101;
  v144[41] = CFSTR("VendorID");
  v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v143));
  v145[41] = v99;
  v144[42] = CFSTR("VersionIDSource");
  v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v143)));
  v145[42] = v74;
  v144[43] = CFSTR("Version");
  v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v142)));
  v145[43] = v119;
  v144[44] = CFSTR("Interval_Bin_00_7point5ms");
  v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a1[532]));
  v145[44] = v73;
  v144[45] = CFSTR("Interval_Bin_01_11point25ms");
  v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a1[533]));
  v145[45] = v72;
  v144[46] = CFSTR("Interval_Bin_02_15ms");
  v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a1[534]));
  v145[46] = v71;
  v144[47] = CFSTR("Interval_Bin_Other");
  v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[530] + a1[531] - (a1[532] + a1[533] + a1[534])));
  v145[47] = v60;
  v144[48] = CFSTR("BTBand");
  if (*(char *)(a2 + 159) >= 0)
    v61 = a2 + 136;
  else
    v61 = *(_QWORD *)(a2 + 136);
  v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v61));
  v145[48] = v62;
  v144[49] = CFSTR("TipiConnected");
  v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a2 + 160)));
  v145[49] = v63;
  v144[50] = CFSTR("IsAoSCall");
  v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a2 + 237)));
  v145[50] = v64;
  v144[51] = CFSTR("2GDurationPercentage");
  v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v97)));
  v145[51] = v65;
  v144[52] = CFSTR("5GDurationPercentage");
  v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v97));
  v145[52] = v66;
  v144[53] = CFSTR("TxFlushPercentage");
  v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v132.u32[0]));
  v145[53] = v67;
  v144[54] = CFSTR("TxConsecFlushPercentage");
  v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v132.u32[1]));
  v145[54] = v68;
  v144[55] = CFSTR("RxCRCErrorPercentage");
  v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v96));
  v145[55] = v69;
  v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v145, v144, 56));

  sub_100015CC8((uint64_t)a1, 0x57u, v70);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v141.__r_.__value_.__l.__data_);
}

void sub_1003619B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *__p;
  char a71;
  uint64_t v71;

  if (*(char *)(v71 - 185) < 0)
    operator delete(*(void **)(v71 - 208));

  if (a71 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100361DAC(uint64_t a1, unsigned int *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD v15[2];
  _QWORD v16[2];

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
    sub_1006E2FD8((uint64_t)a2, v4, v5, v6, v7, v8, v9, v10);
  v15[0] = CFSTR("HeadTrackingTransition");
  if (*((char *)a2 + 31) >= 0)
    v11 = a2 + 2;
  else
    v11 = (unsigned int *)*((_QWORD *)a2 + 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11));
  v15[1] = CFSTR("WxProductID");
  v16[0] = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *a2));
  v16[1] = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 2));

  sub_100015CC8(a1, 0x55u, v14);
}

void sub_100361EC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100361EF8(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  _QWORD v20[4];
  _QWORD v21[4];
  uint8_t buf[4];
  uint64_t *v23;
  __int16 v24;
  uint64_t *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t *v29;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0)
      v5 = a2;
    else
      v5 = (uint64_t *)*a2;
    if (*((char *)a2 + 47) >= 0)
      v6 = a2 + 3;
    else
      v6 = (uint64_t *)a2[3];
    v7 = *((_DWORD *)a2 + 12);
    if (*((char *)a2 + 79) >= 0)
      v8 = a2 + 7;
    else
      v8 = (uint64_t *)a2[7];
    *(_DWORD *)buf = 136315906;
    v23 = v5;
    v24 = 2080;
    v25 = v6;
    v26 = 1024;
    v27 = v7;
    v28 = 2080;
    v29 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Spatial Setting submitting following CA metric: AudioCategory:%s SpatialTransition:%s WxProductID:%u BundleID:%s", buf, 0x26u);
  }
  v20[0] = CFSTR("AudioCategory");
  if (*((char *)a2 + 23) >= 0)
    v9 = a2;
  else
    v9 = (uint64_t *)*a2;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9, v20[0]));
  v21[0] = v10;
  v20[1] = CFSTR("SpatialTransition");
  if (*((char *)a2 + 47) >= 0)
    v11 = (uint64_t)(a2 + 3);
  else
    v11 = a2[3];
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11));
  v21[1] = v12;
  v20[2] = CFSTR("WxProductID");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 12)));
  v21[2] = v13;
  v20[3] = CFSTR("BundleID");
  v16 = a2[7];
  v15 = a2 + 7;
  v14 = v16;
  if (*((char *)v15 + 23) >= 0)
    v17 = (uint64_t)v15;
  else
    v17 = v14;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17));
  v21[3] = v18;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v21, v20, 4));

  sub_100015CC8(a1, 0x74u, v19);
}

void sub_10036210C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100362154(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  int v8;
  int v9;
  uint64_t *v10;
  int v11;
  int v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  _QWORD v36[12];
  _QWORD v37[12];
  uint8_t buf[4];
  uint64_t *v39;
  __int16 v40;
  uint64_t *v41;
  __int16 v42;
  uint64_t *v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  uint64_t *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  uint64_t *v59;
  __int16 v60;
  int v61;

  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0)
      v4 = a2;
    else
      v4 = (uint64_t *)*a2;
    if (*((char *)a2 + 47) >= 0)
      v5 = a2 + 3;
    else
      v5 = (uint64_t *)a2[3];
    if (*((char *)a2 + 71) >= 0)
      v6 = a2 + 6;
    else
      v6 = (uint64_t *)a2[6];
    v7 = *((_DWORD *)a2 + 18);
    v8 = *((_DWORD *)a2 + 19);
    v9 = *((_DWORD *)a2 + 20);
    if (*((char *)a2 + 111) >= 0)
      v10 = a2 + 11;
    else
      v10 = (uint64_t *)a2[11];
    v11 = *((_DWORD *)a2 + 28);
    v12 = *((_DWORD *)a2 + 29);
    v13 = *((_DWORD *)a2 + 30);
    if (*((char *)a2 + 151) >= 0)
      v14 = a2 + 16;
    else
      v14 = (uint64_t *)a2[16];
    v15 = *((_DWORD *)a2 + 38);
    *(_DWORD *)buf = 136317954;
    v39 = v4;
    v40 = 2080;
    v41 = v5;
    v42 = 2080;
    v43 = v6;
    v44 = 1024;
    v45 = v7;
    v46 = 1024;
    v47 = v8;
    v48 = 1024;
    v49 = v9;
    v50 = 2080;
    v51 = v10;
    v52 = 1024;
    v53 = v11;
    v54 = 1024;
    v55 = v12;
    v56 = 1024;
    v57 = v13;
    v58 = 2080;
    v59 = v14;
    v60 = 1024;
    v61 = v15;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "HeadtrackedSpatial Setting submitting following CA metric: fAccessHTTransition: %s fAudioCategory: %s fBundleID: %s fCurrAccessHTSetting: %d fCurrHeadTrackingSetting: %d fCurrSpatialSetting: %d fHeadTrackingTransition: %s fPrevAccessHTSetting: %d fPrevHeadTrackingSetting: %d fPrevSpatialSetting: %d fSpatialTransition: %s fWxProductID: %u", buf, 0x5Eu);
  }
  v36[0] = CFSTR("AccessHTTransition");
  if (*((char *)a2 + 23) >= 0)
    v16 = a2;
  else
    v16 = (uint64_t *)*a2;
  v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16, a1));
  v37[0] = v35;
  v36[1] = CFSTR("AudioCategory");
  if (*((char *)a2 + 47) >= 0)
    v17 = (uint64_t)(a2 + 3);
  else
    v17 = a2[3];
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17));
  v37[1] = v34;
  v36[2] = CFSTR("BundleID");
  if (*((char *)a2 + 71) >= 0)
    v18 = (uint64_t)(a2 + 6);
  else
    v18 = a2[6];
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18));
  v37[2] = v33;
  v36[3] = CFSTR("CurrAccessHTSetting");
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 18)));
  v37[3] = v19;
  v36[4] = CFSTR("CurrHeadTrackingSetting");
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 19)));
  v37[4] = v20;
  v36[5] = CFSTR("CurrSpatialSetting");
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 20)));
  v37[5] = v21;
  v36[6] = CFSTR("HeadTrackingTransition");
  if (*((char *)a2 + 111) >= 0)
    v22 = (uint64_t)(a2 + 11);
  else
    v22 = a2[11];
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22));
  v37[6] = v23;
  v36[7] = CFSTR("PrevAccessHTSetting");
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 28)));
  v37[7] = v24;
  v36[8] = CFSTR("PrevHeadTrackingSetting");
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 29)));
  v37[8] = v25;
  v36[9] = CFSTR("PrevSpatialSetting");
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a2 + 30)));
  v37[9] = v26;
  v36[10] = CFSTR("SpatialTransition");
  if (*((char *)a2 + 151) >= 0)
    v27 = (uint64_t)(a2 + 16);
  else
    v27 = a2[16];
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v27));
  v37[10] = v28;
  v36[11] = CFSTR("WxProductID");
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 38)));
  v37[11] = v29;
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v37, v36, 12));

  sub_100015CC8(v32, 0x54u, v30);
}

void sub_100362568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_10036261C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  const __CFString *v13;
  int v14;
  const __CFString *v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  _QWORD v35[13];
  _QWORD v36[13];
  uint8_t buf[4];
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  const __CFString *v50;
  __int16 v51;
  const __CFString *v52;

  if ((*(_DWORD *)(a2 + 32) - 1) < 0x3B)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a2 + 32) / 0x3Cu;
  v4 = *(_DWORD *)(a2 + 48);
  v5 = *(_DWORD *)(a2 + 52);
  v6 = v4 - 1;
  v7 = v4 / 0x3C;
  if (v6 < 0x3B)
    v8 = 1;
  else
    v8 = v7;
  v9 = v5 - 1;
  v10 = v5 / 0x3C;
  if (v9 < 0x3B)
    v11 = 1;
  else
    v11 = v10;
  v12 = *(_DWORD *)(a2 + 68) - 1;
  if (v12 > 2)
    v13 = CFSTR("GUEST_UNKNOWN");
  else
    v13 = (const __CFString *)*((_QWORD *)&off_10092A630 + v12);
  v14 = *(_DWORD *)(a2 + 72) - 1;
  if (v14 > 2)
    v15 = CFSTR("GUEST_NOT_APPLICABLE");
  else
    v15 = (const __CFString *)*((_QWORD *)&off_10092A648 + v14);
  v16 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(_DWORD *)(a2 + 36);
    v18 = *(_DWORD *)(a2 + 40);
    v19 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)buf = 67110914;
    v38 = v3;
    v39 = 1024;
    v40 = v17;
    v41 = 1024;
    v42 = v18;
    v43 = 1024;
    v44 = v19;
    v45 = 1024;
    v46 = v8;
    v47 = 1024;
    v48 = v11;
    v49 = 2112;
    v50 = v13;
    v51 = 2112;
    v52 = v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Wireless Splitter submitting following CA metric: totalDurationSharingSessionMinuite:%um totalSiriActivationDuringSession:%u Sessions fTotalIncomingCallsDuringSessio:%u Calls fTotalOutgoingCallsDuringSession:%u Calls totalMusicPlaybackDurationMinuite:%um totalVideoPlaybackDurationMinuite:%um sharingSessionStart:%@, sharingSessionStop:%@", buf, 0x3Au);
  }
  v35[0] = CFSTR("totalDurationSessionMinuite");
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v3));
  v36[0] = v20;
  v35[1] = CFSTR("totalSiriActivaton");
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 36)));
  v36[1] = v21;
  v35[2] = CFSTR("totalIncomingCalls");
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 40)));
  v36[2] = v22;
  v35[3] = CFSTR("totalOutgoingCalls");
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 44)));
  v36[3] = v23;
  v35[4] = CFSTR("musicPlaybackDurationMinuite");
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v8));
  v36[4] = v24;
  v35[5] = CFSTR("videoPlaybackDurationMinuite");
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v11));
  v36[5] = v25;
  v36[6] = &off_1009606E8;
  v35[6] = CFSTR("failureToAggregateAudio");
  v35[7] = CFSTR("failureToConnectToGuest");
  v36[7] = &off_1009606E8;
  v36[8] = &off_1009606E8;
  v35[8] = CFSTR("authFailureToGuest");
  v35[9] = CFSTR("sharingSessionStart");
  v36[9] = v13;
  v36[10] = v15;
  v35[10] = CFSTR("sharingSessionStop");
  v35[11] = CFSTR("ownerGuestWxProductID");
  if (*(char *)(a2 + 151) >= 0)
    v26 = a2 + 128;
  else
    v26 = *(_QWORD *)(a2 + 128);
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v26));
  v36[11] = v27;
  v35[12] = CFSTR("errorCode");
  v30 = *(_QWORD *)(a2 + 152);
  v29 = a2 + 152;
  v28 = v30;
  if (*(char *)(v29 + 23) >= 0)
    v31 = v29;
  else
    v31 = v28;
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v31));
  v36[12] = v32;
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v36, v35, 13));

  sub_100015CC8(a1, 0x76u, v33);
}

void sub_1003629A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100362A18(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[4];
  _QWORD v15[4];

  v14[0] = CFSTR("MFGModel");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
  v15[0] = v9;
  v14[1] = CFSTR("Result");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a3));
  v15[1] = v10;
  v14[2] = CFSTR("Script");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a4));
  v15[2] = v11;
  v14[3] = CFSTR("DurationInMs");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a5));
  v15[3] = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 4));

  sub_100015CC8(a1, 0x5Au, v13);
}

void sub_100362B68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100362BB0(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t *a4)
{
  const __CFString *v8;
  void *v9;
  uint64_t *v10;
  __CFString *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  _QWORD v19[4];
  _QWORD v20[4];
  uint8_t buf[4];
  void *v22;
  __int16 v23;
  unsigned int v24;

  v8 = sub_100362E1C(a1, a2);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  __p[0] = 0;
  __p[1] = 0;
  v18 = 0;
  if (*((char *)a4 + 23) >= 0)
    v10 = a4;
  else
    v10 = (uint64_t *)*a4;
  v11 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10));
  if (!-[__CFString length](v11, "length"))
  {

    v11 = CFSTR("Unknown");
  }
  v12 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v22 = v9;
    v23 = 1024;
    v24 = a3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Sending FWError to CoreAnalytics Type : %@ , ErrorCode: %d", buf, 0x12u);
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", __p, +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding")));
  v20[0] = v9;
  v19[0] = CFSTR("FWErrorType");
  v19[1] = CFSTR("ErrorCode");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a3));
  v20[1] = v14;
  v20[2] = v11;
  v19[2] = CFSTR("ErrorReason");
  v19[3] = CFSTR("FirmwareVersion");
  v20[3] = v13;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 4));

  sub_100015CC8(a1, 0x50u, v15);
  if (a2 <= 0xD && ((1 << a2) & 0x2D9B) != 0)
    sub_100362E40(v16, v15);

  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);

}

void sub_100362DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

const __CFString *sub_100362E1C(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xD)
    return CFSTR("Unknown");
  else
    return (const __CFString *)*((_QWORD *)&off_10092A660 + (int)a2);
}

void sub_100362E40(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  _BOOL4 v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  uint8_t buf[16];

  v2 = a2;
  v3 = sub_100027F68();
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 648))(v3);
  v5 = qword_1009997E8;
  v6 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Notifying BT Firmware Crashed", buf, 2u);
    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v2));
    objc_msgSend(v7, "setObject:forKeyedSubscript:", CFSTR("FWCrashed"), CFSTR("_input"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10038A148;
    v9[3] = &unk_10092A370;
    v10 = objc_alloc_init((Class)BTServicesClient);
    v8 = v10;
    objc_msgSend(v8, "diagnosticControl:completion:", v7, v9);

  }
  else if (v6)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Not Notifying BT Firmware Crashed", buf, 2u);
  }

}

void sub_100362F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  v17 = v16;

  _Unwind_Resume(a1);
}

uint64_t sub_100362FCC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  if ((sub_100442118(a2, 12) & 1) != 0 || (result = sub_1004420E0(a2), (_DWORD)result))
  {
    sub_100444BF0(a2, (_DWORD *)&v5 + 1, &v5, &v4, (_DWORD *)&v4 + 1);
    return v4;
  }
  return result;
}

void sub_10036302C()
{
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_10092A590);
  sub_1002B0E30(qword_10097AB60);
}

void sub_10036306C(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v6;
  void *v7;
  int64_t v8;
  char *v9;
  _QWORD v10[5];
  void *__p;
  void *__dst;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  void *v16;
  _BYTE *v17;
  uint64_t v18;
  void *v19;
  _BYTE *v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 32);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10092A490);
  sub_10006CA88((uint64_t)off_100978148, (uint64_t **)&v19);
  v3 = v19;
  v2 = v20;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  if (qword_100977A68 != -1)
    dispatch_once(&qword_100977A68, &stru_10092A5B0);
  sub_10045E83C((uint64_t)off_100977A60, (char *)&v16);
  v5 = v16;
  v4 = v17;
  v6 = sub_10006BBAC();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  v10[2] = sub_100363254;
  v10[3] = &unk_10092A2A0;
  v10[4] = v1;
  __p = 0;
  __dst = 0;
  v13 = 0;
  v7 = v19;
  v8 = v20 - (_BYTE *)v19;
  if (v20 != v19)
  {
    sub_1002A3F78(&__p, v8 >> 3);
    v9 = (char *)__dst;
    memmove(__dst, v7, v8);
    __dst = &v9[8 * (v8 >> 3)];
  }
  v14 = (unint64_t)(v2 - v3) >> 3;
  v15 = (unint64_t)(v4 - v5) >> 3;
  sub_100041A34(v6, v10);
  if (__p)
  {
    __dst = __p;
    operator delete(__p);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
}

void sub_100363204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void sub_100363254(uint64_t a1)
{
  _WORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _BOOL4 v8;
  unsigned int v9;
  void *__p[2];
  char v11;
  char v12;

  v2 = *(_WORD **)(a1 + 32);
  v2[285] = 0;
  v3 = *(uint64_t **)(a1 + 40);
  v4 = *(uint64_t **)(a1 + 48);
  if (v3 != v4)
  {
    while (1)
    {
      v5 = *v3;
      v12 = 0;
      v6 = sub_10034D650();
      sub_100091AE8(__p, "_CTKD_");
      v7 = !(*(unsigned int (**)(uint64_t, uint64_t, void **, char *))(*(_QWORD *)v6 + 784))(v6, v5, __p, &v12)|| v12 == 0;
      v8 = !v7;
      if (v11 < 0)
        break;
      if (v8)
        goto LABEL_10;
LABEL_11:
      if (++v3 == v4)
        goto LABEL_15;
    }
    operator delete(__p[0]);
    if (!v8)
      goto LABEL_11;
LABEL_10:
    ++v2[285];
    goto LABEL_11;
  }
LABEL_15:
  v9 = *(unsigned __int16 *)(a1 + 64);
  if (v9 >= 0xA)
    LOWORD(v9) = 10;
  v2[280] = v9;
  v2[282] = *(_WORD *)(a1 + 66);
}

void sub_100363348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100363364(uint64_t a1, uint64_t a2)
{
  return sub_10001FE6C((_QWORD *)(a1 + 40), a2 + 40);
}

void sub_100363370(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_100363388(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_10006BBEC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10036306C;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

void sub_1003633E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];

  v1 = a1 - 16;
  v2 = sub_10006BBEC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10036306C;
  v3[3] = &unk_100917378;
  v3[4] = v1;
  sub_100041A34(v2, v3);
}

void sub_100363448(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_10006BBEC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10036306C;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

void sub_1003634A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];

  v1 = a1 - 16;
  v2 = sub_10006BBEC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10036306C;
  v3[3] = &unk_100917378;
  v3[4] = v1;
  sub_100041A34(v2, v3);
}

void sub_100363508(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_10006BBEC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10036306C;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

void sub_100363568(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];

  v1 = a1 - 16;
  v2 = sub_10006BBEC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10036306C;
  v3[3] = &unk_100917378;
  v3[4] = v1;
  sub_100041A34(v2, v3);
}

void sub_1003635C8(uint64_t a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  unsigned __int16 v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  _QWORD v23[5];
  id v24;
  id v25;
  uint64_t v26;
  unsigned __int16 v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;
  void *__p[2];
  char v33;
  void *v34[2];
  char v35;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10092A510);
  v2 = sub_10006A768(qword_1009778B0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (unsigned __int16)objc_msgSend(v3, "count");
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10092A510);
  v5 = sub_10069A0A8(qword_1009778B0);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092A570);
  v7 = off_1009778C0;
  sub_100091AE8(v34, "A1603");
  v8 = sub_100658B80((uint64_t)v7, (uint64_t)v34);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = objc_msgSend(v9, "mutableCopy");

  if (v35 < 0)
    operator delete(v34[0]);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092A570);
  v11 = off_1009778C0;
  sub_100091AE8(__p, "A2051");
  v12 = sub_100658B80((uint64_t)v11, (uint64_t)__p);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  objc_msgSend(v10, "addObjectsFromArray:", v13);

  if (v33 < 0)
    operator delete(__p[0]);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092A570);
  v14 = off_1009778C0;
  sub_100091AE8(v30, "A3085");
  v15 = sub_100658B80((uint64_t)v14, (uint64_t)v30);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  objc_msgSend(v10, "addObjectsFromArray:", v16);

  if (v31 < 0)
    operator delete(v30[0]);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092A570);
  v17 = off_1009778C0;
  sub_100091AE8(v28, "A2538");
  v18 = sub_100658B80((uint64_t)v17, (uint64_t)v28);
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  objc_msgSend(v10, "addObjectsFromArray:", v19);

  if (v29 < 0)
    operator delete(v28[0]);
  v20 = sub_10006BBAC();
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100363984;
  v23[3] = &unk_10092A2D8;
  v26 = v1;
  v23[4] = v3;
  v27 = v4;
  v21 = v6;
  v24 = v21;
  v22 = v10;
  v25 = v22;
  sub_100041A34(v20, v23);

}

void sub_1003638B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  void *v37;
  void *v38;

  _Unwind_Resume(a1);
}

id sub_100363984(uint64_t a1)
{
  _WORD *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  int v9;
  id v10;
  id result;
  void *__p[2];
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  v1 = *(_WORD **)(a1 + 56);
  v1[285] = 0;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v16;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v16 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)v5);
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10092A570);
        v7 = off_1009778C0;
        sub_100091AE8(__p, "_CTKD_");
        v8 = sub_10000628C((uint64_t)v7, v6, (uint64_t)__p);
        v9 = v8;
        if ((v14 & 0x80000000) == 0)
        {
          if (!v8)
            goto LABEL_11;
LABEL_10:
          ++v1[285];
          goto LABEL_11;
        }
        operator delete(__p[0]);
        if (v9)
          goto LABEL_10;
LABEL_11:
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v10 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      v3 = v10;
    }
    while (v10);
  }

  v1[281] = *(_WORD *)(a1 + 64);
  v1[283] = (unsigned __int16)objc_msgSend(*(id *)(a1 + 40), "count");
  result = objc_msgSend(*(id *)(a1 + 48), "count");
  v1[284] = (_WORD)result;
  return result;
}

void sub_100363B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_100363B64(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1003635C8;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

void sub_100363BC4(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1003635C8;
  v3[3] = &unk_100917378;
  v3[4] = a1 - 80;
  sub_100041A34(v2, v3);
}

void sub_100363C28(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1003635C8;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

void sub_100363C88(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1003635C8;
  v3[3] = &unk_100917378;
  v3[4] = a1 - 80;
  sub_100041A34(v2, v3);
}

void sub_100363CEC(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  NSString *v9;
  void *v10;
  void *v11;
  BOOL v12;
  void *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  unsigned int v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  const __CFString *v26;
  void *v27;
  NSString *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  NSString *v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  NSNumber *v49;
  void *v50;
  void *v51;
  void *v52;
  unsigned int v53;
  _OWORD *v54;
  void *v55;
  void *v56;
  _BOOL4 v57;
  NSNumber *v58;
  void *v59;
  uint64_t v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void *v66;
  const __CFString *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  int *v75;
  unsigned __int8 *v76;
  _BYTE *v77;
  NSObject *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  char v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  uint64_t v90;
  void *v91;
  _BYTE v92[32];
  _BYTE v93[104];
  int v94;
  __int16 v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  _OWORD v103[2];
  id v104;
  int v105;
  void *__p[2];
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  int v114;
  __int16 v115;
  int v116;
  _QWORD v117[5];
  _QWORD v118[5];
  _OWORD v119[3];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint64_t v123;

  v116 = a3;
  v114 = *(_DWORD *)(a2 + 128);
  v115 = *(_WORD *)(a2 + 132);
  v113 = 0;
  v112 = 0;
  v111 = 0;
  sub_100444BF0(a2, &v113, (_DWORD *)&v112 + 1, &v111, &v112);
  if (a4 == 11)
  {
    v9 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sub_100497E14(&v116));
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v119[0] = 0uLL;
    sub_10003415C((uint64_t)v119, a1 + 176);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 336), "objectForKey:", v10));
    v12 = v11 == 0;

    if (v12)
    {
      if ((_DWORD)a5)
        v23 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObjects:](NSMutableArray, "arrayWithObjects:", &off_1009606D0, &off_100960700, 0));
      else
        v23 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObjects:](NSMutableArray, "arrayWithObjects:", &off_100960700, 0));
      v24 = *(void **)(a1 + 344);
      *(_QWORD *)(a1 + 344) = v23;

      objc_msgSend(*(id *)(a1 + 336), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 344), v10);
    }
    else
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 336), "objectForKeyedSubscript:", v10));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectAtIndexedSubscript:", 1));
      v15 = objc_msgSend(v14, "unsignedIntValue");

      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v15 + 1));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 336), "objectForKeyedSubscript:", v10));
      objc_msgSend(v17, "setObject:atIndexedSubscript:", v16, 1);

      if (!(_DWORD)a5)
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 336), "objectForKeyedSubscript:", v10));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectAtIndexedSubscript:", 0));
        v20 = objc_msgSend(v19, "unsignedIntValue");

        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v20 + 1));
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 336), "objectForKeyedSubscript:", v10));
        objc_msgSend(v22, "setObject:atIndexedSubscript:", v21, 0);

      }
    }
    sub_100034264((uint64_t)v119);
    sub_100034234((uint64_t)v119);

  }
  else if ((a4 - 11) > 1)
  {
    goto LABEL_18;
  }
  v25 = objc_alloc_init((Class)NSMutableDictionary);
  v123 = 0;
  v121 = 0u;
  v122 = 0u;
  v120 = 0u;
  memset(v119, 0, sizeof(v119));
  v26 = sub_1002D1E50(a1 + 320, a4);
  v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  objc_msgSend(v25, "setObject:forKey:", v27, CFSTR("Event"));

  v28 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sub_100497E14(&v116));
  v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  objc_msgSend(v25, "setObject:forKey:", v29, CFSTR("ServiceID"));

  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a5));
  objc_msgSend(v25, "setObject:forKey:", v30, CFSTR("Result"));

  if (sub_100449DC8(a2, v116, a4, a5, (uint64_t)v119))
  {
    v108 = 0;
    v109 = 0;
    v110 = 0;
    sub_1002D1A98(a1 + 320, (unsigned __int8 *)v119 + 4, 20);
    __p[0] = 0;
    __p[1] = 0;
    v107 = 0;
    sub_1002D1A98(a1 + 320, (unsigned __int8 *)&v119[1] + 8, 20);
    v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", &v108));
    objc_msgSend(v25, "setObject:forKey:", v31, CFSTR("PrimaryHash"));

    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", __p));
    objc_msgSend(v25, "setObject:forKey:", v32, CFSTR("SecondaryHash"));

    v105 = v121;
    v33 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sub_100471FE4(&v105));
    v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
    objc_msgSend(v25, "setObject:forKey:", v34, CFSTR("TypesOfDevicesConnected"));

    v35 = sub_1002D1BC4(a1 + 320, SDWORD2(v120));
    v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    objc_msgSend(v25, "setObject:forKey:", v36, CFSTR("ActiveSessions"));

    v37 = sub_1002D1BC4(a1 + 320, SDWORD2(v121));
    v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
    objc_msgSend(v25, "setObject:forKey:", v38, CFSTR("ConnectedServices"));

    v39 = sub_1002D1BC4(a1 + 320, SHIDWORD(v121));
    v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
    objc_msgSend(v25, "setObject:forKey:", v40, CFSTR("PendingServices"));

    v41 = sub_1002D1CDC(a1 + 320, *((uint64_t *)&v122 + 1));
    v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
    objc_msgSend(v25, "setObject:forKey:", v42, CFSTR("UserSettingsEnabled"));

    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v122));
    objc_msgSend(v25, "setObject:forKey:", v43, CFSTR("PbapObexTransportProtocol"));

    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", BYTE1(v122)));
    objc_msgSend(v25, "setObject:forKey:", v44, CFSTR("DidSendPbapObexUnauthorizedError"));

    v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", BYTE2(v123)));
    objc_msgSend(v25, "setObject:forKey:", v45, CFSTR("HidServicePresent"));

    if (SHIBYTE(v107) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v110) < 0)
      operator delete(v108);
  }
  sub_100015CC8(a1, 0x72u, v25);

LABEL_18:
  if (a4 != 201 && a4 != 101)
  {
    if (a4 != 11)
      return;
    if (!(_DWORD)a5)
    {
      sub_10046E9BC((unsigned __int8 *)&v114, v119);
      if ((SBYTE7(v119[1]) & 0x80u) == 0)
        v54 = v119;
      else
        v54 = *(_OWORD **)&v119[0];
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v54));
      if (SBYTE7(v119[1]) < 0)
        operator delete(*(void **)&v119[0]);
      v119[0] = 0uLL;
      sub_10003415C((uint64_t)v119, a1 + 176);
      v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 304), "objectForKey:", v55));
      v57 = v56 == 0;

      if (v57)
      {
        v58 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100442118(a2, 12));
        v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
        objc_msgSend(*(id *)(a1 + 304), "setObject:forKeyedSubscript:", v59, v55);

      }
      sub_100034264((uint64_t)v119);
      sub_100034234((uint64_t)v119);

    }
    v108 = 0;
    v109 = 0;
    sub_10003415C((uint64_t)&v108, a1 + 240);
    sub_10043E5F8(a2, v119);
    v60 = sub_100393E38(a1 + 384, (const void **)v119);
    if (SBYTE7(v119[1]) < 0)
      operator delete(*(void **)&v119[0]);
    if (v60 != 1)
      goto LABEL_59;
    memset(v119, 0, 24);
    sub_10043E5F8(a2, v119);
    switch(v116)
    {
      case 1:
        if ((_DWORD)a5)
        {
          v68 = sub_10034983C(a1 + 384, (const void **)v119);
          v69 = *(void **)(v68 + 24);
          *(_QWORD *)(v68 + 24) = CFSTR("HFP Connect Failed");

          v70 = sub_10034983C(a1 + 384, (const void **)v119);
          v71 = *(void **)(v70 + 32);
          *(_QWORD *)(v70 + 32) = CFSTR("HFP Failed");

          v72 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a5));
          v73 = sub_10034983C(a1 + 384, (const void **)v119);
          v74 = *(void **)(v73 + 48);
          *(_QWORD *)(v73 + 48) = v72;

          v75 = (int *)sub_10034983C(a1 + 384, (const void **)v119);
          v76 = v92;
          v77 = v92;
LABEL_50:
          sub_1003652B8((uint64_t)v77, v75);
LABEL_53:
          sub_100364AC0(a1, v76);
          sub_100393EB4((uint64_t **)(a1 + 384), (const void **)v119);
          goto LABEL_57;
        }
        *(_BYTE *)(sub_10034983C(a1 + 384, (const void **)v119) + 4) = 1;
        break;
      case 0x10:
        if ((_DWORD)a5)
        {
          v78 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "Analytics - A2DP Failed", (uint8_t *)__p, 2u);
          }
          v79 = sub_10034983C(a1 + 384, (const void **)v119);
          v80 = *(void **)(v79 + 24);
          *(_QWORD *)(v79 + 24) = CFSTR("A2DP Connect Failed");

          v81 = sub_10034983C(a1 + 384, (const void **)v119);
          v82 = *(void **)(v81 + 32);
          *(_QWORD *)(v81 + 32) = CFSTR("A2DP Failed");

          v83 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a5));
          v84 = sub_10034983C(a1 + 384, (const void **)v119);
          v85 = *(void **)(v84 + 48);
          *(_QWORD *)(v84 + 48) = v83;

          v75 = (int *)sub_10034983C(a1 + 384, (const void **)v119);
          v76 = v93;
          v77 = v93;
          goto LABEL_50;
        }
        *(_BYTE *)(sub_10034983C(a1 + 384, (const void **)v119) + 1) = 1;
        break;
      case 0x80000:
        if ((_DWORD)a5)
        {
          v61 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "Analytics - AACP Failed", (uint8_t *)__p, 2u);
          }
          v62 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a5));
          v63 = sub_10034983C(a1 + 384, (const void **)v119);
          v64 = *(void **)(v63 + 48);
          *(_QWORD *)(v63 + 48) = v62;

          v65 = sub_10034983C(a1 + 384, (const void **)v119);
          v66 = *(void **)(v65 + 32);
          v67 = CFSTR("AACP Failed");
        }
        else
        {
          *(_BYTE *)sub_10034983C(a1 + 384, (const void **)v119) = 1;
          v65 = sub_10034983C(a1 + 384, (const void **)v119);
          v66 = *(void **)(v65 + 32);
          v67 = CFSTR("Success");
        }
        *(_QWORD *)(v65 + 32) = v67;

        v86 = sub_100454428(a2);
        *(_BYTE *)(sub_10034983C(a1 + 384, (const void **)v119) + 3) = v86;
        v87 = sub_10034983C(a1 + 384, (const void **)v119);
        v88 = *(_DWORD *)v87;
        v95 = *(_WORD *)(v87 + 4);
        v94 = v88;
        v96 = *(id *)(v87 + 8);
        v97 = *(id *)(v87 + 16);
        v98 = *(id *)(v87 + 24);
        v99 = *(id *)(v87 + 32);
        v100 = *(id *)(v87 + 40);
        v101 = *(id *)(v87 + 48);
        v102 = *(id *)(v87 + 56);
        v89 = *(_OWORD *)(v87 + 79);
        v103[0] = *(_OWORD *)(v87 + 64);
        *(_OWORD *)((char *)v103 + 15) = v89;
        v104 = *(id *)(v87 + 96);
        v76 = (unsigned __int8 *)&v94;
        goto LABEL_53;
      default:
        goto LABEL_57;
    }
    v90 = sub_10034983C(a1 + 384, (const void **)v119);
    v91 = *(void **)(v90 + 32);
    *(_QWORD *)(v90 + 32) = CFSTR("Success");

LABEL_57:
    if (SBYTE7(v119[1]) < 0)
      operator delete(*(void **)&v119[0]);
LABEL_59:
    sub_100034234((uint64_t)&v108);
    return;
  }
  v117[0] = CFSTR("PID");
  v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v111));
  v118[0] = v46;
  v117[1] = CFSTR("VID");
  v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v112)));
  v118[1] = v47;
  v117[2] = CFSTR("Version");
  v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v112));
  v118[2] = v48;
  v117[3] = CFSTR("IsAppleDevice");
  v49 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100442118(a2, 12));
  v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
  v118[3] = v50;
  v117[4] = CFSTR("Result");
  v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a5));
  v118[4] = v51;
  v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v118, v117, 5));

  if (a4 == 201)
  {
    ++*(_WORD *)(a1 + 134);
    v53 = 9;
  }
  else
  {
    ++*(_WORD *)(a1 + 136);
    v53 = 83;
  }
  sub_100015CC8(a1, v53, v52);

}

void sub_100364898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  void *v62;
  void *v63;
  uint64_t v64;

  sub_100034234(v64 - 192);
  _Unwind_Resume(a1);
}

void sub_100364AC0(uint64_t a1, unsigned __int8 *a2)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  NSNumber *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  void *i;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  void *j;
  uint64_t v32;
  id v33;
  void *v34;
  NSObject *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  _UNKNOWN **v43;
  __CFString *v44;
  id v46;
  id v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  id v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint8_t buf[4];
  id v58;
  _BYTE v59[128];
  _BYTE v60[128];
  _QWORD v61[21];
  _QWORD v62[21];

  v3 = (void *)*((_QWORD *)a2 + 6);
  if (v3)
    v43 = v3;
  else
    v43 = &off_1009606D0;
  v4 = objc_msgSend(*((id *)a2 + 1), "length");
  v5 = (void *)*((_QWORD *)a2 + 1);
  if (v4)
  {
    v44 = v5;
  }
  else
  {
    v44 = CFSTR("Unknown");
    *((_QWORD *)a2 + 1) = CFSTR("Unknown");

  }
  v61[0] = CFSTR("ACLConnected");
  v62[0] = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[2]));
  v61[1] = CFSTR("AACPConnected");
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *a2));
  v62[1] = v41;
  v61[2] = CFSTR("A2DPConnected");
  v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[1]));
  v62[2] = v42;
  v62[3] = v44;
  v61[3] = CFSTR("BundleID");
  v61[4] = CFSTR("ConnectionType");
  v62[4] = *((_QWORD *)a2 + 2);
  v61[5] = CFSTR("DurationInMSec");
  v6 = mach_absolute_time();
  v7 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", UpTicksToMilliseconds(v6 - *((_QWORD *)a2 + 9)));
  v40 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v62[5] = v40;
  v62[6] = v43;
  v61[6] = CFSTR("ErrorCode");
  v61[7] = CFSTR("ErrorReason");
  v62[7] = *((_QWORD *)a2 + 3);
  v61[8] = CFSTR("FastConnectUsed");
  v8 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[3]));
  v9 = *((_QWORD *)a2 + 5);
  v39 = (void *)v8;
  v62[8] = v8;
  v62[9] = v9;
  v61[9] = CFSTR("FWVersion");
  v61[10] = CFSTR("HFPConnected");
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[4]));
  v62[10] = v38;
  v61[11] = CFSTR("MagicPairingSuccessfull");
  v36 = a1;
  v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[5]));
  v62[11] = v37;
  v61[12] = CFSTR("PID");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 17)));
  v62[12] = v10;
  v61[13] = CFSTR("VID");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 16)));
  v12 = *((_QWORD *)a2 + 7);
  v62[13] = v11;
  v62[14] = v12;
  v61[14] = CFSTR("LastSeenTimeInSec");
  v61[15] = CFSTR("Status");
  v62[15] = *((_QWORD *)a2 + 4);
  v61[16] = CFSTR("RetryCurrent");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a2[88]));
  v62[16] = v13;
  v61[17] = CFSTR("RetryMax");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a2[89]));
  v62[17] = v14;
  v61[18] = CFSTR("BasebandDuration");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *((unsigned __int16 *)a2 + 45)));
  v62[18] = v15;
  v61[19] = CFSTR("BasebandDurationTotal");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *((unsigned __int16 *)a2 + 46)));
  v62[19] = v16;
  v61[20] = CFSTR("BBFCStatusSource");
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2[94]));
  v62[20] = v17;
  v18 = (void *)v62[0];
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v62, v61, 21));
  v20 = objc_msgSend(v19, "mutableCopy");

  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v21 = *((id *)a2 + 12);
  v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v53, v60, 16);
  if (v22)
  {
    v23 = *(_QWORD *)v54;
    do
    {
      for (i = 0; i != v22; i = (char *)i + 1)
      {
        if (*(_QWORD *)v54 != v23)
          objc_enumerationMutation(v21);
        v25 = *(_QWORD *)(*((_QWORD *)&v53 + 1) + 8 * (_QWORD)i);
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)a2 + 12), "objectForKeyedSubscript:", v25));
        objc_msgSend(v20, "setObject:forKeyedSubscript:", v26, v25);

      }
      v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v53, v60, 16);
    }
    while (v22);
  }

  v52 = 0;
  NSAppendPrintF_safe(&v52, "Airpods Connection Stats: ");
  v27 = v52;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v28 = v20;
  v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v48, v59, 16);
  if (v29)
  {
    v30 = *(_QWORD *)v49;
    do
    {
      for (j = 0; j != v29; j = (char *)j + 1)
      {
        if (*(_QWORD *)v49 != v30)
          objc_enumerationMutation(v28);
        v32 = *(_QWORD *)(*((_QWORD *)&v48 + 1) + 8 * (_QWORD)j);
        v47 = v27;
        NSAppendPrintF_safe(&v47, "%@:", v32);
        v33 = v47;

        v46 = v33;
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "objectForKeyedSubscript:", v32));
        NSAppendPrintF_safe(&v46, "%@  ", v34);
        v27 = v46;

      }
      v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v48, v59, 16);
    }
    while (v29);
  }

  v35 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v58 = v27;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }
  sub_100015CC8(v36, 0x3Du, v28);

}

void sub_10036515C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, id *a20)
{
  void *v20;
  void *v21;
  void *v22;

  sub_100365C9C(a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1003652B8(uint64_t a1, int *a2)
{
  int v4;
  __int128 v5;

  v4 = *a2;
  *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = *((id *)a2 + 1);
  *(_QWORD *)(a1 + 16) = *((id *)a2 + 2);
  *(_QWORD *)(a1 + 24) = *((id *)a2 + 3);
  *(_QWORD *)(a1 + 32) = *((id *)a2 + 4);
  *(_QWORD *)(a1 + 40) = *((id *)a2 + 5);
  *(_QWORD *)(a1 + 48) = *((id *)a2 + 6);
  *(_QWORD *)(a1 + 56) = *((id *)a2 + 7);
  v5 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 79) = *(_OWORD *)((char *)a2 + 79);
  *(_OWORD *)(a1 + 64) = v5;
  *(_QWORD *)(a1 + 96) = *((id *)a2 + 12);
  return a1;
}

void sub_10036535C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  sub_100363CEC(a1 - 24, a2, a3, a4, a5);
}

void sub_100365364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  NSObject *v10;
  __int128 *v11;
  NSObject *v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  _OWORD *v24;
  uint64_t **v25;
  int v26;
  int v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  int v32;
  int v33;
  NSObject *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  int v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  __int128 v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  __int16 v62;
  uint64_t v63;
  int v64;
  __int16 v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  _OWORD v73[2];
  id v74;
  void *__p[2];
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD *v82[2];
  uint8_t buf[32];
  __int128 v84;
  __int128 v85;
  _OWORD v86[2];
  id v87;
  __int128 v88;
  uint64_t v89;

  if (!(_DWORD)a3)
  {
    *(_QWORD *)buf = 0;
    sub_10004AD30((uint64_t)buf);
    v6 = *(int *)buf;
    v7 = *(__int16 *)&buf[4];
    *(_QWORD *)buf = a2 + 128;
    v8 = sub_100393F0C((uint64_t **)(a1 + 408), a2 + 128, (uint64_t)&unk_100740F58, (_DWORD **)buf);
    *((_QWORD *)v8 + 5) = v6;
    *((_QWORD *)v8 + 6) = v7;
  }
  v9 = *(unsigned __int8 *)(a2 + 1325);
  v10 = (id)qword_1009997E8;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(a2, (uint64_t)&v88);
    v11 = v89 >= 0 ? &v88 : (__int128 *)v88;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v11;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "ACL connected aclConnectCfm for device %s status %d incoming %d", buf, 0x18u);
    if (SHIBYTE(v89) < 0)
      operator delete((void *)v88);
  }

  if (v9 && sub_100442118(a2, 12))
  {
    v12 = (id)qword_1009997E8;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, buf);
      v13 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      LODWORD(v88) = 136315138;
      *(_QWORD *)((char *)&v88 + 4) = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Start monitoring for connection %s", (uint8_t *)&v88, 0xCu);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
    }

    __p[0] = 0;
    __p[1] = 0;
    sub_10003415C((uint64_t)__p, a1 + 240);
    sub_10043E5F8(a2, buf);
    v14 = sub_100393E38(a1 + 384, (const void **)buf);
    v15 = v14;
    if ((char)buf[23] < 0)
    {
      operator delete(*(void **)buf);
      if (!v15)
      {
LABEL_21:
        memset(v86, 0, sizeof(v86));
        v84 = 0u;
        v85 = 0u;
        *(_QWORD *)buf = 0;
        *(_OWORD *)&buf[16] = 0u;
        v87 = 0;
        *(_QWORD *)&buf[8] = CFSTR("Unknown");

        v16 = *(void **)&buf[16];
        *(_QWORD *)&buf[16] = CFSTR("Incoming");

        v17 = (void *)v84;
        *(_QWORD *)&v84 = CFSTR("Pending");

        v18 = *(void **)&buf[24];
        *(_QWORD *)&buf[24] = CFSTR("NA");

        v19 = (void *)*((_QWORD *)&v84 + 1);
        *((_QWORD *)&v84 + 1) = CFSTR("NA");

        v20 = (void *)v85;
        *(_QWORD *)&v85 = 0;

        v21 = (void *)*((_QWORD *)&v85 + 1);
        *((_QWORD *)&v85 + 1) = &off_1009606E8;
        *(_QWORD *)&v86[0] = 0;

        *((_QWORD *)&v86[0] + 1) = mach_absolute_time();
        DWORD2(v86[1]) = -1;
        WORD6(v86[1]) = -1;
        BYTE14(v86[1]) = 0;
        v22 = objc_msgSend(&off_100961000, "mutableCopy");
        v23 = v87;
        v87 = v22;

        sub_10043E5F8(a2, &v88);
        v82[0] = &v88;
        v24 = sub_100394078((uint64_t **)(a1 + 384), (const void **)&v88, (uint64_t)&unk_100740F58, v82);
        sub_100365BFC((uint64_t)v24 + 56, (int *)buf);
        if (SHIBYTE(v89) < 0)
          operator delete((void *)v88);

      }
    }
    else if (!v14)
    {
      goto LABEL_21;
    }
    sub_100034234((uint64_t)__p);
  }
  v88 = 0uLL;
  v89 = 0;
  sub_10043E5F8(a2, &v88);
  v82[0] = 0;
  v82[1] = 0;
  sub_10003415C((uint64_t)v82, a1 + 240);
  v25 = (uint64_t **)(a1 + 384);
  if (sub_100393E38(a1 + 384, (const void **)&v88) != 1)
    goto LABEL_41;
  v80 = 0;
  v81 = 0;
  sub_100444BF0(a2, (_DWORD *)&v81 + 1, &v81, &v80, (_DWORD *)&v80 + 1);
  v26 = v81;
  *(_DWORD *)(sub_10034983C(a1 + 384, (const void **)&v88) + 64) = v26;
  v27 = v80;
  *(_DWORD *)(sub_10034983C(a1 + 384, (const void **)&v88) + 68) = v27;
  sub_1004491B4(a2, 0xAu, buf);
  if ((buf[23] & 0x80u) == 0)
    v28 = buf;
  else
    v28 = *(uint8_t **)buf;
  v29 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v28));
  v30 = sub_10034983C(a1 + 384, (const void **)&v88);
  v31 = *(void **)(v30 + 40);
  *(_QWORD *)(v30 + 40) = v29;

  if ((char)buf[23] < 0)
  {
    operator delete(*(void **)buf);
    if ((_DWORD)a3)
      goto LABEL_31;
  }
  else if ((_DWORD)a3)
  {
LABEL_31:
    v32 = *(unsigned __int8 *)(sub_10034983C(a1 + 384, (const void **)&v88) + 88);
    v33 = *(unsigned __int8 *)(sub_10034983C(a1 + 384, (const void **)&v88) + 89);
    v34 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v32;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v33;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Analytics - ACL Connection Failed retryCurrent=%d retryMax=%d", buf, 0xEu);
    }
    if (v32 == v33)
    {
      v35 = sub_10034983C(a1 + 384, (const void **)&v88);
      v36 = *(void **)(v35 + 24);
      *(_QWORD *)(v35 + 24) = CFSTR("ACL Connect Failed");

      v37 = sub_10034983C(a1 + 384, (const void **)&v88);
      v38 = *(void **)(v37 + 32);
      *(_QWORD *)(v37 + 32) = CFSTR("Failed");

      v39 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
      v40 = sub_10034983C(a1 + 384, (const void **)&v88);
      v41 = *(void **)(v40 + 48);
      *(_QWORD *)(v40 + 48) = v39;

      memset(v86, 0, sizeof(v86));
      v84 = 0u;
      v85 = 0u;
      memset(buf, 0, sizeof(buf));
      sub_10043E5F8(a2, __p);
      v63 = a1;
      v42 = sub_10034983C(a1 + 384, (const void **)__p);
      v43 = *(_DWORD *)v42;
      *(_WORD *)&buf[4] = *(_WORD *)(v42 + 4);
      *(_DWORD *)buf = v43;
      v44 = *(id *)(v42 + 8);
      *(_QWORD *)&buf[8] = v44;
      v45 = *(id *)(v42 + 16);
      *(_QWORD *)&buf[16] = v45;
      v46 = *(id *)(v42 + 24);
      *(_QWORD *)&buf[24] = v46;
      v47 = *(id *)(v42 + 32);
      *(_QWORD *)&v84 = v47;
      v48 = *(id *)(v42 + 40);
      *((_QWORD *)&v84 + 1) = v48;
      v49 = *(id *)(v42 + 48);
      *(_QWORD *)&v85 = v49;
      v50 = *(id *)(v42 + 56);
      *((_QWORD *)&v85 + 1) = v50;
      v51 = *(_OWORD *)(v42 + 79);
      v86[0] = *(_OWORD *)(v42 + 64);
      *(_OWORD *)((char *)v86 + 15) = v51;
      v52 = *(id *)(v42 + 96);
      v87 = v52;
      if (v76 < 0)
        operator delete(__p[0]);
      v64 = *(_DWORD *)buf;
      v65 = *(_WORD *)&buf[4];
      v53 = v44;
      v66 = v53;
      v54 = v45;
      v67 = v54;
      v55 = v46;
      v68 = v55;
      v56 = v47;
      v69 = v56;
      v57 = v48;
      v70 = v57;
      v58 = v49;
      v71 = v58;
      v59 = v50;
      v72 = v59;
      v73[0] = v86[0];
      *(_OWORD *)((char *)v73 + 15) = *(_OWORD *)((char *)v86 + 15);
      v60 = v52;
      v74 = v60;
      sub_100364AC0(v63, (unsigned __int8 *)&v64);

    }
    sub_100393EB4(v25, (const void **)&v88);
    goto LABEL_41;
  }
  *(_BYTE *)(sub_10034983C(a1 + 384, (const void **)&v88) + 2) = 1;
  __p[0] = 0;
  v78 = 0;
  v79 = 0;
  v77 = 0;
  memset(buf, 0, 24);
  v61 = sub_100350148();
  (*(void (**)(void *, void **, uint64_t *, uint64_t *, char *, uint8_t *))(*(_QWORD *)v61 + 32))(v61, __p, &v79, &v78, &v77, buf);
  v62 = v78;
  *(_WORD *)(sub_10034983C(a1 + 384, (const void **)&v88) + 92) = v62;
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
LABEL_41:
  sub_100034264((uint64_t)v82);
  sub_100034234((uint64_t)v82);
  if (SHIBYTE(v89) < 0)
    operator delete((void *)v88);
}

void sub_100365B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  if (*(char *)(v41 - 105) < 0)
    operator delete(*(void **)(v41 - 128));
  sub_100365C9C(&a36);
  sub_100034234((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100365BFC(uint64_t a1, int *a2)
{
  int v4;
  __int128 v5;

  v4 = *a2;
  *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)a1 = v4;
  objc_storeStrong((id *)(a1 + 8), *((id *)a2 + 1));
  objc_storeStrong((id *)(a1 + 16), *((id *)a2 + 2));
  objc_storeStrong((id *)(a1 + 24), *((id *)a2 + 3));
  objc_storeStrong((id *)(a1 + 32), *((id *)a2 + 4));
  objc_storeStrong((id *)(a1 + 40), *((id *)a2 + 5));
  objc_storeStrong((id *)(a1 + 48), *((id *)a2 + 6));
  objc_storeStrong((id *)(a1 + 56), *((id *)a2 + 7));
  v5 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 79) = *(_OWORD *)((char *)a2 + 79);
  *(_OWORD *)(a1 + 64) = v5;
  objc_storeStrong((id *)(a1 + 96), *((id *)a2 + 12));
  return a1;
}

id *sub_100365C9C(id *a1)
{

  return a1;
}

void sub_100365CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100365364(a1 - 32, a2, a3);
}

uint64_t sub_100365D04(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  if (!a3)
  {
    v8 = v3;
    v9 = v4;
    v5 = result;
    v6 = *(_DWORD *)(a2 + 128);
    v7 = *(_WORD *)(a2 + 132);
    sub_1003941A0((uint64_t **)(result + 408), (uint64_t)&v6);
    return sub_1003942C8((uint64_t **)(v5 + 432), (uint64_t)&v6);
  }
  return result;
}

uint64_t sub_100365D58(uint64_t a1, uint64_t a2, int a3)
{
  return sub_100365D04(a1 - 32, a2, a3);
}

void sub_100365D60(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  NSObject *v6;
  void **v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *__p[2];
  uint64_t v20;
  _BYTE v21[128];
  uint8_t buf[24];

  v5 = a3;
  v6 = (id)qword_1009997E8;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(a2, (uint64_t)__p);
    v7 = v20 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "updateAirpodsConnectionMetricDevice FastConnect for device %s", buf, 0xCu);
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
  }

  __p[0] = 0;
  __p[1] = 0;
  v20 = 0;
  sub_10043E5F8(a2, __p);
  *(_OWORD *)buf = 0uLL;
  sub_10003415C((uint64_t)buf, a1 + 240);
  v8 = a1 + 384;
  if (sub_100393E38(a1 + 384, (const void **)__p) == 1)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v9 = v5;
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v16;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v9);
          v13 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", v13, (_QWORD)v15));
          objc_msgSend(*(id *)(sub_10034983C(v8, (const void **)__p) + 96), "setObject:forKeyedSubscript:", v14, v13);

        }
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v21, 16);
      }
      while (v10);
    }

  }
  sub_100034264((uint64_t)buf);
  sub_100034234((uint64_t)buf);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);

}

void sub_100365F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  uint64_t v25;

  sub_100034234(v25 - 112);
  if (a23 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100365FE8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  NSObject *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  void *v154;
  void *v155;
  void *v156;
  void *v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  void *v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  uint64_t v167;
  NSObject *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  void *v183;
  void *v184;
  void *v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  NSObject *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  void *v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  NSObject *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  NSObject *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  void *v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  NSObject *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  void *v255;
  void *v256;
  void *v257;
  void *v258;
  uint64_t v259;
  void *v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  NSObject *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  void *v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  NSObject *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  void *v286;
  void *v287;
  void *v288;
  void *v289;
  void *v290;
  void *v291;
  void *v292;
  void *v293;
  void *v294;
  void *v295;
  void *v296;
  void *v297;
  void *v298;
  void *v299;
  void *v300;
  void *v301;
  void *v302;
  void *v303;
  void *v304;
  void *v305;
  void *v306;
  void *v307;
  void *v308;
  void *v309;
  void *v310;
  void *v311;
  void *v312;
  void *v313;
  void *v314;
  void *v315;
  void *v316;
  void *v317;
  void *v318;
  void *v319;
  void *v320;
  void *v321;
  void *v322;
  uint64_t v323;
  uint64_t v324;
  void *v325;
  void *v326;
  void *v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  void *v332;
  void *v333;
  void *v334;
  void *v335;
  void *v336;
  void *v337;
  void *v338;
  void *v339;
  void *v340;
  void *v341;
  void *v342;
  void *v343;
  void *v344;
  void *v345;
  void *v346;
  void *v347;
  void *v348;
  void *v349;
  void *v350;
  double v351;
  double v352;
  double v353;
  double v354;
  double v355;
  double v356;
  double v357;
  double v358;
  void *v359;
  void *v360;
  void *v361;
  uint64_t v362;
  void *v363;
  uint64_t v364;
  void *v365;
  void *v366;
  void *v367;
  void *v368;
  void *v369;
  void *v370;
  void *v371;
  void *v372;
  unsigned int v373;
  void *v374;
  void *v375;
  void *v376;
  void *v377;
  void *v378;
  void *v379;
  void *v380;
  const __CFString *v381;
  const __CFString *v382;
  void *v383;
  uint64_t v384;
  uint64_t v385;
  __int128 v386;
  _OWORD v387[4];
  __int128 v388;
  __int128 v389;
  _OWORD v390[2];
  __int128 v391;

  v4 = a3;
  if ((sub_10006540C() & 1) != 0)
  {
    if (*(_DWORD *)a2 == 7)
    {
      v7 = *(_QWORD *)(a2 + 16);
      v5 = (uint64_t *)(a2 + 16);
      v6 = v7;
      v8 = *(unsigned __int16 *)(v7 + 16);
      v9 = *(unsigned __int8 *)(v7 + 1);
      if ((v9 - 1) > 0xA)
        v10 = 0;
      else
        v10 = word_10073F1C2[32 * v9 + 2];
      switch(v8)
      {
        case 0:
        case 1:
        case 2:
        case 4:
        case 5:
        case 11:
          break;
        case 3:
          if (v10 >= 0xA1)
          {
            v141 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
              sub_1006E30BC(v141, v142, v143, v144, v145, v146, v147, v148);
            v6 = *v5;
          }
          v391 = 0u;
          v389 = 0u;
          memset(v390, 0, sizeof(v390));
          v388 = 0u;
          v386 = 0u;
          memset(v387, 0, sizeof(v387));
          memcpy(&v386, (const void *)v6, v10);
          v149 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD5(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v149, CFSTR("time_to_r1scanstart_utp"));

          v150 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD6(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v150, CFSTR("time_to_rxsecpage_utp"));

          v151 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", HIWORD(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v151, CFSTR("time_to_conncompl_utp"));

          v152 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", LOWORD(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v152, CFSTR("time_to_txpage_src"));

          v153 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD1(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v153, CFSTR("time_to_extraconnect_src"));

          v154 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD2(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v154, CFSTR("time_to_earlyconnect_src"));

          v155 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD3(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v155, CFSTR("time_to_magicpairing_src"));

          v156 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD4(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v156, CFSTR("time_to_conncompl_src"));

          v157 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD5(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v157, CFSTR("time_to_buds_in_ear"));

          v158 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD6(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v158, CFSTR("connection_direction"));

          if (v9 >= 9)
          {
            sub_10035D168(v159, CFSTR("boot_time_event_durations"), 20, 2u, (uint64_t)&v387[1] + 14, v4, 0);
            sub_10035D168(v160, CFSTR("boot_time_event_ids"), 20, 1u, (uint64_t)&v388 + 6, v4, 0);
            v161 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)&v389 + 10)));
            objc_msgSend(v4, "setObject:forKeyedSubscript:", v161, CFSTR("nvram_generation_count"));

            v162 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE14(v389)));
            objc_msgSend(v4, "setObject:forKeyedSubscript:", v162, CFSTR("flash_vendor"));

            v163 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", HIBYTE(v389)));
            objc_msgSend(v4, "setObject:forKeyedSubscript:", v163, CFSTR("boot_type"));

            v164 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", LOBYTE(v390[0])));
            objc_msgSend(v4, "setObject:forKeyedSubscript:", v164, CFSTR("case_findmy_paired_st"));

            v165 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE1(v390[0])));
            objc_msgSend(v4, "setObject:forKeyedSubscript:", v165, CFSTR("other_findmy_paired_st"));

            v166 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE2(v390[0])));
            objc_msgSend(v4, "setObject:forKeyedSubscript:", v166, CFSTR("self_findmy_paired_st"));

            sub_10035D168(v167, CFSTR("unused_bytes_2"), 11, 1u, (uint64_t)v390 + 3, v4, 0);
          }
          break;
        case 6:
          if (v10 >= 0xA1)
          {
            v168 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
              sub_1006E312C(v168, v169, v170, v171, v172, v173, v174, v175);
            v6 = *v5;
          }
          v391 = 0u;
          v389 = 0u;
          memset(v390, 0, sizeof(v390));
          v388 = 0u;
          v386 = 0u;
          memset(v387, 0, sizeof(v387));
          v176 = memcpy(&v386, (const void *)v6, v10);
          sub_10035D168((uint64_t)v176, CFSTR("unused_bytes_1"), 10, 2u, (uint64_t)v387 + 10, v4, 0);
          v177 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", HIWORD(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v177, CFSTR("count_in_state_disabled"));

          v178 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", LOWORD(v387[2])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v178, CFSTR("seconds_in_state_disabled"));

          v179 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD1(v387[2])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v179, CFSTR("count_in_state_inEar"));

          v180 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD2(v387[2])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v180, CFSTR("seconds_in_state_inEar"));

          v181 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD3(v387[2])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v181, CFSTR("count_in_state_inEarDetect"));

          v182 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD4(v387[2])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v182, CFSTR("seconds_in_state_inEarDetect"));

          v183 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD5(v387[2])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v183, CFSTR("count_in_state_tableTop"));

          v184 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD6(v387[2])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v184, CFSTR("seconds_in_state_tableTop"));

          v185 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", HIWORD(v387[2])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v185, CFSTR("count_in_state_inCaseLidClosed"));

          v186 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", LOWORD(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v186, CFSTR("seconds_in_state_inCaseLidClosed"));

          v187 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD1(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v187, CFSTR("count_in_state_inCaseLidOpen"));

          v188 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD2(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v188, CFSTR("seconds_in_state_inCaseLidOpen"));

          v189 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD3(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v189, CFSTR("count_in_state_offEar"));

          v190 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD4(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v190, CFSTR("seconds_in_state_offEar"));

          v191 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD5(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v191, CFSTR("count_in_state_pocket"));

          v192 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD6(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v192, CFSTR("seconds_in_state_pocket"));

          v193 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", HIWORD(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v193, CFSTR("count_in_state_outOfPocketDetect"));

          v194 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", (unsigned __int16)v388));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v194, CFSTR("seconds_in_state_outOfPocketDetect"));

          sub_10035D168(v195, CFSTR("unused_bytes_2"), 10, 4u, (uint64_t)&v388 + 6, v4, 0);
          sub_10035D168(v196, CFSTR("ied_reserved_unused_bytes"), 2, 2u, (uint64_t)&v388 + 2, v4, 0);
          sub_10035D168(v197, CFSTR("unused_bytes_3"), 4, 4u, (uint64_t)&v391, v4, 0);
          break;
        case 7:
          if (v10 >= 0xA1)
          {
            v11 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
              sub_1006E319C(v11, v12, v13, v14, v15, v16, v17, v18);
            v6 = *v5;
          }
          v391 = 0u;
          v389 = 0u;
          memset(v390, 0, sizeof(v390));
          v388 = 0u;
          v386 = 0u;
          memset(v387, 0, sizeof(v387));
          memcpy(&v386, (const void *)v6, v10);
          v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD5(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v19, CFSTR("adc_status_err_cnt"));

          v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD6(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v20, CFSTR("bus_err_cnt"));

          v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", HIWORD(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v21, CFSTR("service_not_found_err_cnt"));

          v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", LOWORD(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v22, CFSTR("adc_conversion_cnt"));

          v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD1(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v23, CFSTR("delta_baseline_cap"));

          v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD2(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v24, CFSTR("abs_baseline_cap"));

          v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD3(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v25, CFSTR("gsr_cnt"));

          v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD4(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v26, CFSTR("chip_id_read_err_cnt"));

          v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD5(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v27, CFSTR("sensor_wdg_cnt"));

          v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD6(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v28, CFSTR("max_noise_low_freq"));

          v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)&v387[1] + 14)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v29, CFSTR("max_noise_high_freq"));

          sub_10035D168(v30, CFSTR("unused_bytes_1"), 19, 4u, (uint64_t)&v387[2] + 2, v4, 0);
          sub_10035D168(v31, CFSTR("unused_bytes_2"), 4, 4u, (uint64_t)&v391, v4, 0);
          break;
        case 8:
          if (v10 >= 0xA1)
          {
            v198 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
              sub_1006E320C(v198, v199, v200, v201, v202, v203, v204, v205);
            v6 = *v5;
          }
          v391 = 0u;
          v389 = 0u;
          memset(v390, 0, sizeof(v390));
          v388 = 0u;
          v386 = 0u;
          memset(v387, 0, sizeof(v387));
          memcpy(&v386, (const void *)v6, v10);
          v206 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD5(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v206, CFSTR("gest_duration"));

          v207 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD6(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v207, CFSTR("intent_gest_duration"));

          v208 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SHIWORD(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v208, CFSTR("force_slope"));

          v209 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", LOWORD(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v209, CFSTR("slope_def"));

          v210 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD1(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v210, CFSTR("dbl_clk_valley"));

          v211 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD2(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v211, CFSTR("dbl_clk_interval"));

          v212 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD3(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v212, CFSTR("force_peak_1"));

          v213 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD4(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v213, CFSTR("force_peak_2"));

          v214 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD5(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v214, CFSTR("decision_thres_force"));

          v215 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD6(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v215, CFSTR("decision_thres_slope"));

          v216 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)((char *)&v387[1] + 14)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v216, CFSTR("gest_force_peak"));

          v217 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)((char *)&v387[2] + 2)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v217, CFSTR("force_peak_3"));

          v218 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)((char *)&v387[2] + 6)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v218, CFSTR("baseline_cap_delta"));

          v219 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)((char *)&v387[2] + 10)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v219, CFSTR("baseline_cap"));

          sub_10035D168(v220, CFSTR("unused_bytes_1"), 16, 4u, (uint64_t)&v387[2] + 14, v4, 0);
          sub_10035D168(v221, CFSTR("unused_bytes_2"), 4, 4u, (uint64_t)&v391, v4, 0);
          break;
        case 9:
          if (v10 >= 0xA1)
          {
            v32 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
              sub_1006E327C(v32, v33, v34, v35, v36, v37, v38, v39);
            v6 = *v5;
          }
          goto LABEL_23;
        case 10:
          if (v10 >= 0xA1)
          {
            v222 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
              sub_1006E327C(v222, v223, v224, v225, v226, v227, v228, v229);
            v6 = *v5;
          }
LABEL_23:
          v391 = 0u;
          v389 = 0u;
          memset(v390, 0, sizeof(v390));
          v388 = 0u;
          v386 = 0u;
          memset(v387, 0, sizeof(v387));
          memcpy(&v386, (const void *)v6, v10);
          v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD5(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v40, CFSTR("cycleCount"));

          v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD4(v388)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v41, CFSTR("timeChargingTotal"));

          v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD5(v388)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v42, CFSTR("timeChargingWirelessTotal"));

          v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD6(v388)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v43, CFSTR("timeChargingTopOff"));

          v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", HIWORD(v388)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v44, CFSTR("timeChargingTopOffWireless"));

          v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", (unsigned __int16)v389));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v45, CFSTR("timeChargingTopOffWired"));

          v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD1(v389)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v46, CFSTR("tempBattMax"));

          v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD2(v389)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v47, CFSTR("tempBattAvg"));

          v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD3(v389)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v48, CFSTR("tempBattMin"));

          v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD4(v389)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v49, CFSTR("tempMlbMax"));

          v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD5(v389)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v50, CFSTR("voltageMax"));

          v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD6(v389)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v51, CFSTR("voltageMin"));

          v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", HIWORD(v389)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v52, CFSTR("capacity"));

          v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", LOWORD(v390[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v53, CFSTR("cycleAtCapacity"));

          v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD1(v390[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v54, CFSTR("resistance"));

          v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD2(v390[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v55, CFSTR("tempSiPMax"));

          v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD3(v390[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v56, CFSTR("currentDischargeMax"));

          v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD4(v390[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v57, CFSTR("batteryVendor"));

          v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE10(v390[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v58, CFSTR("capacityMilestone_0"));

          v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE11(v390[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v59, CFSTR("capacityMilestone_1"));

          v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE12(v390[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v60, CFSTR("capacityMilestone_2"));

          v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE13(v390[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v61, CFSTR("capacityMilestone_3"));

          v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v391));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v62, CFSTR("capacityMilestone_4"));

          v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE1(v391)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v63, CFSTR("capacityMilestone_5"));

          v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE14(v391)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v64, CFSTR("timeInField"));

          v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", HIBYTE(v391)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v65, CFSTR("timeInFieldAtCapacity"));

          sub_10035D168(v66, CFSTR("timeAVoltageTempMatrix"), 30, 2u, (uint64_t)v387 + 12, v4, 0);
          sub_10035D168(v67, CFSTR("cycleCountAtCapacityMilestone"), 6, 1u, (uint64_t)&v391 + 2, v4, 0);
          sub_10035D168(v68, CFSTR("timeInFieldMilestone"), 6, 1u, (uint64_t)&v391 + 8, v4, 0);
          break;
        case 12:
          if (v10 >= 0xA1)
          {
            v69 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
              sub_1006E33B8(v69, v70, v71, v72, v73, v74, v75, v76);
            v6 = *v5;
          }
          v391 = 0u;
          v389 = 0u;
          memset(v390, 0, sizeof(v390));
          v388 = 0u;
          v386 = 0u;
          memset(v387, 0, sizeof(v387));
          memcpy(&v386, (const void *)v6, v10);
          if (BYTE14(v387[0]) == 3)
          {
            if (*(_DWORD *)(v6 + 138))
            {
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
                sub_1006E32EC();
            }
            else
            {
              v325 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v6 + 130) / 0x3CuLL));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v325, CFSTR("budMileage"));

              v326 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)v387 + 10) / 0xE10uLL));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v326, CFSTR("duration"));

              v327 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", 3));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v327, CFSTR("metricVersion"));

              v328 = BYTE3(v387[1]);
              v329 = BYTE4(v387[1]);
              v330 = BYTE3(v387[1]) + (unint64_t)BYTE4(v387[1]);
              v331 = BYTE5(v387[1]);
              v332 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v330 + BYTE5(v387[1]) != 0));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v332, CFSTR("hasSuccess"));

              v333 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v328));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v333, CFSTR("successTableTop"));

              v334 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v329));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v334, CFSTR("successWired"));

              v335 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v331));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v335, CFSTR("successWireless"));

              v336 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE6(v387[1])));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v336, CFSTR("failureStaticTableTop"));

              v337 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE11(v387[1])));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v337, CFSTR("failureStaticWired"));

              v338 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", LOBYTE(v387[2])));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v338, CFSTR("failureStaticWireless"));

              v339 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE7(v387[1])));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v339, CFSTR("failureGyroTableTop"));

              v340 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE12(v387[1])));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v340, CFSTR("failureGyroWired"));

              v341 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE1(v387[2])));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v341, CFSTR("failureGyroWireless"));

              v342 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE8(v387[1])));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v342, CFSTR("failureFlushTableTop"));

              v343 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE13(v387[1])));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v343, CFSTR("failureFlushWired"));

              v344 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE2(v387[2])));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v344, CFSTR("failureFlushWireless"));

              v345 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE9(v387[1])));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v345, CFSTR("failureJammedTableTop"));

              v346 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE14(v387[1])));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v346, CFSTR("failureJammedWired"));

              v347 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE3(v387[2])));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v347, CFSTR("failureJammedWireless"));

              v348 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE10(v387[1])));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v348, CFSTR("failureUserTableTop"));

              v349 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", HIBYTE(v387[1])));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v349, CFSTR("failureUserWired"));

              v350 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE4(v387[2])));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v350, CFSTR("failureUserWireless"));

              v351 = fabs((double)*(__int16 *)((char *)&v387[2] + 5) * 0.00390625);
              v352 = fabs((double)*(__int16 *)((char *)&v387[2] + 11) * 0.00390625);
              if (v351 < v352)
                v351 = v352;
              v353 = fabs((double)*(__int16 *)((char *)&v387[2] + 7) * 0.00390625);
              v354 = fabs((double)*(__int16 *)((char *)&v387[2] + 13) * 0.00390625);
              if (v353 >= v354)
                v355 = v353;
              else
                v355 = v354;
              v356 = fabs((double)*(__int16 *)((char *)&v387[2] + 9) * 0.00390625);
              v357 = fabs((double)*(__int16 *)((char *)&v387[2] + 15) * 0.00390625);
              if (v356 >= v357)
                v358 = v356;
              else
                v358 = v357;
              v359 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v351));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v359, CFSTR("deltaGyttX"));

              v360 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v355));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v360, CFSTR("deltaGyttY"));

              v361 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v358));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v361, CFSTR("deltaGyttZ"));

              if (v330 == -v331)
                v362 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", BYTE3(v387[3])));
              else
                v362 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", BYTE1(v387[3])));
              v363 = (void *)v362;
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v362, CFSTR("maxCalibrationTemperature"));

              if (v330 == -v331)
                v364 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", BYTE4(v387[3])));
              else
                v364 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", BYTE2(v387[3])));
              v365 = (void *)v364;
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v364, CFSTR("minCalibrationTemperature"));

              v366 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", BYTE5(v387[3])));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v366, CFSTR("maxSessionTemperature"));

              v367 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", BYTE6(v387[3])));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v367, CFSTR("minSessionTemperature"));

              v368 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (SDWORD2(v387[3]) / 3600)));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v368, CFSTR("calibrationInterval"));

              v369 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v387[3])));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v369, CFSTR("numberOfInEarSessionFirstCal"));

              v370 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v388));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v370, CFSTR("numberOfInEarSessionFirstJam"));

              v371 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", DWORD1(v388)));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v371, CFSTR("numberOfJams"));

              v372 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", DWORD2(v388) / 0xE10uLL));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v372, CFSTR("durationLastJam"));

              v373 = WORD6(v388);
              v374 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", BYTE12(v388) & 1));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v374, CFSTR("isFirstCalibration"));

              v375 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v373 >> 1) & 1));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v375, CFSTR("hasDMSession"));

              v376 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v373 >> 2) & 1));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v376, CFSTR("hasGyroJammedSession"));

              v377 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v373 >> 3) & 1));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v377, CFSTR("isFirstGyroJammed"));

              v378 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v373 >> 8) & 1));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v378, CFSTR("isCalibrated"));

              v379 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v373 >> 9) & 1));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v379, CFSTR("hasBeenGyroJammed"));

              v380 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v373 >> 10) & 1));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v380, CFSTR("isCurrentlyJammed"));

              v381 = CFSTR("Unknown");
              if (v373 >> 12 == 2)
                v381 = CFSTR("Sovereign2");
              if (v373 >> 12 == 1)
                v382 = CFSTR("Sovereign");
              else
                v382 = v381;
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v382, CFSTR("sensorModel"));
              v383 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v373 & 0x8F0));
              objc_msgSend(v4, "setObject:forKeyedSubscript:", v383, CFSTR("status_unused"));

              sub_10035D168(v384, CFSTR("unused_bytes_1"), 32, 1u, (uint64_t)&v388 + 14, v4, 0);
              sub_10035D168(v385, CFSTR("unused_bytes_2"), 4, 4u, (uint64_t)&v391, v4, 0);
            }
          }
          else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          {
            sub_1006E3354();
          }
          break;
        case 13:
          if (v10 >= 0xA1)
          {
            v77 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
              sub_1006E3428(v77, v78, v79, v80, v81, v82, v83, v84);
            v6 = *v5;
          }
          v391 = 0u;
          v389 = 0u;
          memset(v390, 0, sizeof(v390));
          v388 = 0u;
          v386 = 0u;
          memset(v387, 0, sizeof(v387));
          memcpy(&v386, (const void *)v6, v10);
          v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD5(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v85, CFSTR("swipe_prediction_duration"));

          v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD6(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v86, CFSTR("swipe_start"));

          v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SHIWORD(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v87, CFSTR("swipe_end"));

          v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SLOWORD(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v88, CFSTR("touch_baseline_1"));

          v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD1(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v89, CFSTR("touch_baseline_2"));

          v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD2(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v90, CFSTR("touch_baseline_3"));

          v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD3(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v91, CFSTR("force_peak"));

          v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD4(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v92, CFSTR("touch_peak_1"));

          v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD5(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v93, CFSTR("touch_peak_2"));

          v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD6(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v94, CFSTR("touch_peak_3"));

          v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)&v387[1] + 14)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v95, CFSTR("volume_feature_enabled"));

          v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)&v387[2] + 2)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v96, CFSTR("consecutive_swipe_prediction_interval"));

          v97 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)&v387[2] + 6)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v97, CFSTR("num_consecutive_swipes"));

          v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)&v387[2] + 10)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v98, CFSTR("consecutive_swipe_pattern"));

          v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)&v387[2] + 14)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v99, CFSTR("num_freq_hops"));

          v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)&v387[3] + 2)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v100, CFSTR("percentage_time_on_high_freq"));

          v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)((char *)&v387[3] + 6)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v101, CFSTR("max_noise_low_freq"));

          v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)((char *)&v387[3] + 10)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v102, CFSTR("max_noise_high_freq"));

          sub_10035D168(v103, CFSTR("unused_bytes_1"), 12, 4u, (uint64_t)&v387[3] + 14, v4, 0);
          sub_10035D168(v104, CFSTR("unused_bytes_2"), 4, 4u, (uint64_t)&v391, v4, 0);
          break;
        case 14:
          if (v10 >= 0xA1)
          {
            v230 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
              sub_1006E3498(v230, v231, v232, v233, v234, v235, v236, v237);
            v6 = *v5;
          }
          v391 = 0u;
          v389 = 0u;
          memset(v390, 0, sizeof(v390));
          v388 = 0u;
          v386 = 0u;
          memset(v387, 0, sizeof(v387));
          memcpy(&v386, (const void *)v6, v10);
          v238 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD5(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v238, CFSTR("force_cap_c2_delta"));

          v239 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD6(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v239, CFSTR("force_cap_c2"));

          v240 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SHIWORD(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v240, CFSTR("force_cap_c1_delta"));

          v241 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SLOWORD(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v241, CFSTR("force_cap_c1"));

          v242 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD1(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v242, CFSTR("water_ingress_count_high_cap"));

          v243 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", SWORD2(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v243, CFSTR("water_ingress_count_low_cap"));

          sub_10035D168(v244, CFSTR("unused_bytes_1"), 4, 2u, (uint64_t)&v387[1] + 6, v4, 0);
          sub_10035D168(v245, CFSTR("unused_bytes_2"), 20, 4u, (uint64_t)&v387[1] + 14, v4, 0);
          sub_10035D168(v246, CFSTR("unused_bytes_3"), 4, 4u, (uint64_t)&v391, v4, 0);
          break;
        case 15:
          if (v10 >= 0xA1)
          {
            v105 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
              sub_1006E3508(v105, v106, v107, v108, v109, v110, v111, v112);
            v6 = *v5;
          }
          v391 = 0u;
          v389 = 0u;
          memset(v390, 0, sizeof(v390));
          v388 = 0u;
          v386 = 0u;
          memset(v387, 0, sizeof(v387));
          memcpy(&v386, (const void *)v6, v10);
          v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD5(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v113, CFSTR("timeSpentAtLowerSoC"));

          v114 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD6(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v114, CFSTR("timeSpentAtHigherSoC"));

          v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE14(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v115, CFSTR("engagementEvents"));

          v116 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", HIBYTE(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v116, CFSTR("underchargeEvents"));

          v117 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", LOBYTE(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v117, CFSTR("chargingEvents"));

          v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE1(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v118, CFSTR("budSocAtLastEngagement"));

          v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD1(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v119, CFSTR("medianTimeBetweenUses"));

          v120 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD2(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v120, CFSTR("stdDevTimeBetweenUses"));

          v121 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD3(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v121, CFSTR("featureEnabledStatus"));

          sub_10035D168(v122, CFSTR("unused_bytes_1"), 3, 2u, (uint64_t)&v387[1] + 8, v4, 0);
          sub_10035D168(v123, CFSTR("unused_bytes_2"), 20, 4u, (uint64_t)&v387[1] + 14, v4, 0);
          sub_10035D168(v124, CFSTR("unused_bytes_3"), 4, 4u, (uint64_t)&v391, v4, 0);
          break;
        case 16:
          if (v10 >= 0xA1)
          {
            v247 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
              sub_1006E3578(v247, v248, v249, v250, v251, v252, v253, v254);
            v6 = *v5;
          }
          v391 = 0u;
          v389 = 0u;
          memset(v390, 0, sizeof(v390));
          v388 = 0u;
          v386 = 0u;
          memset(v387, 0, sizeof(v387));
          memcpy(&v386, (const void *)v6, v10);
          v255 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)v387 + 10)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v255, CFSTR("nvram_erase_count"));

          v256 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)v387 + 14)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v256, CFSTR("nvram_corruption_single_bank"));

          v257 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)&v387[1] + 2)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v257, CFSTR("nvram_corruption_both_banks"));

          v258 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)&v387[1] + 6)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v258, CFSTR("syscfg_corruption_count"));

          if (BYTE1(v386) >= 0xAu)
          {
            v260 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", HIBYTE(v387[1])));
            objc_msgSend(v4, "setObject:forKeyedSubscript:", v260, CFSTR("has_limited_logging_ever_on"));

            v261 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE14(v387[1])));
            objc_msgSend(v4, "setObject:forKeyedSubscript:", v261, CFSTR("vendor_id"));

          }
          sub_10035D168(v259, CFSTR("unused_bytes_1"), 2, 2u, (uint64_t)&v387[1] + 10, v4, 0);
          sub_10035D168(v262, CFSTR("unused_bytes_2"), 20, 4u, (uint64_t)&v387[2], v4, 0);
          sub_10035D168(v263, CFSTR("unused_bytes_3"), 4, 4u, (uint64_t)&v391, v4, 0);
          break;
        case 17:
          if (v10 >= 0xA1)
          {
            v125 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
              sub_1006E35E8(v125, v126, v127, v128, v129, v130, v131, v132);
            v6 = *v5;
          }
          v391 = 0u;
          v389 = 0u;
          memset(v390, 0, sizeof(v390));
          v388 = 0u;
          v386 = 0u;
          memset(v387, 0, sizeof(v387));
          memcpy(&v386, (const void *)v6, v10);
          v133 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD5(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v133, CFSTR("start_unloaded_vbat_mv"));

          v134 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD6(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v134, CFSTR("start_loaded_vbat_mv"));

          v135 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", HIWORD(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v135, CFSTR("unloaded_vbat_mv"));

          v136 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", LOWORD(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v136, CFSTR("loaded_vbat_mv"));

          v137 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)((char *)&v387[1] + 2)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v137, CFSTR("time_elapsed_us"));

          sub_10035D168(v138, CFSTR("unused_bytes_1"), 2, 2u, (uint64_t)&v387[1] + 10, v4, 0);
          sub_10035D168(v139, CFSTR("unused_bytes_2"), 20, 4u, (uint64_t)&v387[1] + 14, v4, 0);
          sub_10035D168(v140, CFSTR("unused_bytes_3"), 4, 4u, (uint64_t)&v391, v4, 0);
          break;
        case 18:
          if (v10 >= 0xA1)
          {
            v264 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
              sub_1006E3658(v264, v265, v266, v267, v268, v269, v270, v271);
            v6 = *v5;
          }
          v391 = 0u;
          v389 = 0u;
          memset(v390, 0, sizeof(v390));
          v388 = 0u;
          v386 = 0u;
          memset(v387, 0, sizeof(v387));
          memcpy(&v386, (const void *)v6, v10);
          v272 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)((char *)v387 + 11)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v272, CFSTR("duration"));

          v273 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE10(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v273, CFSTR("user_awake"));

          v274 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE13(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v274, CFSTR("hour"));

          sub_10035D168(v275, CFSTR("unused_bytes_1"), 48, 2u, (uint64_t)v387 + 14, v4, 0);
          sub_10035D168(v276, CFSTR("unused_bytes_2"), 4, 4u, (uint64_t)&v391, v4, 0);
          break;
        case 19:
          if (v10 >= 0xA1)
          {
            v277 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
              sub_1006E36C8(v277, v278, v279, v280, v281, v282, v283, v284);
            v6 = *v5;
          }
          v391 = 0u;
          v389 = 0u;
          memset(v390, 0, sizeof(v390));
          v388 = 0u;
          v386 = 0u;
          memset(v387, 0, sizeof(v387));
          memcpy(&v386, (const void *)v6, v10);
          v285 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD5(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v285, CFSTR("num_cd_trigger"));

          v286 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD6(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v286, CFSTR("num_false_start"));

          v287 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", HIWORD(v387[0])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v287, CFSTR("num_false_transition"));

          v288 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", LOBYTE(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v288, CFSTR("num_cd_user_setting_off"));

          v289 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE1(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v289, CFSTR("num_cd_user_setting_on"));

          v290 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD1(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v290, CFSTR("num_cd_reset"));

          v291 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD2(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v291, CFSTR("num_cd_pause"));

          v292 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD3(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v292, CFSTR("num_cd_unpause"));

          v293 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD4(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v293, CFSTR("num_cd_pause_siri"));

          v294 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD5(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v294, CFSTR("num_cd_pause_hfp"));

          v295 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD6(v387[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v295, CFSTR("num_cd_pause_sourcepause"));

          v296 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)&v387[1] + 14)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v296, CFSTR("total_cd_pause_duration_s"));

          v297 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)&v387[2] + 2)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v297, CFSTR("total_cd_user_setting_on_duration_s"));

          v298 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)&v387[2] + 6)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v298, CFSTR("total_cd_session_duration_s"));

          v299 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)&v387[2] + 10)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v299, CFSTR("total_primary_use_duration_s"));

          v300 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE14(v387[2])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v300, CFSTR("qad_sh_600_1200_ms"));

          v301 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", HIBYTE(v387[2])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v301, CFSTR("qad_sh_1200_1800_ms"));

          v302 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", LOBYTE(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v302, CFSTR("qad_sh_1800_2400_ms"));

          v303 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE1(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v303, CFSTR("qad_sh_2400_3000_ms"));

          v304 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE2(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v304, CFSTR("qad_sh_3200_3600_ms"));

          v305 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE3(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v305, CFSTR("qad_sh_3600_4200_ms"));

          v306 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE4(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v306, CFSTR("qad_md_600_1200_ms"));

          v307 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE5(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v307, CFSTR("qad_md_1200_1800_ms"));

          v308 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE6(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v308, CFSTR("qad_md_1800_2400_ms"));

          v309 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE7(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v309, CFSTR("qad_md_2400_3000_ms"));

          v310 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE8(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v310, CFSTR("qad_md_3200_3600_ms"));

          v311 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE9(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v311, CFSTR("qad_md_3600_4200_ms"));

          v312 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE10(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v312, CFSTR("qad_lg_600_1200_ms"));

          v313 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE11(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v313, CFSTR("qad_lg_1200_1800_ms"));

          v314 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE12(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v314, CFSTR("qad_lg_1800_2400_ms"));

          v315 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE13(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v315, CFSTR("qad_lg_2400_3000_ms"));

          v316 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE14(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v316, CFSTR("qad_lg_3200_3600_ms"));

          v317 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", HIBYTE(v387[3])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v317, CFSTR("qad_lg_3600_4200_ms"));

          v318 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)v390 + 14)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v318, CFSTR("sw_version_ext"));

          v319 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)&v390[1] + 2)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v319, CFSTR("bud_mileage"));

          v320 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)&v390[1] + 6)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v320, CFSTR("feature_flags"));

          v321 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)((char *)&v390[1] + 10)));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v321, CFSTR("error_code_ext"));

          v322 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", HIWORD(v390[1])));
          objc_msgSend(v4, "setObject:forKeyedSubscript:", v322, CFSTR("hw_version"));

          sub_10035D168(v323, CFSTR("unused_bytes_1"), 23, 2u, (uint64_t)&v388, v4, 0);
          sub_10035D168(v324, CFSTR("unused_bytes_2"), 4, 2u, (uint64_t)&v391, v4, 0);
          break;
        default:
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
            sub_1006E305C();
          break;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      sub_1006E3738();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006E379C();
  }

}

void sub_100369658(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

#error "10036A208: too big function (funcsize=0)"

void sub_10037FAB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_10038573C(uint64_t a1, int a2, int *a3)
{
  int v3;
  _BOOL8 result;

  switch(a2)
  {
    case 0:
      v3 = 42;
      goto LABEL_24;
    case 1:
      v3 = 39;
      goto LABEL_24;
    case 2:
      v3 = 38;
      goto LABEL_24;
    case 3:
      v3 = 29;
      goto LABEL_24;
    case 4:
      v3 = 37;
      goto LABEL_24;
    case 5:
      v3 = 34;
      goto LABEL_24;
    case 6:
      v3 = 35;
      goto LABEL_24;
    case 7:
      v3 = 40;
      goto LABEL_24;
    case 8:
      v3 = 41;
      goto LABEL_24;
    case 9:
      v3 = 28;
      goto LABEL_24;
    case 10:
      v3 = 26;
      goto LABEL_24;
    case 11:
      v3 = 31;
      goto LABEL_24;
    case 12:
      v3 = 33;
      goto LABEL_24;
    case 13:
      v3 = 44;
      goto LABEL_24;
    case 14:
      v3 = 45;
      goto LABEL_24;
    case 15:
      v3 = 36;
      goto LABEL_24;
    case 16:
      v3 = 32;
      goto LABEL_24;
    case 17:
      v3 = 27;
      goto LABEL_24;
    case 18:
      v3 = 43;
      goto LABEL_24;
    case 19:
      v3 = 30;
LABEL_24:
      *a3 = v3;
      result = 1;
      break;
    default:
      result = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_1006E3830();
        result = 0;
      }
      break;
  }
  return result;
}

void sub_100385858(uint64_t a1, unsigned __int16 *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD v31[5];
  _QWORD v32[5];

  v31[0] = CFSTR("haBrand");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *a2));
  v32[0] = v4;
  v31[1] = CFSTR("leaVersion");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)a2 + 2)));
  v32[1] = v5;
  v31[2] = CFSTR("codecId");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)a2 + 3)));
  v32[2] = v6;
  v31[3] = CFSTR("streamType");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)a2 + 4)));
  v32[3] = v7;
  v31[4] = CFSTR("duration");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 2)));
  v32[4] = v8;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v32, v31, 5));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v9));

  v11 = *((unsigned __int8 *)a2 + 12);
  if (v11 == 2)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", (__int16)a2[7]));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v17, CFSTR("avgRssiRight"));

    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 4)));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v18, CFSTR("reTxRateRight"));

    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 5)));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v19, CFSTR("txFailureRateRight"));

    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 6)));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v20, CFSTR("rxPerRight"));

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 7)));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v16, CFSTR("rxMissingRateRight"));
  }
  else
  {
    if (v11 != 1)
      goto LABEL_6;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", (__int16)a2[7]));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v12, CFSTR("avgRssiLeft"));

    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 4)));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v13, CFSTR("reTxRateLeft"));

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 5)));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v14, CFSTR("txFailureRateLeft"));

    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 6)));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v15, CFSTR("rxPerLeft"));

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 7)));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v16, CFSTR("rxMissingRateLeft"));
  }

LABEL_6:
  v21 = *((unsigned __int8 *)a2 + 32);
  if (v21 == 2)
  {
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", (__int16)a2[17]));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v27, CFSTR("avgRssiRight"));

    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 9)));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v28, CFSTR("reTxRateRight"));

    v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 10)));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v29, CFSTR("txFailureRateRight"));

    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 11)));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v30, CFSTR("rxPerRight"));

    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 12)));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v26, CFSTR("rxMissingRateRight"));
    goto LABEL_10;
  }
  if (v21 == 1)
  {
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", (__int16)a2[17]));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v22, CFSTR("avgRssiLeft"));

    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 9)));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v23, CFSTR("reTxRateLeft"));

    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 10)));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v24, CFSTR("txFailureRateLeft"));

    v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 11)));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v25, CFSTR("rxPerLeft"));

    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a2 + 12)));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v26, CFSTR("rxMissingRateLeft"));
LABEL_10:

  }
  sub_100015CC8(a1, 0x5Du, v10);

}

void sub_100385D84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100385ED8(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD v5[5];
  int v6;

  v4 = sub_10006BBAC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100385F40;
  v5[3] = &unk_1009173C0;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_100385F40(uint64_t a1)
{
  _BYTE *v2;
  NSObject *v3;
  int v4;
  NSObject *v5;
  char v6;
  NSObject *v7;
  unsigned int v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  xpc_object_t v12;
  uint64_t v13;
  _QWORD handler[5];
  uint8_t buf[8];
  uint64_t v16;
  void (*v17)(uint64_t);
  void *v18;
  _BYTE *v19;
  char v20;

  v2 = *(_BYTE **)(a1 + 32);
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "updateBTPowerStateMonitorEvent: eventType = %d", buf, 8u);
  }
  switch(*(_DWORD *)(a1 + 40))
  {
    case 1:
      if (!v2[681])
      {
        v5 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BT power state pre-SU is ON, report metrics", buf, 2u);
        }
        v6 = -1;
        goto LABEL_29;
      }
      break;
    case 2:
      if (!v2[681])
      {
        v7 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BT power state pre-SU is OFF, start monitor timer", buf, 2u);
        }
        sub_10038633C((uint64_t)v2, 0x1Cu);
        goto LABEL_24;
      }
      break;
    case 3:
      if (v2[681] == 1 && v2[684])
      {
        v8 = v2[682] - 1;
        v9 = qword_1009997E8;
        if (v8 > 0x1B)
        {
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
            sub_1006E38F4();
          v6 = 0;
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "BT power state metrics monitor timer is active and BT power off request is invoked from BT Setting, report metrics", buf, 2u);
          }
          v6 = 29 - v2[682];
        }
        sub_10038633C((uint64_t)v2, 0);
        xpc_activity_unregister("com.apple.Bluetooth.PowerStateMonitor");
        v2[684] = 0;
        v2[681] = 0;
        if (v8 < 0x1C)
        {
LABEL_29:
          v13 = sub_10006BBAC();
          *(_QWORD *)buf = _NSConcreteStackBlock;
          v16 = 3221225472;
          v17 = sub_100386538;
          v18 = &unk_100918888;
          v19 = v2;
          v20 = v6;
          sub_100041A34(v13, buf);
        }
      }
      break;
    case 4:
      if (!v2[681] && v2[682] - 1 <= 0x1B)
      {
        v10 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          v11 = v2[682];
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Recover monitor timer for BT power state metrics, numOfDays = %d", buf, 8u);
        }
LABEL_24:
        v12 = xpc_dictionary_create(0, 0, 0);
        xpc_dictionary_set_BOOL(v12, XPC_ACTIVITY_REPEATING, 1);
        xpc_dictionary_set_int64(v12, XPC_ACTIVITY_DELAY, XPC_ACTIVITY_INTERVAL_1_DAY);
        xpc_dictionary_set_int64(v12, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_MIN);
        xpc_dictionary_set_string(v12, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_100386460;
        handler[3] = &unk_10092A200;
        handler[4] = v2;
        xpc_activity_register("com.apple.Bluetooth.PowerStateMonitor", v12, handler);
        v2[681] = 1;
        v2[684] = 1;

      }
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E3890();
      break;
  }
}

void sub_100386324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10038633C(uint64_t a1, unsigned int a2)
{
  NSObject *v3;
  CFNumberRef v5;
  char valuePtr;
  uint8_t buf[4];
  unsigned int v8;

  valuePtr = a2;
  if (*(unsigned __int8 *)(a1 + 682) != a2)
  {
    v3 = qword_1009997E8;
    if (a2 < 0x1D)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v8 = a2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "writeBTPowerStateMonitorNumOfDays : numOfDays %d", buf, 8u);
      }
      *(_BYTE *)(a1 + 682) = a2;
      v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &valuePtr);
      CFPreferencesSetAppValue(CFSTR("BTPowerStateMonitorNumOfDays"), v5, CFSTR("com.apple.BTServer"));
      CFPreferencesAppSynchronize(CFSTR("com.apple.BTServer"));
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      sub_1006E3958();
    }
  }
}

void sub_100386460(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_10006BBAC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10038666C;
  v3[3] = &unk_100917378;
  v3[4] = v1;
  sub_100041A34(v2, v3);
}

void sub_1003864C0(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_10006BBAC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100386528;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_100386528(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 683) = *(_BYTE *)(result + 40);
  return result;
}

void sub_100386538(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint8_t buf[4];
  int v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)buf = 67109120;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "sendBTPowerStatePostSUMetrics: numOfDaysForBTReTurnedOff = %d", buf, 8u);
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a1 + 40), CFSTR("NumOfDaysForBTReTurnedOff")));
  v8 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));

  sub_100015CC8(v2, 0x41u, v6);
}

void sub_100386648(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10038666C(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned int v2;
  NSObject *v3;
  NSObject *v4;
  _BOOL4 v5;
  int v6;
  uint64_t v7;
  _QWORD v8[5];
  char v9;

  v1 = *(unsigned __int8 **)(a1 + 32);
  if (!v1[683])
  {
    v3 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT is turned off by non-BT settings clients, stop metrics monitoring", (uint8_t *)v8, 2u);
    }
    goto LABEL_14;
  }
  v2 = v1[682];
  if (v2 >= 0x1D)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E38F4();
LABEL_14:
    sub_10038633C((uint64_t)v1, 0);
    if (v1[684])
    {
      xpc_activity_unregister("com.apple.Bluetooth.PowerStateMonitor");
      v1[684] = 0;
    }
    return;
  }
  v4 = qword_1009997E8;
  v5 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  if (!v2)
  {
    if (v5)
    {
      v8[0] = 0x1C04000100;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "btPowerStateMonitorTimerHandler : BT is not re-turned off manually within %d days, report metrics", (uint8_t *)v8, 8u);
    }
    v7 = sub_10006BBAC();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100386538;
    v8[3] = &unk_100918888;
    v8[4] = v1;
    v9 = 0;
    sub_100041A34(v7, v8);
    goto LABEL_14;
  }
  if (v5)
  {
    v6 = v1[682];
    LODWORD(v8[0]) = 67109120;
    HIDWORD(v8[0]) = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "btPowerStateMonitorTimerHandler : Keep timer alive, numOfDays = %d", (uint8_t *)v8, 8u);
  }
  sub_10038633C((uint64_t)v1, (v1[682] - 1));
}

void sub_100386858(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  void *v4;
  NSNumber *v5;
  void *v6;
  NSNumber *v7;
  void *v8;
  NSNumber *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[12];
  _QWORD v22[12];

  v3 = *a2;
  v21[0] = CFSTR("DisconnectReason");
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[4]));
  v22[0] = v20;
  v21[1] = CFSTR("DURATION");
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[3]));
  v22[1] = v17;
  v21[2] = CFSTR("IsA2DPStreaming");
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10092A4D0);
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)off_100977B38 + 197)));
  v22[2] = v18;
  v21[3] = CFSTR("IsHFPActive");
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10092A4D0);
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)off_100977B38 + 198)));
  v22[3] = v19;
  v21[4] = CFSTR("IsLEAStreaming");
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10092A4D0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)off_100977B38 + 199)));
  v22[4] = v4;
  v21[5] = CFSTR("IsApplePencilConnected");
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092A570);
  v5 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_100661CF8((uint64_t)off_1009778C0));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v22[5] = v6;
  v21[6] = CFSTR("NumberOfAppleMouseOrTrackpadConnected");
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092A470);
  v7 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", sub_100472980((uint64_t)off_1009778E0));
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v22[6] = v8;
  v21[7] = CFSTR("NumberOfAppleKeyboardConnected");
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092A470);
  v9 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", sub_100472A84((uint64_t)off_1009778E0));
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v22[7] = v10;
  v21[8] = CFSTR("PER");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2[2]));
  v22[8] = v11;
  v21[9] = CFSTR("PID");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIWORD(v3)));
  v22[9] = v12;
  v21[10] = CFSTR("RSSI");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2[1]));
  v22[10] = v13;
  v21[11] = CFSTR("VID");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (unsigned __int16)v3));
  v22[11] = v14;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v22, v21, 12));

  sub_100015CC8(a1, 0x59u, v15);
}

void sub_100386C28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100386CE8(uint64_t a1, void *a2)
{
  sub_100015CC8(a1, 0x40u, a2);
}

void sub_100386CF4(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  _QWORD v18[4];
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  id v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v9 = a3;
  v10 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (a2 > 8)
      v11 = "?";
    else
      v11 = off_10092AAB0[a2];
    *(_DWORD *)buf = 136316162;
    v20 = v11;
    v21 = 1024;
    v22 = a2;
    v23 = 2112;
    v24 = v9;
    v25 = 1024;
    v26 = a4;
    v27 = 1024;
    v28 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Submitting EN state metric: version %s (%u), inSubdivisionCode %@ inLegalConsentPageCount %d inAvailabilityAlertCount %d ", buf, 0x28u);
  }
  v17[0] = CFSTR("Version");
  if (a2 > 8)
    v12 = "?";
  else
    v12 = off_10092AAB0[a2];
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12, v17[0]));
  v18[0] = v13;
  v18[1] = v9;
  v17[1] = CFSTR("subdivisionCode");
  v17[2] = CFSTR("LegalConsentPageCount");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a4));
  v18[2] = v14;
  v17[3] = CFSTR("AvailabilityAlertCount");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a5));
  v18[3] = v15;
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 4));

  sub_100015CC8(a1, 0x4Eu, v16);
}

void sub_100386EDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100386F24(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  id v13;
  id v14;
  NSObject *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v26[6];
  _QWORD v27[6];
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  unsigned int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  id v37;
  __int16 v38;
  id v39;
  __int16 v40;
  const char *v41;

  v13 = a5;
  v14 = a6;
  v15 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (a2 > 4)
      v16 = "?";
    else
      v16 = off_10092AAF8[a2];
    v17 = "no";
    *(_DWORD *)buf = 136316674;
    v29 = v16;
    v30 = 1024;
    if ((_DWORD)a3)
      v18 = "yes";
    else
      v18 = "no";
    v31 = a2;
    if ((_DWORD)a4)
      v19 = "yes";
    else
      v19 = "no";
    v32 = 2080;
    if ((_DWORD)a7)
      v17 = "yes";
    v33 = v18;
    v34 = 2080;
    v35 = v19;
    v36 = 2112;
    v37 = v13;
    v38 = 2112;
    v39 = v14;
    v40 = 2080;
    v41 = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Submitting EN onboarding metric: trigger %s (%u), completed %s, firstTime %s countryCode %@ subDiv %@ inlegalConsent %s", buf, 0x44u);
  }
  v26[0] = CFSTR("ENOnboardingTrigger");
  if (a2 > 4)
    v20 = "?";
  else
    v20 = off_10092AAF8[a2];
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20, v26[0]));
  v27[0] = v21;
  v26[1] = CFSTR("Completed");
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a3));
  v27[1] = v22;
  v26[2] = CFSTR("FirstAttempt");
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a4));
  v27[2] = v23;
  v27[3] = v13;
  v26[3] = CFSTR("CountryCode");
  v26[4] = CFSTR("subdivisionCode");
  v27[4] = v14;
  v26[5] = CFSTR("sawLegalConsentPage");
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a7));
  v27[5] = v24;
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v27, v26, 6));

  sub_100015CC8(a1, 0x4Du, v25);
}

void sub_1003871A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100387200(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSString *v5;
  void *v6;
  void *v7;
  const __CFString *v8;
  void *v9;
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  int v13;

  v4 = (id)qword_1009997E8;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    v11 = ENErrorMetricTypeToString(a2);
    v12 = 1024;
    v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Submitting EN error metric: error %s (%u)", buf, 0x12u);
  }

  v8 = CFSTR("ErrorType");
  v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", ENErrorMetricTypeToString(a2));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v9 = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));

  sub_100015CC8(a1, 0x4Cu, v7);
}

void sub_100387334(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100387364(uint64_t a1, id a2)
{
  id v3;
  void *v4;

  v3 = objc_retainBlock(a2);
  v4 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v3;

}

uint64_t sub_100387390(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 1;
  result = 0;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 1;
      break;
    case 3:
      result = 2;
      break;
    case 7:
      result = 3;
      break;
    default:
      result = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        sub_1006E39BC();
        result = 0;
      }
      break;
  }
  return result;
}

_BYTE *sub_100387430(_BYTE *result, uint64_t a2, char a3, int a4)
{
  switch(a4)
  {
    case 1:
      result[574] = a3;
      break;
    case 2:
      result[573] = a3;
      break;
    case 3:
      result[576] = a3;
      break;
    case 4:
      result[575] = a3;
      break;
    default:
      return result;
  }
  return result;
}

_BYTE *sub_100387474(_BYTE *result, uint64_t a2, char a3, int a4)
{
  switch(a4)
  {
    case 1:
      result[534] = a3;
      break;
    case 2:
      result[533] = a3;
      break;
    case 3:
      result[536] = a3;
      break;
    case 4:
      result[535] = a3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003874B8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 577) = a2;
  return result;
}

uint64_t sub_1003874C0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 572) = a2;
  return result;
}

void sub_1003874C8(unsigned __int8 *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  __int128 v10;
  uint64_t v11;
  void *i;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  _BOOL8 v24;
  NSObject *v25;
  void *v26;
  NSObject *v27;
  __int128 v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  void *v35;
  _BYTE v36[128];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  v29 = v5;
  if (v5 && v6)
  {
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v8 = v5;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v30, v36, 16);
    if (v9)
    {
      v11 = *(_QWORD *)v31;
      *(_QWORD *)&v10 = 138412290;
      v28 = v10;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v31 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
          switch(objc_msgSend(v13, "intValue", v28))
          {
            case 0u:
              v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1[573]));
              objc_msgSend(v7, "setObject:forKeyedSubscript:", v14, v13);

              break;
            case 1u:
              v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1[574]));
              objc_msgSend(v7, "setObject:forKeyedSubscript:", v18, v13);

              break;
            case 2u:
              v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1[575]));
              objc_msgSend(v7, "setObject:forKeyedSubscript:", v15, v13);

              break;
            case 3u:
              v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1[576]));
              objc_msgSend(v7, "setObject:forKeyedSubscript:", v19, v13);

              break;
            case 4u:
              v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1[577]));
              objc_msgSend(v7, "setObject:forKeyedSubscript:", v16, v13);

              break;
            case 5u:
              v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[528]));
              objc_msgSend(v7, "setObject:forKeyedSubscript:", v20, v13);

              break;
            case 6u:
              v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[529]));
              objc_msgSend(v7, "setObject:forKeyedSubscript:", v21, v13);

              break;
            case 7u:
              v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[531]));
              objc_msgSend(v7, "setObject:forKeyedSubscript:", v22, v13);

              break;
            case 8u:
              v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a1[530]));
              objc_msgSend(v7, "setObject:forKeyedSubscript:", v23, v13);

              break;
            case 9u:
              v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1[572]));
              objc_msgSend(v7, "setObject:forKeyedSubscript:", v17, v13);

              break;
            case 0xAu:
              if (a1[576])
                v24 = a1[572] != 0;
              else
                v24 = 0;
              v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v24));
              objc_msgSend(v7, "setObject:forKeyedSubscript:", v26, v13);

              break;
            default:
              v25 = qword_1009997E8;
              if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = v28;
                v35 = v13;
                _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Invalid target for readStoredMetricValue: %@", buf, 0xCu);
              }
              break;
          }
        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v30, v36, 16);
      }
      while (v9);
    }

  }
  else
  {
    v27 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E39E8((uint64_t)v7, (uint64_t)v29, v27);
  }

}

void sub_1003878A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10038794C(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;

  v2 = a2;
  if ((sub_1004F95E0() & 1) != 0)
  {
    v3 = sub_10006BBAC();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1003879F0;
    v4[3] = &unk_1009172A0;
    v5 = v2;
    sub_100041A34(v3, v4);

  }
}

void sub_1003879D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1003879F0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned __int8 v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("ServiceUUID")));
  v18 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("SessionState")));
  v5 = objc_msgSend(v4, "intValue");
  v6 = BiomeLibrary();
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "Device"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "Wireless"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "BluetoothGATTSession"));

  v11 = objc_alloc((Class)BMDeviceBluetoothGATTSession);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("BundleID")));
  v13 = sub_100387390(v5);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("SupportsBackgrounding")));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", CFSTR("SupportsStateRestoration")));
  v16 = objc_msgSend(v11, "initWithBundleID:serviceUUID:sessionType:sessionState:supportsBackgrounding:supportsStateRestoration:", v12, v3, CFSTR("Peripheral"), v13, v14, v15);

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "source"));
  objc_msgSend(v17, "sendEvent:", v16);

}

void sub_100387BB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_100387C58(uint64_t a1, void *a2)
{
  sub_100015CC8(a1, 0x65u, a2);
}

void sub_100387C64(uint64_t a1, void *a2)
{
  sub_100015CC8(a1, 0x61u, a2);
}

void sub_100387C70(uint64_t a1, void *a2)
{
  sub_100015CC8(a1, 0x49u, a2);
}

void sub_100387C7C(uint64_t a1, void *a2)
{
  sub_100015CC8(a1, 0x64u, a2);
}

void sub_100387C88(uint64_t a1, void *a2)
{
  sub_100015CC8(a1, 0x5Bu, a2);
}

void sub_100387C94(uint64_t a1, void *a2)
{
  sub_100015CC8(a1, 0x5Cu, a2);
}

void sub_100387CA0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  int v20;
  __int16 v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  _OWORD v29[2];
  id v30;
  uint8_t buf[8];
  _QWORD v32[2];
  const void *v33[2];
  uint64_t v34;

  v5 = a2;
  sub_100015CC8(a1, 0x68u, v5);
  v33[0] = 0;
  v33[1] = 0;
  v34 = 0;
  sub_10043E5F8(a3, v33);
  v32[0] = 0;
  v32[1] = 0;
  sub_10003415C((uint64_t)v32, a1 + 240);
  if (sub_100393E38(a1 + 384, v33) == 1)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("Reason")));
    v7 = objc_msgSend(v6, "isEqualToString:", CFSTR("Success"));

    if (v7)
    {
      *(_BYTE *)(sub_10034983C(a1 + 384, v33) + 5) = 1;
    }
    else
    {
      v8 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Analytics - MagicPairing Complete - Failed", buf, 2u);
      }
      *(_BYTE *)(sub_10034983C(a1 + 384, v33) + 5) = 0;
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("Reason")));
      v10 = sub_10034983C(a1 + 384, v33);
      v11 = *(void **)(v10 + 24);
      *(_QWORD *)(v10 + 24) = v9;

      v12 = sub_10034983C(a1 + 384, v33);
      v13 = *(void **)(v12 + 32);
      *(_QWORD *)(v12 + 32) = CFSTR("Failed");

      v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("Status")));
      v15 = sub_10034983C(a1 + 384, v33);
      v16 = *(void **)(v15 + 48);
      *(_QWORD *)(v15 + 48) = v14;

      v17 = sub_10034983C(a1 + 384, v33);
      v18 = *(_DWORD *)v17;
      v21 = *(_WORD *)(v17 + 4);
      v20 = v18;
      v22 = *(id *)(v17 + 8);
      v23 = *(id *)(v17 + 16);
      v24 = *(id *)(v17 + 24);
      v25 = *(id *)(v17 + 32);
      v26 = *(id *)(v17 + 40);
      v27 = *(id *)(v17 + 48);
      v28 = *(id *)(v17 + 56);
      v19 = *(_OWORD *)(v17 + 79);
      v29[0] = *(_OWORD *)(v17 + 64);
      *(_OWORD *)((char *)v29 + 15) = v19;
      v30 = *(id *)(v17 + 96);
      sub_100364AC0(a1, (unsigned __int8 *)&v20);
      sub_100393EB4((uint64_t **)(a1 + 384), v33);
    }
  }
  sub_100034234((uint64_t)v32);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)v33[0]);

}

void sub_100387F0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  sub_100034234(v3 - 88);
  if (*(char *)(v3 - 49) < 0)
    operator delete(*(void **)(v3 - 72));

  _Unwind_Resume(a1);
}

void sub_100387F54(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *p_p;
  id v16;
  NSObject *v17;
  void *__p;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t buf[4];
  id v30;

  v3 = a2;
  v28 = 0;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v4 = sub_100350148();
  (*(void (**)(void *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v4 + 24))(v4, &v28, &v27, &v26, &v25);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v28));
  objc_msgSend(v3, "setObject:forKey:", v5, CFSTR("BasebandScanPrepTimeMs"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v27));
  objc_msgSend(v3, "setObject:forKey:", v6, CFSTR("BasebandScanTimeMs"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v26));
  objc_msgSend(v3, "setObject:forKey:", v7, CFSTR("BasebandTimeMs"));

  v23 = 0;
  v24 = 0;
  v22 = 0;
  v21 = 0;
  __p = 0;
  v19 = 0;
  v20 = 0;
  v8 = sub_100350148();
  (*(void (**)(void *, uint64_t *, uint64_t *, uint64_t *, unsigned __int8 *, void **))(*(_QWORD *)v8 + 32))(v8, &v24, &v23, &v22, &v21, &__p);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v24));
  objc_msgSend(v3, "setObject:forKey:", v9, CFSTR("BasebandScanPrepTimeMs"));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v23));
  objc_msgSend(v3, "setObject:forKey:", v10, CFSTR("BasebandScanTimeMS"));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v22));
  objc_msgSend(v3, "setObject:forKey:", v11, CFSTR("BasebandTimeMs"));

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v21));
  objc_msgSend(v3, "setObject:forKey:", v12, CFSTR("Status"));

  v13 = HIBYTE(v20);
  if (v20 < 0)
    v13 = v19;
  if (v13)
  {
    v14 = objc_alloc((Class)NSString);
    if (v20 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    v16 = objc_msgSend(v14, "initWithUTF8String:", p_p);
    if (v16)
      objc_msgSend(v3, "setObject:forKey:", v16, CFSTR("Reason"));

  }
  v17 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v30 = v3;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Fast Connect Metrics: %@", buf, 0xCu);
  }
  sub_100015CC8(a1, 0x4Fu, v3);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);

}

void sub_100388220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1003882B4(uint64_t a1, void *a2)
{
  sub_100015CC8(a1, 0x45u, a2);
}

void sub_1003882C0(uint64_t a1, void *a2, int a3)
{
  void *v5;
  void *v6;
  id v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  void *v16;
  unsigned __int8 v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  uint8_t buf[4];
  _BYTE v24[18];
  const __CFString *v25;

  v25 = CFSTR("GAPAPairingMetricUniqueIdSalt");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v25, 1));
  v22 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[CBUserController readPrefKeys:source:error:](CBUserController, "readPrefKeys:source:error:", v5, 8, &v22));
  v7 = v22;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("GAPAPairingMetricUniqueIdSalt")));

  v9 = (id)qword_1009997E8;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v10 = CUPrintNSError(v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)v24 = v11;
    *(_WORD *)&v24[8] = 2112;
    *(_QWORD *)&v24[10] = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GAPAPairingMetricUniqueIdSalt from readPrefKeys %@ %@", buf, 0x16u);

  }
  if (!v7
    && (v12 = objc_opt_class(NSData), (objc_opt_isKindOfClass(v8, v12) & 1) != 0)
    && objc_msgSend(v8, "length") == (id)a3)
  {
    v13 = objc_retainAutorelease(v8);
    memcpy(a2, objc_msgSend(v13, "bytes"), (size_t)objc_msgSend(v13, "length"));
    v14 = 0;
  }
  else
  {
    arc4random_buf(a2, a3);
    v15 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68157954;
      *(_DWORD *)v24 = 16;
      *(_WORD *)&v24[4] = 2096;
      *(_QWORD *)&v24[6] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Make fresh GAPAPairingMetricUniqueIdSalt %.16P", buf, 0x12u);
    }
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a2, a3));
    v21 = v7;
    v17 = +[CBUserController writePrefKey:value:source:error:](CBUserController, "writePrefKey:value:source:error:", CFSTR("GAPAPairingMetricUniqueIdSalt"), v16, 8, &v21);
    v14 = v21;

    if ((v17 & 1) == 0)
    {
      v18 = (id)qword_1009997E8;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v19 = CUPrintNSError(v14);
        v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        sub_1006E3A80(v20, (uint64_t)buf, v18);
      }

    }
  }

}

void sub_10038857C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1003885E0(uint64_t a1, int *a2, int a3, int a4, int a5, __int128 *a6, void *a7, void *a8, void *a9)
{
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  int v20;
  id v21;
  id v22;
  id v23;
  _QWORD v24[4];
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  __int128 __p;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  __int16 v35;

  v16 = a7;
  v17 = a8;
  v18 = a9;
  v19 = sub_10006BBAC();
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3321888768;
  v24[2] = sub_100388788;
  v24[3] = &unk_10092A300;
  v28 = a1;
  v20 = *a2;
  v31 = a3;
  v34 = v20;
  v35 = *((_WORD *)a2 + 2);
  v21 = v16;
  v25 = v21;
  if (*((char *)a6 + 23) < 0)
  {
    sub_10003430C(&__p, *(void **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    __p = *a6;
    v30 = *((_QWORD *)a6 + 2);
  }
  v32 = a5;
  v33 = a4;
  v22 = v17;
  v26 = v22;
  v23 = v18;
  v27 = v23;
  sub_100041A34(v19, v24);

  if (SHIBYTE(v30) < 0)
    operator delete((void *)__p);

}

void sub_100388738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_100388788(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  unsigned int v43;
  void *v44;
  void *v45;
  void *v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  id v61;
  uint8_t buf[4];
  void *v63;
  _QWORD v64[18];
  _QWORD v65[18];
  unsigned __int8 md[8];
  uint64_t v67;
  int v68;
  int data;
  __int16 v70;
  _QWORD v71[2];

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v3)
  {
    v61 = 0;
    v4 = CUPrintFlags32(v3, &unk_10073F0F8);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    NSAppendPrintF_safe(&v61, "%@", v5);
    v6 = v61;

    v7 = *(_DWORD *)(a1 + 88);
  }
  else
  {
    LOBYTE(v7) = 0;
    v6 = 0;
  }
  v46 = v6;
  v9 = a1 + 100;
  v8 = *(_DWORD *)(a1 + 100);
  v71[1] = 0;
  v71[0] = 0;
  data = v8;
  v70 = *(_WORD *)(a1 + 104);
  sub_1003882C0(v3, v71, 16);
  *(_QWORD *)md = 0;
  v67 = 0;
  v68 = 0;
  CC_SHA1(&data, 0x16u, md);
  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", md, 20));
  v59 = *(_DWORD *)(a1 + 100);
  v60 = *(_WORD *)(a1 + 104);
  v10 = sub_100388E30(v2, (unsigned __int8 *)&v59, 0);
  v57 = *(_DWORD *)(a1 + 100);
  v58 = *(_WORD *)(a1 + 104);
  v11 = sub_100388E30(v2, (unsigned __int8 *)&v57, 1u);
  v55 = *(_DWORD *)(a1 + 100);
  v56 = *(_WORD *)(a1 + 104);
  v12 = sub_100388E30(v2, (unsigned __int8 *)&v55, 2u);
  v53 = *(_DWORD *)(a1 + 100);
  v54 = *(_WORD *)(a1 + 104);
  v13 = sub_100388E30(v2, (unsigned __int8 *)&v53, 3u);
  v51 = *(_DWORD *)(a1 + 100);
  v52 = *(_WORD *)(a1 + 104);
  v14 = sub_100388E30(v2, (unsigned __int8 *)&v51, 4u);
  v43 = v10;
  v49 = *(_DWORD *)(a1 + 100);
  v50 = *(_WORD *)(a1 + 104);
  v15 = sub_100388E30(v2, (unsigned __int8 *)&v49, 5u);
  v47 = *(_DWORD *)(a1 + 100);
  v48 = *(_WORD *)(a1 + 104);
  v16 = sub_100388E30(v2, (unsigned __int8 *)&v47, 6u);
  v17 = v16;
  v18 = v7 & 3;
  if ((_DWORD)v16)
  {
    LODWORD(v42) = v16 - v11;
    HIDWORD(v42) = v16 - v15;
    v19 = (v15 - v14);
    v20 = (v14 - v13);
    v21 = (v13 - v12);
    v22 = (v12 - v11);
  }
  else
  {
    v11 = 0;
    v22 = 0;
    v21 = 0;
    v20 = 0;
    v19 = 0;
    v42 = 0;
  }
  v64[0] = CFSTR("Flags");
  v64[1] = CFSTR("StartSession");
  v23 = *(_QWORD *)(a1 + 32);
  v65[0] = v46;
  v65[1] = v23;
  v64[2] = CFSTR("State");
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18));
  v65[2] = v41;
  v64[3] = CFSTR("FWVersion");
  v24 = (_QWORD *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
    v24 = (_QWORD *)*v24;
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v24));
  v65[3] = v40;
  v64[4] = CFSTR("PID");
  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 92)));
  v65[4] = v39;
  v64[5] = CFSTR("VID");
  v25 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 96)));
  v26 = *(_QWORD *)(a1 + 40);
  v27 = *(_QWORD *)(a1 + 48);
  v38 = (void *)v25;
  v65[5] = v25;
  v65[6] = v26;
  v64[6] = CFSTR("PrimaryIdentificationHash");
  v64[7] = CFSTR("SecondaryIdentificationHash");
  v65[7] = v27;
  v65[8] = v45;
  v64[8] = CFSTR("UniqueIdentificationHash");
  v64[9] = CFSTR("TimingNonAuthTotalMS");
  v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v43));
  v65[9] = v44;
  v64[10] = CFSTR("Timing_A_AuthSupportedTotalMS");
  v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v11));
  v65[10] = v37;
  v64[11] = CFSTR("Timing_B_AuthGetACRTOTADurationMS");
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v22));
  v65[11] = v36;
  v64[12] = CFSTR("Timing_C_AuthACRTReceivedDurationMS");
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v21));
  v65[12] = v28;
  v64[13] = CFSTR("Timing_D_AuthChallengeOTADurationMS");
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v20));
  v65[13] = v29;
  v64[14] = CFSTR("Timing_E_AuthResponseReceivedDurationMS");
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v19));
  v65[14] = v30;
  v64[15] = CFSTR("Timing_F_AuthResultDurationMS");
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v42)));
  v65[15] = v31;
  v64[16] = CFSTR("Timing_G_AuthDurationMS");
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v42));
  v65[16] = v32;
  v64[17] = CFSTR("Timing_H_AuthTotalMS");
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v17));
  v65[17] = v33;
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v65, v64, 18));

  v35 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v63 = v34;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "GAPA result metric %@", buf, 0xCu);
  }
  sub_100015CC8(v2, 0x51u, v34);
  sub_1003942C8((uint64_t **)(v2 + 432), v9);

}

void sub_100388D14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100388E30(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t **v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v15;
  char v16[24];
  char v17[24];

  v5 = (uint64_t **)(a1 + 432);
  if (sub_100394348(a1 + 432, (uint64_t)a2))
  {
    *(_QWORD *)v16 = a2;
    v6 = sub_100394408(v5, (uint64_t)a2, (uint64_t)&unk_100740F58, (_DWORD **)v16);
    v9 = *((_QWORD *)v6 + 6);
    v7 = v6 + 12;
    v8 = v9;
    if (v9)
    {
      v10 = v7;
      do
      {
        v11 = *(unsigned __int8 *)(v8 + 28);
        v12 = v11 >= a3;
        if (v11 >= a3)
          v13 = (uint64_t *)v8;
        else
          v13 = (uint64_t *)(v8 + 8);
        if (v12)
          v10 = (_DWORD *)v8;
        v8 = *v13;
      }
      while (*v13);
      if (v10 != v7 && *((unsigned __int8 *)v10 + 28) <= a3)
        return v10[8];
    }
  }
  else
  {
    v15 = (id)qword_1009997E8;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      sub_10046E9BC(a2, v16);
      sub_1006E3AC8(v16, (uint64_t)v17, v15);
    }

  }
  return 0;
}

void sub_100388F44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_100388F5C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v5;
  int v6;

  result = (_QWORD *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    result = sub_10003430C(result, *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 64);
    result[2] = *(_QWORD *)(a2 + 80);
    *(_OWORD *)result = v5;
  }
  v6 = *(_DWORD *)(a2 + 100);
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(_DWORD *)(a1 + 100) = v6;
  return result;
}

void sub_100388FB8(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
}

void *sub_100388FCC(uint64_t a1, unsigned __int8 *a2, unsigned int a3, int a4)
{
  uint64_t **v8;
  int v9;
  int v10;
  _DWORD *v11;
  int v12;
  void *result;
  uint64_t **v14;
  unsigned int v15;
  unsigned __int8 v16;
  unsigned __int8 *v17;

  v16 = a3;
  v8 = (uint64_t **)(a1 + 408);
  if (sub_100394348(a1 + 408, (uint64_t)a2))
  {
    v17 = 0;
    sub_10004AD30((uint64_t)&v17);
    v9 = (int)v17;
    v10 = SWORD2(v17);
    v17 = a2;
    v11 = sub_100393F0C(v8, (uint64_t)a2, (uint64_t)&unk_100740F58, (_DWORD **)&v17);
    v12 = v10 - v11[12] + 1000 * (v9 - v11[10]);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E3B2C();
    v12 = 0;
  }
  v17 = a2;
  result = sub_100394408((uint64_t **)(a1 + 432), (uint64_t)a2, (uint64_t)&unk_100740F58, (_DWORD **)&v17);
  v14 = (uint64_t **)*((_QWORD *)result + 6);
  if (!v14)
  {
LABEL_13:
    v17 = &v16;
    result = sub_1003944A8((uint64_t **)result + 5, &v16, (uint64_t)&unk_100740F58, &v17);
    *((_DWORD *)result + 8) = v12;
    return result;
  }
  while (1)
  {
    v15 = *((unsigned __int8 *)v14 + 28);
    if (v15 <= a3)
      break;
LABEL_10:
    v14 = (uint64_t **)*v14;
    if (!v14)
      goto LABEL_13;
  }
  if (v15 < a3)
  {
    ++v14;
    goto LABEL_10;
  }
  if (a4)
    goto LABEL_13;
  return result;
}

void sub_10038911C(uint64_t a1, void *a2)
{
  sub_100015CC8(a1, 0x3Bu, a2);
}

void sub_100389128(uint64_t a1, void *a2)
{
  sub_100015CC8(a1, 0x44u, a2);
}

void sub_100389134(uint64_t a1, __int128 *a2, void *a3, uint64_t a4, char a5, char a6)
{
  id v11;
  uint64_t v12;
  id v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  __int128 __p;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v11 = a3;
  v12 = sub_10006BBAC();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3321888768;
  v14[2] = sub_10038925C;
  v14[3] = &unk_10092A338;
  v16 = a1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C(&__p, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __p = *a2;
    v18 = *((_QWORD *)a2 + 2);
  }
  v13 = v11;
  v15 = v13;
  v19 = a4;
  v20 = a5;
  v21 = a6;
  sub_100041A34(v12, v14);

  if (SHIBYTE(v18) < 0)
    operator delete((void *)__p);

}

void sub_10038922C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  if (a21 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_10038925C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  uint64_t *v9;
  _QWORD v11[2];
  __int128 *v12;
  uint8_t buf[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  id v19;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v4 = (_QWORD *)*v4;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Start monitoring for connection %s", buf, 0xCu);
  }
  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, v2 + 240);
  if (!sub_100393E38(v2 + 384, (const void **)(a1 + 48)))
  {
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)buf = 0u;
    v14 = 0u;
    *(_QWORD *)&buf[8] = *(id *)(a1 + 32);
    *(_QWORD *)&v14 = CFSTR("Outgoing");
    *((_QWORD *)&v14 + 1) = CFSTR("NA");
    *(_QWORD *)&v15 = CFSTR("Pending");
    *((_QWORD *)&v15 + 1) = CFSTR("NA");
    *(_QWORD *)&v16 = 0;
    *(_QWORD *)&v17 = 0;
    v5 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(a1 + 72)));
    v6 = (void *)*((_QWORD *)&v16 + 1);
    *((_QWORD *)&v16 + 1) = v5;

    *((_QWORD *)&v17 + 1) = mach_absolute_time();
    WORD4(v18) = *(_WORD *)(a1 + 80);
    *(_DWORD *)((char *)&v18 + 10) = -1;
    BYTE14(v18) = 0;
    v7 = objc_msgSend(&off_100961028, "mutableCopy");
    v8 = v19;
    v19 = v7;

    v12 = (__int128 *)(a1 + 48);
    v9 = sub_100394568((uint64_t **)(v2 + 384), (const void **)(a1 + 48), (uint64_t)&unk_100740F58, &v12);
    sub_100365BFC((uint64_t)(v9 + 7), (int *)buf);

  }
  sub_100034264((uint64_t)v11);
  return sub_100034234((uint64_t)v11);
}

void sub_100389454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
  sub_100365C9C(&a13);
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_100389480(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
    return sub_10003430C(result, *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  v3 = *(_OWORD *)(a2 + 48);
  result[2] = *(_QWORD *)(a2 + 64);
  *(_OWORD *)result = v3;
  return result;
}

void sub_1003894B0(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void sub_1003894C4(uint64_t a1, char a2, char a3, char a4, char a5)
{
  CFAbsoluteTime Current;
  uint64_t v11;
  _QWORD v12[6];
  char v13;
  char v14;
  char v15;
  char v16;

  Current = CFAbsoluteTimeGetCurrent();
  v11 = sub_10006BBAC();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100389568;
  v12[3] = &unk_1009180B0;
  v12[4] = a1;
  v13 = a5;
  v14 = a2;
  v15 = a3;
  v16 = a4;
  *(CFAbsoluteTime *)&v12[5] = Current;
  sub_100041A34(v11, v12);
}

double sub_100389568(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  __int16 v8;
  uint64_t **v9;
  double result;
  uint64_t **v11;
  unint64_t v12;
  uint64_t **v13;
  double v14[2];
  _BYTE *v15;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (unsigned __int8 *)(v2 + 456);
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(_BYTE *)(v2 + 456))
      (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v2 + 400))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 49), *(unsigned __int8 *)(a1 + 50), *(unsigned __int8 *)(a1 + 51), 0);
    *(_BYTE *)(v2 + 456) = *(_BYTE *)(a1 + 49);
    *(_QWORD *)(v2 + 464) = *(_QWORD *)(a1 + 40);
    v4 = (uint64_t **)(v2 + 472);
    *(_QWORD *)&v14[0] = v3;
    v5 = sub_1003946D0(v4, v3, (uint64_t)&unk_100740F58, (_BYTE **)v14);
    LODWORD(v15) = *(_DWORD *)((char *)v5 + 42);
    WORD2(v15) = *((_WORD *)v5 + 23);
    v6 = v5[7];
    v7 = (uint64_t)v5[6] + 1;
    v8 = *(_WORD *)(a1 + 50);
    *(_QWORD *)&v14[0] = v3;
    v9 = sub_1003946D0(v4, v3, (uint64_t)&unk_100740F58, (_BYTE **)v14);
    *((_WORD *)v9 + 20) = v8;
    *(_DWORD *)((char *)v9 + 42) = (_DWORD)v15;
    *((_WORD *)v9 + 23) = WORD2(v15);
    v9[6] = (uint64_t *)v7;
    v9[7] = v6;
  }
  else if (*(_BYTE *)(v2 + 456))
  {
    *(_QWORD *)&v14[0] = v2 + 456;
    v11 = sub_1003946D0((uint64_t **)(v2 + 472), (unsigned __int8 *)(v2 + 456), (uint64_t)&unk_100740F58, (_BYTE **)v14);
    *(_OWORD *)v14 = *(_OWORD *)(v11 + 5);
    v12 = (unint64_t)((double)(unint64_t)v11[7] + (*(double *)(a1 + 40) - *(double *)(v2 + 464)) * 1000.0);
    v15 = (_BYTE *)(v2 + 456);
    v13 = sub_1003946D0((uint64_t **)(v2 + 472), (unsigned __int8 *)(v2 + 456), (uint64_t)&unk_100740F58, &v15);
    result = v14[0];
    *(_OWORD *)(v13 + 5) = *(_OWORD *)v14;
    v13[7] = (uint64_t *)v12;
  }
  return result;
}

void sub_1003896E0(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_10006BBAC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100389748;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_100389748(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  int v4;
  const __CFString *v5;
  __int16 v6;
  uint64_t v7;

  if (*(_BYTE *)(a1 + 40) == 1)
  {
    v1 = *(_QWORD *)(a1 + 32);
    ++*(_QWORD *)(v1 + 584);
    v2 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(v1 + 584);
      v4 = 138478083;
      v5 = CFSTR("fNearbyActionNoWakePrecisionFindingDailyUsage");
      v6 = 2048;
      v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Set %{private}@ to: %tu", (uint8_t *)&v4, 0x16u);
    }
  }
}

void sub_100389818(uint64_t a1, double a2, float a3, float a4)
{
  uint64_t v8;
  _QWORD v9[6];
  float v10;
  float v11;

  v8 = sub_10006BBAC();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10038989C;
  v9[3] = &unk_1009210D8;
  v9[4] = a1;
  *(double *)&v9[5] = a2;
  v10 = a3;
  v11 = a4;
  sub_100041A34(v8, v9);
}

void sub_10038989C(uint64_t a1)
{
  double v2;
  uint64_t v3;
  double v4;
  void *v5;
  void *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  void *v15;
  id v16;
  uint64_t v17;

  v17 = *(_QWORD *)(a1 + 32);
  v16 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v16, "timeIntervalSinceReferenceDate");
  LODWORD(v3) = 86400;
  if ((int)(uint64_t)rint(v2 - *(double *)(a1 + 40)) < 86400)
  {
    objc_msgSend(v16, "timeIntervalSinceReferenceDate");
    v3 = (uint64_t)rint(v4 - *(double *)(a1 + 40));
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "components:fromDate:", 224, v16));

  v15 = v6;
  v7 = objc_msgSend(v6, "hour");
  v8 = objc_msgSend(v6, "minute");
  v9 = objc_msgSend(v6, "second");
  if ((int)v3 >= 1)
  {
    v10 = 0;
    v11 = (int)(3600 * v7 + 60 * v8 + v9 - v3 + 86400) % 86400;
    v12 = v11 / 3600;
    do
    {
      if ((int)v3 >= 3600 * ((int)(v12 + v10) % 24) - v11 + 3600)
        v13 = 3600 * ((int)(v12 + v10) % 24) - v11 + 3600;
      else
        v13 = v3;
      sub_100389A8C(v17, ((char)(v12 + v10) % 24), (unsigned __int16)v13, *(float *)(a1 + 48), *(float *)(a1 + 52));
      if (v10 > 0x16)
        break;
      v11 = (v13 + v11) % 86400;
      ++v10;
      v14 = __OFSUB__((_DWORD)v3, v13);
      LODWORD(v3) = v3 - v13;
    }
    while (!(((int)v3 < 0) ^ v14 | ((_DWORD)v3 == 0)));
  }

}

void sub_100389A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_100389A8C(uint64_t a1, unsigned int a2, unsigned int a3, float a4, float a5)
{
  BOOL v6;
  uint64_t **v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  NSObject *v16;
  unsigned __int8 v17;
  uint8_t buf[8];
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;

  v17 = a2;
  v6 = a4 > -1.0 || a2 > 0x17;
  if (!v6 && (unsigned __int16)(a3 - 3600) >= 0xF1F1u)
  {
    v9 = (uint64_t **)(a1 + 496);
    *(_QWORD *)buf = &v17;
    v10 = (float *)sub_100394794((uint64_t **)(a1 + 496), &v17, (uint64_t)&unk_100740F58, (_BYTE **)buf);
    v11 = v10[8];
    v12 = v11 + (float)a3;
    v13 = (float)((float)((float)a3 * a4) + (float)(v10[9] * v11)) / v12;
    v14 = (float)((float)((float)a3 * a5) + (float)(v10[10] * v11)) / v12;
    *(_QWORD *)buf = &v17;
    v15 = (float *)sub_100394794(v9, &v17, (uint64_t)&unk_100740F58, (_BYTE **)buf);
    v15[8] = v12;
    v15[9] = v13;
    v15[10] = v14;
    v16 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)&buf[4] = v17;
      v19 = 2048;
      v20 = v12;
      v21 = 2048;
      v22 = v13;
      v23 = 2048;
      v24 = v14;
      _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "reportNearbyInfoV2DensityBubbleHourly: hour %u cum seconds %.1f avg rssi %.1f avg mps %.1f", buf, 0x26u);
    }
  }
}

void sub_100389C14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[6];

  v4 = sub_10006BBAC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100389C78;
  v5[3] = &unk_100918090;
  v5[4] = a1;
  v5[5] = a2;
  sub_100041A34(v4, v5);
}

void sub_100389C78(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  if (v1 > *(_QWORD *)(v2 + 520))
  {
    *(_QWORD *)(v2 + 520) = v1;
    v3 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(v2 + 520);
      v5 = 134217984;
      v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Set fNumberOfAOPBTPrecisionFindingKeys to: %02lu", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_100389D2C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_10006BBAC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100389D8C;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

uint64_t sub_100389D8C(uint64_t result)
{
  ++*(_WORD *)(*(_QWORD *)(result + 32) + 592);
  return result;
}

void sub_100389DA0(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_10006BBAC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100389E08;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_100389E08(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (*(_BYTE *)(result + 40))
    ++*(_DWORD *)(v1 + 600);
  else
    ++*(_DWORD *)(v1 + 596);
  return result;
}

void sub_100389E34(uint64_t a1, char a2, uint64_t a3, double a4)
{
  uint64_t v8;
  _QWORD v9[7];
  char v10;

  v8 = sub_10006BBAC();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100389EB8;
  v9[3] = &unk_100920450;
  v10 = a2;
  v9[4] = a1;
  v9[5] = a3;
  *(double *)&v9[6] = a4;
  sub_100041A34(v8, v9);
}

void sub_100389EB8(uint64_t a1)
{
  uint64_t v2;
  double v3;
  char v4;
  double v5;
  void *v6;
  void *v7;
  _BYTE *v8;
  const __CFString *v9;
  double v10;
  const __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  uint8_t v20[24];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(double *)(v2 + 168);
  v4 = *(_BYTE *)(a1 + 56);
  if (v3 == 0.0)
  {
    if (*(_BYTE *)(a1 + 56))
    {
      *(_QWORD *)(v2 + 168) = *(_QWORD *)(a1 + 48);
      *(_BYTE *)(v2 + 144) = v4;
      *(_QWORD *)(v2 + 152) = *(_QWORD *)(a1 + 40);
    }
  }
  else if (*(_BYTE *)(a1 + 56) && *(_QWORD *)(v2 + 152) == *(_QWORD *)(a1 + 40))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
      sub_1006E3BE0();
  }
  else
  {
    *(_BYTE *)(v2 + 160) = v4;
    v5 = *(double *)(a1 + 48);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithString:](NSMutableString, "stringWithString:", CFSTR("AudioRouteTransition")));
    v7 = v6;
    v8 = (_BYTE *)(v2 + 144);
    v9 = CFSTR("fromBTtoNonBT");
    if (*(_BYTE *)(v2 + 160) && *v8)
      v9 = CFSTR("fromBTtoBT");
    objc_msgSend(v6, "appendString:", v9);
    v10 = v5 - v3;
    if (v5 - v3 <= 0.0 || v10 > 5.0)
    {
      if (v10 <= 5.0 || v10 > 10.0)
      {
        if (v10 > 60.0 || v10 <= 10.0)
          v14 = CFSTR("over60seconds");
        else
          v14 = CFSTR("within10to60seconds");
      }
      else
      {
        v14 = CFSTR("within5to10seconds");
      }
    }
    else
    {
      v14 = CFSTR("within0to5seconds");
    }
    objc_msgSend(v7, "appendString:", v14);
    v15 = *(void **)(v2 + 360);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKey:", v7));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v16, "intValue") + 1));
    objc_msgSend(v15, "setObject:forKey:", v17, v7);

    v18 = (id)qword_1009997E8;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v2 + 360), "description"));
      sub_1006E3B90(v19, v20, v18);
    }

    if (*(_BYTE *)(a1 + 56))
    {
      *(_BYTE *)(v2 + 144) = 1;
      *(_QWORD *)(v2 + 152) = *(_QWORD *)(a1 + 40);
      *(_BYTE *)(v2 + 160) = 0;
      *(_QWORD *)(v2 + 168) = *(_QWORD *)(a1 + 48);
    }
    else
    {
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v2 + 160) = 0u;
    }

  }
}

void sub_10038A114(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_10038A148(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

id sub_10038A150(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10038A158(uint64_t a1)
{
  double v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _QWORD v77[58];
  _QWORD v78[58];

  v76 = 0;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_10092A5D0);
  *(_QWORD *)&v1 = sub_1006851C8((uint64_t)off_100977FA8, (uint64_t)&v62).n128_u64[0];
  v77[0] = CFSTR("fTimewindowMsec");
  v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v62, v1));
  v78[0] = v61;
  v77[1] = CFSTR("fNumAdvsMaincoreElnaOn");
  v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD1(v62)));
  v78[1] = v60;
  v77[2] = CFSTR("fNumAdvsBeforeFilteringMaincoreElnaOn");
  v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD2(v62)));
  v78[2] = v59;
  v77[3] = CFSTR("fTotalScanningTimeMaincoreElnaOn");
  v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", HIDWORD(v62)));
  v78[3] = v58;
  v77[4] = CFSTR("fNumAdvsMaincoreElnaBypass");
  v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v63));
  v78[4] = v57;
  v77[5] = CFSTR("fNumAdvsBeforeFilteringMaincoreElnaBypass");
  v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD1(v63)));
  v78[5] = v56;
  v77[6] = CFSTR("fTotalScanningTimeMaincoreElnaBypass");
  v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD2(v63)));
  v78[6] = v55;
  v77[7] = CFSTR("fNumAdvsScancoreElnaOn");
  v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", HIDWORD(v63)));
  v78[7] = v54;
  v77[8] = CFSTR("fNumAdvsBeforeFilteringScancoreElnaOn");
  v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v64));
  v78[8] = v53;
  v77[9] = CFSTR("fTotalScanningTimeScancoreElnaOn");
  v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD1(v64)));
  v78[9] = v52;
  v77[10] = CFSTR("fNumAdvsScancoreElnaBypass");
  v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD2(v64)));
  v78[10] = v51;
  v77[11] = CFSTR("fNumAdvsBeforeFilteringScancoreElnaBypass");
  v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", HIDWORD(v64)));
  v78[11] = v50;
  v77[12] = CFSTR("fTotalScanningTimeScancoreElnaBypass");
  v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v65));
  v78[12] = v49;
  v77[13] = CFSTR("fNumRangeScanRequests");
  v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD1(v65)));
  v78[13] = v48;
  v77[14] = CFSTR("fNumPriorityCriticalScanRequests");
  v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD2(v65)));
  v78[14] = v47;
  v77[15] = CFSTR("fNumScanRequests");
  v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", HIDWORD(v65)));
  v78[15] = v46;
  v77[16] = CFSTR("fTotalTimeVeryHighPassiveInternal");
  v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v66));
  v78[16] = v45;
  v77[17] = CFSTR("fTotalTimeVeryHighPassiveExternal");
  v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD1(v66)));
  v78[17] = v44;
  v77[18] = CFSTR("fTotalTimeVeryHighPassiveCombined");
  v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD2(v66)));
  v78[18] = v43;
  v77[19] = CFSTR("fTotalTimeVeryHighActiveInternal");
  v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", HIDWORD(v66)));
  v78[19] = v42;
  v77[20] = CFSTR("fTotalTimeVeryHighActiveExternal");
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v67));
  v78[20] = v41;
  v77[21] = CFSTR("fTotalTimeVeryHighActiveCombined");
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD1(v67)));
  v78[21] = v40;
  v77[22] = CFSTR("fTotalTimeHighPassiveInternal");
  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD2(v67)));
  v78[22] = v39;
  v77[23] = CFSTR("fTotalTimeHighPassiveExternal");
  v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", HIDWORD(v67)));
  v78[23] = v38;
  v77[24] = CFSTR("fTotalTimeHighPassiveCombined");
  v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v68));
  v78[24] = v37;
  v77[25] = CFSTR("fTotalTimeHighActiveInternal");
  v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD1(v68)));
  v78[25] = v36;
  v77[26] = CFSTR("fTotalTimeHighActiveExternal");
  v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD2(v68)));
  v78[26] = v35;
  v77[27] = CFSTR("fTotalTimeHighActiveCombined");
  v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", HIDWORD(v68)));
  v78[27] = v34;
  v77[28] = CFSTR("fTotalTimeMediumHighPassiveInternal");
  v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v69));
  v78[28] = v33;
  v77[29] = CFSTR("fTotalTimeMediumHighPassiveExternal");
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD1(v69)));
  v78[29] = v32;
  v77[30] = CFSTR("fTotalTimeMediumHighPassiveCombined");
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD2(v69)));
  v78[30] = v31;
  v77[31] = CFSTR("fTotalTimeMediumHighActiveInternal");
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", HIDWORD(v69)));
  v78[31] = v30;
  v77[32] = CFSTR("fTotalTimeMediumHighActiveExternal");
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v70));
  v78[32] = v29;
  v77[33] = CFSTR("fTotalTimeMediumHighActiveCombined");
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD1(v70)));
  v78[33] = v28;
  v77[34] = CFSTR("fTotalTimeMediumPassiveInternal");
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD2(v70)));
  v78[34] = v27;
  v77[35] = CFSTR("fTotalTimeMediumPassiveExternal");
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", HIDWORD(v70)));
  v78[35] = v26;
  v77[36] = CFSTR("fTotalTimeMediumPassiveCombined");
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v71));
  v78[36] = v25;
  v77[37] = CFSTR("fTotalTimeMediumActiveInternal");
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD1(v71)));
  v78[37] = v24;
  v77[38] = CFSTR("fTotalTimeMediumActiveExternal");
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD2(v71)));
  v78[38] = v23;
  v77[39] = CFSTR("fTotalTimeMediumActiveCombined");
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", HIDWORD(v71)));
  v78[39] = v22;
  v77[40] = CFSTR("fTotalTimeMediumLowPassiveInternal");
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v72));
  v78[40] = v21;
  v77[41] = CFSTR("fTotalTimeMediumLowPassiveExternal");
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD1(v72)));
  v78[41] = v20;
  v77[42] = CFSTR("fTotalTimeMediumLowPassiveCombined");
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD2(v72)));
  v78[42] = v19;
  v77[43] = CFSTR("fTotalTimeMediumLowActiveInternal");
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", HIDWORD(v72)));
  v78[43] = v18;
  v77[44] = CFSTR("fTotalTimeMediumLowActiveExternal");
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v73));
  v78[44] = v17;
  v77[45] = CFSTR("fTotalTimeMediumLowActiveCombined");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v73));
  v78[45] = v16;
  v77[46] = CFSTR("fTotalTimeLowPassiveInternal");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD2(v73)));
  v78[46] = v15;
  v77[47] = CFSTR("fTotalTimeLowPassiveExternal");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", HIDWORD(v73)));
  v78[47] = v14;
  v77[48] = CFSTR("fTotalTimeLowPassiveCombined");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v74));
  v78[48] = v2;
  v77[49] = CFSTR("fTotalTimeLowActiveInternal");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD1(v74)));
  v78[49] = v3;
  v77[50] = CFSTR("fTotalTimeLowActiveExternal");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD2(v74)));
  v78[50] = v4;
  v77[51] = CFSTR("fTotalTimeLowActiveCombined");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", HIDWORD(v74)));
  v78[51] = v5;
  v77[52] = CFSTR("fTotalTimeVeryLowPassiveInternal");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v75));
  v78[52] = v6;
  v77[53] = CFSTR("fTotalTimeVeryLowPassiveExternal");
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD1(v75)));
  v78[53] = v7;
  v77[54] = CFSTR("fTotalTimeVeryLowPassiveCombined");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", DWORD2(v75)));
  v78[54] = v8;
  v77[55] = CFSTR("fTotalTimeVeryLowActiveInternal");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", HIDWORD(v75)));
  v78[55] = v9;
  v77[56] = CFSTR("fTotalTimeVeryLowActiveExternal");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v76));
  v78[56] = v10;
  v77[57] = CFSTR("fTotalTimeVeryLowActiveCombined");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v76));
  v78[57] = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v78, v77, 58));

  sub_100015CC8(a1, 0x5Eu, v12);
}

void sub_10038AC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  void *v58;

  _Unwind_Resume(a1);
}

uint64_t sub_10038AFBC(uint64_t a1)
{
  return sub_10038AFC4(*(_QWORD *)(a1 + 32));
}

uint64_t sub_10038AFC4(uint64_t a1)
{
  NSObject *v2;
  id v3;
  unsigned __int16 v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  unsigned __int16 v9;
  id v10;
  id v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *i;
  uint64_t v18;
  void *v19;
  _BOOL4 v20;
  void *v21;
  void *v22;
  unsigned int v23;
  void *v24;
  void *v25;
  double v26;
  NSObject *v27;
  void *v28;
  void *v29;
  unsigned int v30;
  double v31;
  void *v32;
  void *v33;
  unsigned int v34;
  double v35;
  void *v36;
  void *v37;
  double v38;
  double v39;
  int v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  unsigned __int16 *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  unsigned int v66;
  void *v67;
  unsigned int v68;
  void *v69;
  unsigned int v70;
  void *v71;
  void *v72;
  void *v73;
  id v74;
  int v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  unsigned int v81;
  void *v82;
  void *v83;
  void *v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  int v113;
  void *v114;
  void *v115;
  unsigned int v116;
  void *v117;
  unsigned __int16 v118;
  void *v119;
  unsigned int *v120;
  unsigned __int16 v121;
  void *v122;
  unsigned int obj;
  id obja;
  id objb;
  unsigned __int16 v126;
  void *v127;
  void *v128;
  uint64_t v129;
  unsigned __int16 v130;
  void *v131;
  void *v132;
  id v133;
  unsigned __int16 v134;
  void *v135;
  void *v136;
  id v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  _QWORD block[5];
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint8_t v148;
  char v149[15];
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint8_t buf[8];
  uint64_t v159;
  _BYTE v160[128];
  _QWORD v161[17];
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  void *v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  _QWORD v179[29];
  _QWORD v180[29];
  _BYTE v181[128];
  _BYTE v182[128];
  _BYTE v183[128];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending all day BT metrics to CoreAnalytics", buf, 2u);
  }
  v159 = 0;
  *(_QWORD *)buf = 0;
  v138 = a1;
  sub_10003415C((uint64_t)buf, a1 + 176);
  v156 = 0u;
  v157 = 0u;
  v154 = 0u;
  v155 = 0u;
  v3 = *(id *)(a1 + 304);
  v4 = 0;
  v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v154, v183, 16);
  if (v5)
  {
    v118 = 0;
    v6 = *(_QWORD *)v155;
    do
    {
      v7 = 0;
      v118 += (unsigned __int16)v5;
      do
      {
        if (*(_QWORD *)v155 != v6)
          objc_enumerationMutation(v3);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v138 + 304), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v154 + 1) + 8 * (_QWORD)v7)));
        v9 = (unsigned __int16)objc_msgSend(v8, "isEqual:", &__kCFBooleanTrue);

        v4 += v9;
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v154, v183, 16);
    }
    while (v5);
  }
  else
  {
    v118 = 0;
  }

  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  v10 = *(id *)(v138 + 312);
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v150, v182, 16);
  if (!v11)
  {
    v134 = 0;
    v130 = 0;
    v126 = 0;
    v121 = 0;
    v13 = 0.0;
    v14 = 0.0;
    v15 = 0.0;
    v16 = 0.0;
    goto LABEL_32;
  }
  v134 = 0;
  v130 = 0;
  v126 = 0;
  v121 = 0;
  v12 = *(_QWORD *)v151;
  v13 = 0.0;
  v14 = 0.0;
  v15 = 0.0;
  v16 = 0.0;
  do
  {
    for (i = 0; i != v11; i = (char *)i + 1)
    {
      if (*(_QWORD *)v151 != v12)
        objc_enumerationMutation(v10);
      v18 = *(_QWORD *)(*((_QWORD *)&v150 + 1) + 8 * (_QWORD)i);
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v138 + 312), "objectForKeyedSubscript:", v18));
      v20 = (unint64_t)objc_msgSend(v19, "count") > 1;

      if (v20)
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v138 + 312), "objectForKeyedSubscript:", v18));
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectAtIndexedSubscript:", 0));
        v23 = objc_msgSend(v22, "isEqualToString:", CFSTR("isAppleDevice"));

        if (v23)
        {
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v138 + 312), "objectForKeyedSubscript:", v18));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectAtIndexedSubscript:", 1));
          objc_msgSend(v25, "doubleValue");
          ++v130;
          v13 = v13 + v26;
          goto LABEL_26;
        }
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v138 + 312), "objectForKeyedSubscript:", v18));
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "objectAtIndexedSubscript:", 0));
        v30 = objc_msgSend(v29, "isEqualToString:", CFSTR("BTResourceManagerconnectionUseCaseDigitalCarKey"));

        if (v30)
        {
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v138 + 312), "objectForKeyedSubscript:", v18));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectAtIndexedSubscript:", 1));
          objc_msgSend(v25, "doubleValue");
          ++v126;
          v14 = v14 + v31;
          goto LABEL_26;
        }
        v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v138 + 312), "objectForKeyedSubscript:", v18));
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectAtIndexedSubscript:", 0));
        v34 = objc_msgSend(v33, "isEqualToString:", CFSTR("BTResourceManagerconnectionUseCaseThirdPartyApp"));

        if (v34)
        {
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v138 + 312), "objectForKeyedSubscript:", v18));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectAtIndexedSubscript:", 1));
          objc_msgSend(v25, "doubleValue");
          ++v121;
          v15 = v15 + v35;
LABEL_26:

        }
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v138 + 312), "objectForKeyedSubscript:", v18));
        v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectAtIndexedSubscript:", 1));
        objc_msgSend(v37, "doubleValue");
        v39 = v38;

        ++v134;
        v16 = v16 + v39;
        continue;
      }
      v27 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E3C18(&v148, v149, v27);
    }
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v150, v182, 16);
  }
  while (v11);
LABEL_32:

  sub_100034264((uint64_t)buf);
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_10092A610);
  v40 = sub_10002527C((uint64_t)off_100978128);
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v138 + 368), "allKeys"));
  v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v144, v181, 16);
  v113 = v40;
  v43 = 0;
  v44 = 0;
  if (!v42)
  {
    obj = 0;
    v116 = 0;
    goto LABEL_52;
  }
  obj = 0;
  v116 = 0;
  v45 = *(_QWORD *)v145;
  while (2)
  {
    v46 = 0;
    while (2)
    {
      if (*(_QWORD *)v145 != v45)
        objc_enumerationMutation(v41);
      v47 = *(void **)(*((_QWORD *)&v144 + 1) + 8 * v46);
      if (objc_msgSend(v47, "isEqualToString:", CFSTR("A1603")))
      {
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v138 + 368), "objectForKeyedSubscript:", v47));
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "objectAtIndexedSubscript:", 0));
        v43 = objc_msgSend(v49, "unsignedIntValue");
        goto LABEL_47;
      }
      if (objc_msgSend(v47, "isEqualToString:", CFSTR("A2051")))
      {
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v138 + 368), "objectForKeyedSubscript:", v47));
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "objectAtIndexedSubscript:", 0));
        v44 = objc_msgSend(v49, "unsignedIntValue");
        goto LABEL_47;
      }
      if (objc_msgSend(v47, "isEqualToString:", CFSTR("A3085")))
      {
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v138 + 368), "objectForKeyedSubscript:", v47));
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "objectAtIndexedSubscript:", 0));
        obj = objc_msgSend(v49, "unsignedIntValue");
        goto LABEL_47;
      }
      if (objc_msgSend(v47, "isEqualToString:", CFSTR("A2538")))
      {
        v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v138 + 368), "objectForKeyedSubscript:", v47));
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "objectAtIndexedSubscript:", 0));
        v116 = objc_msgSend(v49, "unsignedIntValue");
LABEL_47:

      }
      if (v42 != (id)++v46)
        continue;
      break;
    }
    v42 = objc_msgSend(v41, "countByEnumeratingWithState:objects:count:", &v144, v181, 16);
    if (v42)
      continue;
    break;
  }
LABEL_52:

  v179[0] = CFSTR("NumberOfA2DPSessionPerDay");
  v50 = (unsigned __int16 *)v138;
  v111 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(v138 + 134)));
  v180[0] = v111;
  v179[1] = CFSTR("NumberOfAppleLEPencilPairedDeviceCount");
  v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(v138 + 568)));
  v180[1] = v109;
  v179[2] = CFSTR("NumberOfAppleLEPencilSessionPerDay");
  v107 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", (_DWORD)v44 + (_DWORD)v43 + obj + v116));
  v180[2] = v107;
  v179[3] = CFSTR("NumberOfClassicLocalPairedDeviceCount");
  v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v50[280] - v50[282]));
  v180[3] = v106;
  v179[4] = CFSTR("NumberOfHFPSessionPerDay");
  v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(v138 + 136)));
  v180[4] = v105;
  v179[5] = CFSTR("NumberOfLECloudPairedDeviceCount");
  v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(v138 + 566)));
  v180[5] = v104;
  v179[6] = CFSTR("NumberOfLELocalPairedDeviceCount");
  v103 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v50[281] - v50[283]));
  v180[6] = v103;
  v179[7] = CFSTR("NumberOfLEPairedDeviceCount");
  v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(v138 + 562)));
  v180[7] = v102;
  v179[8] = CFSTR("NumberOfMagicPairedDeviceCount");
  v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(v138 + 564)));
  v180[8] = v101;
  v179[9] = CFSTR("NumberOfPairedDeviceCount");
  v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(v138 + 560)));
  v180[9] = v100;
  v179[10] = CFSTR("NumberCTKDPairedDeviceCount");
  v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(v138 + 570)));
  v180[10] = v99;
  v179[11] = CFSTR("MaxClassicDeviceCount");
  v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v118));
  v180[11] = v98;
  v179[12] = CFSTR("MaxAppleClassicDeviceCount");
  v97 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v4));
  v180[12] = v97;
  v179[13] = CFSTR("MaxLEDeviceCount");
  v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v134));
  v180[13] = v96;
  v179[14] = CFSTR("MaxLEThirdPartyDeviceCount");
  v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v121));
  v180[14] = v95;
  v179[15] = CFSTR("MaxCarKeyDeviceCount");
  v127 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v126));
  v180[15] = v127;
  v179[16] = CFSTR("MaxAppleLEDeviceCount");
  v131 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v130));
  v180[16] = v131;
  v179[17] = CFSTR("PowerState");
  v114 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v113 == 1));
  v180[17] = v114;
  v179[18] = CFSTR("TotalNumberOfDeviceCount");
  v135 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v134 + v118));
  v180[18] = v135;
  v179[19] = CFSTR("TotalAppleLESessionDurationInSec");
  v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v13));
  v180[19] = v119;
  v179[20] = CFSTR("TotalCarKeyDeviceDurationInSec");
  v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v14));
  v180[20] = v51;
  v179[21] = CFSTR("TotalLEDeviceDurationInSec");
  v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v16));
  v180[21] = v52;
  v179[22] = CFSTR("TotalLEThirdPartyAppSessionDurationInSec");
  v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v15));
  v180[22] = v53;
  v179[23] = CFSTR("ClassicReadDeviceNameFromFlashSuccessDailyCount");
  v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v138 + 600)));
  v180[23] = v54;
  v179[24] = CFSTR("ClassicReadDeviceNameFromFlashFailureDailyCount");
  v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v138 + 596)));
  v180[24] = v55;
  v179[25] = CFSTR("NumberOfApplePencilV1ConnectionsCount");
  v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v43));
  v180[25] = v56;
  v179[26] = CFSTR("NumberOfApplePencilV2ConnectionsCount");
  v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v44));
  v180[26] = v57;
  v179[27] = CFSTR("NumberOfApplePencilV3ConnectionsCount");
  v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", obj));
  v180[27] = v58;
  v179[28] = CFSTR("NumberOfApplePencilV4ConnectionsCount");
  v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v116));
  v180[28] = v59;
  v122 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v180, v179, 29));

  v60 = v138;
  sub_100015CC8(v138, 0x47u, v122);
  v120 = (unsigned int *)(v138 + 104);
  if (*(_WORD *)(v138 + 116))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10038C888;
    block[3] = &unk_100917378;
    block[4] = v138;
    if (qword_100991F98 != -1)
      dispatch_once(&qword_100991F98, block);
    v161[0] = CFSTR("AutoDateTimeEnabled");
    v162 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v138 + 578)));
    v161[1] = CFSTR("AverageReferenceTimeDelta");
    v136 = (void *)v162;
    v163 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *v120));
    v161[2] = CFSTR("AverageReferenceTimeUncertainty");
    v132 = (void *)v163;
    v164 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v138 + 108)));
    v161[3] = CFSTR("AverageReferenceTimeReliability");
    v128 = (void *)v164;
    v165 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v138 + 112)));
    v161[4] = CFSTR("numberOfAuthAndIntegrityTagsProcessed");
    obja = (id)v165;
    v117 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(v138 + 116)));
    v166 = v117;
    v161[5] = CFSTR("numberOfAuthAndIntegrityTagsResolved");
    v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(v138 + 118)));
    v167 = v115;
    v161[6] = CFSTR("NumberOfAuthTagsResolvedAndIntegrityNotResolved");
    v112 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(v138 + 120)));
    v168 = v112;
    v161[7] = CFSTR("NumberOfResolvedAuthTagsDecryptionFailed");
    v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(v138 + 122)));
    v169 = v110;
    v161[8] = CFSTR("NumberOfResolvedAuthIntegrityTagsCurrentWindow");
    v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(v138 + 124)));
    v170 = v108;
    v161[9] = CFSTR("NumberOfResolvedAuthIntegrityTagsPreviousWindow");
    v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(v138 + 126)));
    v171 = v61;
    v161[10] = CFSTR("NumberOfResolvedAuthIntegrityTagsNextWindow");
    v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(v138 + 128)));
    v172 = v62;
    v161[11] = CFSTR("percentageOfAuthAndIntegrityTagsResolved");
    v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)(*(unsigned __int16 *)(v138 + 118) / *(unsigned __int16 *)(v138 + 116))* 100.0));
    v173 = v63;
    v161[12] = CFSTR("percentageOfAuthTagsResolvedAndIntegrityNotResolved");
    v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)(*(unsigned __int16 *)(v138 + 120) / *(unsigned __int16 *)(v138 + 116))* 100.0));
    v174 = v64;
    v161[13] = CFSTR("percentageOfResolvedAuthTagsDecryptionFailed");
    v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)(*(unsigned __int16 *)(v138 + 122) / *(unsigned __int16 *)(v138 + 116))* 100.0));
    v175 = v65;
    v161[14] = CFSTR("percentageOfResolvedAuthIntegrityTagsCurrentWindow");
    v66 = *(unsigned __int16 *)(v138 + 118);
    if (*(_WORD *)(v138 + 118))
      v66 = *(unsigned __int16 *)(v138 + 124) / v66;
    v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)(int)v66 * 100.0));
    v176 = v67;
    v161[15] = CFSTR("percentageOfResolvedAuthIntegrityTagsPreviousWindow");
    v68 = *(unsigned __int16 *)(v138 + 118);
    if (*(_WORD *)(v138 + 118))
      v68 = *(unsigned __int16 *)(v138 + 126) / v68;
    v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)(int)v68 * 100.0));
    v177 = v69;
    v161[16] = CFSTR("percentageOfResolvedAuthIntegrityTagsNextWindow");
    v70 = *(unsigned __int16 *)(v138 + 118);
    if (*(_WORD *)(v138 + 118))
      v70 = *(unsigned __int16 *)(v138 + 128) / v70;
    v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", (double)(int)v70 * 100.0));
    v178 = v71;
    v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v162, v161, 17));

    sub_100015CC8(v138, 0x3Fu, v72);
    v60 = v138;
  }
  v137 = objc_alloc_init((Class)NSMutableDictionary);
  v141 = 0u;
  v142 = 0u;
  v139 = 0u;
  v140 = 0u;
  v73 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v60 + 336), "allKeys"));
  objb = v73;
  v74 = objc_msgSend(v73, "countByEnumeratingWithState:objects:count:", &v139, v160, 16);
  if (v74)
  {
    v75 = 0;
    LODWORD(v76) = 0;
    v129 = *(_QWORD *)v140;
    do
    {
      v77 = 0;
      v133 = v74;
      do
      {
        if (*(_QWORD *)v140 != v129)
          objc_enumerationMutation(objb);
        v78 = *(_QWORD *)(*((_QWORD *)&v139 + 1) + 8 * (_QWORD)v77);
        objc_msgSend(v137, "setObject:forKeyedSubscript:", v78, CFSTR("ServiceType"));
        v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v138 + 336), "objectForKeyedSubscript:", v78));
        v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v79, "objectAtIndexedSubscript:", 0));
        v81 = objc_msgSend(v80, "unsignedIntValue");
        v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v138 + 336), "objectForKeyedSubscript:", v78));
        v83 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v82, "objectAtIndexedSubscript:", 1));
        v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 100 * v81 / objc_msgSend(v83, "unsignedIntValue")));
        objc_msgSend(v137, "setObject:forKeyedSubscript:", v84, CFSTR("ConnectionSuccessPercentagePerDay"));

        v85 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v138 + 336), "objectForKeyedSubscript:", v78));
        v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v85, "objectAtIndexedSubscript:", 1));
        objc_msgSend(v137, "setObject:forKeyedSubscript:", v86, CFSTR("TotalConnectionPerDay"));

        v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v138 + 336), "objectForKeyedSubscript:", v78));
        v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v87, "objectAtIndexedSubscript:", 0));
        LODWORD(v85) = objc_msgSend(v88, "unsignedIntValue");

        v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v138 + 336), "objectForKeyedSubscript:", v78));
        v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "objectAtIndexedSubscript:", 1));
        LODWORD(v88) = objc_msgSend(v90, "unsignedIntValue");

        sub_100015CC8(v138, 0x73u, v137);
        v75 += v85;
        v76 = ((_DWORD)v88 + v76);
        v77 = (char *)v77 + 1;
      }
      while (v133 != v77);
      v74 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v139, v160, 16);
    }
    while (v74);

    v91 = v138;
    if ((_DWORD)v76)
    {
      objc_msgSend(v137, "setObject:forKeyedSubscript:", CFSTR("Overall"), CFSTR("ServiceType"));
      v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 100 * v75 / v76));
      objc_msgSend(v137, "setObject:forKeyedSubscript:", v92, CFSTR("ConnectionSuccessPercentagePerDay"));

      v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v76));
      objc_msgSend(v137, "setObject:forKeyedSubscript:", v93, CFSTR("TotalConnectionPerDay"));

      v91 = v138;
      sub_100015CC8(v138, 0x73u, v137);
    }
  }
  else
  {

    v91 = v138;
  }
  *(_QWORD *)v120 = 0;
  *(_QWORD *)(v138 + 112) = 0;
  *(_DWORD *)(v138 + 128) = 0;
  *(_QWORD *)(v138 + 120) = 0;
  *(_DWORD *)(v91 + 132) = 0;
  *(_WORD *)(v91 + 136) = 0;
  objc_msgSend(*(id *)(v91 + 304), "removeAllObjects");
  objc_msgSend(*(id *)(v91 + 312), "removeAllObjects");
  objc_msgSend(*(id *)(v91 + 328), "removeAllObjects");
  objc_msgSend(*(id *)(v91 + 336), "removeAllObjects");
  objc_msgSend(*(id *)(v91 + 344), "removeAllObjects");
  objc_msgSend(*(id *)(v91 + 368), "removeAllObjects");
  objc_msgSend(*(id *)(v91 + 376), "removeAllObjects");
  *(_QWORD *)(v91 + 596) = 0;

  return sub_100034234((uint64_t)buf);
}

void sub_10038C37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  void *v31;

  sub_100034234((uint64_t)&STACK[0x200]);
  _Unwind_Resume(a1);
}

uint64_t sub_10038C888(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 578) = TMIsAutomaticTimeEnabled() != 0;
  return sub_10035BAA4(v1);
}

void sub_10038C8B8(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  __n128 v21;
  uint8_t buf[4];
  void *v23;
  _QWORD v24[5];
  _QWORD v25[5];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(v2 + 472);
  v4 = (_QWORD *)(v2 + 480);
  if (v3 != (_QWORD *)(v2 + 480))
  {
    a2.n128_u64[0] = 138412290;
    v21 = a2;
    do
    {
      v5 = *((unsigned __int8 *)v3 + 40);
      v6 = *((unsigned __int8 *)v3 + 41);
      v24[0] = CFSTR("NearbyActionType");
      v7 = *((char *)v3 + 32);
      v8 = "?";
      if (v7 <= 0x55)
        v8 = off_10092AB38[v7];
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8, *(_OWORD *)&v21));
      v25[0] = v9;
      v24[1] = CFSTR("NearbyActionTypeFlags");
      v10 = CUPrintFlags32(v5, &unk_10073F143);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v25[1] = v11;
      v24[2] = CFSTR("NearbyActionTypeFlags2");
      v12 = CUPrintFlags32((v6 << 8), &unk_10073F143);
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      v25[2] = v13;
      v24[3] = CFSTR("NearbyActionTypeCounter");
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v3[6]));
      v25[3] = v14;
      v24[4] = CFSTR("NearbyActionTypeDuration");
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v3[7]));
      v25[4] = v15;
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v25, v24, 5));

      v17 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = v21.n128_u32[0];
        v23 = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "sending NearbyActionDailyStats : %@", buf, 0xCu);
      }
      sub_100015CC8(v2, 0x6Fu, v16);

      v18 = (_QWORD *)v3[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v3[2];
          v20 = *v19 == (_QWORD)v3;
          v3 = v19;
        }
        while (!v20);
      }
      v3 = v19;
    }
    while (v19 != v4);
  }
  sub_10001A82C(v2 + 472, *(_QWORD **)(v2 + 480));
  *(_QWORD *)(v2 + 480) = 0;
  *(_QWORD *)(v2 + 488) = 0;
  *(_QWORD *)(v2 + 472) = v4;
}

void sub_10038CB0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10038CB60(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  NSObject *v4;
  int v5;
  void *v6;
  const __CFString *v7;
  void *v8;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 584))
  {
    v7 = CFSTR("T26FindingSessionDailyCount");
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:"));
    v8 = v2;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));

    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      v5 = 138412290;
      v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "sending T26FindingSessionDailyCount: %@", (uint8_t *)&v5, 0xCu);
    }
    sub_100015CC8(v1, 0x75u, v3);
    *(_QWORD *)(v1 + 584) = 0;

  }
}

void sub_10038CC70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10038CC94(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  double v6;
  void *v7;
  double v8;
  void *v9;
  double v10;
  void *v11;
  void *v12;
  NSObject *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  __n128 v17;
  uint8_t buf[4];
  void *v19;
  _QWORD v20[4];
  _QWORD v21[4];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(v2 + 496);
  v4 = (_QWORD *)(v2 + 504);
  if (v3 != (_QWORD *)(v2 + 504))
  {
    a2.n128_u64[0] = 138412290;
    v17 = a2;
    do
    {
      v20[0] = CFSTR("RefHour");
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)v3 + 28), *(_OWORD *)&v17));
      v21[0] = v5;
      v20[1] = CFSTR("Duration");
      LODWORD(v6) = *((_DWORD *)v3 + 8);
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6));
      v21[1] = v7;
      v20[2] = CFSTR("RSSI");
      LODWORD(v8) = *((_DWORD *)v3 + 9);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v8));
      v21[2] = v9;
      v20[3] = CFSTR("MPS");
      LODWORD(v10) = *((_DWORD *)v3 + 10);
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v10));
      v21[3] = v11;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v21, v20, 4));

      v13 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = v17.n128_u32[0];
        v19 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "sending NearbyActionInfoV2DensityDailyStats : %@", buf, 0xCu);
      }
      sub_100015CC8(v2, 0x70u, v12);

      v14 = (_QWORD *)v3[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v3[2];
          v16 = *v15 == (_QWORD)v3;
          v3 = v15;
        }
        while (!v16);
      }
      v3 = v15;
    }
    while (v15 != v4);
  }
  sub_10001A82C(v2 + 496, *(_QWORD **)(v2 + 504));
  *(_QWORD *)(v2 + 504) = 0;
  *(_QWORD *)(v2 + 512) = 0;
  *(_QWORD *)(v2 + 496) = v4;
}

void sub_10038CE94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10038CEDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  NSObject *v5;
  int v6;
  void *v7;
  const __CFString *v8;
  void *v9;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 2376))(v2) && *(_QWORD *)(v1 + 520))
  {
    v8 = CFSTR("AOPBTPrecisionFindingKeysCount");
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:"));
    v9 = v3;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));

    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      v6 = 138412290;
      v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "sending AOPBTPrecisionFindingKeysUsage : %@", (uint8_t *)&v6, 0xCu);
    }
    sub_100015CC8(v1, 0x3Cu, v4);
    *(_QWORD *)(v1 + 520) = 0;

  }
}

void sub_10038D000(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10038D024(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  NSObject *v4;
  int v5;
  void *v6;
  const __CFString *v7;
  void *v8;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_WORD *)(v1 + 592))
  {
    v7 = CFSTR("GATTDiscoverServiceWithUUIDCacheMissDailyCount");
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:"));
    v8 = v2;
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));

    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "sending GattDailyStats : %@", (uint8_t *)&v5, 0xCu);
    }
    sub_100015CC8(v1, 0x52u, v3);
    *(_WORD *)(v1 + 592) = 0;

  }
}

void sub_10038D134(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10038D158(uint64_t a1)
{
  unsigned int *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _OWORD __s1[3];
  uint8_t buf[4];
  void *v18;
  _QWORD v19[12];
  _QWORD v20[12];

  v1 = *(unsigned int **)(a1 + 32);
  memset(__s1, 0, sizeof(__s1));
  if (memcmp(__s1, v1 + 172, 0x30uLL))
  {
    v19[0] = CFSTR("TotalWildReports");
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[172]));
    v20[0] = v15;
    v19[1] = CFSTR("TotalNearOwnerReports");
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[173]));
    v20[1] = v14;
    v19[2] = CFSTR("TotalType18NearOwner");
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[174]));
    v20[2] = v13;
    v19[3] = CFSTR("TotalPoshNearOwnerApple");
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[175]));
    v20[3] = v12;
    v19[4] = CFSTR("TotalPoshNearOwnerNonApple");
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[176]));
    v20[4] = v11;
    v19[5] = CFSTR("TotalType18Wild");
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[177]));
    v20[5] = v2;
    v19[6] = CFSTR("TotalPoshWildApple");
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[178]));
    v20[6] = v3;
    v19[7] = CFSTR("TotalPoshWildNonApple");
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[179]));
    v20[7] = v4;
    v19[8] = CFSTR("TotalWildBufferReads");
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[180]));
    v20[8] = v5;
    v19[9] = CFSTR("TotalNearOwnerBufferReads");
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[181]));
    v20[9] = v6;
    v19[10] = CFSTR("MaxWildBufferReports");
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[182]));
    v20[10] = v7;
    v19[11] = CFSTR("MaxNearOwnerBufferReports");
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v1[183]));
    v20[11] = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 12));

    v10 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "sending AdvBufferFindMyDailyMetric : %@", buf, 0xCu);
    }
    sub_100015CC8((uint64_t)v1, 0x7Au, v9);
    *((_OWORD *)v1 + 44) = 0u;
    *((_OWORD *)v1 + 45) = 0u;
    *((_OWORD *)v1 + 43) = 0u;

  }
}

void sub_10038D478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10038D534(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  unint64_t v10;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint8_t buf[4];
  void *v30;
  _QWORD v31[15];
  _QWORD v32[15];
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  _DWORD v36[5];

  v1 = 0;
  v2 = 0;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = (unsigned int *)(v3 + 736);
  v5 = *(_DWORD *)(v3 + 736);
  v36[0] = v5 >> 1;
  v36[1] = (3 * v5) >> 2;
  v36[2] = 9 * v5 / 0xA;
  v36[3] = 19 * v5 / 0x14;
  v36[4] = 99 * v5 / 0x64;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v6 = *(_DWORD *)(v3 + 752);
  do
  {
    v7 = v36[v1];
    if (v7 > v6 && v2 <= 4)
    {
      v9 = 0;
      do
      {
        v10 = v2 + v9;
        v6 += *(_DWORD *)(v3 + 756 + 4 * v2 + 4 * v9++);
      }
      while (v7 > v6 && v10 < 4);
      v2 = (v2 + v9);
    }
    *((_DWORD *)&v33 + v1++) = byte_10073F1BD[v2];
  }
  while (v1 != 5);
  v31[0] = CFSTR("AdvPayload_Average");
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v3 + 748)));
  v32[0] = v28;
  v31[1] = CFSTR("ADVPayload_Max");
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v3 + 740)));
  v32[1] = v27;
  v31[2] = CFSTR("ADVPayload_Min");
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v3 + 744)));
  v32[2] = v26;
  v31[3] = CFSTR("AverageAdvertismentsReceived");
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *v4));
  v32[3] = v25;
  v31[4] = CFSTR("NumberOfAdvMode00");
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v3 + 772)));
  v32[4] = v24;
  v31[5] = CFSTR("NumberOfAdvMode01");
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v3 + 776)));
  v32[5] = v23;
  v31[6] = CFSTR("NumberOfAdvMode10");
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v3 + 780)));
  v32[6] = v22;
  v31[7] = CFSTR("NumberOfDirectedAdv");
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v3 + 784)));
  v32[7] = v21;
  v31[8] = CFSTR("NumberOfLE1MAdv");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v3 + 788)));
  v32[8] = v12;
  v31[9] = CFSTR("NumberOfLE2MAdv");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v3 + 792)));
  v32[9] = v13;
  v31[10] = CFSTR("AdvPayload_Median");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v33));
  v32[10] = v14;
  v31[11] = CFSTR("AdvPayload_P75");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v33)));
  v32[11] = v15;
  v31[12] = CFSTR("AdvPayload_P90");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v34));
  v32[12] = v16;
  v31[13] = CFSTR("AdvPayload_P95");
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v34)));
  v32[13] = v17;
  v31[14] = CFSTR("AdvPayload_P99");
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v35));
  v32[14] = v18;
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v32, v31, 15));

  v20 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v30 = v19;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "sending ExtAdvDailyMetric : %@", buf, 0xCu);
  }
  sub_100015CC8(v3, 0x7Bu, v19);
  *(_OWORD *)(v3 + 780) = 0u;
  *(_OWORD *)(v3 + 752) = 0u;
  *(_OWORD *)(v3 + 768) = 0u;
  *(_OWORD *)v4 = 0u;

}

void sub_10038D988(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10038DA74(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, unsigned int a5, uint8x8_t a6, uint8x8_t a7)
{
  const __CFString *v9;
  unint64_t v10;
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSNumber *v21;
  NSNumber *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  char v36;
  int16x4_t v37;
  int16x4_t v38;
  int16x4_t v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int16x4_t v44;
  char v45;
  unsigned __int8 v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned __int8 v51;
  char v52;
  int8x8_t v53;
  int8x8_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  char v61;
  char v62;
  char v63;
  char v64;
  int v65;
  char v66;
  int v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  unsigned int v120;
  void *v121;
  unsigned int v122;
  void *v123;
  void *v124;
  int8x8_t v126;
  void *v127;
  _QWORD v128[4];
  id v129;
  _QWORD v130[65];
  _QWORD v131[65];

  if (a3 == 2)
    v9 = CFSTR("Anomaly");
  else
    v9 = CFSTR("Normal");
  v10 = *((char *)a2 + 70);
  if (v10 > 0xC)
    v11 = CFSTR("NA");
  else
    v11 = (const __CFString *)*((_QWORD *)&off_10092ADE8 + v10);
  v12 = *(_QWORD *)(a1 + 664);
  if (!v12)
    goto LABEL_18;
  v13 = a1 + 664;
  do
  {
    v14 = *(unsigned __int16 *)(v12 + 32);
    v15 = v14 >= a5;
    if (v14 >= a5)
      v16 = (uint64_t *)v12;
    else
      v16 = (uint64_t *)(v12 + 8);
    if (v15)
      v13 = v12;
    v12 = *v16;
  }
  while (*v16);
  if (v13 == a1 + 664 || *(unsigned __int16 *)(v13 + 32) > a5)
  {
LABEL_18:
    v17 = 0;
    v18 = 0;
    v122 = 0;
    v19 = 0;
    v120 = 0;
    v126 = 0;
    goto LABEL_19;
  }
  v34 = *(_BYTE *)(v13 + 184);
  v35 = *(_BYTE *)(v13 + 185);
  v36 = *(_BYTE *)(v13 + 264);
  a6.i32[0] = *(_DWORD *)(v13 + 191);
  v37 = (int16x4_t)vmovl_u8(a6).u64[0];
  a7.i32[0] = *(_DWORD *)(v13 + 271);
  v38 = (int16x4_t)vmovl_u8(a7).u64[0];
  v39 = (int16x4_t)vcgt_u16((uint16x4_t)v37, (uint16x4_t)v38);
  if ((v36 & 1) != 0 && (v34 & 1) != 0)
  {
    v17 = 2;
  }
  else if ((*(_BYTE *)(v13 + 264) & 1) == 0 || (v34 & 1) != 0)
  {
    v40 = v36 & 1;
    v41 = (v40 == 0) & v34;
    v42 = v41 | v40;
    if ((*(_BYTE *)(v13 + 184) & 1) != 0)
      v43 = 0;
    else
      v43 = 3;
    if (v42)
      v17 = v41;
    else
      v17 = v43;
  }
  else
  {
    v17 = 0;
  }
  v44 = (int16x4_t)vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)v39);
  v45 = *(_BYTE *)(v13 + 187);
  v46 = *(_BYTE *)(v13 + 186);
  if ((*(_BYTE *)(v13 + 265) & 1) != 0 && (v35 & 1) != 0)
  {
    v18 = 2;
  }
  else if ((*(_BYTE *)(v13 + 265) & 1) == 0 || (v35 & 1) != 0)
  {
    v47 = *(_BYTE *)(v13 + 265) & 1;
    v48 = (v47 == 0) & v35;
    v49 = v48 | v47;
    if ((*(_BYTE *)(v13 + 185) & 1) != 0)
      v50 = 0;
    else
      v50 = 3;
    if (v49)
      v18 = v48;
    else
      v18 = v50;
  }
  else
  {
    v18 = 0;
  }
  v51 = *(_BYTE *)(v13 + 189);
  v52 = *(_BYTE *)(v13 + 267);
  v53 = (int8x8_t)vceq_s16(v37, v38);
  v54 = (int8x8_t)vsub_s16(v44, v39);
  if ((*(_BYTE *)(v13 + 266) & 1) != 0 && (v46 & 1) != 0)
  {
    v55 = 2;
  }
  else if ((*(_BYTE *)(v13 + 266) & 1) == 0 || (v46 & 1) != 0)
  {
    v56 = *(_BYTE *)(v13 + 266) & 1;
    v57 = (v56 == 0) & v46;
    v58 = v57 | v56;
    if ((*(_BYTE *)(v13 + 186) & 1) != 0)
      v59 = 0;
    else
      v59 = 3;
    if (v58)
      v55 = v57;
    else
      v55 = v59;
  }
  else
  {
    v55 = 0;
  }
  v60 = *(unsigned __int8 *)(v13 + 190);
  v61 = *(_BYTE *)(v13 + 188);
  v62 = *(_BYTE *)(v13 + 268);
  v63 = *(_BYTE *)(v13 + 269);
  v64 = *(_BYTE *)(v13 + 270);
  v122 = v55;
  v126 = vbic_s8(v54, v53);
  if ((v45 & 1) != 0 && (v52 & 1) != 0)
  {
    v19 = 2;
LABEL_71:
    if ((v61 & 1) != 0 && (v62 & 1) != 0)
    {
      v65 = 4;
    }
    else if ((v51 & 1) != 0 && (v63 & 1) != 0)
    {
      v65 = 5;
    }
    else if ((v60 & 1) != 0 && (v64 & 1) != 0)
    {
      v65 = 6;
    }
    else if ((v61 & 1) == 0 || (v62 & 1) != 0)
    {
      if ((v64 & 1) != 0)
        v67 = 0;
      else
        v67 = 9;
      v65 = (v60 << 31 >> 31) & v67;
      if ((v51 & ((v63 & 1) == 0)) != 0)
        v65 = 8;
    }
    else
    {
      v65 = 7;
    }
    goto LABEL_107;
  }
  if ((v45 & 1) == 0 || (v52 & 1) != 0)
  {
    v66 = v45 & 1;
    if ((v52 & 1) == 0)
      v66 = 1;
    if ((v45 & 1) != 0)
      v66 = 0;
    if ((v66 & ((v52 & 1) == 0)) != 0)
      v19 = 3;
    else
      v19 = 0;
    if ((v45 & 1) == 0)
    {
      v120 = 0;
      goto LABEL_19;
    }
    if ((v52 & 1) != 0)
      goto LABEL_71;
  }
  else
  {
    v19 = 1;
  }
  if ((v61 & 1) != 0)
  {
    v65 = 1;
  }
  else if ((v51 & 1) != 0)
  {
    v65 = 2;
  }
  else
  {
    v65 = (v60 << 31 >> 31) & 3;
  }
LABEL_107:
  v120 = v65;
LABEL_19:
  v20 = NSPrintF_safe("%u.%u.%u", BYTE1(a2[2]), a2[2] >> 4, a2[2] & 0xF);
  v124 = (void *)objc_claimAutoreleasedReturnValue(v20);
  v130[0] = CFSTR("AverageHIDLatencyInMSec");
  v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *((unsigned __int8 *)a2 + 69)));
  v131[0] = v119;
  v130[1] = CFSTR("DisconnectReason");
  v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[7]));
  v131[1] = v113;
  v130[2] = CFSTR("HIDType");
  v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a4));
  v131[2] = v115;
  v130[3] = CFSTR("IsA2DPStreaming");
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10092A4D0);
  v114 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)off_100977B38 + 197)));
  v131[3] = v114;
  v130[4] = CFSTR("IsDeviceStatisticEnabled");
  v116 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a2 + 12)));
  v131[4] = v116;
  v130[5] = CFSTR("IsHFPActive");
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10092A4D0);
  v117 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)off_100977B38 + 198)));
  v131[5] = v117;
  v130[6] = CFSTR("IsLEAStreaming");
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10092A4D0);
  v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)off_100977B38 + 199)));
  v131[6] = v118;
  v130[7] = CFSTR("NumberOfAppleMouseOrTrackpadConnected");
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092A470);
  v21 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", sub_100472980((uint64_t)off_1009778E0));
  v112 = (void *)objc_claimAutoreleasedReturnValue(v21);
  v131[7] = v112;
  v130[8] = CFSTR("NumberOfAppleKeyboardConnected");
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092A470);
  v22 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", sub_100472A84((uint64_t)off_1009778E0));
  v111 = (void *)objc_claimAutoreleasedReturnValue(v22);
  v131[8] = v111;
  v130[9] = CFSTR("PER");
  v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2[6]));
  v131[9] = v110;
  v130[10] = CFSTR("PID");
  v109 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *a2));
  v131[10] = v109;
  v130[11] = CFSTR("RSSI");
  v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2[5]));
  v131[11] = v108;
  v130[12] = CFSTR("VID");
  v106 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[1]));
  v131[12] = v106;
  v131[13] = v124;
  v130[13] = CFSTR("FWVersion");
  v130[14] = CFSTR("DSniffOffset");
  v105 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *((unsigned __int16 *)a2 + 16)));
  v131[14] = v105;
  v130[15] = CFSTR("StatisticsCollectedInSeconds");
  v104 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[9]));
  v131[15] = v104;
  v130[16] = CFSTR("SniffIntervalServiced");
  v103 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[10]));
  v131[16] = v103;
  v130[17] = CFSTR("SniffIntervalServicedPercentage");
  v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *((unsigned __int8 *)a2 + 44)));
  v131[17] = v102;
  v130[18] = CFSTR("SniffIntervalSkipped");
  v101 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[12]));
  v131[18] = v101;
  v130[19] = CFSTR("SniffIntervalSkippedPercentage");
  v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *((unsigned __int8 *)a2 + 52)));
  v131[19] = v100;
  v130[20] = CFSTR("CentralSkipDenials");
  v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[16]));
  v131[20] = v99;
  v130[21] = CFSTR("CentralSkipDenialsPercentage");
  v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *((unsigned __int8 *)a2 + 68)));
  v131[21] = v98;
  v130[22] = CFSTR("NoSync");
  v97 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[14]));
  v131[22] = v97;
  v130[23] = CFSTR("NoSyncPercentage");
  v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *((unsigned __int8 *)a2 + 60)));
  v131[23] = v96;
  v131[24] = v11;
  v130[24] = CFSTR("MaxHIDLatencyInMSec");
  v130[25] = CFSTR("TotalAnomaliesInBins");
  v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[4]));
  v131[25] = v95;
  v130[26] = CFSTR("SniffInterval_Bin_00_7.5ms");
  v94 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[18]));
  v131[26] = v94;
  v130[27] = CFSTR("SniffInterval_Bin_01_11.25ms");
  v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[19]));
  v131[27] = v93;
  v130[28] = CFSTR("SniffInterval_Bin_02_15ms");
  v92 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[20]));
  v131[28] = v92;
  v130[29] = CFSTR("SniffInterval_Bin_03_22.5ms");
  v91 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[21]));
  v131[29] = v91;
  v130[30] = CFSTR("SniffInterval_Bin_04_30ms");
  v90 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[22]));
  v131[30] = v90;
  v130[31] = CFSTR("SniffInterval_Bin_05_45ms");
  v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[23]));
  v131[31] = v89;
  v130[32] = CFSTR("SniffInterval_Bin_06_60ms");
  v88 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[24]));
  v131[32] = v88;
  v130[33] = CFSTR("SniffInterval_Bin_07_90ms");
  v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[25]));
  v131[33] = v87;
  v130[34] = CFSTR("SniffInterval_Bin_08_120ms");
  v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[26]));
  v131[34] = v86;
  v130[35] = CFSTR("SniffInterval_Bin_09_150ms");
  v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[27]));
  v131[35] = v85;
  v130[36] = CFSTR("SniffInterval_Bin_10_500ms");
  v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[28]));
  v131[36] = v84;
  v130[37] = CFSTR("SniffInterval_Bin_11_750ms");
  v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[29]));
  v131[37] = v83;
  v130[38] = CFSTR("SniffInterval_Bin_12_>750ms");
  v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[30]));
  v131[38] = v82;
  v131[39] = v9;
  v130[39] = CFSTR("TriggerReason");
  v130[40] = CFSTR("ConnectedClassicDevice");
  v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v126.u8[0]));
  v131[40] = v81;
  v130[41] = CFSTR("ConnectedClassicHIDDevice");
  v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v126.u8[2]));
  v131[41] = v80;
  v130[42] = CFSTR("ConnectedLEDevice");
  v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v126.u8[4]));
  v131[42] = v79;
  v130[43] = CFSTR("ConnectedLEHIDDevice");
  v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v126.u8[6]));
  v131[43] = v78;
  v130[44] = CFSTR("A2DPSessionState");
  v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v17));
  v131[44] = v77;
  v130[45] = CFSTR("HFPSessionState");
  v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v18));
  v131[45] = v76;
  v130[46] = CFSTR("LEASessionState");
  v123 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v122));
  v131[46] = v123;
  v130[47] = CFSTR("WiFiPowerState");
  v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v19));
  v131[47] = v75;
  v130[48] = CFSTR("WiFiOnWhichBand");
  v121 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v120));
  v131[48] = v121;
  v130[49] = CFSTR("NumberOfRSSIIncreasedBetween03To05dBm");
  v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[31]));
  v131[49] = v74;
  v130[50] = CFSTR("NumberOfRSSIIncreasedBetween06To10dBm");
  v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[32]));
  v131[50] = v73;
  v130[51] = CFSTR("NumberOfRSSIIncreasedBetween11To15dBm");
  v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[33]));
  v131[51] = v72;
  v130[52] = CFSTR("NumberOfRSSIIncreasedBetween16To20dBm");
  v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[34]));
  v131[52] = v71;
  v130[53] = CFSTR("NumberOfRSSIIncreasedBetween21To25dBm");
  v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[35]));
  v131[53] = v70;
  v130[54] = CFSTR("NumberOfRSSIIncreasedBetween26To30dBm");
  v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[36]));
  v131[54] = v69;
  v130[55] = CFSTR("NumberOfRSSIIncreasedMoreThan30dBm");
  v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[37]));
  v131[55] = v68;
  v130[56] = CFSTR("NumberOfRSSIDecreasedBetween03To05dBm");
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[38]));
  v131[56] = v23;
  v130[57] = CFSTR("NumberOfRSSIDecreasedBetween06To10dBm");
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[39]));
  v131[57] = v24;
  v130[58] = CFSTR("NumberOfRSSIDecreasedBetween11To15dBm");
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[40]));
  v131[58] = v25;
  v130[59] = CFSTR("NumberOfRSSIDecreasedBetween16To20dBm");
  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[41]));
  v131[59] = v26;
  v130[60] = CFSTR("NumberOfRSSIDecreasedBetween21To25dBm");
  v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[42]));
  v131[60] = v27;
  v130[61] = CFSTR("NumberOfRSSIDecreasedBetween26To30dBm");
  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[43]));
  v131[61] = v28;
  v130[62] = CFSTR("NumberOfRSSIDecreasedMoreThan30dBm");
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2[44]));
  v131[62] = v29;
  v130[63] = CFSTR("DeviceHighestRSSI");
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2[45]));
  v131[63] = v30;
  v130[64] = CFSTR("DeviceLowestRSSI");
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2[46]));
  v131[64] = v31;
  v127 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v131, v130, 65));

  sub_100015CC8(a1, 0x58u, v127);
  if (a3 == 2)
  {
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v127));
    objc_msgSend(v32, "setObject:forKeyedSubscript:", CFSTR("HIDLagDetected"), CFSTR("_input"));
    v128[0] = _NSConcreteStackBlock;
    v128[1] = 3221225472;
    v128[2] = sub_10038EEA8;
    v128[3] = &unk_10092A370;
    v129 = objc_alloc_init((Class)BTServicesClient);
    v33 = v129;
    objc_msgSend(v33, "diagnosticControl:completion:", v32, v128);

  }
}

void sub_10038EA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a67;
  void *a69;
  void *v69;
  void *v70;

  _Unwind_Resume(a1);
}

id sub_10038EEA8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

void sub_10038EEB0(uint64_t a1, double *a2)
{
  uint64_t *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;
  _QWORD v11[4];
  _QWORD v12[4];

  v12[0] = CFSTR("HIDIntervalUpdated");
  v11[0] = CFSTR("_input");
  v11[1] = CFSTR("DeviceName");
  v3 = (uint64_t *)a2;
  if (*((char *)a2 + 23) < 0)
    v3 = *(uint64_t **)a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3));
  v12[1] = v4;
  v11[2] = CFSTR("DeviceType");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)a2 + 24)));
  v12[2] = v5;
  v11[3] = CFSTR("Intervalms");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a2[4]));
  v12[3] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 4));

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10038F07C;
  v9[3] = &unk_10092A370;
  v10 = objc_alloc_init((Class)BTServicesClient);
  v8 = v10;
  objc_msgSend(v8, "diagnosticControl:completion:", v7, v9);

}

void sub_10038F028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

id sub_10038F07C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

unint64_t sub_10038F084(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  unint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;

  v2 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092A570);
  v3 = off_1009778C0;
  sub_100091AE8(v15, "A1603");
  if ((sub_10000628C((uint64_t)v3, v2, (uint64_t)v15) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092A570);
    v5 = off_1009778C0;
    sub_100091AE8(v13, "A2051");
    if ((sub_10000628C((uint64_t)v5, v2, (uint64_t)v13) & 1) != 0)
    {
      v4 = 1;
    }
    else
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10092A570);
      v6 = off_1009778C0;
      sub_100091AE8(v11, "A3085");
      if ((sub_10000628C((uint64_t)v6, v2, (uint64_t)v11) & 1) != 0)
      {
        v4 = 1;
      }
      else
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10092A570);
        v7 = off_1009778C0;
        sub_100091AE8(__p, "A2538");
        v4 = sub_10000628C((uint64_t)v7, v2, (uint64_t)__p);
        if (v10 < 0)
          operator delete(__p[0]);
      }
      if (v12 < 0)
        operator delete(v11[0]);
    }
    if (v14 < 0)
      operator delete(v13[0]);
  }
  if (v16 < 0)
    operator delete(v15[0]);

  return v4;
}

void sub_10038F24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  uint64_t v27;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v27 - 33) < 0)
    operator delete(*(void **)(v27 - 56));

  _Unwind_Resume(a1);
}

void sub_10038F2BC(uint64_t a1, void *a2)
{
  sub_100015CC8(a1, 0x56u, a2);
}

void sub_10038F2C8(uint64_t a1, __int16 a2)
{
  uint64_t v4;
  _QWORD v5[5];
  __int16 v6;

  v4 = sub_10006BBAC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10038F330;
  v5[3] = &unk_100920960;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_10038F330(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 528) = *(_BYTE *)(result + 40);
  return result;
}

void sub_10038F340(uint64_t a1, __int16 a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];
  __int16 v6;

  v3 = a1 - 40;
  v4 = sub_10006BBAC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10038F330;
  v5[3] = &unk_100920960;
  v5[4] = v3;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_10038F3A8(uint64_t a1, char a2, char a3, uint64_t a4, char a5, char a6, char a7)
{
  uint64_t v13;
  _QWORD v14[5];
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v13 = sub_10006BBAC();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10038F440;
  v14[3] = &unk_100926B98;
  v14[4] = a1;
  v15 = a3;
  v16 = a2;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  sub_100041A34(v13, v14);
}

uint64_t sub_10038F440(uint64_t result)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(result + 32);
  v1[530] = *(_BYTE *)(result + 40);
  v1[531] = *(_BYTE *)(result + 41);
  v1[532] = *(_BYTE *)(result + 42);
  v1[533] = *(_BYTE *)(result + 43);
  v1[534] = *(_BYTE *)(result + 44);
  return result;
}

void sub_10038F470(uint64_t a1, char a2, char a3, uint64_t a4, char a5, char a6, char a7)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v12 = a1 - 8;
  v13 = sub_10006BBAC();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10038F440;
  v14[3] = &unk_100926B98;
  v14[4] = v12;
  v15 = a3;
  v16 = a2;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  sub_100041A34(v13, v14);
}

void sub_10038F508(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10038F574;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100991FA0 != -1)
    dispatch_once(&qword_100991FA0, block);
}

void sub_10038F574(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1003635C8;
  v3[3] = &unk_100917378;
  v3[4] = v1;
  sub_100041A34(v2, v3);
}

void sub_10038F5D4(uint64_t a1)
{
  sub_10038F508(a1 - 48);
}

void sub_10038F5DC(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_10006BBAC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10038F63C;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

double sub_10038F63C(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 32);
  result = 0.0;
  *(_QWORD *)(v1 + 536) = 0;
  *(_DWORD *)(v1 + 528) = 0;
  return result;
}

void sub_10038F650(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];

  v1 = a1 - 48;
  v2 = sub_10006BBAC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10038F63C;
  v3[3] = &unk_100917378;
  v3[4] = v1;
  sub_100041A34(v2, v3);
}

void sub_10038F6B0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_10006BBAC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10038F710;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

double sub_10038F710(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 32);
  result = 0.0;
  *(_QWORD *)(v1 + 536) = 0;
  *(_DWORD *)(v1 + 528) = 0;
  return result;
}

void sub_10038F724(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];

  v1 = a1 - 48;
  v2 = sub_10006BBAC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10038F710;
  v3[3] = &unk_100917378;
  v3[4] = v1;
  sub_100041A34(v2, v3);
}

void sub_10038F784(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD v5[5];
  int v6;

  v4 = sub_10006BBAC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10038F7EC;
  v5[3] = &unk_1009173C0;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_10038F7EC(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 536) = *(_DWORD *)(result + 40);
  return result;
}

void sub_10038F7FC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];
  int v6;

  v3 = a1 - 32;
  v4 = sub_10006BBAC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10038F7EC;
  v5[3] = &unk_1009173C0;
  v5[4] = v3;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_10038F864(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD v5[5];
  int v6;

  v4 = sub_10006BBAC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10038F8CC;
  v5[3] = &unk_1009173C0;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_10038F8CC(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 32) + 540) = *(_DWORD *)(result + 40);
  return result;
}

void sub_10038F8DC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];
  int v6;

  v3 = a1 - 56;
  v4 = sub_10006BBAC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10038F8CC;
  v5[3] = &unk_1009173C0;
  v5[4] = v3;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_10038F944(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  _QWORD v6[5];
  int v7;

  v5 = sub_10006BBAC();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10038F9AC;
  v6[3] = &unk_1009173C0;
  v6[4] = a1;
  v7 = a3;
  sub_100041A34(v5, v6);
}

uint64_t sub_10038F9AC(uint64_t result)
{
  if (!*(_DWORD *)(result + 40))
    ++*(_BYTE *)(*(_QWORD *)(result + 32) + 529);
  return result;
}

void sub_10038F9CC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  _QWORD v6[5];
  int v7;

  v5 = sub_10006BBAC();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10038F9AC;
  v6[3] = &unk_1009173C0;
  v6[4] = a1 - 64;
  v7 = a3;
  sub_100041A34(v5, v6);
}

void sub_10038FA38(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_10006BBAC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10038FA98;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

uint64_t sub_10038FA98(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (*(_BYTE *)(v1 + 529))
    --*(_BYTE *)(v1 + 529);
  return result;
}

void sub_10038FAB0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_10006BBAC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10038FA98;
  v3[3] = &unk_100917378;
  v3[4] = a1 - 64;
  sub_100041A34(v2, v3);
}

void sub_10038FB14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v7[7];

  v6 = sub_10006BBAC();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10038FB88;
  v7[3] = &unk_1009210D8;
  v7[4] = a1;
  v7[5] = a2;
  v7[6] = a3;
  sub_100041A34(v6, v7);
}

__n128 sub_10038FB88(uint64_t a1)
{
  __n128 result;

  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(*(_QWORD *)(a1 + 32) + 544) = result;
  return result;
}

void sub_10038FB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10038FB14(a1 - 72, a2, a3);
}

_QWORD *sub_10038FBA0@<X0>(unsigned int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 0xC)
    v2 = "NA";
  else
    v2 = off_10092AE50[(char)a1];
  return sub_100091AE8(a2, v2);
}

double sub_10038FBCC(uint64_t a1, unsigned int a2)
{
  double result;

  result = 0.0;
  if (a2 <= 0xC)
    return dbl_10073F4C8[(char)a2];
  return result;
}

void sub_10038FBEC(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v6;
  _QWORD v7[6];
  __int16 v8;

  v6 = sub_10006BBAC();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10038FC60;
  v7[3] = &unk_1009186D0;
  v7[4] = a1;
  v7[5] = a2;
  v8 = a3;
  sub_100041A34(v6, v7);
}

uint64_t sub_10038FC60(uint64_t a1, uint64_t a2)
{
  return sub_10038FC70(*(_QWORD *)(a1 + 32), a2, *(unsigned __int16 *)(a1 + 48));
}

uint64_t sub_10038FC70(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  unsigned __int16 v10;

  v10 = a3;
  v3 = *(_QWORD *)(result + 664);
  if (v3)
  {
    v4 = result;
    result += 656;
    v5 = v4 + 664;
    v6 = v4 + 664;
    do
    {
      v7 = *(unsigned __int16 *)(v3 + 32);
      v8 = v7 >= a3;
      if (v7 >= a3)
        v9 = (uint64_t *)v3;
      else
        v9 = (uint64_t *)(v3 + 8);
      if (v8)
        v6 = v3;
      v3 = *v9;
    }
    while (*v9);
    if (v6 != v5 && *(unsigned __int16 *)(v6 + 32) <= a3)
      return sub_100394984(result, &v10);
  }
  return result;
}

void sub_10038FCDC(uint64_t a1, __int16 a2, uint64_t a3, char a4, __int16 a5)
{
  uint64_t v10;
  _QWORD v11[6];
  __int16 v12;
  __int16 v13;
  char v14;

  v10 = sub_10006BBAC();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10038FD68;
  v11[3] = &unk_1009226D0;
  v12 = a2;
  v11[4] = a1;
  v11[5] = a3;
  v14 = a4;
  v13 = a5;
  sub_100041A34(v10, v11);
}

double sub_10038FD68(uint64_t a1, uint8x8_t a2)
{
  return sub_10038FD80(*(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 48), *(uint64_t **)(a1 + 40), *(_BYTE *)(a1 + 52), *(_WORD *)(a1 + 50), a2);
}

double sub_10038FD80(uint64_t a1, unsigned int a2, uint64_t *a3, char a4, __int16 a5, uint8x8_t a6)
{
  __int16 v9;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  __int16 v17;
  char v18;
  char v19;
  int v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  uint64_t **v24;
  int16x8_t v25;
  double result;
  int16x8_t v27;
  uint8x8_t v28;
  __int16 v29;
  char v30;
  char v31;
  int v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  uint64_t **v36;
  int16x8_t v37;
  int16x4_t v38;
  int16x4_t v39;
  char v40;
  unsigned __int16 v41;
  unsigned __int16 *v42;
  __int128 v43;
  __int128 v44;
  int16x8_t v45[2];

  v9 = a2;
  v41 = a2;
  v11 = (uint64_t **)(a1 + 656);
  v12 = *(_QWORD *)(a1 + 664);
  if (!v12)
    goto LABEL_12;
  v13 = a1 + 664;
  do
  {
    v14 = *(unsigned __int16 *)(v12 + 32);
    v15 = v14 >= a2;
    if (v14 >= a2)
      v16 = (uint64_t *)v12;
    else
      v16 = (uint64_t *)(v12 + 8);
    if (v15)
      v13 = v12;
    v12 = *v16;
  }
  while (*v16);
  if (v13 != a1 + 664 && *(unsigned __int16 *)(v13 + 32) <= a2)
  {
    v27 = *(int16x8_t *)(v13 + 80);
    v44 = *(_OWORD *)(v13 + 64);
    v45[0] = v27;
    *(int16x8_t *)((char *)v45 + 9) = *(int16x8_t *)(v13 + 89);
    v40 = *(_BYTE *)(v13 + 195);
    v43 = *(_OWORD *)(v13 + 264);
    v28.i32[1] = DWORD1(v43);
    v29 = *(_WORD *)(a1 + 573);
    v30 = *(_BYTE *)(a1 + 576);
    v31 = *(_BYTE *)(a1 + 544);
    v32 = *(_DWORD *)(a1 + 548);
    v33 = v32 == 1;
    v34 = v32 == 2;
    v35 = v32 == 3;
    v42 = &v41;
    v28.i32[0] = *(_DWORD *)(a1 + 528);
    v38 = (int16x4_t)vmovl_u8(v28).u64[0];
    v36 = sub_1003949FC(v11, &v41, (uint64_t)&unk_100740F58, &v42);
    v36[6] = 0;
    v36[7] = 0;
    v36[5] = a3;
    v37 = v45[0];
    *((_OWORD *)v36 + 4) = v44;
    *((int16x8_t *)v36 + 5) = v37;
    *(int16x8_t *)((char *)v36 + 89) = *(int16x8_t *)((char *)v45 + 9);
    *((_BYTE *)v36 + 105) = a4;
    *((_WORD *)v36 + 53) = a5;
    *((_WORD *)v36 + 54) = v9;
    *(_OWORD *)((char *)v36 + 110) = 0u;
    *(_OWORD *)((char *)v36 + 126) = 0u;
    *(_OWORD *)((char *)v36 + 142) = 0u;
    *(_OWORD *)((char *)v36 + 158) = 0u;
    *(_OWORD *)(v36 + 21) = 0u;
    *((_WORD *)v36 + 92) = v29;
    *((_BYTE *)v36 + 186) = v30;
    *((_BYTE *)v36 + 187) = v31;
    *((_BYTE *)v36 + 188) = v33;
    *((_BYTE *)v36 + 189) = v34;
    *((_BYTE *)v36 + 190) = v35;
    *(int16x4_t *)v37.i8 = vzip1_s16(v38, (int16x4_t)vext_s8((int8x8_t)v38, (int8x8_t)vdup_lane_s16(v38, 2), 6uLL));
    *(_DWORD *)((char *)v36 + 191) = vmovn_s16(v37).u32[0];
    *((_BYTE *)v36 + 195) = v40;
    *((_OWORD *)v36 + 15) = 0u;
    *(_OWORD *)((char *)v36 + 228) = 0u;
    *(_OWORD *)((char *)v36 + 212) = 0u;
    *(_OWORD *)((char *)v36 + 196) = 0u;
    v36[32] = (uint64_t *)0x3E8FFFFFC18;
    result = *(double *)&v43;
    *(_OWORD *)(v36 + 33) = v43;
  }
  else
  {
LABEL_12:
    v17 = *(_WORD *)(a1 + 573);
    v18 = *(_BYTE *)(a1 + 576);
    v19 = *(_BYTE *)(a1 + 544);
    v20 = *(_DWORD *)(a1 + 548);
    v21 = v20 == 1;
    v22 = v20 == 2;
    v23 = v20 == 3;
    *(_QWORD *)&v44 = &v41;
    a6.i32[0] = *(_DWORD *)(a1 + 528);
    v39 = (int16x4_t)vmovl_u8(a6).u64[0];
    v24 = sub_1003949FC(v11, &v41, (uint64_t)&unk_100740F58, (_WORD **)&v44);
    v24[5] = a3;
    *((_OWORD *)v24 + 3) = 0u;
    *((_OWORD *)v24 + 4) = 0u;
    *((_OWORD *)v24 + 5) = 0u;
    *(_OWORD *)((char *)v24 + 89) = 0u;
    *((_BYTE *)v24 + 105) = a4;
    *((_WORD *)v24 + 53) = a5;
    *((_WORD *)v24 + 54) = v9;
    *(_OWORD *)((char *)v24 + 110) = 0u;
    *(_OWORD *)((char *)v24 + 126) = 0u;
    *(_OWORD *)((char *)v24 + 142) = 0u;
    *(_OWORD *)((char *)v24 + 158) = 0u;
    *(_OWORD *)(v24 + 21) = 0u;
    *((_WORD *)v24 + 92) = v17;
    *((_BYTE *)v24 + 186) = v18;
    *((_BYTE *)v24 + 187) = v19;
    *((_BYTE *)v24 + 188) = v21;
    *((_BYTE *)v24 + 189) = v22;
    *((_BYTE *)v24 + 190) = v23;
    *(int16x4_t *)v25.i8 = vzip1_s16(v39, (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)vdup_lane_s16(v39, 2), 6uLL));
    *(_DWORD *)((char *)v24 + 191) = vmovn_s16(v25).u32[0];
    *((_OWORD *)v24 + 15) = 0u;
    *(_OWORD *)((char *)v24 + 227) = 0u;
    *(_OWORD *)((char *)v24 + 211) = 0u;
    *(_OWORD *)((char *)v24 + 195) = 0u;
    *(_QWORD *)&result = 0x3E8FFFFFC18;
    v24[32] = (uint64_t *)0x3E8FFFFFC18;
    v24[33] = 0;
    v24[34] = 0;
  }
  return result;
}

void sub_100390040(uint64_t a1, __int16 a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12;
  _QWORD v13[5];
  int v14;
  int v15;
  int v16;
  int v17;
  __int16 v18;

  v12 = sub_10006BBAC();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1003900D0;
  v13[3] = &unk_10092A3B8;
  v13[4] = a1;
  v18 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  v17 = a6;
  sub_100041A34(v12, v13);
}

double sub_1003900D0(uint64_t a1)
{
  return sub_1003900E8(*(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 56), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
}

double sub_1003900E8(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6)
{
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t **v18;
  double result;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t **v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t *v33;
  unsigned __int16 v34;
  unsigned __int16 *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t *v47;

  v34 = a2;
  v11 = (uint64_t **)(a1 + 656);
  v12 = *(_QWORD *)(a1 + 664);
  if (!v12)
    goto LABEL_12;
  v13 = a1 + 664;
  v14 = a1 + 664;
  do
  {
    v15 = *(unsigned __int16 *)(v12 + 32);
    v16 = v15 >= a2;
    if (v15 >= a2)
      v17 = (uint64_t *)v12;
    else
      v17 = (uint64_t *)(v12 + 8);
    if (v16)
      v14 = v12;
    v12 = *v17;
  }
  while (*v17);
  if (v14 != v13 && *(unsigned __int16 *)(v14 + 32) <= a2)
  {
    v31 = *(_OWORD *)(v14 + 40);
    v32 = *(_OWORD *)(v14 + 56);
    v33 = *(uint64_t **)(v14 + 72);
    v20 = *(_OWORD *)(v14 + 240);
    v44 = *(_OWORD *)(v14 + 224);
    v45 = v20;
    v46 = *(_OWORD *)(v14 + 256);
    v47 = *(uint64_t **)(v14 + 272);
    v21 = *(_OWORD *)(v14 + 176);
    v40 = *(_OWORD *)(v14 + 160);
    v41 = v21;
    v22 = *(_OWORD *)(v14 + 208);
    v42 = *(_OWORD *)(v14 + 192);
    v43 = v22;
    v23 = *(_OWORD *)(v14 + 112);
    v36 = *(_OWORD *)(v14 + 96);
    v37 = v23;
    v24 = *(_OWORD *)(v14 + 144);
    v38 = *(_OWORD *)(v14 + 128);
    v39 = v24;
    v35 = &v34;
    v25 = sub_1003949FC(v11, &v34, (uint64_t)&unk_100740F58, &v35);
    *(_OWORD *)(v25 + 5) = v31;
    *(_OWORD *)(v25 + 7) = v32;
    v25[9] = v33;
    *((_DWORD *)v25 + 20) = a3;
    *((_DWORD *)v25 + 21) = a4;
    *((_DWORD *)v25 + 22) = a5;
    *((_DWORD *)v25 + 23) = a6;
    v26 = v45;
    *((_OWORD *)v25 + 14) = v44;
    *((_OWORD *)v25 + 15) = v26;
    *((_OWORD *)v25 + 16) = v46;
    v25[34] = v47;
    v27 = v41;
    *((_OWORD *)v25 + 10) = v40;
    *((_OWORD *)v25 + 11) = v27;
    v28 = v43;
    *((_OWORD *)v25 + 12) = v42;
    *((_OWORD *)v25 + 13) = v28;
    v29 = v37;
    *((_OWORD *)v25 + 6) = v36;
    *((_OWORD *)v25 + 7) = v29;
    result = *(double *)&v38;
    v30 = v39;
    *((_OWORD *)v25 + 8) = v38;
    *((_OWORD *)v25 + 9) = v30;
  }
  else
  {
LABEL_12:
    *(_QWORD *)&v36 = &v34;
    v18 = sub_1003949FC(v11, &v34, (uint64_t)&unk_100740F58, (_WORD **)&v36);
    v18[9] = 0;
    result = 0.0;
    *(_OWORD *)(v18 + 7) = 0u;
    *(_OWORD *)(v18 + 5) = 0u;
    *((_DWORD *)v18 + 20) = a3;
    *((_DWORD *)v18 + 21) = a4;
    *((_DWORD *)v18 + 22) = a5;
    *((_DWORD *)v18 + 23) = a6;
    *((_OWORD *)v18 + 6) = 0u;
    *((_OWORD *)v18 + 7) = 0u;
    *((_OWORD *)v18 + 8) = 0u;
    *((_OWORD *)v18 + 9) = 0u;
    *((_OWORD *)v18 + 10) = 0u;
    *((_OWORD *)v18 + 11) = 0u;
    *((_OWORD *)v18 + 12) = 0u;
    *((_OWORD *)v18 + 13) = 0u;
    *((_OWORD *)v18 + 14) = 0u;
    *((_OWORD *)v18 + 15) = 0u;
    *((_OWORD *)v18 + 16) = 0u;
    v18[34] = 0;
  }
  return result;
}

void sub_1003902B8(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v6;
  _QWORD v7[6];
  __int16 v8;

  v6 = sub_10006BBAC();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10039032C;
  v7[3] = &unk_1009186D0;
  v7[4] = a1;
  v7[5] = a2;
  v8 = a3;
  sub_100041A34(v6, v7);
}

double sub_10039032C(uint64_t a1)
{
  return sub_100390340(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 48), 0);
}

double sub_100390340(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  unsigned int v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  NSObject *v13;
  NSObject *v14;
  double result;
  uint64_t *v16;
  NSObject *v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  BOOL v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t **v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unsigned __int16 v58;
  unsigned __int16 *v59;
  _BYTE buf[32];
  __int128 v61;
  __int128 v62;
  _BYTE v63[80];
  _BYTE v64[80];
  __int128 v65;

  v5 = a3;
  v58 = a3;
  if (a3)
  {
LABEL_2:
    v6 = (uint64_t **)(a1 + 656);
    v7 = (uint64_t *)(a1 + 664);
    v8 = *(_QWORD *)(a1 + 664);
    if (!v8)
      goto LABEL_13;
    v9 = a1 + 664;
    do
    {
      v10 = *(unsigned __int16 *)(v8 + 32);
      v11 = v10 >= v5;
      if (v10 >= v5)
        v12 = (uint64_t *)v8;
      else
        v12 = (uint64_t *)(v8 + 8);
      if (v11)
        v9 = v8;
      v8 = *v12;
    }
    while (*v12);
    if ((uint64_t *)v9 != v7 && v5 >= *(unsigned __int16 *)(v9 + 32))
    {
      v33 = *(_OWORD *)(v9 + 232);
      *(_OWORD *)&v64[32] = *(_OWORD *)(v9 + 216);
      *(_OWORD *)&v64[48] = v33;
      *(_OWORD *)&v64[64] = *(_OWORD *)(v9 + 248);
      *(_OWORD *)&v63[48] = *(_OWORD *)(v9 + 152);
      v34 = *(_OWORD *)(v9 + 184);
      *(_OWORD *)&v63[64] = *(_OWORD *)(v9 + 168);
      *(_OWORD *)v64 = v34;
      *(_OWORD *)&v64[16] = *(_OWORD *)(v9 + 200);
      v35 = *(_OWORD *)(v9 + 104);
      v62 = *(_OWORD *)(v9 + 88);
      *(_OWORD *)v63 = v35;
      v36 = *(_OWORD *)(v9 + 136);
      *(_OWORD *)&v63[16] = *(_OWORD *)(v9 + 120);
      *(_OWORD *)&v63[32] = v36;
      v37 = *(_OWORD *)(v9 + 56);
      *(_OWORD *)buf = *(_OWORD *)(v9 + 40);
      *(_OWORD *)&buf[16] = v37;
      v61 = *(_OWORD *)(v9 + 72);
      v65 = *(_OWORD *)(v9 + 264);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(*(int32x4_t *)&v63[12], *(int32x4_t *)&v63[12]))) & 1) != 0)
        sub_10039079C(a1, (uint64_t)buf, 1);
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      memset(&v63[6], 0, 74);
      if ((a4 & 1) != 0)
      {
        *(_QWORD *)&v65 = *(_QWORD *)v64;
        BYTE8(v65) = v64[8];
        *(_WORD *)((char *)&v65 + 9) = *(_WORD *)&v64[9];
      }
      else
      {
        memset(&v64[12], 0, 60);
        *(_QWORD *)&v64[72] = 0x3E8FFFFFC18;
      }
      v59 = &v58;
      v46 = sub_1003949FC(v6, &v58, (uint64_t)&unk_100740F58, &v59);
      v48 = *(_OWORD *)&v63[16];
      v47 = *(_OWORD *)&v63[32];
      v49 = *(_OWORD *)v63;
      v50 = v61;
      *(_OWORD *)(v46 + 11) = v62;
      v52 = *(_OWORD *)v64;
      v51 = *(_OWORD *)&v64[16];
      v53 = *(_OWORD *)&v63[64];
      *(_OWORD *)(v46 + 19) = *(_OWORD *)&v63[48];
      v55 = *(_OWORD *)&v64[64];
      v54 = v65;
      v56 = *(_OWORD *)&v64[48];
      *(_OWORD *)(v46 + 27) = *(_OWORD *)&v64[32];
      *(_OWORD *)(v46 + 29) = v56;
      *(_OWORD *)(v46 + 31) = v55;
      *(_OWORD *)(v46 + 33) = v54;
      *(_OWORD *)(v46 + 21) = v53;
      *(_OWORD *)(v46 + 23) = v52;
      *(_OWORD *)(v46 + 25) = v51;
      *(_OWORD *)(v46 + 13) = v49;
      *(_OWORD *)(v46 + 15) = v48;
      *(_OWORD *)(v46 + 17) = v47;
      result = *(double *)buf;
      v57 = *(_OWORD *)&buf[16];
      *(_OWORD *)(v46 + 5) = *(_OWORD *)buf;
      *(_OWORD *)(v46 + 7) = v57;
      *(_OWORD *)(v46 + 9) = v50;
    }
    else
    {
LABEL_13:
      v13 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "sendAccumulatedHIDLatencyStatsData";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v5;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v5;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%s -- Did not find stored HID Latency Statistics data for LM Handle %d (0x%04x)", buf, 0x18u);
      }
      v14 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "sendAccumulatedHIDLatencyStatsData";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s -- LM handle in the list: ", buf, 0xCu);
      }
      v16 = *v6;
      if (*v6 != v7)
      {
        do
        {
          v17 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            v18 = *((unsigned __int16 *)v16 + 16);
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "sendAccumulatedHIDLatencyStatsData";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%s -- LM Handle 0x%02x", buf, 0x12u);
          }
          v19 = (uint64_t *)v16[1];
          if (v19)
          {
            do
            {
              v20 = v19;
              v19 = (uint64_t *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v20 = (uint64_t *)v16[2];
              v21 = *v20 == (_QWORD)v16;
              v16 = v20;
            }
            while (!v21);
          }
          v16 = v20;
        }
        while (v20 != v7);
      }
    }
    return result;
  }
  if (a2)
  {
    v22 = *(_QWORD **)(a1 + 656);
    if (v22 != (_QWORD *)(a1 + 664))
    {
      while (v22[5] != a2)
      {
        v23 = (_QWORD *)v22[1];
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (_QWORD *)v22[2];
            v21 = *v24 == (_QWORD)v22;
            v22 = v24;
          }
          while (!v21);
        }
        v22 = v24;
        if (v24 == (_QWORD *)(a1 + 664))
          goto LABEL_44;
      }
      v58 = *((_WORD *)v22 + 16);
      v5 = v58;
      if (v58)
        goto LABEL_2;
    }
  }
  else
  {
    v25 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E3CD8(v25, v26, v27, v28, v29, v30, v31, v32);
  }
LABEL_44:
  v38 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006E3C54(v38, v39, v40, v41, v42, v43, v44, v45);
  return result;
}

void sub_10039079C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *p_p;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  void *__p;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  _OWORD v26[16];

  sub_1003913EC(a1, a2, a3);
  v6 = *(unsigned __int8 *)(a2 + 65);
  if ((v6 - 1) > 1u)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E3D48();
  }
  else
  {
    if ((_DWORD)a3 == 2)
    {
      memset(v26, 0, 250);
      bzero(v26, 0xFAuLL);
      sub_10038FBA0(*(unsigned __int8 *)(a2 + 29), &__p);
      if ((v23 & 0x8000) == 0)
        p_p = &__p;
      else
        p_p = __p;
      sub_1002532F8((uint64_t)v26, 250, (uint64_t)"HID Latency Statistics events indicated HID lag issue is detected with %s latency for connection handle 0x%04x, vid = %d (0x%04x), pid = %d (0x%04x)", v7, v8, v9, v10, v11, (uint64_t)p_p);
      if (SBYTE1(v23) < 0)
        operator delete(__p);
      sub_10011C9B4((const char *)v26);
      v13 = qword_1009997E8;
      v5 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
      if (v5)
      {
        v14 = *(unsigned __int16 *)(a2 + 68);
        v15 = *(_DWORD *)(a2 + 44);
        v16 = *(_DWORD *)(a2 + 48);
        LODWORD(__p) = 67110144;
        HIDWORD(__p) = v14;
        v18 = 1024;
        v19 = v15;
        v20 = 1024;
        v21 = v15;
        v22 = 1024;
        v23 = v16;
        v24 = 1024;
        v25 = v16;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "HID Latency Statistics events indicated HID lag issue is detected on connection handle 0x%04x, vid = %d (0x%04x), pid = %d (0x%04x)", (uint8_t *)&__p, 0x20u);
      }
      v6 = *(unsigned __int8 *)(a2 + 65);
      if ((_DWORD)v6 == 1)
        *(_BYTE *)(a2 + 28) = llround(sub_10038FBCC(v5, *(unsigned __int8 *)(a2 + 29)));
    }
    sub_100391294(v5, a3, 0, v6, a2);
  }
}

void sub_100390998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1003909BC(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[4];
  _BYTE v26[32];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  if (a2)
  {
    v2 = *a2;
    v3 = *(_QWORD *)(a1 + 664);
    if (!v3)
      goto LABEL_22;
    v4 = a1 + 664;
    do
    {
      v5 = *(unsigned __int16 *)(v3 + 32);
      v6 = v5 >= v2;
      if (v5 >= v2)
        v7 = (uint64_t *)v3;
      else
        v7 = (uint64_t *)(v3 + 8);
      if (v6)
        v4 = v3;
      v3 = *v7;
    }
    while (*v7);
    if (v4 != a1 + 664 && v2 >= *(unsigned __int16 *)(v4 + 32))
    {
      v16 = 0;
      v17 = *(_OWORD *)(v4 + 104);
      v18 = *(_OWORD *)(v4 + 88);
      v19 = *(_OWORD *)(v4 + 120);
      v20 = *(_OWORD *)(v4 + 232);
      v32 = *(_OWORD *)(v4 + 216);
      v33 = v20;
      v34 = *(_OWORD *)(v4 + 248);
      v21 = *(_OWORD *)(v4 + 168);
      v28 = *(_OWORD *)(v4 + 152);
      v29 = v21;
      v22 = *(_OWORD *)(v4 + 200);
      v30 = *(_OWORD *)(v4 + 184);
      v31 = v22;
      v25[3] = v18;
      *(_OWORD *)v26 = v17;
      v23 = *(_OWORD *)(v4 + 136);
      *(_OWORD *)&v26[16] = v19;
      v27 = v23;
      v24 = *(_OWORD *)(v4 + 56);
      v25[0] = *(_OWORD *)(v4 + 40);
      v25[1] = v24;
      v25[2] = *(_OWORD *)(v4 + 72);
      v35 = *(_OWORD *)(v4 + 264);
      *(_WORD *)&v26[6] = a2[1];
      *(_DWORD *)&v26[8] = *((unsigned __int8 *)a2 + 4);
      *(uint32x4_t *)&v26[12] = vmovl_u16(*(uint16x4_t *)((char *)a2 + 5));
      do
      {
        *(_DWORD *)&v26[4 * v16 + 28] = *(unsigned __int16 *)((char *)&a2[v16 + 6] + 1);
        ++v16;
      }
      while (v16 != 13);
      sub_10039079C(a1, (uint64_t)v25, 2);
    }
    else
    {
LABEL_22:
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E3E3C();
    }
  }
  else
  {
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E3DCC(v8, v9, v10, v11, v12, v13, v14, v15);
  }
}

void sub_100390B30(uint64_t a1, __int128 *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[6];

  if (a2)
  {
    v4 = malloc_type_malloc(0x30uLL, 0x1000040EED21634uLL);
    if (v4)
    {
      v5 = v4;
      v4[1] = 0u;
      v4[2] = 0u;
      *v4 = 0u;
      if ((*(_DWORD *)(sub_1000438A4() + 712) - 1) >= 0x7CF)
      {
        v6 = *a2;
        v7 = a2[1];
        v5[2] = a2[2];
      }
      else
      {
        v6 = *a2;
        v7 = a2[1];
        *(_QWORD *)((char *)v5 + 31) = *(_QWORD *)((char *)a2 + 31);
      }
      *v5 = v6;
      v5[1] = v7;
      v24 = sub_10006BBAC();
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_100390C50;
      v25[3] = &unk_100918090;
      v25[4] = a1;
      v25[5] = v5;
      sub_100041A34(v24, v25);
    }
    else
    {
      v16 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E3F1C(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }
  else
  {
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E3EAC(v8, v9, v10, v11, v12, v13, v14, v15);
  }
}

void sub_100390C50(uint64_t a1)
{
  sub_100390C5C(*(_QWORD *)(a1 + 32), *(unsigned __int16 **)(a1 + 40));
}

void sub_100390C5C(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  _BOOL4 v9;
  BOOL v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    v4 = 0;
    v5 = 0;
    v6 = *a2;
    do
    {
      if (*(unsigned __int16 *)((char *)&a2[v4 + 6] + 1))
        v7 = v4 == 10;
      else
        v7 = 1;
      if (!v7)
        v5 = v4;
      ++v4;
    }
    while (v4 != 13);
    v8 = *(unsigned __int8 *)(a1 + 680);
    v9 = sub_100390D58(a1, a2);
    v10 = v8 > v5 && !v9;
    if (v10 || (sub_100390340(a1, 0, v6, v5 >= v8), v5 < v8))
      sub_100390DFC(a1, a2);
    else
      sub_1003909BC(a1, a2);
    free(a2);
  }
  else
  {
    v11 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E3F8C(v11, v12, v13, v14, v15, v16, v17, v18);
  }
}

BOOL sub_100390D58(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;
  _BOOL8 result;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2)
  {
    v2 = *(_QWORD *)(a1 + 664);
    if (!v2)
      return 0;
    v3 = *a2;
    v4 = a1 + 664;
    do
    {
      v5 = *(unsigned __int16 *)(v2 + 32);
      v6 = v5 >= v3;
      if (v5 >= v3)
        v7 = (uint64_t *)v2;
      else
        v7 = (uint64_t *)(v2 + 8);
      if (v6)
        v4 = v2;
      v2 = *v7;
    }
    while (*v7);
    if (v4 == a1 + 664 || v3 < *(unsigned __int16 *)(v4 + 32))
      return 0;
    return *(_DWORD *)(v4 + 112) + *((unsigned __int8 *)a2 + 4) > 0x708;
  }
  else
  {
    v9 = qword_1009997E8;
    result = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006E3FFC(v9, v10, v11, v12, v13, v14, v15, v16);
      return 0;
    }
  }
  return result;
}

double sub_100390DFC(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  double result;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint8x8_t v27;
  int v28;
  int v29;
  int v30;
  int16x8_t v31;
  uint64_t **v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[32];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unsigned __int16 v58;
  unsigned __int16 *v59;

  if (a2)
  {
    v4 = *a2;
    v58 = *a2;
    v5 = *(_QWORD *)(a1 + 664);
    if (!v5)
      goto LABEL_24;
    v6 = a1 + 664;
    do
    {
      v7 = *(unsigned __int16 *)(v5 + 32);
      v8 = v7 >= v4;
      if (v7 >= v4)
        v9 = (uint64_t *)v5;
      else
        v9 = (uint64_t *)(v5 + 8);
      if (v8)
        v6 = v5;
      v5 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 664 && v4 >= *(unsigned __int16 *)(v6 + 32))
    {
      v19 = 0;
      v20 = *(_OWORD *)(v6 + 104);
      v21 = *(_OWORD *)(v6 + 232);
      v54 = *(_OWORD *)(v6 + 216);
      v55 = v21;
      v56 = *(_OWORD *)(v6 + 248);
      v22 = *(_OWORD *)(v6 + 168);
      v50 = *(_OWORD *)(v6 + 152);
      v51 = v22;
      v23 = *(_OWORD *)(v6 + 200);
      v52 = *(_OWORD *)(v6 + 184);
      v53 = v23;
      v47 = *(_OWORD *)(v6 + 88);
      *(_OWORD *)v48 = v20;
      v24 = *(_OWORD *)(v6 + 136);
      *(_OWORD *)&v48[16] = *(_OWORD *)(v6 + 120);
      v49 = v24;
      v25 = *(_OWORD *)(v6 + 56);
      v44 = *(_OWORD *)(v6 + 40);
      v45 = v25;
      v46 = *(_OWORD *)(v6 + 72);
      v57 = *(_OWORD *)(v6 + 264);
      *(_WORD *)&v48[4] = v4;
      *(_WORD *)&v48[6] = a2[1];
      *(_DWORD *)&v48[8] = DWORD2(v20) + *((unsigned __int8 *)a2 + 4);
      *(uint32x4_t *)&v48[12] = vaddw_u16(*(uint32x4_t *)&v48[12], *(uint16x4_t *)((char *)a2 + 5));
      do
      {
        *(_DWORD *)&v48[4 * v19 + 28] += *(unsigned __int16 *)((char *)&a2[v19 + 6] + 1);
        ++v19;
      }
      while (v19 != 13);
      v26 = sub_1000438A4();
      if ((*(_DWORD *)(v26 + 712) - 1) >= 0x7CF)
      {
        v28 = *((char *)a2 + 39);
        LODWORD(v45) = v45 + 1;
        DWORD1(v45) += v28;
        sub_1003910C8(v26, &v44, v28);
        HIDWORD(v52) = v28;
        v29 = HIDWORD(v44) + a2[23];
        DWORD2(v44) += a2[22];
        HIDWORD(v44) = v29;
      }
      LOWORD(v52) = *(_WORD *)(a1 + 573);
      BYTE2(v52) = *(_BYTE *)(a1 + 576);
      BYTE3(v52) = *(_BYTE *)(a1 + 544);
      v30 = *(_DWORD *)(a1 + 548);
      BYTE4(v52) = v30 == 1;
      BYTE5(v52) = v30 == 2;
      BYTE6(v52) = v30 == 3;
      v27.i32[0] = *(_DWORD *)(a1 + 528);
      v31 = (int16x8_t)vmovl_u8(v27);
      *(int16x4_t *)v31.i8 = vzip1_s16(*(int16x4_t *)v31.i8, (int16x4_t)vext_s8(*(int8x8_t *)v31.i8, (int8x8_t)vdup_lane_s16(*(int16x4_t *)v31.i8, 2), 6uLL));
      *(_DWORD *)((char *)&v52 + 7) = vmovn_s16(v31).u32[0];
      v59 = &v58;
      v32 = sub_1003949FC((uint64_t **)(a1 + 656), &v58, (uint64_t)&unk_100740F58, &v59);
      v34 = *(_OWORD *)&v48[16];
      v33 = v49;
      v35 = *(_OWORD *)v48;
      v36 = v46;
      *(_OWORD *)(v32 + 11) = v47;
      v38 = v52;
      v37 = v53;
      v39 = v51;
      *(_OWORD *)(v32 + 19) = v50;
      v41 = v56;
      v40 = v57;
      v42 = v55;
      *(_OWORD *)(v32 + 27) = v54;
      *(_OWORD *)(v32 + 29) = v42;
      *(_OWORD *)(v32 + 31) = v41;
      *(_OWORD *)(v32 + 33) = v40;
      *(_OWORD *)(v32 + 21) = v39;
      *(_OWORD *)(v32 + 23) = v38;
      *(_OWORD *)(v32 + 25) = v37;
      *(_OWORD *)(v32 + 13) = v35;
      *(_OWORD *)(v32 + 15) = v34;
      *(_OWORD *)(v32 + 17) = v33;
      result = *(double *)&v44;
      v43 = v45;
      *(_OWORD *)(v32 + 5) = v44;
      *(_OWORD *)(v32 + 7) = v43;
      *(_OWORD *)(v32 + 9) = v36;
    }
    else
    {
LABEL_24:
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E40DC();
    }
  }
  else
  {
    v11 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E406C(v11, v12, v13, v14, v15, v16, v17, v18);
  }
  return result;
}

void sub_1003910C8(uint64_t a1, _DWORD *a2, int a3)
{
  int v3;
  __int16 v4;
  __int16 v5;

  if (a2)
  {
    if (a2[54] < a3)
      a2[54] = a3;
    if (a2[55] > a3)
      a2[55] = a3;
    v3 = a2[39];
    if (v3)
    {
      if (v3 >= a3)
      {
        v5 = v3 - a3;
        if ((unsigned __int16)(v5 - 3) > 2u)
        {
          if ((v5 - 6) > 4)
          {
            if ((v5 - 11) > 4)
            {
              if ((v5 - 16) > 4)
              {
                if ((v5 - 21) > 4)
                {
                  if ((v5 - 26) > 4)
                  {
                    if (v5 >= 31)
                      ++a2[53];
                  }
                  else
                  {
                    ++a2[52];
                  }
                }
                else
                {
                  ++a2[51];
                }
              }
              else
              {
                ++a2[50];
              }
            }
            else
            {
              ++a2[49];
            }
          }
          else
          {
            ++a2[48];
          }
        }
        else
        {
          ++a2[47];
        }
      }
      else
      {
        v4 = a3 - v3;
        if ((unsigned __int16)(v4 - 3) > 2u)
        {
          if ((v4 - 6) > 4)
          {
            if ((v4 - 11) > 4)
            {
              if ((v4 - 16) > 4)
              {
                if ((v4 - 21) > 4)
                {
                  if ((v4 - 26) > 4)
                  {
                    if (v4 >= 31)
                      ++a2[46];
                  }
                  else
                  {
                    ++a2[45];
                  }
                }
                else
                {
                  ++a2[44];
                }
              }
              else
              {
                ++a2[43];
              }
            }
            else
            {
              ++a2[42];
            }
          }
          else
          {
            ++a2[41];
          }
        }
        else
        {
          ++a2[40];
        }
      }
    }
  }
}

void sub_100391294(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  __int128 v8;
  __int128 v9;
  int v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  __int16 v15;
  char v16;
  char v17;
  int v18;
  int v19;
  char v20;
  int v21;
  __int16 v22;
  char v23;
  int v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int32x2_t v34;
  int v35;
  __int128 v36;
  __int128 v37;
  _DWORD v38[20];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  if (a5)
  {
    *(_OWORD *)&v38[3] = 0u;
    *(_OWORD *)v38 = 0u;
    v37 = 0u;
    v36 = 0u;
    v34 = vrev64_s32(*(int32x2_t *)(a5 + 44));
    *((_QWORD *)&v37 + 1) = *(_QWORD *)(a5 + 72);
    *(_OWORD *)&v38[7] = *(_OWORD *)(a5 + 92);
    *(_OWORD *)&v38[11] = *(_OWORD *)(a5 + 108);
    *(_OWORD *)&v38[15] = *(_OWORD *)(a5 + 124);
    v8 = *(_OWORD *)(a5 + 176);
    v39 = *(_OWORD *)(a5 + 160);
    v40 = v8;
    v9 = *(_OWORD *)(a5 + 208);
    v41 = *(_OWORD *)(a5 + 192);
    v10 = *(_DWORD *)(a5 + 52);
    v11 = *(_BYTE *)(a5 + 56);
    v12 = *(_DWORD *)(a5 + 32);
    v13 = *(_DWORD *)(a5 + 60);
    v14 = *(char *)(a5 + 64);
    v15 = *(_WORD *)(a5 + 70);
    v16 = *(_BYTE *)(a5 + 24);
    v17 = *(_BYTE *)(a5 + 25);
    v19 = *(_DWORD *)(a5 + 80);
    v18 = *(_DWORD *)(a5 + 84);
    v20 = *(_BYTE *)(a5 + 26);
    v21 = *(_DWORD *)(a5 + 88);
    v22 = *(_WORD *)(a5 + 27);
    v23 = *(_BYTE *)(a5 + 29);
    v24 = *(_DWORD *)(a5 + 140);
    v35 = v10;
    LOBYTE(v36) = v11;
    *(_QWORD *)((char *)&v36 + 4) = __PAIR64__(v13, v12);
    HIDWORD(v36) = v14;
    LODWORD(v37) = a3;
    WORD2(v37) = v15;
    LOBYTE(v38[0]) = v16;
    v38[1] = v19;
    LOBYTE(v38[2]) = v17;
    v38[3] = v18;
    LOBYTE(v38[4]) = v20;
    v38[5] = v21;
    LOWORD(v38[6]) = v22;
    BYTE2(v38[6]) = v23;
    v38[19] = v24;
    v42 = v9;
    if (sub_100065478())
    {
      v25 = sub_100065478();
      (*(void (**)(uint64_t, int32x2_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v25 + 488))(v25, &v34, a2, a4, *(unsigned __int16 *)(a5 + 68));
    }
  }
  else
  {
    v26 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E414C(v26, v27, v28, v29, v30, v31, v32, v33);
  }
}

void sub_1003913EC(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  double v10;
  unsigned int v11;
  unsigned __int8 v12;
  unsigned int v13;
  double v14;
  unint64_t v15;
  double v16;
  unsigned int v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  int v23;
  int v24;
  char v25;
  unsigned int v26;
  int v27;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = a2 + 92;
  v10 = 0.0;
  do
  {
    v11 = *(_DWORD *)(v9 + 4 * v6);
    if (v11)
    {
      if (a3 == 2 && v6 == 10)
      {
        v12 = 10;
      }
      else
      {
        *(_BYTE *)(a2 + 29) = v6;
        v12 = v6;
      }
      v10 = v10 + (double)v11 * sub_10038FBCC(a1, v12);
      v8 += v11;
      if (v6 >= *(unsigned __int8 *)(a1 + 680))
        v13 = v11;
      else
        v13 = 0;
      v7 += v13;
    }
    ++v6;
  }
  while (v6 != 13);
  v14 = v10 / (double)v8;
  *(_BYTE *)(a2 + 28) = llround(v14);
  *(_DWORD *)(a2 + 32) = v7;
  *(_DWORD *)(a2 + 36) = v8;
  LOWORD(v14) = *(_WORD *)(a2 + 66);
  HIDWORD(v15) = 1083129856;
  LODWORD(v15) = *(_DWORD *)(a2 + 72);
  v16 = 1000.0 / ((double)*(unint64_t *)&v14 * 0.625) * (double)v15;
  v17 = *(_DWORD *)(a2 + 76);
  if (v17)
    v18 = llround((double)v17 / v16 * 100.0);
  else
    v18 = 0;
  *(_BYTE *)(a2 + 24) = v18;
  v19 = *(_DWORD *)(a2 + 80);
  if (v19)
    LOBYTE(v19) = llround((double)v19 / v16 * 100.0);
  *(_BYTE *)(a2 + 25) = v19;
  v20 = *(_DWORD *)(a2 + 88);
  if (v20)
    LOBYTE(v20) = llround((double)v20 / v16 * 100.0);
  *(_BYTE *)(a2 + 27) = v20;
  v21 = *(_DWORD *)(a2 + 84);
  if (v21)
  {
    if (v21 <= v17)
      v22 = llround((double)(v21 / v17) * 100.0);
    else
      v22 = -1;
  }
  else
  {
    v22 = 0;
  }
  *(_BYTE *)(a2 + 26) = v22;
  v23 = *(_DWORD *)(a2 + 16);
  if (v23)
  {
    v24 = *(_DWORD *)(a2 + 20) / v23;
    *(_DWORD *)(a2 + 60) = v24;
    if (v24)
      *(_BYTE *)(a2 + 56) = 1;
  }
  else
  {
    *(_DWORD *)(a2 + 60) = 0;
  }
  v25 = 0;
  v26 = *(_DWORD *)(a2 + 12);
  if (v26)
  {
    v27 = v26 + *(_DWORD *)(a2 + 8);
    if (v27)
      v25 = llround((double)v26 * 100.0 / (double)v27);
  }
  *(_BYTE *)(a2 + 64) = v25;
}

void sub_1003915E8(uint64_t a1, _OWORD *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[6];

  if ((*(_DWORD *)(sub_1000438A4() + 712) - 1) <= 0x7CE)
  {
    if (a2)
    {
      v4 = malloc_type_malloc(0xCEuLL, 0x100004047758063uLL);
      if (v4)
      {
        v5 = v4;
        *(_OWORD *)((char *)v4 + 190) = 0u;
        v4[10] = 0u;
        v4[11] = 0u;
        v4[8] = 0u;
        v4[9] = 0u;
        v4[6] = 0u;
        v4[7] = 0u;
        v4[4] = 0u;
        v4[5] = 0u;
        v4[2] = 0u;
        v4[3] = 0u;
        *v4 = 0u;
        v4[1] = 0u;
        *v4 = *a2;
        v6 = a2[1];
        v7 = a2[2];
        v8 = a2[4];
        v4[3] = a2[3];
        v4[4] = v8;
        v4[1] = v6;
        v4[2] = v7;
        v9 = a2[5];
        v10 = a2[6];
        v11 = a2[8];
        v4[7] = a2[7];
        v4[8] = v11;
        v4[5] = v9;
        v4[6] = v10;
        v12 = a2[9];
        v13 = a2[10];
        v14 = a2[11];
        *(_OWORD *)((char *)v4 + 190) = *(_OWORD *)((char *)a2 + 190);
        v4[10] = v13;
        v4[11] = v14;
        v4[9] = v12;
        v15 = sub_10006BBAC();
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472;
        v32[2] = sub_100391740;
        v32[3] = &unk_100918090;
        v32[4] = a1;
        v32[5] = v5;
        sub_100041A34(v15, v32);
      }
      else
      {
        v24 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006E422C(v24, v25, v26, v27, v28, v29, v30, v31);
      }
    }
    else
    {
      v16 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E41BC(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }
}

void sub_100391740(uint64_t a1)
{
  sub_10039174C(*(_QWORD *)(a1 + 32), *(unsigned __int16 **)(a1 + 40));
}

void sub_10039174C(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4;
  unsigned int v5;
  signed __int16 v6;
  signed __int16 v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a2)
  {
    v4 = a2[102];
    v5 = a2[101];
    if (v4)
    {
      v6 = a2[9];
      if ((unsigned __int16)(v6 + 127) >= 0x94u)
        v6 = 0;
      sub_100391818(a1, v4, v6, *(unsigned __int16 *)((char *)a2 + 25), *(unsigned __int16 *)((char *)a2 + 27));
    }
    if (v5)
    {
      v7 = a2[8];
      if ((unsigned __int16)(v7 + 127) >= 0x94u)
        v7 = 0;
      sub_100391818(a1, v5, v7, a2[17], a2[18]);
    }
    free(a2);
  }
  else
  {
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E429C(v8, v9, v10, v11, v12, v13, v14, v15);
  }
}

double sub_100391818(uint64_t a1, unsigned int a2, int a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t **v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  double result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t **v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unsigned __int16 v47;
  unsigned __int16 *v48;

  v47 = a2;
  v5 = *(_QWORD *)(a1 + 664);
  if (!v5)
    goto LABEL_19;
  v7 = (uint64_t **)(a1 + 656);
  v8 = a1 + 664;
  do
  {
    v9 = *(unsigned __int16 *)(v5 + 32);
    v10 = v9 >= a2;
    if (v9 >= a2)
      v11 = (uint64_t *)v5;
    else
      v11 = (uint64_t *)(v5 + 8);
    if (v10)
      v8 = v5;
    v5 = *v11;
  }
  while (*v11);
  if (v8 != a1 + 664 && *(unsigned __int16 *)(v8 + 32) <= a2)
  {
    v13 = *(_OWORD *)(v8 + 232);
    v43 = *(_OWORD *)(v8 + 216);
    v44 = v13;
    v45 = *(_OWORD *)(v8 + 248);
    v14 = *(_OWORD *)(v8 + 168);
    v39 = *(_OWORD *)(v8 + 152);
    v40 = v14;
    v15 = *(_OWORD *)(v8 + 200);
    v41 = *(_OWORD *)(v8 + 184);
    v42 = v15;
    v16 = *(_OWORD *)(v8 + 104);
    v35 = *(_OWORD *)(v8 + 88);
    v36 = v16;
    v17 = *(_OWORD *)(v8 + 136);
    v37 = *(_OWORD *)(v8 + 120);
    v38 = v17;
    v18 = *(_OWORD *)(v8 + 56);
    v32 = *(_OWORD *)(v8 + 40);
    v33 = v18;
    v19 = *(_OWORD *)(v8 + 264);
    v34 = *(_OWORD *)(v8 + 72);
    v46 = v19;
    DWORD2(v32) += a4;
    HIDWORD(v32) += a5;
    if (a3)
    {
      LODWORD(v33) = v33 + 1;
      DWORD1(v33) += a3;
      sub_1003910C8(a1, &v32, a3);
      HIDWORD(v41) = a3;
    }
    v48 = &v47;
    v20 = sub_1003949FC(v7, &v47, (uint64_t)&unk_100740F58, &v48);
    v22 = v37;
    v21 = v38;
    v23 = v36;
    v24 = v34;
    *(_OWORD *)(v20 + 11) = v35;
    v26 = v41;
    v25 = v42;
    v27 = v40;
    *(_OWORD *)(v20 + 19) = v39;
    v29 = v45;
    v28 = v46;
    v30 = v44;
    *(_OWORD *)(v20 + 27) = v43;
    *(_OWORD *)(v20 + 29) = v30;
    *(_OWORD *)(v20 + 31) = v29;
    *(_OWORD *)(v20 + 33) = v28;
    *(_OWORD *)(v20 + 21) = v27;
    *(_OWORD *)(v20 + 23) = v26;
    *(_OWORD *)(v20 + 25) = v25;
    *(_OWORD *)(v20 + 13) = v23;
    *(_OWORD *)(v20 + 15) = v22;
    *(_OWORD *)(v20 + 17) = v21;
    result = *(double *)&v32;
    v31 = v33;
    *(_OWORD *)(v20 + 5) = v32;
    *(_OWORD *)(v20 + 7) = v31;
    *(_OWORD *)(v20 + 9) = v24;
  }
  else
  {
LABEL_19:
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E430C();
  }
  return result;
}

void sub_1003919D8(uint64_t a1, __int16 a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  __int16 v11;

  v5 = a3;
  v6 = sub_10006BBAC();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100391A90;
  v8[3] = &unk_10092A3E0;
  v10 = a1;
  v11 = a2;
  v7 = v5;
  v9 = v7;
  sub_100041A34(v6, v8);

}

void sub_100391A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_100391A90(uint64_t a1)
{
  sub_100391AA0(*(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 48), *(void **)(a1 + 32));
}

void sub_100391AA0(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _DWORD __dst[2];

  v5 = a3;
  if (v5)
  {
    *(_DWORD *)((char *)__dst + 3) = 0;
    __dst[0] = 0;
    v7 = v5;
    v6 = objc_retainAutorelease(v5);
    memcpy(__dst, objc_msgSend(v6, "bytes"), (size_t)objc_msgSend(v6, "length"));
    sub_1003900E8(a1, a2, 0, *(unsigned __int16 *)((char *)__dst + 1), *(unsigned __int16 *)((char *)__dst + 3), 0);
    v5 = v7;
  }

}

void sub_100391B2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100391B3C(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD v5[5];
  int v6;

  v4 = sub_10006BBAC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100391BA4;
  v5[3] = &unk_1009173C0;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_100391BA4(uint64_t result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v1 = *(unsigned int **)(result + 32);
  v2 = v1[184];
  if ((_DWORD)v2 != -1)
  {
    v3 = 0;
    v4 = *(unsigned __int8 *)(result + 40);
    v5 = v1[185];
    if (v5 <= v4)
      v5 = *(unsigned __int8 *)(result + 40);
    v1[185] = v5;
    v6 = v1[186];
    if (v6 >= v4)
      v6 = v4;
    v1[186] = v6;
    v7 = v1[187] * v2;
    v8 = v2 + 1;
    v1[184] = v8;
    v1[187] = (v4 + v7) / v8;
    while (byte_10073F1BD[v3] <= v4)
    {
      if (++v3 == 5)
        goto LABEL_11;
    }
    ++v1[v3 + 188];
LABEL_11:
    v9 = *(unsigned __int8 *)(result + 41);
    if (v9 == 2)
    {
      ++v1[195];
    }
    else if (v9 == 1)
    {
      ++v1[194];
    }
    else if (!*(_BYTE *)(result + 41))
    {
      ++v1[193];
    }
    if (*(_BYTE *)(result + 42))
      ++v1[196];
    if (*(_BYTE *)(result + 43) == 1)
      ++v1[197];
    else
      ++v1[198];
  }
  return result;
}

void sub_100391CB0(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v6[5];
  __int128 v7;
  __int128 v8;

  v4 = sub_10006BBAC();
  v6[1] = 3221225472;
  v5 = a2[1];
  v7 = *a2;
  v6[0] = _NSConcreteStackBlock;
  v6[2] = sub_100391D20;
  v6[3] = &unk_10092A400;
  v6[4] = a1;
  v8 = v5;
  sub_100041A34(v4, v6);
}

uint64_t sub_100391D20(uint64_t result)
{
  int32x4_t *v1;
  int32x4_t v2;
  unsigned __int32 v3;
  unsigned __int32 v4;

  v1 = *(int32x4_t **)(result + 32);
  v2 = v1[44];
  v1[43] = vaddq_s32(v1[43], *(int32x4_t *)(result + 40));
  v1[44] = vaddq_s32(v2, *(int32x4_t *)(result + 56));
  v3 = *(_DWORD *)(result + 40);
  if (v3 <= v1[45].i32[2])
    v3 = v1[45].u32[2];
  v1[45].i32[2] = v3;
  v4 = *(_DWORD *)(result + 44);
  if (v4 <= v1[45].i32[3])
    v4 = v1[45].u32[3];
  v1[45].i32[3] = v4;
  return result;
}

void sub_100391D6C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_10006BBAC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100391DCC;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

uint64_t sub_100391DCC(uint64_t result)
{
  ++*(_DWORD *)(*(_QWORD *)(result + 32) + 724);
  return result;
}

void sub_100391DE0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_10006BBAC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100391E40;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

uint64_t sub_100391E40(uint64_t result)
{
  ++*(_DWORD *)(*(_QWORD *)(result + 32) + 720);
  return result;
}

id sub_100391E54(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v1 = *(_QWORD *)(a1 + 32);
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(v1 + 800);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v9;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v2);
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 800), "objectForKey:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v5), (_QWORD)v8));
        sub_100015CC8(v1, 0x42u, v6);

        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v3);
  }

  return objc_msgSend(*(id *)(v1 + 800), "removeAllObjects");
}

void sub_100391F70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100391F9C(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  _QWORD v7[5];
  int v8;
  int v9;

  v6 = sub_10006BBAC();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100392010;
  v7[3] = &unk_100918090;
  v7[4] = a1;
  v8 = a3;
  v9 = a2;
  sub_100041A34(v6, v7);
}

void sub_100392010(uint64_t a1)
{
  uint64_t v1;
  const __CFString *v2;
  int v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = CFSTR("Unknown");
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 1)
    v2 = CFSTR("Classic");
  if (v3 == 2)
    v2 = CFSTR("Le");
  v4 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@_%d"), v2, *(unsigned int *)(a1 + 44)));
  v5 = *(void **)(v1 + 352);
  v8 = (id)v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v6, "intValue") + 1));
  objc_msgSend(v5, "setObject:forKey:", v7, v8);

}

void sub_1003920E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_10039210C(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  void *i;
  uint64_t v6;
  void *v7;
  void *v8;
  id obj;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  obj = *(id *)(v1 + 352);
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v11 != v4)
          objc_enumerationMutation(obj);
        v6 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, CFSTR("Result"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v1 + 352), "objectForKeyedSubscript:", v6));
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", objc_msgSend(v7, "unsignedIntValue")));
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, CFSTR("NumberOfDailyReports"));

        sub_100015CC8(v1, 0x4Au, v2);
      }
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v3);
  }

  objc_msgSend(*(id *)(v1 + 352), "removeAllObjects");
}

void sub_1003922A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1003922E8(uint64_t a1, uint64_t a2, char a3, char a4)
{
  NSObject *v8;
  uint64_t v9;
  _QWORD v10[6];
  char v11;
  char v12;
  uint8_t buf[16];

  v8 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "reportEncryptionKeySizeStats", buf, 2u);
  }
  v9 = sub_10006BBAC();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1003923B0;
  v10[3] = &unk_1009186D0;
  v11 = a3;
  v12 = a4;
  v10[4] = a1;
  v10[5] = a2;
  sub_100041A34(v9, v10);
}

void sub_1003923B0(uint64_t a1)
{
  _WORD *v2;
  void *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  unint64_t *v12;

  v2 = *(_WORD **)(a1 + 32);
  __p = 0;
  v10 = 0;
  v11 = 0;
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10092A490);
  sub_10006CA88((uint64_t)off_100978148, (uint64_t **)&__p);
  v3 = __p;
  v2[304] = ((_DWORD)v10 - (_DWORD)__p) >> 3;
  if (*(_BYTE *)(a1 + 48))
  {
    ++v2[305];
    if (*(_BYTE *)(a1 + 49))
      ++v2[306];
    v4 = *(unsigned __int8 **)(a1 + 40);
    v8 = ((unint64_t)v4[128] << 40) | ((unint64_t)v4[129] << 32) | ((unint64_t)v4[130] << 24) | ((unint64_t)v4[131] << 16) | ((unint64_t)v4[132] << 8) | v4[133];
    v5 = (uint64_t)(v2 + 308);
    v12 = &v8;
    if (!*((_DWORD *)sub_100394AFC(v5, &v8, (uint64_t)&unk_100740F58, &v12) + 6))
    {
      v7 = 0;
      sub_10043FA40(*(_QWORD *)(a1 + 40), &v7);
      v6 = v7;
      v12 = &v8;
      *((_DWORD *)sub_100394AFC(v5, &v8, (uint64_t)&unk_100740F58, &v12) + 6) = v6;
    }
    v3 = __p;
  }
  if (v3)
  {
    v10 = v3;
    operator delete(v3);
  }
}

void sub_100392508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10039252C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_10006BBAC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10039258C;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

void sub_10039258C(uint64_t a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t **i;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  uint8_t buf[4];
  id v14;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = objc_alloc_init((Class)NSMutableDictionary);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(v1 + 608)));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, CFSTR("NumberOfDevices"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(v1 + 610)));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, CFSTR("NumberOfLowSecurityDevices"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(v1 + 612)));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v5, CFSTR("NumberOfEncryptionDowngrade"));

  for (i = *(uint64_t ***)(v1 + 632); i; i = (uint64_t **)*i)
  {
    v7 = *((unsigned int *)i + 6);
    v8 = sub_100649588((uint64_t)i[2]);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("LowSecurityDevice_%@"), v9));

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v7));
    objc_msgSend(v2, "setObject:forKey:", v10, v11);

  }
  v12 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v14 = v2;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "sendEncryptionKeySizeDailyMetric : %@", buf, 0xCu);
  }
  sub_100015CC8(v1, 0x4Bu, v2);

}

void sub_100392774(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1003927C8(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  _QWORD v4[5];
  __int128 v5;
  int v6;

  v5 = *a2;
  v6 = *((_DWORD *)a2 + 4);
  v3 = sub_10006BBAC();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100392838;
  v4[3] = &unk_10092A420;
  v4[4] = a1;
  sub_100041A34(v3, v4);
}

void sub_100392838(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v2 = *(_QWORD *)(a1 + 32);
  v8 = objc_alloc_init((Class)NSMutableDictionary);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 40)));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v3, CFSTR("Result"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 44)));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v4, CFSTR("NumberOfBTConnections"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 48)));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v5, CFSTR("BtConnectionDuration"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 52)));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v6, CFSTR("NumberOfBTEntryCounter"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 56)));
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v7, CFSTR("NumberOfBTExitCounter"));

  sub_100015CC8(v2, 0x67u, v8);
}

void sub_10039296C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1003929A4(uint64_t a1, uint64_t a2, const void ***a3)
{
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7[3];

  v5 = sub_10006BBAC();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  v6[2] = sub_100392A50;
  v6[3] = &unk_10092A440;
  v6[4] = a1;
  sub_1002F6144(v7, a3);
  sub_100041A34(v5, v6);
  sub_100056BAC((uint64_t)v7, (char *)v7[1]);
}

void sub_100392A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  uint64_t v15;

  sub_100056BAC(v15, a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100392A50(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  __CFString *v3;
  const char *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;
  _QWORD v18[2];

  v1 = (_QWORD *)a1[5];
  v17 = a1[4];
  v2 = a1 + 6;
  v3 = CFSTR("Unknown");
  if (v1 != a1 + 6)
  {
    do
    {
      v4 = (const char *)(v1 + 4);
      if (*((char *)v1 + 55) < 0)
        v4 = *(const char **)v4;
      if (!strcmp(v4, "A1603"))
      {
        v3 = CFSTR("A1603");
      }
      else if (!strcmp(v4, "A2051"))
      {
        v3 = CFSTR("A2051");
      }
      else if (!strcmp(v4, "A3085"))
      {
        v3 = CFSTR("A3085");
      }
      else if (!strcmp(v4, "A2538"))
      {
        v3 = CFSTR("A2538");
      }
      v5 = (_QWORD *)v1[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v1[2];
          v7 = *v6 == (_QWORD)v1;
          v1 = v6;
        }
        while (!v7);
      }
      v1 = v6;
    }
    while (v6 != v2);
  }
  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, v17 + 176);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v17 + 368), "objectForKey:", v3));

  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v17 + 368), "objectForKeyedSubscript:", v3));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndexedSubscript:", 0));
    v11 = objc_msgSend(v10, "unsignedIntValue") + 1;

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v11));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v17 + 368), "objectForKeyedSubscript:", v3));
    objc_msgSend(v13, "setObject:atIndexedSubscript:", v12, 0);

  }
  else if ((-[__CFString isEqualToString:](v3, "isEqualToString:", CFSTR("Unknown")) & 1) == 0)
  {
    v14 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObjects:](NSMutableArray, "arrayWithObjects:", &off_100960700, 0));
    v15 = *(void **)(v17 + 376);
    *(_QWORD *)(v17 + 376) = v14;

    objc_msgSend(*(id *)(v17 + 368), "setObject:forKeyedSubscript:", *(_QWORD *)(v17 + 376), v3);
  }
  sub_100034264((uint64_t)v18);
  return sub_100034234((uint64_t)v18);
}

void sub_100392C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100392CC0(uint64_t a1, uint64_t a2)
{
  return sub_1002F6144((uint64_t *)(a1 + 40), (const void ***)(a2 + 40));
}

void sub_100392CCC(uint64_t a1)
{
  sub_100056BAC(a1 + 40, *(char **)(a1 + 48));
}

void sub_100392CDC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  int v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "environment"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("XCTestConfigurationFilePath")));
  if (v6)
  {

  }
  else
  {
    v7 = _os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit");

    if (v7)
    {
      v8 = sub_10006BBAC();
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_100392E14;
      v9[3] = &unk_100918868;
      v11 = a1;
      v10 = v3;
      sub_100041A34(v8, v9);

    }
  }

}

void sub_100392DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_100392E14(uint64_t a1)
{
  sub_100015CC8(*(_QWORD *)(a1 + 40), 0x71u, *(void **)(a1 + 32));
}

void sub_100392E28(uint64_t a1)
{
  sub_1003936BC(a1);
  operator delete();
}

uint64_t sub_100392E5C(uint64_t a1)
{
  return sub_1003936BC(a1 - 16);
}

void sub_100392E64(uint64_t a1)
{
  sub_1003936BC(a1 - 16);
  operator delete();
}

void sub_100392EAC(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_100392F60(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100392F60(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_100393164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10039319C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE *v16;
  __int128 v17;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  if (*(char *)(a2 + 103) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 80), *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v7;
  }
  if (*(char *)(a2 + 127) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 104), *(void **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v8;
  }
  if (*(char *)(a2 + 151) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 128), *(void **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = v9;
  }
  if (*(char *)(a2 + 175) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 152), *(void **)(a2 + 152), *(_QWORD *)(a2 + 160));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = v10;
  }
  if (*(char *)(a2 + 199) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 176), *(void **)(a2 + 176), *(_QWORD *)(a2 + 184));
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = v11;
  }
  if (*(char *)(a2 + 223) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 200), *(void **)(a2 + 200), *(_QWORD *)(a2 + 208));
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = v12;
  }
  if (*(char *)(a2 + 247) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 224), *(void **)(a2 + 224), *(_QWORD *)(a2 + 232));
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = v13;
  }
  v14 = *(_OWORD *)(a2 + 248);
  v15 = *(_OWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = v15;
  *(_OWORD *)(a1 + 248) = v14;
  v16 = (_BYTE *)(a1 + 288);
  if (*(char *)(a2 + 311) < 0)
  {
    sub_10003430C(v16, *(void **)(a2 + 288), *(_QWORD *)(a2 + 296));
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 288);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_OWORD *)v16 = v17;
  }
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  return a1;
}

void sub_10039339C(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;

  if (v1[247] < 0)
    operator delete(*v8);
  if (v1[223] < 0)
    operator delete(*v7);
  if (v1[199] < 0)
    operator delete(*v6);
  if (v1[175] < 0)
    operator delete(*v5);
  if (v1[151] < 0)
    operator delete(*v4);
  if (v1[127] < 0)
    operator delete(*v3);
  if (v1[103] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100393448(uint64_t a1)
{
  if (*(char *)(a1 + 311) < 0)
    operator delete(*(void **)(a1 + 288));
  if (*(char *)(a1 + 247) < 0)
    operator delete(*(void **)(a1 + 224));
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  return a1;
}

uint64_t sub_1003934E8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = *a2;
  v5 = a2[1];
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  if (*((char *)a2 + 63) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 40), *((void **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 40);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
    *(_OWORD *)(a1 + 40) = v6;
  }
  if (*((char *)a2 + 87) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 64), *((void **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v7 = a2[4];
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    *(_OWORD *)(a1 + 64) = v7;
  }
  if (*((char *)a2 + 111) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 88), *((void **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 88);
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
    *(_OWORD *)(a1 + 88) = v8;
  }
  v9 = (_BYTE *)(a1 + 112);
  if (*((char *)a2 + 135) < 0)
  {
    sub_10003430C(v9, *((void **)a2 + 14), *((_QWORD *)a2 + 15));
  }
  else
  {
    v10 = a2[7];
    *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(__int128 *)((char *)a2 + 136);
  v12 = *(__int128 *)((char *)a2 + 152);
  v13 = *(__int128 *)((char *)a2 + 168);
  *(_DWORD *)(a1 + 184) = *((_DWORD *)a2 + 46);
  *(_OWORD *)(a1 + 168) = v13;
  *(_OWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 136) = v11;
  return a1;
}

void sub_100393610(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[111] < 0)
    operator delete(*v4);
  if (v1[87] < 0)
    operator delete(*v3);
  if (v1[63] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10039365C(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

uint64_t sub_1003936BC(uint64_t a1)
{
  *(_QWORD *)a1 = off_100929C68;
  *(_QWORD *)(a1 + 8) = &off_100929FE8;
  *(_QWORD *)(a1 + 16) = off_10092A000;
  *(_QWORD *)(a1 + 24) = &off_10092A040;
  *(_QWORD *)(a1 + 32) = off_10092A058;
  *(_QWORD *)(a1 + 40) = off_10092A088;
  *(_QWORD *)(a1 + 48) = off_10092A0D8;
  *(_QWORD *)(a1 + 56) = &off_10092A108;
  *(_QWORD *)(a1 + 64) = off_10092A120;
  *(_QWORD *)(a1 + 72) = &off_10092A1D0;
  *(_QWORD *)(a1 + 80) = off_10092A1E8;

  sub_10001A82C(a1 + 656, *(_QWORD **)(a1 + 664));
  sub_1000B69C0(a1 + 616);
  sub_10001A82C(a1 + 496, *(_QWORD **)(a1 + 504));
  sub_10001A82C(a1 + 472, *(_QWORD **)(a1 + 480));
  sub_1002BB6B8(a1 + 432, *(_QWORD **)(a1 + 440));
  sub_10001A82C(a1 + 408, *(_QWORD **)(a1 + 416));
  sub_1003937DC(a1 + 384, *(_QWORD **)(a1 + 392));

  sub_100069BDC(a1 + 240);
  sub_100069BDC(a1 + 176);

  return a1;
}

void sub_1003937DC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1003937DC(a1, *a2);
    sub_1003937DC(a1, a2[1]);
    sub_100393824((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_100393824(uint64_t a1)
{

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100393894(id a1)
{
  operator new();
}

void sub_1003938D4()
{
  operator delete();
}

void sub_1003938F8(id a1)
{
  operator new();
}

void sub_100393938()
{
  operator delete();
}

void sub_10039395C(id a1)
{
  operator new();
}

void sub_10039399C()
{
  operator delete();
}

void sub_1003939C0(id a1)
{
  operator new();
}

void sub_100393AD8()
{
  operator delete();
}

void sub_100393AFC(id a1)
{
  operator new();
}

void sub_100393B3C()
{
  operator delete();
}

void sub_100393B60(id a1)
{
  operator new();
}

void sub_100393BA0()
{
  operator delete();
}

void sub_100393BC4(id a1)
{
  operator new();
}

void sub_100393C04()
{
  operator delete();
}

void sub_100393C28(id a1)
{
  operator new();
}

void sub_100393C68()
{
  operator delete();
}

void sub_100393C8C(id a1)
{
  operator new();
}

void sub_100393CCC()
{
  operator delete();
}

void sub_100393CF0(id a1)
{
  operator new();
}

void sub_100393D30()
{
  operator delete();
}

uint64_t sub_100393D54(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      sub_1002F621C((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_100393DBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100056BAC(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100393DD4(id a1)
{
  operator new();
}

void sub_100393E14()
{
  operator delete();
}

uint64_t sub_100393E38(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if (!sub_100091A80(v4, a2, v2 + 4))
      {
        if (!sub_100091A80(v4, v2 + 4, a2))
          return v5;
        ++v2;
      }
      v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t sub_100393EB4(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_10001F2AC((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_1000040CC(a1, v3);
  sub_100393824((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

_DWORD *sub_100393F0C(uint64_t **a1, uint64_t a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  _DWORD *v7;
  uint64_t **v8;
  __int16 v9;
  uint64_t v11;

  v11 = 0;
  v6 = sub_100393FA0((uint64_t)a1, &v11, a2);
  v7 = (_DWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v9 = *((_WORD *)*a4 + 2);
    v7[8] = **a4;
    *((_WORD *)v7 + 18) = v9;
    *((_QWORD *)v7 + 5) = 0;
    *((_QWORD *)v7 + 6) = 0;
    sub_100004078(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_100393FA0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    while (1)
    {
      v6 = v4;
      v7 = bswap32(*(_DWORD *)a3);
      v8 = bswap32(*((_DWORD *)v6 + 8));
      if (v7 != v8)
        goto LABEL_8;
      v7 = bswap32(*(unsigned __int16 *)(a3 + 4)) >> 16;
      v9 = bswap32(*((unsigned __int16 *)v6 + 18));
      if (v7 == HIWORD(v9))
      {
LABEL_12:
        v11 = bswap32(*((_DWORD *)v6 + 8));
        v12 = bswap32(*(_DWORD *)a3);
        if (v11 == v12)
        {
          v11 = bswap32(*((unsigned __int16 *)v6 + 18)) >> 16;
          v13 = bswap32(*(unsigned __int16 *)(a3 + 4));
          if (v11 == HIWORD(v13))
            goto LABEL_22;
          v12 = HIWORD(v13);
        }
        if (v11 < v12)
          v14 = -1;
        else
          v14 = 1;
        if ((v14 & 0x80000000) == 0)
          goto LABEL_22;
        result = v6 + 1;
        v4 = (uint64_t *)v6[1];
        if (!v4)
          goto LABEL_22;
      }
      else
      {
        v8 = HIWORD(v9);
LABEL_8:
        if (v7 < v8)
          v10 = -1;
        else
          v10 = 1;
        if ((v10 & 0x80000000) == 0)
          goto LABEL_12;
        v4 = (uint64_t *)*v6;
        result = v6;
        if (!*v6)
          goto LABEL_22;
      }
    }
  }
  v6 = result;
LABEL_22:
  *a2 = v6;
  return result;
}

_OWORD *sub_100394078(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  v6 = (void **)sub_10001F574((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v13 = 0;
    v7 = operator new(0xA0uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *(_OWORD *)((char *)v7 + 56) = 0u;
    *(_OWORD *)((char *)v7 + 72) = 0u;
    *(_OWORD *)((char *)v7 + 88) = 0u;
    *(_OWORD *)((char *)v7 + 104) = 0u;
    *(_OWORD *)((char *)v7 + 120) = 0u;
    *(_OWORD *)((char *)v7 + 136) = 0u;
    *((_QWORD *)v7 + 19) = 0;
    LOBYTE(v13) = 1;
    sub_100004078(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_10039415C((uint64_t)v12, 0);
  }
  return v7;
}

void sub_10039415C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100393824((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_1003941A0(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_1003941F0((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_1000040CC(a1, v3);
  operator delete(v4);
  return 1;
}

uint64_t sub_1003941F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v4 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 8;
  v3 = v4;
  if (!v4)
    return v2;
  v5 = v2;
  do
  {
    v6 = bswap32(*(_DWORD *)(v3 + 32));
    v7 = bswap32(*(_DWORD *)a2);
    if (v6 != v7)
      goto LABEL_7;
    v6 = bswap32(*(unsigned __int16 *)(v3 + 36)) >> 16;
    v8 = bswap32(*(unsigned __int16 *)(a2 + 4));
    if (v6 != HIWORD(v8))
    {
      v7 = HIWORD(v8);
LABEL_7:
      if (v6 < v7)
        v9 = -1;
      else
        v9 = 1;
      goto LABEL_10;
    }
    v9 = 0;
LABEL_10:
    v10 = v9 < 0;
    if (v9 >= 0)
      v11 = (uint64_t *)v3;
    else
      v11 = (uint64_t *)(v3 + 8);
    if (!v10)
      v5 = v3;
    v3 = *v11;
  }
  while (*v11);
  if (v5 == v2)
    return v2;
  v12 = bswap32(*(_DWORD *)a2);
  v13 = bswap32(*(_DWORD *)(v5 + 32));
  if (v12 != v13)
    goto LABEL_20;
  v12 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16;
  v14 = bswap32(*(unsigned __int16 *)(v5 + 36));
  if (v12 != HIWORD(v14))
  {
    v13 = HIWORD(v14);
LABEL_20:
    v15 = v12 < v13 ? -1 : 1;
    if (v15 < 0)
      return v2;
  }
  return v5;
}

uint64_t sub_1003942C8(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_1003941F0((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  sub_10039430C(a1, v3);
  return 1;
}

uint64_t *sub_10039430C(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = sub_1000040CC(a1, (uint64_t *)a2);
  sub_10001A82C(a2 + 40, *(_QWORD **)(a2 + 48));
  operator delete((void *)a2);
  return v3;
}

uint64_t sub_100394348(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    result = 1;
    while (1)
    {
      v4 = bswap32(*(_DWORD *)a2);
      v5 = bswap32(*((_DWORD *)v2 + 8));
      if (v4 == v5)
      {
        v4 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16;
        v6 = bswap32(*((unsigned __int16 *)v2 + 18));
        if (v4 == HIWORD(v6))
          break;
        v5 = HIWORD(v6);
      }
      v7 = v4 < v5 ? -1 : 1;
      if ((v7 & 0x80000000) == 0)
        break;
LABEL_19:
      v2 = (uint64_t *)*v2;
      if (!v2)
        return 0;
    }
    v8 = bswap32(*((_DWORD *)v2 + 8));
    v9 = bswap32(*(_DWORD *)a2);
    if (v8 == v9)
    {
      v8 = bswap32(*((unsigned __int16 *)v2 + 18)) >> 16;
      v10 = bswap32(*(unsigned __int16 *)(a2 + 4));
      if (v8 == HIWORD(v10))
      {
        v11 = 0;
LABEL_17:
        if ((v11 & 0x80000000) == 0)
          return result;
        ++v2;
        goto LABEL_19;
      }
      v9 = HIWORD(v10);
    }
    if (v8 < v9)
      v11 = -1;
    else
      v11 = 1;
    goto LABEL_17;
  }
  return 0;
}

_DWORD *sub_100394408(uint64_t **a1, uint64_t a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  _DWORD *v7;
  uint64_t **v8;
  __int16 v9;
  uint64_t v11;

  v11 = 0;
  v6 = sub_100393FA0((uint64_t)a1, &v11, a2);
  v7 = (_DWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *((_WORD *)*a4 + 2);
    v7[8] = **a4;
    *((_WORD *)v7 + 18) = v9;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 6) = 0;
    *((_QWORD *)v7 + 5) = v7 + 12;
    sub_100004078(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t **sub_1003944A8(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _BYTE *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int8 *)v6 + 28);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x28uLL);
    v11[28] = **a4;
    *((_DWORD *)v11 + 8) = 0;
    sub_100004078(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *sub_100394568(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (uint64_t **)sub_10001F574((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_10039461C((uint64_t)a1, a4, v10);
    sub_100004078(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_10039415C((uint64_t)v10, 0);
  }
  return v7;
}

double sub_10039461C@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  __int128 *v8;
  __int128 v9;
  double result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0xA0uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  v7 = v6 + 32;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_10003430C(v7, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)v7 = v9;
  }
  *((_QWORD *)v6 + 19) = 0;
  result = 0.0;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1003946B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10039415C(v1, 0);
  _Unwind_Resume(a1);
}

