uint64_t *sub_1005DB3A4(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1005DB3F8(a1, *a2, a2 + 1);
  return a1;
}

void sub_1005DB3E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100056BAC(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1005DB3F8(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1005DB47C(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1005DB47C(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;
  const void **v10;

  v9 = 0;
  v10 = 0;
  v6 = (uint64_t **)sub_1002A4958(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1005DB508((uint64_t)a1, a4, v8);
    sub_100004078(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

_BYTE *sub_1005DB508@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  _BYTE *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = v7 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_10003430C(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a2 + 16);
  }
  v7[56] = *(_BYTE *)(a2 + 24);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1005DB59C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1002A4BA0(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1005DB5B8(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_10001F574((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1005DB658((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

_BYTE *sub_1005DB658@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  _BYTE *result;
  __int128 *v9;
  __int128 v10;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = v7 + 32;
  v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_10003430C(result, *(void **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v10 = *v9;
    *((_QWORD *)v7 + 6) = *((_QWORD *)v9 + 2);
    *(_OWORD *)result = v10;
  }
  *((_WORD *)v7 + 28) = 0;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1005DB6EC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1002A4BA0(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1005DB708(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t v9;
  int v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t **v22;
  int v23;
  int v24;
  __n128 __p;
  char v26;
  uint8_t buf[16];
  char v28;
  __int128 v29;
  int v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;
  __int128 v35;
  int v36;
  __int128 v37;
  int v38;
  __int128 v39;
  int v40;
  __n128 v41;
  int v42;
  __n128 v43;
  int v44;
  __int128 v45;
  int v46;
  __int128 v47;
  int v48;
  __int128 v49;
  int v50;
  __int128 v51;
  int v52;
  __int128 v53;
  int v54;
  __int128 v55;
  int v56;
  __int128 v57;
  int v58;
  __int128 v59;
  int v60;
  __int128 v61;
  int v62;
  __int128 v63;
  int v64;
  __int128 v65;
  int v66;
  __int128 v67;
  int v68;
  __int128 v69;
  int v70;
  __int128 v71;
  int v72;
  __int128 v73;
  int v74;

  *(_QWORD *)(a1 + 16) = off_10093C760;
  v2 = a1 + 16;
  *(_QWORD *)(a1 + 24) = off_10093C790;
  v3 = a1 + 24;
  *(_QWORD *)(a1 + 32) = off_10093C7C0;
  v4 = a1 + 32;
  *(_QWORD *)a1 = off_10093C6D8;
  *(_QWORD *)(a1 + 8) = &off_10093C748;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  v5 = (uint64_t **)(a1 + 72);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 128;
  v22 = (uint64_t **)(a1 + 120);
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 256;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  v6 = (uint64_t **)(a1 + 144);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 30;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  v74 = 0;
  v73 = xmmword_10073B314;
  sub_100042F44((__n128 *)buf, (__n128 *)&v73);
  sub_10000BED0(v5, buf, (uint64_t)buf);
  v71 = xmmword_10073B328;
  v72 = 0;
  sub_100042F44((__n128 *)buf, (__n128 *)&v71);
  sub_10000BED0(v5, buf, (uint64_t)buf);
  v69 = xmmword_10073B4A4;
  v70 = 0;
  sub_100042F44((__n128 *)buf, (__n128 *)&v69);
  sub_10000BED0(v5, buf, (uint64_t)buf);
  v67 = xmmword_10073B4CC;
  v68 = 0;
  sub_100042F44((__n128 *)buf, (__n128 *)&v67);
  sub_10000BED0(v5, buf, (uint64_t)buf);
  v65 = xmmword_10073B4E0;
  v66 = -805294830;
  sub_100042F44((__n128 *)buf, (__n128 *)&v65);
  sub_10000BED0(v5, buf, (uint64_t)buf);
  v63 = xmmword_10073B4F4;
  v64 = -587704915;
  sub_100042F44((__n128 *)buf, (__n128 *)&v63);
  sub_10000BED0(v5, buf, (uint64_t)buf);
  v61 = xmmword_10073B508;
  v62 = -1765695659;
  sub_100042F44((__n128 *)buf, (__n128 *)&v61);
  sub_10000BED0(v5, buf, (uint64_t)buf);
  v59 = xmmword_10073B544;
  v60 = 0;
  sub_100042F44((__n128 *)buf, (__n128 *)&v59);
  sub_10000BED0(v5, buf, (uint64_t)buf);
  v57 = xmmword_10073B5FC;
  v58 = 1880579407;
  sub_100042F44((__n128 *)buf, (__n128 *)&v57);
  sub_10000BED0(v5, buf, (uint64_t)buf);
  v55 = xmmword_10073B530;
  v56 = -1171415960;
  sub_100042F44((__n128 *)buf, (__n128 *)&v55);
  sub_10000BED0(v5, buf, (uint64_t)buf);
  v53 = xmmword_10073B5A8;
  v54 = 1729713604;
  sub_100042F44((__n128 *)buf, (__n128 *)&v53);
  sub_10000BED0(v5, buf, (uint64_t)buf);
  v51 = xmmword_10073B638;
  v52 = -815610143;
  sub_100042F44((__n128 *)buf, (__n128 *)&v51);
  sub_10000BED0(v5, buf, (uint64_t)buf);
  v49 = xmmword_10073B64C;
  v50 = 1323364242;
  sub_100042F44((__n128 *)buf, (__n128 *)&v49);
  sub_10000BED0(v5, buf, (uint64_t)buf);
  v47 = xmmword_10073B660;
  v48 = 0;
  sub_100042F44((__n128 *)buf, (__n128 *)&v47);
  sub_10000BED0(v5, buf, (uint64_t)buf);
  v45 = xmmword_10073B688;
  v46 = 0;
  sub_100042F44((__n128 *)buf, (__n128 *)&v45);
  sub_10000BED0(v5, buf, (uint64_t)buf);
  v43 = 0uLL;
  v44 = 0;
  *(_OWORD *)buf = xmmword_100742CE0;
  sub_10005F660((int8x16_t *)buf, 16, 0, (uint64_t)&v43);
  v41 = v43;
  v42 = v44;
  sub_100042F44((__n128 *)buf, &v41);
  sub_10000BED0(v5, buf, (uint64_t)buf);
  v39 = xmmword_10073B594;
  v40 = 0;
  sub_100042F44((__n128 *)buf, (__n128 *)&v39);
  sub_10000BED0(v5, buf, (uint64_t)buf);
  v37 = xmmword_10073B5BC;
  v38 = 2027922698;
  sub_100042F44((__n128 *)buf, (__n128 *)&v37);
  sub_10000BED0(v22, buf, (uint64_t)buf);
  v35 = xmmword_10073B580;
  v36 = 0;
  sub_100042F44((__n128 *)buf, (__n128 *)&v35);
  __p.n128_u64[0] = (unint64_t)buf;
  v7 = (uint64_t **)sub_1003FA88C(v6, buf, (uint64_t)&unk_100740F58, &__p);
  v33 = xmmword_10073B610;
  v34 = 295542594;
  sub_100042F44(&__p, (__n128 *)&v33);
  sub_10000BED0(v7 + 7, (unsigned __int8 *)&__p, (uint64_t)&__p);
  v31 = xmmword_10073B580;
  v32 = 0;
  sub_100042F44((__n128 *)buf, (__n128 *)&v31);
  __p.n128_u64[0] = (unint64_t)buf;
  v8 = (uint64_t **)sub_1003FA88C(v6, buf, (uint64_t)&unk_100740F58, &__p);
  v29 = xmmword_10073B624;
  v30 = 312319810;
  sub_100042F44(&__p, (__n128 *)&v29);
  sub_10000BED0(v8 + 7, (unsigned __int8 *)&__p, (uint64_t)&__p);
  v24 = 0;
  v9 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(&__p, "MaxUnpairedDatabasesCached");
  v10 = (*(uint64_t (**)(uint64_t, uint8_t *, __n128 *, int *))(*(_QWORD *)v9 + 88))(v9, buf, &__p, &v24);
  if (v26 < 0)
    operator delete((void *)__p.n128_u64[0]);
  if (v28 < 0)
  {
    operator delete(*(void **)buf);
    if (!v10)
      goto LABEL_13;
  }
  else if (!v10)
  {
    goto LABEL_13;
  }
  v11 = v24;
  v12 = qword_100999820;
  if (v24 < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070BA70();
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Warning: Using override value (%d) for max number of unpaired databases to be cached", buf, 8u);
      LOWORD(v11) = v24;
    }
    *(_WORD *)(a1 + 240) = v11;
  }
LABEL_13:
  v23 = 0;
  v13 = sub_100027F68();
  sub_100091AE8(buf, "GATT");
  sub_100091AE8(&__p, "MTU");
  v14 = (*(uint64_t (**)(uint64_t, uint8_t *, __n128 *, int *))(*(_QWORD *)v13 + 88))(v13, buf, &__p, &v23);
  if (v26 < 0)
    operator delete((void *)__p.n128_u64[0]);
  if (v28 < 0)
    operator delete(*(void **)buf);
  v15 = v23;
  if (v23)
    v16 = v14;
  else
    v16 = 0;
  if (v16 == 1)
  {
    v17 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Using Gatt MTU override of %d", buf, 8u);
      LOWORD(v15) = v23;
    }
    *(_WORD *)(a1 + 242) = v15;
  }
  *(_BYTE *)(a1 + 244) = 0;
  v18 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18))
  {
    v19 = sub_100027F68();
    sub_100091AE8(buf, "GATT");
    sub_100091AE8(&__p, "StartInitSequenceOnConnectionComplete");
    if ((*(unsigned int (**)(uint64_t, uint8_t *, __n128 *, uint64_t))(*(_QWORD *)v19 + 72))(v19, buf, &__p, a1 + 244))
    {
      v20 = *(_BYTE *)(a1 + 244) != 0;
    }
    else
    {
      v20 = 0;
    }
    if (v26 < 0)
      operator delete((void *)__p.n128_u64[0]);
    if (v28 < 0)
    {
      operator delete(*(void **)buf);
      if (!v20)
        goto LABEL_36;
    }
    else if (!v20)
    {
      goto LABEL_36;
    }
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070BA44();
  }
LABEL_36:
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093C988);
  sub_1002609C8((uint64_t)off_100977A50 + 64, v2);
  if (qword_10097AC28 != -1)
    dispatch_once(&qword_10097AC28, &stru_10093C9A8);
  sub_100484B48(qword_10097AC20, a1);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093C9C8);
  sub_10007A76C((uint64_t)off_1009778E0 + 240, v3);
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10093C9E8);
  sub_100695F80((_QWORD *)qword_1009778B0, v4);
  return a1;
}

void sub_1005DC0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005DC21C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)(a1 + 16) = off_10093C760;
  v2 = a1 + 16;
  *(_QWORD *)a1 = off_10093C6D8;
  *(_QWORD *)(a1 + 8) = &off_10093C748;
  *(_QWORD *)(a1 + 24) = off_10093C790;
  v3 = a1 + 24;
  *(_QWORD *)(a1 + 32) = off_10093C7C0;
  v4 = a1 + 32;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093C988);
  sub_100069060((uint64_t)off_100977A50 + 64, v2);
  if (qword_10097AC28 != -1)
    dispatch_once(&qword_10097AC28, &stru_10093C9A8);
  sub_100484BD8(qword_10097AC20, a1);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093C9C8);
  sub_100069060((uint64_t)off_1009778E0 + 240, v3);
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10093C9E8);
  sub_1006960C4(qword_1009778B0, v4);
  sub_100068038(a1 + 248, *(_QWORD **)(a1 + 256));
  sub_1005E6DA4(a1 + 216, *(_QWORD **)(a1 + 224));
  sub_1005E6D28(a1 + 192, *(_QWORD **)(a1 + 200));
  sub_100068038(a1 + 168, *(_QWORD **)(a1 + 176));
  sub_1003FA704(a1 + 144, *(_QWORD **)(a1 + 152));
  sub_10001A82C(a1 + 120, *(_QWORD **)(a1 + 128));
  sub_10001A82C(a1 + 96, *(_QWORD **)(a1 + 104));
  sub_10001A82C(a1 + 72, *(_QWORD **)(a1 + 80));
  v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(_QWORD *)(a1 + 56) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_1005DC3D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  sub_100068038(v1 + 248, *(_QWORD **)(v1 + 256));
  sub_1005E6DA4(v1 + 216, *(_QWORD **)(v1 + 224));
  sub_1005E6D28(v1 + 192, *(_QWORD **)(v1 + 200));
  sub_100068038(v1 + 168, *(_QWORD **)(v1 + 176));
  sub_1003FA704(v1 + 144, *(_QWORD **)(v1 + 152));
  sub_10001A82C(v1 + 120, *(_QWORD **)(v1 + 128));
  sub_10001A82C(v1 + 96, *(_QWORD **)(v1 + 104));
  sub_10001A82C(v1 + 72, *(_QWORD **)(v1 + 80));
  v3 = *(void **)(v1 + 48);
  if (v3)
  {
    *(_QWORD *)(v1 + 56) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_1005DC450(uint64_t a1)
{
  sub_1005DC21C(a1);
  operator delete();
}

_BYTE *sub_1005DC474(uint64_t a1)
{
  char v3;

  v3 = 0;
  sub_100043758(&v3);
  if (sub_100225224())
  {
    if (sub_1002262D0() && os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070BAD0();
    sub_10020A71C(sub_1005DC53C, 0);
    sub_10020A6F8(sub_1005DC74C);
    if (*(_WORD *)(a1 + 242))
      sub_10020F490(*(unsigned __int16 *)(a1 + 242));
    sub_10004339C(&v3);
  }
  return sub_100043728(&v3);
}

void sub_1005DC524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_1005DC53C(uint64_t a1, __int16 a2, const void *a3, unsigned int a4, char a5, uint64_t a6)
{
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _QWORD v15[6];
  uint64_t (**v16)();
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  uint64_t (**v22)();
  unsigned int *v23;

  v22 = 0;
  v23 = 0;
  sub_10003994C(&v22, a3, a4);
  v10 = sub_1002A8C20();
  if (sub_10019AC00(a1))
  {
    v11 = (unsigned __int8 *)sub_10019B0F0(a1);
    if (v11)
    {
      v12 = ((unint64_t)v11[1] << 40) | ((unint64_t)v11[2] << 32) | ((unint64_t)v11[3] << 24) | ((unint64_t)v11[4] << 16) | ((unint64_t)v11[5] << 8) | v11[6] | ((unint64_t)*v11 << 48);
LABEL_8:
      v14 = sub_1000419F4();
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3321888768;
      v15[2] = sub_1005E55B0;
      v15[3] = &unk_10093C930;
      v15[4] = a1;
      v15[5] = v12;
      v20 = a2;
      v16 = &off_100918258;
      v17 = v23;
      if (v23)
        sub_10003C37C((uint64_t)v23);
      v21 = a5;
      v18 = a6;
      v19 = v10;
      sub_100041A34(v14, v15);
      v16 = &off_100918258;
      if (v17)
        sub_100056AAC(v17);
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (sub_10019AB28(a1))
  {
    v13 = (unsigned __int8 *)sub_10019B144(a1);
    if (v13)
    {
      v12 = ((unint64_t)*v13 << 40) | ((unint64_t)v13[1] << 32) | ((unint64_t)v13[2] << 24) | ((unint64_t)v13[3] << 16) | ((unint64_t)v13[4] << 8) | v13[5];
      goto LABEL_8;
    }
LABEL_7:
    v12 = 0;
    goto LABEL_8;
  }
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    sub_10070BB30();
LABEL_14:
  v22 = &off_100918258;
  if (v23)
    sub_100056AAC(v23);
}

void sub_1005DC704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  unsigned int *v19;

  *(_QWORD *)(v17 - 80) = &off_100918258;
  v19 = *(unsigned int **)(v17 - 72);
  if (v19)
    sub_100056AAC(v19);
  _Unwind_Resume(exception_object);
}

void sub_1005DC74C()
{
  uint64_t v0;

  v0 = sub_1000419F4();
  sub_100041A34(v0, &stru_10093C910);
}

_BYTE *sub_1005DC768(uint64_t a1)
{
  return sub_1005DC474(a1 - 16);
}

_BYTE *sub_1005DC770(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v6[5];
  char v7;
  uint8_t buf[16];

  v2 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "GattGateway::stackWillStop enter", buf, 2u);
  }
  v7 = 0;
  sub_100043758(&v7);
  if (sub_100225224())
  {
    sub_10020A754(sub_1005DC53C);
    sub_100226290();
    sub_10004339C(&v7);
    v3 = sub_1000419F4();
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1005DC8A0;
    v6[3] = &unk_100917378;
    v6[4] = a1;
    sub_100023D84(v3, v6);
    v4 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "GattGateway::stackWillStop exit", buf, 2u);
    }
  }
  return sub_100043728(&v7);
}

void sub_1005DC88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_100043728(&a17);
  _Unwind_Resume(a1);
}

void sub_1005DC8A0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(a1 + 32);
  sub_1005E6D28(v1 + 192, *(_QWORD **)(v1 + 200));
  *(_QWORD *)(v1 + 192) = v1 + 200;
  *(_QWORD *)(v1 + 200) = 0;
  v2 = *(_QWORD **)(v1 + 224);
  v1 += 224;
  *(_QWORD *)(v1 - 16) = 0;
  sub_1005E6DA4(v1 - 8, v2);
  *(_QWORD *)(v1 - 8) = v1;
  *(_QWORD *)v1 = 0;
  *(_QWORD *)(v1 + 8) = 0;
  sub_100068038(v1 + 24, *(_QWORD **)(v1 + 32));
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 24) = v1 + 32;
}

_BYTE *sub_1005DC904(uint64_t a1)
{
  return sub_1005DC770(a1 - 16);
}

void sub_1005DC90C(uint64_t a1, unsigned __int8 *a2, int a3)
{
  NSObject *v6;
  void **v7;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  void **v13;
  id v14;
  uint64_t v15;
  void *v16;
  void **v17;
  _QWORD v18[6];
  void *__p[2];
  char v20;
  uint8_t buf[4];
  void **v22;
  __int16 v23;
  uint64_t v24;

  v6 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO)
    && ((sub_10043E5F8((uint64_t)a2, __p), v20 >= 0) ? (v7 = __p) : (v7 = (void **)__p[0]),
        *(_DWORD *)buf = 136446466,
        v22 = v7,
        v23 = 1024,
        LODWORD(v24) = a3,
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "deviceInfoChanged device %{public}s infoChanged:%d", buf, 0x12u), v20 < 0))
  {
    operator delete(__p[0]);
    if (a2)
      goto LABEL_7;
  }
  else if (a2)
  {
LABEL_7:
    v8 = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
    v9 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEBUG))
    {
      sub_10043E5F8((uint64_t)a2, __p);
      v12 = v20;
      v13 = (void **)__p[0];
      v14 = sub_100649588(v8);
      v15 = objc_claimAutoreleasedReturnValue(v14);
      v16 = (void *)v15;
      v17 = __p;
      if (v12 < 0)
        v17 = v13;
      *(_DWORD *)buf = 136446466;
      v22 = v17;
      v23 = 2114;
      v24 = v15;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "deviceInfoChanged device %{public}s address %{public}@", buf, 0x16u);
      if (v20 < 0)
        operator delete(__p[0]);

    }
    if (a3 == 4099)
    {
      v10 = sub_1000419F4();
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_1005DCB88;
      v18[3] = &unk_100918090;
      v18[4] = a1;
      v18[5] = v8;
      sub_100041A34(v10, v18);
    }
    return;
  }
  v11 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "deviceInfoChanged invalid device", (uint8_t *)__p, 2u);
  }
}

void sub_1005DCB64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DCB88(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  void **v5;
  id v6;
  uint64_t v7;
  void *v8;
  void **v9;
  id v10;
  void *v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  void **v15;
  __int16 v16;
  uint64_t v17;
  unsigned __int8 uu[8];
  uint64_t v19;
  char out[40];

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093CA08);
  *(_QWORD *)uu = 0;
  v19 = 0;
  sub_10003F924((uint64_t)off_1009778C0, *(_QWORD *)(a1 + 40), 0, 1u, 0, 0, uu);
  if (!uuid_is_null(uu))
  {
    v3 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      memset(out, 0, 37);
      uuid_unparse_upper(uu, out);
      sub_100091AE8(__p, out);
      v4 = v13;
      v5 = (void **)__p[0];
      v6 = sub_100649588(*(_QWORD *)(a1 + 40));
      v7 = objc_claimAutoreleasedReturnValue(v6);
      v8 = (void *)v7;
      v9 = __p;
      if (v4 < 0)
        v9 = v5;
      *(_DWORD *)buf = 136446466;
      v15 = v9;
      v16 = 2114;
      v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "deviceInfoChanged Clearing device DB for device %{public}s (%{public}@)", buf, 0x16u);
      if (v13 < 0)
        operator delete(__p[0]);

    }
    v10 = sub_100030DF4(uu);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    sub_1005DCD50(v2, v11);

  }
}

void sub_1005DCD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005DCD50(uint64_t a1, void *a2)
{
  id v3;
  uint64_t **v4;
  uint64_t *v5;
  NSObject *v6;
  int v7;
  id v8;

  v3 = a2;
  sub_100030BCC(&v7, v3);
  v4 = (uint64_t **)(a1 + 216);
  v5 = (uint64_t *)sub_10000C5B8(a1 + 216, (unsigned __int8 *)&v7);
  if ((uint64_t *)(a1 + 224) != v5)
  {
    v6 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v7 = 138543362;
      v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Clearing database cache for device \"%{public}@\"", (uint8_t *)&v7, 0xCu);
    }
    sub_1000040CC(v4, v5);
    sub_10009F88C((uint64_t)(v5 + 6));
    operator delete(v5);
  }

}

void sub_1005DCE4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005DCE64(uint64_t a1, unsigned __int8 *a2, int a3)
{
  sub_1005DC90C(a1 - 24, a2, a3);
}

void sub_1005DCE6C(uint64_t a1, void *a2, int a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  uint8_t buf[4];
  id v12;
  __int16 v13;
  int v14;

  v5 = a2;
  v6 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v12 = v5;
    v13 = 1024;
    v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "GattGateway device %@ paired with result %d", buf, 0x12u);
  }
  if (!a3)
  {
    v7 = sub_1000419F4();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1005DCFB0;
    v8[3] = &unk_100918868;
    v10 = a1;
    v9 = v5;
    sub_100041A34(v7, v8);

  }
}

void sub_1005DCF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1005DCFB0(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3[16];

  v2 = *(_QWORD *)(a1 + 40);
  sub_100030BCC(v3, *(_QWORD *)(a1 + 32));
  sub_1005DD030(v2, v3);
  sub_100030BCC(v3, *(_QWORD *)(a1 + 32));
  sub_1005DDCE8(v2, v3);
}

void sub_1005DD030(uint64_t a1, unsigned __int8 *a2)
{
  id v4;
  void *v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  __int16 v21;
  NSObject *v22;
  id v23;
  void *v24;
  uint64_t v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  _BOOL4 v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  NSObject *v46;
  uint8_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  BOOL v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[4];
  id v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  void *v63[2];
  char v64;
  void *__p[2];
  char v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint8_t buf[16];
  int v73;
  char v74;
  _BYTE v75[12];
  __int16 v76;
  void *v77;
  __int128 v78;
  int v79;
  __int128 v80;
  int v81;
  __int128 v82;
  int v83;
  __n128 v84;
  int v85;
  __int128 v86;
  int v87;
  __int128 v88;
  int v89;
  uint8_t v90[16];
  __int128 v91;
  int v92;
  __int128 v93;
  int v94;
  __int128 v95;
  int v96;
  __int128 v97;
  int v98;
  __int128 v99;
  int v100;
  __int128 v101;
  int v102;
  __int128 v103;
  int v104;

  v4 = sub_100030DF4(a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093CA08);
  if (sub_10065DC34((uint64_t)off_1009778C0, v5))
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEBUG))
      sub_10070BB5C();
  }
  else
  {
    v69 = 0;
    v70 = 0;
    v71 = 0;
    *(_QWORD *)buf = a2;
    v6 = sub_1005E7A18((uint64_t **)(a1 + 248), a2, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)buf);
    sub_1005E7B4C((uint64_t)&v69, (uint64_t)(v6 + 6));
    v7 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Trying to detect built in services on device %@", buf, 0xCu);
    }
    v67 = 0;
    v68 = 0;
    sub_100030BCC(buf, v5);
    sub_1005DFD54(a1, buf, 0, &v67);
    if (v67)
    {
      sub_1004B5DC8(v67, (uint64_t)"");
      v8 = v67;
      v103 = xmmword_10073B4A4;
      v104 = 0;
      sub_100042F44((__n128 *)buf, (__n128 *)&v103);
      sub_100069AFC(v75);
      v9 = sub_1004B535C(v8, buf, v75);
      if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
      {
        v101 = xmmword_10073B4A4;
        v102 = 0;
        sub_100042F44((__n128 *)buf, (__n128 *)&v101);
        if (sub_1005E06D8(a1, buf, v5))
          v9 = 0;
      }
      v10 = v67;
      v99 = xmmword_10073B5A8;
      v100 = 1729713604;
      sub_100042F44((__n128 *)buf, (__n128 *)&v99);
      sub_100069AFC(v75);
      v11 = sub_1004B535C(v10, buf, v75);
      v12 = v67;
      v97 = xmmword_10073B5BC;
      v98 = 2027922698;
      sub_100042F44((__n128 *)buf, (__n128 *)&v97);
      sub_100069AFC(v75);
      v55 = sub_1004B535C(v12, buf, v75);
      v13 = v67;
      v95 = xmmword_10073B4B8;
      v96 = 0;
      sub_100042F44((__n128 *)buf, (__n128 *)&v95);
      sub_100069AFC(v75);
      v54 = sub_1004B535C(v13, buf, v75);
      v14 = v67;
      v93 = xmmword_10073B47C;
      v94 = 0;
      sub_100042F44((__n128 *)buf, (__n128 *)&v93);
      sub_100069AFC(v75);
      v56 = sub_1004B535C(v14, buf, v75);
      if (sub_1005E32E8(a1, (__n128 *)&xmmword_10073B4A4, a2))
      {
        if (v9)
        {
          v15 = *(_QWORD *)(v9 + 8);
          v16 = *(_DWORD *)(v15 + 20);
          *(_OWORD *)buf = *(_OWORD *)(v15 + 4);
          v73 = v16;
          sub_100042F44((__n128 *)v75, (__n128 *)buf);
          v92 = 0;
          v91 = xmmword_100742D04;
          if (sub_100072DF0(v75, (unsigned __int8 *)&v91))
          {
            v17 = qword_100999820;
            if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v5;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "The device \"%@\" supports HID", buf, 0xCu);
            }
            v18 = sub_10034FCFC();
            (*(void (**)(uint64_t, void *))(*(_QWORD *)v18 + 24))(v18, v5);
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093CA08);
            sub_10065E054((uint64_t)off_1009778C0, v5);
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093CA08);
            sub_100656134((uint64_t)off_1009778C0, v5, 0);
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093CA08);
            v19 = off_1009778C0;
            sub_100091AE8(__p, "_HID_DEVICE_");
            sub_1006576F0((uint64_t)v19, v5, (unsigned __int8 *)__p);
            if (v66 < 0)
              operator delete(__p[0]);
            if (qword_1009778A8 != -1)
              dispatch_once(&qword_1009778A8, &stru_10093CA28);
            sub_10061D1F0((uint64_t)off_1009778A0, v5, 1);
            sub_1005E350C(a1, (__n128 *)&xmmword_10073B4A4, a2);
            *(_QWORD *)v75 = 0;
            if (qword_1009778A8 != -1)
              dispatch_once(&qword_1009778A8, &stru_10093CA28);
            v20 = off_1009778A0;
            sub_100030BCC(buf, v5);
            if (sub_100623C54((uint64_t)v20, buf, v75))
            {
              buf[0] = 0;
              sub_100043758(buf);
              v21 = sub_10019ADE8(*(unsigned __int16 **)v75);
              if ((sub_10011D85C(v21 & 0xFFF, **(_WORD **)(v9 + 8), *(_WORD *)(v9 + 48)) & 1) == 0)
              {
                v22 = qword_100999820;
                if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
                {
                  v23 = sub_100030DF4(a2);
                  v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
                  sub_10070BBF4(v24, v90, v22);
                }
              }
              sub_100043728(buf);
            }
          }
        }
      }
      if (sub_1005E32E8(a1, (__n128 *)&xmmword_10073B5A8, a2))
      {
        if (v11)
        {
          v25 = *(_QWORD *)(v11 + 8);
          v26 = *(_DWORD *)(v25 + 20);
          *(_OWORD *)buf = *(_OWORD *)(v25 + 4);
          v73 = v26;
          sub_100042F44((__n128 *)v75, (__n128 *)buf);
          v89 = 0;
          v88 = xmmword_100742D04;
          if (sub_100072DF0(v75, (unsigned __int8 *)&v88))
          {
            v27 = qword_100999820;
            if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v5;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "The device \"%@\" supports DOAP", buf, 0xCu);
            }
            v28 = sub_10034FCFC();
            (*(void (**)(uint64_t, void *))(*(_QWORD *)v28 + 48))(v28, v5);
            sub_1005E350C(a1, (__n128 *)&xmmword_10073B5A8, a2);
          }
        }
      }
      if (sub_1005E32E8(a1, (__n128 *)&xmmword_10073B5BC, a2))
      {
        if (v55)
        {
          v29 = *(_QWORD *)(v55 + 8);
          v30 = *(_DWORD *)(v29 + 20);
          *(_OWORD *)buf = *(_OWORD *)(v29 + 4);
          v73 = v30;
          sub_100042F44((__n128 *)v75, (__n128 *)buf);
          v87 = 0;
          v86 = xmmword_100742D04;
          if (sub_100072DF0(v75, (unsigned __int8 *)&v86))
          {
            v82 = xmmword_10073B5BC;
            v83 = 2027922698;
            sub_100042F44(&v84, (__n128 *)&v82);
            v31 = a1 + 128 != sub_100068488(a1 + 120, (unsigned __int8 *)&v84);
            if (sub_1005E0FF8(v5, v31))
            {
              v32 = qword_100999820;
              if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                *(_QWORD *)&buf[4] = v5;
                _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "The device \"%@\" supports UARP", buf, 0xCu);
              }
              v33 = sub_10034FCFC();
              (*(void (**)(uint64_t, void *))(*(_QWORD *)v33 + 56))(v33, v5);
              sub_1005E350C(a1, (__n128 *)&xmmword_10073B5BC, a2);
            }
          }
        }
      }
      if (_os_feature_enabled_impl("BluetoothFeatures", "NativeHealth"))
      {
        if (sub_1005E32E8(a1, (__n128 *)&xmmword_10073B4B8, a2))
        {
          if (v54)
          {
            v34 = *(_QWORD *)(v54 + 8);
            v35 = *(_DWORD *)(v34 + 20);
            *(_OWORD *)buf = *(_OWORD *)(v34 + 4);
            v73 = v35;
            sub_100042F44((__n128 *)v75, (__n128 *)buf);
            v81 = 0;
            v80 = xmmword_100742D04;
            if (sub_100072DF0(v75, (unsigned __int8 *)&v80))
            {
              v36 = qword_100999820;
              if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                *(_QWORD *)&buf[4] = v5;
                _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "The device \"%@\" supports GHS", buf, 0xCu);
              }
              v37 = sub_10034FCFC();
              (*(void (**)(uint64_t, void *))(*(_QWORD *)v37 + 24))(v37, v5);
              if (qword_1009778C8 != -1)
                dispatch_once(&qword_1009778C8, &stru_10093CA08);
              v38 = off_1009778C0;
              sub_100091AE8(v63, "_GHS_DEVICE_");
              sub_1006576F0((uint64_t)v38, v5, (unsigned __int8 *)v63);
              if (v64 < 0)
                operator delete(v63[0]);
              sub_1005E350C(a1, (__n128 *)&xmmword_10073B4B8, a2);
              if (qword_1009778C8 != -1)
                dispatch_once(&qword_1009778C8, &stru_10093CA08);
              sub_100656134((uint64_t)off_1009778C0, v5, 0);
            }
          }
        }
      }
      if (sub_1005E32E8(a1, (__n128 *)&xmmword_10073B47C, a2))
      {
        if (v56)
        {
          v39 = *(_QWORD *)(v56 + 8);
          v40 = *(_DWORD *)(v39 + 20);
          *(_OWORD *)buf = *(_OWORD *)(v39 + 4);
          v73 = v40;
          sub_100042F44((__n128 *)v75, (__n128 *)buf);
          v79 = 0;
          v78 = xmmword_100742D04;
          if (sub_100072DF0(v75, (unsigned __int8 *)&v78))
          {
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093CA08);
            v41 = sub_1000589DC((uint64_t)off_1009778C0, v5, 0);
            if ((v41 & 0xFFFFFFFFFFFFLL) != 0)
            {
              v42 = sub_10006BBEC();
              v57[0] = _NSConcreteStackBlock;
              v57[1] = 3221225472;
              v57[2] = sub_1005E3744;
              v57[3] = &unk_100937300;
              v59 = a1;
              v60 = v41;
              v58 = v5;
              v61 = a2;
              v62 = v56;
              sub_100041A34(v42, v57);

            }
          }
        }
      }
      *(_QWORD *)buf = a2;
      v43 = sub_1005E7A18((uint64_t **)(a1 + 248), a2, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)buf);
      v44 = (uint64_t *)v43[6];
      v45 = v43 + 7;
      if (v44 != v43 + 7)
      {
        do
        {
          v84 = *(__n128 *)((char *)v44 + 28);
          v85 = *((_DWORD *)v44 + 11);
          v46 = qword_100999820;
          if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
          {
            sub_10006887C((uint64_t)&v84, buf);
            v47 = v74 >= 0 ? buf : *(uint8_t **)buf;
            *(_DWORD *)v75 = 136315394;
            *(_QWORD *)&v75[4] = v47;
            v76 = 2112;
            v77 = v5;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Detected service %s on device %@ and notified", v75, 0x16u);
            if (v74 < 0)
              operator delete(*(void **)buf);
          }
          v48 = (uint64_t *)v44[1];
          if (v48)
          {
            do
            {
              v49 = v48;
              v48 = (uint64_t *)*v48;
            }
            while (v48);
          }
          else
          {
            do
            {
              v49 = (uint64_t *)v44[2];
              v50 = *v49 == (_QWORD)v44;
              v44 = v49;
            }
            while (!v50);
          }
          v44 = v49;
        }
        while (v49 != v45);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    {
      sub_10070BB94();
    }
    v51 = v68;
    if (v68)
    {
      p_shared_owners = (unint64_t *)&v68->__shared_owners_;
      do
        v53 = __ldaxr(p_shared_owners);
      while (__stlxr(v53 - 1, p_shared_owners));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    sub_10001A82C((uint64_t)&v69, v70);
  }

}

void sub_1005DDBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,char a36,_QWORD *a37,uint64_t a38,char a39)
{
  void *v39;

  sub_100043728(&a39);
  sub_10009F88C((uint64_t)&a34);
  sub_10001A82C((uint64_t)&a36, a37);

  _Unwind_Resume(a1);
}

void sub_1005DDCE8(uint64_t a1, unsigned __int8 *a2)
{
  id v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  void *v13;
  NSObject *v14;
  NSObject *v15;
  char v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  id v20;
  void *v21;
  void *v22;
  unsigned int v23;
  NSObject *v24;
  _BOOL4 v25;
  void *v26;
  void *v27;
  void *v28;
  _BYTE *v29;
  void *v30;
  NSObject *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  NSObject *v35;
  void *__p[2];
  char v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  _BYTE buf[22];
  char v41;
  __int128 v42;
  int v43;
  __n128 v44;
  __int128 v45;
  int v46;

  v4 = sub_100030DF4(a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MIDI: Trying to detect built in MIDI service on device %@", buf, 0xCu);
  }
  v38 = 0;
  v39 = 0;
  sub_100030BCC(buf, v5);
  sub_1005DFD54(a1, buf, 0, &v38);
  if (v38)
  {
    sub_1004B5DC8(v38, (uint64_t)"");
    v7 = v38;
    v45 = xmmword_10073B5E8;
    v46 = 13091918;
    sub_100042F44((__n128 *)buf, (__n128 *)&v45);
    sub_100069AFC(&v44);
    v8 = sub_1004B535C(v7, buf, (unsigned __int8 *)&v44);
    if (sub_1005E32E8(a1, (__n128 *)&xmmword_10073B5E8, a2))
    {
      v9 = _os_feature_enabled_impl("BluetoothFeatures", "LEMIDIAutoConnect");
      if (v8)
        v10 = v9;
      else
        v10 = 0;
      if (v10 == 1
        && (v11 = *(_QWORD *)(v8 + 8),
            v12 = *(_DWORD *)(v11 + 20),
            *(_OWORD *)buf = *(_OWORD *)(v11 + 4),
            *(_DWORD *)&buf[16] = v12,
            sub_100042F44(&v44, (__n128 *)buf),
            v43 = 0,
            v42 = xmmword_100742D04,
            sub_100072DF0((unsigned __int8 *)&v44, (unsigned __int8 *)&v42)))
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093CA08);
        if ((sub_100661A98((uint64_t)off_1009778C0, v5) & 1) != 0)
          goto LABEL_16;
        if (qword_1009778A8 != -1)
          dispatch_once(&qword_1009778A8, &stru_10093CA28);
        v13 = off_1009778A0;
        sub_100030BCC(buf, v5);
        if (sub_100623D58((uint64_t)v13, buf))
        {
LABEL_16:
          v14 = qword_100999820;
          if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v5;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "MIDI: The device %@ supports MIDI, but it's Apple device - No AutoConnect", buf, 0xCu);
          }
          goto LABEL_24;
        }
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093CA08);
        v20 = sub_10065E8D8((uint64_t)off_1009778C0, v5);
        v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
        v22 = v21;
        if (!v21)
        {
          if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
            sub_10070BCA8();
          goto LABEL_38;
        }
        v23 = objc_msgSend(v21, "localizedCaseInsensitiveContainsString:", CFSTR("Apple"));
        v24 = qword_100999820;
        v25 = os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT);
        if (v23)
        {
          if (v25)
          {
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = v5;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v22;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "MIDI: The device %@ supports MIDI, but it's %@ manufacturer - No AutoConnect", buf, 0x16u);
          }
LABEL_38:

          goto LABEL_24;
        }
        if (v25)
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v5;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "MIDI: The device %@ supports MIDI", buf, 0xCu);
        }
        if (qword_1009778B8 != -1)
          dispatch_once(&qword_1009778B8, &stru_10093C9E8);
        if (sub_100030864(qword_1009778B0, v5))
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10093CA08);
          v26 = off_1009778C0;
          sub_100091AE8(__p, "_MIDI_DEVICE_");
          sub_1006576F0((uint64_t)v26, v5, (unsigned __int8 *)__p);
          if (v37 < 0)
            operator delete(__p[0]);
          v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", (char *)&xmmword_10073B5E8 + 4, 16));
          v28 = (void *)objc_claimAutoreleasedReturnValue(+[CBUUID UUIDWithData:](CBUUID, "UUIDWithData:", v27));

          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10093CA08);
          sub_10000602C((uint64_t)off_1009778C0, v5, (uint64_t)buf);
          if (v41 >= 0)
            v29 = buf;
          else
            v29 = *(_BYTE **)buf;
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v29));
          if (v41 < 0)
            operator delete(*(void **)buf);
          v31 = qword_100999820;
          if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = v28;
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v30;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "MIDI: Starting MIDI service %@ on paired device \"%@\"", buf, 0x16u);
          }
          v32 = sub_10034FCFC();
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v32 + 24))(v32, v5);
          v33 = (void *)gCBDaemonServer;
          v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](NSArray, "arrayWithObject:", v28));
          objc_msgSend(v33, "notifyConnectedDeviceUUID:name:servicesUUIDs:", v5, v30, v34);

          sub_1005E350C(a1, (__n128 *)&xmmword_10073B5E8, a2);
        }
        else
        {
          v35 = qword_100999820;
          if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v5;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "MIDI: %@ is not paired - No AutoConnect", buf, 0xCu);
          }
        }

      }
      else
      {
        v15 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        {
          v16 = _os_feature_enabled_impl("BluetoothFeatures", "LEMIDIAutoConnect");
          sub_10070BCD4(v16, v8, buf, v15);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    {
      sub_10070BD2C();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
  {
    sub_10070BC48();
  }
LABEL_24:
  v17 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

}

void sub_1005DE3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  sub_10009F88C((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1005DE458(uint64_t a1, void *a2, int a3)
{
  sub_1005DCE6C(a1 - 32, a2, a3);
}

void sub_1005DE460(uint64_t a1, void *a2, int a3)
{
  id v5;
  NSObject *v6;
  int v7;
  uint8_t buf[4];
  id v9;
  __int16 v10;
  int v11;

  v5 = a2;
  v6 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543618;
    v9 = v5;
    v10 = 1024;
    v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "GattGateway init on device \"%{public}@\" with mtu %d", buf, 0x12u);
  }
  v7 = 0;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093CA08);
  sub_10065B384((uint64_t)off_1009778C0, v5, &v7);
  sub_100030BCC(buf, v5);
  sub_1005DE5B8(a1, buf);
}

void sub_1005DE59C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005DE5B8(uint64_t a1, const unsigned __int8 *a2)
{
  NSObject *v3;
  void **v4;
  void *__p[2];
  char v6;
  uint8_t out[40];

  v3 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a2, (char *)out);
    sub_100091AE8(__p, (char *)out);
    if (v6 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Beginning init sequence for device \"%{public}s\"", out, 0xCu);
    if (v6 < 0)
      operator delete(__p[0]);
  }
  operator new();
}

void sub_1005DE85C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_1005E7324((uint64_t *)va, 0);
  sub_1005E7324((uint64_t *)va1, 0);
  _Unwind_Resume(a1);
}

void sub_1005DE8E0(uint64_t a1, void *a2, int a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint8_t v11[8];
  _OWORD v12[3];
  _BYTE v13[51];
  _QWORD **v14;
  _QWORD *v15[2];
  void *v16;
  _BYTE buf[18];
  _QWORD v18[6];
  _QWORD v19[7];
  _QWORD *v20[3];

  v5 = a2;
  v16 = v5;
  sub_100030BCC(buf, v5);
  v6 = sub_10000C5B8(a1 + 192, buf);
  v7 = qword_100999820;
  if (a1 + 200 != v6 && os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "fCommandSchedulerMap.find(device) == fCommandSchedulerMap.end()";
    _os_log_fault_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
    v7 = qword_100999820;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "GattGateway device \"%{public}@\" is connected with Gatt handle 0x%x", buf, 0x12u);
  }
  *(_WORD *)v11 = 0;
  v15[0] = 0;
  v15[1] = 0;
  memset(v12, 0, sizeof(v12));
  memset(v13, 0, sizeof(v13));
  v14 = v15;
  sub_1005E6B10((uint64_t)buf, &v16, (uint64_t)v11);
  sub_1005E6FE0((uint64_t **)(a1 + 192), buf, (uint64_t)buf);
  sub_1002BB6B8((uint64_t)v20, v20[1]);
  sub_1005E6C00(v19);
  sub_1005E6C00(v18);
  sub_1002BB6B8((uint64_t)&v14, v15[0]);
  sub_1005E6C00(v13);
  sub_1005E6C00(v12);
  sub_100030BCC(buf, v16);
  v8 = sub_1005DEC7C(a1 + 192, buf);
  *(_WORD *)v8 = a3;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  sub_100030BCC(buf, v16);
  sub_1005E7224((uint64_t **)(a1 + 248), buf);
  v9 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9) && *(_BYTE *)(a1 + 244))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093CA08);
    if (!sub_10065DB1C((uint64_t)off_1009778C0, v16))
    {
      v10 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "GattGateway initSqequence on deviceConnected", v11, 2u);
      }
      *(_BYTE *)(v8 + 105) = 1;
      sub_1005DE460(a1, v16, 24);
    }
  }

}

void sub_1005DEBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26,char a27)
{
  sub_1005DEC04((uint64_t)&a27);
  sub_1005DEC40((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1005DEC04(uint64_t a1)
{
  sub_1002BB6B8(a1 + 128, *(_QWORD **)(a1 + 136));
  sub_1005E6C00((_QWORD *)(a1 + 72));
  sub_1005E6C00((_QWORD *)(a1 + 24));
  return a1;
}

uint64_t sub_1005DEC40(uint64_t a1)
{
  sub_1002BB6B8(a1 + 112, *(_QWORD **)(a1 + 120));
  sub_1005E6C00((_QWORD *)(a1 + 56));
  sub_1005E6C00((_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1005DEC7C(uint64_t a1, unsigned __int8 *uu1)
{
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  v2 = *sub_10000DC28(a1, &v4, uu1);
  if (!v2)
    abort();
  return v2 + 48;
}

void sub_1005DECB4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  __int128 v5;

  v3 = a2;
  v4 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v5) = 138543362;
    *(_QWORD *)((char *)&v5 + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "GattGateway device \"%{public}@\" is disconnected", (uint8_t *)&v5, 0xCu);
  }
  sub_1005DEDD4(a1, v3);
  sub_100030BCC(&v5, v3);
  sub_1005E7268((uint64_t **)(a1 + 192), (unsigned __int8 *)&v5);
  sub_1005DEEE0(a1, v3);
  v5 = 0uLL;
  sub_100030BCC(&v5, v3);
  sub_1005E7224((uint64_t **)(a1 + 248), (unsigned __int8 *)&v5);

}

void sub_1005DEDB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005DEDD4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t **v4;
  uint64_t *v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  unsigned __int8 uu2[16];

  v3 = a2;
  sub_100030BCC(uu2, v3);
  v4 = (uint64_t **)(a1 + 168);
  if (a1 + 176 != sub_10000C5B8(a1 + 168, uu2))
  {
    sub_100030BCC(uu2, v3);
    v7 = uu2;
    v5 = sub_1005E766C(v4, uu2, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v7);
    v6 = v5 + 7;
    sub_10001A82C((uint64_t)(v5 + 6), (_QWORD *)v5[7]);
    *(v6 - 1) = v6;
    *v6 = 0;
    v6[1] = 0;
    sub_100030BCC(uu2, v3);
    sub_1005E7224(v4, uu2);
  }

}

void sub_1005DEEC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005DEEE0(uint64_t a1, void *a2)
{
  id v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  NSObject *v27;
  unsigned __int16 v28;
  const unsigned __int8 *v29;
  int v30;
  const unsigned __int8 *v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  int v42;
  void *v43;
  id v44;
  void *v45;
  NSObject *v46;
  const unsigned __int8 *v47;
  const unsigned __int8 *v48;
  BOOL v49;
  id v50;
  void *v51;
  uint64_t v52;
  int v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unsigned __int8 v57[16];
  uint8_t buf[16];
  uint64_t v59;
  uint8_t v60[16];
  int v61;
  __n128 __p;
  uint64_t v63;
  __n128 v64;
  unint64_t v65;
  __int128 v66;
  int v67;
  __int128 v68;
  int v69;

  v2 = a2;
  if (qword_10097AC28 != -1)
    dispatch_once(&qword_10097AC28, &stru_10093C9A8);
  v3 = sub_1004845D8(qword_10097AC20, v2);
  v55 = 0;
  v56 = 0;
  sub_100030BCC(&v64, v2);
  sub_1005DFD54(a1, (unsigned __int8 *)&v64, 0, &v55);
  v4 = v55;
  if (v55)
  {
    v68 = xmmword_10073B328;
    v69 = 0;
    sub_100042F44(&v64, (__n128 *)&v68);
    v66 = xmmword_10073B378;
    v67 = 0;
    sub_100042F44(&__p, (__n128 *)&v66);
    v5 = sub_1004B535C(v4, (unsigned __int8 *)&v64, (unsigned __int8 *)&__p);
    v64 = 0uLL;
    v65 = 0;
    __p = 0uLL;
    v63 = 0;
    if (!sub_1004B20B8(v55, 0, (void **)&__p))
    {
      v6 = (_QWORD *)__p.n128_u64[0];
      if (__p.n128_u64[0] != __p.n128_u64[1])
      {
        v52 = v5;
        do
        {
          v7 = *v6;
          *(_OWORD *)buf = *(_OWORD *)(*v6 + 72);
          LODWORD(v59) = *(_DWORD *)(v7 + 88);
          sub_100042F44((__n128 *)v60, (__n128 *)buf);
          v8 = (_OWORD *)v64.n128_u64[1];
          if (v64.n128_u64[1] >= v65)
          {
            v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v64.n128_u64[1] - v64.n128_u64[0]) >> 2);
            v12 = v11 + 1;
            if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL)
              abort();
            if (0x999999999999999ALL * ((uint64_t)(v65 - v64.n128_u64[0]) >> 2) > v12)
              v12 = 0x999999999999999ALL * ((uint64_t)(v65 - v64.n128_u64[0]) >> 2);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - v64.n128_u64[0]) >> 2) >= 0x666666666666666)
              v13 = 0xCCCCCCCCCCCCCCCLL;
            else
              v13 = v12;
            if (v13)
              v14 = (char *)sub_1000B58EC((uint64_t)&v65, v13);
            else
              v14 = 0;
            v15 = &v14[20 * v11];
            v16 = *(_OWORD *)v60;
            *((_DWORD *)v15 + 4) = v61;
            *(_OWORD *)v15 = v16;
            v17 = (char *)v64.n128_u64[1];
            v18 = v64.n128_u64[0];
            v19 = (unint64_t)v15;
            if (v64.n128_u64[1] != v64.n128_u64[0])
            {
              do
              {
                v20 = *(_OWORD *)(v17 - 20);
                *(_DWORD *)(v19 - 4) = *((_DWORD *)v17 - 1);
                *(_OWORD *)(v19 - 20) = v20;
                v19 -= 20;
                v17 -= 20;
              }
              while (v17 != (char *)v18);
              v17 = (char *)v64.n128_u64[0];
            }
            v10 = (unint64_t)(v15 + 20);
            v64.n128_u64[0] = v19;
            v64.n128_u64[1] = (unint64_t)(v15 + 20);
            v65 = (unint64_t)&v14[20 * v13];
            if (v17)
              operator delete(v17);
          }
          else
          {
            v9 = *(_OWORD *)v60;
            *(_DWORD *)(v64.n128_u64[1] + 16) = v61;
            *v8 = v9;
            v10 = (unint64_t)v8 + 20;
          }
          v64.n128_u64[1] = v10;
          if (*v6)
            (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 8))(*v6);
          ++v6;
        }
        while (v6 != (_QWORD *)__p.n128_u64[1]);
        v6 = (_QWORD *)__p.n128_u64[0];
        v5 = v52;
      }
      __p.n128_u64[1] = (unint64_t)v6;
      memset(buf, 0, sizeof(buf));
      v59 = 0;
      sub_10047D5F4((uint64_t)buf, v2, (uint64_t)&v64);
      if (qword_10097AC48 != -1)
        dispatch_once(&qword_10097AC48, &stru_10093CA68);
      sub_10006544C(qword_10097AC40, (uint64_t)buf);

    }
    if (v3)
    {
      v21 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v2;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Keeping database for paired device \"%{public}@\"", buf, 0xCu);
      }
    }
    else
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093CA08);
      v23 = sub_1000589DC((uint64_t)off_1009778C0, v2, 0);
      if (v5 || BYTE6(v23) && (BYTE6(v23) != 1 || (~v23 & 0xC00000000000) != 0))
      {
        sub_1005DCD50(a1, v2);
      }
      else
      {
        v27 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v2;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Keeping database for public/static device \"%{public}@\"", buf, 0xCu);
        }
        memset(buf, 0, sizeof(buf));
        uuid_clear(buf);
        v28 = 0;
        v29 = (const unsigned __int8 *)(a1 + 224);
        v30 = 0x7FFFFFFF;
        while (1)
        {
          v31 = *(const unsigned __int8 **)(a1 + 216);
          if (v31 != v29)
          {
            do
            {
              if (qword_10097AC28 != -1)
                dispatch_once(&qword_10097AC28, &stru_10093C9A8);
              v32 = qword_10097AC20;
              v33 = sub_100030DF4(v31 + 32);
              v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
              LOBYTE(v32) = sub_1004845D8(v32, v34);

              if ((v32 & 1) == 0)
              {
                if (qword_10097AC28 != -1)
                  dispatch_once(&qword_10097AC28, &stru_10093C9A8);
                v35 = qword_10097AC20;
                v36 = sub_100030DF4(v31 + 32);
                v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
                LOBYTE(v35) = sub_10000671C(v35, v37);

                ++v28;
                if ((v35 & 1) == 0)
                {
                  v54 = 0;
                  if (qword_10097AC28 != -1)
                    dispatch_once(&qword_10097AC28, &stru_10093C9A8);
                  v38 = qword_10097AC20;
                  sub_100030BCC(v57, v2);
                  if (!sub_100484478(v38, v57, &v54))
                  {
                    if (v54 == 1)
                    {
                      if (qword_1009778C8 != -1)
                        dispatch_once(&qword_1009778C8, &stru_10093CA08);
                      v43 = off_1009778C0;
                      v44 = sub_100030DF4(v31 + 32);
                      v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
                      v42 = sub_100656BD8((uint64_t)v43, v45);

                    }
                    else if (v54 == 2)
                    {
                      if (qword_1009778C8 != -1)
                        dispatch_once(&qword_1009778C8, &stru_10093CA08);
                      v39 = off_1009778C0;
                      v40 = sub_100030DF4(v31 + 32);
                      v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
                      v42 = sub_100656B50((uint64_t)v39, v41);

                    }
                    else
                    {
                      v46 = qword_100999820;
                      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)v60 = 138543362;
                        *(_QWORD *)&v60[4] = v2;
                        _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "Cannot update last connected time for device %{public}@ as no transport was found", v60, 0xCu);
                      }
                      v42 = 0;
                    }
                    if (uuid_is_null(buf) || v42 < v30)
                    {
                      uuid_copy(buf, v31 + 32);
                      v30 = v42;
                    }
                  }
                }
              }
              v47 = (const unsigned __int8 *)*((_QWORD *)v31 + 1);
              if (v47)
              {
                do
                {
                  v48 = v47;
                  v47 = *(const unsigned __int8 **)v47;
                }
                while (v47);
              }
              else
              {
                do
                {
                  v48 = (const unsigned __int8 *)*((_QWORD *)v31 + 2);
                  v49 = *(_QWORD *)v48 == (_QWORD)v31;
                  v31 = v48;
                }
                while (!v49);
              }
              v31 = v48;
            }
            while (v48 != v29);
          }
          if (*(unsigned __int16 *)(a1 + 240) >= v28 || uuid_is_null(buf))
            break;
          v50 = sub_100030DF4(buf);
          v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
          sub_1005DCD50(a1, v51);

        }
      }
    }
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    if (v64.n128_u64[0])
    {
      v64.n128_u64[1] = v64.n128_u64[0];
      operator delete((void *)v64.n128_u64[0]);
    }
  }
  else
  {
    v22 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
    {
      v64.n128_u32[0] = 138543362;
      *(unint64_t *)((char *)v64.n128_u64 + 4) = (unint64_t)v2;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Database not found for device \"%{public}@\"", (uint8_t *)&v64, 0xCu);
    }
  }
  v24 = v56;
  if (v56)
  {
    p_shared_owners = (unint64_t *)&v56->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }

}

void sub_1005DF6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  void *v30;

  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  sub_10009F88C((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_1005DF77C(uint64_t a1, void *a2, int a3, int a4)
{
  id v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  id v21;
  __int16 v22;
  int v23;

  v7 = a2;
  v8 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    v20 = 138543618;
    v21 = v7;
    v22 = 1024;
    v23 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "GattGateway device \"%{public}@\" is ready with mtu %d", (uint8_t *)&v20, 0x12u);
  }
  sub_100030BCC(&v20, v7);
  if (a1 + 200 == sub_10000C5B8(a1 + 192, (unsigned __int8 *)&v20))
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
      sub_10070BDB8();
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10093CA28);
    v12 = off_1009778A0;
    sub_100030BCC(&v20, v7);
    if (sub_100622358((uint64_t)v12, (unsigned __int8 *)&v20, 3u)
      && os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    {
      sub_10070BD58();
    }
  }
  else
  {
    sub_100030BCC(&v20, v7);
    v9 = sub_1005DEC7C(a1 + 192, (unsigned __int8 *)&v20);
    if (*(_WORD *)v9)
    {
      if (a3)
      {
        v10 = *(unsigned __int16 *)(a1 + 242);
        if (*(_WORD *)(a1 + 242))
        {
          v11 = qword_100999820;
          if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
          {
            v20 = 67109120;
            LODWORD(v21) = v10;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Warning: MTU override to %d", (uint8_t *)&v20, 8u);
          }
          a4 = v10;
        }
      }
      else
      {
        a4 = 0;
      }
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093CA08);
      if (sub_10065DB1C((uint64_t)off_1009778C0, v7))
      {
        v14 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
        {
          v20 = 138543362;
          v21 = v7;
          v15 = "Device %{public}@ connected, LE GATT disabled, blocking all GATT client communications";
          v16 = v14;
          v17 = 12;
LABEL_31:
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v20, v17);
        }
      }
      else
      {
        v18 = sub_100027F68();
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18) || !*(_BYTE *)(a1 + 244))
        {
          *(_BYTE *)(v9 + 105) = 1;
          sub_1005DE460(a1, v7, a4);
        }
        v19 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v20) = 0;
          v15 = "GattGateway initSqequence on deviceConnected, skipping for linkReady ";
          v16 = v19;
          v17 = 2;
          goto LABEL_31;
        }
      }
    }
    else
    {
      v13 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v20) = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Gatt session handle is invalid", (uint8_t *)&v20, 2u);
        v13 = qword_100999820;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_10070BDF0();
    }
  }

}

void sub_1005DFAE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005DFB0C(uint64_t a1@<X0>, void *a2@<X1>, char **a3@<X8>)
{
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v5 = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v22 = 0;
  v23 = 0;
  sub_100030BCC(&v24, v5);
  sub_1005DFD54(a1, (unsigned __int8 *)&v24, 0, &v22);
  if (v22)
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    sub_1004B1F64(v22, (void **)&v24);
    v6 = v25;
    if (v25 != v24)
    {
      sub_1005DFF0C((void **)a3, v25 - v24);
      v6 = v24;
      if (v24 != v25)
      {
        v7 = a3 + 2;
        v8 = a3[1];
        do
        {
          v9 = *v6;
          if ((unint64_t)v8 >= *v7)
          {
            v10 = (v8 - *a3) >> 3;
            if ((unint64_t)(v10 + 1) >> 61)
              abort();
            v11 = *v7 - (_QWORD)*a3;
            v12 = v11 >> 2;
            if (v11 >> 2 <= (unint64_t)(v10 + 1))
              v12 = v10 + 1;
            if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
              v13 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v13 = v12;
            if (v13)
              v14 = (char *)sub_10007ABA0((uint64_t)(a3 + 2), v13);
            else
              v14 = 0;
            v15 = &v14[8 * v10];
            *(_QWORD *)v15 = v9;
            v8 = v15 + 8;
            v17 = *a3;
            v16 = a3[1];
            if (v16 != *a3)
            {
              do
              {
                v18 = *((_QWORD *)v16 - 1);
                v16 -= 8;
                *((_QWORD *)v15 - 1) = v18;
                v15 -= 8;
              }
              while (v16 != v17);
              v16 = *a3;
            }
            *a3 = v15;
            a3[1] = v8;
            a3[2] = &v14[8 * v13];
            if (v16)
              operator delete(v16);
          }
          else
          {
            *(_QWORD *)v8 = v9;
            v8 += 8;
          }
          a3[1] = v8;
          ++v6;
        }
        while (v6 != v25);
        v6 = v24;
      }
    }
    if (v6)
    {
      v25 = v6;
      operator delete(v6);
    }
  }
  v19 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

}

void sub_1005DFD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;
  uint64_t v13;
  void *v15;

  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_10009F88C((uint64_t)&a9);
  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1005DFD54@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t **v8;
  uint64_t result;
  unsigned __int8 *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  unsigned __int8 *v15;

  v8 = (uint64_t **)(a1 + 216);
  *a4 = 0;
  a4[1] = 0;
  result = sub_10000C5B8(a1 + 216, a2);
  if (a1 + 224 == result)
  {
    if (!a3)
      goto LABEL_10;
    sub_1005E8804(&v14);
    v15 = a2;
    v10 = sub_1005E8694(v8, a2, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v15);
    sub_100274874((uint64_t)(v10 + 48), &v14);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    *(_QWORD *)&v14 = a2;
    result = (uint64_t)sub_1005E8694(v8, a2, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v14);
  }
  result = (uint64_t)sub_1004C0DC4(a4, (uint64_t *)(result + 48));
LABEL_10:
  if (*a4)
  {
    *(_QWORD *)&v14 = 0;
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10093CA28);
    result = sub_100623C54((uint64_t)off_1009778A0, a2, &v14);
    if ((_DWORD)result)
    {
      LOBYTE(v15) = 0;
      sub_100043758(&v15);
      *(_WORD *)(*a4 + 146) = sub_10019ADE8((unsigned __int16 *)v14);
      return (uint64_t)sub_100043728(&v15);
    }
    else
    {
      *(_WORD *)(*a4 + 146) = 0;
    }
  }
  return result;
}

void sub_1005DFECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_10009F88C((uint64_t)&a9);
  sub_10009F88C(v9);
  _Unwind_Resume(a1);
}

void sub_1005DFF0C(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_10007ABA0(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1005DFF9C(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, char **a4@<X8>)
{
  id v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __int16 v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  unsigned __int8 v31[16];

  v7 = a3;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_100030BCC(v31, v7);
  v8 = sub_1005E01B0(a1, v31);
  if (v8)
  {
    v9 = *(_QWORD **)(v8 + 112);
    v10 = (_QWORD *)(v8 + 120);
    if (v9 != (_QWORD *)(v8 + 120))
    {
      do
      {
        v11 = (_QWORD *)v9[6];
        if (v11)
        {
          v12 = v9 + 6;
          do
          {
            v13 = v11[4];
            v14 = v13 >= a2;
            if (v13 >= a2)
              v15 = v11;
            else
              v15 = v11 + 1;
            if (v14)
              v12 = v11;
            v11 = (_QWORD *)*v15;
          }
          while (*v15);
          if (v12 != v9 + 6 && v12[4] <= a2)
          {
            v17 = a4[1];
            v16 = (unint64_t)a4[2];
            if ((unint64_t)v17 >= v16)
            {
              v19 = *a4;
              v20 = v17 - *a4;
              if (v20 <= -3)
                abort();
              v21 = v20 >> 1;
              v22 = v16 - (_QWORD)v19;
              if (v22 <= (v20 >> 1) + 1)
                v23 = v21 + 1;
              else
                v23 = v22;
              if (v22 >= 0x7FFFFFFFFFFFFFFELL)
                v24 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v24 = v23;
              if (v24)
              {
                v25 = (char *)sub_1002B54AC((uint64_t)(a4 + 2), v24);
                v19 = *a4;
                v17 = a4[1];
              }
              else
              {
                v25 = 0;
              }
              v26 = &v25[2 * v21];
              *(_WORD *)v26 = *((_WORD *)v9 + 16);
              v18 = v26 + 2;
              while (v17 != v19)
              {
                v27 = *((_WORD *)v17 - 1);
                v17 -= 2;
                *((_WORD *)v26 - 1) = v27;
                v26 -= 2;
              }
              *a4 = v26;
              a4[1] = v18;
              a4[2] = &v25[2 * v24];
              if (v19)
                operator delete(v19);
            }
            else
            {
              *(_WORD *)v17 = *((_WORD *)v9 + 16);
              v18 = v17 + 2;
            }
            a4[1] = v18;
          }
        }
        v28 = (_QWORD *)v9[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (_QWORD *)v9[2];
            v30 = *v29 == (_QWORD)v9;
            v9 = v29;
          }
          while (!v30);
        }
        v9 = v29;
      }
      while (v29 != v10);
    }
  }

}

void sub_1005E0180(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1005E01B0(uint64_t a1, const unsigned __int8 *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  unsigned __int8 uu2[16];

  v3 = sub_100030DF4(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_100030BCC(uu2, v4);
  v5 = sub_10000C5B8(a1 + 192, uu2);

  if (a1 + 200 == v5)
    return 0;
  else
    return v5 + 48;
}

void sub_1005E0248(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1005E0260(uint64_t a1, const unsigned __int8 *a2, uint64_t *a3, int a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  id v38;
  void *v39;

  if (!*(_QWORD *)(*a3 + 24))
  {
    v8 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
      sub_10070BEC0(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v16 = sub_1005E01B0(a1, a2);
  if (!v16)
    return 312;
  v17 = v16;
  if (a4)
  {
    if (*(_BYTE *)(v16 + 104))
    {
      if (!*(_QWORD *)(v16 + 48))
      {
        v18 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
          sub_10070BE50(v18, v19, v20, v21, v22, v23, v24, v25);
      }
      v26 = *(_QWORD *)(v17 + 16);
      v27 = (uint64_t *)(v26 + 8 * (*(_QWORD *)(v17 + 40) >> 9));
      v28 = *v27;
      v29 = *v27 + 8 * (*(_QWORD *)(v17 + 40) & 0x1FFLL);
      if (*(_QWORD *)(v17 + 24) == v26)
        v29 = 0;
      v30 = v29 - v28;
      v31 = (v29 - v28) >> 3;
      if (v30 < -7)
      {
        v37 = 510 - v31;
        v33 = (char *)&v27[-(v37 >> 9)];
        v34 = *(_QWORD *)v33;
        v35 = ~(_DWORD)v37 & 0x1FFLL;
      }
      else
      {
        v32 = v31 + 1;
        v33 = (char *)&v27[v32 >> 9];
        v34 = *(_QWORD *)v33;
        v35 = v32 & 0x1FF;
      }
      sub_1005E3FD0((void **)(v17 + 8), v33, v34 + 8 * v35, a3);
    }
    else
    {
      sub_1005E43A0(v16 + 8, a3);
    }
  }
  else
  {
    sub_1005E4420((_QWORD *)(v16 + 8), a3);
  }
  if (*(_BYTE *)(v17 + 105))
  {
    v38 = sub_100030DF4(a2);
    v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
    sub_1005E44A8(a1, v39, v17);

  }
  return 0;
}

void sub_1005E03F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1005E0400(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned int a4)
{
  id v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  _BOOL8 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  __n128 v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  __n128 v25;
  int v26;

  v7 = a2;
  v19 = 0;
  v20 = 0;
  sub_100030BCC(&v21, v7);
  sub_1005DFD54(a1, (unsigned __int8 *)&v21, 0, &v19);
  if (!v19)
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_10070BB94();
    goto LABEL_8;
  }
  v8 = sub_1004B5294(v19, a4);
  v9 = v8;
  if (!v8)
    goto LABEL_8;
  v10 = v8[1];
  v11 = *(_DWORD *)(v10 + 20);
  v21 = *(__n128 *)(v10 + 4);
  LODWORD(v22) = v11;
  sub_100042F44(&v25, &v21);
  v24 = 0;
  v23 = xmmword_100742CF0;
  if (!sub_100072DF0(v12, (unsigned __int8 *)&v23)
    || (v25 = 0uLL,
        v26 = 0,
        v21 = *(__n128 *)((char *)v9 + 76),
        LODWORD(v22) = *((_DWORD *)v9 + 23),
        sub_100042F44(&v25, &v21),
        v13 = sub_100042F58(a1 + 144, a3),
        a1 + 152 == v13))
  {
LABEL_8:
    v14 = 0;
    goto LABEL_9;
  }
  v21 = 0uLL;
  v22 = 0;
  sub_1005E7380((uint64_t)&v21, v13 + 56);
  v14 = &v21.n128_i8[8] != (__int8 *)sub_100068488((uint64_t)&v21, (unsigned __int8 *)&v25);
  sub_10001A82C((uint64_t)&v21, (_QWORD *)v21.n128_u64[1]);
LABEL_9:
  v15 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  return v14;
}

void sub_1005E05CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  void *v12;

  sub_10001A82C((uint64_t)&a11, a12);
  sub_10009F88C((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1005E0618(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  id v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  unsigned __int8 uu1[16];

  v5 = a2;
  sub_100030BCC(uu1, v5);
  v7 = uu1;
  v6 = sub_1005E766C((uint64_t **)(a1 + 168), uu1, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v7);
  sub_10000BED0((uint64_t **)v6 + 6, a3, (uint64_t)a3);

}

void sub_1005E06C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1005E06D8(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  id v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  _BOOL8 v9;
  unsigned __int8 *v11;
  unsigned __int8 uu1[8];
  unsigned __int8 uu2[16];

  v5 = a3;
  sub_100030BCC(uu2, v5);
  v6 = (uint64_t **)(a1 + 168);
  if (a1 + 176 == sub_10000C5B8(a1 + 168, uu2)
    || (sub_100030BCC(uu1, v5),
        v11 = uu1,
        !sub_1005E766C(v6, uu1, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v11)[8]))
  {
    v9 = 0;
  }
  else
  {
    sub_100030BCC(uu2, v5);
    *(_QWORD *)uu1 = uu2;
    v7 = sub_1005E766C(v6, uu2, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)uu1);
    v8 = (uint64_t *)sub_100068488((uint64_t)(v7 + 6), a2);
    sub_100030BCC(uu1, v5);
    v11 = uu1;
    v9 = sub_1005E766C(v6, uu1, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v11)+ 7 != v8;
  }

  return v9;
}

void sub_1005E0828(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1005E084C(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4, void *a5)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  BOOL v12;
  _BOOL4 v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v18;
  int v19;

  v8 = a5;
  v9 = sub_100068488(a1 + 72, a2);
  v10 = sub_100068488(a1 + 96, a2);
  if (v8)
    v11 = sub_1005E06D8(a1, a2, v8);
  else
    v11 = 0;
  v18 = xmmword_10073B4A4;
  v19 = 0;
  v12 = sub_100072DF0(a2, (unsigned __int8 *)&v18);
  v13 = a1 + 80 != v9;
  if (a1 + 80 == v9)
    v14 = 0;
  else
    v14 = a3;
  if (a1 + 104 != v10)
    v13 = 1;
  v15 = (!v13 && !v11) | v14 | v11 & a3;
  if (v12 && v11)
    v16 = 0;
  else
    v16 = v15;

  return v16;
}

void sub_1005E096C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005E098C(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, __n128 *a4@<X8>)
{
  id v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unsigned __int8 v16[16];

  v7 = a2;
  v14 = 0;
  v15 = 0;
  sub_100030BCC(v16, v7);
  sub_1005DFD54(a1, v16, 0, &v14);
  if (v14)
  {
    sub_1004B57B8(v14, a3, a4);
    v8 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    v11 = v15;
    if (v15)
    {
      v12 = (unint64_t *)&v15->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    sub_100069AFC(a4);
  }

}

void sub_1005E0AAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1005E0AD8(uint64_t a1, void *a2, __int128 **a3, int a4, uint64_t a5, int a6)
{
  uint64_t v8;
  id v9;
  __int128 *v10;
  __int128 *v11;
  char *v12;
  __int128 v13;
  __int128 *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  unsigned __int8 *v25;
  char *v26;
  NSObject *v27;
  void *p_p;
  _OWORD *v29;
  __int128 v30;
  _DWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  void *__p;
  std::__shared_weak_count *v50;
  char v51;
  void *v52;
  _DWORD *v53;
  char *v54;
  void *v55;
  char *v56;
  unint64_t v57;
  uint8_t buf[4];
  void *v59;
  __int16 v60;
  id v61;

  v9 = a2;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v11 = *a3;
  v10 = a3[1];
  if (*a3 != v10)
  {
    do
    {
      if (qword_1009778F8 != -1)
        dispatch_once(&qword_1009778F8, &stru_10093CA48);
      if (sub_1005E084C(qword_1009778F0, (unsigned __int8 *)v11, a4, v8, v9))
      {
        v12 = v56;
        if ((unint64_t)v56 >= v57)
        {
          v15 = 0xCCCCCCCCCCCCCCCDLL * ((v56 - (_BYTE *)v55) >> 2);
          v16 = v15 + 1;
          if (v15 + 1 > 0xCCCCCCCCCCCCCCCLL)
            abort();
          if (0x999999999999999ALL * ((uint64_t)(v57 - (_QWORD)v55) >> 2) > v16)
            v16 = 0x999999999999999ALL * ((uint64_t)(v57 - (_QWORD)v55) >> 2);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v57 - (_QWORD)v55) >> 2) >= 0x666666666666666)
            v17 = 0xCCCCCCCCCCCCCCCLL;
          else
            v17 = v16;
          if (v17)
            v18 = (char *)sub_1000B58EC((uint64_t)&v57, v17);
          else
            v18 = 0;
          v19 = &v18[4 * ((v56 - (_BYTE *)v55) >> 2)];
          v20 = *v11;
          *((_DWORD *)v19 + 4) = *((_DWORD *)v11 + 4);
          *(_OWORD *)v19 = v20;
          v22 = (char *)v55;
          v21 = v56;
          v23 = &v18[20 * v15];
          if (v56 != v55)
          {
            do
            {
              v24 = *(_OWORD *)(v21 - 20);
              *((_DWORD *)v23 - 1) = *((_DWORD *)v21 - 1);
              *(_OWORD *)(v23 - 20) = v24;
              v23 -= 20;
              v21 -= 20;
            }
            while (v21 != v22);
            v21 = (char *)v55;
          }
          v14 = (__int128 *)(v19 + 20);
          v55 = v23;
          v56 = v19 + 20;
          v57 = (unint64_t)&v18[20 * v17];
          if (v21)
            operator delete(v21);
        }
        else
        {
          v13 = *v11;
          *((_DWORD *)v56 + 4) = *((_DWORD *)v11 + 4);
          *(_OWORD *)v12 = v13;
          v14 = (__int128 *)(v12 + 20);
        }
        v56 = (char *)v14;
      }
      v11 = (__int128 *)((char *)v11 + 20);
    }
    while (v11 != v10);
  }
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v25 = (unsigned __int8 *)v55;
  v26 = v56;
  if (sub_1005E0FF8(v9, a6))
  {
    sub_1000B56F0(&v52, (__int128 *)v55, (__int128 *)v56, 0xCCCCCCCCCCCCCCCDLL * ((v56 - (_BYTE *)v55) >> 2));
  }
  else if (v55 != v56)
  {
    do
    {
      if (a1 + 128 == sub_100068488(a1 + 120, v25))
      {
        v29 = v53;
        if (v53 >= (_DWORD *)v54)
        {
          v32 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v53 - (_BYTE *)v52) >> 2);
          v33 = v32 + 1;
          if (v32 + 1 > 0xCCCCCCCCCCCCCCCLL)
            abort();
          if (0x999999999999999ALL * ((v54 - (_BYTE *)v52) >> 2) > v33)
            v33 = 0x999999999999999ALL * ((v54 - (_BYTE *)v52) >> 2);
          if (0xCCCCCCCCCCCCCCCDLL * ((v54 - (_BYTE *)v52) >> 2) >= 0x666666666666666)
            v34 = 0xCCCCCCCCCCCCCCCLL;
          else
            v34 = v33;
          if (v34)
            v35 = (char *)sub_1000B58EC((uint64_t)&v54, v34);
          else
            v35 = 0;
          v36 = &v35[20 * v32];
          v37 = *(_OWORD *)v25;
          *((_DWORD *)v36 + 4) = *((_DWORD *)v25 + 4);
          *(_OWORD *)v36 = v37;
          v39 = (char *)v52;
          v38 = (char *)v53;
          v40 = v36;
          if (v53 != v52)
          {
            do
            {
              v41 = *(_OWORD *)(v38 - 20);
              *((_DWORD *)v40 - 1) = *((_DWORD *)v38 - 1);
              *(_OWORD *)(v40 - 20) = v41;
              v40 -= 20;
              v38 -= 20;
            }
            while (v38 != v39);
            v38 = (char *)v52;
          }
          v31 = v36 + 20;
          v52 = v40;
          v53 = v36 + 20;
          v54 = &v35[20 * v34];
          if (v38)
            operator delete(v38);
        }
        else
        {
          v30 = *(_OWORD *)v25;
          v53[4] = *((_DWORD *)v25 + 4);
          *v29 = v30;
          v31 = (_DWORD *)v29 + 5;
        }
        v53 = v31;
      }
      else
      {
        v27 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
        {
          sub_10006887C((uint64_t)v25, &__p);
          p_p = &__p;
          if (v51 < 0)
            p_p = __p;
          *(_DWORD *)buf = 136446466;
          v59 = p_p;
          v60 = 2114;
          v61 = v9;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "deviceHasAnyService skipping %{public}s because %{public}@ link is not encrypted", buf, 0x16u);
          if (v51 < 0)
            operator delete(__p);
        }
      }
      v25 += 20;
    }
    while (v25 != (unsigned __int8 *)v26);
  }
  __p = 0;
  v50 = 0;
  sub_100030BCC(buf, v9);
  sub_1005DFD54(a1, buf, 0, &__p);
  if (__p)
    v42 = sub_1004B1E54((uint64_t)__p, (unsigned __int8 **)&v52);
  else
    v42 = 0;
  v43 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
  if (v55)
  {
    v56 = (char *)v55;
    operator delete(v55);
  }

  return v42;
}

void sub_1005E0F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  void *v21;

  sub_10009F88C((uint64_t)&a14);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1005E0FF8(void *a1, int a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  int v9;
  unsigned __int8 v10[16];
  unsigned __int8 v11[16];

  v3 = a1;
  if (a2)
  {
    v9 = 0xFFFF;
    if (qword_10097AC28 != -1)
      dispatch_once(&qword_10097AC28, &stru_10093C9A8);
    v4 = qword_10097AC20;
    sub_100030BCC(v11, v3);
    sub_100484478(v4, v11, &v9);
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10093CA28);
    v5 = off_1009778A0;
    sub_100030BCC(v10, v3);
    v6 = sub_100069D64((uint64_t)v5, v10);
    if (v9 == 1)
      v7 = 1;
    else
      v7 = v6;
  }
  else
  {
    v7 = 1;
  }

  return v7;
}

void sub_1005E110C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1005E1128(uint64_t a1, unsigned __int8 **a2)
{
  id v4;
  const unsigned __int8 *v5;
  id v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned __int8 *v11;
  const unsigned __int8 **v12;
  BOOL v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unsigned __int8 v17[16];

  v4 = objc_alloc_init((Class)NSMutableArray);
  v5 = *(const unsigned __int8 **)(a1 + 216);
  if (v5 != (const unsigned __int8 *)(a1 + 224))
  {
    do
    {
      v6 = sub_100030DF4(v5 + 32);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v15 = 0;
      v16 = 0;
      sub_100030BCC(v17, v7);
      sub_1005DFD54(a1, v17, 0, &v15);
      if (v15 && sub_1004B1E54(v15, a2))
        objc_msgSend(v4, "addObject:", v7);
      v8 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }

      v11 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
      if (v11)
      {
        do
        {
          v12 = (const unsigned __int8 **)v11;
          v11 = *(unsigned __int8 **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (const unsigned __int8 **)*((_QWORD *)v5 + 2);
          v13 = *v12 == v5;
          v5 = (const unsigned __int8 *)v12;
        }
        while (!v13);
      }
      v5 = (const unsigned __int8 *)v12;
    }
    while (v12 != (const unsigned __int8 **)(a1 + 224));
  }
  return v4;
}

void sub_1005E1280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);
  sub_10009F88C((uint64_t)va);

  _Unwind_Resume(a1);
}

id sub_1005E12B4(uint64_t a1)
{
  id v2;
  const unsigned __int8 *v3;
  const unsigned __int8 **v4;
  id v5;
  void *v6;
  unsigned __int8 *v7;
  const unsigned __int8 **v8;
  BOOL v9;

  v2 = objc_alloc_init((Class)NSMutableArray);
  v3 = *(const unsigned __int8 **)(a1 + 216);
  v4 = (const unsigned __int8 **)(a1 + 224);
  if (v3 != (const unsigned __int8 *)(a1 + 224))
  {
    do
    {
      v5 = sub_100030DF4(v3 + 32);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      objc_msgSend(v2, "addObject:", v6);

      v7 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
      if (v7)
      {
        do
        {
          v8 = (const unsigned __int8 **)v7;
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const unsigned __int8 **)*((_QWORD *)v3 + 2);
          v9 = *v8 == v3;
          v3 = (const unsigned __int8 *)v8;
        }
        while (!v9);
      }
      v3 = (const unsigned __int8 *)v8;
    }
    while (v8 != v4);
  }
  return v2;
}

void sub_1005E1354(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1005E1370(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4)
{
  NSObject *v6;
  void **v7;
  id v8;
  void *v9;
  void *__p[2];
  char v11;
  _DWORD out[12];
  uint64_t v13;

  v6 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a4, (char *)out);
    sub_100091AE8(__p, (char *)out);
    v7 = v11 >= 0 ? __p : (void **)__p[0];
    out[0] = 136446210;
    *(_QWORD *)&out[1] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Finding all primary services on device \"%{public}s\"", (uint8_t *)out, 0xCu);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  v13 = 0;
  memset(out, 0, sizeof(out));
  sub_1000340DC(a3, (uint64_t)__p);
  v8 = sub_100030DF4(a4);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  sub_10047D5C0((uint64_t)out, (__int128 *)__p, 1, v9, 0);

  if (v11 < 0)
    operator delete(__p[0]);
  if (qword_10097AC48 != -1)
    dispatch_once(&qword_10097AC48, &stru_10093CA68);
  sub_10006544C(qword_10097AC40, (uint64_t)out);
  operator new();
}

void sub_1005E15E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_1005E7324(&a9, 0);
  sub_1005E7324((uint64_t *)&__p, 0);
  sub_1002E4420((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1005E166C(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, uint64_t *a5)
{
  uint64_t i;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  NSObject *v12;
  __int128 *v13;
  void **v14;
  id v15;
  void *v16;
  void *__p[2];
  char v18;
  __int128 v19;
  _OWORD v20[4];
  void *v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  char v35;
  void *out[8];
  uint8_t buf[4];
  __int128 *v38;
  __int16 v39;
  void **v40;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  memset(v20, 0, sizeof(v20));
  v19 = 0u;
  sub_1002613AC((uint64_t)&v19);
  for (i = *a5; i != a5[1]; i += 20)
  {
    sub_10006887C(i, out);
    if (SHIBYTE(out[2]) >= 0)
      v9 = out;
    else
      v9 = (void **)out[0];
    if (SHIBYTE(out[2]) >= 0)
      v10 = HIBYTE(out[2]);
    else
      v10 = (uint64_t)out[1];
    v11 = sub_1002614D8(v20, (uint64_t)v9, v10);
    sub_1002614D8(v11, (uint64_t)", ", 2);
    if (SHIBYTE(out[2]) < 0)
      operator delete(out[0]);
  }
  v12 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    v13 = &v34;
    std::stringbuf::str((char *)v20 + 8);
    if (v35 < 0)
      v13 = (__int128 *)v34;
    memset(out, 0, 37);
    uuid_unparse_upper(a4, (char *)out);
    sub_100091AE8(__p, (char *)out);
    if (v18 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v38 = v13;
    v39 = 2082;
    v40 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Finding all primary services with UUID(s) %{public}s on device \"%{public}s\"", buf, 0x16u);
    if (v18 < 0)
      operator delete(__p[0]);
    if (v35 < 0)
      operator delete((void *)v34);
  }
  memset(out, 0, 56);
  sub_1000340DC(a3, (uint64_t)&v34);
  v15 = sub_100030DF4(a4);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  sub_10047D5C0((uint64_t)out, &v34, 1, v16, (uint64_t)a5);

  if (v35 < 0)
    operator delete((void *)v34);
  if (qword_10097AC48 != -1)
    dispatch_once(&qword_10097AC48, &stru_10093CA68);
  sub_10006544C(qword_10097AC40, (uint64_t)out);
  operator new();
}

void sub_1005E1A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1006CC5C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005E1B3C(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5, int a6)
{
  NSObject *v9;
  void **v10;
  void *__p[2];
  char v12;
  uuid_string_t out;

  v9 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_100091AE8(__p, out);
    if (v12 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    *(_DWORD *)out = 67109634;
    *(_DWORD *)&out[4] = a5;
    *(_WORD *)&out[8] = 1024;
    *(_DWORD *)&out[10] = a6;
    *(_WORD *)&out[14] = 2082;
    *(_QWORD *)&out[16] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Finding included services in range [0x%04x, 0x%04x] on device \"%{public}s\"", (uint8_t *)out, 0x18u);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  operator new();
}

void sub_1005E1D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_1005E7324(&a9, 0);
  sub_1005E7324(&a13, 0);
  _Unwind_Resume(a1);
}

void sub_1005E1D8C(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5, int a6)
{
  NSObject *v9;
  void **v10;
  void *__p[2];
  char v12;
  uuid_string_t out;

  v9 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_100091AE8(__p, out);
    if (v12 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    *(_DWORD *)out = 67109634;
    *(_DWORD *)&out[4] = a5;
    *(_WORD *)&out[8] = 1024;
    *(_DWORD *)&out[10] = a6;
    *(_WORD *)&out[14] = 2082;
    *(_QWORD *)&out[16] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Finding all characteristics in range [0x%04x, 0x%04x] on device \"%{public}s\"", (uint8_t *)out, 0x18u);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  operator new();
}

void sub_1005E1F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_1005E7324(&a9, 0);
  sub_1005E7324(&a13, 0);
  _Unwind_Resume(a1);
}

void sub_1005E1FDC(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5)
{
  NSObject *v7;
  void **v8;
  void *__p[2];
  char v10;
  uuid_string_t out;

  v7 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_100091AE8(__p, out);
    if (v10 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    *(_DWORD *)out = 67109378;
    *(_DWORD *)&out[4] = a5;
    *(_WORD *)&out[8] = 2082;
    *(_QWORD *)&out[10] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Finding all descriptors for characteristic handle 0x%04x on device \"%{public}s\"", (uint8_t *)out, 0x12u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  operator new();
}

void sub_1005E21C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_1005E7324(&a9, 0);
  sub_1005E7324(&a13, 0);
  _Unwind_Resume(a1);
}

void sub_1005E221C(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5, int a6)
{
  NSObject *v9;
  void **v10;
  void *__p[2];
  char v12;
  uuid_string_t out;

  v9 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_100091AE8(__p, out);
    if (v12 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    *(_DWORD *)out = 67109634;
    *(_DWORD *)&out[4] = a6;
    *(_WORD *)&out[8] = 1024;
    *(_DWORD *)&out[10] = a5;
    *(_WORD *)&out[14] = 2082;
    *(_QWORD *)&out[16] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Reading value for characteristic value handle 0x%04x, char handle 0x%04x on device \"%{public}s\"", (uint8_t *)out, 0x18u);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  operator new();
}

void sub_1005E2418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_1005E7324(&a9, 0);
  sub_1005E7324(&a13, 0);
  _Unwind_Resume(a1);
}

void sub_1005E246C(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5)
{
  NSObject *v7;
  void **v8;
  void *__p[2];
  char v10;
  uuid_string_t out;

  v7 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_100091AE8(__p, out);
    if (v10 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    *(_DWORD *)out = 67109378;
    *(_DWORD *)&out[4] = a5;
    *(_WORD *)&out[8] = 2082;
    *(_QWORD *)&out[10] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Reading value for descriptor handle 0x%04x on device \"%{public}s\"", (uint8_t *)out, 0x12u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  operator new();
}

void sub_1005E264C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_1005E7324(&a9, 0);
  sub_1005E7324(&a13, 0);
  _Unwind_Resume(a1);
}

void sub_1005E26A0(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5, uint64_t a6, int a7)
{
  NSObject *v10;
  const char *v11;
  void **v12;
  void *__p[2];
  char v14;
  uuid_string_t out;

  v10 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    if (a5)
      v11 = "with";
    else
      v11 = "without";
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_100091AE8(__p, out);
    if (v14 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    *(_DWORD *)out = 136446722;
    *(_QWORD *)&out[4] = v11;
    *(_WORD *)&out[12] = 1024;
    *(_DWORD *)&out[14] = a7;
    *(_WORD *)&out[18] = 2082;
    *(_QWORD *)&out[20] = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Writing value %{public}s response to characteristic handle 0x%04x on device \"%{public}s\"", (uint8_t *)out, 0x1Cu);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  operator new();
}

void sub_1005E28B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_1005E7324((uint64_t *)va, 0);
  sub_1005E7324((uint64_t *)va1, 0);
  _Unwind_Resume(a1);
}

void sub_1005E2904(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5)
{
  NSObject *v7;
  void **v8;
  void *__p[2];
  char v10;
  uuid_string_t out;

  v7 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_100091AE8(__p, out);
    if (v10 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    *(_DWORD *)out = 67109378;
    *(_DWORD *)&out[4] = a5;
    *(_WORD *)&out[8] = 2082;
    *(_QWORD *)&out[10] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Writing value to descriptor handle 0x%04x on device \"%{public}s\"", (uint8_t *)out, 0x12u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  operator new();
}

void sub_1005E2AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_1005E7324(&a9, 0);
  sub_1005E7324(&a13, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1005E2B38(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, unsigned int a5, int a6)
{
  NSObject *v10;
  char *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t **v22;
  NSObject *v23;
  void *__p[2];
  char v26;
  unsigned __int16 v27;
  uint64_t v28;
  uuid_string_t out;

  v28 = a3;
  v27 = a5;
  v10 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    v11 = a6 ? "Subscribing" : "Unsubscribing";
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_100091AE8(__p, out);
    v12 = v26 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)out = 136446722;
    *(_QWORD *)&out[4] = v11;
    *(_WORD *)&out[12] = 1024;
    *(_DWORD *)&out[14] = a5;
    *(_WORD *)&out[18] = 2082;
    *(_QWORD *)&out[20] = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}s to updates of characteristic handle 0x%04x on device \"%{public}s\"", (uint8_t *)out, 0x1Cu);
    if (v26 < 0)
      operator delete(__p[0]);
  }
  v13 = sub_1005E01B0(a1, a4);
  if (!v13)
    goto LABEL_31;
  v16 = *(_QWORD *)(v13 + 120);
  v14 = v13 + 120;
  v15 = v16;
  v17 = (uint64_t **)(v14 - 8);
  if (!v16)
    goto LABEL_22;
  v18 = v14;
  do
  {
    v19 = *(unsigned __int16 *)(v15 + 32);
    v20 = v19 >= a5;
    if (v19 >= a5)
      v21 = (uint64_t *)v15;
    else
      v21 = (uint64_t *)(v15 + 8);
    if (v20)
      v18 = v15;
    v15 = *v21;
  }
  while (*v21);
  if (v18 == v14 || *(unsigned __int16 *)(v18 + 32) > a5)
LABEL_22:
    v18 = v14;
  if (a6)
  {
    *(_QWORD *)out = &v27;
    v22 = sub_1005E78B8((uint64_t **)(v14 - 8), &v27, (uint64_t)&unk_100740F58, (_WORD **)out);
    sub_10000F7A0(v22 + 5, (unint64_t *)&v28, &v28);
    goto LABEL_31;
  }
  if (v18 == v14)
LABEL_31:
    operator new();
  sub_100015ECC(v18 + 40, (unint64_t *)&v28);
  if (!*(_QWORD *)(v18 + 56))
  {
    sub_10039430C(v17, v18);
    goto LABEL_31;
  }
  v23 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)out = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Swallowing unsubscription event as there are other session(s) still subscribed", (uint8_t *)out, 2u);
  }
  return 913;
}

void sub_1005E2E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_1005E7324(&a9, 0);
  sub_1005E7324(&a15, 0);
  _Unwind_Resume(a1);
}

void sub_1005E2EB4(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, uint64_t *a5)
{
  NSObject *v7;
  void **v8;
  uint64_t *v9;
  void *__p[2];
  char v11;
  uuid_string_t out;

  v7 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_100091AE8(__p, out);
    if (v11 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    if (*((char *)a5 + 23) >= 0)
      v9 = a5;
    else
      v9 = (uint64_t *)*a5;
    *(_DWORD *)out = 136446466;
    *(_QWORD *)&out[4] = v8;
    *(_WORD *)&out[12] = 2080;
    *(_QWORD *)&out[14] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Setting GAP name on device \"%{public}s\" to %s", (uint8_t *)out, 0x16u);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  operator new();
}

void sub_1005E3094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_1005E7324(&a9, 0);
  sub_1005E7324(&a13, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1005E30E8(uint64_t a1, const unsigned __int8 *a2, uint64_t *a3)
{
  NSObject *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  _QWORD v14[4];
  unsigned __int8 v15[16];
  uuid_string_t out;

  v6 = qword_100999820;
  if (!*(_QWORD *)(*a3 + 24) && os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = "holder->command";
    _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)out, 0xCu);
    v6 = qword_100999820;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a2, out);
    sub_100091AE8(__p, out);
    v7 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Enqueuing a delayed command for device \"%{public}s\"", (uint8_t *)out, 0xCu);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  v8 = sub_1005E01B0(a1, a2);
  if (!v8)
    return 312;
  v9 = v8;
  sub_1005E4420((_QWORD *)(v8 + 56), a3);
  if (*(_QWORD *)(v9 + 96) == 1)
  {
    *(_BYTE *)(v9 + 106) = 1;
    *(_QWORD *)out = 0;
    *(_QWORD *)&out[8] = 0;
    uuid_copy((unsigned __int8 *)out, a2);
    v10 = sub_1000419F4();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3321888768;
    v14[2] = sub_1005E4564;
    v14[3] = &unk_10093C800;
    uuid_copy(v15, (const unsigned __int8 *)out);
    sub_100475CEC(v10, 1000, v14);
  }
  return 0;
}

BOOL sub_1005E32E8(uint64_t a1, __n128 *a2, unsigned __int8 *uu1)
{
  uint64_t *v5;
  _QWORD **v6;
  NSObject *v7;
  void **v8;
  char *v9;
  void *__p[2];
  char v12;
  uint64_t v13;
  _QWORD *v14[2];
  __n128 v15;
  unsigned __int32 v16;
  __n128 v17;
  uint8_t buf[4];
  void **v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  _BOOL4 v23;
  __n128 v24;
  unsigned __int32 v25;
  uuid_string_t out;

  v13 = 0;
  v14[0] = 0;
  v14[1] = 0;
  *(_QWORD *)out = uu1;
  v5 = sub_1005E7A18((uint64_t **)(a1 + 248), uu1, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)out);
  sub_1005E7B4C((uint64_t)&v13, (uint64_t)(v5 + 6));
  v24 = *a2;
  v25 = a2[1].n128_u32[0];
  sub_100042F44((__n128 *)out, &v24);
  v6 = (_QWORD **)sub_100068488((uint64_t)&v13, (unsigned __int8 *)out);
  v7 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(uu1, out);
    v8 = __p;
    sub_100091AE8(__p, out);
    if (v12 < 0)
      v8 = (void **)__p[0];
    v15 = *a2;
    v16 = a2[1].n128_u32[0];
    sub_100042F44(&v17, &v15);
    sub_10006887C((uint64_t)&v17, out);
    if (out[23] >= 0)
      v9 = out;
    else
      v9 = *(char **)out;
    *(_DWORD *)buf = 136315650;
    v19 = v8;
    v20 = 2080;
    v21 = v9;
    v22 = 1024;
    v23 = v14 == v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "shouldNotifyBuiltInService device:%s service:%s notify:%d", buf, 0x1Cu);
    if (out[23] < 0)
      operator delete(*(void **)out);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  sub_10001A82C((uint64_t)&v13, v14[0]);
  return v14 == v6;
}

void sub_1005E34D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, _QWORD *a16)
{
  if (a14 < 0)
    operator delete(__p);
  sub_10001A82C((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void sub_1005E350C(uint64_t a1, __n128 *a2, unsigned __int8 *uu1)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  NSObject *v8;
  void **v9;
  char *v10;
  void *__p[2];
  char v12;
  uint64_t *v13;
  _QWORD *v14[2];
  __n128 v15;
  unsigned __int32 v16;
  __n128 v17;
  uint8_t buf[4];
  void **v19;
  __int16 v20;
  char *v21;
  __n128 v22;
  unsigned __int32 v23;
  uuid_string_t out;

  v13 = 0;
  v14[0] = 0;
  v14[1] = 0;
  v5 = (uint64_t **)(a1 + 248);
  *(_QWORD *)out = uu1;
  v6 = sub_1005E7A18((uint64_t **)(a1 + 248), uu1, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)out);
  sub_1005E7B4C((uint64_t)&v13, (uint64_t)(v6 + 6));
  v22 = *a2;
  v23 = a2[1].n128_u32[0];
  sub_100042F44((__n128 *)out, &v22);
  sub_10000BED0(&v13, (unsigned __int8 *)out, (uint64_t)out);
  *(_QWORD *)out = uu1;
  v7 = (uint64_t **)(sub_1005E7A18(v5, uu1, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)out)+ 6);
  if (v7 != &v13)
    sub_100068320(v7, v13, v14);
  v8 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(uu1, out);
    v9 = __p;
    sub_100091AE8(__p, out);
    if (v12 < 0)
      v9 = (void **)__p[0];
    v15 = *a2;
    v16 = a2[1].n128_u32[0];
    sub_100042F44(&v17, &v15);
    sub_10006887C((uint64_t)&v17, out);
    if (out[23] >= 0)
      v10 = out;
    else
      v10 = *(char **)out;
    *(_DWORD *)buf = 136315394;
    v19 = v9;
    v20 = 2080;
    v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "didNotifyBuiltInService device:%s service:%s", buf, 0x16u);
    if (out[23] < 0)
      operator delete(*(void **)out);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  sub_10001A82C((uint64_t)&v13, v14[0]);
}

void sub_1005E3704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, _QWORD *a16)
{
  if (a14 < 0)
    operator delete(__p);
  sub_10001A82C((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void sub_1005E3744(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093C9C8);
  v3 = sub_10006D488((uint64_t)off_1009778E0, *(_QWORD *)(a1 + 48), 0);
  if (v3)
  {
    v4 = v3;
    v5 = sub_100442118(v3, 12);
    LOBYTE(v4) = sub_100442118(v4, 31);
    v6 = sub_1000419F4();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1005E3860;
    v10[3] = &unk_10093C7E0;
    v12 = v2;
    v16 = v5;
    v7 = *(id *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 48);
    v8 = *(_QWORD *)(a1 + 56);
    v11 = v7;
    v13 = v8;
    v14 = v9;
    v15 = *(_QWORD *)(a1 + 64);
    v17 = v4;
    sub_100041A34(v6, v10);

  }
}

void sub_1005E384C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1005E3860(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unint64_t v10;
  unsigned __int16 *v11;
  __int16 v12;
  NSObject *v13;
  id v14;
  void *v15;
  int v16;
  __int16 v17;
  char v18;
  void *v19[2];
  char v20;
  void *__p[2];
  char v22;
  __int128 v23;
  int v24;
  __n128 buf;
  int v26;

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(_QWORD *)(a1 + 40);
    v3 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 32);
      buf.n128_u32[0] = 138412290;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "The device \"%@\" supports Classic HRM", (uint8_t *)&buf, 0xCu);
    }
    v5 = sub_10034FCFC();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 64))(v5, *(_QWORD *)(a1 + 32));
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093CA08);
    v6 = off_1009778C0;
    v7 = *(void **)(a1 + 32);
    sub_100091AE8(__p, "HKQuantityTypeIdentifierHeartRate");
    sub_1006576F0((uint64_t)v6, v7, (unsigned __int8 *)__p);
    if (v22 < 0)
      operator delete(__p[0]);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093CA08);
    v8 = off_1009778C0;
    v9 = *(void **)(a1 + 32);
    sub_100091AE8(v19, "FitnessClassic");
    sub_1006576F0((uint64_t)v8, v9, (unsigned __int8 *)v19);
    if (v20 < 0)
      operator delete(v19[0]);
    sub_1005E350C(v2, (__n128 *)&xmmword_10073B47C, *(unsigned __int8 **)(a1 + 48));
    v18 = 0;
    sub_100043758(&v18);
    v10 = sub_100225368(*(_QWORD *)(a1 + 56));
    v16 = v10;
    v17 = WORD2(v10);
    v11 = (unsigned __int16 *)sub_10019B008((uint64_t)&v16);
    if (v11)
    {
      v12 = sub_10019ADE8(v11);
      if ((sub_10011D8CC(v12 & 0xFFF, **(_WORD **)(*(_QWORD *)(a1 + 64) + 8), *(_WORD *)(*(_QWORD *)(a1 + 64) + 48)) & 1) == 0)
      {
        v13 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
        {
          v14 = sub_100030DF4(*(const unsigned __int8 **)(a1 + 48));
          v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
          buf.n128_u32[0] = 138412290;
          *(unint64_t *)((char *)buf.n128_u64 + 4) = (unint64_t)v15;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Failed to redact HRM reports for device %@", (uint8_t *)&buf, 0xCu);

        }
      }
    }
    sub_100043728(&v18);
  }
  if (*(_BYTE *)(a1 + 73))
  {
    buf = 0uLL;
    v26 = 0;
    v23 = xmmword_10073B47C;
    v24 = 0;
    sub_100042F44(&buf, (__n128 *)&v23);
    if (qword_1009778F8 != -1)
      dispatch_once(&qword_1009778F8, &stru_10093CA48);
    sub_1005E0618(qword_1009778F0, *(void **)(a1 + 32), (unsigned __int8 *)&buf);
  }
}

void sub_1005E3B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_1005E3B88(uint64_t a1, uint64_t a2, const unsigned __int8 *a3)
{
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t out[40];

  v4 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a3, (char *)out);
    sub_100091AE8(__p, (char *)out);
    if (v7 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Beginning GAP name update sequence for device \"%{public}s\"", out, 0xCu);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  operator new();
}

void sub_1005E3D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_1005E7324(&a9, 0);
  sub_1005E7324(&a13, 0);
  _Unwind_Resume(a1);
}

void sub_1005E3DAC(uint64_t a1, uint64_t a2, const unsigned __int8 *a3)
{
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t out[40];

  v4 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a3, (char *)out);
    sub_100091AE8(__p, (char *)out);
    if (v7 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Beginning delete bond sequence for device \"%{public}s\"", out, 0xCu);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  operator new();
}

void sub_1005E3F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_1005E7324(&a9, 0);
  sub_1005E7324(&a13, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1005E3FD0(void **a1, char *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char **v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  char **v32;
  char *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t **v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  __n128 v60;
  __n128 v61;
  __n128 v62;

  v6 = (unint64_t)a1[4];
  v7 = a1[1];
  v8 = a1[2];
  v9 = &v7[8 * (v6 >> 9)];
  if (v8 == v7)
    v10 = 0;
  else
    v10 = *(_QWORD *)v9 + 8 * ((unint64_t)a1[4] & 0x1FF);
  if (a3 == v10)
    v11 = 0;
  else
    v11 = ((a3 - *(_QWORD *)a2) >> 3) + ((a2 - v9) << 6) - ((v10 - *(_QWORD *)v9) >> 3);
  v12 = (char *)a1[5];
  v13 = (unint64_t)&v12[-v11];
  if (v11 >= (unint64_t)&v12[-v11])
  {
    if (v8 == v7)
      v21 = 0;
    else
      v21 = ((v8 - v7) << 6) - 1;
    if ((char *)v21 == &v12[v6])
    {
      sub_1005E7F34(a1);
      v12 = (char *)a1[5];
      v13 = (unint64_t)&v12[-v11];
    }
    if (v12 == (char *)v11)
    {
      v22 = (unint64_t)a1[4] + v11;
      v23 = *(_QWORD *)((char *)a1[1] + ((v22 >> 6) & 0x3FFFFFFFFFFFFF8));
      v24 = *a4;
      *a4 = 0;
      *(_QWORD *)(v23 + 8 * (v22 & 0x1FF)) = v24;
      a1[5] = (void *)(v11 + 1);
      goto LABEL_46;
    }
    v25 = (unint64_t)&v12[(_QWORD)a1[4]];
    v26 = (char *)a1[1];
    v27 = (char **)&v26[8 * (v25 >> 9)];
    v28 = *v27;
    v29 = &(*v27)[8 * (v25 & 0x1FF)];
    if (a1[2] == v26)
      v29 = 0;
    v60.n128_u64[0] = (unint64_t)v27;
    v60.n128_u64[1] = (unint64_t)v29;
    v30 = (v29 - v28) >> 3;
    if (v29 - v28 < 9)
    {
      v48 = 512 - v30;
      v32 = &v27[-(v48 >> 9)];
      v33 = &(*v32)[8 * (~(_WORD)v48 & 0x1FF)];
    }
    else
    {
      v31 = v30 - 1;
      v32 = &v27[v31 >> 9];
      v33 = &(*v32)[8 * (v31 & 0x1FF)];
    }
    v49 = *(_QWORD *)v33;
    *(_QWORD *)v33 = 0;
    *(_QWORD *)v29 = v49;
    a1[5] = v12 + 1;
    if (v13 >= 2)
    {
      v50 = sub_1005E8248((uint64_t)&v60, v13);
      v61 = 0u;
      v62 = 0u;
      sub_1005E846C(v50, v51, (_QWORD **)v32, v33, v60.n128_u64[0], (uint64_t *)v60.n128_u64[1], &v61);
      v29 = (char *)v62.n128_u64[1];
      v27 = (char **)v62.n128_u64[0];
      v60 = v62;
    }
    if (v29 == *v27)
    {
      v60.n128_u64[0] = (unint64_t)(v27 - 1);
      v29 = *(v27 - 1) + 4096;
    }
    v18 = (uint64_t *)(v29 - 8);
    goto LABEL_44;
  }
  if (v6)
  {
    if (v11)
    {
LABEL_10:
      v14 = (unint64_t)a1[4];
      v15 = (char *)a1[1];
      v16 = (uint64_t *)&v15[8 * (v14 >> 9)];
      v17 = *v16;
      if (a1[2] == v15)
        v18 = 0;
      else
        v18 = (uint64_t *)(*v16 + 8 * ((unint64_t)a1[4] & 0x1FF));
      v60.n128_u64[0] = (unint64_t)&v15[8 * (v14 >> 9)];
      v60.n128_u64[1] = (unint64_t)v18;
      v19 = ((uint64_t)v18 - v17) >> 3;
      if ((uint64_t)v18 - v17 < 9)
        v20 = (uint64_t *)(v16[-((unint64_t)(512 - v19) >> 9)] + 8 * (~(512 - (_WORD)v19) & 0x1FF));
      else
        v20 = (uint64_t *)(*(uint64_t *)((char *)v16 + (((unint64_t)(v19 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v19 - 1) & 0x1FF));
      v40 = *v18;
      *v18 = 0;
      *v20 = v40;
      v41 = (uint64_t)a1[5] + 1;
      a1[4] = (void *)(v14 - 1);
      a1[5] = (void *)v41;
      if (v11 == 1)
        goto LABEL_45;
      v42 = (uint64_t)v18 - *v16;
      v43 = v42 >> 3;
      if (v42 < -7)
      {
        v52 = 510 - v43;
        v45 = (uint64_t **)&v16[-(v52 >> 9)];
        v46 = *v45;
        v47 = ~(_DWORD)v52 & 0x1FFLL;
      }
      else
      {
        v44 = v43 + 1;
        v45 = (uint64_t **)&v16[v44 >> 9];
        v46 = *v45;
        v47 = v44 & 0x1FF;
      }
      v53 = &v46[v47];
      v54 = (uint64_t **)sub_1002A6178((uint64_t)&v60, v11);
      v61 = v60;
      sub_1005E82B0(v45, v53, v54, v55, (uint64_t **)&v61);
      v18 = (uint64_t *)v61.n128_u64[1];
      v60.n128_u64[0] = v61.n128_u64[0];
LABEL_44:
      v60.n128_u64[1] = (unint64_t)v18;
LABEL_45:
      v56 = *a4;
      *a4 = 0;
      sub_1005E7324(v18, v56);
      goto LABEL_46;
    }
  }
  else
  {
    sub_1005E7C24(a1);
    if (v11)
      goto LABEL_10;
  }
  v34 = (unint64_t)a1[4];
  v35 = (char *)a1[1];
  v36 = &v35[8 * (v34 >> 9)];
  v37 = *(_QWORD *)v36 + 8 * (v34 & 0x1FF);
  if (a1[2] == v35)
    v37 = 0;
  if (v37 == *(_QWORD *)v36)
    v37 = *((_QWORD *)v36 - 1) + 4096;
  v38 = *a4;
  *a4 = 0;
  *(_QWORD *)(v37 - 8) = v38;
  v39 = (uint64_t)a1[5] + 1;
  a1[4] = (void *)(v34 - 1);
  a1[5] = (void *)v39;
LABEL_46:
  v57 = a1[1];
  if (a1[2] == v57)
    v58 = 0;
  else
    v58 = v57[(unint64_t)a1[4] >> 9] + 8 * ((unint64_t)a1[4] & 0x1FF);
  v61.n128_u64[0] = (unint64_t)&v57[(unint64_t)a1[4] >> 9];
  v61.n128_u64[1] = v58;
  return sub_1002A6178((uint64_t)&v61, v11);
}

void sub_1005E43A0(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_1005E7C24((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 9));
  v7 = *v6 + 8 * (v4 & 0x1FF);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4096;
  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)(v7 - 8) = v8;
  v9 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v4 - 1;
  *(_QWORD *)(a1 + 40) = v9;
}

void sub_1005E4420(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1005E7F34(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  v9 = *(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8));
  v10 = *a2;
  *a2 = 0;
  *(_QWORD *)(v9 + 8 * (v8 & 0x1FF)) = v10;
  a1[5] = v7 + 1;
}

void sub_1005E44A8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = a2;
  if (!*(_BYTE *)(a3 + 105))
  {
    v6 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
      sub_10070BFA0(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  if (!*(_QWORD *)(a3 + 48))
  {
    v14 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
      sub_10070BF30(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  if (!*(_BYTE *)(a3 + 104))
    sub_1005E4724(a1, v5, a3);

}

void sub_1005E4554(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005E4564(uint64_t a1)
{
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_10093CA48);
  sub_1005E45B4(qword_1009778F0, (const unsigned __int8 *)(a1 + 32));
}

void sub_1005E45B4(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[4];
  unsigned __int8 v10[16];
  uuid_t dst;

  v4 = sub_1005E01B0(a1, a2);
  if (v4)
  {
    v5 = v4;
    if (*(_QWORD *)(v4 + 96))
    {
      if (!*(_BYTE *)(v4 + 105)
        || !*(_BYTE *)(v4 + 106)
        || (sub_1005E4420((_QWORD *)(v4 + 8), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + ((*(_QWORD *)(v4 + 88) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(_QWORD *)(v4 + 88) & 0x1FFLL))), sub_1005E4884((int64x2_t *)(v5 + 56)), v6 = sub_100030DF4(a2), v7 = (void *)objc_claimAutoreleasedReturnValue(v6), sub_1005E44A8(a1, v7, v5), v7, *(_QWORD *)(v5 + 96)))
      {
        *(_BYTE *)(v5 + 106) = 1;
        memset(dst, 0, sizeof(dst));
        uuid_copy(dst, a2);
        v8 = sub_1000419F4();
        v9[0] = _NSConcreteStackBlock;
        v9[1] = 3321888768;
        v9[2] = sub_1005E48E0;
        v9[3] = &unk_10093C800;
        uuid_copy(v10, dst);
        sub_100475CEC(v8, 1000, v9);
      }
    }
  }
}

void sub_1005E46FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005E4714(uint64_t a1, uint64_t a2)
{
  uuid_copy((unsigned __int8 *)(a1 + 32), (const unsigned __int8 *)(a2 + 32));
}

void sub_1005E4724(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  BOOL v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unsigned __int8 v21[16];

  v5 = a2;
  if (*(_BYTE *)(a3 + 104))
    v6 = 1;
  else
    v6 = *(_QWORD *)(a3 + 48) == 0;
  if (v6)
  {
    v7 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
      sub_10070C010(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + ((*(_QWORD *)(a3 + 40) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * (*(_QWORD *)(a3 + 40) & 0x1FFLL))
                  + 24);
  sub_100030BCC(v21, v5);
  sub_1005DFD54(a1, v21, 1, &v19);
  sub_1005C66FC(v15, v5, &v19, *(_WORD *)a3);
  v16 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_BYTE *)(a3 + 104) = 1;
  *(_BYTE *)(a3 + 106) = 0;

}

void sub_1005E485C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  sub_10009F88C((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_1005E4884(int64x2_t *a1)
{
  sub_1005E7324((uint64_t *)(*(_QWORD *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (a1[2].i64[0] & 0x1FF)), 0);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_10073D4C0);
  return sub_1002BB5F8((uint64_t)a1, 1);
}

uint64_t sub_1005E48E0(uint64_t a1)
{
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_10093CA48);
  return sub_1005E45B4(qword_1009778F0, a1 + 32);
}

void sub_1005E4930(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  __int16 v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  __int16 v13;
  unsigned __int8 v14[22];
  unsigned __int8 src[8];
  uint64_t v16;

  v5 = a3;
  v6 = objc_autoreleasePoolPush();
  *(_QWORD *)src = 0;
  v16 = 0;
  sub_100030BCC(src, *(_QWORD *)(a2 + 16));
  v7 = *(_WORD *)(a2 + 40);
  v8 = sub_1000419F4();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  v10[2] = sub_1005E4A60;
  v10[3] = &unk_10093C838;
  v12 = a1;
  uuid_copy(v14, src);
  v13 = v7;
  v9 = v5;
  v11 = v9;
  sub_100041A34(v8, v10);

  objc_autoreleasePoolPop(v6);
}

void sub_1005E4A30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unsigned __int16 *sub_1005E4A60(uint64_t a1)
{
  unsigned __int16 *result;

  result = (unsigned __int16 *)sub_1005E01B0(*(_QWORD *)(a1 + 40), (const unsigned __int8 *)(a1 + 50));
  if (result)
  {
    if (*result == *(unsigned __int16 *)(a1 + 48))
      return (unsigned __int16 *)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  return result;
}

void sub_1005E4AB0(uint64_t a1, uint64_t a2)
{
  uuid_copy((unsigned __int8 *)(a1 + 50), (const unsigned __int8 *)(a2 + 50));
}

void sub_1005E4AC0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  const void *v7;
  int64_t v8;
  char *v9;
  _QWORD v10[6];
  void *__p;
  void *__dst;
  uint64_t v13;
  int v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  sub_10001FE6C(&v15, a4);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  v10[2] = sub_1005E4BEC;
  v10[3] = &unk_10093C868;
  v10[4] = a1;
  v10[5] = a2;
  v14 = a3;
  __dst = 0;
  v13 = 0;
  __p = 0;
  v7 = v15;
  v8 = v16 - v15;
  if (v16 != v15)
  {
    sub_1002A3F78(&__p, v8 >> 3);
    v9 = (char *)__dst;
    memmove(__dst, v7, v8);
    __dst = &v9[8 * (v8 >> 3)];
  }
  sub_1005E4930(a1, a2, v10);
  if (__p)
  {
    __dst = __p;
    operator delete(__p);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
}

void sub_1005E4BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v17;
  void *v19;

  v19 = *(void **)(v17 - 72);
  if (v19)
  {
    *(_QWORD *)(v17 - 64) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005E4BEC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_1005E4C48(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 72), (_QWORD *)(a1 + 48));
  v3 = *(_QWORD **)(a1 + 48);
  v2 = *(_QWORD **)(a1 + 56);
  while (v3 != v2)
  {
    if (*v3)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      v2 = *(_QWORD **)(a1 + 56);
    }
    ++v3;
  }
}

void sub_1005E4C48(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  id v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31[16];
  unsigned __int8 uu1[8];
  std::__shared_weak_count *v33;

  v8 = *(id *)(a2 + 16);
  if (a3)
  {
    if (a3 > 255)
    {
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        sub_10070C0F0();
      v9 = 1;
    }
    else
    {
      v9 = (a3 + 1000);
    }
  }
  else
  {
    if (*a4 != a4[1])
    {
      *(_QWORD *)uu1 = 0;
      v33 = 0;
      sub_100030BCC(v31, v8);
      sub_1005DFD54(a1, v31, 0, uu1);
      if (*(_QWORD *)uu1)
        sub_1004B5DC8(*(uint64_t *)uu1, (uint64_t)"");
      v10 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    v9 = 0;
  }
  sub_100030BCC(uu1, v8);
  v13 = sub_1005DEC7C(a1 + 192, uu1);
  if (!*(_QWORD *)(v13 + 48))
  {
    v14 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
      sub_10070BF30(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  v22 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v13 + 16) + ((*(_QWORD *)(v13 + 40) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * (*(_QWORD *)(v13 + 40) & 0x1FFLL));
  if (v22[3] != a2)
  {
    v23 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
      sub_10070C080(v23, v24, v25, v26, v27, v28, v29, v30);
  }
  if (*v22)
    (**(void (***)(_QWORD, id, _QWORD, uint64_t, _QWORD *, _QWORD))*v22)(*v22, v8, v22[1], v9, a4, v22[2]);
  sub_1005E4884((int64x2_t *)(v13 + 8));
  *(_BYTE *)(v13 + 104) = 0;
  if (*(_QWORD *)(v13 + 48))
    sub_1005E4724(a1, v8, v13);

}

void sub_1005E4E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);
  sub_10009F88C((uint64_t)va);

  _Unwind_Resume(a1);
}

_QWORD *sub_1005E4E9C(uint64_t a1, uint64_t a2)
{
  return sub_10001FE6C((_QWORD *)(a1 + 48), a2 + 48);
}

void sub_1005E4EA8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1005E4EC0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1005E4AC0(a1 - 8, a2, a3, a4);
}

void sub_1005E4EC8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005E4F78;
  v6[3] = &unk_100918868;
  v8 = a1;
  v5 = v3;
  v7 = v5;
  sub_100041A34(v4, v6);

}

void sub_1005E4F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1005E4F78(uint64_t a1)
{
  sub_1005E4F84(*(os_unfair_lock_s **)(a1 + 40), *(void **)(a1 + 32));
}

void sub_1005E4F84(os_unfair_lock_s *a1, void *a2)
{
  os_unfair_lock_s *v2;
  id v3;
  _QWORD v4[4];
  id v5;

  v2 = a1 + 10;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1005E50D4;
  v4[3] = &unk_10093C8A0;
  v5 = a2;
  v3 = v5;
  sub_1005E5018(v2, v4);

}

void sub_1005E5000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1005E5018(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1005E50AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1005E50D4(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32));
}

void sub_1005E50EC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  uint64_t v11;

  v5 = a2;
  v6 = sub_1000419F4();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1005E51A4;
  v8[3] = &unk_1009183A0;
  v10 = a1;
  v7 = v5;
  v9 = v7;
  v11 = a3;
  sub_100041A34(v6, v8);

}

void sub_1005E5184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1005E51A4(uint64_t a1)
{
  sub_1005E51B4(*(os_unfair_lock_s **)(a1 + 40), *(void **)(a1 + 32), *(_QWORD *)(a1 + 48));
}

void sub_1005E51B4(os_unfair_lock_s *a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005E524C;
  v6[3] = &unk_10093C8C8;
  v7 = a2;
  v8 = a3;
  v5 = v7;
  sub_1005E5018(a1 + 10, v6);

}

void sub_1005E5234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_1005E524C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1005E5264(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005E5314;
  v6[3] = &unk_100918868;
  v8 = a1;
  v5 = v3;
  v7 = v5;
  sub_100041A34(v4, v6);

}

void sub_1005E52F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1005E5314(uint64_t a1)
{
  void *v1;
  os_unfair_lock_s *v2;
  _QWORD v3[4];
  id v4;

  v1 = *(void **)(a1 + 32);
  v2 = (os_unfair_lock_s *)(*(_QWORD *)(a1 + 40) + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1005E5398;
  v3[3] = &unk_10093C8A0;
  v4 = v1;
  sub_1005E5018(v2, v3);

}

void sub_1005E5384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1005E5398(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(_QWORD *)(a1 + 32));
}

void sub_1005E53B0(uint64_t a1, void *a2, __int16 a3)
{
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  __int16 v11;

  v5 = a2;
  v6 = sub_1000419F4();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1005E5468;
  v8[3] = &unk_10092A3E0;
  v10 = a1;
  v7 = v5;
  v9 = v7;
  v11 = a3;
  sub_100041A34(v6, v8);

}

void sub_1005E5448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1005E5468(uint64_t a1)
{
  sub_1005E5478(*(os_unfair_lock_s **)(a1 + 40), *(void **)(a1 + 32), *(_WORD *)(a1 + 48));
}

void sub_1005E5478(os_unfair_lock_s *a1, void *a2, __int16 a3)
{
  id v5;
  _QWORD v6[4];
  id v7;
  __int16 v8;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005E5514;
  v6[3] = &unk_10093C8F0;
  v7 = a2;
  v8 = a3;
  v5 = v7;
  sub_1005E5018(a1 + 10, v6);

}

void sub_1005E54FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_1005E5514(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

void sub_1005E5530(id a1)
{
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_10093CA48);
  sub_1005E5568();
}

uint64_t sub_1005E5568()
{
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_10093CAC0);
  return (*(uint64_t (**)(void *))(*(_QWORD *)off_100978168 + 272))(off_100978168);
}

void sub_1005E55B0(uint64_t a1)
{
  id v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  int v8;
  void *v9;

  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093CA28);
  v2 = sub_100624724((uint64_t)off_1009778A0, *(_QWORD *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (v3)
    goto LABEL_4;
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_13;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093CA08);
  sub_10003F924((uint64_t)off_1009778C0, *(_QWORD *)(a1 + 40), 0, 1u, 0, 0, (unsigned __int8 *)&v8);
  v6 = sub_100030DF4((const unsigned __int8 *)&v8);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v3)
  {
LABEL_4:
    v4 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
    {
      v8 = 138543362;
      v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Dispatching indication for device %{public}@", (uint8_t *)&v8, 0xCu);
    }
    if (qword_1009778F8 != -1)
      dispatch_once(&qword_1009778F8, &stru_10093CA48);
    sub_1005E57B4(qword_1009778F0, v3, *(unsigned __int16 *)(a1 + 80), a1 + 48, v5, *(unsigned __int8 *)(a1 + 82), *(_QWORD *)(a1 + 72));
  }
  else
  {
LABEL_13:
    v7 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "incoming indication from a device that is no longer connected. Ignoring.", (uint8_t *)&v8, 2u);
    }
    v3 = 0;
  }

}

void sub_1005E579C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005E57B4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  id v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t *v30;
  uint64_t *v31;
  BOOL v32;
  _QWORD *v33;
  std::string *p_buf;
  std::string::size_type size;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  uint64_t *v47;
  NSObject *v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  char *v57;
  NSObject *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *p_shared_owners;
  unint64_t v65;
  os_unfair_lock_s *v66;
  void *v67;
  uint64_t (**v68)();
  unsigned int *v69;
  _QWORD v70[4];
  id v71;
  __int16 v72;
  __int16 v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  std::string buf;
  __int16 v77;
  int v78;
  __n128 v79;
  _OWORD v80[4];
  void *__p[2];
  __int128 v82;
  __int128 v83;
  _OWORD v84[9];
  uint64_t v85;
  __int128 v86;
  int v87;
  __int128 v88;
  int v89;
  __int128 v90;
  int v91;
  unsigned __int8 uu2[16];
  __int128 v93;
  uint64_t v94;

  v12 = a2;
  if (v12)
  {
    v74 = 0;
    v75 = 0;
    sub_100030BCC(&v79, v12);
    sub_1005DFD54(a1, (unsigned __int8 *)&v79, 0, &v74);
    if (v74)
    {
      v13 = sub_1004B5294(v74, a3);
      v14 = v13;
      if (!v13)
        operator new();
      v15 = v13[1];
      v16 = *(_DWORD *)(v15 + 20);
      v79 = *(__n128 *)(v15 + 4);
      LODWORD(v80[0]) = v16;
      sub_100042F44((__n128 *)uu2, &v79);
      v91 = 0;
      v90 = xmmword_100742D18;
      if (sub_100072DF0(v17, (unsigned __int8 *)&v90))
      {
        sub_100041698((uint64_t)(v14 + 9), a4);
        v18 = v74;
        v88 = xmmword_10073B328;
        v89 = 0;
        sub_100042F44(&v79, (__n128 *)&v88);
        v86 = xmmword_10073B378;
        v87 = 0;
        sub_100042F44((__n128 *)uu2, (__n128 *)&v86);
        v19 = sub_1004B535C(v18, (unsigned __int8 *)&v79, uu2);
        v85 = 0;
        v83 = 0u;
        memset(v84, 0, sizeof(v84));
        *(_OWORD *)__p = 0u;
        v82 = 0u;
        memset(v80, 0, sizeof(v80));
        v79 = 0u;
        sub_1002613AC((uint64_t)&v79);
        if (v19 && *(unsigned __int16 *)(v19 + 74) == (_DWORD)a3 && sub_10003F8C4(a4) == 4)
        {
          *(_OWORD *)uu2 = 0u;
          v93 = 0u;
          v20 = sub_1004804E0((uint64_t)uu2, 0, a4);
          v21 = sub_1004805A4(v20);
          v22 = sub_1004805A4((uint64_t)uu2);
          v23 = qword_100999820;
          if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v21;
            LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v22;
            HIWORD(buf.__r_.__value_.__r.__words[1]) = 2114;
            buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v12;
            v77 = 1024;
            v78 = a6;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Received \"service changed\" notification for [0x%04x;0x%04x] for device \"%{public}@\" wakeUp:%d",
              (uint8_t *)&buf,
              0x1Eu);
          }
          sub_100030BCC(&buf, v12);
          if (a1 + 200 == sub_10000C5B8(a1 + 192, (unsigned __int8 *)&buf))
          {
            v58 = qword_100999820;
            if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
              sub_10070C29C(v21, v22, v58);
          }
          else
          {
            v66 = (os_unfair_lock_s *)a1;
            v67 = v12;
            sub_100030BCC(&buf, v12);
            v24 = sub_1005DEC7C(a1 + 192, (unsigned __int8 *)&buf);
            v25 = (uint64_t **)(v24 + 112);
            v26 = *(_QWORD *)(v24 + 112);
            v27 = (uint64_t *)(v24 + 120);
            if (v26 != v24 + 120)
            {
              do
              {
                v28 = *(unsigned __int16 *)(v26 + 32);
                if (v28 < v21 || v28 > v22)
                {
                  v30 = *(uint64_t **)(v26 + 8);
                  if (v30)
                  {
                    do
                    {
                      v31 = v30;
                      v30 = (uint64_t *)*v30;
                    }
                    while (v30);
                  }
                  else
                  {
                    do
                    {
                      v31 = *(uint64_t **)(v26 + 16);
                      v32 = *v31 == v26;
                      v26 = (uint64_t)v31;
                    }
                    while (!v32);
                  }
                }
                else
                {
                  v33 = *(_QWORD **)(v26 + 40);
                  if (v33 != (_QWORD *)(v26 + 48))
                  {
                    do
                    {
                      sub_10050945C(v33[4], &buf);
                      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        p_buf = &buf;
                      else
                        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
                      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
                      else
                        size = buf.__r_.__value_.__l.__size_;
                      v36 = sub_1002614D8(v80, (uint64_t)p_buf, size);
                      sub_1002614D8(v36, (uint64_t)",", 1);
                      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(buf.__r_.__value_.__l.__data_);
                      v37 = (_QWORD *)v33[1];
                      if (v37)
                      {
                        do
                        {
                          v38 = v37;
                          v37 = (_QWORD *)*v37;
                        }
                        while (v37);
                      }
                      else
                      {
                        do
                        {
                          v38 = (_QWORD *)v33[2];
                          v32 = *v38 == (_QWORD)v33;
                          v33 = v38;
                        }
                        while (!v32);
                      }
                      v33 = v38;
                    }
                    while (v38 != (_QWORD *)(v26 + 48));
                  }
                  v31 = sub_10039430C(v25, v26);
                }
                v26 = (uint64_t)v31;
              }
              while (v31 != v27);
            }
            sub_1004B58AC(v74, v21, v22);
            v70[0] = _NSConcreteStackBlock;
            v70[1] = 3221225472;
            v70[2] = sub_1005E61F8;
            v70[3] = &unk_10093C968;
            v12 = v67;
            v71 = v67;
            v72 = v21;
            v73 = v22;
            sub_1005E5018(v66 + 10, v70);

          }
          *(_QWORD *)&uu2[8] = &off_100918258;
          if ((_QWORD)v93)
            sub_100056AAC((unsigned int *)v93);
        }
        else
        {
          sub_100030BCC(uu2, v12);
          if (a1 + 200 == sub_10000C5B8(a1 + 192, uu2))
          {
            if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
              sub_10070C1DC();
          }
          else
          {
            sub_100030BCC(uu2, v12);
            v39 = sub_1005DEC7C(a1 + 192, uu2);
            v42 = *(_QWORD *)(v39 + 120);
            v40 = v39 + 120;
            v41 = v42;
            if (!v42)
              goto LABEL_112;
            v43 = a3 - 1;
            v44 = v40;
            do
            {
              v45 = *(unsigned __int16 *)(v41 + 32);
              v46 = v45 >= v43;
              if (v45 >= v43)
                v47 = (uint64_t *)v41;
              else
                v47 = (uint64_t *)(v41 + 8);
              if (v46)
                v44 = v41;
              v41 = *v47;
            }
            while (*v47);
            if (v44 != v40 && *(unsigned __int16 *)(v44 + 32) <= v43)
            {
              if (*(_QWORD *)(v44 + 56))
              {
                v49 = *(_QWORD **)(v44 + 40);
                v50 = (_QWORD *)(v44 + 48);
                if (v49 != (_QWORD *)(v44 + 48))
                {
                  do
                  {
                    v51 = v49[4];
                    if (qword_100978170 != -1)
                      dispatch_once(&qword_100978170, &stru_10093CAC0);
                    sub_1002EA1F4((uint64_t)off_100978168, v12, v51, a3, a4, a7);
                    sub_10050945C(v51, (std::string *)uu2);
                    if ((SBYTE7(v93) & 0x80u) == 0)
                      v52 = uu2;
                    else
                      v52 = *(unsigned __int8 **)uu2;
                    if ((SBYTE7(v93) & 0x80u) == 0)
                      v53 = BYTE7(v93);
                    else
                      v53 = *(_QWORD *)&uu2[8];
                    v54 = sub_1002614D8(v80, (uint64_t)v52, v53);
                    sub_1002614D8(v54, (uint64_t)",", 1);
                    if (SBYTE7(v93) < 0)
                      operator delete(*(void **)uu2);
                    v55 = (_QWORD *)v49[1];
                    if (v55)
                    {
                      do
                      {
                        v56 = v55;
                        v55 = (_QWORD *)*v55;
                      }
                      while (v55);
                    }
                    else
                    {
                      do
                      {
                        v56 = (_QWORD *)v49[2];
                        v32 = *v56 == (_QWORD)v49;
                        v49 = v56;
                      }
                      while (!v32);
                    }
                    v49 = v56;
                  }
                  while (v56 != v50);
                }
                *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
                std::ostream::sentry::sentry(&buf, v80);
                v57 = (char *)v80 + *(_QWORD *)(*(_QWORD *)&v80[0] - 24);
                if ((v57[32] & 5) == 0)
                {
                  (*(void (**)(unsigned __int8 *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v57 + 5) + 32))(uu2, *((_QWORD *)v57 + 5), -1, 1, 16);
                  if (v94 == -1)
                    std::ios_base::clear((std::ios_base *)((char *)v80 + *(_QWORD *)(*(_QWORD *)&v80[0] - 24)), *(_DWORD *)((char *)&v80[2] + *(_QWORD *)(*(_QWORD *)&v80[0] - 24)) | 4);
                }
                std::ostream::sentry::~sentry(&buf);
                uu2[0] = 0;
                sub_1002614D8(v80, (uint64_t)uu2, 1);
              }
            }
            else
            {
LABEL_112:
              if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
                sub_10070C23C();
            }
          }
        }
        if (a6)
        {
          v59 = sub_10005D5A4();
          std::stringbuf::str((char *)v80 + 8);
          if ((SBYTE7(v93) & 0x80u) == 0)
            v60 = uu2;
          else
            v60 = *(unsigned __int8 **)uu2;
          v61 = *(unsigned int **)(a4 + 8);
          v68 = &off_100918258;
          v69 = v61;
          if (v61)
            sub_10003C37C((uint64_t)v61);
          (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, id, uint64_t (***)()))(*(_QWORD *)v59 + 40))(v59, 4, v60, v12, &v68);
          v68 = &off_100918258;
          if (v69)
            sub_100056AAC(v69);
          if (SBYTE7(v93) < 0)
            operator delete(*(void **)uu2);
        }
        *(unint64_t *)((char *)v79.n128_u64
        *(_QWORD *)&v80[0] = v62;
        if (SHIBYTE(v82) < 0)
          operator delete(__p[1]);
        std::streambuf::~streambuf((char *)v80 + 8);
        std::ios::~ios(v84);
      }
      else
      {
        v48 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        {
          sub_1005BAE8C(v14, (std::string *)&v79);
          sub_10070C324((uint64_t)v12, (char *)&v79, uu2, v48);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    {
      sub_10070C17C();
    }
    v63 = v75;
    if (v75)
    {
      p_shared_owners = (unint64_t *)&v75->__shared_owners_;
      do
        v65 = __ldaxr(p_shared_owners);
      while (__stlxr(v65 - 1, p_shared_owners));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
  {
    sub_10070C150();
  }

}

void sub_1005E60AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  std::ostream::sentry::~sentry(&__p);
  sub_1006CC5C8((uint64_t)&a30);
  sub_10009F88C((uint64_t)&a21);

  _Unwind_Resume(a1);
}

uint64_t sub_1005E61F8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40), *(unsigned __int16 *)(a1 + 42));
}

void sub_1005E6218(_QWORD *a1)
{
  NSObject *v1;
  const unsigned __int8 *v2;
  NSObject *v3;
  _BYTE *v4;
  const unsigned __int8 *v5;
  const unsigned __int8 *v6;
  BOOL v7;
  NSObject *v8;
  const unsigned __int8 *v9;
  NSObject *v10;
  _BYTE *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  const unsigned __int8 *v15;
  const unsigned __int8 *v16;
  NSObject *v17;
  const unsigned __int8 *v18;
  NSObject *v19;
  _BYTE *v20;
  unsigned __int8 *v21;
  const unsigned __int8 **v22;
  NSObject *v23;
  const unsigned __int8 *v24;
  NSObject *v25;
  _BYTE *v26;
  const unsigned __int8 *v27;
  NSObject *v28;
  int v29;
  const unsigned __int8 *v30;
  NSObject *v31;
  uint8_t *v32;
  const unsigned __int8 *v33;
  const unsigned __int8 *v34;
  const unsigned __int8 *v35;
  const unsigned __int8 *v36;
  const unsigned __int8 *v37;
  const unsigned __int8 *v38;
  NSObject *v39;
  const unsigned __int8 *v40;
  const unsigned __int8 *v41;
  NSObject *v42;
  int v43;
  uint8_t *v44;
  id v45;
  uint64_t v46;
  void *v47;
  uint8_t *v48;
  const unsigned __int8 *v49;
  const unsigned __int8 *v50;
  unsigned __int8 *v51;
  const unsigned __int8 **v52;
  const unsigned __int8 *v54;
  __int128 v55;
  int v56;
  uint8_t buf[48];
  _BYTE __p[12];
  __int16 v59;
  uint64_t v60;
  char v61;

  v1 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: ------------------- GATT Gateway --------------------", buf, 2u);
    v1 = qword_100999820;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: Active commands:", buf, 2u);
  }
  v2 = (const unsigned __int8 *)a1[24];
  v54 = (const unsigned __int8 *)(a1 + 25);
  if (v2 != (const unsigned __int8 *)(a1 + 25))
  {
    do
    {
      if (v2[152])
      {
        v3 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
        {
          memset(buf, 0, 37);
          uuid_unparse_upper(v2 + 32, (char *)buf);
          sub_100091AE8(__p, (char *)buf);
          v4 = v61 >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v4;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", buf, 0xCu);
          if (v61 < 0)
            operator delete(*(void **)__p);
        }
      }
      v5 = (const unsigned __int8 *)*((_QWORD *)v2 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(const unsigned __int8 **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (const unsigned __int8 *)*((_QWORD *)v2 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v54);
  }
  v8 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "statedump: Pending commands:", buf, 2u);
  }
  v9 = (const unsigned __int8 *)a1[24];
  if (v9 != v54)
  {
    do
    {
      if (*((_QWORD *)v9 + 12))
      {
        v10 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
        {
          memset(buf, 0, 37);
          uuid_unparse_upper(v9 + 32, (char *)buf);
          sub_100091AE8(__p, (char *)buf);
          if (v61 >= 0)
            v11 = __p;
          else
            v11 = *(_BYTE **)__p;
          v12 = *((_QWORD *)v9 + 12);
          v13 = "s";
          if (v12 == 1)
            v13 = "";
          if (v9[153])
            v14 = "flowing";
          else
            v14 = "frozen";
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = v11;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v12;
          *(_WORD *)&buf[22] = 2082;
          *(_QWORD *)&buf[24] = v13;
          *(_WORD *)&buf[32] = 2082;
          *(_QWORD *)&buf[34] = v14;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s - %lu command%{public}s (%{public}s)", buf, 0x2Au);
          if (v61 < 0)
            operator delete(*(void **)__p);
        }
      }
      v15 = (const unsigned __int8 *)*((_QWORD *)v9 + 1);
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = *(const unsigned __int8 **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (const unsigned __int8 *)*((_QWORD *)v9 + 2);
          v7 = *(_QWORD *)v16 == (_QWORD)v9;
          v9 = v16;
        }
        while (!v7);
      }
      v9 = v16;
    }
    while (v16 != v54);
  }
  v17 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "statedump: Device databases:", buf, 2u);
  }
  v18 = (const unsigned __int8 *)a1[27];
  if (v18 != (const unsigned __int8 *)(a1 + 28))
  {
    do
    {
      v19 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v18 + 32, (char *)buf);
        sub_100091AE8(__p, (char *)buf);
        v20 = v61 >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", buf, 0xCu);
        if (v61 < 0)
          operator delete(*(void **)__p);
      }
      sub_1004B5DC8(*((_QWORD *)v18 + 6), (uint64_t)"      ");
      v21 = (unsigned __int8 *)*((_QWORD *)v18 + 1);
      if (v21)
      {
        do
        {
          v22 = (const unsigned __int8 **)v21;
          v21 = *(unsigned __int8 **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (const unsigned __int8 **)*((_QWORD *)v18 + 2);
          v7 = *v22 == v18;
          v18 = (const unsigned __int8 *)v22;
        }
        while (!v7);
      }
      v18 = (const unsigned __int8 *)v22;
    }
    while (v22 != a1 + 28);
  }
  v23 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "statedump: Client subscriptions:", buf, 2u);
  }
  v24 = (const unsigned __int8 *)a1[24];
  if (v24 != v54)
  {
    do
    {
      v25 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v24 + 32, (char *)buf);
        sub_100091AE8(__p, (char *)buf);
        v26 = __p;
        if (v61 < 0)
          v26 = *(_BYTE **)__p;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", buf, 0xCu);
        if (v61 < 0)
          operator delete(*(void **)__p);
      }
      v27 = (const unsigned __int8 *)*((_QWORD *)v24 + 20);
      if (v27 != v24 + 168)
      {
        do
        {
          v28 = qword_100999820;
          if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
          {
            v29 = *((unsigned __int16 *)v27 + 16);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v29;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "statedump:       0x%04x", buf, 8u);
          }
          v30 = (const unsigned __int8 *)*((_QWORD *)v27 + 5);
          if (v30 != v27 + 48)
          {
            do
            {
              v31 = qword_100999820;
              if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
              {
                sub_1000340DC(*((_QWORD *)v30 + 4), (uint64_t)buf);
                v32 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
                *(_DWORD *)__p = 136446210;
                *(_QWORD *)&__p[4] = v32;
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "statedump:          %{public}s", __p, 0xCu);
                if ((char)buf[23] < 0)
                  operator delete(*(void **)buf);
              }
              v33 = (const unsigned __int8 *)*((_QWORD *)v30 + 1);
              if (v33)
              {
                do
                {
                  v34 = v33;
                  v33 = *(const unsigned __int8 **)v33;
                }
                while (v33);
              }
              else
              {
                do
                {
                  v34 = (const unsigned __int8 *)*((_QWORD *)v30 + 2);
                  v7 = *(_QWORD *)v34 == (_QWORD)v30;
                  v30 = v34;
                }
                while (!v7);
              }
              v30 = v34;
            }
            while (v34 != v27 + 48);
          }
          v35 = (const unsigned __int8 *)*((_QWORD *)v27 + 1);
          if (v35)
          {
            do
            {
              v36 = v35;
              v35 = *(const unsigned __int8 **)v35;
            }
            while (v35);
          }
          else
          {
            do
            {
              v36 = (const unsigned __int8 *)*((_QWORD *)v27 + 2);
              v7 = *(_QWORD *)v36 == (_QWORD)v27;
              v27 = v36;
            }
            while (!v7);
          }
          v27 = v36;
        }
        while (v36 != v24 + 168);
      }
      v37 = (const unsigned __int8 *)*((_QWORD *)v24 + 1);
      if (v37)
      {
        do
        {
          v38 = v37;
          v37 = *(const unsigned __int8 **)v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          v38 = (const unsigned __int8 *)*((_QWORD *)v24 + 2);
          v7 = *(_QWORD *)v38 == (_QWORD)v24;
          v24 = v38;
        }
        while (!v7);
      }
      v24 = v38;
    }
    while (v38 != v54);
  }
  v39 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "statedump: Built-in services detected:", buf, 2u);
  }
  v40 = (const unsigned __int8 *)a1[31];
  if (v40 != (const unsigned __int8 *)(a1 + 32))
  {
    do
    {
      v41 = (const unsigned __int8 *)*((_QWORD *)v40 + 6);
      if (v41 != v40 + 56)
      {
        v42 = qword_100999820;
        do
        {
          v55 = *(_OWORD *)(v41 + 28);
          v56 = *((_DWORD *)v41 + 11);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            sub_10006887C((uint64_t)&v55, buf);
            v43 = (char)buf[23];
            v44 = *(uint8_t **)buf;
            v45 = sub_100030DF4(v40 + 32);
            v46 = objc_claimAutoreleasedReturnValue(v45);
            v47 = (void *)v46;
            *(_DWORD *)__p = 136315394;
            v48 = buf;
            if (v43 < 0)
              v48 = v44;
            *(_QWORD *)&__p[4] = v48;
            v59 = 2112;
            v60 = v46;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Detected service %s on device %@ and notified", __p, 0x16u);
            if ((char)buf[23] < 0)
              operator delete(*(void **)buf);

            v42 = qword_100999820;
          }
          v49 = (const unsigned __int8 *)*((_QWORD *)v41 + 1);
          if (v49)
          {
            do
            {
              v50 = v49;
              v49 = *(const unsigned __int8 **)v49;
            }
            while (v49);
          }
          else
          {
            do
            {
              v50 = (const unsigned __int8 *)*((_QWORD *)v41 + 2);
              v7 = *(_QWORD *)v50 == (_QWORD)v41;
              v41 = v50;
            }
            while (!v7);
          }
          v41 = v50;
        }
        while (v50 != v40 + 56);
      }
      v51 = (unsigned __int8 *)*((_QWORD *)v40 + 1);
      if (v51)
      {
        do
        {
          v52 = (const unsigned __int8 **)v51;
          v51 = *(unsigned __int8 **)v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          v52 = (const unsigned __int8 **)*((_QWORD *)v40 + 2);
          v7 = *v52 == v40;
          v40 = (const unsigned __int8 *)v52;
        }
        while (!v7);
      }
      v40 = (const unsigned __int8 *)v52;
    }
    while (v52 != a1 + 32);
  }
}

void sub_1005E6ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005E6B10(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  __int16 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_100030BCC(a1, *a2);
  *(_WORD *)(result + 16) = *(_WORD *)a3;
  *(_QWORD *)(result + 24) = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a3 + 32);
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_QWORD *)(result + 56) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(result + 72) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(result + 80) = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(result + 88) = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(result + 96) = *(_QWORD *)(a3 + 80);
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)(result + 104) = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(result + 112) = *(_QWORD *)(a3 + 96);
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  v5 = *(_WORD *)(a3 + 104);
  *(_BYTE *)(result + 122) = *(_BYTE *)(a3 + 106);
  *(_WORD *)(result + 120) = v5;
  *(_QWORD *)(result + 128) = *(_QWORD *)(a3 + 112);
  v6 = (_QWORD *)(a3 + 120);
  v7 = *(_QWORD *)(a3 + 120);
  *(_QWORD *)(result + 136) = v7;
  v8 = result + 136;
  v9 = *(_QWORD *)(a3 + 128);
  *(_QWORD *)(result + 144) = v9;
  if (v9)
  {
    *(_QWORD *)(v7 + 16) = v8;
    *(_QWORD *)(a3 + 112) = v6;
    *v6 = 0;
    *(_QWORD *)(a3 + 128) = 0;
  }
  else
  {
    *(_QWORD *)(result + 128) = v8;
  }
  return result;
}

uint64_t sub_1005E6C00(_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 9];
    v7 = (uint64_t *)((char *)*v6 + 8 * (v5 & 0x1FF));
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v5) & 0x1FF);
    if (v7 != (uint64_t *)v8)
    {
      do
      {
        sub_1005E7324(v7++, 0);
        if ((char *)v7 - (_BYTE *)*v6 == 4096)
        {
          v9 = (uint64_t *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (uint64_t *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 256;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 512;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return sub_1002A4304((uint64_t)a1);
}

void sub_1005E6D28(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1005E6D28(a1, *a2);
    sub_1005E6D28(a1, a2[1]);
    sub_1005E6D70((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1005E6D70(uint64_t a1)
{
  sub_1002BB6B8(a1 + 128, *(_QWORD **)(a1 + 136));
  sub_1005E6C00((_QWORD *)(a1 + 72));
  return sub_1005E6C00((_QWORD *)(a1 + 24));
}

void sub_1005E6DA4(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1005E6DA4(a1, *a2);
    sub_1005E6DA4(a1, a2[1]);
    sub_10009F88C((uint64_t)(a2 + 6));
    operator delete(a2);
  }
}

void sub_1005E6DEC(id a1)
{
  operator new();
}

void sub_1005E6E2C()
{
  operator delete();
}

void sub_1005E6E50(id a1)
{
  operator new();
}

void sub_1005E6E90()
{
  operator delete();
}

void sub_1005E6EB4(id a1)
{
  operator new();
}

void sub_1005E6EF4()
{
  operator delete();
}

void sub_1005E6F18(id a1)
{
  operator new();
}

void sub_1005E6F58()
{
  operator delete();
}

void sub_1005E6F7C(id a1)
{
  operator new();
}

void sub_1005E6FBC()
{
  operator delete();
}

uint64_t *sub_1005E6FE0(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v10 = 0;
  v5 = (uint64_t **)sub_10000DC28((uint64_t)a1, &v10, uu1);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    memset(v9, 0, sizeof(v9));
    sub_1005E707C((uint64_t)a1, a3, v9);
    sub_100004078(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    sub_1005E71E0((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t sub_1005E707C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0xB8uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = sub_1005E70EC((uint64_t)v6 + 32, a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1005E70D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1005E71E0(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1005E70EC(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uuid_copy((unsigned __int8 *)a1, (const unsigned __int8 *)a2);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v4 = *(_WORD *)(a2 + 120);
  *(_BYTE *)(a1 + 122) = *(_BYTE *)(a2 + 122);
  *(_WORD *)(a1 + 120) = v4;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v5 = (_QWORD *)(a2 + 136);
  v6 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v6;
  v7 = a1 + 136;
  v8 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 144) = v8;
  if (v8)
  {
    *(_QWORD *)(v6 + 16) = v7;
    *(_QWORD *)(a2 + 128) = v5;
    *v5 = 0;
    *(_QWORD *)(a2 + 144) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 128) = v7;
  }
  return a1;
}

void sub_1005E71E0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1005E6D70((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_1005E7224(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t v3;

  v3 = sub_10000C5B8((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  sub_100565D70(a1, v3);
  return 1;
}

uint64_t sub_1005E7268(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_10000C5B8((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_1000040CC(a1, v3);
  sub_1005E6D70((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void sub_1005E72C0(id a1)
{
  operator new();
}

void sub_1005E7300()
{
  operator delete();
}

uint64_t *sub_1005E7324(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    operator delete();
  }
  return result;
}

uint64_t sub_1005E7380(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  sub_1005E73D4((char *)a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_1005E73BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001A82C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *sub_1005E73D4(char *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)(result + 8);
    do
    {
      result = sub_1005E7458(v5, v6, v4 + 28, (uint64_t)(v4 + 28));
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

char *sub_1005E7458(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned __int8 *v6;
  char *v7;
  uint64_t **v8;
  uint64_t v10;
  unsigned __int8 *v11;

  v10 = 0;
  v11 = 0;
  v6 = sub_1005E74E8(a1, a2, &v11, &v10, a3);
  v7 = *(char **)v6;
  if (!*(_QWORD *)v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v7 + 28) = *(_OWORD *)a4;
    *((_DWORD *)v7 + 11) = *(_DWORD *)(a4 + 16);
    sub_100004078(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

unsigned __int8 *sub_1005E74E8(_QWORD *a1, uint64_t *a2, unsigned __int8 **a3, uint64_t *a4, unsigned __int8 *a5)
{
  unsigned __int8 *v9;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t *v16;
  BOOL v17;
  unsigned __int8 *v18;

  v9 = (unsigned __int8 *)(a1 + 1);
  if (a1 + 1 == a2 || sub_100068844(a5, (unsigned __int8 *)a2 + 28))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (unsigned __int8 *)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 8;
      }
      else
      {
        *a3 = (unsigned __int8 *)a2;
        return (unsigned __int8 *)a2;
      }
    }
    v11 = (unsigned __int8 *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (unsigned __int8 *)v16[2];
        v17 = *(_QWORD *)v12 == (_QWORD)v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (sub_100068844(v12 + 28, a5))
      goto LABEL_16;
    return (unsigned __int8 *)sub_10000BF5C((uint64_t)a1, a3, a5);
  }
  if (sub_100068844((unsigned __int8 *)a2 + 28, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (unsigned __int8 *)a2[1];
      do
      {
        v15 = v14;
        v14 = *(unsigned __int8 **)v14;
      }
      while (v14);
    }
    else
    {
      v18 = (unsigned __int8 *)a2;
      do
      {
        v15 = (unsigned __int8 *)*((_QWORD *)v18 + 2);
        v17 = *(_QWORD *)v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_100068844(a5, v15 + 28))
        return (unsigned __int8 *)sub_10000BF5C((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (unsigned __int8 *)a2;
    }
    return (unsigned __int8 *)a4;
  }
  *a3 = (unsigned __int8 *)a2;
  *a4 = (uint64_t)a2;
  return (unsigned __int8 *)a4;
}

uint64_t *sub_1005E766C(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t **v6;
  uint64_t *result;
  unsigned __int8 *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_10000DC28((uint64_t)a1, &v9, uu1);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1005E770C((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_1005E770C(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 *v7;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (unsigned __int8 *)operator new(0x48uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v7 + 32, *a2);
  *((_QWORD *)v7 + 7) = 0;
  *((_QWORD *)v7 + 8) = 0;
  *((_QWORD *)v7 + 6) = v7 + 56;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1005E7784(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD **v3;

  *v1 = 0;
  sub_100565EE0(v2, v3);
  _Unwind_Resume(a1);
}

void sub_1005E77A0(id a1)
{
  operator new();
}

void sub_1005E77E0()
{
  operator delete();
}

void sub_1005E7804(id a1)
{
  operator new();
}

_QWORD *sub_1005E7830(_QWORD *a1, uint64_t a2, __int16 a3, char a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = sub_1005C6698((uint64_t)a1, a2);
  *(_QWORD *)v9 = off_10093BC38;
  *(_QWORD *)(v9 + 48) = &off_10093BC70;
  *(_WORD *)(v9 + 56) = a3;
  *(_BYTE *)(v9 + 58) = a4;
  v10 = *(_QWORD *)(a5 + 8);
  a1[8] = &off_100918258;
  a1[9] = v10;
  if (v10)
    sub_10003C37C(v10);
  a1[10] = 0;
  return a1;
}

void sub_1005E78A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1005CD324(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_1005E78B8(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _WORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[16] = **a4;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 5) = v11 + 24;
    sub_100004078(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_1005E7984(uint64_t a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  __int128 v7;

  v5 = (_QWORD *)sub_1005C6698(a1, a2);
  *v5 = off_10093BAF8;
  v5[6] = &off_10093BB30;
  v5[7] = 0;
  v6 = v5 + 8;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003430C(v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    v6[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  return a1;
}

void sub_1005E79EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1005CD324(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1005E7A18(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t **v6;
  uint64_t *result;
  unsigned __int8 *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_10000DC28((uint64_t)a1, &v9, uu1);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1005E7AB8((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_1005E7AB8(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 *v7;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (unsigned __int8 *)operator new(0x48uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v7 + 32, *a2);
  *((_QWORD *)v7 + 7) = 0;
  *((_QWORD *)v7 + 8) = 0;
  *((_QWORD *)v7 + 6) = v7 + 56;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1005E7B30(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD **v3;

  *v1 = 0;
  sub_100565EE0(v2, v3);
  _Unwind_Resume(a1);
}

uint64_t sub_1005E7B4C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  sub_1005E73D4((char *)a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_1005E7B88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001A82C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1005E7BA0(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (uint64_t **)v4;
        if (!sub_100068844((unsigned __int8 *)(a2 + 28), (unsigned __int8 *)v4 + 28))
          break;
        v4 = *v5;
        v6 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = v5[1];
    }
    while (v4);
    v6 = v5 + 1;
  }
  else
  {
    v6 = a1 + 1;
  }
LABEL_8:
  sub_100004078(a1, (uint64_t)v5, v6, (uint64_t *)a2);
  return a2;
}

void sub_1005E7C24(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = v3 - v2;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = ((v3 - v2) << 6) - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x200)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_10007ABA0(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0x1000uLL);
      sub_1002A640C(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_10007ABA0((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 256;
      else
        v40 = (uint64_t)a1[4] + 512;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0x1000uLL);
        sub_1002A61DC(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0x1000uLL);
      }
      sub_1002A62F0((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 256;
      else
        v35 = (uint64_t)a1[4] + 512;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 512;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_1002A62F0((uint64_t)a1, &__p);
  }
}

void sub_1005E7EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1005E7F34(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10007ABA0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1002A61DC(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_1002A62F0((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10007ABA0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10007ABA0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_1002A640C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002A6520((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1005E81FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_1005E8248(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 3) - a2;
    if (v4 < 1)
      result -= (unint64_t)(511 - v4) >> 9;
    else
      result += (unint64_t)v4 >> 9;
  }
  return result;
}

double sub_1005E82B0(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v10;
  uint64_t *i;
  uint64_t *v12;
  double result;
  uint64_t *v14;
  __int128 v15;

  v7 = *a5;
  v8 = a5[1];
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = *a1 + 512; ; i = v12 + 512)
    {
      v14 = 0;
      v15 = 0uLL;
      sub_1005E8350(a2, i, v7, v8, &v14);
      v8 = (uint64_t *)*((_QWORD *)&v15 + 1);
      v7 = (uint64_t *)v15;
      *a5 = (uint64_t *)v15;
      a5[1] = v8;
      if (v10 == a3)
        break;
      v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  v14 = 0;
  v15 = 0uLL;
  sub_1005E8350(a2, a4, v7, v8, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_1005E8350(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t **a5@<X8>)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;

  v5 = a3;
  if (a1 == a2)
  {
    v7 = a1;
  }
  else
  {
    v7 = a2;
    v8 = *a3 - (_QWORD)a4 + 4096;
    if (a2 - a1 >= v8 >> 3)
      v9 = v8 >> 3;
    else
      v9 = a2 - a1;
    for (i = sub_1005E8410(a1, &a1[v9], a4); i != v7; i = sub_1005E8410(i, &i[v14], v12))
    {
      v13 = (uint64_t *)v5[1];
      ++v5;
      v12 = v13;
      v14 = v7 - i;
      if (v14 >= 512)
        v14 = 512;
    }
    a4 = v11;
    if ((uint64_t *)(*v5 + 4096) == v11)
    {
      v15 = (uint64_t *)v5[1];
      ++v5;
      a4 = v15;
    }
  }
  *a5 = v7;
  a5[1] = v5;
  a5[2] = a4;
}

uint64_t *sub_1005E8410(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      v6 = *v4;
      *v4++ = 0;
      sub_1005E7324(a3++, v6);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

__n128 sub_1005E846C@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _QWORD **a3@<X3>, _QWORD *a4@<X4>, _QWORD *a5@<X5>, uint64_t *a6@<X6>, __n128 *a7@<X8>)
{
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v21 = 0;
    v22 = 0uLL;
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v21 = 0;
    v22 = 0uLL;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_1005E8558(v12, v14, v15, v16, &v21);
      v16 = (uint64_t *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = (_QWORD *)*v13--;
      v12 = v17;
      v14 = v17 + 512;
      v21 = 0;
      v22 = 0uLL;
    }
    v18 = (_QWORD *)(*a1 + 4096);
    v21 = 0;
    v22 = 0uLL;
    v19 = a2;
  }
  sub_1005E8558(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

_QWORD *sub_1005E8558@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, uint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;

  v5 = a3;
  if (a1 == a2)
  {
    v8 = a1;
  }
  else
  {
    v8 = a2;
    v9 = (uint64_t)a4 - *a3;
    if (a2 - a1 >= v9 >> 3)
      v10 = v9 >> 3;
    else
      v10 = a2 - a1;
    v11 = &a2[-v10];
    result = sub_1005E8638(v11, a2, a4);
    if (v11 != a1)
    {
      do
      {
        v14 = *--v5;
        v15 = (uint64_t *)(v14 + 4096);
        v16 = v11 - a1;
        if (v16 >= 512)
          v16 = 512;
        v17 = &v11[-v16];
        result = sub_1005E8638(v17, v11, v15);
        v11 = v17;
      }
      while (v17 != a1);
    }
    a4 = v13;
    if ((uint64_t *)(*v5 + 4096) == v13)
    {
      v18 = (uint64_t *)v5[1];
      ++v5;
      a4 = v18;
    }
  }
  *a5 = v8;
  a5[1] = v5;
  a5[2] = a4;
  return result;
}

_QWORD *sub_1005E8638(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v7 = *--v6;
      --a3;
      *v6 = 0;
      sub_1005E7324(a3, v7);
    }
    while (v6 != a1);
  }
  return a2;
}

unsigned __int8 *sub_1005E8694(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  uint64_t **v8;
  unsigned __int8 *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (unsigned __int8 **)sub_10000DC28((uint64_t)a1, &v11, uu1);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_1005E8748((uint64_t)a1, a4, v10);
    sub_100004078(a1, v11, v8, (uint64_t *)v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1005E87C0((uint64_t)v10, 0);
  }
  return v7;
}

void sub_1005E8748(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (unsigned __int8 *)operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 7) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1005E87A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1005E87C0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1005E87C0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_10009F88C((uint64_t)v2 + 48);
    operator delete(v2);
  }
}

uint64_t sub_1005E8804@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0xB0uLL);
  result = sub_1005E884C((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1005E8838(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005E884C(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093CA98;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = off_1009325D8;
  sub_1000160D0(a1 + 32);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 128;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  return a1;
}

void sub_1005E88AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1005E88C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10093CA98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1005E88D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10093CA98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1005E8900(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1005E8910(id a1)
{
  operator new();
}

void sub_1005E8950()
{
  operator delete();
}

uint64_t sub_1005E8974(uint64_t a1)
{
  sub_10001A82C(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sub_1005E89A0(id a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  const char *v107;
  uint64_t v108;
  const char **v109;

  v107 = "kCBGeneralMsgIdAntennaDiversity";
  v108 = 31;
  v109 = &v107;
  v1 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v1[4] = sub_1005EA06C;
  v1[5] = 0;
  v107 = "kCBGeneralMsgIdReadRSSI";
  v108 = 23;
  v109 = &v107;
  v2 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v2[4] = sub_1005EA8E4;
  v2[5] = 0;
  v107 = "kCBGeneralMsgIdReadCurrentAntenna";
  v108 = 33;
  v109 = &v107;
  v3 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v3[4] = sub_1005EAA00;
  v3[5] = 0;
  v107 = "kCBGeneralMsgIdDelayedWake";
  v108 = 26;
  v109 = &v107;
  v4 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v4[4] = sub_1005EAAF4;
  v4[5] = 0;
  v107 = "kCBGeneralMsgIdChangeConnectionPacketType";
  v108 = 41;
  v109 = &v107;
  v5 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v5[4] = sub_1005EABCC;
  v5[5] = 0;
  v107 = "kCBGeneralMsgIdReadTxPowerLevel";
  v108 = 31;
  v109 = &v107;
  v6 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v6[4] = sub_1005EAD00;
  v6[5] = 0;
  v107 = "kCBGeneralMsgIdSetTxPowerCap";
  v108 = 28;
  v109 = &v107;
  v7 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v7[4] = sub_1005EAF0C;
  v7[5] = 0;
  v107 = "kCBGeneralMsgIdCountryCode";
  v108 = 26;
  v109 = &v107;
  v8 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v8[4] = sub_1005EAFF8;
  v8[5] = 0;
  v107 = "kCBGeneralMsgIdCountryCodeMultiBand";
  v108 = 35;
  v109 = &v107;
  v9 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v9[4] = sub_1005EB15C;
  v9[5] = 0;
  v107 = "kCBGeneralMsgIdSimulateLocationUpdate";
  v108 = 37;
  v109 = &v107;
  v10 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v10[4] = sub_1005EB3C8;
  v10[5] = 0;
  v107 = "kCBGeneralMsgIdCellularTransmitState";
  v108 = 36;
  v109 = &v107;
  v11 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v11[4] = sub_1005EB470;
  v11[5] = 0;
  v107 = "kCBGeneralMsgIdReadFactoryCalTable";
  v108 = 34;
  v109 = &v107;
  v12 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v12[4] = sub_1005EB4F4;
  v12[5] = 0;
  v107 = "kCBGeneralMsgIdDisableTpc";
  v108 = 25;
  v109 = &v107;
  v13 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v13[4] = sub_1005EB6C8;
  v13[5] = 0;
  v107 = "kCBGeneralMsgIdBlackMagickSet";
  v108 = 29;
  v109 = &v107;
  v14 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v14[4] = sub_1005EB758;
  v14[5] = 0;
  v107 = "kCBGeneralMsgIdRxTest";
  v108 = 21;
  v109 = &v107;
  v15 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v15[4] = sub_1005EB8EC;
  v15[5] = 0;
  v107 = "kCBGeneralMsgIdTxTest";
  v108 = 21;
  v109 = &v107;
  v16 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v16[4] = sub_1005EBA84;
  v16[5] = 0;
  v107 = "kCBGeneralMsgIdLeTestEnd";
  v108 = 24;
  v109 = &v107;
  v17 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v17[4] = sub_1005EBC50;
  v17[5] = 0;
  v107 = "kCBGeneralMsgIdRxEnhancedTest";
  v108 = 29;
  v109 = &v107;
  v18 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v18[4] = sub_1005EBDA4;
  v18[5] = 0;
  v107 = "kCBGeneralMsgIdTxEnhancedTest";
  v108 = 29;
  v109 = &v107;
  v19 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v19[4] = sub_1005EBF70;
  v19[5] = 0;
  v107 = "kCBGeneralMsgIdReadCountrySettingsTest";
  v108 = 38;
  v109 = &v107;
  v20 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v20[4] = sub_1005EC154;
  v20[5] = 0;
  v107 = "kCBGeneralMsgIdReadePAGPIOState";
  v108 = 31;
  v109 = &v107;
  v21 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v21[4] = sub_1005EC2B8;
  v21[5] = 0;
  v107 = "kCBGeneralMsgIdSetSARState";
  v108 = 26;
  v109 = &v107;
  v22 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v22[4] = sub_1005EC3AC;
  v22[5] = 0;
  v107 = "kCBGeneralMsgIdWiFi5GState";
  v108 = 26;
  v109 = &v107;
  v23 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v23[4] = sub_1005EC430;
  v23[5] = 0;
  v107 = "kCBGeneralMsgIdReadPowerCapState";
  v108 = 32;
  v109 = &v107;
  v24 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v24[4] = sub_1005EC4B8;
  v24[5] = 0;
  v107 = "kCBGeneralMsgIdEnhancedReadPowerCapState";
  v108 = 40;
  v109 = &v107;
  v25 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v25[4] = sub_1005EC5A0;
  v25[5] = 0;
  v107 = "kCBGeneralMsgIdReadRFState";
  v108 = 26;
  v109 = &v107;
  v26 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v26[4] = sub_1005EC6FC;
  v26[5] = 0;
  v107 = "kCBGeneralMsgIdSetCellularTransmitAntenna";
  v108 = 41;
  v109 = &v107;
  v27 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v27[4] = sub_1005EC870;
  v27[5] = 0;
  v107 = "kCBGeneralMsgIdSetBTAntenna";
  v108 = 27;
  v109 = &v107;
  v28 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v28[4] = sub_1005EC8F0;
  v28[5] = 0;
  v107 = "kCBGeneralMsgIdTunablesEnable";
  v108 = 29;
  v109 = &v107;
  v29 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v29[4] = sub_1005EC9B4;
  v29[5] = 0;
  v107 = "kCBGeneralMsgIdSetDiversityAntenna";
  v108 = 34;
  v109 = &v107;
  v30 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v30[4] = sub_1005ECA2C;
  v30[5] = 0;
  v107 = "kCBGeneralMsgIdADVBufConfigTool";
  v108 = 31;
  v109 = &v107;
  v31 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v31[4] = sub_1005ECAF0;
  v31[5] = 0;
  v107 = "kCBGeneralMsgIdADVBufMatchControlTool";
  v108 = 37;
  v109 = &v107;
  v32 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v32[4] = sub_1005ECC18;
  v32[5] = 0;
  v107 = "kCBGeneralMsgIdADVBufReadTool";
  v108 = 29;
  v109 = &v107;
  v33 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v33[4] = sub_1005ECCE8;
  v33[5] = 0;
  v107 = "kCBGeneralMsgIdMatchTableConfigTool";
  v108 = 35;
  v109 = &v107;
  v34 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v34[4] = sub_1005ECE00;
  v34[5] = 0;
  v107 = "kCBGeneralMsgIdMatchTableExtendedFilterConfigTool";
  v108 = 49;
  v109 = &v107;
  v35 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v35[4] = sub_1005ECFA8;
  v35[5] = 0;
  v107 = "kCBGeneralMsgIdMatchTableParamsTool";
  v108 = 35;
  v109 = &v107;
  v36 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v36[4] = sub_1005ED0C0;
  v36[5] = 0;
  v107 = "kCBGeneralMsgIdMatchBufferConfigTool";
  v108 = 36;
  v109 = &v107;
  v37 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v37[4] = sub_1005ED320;
  v37[5] = 0;
  v107 = "kCBGeneralMsgIdMatchBufferReadTool";
  v108 = 34;
  v109 = &v107;
  v38 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v38[4] = sub_1005ED41C;
  v38[5] = 0;
  v107 = "kCBGeneralMsgIdSPMIDiagnosticsTool";
  v108 = 34;
  v109 = &v107;
  v39 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v39[4] = sub_1005ED4C8;
  v39[5] = 0;
  v107 = "kCBGeneralMsgIdBTCLKSensorCTimeSyncTool";
  v108 = 39;
  v109 = &v107;
  v40 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v40[4] = sub_1005ED54C;
  v40[5] = 0;
  v107 = "kCBGeneralMsgIdAdvTxTriggerTimeStampTool";
  v108 = 40;
  v109 = &v107;
  v41 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v41[4] = sub_1005ED600;
  v41[5] = 0;
  v107 = "kCBGeneralMsgIdReadLEConnEventCounterTool";
  v108 = 41;
  v109 = &v107;
  v42 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v42[4] = sub_1005ED6B4;
  v42[5] = 0;
  v107 = "kCBGeneralMsgIdStartLEConnEventTriggerTool";
  v108 = 42;
  v109 = &v107;
  v43 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v43[4] = sub_1005ED794;
  v43[5] = 0;
  v107 = "kCBGeneralMsgIdSPMIDebugControlTool";
  v108 = 35;
  v109 = &v107;
  v44 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v44[4] = sub_1005ED89C;
  v44[5] = 0;
  v107 = "kCBGeneralMsgIdSetGPIOStateMsgTool";
  v108 = 34;
  v109 = &v107;
  v45 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v45[4] = sub_1005ED920;
  v45[5] = 0;
  v107 = "kCBGeneralMsgIdReadACLConnHandle";
  v108 = 32;
  v109 = &v107;
  v46 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v46[4] = sub_1005ED9F4;
  v46[5] = 0;
  v107 = "kCBGeneralMsgIdHDRSetupSyncConnMsgTool";
  v108 = 38;
  v109 = &v107;
  v47 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v47[4] = sub_1005EDAD8;
  v47[5] = 0;
  v107 = "kCBGeneralMsgIdHDRAcceptSyncConnMsgTool";
  v108 = 39;
  v109 = &v107;
  v48 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v48[4] = sub_1005EDC48;
  v48[5] = 0;
  v107 = "kCBGeneralMsgIdSCOBufferSizeControl";
  v108 = 35;
  v109 = &v107;
  v49 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v49[4] = sub_1005EDDDC;
  v49[5] = 0;
  v107 = "kCBGeneralMsgIdHRBControl";
  v108 = 25;
  v109 = &v107;
  v50 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v50[4] = sub_1005EDEEC;
  v50[5] = 0;
  v107 = "kCBGeneralMsgIdHRBAllowedBands";
  v108 = 30;
  v109 = &v107;
  v51 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v51[4] = sub_1005EE028;
  v51[5] = 0;
  v107 = "kCBGeneralMsgIdHRBClassificationBands";
  v108 = 37;
  v109 = &v107;
  v52 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v52[4] = sub_1005EE164;
  v52[5] = 0;
  v107 = "kCBGeneralMsgIdHRBChangeConnectionBand";
  v108 = 38;
  v109 = &v107;
  v53 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v53[4] = sub_1005EE2A0;
  v53[5] = 0;
  v107 = "kCBGeneralMsgIdHRBWriteScanEnable";
  v108 = 33;
  v109 = &v107;
  v54 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v54[4] = sub_1005EE48C;
  v54[5] = 0;
  v107 = "kCBGeneralMsgIdHRBWritePageScanActivity";
  v108 = 39;
  v109 = &v107;
  v55 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v55[4] = sub_1005EE57C;
  v55[5] = 0;
  v107 = "kCBGeneralMsgIdHRBSetAFHHostChannelClassification";
  v108 = 49;
  v109 = &v107;
  v56 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v56[4] = sub_1005EE66C;
  v56[5] = 0;
  v107 = "kCBGeneralMsgIdGetEssentialPowerDatabaseEntries";
  v108 = 47;
  v109 = &v107;
  v57 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v57[4] = sub_1005EE940;
  v57[5] = 0;
  v107 = "kCBGeneralMsgIdHRBReadEnhancedTransmitPowerLevel";
  v108 = 48;
  v109 = &v107;
  v58 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v58[4] = sub_1005EEB60;
  v58[5] = 0;
  v107 = "kCBGeneralMsgIdHRBReadAFHChannelMap";
  v108 = 35;
  v109 = &v107;
  v59 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v59[4] = sub_1005EEE54;
  v59[5] = 0;
  v107 = "kCBGeneralMsgIdHRBLimitChannelMap";
  v108 = 33;
  v109 = &v107;
  v60 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v60[4] = sub_1005EF100;
  v60[5] = 0;
  v107 = "kCBGeneralMsgIdHRBSetBandEdges";
  v108 = 30;
  v109 = &v107;
  v61 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v61[4] = sub_1005EF1C4;
  v61[5] = 0;
  v107 = "kCBGeneralMsgIdEnhancedTxTest";
  v108 = 29;
  v109 = &v107;
  v62 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v62[4] = sub_1005EF314;
  v62[5] = 0;
  v107 = "kCBGeneralMsgIdEnhancedRxTest2G";
  v108 = 31;
  v109 = &v107;
  v63 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v63[4] = sub_1005EF638;
  v63[5] = 0;
  v107 = "kCBGeneralMsgIdEnhancedRxTestHRB";
  v108 = 32;
  v109 = &v107;
  v64 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v64[4] = sub_1005EF87C;
  v64[5] = 0;
  v107 = "kCBGeneralMsgIdEnhancedTxTestCont";
  v108 = 33;
  v109 = &v107;
  v65 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v65[4] = sub_1005EFAC4;
  v65[5] = 0;
  v107 = "kCBGeneralMsgIdLERoles";
  v108 = 22;
  v109 = &v107;
  v66 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v66[4] = sub_1005EFCD8;
  v66[5] = 0;
  v107 = "kCBGeneralMsgIdBTPerfTest";
  v108 = 25;
  v109 = &v107;
  v67 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v67[4] = sub_1005EFDA8;
  v67[5] = 0;
  v107 = "kCBGeneralMsgIdSetupL2CAPServer";
  v108 = 31;
  v109 = &v107;
  v68 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v68[4] = sub_1005F00AC;
  v68[5] = 0;
  v107 = "kCBGeneralMsgIdRemoveL2CAPServer";
  v108 = 32;
  v109 = &v107;
  v69 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v69[4] = sub_1005F0148;
  v69[5] = 0;
  v107 = "kCBGeneralMsgIdCreateL2CAPConnection";
  v108 = 36;
  v109 = &v107;
  v70 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v70[4] = sub_1005F0290;
  v70[5] = 0;
  v107 = "kCBGeneralMsgIdRemoveL2CAPConnection";
  v108 = 36;
  v109 = &v107;
  v71 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v71[4] = sub_1005F03BC;
  v71[5] = 0;
  v107 = "kCBGeneralMsgIdEnterSniffMode";
  v108 = 29;
  v109 = &v107;
  v72 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v72[4] = sub_1005F05C0;
  v72[5] = 0;
  v107 = "kCBGeneralMsgIdExitSniffMode";
  v108 = 28;
  v109 = &v107;
  v73 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v73[4] = sub_1005F0808;
  v73[5] = 0;
  v107 = "kCBGeneralMsgIdEnablePhyStats";
  v108 = 29;
  v109 = &v107;
  v74 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v74[4] = sub_1005F09BC;
  v74[5] = 0;
  v107 = "kCBGeneralMsgIdAdvancedSniffMode";
  v108 = 32;
  v109 = &v107;
  v75 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v75[4] = sub_1005F0B1C;
  v75[5] = 0;
  v107 = "kCBGeneralMsgIdExitAdvancedSniffMode";
  v108 = 36;
  v109 = &v107;
  v76 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v76[4] = sub_1005F0DC4;
  v76[5] = 0;
  v107 = "kCBGeneralMsgIdAdvancedSniffReconfig";
  v108 = 36;
  v109 = &v107;
  v77 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v77[4] = sub_1005F0F18;
  v77[5] = 0;
  v107 = "kCBGeneralMsgIdSetPeripheralMaxAge";
  v108 = 34;
  v109 = &v107;
  v78 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v78[4] = sub_1005F10F8;
  v78[5] = 0;
  v107 = "kCBGeneralMsgIdLMPFlow";
  v108 = 22;
  v109 = &v107;
  v79 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v79[4] = sub_1005F1268;
  v79[5] = 0;
  v107 = "kCBGeneralMsgIdAoSEmptyPacketReport";
  v108 = 35;
  v109 = &v107;
  v80 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v80[4] = sub_1005F13D8;
  v80[5] = 0;
  v107 = "kCBGeneralMsgIdConotrolAoS";
  v108 = 26;
  v109 = &v107;
  v81 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v81[4] = sub_1005F1548;
  v81[5] = 0;
  v107 = "kCBGeneralMsgIdBTSCPageScan";
  v108 = 27;
  v109 = &v107;
  v82 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v82[4] = sub_1005F160C;
  v82[5] = 0;
  v107 = "kCBGeneralMsgIdSetQoSConfig";
  v108 = 27;
  v109 = &v107;
  v83 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v83[4] = sub_1005F17D4;
  v83[5] = 0;
  v107 = "kCBGeneralMsgIdGetQoSConfig";
  v108 = 27;
  v109 = &v107;
  v84 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v84[4] = sub_1005F1E9C;
  v84[5] = 0;
  v107 = "kCBGeneralMsgIdSpmiCoexGetDebugCounter";
  v108 = 38;
  v109 = &v107;
  v85 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v85[4] = sub_1005F1F1C;
  v85[5] = 0;
  v107 = "kCBGeneralMsgIdSpmiCoexResetDebugCounter";
  v108 = 40;
  v109 = &v107;
  v86 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v86[4] = sub_1005F1FEC;
  v86[5] = 0;
  v107 = "kCBGeneralMsgIdSpmiCoexTestWriteMsg";
  v108 = 35;
  v109 = &v107;
  v87 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v87[4] = sub_1005F208C;
  v87[5] = 0;
  v107 = "kCBGeneralMsgIdSpmiCoexTxControl";
  v108 = 32;
  v109 = &v107;
  v88 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v88[4] = sub_1005F2198;
  v88[5] = 0;
  v107 = "kCBGeneralMsgIdSpmiCoexType53Config";
  v108 = 35;
  v109 = &v107;
  v89 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v89[4] = sub_1005F226C;
  v89[5] = 0;
  v107 = "kCBGeneralMsgIdSpmiCoexType60Config";
  v108 = 35;
  v109 = &v107;
  v90 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v90[4] = sub_1005F2320;
  v90[5] = 0;
  v107 = "kCBGeneralMsgIdReadControllerRam";
  v108 = 32;
  v109 = &v107;
  v91 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v91[4] = sub_1005F2478;
  v91[5] = 0;
  v107 = "kCBGeneralMsgIdSetMinEncryptionKeySize";
  v108 = 38;
  v109 = &v107;
  v92 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v92[4] = sub_1005F2660;
  v92[5] = 0;
  v107 = "kCBGeneralMsgIdCalSetTxPower";
  v108 = 28;
  v109 = &v107;
  v93 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v93[4] = sub_1005F26F0;
  v93[5] = 0;
  v107 = "kCBGeneralMsgIdHPLinkBFCmd";
  v108 = 26;
  v109 = &v107;
  v94 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v94[4] = sub_1005F2878;
  v94[5] = 0;
  v107 = "kCBGeneralMsgIdMRCLoggingCmd";
  v108 = 28;
  v109 = &v107;
  v95 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v95[4] = sub_1005F2CC8;
  v95[5] = 0;
  v107 = "kCBGeneralMsgIdBTAntennaCfg";
  v108 = 27;
  v109 = &v107;
  v96 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v96[4] = sub_1005F2EC8;
  v96[5] = 0;
  v107 = "kCBGeneralMsgIdLoadMSFFile";
  v108 = 26;
  v109 = &v107;
  v97 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v97[4] = sub_1005F30C4;
  v97[5] = 0;
  v107 = "kCBGeneralMsgIdLoadPwrRegulatoryFile";
  v108 = 36;
  v109 = &v107;
  v98 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v98[4] = sub_1005F32D8;
  v98[5] = 0;
  v107 = "kCBGeneralMsgIdLoadPwrRegulatoryFileA3";
  v108 = 38;
  v109 = &v107;
  v99 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v99[4] = sub_1005F341C;
  v99[5] = 0;
  v107 = "kCBGeneralMsgIdTriggerULLM";
  v108 = 26;
  v109 = &v107;
  v100 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v100[4] = sub_1005F3628;
  v100[5] = 0;
  v107 = "kCBGeneralMsgIdSimulateBudswapCmd";
  v108 = 33;
  v109 = &v107;
  v101 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v101[4] = sub_1005F3848;
  v101[5] = 0;
  v107 = "kCBGeneralMsgHCICMD";
  v108 = 19;
  v109 = &v107;
  v102 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v102[4] = sub_1005F3978;
  v102[5] = 0;
  v107 = "kCBGeneralMsgIdLEAdvTxPowerIncrease";
  v108 = 35;
  v109 = &v107;
  v103 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v103[4] = sub_1005F3C78;
  v103[5] = 0;
  v107 = "kCBGeneralMsgIdWriteBdAddr";
  v108 = 26;
  v109 = &v107;
  v104 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v104[4] = sub_1005F3D6C;
  v104[5] = 0;
  v107 = "kCBGeneralMsgIdCrcErredPduReportEnable";
  v108 = 38;
  v109 = &v107;
  v105 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v105[4] = sub_1005F3E74;
  v105[5] = 0;
  v107 = "kCBGeneralMsgIdAppleExtendedAdvReportEnable";
  v108 = 43;
  v109 = &v107;
  v106 = sub_1005F5158((uint64_t)&xmmword_100999A28, (uint64_t)&v107, (uint64_t)&unk_100740F58, (_OWORD **)&v109);
  v106[4] = sub_1005F3EF8;
  v106[5] = 0;
}

void sub_1005EA06C(uint64_t a1, void *a2)
{
  uint64_t v4;
  xpc_object_t v5;
  unsigned __int8 int64;
  unsigned __int8 v7;
  unsigned __int8 v8;
  char v9;
  char v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  const char *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint32_t v23;
  unsigned int v24;
  unint64_t v25;
  NSObject *v26;
  int v27;
  xpc_object_t reply;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  xpc_object_t original;
  char v33;
  char v34;
  char v35;
  char v36;
  unsigned __int16 v37;
  uint8_t buf[4];
  int v39;
  int64_t value;
  int64_t v41;
  int64_t v42;
  int64_t v43;

  v4 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4))
    return;
  v31 = a1;
  original = a2;
  value = 0;
  v41 = 0;
  LOWORD(v43) = 0;
  v42 = 0;
  v37 = 26;
  v5 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  int64 = xpc_dictionary_get_int64(v5, "kCBMsgArgAction");
  v7 = xpc_dictionary_get_int64(v5, "kCBMsgArgConnHandle");
  v8 = xpc_dictionary_get_int64(v5, "kCBMsgArgAntennaDiversityEnable");
  v9 = xpc_dictionary_get_int64(v5, "kCBMsgArgDiversityRSSIThreshold");
  v10 = xpc_dictionary_get_int64(v5, "kCBMsgArgRssiSwitchThreshold");
  v11 = xpc_dictionary_get_int64(v5, "kCBMsgArgSwitchDecisionDuration");
  v12 = xpc_dictionary_get_int64(v5, "kCBMsgArgDeepFadingTimeout");
  v13 = xpc_dictionary_get_int64(v5, "kCBMsgArgPacketOnFavorite");
  v36 = xpc_dictionary_get_int64(v5, "kCBMsgArgRssiFav");
  v35 = xpc_dictionary_get_int64(v5, "kCBMsgArgRssiBak");
  v34 = xpc_dictionary_get_int64(v5, "kCBMsgArgInstantRssiFav");
  v33 = xpc_dictionary_get_int64(v5, "kCBMsgArgInstantRssiBak");
  v14 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Args received : \n", buf, 2u);
    v14 = qword_100999860;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v39 = int64;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "action : %u\n", buf, 8u);
    v14 = qword_100999860;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v39 = v7;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "connHandle : %u\n", buf, 8u);
    v14 = qword_100999860;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v39 = v8;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "antennaDiversityEnable : %u\n", buf, 8u);
    v14 = qword_100999860;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v39 = v9;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "diversityRSSITHreshold : %d\n", buf, 8u);
    v14 = qword_100999860;
  }
  v15 = v10;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v39 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "rssiSwitchThreshold : %d\n", buf, 8u);
    v14 = qword_100999860;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v39 = v11;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "switchDecisionDuration : %u\n", buf, 8u);
    v14 = qword_100999860;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v39 = v12;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "deepFadingTimeout : %u\n", buf, 8u);
    v14 = qword_100999860;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v39 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "packetOnFavorite : %u\n", buf, 8u);
    v14 = qword_100999860;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v39 = v36;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "rssiFav : %d\n", buf, 8u);
    v14 = qword_100999860;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v39 = v35;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "rssiBak : %d\n", buf, 8u);
    v14 = qword_100999860;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v39 = v34;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "instantRSSIFav : %d\n", buf, 8u);
    v14 = qword_100999860;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v39 = v33;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "instantRSSIBak : %d\n", buf, 8u);
  }
  v16 = sub_1000438A4();
  BYTE4(v30) = v33;
  BYTE3(v30) = v34;
  BYTE2(v30) = v35;
  BYTE1(v30) = v36;
  LOBYTE(v30) = v13;
  v17 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, unsigned __int16 *, int64_t *, char))(*(_QWORD *)v16 + 920))(v16, int64, v7, v8, v9, v15, v11, v12, v30, &v37, &value, 1);
  v18 = qword_100999860;
  if (v17)
  {
    v19 = v17;
    if (!os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      goto LABEL_34;
    *(_DWORD *)buf = 67109120;
    v39 = v19;
    v20 = "Response : %d";
    v21 = v18;
    v22 = OS_LOG_TYPE_DEFAULT;
    v23 = 8;
  }
  else
  {
    if (!os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
      goto LABEL_34;
    *(_WORD *)buf = 0;
    v20 = "Response to BCM4350:antennaDiversity registered successfully\n";
    v21 = v18;
    v22 = OS_LOG_TYPE_INFO;
    v23 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v21, v22, v20, buf, v23);
LABEL_34:
  v24 = v37;
  if (v37 >= 2u)
  {
    v25 = 0;
    v26 = qword_100999860;
    do
    {
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        v27 = *((unsigned __int8 *)&value + v25);
        *(_DWORD *)buf = 67109120;
        v39 = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "%x\t", buf, 8u);
        v26 = qword_100999860;
        v24 = v37;
      }
      ++v25;
    }
    while (v25 < v24);
    reply = xpc_dictionary_create_reply(original);
    if (reply)
    {
      v29 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", BYTE3(value));
      xpc_dictionary_set_int64(v29, "kCBMsgArgConnHandle", WORD2(value));
      xpc_dictionary_set_int64(v29, "kCBMsgArgCurrProposedAntenna", BYTE6(value));
      xpc_dictionary_set_int64(v29, "kCBMsgArgRssiFav", HIBYTE(value));
      xpc_dictionary_set_int64(v29, "kCBMsgArgRssiBak", v41);
      xpc_dictionary_set_int64(v29, "kCBMsgArgInstantRssiFav", BYTE1(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgInstantRssiBak", BYTE2(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgLinkQualityA", BYTE3(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgLinkQualityB", BYTE4(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgAutoModeEnable", BYTE5(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgCurrPowerCap", BYTE6(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgCurrPowerControlIndex", HIBYTE(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgRxCounterOnActive", (unsigned __int16)v42);
      xpc_dictionary_set_int64(v29, "kCBMsgArgAntennaSwap0to1Counter", WORD1(v42));
      xpc_dictionary_set_int64(v29, "kCBMsgArgAntennaSwap1to0Counter", WORD2(v42));
      xpc_dictionary_set_int64(v29, "kCBMsgArgDeepFadingCount", HIWORD(v42));
      xpc_dictionary_set_int64(v29, "kCBMsgArgAntCmp", (unsigned __int16)v43);
      xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(v31 + 72) + 16), v29);
      xpc_release(v29);
    }
  }
}

void sub_1005EA8E4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t reply;
  char value;
  int value_1;
  __int16 value_5;

  value_5 = 0;
  value_1 = 0;
  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_100023B7C(v4, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070C404();
  }
  else
  {
    value = 0;
    v11 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t, int *, char *))(*(_QWORD *)v11 + 320))(v11, &value_1, &value))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070C3A4();
    }
    else
    {
      reply = xpc_dictionary_create_reply(xdict);
      xpc_dictionary_set_int64(reply, "kCBMsgArgRawRSSI", value);
      xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), reply);
      xpc_release(reply);
    }
  }
}

void sub_1005EAA00(int a1, xpc_object_t xdict)
{
  xpc_object_t v3;
  unsigned __int16 uint64;
  uint64_t v5;
  BOOL v6;
  xpc_object_t reply;
  unsigned __int16 v8;
  int64_t value;
  __int16 v10;

  v10 = 0;
  value = 0;
  v8 = 10;
  v3 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v3, "kCBMsgArgConnHandle");
  v5 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unsigned __int16 *, int64_t *))(*(_QWORD *)v5 + 912))(v5, uint64, 0, 0, 0, 0, &v8, &value))
  {
    v6 = 0;
  }
  else
  {
    v6 = v8 >= 2u;
  }
  if (v6)
  {
    reply = xpc_dictionary_create_reply(xdict);
    xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", value);
    xpc_dictionary_set_int64(reply, "kCBMsgArgCurrAntenna", BYTE1(value));
    xpc_release(reply);
  }
}

void sub_1005EAAF4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  unsigned __int16 uint64;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  xpc_object_t reply;
  __int16 v12;
  int64_t value;

  LOBYTE(value) = 0;
  v12 = 1;
  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgResumeTimer");
  v6 = sub_1000438A4();
  v7 = sub_100333620(v6);
  v8 = (_QWORD *)sub_1000438A4();
  v9 = 1160;
  if (v7)
    v9 = 1616;
  if ((*(unsigned int (**)(_QWORD *, _QWORD, __int16 *, int64_t *))(*v8 + v9))(v8, uint64, &v12, &value))
    v10 = 1;
  else
    v10 = v12 == 0;
  if (!v10)
  {
    reply = xpc_dictionary_create_reply(xdict);
    xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), reply);
    xpc_release(reply);
  }
}

void sub_1005EABCC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 uint64;
  xpc_object_t reply;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (!sub_100023B7C(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
  {
    uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnectionPacketType");
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_10093CB30);
    if (sub_10047B3D8((uint64_t)off_100977890, 0, uint64))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070C430();
    }
    else
    {
      reply = xpc_dictionary_create_reply(xdict);
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", 0);
      xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), reply);
      xpc_release(reply);
    }
  }
}

void sub_1005EAD00(int a1, xpc_object_t object)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t *v8;
  xpc_object_t value;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  NSObject *v24;
  uint8_t buf[16];
  int v26;
  __int16 v27;
  uint64_t v28;

  v3 = qword_100999A18;
  if (!qword_100999A18)
    goto LABEL_11;
  v4 = &qword_100999A18;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 < 13;
    if (v5 >= 13)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (!v6)
      v4 = (uint64_t *)v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 != &qword_100999A18 && *((int *)v4 + 8) <= 13)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070C51C();
  }
  else
  {
LABEL_11:
    v8 = (uint64_t *)xpc_retain(object);
    v26 = 13;
    v28 = (uint64_t)&v26;
    sub_1002F940C((uint64_t **)&qword_100999A10, &v26, (uint64_t)&unk_100740F58, (_DWORD **)&v28)[5] = v8;
    v28 = -1;
    v27 = 0;
    v26 = 0;
    value = xpc_dictionary_get_value(object, "kCBMsgArgs");
    if (!sub_100023B7C(value, 1, v10, v11, v12, v13, v14, v15, (uint64_t)"kCBMsgArgTransmitPowerLevelType"))
    {
      v16 = sub_10019AEA4((uint64_t)&v26);
      if (v16)
      {
        v17 = v16;
        sub_1000477B8();
        v23 = sub_100192BF4((uint64_t (*)())sub_1005F3F80, v17, v28, v18, v19, v20, v21, v22);
        sub_1000478A0();
        v24 = qword_100999860;
        if (v23)
        {
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
            sub_10070C4BC();
        }
        else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Response to XPC ReadTransmitPowerLevel registered successfully", buf, 2u);
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_10070C490();
        sub_1005F3F80(0x19Eu, 0, 0);
      }
    }
  }
}

void sub_1005EAF0C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  char int64;
  uint64_t v6;
  BOOL v7;
  xpc_object_t reply;
  unsigned __int16 v9;
  int64_t value;
  __int16 v11;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int64 = xpc_dictionary_get_int64(v4, "kCBMsgArgTxPowerCap");
  v11 = 0;
  value = 0;
  v9 = 10;
  v6 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, unsigned __int16 *, int64_t *))(*(_QWORD *)v6 + 944))(v6, int64, &v9, &value))
  {
    v7 = 0;
  }
  else
  {
    v7 = v9 >= 2u;
  }
  if (v7)
  {
    reply = xpc_dictionary_create_reply(xdict);
    xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), reply);
    xpc_release(reply);
  }
}

void sub_1005EAFF8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  unsigned __int8 int64;
  unsigned __int8 v6;
  unsigned __int8 v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;
  unsigned __int16 v11;
  int64_t value;

  LODWORD(value) = 0;
  v11 = 0;
  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int64 = xpc_dictionary_get_int64(v4, "kCBMsgArgAction");
  if (int64)
  {
    v6 = xpc_dictionary_get_int64(v4, "kCBMsgArgCountryCode");
    v7 = xpc_dictionary_get_int64(v4, "kCBMsgArgLeFlag");
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, unsigned __int16 *, int64_t *))(*(_QWORD *)v8 + 584))(v8, int64, v6, v7, &v11, &value))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070C548();
  }
  else if (v11 >= 2u)
  {
    reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      v10 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", 0);
      xpc_dictionary_set_int64(v10, "kCBMsgArgCountryCode", value);
      xpc_dictionary_set_int64(v10, "kCBMsgArgLeFlag", BYTE1(value));
      xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
      xpc_release(v10);
    }
  }
}

void sub_1005EB15C(uint64_t a1, void *a2)
{
  uint64_t v4;
  xpc_object_t v5;
  unsigned __int8 uint64;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t reply;
  void *v15;
  __int16 v16;
  uint64_t value;
  char v18;

  v18 = 0;
  value = 0;
  v16 = 0;
  v4 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 2544))(v4))
  {
    v5 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    uint64 = xpc_dictionary_get_uint64(v5, "kCBMsgArgAction");
    if (uint64)
    {
      v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgCountryCode2G");
      v8 = xpc_dictionary_get_uint64(v5, "kCBMsgArgLeFlag");
      v9 = xpc_dictionary_get_uint64(v5, "kCBMsgArgCountryCodeUNII1");
      v10 = xpc_dictionary_get_uint64(v5, "kCBMsgArgCountryCodeUNII3");
      v11 = xpc_dictionary_get_uint64(v5, "kCBMsgArgCountryCodeUNII5");
    }
    else
    {
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
    }
    v13 = sub_1000438A4();
    LODWORD(v12) = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16 *, uint64_t *))(*(_QWORD *)v13 + 592))(v13, uint64, v7, v8, v9, v10, v11, &v16, &value);
    if ((_DWORD)v12 && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070C5A8();
    v12 = (int)v12;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070C608();
    v12 = 1;
  }
  reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    v15 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v12);
    xpc_dictionary_set_uint64(v15, "kCBMsgArgCountryCode2G", value);
    xpc_dictionary_set_uint64(v15, "kCBMsgArgLeFlag", BYTE1(value));
    xpc_dictionary_set_uint64(v15, "kCBMsgArgCountryCodeUNII1", BYTE2(value));
    xpc_dictionary_set_uint64(v15, "kCBMsgArgCountryCodeUNII3", BYTE4(value));
    xpc_dictionary_set_uint64(v15, "kCBMsgArgCountryCodeUNII5", BYTE6(value));
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v15);
    xpc_release(v15);
  }
}

void sub_1005EB3C8(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v3;
  uint64_t v4;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v3 = objc_msgSend(objc_alloc((Class)NSString), "initWithCString:encoding:", xpc_dictionary_get_string(value, "kCBMsgArgCountryString"), 4);
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_10070C634();
  v4 = sub_10034FE84();
  (*(void (**)(uint64_t, id))(*(_QWORD *)v4 + 64))(v4, v3);

}

void sub_1005EB460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005EB470(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  _BOOL8 v3;
  uint64_t v4;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v3 = xpc_dictionary_get_BOOL(value, "kCBMsgArgCellularTransmitState");
  v4 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _BOOL8, uint64_t))(*(_QWORD *)v4 + 576))(v4, v3, 1))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070C694();
  }
}

void sub_1005EB4F4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  unsigned __int8 uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t i;
  xpc_object_t v10;
  unsigned __int16 v11;
  xpc_object_t objects[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[56];

  memset(v37, 0, 55);
  v11 = 55;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  *(_OWORD *)objects = 0u;
  v13 = 0u;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgFactoryCalTableType");
  v6 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, unsigned __int16 *, _BYTE *))(*(_QWORD *)v6 + 600))(v6, uint64, &v11, v37))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070C6F4();
  }
  else if (v11 >= 2u)
  {
    reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      v8 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", v37[3]);
      xpc_dictionary_set_int64(v8, "kCBMsgArgFactoryCalTableType", v37[4]);
      for (i = 0; i != 50; ++i)
        objects[i] = xpc_int64_create(v37[i]);
      v10 = xpc_array_create(objects, 0x32uLL);
      xpc_dictionary_set_value(v8, "kCBMsgArgFactoryCalTable", v10);
      xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
      xpc_release(v8);
    }
  }
}

void sub_1005EB6C8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  xpc_object_t reply;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = xpc_dictionary_get_BOOL(value, "kCBMsgArgDisableTpc");
  v6 = sub_1000438A4();
  LODWORD(v5) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 328))(v6, v5);
  reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", (int)v5);
  xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_1005EB758(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int v16;
  __int16 v17;
  char v18;
  unsigned __int8 v19;
  char v20;
  int v21;
  __int16 v22;

  v22 = 0;
  v21 = 0;
  v20 = 0;
  v19 = 1;
  v18 = 1;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v3 = sub_1000239F0(value, "kCBMsgArgCountryCode");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = sub_10034FE84();
  (*(void (**)(uint64_t, void *, char *, unsigned __int8 *, char *))(*(_QWORD *)v5 + 8))(v5, v4, &v20, &v19, &v18);
  if (!sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgBTAddr"))
  {
    v15 = 0;
    v16 = v21;
    v17 = v22;
    v14 = 0;
    sub_100043758(&v14);
    v12 = sub_10019AFA0(&v15);
    sub_10004339C(&v14);
    if (!v12 && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070C490();
    v13 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v13 + 968))(v13, v12, v19)
      && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_10070C754();
    }
    sub_100043728(&v14);
  }

}

void sub_1005EB8C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005EB8EC(int a1, xpc_object_t object)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t *v8;
  xpc_object_t value;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  uint8_t buf[4];
  uint8_t *v25;

  v3 = qword_100999A18;
  if (!qword_100999A18)
    goto LABEL_11;
  v4 = &qword_100999A18;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 < 21;
    if (v5 >= 21)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (!v6)
      v4 = (uint64_t *)v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 != &qword_100999A18 && *((int *)v4 + 8) <= 21)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070C814();
  }
  else
  {
LABEL_11:
    v8 = (uint64_t *)xpc_retain(object);
    *(_DWORD *)buf = 21;
    v25 = buf;
    sub_1002F940C((uint64_t **)&qword_100999A10, (int *)buf, (uint64_t)&unk_100740F58, (_DWORD **)&v25)[5] = v8;
    v25 = 0;
    value = xpc_dictionary_get_value(object, "kCBMsgArgs");
    if (!sub_100023B7C(value, 1, v10, v11, v12, v13, v14, v15, (uint64_t)"kCBMsgArgRxChannel"))
    {
      sub_1000477B8();
      v22 = sub_100192C24((uint64_t (*)())sub_1005F4098, v25, v16, v17, v18, v19, v20, v21);
      sub_1000478A0();
      v23 = qword_100999860;
      if (v22)
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_10070C7B4();
      }
      else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Response to XPC HCI_StartRxTest registered successfully", buf, 2u);
      }
    }
  }
}

void sub_1005EBA84(int a1, xpc_object_t object)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t *v8;
  xpc_object_t value;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  uint8_t buf[8];
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v3 = qword_100999A18;
  if (!qword_100999A18)
    goto LABEL_11;
  v4 = &qword_100999A18;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 < 22;
    if (v5 >= 22)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (!v6)
      v4 = (uint64_t *)v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 != &qword_100999A18 && *((int *)v4 + 8) <= 22)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070C8A0();
  }
  else
  {
LABEL_11:
    v8 = (uint64_t *)xpc_retain(object);
    LODWORD(v24) = 22;
    v25 = &v24;
    sub_1002F940C((uint64_t **)&qword_100999A10, (int *)&v24, (uint64_t)&unk_100740F58, (_DWORD **)&v25)[5] = v8;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    value = xpc_dictionary_get_value(object, "kCBMsgArgs");
    if (!sub_100023B7C(value, 1, v10, v11, v12, v13, v14, v15, (uint64_t)"kCBMsgArgTxChannel"))
    {
      sub_1000477B8();
      v20 = sub_100192C54((uint64_t (*)())sub_1005F416C, v25, v24, v23, v16, v17, v18, v19);
      sub_1000478A0();
      v21 = qword_100999860;
      if (v20)
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_10070C840();
      }
      else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Response to XPC HCI_StartTxTest registered successfully", buf, 2u);
      }
    }
  }
}

void sub_1005EBC50(int a1, xpc_object_t object)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  int *v18;

  v2 = qword_100999A18;
  if (!qword_100999A18)
    goto LABEL_11;
  v3 = &qword_100999A18;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < 23;
    if (v4 >= 23)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = (uint64_t *)v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 != &qword_100999A18 && *((int *)v3 + 8) <= 23)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070C92C();
  }
  else
  {
LABEL_11:
    v7 = (uint64_t *)xpc_retain(object);
    v17 = 23;
    v18 = &v17;
    sub_1002F940C((uint64_t **)&qword_100999A10, &v17, (uint64_t)&unk_100740F58, &v18)[5] = v7;
    sub_1000477B8();
    v14 = sub_10004C9BC(191, (uint64_t (*)())sub_1005F4240, v8, v9, v10, v11, v12, v13, v16);
    sub_1000478A0();
    v15 = qword_100999860;
    if (v14)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070C8CC();
    }
    else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Response to XPC HCI_LeTestEnd registered successfully", (uint8_t *)&v16, 2u);
    }
  }
}

void sub_1005EBDA4(int a1, xpc_object_t object)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t *v8;
  xpc_object_t value;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  uint8_t buf[8];
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v3 = qword_100999A18;
  if (!qword_100999A18)
    goto LABEL_11;
  v4 = &qword_100999A18;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 < 24;
    if (v5 >= 24)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (!v6)
      v4 = (uint64_t *)v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 != &qword_100999A18 && *((int *)v4 + 8) <= 24)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070C9B8();
  }
  else
  {
LABEL_11:
    v8 = (uint64_t *)xpc_retain(object);
    LODWORD(v24) = 24;
    v25 = &v24;
    sub_1002F940C((uint64_t **)&qword_100999A10, (int *)&v24, (uint64_t)&unk_100740F58, (_DWORD **)&v25)[5] = v8;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    value = xpc_dictionary_get_value(object, "kCBMsgArgs");
    if (!sub_100023B7C(value, 1, v10, v11, v12, v13, v14, v15, (uint64_t)"kCBMsgArgRxChannel"))
    {
      sub_1000477B8();
      v20 = sub_100192C90((uint64_t (*)())sub_1005F4334, v25, v24, v23, v16, v17, v18, v19);
      sub_1000478A0();
      v21 = qword_100999860;
      if (v20)
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_10070C958();
      }
      else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Response to XPC HCI_StartRxEnhancedTest registered successfully", buf, 2u);
      }
    }
  }
}

void sub_1005EBF70(int a1, xpc_object_t object)
{
  uint64_t v3;
  uint64_t *v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  uint64_t *v8;
  xpc_object_t value;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  uint8_t buf[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v3 = qword_100999A18;
  if (!qword_100999A18)
    goto LABEL_11;
  v4 = &qword_100999A18;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 < 25;
    if (v5 >= 25)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (!v6)
      v4 = (uint64_t *)v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 != &qword_100999A18 && *((int *)v4 + 8) <= 25)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070CA44();
  }
  else
  {
LABEL_11:
    v8 = (uint64_t *)xpc_retain(object);
    LODWORD(v24) = 25;
    v25 = &v24;
    sub_1002F940C((uint64_t **)&qword_100999A10, (int *)&v24, (uint64_t)&unk_100740F58, (_DWORD **)&v25)[5] = v8;
    v24 = 0;
    v25 = 0;
    v22 = 0;
    v23 = 0;
    value = xpc_dictionary_get_value(object, "kCBMsgArgs");
    if (!sub_100023B7C(value, 1, v10, v11, v12, v13, v14, v15, (uint64_t)"kCBMsgArgTxChannel"))
    {
      sub_1000477B8();
      v19 = sub_100192CCC((uint64_t (*)())sub_1005F4408, v25, v24, v23, v22, v16, v17, v18);
      sub_1000478A0();
      v20 = qword_100999860;
      if (v19)
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_10070C9E4();
      }
      else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Response to XPC HCI_StartTxEnhancedTest registered successfully", buf, 2u);
      }
    }
  }
}

void sub_1005EC154(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  xpc_object_t reply;
  unsigned __int8 value;
  _WORD value_1[5];

  value_1[0] = 0;
  value = 1;
  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1000239F0(v4, "kCBMsgArgCountryCode");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_10070CAE8();
  v7 = sub_10034FE84();
  (*(void (**)(uint64_t, void *, char *, _WORD *, unsigned __int8 *))(*(_QWORD *)v7 + 8))(v7, v6, (char *)value_1 + 1, value_1, &value);
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_10070CA70();
  reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", 0);
  xpc_dictionary_set_int64(reply, "kCBMsgArgCountryCode", HIBYTE(value_1[0]));
  xpc_dictionary_set_int64(reply, "kCBMsgArgLeFlag", LOBYTE(value_1[0]));
  xpc_dictionary_set_int64(reply, "kCBMsgArgHDRFlag", value);
  xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), reply);
  xpc_release(reply);

}

void sub_1005EC2A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1005EC2B8(uint64_t a1, void *a2)
{
  uint64_t v4;
  xpc_object_t reply;
  void *v6;
  unsigned __int8 value;
  _WORD value_1[5];

  value_1[0] = -1;
  value = -1;
  v4 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, char *, _WORD *, unsigned __int8 *, uint64_t))(*(_QWORD *)v4 + 1640))(v4, (char *)value_1 + 1, value_1, &value, 1))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070CB48();
  }
  else
  {
    reply = xpc_dictionary_create_reply(a2);
    if (reply)
    {
      v6 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgEpaGpioEnabled", HIBYTE(value_1[0]));
      xpc_dictionary_set_int64(v6, "kCBMsgArgEpaGpioNum", LOBYTE(value_1[0]));
      xpc_dictionary_set_int64(v6, "kCBMsgArgEpaGpioState", value);
      xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v6);
      xpc_release(v6);
    }
  }
}

void sub_1005EC3AC(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  _BOOL8 v3;
  uint64_t v4;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v3 = xpc_dictionary_get_BOOL(value, "kCBMsgArgSARHeadState");
  v4 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, uint64_t, _BOOL8))(*(_QWORD *)v4 + 96))(v4, 1, v3))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070CBA8();
  }
}

void sub_1005EC430(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  _BOOL8 v3;
  uint64_t v4;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v3 = xpc_dictionary_get_BOOL(value, "kCBMsgArgWiFi5GState");
  v4 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _BOOL8, uint64_t, uint64_t))(*(_QWORD *)v4 + 1664))(v4, v3, 15, 1))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070CC08();
  }
}

void sub_1005EC4B8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  unsigned __int16 uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  _BYTE length[9];
  int v10;

  v10 = 0;
  memset(length, 0, sizeof(length));
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnHandle");
  v6 = sub_1000438A4();
  if (!(*(unsigned int (**)(uint64_t, _QWORD, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v6 + 1680))(v6, uint64, &length[1], length, 1))
  {
    reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      v8 = reply;
      xpc_dictionary_set_data(reply, "kCBMsgArgData", &length[1], length[0]);
      xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
      xpc_release(v8);
    }
  }
}

void sub_1005EC5A0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v5;
  unsigned __int16 uint64;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  size_t length[33];

  memset(length, 0, 257);
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (value)
  {
    v5 = value;
    uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnHandle");
    LOBYTE(v5) = xpc_dictionary_get_uint64(v5, "kCBMsgArgVersion");
    v7 = sub_1000438A4();
    if (!(*(unsigned int (**)(uint64_t, _QWORD, _QWORD, char *, size_t *, uint64_t))(*(_QWORD *)v7 + 1688))(v7, uint64, v5, (char *)length + 1, length, 1))
    {
      reply = xpc_dictionary_create_reply(xdict);
      if (reply)
      {
        v9 = reply;
        xpc_dictionary_set_data(reply, "kCBMsgArgData", (char *)length + 1, LOBYTE(length[0]));
        xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
        xpc_release(v9);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070CC68();
  }
}

void sub_1005EC6FC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v5;
  unsigned __int16 uint64;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;
  size_t length[33];

  memset(length, 0, 257);
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (value)
  {
    v5 = value;
    uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnHandle");
    LOBYTE(v5) = xpc_dictionary_get_uint64(v5, "kCBMsgArgAdvInstance");
    v7 = sub_1000438A4();
    v8 = (*(int (**)(uint64_t, _QWORD, _QWORD, char *, size_t *, uint64_t))(*(_QWORD *)v7 + 1688))(v7, uint64, v5, (char *)length + 1, length, 1);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070CC68();
    v8 = 3;
  }
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v8);
    xpc_dictionary_set_data(v10, "kCBMsgArgData", (char *)length + 1, LOBYTE(length[0]));
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005EC870(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  unsigned __int8 uint64;
  uint64_t v4;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgCellularTransmitAntenna");
  v4 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 1696))(v4, 1, uint64, 1))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070CC94();
  }
}

void sub_1005EC8F0(int a1, xpc_object_t xdict)
{
  xpc_object_t v2;
  xpc_object_t value;
  unsigned __int16 uint64;
  xpc_object_t v5;
  uint64_t v6;

  v2 = xdict;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnHandle");
  v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v5, "kCBMsgArgCurrProposedAntenna");
  v6 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v6 + 912))(v6, uint64, 1, v2, 0, 0, 0, 0))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070CCC0();
  }
}

void sub_1005EC9B4(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  _BOOL8 v3;
  uint64_t v4;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v3 = xpc_dictionary_get_BOOL(value, "kCBMsgArgTunablesReadEnable");
  v4 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _BOOL8))(*(_QWORD *)v4 + 1840))(v4, v3))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070CD28();
  }
}

void sub_1005ECA2C(int a1, xpc_object_t xdict)
{
  xpc_object_t v2;
  xpc_object_t value;
  unsigned __int16 uint64;
  xpc_object_t v5;
  uint64_t v6;

  v2 = xdict;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnHandle");
  v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v5, "kCBMsgArgCurrDiversityAntenna");
  v6 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v6 + 912))(v6, uint64, 8, 1, v2, 0, 0, 0))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070CD54();
  }
}

void sub_1005ECAF0(int a1, xpc_object_t xdict)
{
  xpc_object_t v2;
  xpc_object_t value;
  unsigned __int16 uint64;
  xpc_object_t v5;
  unsigned __int8 v6;
  xpc_object_t v7;
  unsigned __int8 v8;
  xpc_object_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;

  v2 = xdict;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgConfigMask");
  v7 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgAdvBufMatchAdvType");
  v9 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v9, "kCBMsgArgPayloadSize");
  v11 = -573785174;
  v12 = -18;
  v10 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, int *, uint64_t, uint64_t, _QWORD, _QWORD, char))(*(_QWORD *)v10 + 2792))(v10, uint64, v6, &v11, 255, 76, v8, v2, 100))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070CDBC();
  }
}

void sub_1005ECC18(int a1, xpc_object_t xdict)
{
  xpc_object_t v2;
  xpc_object_t value;
  unsigned __int16 uint64;
  xpc_object_t v5;
  unsigned __int8 v6;
  xpc_object_t v7;
  uint64_t v8;

  v2 = xdict;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgAdvBufEnable");
  v7 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v7, "kCBMsgArgAdvBufPause");
  v8 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v8 + 2856))(v8, uint64, v6, v2))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070CE1C();
  }
}

void sub_1005ECCE8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  unsigned __int16 uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  int64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAdvBufMatchHandle");
  LODWORD(value) = -1;
  v6 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, char *, char *, int64_t *))(*(_QWORD *)v6 + 2824))(v6, uint64, (char *)&value + 3, (char *)&value + 2, &value))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070CE7C();
  }
  else
  {
    reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      v8 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgAdvBufNumEntries", BYTE3(value));
      xpc_dictionary_set_int64(v8, "kCBMsgArgAdvBufStatusMask", BYTE2(value));
      xpc_dictionary_set_int64(v8, "kCBMsgArgAdvBufNumOverflows", (unsigned __int16)value);
      xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
      xpc_release(v8);
    }
  }
}

void sub_1005ECE00(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  unsigned __int16 uint64;
  xpc_object_t v5;
  unsigned __int16 v6;
  xpc_object_t v7;
  unsigned __int8 v8;
  xpc_object_t v9;
  unsigned __int8 v10;
  xpc_object_t v11;
  unsigned __int8 v12;
  xpc_object_t v13;
  char int64;
  xpc_object_t v15;
  xpc_object_t v16;
  uint64_t v17;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgConfigMask");
  v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgAdvBufMatchAdvType");
  v9 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v10 = xpc_dictionary_get_uint64(v9, "kCBMsgArgPayloadSize");
  v11 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v12 = xpc_dictionary_get_uint64(v11, "kCBMsgArgAdvBufNumEntries");
  v13 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int64 = xpc_dictionary_get_int64(v13, "kCBMsgArgAdvBufRSSIThreshold");
  v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v15, "kCBMsgArgAdvBufDupNumEntries");
  v16 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v16, "kCBMsgArgAdvBufDupClearTimeoutSeconds");
  v17 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char, _QWORD, _BYTE, _QWORD, _QWORD, _BYTE))(*(_QWORD *)v17 + 2832))(v17, uint64, v6, 255, 76, v8, v10, v12, int64, 0, 0, 0, 0, 0))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070CEDC();
  }
}

void sub_1005ECFA8(int a1, xpc_object_t xdict)
{
  xpc_object_t v2;
  xpc_object_t value;
  unsigned __int16 uint64;
  xpc_object_t v5;
  unsigned __int8 v6;
  xpc_object_t v7;
  char int64;
  xpc_object_t v9;
  unsigned __int16 v10;
  xpc_object_t v11;
  uint64_t v12;

  v2 = xdict;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgConfigMask");
  v7 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  int64 = xpc_dictionary_get_int64(v7, "kCBMsgArgAdvBufRSSIThreshold");
  v9 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v10 = xpc_dictionary_get_uint64(v9, "kCBMsgArgAdvBufDupNumEntries");
  v11 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOWORD(v2) = xpc_dictionary_get_uint64(v11, "kCBMsgArgAdvBufDupClearTimeoutSeconds");
  v12 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 2840))(v12, uint64, v6, int64, v10, (unsigned __int16)v2))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070CF3C();
  }
}

void sub_1005ED0C0(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  unsigned __int16 uint64;
  xpc_object_t v5;
  unsigned __int8 v6;
  xpc_object_t v7;
  unsigned __int8 v8;
  xpc_object_t v9;
  char v10;
  xpc_object_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  char v23;
  uint64_t v24;
  __int16 v25;
  __int128 v26;
  _BYTE v27[205];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgStartEntry");
  v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgEndEntry");
  v9 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v10 = xpc_dictionary_get_uint64(v9, "kCBMsgArgAdvBufEnable");
  memset(v27, 0, sizeof(v27));
  v26 = 0u;
  v11 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_100023B7C(v11, 1, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D060();
  }
  else
  {
    v18 = v8 - v6;
    if (v8 < v6 || v8 - v6 - 14 <= 0xFFFFFFF0)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070CF9C();
    }
    else
    {
      v21 = 0;
      v22 = 0;
      v23 = v10;
      v24 = 0x12554433221100;
      v25 = 0;
      if (v18 >= 1)
      {
        v19 = v27;
        do
        {
          *((_DWORD *)v19 - 4) = -573785174;
          *((_WORD *)v19 - 6) = -18;
          *(v19 - 10) = v10;
          *(_QWORD *)(v19 - 9) = 0x12554433221100;
          *(_WORD *)(v19 - 1) = 0;
          v19 += 17;
          --v18;
        }
        while (v18);
      }
      v20 = sub_1000438A4();
      if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, int *))(*(_QWORD *)v20 + 2880))(v20, uint64, v6, v8, &v21)&& os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        sub_10070D000();
      }
    }
  }
}

void sub_1005ED320(int a1, xpc_object_t xdict)
{
  xpc_object_t v2;
  xpc_object_t value;
  unsigned __int16 uint64;
  xpc_object_t v5;
  unsigned __int8 v6;
  xpc_object_t v7;
  unsigned __int8 v8;
  xpc_object_t v9;
  uint64_t v10;

  v2 = xdict;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgConfigMask");
  v7 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgPayloadSize");
  v9 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v9, "kCBMsgArgAdvBufNumEntries");
  v10 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v10 + 2888))(v10, uint64, v6, v8, 1, v2))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D0C0();
  }
}

void sub_1005ED41C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  unsigned __int16 uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  int64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAdvBufMatchHandle");
  LOBYTE(value) = -1;
  v6 = sub_1000438A4();
  if (!(*(unsigned int (**)(uint64_t, _QWORD, int64_t *))(*(_QWORD *)v6 + 2896))(v6, uint64, &value))
  {
    reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      v8 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgAdvBufNumEntries", value);
      xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
      xpc_release(v8);
    }
  }
}

void sub_1005ED4C8(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  unsigned __int8 uint64;
  uint64_t v4;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSPMIDiagSubOpcode");
  v4 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 2904))(v4, uint64, 1))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D120();
  }
}

void sub_1005ED54C(int a1, xpc_object_t xdict)
{
  xpc_object_t v2;
  xpc_object_t value;
  unsigned __int16 uint64;
  xpc_object_t v5;
  uint64_t v6;

  v2 = xdict;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v5, "kCBMsgArgAdvBufEnable");
  v6 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v6 + 2912))(v6, uint64, v2, 1))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D180();
  }
}

void sub_1005ED600(int a1, xpc_object_t xdict)
{
  xpc_object_t v2;
  xpc_object_t value;
  unsigned __int8 uint64;
  xpc_object_t v5;
  uint64_t v6;

  v2 = xdict;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v5, "kCBMsgArgAdvBufEnable");
  v6 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v6 + 2920))(v6, uint64, v2, 1))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D1E0();
  }
}

void sub_1005ED6B4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  unsigned __int16 uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  int64_t value;

  LOWORD(value) = -21846;
  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAdvBufMatchHandle");
  v6 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, int64_t *, uint64_t))(*(_QWORD *)v6 + 2928))(v6, uint64, &value, 1))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D240();
  }
  else
  {
    reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      v8 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStartInstant", (unsigned __int16)value);
      xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
      xpc_release(v8);
    }
  }
}

void sub_1005ED794(int a1, xpc_object_t xdict)
{
  xpc_object_t v2;
  xpc_object_t value;
  unsigned __int16 uint64;
  xpc_object_t v5;
  unsigned __int16 v6;
  xpc_object_t v7;
  unsigned __int8 v8;
  xpc_object_t v9;
  __int128 *v10;
  uint64_t v11;

  v2 = xdict;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgStartInstant");
  v7 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgModValue");
  v9 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v9, "kCBMsgArgAdvBufEnable");
  v10 = sub_10019ACEC(uint64);
  v11 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, __int128 *, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v11 + 2936))(v11, v10, v6, v8, v2, 1))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_100703044();
  }
}

void sub_1005ED89C(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  unsigned __int8 uint64;
  uint64_t v4;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufEnable");
  v4 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 2944))(v4, uint64, 1))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D2A0();
  }
}

void sub_1005ED920(int a1, xpc_object_t xdict)
{
  xpc_object_t v2;
  xpc_object_t value;
  unsigned __int8 uint64;
  xpc_object_t v5;
  unsigned __int8 v6;
  xpc_object_t v7;
  uint64_t v8;

  v2 = xdict;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgGenericGPIOPinNum");
  v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgGenericGPIOControl");
  v7 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v7, "kCBMsgArgGenericGPIOState");
  v8 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v8 + 3000))(v8, uint64, v6, v2, 1))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D300();
  }
}

void sub_1005ED9F4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  int64_t v12;
  xpc_object_t reply;
  int v14;
  __int16 v15;

  v15 = 0;
  v14 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_100023B7C(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D360();
  }
  else
  {
    v11 = (unsigned __int16 *)sub_10019AEA4((uint64_t)&v14);
    if (v11)
      v12 = *v11;
    else
      v12 = 0;
    reply = xpc_dictionary_create_reply(xdict);
    xpc_dictionary_set_int64(reply, "kCBMsgArgACLConnHandle", v12);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), reply);
    xpc_release(reply);
  }
}

void sub_1005EDAD8(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  unsigned __int16 uint64;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v9;
  unsigned __int16 v10;
  xpc_object_t v11;
  unsigned __int16 v12;
  xpc_object_t v13;
  unsigned __int8 v14;
  xpc_object_t v15;
  uint64_t v16;
  uint64_t v17;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHDRSyncConnHandle");
  v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgHDRSyncConnTxBw");
  v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgHDRSyncConnRxBw");
  v9 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v10 = xpc_dictionary_get_uint64(v9, "kCBMsgArgHDRSyncConnMaxLatency");
  v11 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v12 = xpc_dictionary_get_uint64(v11, "kCBMsgArgHDRSyncConnVoiceSettting");
  v13 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v14 = xpc_dictionary_get_uint64(v13, "kCBMsgArgHDRSyncConnRetxEffort");
  v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v16 = xpc_dictionary_get_uint64(v15, "kCBMsgArgHDRSyncConnPacketType");
  v17 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, char))(*(_QWORD *)v17 + 1336))(v17, uint64, v6, v8, v10, v12, v14, v16, 1))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D38C();
  }
}

void sub_1005EDC48(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t v10;
  uint64_t uint64;
  xpc_object_t v12;
  uint64_t v13;
  xpc_object_t v14;
  unsigned __int16 v15;
  xpc_object_t v16;
  unsigned __int16 v17;
  xpc_object_t v18;
  unsigned __int8 v19;
  xpc_object_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  __int16 v25;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v25 = 0;
  v24 = 0;
  if (!sub_100023B7C(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgBTAddr"))
  {
    v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    uint64 = xpc_dictionary_get_uint64(v10, "kCBMsgArgHDRSyncConnTxBw");
    v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v13 = xpc_dictionary_get_uint64(v12, "kCBMsgArgHDRSyncConnRxBw");
    v14 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v15 = xpc_dictionary_get_uint64(v14, "kCBMsgArgHDRSyncConnMaxLatency");
    v16 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v17 = xpc_dictionary_get_uint64(v16, "kCBMsgArgHDRSyncConnVoiceSettting");
    v18 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v19 = xpc_dictionary_get_uint64(v18, "kCBMsgArgHDRSyncConnRetxEffort");
    v20 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v21 = xpc_dictionary_get_uint64(v20, "kCBMsgArgHDRSyncConnPacketType");
    v22 = sub_1000438A4();
    LOBYTE(v23) = 1;
    if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, int, uint64_t (*)(void *, void *), int *, _QWORD))(*(_QWORD *)v22 + 1344))(v22, &v24, uint64, v13, v15, v17, v19, v21, v23, sub_1002C379C, &v24, 0))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070D3EC();
    }
  }
}

void sub_1005EDDDC(uint64_t a1, void *a2)
{
  uint64_t v3;
  xpc_object_t value;
  unsigned __int8 uint64;
  xpc_object_t v6;
  unsigned __int16 v7;
  xpc_object_t v8;
  unsigned __int8 v9;
  uint64_t v10;

  v3 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 2552))(v3))
  {
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSCOControlFormat");
    v6 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgSCOControlBufferSize");
    v8 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    v9 = xpc_dictionary_get_uint64(v8, "kCBMsgArgSCOControlNumBuffer");
    v10 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v10 + 1352))(v10, uint64, v7, v9, 1))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070D44C();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070D4AC();
  }
}

void sub_1005EDEEC(uint64_t a1, void *a2)
{
  uint64_t v4;
  xpc_object_t value;
  unsigned __int8 uint64;
  uint64_t v7;
  int v8;
  uint64_t v9;
  xpc_object_t reply;
  void *v11;

  v4 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 2496))(v4))
  {
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBEnable");
    v7 = sub_1000438A4();
    v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 1384))(v7, uint64, 1);
    if (v8)
    {
      LODWORD(v9) = v8;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070D4D8();
      v9 = (int)v9;
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D538();
    uint64 = 0;
    v9 = 1;
  }
  reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v9);
    xpc_dictionary_set_uint64(v11, "kCBMsgArgHRBEnable", uint64);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1005EE028(uint64_t a1, void *a2)
{
  uint64_t v4;
  xpc_object_t value;
  unsigned __int8 uint64;
  uint64_t v7;
  int v8;
  uint64_t v9;
  xpc_object_t reply;
  void *v11;

  v4 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 2496))(v4))
  {
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBBands");
    v7 = sub_1000438A4();
    v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 1392))(v7, uint64, 1);
    if (v8)
    {
      LODWORD(v9) = v8;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070D564();
      v9 = (int)v9;
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D538();
    uint64 = 0;
    v9 = 1;
  }
  reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v9);
    xpc_dictionary_set_uint64(v11, "kCBMsgArgHRBBands", uint64);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1005EE164(uint64_t a1, void *a2)
{
  uint64_t v4;
  xpc_object_t value;
  unsigned __int8 uint64;
  uint64_t v7;
  int v8;
  uint64_t v9;
  xpc_object_t reply;
  void *v11;

  v4 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 2496))(v4))
  {
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBBands");
    v7 = sub_1000438A4();
    v8 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 1400))(v7, uint64, 1);
    if (v8)
    {
      LODWORD(v9) = v8;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070D564();
      v9 = (int)v9;
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D538();
    uint64 = 0;
    v9 = 1;
  }
  reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v9);
    xpc_dictionary_set_uint64(v11, "kCBMsgArgHRBBands", uint64);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1005EE2A0(uint64_t a1, void *a2)
{
  uint64_t v4;
  xpc_object_t value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned __int8 uint64;
  xpc_object_t reply;
  void *v16;
  uint64_t v17;
  unsigned __int16 *v18;
  xpc_object_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;

  v4 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 2496))(v4))
  {
    v22 = 0;
    v21 = 0;
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    v12 = sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgBTAddr");
    if (v12)
    {
      v13 = v12;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070D360();
LABEL_5:
      uint64 = 0;
      goto LABEL_9;
    }
    v17 = sub_10019AEA4((uint64_t)&v21);
    if (!v17)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070D5C4();
      v13 = 0;
      goto LABEL_5;
    }
    v18 = (unsigned __int16 *)v17;
    v19 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    uint64 = xpc_dictionary_get_uint64(v19, "kCBMsgArgHRBBand");
    v20 = sub_1000438A4();
    v13 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v20 + 1416))(v20, *v18, uint64, 1);
    if (v13 && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D5F0();
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D538();
    uint64 = 0;
    v13 = 1;
  }
LABEL_9:
  reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    v16 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v13);
    xpc_dictionary_set_uint64(v16, "kCBMsgArgHRBBand", uint64);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v16);
    xpc_release(v16);
  }
}

void sub_1005EE48C(uint64_t a1, void *a2)
{
  uint64_t v3;
  xpc_object_t value;
  unsigned __int8 uint64;
  xpc_object_t v6;
  unsigned __int8 v7;
  uint64_t v8;

  v3 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 2496))(v3))
  {
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBEnable");
    v6 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgHRBBands");
    v8 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v8 + 1432))(v8, uint64, v7, 1))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070D650();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070D538();
  }
}

void sub_1005EE57C(uint64_t a1, void *a2)
{
  uint64_t v3;
  xpc_object_t value;
  unsigned __int16 uint64;
  xpc_object_t v6;
  unsigned __int16 v7;
  uint64_t v8;

  v3 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 2496))(v3))
  {
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBScanInterval");
    v6 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgHRBScanWindow");
    v8 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v8 + 1440))(v8, uint64, v7, 1))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070D6B0();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070D538();
  }
}

void sub_1005EE66C(uint64_t a1, xpc_object_t original)
{
  xpc_object_t reply;
  uint64_t v5;
  xpc_object_t value;
  unsigned __int8 uint64;
  void *v8;
  int64_t v9;
  xpc_object_t v10;
  const void *data;
  size_t v12;
  const void *v13;
  xpc_object_t v14;
  const void *v15;
  const void *v16;
  xpc_object_t v17;
  const void *v18;
  const void *v19;
  uint64_t v20;
  int v21;
  size_t length;

  reply = xpc_dictionary_create_reply(original);
  v5 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 2496))(v5))
  {
    value = xpc_dictionary_get_value(original, "kCBMsgArgs");
    uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBNumOfGroups");
    if (uint64 - 4 <= 0xFFFFFFFC)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070D710();
      v8 = reply;
      v9 = 3;
      goto LABEL_24;
    }
    length = 0;
    v10 = xpc_dictionary_get_value(original, "kCBMsgArgs");
    data = xpc_dictionary_get_data(v10, "kCBMsgArgHRBStartGroupFrequency", &length);
    v12 = length;
    if (length == 2 * uint64)
    {
      v13 = data;
      v14 = xpc_dictionary_get_value(original, "kCBMsgArgs");
      v15 = xpc_dictionary_get_data(v14, "kCBMsgArgHRBSizeGroupChannelMap", &length);
      if (length == v12)
      {
        v16 = v15;
        v17 = xpc_dictionary_get_value(original, "kCBMsgArgs");
        v18 = xpc_dictionary_get_data(v17, "kCBMsgArgHRBChannelMap", &length);
        if (length == 63 * uint64)
        {
          v19 = v18;
          v20 = sub_1000438A4();
          v21 = (*(uint64_t (**)(uint64_t, _QWORD, const void *, const void *, const void *, uint64_t))(*(_QWORD *)v20 + 1448))(v20, uint64, v13, v16, v19, 1);
          if (v21 && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
            sub_10070D784();
          v9 = v21;
          goto LABEL_23;
        }
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_10070D7E4();
      }
      else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        sub_10070D860();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_10070D8C0();
    }
    v9 = 3;
LABEL_23:
    v8 = reply;
    goto LABEL_24;
  }
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_10070D538();
  v8 = reply;
  v9 = 11;
LABEL_24:
  xpc_dictionary_set_int64(v8, "kCBMsgArgStatus", v9);
  xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_1005EE940(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;
  char v11;
  int v12;
  char v13;
  int v14;
  char v15;
  int bytes;
  char v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 uint64;

  v18 = 0;
  v17 = 0;
  bytes = 0;
  v15 = 0;
  v14 = 0;
  v13 = 0;
  v12 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPowerDatabaseVscVersion");
  v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v21 = xpc_dictionary_get_uint64(v5, "kCBMsgArgPowerDatabaseAntenna");
  v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v20 = xpc_dictionary_get_uint64(v6, "kCBMsgArgPowerDatabasePCap");
  v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v19 = xpc_dictionary_get_uint64(v7, "kCBMsgArgPowerDatabaseBandCode");
  v8 = sub_1000438A4();
  v11 = 1;
  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *, unsigned __int8 *, unsigned __int8 *, unsigned __int8 *, unsigned __int8 *, int *, int *, int *, char))(*(_QWORD *)v8 + 1456))(v8, &uint64, &v21, &v20, &v19, &v18, &bytes, &v14, &v12, v11)&& os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070D920();
  }
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgPowerDatabaseVscVersion", uint64);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgPowerDatabaseCountryCode", v18);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgPowerDatabaseAntenna", v21);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgPowerDatabasePCap", v20);
    if (uint64 - 1 <= 1)
    {
      xpc_dictionary_set_data(v10, "kCBMsgArgPowerDatabaseIpaMaxTxPwr", &bytes, 5uLL);
      xpc_dictionary_set_data(v10, "kCBMsgArgPowerDatabaseEpaMaxTxPwr", &v14, 5uLL);
      xpc_dictionary_set_data(v10, "kCBMsgArgPowerDatabaseIpaMaxPwrIdx", &v12, 5uLL);
      if (uint64 == 2)
        xpc_dictionary_set_uint64(v10, "kCBMsgArgPowerDatabaseBandCode", v19);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005EEB60(uint64_t a1, void *a2)
{
  uint64_t v4;
  xpc_object_t value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  xpc_object_t reply;
  void *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  xpc_object_t v18;
  unsigned __int8 uint64;
  uint64_t v20;
  int v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  unsigned __int16 v28;

  v28 = 0;
  v27 = 0;
  v26 = 0;
  v25 = 0;
  v24 = 0;
  v23 = 0;
  v4 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 2496))(v4))
  {
    v22 = 0;
    v21 = 0;
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    v12 = sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgBTAddr");
    if (v12)
    {
      v13 = v12;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070D360();
    }
    else
    {
      v16 = (unsigned __int16 *)sub_10019AEA4((uint64_t)&v21);
      if (v16)
      {
        v17 = *v16;
        v18 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
        uint64 = xpc_dictionary_get_uint64(v18, "kCBMsgArgHRBReadTxPwrType");
        v20 = sub_1000438A4();
        v13 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, unsigned __int16 *, char *, __int16 *, char *, __int16 *, char *, __int16 *, char *, __int16 *, char *, __int16 *))(*(_QWORD *)v20 + 1464))(v20, v17, uint64, 1, &v28, (char *)&v27 + 1, &v27, (char *)&v26 + 1, &v26, (char *)&v25 + 1, &v25, (char *)&v24 + 1, &v24, (char *)&v23 + 1, &v23);
        if (v13 && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_10070D980();
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_10070D5C4();
        v13 = 0;
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D538();
    v13 = 1;
  }
  reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    v15 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgConnHandle", v28);
    xpc_dictionary_set_int64(v15, "kCBMsgArgStatus", v13);
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPower2GBr", SHIBYTE(v27));
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPower2GEdr2", (char)v27);
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPower2GEdr3", SHIBYTE(v26));
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPower2GHdr4", (char)v26);
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPower2GHdr8", SHIBYTE(v25));
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPowerHRBBr", (char)v25);
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPowerHRBEdr2", SHIBYTE(v24));
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPowerHRBEdr3", (char)v24);
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPowerHRBHdr4", SHIBYTE(v23));
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPowerHRBHdr8", (char)v23);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v15);
    xpc_release(v15);
  }
}

void sub_1005EEE54(uint64_t a1, void *a2)
{
  uint64_t v4;
  xpc_object_t value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  xpc_object_t reply;
  void *v16;
  uint64_t i;
  xpc_object_t v18;
  uint64_t j;
  xpc_object_t v20;
  xpc_object_t v21[80];
  xpc_object_t objects[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[10];
  uint64_t v28;
  __int16 v29;

  v29 = 0;
  v28 = 0;
  memset(v27, 0, sizeof(v27));
  v4 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 2496))(v4))
  {
    WORD2(v21[0]) = 0;
    LODWORD(v21[0]) = 0;
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    if (sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070D360();
    }
    else
    {
      v12 = (unsigned __int16 *)sub_10019AEA4((uint64_t)v21);
      if (v12)
      {
        v13 = *v12;
        v14 = sub_1000438A4();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, _OWORD *, uint64_t))(*(_QWORD *)v14 + 1480))(v14, v13, &v28, v27, 1))
        {
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
            sub_10070D9E0();
        }
        else
        {
          reply = xpc_dictionary_create_reply(a2);
          if (reply)
          {
            v16 = reply;
            v25 = 0u;
            v26 = 0u;
            v23 = 0u;
            v24 = 0u;
            *(_OWORD *)objects = 0u;
            bzero(v21, 0x280uLL);
            xpc_dictionary_set_uint64(v16, "kCBMsgArgConnHandle", v13);
            xpc_dictionary_set_int64(v16, "kCBMsgArgStatus", 0);
            for (i = 0; i != 10; ++i)
              objects[i] = xpc_int64_create(*((unsigned __int8 *)&v28 + i));
            v18 = xpc_array_create(objects, 0xAuLL);
            xpc_dictionary_set_value(v16, "kCBMsgArgHRBAfhChannelMap", v18);
            for (j = 0; j != 80; ++j)
              v21[j] = xpc_int64_create(*((unsigned __int16 *)v27 + j));
            v20 = xpc_array_create(v21, 0x50uLL);
            xpc_dictionary_set_value(v16, "kCBMsgArgHRBAfhFreqMap", v20);
            xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v16);
            xpc_release(v16);
          }
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        sub_10070D5C4();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070D538();
  }
}

void sub_1005EF100(uint64_t a1, void *a2)
{
  uint64_t v3;
  xpc_object_t value;
  unsigned __int8 uint64;
  uint64_t v6;

  v3 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 2496))(v3))
  {
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBLimitChannelMap");
    v6 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 1496))(v6, uint64, 1))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070DA40();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070D538();
  }
}

void sub_1005EF1C4(uint64_t a1, void *a2)
{
  uint64_t v3;
  xpc_object_t value;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;
  char v11;
  char v12;
  char uint64;

  v3 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 2496))(v3))
  {
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBBand");
    v5 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    v12 = xpc_dictionary_get_uint64(v5, "kCBMsgArgHRBChannelMaskNumLow");
    v6 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    v11 = xpc_dictionary_get_uint64(v6, "kCBMsgArgHRBChannelMaskNumHigh");
    v7 = sub_1000438A4();
    LODWORD(v8) = (*(uint64_t (**)(uint64_t, uint64_t, char *, char *, char *, uint64_t))(*(_QWORD *)v7 + 1504))(v7, 1, &uint64, &v12, &v11, 1);
    if ((_DWORD)v8 && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070DAA0();
    v8 = (int)v8;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070DB00();
    v8 = 0;
  }
  reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v8);
    xpc_release(v10);
  }
}

void sub_1005EF314(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  xpc_object_t v12;
  xpc_object_t v13;
  unsigned __int8 uint64;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  uint64_t v25;
  xpc_object_t reply;
  void *v27;
  unsigned __int8 v28;
  int v29;
  __int16 v30;
  __int128 v31;
  uint64_t v32;
  __int16 v33;

  v33 = -1;
  v32 = -1;
  v31 = xmmword_100742D50;
  v30 = 0;
  v29 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v10 = sub_100023B7C(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgBTAddr");
  if (v10)
  {
    v11 = v10;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D360();
  }
  else
  {
    v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v12, "kCBMsgArgEnhTestEnable");
    v13 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    uint64 = xpc_dictionary_get_uint64(v13, "kCBMsgArgEnhTxTestHoppingMode");
    v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v15, "kCBMsgArgEnhTxTestBand");
    v16 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v28 = xpc_dictionary_get_uint64(v16, "kCBMsgArgEnhTxTestFrequency");
    v17 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v17, "kCBMsgArgEnhTxTestInterval");
    v18 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v18, "kCBMsgArgEnhTxTestNumberPacket");
    v19 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v19, "kCBMsgArgEnhTxTestModulationType");
    v20 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v20, "kCBMsgArgEnhTxTestLogicalChan");
    v21 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v21, "kCBMsgArgEnhTxTestPacketType");
    v22 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v22, "kCBMsgArgEnhTxTestPacketLen");
    v23 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v23, "kCBMsgArgEnhTxTestTxPowerLevel");
    v24 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v24, "kCBMsgArgEnhTxTestTxPowerTableIdx");
    v25 = sub_1000438A4();
    v11 = (*(uint64_t (**)(uint64_t, int *, _QWORD, _QWORD))(*(_QWORD *)v25 + 1512))(v25, &v29, uint64, v28);
  }
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v27 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v11);
    xpc_release(v27);
  }
}

void sub_1005EF638(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  xpc_object_t v12;
  char uint64;
  xpc_object_t v14;
  xpc_object_t v15;
  unsigned __int8 v16;
  xpc_object_t v17;
  unsigned __int8 v18;
  xpc_object_t v19;
  unsigned __int8 v20;
  xpc_object_t v21;
  unsigned __int8 v22;
  xpc_object_t v23;
  unsigned __int8 v24;
  xpc_object_t v25;
  char v26;
  xpc_object_t v27;
  char v28;
  xpc_object_t v29;
  __int16 v30;
  __int16 v31;
  uint64_t v32;
  xpc_object_t reply;
  void *v34;
  uint64_t v35;
  unsigned __int16 v36;
  int v37;
  __int16 v38;

  v38 = 0;
  v37 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v10 = sub_100023B7C(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgBTAddr");
  if (v10)
  {
    v11 = v10;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D360();
  }
  else
  {
    v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    uint64 = xpc_dictionary_get_uint64(v12, "kCBMsgArgEnhTestEnable");
    v14 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v36 = xpc_dictionary_get_uint64(v14, "kCBMsgArgEnhRxTestReportPeriod");
    v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v16 = xpc_dictionary_get_uint64(v15, "kCBMsgArgEnhRxTestIs2G");
    v17 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v18 = xpc_dictionary_get_uint64(v17, "kCBMsgArgEnhRxTestOffset");
    v19 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v20 = xpc_dictionary_get_uint64(v19, "kCBMsgArgEnhRxTestFrequency");
    v21 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v22 = xpc_dictionary_get_uint64(v21, "kCBMsgArgEnhRxTestModulationType");
    v23 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v24 = xpc_dictionary_get_uint64(v23, "kCBMsgArgEnhRxTestLogicalChan");
    v25 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v26 = xpc_dictionary_get_uint64(v25, "kCBMsgArgEnhRxTestBand");
    v27 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v28 = xpc_dictionary_get_uint64(v27, "kCBMsgArgEnhRxTestPacketType");
    v29 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v30 = xpc_dictionary_get_uint64(v29, "kCBMsgArgEnhRxTestPacketLen");
    if (uint64)
      v31 = v30;
    else
      v31 = 0;
    v32 = sub_1000438A4();
    BYTE4(v35) = 1;
    WORD1(v35) = v31;
    BYTE1(v35) = v28;
    LOBYTE(v35) = v26;
    v11 = (*(uint64_t (**)(uint64_t, int *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t (*)(void *, void *), int *, _QWORD))(*(_QWORD *)v32 + 1520))(v32, &v37, v36, v16, v18, v20, v22, v24, v35, sub_1002C379C, &v37, 0);
  }
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v34 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v11);
    xpc_release(v34);
  }
}

void sub_1005EF87C(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  xpc_object_t v12;
  char uint64;
  xpc_object_t v14;
  xpc_object_t v15;
  unsigned __int8 v16;
  xpc_object_t v17;
  unsigned __int8 v18;
  xpc_object_t v19;
  unsigned __int8 v20;
  xpc_object_t v21;
  char v22;
  xpc_object_t v23;
  __int16 v24;
  xpc_object_t v25;
  char v26;
  xpc_object_t v27;
  unsigned __int8 v28;
  xpc_object_t v29;
  unsigned __int8 v30;
  __int16 v31;
  uint64_t v32;
  xpc_object_t reply;
  void *v34;
  uint64_t v35;
  unsigned __int16 v36;
  int v37;
  __int16 v38;

  v38 = 0;
  v37 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v10 = sub_100023B7C(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgBTAddr");
  if (v10)
  {
    v11 = v10;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D360();
  }
  else
  {
    v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    uint64 = xpc_dictionary_get_uint64(v12, "kCBMsgArgEnhTestEnable");
    v14 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v36 = xpc_dictionary_get_uint64(v14, "kCBMsgArgEnhRxTestReportPeriod");
    v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v16 = xpc_dictionary_get_uint64(v15, "kCBMsgArgEnhRxTestIs2G");
    v17 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v18 = xpc_dictionary_get_uint64(v17, "kCBMsgArgEnhRxTestModulationType");
    v19 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v20 = xpc_dictionary_get_uint64(v19, "kCBMsgArgEnhRxTestLogicalChan");
    v21 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v22 = xpc_dictionary_get_uint64(v21, "kCBMsgArgEnhRxTestPacketType");
    v23 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v24 = xpc_dictionary_get_uint64(v23, "kCBMsgArgEnhRxTestPacketLen");
    v25 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v26 = xpc_dictionary_get_uint64(v25, "kCBMsgArgEnhRxTestBand");
    v27 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v28 = xpc_dictionary_get_uint64(v27, "kCBMsgArgEnhRxTestOffset");
    v29 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    v30 = xpc_dictionary_get_uint64(v29, "kCBMsgArgEnhRxTestFrequency");
    if (uint64)
      v31 = v24;
    else
      v31 = 0;
    v32 = sub_1000438A4();
    BYTE4(v35) = 1;
    WORD1(v35) = v31;
    BYTE1(v35) = v22;
    LOBYTE(v35) = v26;
    v11 = (*(uint64_t (**)(uint64_t, int *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t (*)(void *, void *), int *, _QWORD))(*(_QWORD *)v32 + 1520))(v32, &v37, v36, v16, v28, v30, v18, v20, v35, sub_1002C379C, &v37, 0);
  }
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v34 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v11);
    xpc_release(v34);
  }
}

void sub_1005EFAC4(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  xpc_object_t v4;
  xpc_object_t v5;
  unsigned __int8 v6;
  xpc_object_t v7;
  char v8;
  xpc_object_t v9;
  unsigned __int8 v10;
  xpc_object_t v11;
  unsigned __int8 v12;
  xpc_object_t v13;
  unsigned __int8 v14;
  xpc_object_t v15;
  unsigned __int8 v16;
  xpc_object_t v17;
  char v18;
  xpc_object_t v19;
  char v20;
  xpc_object_t v21;
  uint64_t v22;
  int v23;
  xpc_object_t reply;
  void *v25;
  int v26;
  unsigned __int8 v27;
  unsigned __int8 uint64;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgEnhTxTestContHRBEnable");
  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v27 = xpc_dictionary_get_uint64(v4, "kCBMsgArgEnhTxTestContCarrierEnable");
  v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgEnhTxTestContDualCore");
  v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgEnhTxTestContAntennaSelection");
  v9 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v10 = xpc_dictionary_get_uint64(v9, "kCBMsgArgEnhTxTestContMode");
  v11 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v12 = xpc_dictionary_get_uint64(v11, "kCBMsgArgEnhTxTestContModulationType");
  v13 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v14 = xpc_dictionary_get_uint64(v13, "kCBMsgArgEnhTxTestContTxPower");
  v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v16 = xpc_dictionary_get_uint64(v15, "kCBMsgArgEnhTxTestContTxPowerTableIdx");
  v17 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v18 = xpc_dictionary_get_uint64(v17, "kCBMsgArgEnhTxTestContBand");
  v19 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v20 = xpc_dictionary_get_uint64(v19, "kCBMsgArgEnhTxTestContFrequency2G");
  v21 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v21, "kCBMsgArgEnhTxTestContFrequencyHRB");
  v22 = sub_1000438A4();
  BYTE2(v26) = v20;
  BYTE1(v26) = v18;
  LOBYTE(v26) = v8;
  v23 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))(*(_QWORD *)v22 + 1528))(v22, uint64, v27, v10, v12, v14, v16, v6, v26);
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v25 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v23);
    xpc_release(v25);
  }
}

void sub_1005EFCD8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  char uint64;
  xpc_object_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  xpc_object_t reply;
  void *v18;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLERoleIsEnable");
  v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgLERoleRoles");
  sub_1000477B8();
  if (uint64)
    v15 = sub_100221B74(v7);
  else
    v15 = sub_100221C18(v7, v8, v9, v10, v11, v12, v13, v14);
  v16 = v15;
  sub_1000478A0();
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v18 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v16);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v18);
    xpc_release(v18);
  }
}

void sub_1005EFDA8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  xpc_object_t v15;
  unsigned __int8 uint64;
  xpc_object_t v17;
  int v18;
  NSObject *v19;
  int v20;
  dispatch_time_t v21;
  NSObject *global_queue;
  xpc_object_t reply;
  void *v24;
  int v25;
  __int16 v26;
  timeval buf;
  int v28;
  __int16 v29;
  int v30;

  v26 = 0;
  v25 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v11 = sub_100023B7C(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr");
  if (v11)
  {
    LODWORD(v12) = v11;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D360();
    v12 = (int)v12;
  }
  else
  {
    v13 = sub_10019AEA4((uint64_t)&v25);
    if (v13)
    {
      v14 = (unsigned __int16 *)v13;
      v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      uint64 = xpc_dictionary_get_uint64(v15, "kCBMsgArgBTPerfTestType");
      v17 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      v18 = xpc_dictionary_get_uint64(v17, "kCBMsgArgBTPerfTestDurationInSec");
      v19 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        buf.tv_sec = __PAIR64__(*v14, 67109888);
        LOWORD(buf.tv_usec) = 1024;
        *(__darwin_suseconds_t *)((char *)&buf.tv_usec + 2) = uint64;
        *((_WORD *)&buf.tv_usec + 3) = 1024;
        v28 = 0;
        v29 = 1024;
        v30 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "_BTPerfTest handle=%x type=%d isSymmetric=%d durationInSec=%d\n", (uint8_t *)&buf, 0x1Au);
        v19 = qword_100999860;
      }
      qword_100993480 = (uint64_t)v14;
      byte_100993488 = uint64;
      dword_100993490 = v18;
      dword_100993474 = 0;
      dword_10099347C = 0;
      byte_100993494 = 0;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v20 = word_100742DB0[uint64];
        LODWORD(buf.tv_sec) = 67109120;
        HIDWORD(buf.tv_sec) = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "_BTPerfTest packetSize=%d\n", (uint8_t *)&buf, 8u);
      }
      buf.tv_sec = 0;
      *(_QWORD *)&buf.tv_usec = 0;
      gettimeofday(&buf, 0);
      *(double *)&qword_100993498 = (double)buf.tv_usec / 1000.0 + (double)(1000 * buf.tv_sec);
      v21 = dispatch_time(0, 0);
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_after_f(v21, global_queue, 0, (dispatch_function_t)sub_1005F4DD4);
    }
    else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_10070D5C4();
    }
    v12 = 0;
  }
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v24 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v12);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v24);
    xpc_release(v24);
  }
}

void sub_1005F00AC(uint64_t a1, void *a2)
{
  int v4;
  xpc_object_t reply;
  void *v6;

  byte_100993470 = 1;
  sub_1000477B8();
  v4 = sub_1001E3870(20545, (uint64_t)sub_1005F44DC);
  sub_1000478A0();
  dword_100993474 = 0;
  reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    v6 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v6);
    xpc_release(v6);
  }
}

void sub_1005F0148(uint64_t a1, void *a2)
{
  int v4;
  xpc_object_t reply;
  void *v6;
  double v7;
  double v8;
  double v9;

  sub_1000477B8();
  v4 = sub_1001E3A38(20545);
  sub_1000478A0();
  reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    v6 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v4);
    if (byte_100993488 > 6u)
    {
      v9 = 0.0;
    }
    else
    {
      if (((1 << byte_100993488) & 0x49) != 0)
      {
        v7 = (double)(1000 * dword_100993490);
        v8 = 3.75;
      }
      else
      {
        v7 = (double)(1000 * dword_100993490);
        if (((1 << byte_100993488) & 0x12) != 0)
          v8 = 1.25;
        else
          v8 = 2.5;
      }
      v9 = v7 / v8;
    }
    xpc_dictionary_set_double(v6, "kCBMsgArgBTPerfTestMaxPacket", v9);
    if (byte_100993470 == 1)
    {
      xpc_dictionary_set_uint64(v6, "kCBMsgArgBTPerfTestPacketRcvd", dword_100993474);
      dword_100993474 = 0;
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v6);
    xpc_release(v6);
  }
}

void sub_1005F0290(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  xpc_object_t reply;
  void *v14;
  int v15;
  __int16 v16;

  v16 = 0;
  v15 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v11 = sub_100023B7C(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr");
  if (v11)
  {
    v12 = v11;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D360();
  }
  else
  {
    byte_100993470 = 0;
    sub_1000477B8();
    v12 = sub_1001DD1A8((uint64_t)sub_1005F45F8, (uint64_t)sub_1005F46CC, (uint64_t)sub_1005F4814, 0x5041u, (uint64_t)&v15, (uint64_t)&unk_100742D60, &word_100993478, (uint64_t)&unk_100742D80);
    sub_1000478A0();
  }
  dword_10099347C = 0;
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v14 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v12);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v14);
    xpc_release(v14);
  }
}

void sub_1005F03BC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  xpc_object_t reply;
  void *v14;
  double v15;
  double v16;
  double v17;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v11 = sub_100023B7C(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr");
  if (v11)
  {
    v12 = v11;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D360();
  }
  else
  {
    sub_1000477B8();
    v12 = sub_1001DEB7C((unsigned __int16)word_100993478, 436);
    sub_1000478A0();
  }
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v14 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v12);
    if (byte_100993488 > 6u)
    {
      v17 = 0.0;
    }
    else
    {
      if (((1 << byte_100993488) & 0x49) != 0)
      {
        v15 = (double)(1000 * dword_100993490);
        v16 = 3.75;
      }
      else
      {
        v15 = (double)(1000 * dword_100993490);
        if (((1 << byte_100993488) & 0x12) != 0)
          v16 = 1.25;
        else
          v16 = 2.5;
      }
      v17 = v15 / v16;
    }
    xpc_dictionary_set_double(v14, "kCBMsgArgBTPerfTestMaxPacket", v17);
    if ((byte_100993470 & 1) == 0)
    {
      xpc_dictionary_set_uint64(v14, "kCBMsgArgBTPerfTestPacketSent", dword_10099347C);
      xpc_dictionary_set_double(v14, "kCBMsgArgBTPerfTestThroughput", (double)((word_100742DB0[byte_100993488] + 4) * dword_10099347C)* 8.0/ (double)(1000 * dword_100993490));
      dword_10099347C = 0;
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v14);
    xpc_release(v14);
  }
}

void sub_1005F05C0(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t v10;
  unsigned __int16 uint64;
  xpc_object_t v12;
  unsigned __int16 v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  _BOOL4 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;

  v24 = 0;
  v23 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_100023B7C(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D360();
LABEL_4:
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070DB58();
    return;
  }
  v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v10, "kCBMsgArgSniffIntervalMax");
  v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v13 = xpc_dictionary_get_uint64(v12, "kCBMsgArgSniffIntervalMin");
  v14 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v14, "kCBMsgArgSniffAttempt");
  v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v15, "kCBMsgArgSniffTimeout");
  v16 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v17 = xpc_dictionary_get_BOOL(v16, "kCBMsgArgAoSStates");
  sub_1000477B8();
  v18 = sub_100187230((uint64_t)&v23, uint64, v13);
  sub_1000478A0();
  if (!v17 || v18)
  {
    if (!v18)
      return;
    goto LABEL_4;
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093CB50);
  v21 = v23;
  v22 = v24;
  v19 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v21, 1);
  if (v19)
  {
    v20 = v19;
    if (qword_100977B18 != -1)
      dispatch_once(&qword_100977B18, &stru_10093CB70);
    sub_1002BF080(qword_100977B10, 1, v20);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070DB2C();
  }
}

void sub_1005F0808(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t v10;
  _BOOL4 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;

  v18 = 0;
  v17 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_100023B7C(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D360();
LABEL_4:
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070DBB8();
    return;
  }
  v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v11 = xpc_dictionary_get_BOOL(v10, "kCBMsgArgAoSStates");
  sub_1000477B8();
  v12 = sub_100187584((uint64_t)&v17);
  sub_1000478A0();
  if (!v11 || v12)
  {
    if (!v12)
      return;
    goto LABEL_4;
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093CB50);
  v15 = v17;
  v16 = v18;
  v13 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v15, 1);
  if (v13)
  {
    v14 = v13;
    if (qword_100977B18 != -1)
      dispatch_once(&qword_100977B18, &stru_10093CB70);
    sub_1002BF080(qword_100977B10, 0, v14);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070DB2C();
  }
}

void sub_1005F09BC(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char uint64;
  unsigned __int16 v10;
  unint64_t v11;
  uint64_t v12;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_100023B7C(value, 1, v3, v4, v5, v6, v7, v8, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070DC78();
  }
  else
  {
    uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPhyStatsEnable");
    v10 = xpc_dictionary_get_uint64(value, "kCBMsgArgPhyStatsInterval");
    v11 = (unint64_t)xpc_dictionary_get_uint64(value, "kCBMsgArgType") << 48;
    v12 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t, BOOL, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v12 + 336))(v12, uint64 != 0, v10, v11, 1)&& os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_10070DC18();
    }
  }
}

void sub_1005F0B1C(uint64_t a1, void *a2)
{
  uint64_t v3;
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *, void *);
  unsigned __int8 v25;
  unsigned __int16 uint64;
  unsigned int v27;
  int v28;
  __int16 v29;

  v3 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 2560))(v3))
  {
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    v29 = 0;
    v28 = 0;
    v24 = sub_1002C379C;
    if (sub_100023B7C(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
LABEL_4:
        sub_10070DCD8();
    }
    else
    {
      v11 = (unsigned __int16 *)sub_10019AEA4((uint64_t)&v28);
      if (v11)
      {
        v27 = *v11;
        uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffInterval");
        v25 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffMaxAge");
        v12 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffMaxRetry");
        v13 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffPacketMerge");
        v14 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffAudioDownlinkCID");
        v15 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffAudioUplinkCID");
        v16 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffPolicy");
        v17 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffTimestampPeriod");
        v18 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffCToPPacketSize");
        v19 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffPToCPacketSize");
        v20 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffMethod");
        v21 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffAdvanceTime");
        v22 = sub_1000438A4();
        BYTE2(v24) = 1;
        BYTE1(v24) = v21;
        LOBYTE(v24) = v20;
        HIWORD(v23) = v19;
        WORD2(v23) = v18;
        WORD1(v23) = v17;
        LOWORD(v23) = v16;
        if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t (*)(void *, void *), int *, _QWORD))(*(_QWORD *)v22 + 1536))(v22, v27, uint64, v25, v12, v13, v14, v15, v23, v24, &v28, 0)&& os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          goto LABEL_4;
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        sub_10070D5C4();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070DD38();
  }
}

void sub_1005F0DC4(uint64_t a1, void *a2)
{
  uint64_t v3;
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;

  v3 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 2560))(v3))
  {
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    v15 = 0;
    v14 = 0;
    if (sub_100023B7C(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
LABEL_4:
        sub_10070DD64();
    }
    else
    {
      v11 = (unsigned __int16 *)sub_10019AEA4((uint64_t)&v14);
      if (v11)
      {
        v12 = *v11;
        v13 = sub_1000438A4();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 1544))(v13, v12, 1)
          && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          goto LABEL_4;
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        sub_10070D5C4();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070DDC4();
  }
}

void sub_1005F0F18(uint64_t a1, void *a2)
{
  uint64_t v3;
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned __int16 uint64;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unsigned __int8 v16;
  unsigned __int16 v17;
  uint64_t v18;
  int v19;
  __int16 v20;

  v3 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 2560))(v3))
  {
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    v20 = 0;
    v19 = 0;
    if (sub_100023B7C(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
LABEL_4:
        sub_10070DDF0();
    }
    else
    {
      v11 = (unsigned __int16 *)sub_10019AEA4((uint64_t)&v19);
      if (v11)
      {
        v12 = *v11;
        uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffTimestampPeriod");
        v14 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffCToPPacketSize");
        v15 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffPToCPacketSize");
        v16 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffMaxAge");
        v17 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffAudioUplinkCID");
        v18 = sub_1000438A4();
        if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v18 + 1552))(v18, v12, uint64, v14, v15, v16, v17, 1)&& os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          goto LABEL_4;
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        sub_10070D5C4();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070DE50();
  }
}

void sub_1005F10F8(uint64_t a1, void *a2)
{
  uint64_t v3;
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned __int8 uint64;
  uint64_t v14;
  int v15;
  __int16 v16;

  v3 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 2560))(v3))
  {
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    v16 = 0;
    v15 = 0;
    if (sub_100023B7C(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
LABEL_4:
        sub_10070DE7C();
    }
    else
    {
      v11 = (unsigned __int16 *)sub_10019AEA4((uint64_t)&v15);
      if (v11)
      {
        v12 = *v11;
        uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffPToCMaxAge");
        v14 = sub_1000438A4();
        if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v14 + 1560))(v14, v12, uint64, 1)&& os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          goto LABEL_4;
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        sub_10070D5C4();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070DEDC();
  }
}

void sub_1005F1268(uint64_t a1, void *a2)
{
  uint64_t v3;
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned __int8 uint64;
  uint64_t v14;
  int v15;
  __int16 v16;

  v3 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 2560))(v3))
  {
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    v16 = 0;
    v15 = 0;
    if (sub_100023B7C(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
LABEL_4:
        sub_10070DF08();
    }
    else
    {
      v11 = (unsigned __int16 *)sub_10019AEA4((uint64_t)&v15);
      if (v11)
      {
        v12 = *v11;
        uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffLMPFlow");
        v14 = sub_1000438A4();
        if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v14 + 1568))(v14, v12, uint64, 1)&& os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          goto LABEL_4;
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        sub_10070D5C4();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070DF68();
  }
}

void sub_1005F13D8(uint64_t a1, void *a2)
{
  uint64_t v3;
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned __int8 uint64;
  uint64_t v14;
  int v15;
  __int16 v16;

  v3 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 2560))(v3))
  {
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    v16 = 0;
    v15 = 0;
    if (sub_100023B7C(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
LABEL_4:
        sub_10070DF94();
    }
    else
    {
      v11 = (unsigned __int16 *)sub_10019AEA4((uint64_t)&v15);
      if (v11)
      {
        v12 = *v11;
        uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffEmptyPacketReport");
        v14 = sub_1000438A4();
        if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v14 + 1576))(v14, v12, uint64, 1)&& os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          goto LABEL_4;
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        sub_10070D5C4();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070DFF4();
  }
}

void sub_1005F1548(uint64_t a1, void *a2)
{
  uint64_t v3;
  xpc_object_t value;
  unsigned __int8 uint64;
  uint64_t v6;

  v3 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 2560))(v3))
  {
    value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffControlAoS");
    v6 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 1584))(v6, uint64, 1))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070E020();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_10070E080();
  }
}

void sub_1005F160C(int a1, xpc_object_t xdict)
{
  xpc_object_t v2;
  xpc_object_t value;
  _BOOL8 v4;
  xpc_object_t v5;
  unsigned __int16 uint64;
  xpc_object_t v7;
  unsigned __int16 v8;
  xpc_object_t v9;
  _BOOL8 v10;
  xpc_object_t v11;
  _BOOL8 v12;
  xpc_object_t v13;
  _BOOL8 v14;
  xpc_object_t v15;
  _BOOL8 v16;
  xpc_object_t v17;
  BOOL v18;
  xpc_object_t v19;
  uint64_t v20;
  __int16 v21;

  v2 = xdict;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTSCPageScanEnable") != 0;
  v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTSCPageScanInterval");
  v7 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgBTSCPageScanWindow");
  v9 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v10 = xpc_dictionary_get_uint64(v9, "kCBMsgArgBTSCPageScanInterlaced") != 0;
  v11 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v12 = xpc_dictionary_get_uint64(v11, "kCBMsgArgBTSCPageScanElnaMode") != 0;
  v13 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v14 = xpc_dictionary_get_uint64(v13, "kCBMsgArgBTSCPageScanUseAuxScanParams") != 0;
  v15 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v16 = xpc_dictionary_get_uint64(v15, "kCBMsgArgBTSCPageScanEnableAuxScan") != 0;
  v17 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v18 = xpc_dictionary_get_uint64(v17, "kCBMsgArgBTSCPageScanPreemptAuxScan") != 0;
  v19 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v19, "kCBMsgArgBTSCPageScanAuxScanDurationInMs");
  v20 = sub_1000438A4();
  HIBYTE(v21) = (_BYTE)v2;
  LOBYTE(v21) = v18;
  if ((*(unsigned int (**)(uint64_t, _BOOL8, _QWORD, _QWORD, _BOOL8, _BOOL8, _BOOL8, _BOOL8, __int16))(*(_QWORD *)v20 + 3416))(v20, v4, uint64, v8, v10, v12, v14, v16, v21))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E0AC();
  }
}

void sub_1005F17D4(int a1, xpc_object_t xdict)
{
  xpc_object_t v2;
  xpc_object_t value;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  unsigned int v39;
  xpc_object_t v40;
  unsigned int v41;
  xpc_object_t v42;
  unsigned int v43;
  xpc_object_t v44;
  unsigned int v45;
  xpc_object_t v46;
  unsigned int v47;
  xpc_object_t v48;
  unsigned int v49;
  xpc_object_t v50;
  unsigned int v51;
  xpc_object_t v52;
  unsigned int v53;
  xpc_object_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  char v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  BOOL v82;
  BOOL v83;
  char v84;
  BOOL v85;
  BOOL v86;
  BOOL v87;
  _BOOL4 v88;
  _BOOL4 v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 uint64;

  v2 = xdict;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgQoSsessionID");
  v4 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v93 = xpc_dictionary_get_uint64(v4, "kCBMsgArgQoSalarmL1Priority");
  v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v92 = xpc_dictionary_get_uint64(v5, "kCBMsgArgQoSalarmL2Priority");
  v6 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v91 = xpc_dictionary_get_uint64(v6, "kCBMsgArgQoSalarmL3Priority");
  v7 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v90 = xpc_dictionary_get_uint64(v7, "kCBMsgArgQoSalarmL4Priority");
  v8 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v89 = xpc_dictionary_get_uint64(v8, "kCBMsgArgQoSuseRxSkippedPercentage") != 0;
  v9 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v88 = xpc_dictionary_get_uint64(v9, "kCBMsgArgQoSuseRxPreemptedCount") != 0;
  v10 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v87 = xpc_dictionary_get_uint64(v10, "kCBMsgArgQoSuseRxCslPreemptedCount ") != 0;
  v11 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v86 = xpc_dictionary_get_uint64(v11, "kCBMsgArgQoSraisePriorityIfRxHeaderIsReceived") != 0;
  v12 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v85 = xpc_dictionary_get_uint64(v12, "kCBMsgArgQoSraisePriorityIfRxAckHeaderReceived") != 0;
  v13 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v84 = xpc_dictionary_get_uint64(v13, "kCBMsgArgQoSpriorityToRaiseForScheduledReception");
  v14 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v83 = xpc_dictionary_get_uint64(v14, "kCBMsgArgQoSuseRxCslCountInHighPriority") != 0;
  v15 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v82 = xpc_dictionary_get_uint64(v15, "kCBMsgArgQoSuseTxCslCountInHighPriority") != 0;
  v16 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v81 = xpc_dictionary_get_uint64(v16, "kCBMsgArgQoSuseTxPreemptedCount") != 0;
  v17 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v80 = xpc_dictionary_get_uint64(v17, "kCBMsgArgQoSuseTxCslPreemptedCount") != 0;
  v18 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v79 = xpc_dictionary_get_uint64(v18, "kCBMsgArgQoSuseTxDelay") != 0;
  v19 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v78 = xpc_dictionary_get_uint64(v19, "kCBMsgArgQoSrxSkippedPercentageL0");
  v20 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v77 = xpc_dictionary_get_uint64(v20, "kCBMsgArgQoSrxSkippedPercentageL1");
  v21 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v76 = xpc_dictionary_get_uint64(v21, "kCBMsgArgQoSrxSkippedPercentageL2");
  v22 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v75 = xpc_dictionary_get_uint64(v22, "kCBMsgArgQoSrxSkippedPercentageL3");
  v23 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v74 = xpc_dictionary_get_uint64(v23, "kCBMsgArgQoSrxPreemptedCountL0");
  v24 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v73 = xpc_dictionary_get_uint64(v24, "kCBMsgArgQoSrxPreemptedCountL1");
  v25 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v72 = xpc_dictionary_get_uint64(v25, "kCBMsgArgQoSrxPreemptedCountL2");
  v26 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v71 = xpc_dictionary_get_uint64(v26, "kCBMsgArgQoSrxPreemptedCountL3");
  v27 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v70 = xpc_dictionary_get_uint64(v27, "kCBMsgArgQoSrxCslCountInHighPriority");
  v28 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v69 = xpc_dictionary_get_uint64(v28, "kCBMsgArgQoSrxCslPreemptedCountL0");
  v29 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v68 = xpc_dictionary_get_uint64(v29, "kCBMsgArgQoSrxCslPreemptedCountL1");
  v30 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v67 = xpc_dictionary_get_uint64(v30, "kCBMsgArgQoSrxCslPreemptedCountL2");
  v31 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v66 = xpc_dictionary_get_uint64(v31, "kCBMsgArgQoSrxCslPreemptedCountL3");
  v32 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v65 = xpc_dictionary_get_uint64(v32, "kCBMsgArgQoStxDelayL0");
  v33 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v64 = xpc_dictionary_get_uint64(v33, "kCBMsgArgQoStxDelayL1");
  v34 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v63 = xpc_dictionary_get_uint64(v34, "kCBMsgArgQoStxDelayL2");
  v35 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v62 = xpc_dictionary_get_uint64(v35, "kCBMsgArgQoStxDelayL3");
  v36 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v61 = xpc_dictionary_get_uint64(v36, "kCBMsgArgQoStxPreemptedCountL0");
  v37 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v60 = xpc_dictionary_get_uint64(v37, "kCBMsgArgQoStxPreemptedCountL1");
  v38 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v39 = xpc_dictionary_get_uint64(v38, "kCBMsgArgQoStxPreemptedCountL2");
  v40 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v41 = xpc_dictionary_get_uint64(v40, "kCBMsgArgQoStxPreemptedCountL3");
  v42 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v43 = xpc_dictionary_get_uint64(v42, "kCBMsgArgQoStxCslCountInHighPriority");
  v44 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v45 = xpc_dictionary_get_uint64(v44, "kCBMsgArgQoStxCslPreemptedCountL0");
  v46 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v47 = xpc_dictionary_get_uint64(v46, "kCBMsgArgQoStxCslPreemptedCountL1");
  v48 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v49 = xpc_dictionary_get_uint64(v48, "kCBMsgArgQoStxCslPreemptedCountL2");
  v50 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v51 = xpc_dictionary_get_uint64(v50, "kCBMsgArgQoStxCslPreemptedCountL3");
  v52 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v53 = xpc_dictionary_get_uint64(v52, "kCBMsgArgQoStxDurationInHighPriority");
  v54 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v54, "kCBMsgArgQoSCslPriority");
  v55 = sub_1000438A4();
  v59 = (char)v2;
  v58 = v78;
  v57 = v79;
  HIBYTE(v56) = v80;
  BYTE6(v56) = v81;
  BYTE5(v56) = v82;
  BYTE4(v56) = v83;
  BYTE3(v56) = v84;
  BYTE2(v56) = v85;
  BYTE1(v56) = v86;
  LOBYTE(v56) = v87;
  if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _BOOL4, _BOOL4, uint64_t, BOOL, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, char))(*(_QWORD *)v55 + 3432))(v55, uint64, v93, v92, v91, v90, v89, v88, v56, v57, __PAIR64__(v76, v77), __PAIR64__(v74, v75), __PAIR64__(v72, v73), __PAIR64__(v70, v71), __PAIR64__(v68, v69), __PAIR64__(v66, v67), __PAIR64__(v64, v65), __PAIR64__(v62, v63), __PAIR64__(v60, v61),
         __PAIR64__(v41, v39),
         __PAIR64__(v45, v43),
         __PAIR64__(v49, v47),
         __PAIR64__(v53, v51),
         v59))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E10C();
  }
}

void sub_1005F1E9C(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  unsigned __int8 uint64;
  uint64_t v4;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgQoSsessionID");
  v4 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 3440))(v4, uint64))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E10C();
  }
}

void sub_1005F1F1C(uint64_t a1, void *a2)
{
  uint64_t v4;
  int v5;
  xpc_object_t reply;
  void *v7;
  uint64_t v8;
  _OWORD v9[5];

  memset(v9, 0, sizeof(v9));
  v4 = sub_1000438A4();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v4 + 2952))(v4, 1, v9);
  reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    v7 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v5);
    if (v5)
    {
      v8 = 0;
    }
    else
    {
      v8 = 80;
      xpc_dictionary_set_data(v7, "kCBMsgArgSPMICoexBufferAddr", v9, 0x50uLL);
    }
    xpc_dictionary_set_uint64(v7, "kCBMsgArgSPMICoexBufferSize", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v7);
    xpc_release(v7);
  }
}

void sub_1005F1FEC(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v4;
  _OWORD v5[5];

  memset(v5, 0, sizeof(v5));
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSPMIPeripheralID");
  v4 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(*(_QWORD *)v4 + 2960))(v4, uint64, 1, v5))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E16C();
  }
}

void sub_1005F208C(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  xpc_object_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v8 = 0x7766554433221100;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSPMIPeripheralID");
  v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v7 = (16 * xpc_dictionary_get_uint64(v5, "kCBMsgArgSPMICoexMsgPriority")) | 8;
  v6 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *, uint64_t *, uint64_t))(*(_QWORD *)v6 + 2968))(v6, uint64, &v7, &v8, 1))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E1CC();
  }
}

void sub_1005F2198(int a1, xpc_object_t xdict)
{
  xpc_object_t v2;
  xpc_object_t value;
  unsigned __int8 uint64;
  xpc_object_t v5;
  unsigned __int8 v6;
  xpc_object_t v7;
  uint64_t v8;

  v2 = xdict;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSPMICoexTxType");
  v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgSPMICoexTxID");
  v7 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v7, "kCBMsgArgSPMICoexTxControl");
  v8 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v8 + 2976))(v8, uint64, v6, v2, 1))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E22C();
  }
}

void sub_1005F226C(int a1, xpc_object_t xdict)
{
  xpc_object_t v2;
  xpc_object_t value;
  unsigned __int8 uint64;
  xpc_object_t v5;
  uint64_t v6;

  v2 = xdict;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSPMICoexType53EnabledBitmask");
  v5 = xpc_dictionary_get_value(v2, "kCBMsgArgs");
  LOBYTE(v2) = xpc_dictionary_get_uint64(v5, "kCBMsgArgSPMICoexType53Interval");
  v6 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v6 + 2984))(v6, uint64, v2, 1))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E28C();
  }
}

void sub_1005F2320(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  _BYTE v12[8];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v12[0] = xpc_dictionary_get_uint64(value, "kCBMsgArgSPMICoexType60ID2G");
  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v12[1] = xpc_dictionary_get_uint64(v4, "kCBMsgArgSPMICoexType60IDHRB1");
  v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v12[2] = xpc_dictionary_get_uint64(v5, "kCBMsgArgSPMICoexType60IDHRB3");
  v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v12[3] = xpc_dictionary_get_uint64(v6, "kCBMsgArgSPMICoexType60IDHRB4");
  v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v12[4] = xpc_dictionary_get_uint64(v7, "kCBMsgArgSPMICoexType60IDHRB5A");
  v8 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v12[5] = xpc_dictionary_get_uint64(v8, "kCBMsgArgSPMICoexType60IDHRB5B");
  v9 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v12[6] = xpc_dictionary_get_uint64(v9, "kCBMsgArgSPMICoexType60IDHRB5C");
  v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v12[7] = xpc_dictionary_get_uint64(v10, "kCBMsgArgSPMICoexType60IDHRB5D");
  v11 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v11 + 2992))(v11, v12, 1))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E2EC();
  }
}

void sub_1005F2478(uint64_t a1, void *a2)
{
  uint64_t v4;
  xpc_object_t value;
  uint64_t uint64;
  xpc_object_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  int v10;
  xpc_object_t reply;
  void *v12;
  _OWORD v13[16];

  memset(v13, 0, 251);
  v4 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4))
  {
    if ((*(_DWORD *)(sub_1000438A4() + 712) - 22) > 0x7B9)
    {
      LODWORD(uint64) = 0;
      v8 = 0;
      v10 = 2;
    }
    else
    {
      value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
      uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgReadControllerRamAddr");
      v7 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
      v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgReadControllerRamSize");
      v9 = sub_1000438A4();
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(*(_QWORD *)v9 + 3472))(v9, uint64, v8, v13);
      if (v10 && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070E34C();
    }
  }
  else
  {
    LODWORD(uint64) = 0;
    v8 = 0;
    v10 = 1;
  }
  reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v10);
    if (!v10)
    {
      xpc_dictionary_set_uint64(v12, "kCBMsgArgReadControllerRamAddr", uint64);
      xpc_dictionary_set_uint64(v12, "kCBMsgArgReadControllerRamSize", v8);
      xpc_dictionary_set_data(v12, "kCBMsgArgReadControllerRamData", v13, v8);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

void sub_1005F2660(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  unsigned __int8 uint64;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgMinEncryptionKeySize");
  sub_1000477B8();
  v10 = sub_10004C9BC(133, 0, v4, v5, v6, v7, v8, v9, uint64);
  sub_1000478A0();
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E3AC();
  }
}

void sub_1005F26F0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  char uint64;
  xpc_object_t v6;
  char v7;
  xpc_object_t v8;
  char v9;
  xpc_object_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t reply;
  void *v15;
  _BYTE v16[5];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgCalSetTxPowerMode");
  v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgTxFEConfigAntenna");
  v8 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v9 = xpc_dictionary_get_uint64(v8, "kCBMsgArgTxFEConfigCountryCode");
  v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v11 = xpc_dictionary_get_uint64(v10, "kCBMsgArgTxFEConfigPowerCap");
  if (uint64 == 80)
  {
    v16[0] = uint64;
    v16[1] = 0;
    v16[2] = v7;
    v16[3] = v9;
    v16[4] = v11;
    v12 = sub_1000438A4();
    LODWORD(v13) = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v12 + 512))(v12, 5, v16);
    if ((_DWORD)v13 && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E40C();
    v13 = (int)v13;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E46C();
    v13 = 1;
  }
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v15 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v15);
    xpc_release(v15);
  }
}

void sub_1005F2878(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  xpc_object_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  NSObject *v20;
  uint64_t v21;
  int v22;
  xpc_object_t v23;
  unsigned __int8 v24;
  xpc_object_t v25;
  char int64;
  xpc_object_t v27;
  char v28;
  xpc_object_t v29;
  unsigned __int8 v30;
  NSObject *v31;
  uint64_t v32;
  xpc_object_t reply;
  uint64_t v34;
  uint8_t v35[4];
  int v36;
  _BYTE v37[6];
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  uint8_t buf[4];
  int v45;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTAddr");
  v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgAction");
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093CB50);
  v8 = sub_10006D488((uint64_t)off_1009778E0, uint64, 1);
  if (v8)
  {
    v9 = v8;
    if (v7 == 3)
    {
      *(_DWORD *)v35 = 393218;
      v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      LOBYTE(v36) = xpc_dictionary_get_uint64(v10, "kCBMsgArgBT2GEnable") & 7;
      v11 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      BYTE1(v36) = xpc_dictionary_get_int64(v11, "kCBMsgArgBT2GSigRssiThreshold");
      v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      BYTE2(v36) = xpc_dictionary_get_int64(v12, "kCBMsgArgBT2GiPABFRssiThreshold");
      v13 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      HIBYTE(v36) = xpc_dictionary_get_int64(v13, "kCBMsgArgBT2GePABFRssiThreshold");
      v14 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      v37[0] = xpc_dictionary_get_int64(v14, "kCBMsgArgBT2GBFGainThreshold");
      *(_WORD *)&v37[1] = 1537;
      v37[3] = 0;
      v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      v37[4] = xpc_dictionary_get_uint64(v15, "kCBMsgArgHRBEnable") & 7;
      v16 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      v37[5] = xpc_dictionary_get_int64(v16, "kCBMsgArgHRBSigRssiThreshold");
      v17 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      LOBYTE(v38) = xpc_dictionary_get_int64(v17, "kCBMsgArgHRBiPABFRssiThreshold");
      v18 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      HIBYTE(v38) = xpc_dictionary_get_int64(v18, "kCBMsgArgHRBePABFRssiThreshold");
      v19 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      LOBYTE(v39) = xpc_dictionary_get_int64(v19, "kCBMsgArgHRBBFGainThreshold");
      v20 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        v45 = 3;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Action:%d Multiband Setting\n", buf, 8u);
      }
      v21 = sub_1000438A4();
      v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v21 + 152))(v21, v9, 17, v35);
    }
    else
    {
      v34 = a1;
      v23 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      v24 = xpc_dictionary_get_uint64(v23, "kCBMsgArgPolicy");
      v25 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      int64 = xpc_dictionary_get_int64(v25, "kCBMsgArgiPABFThreshold");
      v27 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      v28 = xpc_dictionary_get_int64(v27, "kCBMsgArgePABFThreshold");
      v29 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      v30 = xpc_dictionary_get_uint64(v29, "kCBMsgArgeBFGainThreshold");
      v31 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v35 = 67110144;
        v36 = v7;
        *(_WORD *)v37 = 1024;
        *(_DWORD *)&v37[2] = v24;
        v38 = 1024;
        v39 = int64;
        v40 = 1024;
        v41 = v28;
        v42 = 1024;
        v43 = v30;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Action:%d Policy:%d iPABFThreshold:%d ePABFThreshold:%d BFGainThreshold:%d\n", v35, 0x20u);
      }
      v32 = sub_1000438A4();
      v22 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v32 + 136))(v32, v7, v9, v24, int64, (char)v30, v28);
      a1 = v34;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070DB2C();
    v22 = 1;
  }
  reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v22);
  xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_1005F2CC8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  xpc_object_t v6;
  unsigned __int8 v7;
  xpc_object_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  xpc_object_t reply;
  _DWORD v16[2];
  __int16 v17;
  int v18;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTAddr");
  v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgAction");
  v8 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v9 = xpc_dictionary_get_uint64(v8, "kCBMsgArgPolicy");
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093CB50);
  v10 = sub_10006D488((uint64_t)off_1009778E0, uint64, 1);
  if (v10)
  {
    v11 = v10;
    v12 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
    {
      v16[0] = 67109376;
      v16[1] = v7;
      v17 = 1024;
      v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "MRC logging: Action:%d Policy:%d \n", (uint8_t *)v16, 0xEu);
    }
    v13 = sub_1000438A4();
    v14 = (*(int (**)(uint64_t, _QWORD, uint64_t, BOOL))(*(_QWORD *)v13 + 160))(v13, v7, v11, v9 != 0);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070DB2C();
    v14 = 1;
  }
  reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v14);
  xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_1005F2EC8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  unsigned __int16 uint64;
  xpc_object_t v6;
  unsigned __int8 v7;
  xpc_object_t v8;
  unsigned __int8 v9;
  xpc_object_t v10;
  unsigned __int8 v11;
  xpc_object_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  xpc_object_t reply;
  _DWORD v18[2];
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnHandle");
  v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgBTAntennaAction");
  v8 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v9 = xpc_dictionary_get_uint64(v8, "kCBMsgArgBTAntennaCfg");
  v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v11 = xpc_dictionary_get_uint64(v10, "kCBMsgArgBTAntennaCfgParam1");
  v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v13 = xpc_dictionary_get_uint64(v12, "kCBMsgArgBTAntennaCfgParam2");
  v14 = sub_1000438A4();
  v15 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v14 + 912))(v14, uint64, v7, v9, v11, v13, 0, 0);
  if (v15)
  {
    v16 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      v18[0] = 67110144;
      v18[1] = uint64;
      v19 = 1024;
      v20 = v7;
      v21 = 1024;
      v22 = v9;
      v23 = 1024;
      v24 = v11;
      v25 = 1024;
      v26 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to set BT antenna config; Handle: %d, Action: %d, Config: %d, Param1: %d, Param2: %d",
        (uint8_t *)v18,
        0x20u);
    }
  }
  reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v15);
  xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_1005F30C4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  const char *string;
  int v6;
  void *v7;
  int v8;
  xpc_object_t reply;
  off_t v10;
  int64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  BOOL v15;
  NSObject *v16;
  off_t v17;
  void *v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  char *v24;
  __int16 v25;
  int v26;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  string = xpc_dictionary_get_string(value, "kCBMsgArgLoadMSFFilePath");
  v17 = 0;
  v18 = 0;
  v6 = sub_1005F49DC((uint64_t)string, string, &v18, &v17);
  v7 = v18;
  if (v6)
  {
    v8 = 1;
  }
  else
  {
    v10 = v17;
    if (v17 < 1)
    {
      v8 = 0;
    }
    else
    {
      v11 = v17 / 0xE6uLL;
      v12 = (char *)v18;
      v13 = (char *)v18;
      while (1)
      {
        v14 = sub_1000438A4();
        v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, char *, _QWORD, uint64_t))(*(_QWORD *)v14 + 3608))(v14, 3, (unsigned __int16)v11, v13, (unsigned __int16)v10, 1);
        if (v8)
          break;
        v15 = v11-- < 1;
        if (!v15)
        {
          v13 += 230;
          v12 += 230;
          v15 = v10 <= 230;
          v10 -= 230;
          if (!v15)
            continue;
        }
        goto LABEL_3;
      }
      v16 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109888;
        v20 = 3;
        v21 = 1024;
        v22 = (unsigned __int16)v11;
        v23 = 2048;
        v24 = v12;
        v25 = 1024;
        v26 = (unsigned __int16)v10;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Error Downloading MSF File: transferType = %d, chunkLeft = %d,  payID = %p, dataLen = %d\n", buf, 0x1Eu);
        v16 = qword_100999860;
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        sub_10070E4CC();
    }
  }
LABEL_3:
  if (v7)
    free(v7);
  reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v8);
  xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_1005F32D8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  const char *string;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  xpc_object_t reply;
  off_t v12;
  void *v13;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  string = xpc_dictionary_get_string(value, "kCBMsgArgLoadPwrRegulatoryFilePath");
  v12 = 0;
  v13 = 0;
  if (sub_1005F49DC((uint64_t)string, string, &v13, &v12))
  {
    v6 = 1;
    goto LABEL_12;
  }
  v7 = v12;
  if (v12 != 250 && v12 != 210)
  {
    v10 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E4F8(v7, v10);
    goto LABEL_11;
  }
  v8 = sub_1000438A4();
  v9 = (*(uint64_t (**)(uint64_t, void *, _QWORD, uint64_t))(*(_QWORD *)v8 + 3616))(v8, v13, v7, 1);
  if (!v9)
  {
LABEL_11:
    v6 = 0;
    goto LABEL_12;
  }
  LODWORD(v6) = v9;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_10070E588();
  v6 = (int)v6;
LABEL_12:
  if (v13)
    free(v13);
  reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v6);
  xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_1005F341C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  const char *string;
  int v6;
  void *v7;
  int v8;
  xpc_object_t reply;
  off_t v10;
  int64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  BOOL v15;
  NSObject *v16;
  off_t v17;
  void *v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  char *v22;
  __int16 v23;
  int v24;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  string = xpc_dictionary_get_string(value, "kCBMsgArgLoadPwrRegulatoryFilePathA3");
  v17 = 0;
  v18 = 0;
  v6 = sub_1005F49DC((uint64_t)string, string, &v18, &v17);
  v7 = v18;
  if (v6)
  {
    v8 = 1;
  }
  else
  {
    v10 = v17;
    if (v17 < 1)
    {
      v8 = 0;
    }
    else
    {
      v11 = v17 / 0xCFuLL;
      v12 = (char *)v18;
      v13 = (char *)v18;
      while (1)
      {
        v14 = sub_1000438A4();
        v8 = (*(uint64_t (**)(uint64_t, _QWORD, char *, _QWORD, uint64_t))(*(_QWORD *)v14 + 3624))(v14, (unsigned __int16)v11, v13, (unsigned __int16)v10, 1);
        if (v8)
          break;
        v15 = v11-- < 1;
        if (!v15)
        {
          v13 += 207;
          v12 += 207;
          v15 = v10 <= 207;
          v10 -= 207;
          if (!v15)
            continue;
        }
        goto LABEL_3;
      }
      v16 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109632;
        v20 = (unsigned __int16)v11;
        v21 = 2048;
        v22 = v12;
        v23 = 1024;
        v24 = (unsigned __int16)v10;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Error Downloading Power Regulatory A3 File: chunkLeft = %d,  payID = %p, dataLen = %d\n", buf, 0x18u);
        v16 = qword_100999860;
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        sub_10070E4CC();
    }
  }
LABEL_3:
  if (v7)
    free(v7);
  reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v8);
  xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_1005F3628(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  xpc_object_t v6;
  unsigned __int8 v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t reply;
  _DWORD v13[2];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTAddr");
  v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgTriggerULLM");
  v8 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v13[0] = 67109120;
    v13[1] = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BTTest Command Low Latency Game received: %d\n", (uint8_t *)v13, 8u);
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093CB50);
  v9 = sub_10006D488((uint64_t)off_1009778E0, uint64, 1);
  if (!v9)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070DB2C();
    goto LABEL_15;
  }
  v10 = v9;
  if (!sub_10043FC5C(v9))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E5B4();
    goto LABEL_15;
  }
  if (!_os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming"))
  {
LABEL_15:
    v11 = 1;
    goto LABEL_16;
  }
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10093CB90);
  sub_100527D80((uint64_t)off_100977A90, v7 != 0, v10);
  v11 = 0;
LABEL_16:
  reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v11);
  xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_1005F3848(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  xpc_object_t v12;
  int uint64;
  int v14;
  xpc_object_t reply;
  int v16;
  __int16 v17;

  v17 = 0;
  v16 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_100023B7C(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E5E0();
    v11 = 1;
  }
  else
  {
    v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    uint64 = xpc_dictionary_get_uint64(v12, "kCBMsgArgBudswapCmd");
    if (uint64 == 2)
    {
      sub_1000477B8();
      v14 = sub_100112B30((uint64_t)&v16);
    }
    else
    {
      if (uint64 != 1)
      {
        v11 = 0;
        goto LABEL_11;
      }
      sub_1000477B8();
      v14 = sub_1001124FC((unsigned __int8 *)&v16);
    }
    v11 = v14;
    sub_1000478A0();
  }
LABEL_11:
  reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v11);
  xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_1005F3978(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 uint64;
  const void *data;
  NSObject *v9;
  uint64_t v10;
  int v11;
  xpc_object_t reply;
  void *__p[2];
  char v14;
  char v15;
  size_t length;
  uint8_t buf[32];
  __int128 v18;
  __int128 v19;
  _OWORD bytes[16];
  size_t v21;

  length = 0;
  LOWORD(v21) = 0;
  memset(bytes, 0, sizeof(bytes));
  v15 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5))
  {
    LOWORD(v21) = 0;
    v6 = sub_100027F68();
    sub_100091AE8(buf, "Device");
    sub_100091AE8(__p, "RAWHCICMD");
    (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0)
      operator delete(__p[0]);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    if (v15)
    {
      uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgOpcode");
      data = xpc_dictionary_get_data(value, "kCBMsgArgData", &length);
      v9 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "handleHciCmdMsg";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = uint64;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Warning: %s opcode=%d", buf, 0x12u);
      }
      v10 = sub_1000438A4();
      v11 = (*(uint64_t (**)(uint64_t, _QWORD, const void *, _QWORD, void (*)(int, const void *, unsigned int, void *), _OWORD *))(*(_QWORD *)v10 + 3600))(v10, uint64, data, (unsigned __int16)length, sub_1005F4D1C, bytes);
      if (!v11)
      {
        v18 = 0u;
        v19 = 0u;
        memset(buf, 0, sizeof(buf));
        sub_1000160D0(buf);
        __p[0] = 0;
        __p[1] = 0;
        sub_10003415C((uint64_t)__p, (uint64_t)buf);
        if (sub_100043714(&stru_100999A50, (pthread_mutex_t **)__p, 0x7D0uLL))
          v11 = 0;
        else
          v11 = 316;
        sub_100034234((uint64_t)__p);
        sub_100069BDC(buf);
      }
    }
    else
    {
      v11 = 12;
    }
  }
  else
  {
    v11 = 11;
  }
  reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v11);
  xpc_dictionary_set_data(reply, "kCBMsgArgData", bytes, (unsigned __int16)v21);
  xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_1005F3C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_100034234((uint64_t)&__p);
  sub_100069BDC(&a18);
  _Unwind_Resume(a1);
}

void sub_1005F3C78(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  unsigned __int8 uint64;
  unsigned __int8 v4;
  char int64;
  unsigned __int8 v6;
  uint64_t v7;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLEAdvTxPowerIncreaseAction");
  v4 = xpc_dictionary_get_uint64(value, "kCBMsgArgLEAdvTxPowerIncreaseHandle");
  int64 = xpc_dictionary_get_int64(value, "kCBMsgArgLEAdvTxPowerIncreaseTxDesiredPower");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgLEAdvTxPowerIncreaseePAEnable");
  LOBYTE(value) = xpc_dictionary_get_uint64(value, "kCBMsgArgLEAdvTxPowerIncreaseSARConfiguration");
  v7 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v7 + 1896))(v7, uint64, v4, int64, v6, value))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E60C();
  }
}

void sub_1005F3D6C(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  uint8_t buf[8];
  int v13;
  __int16 v14;

  v14 = 0;
  v13 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_100023B7C(value, 1, v3, v4, v5, v6, v7, v8, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070D360();
  }
  else
  {
    v9 = sub_1000438A4();
    v10 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v9 + 3632))(v9, &v13);
    v11 = qword_100999860;
    if (v10)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_10070E66C();
    }
    else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "BD Address was written successfully", buf, 2u);
    }
  }
}

void sub_1005F3E74(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  char uint64;
  uint64_t v4;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgCrcErredPduReportEnable");
  v4 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 1728))(v4, uint64 != 0))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E6CC();
  }
}

void sub_1005F3EF8(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  char uint64;
  uint64_t v4;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAppleExtendedAdvReportEnable");
  v4 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, BOOL, _QWORD))(*(_QWORD *)v4 + 1720))(v4, uint64 != 0, 0))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E72C();
  }
}

void sub_1005F3F80(unsigned int a1, unsigned __int16 *a2, int a3)
{
  int64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v12;
  xpc_object_t reply;
  void *v14;

  if (a2)
    v5 = *a2;
  else
    v5 = 0;
  v6 = qword_100999A18;
  if (!qword_100999A18)
    goto LABEL_14;
  v7 = &qword_100999A18;
  do
  {
    v8 = *(_DWORD *)(v6 + 32);
    v9 = v8 < 13;
    if (v8 >= 13)
      v10 = (uint64_t *)v6;
    else
      v10 = (uint64_t *)(v6 + 8);
    if (!v9)
      v7 = (uint64_t *)v6;
    v6 = *v10;
  }
  while (*v10);
  if (v7 == &qword_100999A18 || *((int *)v7 + 8) >= 14)
LABEL_14:
    v7 = &qword_100999A18;
  remote_connection = xpc_dictionary_get_remote_connection((xpc_object_t)v7[5]);
  if (remote_connection)
  {
    v12 = remote_connection;
    reply = xpc_dictionary_create_reply((xpc_object_t)v7[5]);
    if (reply)
    {
      v14 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", a1);
      xpc_dictionary_set_int64(v14, "kCBMsgArgConnHandle", v5);
      xpc_dictionary_set_int64(v14, "kCBMsgArgTransmitPowerLevel", a3);
      xpc_connection_send_message(v12, v14);
      xpc_release(v14);
    }
    xpc_release((xpc_object_t)v7[5]);
  }
  sub_1000040CC((uint64_t **)&qword_100999A10, v7);
  operator delete(v7);
}

void sub_1005F4098(unsigned int a1)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v8;
  xpc_object_t reply;
  void *v10;

  v2 = qword_100999A18;
  if (!qword_100999A18)
    goto LABEL_11;
  v3 = &qword_100999A18;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < 21;
    if (v4 >= 21)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = (uint64_t *)v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == &qword_100999A18 || *((int *)v3 + 8) >= 22)
LABEL_11:
    v3 = &qword_100999A18;
  remote_connection = xpc_dictionary_get_remote_connection((xpc_object_t)v3[5]);
  if (remote_connection)
  {
    v8 = remote_connection;
    reply = xpc_dictionary_create_reply((xpc_object_t)v3[5]);
    if (reply)
    {
      v10 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", a1);
      xpc_connection_send_message(v8, v10);
      xpc_release(v10);
    }
  }
  xpc_release((xpc_object_t)v3[5]);
  sub_1000040CC((uint64_t **)&qword_100999A10, v3);
  operator delete(v3);
}

void sub_1005F416C(unsigned int a1)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v8;
  xpc_object_t reply;
  void *v10;

  v2 = qword_100999A18;
  if (!qword_100999A18)
    goto LABEL_11;
  v3 = &qword_100999A18;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < 22;
    if (v4 >= 22)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = (uint64_t *)v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == &qword_100999A18 || *((int *)v3 + 8) >= 23)
LABEL_11:
    v3 = &qword_100999A18;
  remote_connection = xpc_dictionary_get_remote_connection((xpc_object_t)v3[5]);
  if (remote_connection)
  {
    v8 = remote_connection;
    reply = xpc_dictionary_create_reply((xpc_object_t)v3[5]);
    if (reply)
    {
      v10 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", a1);
      xpc_connection_send_message(v8, v10);
      xpc_release(v10);
    }
  }
  xpc_release((xpc_object_t)v3[5]);
  sub_1000040CC((uint64_t **)&qword_100999A10, v3);
  operator delete(v3);
}

void sub_1005F4240(unsigned int a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v10;
  xpc_object_t reply;
  void *v12;

  v4 = qword_100999A18;
  if (!qword_100999A18)
    goto LABEL_11;
  v5 = &qword_100999A18;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < 23;
    if (v6 >= 23)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = (uint64_t *)v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 == &qword_100999A18 || *((int *)v5 + 8) >= 24)
LABEL_11:
    v5 = &qword_100999A18;
  remote_connection = xpc_dictionary_get_remote_connection((xpc_object_t)v5[5]);
  if (remote_connection)
  {
    v10 = remote_connection;
    reply = xpc_dictionary_create_reply((xpc_object_t)v5[5]);
    if (reply)
    {
      v12 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", a1);
      xpc_dictionary_set_int64(v12, "kCBMsgArgNumberOfPackets", a2);
      xpc_connection_send_message(v10, v12);
      xpc_release(v12);
    }
  }
  xpc_release((xpc_object_t)v5[5]);
  sub_1000040CC((uint64_t **)&qword_100999A10, v5);
  operator delete(v5);
}

void sub_1005F4334(unsigned int a1)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v8;
  xpc_object_t reply;
  void *v10;

  v2 = qword_100999A18;
  if (!qword_100999A18)
    goto LABEL_11;
  v3 = &qword_100999A18;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < 24;
    if (v4 >= 24)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = (uint64_t *)v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == &qword_100999A18 || *((int *)v3 + 8) >= 25)
LABEL_11:
    v3 = &qword_100999A18;
  remote_connection = xpc_dictionary_get_remote_connection((xpc_object_t)v3[5]);
  if (remote_connection)
  {
    v8 = remote_connection;
    reply = xpc_dictionary_create_reply((xpc_object_t)v3[5]);
    if (reply)
    {
      v10 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", a1);
      xpc_connection_send_message(v8, v10);
      xpc_release(v10);
    }
  }
  xpc_release((xpc_object_t)v3[5]);
  sub_1000040CC((uint64_t **)&qword_100999A10, v3);
  operator delete(v3);
}

void sub_1005F4408(unsigned int a1)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  xpc_connection_t remote_connection;
  _xpc_connection_s *v8;
  xpc_object_t reply;
  void *v10;

  v2 = qword_100999A18;
  if (!qword_100999A18)
    goto LABEL_11;
  v3 = &qword_100999A18;
  do
  {
    v4 = *(_DWORD *)(v2 + 32);
    v5 = v4 < 25;
    if (v4 >= 25)
      v6 = (uint64_t *)v2;
    else
      v6 = (uint64_t *)(v2 + 8);
    if (!v5)
      v3 = (uint64_t *)v2;
    v2 = *v6;
  }
  while (*v6);
  if (v3 == &qword_100999A18 || *((int *)v3 + 8) >= 26)
LABEL_11:
    v3 = &qword_100999A18;
  remote_connection = xpc_dictionary_get_remote_connection((xpc_object_t)v3[5]);
  if (remote_connection)
  {
    v8 = remote_connection;
    reply = xpc_dictionary_create_reply((xpc_object_t)v3[5]);
    if (reply)
    {
      v10 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", a1);
      xpc_connection_send_message(v8, v10);
      xpc_release(v10);
    }
  }
  xpc_release((xpc_object_t)v3[5]);
  sub_1000040CC((uint64_t **)&qword_100999A10, v3);
  operator delete(v3);
}

uint64_t sub_1005F44DC(int a1, uint64_t a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t result;
  _DWORD v8[2];
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;

  if (a1 != 20545)
    sub_100253460();
  v6 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109632;
    v8[1] = byte_100993470;
    v9 = 1024;
    v10 = a1;
    v11 = 1024;
    v12 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "_perfClassicConnectionInd on role %d, psm %x, cid %x", (uint8_t *)v8, 0x14u);
  }
  result = sub_10019AEA4(a2);
  if (result)
    return sub_1001DDCAC((uint64_t)sub_1005F45F8, (uint64_t)sub_1005F46CC, (uint64_t)sub_1005F4814, a3, (uint64_t)&unk_100742D60, 1, (uint64_t)&unk_100742D80);
  return result;
}

float sub_1005F45F8(int a1, int a2, int a3, int a4)
{
  NSObject *v8;
  float result;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;

  v8 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109888;
    v10[1] = a1;
    v11 = 1024;
    v12 = a2;
    v13 = 1024;
    v14 = a3;
    v15 = 1024;
    v16 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "_perfClassicConnectCfm: cid %x inMTU %d outMTU %d result %d", (uint8_t *)v10, 0x1Au);
  }
  return result;
}

void sub_1005F46CC(int a1, int a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  _BOOL4 v7;
  const char *v8;
  int v9;
  int v10;
  __int16 v11;
  int v12;

  v4 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 67109376;
    v10 = a1;
    v11 = 1024;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "_perfClassicDisconnectCB: cid %x result %d", (uint8_t *)&v9, 0xEu);
  }
  v5 = byte_100993470;
  v6 = qword_100999860;
  v7 = os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT);
  if (v5 == 1)
  {
    if (!v7)
      return;
    v9 = 67109120;
    v10 = dword_100993474;
    v8 = "_perfClassicDisconnectCB: Acceptor packetCountReceived=%d";
  }
  else
  {
    if (!v7)
      return;
    v9 = 67109120;
    v10 = dword_10099347C;
    v8 = "_perfClassicDisconnectCB: Initiator packetCountSent=%d";
  }
  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v9, 8u);
}

void sub_1005F4814(unsigned int a1, uint64_t a2, int a3)
{
  int v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  unsigned int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;

  v9 = 0;
  v5 = sub_1001DB520(a1, &v9);
  v6 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109888;
    v11 = byte_100993470;
    v12 = 1024;
    v13 = a1;
    v14 = 1024;
    v15 = a3;
    v16 = 1024;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "_perfClassicRecvDataInd: role %d, cid %x, dataLen %d status=%d", buf, 0x1Au);
  }
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E7B8();
  }
  else if (byte_100993470 == 1)
  {
    v7 = 0;
    ++dword_100993474;
    while (word_100742DB0[v7] != a3)
    {
      if (++v7 == 7)
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_10070E78C();
        LOBYTE(v7) = 0;
        break;
      }
    }
    byte_100993488 = v7;
    v8 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v11 = dword_100993474;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "_perfClassicRecvDataInd: packetCountReceived=%d", buf, 8u);
    }
  }
}

uint64_t sub_1005F49DC(uint64_t a1, const char *a2, void **a3, off_t *a4)
{
  NSObject *v7;
  int v8;
  NSObject *v9;
  NSObject *v11;
  FILE *v12;
  NSObject *v13;
  FILE *v14;
  size_t v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  int v19;
  char *v20;
  __int16 v21;
  off_t st_size;
  stat buf;

  v7 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
  {
    buf.st_dev = 136315138;
    *(_QWORD *)&buf.st_mode = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "loadFile: File Path %s\n", (uint8_t *)&buf, 0xCu);
  }
  memset(&buf, 0, sizeof(buf));
  bzero(&buf, 0x90uLL);
  v8 = stat(a2, &buf);
  v9 = qword_100999860;
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E904(v9);
    return 1;
  }
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
  {
    v19 = 136315394;
    v20 = ctime(&buf.st_mtimespec.tv_sec);
    v21 = 2048;
    st_size = buf.st_size;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "loadFile: File last changed:%s File size=%lld Bytes\n", (uint8_t *)&v19, 0x16u);
  }
  *a3 = malloc_type_malloc(buf.st_size, 0x8B984916uLL);
  *a4 = buf.st_size;
  v11 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
  {
    LOWORD(v19) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "loadFile: Open File\n", (uint8_t *)&v19, 2u);
  }
  v12 = fopen(a2, "r");
  v13 = qword_100999860;
  if (!v12)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E818();
    return 1;
  }
  v14 = v12;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
  {
    LOWORD(v19) = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "loadFile: Read File to buffer\n", (uint8_t *)&v19, 2u);
  }
  v15 = fread(*a3, 1uLL, buf.st_size, v14);
  v16 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
  {
    v19 = 134217984;
    v20 = (char *)v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "loadFile: Read File to fileBuffer. readResult %zu.\n", (uint8_t *)&v19, 0xCu);
  }
  if (ferror(v14))
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E8D8();
    return 1;
  }
  v17 = feof(v14);
  v18 = qword_100999860;
  if (v17)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E878();
    return 1;
  }
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
  {
    LOWORD(v19) = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "loadFile: Close File\n", (uint8_t *)&v19, 2u);
  }
  fclose(v14);
  return 0;
}

void sub_1005F4D1C(int a1, const void *a2, unsigned int a3, void *__dst)
{
  size_t v5;

  if (__dst)
  {
    if (a3 >= 0xFF)
      v5 = 255;
    else
      v5 = a3;
    memcpy(__dst, a2, v5);
    *((_WORD *)__dst + 128) = v5;
  }
  sub_1000445E0(&stru_100999A50);
}

_QWORD *sub_1005F4D64(_QWORD *a1)
{
  *a1 = &off_10092B270;
  sub_100069BDC(a1 + 1);
  return a1;
}

void sub_1005F4D94(_QWORD *a1)
{
  *a1 = &off_10092B270;
  sub_100069BDC(a1 + 1);
  operator delete();
}

void sub_1005F4DD4()
{
  double v0;
  int v1;
  double v2;
  NSObject *v3;
  _BOOL4 v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  __darwin_suseconds_t v9;
  timeval v10[7];
  timeval v11;

  memset(v10, 0, sizeof(v10));
  v11.tv_sec = 0;
  *(_QWORD *)&v11.tv_usec = 0;
  gettimeofday(&v11, 0);
  v0 = (double)v11.tv_usec / 1000.0 + (double)(1000 * v11.tv_sec) - *(double *)&qword_100993498;
  v1 = dword_100993490;
  v2 = (double)(1000 * dword_100993490);
  v3 = qword_100999860;
  v4 = os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT);
  if (v0 <= v2)
  {
    if (v4)
    {
      v5 = dword_10099347C++;
      LODWORD(v11.tv_sec) = 67109120;
      HIDWORD(v11.tv_sec) = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "_writeAclDataCb packetCountSent: %d\n", (uint8_t *)&v11, 8u);
    }
    v6 = byte_100993494++;
    memset(byte_1009934A0, v6, word_100742DB0[byte_100993488]);
    sub_1000477B8();
    sub_1000532A8((uint64_t)v10, 1u);
    sub_10005336C((unsigned __int8 *)v10, byte_1009934A0, word_100742DB0[byte_100993488], 2u);
    v7 = sub_1001DBC18((uint64_t)sub_1005F5060, (unsigned __int16)word_100993478, (__int128 *)qword_100993480, (uint64_t)v10, 0);
    sub_100253FD8((uint64_t)v10);
    sub_1000478A0();
    if (v7 == 412)
      v7 = 0;
    v8 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v9 = word_100742DB0[byte_100993488];
      LODWORD(v11.tv_sec) = 67109376;
      HIDWORD(v11.tv_sec) = v7;
      LOWORD(v11.tv_usec) = 1024;
      *(__darwin_suseconds_t *)((char *)&v11.tv_usec + 2) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "_writeAclDataCb result %d, length %d\n", (uint8_t *)&v11, 0xEu);
    }
    if (v7 && os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_10070E98C();
  }
  else if (v4)
  {
    LODWORD(v11.tv_sec) = 67109120;
    HIDWORD(v11.tv_sec) = v1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Finished running the test after %d Sec", (uint8_t *)&v11, 8u);
  }
}

void sub_1005F5060(int a1, uint64_t a2, int a3, int a4)
{
  NSObject *v7;
  dispatch_time_t v8;
  NSObject *global_queue;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;

  v7 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109632;
    v10[1] = a4;
    v11 = 1024;
    v12 = a1;
    v13 = 1024;
    v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "_perfWriteCB result=%d cid=%d\n sendCount=%d", (uint8_t *)v10, 0x14u);
  }
  v8 = dispatch_time(0, 0);
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_after_f(v8, global_queue, 0, (dispatch_function_t)sub_1005F4DD4);
}

void *sub_1005F5158(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  void *v14;
  uint64_t *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char v29;

  v7 = sub_10039B518((uint64_t)&v29, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v17 = a2;
        v15 = *(uint64_t **)a2;
        v16 = *(_QWORD *)(v17 + 8);
        do
        {
          v18 = *((_QWORD *)v14 + 1);
          if (v18 == v8)
          {
            if (*((_QWORD *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16))
              return v14;
          }
          else
          {
            if (v11 > 1)
            {
              if (v18 >= v9)
                v18 %= v9;
            }
            else
            {
              v18 &= v9 - 1;
            }
            if (v18 != v12)
              break;
          }
          v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v14 = operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = **a4;
  *((_QWORD *)v14 + 4) = 0;
  *((_QWORD *)v14 + 5) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_1000B678C(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  if (v26)
  {
    *(_QWORD *)v14 = *v26;
LABEL_40:
    *v26 = v14;
    goto LABEL_41;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v25 + 8 * v12) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1005F53AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1005F53C0(id a1)
{
  operator new();
}

void sub_1005F5400()
{
  operator delete();
}

void sub_1005F5424(id a1)
{
  operator new();
}

void sub_1005F5464()
{
  operator delete();
}

void sub_1005F5488(id a1)
{
  operator new();
}

void sub_1005F54C8()
{
  operator delete();
}

void sub_1005F54EC(id a1)
{
  operator new();
}

void sub_1005F552C()
{
  operator delete();
}

void sub_1005F5550()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  qword_100999A20 = 0;
  qword_100999A18 = 0;
  qword_100999A10 = (uint64_t)&qword_100999A18;
  __cxa_atexit((void (*)(void *))sub_1005E8974, &qword_100999A10, (void *)&_mh_execute_header);
  xmmword_100999A28 = 0u;
  *(_OWORD *)algn_100999A38 = 0u;
  dword_100999A48 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_1005E899C, &xmmword_100999A28, (void *)&_mh_execute_header);
  sub_1002A90C4(&stru_100999A50);
  __cxa_atexit((void (*)(void *))sub_1002A912C, &stru_100999A50, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1005F55FC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  os_log_t v9;
  os_log_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || *(_QWORD *)(v2 + 16) <= a2)
  {
    v4 = sub_100027F68();
    sub_100576510(v4, 1);
    v5 = _os_log_pack_size(12);
    v6 = (char *)&v11 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v7 = __error();
    v8 = _os_log_pack_fill(v6, v5, *v7, &_mh_execute_header, "Assertion failed: %{public}s");
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)(v8 + 4) = "idx < getSize()";
    v9 = os_log_create("com.apple.bluetooth", "CBCrash");
    if (v9)
      v10 = v9;
    else
      v10 = (os_log_t)&_os_log_default;
    qword_10097BA60 = os_log_pack_send_and_compose(v6, v10, 16, 0, 0);
    abort_with_payload(18, 2, v6, v5, qword_10097BA60, 0);
  }
  return *(unsigned __int8 *)(v2 + a2 + 24);
}

BOOL sub_1005F5738(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  const void *v8;
  const void *v9;
  unsigned int v10;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    v3 = *(_QWORD *)(v2 + 16);
  else
    v3 = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 16);
    if (v3 < v5)
      v6 = 0;
    else
      v6 = *(_QWORD *)(v4 + 16);
    if (v3 < v5 && v2 != 0)
      v6 = *(_QWORD *)(v2 + 16);
  }
  else
  {
    v6 = 0;
  }
  if (v2)
    v8 = (const void *)(v2 + 24);
  else
    v8 = 0;
  if (v4)
    v9 = (const void *)(v4 + 24);
  else
    v9 = 0;
  v10 = memcmp(v8, v9, v6);
  if (v10)
    return v10 >> 31;
  if (!v2)
  {
    v12 = 0;
    if (v4)
      goto LABEL_24;
LABEL_26:
    v13 = 0;
    return v12 < v13;
  }
  v12 = *(_QWORD *)(v2 + 16);
  if (!v4)
    goto LABEL_26;
LABEL_24:
  v13 = *(_QWORD *)(v4 + 16);
  return v12 < v13;
}

void sub_1005F57E0(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  char *v8;
  _QWORD *v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *(unsigned __int8 **)(a1 + 64);
  v4 = *(unsigned __int8 **)(a1 + 72);
  if (v5 != v4)
  {
    v8 = 0;
    v9 = a3 + 2;
    do
    {
      if (*v5 == a2)
      {
        if ((unint64_t)v8 >= *v9)
        {
          v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v8[-*a3] >> 2);
          v12 = v11 + 1;
          if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL)
            abort();
          if (0x999999999999999ALL * ((uint64_t)(*v9 - *a3) >> 2) > v12)
            v12 = 0x999999999999999ALL * ((uint64_t)(*v9 - *a3) >> 2);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v9 - *a3) >> 2) >= 0x666666666666666)
            v13 = 0xCCCCCCCCCCCCCCCLL;
          else
            v13 = v12;
          if (v13)
            v14 = (char *)sub_1000B58EC((uint64_t)(a3 + 2), v13);
          else
            v14 = 0;
          v15 = &v14[20 * v11];
          v16 = *(_OWORD *)v5;
          *((_DWORD *)v15 + 4) = *((_DWORD *)v5 + 4);
          *(_OWORD *)v15 = v16;
          v18 = (char *)*a3;
          v17 = (char *)a3[1];
          v19 = v15;
          if (v17 != (char *)*a3)
          {
            do
            {
              v20 = *(_OWORD *)(v17 - 20);
              *((_DWORD *)v19 - 1) = *((_DWORD *)v17 - 1);
              *(_OWORD *)(v19 - 20) = v20;
              v19 -= 20;
              v17 -= 20;
            }
            while (v17 != v18);
            v17 = (char *)*a3;
          }
          v8 = v15 + 20;
          *a3 = v19;
          a3[1] = v15 + 20;
          a3[2] = &v14[20 * v13];
          if (v17)
            operator delete(v17);
        }
        else
        {
          v10 = *(_OWORD *)v5;
          *((_DWORD *)v8 + 4) = *((_DWORD *)v5 + 4);
          *(_OWORD *)v8 = v10;
          v8 += 20;
        }
        a3[1] = v8;
        v4 = *(unsigned __int8 **)(a1 + 72);
      }
      v5 += 20;
    }
    while (v5 != v4);
  }
}

void sub_1005F595C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005F597C(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  char *v8;
  _QWORD *v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *(unsigned __int8 **)(a1 + 88);
  v4 = *(unsigned __int8 **)(a1 + 96);
  if (v5 != v4)
  {
    v8 = 0;
    v9 = a3 + 2;
    do
    {
      if (*v5 == a2)
      {
        if ((unint64_t)v8 >= *v9)
        {
          v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v8[-*a3] >> 2);
          v12 = v11 + 1;
          if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL)
            abort();
          if (0x999999999999999ALL * ((uint64_t)(*v9 - *a3) >> 2) > v12)
            v12 = 0x999999999999999ALL * ((uint64_t)(*v9 - *a3) >> 2);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v9 - *a3) >> 2) >= 0x666666666666666)
            v13 = 0xCCCCCCCCCCCCCCCLL;
          else
            v13 = v12;
          if (v13)
            v14 = (char *)sub_1000B58EC((uint64_t)(a3 + 2), v13);
          else
            v14 = 0;
          v15 = &v14[20 * v11];
          v16 = *(_OWORD *)v5;
          *((_DWORD *)v15 + 4) = *((_DWORD *)v5 + 4);
          *(_OWORD *)v15 = v16;
          v18 = (char *)*a3;
          v17 = (char *)a3[1];
          v19 = v15;
          if (v17 != (char *)*a3)
          {
            do
            {
              v20 = *(_OWORD *)(v17 - 20);
              *((_DWORD *)v19 - 1) = *((_DWORD *)v17 - 1);
              *(_OWORD *)(v19 - 20) = v20;
              v19 -= 20;
              v17 -= 20;
            }
            while (v17 != v18);
            v17 = (char *)*a3;
          }
          v8 = v15 + 20;
          *a3 = v19;
          a3[1] = v15 + 20;
          a3[2] = &v14[20 * v13];
          if (v17)
            operator delete(v17);
        }
        else
        {
          v10 = *(_OWORD *)v5;
          *((_DWORD *)v8 + 4) = *((_DWORD *)v5 + 4);
          *(_OWORD *)v8 = v10;
          v8 += 20;
        }
        a3[1] = v8;
        v4 = *(unsigned __int8 **)(a1 + 96);
      }
      v5 += 20;
    }
    while (v5 != v4);
  }
}

void sub_1005F5AF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005F5B18(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  void *__p[2];
  char v5;
  uint8_t buf[8];
  char v7;

  v1 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "AdvRSSIOffset");
  v2 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v1 + 88))(v1, buf, __p, &dword_100993EB8);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2)
      return;
  }
  else if (!v2)
  {
    return;
  }
  v3 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = dword_100993EB8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: RSSI shall be reported after offset %d (dB) added", buf, 8u);
  }
}

void sub_1005F5C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

BOOL sub_1005F5C70(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  _BOOL8 result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    result = sub_100072DF0(v2, v4);
    if (!result)
      break;
    v2 += 20;
    v4 += 20;
  }
  while (v2 != v3);
  return result;
}

void sub_1005F5CE0(uint64_t a1)
{
  __n128 **v2;
  __n128 *v3;
  unint64_t v4;
  __n128 v5;
  __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  __n128 *v13;
  char *v14;
  __n128 v15;
  char *v16;
  char *v17;
  __n128 v18;
  _OWORD *v19;
  uint64_t (**v20)();
  unsigned int *v21;
  uint64_t v22;
  __n128 *v23;
  __int128 v24;
  int v25;
  __n128 v26;
  __int128 v27;
  int v28;
  __n128 v29;
  unsigned __int32 v30;

  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
  v2 = (__n128 **)(a1 + 72);
  v27 = xmmword_10073B558;
  v28 = 0;
  sub_100042F44(&v29, (__n128 *)&v27);
  v3 = *v2;
  v4 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)*v2 >= v4)
  {
    v7 = *(_QWORD *)(a1 + 64);
    v8 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v3 - v7) >> 2);
    v9 = v8 + 1;
    if (v8 + 1 > 0xCCCCCCCCCCCCCCCLL)
      abort();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - v7) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x666666666666666)
      v11 = 0xCCCCCCCCCCCCCCCLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_1000B58EC(a1 + 80, v11);
    else
      v12 = 0;
    v13 = (__n128 *)&v12[20 * v8];
    v14 = &v12[20 * v11];
    v15 = v29;
    v13[1].n128_u32[0] = v30;
    *v13 = v15;
    v6 = &v13[1].n128_i8[4];
    v17 = *(char **)(a1 + 64);
    v16 = *(char **)(a1 + 72);
    if (v16 != v17)
    {
      do
      {
        v18 = *(__n128 *)(v16 - 20);
        v13[-1].n128_u32[3] = *((_DWORD *)v16 - 1);
        *(__n128 *)((char *)v13 - 20) = v18;
        v13 = (__n128 *)((char *)v13 - 20);
        v16 -= 20;
      }
      while (v16 != v17);
      v16 = *(char **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 64) = v13;
    *(_QWORD *)(a1 + 72) = v6;
    *(_QWORD *)(a1 + 80) = v14;
    if (v16)
      operator delete(v16);
  }
  else
  {
    v5 = v29;
    v3[1].n128_u32[0] = v30;
    *v3 = v5;
    v6 = &v3[1].n128_i8[4];
  }
  *(_QWORD *)(a1 + 72) = v6;
  sub_100056B54(a1 + 112, *(_QWORD **)(a1 + 120));
  *(_QWORD *)(a1 + 112) = a1 + 120;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  v22 = 0;
  v29 = 0uLL;
  v30 = 0;
  if (qword_10097B180 != -1)
    dispatch_once(&qword_10097B180, &stru_10093CC10);
  sub_100419738((uint64_t)off_10097B178, &v29, 20, &v22);
  v24 = xmmword_10073B558;
  v25 = 0;
  sub_100042F44(&v26, (__n128 *)&v24);
  sub_10003994C(&v20, &v29, 0x14uLL);
  v23 = &v26;
  v19 = sub_10009C400((uint64_t **)(a1 + 112), (unsigned __int8 *)&v26, (uint64_t)&unk_100740F58, (_OWORD **)&v23);
  sub_100041698((uint64_t)v19 + 56, (uint64_t)&v20);
  v20 = &off_100918258;
  if (v21)
    sub_100056AAC(v21);
  *(_QWORD *)(a1 + 256) = v22;
  *(_BYTE *)(a1 + 364) = 1;
}

void sub_1005F5F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11)
{
  if (a11)
    sub_100056AAC(a11);
  _Unwind_Resume(exception_object);
}

void sub_1005F5F80(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 264) == 2 && !*(_BYTE *)(a1 + 364))
    sub_1005F5CE0(a1);
}

uint64_t sub_1005F5F9C(uint64_t result, unsigned int a2, char a3)
{
  if (a2 <= 3)
    *(_BYTE *)(result + a2 + 392) = a3;
  return result;
}

uint64_t sub_1005F5FB0(uint64_t a1, uint8x8_t a2)
{
  int16x4_t v2;

  a2.i32[0] = *(_DWORD *)(a1 + 392);
  v2 = (int16x4_t)vmovl_u8(a2).u64[0];
  v2.i16[0] = vaddv_s16(v2);
  return v2.u32[0];
}

int8x16_t *sub_1005F5FC4@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, char a3@<W2>, int8x16_t **a4@<X8>)
{
  int8x16_t *result;
  unint64_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t *v12;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  result = (int8x16_t *)operator new(0x108uLL);
  v9 = 0;
  *a4 = result;
  *(_OWORD *)(a4 + 1) = xmmword_100742DC0;
  v10 = vdupq_n_s8(a2);
  *result = v10;
  result[1] = v10;
  result[2] = v10;
  result[3] = v10;
  result[4] = v10;
  result[5] = v10;
  result[6] = v10;
  result[7] = v10;
  result[8] = v10;
  result[9] = v10;
  result[10] = v10;
  result[11] = v10;
  result[12] = v10;
  result[13] = v10;
  result[14] = v10;
  result[15] = v10;
  v11 = 255;
  result[16].i8[0] = 0;
  do
  {
    if (((*(_QWORD *)(a1 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
    {
      if (*((char *)a4 + 23) >= 0)
        v12 = (uint64_t *)a4;
      else
        v12 = (uint64_t *)*a4;
      *((_BYTE *)v12 + v11) = a3;
    }
    ++v9;
    --v11;
  }
  while (v9 != 256);
  return result;
}

void sub_1005F6080(id a1)
{
  operator new();
}

void sub_1005F60C0()
{
  operator delete();
}

uint64_t sub_1005F60E4(uint64_t a1)
{
  _QWORD block[5];

  *(_BYTE *)(a1 + 100) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  atomic_store(0, (unsigned int *)(a1 + 96));
  atomic_store(0, (unsigned __int8 *)(a1 + 17));
  *(_QWORD *)(a1 + 88) = 0;
  atomic_store(0, (unsigned __int8 *)(a1 + 18));
  *(_BYTE *)(a1 + 100) = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005F6174;
  block[3] = &unk_100917378;
  block[4] = a1;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  return a1;
}

void sub_1005F6174(uint64_t a1)
{
  sub_1005F617C(*(_QWORD *)(a1 + 32));
}

void sub_1005F617C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const __CFArray *v4;
  const __CFArray *v5;
  const void *ValueAtIndex;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  const void *v10;
  unsigned int OperatingBand;
  uint64_t v13;
  CFRunLoopRef Main;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  dispatch_source_t v18;
  NSObject *v19;
  dispatch_time_t v20;
  _QWORD v21[6];
  uint8_t buf[16];

  v2 = qword_1009997F0;
  if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Registering for WiFi Callback", buf, 2u);
  }
  v3 = WiFiManagerClientCreate(kCFAllocatorDefault, 0);
  *(_QWORD *)a1 = v3;
  if (v3)
  {
    v4 = (const __CFArray *)WiFiManagerClientCopyDevices();
    if (v4)
    {
      v5 = v4;
      if (CFArrayGetCount(v4))
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
        *(_QWORD *)(a1 + 8) = ValueAtIndex;
        CFRetain(ValueAtIndex);
        v7 = *(_QWORD *)(a1 + 8);
        if (v7)
        {
          v8 = WiFiDeviceClientGetPower(v7) != 0;
          sub_1005F6C94(a1, v8);
          v9 = WiFiDeviceClientCopyCurrentNetwork(*(_QWORD *)(a1 + 8));
          if (v9)
          {
            v10 = (const void *)v9;
            OperatingBand = WiFiNetworkGetOperatingBand();
            sub_1005F6D0C(a1, OperatingBand);
            if (atomic_load((unsigned int *)(a1 + 96)))
              sub_1005F6D84(a1, 1u);
            CFRelease(v10);
          }
        }
        v13 = sub_100038E50();
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 32))(v13);
      }
      CFRelease(v5);
    }
  }
  Main = CFRunLoopGetMain();
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  *(_QWORD *)(a1 + 88) = Main;
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 24));
  if (*(_QWORD *)a1 && *(_QWORD *)(a1 + 88) && (v15 = *(_QWORD *)(a1 + 8)) != 0)
  {
    WiFiDeviceClientRegisterPowerCallback(v15, sub_1005F6E48, a1);
    WiFiDeviceClientRegisterExtendedLinkCallback(*(_QWORD *)(a1 + 8), sub_1005F6E58, a1);
    WiFiDeviceClientRegisterBssidChangeCallback(*(_QWORD *)(a1 + 8), sub_1005F6E64, a1);
    WiFiDeviceClientRegisterM1M4Handshake24GHzCountCallback(*(_QWORD *)(a1 + 8), sub_1005F6E70, a1);
    WiFiDeviceClientRegister24GHzNetworkInCriticalStateCallback(*(_QWORD *)(a1 + 8), sub_1005F6E7C, a1);
    WiFiDeviceClientRegisterVirtualInterfaceStateChangeCallback(*(_QWORD *)(a1 + 8), sub_1005F6E90, a1);
    WiFiManagerClientScheduleWithRunLoop(*(_QWORD *)a1, *(_QWORD *)(a1 + 88), kCFRunLoopDefaultMode);
    v16 = qword_1009997F0;
    if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "WiFi interface is up", buf, 2u);
    }
  }
  else
  {
    v17 = qword_1009997F0;
    if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Setting up ReTry Timer to ensure WiFi is up", buf, 2u);
    }
    v18 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)&_dispatch_main_q);
    if (v18)
    {
      v19 = v18;
      v20 = dispatch_time(0, 10000000000);
      dispatch_source_set_timer(v19, v20, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_1005F6E9C;
      v21[3] = &unk_100918090;
      v21[4] = a1;
      v21[5] = v19;
      dispatch_source_set_event_handler(v19, v21);
      dispatch_activate(v19);
    }
  }
}

void sub_1005F6480(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  unsigned __int8 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned __int8 v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned int v19;
  unsigned __int8 v20;
  void *__p[2];
  char v22;
  uint8_t buf[8];
  char v24;

  v2 = sub_100027F68();
  sub_100091AE8(buf, "COEXDEBUG");
  sub_100091AE8(__p, "Enabled");
  (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(_QWORD *)v2 + 72))(v2, buf, __p, a1 + 100);
  if (v22 < 0)
    operator delete(__p[0]);
  if (v24 < 0)
    operator delete(*(void **)buf);
  if (*(_BYTE *)(a1 + 100))
  {
    v3 = qword_1009997F0;
    if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "WiFiDebugModeUpdated COEXDEBUG", buf, 2u);
    }
    v20 = 0;
    v4 = sub_100027F68();
    sub_100091AE8(buf, "COEXDEBUG");
    sub_100091AE8(__p, "wifiStatePower");
    v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(_QWORD *)v4 + 72))(v4, buf, __p, &v20);
    if (v22 < 0)
      operator delete(__p[0]);
    if (v24 < 0)
    {
      operator delete(*(void **)buf);
      if (!v5)
        goto LABEL_16;
    }
    else if (!v5)
    {
      goto LABEL_16;
    }
    atomic_store(v20, (unsigned __int8 *)(a1 + 16));
    v6 = atomic_load((unsigned __int8 *)(a1 + 16));
    if ((v6 & 1) == 0)
    {
      atomic_store(0, (unsigned int *)(a1 + 96));
      atomic_store(0, (unsigned __int8 *)(a1 + 18));
LABEL_38:
      v16 = sub_100038E50();
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
      return;
    }
LABEL_16:
    v19 = 0;
    v7 = sub_100027F68();
    sub_100091AE8(buf, "COEXDEBUG");
    sub_100091AE8(__p, "wifiStateBand");
    v8 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned int *))(*(_QWORD *)v7 + 88))(v7, buf, __p, &v19);
    if (v22 < 0)
      operator delete(__p[0]);
    if (v24 < 0)
    {
      operator delete(*(void **)buf);
      if (!v8)
      {
LABEL_21:
        v18 = 0;
        v9 = sub_100027F68();
        sub_100091AE8(buf, "COEXDEBUG");
        sub_100091AE8(__p, "UCMWifiStateBitmap");
        v10 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, uint64_t *))(*(_QWORD *)v9 + 144))(v9, buf, __p, &v18);
        if (v22 < 0)
          operator delete(__p[0]);
        if (v24 < 0)
          operator delete(*(void **)buf);
        if (v18)
          v11 = v10;
        else
          v11 = 0;
        if (v11 == 1)
          atomic_store(1u, (unsigned __int8 *)(a1 + 18));
        v17 = 0;
        v12 = sub_100027F68();
        sub_100091AE8(buf, "COEXDEBUG");
        sub_100091AE8(__p, "wifiStateCritical2_4");
        v13 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(_QWORD *)v12 + 72))(v12, buf, __p, &v17);
        if (v22 < 0)
          operator delete(__p[0]);
        if (v24 < 0)
        {
          operator delete(*(void **)buf);
          if (!v13)
            goto LABEL_35;
        }
        else if (!v13)
        {
LABEL_35:
          v14 = atomic_load((unsigned __int8 *)(a1 + 18));
          if ((v14 & 1) != 0 || (v15 = atomic_load((unsigned int *)(a1 + 96)), v15 | v19))
            atomic_store(1u, (unsigned __int8 *)(a1 + 16));
          goto LABEL_38;
        }
        atomic_store(v17, (unsigned __int8 *)(a1 + 18));
        goto LABEL_35;
      }
    }
    else if (!v8)
    {
      goto LABEL_21;
    }
    atomic_store(v19, (unsigned int *)(a1 + 96));
    goto LABEL_21;
  }
}

void sub_1005F67D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_1005F6824(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v5;
  const void *v6;
  uint64_t v8;
  uint8_t v9[16];

  if (*(_BYTE *)(a1 + 100))
  {
    v2 = qword_1009997F0;
    if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ignoring real wifi updates", v9, 2u);
    }
  }
  else
  {
    if (a2)
    {
      atomic_store(WiFiDeviceClientGetPower(a2) != 0, (unsigned __int8 *)(a1 + 16));
      v5 = WiFiDeviceClientCopyCurrentNetwork(a2);
      if (v5)
      {
        v6 = (const void *)v5;
        atomic_store(WiFiNetworkGetOperatingBand(), (unsigned int *)(a1 + 96));
        if (atomic_load((unsigned int *)(a1 + 96)))
          atomic_store(1u, (unsigned __int8 *)(a1 + 17));
        CFRelease(v6);
      }
      else
      {
        atomic_store(0, (unsigned int *)(a1 + 96));
        atomic_store(0, (unsigned __int8 *)(a1 + 17));
      }
    }
    v8 = sub_100038E50();
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  }
}

void sub_1005F691C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  NSObject *v3;
  uint64_t v4;
  uint8_t v5[16];

  if (*(_BYTE *)(a1 + 100))
  {
    v3 = qword_1009997F0;
    if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Ignoring real wifi updates", v5, 2u);
    }
  }
  else
  {
    sub_1005F69AC(a1, a3);
    v4 = sub_100038E50();
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  }
}

void sub_1005F69AC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  const char *v3;
  NSObject *v4;
  uint32_t v5;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  _DWORD v10[2];
  __int16 v11;
  unsigned int v12;

  if (*(_BYTE *)(a1 + 100))
  {
    v2 = qword_1009997F0;
    if (!os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(v10[0]) = 0;
    v3 = "Ignoring real wifi updates";
    v4 = v2;
    v5 = 2;
  }
  else
  {
    v7 = (unsigned int *)(a1 + 20);
    atomic_store(a2, (unsigned int *)(a1 + 20));
    v8 = qword_1009997F0;
    if (!os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEFAULT))
      return;
    v9 = atomic_load(v7);
    v10[0] = 67109376;
    v10[1] = v9;
    v11 = 1024;
    v12 = a2;
    v3 = "Callback triggered, M1M4HandshakeCount setting to: %u with wifihandshakecount: %u";
    v4 = v8;
    v5 = 14;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v3, (uint8_t *)v10, v5);
}

void sub_1005F6AB8(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v3;
  unsigned __int8 v6;
  NSObject *v7;
  const char *v8;
  unsigned __int8 v9;
  const char *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  __int16 v14;
  const char *v15;

  if (*(_BYTE *)(a1 + 100))
  {
    v3 = qword_1009997F0;
    if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Ignoring real wifi updates", (uint8_t *)&v12, 2u);
    }
  }
  else if (a2)
  {
    v6 = atomic_load((unsigned __int8 *)(a1 + 18));
    if ((v6 & 1) != a3)
    {
      v7 = qword_1009997F0;
      if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEFAULT))
      {
        v8 = "Y";
        v9 = atomic_load((unsigned __int8 *)(a1 + 18));
        if ((v9 & 1) != 0)
          v10 = "Y";
        else
          v10 = "N";
        if (!a3)
          v8 = "N";
        v12 = 136315394;
        v13 = v10;
        v14 = 2080;
        v15 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "WiFi isInCriticalStateWiFi2_4GHz %s -> %s", (uint8_t *)&v12, 0x16u);
      }
      sub_1005F6C1C(a1, a3);
      v11 = sub_100038E50();
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    }
  }
}

void sub_1005F6C1C(uint64_t a1, unsigned __int8 a2)
{
  NSObject *v2;
  uint8_t v3[16];

  if (*(_BYTE *)(a1 + 100))
  {
    v2 = qword_1009997F0;
    if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ignoring real wifi updates", v3, 2u);
    }
  }
  else
  {
    atomic_store(a2, (unsigned __int8 *)(a1 + 18));
  }
}

void sub_1005F6C94(uint64_t a1, unsigned __int8 a2)
{
  NSObject *v2;
  uint8_t v3[16];

  if (*(_BYTE *)(a1 + 100))
  {
    v2 = qword_1009997F0;
    if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ignoring real wifi updates", v3, 2u);
    }
  }
  else
  {
    atomic_store(a2, (unsigned __int8 *)(a1 + 16));
  }
}

void sub_1005F6D0C(uint64_t a1, unsigned int a2)
{
  NSObject *v2;
  uint8_t v3[16];

  if (*(_BYTE *)(a1 + 100))
  {
    v2 = qword_1009997F0;
    if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ignoring real wifi updates", v3, 2u);
    }
  }
  else
  {
    atomic_store(a2, (unsigned int *)(a1 + 96));
  }
}

void sub_1005F6D84(uint64_t a1, unsigned __int8 a2)
{
  NSObject *v2;
  uint8_t v3[16];

  if (*(_BYTE *)(a1 + 100))
  {
    v2 = qword_1009997F0;
    if (os_log_type_enabled((os_log_t)qword_1009997F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ignoring real wifi updates", v3, 2u);
    }
  }
  else
  {
    atomic_store(a2, (unsigned __int8 *)(a1 + 17));
  }
}

uint64_t sub_1005F6DFC(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 20));
}

uint64_t sub_1005F6E08(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 16));
  return v1 & 1;
}

uint64_t sub_1005F6E18(uint64_t a1)
{
  return (char)atomic_load((unsigned int *)(a1 + 96));
}

uint64_t sub_1005F6E28(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 17));
  return v1 & 1;
}

uint64_t sub_1005F6E38(uint64_t a1)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(a1 + 18));
  return v1 & 1;
}

void sub_1005F6E48(uint64_t a1, uint64_t a2)
{
  sub_1005F6824(a2, a1);
}

void sub_1005F6E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1005F6824(a3, a1);
}

void sub_1005F6E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1005F6824(a3, a1);
}

void sub_1005F6E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1005F691C(a3, a2, a2);
}

void sub_1005F6E7C(uint64_t a1, int a2, uint64_t a3)
{
  sub_1005F6AB8(a3, a1, a2);
}

void sub_1005F6E90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1005F6824(a3, a1);
}

void sub_1005F6E9C(uint64_t a1)
{
  NSObject *v2;

  sub_1005F617C(*(_QWORD *)(a1 + 32));
  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 40));
  }
}

_QWORD *sub_1005F6EDC(uint64_t a1, uint64_t a2, __int16 a3)
{
  _QWORD *result;

  result = (_QWORD *)sub_1004AC92C(a1, a2, a3);
  *result = &off_10093CC40;
  return result;
}

void sub_1005F6EFC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v7;
  char v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t v16;
  NSObject *v17;
  int v18;
  NSObject *v19;
  __IOHIDUserDevice *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint8_t v39;
  uint8_t report[8];
  uint8_t buf[8];
  __int16 v42;
  int v43;

  if (a3)
  {
    v5 = *a2;
    if (*(_QWORD *)(a1 + 216))
    {
      v7 = (_QWORD *)(a1 + 192);
      if (*a2 > 0xBFu)
      {
        if (*a2 > 0xFBu)
        {
          if ((v5 - 252) <= 2)
          {
            sub_1004ACF80((id *)a1, a2, a3);
            return;
          }
          goto LABEL_44;
        }
        if ((_DWORD)v5 == 192)
        {
          v16 = -13;
          goto LABEL_34;
        }
        if ((_DWORD)v5 != 198 && (_DWORD)v5 != 224)
          goto LABEL_44;
        goto LABEL_18;
      }
      if (*a2 > 0x4Fu)
      {
        v8 = v5 - 96;
        if ((v5 - 96) > 0x3B)
          goto LABEL_8;
        if (((1 << v8) & 0x380001) == 0)
        {
          if (((1 << v8) & 0xC01000000000000) == 0)
          {
LABEL_8:
            if ((_DWORD)v5 != 80)
            {
LABEL_44:
              v32 = qword_1009999B0;
              if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
                sub_100705654(v5, v32, v33, v34, v35, v36, v37, v38);
              return;
            }
            goto LABEL_33;
          }
LABEL_18:
          v16 = -16;
LABEL_34:
          buf[0] = v16;
          if (!sub_100262E78(v7, buf))
          {
LABEL_39:
            v24 = qword_1009999B0;
            if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
              sub_1007056B8(v5, v24, v25, v26, v27, v28, v29, v30);
            return;
          }
          v39 = v16;
          goto LABEL_36;
        }
        goto LABEL_33;
      }
      if (*a2 > 0x2Fu)
      {
        if ((v5 - 48) >= 2)
          goto LABEL_44;
        goto LABEL_33;
      }
      switch((_DWORD)v5)
      {
        case 2:
LABEL_33:
          v16 = -15;
          goto LABEL_34;
        case 0x13:
          v31 = qword_1009999B0;
          if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = 19;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Received power-off notice input report (ID %u)", buf, 8u);
          }
          break;
        case 0x14:
          v17 = qword_1009999B0;
          if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
          {
            v18 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), *(unsigned __int16 *)(a1 + 40));
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = 20;
            v42 = 1024;
            v43 = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Received exit suspend input report (ID %u), should undim %d", buf, 0xEu);
          }
          if (!(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), *(unsigned __int16 *)(a1 + 40)))
          {
            v20 = 0;
            goto LABEL_48;
          }
          v19 = qword_1009999B0;
          if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Waking screen with spoofed click", buf, 2u);
          }
          buf[0] = -15;
          if (sub_100262E78(v7, buf))
          {
            v39 = -15;
            *(_QWORD *)buf = &v39;
            v20 = (__IOHIDUserDevice *)sub_100262F2C((uint64_t)v7, &v39, (uint64_t)&unk_100740F58, (_BYTE **)buf)[3];
            *(_QWORD *)buf = 258;
            v21 = mach_absolute_time();
            IOHIDUserDeviceHandleReportWithTimeStamp(v20, v21, buf, 8);
            *(_QWORD *)report = 2;
            v22 = mach_absolute_time();
            IOHIDUserDeviceHandleReportWithTimeStamp(v20, v22, report, 8);
LABEL_48:
            buf[0] = -14;
            if (!sub_100262E78(v7, buf))
            {
LABEL_37:
              if (v20)
              {
                v23 = mach_absolute_time();
                IOHIDUserDeviceHandleReportWithTimeStamp(v20, v23, a2, a3);
                return;
              }
              goto LABEL_39;
            }
            v39 = -14;
LABEL_36:
            *(_QWORD *)buf = &v39;
            v20 = (__IOHIDUserDevice *)sub_100262F2C((uint64_t)v7, &v39, (uint64_t)&unk_100740F58, (_BYTE **)buf)[3];
            goto LABEL_37;
          }
          if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
            sub_10070EA18();
          break;
        default:
          goto LABEL_44;
      }
    }
    else
    {
      v9 = qword_1009999B0;
      if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
        sub_1006D4E94(v5, v9, v10, v11, v12, v13, v14, v15);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
  {
    sub_10070E9EC();
  }
}

uint64_t sub_1005F7378(uint64_t a1, void *a2)
{
  sub_1004ACDF8(a1, a2);
  sub_1005F73D0(a1, a2);
  sub_1005F7534(a1, a2);
  sub_1005F767C(a1, a2);
  sub_1005F776C(a1, a2);
  return 1;
}

uint64_t sub_1005F73D0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[24];

  v10 = xmmword_100742DF0;
  v11 = unk_100742E00;
  *(_OWORD *)v12 = xmmword_100742E10;
  v8 = xmmword_100742DD0;
  v9 = unk_100742DE0;
  *(_DWORD *)&v12[15] = -1073577627;
  *(_QWORD *)(a1 + 304) = a1;
  *(_BYTE *)(a1 + 312) = -16;
  v3 = objc_msgSend(a2, "mutableCopy", v8, v9, v10, v11, *(_OWORD *)v12, *(_QWORD *)&v12[16]);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("Trackpad"), CFSTR("Accessory Category"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", &off_1009612D8, CFSTR("ExtendedData"));
  v4 = sub_1004ACC64(a1, v3, (uint64_t)&v8, 83, *(unsigned __int8 *)(a1 + 312), 0);
  v5 = v4;
  if (v4)
  {
    v6 = a1 + 304;
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback(v4, sub_1005F7858, v6);
    IOHIDUserDeviceRegisterSetReportCallback(v5, sub_1005F7870, v6);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
  {
    sub_10070EA44();
  }

  return v5;
}

void sub_1005F7518(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1005F7534(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[2];

  v12 = xmmword_100742E63;
  v13[0] = unk_100742E73;
  *(_OWORD *)((char *)v13 + 14) = unk_100742E81;
  v8 = xmmword_100742E23;
  v9 = unk_100742E33;
  v10 = xmmword_100742E43;
  v11 = unk_100742E53;
  *(_QWORD *)(a1 + 320) = a1;
  *(_BYTE *)(a1 + 328) = -15;
  v3 = objc_msgSend(a2, "mutableCopy", v8, v9, v10, v11, v12, v13[0], *(_QWORD *)&v13[1], *((_QWORD *)&v13[1] + 1));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", &off_1009612F0, CFSTR("ExtendedData"));
  v4 = sub_1004ACC64(a1, v3, (uint64_t)&v8, 110, *(unsigned __int8 *)(a1 + 328), 1);
  v5 = v4;
  if (v4)
  {
    v6 = a1 + 320;
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback(v4, sub_1005F7858, v6);
    IOHIDUserDeviceRegisterSetReportCallback(v5, sub_1005F7870, v6);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
  {
    sub_10070EA70();
  }

  return v5;
}

void sub_1005F7660(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1005F767C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v7[2];
  int v8;

  v7[0] = xmmword_100742E91;
  v7[1] = algn_100742EA1;
  v8 = -1073573632;
  *(_QWORD *)(a1 + 336) = a1;
  *(_BYTE *)(a1 + 344) = -14;
  v3 = sub_1004ACC64(a1, a2, (uint64_t)v7, 36, 242, 2);
  v4 = v3;
  if (v3)
  {
    v5 = a1 + 336;
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback(v3, sub_1005F7858, v5);
    IOHIDUserDeviceRegisterSetReportCallback(v4, sub_1005F7870, v5);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
  {
    sub_10070EA9C();
  }
  return v4;
}

uint64_t sub_1005F776C(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v7[2];

  v7[0] = xmmword_100742EB5;
  *(_OWORD *)((char *)v7 + 11) = *(__int128 *)((char *)&xmmword_100742EB5 + 11);
  *(_QWORD *)(a1 + 352) = a1;
  *(_BYTE *)(a1 + 360) = -13;
  v3 = sub_1004ACC64(a1, a2, (uint64_t)v7, 27, 243, 3);
  v4 = v3;
  if (v3)
  {
    v5 = a1 + 352;
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback(v3, sub_1005F7858, v5);
    IOHIDUserDeviceRegisterSetReportCallback(v4, sub_1005F7870, v5);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
  {
    sub_10070EAC8();
  }
  return v4;
}

uint64_t sub_1005F7858(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)a1 + 112))(*(_QWORD *)a1, a2, a3, a4, a5, a1[8]);
}

uint64_t sub_1005F7870(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  uint8_t v12[16];

  if ((_DWORD)a3 == 178 && a1[8] == 240)
  {
    v10 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "FW update detected; invalidating SDP cache",
        v12,
        2u);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 8) + 24))(*(_QWORD *)(*(_QWORD *)a1 + 8));
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)a1 + 120))(*(_QWORD *)a1, a2, a3, a4, a5, a1[8]);
}

void sub_1005F7948(uint64_t a1)
{
  sub_1004AC9E0(a1);
  operator delete();
}

uint64_t sub_1005F796C(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093CCD0;
  *(_QWORD *)(a1 + 8) = off_10093CD58;
  *(_QWORD *)(a1 + 16) = &off_10093CD88;
  *(_QWORD *)(a1 + 24) = off_10093CDA0;
  *(_QWORD *)(a1 + 32) = off_10093CDF0;
  *(_BYTE *)(a1 + 41) = 0;
  sub_1000160D0(a1 + 56);
  *(_DWORD *)(a1 + 120) = 0;
  *(CFAbsoluteTime *)(a1 + 128) = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 16832) = 0u;
  *(_QWORD *)(a1 + 16824) = a1 + 16832;
  *(_QWORD *)(a1 + 16848) = a1 + 16848;
  *(_QWORD *)(a1 + 16856) = a1 + 16848;
  *(_QWORD *)(a1 + 16864) = 0;
  *(_BYTE *)(a1 + 16872) = 0;
  *(_BYTE *)(a1 + 16874) = 0;
  *(_OWORD *)(a1 + 16888) = 0u;
  *(_QWORD *)(a1 + 16880) = a1 + 16888;
  *(_WORD *)(a1 + 16906) = 7;
  *(_QWORD *)(a1 + 16912) = 3600;
  *(_BYTE *)(a1 + 16920) = 0;
  *(_QWORD *)(a1 + 16936) = 0;
  *(_WORD *)(a1 + 16944) = 0;
  *(_OWORD *)(a1 + 16976) = 0u;
  *(_QWORD *)(a1 + 16992) = 0;
  *(_QWORD *)(a1 + 17016) = 0;
  *(_QWORD *)(a1 + 16965) = 0;
  *(_OWORD *)(a1 + 16952) = 0u;
  *(_QWORD *)(a1 + 17002) = 0;
  *(_WORD *)(a1 + 17010) = 0;
  *(_QWORD *)(a1 + 17024) = a1 + 17024;
  *(_QWORD *)(a1 + 17032) = a1 + 17024;
  *(_QWORD *)(a1 + 17040) = 0;
  *(_BYTE *)(a1 + 17072) = 0;
  *(int32x2_t *)(a1 + 17076) = vdup_n_s32(0x12Cu);
  *(_QWORD *)(a1 + 48) = sub_1000419F4();
  bzero((void *)(a1 + 144), 0x4128uLL);
  *(_QWORD *)(a1 + 16952) = 0;
  *(_QWORD *)(a1 + 16960) = 0;
  *(_QWORD *)(a1 + 16921) = 0;
  *(_WORD *)(a1 + 16929) = 0;
  return a1;
}

void sub_1005F7AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD **v7;
  _QWORD **v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  va_list va;

  va_start(va, a2);
  sub_100607118(v9);
  sub_100091BF8((void ***)va);
  v11 = 0;
  v12 = v3 + 16960;
  do
  {

    v11 -= 8;
  }
  while (v11 != -16);
  sub_10001A82C(v6, *v8);
  sub_10002074C(v5);
  sub_100607188(v4, *v7);
  sub_100069BDC(v2);
  _Unwind_Resume(a1);
}

void sub_1005F7B5C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  NSObject *v24;
  uint64_t v25;
  int v26;
  int v27;
  NSObject *v28;
  _BOOL4 v29;
  __int16 v30;
  uint64_t v31;
  int v32;
  int v33;
  NSObject *v34;
  _BOOL4 v35;
  __int16 v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  NSObject *v41;
  uint64_t v42;
  int v43;
  int v44;
  NSObject *v45;
  _BOOL4 v46;
  __int16 v47;
  uint64_t v48;
  int v49;
  int v50;
  NSObject *v51;
  _BOOL4 v52;
  __int16 v53;
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  NSObject *v68;
  int v69;
  const char *v70;
  const char *v71;
  int v72;
  uint64_t v73;
  int v74;
  char v75;
  uint64_t v76;
  int v77;
  char v78;
  uint64_t v79;
  int v80;
  char v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  NSObject *v87;
  int v88;
  const char *v89;
  const char *v90;
  int v91;
  uint64_t v92;
  int v93;
  NSObject *v94;
  int v95;
  uint64_t v96;
  int v97;
  NSObject *v98;
  int v99;
  int v100;
  int v101;
  int v102;
  void *__p[2];
  char v104;
  int v105;
  _BYTE buf[18];
  __int16 v107;
  const char *v108;
  __int16 v109;
  int v110;
  __int16 v111;
  int v112;

  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_10093CEE0);
  sub_1005AE2E8((uint64_t)off_100978168 + 192, a1);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093CF00);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 8);
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10093CF20);
  sub_1004B983C((uint64_t)off_100977B38, a1 + 24);
  if (!*(_BYTE *)(sub_1000438A4() + 160))
  {
    v2 = qword_1009998B8;
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Using a single advertising instance", buf, 2u);
    }
    *(_DWORD *)(a1 + 136) = 1;
  }
  v105 = 0;
  v3 = sub_100027F68();
  sub_100091AE8(buf, "AE");
  sub_100091AE8(__p, "EnableBackgroundExtendedAdvertising");
  v4 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v3 + 88))(v3, buf, __p, &v105);
  if (v104 < 0)
    operator delete(__p[0]);
  v5 = a1 + 16874;
  if (SBYTE3(v108) < 0)
  {
    operator delete(*(void **)buf);
    if (!v4)
      goto LABEL_37;
  }
  else if (!v4)
  {
    goto LABEL_37;
  }
  v6 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: Enabled Background advertising with extended advertising", buf, 2u);
  }
  *(_BYTE *)v5 = v105 != 0;
  v102 = 0;
  v7 = sub_100027F68();
  sub_100091AE8(buf, "AE");
  sub_100091AE8(__p, "MaxAdvertisingBackgroundSessions");
  v8 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v7 + 88))(v7, buf, __p, &v102);
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
  {
    operator delete(*(void **)buf);
    if (!v8)
      goto LABEL_28;
  }
  else if (!v8)
  {
    goto LABEL_28;
  }
  v9 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v102;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Warning: Overriding max background advertising sessions to %d", buf, 8u);
  }
  *(_WORD *)(a1 + 16906) = v102;
LABEL_28:
  v101 = 0;
  v10 = sub_100027F68();
  sub_100091AE8(buf, "AE");
  sub_100091AE8(__p, "MaxBackgroundAdvertisingTimeForSession");
  v11 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v10 + 88))(v10, buf, __p, &v101);
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
  {
    operator delete(*(void **)buf);
    if (!v11)
      goto LABEL_37;
  }
  else if (!v11)
  {
    goto LABEL_37;
  }
  v12 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v101 / 1000;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Warning: Overriding max background advertising time for session to %lld seconds", buf, 0xCu);
  }
  *(_QWORD *)(a1 + 16912) = v101;
  *(_BYTE *)(a1 + 16920) = 1;
LABEL_37:
  v102 = 0;
  v13 = sub_100027F68();
  sub_100091AE8(buf, "ADVDEBUG");
  sub_100091AE8(__p, "FakeBusyErrorOnADVStartCount");
  v14 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v13 + 88))(v13, buf, __p, &v102);
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
  {
    operator delete(*(void **)buf);
    if (!v14)
      goto LABEL_46;
  }
  else if (!v14)
  {
    goto LABEL_46;
  }
  v15 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v102;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Warning: Enabling fake OI_BUSY_FAIL on ADV start every %d start attempts", buf, 8u);
  }
  *(_WORD *)(a1 + 16970) = v102;
LABEL_46:
  v16 = sub_100027F68();
  sub_100091AE8(buf, "ADVDEBUG");
  sub_100091AE8(__p, "FakeADVUnsettledStateCount");
  v17 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v16 + 88))(v16, buf, __p, &v102);
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
  {
    operator delete(*(void **)buf);
    if (!v17)
      goto LABEL_55;
  }
  else if (!v17)
  {
    goto LABEL_55;
  }
  v18 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v102;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Warning: Enabling fake advertising unsettled state on ADV start every %d start attempts", buf, 8u);
  }
  *(_WORD *)(a1 + 16968) = v102;
LABEL_55:
  v19 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 408))(v19) & 1) == 0)
  {
    v20 = sub_100038E50();
    sub_10043B4A8(v20 + 728, a1 + 16);
  }
  v21 = sub_100038E50();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 152))(v21, a1 + 40);
  v101 = 0;
  v22 = sub_100027F68();
  sub_100091AE8(buf, "LeBroadcaster");
  sub_100091AE8(__p, "AdvertisementInterval");
  v23 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v22 + 88))(v22, buf, __p, &v101);
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
  {
    operator delete(*(void **)buf);
    if (!v23)
      goto LABEL_67;
  }
  else if (!v23)
  {
    goto LABEL_67;
  }
  v24 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "AdvertisementInterval defaults is now obsolete. Please use ConnectableAdvInt, NonConnectableAdvInt, ObjectDiscoveryAdvInt and ExtAdvInt instead", buf, 2u);
    v24 = qword_1009998B8;
  }
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    sub_10070EAF4();
LABEL_67:
  v25 = sub_100027F68();
  sub_100091AE8(buf, "LeBroadcaster");
  sub_100091AE8(__p, "ConnectableAdvInt");
  v26 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v25 + 88))(v25, buf, __p, &v101);
  if (v101)
    v27 = v26;
  else
    v27 = 0;
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
  {
    operator delete(*(void **)buf);
    if (!v27)
      goto LABEL_79;
  }
  else if (!v27)
  {
    goto LABEL_79;
  }
  v28 = qword_1009998B8;
  v29 = os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT);
  v30 = v101;
  if (v29)
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v101;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Enabling override value (%d) for connectable advertisement interval", buf, 8u);
    v30 = v101;
  }
  *(_WORD *)(v5 + 128) = v30;
LABEL_79:
  v31 = sub_100027F68();
  sub_100091AE8(buf, "LeBroadcaster");
  sub_100091AE8(__p, "NonConnectableAdvInt");
  v32 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v31 + 88))(v31, buf, __p, &v101);
  if (v101)
    v33 = v32;
  else
    v33 = 0;
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
  {
    operator delete(*(void **)buf);
    if (!v33)
      goto LABEL_91;
  }
  else if (!v33)
  {
    goto LABEL_91;
  }
  v34 = qword_1009998B8;
  v35 = os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT);
  v36 = v101;
  if (v35)
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v101;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Enabling override value (%d) for non connectable advertisement interval", buf, 8u);
    v36 = v101;
  }
  *(_WORD *)(v5 + 130) = v36;
LABEL_91:
  v37 = sub_100027F68();
  sub_100091AE8(buf, "LeBroadcaster");
  sub_100091AE8(__p, "ObjectDiscoveryAdvInt");
  v38 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v37 + 88))(v37, buf, __p, &v101);
  if (v101)
    v39 = v38;
  else
    v39 = 0;
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
  {
    operator delete(*(void **)buf);
    if (!v39)
      goto LABEL_107;
  }
  else if (!v39)
  {
    goto LABEL_107;
  }
  v40 = v101;
  v41 = qword_1009998B8;
  if (v101 <= 289)
  {
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v40;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = 290;
      _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "Cannot advertise with this interval (%d) for Object Discovery advertisement, setting this to %d", buf, 0xEu);
      v41 = qword_1009998B8;
    }
    v40 = 290;
    v101 = 290;
  }
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v40;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Enabling override value (%d) for Object Discovery advertisement interval", buf, 8u);
    LOWORD(v40) = v101;
  }
  *(_WORD *)(v5 + 132) = v40;
LABEL_107:
  v42 = sub_100027F68();
  sub_100091AE8(buf, "LeBroadcaster");
  sub_100091AE8(__p, "ExtAdvInt");
  v43 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v42 + 88))(v42, buf, __p, &v101);
  if (v101)
    v44 = v43;
  else
    v44 = 0;
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
  {
    operator delete(*(void **)buf);
    if (!v44)
      goto LABEL_119;
  }
  else if (!v44)
  {
    goto LABEL_119;
  }
  v45 = qword_1009998B8;
  v46 = os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT);
  v47 = v101;
  if (v46)
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v101;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Enabling override value (%d) for Extended advertisement interval", buf, 8u);
    v47 = v101;
  }
  *(_WORD *)(v5 + 134) = v47;
LABEL_119:
  v48 = sub_100027F68();
  sub_100091AE8(buf, "LeBroadcaster");
  sub_100091AE8(__p, "ContactAdvInt");
  v49 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v48 + 88))(v48, buf, __p, &v101);
  if (v101)
    v50 = v49;
  else
    v50 = 0;
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
  {
    operator delete(*(void **)buf);
    if (!v50)
      goto LABEL_131;
  }
  else if (!v50)
  {
    goto LABEL_131;
  }
  v51 = qword_1009998B8;
  v52 = os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT);
  v53 = v101;
  if (v52)
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v101;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Enabling override value (%d) for Contact advertisement interval", buf, 8u);
    v53 = v101;
  }
  *(_WORD *)(v5 + 136) = v53;
LABEL_131:
  v100 = 0;
  v54 = sub_100027F68();
  sub_100091AE8(buf, "LeBroadcaster");
  sub_100091AE8(__p, "AdvStatsInstance1");
  v55 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v54 + 88))(v54, buf, __p, &v100);
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
    operator delete(*(void **)buf);
  v56 = v100;
  if (!v55)
    v56 = 0;
  *(_BYTE *)(v5 + 174) = v56;
  v57 = sub_100027F68();
  sub_100091AE8(buf, "LeBroadcaster");
  sub_100091AE8(__p, "AdvStatsEnable1");
  v58 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v57 + 88))(v57, buf, __p, &v100);
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
    operator delete(*(void **)buf);
  v59 = v100;
  if (!v58)
    v59 = 1;
  *(_BYTE *)(v5 + 175) = v59;
  v60 = sub_100027F68();
  sub_100091AE8(buf, "LeBroadcaster");
  sub_100091AE8(__p, "AdvStatsReset1");
  v61 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v60 + 88))(v60, buf, __p, &v100);
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
    operator delete(*(void **)buf);
  v62 = v100;
  if (!v61)
    v62 = 1;
  *(_BYTE *)(v5 + 176) = v62;
  v63 = sub_100027F68();
  sub_100091AE8(buf, "LeBroadcaster");
  sub_100091AE8(__p, "AdvStatsPeriod1");
  v64 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v63 + 88))(v63, buf, __p, &v100);
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
    operator delete(*(void **)buf);
  v65 = v100;
  if (!v64)
    v65 = 60;
  *(_DWORD *)(v5 + 178) = v65;
  v66 = sub_100027F68();
  sub_100091AE8(buf, "LeBroadcaster");
  sub_100091AE8(__p, "AdvStatsCanWakeUpAP1");
  v67 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v66 + 88))(v66, buf, __p, &v100);
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
  {
    operator delete(*(void **)buf);
    if (v67)
      goto LABEL_159;
LABEL_161:
    *(_BYTE *)(v5 + 182) = 0;
    if (!(v64 | v61 | v58 | v55))
      goto LABEL_170;
    goto LABEL_162;
  }
  if (!v67)
    goto LABEL_161;
LABEL_159:
  v67 = v100;
  *(_BYTE *)(v5 + 182) = v100;
LABEL_162:
  v68 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    v69 = *(unsigned __int8 *)(v5 + 174);
    if (*(_BYTE *)(v5 + 175))
      v70 = "Y";
    else
      v70 = "N";
    if (*(_BYTE *)(v5 + 176))
      v71 = "Y";
    else
      v71 = "N";
    v72 = *(_DWORD *)(v5 + 178);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v69;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = v70;
    v107 = 2080;
    v108 = v71;
    v109 = 1024;
    v110 = v72;
    v111 = 1024;
    v112 = v67;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Enabling Adv Stats for instance %d enable %s reset %s period %d (secs) canWakeUpAP %d", buf, 0x28u);
  }
LABEL_170:
  v73 = sub_100027F68();
  sub_100091AE8(buf, "LeBroadcaster");
  sub_100091AE8(__p, "AdvStatsInstance2");
  v74 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v73 + 88))(v73, buf, __p, &v100);
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
    operator delete(*(void **)buf);
  v75 = v100;
  if (!v74)
    v75 = 1;
  *(_BYTE *)(v5 + 186) = v75;
  v76 = sub_100027F68();
  sub_100091AE8(buf, "LeBroadcaster");
  sub_100091AE8(__p, "AdvStatsEnable2");
  v77 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v76 + 88))(v76, buf, __p, &v100);
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
    operator delete(*(void **)buf);
  v78 = v100;
  if (!v77)
    v78 = 1;
  *(_BYTE *)(v5 + 187) = v78;
  v79 = sub_100027F68();
  sub_100091AE8(buf, "LeBroadcaster");
  sub_100091AE8(__p, "AdvStatsReset2");
  v80 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v79 + 88))(v79, buf, __p, &v100);
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
    operator delete(*(void **)buf);
  v81 = v100;
  if (!v80)
    v81 = 1;
  *(_BYTE *)(v5 + 188) = v81;
  v82 = sub_100027F68();
  sub_100091AE8(buf, "LeBroadcaster");
  sub_100091AE8(__p, "AdvStatsPeriod2");
  v83 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v82 + 88))(v82, buf, __p, &v100);
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
    operator delete(*(void **)buf);
  v84 = v100;
  if (!v83)
    v84 = 60;
  *(_DWORD *)(v5 + 190) = v84;
  v85 = sub_100027F68();
  sub_100091AE8(buf, "LeBroadcaster");
  sub_100091AE8(__p, "AdvStatsCanWakeUpAP2");
  v86 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v85 + 88))(v85, buf, __p, &v100);
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
  {
    operator delete(*(void **)buf);
    if (v86)
      goto LABEL_198;
LABEL_200:
    *(_BYTE *)(v5 + 194) = 0;
    if (!(v83 | v80 | v77 | v74))
      goto LABEL_209;
    goto LABEL_201;
  }
  if (!v86)
    goto LABEL_200;
LABEL_198:
  v86 = v100;
  *(_BYTE *)(v5 + 194) = v100;
LABEL_201:
  v87 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    v88 = *(unsigned __int8 *)(v5 + 186);
    if (*(_BYTE *)(v5 + 187))
      v89 = "Y";
    else
      v89 = "N";
    if (*(_BYTE *)(v5 + 188))
      v90 = "Y";
    else
      v90 = "N";
    v91 = *(_DWORD *)(v5 + 190);
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&buf[4] = v88;
    *(_WORD *)&buf[8] = 2080;
    *(_QWORD *)&buf[10] = v89;
    v107 = 2080;
    v108 = v90;
    v109 = 1024;
    v110 = v91;
    v111 = 1024;
    v112 = v86;
    _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "Enabling Adv Stats for instance %d enable %s reset %s period %d (secs) canWakeUpAP %d", buf, 0x28u);
  }
LABEL_209:
  v92 = sub_100027F68();
  sub_100091AE8(buf, "LeBroadcaster");
  sub_100091AE8(__p, "HoldStablePrivateAddressThreshold");
  v93 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v92 + 128))(v92, buf, __p, v5 + 202);
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
  {
    operator delete(*(void **)buf);
    if (!v93)
      goto LABEL_217;
  }
  else if (!v93)
  {
    goto LABEL_217;
  }
  v94 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    v95 = *(_DWORD *)(v5 + 202);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v95;
    _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "Warning: HoldStablePrivateAddressThreshold overridden to %u", buf, 8u);
  }
LABEL_217:
  v96 = sub_100027F68();
  sub_100091AE8(buf, "LeBroadcaster");
  sub_100091AE8(__p, "LeExtendStablePrivateAddressInterval");
  v97 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v96 + 128))(v96, buf, __p, v5 + 206);
  if (v104 < 0)
    operator delete(__p[0]);
  if (SBYTE3(v108) < 0)
  {
    operator delete(*(void **)buf);
    if (!v97)
      return;
  }
  else if (!v97)
  {
    return;
  }
  v98 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    v99 = *(_DWORD *)(v5 + 206);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v99;
    _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEFAULT, "Warning: LeExtendStablePrivateAddressInterval overriden to %u", buf, 8u);
  }
}

void sub_1005F8E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005F8F14(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  char v7;
  char v8;
  unsigned __int8 *v9;
  NSObject *v10;
  int v11;
  const char *v12;
  int v13;
  const char *v14;
  uint64_t v15;
  uint8_t buf[4];
  unsigned int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  const char *v27;

  v2 = sub_1000438A4();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 3352))(v2);
  v4 = result;
  v5 = 0;
  v6 = 0;
  v7 = 1;
  do
  {
    if (v6 >= v4)
      break;
    v8 = v7;
    v9 = (unsigned __int8 *)(a1 + 12 * v5 + 17048);
    if (*(_BYTE *)(a1 + 12 * v5 + 17049))
    {
      v10 = qword_1009998B8;
      if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *v9;
        if (*(_BYTE *)(a1 + 12 * v5 + 17050))
          v12 = "Y";
        else
          v12 = "N";
        v13 = *(_DWORD *)(a1 + 12 * v5 + 17052);
        if (*(_BYTE *)(a1 + 12 * v5 + 17056))
          v14 = "Y";
        else
          v14 = "N";
        *(_DWORD *)buf = 67110402;
        v17 = v6;
        v18 = 1024;
        v19 = v11;
        v20 = 2080;
        v21 = "Y";
        v22 = 2080;
        v23 = v12;
        v24 = 1024;
        v25 = v13;
        v26 = 2080;
        v27 = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Start %dth Adv Stats for instance %d enable %s reset %s period %d (secs) canWakeUpAP %s", buf, 0x32u);
      }
      v15 = sub_1000438A4();
      result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v15 + 1600))(v15, *v9, *(unsigned __int8 *)(a1 + 12 * v5 + 17049), *(unsigned __int8 *)(a1 + 12 * v5 + 17050), *(unsigned int *)(a1 + 12 * v5 + 17052), *(unsigned __int8 *)(a1 + 12 * v5 + 17056));
      ++v6;
      *(_BYTE *)(a1 + 17072) = 1;
    }
    v7 = 0;
    v5 = 1;
  }
  while ((v8 & 1) != 0);
  return result;
}

_BYTE *sub_1005F90E0(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  NSObject *v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v22[16];
  uint8_t buf[15];
  char v24;

  v24 = 0;
  sub_100043758(&v24);
  if (sub_100225224())
  {
    v2 = (_BYTE *)(a1 + 16873);
    if (*(_WORD *)(a1 + 16970))
      sub_10020861C(*(_WORD *)(a1 + 16970));
    v3 = sub_10003BE44();
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 480))(v3);
    *v2 = v4;
    if (*(_BYTE *)(a1 + 16874))
      v5 = v4;
    else
      v5 = 0;
    *(_BYTE *)(a1 + 16874) = v5;
    v6 = sub_100027F68();
    *(_BYTE *)(a1 + 16972) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 800))(v6, a1 + 16976);
    sub_1005F92FC(a1, 0);
    v7 = sub_10003BE44();
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 408))(v7);
    *(_BYTE *)(a1 + 16944) = 0;
    if (v8)
      v9 = 0;
    else
      v9 = 3;
    if (sub_100222F0C(v9, 1, (*(_DWORD *)(a1 + 136) & 0xFFFFFFFD) == 0, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1005F94F8)&& os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
    {
      sub_10070EB80();
    }
    *(_WORD *)(a1 + 16929) = 0;
    *(_QWORD *)(a1 + 16921) = 0;
    v10 = *v2;
    v11 = qword_1009998B8;
    v12 = os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (v12)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Skip Reading Legacy controller LE Advertising TX Power, will wait.", buf, 2u);
      }
    }
    else
    {
      if (v12)
      {
        *(_WORD *)v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Reading Legacy controller LE Advertising TX Power", v22, 2u);
      }
      sub_100191EC8(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    v20 = sub_100038E50();
    sub_100260C8C(v20 + 368, a1 + 32);
    *(_BYTE *)(a1 + 16945) = 0;
    if (sub_100224EA0((uint64_t (*)(_QWORD, _QWORD))sub_1005F9570, (uint64_t (*)(_QWORD, _QWORD))sub_1005F9628))
    {
      if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
        sub_10070EB20();
      sub_100253460();
    }
  }
  return sub_100043728(&v24);
}

void sub_1005F92E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_100043728(&a15);
  _Unwind_Resume(a1);
}

void sub_1005F92FC(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  unsigned int v5;
  const char *v6;
  const char *v7;
  int v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[44];

  v4 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 120);
    if (v5 > 3)
      v6 = "UNKNOWN";
    else
      v6 = off_10093CFF0[v5];
    if (a2 > 3)
      v7 = "UNKNOWN";
    else
      v7 = off_10093CFF0[a2];
    v8 = *(unsigned __int8 *)(a1 + 41);
    *(_DWORD *)v12 = 136447234;
    if (v8)
      v9 = "ON";
    else
      v9 = "OFF";
    *(_QWORD *)&v12[4] = v6;
    *(_WORD *)&v12[12] = 1024;
    *(_DWORD *)&v12[14] = v5;
    *(_WORD *)&v12[18] = 2082;
    *(_QWORD *)&v12[20] = v7;
    *(_WORD *)&v12[28] = 1024;
    *(_DWORD *)&v12[30] = a2;
    *(_WORD *)&v12[34] = 2082;
    *(_QWORD *)&v12[36] = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Advertising state change:  %{public}s(%d) --> %{public}s(%d) stack:%{public}s", v12, 0x2Cu);
  }
  *(_DWORD *)(a1 + 120) = a2;
  *(CFAbsoluteTime *)(a1 + 128) = CFAbsoluteTimeGetCurrent();
  switch(*(_DWORD *)(a1 + 120))
  {
    case 0:
    case 2:
      v10 = sub_10006BBEC();
      *(_QWORD *)v12 = _NSConcreteStackBlock;
      *(_QWORD *)&v12[8] = 3221225472;
      *(_QWORD *)&v12[16] = sub_100604838;
      *(_QWORD *)&v12[24] = &unk_1009173C0;
      *(_QWORD *)&v12[32] = a1;
      *(_DWORD *)&v12[40] = 1;
      sub_100041A34(v10, v12);
      sub_1005FC174(a1);
      break;
    case 1:
    case 3:
      v11 = sub_10006BBEC();
      *(_QWORD *)v12 = _NSConcreteStackBlock;
      *(_QWORD *)&v12[8] = 3221225472;
      *(_QWORD *)&v12[16] = sub_100604460;
      *(_QWORD *)&v12[24] = &unk_1009173C0;
      *(_QWORD *)&v12[32] = a1;
      *(_DWORD *)&v12[40] = 1;
      sub_100041A34(v11, v12);
      sub_1006052F0(a1);
      break;
    default:
      return;
  }
}

void sub_1005F94F8(int a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD v7[5];
  int v8;
  char v9;

  v6 = sub_1000419F4();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100604FA4;
  v7[3] = &unk_100926B98;
  v8 = a1;
  v7[4] = a2;
  v9 = a3;
  sub_100041A34(v6, v7);
}

void sub_1005F9570(int a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  int v7;

  v4 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109376;
    v5[1] = a2;
    v6 = 1024;
    v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "periodicAdvStartedCb advHandle=%d, status=%d", (uint8_t *)v5, 0xEu);
  }
}

void sub_1005F9628(int a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  int v7;

  v4 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109376;
    v5[1] = a2;
    v6 = 1024;
    v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "periodicAdvStoppedCb advHandle=%d, status=%d", (uint8_t *)v5, 0xEu);
  }
}

_BYTE *sub_1005F96E0(uint64_t a1)
{
  return sub_1005F90E0(a1 - 8);
}

void sub_1005F96E8(uint64_t a1)
{
  _BYTE *v1;

  v1 = (_BYTE *)(a1 + 16944);
  sub_1005F92FC(a1, 0);
  *v1 = 0;
  v1[128] = 0;
}

void sub_1005F9718(uint64_t a1)
{
  _BYTE *v1;

  v1 = (_BYTE *)(a1 + 16936);
  sub_1005F92FC(a1 - 8, 0);
  *v1 = 0;
  v1[128] = 0;
}

uint64_t sub_1005F974C(uint64_t result)
{
  if (!*(_QWORD *)(result + 16936))
    sub_10034FFF8();
  return result;
}

void sub_1005F9824(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16936);
  if (v1)
  {
    v3 = qword_1009998D8;
    if (!os_log_type_enabled((os_log_t)qword_1009998D8, OS_LOG_TYPE_DEFAULT)
      || (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1),
          v5 = 136446210,
          v6 = v4,
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Destroying %{public}s", (uint8_t *)&v5, 0xCu), (v1 = *(_QWORD *)(a1 + 16936)) != 0))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    }
    *(_QWORD *)(a1 + 16936) = 0;
  }
}

_BYTE *sub_1005F9900(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];
  char v5;

  v5 = 0;
  sub_100043758(&v5);
  if (sub_100225224())
  {
    if (sub_100221860((uint64_t)sub_1005F99D4))
    {
      if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
        sub_10070EBE0();
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 48);
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472;
      v4[2] = sub_1005F9B2C;
      v4[3] = &unk_100917378;
      v4[4] = a1;
      sub_100041A34(v2, v4);
    }
  }
  return sub_100043728(&v5);
}

void sub_1005F99BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100043728((_BYTE *)(v1 - 17));
  _Unwind_Resume(a1);
}

void sub_1005F99D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15[8];
  _QWORD v16[7];

  *(_DWORD *)&v15[3] = 0;
  *(_DWORD *)v15 = 0;
  sub_100073B84((uint64_t)v15);
  v12 = v15[1];
  v11 = v15[2];
  v0 = v15[3];
  v1 = v15[4];
  v2 = v15[5];
  v13 = v15[6];
  v14 = v15[0];
  sub_10022467C(1u, (uint64_t)v15);
  v3 = v15[1];
  v4 = v15[2];
  v5 = v15[3];
  v6 = v15[4];
  v7 = v15[5];
  v8 = v15[6];
  v9 = v15[0];
  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_10093CF40);
  v10 = *((_QWORD *)off_100977C28 + 6);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1005FA038;
  v16[3] = &unk_1009210D8;
  v16[4] = off_100977C28;
  v16[5] = (v12 << 40) | (v11 << 32) | (v0 << 24) | (v1 << 16) | (v2 << 8) | v13 | (v14 << 48);
  v16[6] = (v3 << 40) | (v4 << 32) | (v5 << 24) | (v6 << 16) | (v7 << 8) | v8 | (v9 << 48);
  sub_100041A34(v10, v16);
}

uint64_t sub_1005F9B2C(uint64_t a1)
{
  uint64_t v1;
  _QWORD **v2;
  NSObject *v3;
  unint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  _QWORD **v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD **v10;
  _QWORD **v12;
  _QWORD *v13[2];
  _QWORD **v14;
  _QWORD *v15[2];
  _QWORD v16[2];

  v1 = *(_QWORD *)(a1 + 32);
  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, v1 + 56);
  v14 = 0;
  v15[0] = 0;
  v15[1] = 0;
  sub_1006073E4((uint64_t *)&v14, v1 + 16824);
  v2 = v14;
  if (v14 != v15)
  {
    do
    {
      if (*((_DWORD *)v2[6] + 66) == 2)
      {
        v3 = qword_1009998B8;
        if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v12) = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "removing EN ADV", (uint8_t *)&v12, 2u);
        }
        v4 = (unint64_t)v2[4];
        sub_1005F9D30(v1, v4);
        v12 = 0;
        v13[0] = 0;
        v13[1] = 0;
        sub_10060763C((uint64_t *)&v12, v1 + 16880);
        v5 = v12;
        if (v12 != v13)
        {
          do
          {
            (*(void (**)(_QWORD *, unint64_t, uint64_t))(*v5[4] + 8))(v5[4], v4, 116);
            v6 = v5[1];
            if (v6)
            {
              do
              {
                v7 = (_QWORD **)v6;
                v6 = (_QWORD *)*v6;
              }
              while (v6);
            }
            else
            {
              do
              {
                v7 = (_QWORD **)v5[2];
                v8 = *v7 == v5;
                v5 = v7;
              }
              while (!v8);
            }
            v5 = v7;
          }
          while (v7 != v13);
        }
        sub_10001A82C((uint64_t)&v12, v13[0]);
      }
      v9 = v2[1];
      if (v9)
      {
        do
        {
          v10 = (_QWORD **)v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD **)v2[2];
          v8 = *v10 == v2;
          v2 = v10;
        }
        while (!v8);
      }
      v2 = v10;
    }
    while (v10 != v15);
  }
  sub_100607188((uint64_t)&v14, v15[0]);
  return sub_100034234((uint64_t)v16);
}

void sub_1005F9CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005F9D30(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t buf[8];

  v22 = a2;
  v3 = *(_QWORD **)(a1 + 16832);
  if (!v3)
    goto LABEL_12;
  v5 = (uint64_t **)(a1 + 16824);
  v6 = (uint64_t *)(a1 + 16832);
  do
  {
    v7 = v3[4];
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v3;
    else
      v9 = v3 + 1;
    if (v8)
      v6 = v3;
    v3 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 != (uint64_t *)(a1 + 16832) && v6[4] <= a2)
  {
    *(_QWORD *)buf = &v22;
    v12 = (uint64_t)sub_1006076F4((uint64_t **)(a1 + 16824), (unint64_t *)&v22, (uint64_t)&unk_100740F58, (uint64_t **)buf);
    v13 = (uint64_t *)v12;
    v14 = v12 + 40;
    v15 = *(_QWORD *)(v12 + 48);
    if (*(_BYTE *)(v15 + 308))
    {
      v16 = *(unsigned int *)(v15 + 264);
      if (*(_BYTE *)(a1 + v16 + 16921))
      {
        v17 = sub_10020691C(*(_DWORD *)(v15 + 264));
        v18 = sub_1000438A4();
        v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v18 + 2920))(v18, v17, 0, 1);
        if ((v12 & 0xFFFFFFFD) != 0)
        {
          v12 = os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v12)
            sub_10070EDA8();
        }
        v15 = v13[6];
        *(_BYTE *)(a1 + *(unsigned int *)(v15 + 264) + 16921) = 0;
      }
      else
      {
        v19 = qword_1009998B8;
        v12 = os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v12)
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v16;
          _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Cannot disable ObjectLocator response on handle %d", buf, 8u);
          v15 = v13[6];
        }
      }
    }
    if (*(_BYTE *)(v15 + 409))
    {
      if (*(_BYTE *)(a1 + *(unsigned int *)(v15 + 264) + 16926))
      {
        v20 = sub_10020691C(*(_DWORD *)(v15 + 264));
        v21 = sub_1000438A4();
        v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v21 + 1896))(v21, 2, v20, 0, 0, 0);
        if ((v12 & 0xFFFFFFFD) != 0)
        {
          v12 = os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v12)
            sub_10070ED48();
        }
        else
        {
          *(_BYTE *)(a1 + *(unsigned int *)(v13[6] + 264) + 16926) = 0;
        }
      }
      else
      {
        v12 = os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v12)
          sub_10070ECE8();
      }
    }
    sub_1005FE73C(v12, v14, 0);
    sub_1006077BC(v5, v6);
    sub_1005FE810((_QWORD *)a1, v22);
    return 0;
  }
  else
  {
LABEL_12:
    v10 = qword_1009998B8;
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
      sub_10070EC40(a2, v10);
    return 3;
  }
}

_BYTE *sub_1005FA030(uint64_t a1)
{
  return sub_1005F9900(a1 - 8);
}

uint64_t sub_1005FA038(_QWORD *a1)
{
  uint64_t v2;
  _QWORD **v3;
  NSObject *v4;
  void *p_p;
  unint64_t v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD **v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD **v12;
  uint64_t v13;
  _QWORD v15[5];
  void *__p;
  _QWORD *v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD *v20[2];
  _QWORD v21[2];
  uint8_t buf[4];
  void *v23;

  v2 = a1[4];
  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, v2 + 56);
  if (*(_BYTE *)(v2 + 16944))
  {
    v19 = 0;
    v20[0] = 0;
    v20[1] = 0;
    sub_1006073E4((uint64_t *)&v19, v2 + 16824);
    v3 = v19;
    if (v19 != v20)
    {
      do
      {
        if (*((_BYTE *)v3[6] + 307))
        {
          v4 = qword_1009998B8;
          if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
          {
            sub_1000340DC((uint64_t)v3[4], (uint64_t)&__p);
            p_p = &__p;
            if (v18 < 0)
              p_p = __p;
            *(_DWORD *)buf = 136446210;
            v23 = p_p;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Notifying session %{public}s that advertising stopped due to address change", buf, 0xCu);
            if (SHIBYTE(v18) < 0)
              operator delete(__p);
          }
          v6 = (unint64_t)v3[4];
          sub_1005F9D30(v2, v6);
          __p = 0;
          v17 = 0;
          v18 = 0;
          sub_10060763C((uint64_t *)&__p, v2 + 16880);
          v7 = (_QWORD **)__p;
          if (__p != &v17)
          {
            do
            {
              (*(void (**)(_QWORD *, unint64_t, uint64_t))(*v7[4] + 8))(v7[4], v6, 116);
              v8 = v7[1];
              if (v8)
              {
                do
                {
                  v9 = (_QWORD **)v8;
                  v8 = (_QWORD *)*v8;
                }
                while (v8);
              }
              else
              {
                do
                {
                  v9 = (_QWORD **)v7[2];
                  v10 = *v9 == v7;
                  v7 = v9;
                }
                while (!v10);
              }
              v7 = v9;
            }
            while (v9 != &v17);
          }
          sub_10001A82C((uint64_t)&__p, v17);
        }
        v11 = v3[1];
        if (v11)
        {
          do
          {
            v12 = (_QWORD **)v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (_QWORD **)v3[2];
            v10 = *v12 == v3;
            v3 = v12;
          }
          while (!v10);
        }
        v3 = v12;
      }
      while (v12 != v20);
    }
    sub_100607188((uint64_t)&v19, v20[0]);
  }
  *(_BYTE *)(v2 + 16944) = 0;
  sub_1005FA324(v2, a1[5], 0);
  sub_1005FA324(v2, a1[6], 1u);
  v13 = *(_QWORD *)(v2 + 48);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1005FA3C4;
  v15[3] = &unk_100917378;
  v15[4] = v2;
  sub_100041A34(v13, v15);
  return sub_100034234((uint64_t)v21);
}

void sub_1005FA2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005FA324(uint64_t a1, uint64_t a2, unsigned int a3)
{
  __int128 v4;
  id v5;
  __int128 v6;
  id v7;

  *((_QWORD *)&v6 + 1) = a2;
  *(_QWORD *)&v6 = a3;
  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](NSDate, "now"));
  sub_1005FBC78(a1 + 17024, (uint64_t)&v6);
  if (*(_QWORD *)(a1 + 17040) >= 0x33uLL)
    sub_1005FBCD4((uint64_t **)(a1 + 17024));
  v4 = v6;
  v5 = v7;
  sub_1005FBD18((uint64_t)v5, (uint64_t)&v4);

}

void sub_1005FA3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1005FA3C4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_10093CF40);
  return sub_1005FA418((uint64_t)off_100977C28, *(_BYTE *)(v1 + 16945));
}

uint64_t sub_1005FA418(uint64_t a1, char a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  int v10;
  char v11;
  int v12;
  BOOL v13;
  char v15;
  _QWORD *v16;
  _BOOL4 v17;
  NSObject *v18;
  uint8_t *v19;
  _QWORD *v20;
  _QWORD **v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  _BOOL4 v31;
  NSObject *v37;
  _WORD *v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  NSObject *v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  int v51;
  int v53;
  int v54;
  int v58;
  int v60;
  int v61;
  int v62;
  int v63;
  NSObject *v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  char *v69;
  _QWORD *v70;
  _QWORD *v71;
  char *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  void *v81;
  uint64_t v82;
  _QWORD *v83;
  BOOL v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  __int128 *v89;
  uint64_t v90;
  uint8_t *v91;
  const char *v92;
  uint64_t v93;
  uint64_t *v94;
  void *p_p;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  __int128 *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t *v102;
  uint64_t *v103;
  void *v104;
  uint64_t v105;
  unsigned int v106;
  void *v107;
  uint64_t v108;
  _QWORD *v109;
  const char *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  unsigned int v114;
  void *v115;
  uint64_t v116;
  _QWORD *v117;
  const char *v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  unsigned int v122;
  void *v123;
  uint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  _QWORD *v127;
  _WORD *v128;
  _QWORD *v129;
  _WORD *v130;
  _QWORD *v131;
  _WORD *v132;
  _QWORD *v133;
  _WORD *v134;
  _QWORD *v135;
  _WORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _WORD *v140;
  _BYTE *v141;
  uint64_t *v142;
  uint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  NSObject *v146;
  void **v147;
  int v148;
  NSObject *v149;
  _BOOL4 v150;
  NSObject *v151;
  uint64_t v152;
  int v153;
  uint64_t v155;
  const char *v156;
  _BYTE *v157;
  unsigned int v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  unsigned __int8 v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _BOOL4 v167;
  _QWORD v168[5];
  void *__p;
  uint64_t v170;
  unsigned __int8 v171;
  uint64_t *v172;
  _QWORD *v173;
  uint64_t v174;
  void *v175;
  _BYTE *v176;
  uint64_t v177;
  void *v178;
  _BYTE *v179;
  uint64_t v180;
  void *v181;
  _BYTE *v182;
  uint64_t v183;
  void *v184;
  _BYTE *v185;
  uint64_t v186;
  _QWORD **v187;
  _QWORD *v188[2];
  _QWORD v189[5];
  _QWORD v190[2];
  __int128 v191;
  unsigned __int8 v192;
  uint8_t buf[80];
  __int128 v194;
  __int128 v195;
  __int128 v196;
  _BYTE v197[144];
  uint64_t v198;
  __int128 v199;
  uint64_t v200;
  _WORD __src[8340];

  bzero(__src, 0x4128uLL);
  v190[0] = 0;
  v190[1] = 0;
  sub_10003415C((uint64_t)v190, a1 + 56);
  if (*(_BYTE *)(a1 + 41))
  {
    if ((a2 & 1) == 0 && *(_BYTE *)(a1 + 16945))
    {
      if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEBUG))
        sub_10070F05C();
      return sub_100034234((uint64_t)v190);
    }
    if ((*(_DWORD *)(a1 + 120) | 2) == 2)
    {
      v4 = qword_1009998B8;
      if (*(_BYTE *)(a1 + 16944))
      {
        if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "updateAdvertisement busy with address change, will try again later", buf, 2u);
        }
        v5 = sub_10006BBEC();
        *(_QWORD *)buf = _NSConcreteStackBlock;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = sub_100604460;
        *(_QWORD *)&buf[24] = &unk_1009173C0;
        *(_QWORD *)&buf[32] = a1;
        *(_DWORD *)&buf[40] = 0;
        sub_100041A34(v5, buf);
        return sub_100034234((uint64_t)v190);
      }
      if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEBUG))
        sub_10070EFA8(a2, a1, v4);
      v8 = sub_10006BBEC();
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_100604838;
      *(_QWORD *)&buf[24] = &unk_1009173C0;
      *(_QWORD *)&buf[32] = a1;
      *(_DWORD *)&buf[40] = 0;
      sub_100041A34(v8, buf);
      v157 = (_BYTE *)(a1 + 16944);
      *(_BYTE *)(a1 + 16945) = 0;
      v187 = 0;
      v188[0] = 0;
      v188[1] = 0;
      sub_1006073E4((uint64_t *)&v187, a1 + 16824);
      v9 = v187;
      v159 = a1;
      v10 = 0;
      if (v187 == v188)
      {
        v22 = 1;
      }
      else
      {
        v11 = 0;
        while (1)
        {
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_10093CEE0);
          v12 = sub_10006F6A4((uint64_t)off_100978168, (unint64_t)v9[4]);
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_10093CEE0);
          v13 = sub_10006EB5C((uint64_t)off_100978168, (unint64_t)v9[4]);
          _ZF = (v12 & 0x30) != 0 || v12 == 1;
          v15 = _ZF || v13;
          if ((v15 & 1) != 0)
            break;
          v16 = v9[6];
          v17 = *((_DWORD *)v16 + 66) == 2;
          if (*((_BYTE *)v16 + 360))
          {
            v18 = qword_1009998B8;
            if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
            {
              sub_1000340DC((uint64_t)v9[4], (uint64_t)buf);
              v19 = buf;
              if ((buf[23] & 0x80u) != 0)
                v19 = *(uint8_t **)buf;
              LODWORD(v199) = 136446210;
              *(_QWORD *)((char *)&v199 + 4) = v19;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" requires power assertion", (uint8_t *)&v199, 0xCu);
              if ((char)buf[23] < 0)
                operator delete(*(void **)buf);
            }
            v11 = 1;
          }
          v20 = v9[1];
          if (v20)
          {
            do
            {
              v21 = (_QWORD **)v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v21 = (_QWORD **)v9[2];
              _ZF = *v21 == v9;
              v9 = v21;
            }
            while (!_ZF);
          }
          v10 |= v17;
          v9 = v21;
          if (v21 == v188)
            goto LABEL_47;
        }
        v10 = 1;
LABEL_47:
        v22 = v10 ^ 1;
        if ((v11 & 1) != 0 && (v10 & 1) != 0)
        {
          sub_1005F974C(a1);
          goto LABEL_51;
        }
      }
      sub_1005F9824(a1);
LABEL_51:
      if (!*(_DWORD *)(a1 + 136))
      {
        if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
          sub_10070EE90();
        goto LABEL_255;
      }
      v199 = 0uLL;
      v200 = 0;
      v184 = 0;
      v185 = 0;
      v186 = 0;
      v181 = 0;
      v182 = 0;
      v183 = 0;
      v178 = 0;
      v179 = 0;
      v180 = 0;
      v175 = 0;
      v176 = 0;
      v177 = 0;
      v173 = 0;
      v174 = 0;
      v172 = (uint64_t *)&v173;
      if (sub_100222DA4())
        v23 = sub_100222DA4();
      else
        v23 = 1;
      sub_100600980(a1, &v187, __src, v23, &v199, (uint64_t)&v184, &v181, &v178, &v175, &v172);
      v162 = v10;
      v158 = v23;
      v160 = v22;
      if (v23)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v166 = a1 + 6788;
        v164 = 3336 * v23;
        while (1)
        {
          _X22 = &__src[v24 / 2 + 3322];
          _X26 = v166 + v24;
          v29 = (unsigned __int8 *)&__src[v24 / 2];
          v30 = (unsigned __int8 *)(a1 + v24);
          v31 = sub_100604368(a1, (unsigned __int8 *)&__src[v24 / 2], (unsigned __int8 *)(a1 + v24 + 144));
          __asm
          {
            PRFM            #0, [X26]
            PRFM            #0, [X22]
          }
          v167 = v31;
          if (v31)
          {
            v37 = qword_1009998C0;
            if (os_log_type_enabled((os_log_t)qword_1009998C0, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v25;
              _os_log_debug_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "Advertising instance %d changed:", buf, 8u);
              v37 = qword_1009998C0;
            }
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
            {
              _X8 = v30 + 3481;
              __asm { PRFM            #0, [X8] }
              _X8 = v29 + 3337;
              v51 = *(unsigned __int8 *)(a1 + v24 + 145);
              __asm { PRFM            #0, [X8] }
              LODWORD(_X8) = HIBYTE(__src[v24 / 2]);
              v53 = *(unsigned __int16 *)(a1 + v24 + 146);
              v54 = (unsigned __int16)__src[v24 / 2 + 1];
              *(_DWORD *)buf = 67109888;
              *(_DWORD *)&buf[4] = v51;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = (_DWORD)_X8;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&buf[16] = v53;
              *(_WORD *)&buf[20] = 1024;
              *(_DWORD *)&buf[22] = v54;
              _os_log_debug_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "\ttype:%d-->%d interval:%d-->%d", buf, 0x1Au);
              v37 = qword_1009998C0;
            }
            v38 = &__src[v24 / 2];
            v39 = a1;
            v40 = a1 + v24;
            v41 = memcmp((char *)&__src[v24 / 2 + 2] + 1, (const void *)(a1 + v24 + 149), 0x672uLL);
            *((_BYTE *)v38 + 3319) = v41 != 0;
            v42 = memcmp(&__src[v24 / 2 + 829], (const void *)(v40 + 1802), 0x672uLL);
            *((_BYTE *)v38 + 3320) = v42 != 0;
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&buf[4] = v41 != 0;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v42 != 0;
              _os_log_debug_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "AdvDataChanged:%d scanDataChanged:%d", buf, 0xEu);
            }
            a1 = v39;
            if (v25 == 2)
            {
              v43 = sub_100027F68();
              if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 184))(v43))
                goto LABEL_79;
            }
            v44 = qword_1009998C0;
            if (os_log_type_enabled((os_log_t)qword_1009998C0, OS_LOG_TYPE_DEBUG))
            {
              _X8 = v30 + 5136;
              __asm { PRFM            #0, [X8] }
              _X8 = v29 + 4992;
              v58 = *(unsigned __int16 *)(v39 + v24 + 1800);
              __asm { PRFM            #0, [X8] }
              LODWORD(_X8) = (unsigned __int16)__src[v24 / 2 + 828];
              *(_DWORD *)buf = 68158978;
              *(_DWORD *)&buf[4] = v58;
              *(_WORD *)&buf[8] = 2096;
              *(_QWORD *)&buf[10] = v39 + v24 + 149;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v58;
              *(_WORD *)&buf[24] = 1040;
              *(_DWORD *)&buf[26] = (_DWORD)_X8;
              *(_WORD *)&buf[30] = 2096;
              *(_QWORD *)&buf[32] = (char *)&__src[v24 / 2 + 2] + 1;
              *(_WORD *)&buf[40] = 1024;
              *(_DWORD *)&buf[42] = (_DWORD)_X8;
              _os_log_debug_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "\tAdvertising Data:%.*P(%d)-->%.*P(%d)", buf, 0x2Eu);
              v44 = qword_1009998C0;
            }
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
            {
              v60 = *(unsigned __int16 *)(v39 + v24 + 3452);
              v61 = (unsigned __int16)__src[v24 / 2 + 1654];
              *(_DWORD *)buf = 68158978;
              *(_DWORD *)&buf[4] = v60;
              *(_WORD *)&buf[8] = 2096;
              *(_QWORD *)&buf[10] = v39 + v24 + 1802;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v60;
              *(_WORD *)&buf[24] = 1040;
              *(_DWORD *)&buf[26] = v61;
              *(_WORD *)&buf[30] = 2096;
              *(_QWORD *)&buf[32] = &__src[v24 / 2 + 829];
              *(_WORD *)&buf[40] = 1024;
              *(_DWORD *)&buf[42] = v61;
              _os_log_debug_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "\tScan Response:%.*P(%d)-->%.*P(%d)", buf, 0x2Eu);
              v44 = qword_1009998C0;
            }
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
            {
              v62 = *(unsigned __int8 *)(v39 + v24 + 3454);
              v63 = *(unsigned __int8 *)(v39 + v24 + 3461);
              *(_DWORD *)buf = 68158466;
              *(_DWORD *)&buf[4] = 6;
              *(_WORD *)&buf[8] = 2096;
              *(_QWORD *)&buf[10] = v39 + v24 + 3455;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v62;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = v63;
              _os_log_debug_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "\tadvertising address:%.6P type:%d override:%d", buf, 0x1Eu);
            }
          }
          v45 = ((unint64_t)v29[3311] << 40) | ((unint64_t)v29[3312] << 32) | ((unint64_t)v29[3313] << 24) | ((unint64_t)v29[3314] << 16) | ((unint64_t)v29[3315] << 8) | v29[3316];
          v46 = v45 | ((unint64_t)v29[3310] << 48);
          if (v45)
            v47 = v46 == (((unint64_t)v30[3455] << 40) | ((unint64_t)v30[3456] << 32) | ((unint64_t)v30[3457] << 24) | ((unint64_t)v30[3458] << 16) | ((unint64_t)v30[3459] << 8) | v30[3460] | ((unint64_t)v30[3454] << 48));
          else
            v47 = 1;
          if (!v47)
            sub_1005FA324(a1, v46, v25);
LABEL_79:
          v26 |= v167;
          ++v25;
          v24 += 3336;
          if (v164 == v24)
            goto LABEL_82;
        }
      }
      v26 = 0;
LABEL_82:
      v64 = qword_1009998B8;
      if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEBUG))
      {
        v155 = *(int *)(a1 + 120);
        if (v155 > 3)
          v156 = "UNKNOWN";
        else
          v156 = off_10093CFF0[v155];
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = v156;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v26 & 1;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v162 & 1;
        _os_log_debug_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "fAdvertisementState:%{public}s dataChanged:%d validSession:%d", buf, 0x18u);
      }
      v65 = *(_DWORD *)(a1 + 120);
      if (((v65 == 0) & v162) == 1)
      {
        if (v158)
        {
          v66 = 0;
          while (1)
          {
            v198 = 0;
            v196 = 0u;
            memset(v197, 0, sizeof(v197));
            v194 = 0u;
            v195 = 0u;
            memset(buf, 0, sizeof(buf));
            sub_1002613AC((uint64_t)buf);
            v67 = (unint64_t)&__src[1668 * v66];
            v68 = *(unsigned __int16 *)(v67 + 2);
            v69 = v68 >= 0x4000 ? "Not " : "";
            v70 = sub_1002614D8(&buf[16], (uint64_t)v69, 4 * ((v68 & 0xC000) != 0));
            v71 = sub_1002614D8(v70, (uint64_t)"Starting ", 9);
            v72 = v66 ? "Non " : "";
            v73 = sub_1002614D8(v71, (uint64_t)v72, 4 * (v66 != 0));
            v74 = sub_1002614D8(v73, (uint64_t)"Connectable advertisement instance ", 35);
            v75 = (_QWORD *)std::ostream::operator<<(v74, v66);
            sub_1002614D8(v75, (uint64_t)" with ", 6);
            if (!v66)
              break;
            switch((_DWORD)v66)
            {
              case 2:
                if (!v174)
                {
                  v85 = "no service data, ";
                  v86 = 17;
                  goto LABEL_189;
                }
                sub_1002614D8(&buf[16], (uint64_t)"service Data [ ", 15);
                v94 = v172;
                if (v172 != (uint64_t *)&v173)
                {
                  do
                  {
                    sub_10006887C((uint64_t)(v94 + 4), &__p);
                    if ((v171 & 0x80u) == 0)
                      p_p = &__p;
                    else
                      p_p = __p;
                    if ((v171 & 0x80u) == 0)
                      v96 = v171;
                    else
                      v96 = v170;
                    v97 = sub_1002614D8(&buf[16], (uint64_t)p_p, v96);
                    v98 = sub_1002614D8(v97, (uint64_t)"(", 1);
                    sub_1000453F0((uint64_t)(v94 + 7), &v191);
                    if ((v192 & 0x80u) == 0)
                      v99 = &v191;
                    else
                      v99 = (__int128 *)v191;
                    if ((v192 & 0x80u) == 0)
                      v100 = v192;
                    else
                      v100 = *((_QWORD *)&v191 + 1);
                    v101 = sub_1002614D8(v98, (uint64_t)v99, v100);
                    sub_1002614D8(v101, (uint64_t)") ", 2);
                    if ((char)v192 < 0)
                      operator delete((void *)v191);
                    if ((char)v171 < 0)
                      operator delete(__p);
                    v102 = (uint64_t *)v94[1];
                    if (v102)
                    {
                      do
                      {
                        v103 = v102;
                        v102 = (uint64_t *)*v102;
                      }
                      while (v102);
                    }
                    else
                    {
                      do
                      {
                        v103 = (uint64_t *)v94[2];
                        _ZF = *v103 == (_QWORD)v94;
                        v94 = v103;
                      }
                      while (!_ZF);
                    }
                    v94 = v103;
                  }
                  while (v103 != (uint64_t *)&v173);
                }
LABEL_185:
                v85 = "], ";
                v86 = 3;
                goto LABEL_189;
              case 3:
                v85 = "ObjectDiscovery Data, ";
                v86 = 22;
LABEL_189:
                sub_1002614D8(&buf[16], (uint64_t)v85, v86);
                break;
              case 4:
                v76 = v175;
                v77 = v176 - (_BYTE *)v175;
                if (v176 == v175)
                {
                  v85 = "no extended UUIDs, ";
                  v86 = 19;
                }
                else
                {
                  sub_1002614D8(&buf[16], (uint64_t)"extended UUID(s) [ ", 19);
                  v78 = 0;
                  v79 = 0xCCCCCCCCCCCCCCCDLL * (v77 >> 2);
                  v80 = 1;
                  do
                  {
                    sub_10006887C((uint64_t)v76 + 20 * v78, &__p);
                    if ((v171 & 0x80u) == 0)
                      v81 = &__p;
                    else
                      v81 = __p;
                    if ((v171 & 0x80u) == 0)
                      v82 = v171;
                    else
                      v82 = v170;
                    v83 = sub_1002614D8(&buf[16], (uint64_t)v81, v82);
                    sub_1002614D8(v83, (uint64_t)" ", 1);
                    if ((char)v171 < 0)
                      operator delete(__p);
                    v78 = v80;
                    v84 = v79 > v80++;
                  }
                  while (v84);
                  v85 = "], ";
                  v86 = 3;
                }
                goto LABEL_189;
            }
            sub_1002614D8(&buf[16], (uint64_t)"an interval of ", 15);
            LOWORD(v126) = *(_WORD *)(v67 | 2);
            v127 = (_QWORD *)std::ostream::operator<<((double)v126 * 0.625);
            sub_1002614D8(v127, (uint64_t)"ms", 2);
            v128 = &__src[1668 * v66];
            if (*((_BYTE *)v128 + 3321))
            {
              v129 = sub_1002614D8(&buf[16], (uint64_t)"primaryPHY ", 11);
              std::ostream::operator<<(v129, *((unsigned __int8 *)v128 + 3321));
            }
            v130 = &__src[1668 * v66];
            if (*((_BYTE *)v130 + 3322))
            {
              v131 = sub_1002614D8(&buf[16], (uint64_t)"secondaryPHY ", 13);
              std::ostream::operator<<(v131, *((unsigned __int8 *)v130 + 3322));
            }
            v132 = &__src[1668 * v66];
            if (*((_BYTE *)v132 + 3323))
            {
              v133 = sub_1002614D8(&buf[16], (uint64_t)"primaryPhyOptions ", 18);
              std::ostream::operator<<(v133, *((unsigned __int8 *)v132 + 3323));
            }
            v134 = &__src[1668 * v66];
            if (*((_BYTE *)v134 + 3324))
            {
              v135 = sub_1002614D8(&buf[16], (uint64_t)"secondaryPhyOptions ", 20);
              std::ostream::operator<<(v135, *((unsigned __int8 *)v134 + 3324));
            }
            sub_1000438A4();
            if (sub_100049F50())
            {
              if (_os_feature_enabled_impl("BluetoothFeatures", "LeDecisionBasedAdvFiltering"))
              {
                v136 = &__src[1668 * v66];
                if (*((_BYTE *)v136 + 3325))
                {
                  v137 = sub_1002614D8(&buf[16], (uint64_t)" useDecisionBasedAdvPayload ", 28);
                  std::ostream::operator<<(v137, *((unsigned __int8 *)v136 + 3325));
                  v138 = sub_1002614D8(&buf[16], (uint64_t)" DBAFDecisionTypeFlags ", 23);
                  std::ostream::operator<<(v138, LOBYTE(__src[1668 * v66 + 1663]));
                  v139 = sub_1002614D8(&buf[16], (uint64_t)" DBAFDecisionDataLength ", 24);
                  v140 = &__src[1668 * v66];
                  std::ostream::operator<<(v139, *((unsigned __int8 *)v140 + 3327));
                  v141 = (char *)v140 + 3327;
                  if (*v141)
                  {
                    v142 = sub_1002614D8(&buf[16], (uint64_t)" DBAFDecisionData ", 18);
                    v143 = *v142;
                    *(_DWORD *)((char *)v142 + *(_QWORD *)(*v142 - 24) + 8) = *(_DWORD *)((_BYTE *)v142
                                                                                        + *(_QWORD *)(*v142 - 24)
                                                                                        + 8) & 0xFFFFFFB5 | 8;
                    *(_DWORD *)((char *)v142 + *(_QWORD *)(v143 - 24) + 8) |= 0x4000u;
                    LOBYTE(__p) = 48;
                    sub_1003CDCD4(v142, (unsigned __int8 *)&__p);
                    if (*v141)
                    {
                      v144 = 0;
                      do
                      {
                        *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)&buf[16] - 24) + 40] = 2;
                        LOBYTE(__p) = *(_BYTE *)(*(_QWORD *)&__src[1668 * v66 + 1664] + v144);
                        v145 = sub_1002614D8(&buf[16], (uint64_t)&__p, 1);
                        sub_1002614D8(v145, (uint64_t)" ", 1);
                        ++v144;
                      }
                      while (v144 < *v141);
                    }
                  }
                }
              }
            }
            v146 = qword_1009998B8;
            if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_INFO))
            {
              std::stringbuf::str(&buf[24]);
              v147 = (v171 & 0x80u) == 0 ? &__p : (void **)__p;
              LODWORD(v191) = 136446210;
              *(_QWORD *)((char *)&v191 + 4) = v147;
              _os_log_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_INFO, "%{public}s", (uint8_t *)&v191, 0xCu);
              if ((char)v171 < 0)
                operator delete(__p);
            }
            *(_QWORD *)buf = v165;
            *(_QWORD *)&buf[*(_QWORD *)(v165 - 24)] = v163;
            *(_QWORD *)&buf[16] = v161;
            if (SHIBYTE(v195) < 0)
              operator delete(*((void **)&v194 + 1));
            std::streambuf::~streambuf(&buf[24]);
            std::ios::~ios(v197);
            if (++v66 == v158)
              goto LABEL_214;
          }
          v87 = HIBYTE(v200);
          if (v200 < 0)
            v87 = *((_QWORD *)&v199 + 1);
          if (v87)
          {
            v88 = sub_1002614D8(&buf[16], (uint64_t)"name \"", 6);
            if (v200 >= 0)
              v89 = &v199;
            else
              v89 = (__int128 *)v199;
            if (v200 >= 0)
              v90 = HIBYTE(v200);
            else
              v90 = *((_QWORD *)&v199 + 1);
            v91 = (uint8_t *)sub_1002614D8(v88, (uint64_t)v89, v90);
            v92 = "\", ";
            v93 = 3;
          }
          else
          {
            v91 = &buf[16];
            v92 = "no name, ";
            v93 = 9;
          }
          sub_1002614D8(v91, (uint64_t)v92, v93);
          if (v185 == v184)
          {
            v110 = "no advertised UUIDs, ";
            v111 = 21;
          }
          else
          {
            sub_1002614D8(&buf[16], (uint64_t)"advertised UUID(s) [ ", 21);
            v104 = v184;
            if (v185 != v184)
            {
              v105 = 0;
              v106 = 1;
              do
              {
                sub_10006887C((uint64_t)v104 + 20 * v105, &__p);
                if ((v171 & 0x80u) == 0)
                  v107 = &__p;
                else
                  v107 = __p;
                if ((v171 & 0x80u) == 0)
                  v108 = v171;
                else
                  v108 = v170;
                v109 = sub_1002614D8(&buf[16], (uint64_t)v107, v108);
                sub_1002614D8(v109, (uint64_t)" ", 1);
                if ((char)v171 < 0)
                  operator delete(__p);
                v105 = v106;
                v104 = v184;
                v84 = 0xCCCCCCCCCCCCCCCDLL * ((v185 - (_BYTE *)v184) >> 2) > v106++;
              }
              while (v84);
            }
            v110 = "], ";
            v111 = 3;
          }
          sub_1002614D8(&buf[16], (uint64_t)v110, v111);
          if (v182 == v181)
          {
            v118 = "no hashed UUIDs, ";
            v119 = 17;
          }
          else
          {
            sub_1002614D8(&buf[16], (uint64_t)"hashed UUID(s) [ ", 17);
            v112 = v181;
            if (v182 != v181)
            {
              v113 = 0;
              v114 = 1;
              do
              {
                sub_10006887C((uint64_t)v112 + 20 * v113, &__p);
                if ((v171 & 0x80u) == 0)
                  v115 = &__p;
                else
                  v115 = __p;
                if ((v171 & 0x80u) == 0)
                  v116 = v171;
                else
                  v116 = v170;
                v117 = sub_1002614D8(&buf[16], (uint64_t)v115, v116);
                sub_1002614D8(v117, (uint64_t)" ", 1);
                if ((char)v171 < 0)
                  operator delete(__p);
                v113 = v114;
                v112 = v181;
                v84 = 0xCCCCCCCCCCCCCCCDLL * ((v182 - (_BYTE *)v181) >> 2) > v114++;
              }
              while (v84);
            }
            v118 = "], ";
            v119 = 3;
          }
          sub_1002614D8(&buf[16], (uint64_t)v118, v119);
          if (v179 == v178)
          {
            v85 = "and no solicited UUIDs, ";
            v86 = 24;
            goto LABEL_189;
          }
          sub_1002614D8(&buf[16], (uint64_t)"and solicited UUID(s) [ ", 24);
          v120 = v178;
          if (v179 != v178)
          {
            v121 = 0;
            v122 = 1;
            do
            {
              sub_10006887C((uint64_t)v120 + 20 * v121, &__p);
              if ((v171 & 0x80u) == 0)
                v123 = &__p;
              else
                v123 = __p;
              if ((v171 & 0x80u) == 0)
                v124 = v171;
              else
                v124 = v170;
              v125 = sub_1002614D8(&buf[16], (uint64_t)v123, v124);
              sub_1002614D8(v125, (uint64_t)" ", 1);
              if ((char)v171 < 0)
                operator delete(__p);
              v121 = v122;
              v120 = v178;
              v84 = 0xCCCCCCCCCCCCCCCDLL * ((v179 - (_BYTE *)v178) >> 2) > v122++;
            }
            while (v84);
          }
          goto LABEL_185;
        }
LABEL_214:
        buf[0] = 0;
        sub_100043758(buf);
        v148 = sub_100222020(__src, v158, 0, (uint64_t (*)(_QWORD, _QWORD))sub_100604894, 0);
        if (v148 == 118)
          sub_100221D68(1);
        sub_10004339C(buf);
        if (v148)
        {
          if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
            sub_10070EEE8();
          if (v148 == 4073)
          {
            *v157 = 1;
          }
          else if (v148 == 118)
          {
            if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
              sub_10070EEBC();
            v152 = *(_QWORD *)(v159 + 48);
            v168[0] = _NSConcreteStackBlock;
            v168[1] = 3221225472;
            v168[2] = sub_1006048F4;
            v168[3] = &unk_100917378;
            v168[4] = v159;
            sub_100475CEC(v152, 200, v168);
          }
        }
        else
        {
          sub_1005F92FC(v159, 1u);
          if (v158)
            memcpy((void *)(v159 + 144), __src, 3336 * v158);
        }
        goto LABEL_244;
      }
      if (v65 != 2 || ((v26 | v160) & 1) == 0)
      {
        v151 = qword_1009998B8;
        if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_INFO, "updateAdvertisement not doing anything", buf, 2u);
        }
        goto LABEL_245;
      }
      v149 = qword_1009998B8;
      v150 = os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_INFO);
      if ((v26 & v162 & 1) != 0)
      {
        if (v150)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_INFO, "Restarting advertisement as data has changed!", buf, 2u);
        }
      }
      else
      {
        if (v150)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_INFO, "Stopping advertisement as there are no more advertising sessions", buf, 2u);
        }
        if (v158)
          bzero((void *)(a1 + 144), 3336 * v158);
      }
      buf[0] = 0;
      sub_100043758(buf);
      v153 = sub_100221D68(0);
      sub_10004339C(buf);
      if (v153 == 4073)
      {
        *v157 = 1;
      }
      else if (!v153)
      {
        sub_1005F92FC(a1, 3u);
LABEL_244:
        sub_100043728(buf);
LABEL_245:
        sub_100056B54((uint64_t)&v172, v173);
        if (v175)
          operator delete(v175);
        if (v178)
        {
          v179 = v178;
          operator delete(v178);
        }
        if (v181)
        {
          v182 = v181;
          operator delete(v181);
        }
        if (v184)
        {
          v185 = v184;
          operator delete(v184);
        }
        if (SHIBYTE(v200) < 0)
          operator delete((void *)v199);
LABEL_255:
        sub_100607188((uint64_t)&v187, v188[0]);
        return sub_100034234((uint64_t)v190);
      }
      if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
        sub_10070EF48();
      goto LABEL_244;
    }
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEBUG))
      sub_10070EE08();
    *(_BYTE *)(a1 + 16945) = 1;
    v7 = *(_QWORD *)(a1 + 48);
    v189[0] = _NSConcreteStackBlock;
    v189[1] = 3221225472;
    v189[2] = sub_100604888;
    v189[3] = &unk_100917378;
    v189[4] = a1;
    sub_100475CEC(v7, 200, v189);
  }
  else
  {
    v6 = qword_1009998B8;
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Stack is not started, updateAdvertisement returning", buf, 2u);
    }
  }
  return sub_100034234((uint64_t)v190);
}

void sub_1005FBB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_100056B54((uint64_t)&a42, (_QWORD *)a43);
  if (__p)
    operator delete(__p);
  if (a48)
  {
    a49 = (uint64_t)a48;
    operator delete(a48);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);
  sub_100607188((uint64_t)&a57, (_QWORD *)a58);
  sub_100034234((uint64_t)&a65);
  _Unwind_Resume(a1);
}

id sub_1005FBC78(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  id result;
  _QWORD *v6;
  uint64_t v7;

  v4 = operator new(0x28uLL);
  v4[1] = *(_OWORD *)a2;
  result = *(id *)(a2 + 16);
  *((_QWORD *)v4 + 4) = result;
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v4 = a1;
  *((_QWORD *)v4 + 1) = v6;
  *v6 = v4;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v7 + 1;
  return result;
}

void sub_1005FBCD4(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *a1;
  v2 = **a1;
  *(_QWORD *)(v2 + 8) = (*a1)[1];
  *(_QWORD *)v1[1] = v2;
  a1[2] = (uint64_t *)((char *)a1[2] - 1);

  operator delete(v1);
}

void sub_1005FBD18(uint64_t a1, uint64_t a2)
{
  NSDateFormatter *v3;
  NSObject *v4;
  int v5;
  void *v6;
  id v7;
  void **v8;
  void *__p[2];
  char v10;
  void *v11;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  void **v20;

  v3 = objc_opt_new(NSDateFormatter);
  -[NSDateFormatter setDateFormat:](v3, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss.SSS"));
  v4 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)a2;
    sub_1000217F4(*(_QWORD *)(a2 + 8));
    if (v12 >= 0)
      v6 = &v11;
    else
      v6 = v11;
    v7 = (id)objc_claimAutoreleasedReturnValue(-[NSDateFormatter stringFromDate:](v3, "stringFromDate:", *(_QWORD *)(a2 + 16)));
    sub_1005FBEF4(*(_DWORD *)a2, __p);
    if (v10 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    *(_DWORD *)buf = 67109891;
    v14 = v5;
    v15 = 2080;
    v16 = v6;
    v17 = 2112;
    v18 = v7;
    v19 = 2081;
    v20 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: ADV Instance:%d address:%s time:%@ (%{private}s)", buf, 0x26u);
    if (v10 < 0)
      operator delete(__p[0]);

    if (v12 < 0)
      operator delete(v11);

  }
}

void sub_1005FBEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  void *v18;
  void *v19;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *sub_1005FBEF4@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  return sub_100091AE8(a2, off_10093CFC0[a1]);
}

_BYTE *sub_1005FBF08(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  NSObject *v10;
  __int16 v12;
  _QWORD v13[2];
  char v14;
  uint8_t buf[8];
  uint64_t v16;
  void (*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  int v20;

  v2 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LeBroadcaster::stackWillStop enter", buf, 2u);
  }
  v14 = 0;
  sub_100043758(&v14);
  if (sub_100225224())
  {
    v3 = sub_10006BBEC();
    *(_QWORD *)buf = _NSConcreteStackBlock;
    v16 = 3221225472;
    v17 = sub_100604838;
    v18 = &unk_1009173C0;
    v19 = a1;
    v20 = 0;
    sub_100041A34(v3, buf);
    v4 = sub_10006BBEC();
    *(_QWORD *)buf = _NSConcreteStackBlock;
    v16 = 3221225472;
    v17 = sub_100604838;
    v18 = &unk_1009173C0;
    v19 = a1;
    v20 = 1;
    sub_100041A34(v4, buf);
    v5 = sub_100038E50();
    sub_1002B43D4(v5 + 368, a1 + 32);
    sub_1002239DC();
    sub_10004339C(&v14);
    v13[0] = 0;
    v13[1] = 0;
    sub_10003415C((uint64_t)v13, a1 + 56);
    sub_1005F92FC(a1, 0);
    bzero((void *)(a1 + 144), 0x4128uLL);
    *(_QWORD *)buf = 0;
    v16 = 0;
    v17 = 0;
    sub_10060763C((uint64_t *)buf, a1 + 16880);
    *(_BYTE *)(a1 + 41) = 0;
    sub_100034264((uint64_t)v13);
    v6 = *(uint64_t **)buf;
    if (*(uint64_t **)buf != &v16)
    {
      do
      {
        (**(void (***)(uint64_t, _QWORD))v6[4])(v6[4], 0);
        v7 = (uint64_t *)v6[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v6[2];
            v9 = *v8 == (_QWORD)v6;
            v6 = v8;
          }
          while (!v9);
        }
        v6 = v8;
      }
      while (v8 != &v16);
    }
    sub_1005F9824(a1);
    sub_1005FC174(a1);
    v10 = qword_1009998B8;
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "LeBroadcaster::stackWillStop exit", (uint8_t *)&v12, 2u);
    }
    sub_10001A82C((uint64_t)buf, (_QWORD *)v16);
    sub_100034234((uint64_t)v13);
  }
  return sub_100043728(&v14);
}

void sub_1005FC130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_100034234((uint64_t)&a10);
  sub_100043728(&a15);
  _Unwind_Resume(a1);
}

void sub_1005FC174(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v2 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 3488))(v2))
  {
    v3 = *(_QWORD *)(a1 + 17016);
    if (v3)
    {
      v4 = qword_1009998D8;
      if (!os_log_type_enabled((os_log_t)qword_1009998D8, OS_LOG_TYPE_DEFAULT)
        || (v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3),
            v6 = 136446210,
            v7 = v5,
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Destroying %{public}s", (uint8_t *)&v6, 0xCu), (v3 = *(_QWORD *)(a1 + 17016)) != 0))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      }
      *(_QWORD *)(a1 + 17016) = 0;
    }
  }
}

_BYTE *sub_1005FC264(uint64_t a1)
{
  return sub_1005FBF08(a1 - 8);
}

uint64_t sub_1005FC26C(uint64_t a1, uint64_t a2)
{
  _QWORD v4[2];
  uint64_t v5;

  v4[1] = 0;
  v5 = a2;
  v4[0] = 0;
  sub_10003415C((uint64_t)v4, a1 + 56);
  sub_10000F7A0((uint64_t **)(a1 + 16880), (unint64_t *)&v5, &v5);
  return sub_100034234((uint64_t)v4);
}

void sub_1005FC2C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005FC2D4(uint64_t a1, unint64_t a2)
{
  _QWORD v4[2];
  unint64_t v5;

  v4[1] = 0;
  v5 = a2;
  v4[0] = 0;
  sub_10003415C((uint64_t)v4, a1 + 56);
  sub_100015ECC(a1 + 16880, &v5);
  return sub_100034234((uint64_t)v4);
}

void sub_1005FC324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005FC338(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  __int128 *v4;
  char v5;
  __int128 v6;
  unsigned __int8 v7;
  void *v8;
  void **v9;
  char v10;
  void **v11;
  void *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  void **v18;
  uint64_t v19;
  char *v20;
  BOOL v21;
  char v22;
  __int128 *v23;
  __int128 v24;
  unsigned __int8 v25;
  void *v26;
  char *v27;
  char v28;
  void **v29;
  int64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  int v35;
  void *v36;
  uint64_t v37;
  char *v38;
  void *v40;
  __int128 *v42;
  __int128 *v43;
  void *v44;
  uint64_t v45;
  unsigned __int8 v46;
  void *__p[2];
  uint64_t v48;

  v2 = a2;
  v3 = *(unsigned __int8 *)(a1 + 16972);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      v4 = *(__int128 **)(a1 + 16976);
      v42 = *(__int128 **)(a1 + 16984);
      if (v4 == v42)
      {
        v22 = 1;
        return v22 & 1;
      }
      v5 = 0;
      while (1)
      {
        __p[1] = 0;
        v48 = 0;
        __p[0] = 0;
        if (*((char *)v4 + 23) < 0)
        {
          sub_10003430C(__p, *(void **)v4, *((_QWORD *)v4 + 1));
        }
        else
        {
          v6 = *v4;
          v48 = *((_QWORD *)v4 + 2);
          *(_OWORD *)__p = v6;
        }
        sub_1000340DC(v2, (uint64_t)&v44);
        v7 = v46;
        v8 = v44;
        v9 = (v46 & 0x80u) == 0 ? &v44 : (void **)v44;
        v10 = HIBYTE(v48);
        v11 = v48 >= 0 ? __p : (void **)__p[0];
        v12 = v48 >= 0 ? (void *)HIBYTE(v48) : __p[1];
        if (v12)
          break;
        v16 = 0;
        if ((v46 & 0x80) != 0)
          goto LABEL_36;
LABEL_37:
        v21 = v16 != -1;
        if (v10 < 0)
          operator delete(__p[0]);
        v5 |= v21;
        v4 = (__int128 *)((char *)v4 + 24);
        if (v4 == v42)
        {
          v22 = v5 ^ 1;
          return v22 & 1;
        }
      }
      if ((v46 & 0x80u) == 0)
        v13 = v46;
      else
        v13 = v45;
      v14 = (char *)v9 + v13;
      if (v13 >= (uint64_t)v12)
      {
        v40 = v44;
        v17 = *(unsigned __int8 *)v11;
        v18 = v9;
        do
        {
          v19 = v13 - (_QWORD)v12;
          if (v19 == -1)
            break;
          v20 = (char *)memchr(v18, v17, v19 + 1);
          if (!v20)
            break;
          v15 = v20;
          if (!memcmp(v20, v11, (size_t)v12))
            goto LABEL_31;
          v18 = (void **)(v15 + 1);
          v13 = v14 - (v15 + 1);
        }
        while (v13 >= (uint64_t)v12);
        v15 = v14;
LABEL_31:
        v8 = v40;
        v2 = a2;
      }
      else
      {
        v15 = (char *)v9 + v13;
      }
      if (v15 == v14)
        v16 = -1;
      else
        v16 = v15 - (char *)v9;
      if ((v7 & 0x80) == 0)
        goto LABEL_37;
LABEL_36:
      operator delete(v8);
      v10 = HIBYTE(v48);
      goto LABEL_37;
    }
LABEL_78:
    v22 = 0;
    return v22 & 1;
  }
  v23 = *(__int128 **)(a1 + 16976);
  v43 = *(__int128 **)(a1 + 16984);
  if (v23 == v43)
    goto LABEL_78;
  do
  {
    __p[1] = 0;
    v48 = 0;
    __p[0] = 0;
    if (*((char *)v23 + 23) < 0)
    {
      sub_10003430C(__p, *(void **)v23, *((_QWORD *)v23 + 1));
    }
    else
    {
      v24 = *v23;
      v48 = *((_QWORD *)v23 + 2);
      *(_OWORD *)__p = v24;
    }
    sub_1000340DC(v2, (uint64_t)&v44);
    v25 = v46;
    v26 = v44;
    if ((v46 & 0x80u) == 0)
      v27 = (char *)&v44;
    else
      v27 = (char *)v44;
    v28 = HIBYTE(v48);
    if (v48 >= 0)
      v29 = __p;
    else
      v29 = (void **)__p[0];
    if (v48 >= 0)
      v30 = HIBYTE(v48);
    else
      v30 = (int64_t)__p[1];
    if (v30)
    {
      if ((v46 & 0x80u) == 0)
        v31 = v46;
      else
        v31 = v45;
      v32 = &v27[v31];
      if (v31 >= v30)
      {
        v35 = *(unsigned __int8 *)v29;
        v36 = v27;
        do
        {
          v37 = v31 - v30;
          if (v37 == -1)
            break;
          v38 = (char *)memchr(v36, v35, v37 + 1);
          if (!v38)
            break;
          v33 = v38;
          if (!memcmp(v38, v29, v30))
            goto LABEL_67;
          v36 = v33 + 1;
          v31 = v32 - (v33 + 1);
        }
        while (v31 >= v30);
        v33 = v32;
LABEL_67:
        v2 = a2;
      }
      else
      {
        v33 = &v27[v31];
      }
      if (v33 == v32)
        v34 = -1;
      else
        v34 = v33 - v27;
    }
    else
    {
      v34 = 0;
    }
    v22 = v34 != -1;
    if ((v25 & 0x80) != 0)
    {
      operator delete(v26);
      if (v48 < 0)
LABEL_77:
        operator delete(__p[0]);
    }
    else if (v28 < 0)
    {
      goto LABEL_77;
    }
    if (v34 != -1)
      break;
    v23 = (__int128 *)((char *)v23 + 24);
  }
  while (v23 != v43);
  return v22 & 1;
}

void sub_1005FC650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005FC670(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  void **v13;
  void **v14;
  void **v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 *p_dst;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  id v25;
  id v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  const char *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  __int128 *v35;
  uint64_t v36;
  _QWORD *v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  __int128 *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  _QWORD *v50;
  __int128 *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t *v62;
  uint64_t v63;
  unsigned int v64;
  _QWORD *v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t *v68;
  uint64_t v69;
  unsigned int v70;
  _QWORD *v71;
  uint64_t v72;
  unsigned __int8 *v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned int v76;
  _QWORD *v77;
  uint64_t v78;
  unsigned __int8 *v79;
  uint64_t *v80;
  uint64_t v81;
  unsigned int v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  int v96;
  const char *v97;
  NSObject *v98;
  int v99;
  __int128 *v100;
  __int128 *v101;
  _BYTE *v102;
  size_t v103;
  NSObject *v104;
  __int128 *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  NSObject *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  NSObject *v126;
  _BOOL4 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t **v131;
  uint64_t v132;
  _QWORD v134[5];
  _QWORD *v135;
  char *v136;
  _QWORD v137[2];
  unint64_t v138;
  void *__p[2];
  _OWORD v140[4];
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _BYTE v144[144];
  uint64_t v145;
  _BYTE v146[12];
  char v147;
  __int128 __dst;
  uint64_t v149;
  uint8_t buf[4];
  __int128 *v151;
  __int16 v152;
  _BYTE *v153;

  v137[1] = 0;
  v138 = a2;
  v137[0] = 0;
  sub_10003415C((uint64_t)v137, a1 + 56);
  if (sub_1005FC338(a1, a2))
  {
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
    {
      sub_1000340DC(a2, (uint64_t)__p);
      sub_10070F08C();
    }
LABEL_310:
    v90 = 0;
    goto LABEL_311;
  }
  v7 = *(_QWORD **)(a1 + 16832);
  if (v7)
  {
    v8 = a1 + 16832;
    do
    {
      v9 = v7[4];
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = v7;
      else
        v11 = v7 + 1;
      if (v10)
        v8 = (uint64_t)v7;
      v7 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v8 != a1 + 16832 && *(_QWORD *)(v8 + 32) <= a2)
    {
      if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
      {
        sub_1000340DC(a2, (uint64_t)__p);
        sub_10070F2C8();
      }
      v90 = 122;
      goto LABEL_311;
    }
  }
  v12 = *(_QWORD *)(a3 + 8);
  if (*(_DWORD *)(v12 + 264) != 2)
  {
LABEL_25:
    sub_1002F6144((uint64_t *)__p, (const void ***)(v12 + 416));
    v17 = *(_QWORD *)&v140[0];
    sub_100056BAC((uint64_t)__p, (char *)__p[1]);
    if (!v17)
    {
      v18 = *(_QWORD *)(a3 + 8);
      sub_100091AE8(__p, "com.apple.bluetoothd");
      sub_100393D54((uint64_t)&v135, (const void **)__p, 1);
      if ((_QWORD **)(v18 + 416) != &v135)
        sub_10041D170((uint64_t **)(v18 + 416), v135, &v136);
      sub_100056BAC((uint64_t)&v135, v136);
      if (SBYTE7(v140[0]) < 0)
        operator delete(__p[0]);
    }
    v131 = (uint64_t **)(a1 + 16824);
    v145 = 0;
    v143 = 0u;
    memset(v144, 0, sizeof(v144));
    v141 = 0u;
    v142 = 0u;
    memset(v140, 0, sizeof(v140));
    *(_OWORD *)__p = 0u;
    sub_1002613AC((uint64_t)__p);
    v19 = sub_1002614D8(v140, (uint64_t)"Received 'start advertising' request from session \"", 51);
    sub_1000340DC(v138, (uint64_t)&__dst);
    if (v149 >= 0)
      p_dst = &__dst;
    else
      p_dst = (__int128 *)__dst;
    if (v149 >= 0)
      v21 = HIBYTE(v149);
    else
      v21 = *((_QWORD *)&__dst + 1);
    v22 = sub_1002614D8(v19, (uint64_t)p_dst, v21);
    sub_1002614D8(v22, (uint64_t)"\", with ", 8);
    if (SHIBYTE(v149) < 0)
      operator delete((void *)__dst);
    v23 = *(_QWORD **)(a3 + 8);
    v24 = (_QWORD *)v23[32];
    if (v24)
    {
      __dst = 0uLL;
      v149 = 0;
      v25 = sub_100021770((uint64_t)v24);
      v26 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v25));
      sub_100091AE8(&__dst, (char *)objc_msgSend(v26, "UTF8String"));

      v27 = sub_1002614D8(v140, (uint64_t)"instance #", 10);
      v28 = (_QWORD *)std::ostream::operator<<(v27, *(unsigned int *)(*(_QWORD *)(a3 + 8) + 264));
      v29 = sub_1002614D8(v28, (uint64_t)" with override address ", 23);
      if (v149 >= 0)
        v30 = (const char *)&__dst;
      else
        v30 = (const char *)__dst;
      v31 = strlen(v30);
      v24 = sub_1002614D8(v29, (uint64_t)v30, v31);
      if (SHIBYTE(v149) < 0)
        operator delete((void *)__dst);
      v23 = *(_QWORD **)(a3 + 8);
    }
    if (v23[9] != v23[8])
    {
      sub_1002614D8(v140, (uint64_t)"advertised UUID(s) [ ", 21);
      v32 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 64);
      if (*(_QWORD *)(*(_QWORD *)(a3 + 8) + 72) != v32)
      {
        v33 = 0;
        v34 = 1;
        do
        {
          sub_10006887C(v32 + 20 * v33, &__dst);
          if (v149 >= 0)
            v35 = &__dst;
          else
            v35 = (__int128 *)__dst;
          if (v149 >= 0)
            v36 = HIBYTE(v149);
          else
            v36 = *((_QWORD *)&__dst + 1);
          v37 = sub_1002614D8(v140, (uint64_t)v35, v36);
          sub_1002614D8(v37, (uint64_t)" ", 1);
          if (SHIBYTE(v149) < 0)
            operator delete((void *)__dst);
          v33 = v34;
          v32 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 64);
          v38 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*(_QWORD *)(a3 + 8) + 72) - v32) >> 2) > v34++;
        }
        while (v38);
      }
      v24 = sub_1002614D8(v140, (uint64_t)"], ", 3);
      v23 = *(_QWORD **)(a3 + 8);
    }
    if (v23[12] != v23[11])
    {
      sub_1002614D8(v140, (uint64_t)"solicited UUID(s) [ ", 20);
      v39 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 88);
      if (*(_QWORD *)(*(_QWORD *)(a3 + 8) + 96) != v39)
      {
        v40 = 0;
        v41 = 1;
        do
        {
          sub_10006887C(v39 + 20 * v40, &__dst);
          if (v149 >= 0)
            v42 = &__dst;
          else
            v42 = (__int128 *)__dst;
          if (v149 >= 0)
            v43 = HIBYTE(v149);
          else
            v43 = *((_QWORD *)&__dst + 1);
          v44 = sub_1002614D8(v140, (uint64_t)v42, v43);
          sub_1002614D8(v44, (uint64_t)" ", 1);
          if (SHIBYTE(v149) < 0)
            operator delete((void *)__dst);
          v40 = v41;
          v39 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 88);
          v38 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(*(_QWORD *)(a3 + 8) + 96) - v39) >> 2) > v41++;
        }
        while (v38);
      }
      v24 = sub_1002614D8(v140, (uint64_t)"], ", 3);
      v23 = *(_QWORD **)(a3 + 8);
    }
    v132 = a1;
    if (v23[16])
    {
      if (IsAppleInternalBuild(v24))
      {
        sub_1002614D8(v140, (uint64_t)"service data ", 13);
        v45 = *(_QWORD *)(a3 + 8);
        v46 = *(_QWORD **)(v45 + 112);
        v47 = (_QWORD *)(v45 + 120);
        if (v46 != (_QWORD *)(v45 + 120))
        {
          do
          {
            v48 = sub_10003F8C4((uint64_t)(v46 + 7));
            v49 = (unsigned __int8 *)sub_10003EB18((uint64_t)(v46 + 7));
            v50 = sub_1002614D8(v140, (uint64_t)"{UUID: ", 7);
            sub_10006887C((uint64_t)(v46 + 4), &__dst);
            if (v149 >= 0)
              v51 = &__dst;
            else
              v51 = (__int128 *)__dst;
            if (v149 >= 0)
              v52 = HIBYTE(v149);
            else
              v52 = *((_QWORD *)&__dst + 1);
            v53 = sub_1002614D8(v50, (uint64_t)v51, v52);
            v54 = sub_1002614D8(v53, (uint64_t)", Data: [ ", 10);
            v55 = *v54;
            *(_DWORD *)((char *)v54 + *(_QWORD *)(*v54 - 24) + 8) = *(_DWORD *)((_BYTE *)v54 + *(_QWORD *)(*v54 - 24)
                                                                                             + 8) & 0xFFFFFFB5 | 8;
            *(_DWORD *)((char *)v54 + *(_QWORD *)(v55 - 24) + 8) |= 0x4000u;
            v146[0] = 48;
            sub_1003CDCD4(v54, v146);
            if (SHIBYTE(v149) < 0)
            {
              operator delete((void *)__dst);
              if (!v48)
                goto LABEL_83;
            }
            else if (!v48)
            {
              goto LABEL_83;
            }
            do
            {
              *(_QWORD *)((char *)&v140[1] + *(_QWORD *)(*(_QWORD *)&v140[0] - 24) + 8) = 2;
              v56 = *v49++;
              v57 = (_QWORD *)std::ostream::operator<<(v140, v56);
              sub_1002614D8(v57, (uint64_t)" ", 1);
              --v48;
            }
            while (v48);
LABEL_83:
            sub_1002614D8(v140, (uint64_t)"]}, ", 4);
            v58 = (_QWORD *)v46[1];
            if (v58)
            {
              do
              {
                v59 = v58;
                v58 = (_QWORD *)*v58;
              }
              while (v58);
            }
            else
            {
              do
              {
                v59 = (_QWORD *)v46[2];
                v16 = *v59 == (_QWORD)v46;
                v46 = v59;
              }
              while (!v16);
            }
            v46 = v59;
          }
          while (v59 != v47);
        }
      }
    }
    if (sub_10003F8C4(*(_QWORD *)(a3 + 8) + 48))
    {
      v60 = sub_10003F8C4(*(_QWORD *)(a3 + 8) + 48);
      v61 = (unsigned __int8 *)sub_10003EB18(*(_QWORD *)(a3 + 8) + 48);
      v62 = sub_1002614D8(v140, (uint64_t)"manufacturer data [ ", 20);
      v63 = *v62;
      *(_DWORD *)((char *)v62 + *(_QWORD *)(*v62 - 24) + 8) = *(_DWORD *)((_BYTE *)v62 + *(_QWORD *)(*v62 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v62 + *(_QWORD *)(v63 - 24) + 8) |= 0x4000u;
      LOBYTE(__dst) = 48;
      sub_1003CDCD4(v62, (unsigned __int8 *)&__dst);
      for (; v60; --v60)
      {
        *(_QWORD *)((char *)&v140[1] + *(_QWORD *)(*(_QWORD *)&v140[0] - 24) + 8) = 2;
        v64 = *v61++;
        v65 = (_QWORD *)std::ostream::operator<<(v140, v64);
        sub_1002614D8(v65, (uint64_t)" ", 1);
      }
      sub_1002614D8(v140, (uint64_t)"], ", 3);
    }
    if (sub_10003F8C4(*(_QWORD *)(a3 + 8) + 136))
    {
      v66 = sub_10003F8C4(*(_QWORD *)(a3 + 8) + 136);
      v67 = (unsigned __int8 *)sub_10003EB18(*(_QWORD *)(a3 + 8) + 136);
      v68 = sub_1002614D8(v140, (uint64_t)"le bt addr [ ", 13);
      v69 = *v68;
      *(_DWORD *)((char *)v68 + *(_QWORD *)(*v68 - 24) + 8) = *(_DWORD *)((_BYTE *)v68 + *(_QWORD *)(*v68 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v68 + *(_QWORD *)(v69 - 24) + 8) |= 0x4000u;
      LOBYTE(__dst) = 48;
      sub_1003CDCD4(v68, (unsigned __int8 *)&__dst);
      for (; v66; --v66)
      {
        *(_QWORD *)((char *)&v140[1] + *(_QWORD *)(*(_QWORD *)&v140[0] - 24) + 8) = 2;
        v70 = *v67++;
        v71 = (_QWORD *)std::ostream::operator<<(v140, v70);
        sub_1002614D8(v71, (uint64_t)" ", 1);
      }
      sub_1002614D8(v140, (uint64_t)"], ", 3);
    }
    if (sub_10003F8C4(*(_QWORD *)(a3 + 8) + 152))
    {
      v72 = sub_10003F8C4(*(_QWORD *)(a3 + 8) + 152);
      v73 = (unsigned __int8 *)sub_10003EB18(*(_QWORD *)(a3 + 8) + 152);
      v74 = sub_1002614D8(v140, (uint64_t)"non-apple manufacturer data [ ", 30);
      v75 = *v74;
      *(_DWORD *)((char *)v74 + *(_QWORD *)(*v74 - 24) + 8) = *(_DWORD *)((_BYTE *)v74 + *(_QWORD *)(*v74 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v74 + *(_QWORD *)(v75 - 24) + 8) |= 0x4000u;
      LOBYTE(__dst) = 48;
      sub_1003CDCD4(v74, (unsigned __int8 *)&__dst);
      for (; v72; --v72)
      {
        *(_QWORD *)((char *)&v140[1] + *(_QWORD *)(*(_QWORD *)&v140[0] - 24) + 8) = 2;
        v76 = *v73++;
        v77 = (_QWORD *)std::ostream::operator<<(v140, v76);
        sub_1002614D8(v77, (uint64_t)" ", 1);
      }
      sub_1002614D8(v140, (uint64_t)"], ", 3);
    }
    if (sub_10003F8C4(*(_QWORD *)(a3 + 8) + 224))
    {
      v78 = sub_10003F8C4(*(_QWORD *)(a3 + 8) + 224);
      v79 = (unsigned __int8 *)sub_10003EB18(*(_QWORD *)(a3 + 8) + 224);
      v80 = sub_1002614D8(v140, (uint64_t)"tds data [ ", 11);
      v81 = *v80;
      *(_DWORD *)((char *)v80 + *(_QWORD *)(*v80 - 24) + 8) = *(_DWORD *)((_BYTE *)v80 + *(_QWORD *)(*v80 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v80 + *(_QWORD *)(v81 - 24) + 8) |= 0x4000u;
      LOBYTE(__dst) = 48;
      sub_1003CDCD4(v80, (unsigned __int8 *)&__dst);
      for (; v78; --v78)
      {
        *(_QWORD *)((char *)&v140[1] + *(_QWORD *)(*(_QWORD *)&v140[0] - 24) + 8) = 2;
        v82 = *v79++;
        v83 = (_QWORD *)std::ostream::operator<<(v140, v82);
        sub_1002614D8(v83, (uint64_t)" ", 1);
      }
      sub_1002614D8(v140, (uint64_t)"], ", 3);
    }
    v84 = sub_1002614D8(v140, (uint64_t)"interval ", 9);
    v85 = (_QWORD *)std::ostream::operator<<(v84, *(unsigned __int16 *)(*(_QWORD *)(a3 + 8) + 222));
    sub_1002614D8(v85, (uint64_t)", ", 2);
    v86 = *(_QWORD *)(a3 + 8);
    if (*(char *)(v86 + 39) < 0)
    {
      sub_10003430C(&__dst, *(void **)(v86 + 16), *(_QWORD *)(v86 + 24));
    }
    else
    {
      __dst = *(_OWORD *)(v86 + 16);
      v149 = *(_QWORD *)(v86 + 32);
    }
    if (SHIBYTE(v149) < 0)
    {
      v89 = *((_QWORD *)&__dst + 1);
      operator delete((void *)__dst);
      if (v89)
      {
LABEL_113:
        v87 = sub_1002614D8(v140, (uint64_t)"name \"", 6);
        v88 = *(_QWORD *)(a3 + 8);
        if (*(char *)(v88 + 39) < 0)
        {
          sub_10003430C(&__dst, *(void **)(v88 + 16), *(_QWORD *)(v88 + 24));
        }
        else
        {
          __dst = *(_OWORD *)(v88 + 16);
          v149 = *(_QWORD *)(v88 + 32);
        }
        if (v149 >= 0)
          v91 = &__dst;
        else
          v91 = (__int128 *)__dst;
        if (v149 >= 0)
          v92 = HIBYTE(v149);
        else
          v92 = *((_QWORD *)&__dst + 1);
        v93 = sub_1002614D8(v87, (uint64_t)v91, v92);
        sub_1002614D8(v93, (uint64_t)"\"", 1);
        if (SHIBYTE(v149) < 0)
          operator delete((void *)__dst);
        goto LABEL_129;
      }
    }
    else if (HIBYTE(v149))
    {
      goto LABEL_113;
    }
    sub_1002614D8(v140, (uint64_t)"no name", 7);
LABEL_129:
    v94 = *(_QWORD *)(a3 + 8);
    if (*(_BYTE *)(v94 + 308))
    {
      sub_1002614D8(v140, (uint64_t)" ObjectLocatorRspOnAdvHandle", 28);
      v94 = *(_QWORD *)(a3 + 8);
    }
    if (*(_BYTE *)(v94 + 360))
    {
      sub_1002614D8(v140, (uint64_t)" HoldADVPowerAssert", 19);
      v94 = *(_QWORD *)(a3 + 8);
    }
    if (*(_DWORD *)(v94 + 440))
    {
      v95 = sub_1002614D8(v140, (uint64_t)" UseCase:", 9);
      v96 = *(_DWORD *)(*(_QWORD *)(a3 + 8) + 440);
      if (v96 >= 0x20000)
      {
        if (v96 >= 327680)
        {
          if (v96 >= 589824)
          {
            if (v96 <= 2147418111)
            {
              switch(v96)
              {
                case 589824:
                  v97 = "FindNearbyRemote";
                  break;
                case 589825:
                  v97 = "FindNearbyPencil";
                  break;
                case 655360:
                  v97 = "AccessDigitalHomeKey";
                  break;
                default:
LABEL_258:
                  v97 = "?";
                  break;
              }
            }
            else
            {
              switch(v96)
              {
                case 2147418112:
                  v97 = "InternalTestNoLockScan";
                  break;
                case 2147418113:
                  v97 = "InternalTestNoScreenOffScan";
                  break;
                case 2147418114:
                  v97 = "InternalTestScanWithNoDups";
                  break;
                case 2147418115:
                  v97 = "InternalTestScanWithDups";
                  break;
                case 2147418116:
                  v97 = "InternalTestScanFor20Seconds";
                  break;
                case 2147418117:
                  v97 = "InternalTestActiveScan";
                  break;
                case 2147418118:
                  v97 = "InternalTestUUIDScan";
                  break;
                case 2147418119:
                  v97 = "InternalTestScanFor10ClockSeconds";
                  break;
                case 2147418120:
                  v97 = "InternalTestScanBoost";
                  break;
                default:
                  goto LABEL_258;
              }
            }
          }
          else if (v96 > 458752)
          {
            switch(v96)
            {
              case 524288:
                v97 = "ADPD";
                break;
              case 524289:
                v97 = "ADPDBuffer";
                break;
              case 524290:
                v97 = "MicroLocation";
                break;
              case 524291:
                v97 = "MicroLocationLeech";
                break;
              default:
                if (v96 == 458753)
                {
                  v97 = "PrecisionFindingFindee";
                }
                else
                {
                  if (v96 != 458754)
                    goto LABEL_258;
                  v97 = "PrecisionFindingFindeeHighPriority";
                }
                break;
            }
          }
          else
          {
            switch(v96)
            {
              case 393216:
                v97 = "CaptiveNetworkJoin";
                break;
              case 393217:
                v97 = "UseCaseSIMTransfer";
                break;
              case 393218:
                v97 = "MacSetup";
                break;
              case 393219:
                v97 = "AppleIDSignIn";
                break;
              case 393220:
                v97 = "AppleIDSignInSettings";
                break;
              default:
                if (v96 == 327680)
                {
                  v97 = "RapportThirdParty";
                }
                else
                {
                  if (v96 != 458752)
                    goto LABEL_258;
                  v97 = "PrecisionFindingFinder";
                }
                break;
            }
          }
        }
        else
        {
          switch(v96)
          {
            case 131072:
              v97 = "SharingDefault";
              break;
            case 131073:
              v97 = "SharingPhoneAutoUnlock";
              break;
            case 131074:
              v97 = "SharingSiriWatchAuth";
              break;
            case 131075:
              v97 = "SharingMacAutoUnlock";
              break;
            case 131076:
              v97 = "SharingEDTScreenOn";
              break;
            case 131077:
              v97 = "SharingEDTWiFiDisabled";
              break;
            case 131078:
              v97 = "SharingEDTWombatEligibleAsDefaultCamera";
              break;
            case 131079:
              v97 = "SharingEDTWombatCameraPicker";
              break;
            case 131080:
              v97 = "SharingWombatBackground";
              break;
            case 131081:
              v97 = "SharingUniversalControl";
              break;
            case 131082:
              v97 = "SharingPeopleProximity";
              break;
            case 131083:
              v97 = "SharingEDTEnsembleOpenDisplayPrefs";
              break;
            case 131084:
              v97 = "SharingEDTNearbydMotionStopped";
              break;
            case 131085:
              v97 = "SharingDoubleBoostGenericScan";
              break;
            case 131086:
              v97 = "SharingEDTIncomingAdvertisement ";
              break;
            case 131087:
              v97 = "SharingEDTWombatStreamStart";
              break;
            case 131088:
              v97 = "SharingOYAutoUnlock";
              break;
            case 131089:
              goto LABEL_258;
            case 131090:
              v97 = "SharingAirDrop";
              break;
            case 131091:
              v97 = "SharingNearbyInvitationHost";
              break;
            case 131092:
              v97 = "SharingNearbyInvitationParticipant";
              break;
            case 131093:
              v97 = "SharingAirDropAskToAirDrop";
              break;
            case 131094:
              v97 = "SharingAirDropTempIdentity";
              break;
            case 131095:
              v97 = "SharingAirDropNeedsCLink";
              break;
            case 131096:
              v97 = "SharingRemoteWidgetUpdate";
              break;
            case 131097:
              v97 = "SharingCountryCodeUpdate";
              break;
            case 131098:
              v97 = "SharingMacPhoneAutoUnlock";
              break;
            case 131099:
              v97 = "SharingVisionProDiscovery";
              break;
            case 131100:
              v97 = "SharingVisionProStateChange";
              break;
            case 131101:
              v97 = "SharingContinuityScreen";
              break;
            case 131102:
              v97 = "SharingEDTRemoteDisplay";
              break;
            default:
              if (v96 == 196608)
              {
                v97 = "DigitalIDTSA";
              }
              else
              {
                if (v96 != 0x40000)
                  goto LABEL_258;
                v97 = "DigitalCarKeyThirdParty";
              }
              break;
          }
        }
      }
      else
      {
        v97 = "Unspecified";
        switch(v96)
        {
          case 0:
            break;
          case 1:
            v97 = "HealthKit";
            break;
          case 2:
            v97 = "HomeKit";
            break;
          case 3:
            v97 = "FindMyObjectConnection";
            break;
          case 4:
            v97 = "FindMyObjectConnectionTransient";
            break;
          case 5:
            v97 = "MIDI";
            break;
          case 6:
            v97 = "Continuity";
            break;
          case 7:
            v97 = "InstantHotSpot";
            break;
          case 8:
            v97 = "NearBy";
            break;
          case 9:
            v97 = "Sharing";
            break;
          case 10:
            v97 = "HearingSupport";
            break;
          case 11:
            v97 = "Magnet";
            break;
          case 12:
            v97 = "HID";
            break;
          case 13:
            v97 = "LEA";
            break;
          case 14:
            v97 = "External";
            break;
          case 15:
            v97 = "ExternalMedical";
            break;
          case 16:
            v97 = "ExternalLock";
            break;
          case 17:
            v97 = "ExternalWatch";
            break;
          case 18:
            v97 = "SmartRouting";
            break;
          case 19:
            v97 = "DigitalID";
            break;
          case 20:
            v97 = "DigitalKey";
            break;
          case 21:
            v97 = "DigitalCarKey";
            break;
          case 22:
            v97 = "HeySiri";
            break;
          case 23:
            v97 = "ThirdPartyApp";
            break;
          case 24:
            v97 = "CNJ";
            break;
          default:
            switch(v96)
            {
              case 256:
                v97 = "DevicePresenceDetection";
                break;
              case 257:
                v97 = "AudioBox";
                break;
              case 258:
                v97 = "SIMTransfer";
                break;
              case 259:
                v97 = "ProximityScreenOnLeechScan";
                break;
              case 260:
                v97 = "MacMigrate";
                break;
              case 263:
                v97 = "HIDUARTService";
                break;
              case 264:
                v97 = "AccessibilitySwitchControlPairing";
                break;
              case 265:
                v97 = "BaseBandFastConnect";
                break;
              case 266:
                v97 = "SafetyAlerts";
                break;
              case 267:
                v97 = "LECarPlay";
                break;
              case 268:
                v97 = "TCCBluetooth";
                break;
              case 269:
                v97 = "AOPBufferLeech";
                break;
              default:
                goto LABEL_258;
            }
            break;
        }
      }
      v103 = strlen(v97);
      sub_1002614D8(v95, (uint64_t)v97, v103);
      if (qword_100977B40 != -1)
        dispatch_once(&qword_100977B40, &stru_10093CF20);
      sub_1004BBBEC((uint64_t)off_100977B38, *(_DWORD *)(*(_QWORD *)(a3 + 8) + 440));
    }
    v104 = qword_1009998B8;
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str((char *)v140 + 8);
      v105 = v149 >= 0 ? &__dst : (__int128 *)__dst;
      *(_DWORD *)v146 = 136446210;
      *(_QWORD *)&v146[4] = v105;
      _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "%{public}s", v146, 0xCu);
      if (SHIBYTE(v149) < 0)
        operator delete((void *)__dst);
    }
    v106 = *(_QWORD *)(a3 + 8);
    if (*(_BYTE *)(v106 + 308))
    {
      v107 = *(unsigned int *)(v106 + 264);
      if (*(_BYTE *)(v132 + v107 + 16921))
      {
        if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
          sub_10070F268();
      }
      else
      {
        if ((byte_100993ED8 & 1) == 0)
        {
          v108 = sub_100027F68();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v108 + 808))(v108))
          {
            v109 = sub_100027F68();
            v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 816))(v109);
            v111 = sub_1000438A4();
            v112 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v111 + 2944))(v111, v110, 1);
            v113 = qword_1009998B8;
            if ((v112 & 0xFFFFFFFD) != 0)
            {
              if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
                sub_10070F208();
            }
            else if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_INFO))
            {
              LODWORD(__dst) = 67109120;
              DWORD1(__dst) = v110;
              _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_INFO, "SPMI Debug Control set to %d", (uint8_t *)&__dst, 8u);
            }
          }
          byte_100993ED8 = 1;
          LODWORD(v107) = *(_DWORD *)(*(_QWORD *)(a3 + 8) + 264);
        }
        v114 = sub_10020691C(v107);
        v115 = sub_1000438A4();
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v115 + 2920))(v115, v114, 1, 1) & 0xFFFFFFFD) != 0)
        {
          if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
            sub_10070F1A8();
        }
        else
        {
          *(_BYTE *)(v132 + *(unsigned int *)(*(_QWORD *)(a3 + 8) + 264) + 16921) = 1;
        }
      }
    }
    v116 = *(_QWORD *)(a3 + 8);
    if (*(_BYTE *)(v116 + 409))
    {
      v117 = *(unsigned int *)(v116 + 264);
      if (*(_BYTE *)(v132 + v117 + 16926))
      {
        if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
          sub_10070F148();
      }
      else
      {
        v118 = sub_10020691C(v117);
        v119 = sub_1000438A4();
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v119 + 1896))(v119, 2, v118, 0, 1, 0) & 0xFFFFFFFD) != 0)
        {
          if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
            sub_10070F0E8();
        }
        else
        {
          *(_BYTE *)(v132 + *(unsigned int *)(*(_QWORD *)(a3 + 8) + 264) + 16926) = 1;
        }
      }
    }
    v120 = *(_QWORD *)(a3 + 8);
    *(_BYTE *)(v120 + 408) = a4;
    *(_QWORD *)(v120 + 400) = sub_1000063DC();
    *(_QWORD *)&__dst = &v138;
    v121 = sub_1006076F4(v131, &v138, (uint64_t)&unk_100740F58, (uint64_t **)&__dst);
    sub_100041698((uint64_t)(v121 + 5), a3);
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10093CEE0);
    v122 = sub_10006E8AC((uint64_t)off_100978168, v138);
    if ((_DWORD)v122)
    {
      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_10093CEE0);
      v122 = sub_10006F6A4((uint64_t)off_100978168, v138);
      v123 = v122;
      if ((_DWORD)v122 == 8 || (_DWORD)v122 == 4)
        v122 = sub_1005FE304(v132, v138);
      v124 = *(_QWORD *)(a3 + 8);
      *(_BYTE *)(v124 + 336) |= v123 == 16;
      *(_BYTE *)(v124 + 337) = v123 == 16;
    }
    sub_1005FE73C(v122, a3, 1);
    v125 = *(unsigned __int8 *)(v132 + 41);
    v126 = qword_1009998B8;
    v127 = os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT);
    if (v125)
    {
      if (v127)
      {
        LOWORD(__dst) = 0;
        _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "Calling updateAdvertisement", (uint8_t *)&__dst, 2u);
      }
      v128 = *(_QWORD *)(v132 + 48);
      v134[0] = _NSConcreteStackBlock;
      v134[1] = 3221225472;
      v134[2] = sub_1005FE804;
      v134[3] = &unk_100917378;
      v134[4] = v132;
      sub_100041A34(v128, v134);
    }
    else if (v127)
    {
      LOWORD(__dst) = 0;
      _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "Stack is not ready, waiting for the stack to start", (uint8_t *)&__dst, 2u);
    }
    *(void **)((char *)__p
    *(_QWORD *)&v140[0] = v129;
    if (SHIBYTE(v142) < 0)
      operator delete(*((void **)&v141 + 1));
    std::streambuf::~streambuf((char *)v140 + 8);
    std::ios::~ios(v144);
    goto LABEL_310;
  }
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v140[0] = 0;
  sub_1006073E4((uint64_t *)__p, a1 + 16824);
  v13 = (void **)__p[0];
  if (__p[0] == &__p[1])
  {
LABEL_24:
    sub_100607188((uint64_t)__p, (_QWORD *)__p[1]);
    v12 = *(_QWORD *)(a3 + 8);
    goto LABEL_25;
  }
  while (*((_DWORD *)v13[6] + 66) != 2)
  {
    v14 = (void **)v13[1];
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = (void **)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = (void **)v13[2];
        v16 = *v15 == v13;
        v13 = v15;
      }
      while (!v16);
    }
    v13 = v15;
    if (v15 == &__p[1])
      goto LABEL_24;
  }
  v98 = qword_100999928;
  if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
  {
    sub_1000340DC(a2, (uint64_t)&__dst);
    v99 = SHIBYTE(v149);
    v100 = (__int128 *)__dst;
    sub_1000340DC((uint64_t)v13[4], (uint64_t)v146);
    v101 = &__dst;
    if (v99 < 0)
      v101 = v100;
    if (v147 >= 0)
      v102 = v146;
    else
      v102 = *(_BYTE **)v146;
    *(_DWORD *)buf = 136446466;
    v151 = v101;
    v152 = 2082;
    v153 = v102;
    _os_log_error_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_ERROR, "session %{public}s cannot use the exposure notification instance since its already being used by %{public}s", buf, 0x16u);
    if (v147 < 0)
      operator delete(*(void **)v146);
    if (SHIBYTE(v149) < 0)
      operator delete((void *)__dst);
  }
  sub_100607188((uint64_t)__p, (_QWORD *)__p[1]);
  v90 = 4;
LABEL_311:
  sub_100034234((uint64_t)v137);
  return v90;
}

void sub_1005FDFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_100034234((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_1005FE304(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD **v8;
  uint64_t v9;
  unint64_t v10;
  NSObject *v11;
  void **v12;
  _QWORD *v13;
  _QWORD **v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  NSObject *v24;
  void **v25;
  uint64_t v26;
  _QWORD v28[5];
  void *__p[2];
  char v30;
  _QWORD **v31;
  _QWORD *v32[2];
  _BYTE v33[24];
  _QWORD v34[2];
  uint8_t buf[4];
  void **v36;
  __int16 v37;
  unint64_t v38;

  v34[0] = 0;
  v34[1] = 0;
  sub_10003415C((uint64_t)v34, a1 + 56);
  v4 = a1 + 16848;
  for (i = *(_QWORD *)(a1 + 16856); i != v4; i = *(_QWORD *)(i + 8))
  {
    if (*(_QWORD *)(i + 16) == a2)
      return sub_100034234((uint64_t)v34);
  }
  if (os_log_type_enabled((os_log_t)qword_1009998C0, OS_LOG_TYPE_DEBUG))
  {
    sub_1000340DC(a2, (uint64_t)v33);
    sub_10070F344();
  }
  v6 = operator new(0x18uLL);
  v7 = *(_QWORD **)(a1 + 16856);
  *v6 = v4;
  v6[1] = v7;
  v6[2] = a2;
  *v7 = v6;
  *(_QWORD *)(a1 + 16856) = v6;
  ++*(_QWORD *)(a1 + 16864);
  v31 = 0;
  v32[0] = 0;
  v32[1] = 0;
  sub_1006073E4((uint64_t *)&v31, a1 + 16824);
  v8 = v31;
  if (v31 != v32)
  {
    do
    {
      if (v8[4] == (_QWORD *)a2)
      {
        v8[6][40] = sub_1000063DC();
        v9 = 60 * (arc4random() % 0x3C);
        if (*(_BYTE *)(a1 + 16920))
          v9 = 0;
        v10 = 1000 * (v9 + *(_QWORD *)(a1 + 16912));
        v11 = qword_1009998B8;
        if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000340DC(a2, (uint64_t)__p);
          v12 = __p;
          if (v30 < 0)
            v12 = (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v36 = v12;
          v37 = 2048;
          v38 = v10 / 0x3E8;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Session %{public}s can advertise in background for %llu seconds", buf, 0x16u);
          if (v30 < 0)
            operator delete(__p[0]);
        }
        v8[6][41] = v10;
      }
      v13 = v8[1];
      if (v13)
      {
        do
        {
          v14 = (_QWORD **)v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD **)v8[2];
          v15 = *v14 == v8;
          v8 = v14;
        }
        while (!v15);
      }
      v8 = v14;
    }
    while (v14 != v32);
  }
  if (os_log_type_enabled((os_log_t)qword_1009998C0, OS_LOG_TYPE_DEBUG))
    sub_10070F314();
  v16 = *(_QWORD *)(a1 + 16856);
  if (v16 != v4)
  {
    v17 = (_QWORD *)(a1 + 16832);
    do
    {
      v18 = (_QWORD *)*v17;
      if (!*v17)
        goto LABEL_38;
      v19 = *(_QWORD *)(v16 + 16);
      v20 = (_QWORD *)(a1 + 16832);
      do
      {
        v21 = v18[4];
        v22 = v21 >= v19;
        if (v21 >= v19)
          v23 = v18;
        else
          v23 = v18 + 1;
        if (v22)
          v20 = v18;
        v18 = (_QWORD *)*v23;
      }
      while (*v23);
      if (v20 == v17 || v19 < v20[4])
LABEL_38:
        v20 = (_QWORD *)(a1 + 16832);
      v24 = qword_1009998C0;
      if (os_log_type_enabled((os_log_t)qword_1009998C0, OS_LOG_TYPE_DEBUG))
      {
        sub_1000340DC(v20[4], (uint64_t)__p);
        if (v30 >= 0)
          v25 = __p;
        else
          v25 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v36 = v25;
        _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "   %{public}s", buf, 0xCu);
        if (v30 < 0)
          operator delete(__p[0]);
      }
      v16 = *(_QWORD *)(v16 + 8);
    }
    while (v16 != v4);
  }
  v26 = *(_QWORD *)(a1 + 48);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_100604900;
  v28[3] = &unk_100917378;
  v28[4] = a1;
  sub_100041A34(v26, v28);
  sub_100607188((uint64_t)&v31, v32[0]);
  return sub_100034234((uint64_t)v34);
}

void sub_1005FE6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005FE73C(uint64_t a1, uint64_t a2, char a3)
{
  NSObject *v5;
  unint64_t v6;
  uint64_t v7;

  v5 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEBUG))
    sub_10070F3EC(a3, v5);
  v6 = sub_10003F8C4(*(_QWORD *)(a2 + 8) + 48);
  v7 = sub_10003EB18(*(_QWORD *)(a2 + 8) + 48);
  if (v6 >= 3
    && sub_100221F04(v7 + 2, v6 - 2, (uint64_t (*)(void))sub_1006008DC)
    && os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
  {
    sub_10070F38C();
  }
}

uint64_t sub_1005FE804(uint64_t a1)
{
  return sub_1005FA418(*(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_1005FE810(_QWORD *a1, uint64_t a2)
{
  _QWORD **v4;
  _QWORD *v5;
  _QWORD **v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  _QWORD **v11;
  _QWORD *v12;
  _QWORD **v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  NSObject *v22;
  void **v23;
  uint64_t v24;
  _QWORD v26[5];
  void *__p[2];
  char v28;
  char v29[24];
  _QWORD **v30;
  _QWORD *v31[2];
  _QWORD v32[2];
  uint8_t buf[4];
  void **v34;

  v32[0] = 0;
  v32[1] = 0;
  sub_10003415C((uint64_t)v32, (uint64_t)(a1 + 7));
  v30 = 0;
  v31[0] = 0;
  v31[1] = 0;
  sub_1006073E4((uint64_t *)&v30, (uint64_t)(a1 + 2103));
  v4 = v30;
  if (v30 != v31)
  {
    do
    {
      if (v4[4] == (_QWORD *)a2)
        v4[6][40] = 0;
      v5 = v4[1];
      if (v5)
      {
        do
        {
          v6 = (_QWORD **)v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD **)v4[2];
          v7 = *v6 == v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != v31);
  }
  v8 = a1 + 2106;
  for (i = (uint64_t *)a1[2107]; i != v8; i = (uint64_t *)i[1])
  {
    if (i[2] == a2)
    {
      if (os_log_type_enabled((os_log_t)qword_1009998C0, OS_LOG_TYPE_DEBUG))
      {
        sub_1000340DC(a2, (uint64_t)v29);
        sub_10070F460();
      }
      v10 = *i;
      *(_QWORD *)(v10 + 8) = i[1];
      *(_QWORD *)i[1] = v10;
      --a1[2108];
      operator delete(i);
      v11 = v30;
      if (v30 != v31)
      {
        do
        {
          if (v11[4] == (_QWORD *)a2)
            v11[6][40] = 0;
          v12 = v11[1];
          if (v12)
          {
            do
            {
              v13 = (_QWORD **)v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = (_QWORD **)v11[2];
              v7 = *v13 == v11;
              v11 = v13;
            }
            while (!v7);
          }
          v11 = v13;
        }
        while (v13 != v31);
      }
      break;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009998C0, OS_LOG_TYPE_DEBUG))
    sub_10070F314();
  v14 = (uint64_t *)a1[2107];
  if (v14 != v8)
  {
    v15 = a1 + 2104;
    do
    {
      v16 = (_QWORD *)*v15;
      if (!*v15)
        goto LABEL_40;
      v17 = v14[2];
      v18 = a1 + 2104;
      do
      {
        v19 = v16[4];
        v20 = v19 >= v17;
        if (v19 >= v17)
          v21 = v16;
        else
          v21 = v16 + 1;
        if (v20)
          v18 = v16;
        v16 = (_QWORD *)*v21;
      }
      while (*v21);
      if (v18 == v15 || v17 < v18[4])
LABEL_40:
        v18 = a1 + 2104;
      v22 = qword_1009998C0;
      if (os_log_type_enabled((os_log_t)qword_1009998C0, OS_LOG_TYPE_DEBUG))
      {
        sub_1000340DC(v18[4], (uint64_t)__p);
        if (v28 >= 0)
          v23 = __p;
        else
          v23 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v34 = v23;
        _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "   %{public}s", buf, 0xCu);
        if (v28 < 0)
          operator delete(__p[0]);
      }
      v14 = (uint64_t *)v14[1];
    }
    while (v14 != v8);
  }
  v24 = a1[6];
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_10060490C;
  v26[3] = &unk_100917378;
  v26[4] = a1;
  sub_100041A34(v24, v26);
  sub_100607188((uint64_t)&v30, v31[0]);
  return sub_100034234((uint64_t)v32);
}

void sub_1005FEB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v15;
  va_list va;
  _QWORD *v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD *);
  v18 = va_arg(va1, _QWORD);
  sub_100607188((uint64_t)va, v17);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1005FEB80(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005FEC30;
  v6[3] = &unk_10093CE18;
  v8 = a1;
  v5 = v3;
  v7 = v5;
  sub_100041A34(v4, v6);

}

void sub_1005FEC10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_1005FEC30(uint64_t a1)
{
  sub_10022485C(*(_DWORD *)(*(_QWORD *)(a1 + 40) + 17076), *(_DWORD *)(*(_QWORD *)(a1 + 40) + 17080));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1005FEC74(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v2 = a2;
  v3 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1005FED1C;
  v5[3] = &unk_10093CE40;
  v4 = v2;
  v6 = v4;
  sub_100041A34(v3, v5);

}

void sub_1005FECFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1005FED1C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int16 v12;
  unsigned __int8 v13;
  __int16 v14;
  unsigned int v15;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 7));
  v15 = 0;
  if (sub_100224BD8(&v15))
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", 0));
  else
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v15));
  v14 = 0;
  v13 = 0;
  v12 = 0;
  v10 = 0;
  v11 = 0;
  sub_100224C24((_BYTE *)&v14 + 1, &v14, &v13, &v12, &v11, &v10);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", HIBYTE(v14)));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, CFSTR("kCBMsgArgHoldStableAddressState"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v14));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v5, CFSTR("kCBMsgArgOverrideLocalAddressState"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v13));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v6, CFSTR("kCBMsgArgPrivateModeState"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v12));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v7, CFSTR("kCBMsgArgHoldStableAddressCount"));

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v11));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, CFSTR("kCBMsgArgLePrivateAddressTimer"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v10));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v9, CFSTR("kCBMsgArgLeHoldStablePrivateAddressTimer"));

  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, CFSTR("kCBMsgArgTimeoutInMS"));
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1005FEF14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1005FEF50(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v11;
  void **v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD v15[5];
  void *__p[2];
  char v17;
  _QWORD v18[2];
  unint64_t v19;
  uint8_t buf[4];
  void **v21;

  v18[1] = 0;
  v19 = a2;
  v18[0] = 0;
  sub_10003415C((uint64_t)v18, a1 + 56);
  v4 = *(_QWORD **)(a1 + 16832);
  if (!v4)
    goto LABEL_31;
  v5 = a1 + 16832;
  do
  {
    v6 = v4[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v4;
    else
      v8 = v4 + 1;
    if (v7)
      v5 = (uint64_t)v4;
    v4 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != a1 + 16832 && *(_QWORD *)(v5 + 32) <= a2)
  {
    v11 = qword_1009998B8;
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(a2, (uint64_t)__p);
      v12 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v21 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received 'stop advertising' request from session \"%{public}s\"", buf, 0xCu);
      if (v17 < 0)
        operator delete(__p[0]);
    }
    sub_1005FF1D8(a1, a2);
    __p[0] = &v19;
    v13 = sub_1006076F4((uint64_t **)(a1 + 16824), &v19, (uint64_t)&unk_100740F58, (uint64_t **)__p);
    if (*(_DWORD *)(v13[6] + 440))
    {
      if (qword_100977B40 != -1)
        dispatch_once(&qword_100977B40, &stru_10093CF20);
      sub_1004BBCD0((uint64_t)off_100977B38, *(_DWORD *)(v13[6] + 440));
    }
    sub_1005F9D30(a1, v19);
    if (*(_BYTE *)(a1 + 41))
    {
      v14 = *(_QWORD *)(a1 + 48);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_1005FF960;
      v15[3] = &unk_100917378;
      v15[4] = a1;
      sub_100041A34(v14, v15);
    }
    v9 = 0;
  }
  else
  {
LABEL_31:
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
    {
      sub_1000340DC(a2, (uint64_t)__p);
      sub_10070F4A8();
    }
    v9 = 123;
  }
  sub_100034234((uint64_t)v18);
  return v9;
}

void sub_1005FF1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005FF1D8(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  void **v15;
  void *v16;
  void *v17;
  int v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  NSNumber *v25;
  void *v26;
  void *v27;
  void *v28;
  _BOOL8 v29;
  void *v30;
  _BOOL8 v31;
  void *v32;
  void **v33;
  _QWORD *v34;
  void *v35;
  NSObject *v36;
  uint64_t v37;
  void **v38;
  void **v39;
  BOOL v40;
  void *v42;
  void *v43;
  void *__p[2];
  uint64_t v45;
  _QWORD v46[2];
  unint64_t v47;
  uint8_t buf[4];
  void *v49;

  v46[1] = 0;
  v47 = a2;
  v46[0] = 0;
  sub_10003415C((uint64_t)v46, a1 + 56);
  v4 = *(_QWORD **)(a1 + 16832);
  if (v4)
  {
    v5 = (_QWORD *)(a1 + 16832);
    do
    {
      v6 = v4[4];
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = v4;
      else
        v8 = v4 + 1;
      if (v7)
        v5 = v4;
      v4 = (_QWORD *)*v8;
    }
    while (*v8);
    if (v5 != (_QWORD *)(a1 + 16832) && v5[4] <= a2)
    {
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      __p[0] = &v47;
      v9 = sub_1006076F4((uint64_t **)(a1 + 16824), &v47, (uint64_t)&unk_100740F58, (uint64_t **)__p);
      v10 = v9[6];
      if (*(_QWORD *)(v10 + 72) != *(_QWORD *)(v10 + 64))
      {
        v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
        v11 = v9[6];
        v12 = *(unsigned __int8 **)(v11 + 64);
        if (v12 == *(unsigned __int8 **)(v11 + 72))
        {
          v14 = 0;
          v13 = 0;
        }
        else
        {
          v13 = 0;
          v14 = 0;
          do
          {
            sub_10006887C((uint64_t)v12, __p);
            if (v45 >= 0)
              v15 = __p;
            else
              v15 = (void **)__p[0];
            v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15));
            v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ "), v16));
            objc_msgSend(v42, "appendString:", v17);

            if (SHIBYTE(v45) < 0)
              operator delete(__p[0]);
            v19 = *v12;
            v12 += 20;
            v18 = v19;
            if (v19 == 16)
              ++v13;
            if (v18 == 2)
              ++v14;
          }
          while (v12 != *(unsigned __int8 **)(v9[6] + 72));
        }
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v13));
        objc_msgSend(v43, "setObject:forKeyedSubscript:", v20, CFSTR("NumberOf128bitUUID"));

        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v14));
        objc_msgSend(v43, "setObject:forKeyedSubscript:", v21, CFSTR("NumberOf16bitUUID"));

        objc_msgSend(v43, "setObject:forKeyedSubscript:", v42, CFSTR("ServiceUUID"));
        v10 = v9[6];
      }
      if (*(char *)(v10 + 39) < 0)
      {
        sub_10003430C(__p, *(void **)(v10 + 16), *(_QWORD *)(v10 + 24));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(v10 + 16);
        v45 = *(_QWORD *)(v10 + 32);
      }
      v22 = (void *)HIBYTE(v45);
      if (v45 < 0)
        v22 = __p[1];
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v22 != 0));
      objc_msgSend(v43, "setObject:forKeyedSubscript:", v23, CFSTR("HasName"));

      if (SHIBYTE(v45) < 0)
        operator delete(__p[0]);
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v9[6] + 337)));
      objc_msgSend(v43, "setObject:forKeyedSubscript:", v24, CFSTR("AppInForegroundAtStart"));

      v25 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", sub_1000063DC() - *(_QWORD *)(v9[6] + 400));
      v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      objc_msgSend(v43, "setObject:forKeyedSubscript:", v26, CFSTR("DurationInMS"));

      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v5[6] + 408)));
      objc_msgSend(v43, "setObject:forKeyedSubscript:", v27, CFSTR("SupportsBackgrounding"));

      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v47 + 140)));
      objc_msgSend(v43, "setObject:forKeyedSubscript:", v28, CFSTR("ClientType"));

      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_10093CEE0);
      if (sub_10006E8AC((uint64_t)off_100978168, v47))
      {
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_10093CEE0);
        v29 = sub_10006F5E4((uint64_t)off_100978168, v47);
      }
      else
      {
        v29 = 0;
      }
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v29));
      objc_msgSend(v43, "setObject:forKeyedSubscript:", v30, CFSTR("SupportsStateRestoration"));

      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_10093CEE0);
      if (sub_10006E8AC((uint64_t)off_100978168, v47))
      {
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_10093CEE0);
        v31 = sub_10006F6A4((uint64_t)off_100978168, v47) == 16;
      }
      else
      {
        v31 = 0;
      }
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v31));
      objc_msgSend(v43, "setObject:forKeyedSubscript:", v32, CFSTR("AppInForegroundAtStop"));

      __p[0] = 0;
      __p[1] = 0;
      v45 = 0;
      sub_1002F6144((uint64_t *)__p, (const void ***)(v5[6] + 416));
      v33 = (void **)__p[0];
      if (__p[0] != &__p[1])
      {
        do
        {
          v34 = v33 + 4;
          if (*((char *)v33 + 55) < 0)
            v34 = (_QWORD *)*v34;
          v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v34));
          objc_msgSend(v43, "setObject:forKeyedSubscript:", v35, CFSTR("BundleID"));

          v36 = qword_1009998B8;
          if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 138412290;
            v49 = v43;
            _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Sending LEAdvSession :%@", buf, 0xCu);
          }
          v37 = sub_100065478();
          (*(void (**)(uint64_t, void *))(*(_QWORD *)v37 + 320))(v37, v43);
          v38 = (void **)v33[1];
          if (v38)
          {
            do
            {
              v39 = v38;
              v38 = (void **)*v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              v39 = (void **)v33[2];
              v40 = *v39 == v33;
              v33 = v39;
            }
            while (!v40);
          }
          v33 = v39;
        }
        while (v39 != &__p[1]);
      }
      sub_100056BAC((uint64_t)__p, (char *)__p[1]);

    }
  }
  return sub_100034234((uint64_t)v46);
}

void sub_1005FF83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{

  sub_100034234((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_1005FF960(uint64_t a1)
{
  return sub_1005FA418(*(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_1005FF96C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  const char *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  NSObject *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  void *__p[2];
  unsigned __int8 v27;
  __int128 v28;
  _OWORD v29[4];
  void *v30[2];
  __int128 v31;
  __int128 v32;
  _BYTE v33[144];
  uint64_t v34;
  _QWORD v35[2];
  uint8_t buf[4];
  void **v37;
  unsigned __int8 v38[2];
  __int16 v39;
  char v40;
  __int16 v41;
  _WORD v42[826];

  bzero(v38, 0x67CuLL);
  v35[0] = 0;
  v35[1] = 0;
  sub_10003415C((uint64_t)v35, a1 + 56);
  v34 = 0;
  v32 = 0u;
  memset(v33, 0, sizeof(v33));
  *(_OWORD *)v30 = 0u;
  v31 = 0u;
  memset(v29, 0, sizeof(v29));
  v28 = 0u;
  sub_1002613AC((uint64_t)&v28);
  v6 = sub_1002614D8(v29, (uint64_t)"Received 'start advertising' request from session \"", 51);
  sub_1000340DC(a2, (uint64_t)__p);
  if ((v27 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v27 & 0x80u) == 0)
    v8 = v27;
  else
    v8 = (uint64_t)__p[1];
  v9 = sub_1002614D8(v6, (uint64_t)v7, v8);
  sub_1002614D8(v9, (uint64_t)"\", with ", 8);
  if ((char)v27 < 0)
    operator delete(__p[0]);
  v10 = sub_1002614D8(v29, (uint64_t)"advHandle ", 10);
  LOBYTE(__p[0]) = *(_BYTE *)a3;
  v11 = sub_1002614D8(v10, (uint64_t)__p, 1);
  sub_1002614D8(v11, (uint64_t)", ", 2);
  v12 = sub_1002614D8(v29, (uint64_t)"interval ", 9);
  v13 = (_QWORD *)std::ostream::operator<<(v12, *(unsigned __int16 *)(a3 + 2));
  sub_1002614D8(v13, (uint64_t)", ", 2);
  v14 = sub_10003F8C4(a3 + 48);
  v15 = (const char *)sub_10003EB18(a3 + 48);
  v16 = sub_1002614D8(v29, (uint64_t)"dataLen ", 8);
  v17 = (_QWORD *)std::ostream::operator<<(v16, v14);
  sub_1002614D8(v17, (uint64_t)", ", 2);
  v18 = sub_1002614D8(v29, (uint64_t)"data ", 5);
  v19 = strlen(v15);
  v20 = sub_1002614D8(v18, (uint64_t)v15, v19);
  sub_1002614D8(v20, (uint64_t)", ", 2);
  v21 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_INFO))
  {
    std::stringbuf::str((char *)v29 + 8);
    v22 = (v27 & 0x80u) == 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v37 = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "%{public}s", buf, 0xCu);
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  bzero(v38, 0x67CuLL);
  v38[0] = *(_BYTE *)a3;
  v39 = *(_WORD *)(a3 + 2);
  v40 = 64;
  if (v14 - 1 <= 0x671)
  {
    memcpy(v42, v15, v14);
    v42[825] = 0;
    v41 = v14;
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v23 = sub_100224F30(v38);
  sub_10004339C(__p);
  if ((_DWORD)v23 && os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
    sub_10070F4F4();
  sub_100043728(__p);
  *(_QWORD *)((char *)&v29[-1]
  *(_QWORD *)&v29[0] = v24;
  if (SHIBYTE(v31) < 0)
    operator delete(v30[1]);
  std::streambuf::~streambuf((char *)v29 + 8);
  std::ios::~ios(v33);
  sub_100034234((uint64_t)v35);
  return v23;
}

void sub_1005FFD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  sub_1006CC5C8((uint64_t)&a16);
  sub_100034234((uint64_t)&a52);
  _Unwind_Resume(a1);
}

uint64_t sub_1005FFD80(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  NSObject *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  unsigned __int8 v17;
  __int128 v18;
  _OWORD v19[4];
  void *v20[2];
  __int128 v21;
  __int128 v22;
  _BYTE v23[144];
  uint64_t v24;
  _QWORD v25[2];
  uint8_t buf[4];
  void **v27;

  v25[0] = 0;
  v25[1] = 0;
  sub_10003415C((uint64_t)v25, a1 + 56);
  v24 = 0;
  v22 = 0u;
  memset(v23, 0, sizeof(v23));
  *(_OWORD *)v20 = 0u;
  v21 = 0u;
  memset(v19, 0, sizeof(v19));
  v18 = 0u;
  sub_1002613AC((uint64_t)&v18);
  v5 = sub_1002614D8(v19, (uint64_t)"Received 'stop advertising' request from session \"", 50);
  sub_1000340DC(a2, (uint64_t)__p);
  if ((v17 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v7 = v17;
  else
    v7 = (uint64_t)__p[1];
  v8 = sub_1002614D8(v5, (uint64_t)v6, v7);
  sub_1002614D8(v8, (uint64_t)"\", with ", 8);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  v9 = sub_1002614D8(v19, (uint64_t)"advHandle ", 10);
  LOBYTE(__p[0]) = a3;
  v10 = sub_1002614D8(v9, (uint64_t)__p, 1);
  sub_1002614D8(v10, (uint64_t)". ", 2);
  v11 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_INFO))
  {
    std::stringbuf::str((char *)v19 + 8);
    v12 = (v17 & 0x80u) == 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v27 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%{public}s", buf, 0xCu);
    if ((char)v17 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v13 = sub_100225074(a3);
  sub_10004339C(__p);
  if ((_DWORD)v13 && os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
    sub_10070F554();
  sub_100043728(__p);
  *(_QWORD *)((char *)&v19[-1]
  *(_QWORD *)&v19[0] = v14;
  if (SHIBYTE(v21) < 0)
    operator delete(v20[1]);
  std::streambuf::~streambuf((char *)v19 + 8);
  std::ios::~ios(v23);
  sub_100034234((uint64_t)v25);
  return v13;
}

void sub_10060000C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  sub_1006CC5C8((uint64_t)&a16);
  sub_100034234(v16 - 96);
  _Unwind_Resume(a1);
}

BOOL sub_10060006C(uint64_t a1)
{
  _BOOL8 v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 56);
  v2 = *(_DWORD *)(a1 + 120) != 0;
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_1006000B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 56);
  v6 = *(_QWORD **)(a1 + 16832);
  if (!v6)
    goto LABEL_12;
  v7 = (_QWORD *)(a1 + 16832);
  do
  {
    v8 = v6[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = v6;
    v6 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != (_QWORD *)(a1 + 16832) && v7[4] <= a2)
  {
    v12 = v7[6];
    *a3 = &off_100918298;
    a3[1] = v12;
    if (v12)
      sub_10003C37C(v12);
  }
  else
  {
LABEL_12:
    *a3 = &off_100918298;
    a3[1] = 0;
  }
  return sub_100034234((uint64_t)v13);
}

void sub_100600170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_100600184(uint64_t a1, void *a2, char a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  char v14;
  char v15;

  v6 = a2;
  v15 = a3;
  v7 = a4;
  if (v7)
  {
    if (v6)
      v8 = objc_msgSend(v6, "mutableCopy");
    else
      v8 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    v10 = v8;
    v11 = objc_msgSend(v8, "length");
    v12 = objc_msgSend(v7, "length");
    v14 = objc_msgSend(v7, "length") + 1;
    if (((v11 + v12 + 2) & 0xE0) == 0)
    {
      objc_msgSend(v10, "appendBytes:length:", &v14, 1);
      objc_msgSend(v10, "appendBytes:length:", &v15, 1);
      objc_msgSend(v10, "appendData:", v7);
    }
    v9 = objc_msgSend(v10, "copy");

  }
  else
  {
    v9 = v6;
  }

  return v9;
}

void sub_100600280(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1006002A4(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  char *v9;
  id v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  char *v15;
  int v16;
  NSObject *v18;
  uint64_t v19;
  id v20;
  unsigned __int8 v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  unsigned int v27;
  unsigned int v28;
  id v29;
  uint64_t v31;
  void *v32;
  char v33;
  __int16 v34;

  v4 = a2;
  v5 = a3;
  if (!v5)
    goto LABEL_4;
  if (v4)
  {
    if ((unint64_t)objc_msgSend(v4, "length") >= 0x20)
    {
LABEL_4:
      v6 = v4;
      goto LABEL_23;
    }
    v7 = objc_msgSend(v4, "mutableCopy");
  }
  else
  {
    v7 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
  }
  v8 = v7;
  v9 = (char *)objc_msgSend(v7, "length");
  v10 = objc_retainAutorelease(v8);
  v11 = (unsigned __int8 *)objc_msgSend(v10, "bytes");
  if (v9)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    while (1)
    {
      v15 = (char *)v11[v12];
      if (&v9[-v12] < v15)
      {
        v18 = qword_1009998B8;
        if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
          sub_10070F5B4((uint64_t)v10, v18, v19);
        goto LABEL_18;
      }
      v16 = v14 + 1;
      if (v11[(v14 + 1)] == 255)
        break;
      v14 = (_DWORD)v15 + v16;
      if ((unint64_t)v9 > ((_BYTE)v15 + v16))
      {
        v12 = ((_BYTE)v15 + v16);
        if (v13++ < 0x31)
          continue;
      }
      goto LABEL_18;
    }
    v20 = objc_msgSend(v10, "length");
    v21 = v14;
    v22 = ((_BYTE)v15 + 1);
    if ((unint64_t)v20 < v22 + (unint64_t)v21)
      goto LABEL_18;
    v31 = v21;
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "subdataWithRange:", v21, v22));
    v26 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithData:](NSMutableData, "dataWithData:", v32));

    objc_msgSend(v10, "replaceBytesInRange:withBytes:length:", v31, v22, 0, 0);
  }
  else
  {
LABEL_18:
    v34 = 76;
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v34, 2));
    v24 = sub_100600184((uint64_t)v23, 0, 255, v23);
    v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    v26 = objc_msgSend(v25, "mutableCopy");

  }
  v27 = objc_msgSend(v10, "length");
  v28 = objc_msgSend(v26, "length");
  if (((v28 + v27 + objc_msgSend(v5, "length")) & 0xE0) != 0)
  {
    v29 = v4;
  }
  else
  {
    objc_msgSend(v26, "appendData:", v5);
    v33 = objc_msgSend(v26, "length") - 1;
    objc_msgSend(v26, "replaceBytesInRange:withBytes:length:", 0, 1, &v33, 1);
    objc_msgSend(v10, "appendData:", v26);
    v29 = objc_msgSend(v10, "copy");
  }
  v6 = v29;

LABEL_23:
  return v6;
}

void sub_100600530(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id sub_100600598(uint64_t a1, void *a2, char a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  _BYTE v18[3];
  char v19;

  v6 = a2;
  v7 = a4;
  if (v7)
  {
    if (v6)
    {
      v8 = objc_msgSend(v6, "mutableCopy");
    }
    else
    {
      v19 = 26;
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v19, 1));
      v11 = sub_100600184((uint64_t)v10, 0, 1, v10);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v8 = objc_msgSend(v12, "mutableCopy");

    }
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
    v18[0] = a3;
    v18[1] = objc_msgSend(v7, "length");
    objc_msgSend(v13, "appendBytes:length:", v18, 2);
    v14 = sub_1006002A4((uint64_t)objc_msgSend(v13, "appendData:", v7), v8, v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v16 = objc_msgSend(v15, "mutableCopy");

    v9 = objc_msgSend(v16, "copy");
  }
  else
  {
    v9 = v6;
  }

  return v9;
}

void sub_1006006D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_10060072C(uint64_t a1, _QWORD *a2, unsigned __int8 **a3, unsigned int a4)
{
  unsigned __int8 *v4;
  unsigned __int16 v8;
  _QWORD *v9;
  unsigned __int8 *i;
  __int128 v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;

  v4 = *a3;
  if (*a3 == a3[1])
  {
    return 0;
  }
  else
  {
    v8 = 0;
    v9 = a2 + 2;
    do
    {
      for (i = (unsigned __int8 *)*a2; i != (unsigned __int8 *)a2[1]; i += 20)
      {
        if (sub_100072DF0(i, v4))
          goto LABEL_25;
      }
      if (*v4 + v8 > a4)
        return v8;
      if ((unint64_t)i >= *v9)
      {
        v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&i[-*a2] >> 2);
        v14 = v13 + 1;
        if (v13 + 1 > 0xCCCCCCCCCCCCCCCLL)
          abort();
        if (0x999999999999999ALL * ((uint64_t)(*v9 - *a2) >> 2) > v14)
          v14 = 0x999999999999999ALL * ((uint64_t)(*v9 - *a2) >> 2);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v9 - *a2) >> 2) >= 0x666666666666666)
          v15 = 0xCCCCCCCCCCCCCCCLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)sub_1000B58EC((uint64_t)v9, v15);
        else
          v16 = 0;
        v17 = &v16[20 * v13];
        v18 = *(_OWORD *)v4;
        *((_DWORD *)v17 + 4) = *((_DWORD *)v4 + 4);
        *(_OWORD *)v17 = v18;
        v20 = (char *)*a2;
        v19 = (char *)a2[1];
        v21 = v17;
        if (v19 != (char *)*a2)
        {
          do
          {
            v22 = *(_OWORD *)(v19 - 20);
            *((_DWORD *)v21 - 1) = *((_DWORD *)v19 - 1);
            *(_OWORD *)(v21 - 20) = v22;
            v21 -= 20;
            v19 -= 20;
          }
          while (v19 != v20);
          v19 = (char *)*a2;
        }
        v12 = v17 + 20;
        *a2 = v21;
        a2[1] = v17 + 20;
        a2[2] = &v16[20 * v15];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v11 = *(_OWORD *)v4;
        *((_DWORD *)i + 4) = *((_DWORD *)v4 + 4);
        *(_OWORD *)i = v11;
        v12 = (char *)(i + 20);
      }
      a2[1] = v12;
      v8 += *v4;
LABEL_25:
      v4 += 20;
    }
    while (v4 != a3[1]);
  }
  return v8;
}

uint64_t sub_1006008DC(int a1, char *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t result;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  result = 161;
  if (a2 && a3 && a1 == 15 && a4)
  {
    v7 = a2[1];
    v8 = *a2;
    v9 = 2;
    if ((_DWORD)v7 != 56 && (_DWORD)v7 != 51)
    {
      if ((_DWORD)v7 != 9)
      {
        v10 = 0;
LABEL_13:
        v11 = sub_100065478();
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v11 + 400))(v11, v7, v8, v10, *a4);
        return 0;
      }
      v9 = 5;
    }
    if (v8 < 0)
      v9 += 3;
    v10 = a2[v9];
    goto LABEL_13;
  }
  return result;
}

void sub_100600980(uint64_t a1, _QWORD *a2, _WORD *a3, unsigned int a4, _QWORD *a5, uint64_t a6, void **a7, void **a8, _QWORD *a9, uint64_t **a10)
{
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  _BYTE *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  int v43;
  NSObject *v44;
  unsigned int v45;
  int v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  NSObject *v51;
  int v52;
  int v53;
  NSObject *v54;
  int v55;
  uint64_t v56;
  char *v57;
  id v58;
  NSObject *v59;
  char *v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  _BYTE *v67;
  NSObject *v68;
  _BYTE *v69;
  int v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  NSObject *v75;
  void **v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v83;
  unsigned __int8 v84;
  _QWORD *v85;
  unint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  _QWORD *v90;
  unint64_t v91;
  NSObject *v92;
  uint64_t v93;
  NSObject *v94;
  _BYTE *v95;
  char *v96;
  __int16 v97;
  void *v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _BYTE *v104;
  NSObject *v105;
  NSObject *v106;
  uint64_t v107;
  NSObject *v108;
  NSObject *v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  _BYTE *v116;
  NSObject *v117;
  const char *v118;
  __int16 v119;
  _BYTE *v120;
  NSObject *v121;
  NSObject *v122;
  __int16 v123;
  __int16 v124;
  const void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _WORD *v130;
  uint64_t *v131;
  __int16 v132;
  uint64_t i;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  char v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  size_t v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  size_t v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  __int16 v164;
  __int16 v165;
  unsigned __int16 v166;
  uint64_t v167;
  int *v168;
  __int16 *v169;
  uint64_t *v170;
  _BYTE *v171;
  uint64_t v172;
  __int16 v173;
  __int16 v174;
  uint64_t v175;
  uint64_t v176;
  unsigned __int16 v177;
  unsigned __int16 v178;
  uint64_t v179;
  __int16 v180;
  uint64_t v181;
  unsigned __int16 v182;
  uint64_t v183;
  const void *j;
  uint64_t *v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  unsigned int v190;
  uint64_t v191;
  unint64_t v192;
  unsigned __int8 v193;
  unint64_t v194;
  char v195;
  unsigned __int8 v196;
  BOOL v197;
  int v198;
  unint64_t v199;
  void *v200;
  int v201;
  void **v202;
  uint64_t *v203;
  char v204;
  char *v205;
  char *v206;
  __tag_iconv_t *v207;
  NSObject *v208;
  void *v209;
  __int16 v210;
  uint64_t v211;
  unsigned __int16 v212;
  char v213;
  uint64_t v214;
  size_t v215;
  const void *v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  size_t v221;
  const void *v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _BOOL8 v228;
  _BYTE *v229;
  _WORD *v230;
  size_t v231;
  const void *v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  NSObject *v236;
  __int16 v237;
  NSObject *v238;
  _BOOL8 v239;
  _BYTE *v240;
  _WORD *v241;
  uint64_t v242;
  uint64_t v243;
  int *v244;
  uint64_t v245;
  _DWORD *v246;
  int v247;
  NSObject *v248;
  NSObject *v249;
  _DWORD *v250;
  int v251;
  NSObject *v252;
  char v253;
  char v254;
  void **v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  size_t v259;
  const void *v260;
  size_t v261;
  const void *v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  size_t v266;
  const void *v267;
  size_t v268;
  const void *v269;
  uint64_t v270;
  unsigned int v271;
  uint64_t v272;
  uint64_t v273;
  char v274;
  char v275;
  void **v276;
  _BYTE *v277;
  char *v278;
  char v279;
  __int16 v280;
  __int16 v281;
  int v282;
  NSObject *v283;
  NSObject *v284;
  int v285;
  NSObject *v286;
  uint64_t v287;
  NSObject *v288;
  NSObject *v289;
  NSObject *v290;
  int v296;
  uint64_t v298;
  int v301;
  int v302;
  int v303;
  uint64_t k;
  void *v305;
  uint64_t m;
  void *v307;
  uint64_t n;
  void *v309;
  uint64_t ii;
  void *v311;
  uint64_t jj;
  void *v313;
  uint64_t kk;
  void *v315;
  unsigned __int8 v317;
  char v318;
  unsigned __int16 v319;
  char v320;
  int v321;
  __int16 v322;
  char v323;
  __int16 v324;
  void **__src;
  _BYTE *v326;
  char *v332;
  char *v333;
  size_t v334;
  int v335;
  char v336;
  uint8_t v337;
  char v338[15];
  uint8_t v339;
  char v340[15];
  _QWORD *v341;
  _QWORD *v342;
  unint64_t v343;
  _QWORD *v344;
  _QWORD *v345;
  unint64_t v346;
  char *v347;
  char *v348;
  unint64_t v349;
  char *v350;
  char *v351;
  unint64_t v352;
  _BYTE __dst[32];
  uint64_t v354;
  __int16 v355;
  int v356;
  __int16 v357;
  uint64_t v358;
  __int16 v359;
  int v360;
  __int16 v361;
  uint64_t v362;
  __int16 v363;
  int v364;
  __int16 v365;
  int v366;
  __int16 v367;
  uint64_t v368;
  __int16 v369;
  int v370;
  __int16 v371;
  int v372;
  __int16 v373;
  int v374;
  __int128 v375;
  int v376;
  size_t v377[2];
  uint64_t v378;
  _OWORD v379[7];
  uint64_t v380;
  _OWORD v381[7];
  uint64_t v382;
  _OWORD v383[7];
  uint64_t v384;
  _OWORD v385[6];
  __int128 v386;
  uint64_t v387;
  uint8_t buf[16];
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  __int128 v394;
  uint64_t v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  __int128 v401;
  __int128 v402;
  uint64_t v403;
  _QWORD v404[2];
  int64x2_t v405;
  uint64_t v406;
  uint64_t v407;
  __int16 v408;
  uint64_t v409;
  unsigned __int16 v410;
  void *__p[2];
  uint64_t v412;
  _BYTE v413[14];
  _BYTE v414[18];
  __int16 v415;
  int v416;
  __int16 v417;
  int v418;
  _BYTE v419[6606];
  __int128 v420;
  int v421;
  uint64_t v422;
  unsigned __int16 v423;

  v350 = 0;
  v351 = 0;
  v352 = 0;
  v347 = 0;
  v348 = 0;
  v349 = 0;
  v344 = 0;
  v345 = 0;
  v346 = 0;
  v341 = 0;
  v342 = 0;
  v343 = 0;
  v423 = 0x4000;
  v422 = 0x4000400040004000;
  bzero(a3, 0xD08uLL);
  if (*((char *)a5 + 23) < 0)
  {
    *(_BYTE *)*a5 = 0;
    a5[1] = 0;
  }
  else
  {
    *(_BYTE *)a5 = 0;
    *((_BYTE *)a5 + 23) = 0;
  }
  __src = (void **)a5;
  *(_QWORD *)(a6 + 8) = *(_QWORD *)a6;
  a7[1] = *a7;
  a9[1] = *a9;
  v14 = (_QWORD *)*a2;
  v13 = a2 + 1;
  v12 = v14;
  v15 = &unk_100738000;
  if (v14 != v13)
  {
    v16 = 0;
    v320 = 0;
    v318 = 0;
    v323 = 0;
    while (1)
    {
      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_10093CEE0);
      v17 = sub_10006F6A4((uint64_t)off_100978168, v12[4]);
      v18 = *(unsigned __int8 *)(v12[6] + 264);
      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_10093CEE0);
      if (sub_10006E8AC((uint64_t)off_100978168, v12[4]))
      {
        LODWORD(v396) = 0;
        buf[0] = 0;
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_10093CEE0);
        sub_10006EBB4((uint64_t)off_100978168, v12[4], &v396, buf);
        if ((_DWORD)v396 != 1)
        {
          v22 = qword_1009998B8;
          if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_INFO))
          {
            sub_1000340DC(v12[4], (uint64_t)__p);
            v23 = __p;
            if (v412 < 0)
              v23 = (void **)__p[0];
            *(_DWORD *)v413 = 136446722;
            *(_QWORD *)&v413[4] = v23;
            *(_WORD *)&v413[12] = 1024;
            *(_DWORD *)v414 = v396;
            *(_WORD *)&v414[4] = 1024;
            *(_DWORD *)&v414[6] = buf[0];
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "session %{public}s cannot advertise in powerState:%d restrictedMode:%d", v413, 0x18u);
            if (SHIBYTE(v412) < 0)
              operator delete(__p[0]);
          }
          goto LABEL_122;
        }
      }
      if (v17 == 1 || v17 == 32)
        break;
      if (v17 == 16)
      {
        v19 = v351;
        if ((unint64_t)v351 >= v352)
        {
          v21 = sub_10041D664((uint64_t *)&v350, (uint64_t)(v12 + 5));
        }
        else
        {
          *(_QWORD *)v351 = &off_100918298;
          v20 = v12[6];
          *((_QWORD *)v19 + 1) = v20;
          if (v20)
            sub_10003C37C(v20);
          v21 = (uint64_t)(v19 + 16);
        }
        v351 = (char *)v21;
        v37 = v12[6];
        if ((_DWORD)v18)
        {
          v38 = *((unsigned __int16 *)&v422 + v18);
          if (v38 >= *(unsigned __int16 *)(v37 + 222))
            LOWORD(v38) = *(_WORD *)(v37 + 222);
          v39 = v18;
        }
        else
        {
          v39 = 0;
          LOWORD(v38) = 48;
        }
        *((_WORD *)&v422 + v39) = v38;
        v35 = *(_QWORD *)(v37 + 256);
        if (!v35)
          goto LABEL_59;
        v36 = a4 <= 1 ? 0 : v18;
        if ((v36 & 0xFFFFFFFB) == 0)
          goto LABEL_59;
        goto LABEL_58;
      }
      if (*(_DWORD *)(v12[6] + 264) == 2)
        break;
LABEL_59:
      v42 = v12[6];
      if (*(_DWORD *)(v42 + 264) == 4)
      {
        v43 = *(unsigned __int8 *)(v42 + 339);
        if (*(_BYTE *)(v42 + 339))
        {
          v44 = qword_1009998B8;
          if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v413 = 67109376;
            *(_DWORD *)&v413[4] = v43;
            *(_WORD *)&v413[8] = 1024;
            *(_DWORD *)&v413[10] = 4;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Overriding primaryPHY:%d instance:%d", v413, 0xEu);
            v42 = v12[6];
            LOBYTE(v43) = *(_BYTE *)(v42 + 339);
            v45 = *(_DWORD *)(v42 + 264);
          }
          else
          {
            v45 = 4;
          }
          HIBYTE(a3[1668 * v45 + 1660]) = v43;
        }
        else
        {
          v45 = 4;
        }
        v46 = *(unsigned __int8 *)(v42 + 340);
        if (*(_BYTE *)(v42 + 340))
        {
          v47 = qword_1009998B8;
          if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v413 = 67109376;
            *(_DWORD *)&v413[4] = v46;
            *(_WORD *)&v413[8] = 1024;
            *(_DWORD *)&v413[10] = v45;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Overriding secondaryPHY:%d instance:%d", v413, 0xEu);
            v42 = v12[6];
            LOBYTE(v46) = *(_BYTE *)(v42 + 340);
          }
          LOBYTE(a3[1668 * *(unsigned int *)(v42 + 264) + 1661]) = v46;
        }
        v48 = sub_1000438A4();
        if (sub_100333628(v48))
        {
          v49 = v12[6];
          v50 = *(unsigned __int8 *)(v49 + 343);
          if (*(_BYTE *)(v49 + 343))
          {
            v51 = qword_1009998B8;
            if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
            {
              v52 = *(_DWORD *)(v49 + 264);
              *(_DWORD *)v413 = 67109376;
              *(_DWORD *)&v413[4] = v50;
              *(_WORD *)&v413[8] = 1024;
              *(_DWORD *)&v413[10] = v52;
              _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Overriding primaryPhyOptions:%d instance:%d", v413, 0xEu);
              v49 = v12[6];
              LOBYTE(v50) = *(_BYTE *)(v49 + 343);
            }
            HIBYTE(a3[1668 * *(unsigned int *)(v49 + 264) + 1661]) = v50;
          }
          v53 = *(unsigned __int8 *)(v49 + 344);
          if (*(_BYTE *)(v49 + 344))
          {
            v54 = qword_1009998B8;
            if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
            {
              v55 = *(_DWORD *)(v49 + 264);
              *(_DWORD *)v413 = 67109376;
              *(_DWORD *)&v413[4] = v53;
              *(_WORD *)&v413[8] = 1024;
              *(_DWORD *)&v413[10] = v55;
              _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Overriding secondaryPhyOptions:%d instance:%d", v413, 0xEu);
              v49 = v12[6];
              LOBYTE(v53) = *(_BYTE *)(v49 + 344);
            }
            LOBYTE(a3[1668 * *(unsigned int *)(v49 + 264) + 1662]) = v53;
          }
        }
      }
      sub_1000438A4();
      if (sub_100049F50())
      {
        if (_os_feature_enabled_impl("BluetoothFeatures", "LeDecisionBasedAdvFiltering"))
        {
          v56 = v12[6];
          if (*(_BYTE *)(v56 + 345))
          {
            v57 = (char *)&a3[1668 * *(unsigned int *)(v56 + 264)];
            v57[3325] = *(_BYTE *)(v56 + 345);
            *((_WORD *)v57 + 1663) = *(_WORD *)(v56 + 346);
            v58 = objc_retainAutorelease(*(id *)(v56 + 352));
            *(_QWORD *)&a3[1668 * *(unsigned int *)(v12[6] + 264) + 1664] = objc_msgSend(v58, "bytes");

            v59 = qword_1009998B8;
            if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
            {
              v60 = (char *)&a3[1668 * *(unsigned int *)(v12[6] + 264)];
              v61 = v60[3325];
              v62 = v60[3326];
              v63 = v60[3327];
              v64 = *((_QWORD *)v60 + 416);
              *(_DWORD *)v413 = 67109890;
              *(_WORD *)&v413[8] = 1024;
              *(_DWORD *)&v413[10] = v62;
              *(_WORD *)v414 = 1024;
              *(_DWORD *)&v413[4] = v61;
              *(_DWORD *)&v414[2] = v63;
              *(_WORD *)&v414[6] = 2080;
              *(_QWORD *)&v414[8] = v64;
              _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Using DBAF - getDecisionAdvDataEnable: %d, getDBAFDecisionTypeFlags: %d, getDBAFDecisionDataLength: %d, getDBAFDecisionData: %s", v413, 0x1Eu);
            }
          }
        }
      }
      v65 = v12[6];
      if (*(_BYTE *)(v65 + 12) && *(_DWORD *)(v65 + 264) == 4)
      {
        v66 = qword_1009998B8;
        if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000340DC(v12[4], (uint64_t)v413);
          v67 = v413;
          if (v414[9] < 0)
            v67 = *(_BYTE **)v413;
          LODWORD(__p[0]) = 136446210;
          *(void **)((char *)__p + 4) = v67;
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Forcing extended connectable instead of legacy connectable due to session %{public}s", (uint8_t *)__p, 0xCu);
          if ((v414[9] & 0x80000000) != 0)
            operator delete(*(void **)v413);
          v65 = v12[6];
        }
        v320 = 1;
      }
      if (*(_BYTE *)(v65 + 307))
      {
        v68 = qword_1009998B8;
        if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_INFO))
        {
          sub_1000340DC(v12[4], (uint64_t)v413);
          v69 = v413;
          if (v414[9] < 0)
            v69 = *(_BYTE **)v413;
          LODWORD(__p[0]) = 136446210;
          *(void **)((char *)__p + 4) = v69;
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_INFO, "Session %{public}s wants to stop on address change", (uint8_t *)__p, 0xCu);
          if ((v414[9] & 0x80000000) != 0)
            operator delete(*(void **)v413);
          v65 = v12[6];
        }
      }
      if (*(_BYTE *)(v65 + 464))
      {
        v70 = *(_DWORD *)(v65 + 264);
        if (v70)
          v323 |= v70 == 1;
        else
          v318 = 1;
      }
      if (v17 >= 8 && (sub_10003F8C4(v65 + 152) || sub_10003F8C4(v12[6] + 136)))
      {
        v71 = v342;
        if ((unint64_t)v342 >= v343)
        {
          v73 = sub_10041D664((uint64_t *)&v341, (uint64_t)(v12 + 5));
        }
        else
        {
          *v342 = &off_100918298;
          v72 = v12[6];
          v71[1] = v72;
          if (v72)
            sub_10003C37C(v72);
          v73 = (uint64_t)(v71 + 2);
        }
        v342 = (_QWORD *)v73;
        if (WORD1(v422) >= *(unsigned __int16 *)(v12[6] + 222))
          v74 = *(unsigned __int16 *)(v12[6] + 222);
        else
          v74 = WORD1(v422);
        WORD1(v422) = v74;
        v75 = qword_1009998B8;
        if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000340DC(v12[4], (uint64_t)__p);
          v76 = v412 >= 0 ? __p : (void **)__p[0];
          v77 = sub_10003F8C4(v12[6] + 152);
          v78 = sub_10003F8C4(v12[6] + 136);
          v79 = *(unsigned __int16 *)(v12[6] + 222);
          *(_DWORD *)v413 = 136447234;
          *(_QWORD *)&v413[4] = v76;
          *(_WORD *)&v413[12] = 2048;
          *(_QWORD *)v414 = v77;
          *(_WORD *)&v414[8] = 2048;
          *(_QWORD *)&v414[10] = v78;
          v415 = 1024;
          v416 = v74;
          v417 = 1024;
          v418 = v79;
          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "Session %{public}s has Non-Apple manufacturer data len %zu LE Bluetooth Device address len %zu updated minNonConnectableInterval %u (%u from session)", v413, 0x2Cu);
          if (SHIBYTE(v412) < 0)
            operator delete(__p[0]);
        }
      }
      v16 = 1;
LABEL_122:
      v15 = (_QWORD *)&unk_100738000;
      v80 = (_QWORD *)v12[1];
      if (v80)
      {
        do
        {
          v81 = v80;
          v80 = (_QWORD *)*v80;
        }
        while (v80);
      }
      else
      {
        do
        {
          v81 = (_QWORD *)v12[2];
          _ZF = *v81 == (_QWORD)v12;
          v12 = v81;
        }
        while (!_ZF);
      }
      v12 = v81;
      if (v81 == v13)
        goto LABEL_130;
    }
    v24 = v12[6];
    if (*(_DWORD *)(v24 + 264) == 2)
    {
      v420 = xmmword_10073B688;
      v421 = 0;
      sub_100042F44((__n128 *)v413, (__n128 *)&v420);
      v25 = sub_100042F58(v24 + 112, v413);
      v26 = v12[6];
      if (v26 + 120 == v25)
      {
        sub_1005F5F80(v26);
        v27 = qword_100999950;
        if (os_log_type_enabled((os_log_t)qword_100999950, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000340DC(v12[4], (uint64_t)v413);
          v28 = v413;
          if (v414[9] < 0)
            v28 = *(_BYTE **)v413;
          LODWORD(__p[0]) = 136446210;
          *(void **)((char *)__p + 4) = v28;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "session %{public}s advertises Exposure Notification data", (uint8_t *)__p, 0xCu);
          if ((v414[9] & 0x80000000) != 0)
            operator delete(*(void **)v413);
        }
      }
    }
    v29 = v348;
    if ((unint64_t)v348 >= v349)
    {
      v31 = sub_10041D664((uint64_t *)&v347, (uint64_t)(v12 + 5));
    }
    else
    {
      *(_QWORD *)v348 = &off_100918298;
      v30 = v12[6];
      *((_QWORD *)v29 + 1) = v30;
      if (v30)
        sub_10003C37C(v30);
      v31 = (uint64_t)(v29 + 16);
    }
    v348 = (char *)v31;
    v32 = v12[6];
    v33 = *(unsigned int *)(v32 + 264);
    v34 = *((unsigned __int16 *)&v422 + v33);
    if (v34 >= *(unsigned __int16 *)(v32 + 222))
      LOWORD(v34) = *(_WORD *)(v32 + 222);
    *((_WORD *)&v422 + v33) = v34;
    v35 = *(_QWORD *)(v32 + 256);
    if (!v35)
      goto LABEL_59;
    v36 = a4 <= 1 ? 0 : v18;
    if ((v36 & 0xFFFFFFFB) == 0)
      goto LABEL_59;
LABEL_58:
    HIBYTE(a3[1668 * v36 + 1658]) = 1;
    v40 = sub_1000746A4(v35);
    v41 = (char *)&a3[1668 * v36];
    v41[3316] = BYTE6(v40);
    *((_WORD *)v41 + 1657) = WORD2(v40);
    *(_DWORD *)(v41 + 3310) = v40;
    goto LABEL_59;
  }
  v323 = 0;
  v318 = 0;
  v320 = 0;
  v16 = 0;
LABEL_130:
  v326 = (_BYTE *)(a1 + 16873);
  v83 = *(_QWORD *)(a1 + 16856);
  if (v83 != a1 + 16848)
  {
    v84 = 0;
    v317 = 0;
    v321 = v15[376];
    while (1)
    {
      v85 = (_QWORD *)*v13;
      if (!*v13)
        goto LABEL_143;
      v86 = *(_QWORD *)(v83 + 16);
      v87 = v13;
      do
      {
        v88 = v85[4];
        _CF = v88 >= v86;
        if (v88 >= v86)
          v90 = v85;
        else
          v90 = v85 + 1;
        if (_CF)
          v87 = v85;
        v85 = (_QWORD *)*v90;
      }
      while (*v90);
      if (v87 != v13 && (v91 = v87[4], v86 >= v91))
      {
        v93 = v87[6];
        if (*(_DWORD *)(v93 + 264) != 2)
        {
          *(_OWORD *)__p = 0uLL;
          v412 = 0;
          v96 = sub_1000B61B8((char *)__p, *(__int128 **)(v93 + 64), *(__int128 **)(v93 + 72), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v93 + 72) - *(_QWORD *)(v93 + 64)) >> 2));
          sub_10060072C((uint64_t)v96, a7, (unsigned __int8 **)__p, 0xFFFFu);
          v97 = v422;
          if ((unsigned __int16)v422 >= 0x122u)
            v97 = 290;
          LOWORD(v422) = v97;
          if (!*(_BYTE *)(a1 + 16874))
          {
            v105 = qword_1009998B8;
            if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEBUG))
              sub_10070F654(&v339, v340, v105);
            goto LABEL_174;
          }
          if (a4 < 4 || !*v326)
          {
            v106 = qword_1009998B8;
            if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEBUG))
              sub_10070F688(&v337, v338, v106);
            goto LABEL_174;
          }
          v396 = 0uLL;
          *(_QWORD *)&v397 = 0;
          sub_1005F57E0(v87[6], 2, &v396);
          v98 = (void *)v396;
          if (*((_QWORD *)&v396 + 1) == (_QWORD)v396)
          {
            v107 = qword_1009998B8;
            if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEBUG))
            {
              sub_1000340DC(v87[4], (uint64_t)v413);
              v120 = v413;
              if (v414[9] < 0)
                v120 = *(_BYTE **)v413;
              *(_DWORD *)buf = v321;
              *(_QWORD *)&buf[4] = v120;
              v117 = v107;
              v118 = "session %{public}s does not have 16bit UUID's";
              goto LABEL_197;
            }
            if (!v98)
              goto LABEL_174;
          }
          else
          {
            v99 = *(unsigned __int16 *)(a1 + 16906);
            if (v99 <= v317)
            {
              v108 = qword_1009998B8;
              if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)v413 = 67109376;
                *(_DWORD *)&v413[4] = v317;
                *(_WORD *)&v413[8] = 1024;
                *(_DWORD *)&v413[10] = v99;
                _os_log_debug_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "We have %d advertisers, max is %d, can't fit more", v413, 0xEu);
              }
            }
            else
            {
              v100 = sub_1000063DC();
              v101 = v87[6];
              if (v100 - *(_QWORD *)(v101 + 320) < *(_QWORD *)(v101 + 328))
              {
                if (*(_BYTE *)(v101 + 336))
                {
                  v102 = v345;
                  if ((unint64_t)v345 >= v346)
                  {
                    v103 = sub_10041D664((uint64_t *)&v344, (uint64_t)(v87 + 5));
                  }
                  else
                  {
                    *v345 = &off_100918298;
                    v102[1] = v101;
                    sub_10003C37C(v101);
                    v103 = (uint64_t)(v102 + 2);
                  }
                  v345 = (_QWORD *)v103;
                  v119 = v423;
                  if (v423 >= 0x122u)
                    v119 = 290;
                  v423 = v119;
                  ++v317;
                  goto LABEL_192;
                }
                v115 = qword_1009998B8;
                if (!os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEBUG))
                  goto LABEL_192;
                sub_1000340DC(v87[4], (uint64_t)v413);
                v116 = v413;
                if (v414[9] < 0)
                  v116 = *(_BYTE **)v413;
                *(_DWORD *)buf = v321;
                *(_QWORD *)&buf[4] = v116;
                v117 = v115;
                v118 = "session %{public}s was never in foreground, extended advertising not allowed, skipping";
LABEL_197:
                _os_log_debug_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEBUG, v118, buf, 0xCu);
                if ((v414[9] & 0x80000000) == 0)
                  goto LABEL_192;
                v114 = *(void **)v413;
LABEL_199:
                operator delete(v114);
                goto LABEL_192;
              }
              v109 = qword_1009998B8;
              if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEBUG))
              {
                sub_1000340DC(v87[4], (uint64_t)buf);
                v110 = buf;
                if (SBYTE7(v389) < 0)
                  v110 = *(uint8_t **)buf;
                v111 = v87[6];
                v113 = *(_QWORD *)(v111 + 320);
                v112 = *(_QWORD *)(v111 + 328);
                *(_DWORD *)v413 = 136446722;
                *(_QWORD *)&v413[4] = v110;
                *(_WORD *)&v413[12] = 2048;
                *(_QWORD *)v414 = v100 - v113;
                *(_WORD *)&v414[8] = 2048;
                *(_QWORD *)&v414[10] = v112;
                _os_log_debug_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEBUG, "session %{public}s has been advertising in background for %llu seconds, but max is %llu, skipping", v413, 0x20u);
                if (SBYTE7(v389) < 0)
                {
                  v114 = *(void **)buf;
                  goto LABEL_199;
                }
              }
            }
LABEL_192:
            v98 = (void *)v396;
            if (!(_QWORD)v396)
            {
LABEL_174:
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              ++v84;
              v16 = 1;
              goto LABEL_144;
            }
          }
          *((_QWORD *)&v396 + 1) = v98;
          operator delete(v98);
          goto LABEL_174;
        }
        v94 = qword_100999950;
        if (os_log_type_enabled((os_log_t)qword_100999950, OS_LOG_TYPE_INFO))
        {
          sub_1000340DC(v91, (uint64_t)v413);
          v95 = v413;
          if (v414[9] < 0)
            v95 = *(_BYTE **)v413;
          LODWORD(__p[0]) = v321;
          *(void **)((char *)__p + 4) = v95;
          _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_INFO, "Session %{public}s is on the EN instance, skipping hash", (uint8_t *)__p, 0xCu);
          goto LABEL_165;
        }
      }
      else
      {
LABEL_143:
        v92 = qword_1009998B8;
        if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
        {
          sub_1000340DC(*(_QWORD *)(v83 + 16), (uint64_t)v413);
          v104 = v413;
          if (v414[9] < 0)
            v104 = *(_BYTE **)v413;
          LODWORD(__p[0]) = v321;
          *(void **)((char *)__p + 4) = v104;
          _os_log_error_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_ERROR, "Could not find %{public}s in our advertising sessions, ignoring", (uint8_t *)__p, 0xCu);
LABEL_165:
          if ((v414[9] & 0x80000000) != 0)
            operator delete(*(void **)v413);
        }
      }
LABEL_144:
      v83 = *(_QWORD *)(v83 + 8);
      if (v83 == a1 + 16848)
        goto LABEL_201;
    }
  }
  v317 = 0;
  v84 = 0;
LABEL_201:
  v121 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v413 = 67109376;
    *(_DWORD *)&v413[4] = v84;
    *(_WORD *)&v413[8] = 1024;
    *(_DWORD *)&v413[10] = v317;
    _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEFAULT, "background advertising sessions:AppleMFG:%d Extended:%d", v413, 0xEu);
  }
  if ((v16 & 1) == 0)
  {
    if (a4)
    {
      v129 = a4;
      v130 = a3 + 1;
      v131 = &v422;
      do
      {
        v132 = *(_WORD *)v131;
        v131 = (uint64_t *)((char *)v131 + 2);
        *v130 = v132;
        v130 += 1668;
        --v129;
      }
      while (v129);
    }
    goto LABEL_505;
  }
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10093CF20);
  if (!sub_1004BA84C(off_100977B38))
  {
    v122 = qword_1009998B8;
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v413 = 0;
      _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_INFO, "Limiting advertisement duty cycle based on other activies", v413, 2u);
    }
    v123 = v422;
    if ((unsigned __int16)v422 <= 0x122u)
      v123 = 290;
    LOWORD(v422) = v123;
    v124 = WORD1(v422);
    if (WORD1(v422) <= 0x122u)
      v124 = 290;
    WORD1(v422) = v124;
  }
  bzero(v413, 0x203AuLL);
  bzero(__p, 0x203AuLL);
  v410 = 0;
  v409 = 0;
  v408 = 0;
  v407 = 0;
  v126 = 28;
  if ((v318 & 1) != 0)
    v127 = 31;
  else
    v127 = 28;
  if ((v323 & 1) != 0)
    v126 = 31;
  v324 = v127;
  v404[0] = v127;
  v322 = v126;
  v404[1] = v126;
  v405 = vdupq_n_s64(0x1FuLL);
  v319 = *(_WORD *)(a1 + 16904);
  v406 = v319;
  v403 = 0;
  v402 = 0u;
  v401 = 0u;
  v400 = 0u;
  v399 = 0u;
  v398 = 0u;
  v397 = 0u;
  v396 = 0u;
  v395 = 0;
  v394 = 0u;
  v393 = 0u;
  v392 = 0u;
  v391 = 0u;
  v390 = 0u;
  v389 = 0u;
  *(_OWORD *)buf = 0u;
  v387 = 0;
  v386 = 0u;
  memset(v385, 0, sizeof(v385));
  v384 = 0;
  memset(v383, 0, sizeof(v383));
  v382 = 0;
  memset(v381, 0, sizeof(v381));
  v380 = 0;
  memset(v379, 0, sizeof(v379));
  v336 = 0;
  v335 = 0;
  if (v351 != v350)
  {
    v128 = *((_QWORD *)v350 + 1);
    if (*(char *)(v128 + 39) < 0)
    {
      v125 = sub_10003430C(__dst, *(void **)(v128 + 16), *(_QWORD *)(v128 + 24));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(v128 + 16);
      *(_QWORD *)&__dst[16] = *(_QWORD *)(v128 + 32);
    }
    if (*((char *)__src + 23) < 0)
      operator delete(*__src);
    *(_OWORD *)__src = *(_OWORD *)__dst;
    __src[2] = *(void **)&__dst[16];
    for (i = (uint64_t)v350; (char *)i != v351; i += 16)
    {
      memset(__dst, 0, 24);
      sub_1005F57E0(*(_QWORD *)(i + 8), 2, __dst);
      if (a4 < 2)
        v135 = 0;
      else
        v135 = *(unsigned __int8 *)(*(_QWORD *)(i + 8) + 264);
      sub_10060072C(v134, (_QWORD *)&v396 + 3 * v135, (unsigned __int8 **)__dst, 0xFFFFu);
      sub_1005F57E0(*(_QWORD *)(i + 8), 4, v377);
      v136 = *(_QWORD *)__dst;
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__dst = *(_OWORD *)v377;
      *(_QWORD *)&__dst[16] = v378;
      sub_10060072C(v136, &buf[24 * v135], (unsigned __int8 **)__dst, 0xFFFFu);
      sub_1005F57E0(*(_QWORD *)(i + 8), 16, v377);
      v137 = *(_QWORD *)__dst;
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__dst = *(_OWORD *)v377;
      *(_QWORD *)&__dst[16] = v378;
      sub_10060072C(v137, (_QWORD *)v385 + 3 * v135, (unsigned __int8 **)__dst, 0xFFFFu);
      sub_1005F597C(*(_QWORD *)(i + 8), 2, v377);
      v138 = *(_QWORD *)__dst;
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__dst = *(_OWORD *)v377;
      *(_QWORD *)&__dst[16] = v378;
      sub_10060072C(v138, (_QWORD *)v383 + 3 * v135, (unsigned __int8 **)__dst, 0xFFFFu);
      sub_1005F597C(*(_QWORD *)(i + 8), 4, v377);
      v139 = *(_QWORD *)__dst;
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__dst = *(_OWORD *)v377;
      *(_QWORD *)&__dst[16] = v378;
      sub_10060072C(v139, (_QWORD *)v381 + 3 * v135, (unsigned __int8 **)__dst, 0xFFFFu);
      sub_1005F597C(*(_QWORD *)(i + 8), 16, v377);
      v140 = *(_QWORD *)__dst;
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__dst = *(_OWORD *)v377;
      *(_QWORD *)&__dst[16] = v378;
      sub_10060072C(v140, (_QWORD *)v379 + 3 * v135, (unsigned __int8 **)__dst, 0xFFFFu);
      *((_BYTE *)&v335 + v135) = *((_QWORD *)v385 + 3 * v135 + 1) != *((_QWORD *)v385 + 3 * v135);
      v125 = *(const void **)__dst;
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
    }
  }
  if (a4)
  {
    v141 = (uint64_t)v344;
    if (v345 != v344 && *(_BYTE *)(a1 + 16874) && *v326)
    {
      do
      {
        memset(__dst, 0, 24);
        sub_1005F57E0(*(_QWORD *)(v141 + 8), 2, __dst);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&__dst[8] - *(_QWORD *)__dst) >> 2) >= 3)
          sub_100603AC8(__dst, 2uLL);
        sub_10060072C(v142, &v402, (unsigned __int8 **)__dst, 0xFFFFu);
        v125 = *(const void **)__dst;
        if (*(_QWORD *)__dst)
        {
          *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
          operator delete(*(void **)__dst);
        }
        v141 += 16;
      }
      while ((_QWORD *)v141 != v345);
      v336 = 0;
    }
  }
  v143 = (uint64_t)v347;
  if (v348 != v347)
  {
    while (1)
    {
      v144 = (void *)*((unsigned __int8 *)__src + 23);
      v145 = (char)v144;
      if ((char)v144 < 0)
        v144 = __src[1];
      if (v144)
        goto LABEL_264;
      v146 = *(_QWORD *)(v143 + 8);
      if (*(char *)(v146 + 39) < 0)
        break;
      *(_OWORD *)__dst = *(_OWORD *)(v146 + 16);
      *(_QWORD *)&__dst[16] = *(_QWORD *)(v146 + 32);
      if (v145 < 0)
        goto LABEL_262;
LABEL_263:
      *(_OWORD *)__src = *(_OWORD *)__dst;
      __src[2] = *(void **)&__dst[16];
LABEL_264:
      if (a4 < 2)
        v147 = 0;
      else
        v147 = *(unsigned __int8 *)(*(_QWORD *)(v143 + 8) + 264);
      memset(__dst, 0, 24);
      sub_1005F57E0(*(_QWORD *)(v143 + 8), 2, __dst);
      sub_10060072C(v148, (_QWORD *)&v396 + 3 * v147, (unsigned __int8 **)__dst, 0xFFFFu);
      sub_1005F57E0(*(_QWORD *)(v143 + 8), 4, v377);
      v149 = *(_QWORD *)__dst;
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__dst = *(_OWORD *)v377;
      *(_QWORD *)&__dst[16] = v378;
      sub_10060072C(v149, &buf[24 * v147], (unsigned __int8 **)__dst, 0xFFFFu);
      sub_1005F57E0(*(_QWORD *)(v143 + 8), 16, v377);
      v150 = *(_QWORD *)__dst;
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__dst = *(_OWORD *)v377;
      *(_QWORD *)&__dst[16] = v378;
      sub_10060072C(v150, (_QWORD *)v385 + 3 * v147, (unsigned __int8 **)__dst, 0xFFFFu);
      sub_1005F597C(*(_QWORD *)(v143 + 8), 2, v377);
      v151 = *(_QWORD *)__dst;
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__dst = *(_OWORD *)v377;
      *(_QWORD *)&__dst[16] = v378;
      sub_10060072C(v151, (_QWORD *)v383 + 3 * v147, (unsigned __int8 **)__dst, 0xFFFFu);
      sub_1005F597C(*(_QWORD *)(v143 + 8), 4, v377);
      v152 = *(_QWORD *)__dst;
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__dst = *(_OWORD *)v377;
      *(_QWORD *)&__dst[16] = v378;
      sub_10060072C(v152, (_QWORD *)v381 + 3 * v147, (unsigned __int8 **)__dst, 0xFFFFu);
      sub_1005F597C(*(_QWORD *)(v143 + 8), 16, v377);
      v153 = *(_QWORD *)__dst;
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__dst = *(_OWORD *)v377;
      *(_QWORD *)&__dst[16] = v378;
      sub_10060072C(v153, (_QWORD *)v379 + 3 * v147, (unsigned __int8 **)__dst, 0xFFFFu);
      v125 = *(const void **)__dst;
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
      v143 += 16;
      if ((char *)v143 == v348)
        goto LABEL_283;
    }
    sub_10003430C(__dst, *(void **)(v146 + 16), *(_QWORD *)(v146 + 24));
    if ((*((_BYTE *)__src + 23) & 0x80) == 0)
      goto LABEL_263;
LABEL_262:
    operator delete(*__src);
    goto LABEL_263;
  }
LABEL_283:
  v154 = (uint64_t)v350;
  if (v351 == v350)
    goto LABEL_299;
  do
  {
    v155 = sub_10003F8C4(*(_QWORD *)(v154 + 8) + 224);
    v125 = (const void *)sub_10003EB18(*(_QWORD *)(v154 + 8) + 224);
    if (a4 < 2)
    {
      v156 = 0;
      if (!v155)
        goto LABEL_290;
    }
    else
    {
      v156 = *(unsigned __int8 *)(*(_QWORD *)(v154 + 8) + 264);
      if (!v155)
        goto LABEL_290;
    }
    v157 = *((unsigned __int16 *)&v409 + v156);
    if (v155 <= v404[v156] - v157)
    {
      v158 = v156;
      v125 = memcpy(&v413[1650 * v156 + v157], v125, v155);
      *((_WORD *)&v409 + v158) = v157 + v155;
    }
LABEL_290:
    v154 += 16;
  }
  while ((char *)v154 != v351);
  v159 = (uint64_t)v350;
  if ((char *)v154 != v350)
  {
    do
    {
      v160 = sub_10003F8C4(*(_QWORD *)(v159 + 8) + 48);
      v125 = (const void *)sub_10003EB18(*(_QWORD *)(v159 + 8) + 48);
      if (a4 < 2)
      {
        v161 = 0;
        if (v160)
        {
LABEL_296:
          v162 = *((unsigned __int16 *)&v409 + v161);
          if (v160 <= v404[v161] - v162)
          {
            v163 = v161;
            v125 = memcpy(&v413[1650 * v161 + v162], v125, v160);
            *((_WORD *)&v409 + v163) = v162 + v160;
          }
        }
      }
      else
      {
        v161 = *(unsigned __int8 *)(*(_QWORD *)(v159 + 8) + 264);
        if (v160)
          goto LABEL_296;
      }
      v159 += 16;
    }
    while ((char *)v159 != v351);
  }
LABEL_299:
  if ((_BYTE)v335)
  {
    v164 = v409;
    v125 = (const void *)sub_100603B04((uint64_t)v125, &v413[(unsigned __int16)v409], (unsigned __int16)(v324 - v409), (__int128 **)v385, 0x10u, (void **)a6, a7);
    LOWORD(v409) = (_WORD)v125 + v164;
  }
  if (BYTE1(v335))
  {
    v165 = WORD1(v409);
    v125 = (const void *)sub_100603B04((uint64_t)v125, &v419[WORD1(v409)], (unsigned __int16)(v322 - WORD1(v409)), (__int128 **)&v385[1] + 1, 0x10u, (void **)a6, a7);
    WORD1(v409) = (_WORD)v125 + v165;
  }
  if (v336)
  {
    v166 = v410;
    v125 = (const void *)sub_100603B04((uint64_t)v125, &v419[v410 + 4950], (unsigned __int16)(v319 - v410), (__int128 **)&v386, 0x10u, (void **)a6, a7);
    v410 = (_WORD)v125 + v166;
  }
  if (a4)
  {
    v167 = 0;
    v168 = &v335;
    v169 = (__int16 *)v404;
    v170 = &v409;
    v171 = v413;
    do
    {
      v172 = *(unsigned __int16 *)v170;
      v174 = *v169;
      v169 += 4;
      v173 = v174;
      v175 = sub_100603B04((uint64_t)v125, &v171[v172], (unsigned __int16)(v174 - v172), (__int128 **)&buf[v167], 4u, (void **)a6, a7);
      LOWORD(v172) = v175 + v172;
      v176 = sub_100603B04(v175, &v171[(unsigned __int16)v172], (unsigned __int16)(v174 - v172), (__int128 **)((char *)&v396 + v167), 2u, (void **)a6, a7);
      v177 = v176 + v172;
      v178 = v177;
      if (!*(_BYTE *)v168)
      {
        v176 = sub_100603B04(v176, &v171[v177], (unsigned __int16)(v173 - v177), (__int128 **)((char *)v385 + v167), 0x10u, (void **)a6, a7);
        v178 = v176 + v177;
        *(_WORD *)v170 = v176 + v177;
      }
      v179 = sub_100603F30(v176, &v171[v178], (unsigned __int16)(v173 - v178), (__int128 **)((char *)v383 + v167), 2u, a8);
      v180 = v179 + v178;
      v181 = sub_100603F30(v179, &v171[(unsigned __int16)(v179 + v178)], (unsigned __int16)(v173 - (v179 + v178)), (__int128 **)((char *)v381 + v167), 4u, a8);
      v182 = v181 + v180;
      v125 = (const void *)sub_100603F30(v181, &v171[v182], (unsigned __int16)(v173 - v182), (__int128 **)((char *)v379 + v167), 0x10u, a8);
      *(_WORD *)v170 = (_WORD)v125 + v182;
      v170 = (uint64_t *)((char *)v170 + 2);
      v167 += 24;
      v168 = (int *)((char *)v168 + 1);
      v171 += 1650;
    }
    while (24 * a4 != v167);
  }
  v183 = (uint64_t)v350;
  for (j = __src; (char *)v183 != v351; v183 += 16)
  {
    memset(__dst, 0, 24);
    v185 = sub_1000B6B08((uint64_t *)__dst, *(_QWORD *)(v183 + 8) + 112);
    if (a4 < 2)
      v186 = 0;
    else
      v186 = *(unsigned __int8 *)(*(_QWORD *)(v183 + 8) + 264);
    v187 = *((unsigned __int16 *)&v409 + v186);
    *((_WORD *)&v409 + v186) = sub_100604198((uint64_t)v185, (uint64_t)&v413[1650 * v186 + v187], (unsigned __int16)v404[v186] - (unsigned __int16)v187, __dst, a10, 2)+ v187;
    sub_100056B54((uint64_t)__dst, *(_QWORD **)&__dst[8]);
  }
  v188 = (uint64_t)v348;
  if (v348 != v347)
  {
    v188 = (uint64_t)v347;
    do
    {
      memset(__dst, 0, 24);
      v189 = sub_1000B6B08((uint64_t *)__dst, *(_QWORD *)(v188 + 8) + 112);
      if (a4 < 2)
        v190 = 0;
      else
        v190 = *(unsigned __int8 *)(*(_QWORD *)(v188 + 8) + 264);
      v191 = *((unsigned __int16 *)&v409 + v190);
      *((_WORD *)&v409 + v190) = sub_100604198((uint64_t)v189, (uint64_t)&v413[1650 * v190 + v191], (unsigned __int16)v404[v190] - (unsigned __int16)v191, __dst, a10, 2)+ v191;
      sub_100056B54((uint64_t)__dst, *(_QWORD **)&__dst[8]);
      v188 += 16;
    }
    while ((char *)v188 != v348);
  }
  v192 = *((unsigned __int8 *)__src + 23);
  v193 = v192;
  if ((v192 & 0x80u) == 0)
    v194 = *((unsigned __int8 *)__src + 23);
  else
    v194 = (unint64_t)__src[1];
  if (v194)
  {
    v195 = -21;
    if (a7[1] == *a7)
      v195 = 0;
    v196 = v195 + v324;
    v197 = (v324 - v409) > v196;
    if ((v324 - v409) >= v196)
      v196 = v324 - v409;
    v198 = v197;
    v199 = v196 - 2;
    if (v194 <= v199)
      v200 = __src[1];
    else
      LOBYTE(v200) = v199;
    if (v194 <= v199)
      LOBYTE(v199) = *((_BYTE *)__src + 23);
    if ((v192 & 0x80u) != 0)
      LOBYTE(v199) = (_BYTE)v200;
    if (v194 + 2 <= (v324 - v409))
      v201 = 1;
    else
      v201 = v198;
    if (v201)
      v202 = (void **)v413;
    else
      v202 = __p;
    if (v201)
      v203 = &v409;
    else
      v203 = &v407;
    v204 = v199;
    if ((char)v192 < 0)
    {
      if ((unint64_t)__src[1] > v199)
      {
        v377[0] = (size_t)__src[1];
        v334 = v199;
        v205 = (char *)*__src;
        goto LABEL_353;
      }
    }
    else if (v199 < v192)
    {
      v377[0] = *((unsigned __int8 *)__src + 23);
      v334 = v199;
      v205 = (char *)__src;
LABEL_353:
      v333 = v205;
      v206 = (char *)malloc_type_calloc(v199 + 1, 1uLL, 0x100004077774924uLL);
      v332 = v206;
      v207 = iconv_open("UTF-8", "UTF-8");
      if (iconv(v207, &v333, v377, &v332, &v334))
      {
        v208 = qword_1009998B8;
        if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_INFO))
        {
          if (*((char *)__src + 23) >= 0)
            v209 = __src;
          else
            v209 = *__src;
          *(_DWORD *)__dst = 136315394;
          *(_QWORD *)&__dst[4] = v209;
          *(_WORD *)&__dst[12] = 2080;
          *(_QWORD *)&__dst[14] = v206;
          _os_log_impl((void *)&_mh_execute_header, v208, OS_LOG_TYPE_INFO, "Adjusted advertisement name \"%s\" to fit - using \"%s\"", __dst, 0x16u);
        }
      }
      iconv_close(v207);
      free(v206);
      LOBYTE(v199) = v204 - v334;
      v193 = *((_BYTE *)__src + 23);
    }
    v210 = v199;
    v211 = *(unsigned __int16 *)v203;
    *(_WORD *)v203 = v211 + 1;
    *((_BYTE *)v202 + v211) = v199 + 1;
    v212 = v211 + 2;
    if ((v193 & 0x80) != 0)
    {
      j = *__src;
      if ((unint64_t)__src[1] > v199)
        v213 = 8;
      else
        v213 = 9;
    }
    else if (v199 < (unint64_t)v193)
    {
      v213 = 8;
    }
    else
    {
      v213 = 9;
    }
    *(_WORD *)v203 = v212;
    *((_BYTE *)v202 + (unsigned __int16)(v211 + 1)) = v213;
    memcpy((char *)v202 + v212, j, v199);
    *(_WORD *)v203 = v212 + v210;
    v188 = (uint64_t)v348;
  }
  v214 = (uint64_t)v347;
  if ((char *)v188 != v347)
  {
    while (2)
    {
      v215 = sub_10003F8C4(*(_QWORD *)(v214 + 8) + 224);
      v216 = (const void *)sub_10003EB18(*(_QWORD *)(v214 + 8) + 224);
      if (a4 < 2)
      {
        v217 = 0;
        if (!v215)
          goto LABEL_375;
      }
      else
      {
        v217 = *(unsigned __int8 *)(*(_QWORD *)(v214 + 8) + 264);
        if (!v215)
          goto LABEL_375;
      }
      v218 = *((unsigned __int16 *)&v409 + v217);
      if (v215 <= v404[v217] - v218)
      {
        v219 = v217;
        memcpy(&v413[1650 * v217 + v218], v216, v215);
        *((_WORD *)&v409 + v219) = v218 + v215;
      }
LABEL_375:
      v214 += 16;
      if ((char *)v214 != v348)
        continue;
      break;
    }
    v220 = (uint64_t)v347;
    if ((char *)v214 != v347)
    {
      while (2)
      {
        v221 = sub_10003F8C4(*(_QWORD *)(v220 + 8) + 48);
        v222 = (const void *)sub_10003EB18(*(_QWORD *)(v220 + 8) + 48);
        if (a4 < 2)
        {
          v223 = 0;
          if (!v221)
            goto LABEL_383;
        }
        else
        {
          v223 = *(unsigned __int8 *)(*(_QWORD *)(v220 + 8) + 264);
          if (!v221)
            goto LABEL_383;
        }
        v224 = *((unsigned __int16 *)&v409 + v223);
        if (v221 <= v404[v223] - v224)
        {
          v225 = v223;
          memcpy(&v413[1650 * v223 + v224], v222, v221);
          *((_WORD *)&v409 + v225) = v224 + v221;
        }
LABEL_383:
        v220 += 16;
        if ((char *)v220 == v348)
          break;
        continue;
      }
    }
  }
  v226 = (uint64_t)v341;
  v227 = (uint64_t)v342;
  if (v342 == v341)
  {
    v226 = (uint64_t)v342;
  }
  else
  {
    v228 = a4 > 1;
    v229 = &v413[1650 * v228];
    v230 = (_WORD *)((unint64_t)&v409 | (2 * v228));
    do
    {
      v231 = sub_10003F8C4(*(_QWORD *)(v226 + 8) + 152);
      if (v231)
      {
        v232 = (const void *)sub_10003EB18(*(_QWORD *)(v226 + 8) + 152);
        v233 = v231 + 2;
        if (v231 != -2)
        {
          v234 = (unsigned __int16)*v230;
          v235 = 1650 - v234;
          if (v233 <= 1650 - v234)
          {
            v229[v234] = v231 + 1;
            v237 = v234 + 2;
            v229[(unsigned __int16)(v234 + 1)] = -1;
            memcpy(&v229[(unsigned __int16)(v234 + 2)], v232, v231);
            *v230 = v237 + v231;
          }
          else
          {
            v236 = qword_1009998B8;
            if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__dst = 67109632;
              *(_DWORD *)&__dst[4] = v228;
              *(_WORD *)&__dst[8] = 2048;
              *(_QWORD *)&__dst[10] = v233;
              *(_WORD *)&__dst[18] = 2048;
              *(_QWORD *)&__dst[20] = v235;
              _os_log_impl((void *)&_mh_execute_header, v236, OS_LOG_TYPE_DEFAULT, "Non Apple manufacturer data cannot fit in advertisement instance %u mfgDataLen %zu available space %lu", __dst, 0x1Cu);
            }
          }
        }
      }
      v226 += 16;
    }
    while ((_QWORD *)v226 != v342);
    v227 = (uint64_t)v341;
  }
  v238 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__dst = 134218496;
    *(_QWORD *)&__dst[4] = (v348 - v347) >> 4;
    *(_WORD *)&__dst[12] = 2048;
    *(_QWORD *)&__dst[14] = (v351 - v350) >> 4;
    *(_WORD *)&__dst[22] = 2048;
    *(_QWORD *)&__dst[24] = (v226 - v227) >> 4;
    _os_log_impl((void *)&_mh_execute_header, v238, OS_LOG_TYPE_INFO, "dameon %lu fg %lu lp %lu", __dst, 0x20u);
    v227 = (uint64_t)v341;
    v226 = (uint64_t)v342;
  }
  if (v226 != v227)
  {
    v239 = a4 > 1;
    v240 = &v413[1650 * v239];
    v241 = (_WORD *)((unint64_t)&v409 | (2 * v239));
    do
    {
      v242 = sub_10003F8C4(*(_QWORD *)(v227 + 8) + 136);
      v243 = v242;
      if (v242)
      {
        if (v242 == 7)
        {
          v244 = (int *)sub_10003EB18(*(_QWORD *)(v227 + 8) + 136);
          v245 = (unsigned __int16)*v241;
          if ((unint64_t)(v245 - 1651) > 0xFFFFFFFFFFFFFFF6)
          {
            v249 = qword_1009998B8;
            if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__dst = 67109632;
              *(_DWORD *)&__dst[4] = v239;
              *(_WORD *)&__dst[8] = 1024;
              *(_DWORD *)&__dst[10] = 9;
              *(_WORD *)&__dst[14] = 2048;
              *(_QWORD *)&__dst[16] = 1650 - v245;
              _os_log_impl((void *)&_mh_execute_header, v249, OS_LOG_TYPE_DEFAULT, "LE Bluetooth Device Address cannot fit in advertisement instance %u leBtAddrAdStructLen %hhu available space %lu", __dst, 0x18u);
            }
          }
          else
          {
            v240[v245] = 8;
            v240[(unsigned __int16)(v245 + 1)] = 27;
            v246 = &v240[(unsigned __int16)(v245 + 2)];
            v247 = *v244;
            *(_DWORD *)((char *)v246 + 3) = *(int *)((char *)v244 + 3);
            *v246 = v247;
            *v241 = v245 + 9;
          }
        }
        else
        {
          v248 = qword_1009998B8;
          if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__dst = 67109632;
            *(_DWORD *)&__dst[4] = 7;
            *(_WORD *)&__dst[8] = 2048;
            *(_QWORD *)&__dst[10] = v243;
            *(_WORD *)&__dst[18] = 1024;
            *(_DWORD *)&__dst[20] = v239;
            _os_log_error_impl((void *)&_mh_execute_header, v248, OS_LOG_TYPE_ERROR, "Advertisement data for device address must have length %d (len %zu), instance %u", __dst, 0x18u);
          }
        }
      }
      v227 += 16;
    }
    while ((_QWORD *)v227 != v342);
  }
  v250 = *a7;
  if (a7[1] != *a7)
  {
    v377[1] = 0;
    v377[0] = 0;
    do
    {
      __dst[0] = 0;
      LOBYTE(v334) = 0;
      v251 = v250[4];
      v375 = *(_OWORD *)v250;
      v376 = v251;
      sub_1004750E0((unsigned __int8 *)&v375, __dst, &v334);
      *((_BYTE *)v377 + __dst[0]) |= 1 << v334;
      v250 += 5;
    }
    while (v250 != a7[1]);
    v252 = qword_1009998B8;
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__dst = 68157954;
      *(_DWORD *)&__dst[4] = 16;
      *(_WORD *)&__dst[8] = 2096;
      *(_QWORD *)&__dst[10] = v377;
      _os_log_impl((void *)&_mh_execute_header, v252, OS_LOG_TYPE_INFO, "Hashed UUIDs: %.16P", __dst, 0x12u);
    }
    v253 = v404[0];
    v254 = v409;
    if ((LOBYTE(v404[0]) - v407) <= 0x14uLL
      && os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_FAULT))
    {
      sub_10070F61C();
    }
    v255 = __p;
    if ((v253 - v254) > 0x14uLL)
      v255 = (void **)v413;
    v256 = &v407;
    if ((v253 - v254) > 0x14uLL)
      v256 = &v409;
    v257 = *(unsigned __int16 *)v256;
    *((_BYTE *)v255 + v257) = 20;
    *((_BYTE *)v255 + (unsigned __int16)(v257 + 1)) = -1;
    *((_BYTE *)v255 + (unsigned __int16)(v257 + 2)) = 76;
    *((_BYTE *)v255 + (unsigned __int16)(v257 + 3)) = 0;
    *((_BYTE *)v255 + (unsigned __int16)(v257 + 4)) = 1;
    *(_OWORD *)((char *)v255 + (unsigned __int16)(v257 + 5)) = *(_OWORD *)v377;
    *(_WORD *)v256 = v257 + 21;
  }
  v258 = (uint64_t)v350;
  if (v351 != v350)
  {
    while (2)
    {
      v259 = sub_10003F8C4(*(_QWORD *)(v258 + 8) + 272);
      v260 = (const void *)sub_10003EB18(*(_QWORD *)(v258 + 8) + 272);
      v261 = sub_10003F8C4(*(_QWORD *)(v258 + 8) + 288);
      v262 = (const void *)sub_10003EB18(*(_QWORD *)(v258 + 8) + 288);
      if (a4 < 2)
      {
        v263 = 0;
      }
      else
      {
        v263 = *(unsigned __int8 *)(*(_QWORD *)(v258 + 8) + 264);
        if (v263 == 4)
        {
          v264 = *(unsigned __int16 *)(a1 + 16904);
          goto LABEL_427;
        }
      }
      v264 = 31;
LABEL_427:
      if (v259 - 1 < v264)
      {
        memcpy(&v413[1650 * v263], v260, v259);
        *((_WORD *)&v409 + v263) = v259;
        LOBYTE(a3[1668 * v263 + 1659]) = 1;
      }
      if (v261 - 1 < v264)
      {
        memcpy((char *)__p + 1650 * v263, v262, v261);
        *((_WORD *)&v407 + v263) = v261;
      }
      v258 += 16;
      if ((char *)v258 == v351)
        break;
      continue;
    }
  }
  v265 = (uint64_t)v347;
  if (v348 != v347)
  {
    while (2)
    {
      v266 = sub_10003F8C4(*(_QWORD *)(v265 + 8) + 272);
      v267 = (const void *)sub_10003EB18(*(_QWORD *)(v265 + 8) + 272);
      v268 = sub_10003F8C4(*(_QWORD *)(v265 + 8) + 288);
      v269 = (const void *)sub_10003EB18(*(_QWORD *)(v265 + 8) + 288);
      if (a4 < 2)
      {
        v270 = 0;
      }
      else
      {
        v270 = *(unsigned __int8 *)(*(_QWORD *)(v265 + 8) + 264);
        if (v270 == 4)
        {
          v271 = *(unsigned __int16 *)(a1 + 16904);
          goto LABEL_438;
        }
      }
      v271 = 31;
LABEL_438:
      if (v266 - 1 < v271)
      {
        memcpy(&v413[1650 * v270], v267, v266);
        *((_WORD *)&v409 + v270) = v266;
        LOBYTE(a3[1668 * v270 + 1659]) = 1;
      }
      if (v268 - 1 < v271)
      {
        memcpy((char *)__p + 1650 * v270, v269, v268);
        *((_WORD *)&v407 + v270) = v268;
      }
      v265 += 16;
      if ((char *)v265 == v348)
        break;
      continue;
    }
  }
  if (a4)
  {
    v272 = 0;
    v273 = 0;
    if ((v320 & 1) != 0)
      v274 = 0;
    else
      v274 = 3;
    if ((v320 & 1) != 0)
      v275 = 3;
    else
      v275 = 0;
    v276 = __p;
    v277 = v413;
    do
    {
      v278 = (char *)&a3[v272];
      *v278 = 0;
      *((_WORD *)v278 + 1) = *((_WORD *)&v422 + v273);
      v279 = v275;
      if ((_DWORD)v273)
      {
        v279 = v274;
        if ((_DWORD)v273 != 4)
          v279 = 3;
      }
      v278[1] = v279;
      v280 = *((_WORD *)&v409 + v273);
      if (v280)
      {
        memcpy((char *)&a3[v272 + 2] + 1, v277, *((unsigned __int16 *)&v409 + v273));
        a3[v272 + 828] = v280;
      }
      v281 = *((_WORD *)&v407 + v273);
      if (v281)
      {
        memcpy(&a3[v272 + 829], v276, *((unsigned __int16 *)&v407 + v273));
        a3[v272 + 1654] = v281;
      }
      switch((int)v273)
      {
        case 0:
          v282 = *(unsigned __int16 *)(a1 + 17002);
          if (!*(_WORD *)(a1 + 17002))
            goto LABEL_478;
          v283 = qword_1009998B8;
          if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__dst = 67109120;
            *(_DWORD *)&__dst[4] = v282;
            _os_log_impl((void *)&_mh_execute_header, v283, OS_LOG_TYPE_DEFAULT, "Using override value (%d) for connectable advertisement interval", __dst, 8u);
            LOWORD(v282) = *(_WORD *)(a1 + 17002);
          }
          break;
        case 1:
          v282 = *(unsigned __int16 *)(a1 + 17004);
          if (!*(_WORD *)(a1 + 17004))
            goto LABEL_478;
          v284 = qword_1009998B8;
          if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__dst = 67109120;
            *(_DWORD *)&__dst[4] = v282;
            _os_log_impl((void *)&_mh_execute_header, v284, OS_LOG_TYPE_DEFAULT, "Using override value (%d) for non connectable advertisement interval", __dst, 8u);
            LOWORD(v282) = *(_WORD *)(a1 + 17004);
          }
          break;
        case 2:
          v285 = *(unsigned __int16 *)(a1 + 17010);
          if (*(_WORD *)(a1 + 17010))
          {
            v286 = qword_1009998B8;
            if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__dst = 67109120;
              *(_DWORD *)&__dst[4] = v285;
              _os_log_impl((void *)&_mh_execute_header, v286, OS_LOG_TYPE_DEFAULT, "Using override value (%d) for Contact advertisement interval", __dst, 8u);
              LOWORD(v285) = *(_WORD *)(a1 + 17010);
            }
            *((_WORD *)v278 + 1) = v285;
          }
          v287 = sub_100027F68();
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v287 + 184))(v287) & 1) == 0)
            goto LABEL_480;
          goto LABEL_478;
        case 3:
          v282 = *(unsigned __int16 *)(a1 + 17006);
          if (!*(_WORD *)(a1 + 17006))
            goto LABEL_478;
          v288 = qword_1009998B8;
          if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__dst = 67109120;
            *(_DWORD *)&__dst[4] = v282;
            _os_log_impl((void *)&_mh_execute_header, v288, OS_LOG_TYPE_DEFAULT, "Using override value (%d) for Object Discovery advertisement interval", __dst, 8u);
            LOWORD(v282) = *(_WORD *)(a1 + 17006);
          }
          break;
        case 4:
          v282 = *(unsigned __int16 *)(a1 + 17008);
          if (!*(_WORD *)(a1 + 17008))
            goto LABEL_478;
          v289 = qword_1009998B8;
          if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__dst = 67109120;
            *(_DWORD *)&__dst[4] = v282;
            _os_log_impl((void *)&_mh_execute_header, v289, OS_LOG_TYPE_DEFAULT, "Using override value (%d) for Extended advertisement interval", __dst, 8u);
            LOWORD(v282) = *(_WORD *)(a1 + 17008);
          }
          break;
        default:
          goto LABEL_478;
      }
      *((_WORD *)v278 + 1) = v282;
LABEL_478:
      v290 = qword_1009998C0;
      if (os_log_type_enabled((os_log_t)qword_1009998C0, OS_LOG_TYPE_DEBUG))
      {
        _X8 = v278 + 4992;
        __asm { PRFM            #0, [X8] }
        _X8 = v278 + 3338;
        v296 = (unsigned __int16)a3[v272 + 828];
        _X11 = (char *)&a3[v272 + 3322];
        v298 = v404[v273];
        __asm { PRFM            #0, [X11] }
        LODWORD(_X11) = (unsigned __int16)a3[v272 + 1654];
        __asm { PRFM            #0, [X8] }
        LODWORD(_X8) = *((unsigned __int16 *)v278 + 1);
        v301 = LOBYTE(a3[v272 + 1655]);
        v302 = HIBYTE(a3[v272 + 1658]);
        v303 = v278[1];
        *(_DWORD *)__dst = 67112706;
        *(_DWORD *)&__dst[4] = v273;
        *(_WORD *)&__dst[8] = 1040;
        *(_DWORD *)&__dst[10] = v296;
        *(_WORD *)&__dst[14] = 2096;
        *(_QWORD *)&__dst[16] = (char *)&a3[v272 + 2] + 1;
        *(_WORD *)&__dst[24] = 1024;
        *(_DWORD *)&__dst[26] = v296;
        *(_WORD *)&__dst[30] = 2048;
        v354 = v298;
        v355 = 1040;
        v356 = (int)_X11;
        v357 = 2096;
        v358 = (uint64_t)&a3[v272 + 829];
        v359 = 1024;
        v360 = (int)_X11;
        v361 = 2048;
        v362 = v298;
        v363 = 1024;
        v364 = (int)_X8;
        v365 = 1040;
        v366 = 6;
        v367 = 2096;
        v368 = (uint64_t)&a3[v272 + 1655] + 1;
        v369 = 1024;
        v370 = v301;
        v371 = 1024;
        v372 = v302;
        v373 = 1024;
        v374 = v303;
        _os_log_debug_impl((void *)&_mh_execute_header, v290, OS_LOG_TYPE_DEBUG, "%d. AdvData=%.*P(%d/%ld) ScanRspData=%.*P(%d/%ld) interval=%x address:%.6P type:%d overrideAddress:%d ADVType:%d", __dst, 0x70u);
      }
LABEL_480:
      ++v273;
      v272 += 1668;
      v276 = (void **)((char *)v276 + 1650);
      v277 += 1650;
    }
    while (1668 * a4 != v272);
  }
  for (k = 0; k != -120; k -= 24)
  {
    v305 = *(void **)((char *)&v379[6] + k);
    if (v305)
    {
      *(_QWORD *)((char *)&v379[6] + k + 8) = v305;
      operator delete(v305);
    }
  }
  for (m = 0; m != -120; m -= 24)
  {
    v307 = *(void **)((char *)&v381[6] + m);
    if (v307)
    {
      *(_QWORD *)((char *)&v381[6] + m + 8) = v307;
      operator delete(v307);
    }
  }
  for (n = 0; n != -120; n -= 24)
  {
    v309 = *(void **)((char *)&v383[6] + n);
    if (v309)
    {
      *(_QWORD *)((char *)&v383[6] + n + 8) = v309;
      operator delete(v309);
    }
  }
  for (ii = 0; ii != -120; ii -= 24)
  {
    v311 = *(void **)((char *)&v386 + ii);
    if (v311)
    {
      *(_QWORD *)((char *)&v386 + ii + 8) = v311;
      operator delete(v311);
    }
  }
  for (jj = 0; jj != -120; jj -= 24)
  {
    v313 = *(void **)((char *)&v394 + jj);
    if (v313)
    {
      *(_QWORD *)((char *)&v394 + jj + 8) = v313;
      operator delete(v313);
    }
  }
  for (kk = 0; kk != -120; kk -= 24)
  {
    v315 = *(void **)((char *)&v402 + kk);
    if (v315)
    {
      *(_QWORD *)((char *)&v402 + kk + 8) = v315;
      operator delete(v315);
    }
  }
LABEL_505:
  *(_QWORD *)v413 = &v341;
  sub_10041DBF8((void ***)v413);
  *(_QWORD *)v413 = &v344;
  sub_10041DBF8((void ***)v413);
  *(_QWORD *)v413 = &v347;
  sub_10041DBF8((void ***)v413);
  *(_QWORD *)v413 = &v350;
  sub_10041DBF8((void ***)v413);
}

void sub_1006037AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52)
{
  void *v53;
  void *v54;

  v53 = (void *)STACK[0x4A0];
  if (STACK[0x4A0])
  {
    STACK[0x4A8] = (unint64_t)v53;
    operator delete(v53);
  }
  v54 = (void *)STACK[0x560];
  if (STACK[0x560])
  {
    STACK[0x568] = (unint64_t)v54;
    operator delete(v54);
  }
  STACK[0x25A0] = (unint64_t)&a43;
  sub_10041DBF8((void ***)&STACK[0x25A0]);
  STACK[0x25A0] = (unint64_t)&a46;
  sub_10041DBF8((void ***)&STACK[0x25A0]);
  STACK[0x25A0] = (unint64_t)&a49;
  sub_10041DBF8((void ***)&STACK[0x25A0]);
  STACK[0x25A0] = (unint64_t)&a52;
  sub_10041DBF8((void ***)&STACK[0x25A0]);
  _Unwind_Resume(a1);
}

void sub_100603AC8(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_100607804(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 20 * a2;
  }
}

uint64_t sub_100603B04(uint64_t a1, _BYTE *a2, unsigned int a3, __int128 **a4, unsigned int a5, void **a6, void **a7)
{
  char v13;
  char v14;
  uint64_t v15;
  unsigned __int16 v16;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  __int128 *v22;
  int v23;
  char *v24;
  char *v25;
  __int128 v26;
  char *v27;
  __int128 v28;
  char *v29;
  char *v30;
  __int128 v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;
  char *v49;
  __int128 v50;
  char *v51;
  char *v52;
  char *v53;
  __int128 v54;
  NSObject *log;
  unsigned __int16 v56;
  uint8_t buf[16];
  unsigned int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;

  switch(a5)
  {
    case 2u:
      v13 = 2;
      v14 = 3;
      break;
    case 0x10u:
      v13 = 6;
      v14 = 7;
      break;
    case 4u:
      v13 = 4;
      v14 = 5;
      break;
    default:
      return 0;
  }
  v15 = (char *)a4[1] - (char *)*a4;
  if (!v15 || a5 + 2 > a3)
    return 0;
  v18 = 0xCCCCCCCCCCCCCCCDLL * (v15 >> 2);
  v19 = (unsigned __int16)(a3 - 2);
  if (v18 >= v19 / a5)
    v20 = v19 / a5;
  else
    v20 = v18;
  v56 = v20 * a5 + 1;
  log = qword_1009998C0;
  if (os_log_type_enabled((os_log_t)qword_1009998C0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67110144;
    *(_DWORD *)&buf[4] = a3;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = 2;
    *(_WORD *)&buf[14] = 1024;
    v58 = v19;
    v59 = 1024;
    v60 = v20;
    v61 = 1024;
    v62 = v56;
    _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "uuidsToData size:%d position:%d sizeRemaining:%d numUUISThatFit:%d advStructureLen:%d", buf, 0x20u);
  }
  *a2 = v56;
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)a4[1] - (char *)*a4) >> 2) <= v20)
    v21 = v14;
  else
    v21 = v13;
  a2[1] = v21;
  v22 = *a4;
  if (*a4 == a4[1])
  {
    return 2;
  }
  else
  {
    v23 = a3 - a5;
    v16 = 2;
    do
    {
      if (v23 >= v16)
      {
        v28 = *v22;
        v58 = *((_DWORD *)v22 + 4);
        *(_OWORD *)buf = v28;
        sub_100072C50(&a2[v16], buf, 1);
        v30 = (char *)a6[1];
        v29 = (char *)a6[2];
        if (v30 >= v29)
        {
          v38 = 0xCCCCCCCCCCCCCCCDLL * ((v30 - (_BYTE *)*a6) >> 2);
          v39 = v38 + 1;
          if (v38 + 1 > 0xCCCCCCCCCCCCCCCLL)
            abort();
          v40 = 0xCCCCCCCCCCCCCCCDLL * ((v29 - (_BYTE *)*a6) >> 2);
          if (2 * v40 > v39)
            v39 = 2 * v40;
          if (v40 >= 0x666666666666666)
            v41 = 0xCCCCCCCCCCCCCCCLL;
          else
            v41 = v39;
          if (v41)
            v42 = (char *)sub_1000B58EC((uint64_t)(a6 + 2), v41);
          else
            v42 = 0;
          v49 = &v42[20 * v38];
          v50 = *v22;
          *((_DWORD *)v49 + 4) = *((_DWORD *)v22 + 4);
          *(_OWORD *)v49 = v50;
          v52 = (char *)*a6;
          v51 = (char *)a6[1];
          v53 = v49;
          if (v51 != *a6)
          {
            do
            {
              v54 = *(_OWORD *)(v51 - 20);
              *((_DWORD *)v53 - 1) = *((_DWORD *)v51 - 1);
              *(_OWORD *)(v53 - 20) = v54;
              v53 -= 20;
              v51 -= 20;
            }
            while (v51 != v52);
            v51 = (char *)*a6;
          }
          v32 = v49 + 20;
          *a6 = v53;
          a6[1] = v49 + 20;
          a6[2] = &v42[20 * v41];
          if (v51)
            operator delete(v51);
        }
        else
        {
          v31 = *v22;
          *((_DWORD *)v30 + 4) = *((_DWORD *)v22 + 4);
          *(_OWORD *)v30 = v31;
          v32 = v30 + 20;
        }
        v16 += a5;
        a6[1] = v32;
      }
      else
      {
        v25 = (char *)a7[1];
        v24 = (char *)a7[2];
        if (v25 >= v24)
        {
          v33 = 0xCCCCCCCCCCCCCCCDLL * ((v25 - (_BYTE *)*a7) >> 2);
          v34 = v33 + 1;
          if (v33 + 1 > 0xCCCCCCCCCCCCCCCLL)
            abort();
          v35 = 0xCCCCCCCCCCCCCCCDLL * ((v24 - (_BYTE *)*a7) >> 2);
          if (2 * v35 > v34)
            v34 = 2 * v35;
          if (v35 >= 0x666666666666666)
            v36 = 0xCCCCCCCCCCCCCCCLL;
          else
            v36 = v34;
          if (v36)
            v37 = (char *)sub_1000B58EC((uint64_t)(a7 + 2), v36);
          else
            v37 = 0;
          v43 = &v37[20 * v33];
          v44 = *v22;
          *((_DWORD *)v43 + 4) = *((_DWORD *)v22 + 4);
          *(_OWORD *)v43 = v44;
          v46 = (char *)*a7;
          v45 = (char *)a7[1];
          v47 = v43;
          if (v45 != *a7)
          {
            do
            {
              v48 = *(_OWORD *)(v45 - 20);
              *((_DWORD *)v47 - 1) = *((_DWORD *)v45 - 1);
              *(_OWORD *)(v47 - 20) = v48;
              v47 -= 20;
              v45 -= 20;
            }
            while (v45 != v46);
            v45 = (char *)*a7;
          }
          v27 = v43 + 20;
          *a7 = v47;
          a7[1] = v43 + 20;
          a7[2] = &v37[20 * v36];
          if (v45)
            operator delete(v45);
        }
        else
        {
          v26 = *v22;
          *((_DWORD *)v25 + 4) = *((_DWORD *)v22 + 4);
          *(_OWORD *)v25 = v26;
          v27 = v25 + 20;
        }
        a7[1] = v27;
      }
      v22 = (__int128 *)((char *)v22 + 20);
    }
    while (v22 != a4[1]);
  }
  return v16;
}

uint64_t sub_100603F30(uint64_t a1, _BYTE *a2, unsigned int a3, __int128 **a4, unsigned int a5, void **a6)
{
  uint64_t v6;
  __int16 v7;
  unsigned __int16 v8;
  unint64_t v13;
  char v14;
  __int128 *v15;
  __int128 *v16;
  int v17;
  __int128 v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  int v36;

  v6 = (char *)a4[1] - (char *)*a4;
  if (!v6)
    return 0;
  v7 = a5;
  if (a5 + 2 > a3)
    return 0;
  v13 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 2);
  if (v13 >= (a3 - 2) / a5)
    LOBYTE(v13) = (a3 - 2) / a5;
  *a2 = v13 * a5 + 1;
  switch(a5)
  {
    case 2u:
      v14 = 20;
      break;
    case 0x10u:
      v14 = 21;
      break;
    case 4u:
      v14 = 31;
      break;
    default:
      return 0;
  }
  a2[1] = v14;
  v16 = *a4;
  v15 = a4[1];
  if (*a4 == v15)
  {
    return 2;
  }
  else
  {
    v17 = a3 - a5;
    v34 = (uint64_t)(a6 + 2);
    v8 = 2;
    do
    {
      if (v17 >= v8)
      {
        v18 = *v16;
        v36 = *((_DWORD *)v16 + 4);
        v35 = v18;
        sub_100072C50(&a2[v8], (unsigned __int8 *)&v35, 1);
        v20 = (char *)a6[1];
        v19 = (char *)a6[2];
        if (v20 >= v19)
        {
          v23 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - (_BYTE *)*a6) >> 2);
          v24 = v23 + 1;
          if (v23 + 1 > 0xCCCCCCCCCCCCCCCLL)
            abort();
          v25 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - (_BYTE *)*a6) >> 2);
          if (2 * v25 > v24)
            v24 = 2 * v25;
          if (v25 >= 0x666666666666666)
            v26 = 0xCCCCCCCCCCCCCCCLL;
          else
            v26 = v24;
          if (v26)
            v27 = (char *)sub_1000B58EC(v34, v26);
          else
            v27 = 0;
          v28 = &v27[20 * v23];
          v29 = *v16;
          *((_DWORD *)v28 + 4) = *((_DWORD *)v16 + 4);
          *(_OWORD *)v28 = v29;
          v31 = (char *)*a6;
          v30 = (char *)a6[1];
          v32 = v28;
          if (v30 != *a6)
          {
            do
            {
              v33 = *(_OWORD *)(v30 - 20);
              *((_DWORD *)v32 - 1) = *((_DWORD *)v30 - 1);
              *(_OWORD *)(v32 - 20) = v33;
              v32 -= 20;
              v30 -= 20;
            }
            while (v30 != v31);
            v30 = (char *)*a6;
          }
          v22 = v28 + 20;
          *a6 = v32;
          a6[1] = v28 + 20;
          a6[2] = &v27[20 * v26];
          if (v30)
            operator delete(v30);
        }
        else
        {
          v21 = *v16;
          *((_DWORD *)v20 + 4) = *((_DWORD *)v16 + 4);
          *(_OWORD *)v20 = v21;
          v22 = v20 + 20;
        }
        v8 += v7;
        a6[1] = v22;
        v15 = a4[1];
      }
      v16 = (__int128 *)((char *)v16 + 20);
    }
    while (v16 != v15);
  }
  return v8;
}

uint64_t sub_100604198(uint64_t a1, uint64_t a2, __int16 a3, _QWORD *a4, uint64_t **a5, int a6)
{
  _QWORD *v6;
  _QWORD *v7;
  int v10;
  __int16 v11;
  __int16 v12;
  char v13;
  int v14;
  const void *v15;
  size_t v16;
  int v17;
  _OWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  _OWORD *v25;
  __int128 v26;
  int v27;

  v7 = a4 + 1;
  v6 = (_QWORD *)*a4;
  if ((_QWORD *)*a4 == a4 + 1)
  {
LABEL_17:
    LOWORD(v10) = 0;
  }
  else
  {
    v10 = 0;
    v11 = a6 + 1;
    do
    {
      v12 = sub_10003F8C4((uint64_t)(v6 + 7));
      if ((unsigned __int16)(v11 + v12) > (unsigned __int16)(a3 - v10))
        break;
      switch(a6)
      {
        case 2:
          v13 = 22;
          break;
        case 16:
          v13 = 33;
          break;
        case 4:
          v13 = 32;
          break;
        default:
          goto LABEL_17;
      }
      *(_BYTE *)(a2 + (unsigned __int16)v10) = v11 + v12;
      *(_BYTE *)(a2 + (unsigned __int16)(v10 + 1)) = v13;
      v26 = *((_OWORD *)v6 + 2);
      v27 = *((_DWORD *)v6 + 12);
      sub_100072C50((_BYTE *)(a2 + (unsigned __int16)(v10 + 2)), (unsigned __int8 *)&v26, 1);
      v14 = v10 + 2 + a6;
      v15 = (const void *)sub_10003EB18((uint64_t)(v6 + 7));
      v16 = sub_10003F8C4((uint64_t)(v6 + 7));
      memcpy((void *)(a2 + (unsigned __int16)v14), v15, v16);
      v17 = sub_10003F8C4((uint64_t)(v6 + 7));
      v25 = v6 + 4;
      v18 = sub_10009C400(a5, (unsigned __int8 *)v6 + 32, (uint64_t)&unk_100740F58, &v25);
      sub_100041698((uint64_t)v18 + 56, (uint64_t)(v6 + 7));
      v19 = (_QWORD *)v6[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v6[2];
          v21 = *v20 == (_QWORD)v6;
          v6 = v20;
        }
        while (!v21);
      }
      v10 = v14 + v17;
      v6 = v20;
    }
    while (v20 != v7);
  }
  return (unsigned __int16)v10;
}

BOOL sub_100604368(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  size_t v5;

  if (*a2 != *a3)
    return 1;
  if (*((unsigned __int16 *)a2 + 1) != *((unsigned __int16 *)a3 + 1))
    return 1;
  if (a2[4] != a3[4])
    return 1;
  if (*((unsigned __int16 *)a2 + 828) != *((unsigned __int16 *)a3 + 828))
    return 1;
  if (*((unsigned __int16 *)a2 + 1654) != *((unsigned __int16 *)a3 + 1654))
    return 1;
  if (a2[3317] != a3[3317])
    return 1;
  if (a2[3318] != a3[3318])
    return 1;
  v5 = *(unsigned __int16 *)(a1 + 16904);
  if (memcmp(a2 + 5, a3 + 5, v5) || memcmp(a2 + 1658, a3 + 1658, v5))
    return 1;
  return *(_DWORD *)(a2 + 3310) != *(_DWORD *)(a3 + 3310) || *(_DWORD *)(a2 + 3313) != *(_DWORD *)(a3 + 3313);
}

void sub_100604460(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  dispatch_block_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  dispatch_block_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned int *)(a1 + 40);
  if (!*(_QWORD *)(v1 + 8 * v2 + 16952))
  {
    if ((_DWORD)v2 == 1)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100604644;
      block[3] = &unk_100917378;
      block[4] = v1;
      v9 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, block);
      v10 = *(unsigned int *)(a1 + 40);
      v11 = v1 + 16952;
      v12 = *(void **)(v11 + 8 * v10);
      *(_QWORD *)(v11 + 8 * v10) = v9;

      v13 = sub_10006BBEC();
      sub_100475CEC(v13, 10000, *(void **)(v11 + 8 * *(unsigned int *)(a1 + 40)));
    }
    else if (!(_DWORD)v2)
    {
      v4 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, &stru_10093CE60);
      v5 = *(unsigned int *)(a1 + 40);
      v6 = v1 + 16952;
      v7 = *(void **)(v6 + 8 * v5);
      *(_QWORD *)(v6 + 8 * v5) = v4;

      v8 = sub_10006BBEC();
      sub_100475CEC(v8, 10000, *(void **)(v6 + 8 * *(unsigned int *)(a1 + 40)));
    }
  }
}

void sub_100604558(id a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  char v19;

  v1 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
    sub_10070F6E8(v1, v2, v3, v4, v5, v6, v7, v8);
  v19 = 0;
  sub_100043758(&v19);
  v9 = sub_100052F88();
  if (!(_DWORD)v9)
  {
    sub_100222BC0(v9, v10, v11, v12, v13, v14, v15, v16);
    sub_10004339C(&v19);
    v17 = sub_100027F68();
    sub_100091AE8(&v18, "updateAdvertisement busy with address change timeout");
    sub_1005756F0(v17, 4074, &v18, 1);
  }
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
    sub_10070F6BC();
  sub_100043728(&v19);
}

void sub_100604618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  sub_100043728((_BYTE *)(v14 - 17));
  _Unwind_Resume(a1);
}

_BYTE *sub_100604644(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v24[5];
  __int128 v25;
  void *__p[2];
  char v27;
  void *v28[2];
  char v29;
  char v30;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
    sub_10070F754(v2, v3, v4, v5, v6, v7, v8, v9);
  v30 = 0;
  v10 = sub_100027F68();
  sub_100091AE8(v28, "LE");
  sub_100091AE8(__p, "CrashOnAdvertisingWatchdog");
  v11 = (*(uint64_t (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v10 + 72))(v10, v28, __p, &v30);
  if (v30)
    v12 = v11;
  else
    v12 = 0;
  if (v27 < 0)
    operator delete(__p[0]);
  if (v29 < 0)
    operator delete(v28[0]);
  if (v12)
  {
    v23 = sub_100027F68();
    sub_100091AE8(&v25, "updateAdvertisement in unsettled state timeout");
    sub_1005756F0(v23, 4075, &v25, 1);
  }
  sub_1005F92FC(v1, 0);
  LOBYTE(v28[0]) = 0;
  sub_100043758(v28);
  v13 = sub_100052F88();
  if ((_DWORD)v13)
  {
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
      sub_10070F6BC();
  }
  else
  {
    sub_100222BC0(v13, v14, v15, v16, v17, v18, v19, v20);
    sub_100221D68(1);
    v21 = *(_QWORD *)(v1 + 48);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_10060482C;
    v24[3] = &unk_100917378;
    v24[4] = v1;
    sub_100475CEC(v21, 200, v24);
  }
  return sub_100043728(v28);
}

void sub_1006047D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10060482C(uint64_t a1)
{
  return sub_1005FA418(*(_QWORD *)(a1 + 32), 0);
}

void sub_100604838(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 8 * *(unsigned int *)(a1 + 40) + 16952);
  if (v3)
  {
    dispatch_block_cancel(v3);
    v4 = v2 + 8 * *(unsigned int *)(a1 + 40);
    v5 = *(void **)(v4 + 16952);
    *(_QWORD *)(v4 + 16952) = 0;

  }
}

uint64_t sub_100604888(uint64_t a1)
{
  return sub_1005FA418(*(_QWORD *)(a1 + 32), 1);
}

void sub_100604894(int a1)
{
  uint64_t v2;
  _QWORD v3[4];
  int v4;

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100604F54;
  v3[3] = &unk_100918130;
  v4 = a1;
  sub_100041A34(v2, v3);
}

uint64_t sub_1006048F4(uint64_t a1)
{
  return sub_1005FA418(*(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_100604900(uint64_t a1)
{
  return sub_1005FA418(*(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_10060490C(uint64_t a1)
{
  return sub_1005FA418(*(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_100604918(uint64_t a1)
{
  return sub_1005FA418(*(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_100604924(uint64_t a1, int a2)
{
  _BYTE *v4;
  NSObject *v5;
  const char *v6;
  unsigned int v7;
  NSObject *v8;
  uint64_t v9;
  uint8_t *v10;
  uint8_t *v11;
  uint8_t *v12;
  BOOL v13;
  NSObject *v14;
  uint64_t v15;
  _QWORD v17[5];
  _QWORD v18[5];
  uint8_t v19[16];
  _QWORD v20[2];
  uint8_t buf[24];

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 56);
  if (*(_BYTE *)(a1 + 41))
  {
    if (a2 != 4073 && a2)
    {
      if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
        sub_10070F860();
      sub_1005F92FC(a1, 0);
      buf[0] = 0;
      sub_100043758(buf);
      sub_100221D68(1);
      sub_10004339C(buf);
      v9 = *(_QWORD *)(a1 + 48);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_100604D10;
      v17[3] = &unk_100917378;
      v17[4] = a1;
      sub_100041A34(v9, v17);
      sub_100043728(buf);
    }
    else
    {
      v4 = (_BYTE *)(a1 + 16944);
      v5 = qword_1009998B8;
      if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
      {
        v6 = "Stopped";
        if (*(_DWORD *)(a1 + 120) == 1)
          v6 = "Started";
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v6;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = a2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}s advertising successfully status=%{bluetooth:OI_STATUS}u", buf, 0x12u);
      }
      v7 = *(unsigned __int16 *)(a1 + 16968);
      if (*(_WORD *)(a1 + 16968) && (++word_100993EC8, !((unsigned __int16)word_100993EC8 % v7)))
      {
        if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
          sub_10070F8E8();
      }
      else if (*(_DWORD *)(a1 + 120) == 1)
      {
        sub_1005F92FC(a1, 2u);
        if (!*(_BYTE *)(a1 + 17072))
          sub_1005F8F14(a1);
      }
      else
      {
        sub_1005F92FC(a1, 0);
      }
      memset(buf, 0, sizeof(buf));
      sub_10060763C((uint64_t *)buf, a1 + 16880);
      v10 = *(uint8_t **)buf;
      if (*(uint8_t **)buf != &buf[8])
      {
        do
        {
          (***((void (****)(_QWORD, BOOL))v10 + 4))(*((_QWORD *)v10 + 4), *(_DWORD *)(a1 + 120) != 0);
          v11 = (uint8_t *)*((_QWORD *)v10 + 1);
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = *(uint8_t **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (uint8_t *)*((_QWORD *)v10 + 2);
              v13 = *(_QWORD *)v12 == (_QWORD)v10;
              v10 = v12;
            }
            while (!v13);
          }
          v10 = v12;
        }
        while (v12 != &buf[8]);
      }
      if (a2 == 4073)
      {
        v14 = qword_1009998B8;
        if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v19 = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Advertising stopped due to LE_GAP_ADDRESS_REFRESH_IN_PROGRESS, need to update our advertisers", v19, 2u);
        }
        *v4 = 1;
      }
      else
      {
        v15 = *(_QWORD *)(a1 + 48);
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472;
        v18[2] = sub_100604D00;
        v18[3] = &unk_100917378;
        v18[4] = a1;
        sub_100041A34(v15, v18);
      }
      sub_100034264((uint64_t)v20);
      sub_10001A82C((uint64_t)buf, *(_QWORD **)&buf[8]);
    }
  }
  else
  {
    v8 = qword_1009998B8;
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Stack is off", buf, 2u);
    }
    sub_1005F92FC(a1, 0);
  }
  return sub_100034234((uint64_t)v20);
}

void sub_100604CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100604D00(uint64_t a1)
{
  return sub_1005FA418(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 16945));
}

uint64_t sub_100604D10(uint64_t a1)
{
  return sub_1005FA418(*(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_100604D1C(uint64_t result, int a2, uint64_t a3, int a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  _QWORD v18[5];
  char v19;
  _QWORD v20[2];
  uint8_t buf[4];
  int v22;

  if (a2)
    return result;
  v5 = result;
  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, result + 56);
  *(_BYTE *)(v5 + 16872) = a4;
  if (a4)
    v6 = 2;
  else
    v6 = 1;
  *(_DWORD *)(v5 + 136) = v6;
  v19 = 0;
  sub_100043758(&v19);
  *(_WORD *)(v5 + 16904) = sub_100206F98();
  sub_10004339C(&v19);
  v7 = *(unsigned __int16 *)(v5 + 16904);
  if (v7 >= 0x673)
  {
    v8 = qword_1009998B8;
    if (!os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_FAULT))
    {
LABEL_7:
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        sub_10070F914(v7, v8, v9, v10, v11, v12, v13, v14);
      *(_WORD *)(v5 + 16904) = 1650;
      goto LABEL_10;
    }
    *(_DWORD *)buf = 67109120;
    v22 = v7;
    _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "fControllerMaxExtendedAdvertisingPayloadSize=%d", buf, 8u);
    v7 = *(unsigned __int16 *)(v5 + 16904);
    if (v7 >= 0x673)
    {
      v8 = qword_1009998B8;
      goto LABEL_7;
    }
  }
LABEL_10:
  *(_BYTE *)(v5 + 41) = 1;
  sub_100034264((uint64_t)v20);
  v15 = *(_QWORD *)(v5 + 48);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100604F48;
  v18[3] = &unk_100917378;
  v18[4] = v5;
  sub_100041A34(v15, v18);
  v16 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    if (sub_100222DA4())
      v17 = sub_100222DA4();
    else
      v17 = 1;
    *(_DWORD *)buf = 67109120;
    v22 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Stack supports %d advertising instances", buf, 8u);
  }
  sub_100043728(&v19);
  return sub_100034234((uint64_t)v20);
}

void sub_100604F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_100043728(&a17);
  sub_100034234((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100604F48(uint64_t a1)
{
  return sub_1005FA418(*(_QWORD *)(a1 + 32), 0);
}

uint64_t sub_100604F54(uint64_t a1)
{
  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_10093CF40);
  return sub_100604924((uint64_t)off_100977C28, *(_DWORD *)(a1 + 32));
}

uint64_t sub_100604FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_10093CF40);
  return sub_100604D1C((uint64_t)off_100977C28, *(_DWORD *)(a1 + 40), a3, *(unsigned __int8 *)(a1 + 44));
}

uint64_t sub_100604FF8(uint64_t a1, int a2, int a3, int a4)
{
  NSObject *v7;
  NSObject *v8;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;

  v7 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109632;
    v10[1] = a2;
    v11 = 1024;
    v12 = a3;
    v13 = 1024;
    v14 = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "setAddressTypeForInstance instance:%d addrType:%d refreshRootKeys:%d", (uint8_t *)v10, 0x14u);
  }
  if (a2 != 1)
    return 3;
  if ((a3 & 0xFFFFFFFE) != 2)
    return 0;
  if (a4)
  {
    v8 = qword_1009998B8;
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "setAddressTypeForInstance requires refresh of identity info", (uint8_t *)v10, 2u);
    }
    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_10093CF60);
    if (sub_10068D438((__n128 *)qword_1009778B0))
    {
      if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
        sub_10070F9DC();
      return 148;
    }
  }
  LOBYTE(v10[0]) = 0;
  sub_100043758(v10);
  if (!sub_100224514(a3, 1))
  {
    sub_100043728(v10);
    return 0;
  }
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
    sub_10070F97C();
  sub_100043728(v10);
  return 147;
}

void sub_1006051E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_100043728(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1006051FC(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  char v5;

  v5 = 0;
  sub_100043758(&v5);
  v3 = sub_1002231A8(a2);
  if ((_DWORD)v3 && os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_ERROR))
    sub_10070FA3C();
  sub_100043728(&v5);
  return v3;
}

void sub_100605274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_100605288()
{
  uint64_t v0;

  v0 = sub_1000419F4();
  sub_100041A34(v0, &stru_10093CE80);
}

void sub_1006052A4(id a1)
{
  char v1;

  v1 = 0;
  sub_100043758(&v1);
  sub_100224588();
  sub_100043728(&v1);
}

void sub_1006052DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1006052F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  if (qword_100993ED0 != -1)
    dispatch_once(&qword_100993ED0, &stru_10093CEC0);
  v2 = sub_1000438A4();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 3488))(v2);
  if ((_DWORD)result)
  {
    if (!*(_QWORD *)(a1 + 17016))
      sub_10034FFF8();
  }
  return result;
}

void sub_100605408(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100605470;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_100605470(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(result + 32);
  *(_BYTE *)(v1 + 40) = *(_BYTE *)(result + 40);
  if (*(_BYTE *)(v1 + 16874))
  {
    v2 = qword_1009998C0;
    if (os_log_type_enabled((os_log_t)qword_1009998C0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Screen state changed, updating advertisers", v3, 2u);
    }
    return sub_1005FA418(v1, 0);
  }
  return result;
}

void sub_1006054F8(uint64_t a1, char a2)
{
  sub_100605408(a1 - 16, a2);
}

void sub_100605500()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  v0 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Stream state changed, re-evaluating scan params", v2, 2u);
  }
  v1 = sub_1000419F4();
  sub_100041A34(v1, &stru_10093CEA0);
}

void sub_100605574(id a1)
{
  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_10093CF40);
  sub_1005FA418((uint64_t)off_100977C28, 0);
}

void sub_1006055B8()
{
  sub_100605500();
}

void sub_1006055C0(id a1)
{
  uint64_t v1;
  void *__p[2];
  char v3;
  void *v4[2];
  char v5;

  v1 = sub_100027F68();
  sub_100091AE8(v4, "POWER");
  sub_100091AE8(__p, "ForceWakeADVConfig");
  (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v1 + 72))(v1, v4, __p, &byte_100993ECA);
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
}

void sub_100605648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_10060567C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  char *v6;
  void *v7;
  _BYTE *v8;
  _BYTE *v9;
  NSObject *v10;
  void **v11;
  const char *v12;
  _OWORD *v13;
  void *v14;
  NSObject *v15;
  void **v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  _QWORD *v27;
  NSObject *v28;
  _BYTE *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  _QWORD *v37;
  NSObject *v38;
  _BYTE *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _QWORD *v46;
  NSObject *v47;
  _BYTE *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  NSObject *v52;
  _BYTE *v53;
  uint64_t v54;
  NSObject *v55;
  _BYTE *v56;
  uint64_t v57;
  NSObject *v58;
  _BYTE *v59;
  uint64_t v60;
  _QWORD *v61;
  _BYTE *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  __int128 *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  BOOL v71;
  uint64_t v72;
  NSObject *v73;
  _BYTE *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  __int128 v78;
  unsigned __int8 v79;
  _BYTE buf[22];
  unsigned __int8 v81;
  void *__p[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  void *v87[2];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;

  v3 = *(_QWORD *)(a2 + 48);
  if (v3)
    sub_10003C37C(*(_QWORD *)(a2 + 48));
  sub_1005F57E0(v3, 2, __p);
  v5 = __p[0];
  v4 = __p[1];
  sub_1005F57E0(v3, 4, __p);
  v7 = __p[0];
  v6 = (char *)__p[1];
  sub_1005F57E0(v3, 16, __p);
  v8 = __p[0];
  v9 = __p[1];
  v10 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000340DC(*(_QWORD *)(a2 + 32), (uint64_t)__p);
    if ((SBYTE7(v83) & 0x80u) == 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    v12 = "";
    if (!*(_BYTE *)(v3 + 12))
      v12 = "NON-";
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v11;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:    \"%{public}s\" %{public}sConnectable", buf, 0x16u);
    if (SBYTE7(v83) < 0)
      operator delete(__p[0]);
  }
  v13 = (_OWORD *)(v3 + 16);
  if (*(char *)(v3 + 39) < 0)
  {
    sub_10003430C(__p, *(void **)(v3 + 16), *(_QWORD *)(v3 + 24));
  }
  else
  {
    *(_OWORD *)__p = *v13;
    *(_QWORD *)&v83 = *(_QWORD *)(v3 + 32);
  }
  v76 = v7;
  if (SBYTE7(v83) < 0)
  {
    v14 = __p[1];
    operator delete(__p[0]);
    if (!v14)
      goto LABEL_26;
  }
  else if (!BYTE7(v83))
  {
    goto LABEL_26;
  }
  v15 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(v3 + 39) < 0)
    {
      sub_10003430C(__p, *(void **)(v3 + 16), *(_QWORD *)(v3 + 24));
    }
    else
    {
      *(_OWORD *)__p = *v13;
      *(_QWORD *)&v83 = *(_QWORD *)(v3 + 32);
    }
    v16 = __p;
    if (SBYTE7(v83) < 0)
      v16 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump:       Name: %s", buf, 0xCu);
    if (SBYTE7(v83) < 0)
      operator delete(__p[0]);
  }
LABEL_26:
  v17 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(_DWORD *)(v3 + 264);
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "statedump:       instance:%d", (uint8_t *)__p, 8u);
  }
  v19 = *(_QWORD *)(v3 + 256);
  if (v19)
  {
    v20 = qword_1009998B8;
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
    {
      v21 = sub_100021770(v19);
      v22 = (id)objc_claimAutoreleasedReturnValue(v21);
      LODWORD(__p[0]) = 138543362;
      *(void **)((char *)__p + 4) = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "statedump:       instanceAddress: %{public}@", (uint8_t *)__p, 0xCu);

    }
  }
  v77 = v8;
  if (v4 != v5)
  {
    v99 = 0;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    *(_OWORD *)v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    *(_OWORD *)__p = 0u;
    sub_1002613AC((uint64_t)__p);
    sub_1002614D8(&v83, (uint64_t)"      16-bit UUID(s): ", 22);
    if ((unint64_t)((v4 - v5) / 20) <= 1)
      v23 = 1;
    else
      v23 = (v4 - v5) / 20;
    v24 = (uint64_t)v5;
    do
    {
      sub_10006887C(v24, buf);
      if ((v81 & 0x80u) == 0)
        v25 = buf;
      else
        v25 = *(_BYTE **)buf;
      if ((v81 & 0x80u) == 0)
        v26 = v81;
      else
        v26 = *(_QWORD *)&buf[8];
      v27 = sub_1002614D8(&v83, (uint64_t)v25, v26);
      sub_1002614D8(v27, (uint64_t)" ", 1);
      if ((char)v81 < 0)
        operator delete(*(void **)buf);
      v24 += 20;
      --v23;
    }
    while (v23);
    v28 = qword_1009998B8;
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str((char *)&v83 + 8);
      v29 = (v81 & 0x80u) == 0 ? buf : *(_BYTE **)buf;
      LODWORD(v78) = 136446210;
      *(_QWORD *)((char *)&v78 + 4) = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", (uint8_t *)&v78, 0xCu);
      if ((char)v81 < 0)
        operator delete(*(void **)buf);
    }
    *(void **)((char *)__p
    *(_QWORD *)&v83 = v30;
    if (SHIBYTE(v88) < 0)
      operator delete(v87[1]);
    std::streambuf::~streambuf((char *)&v83 + 8);
    std::ios::~ios(&v90);
  }
  v31 = v76;
  v32 = v6 - (_BYTE *)v76;
  if (v32)
  {
    v99 = 0;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    *(_OWORD *)v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    *(_OWORD *)__p = 0u;
    sub_1002613AC((uint64_t)__p);
    sub_1002614D8(&v83, (uint64_t)"      32-bit UUID(s): ", 22);
    if ((unint64_t)(v32 / 20) <= 1)
      v33 = 1;
    else
      v33 = v32 / 20;
    v31 = v76;
    v34 = (uint64_t)v76;
    do
    {
      sub_10006887C(v34, buf);
      if ((v81 & 0x80u) == 0)
        v35 = buf;
      else
        v35 = *(_BYTE **)buf;
      if ((v81 & 0x80u) == 0)
        v36 = v81;
      else
        v36 = *(_QWORD *)&buf[8];
      v37 = sub_1002614D8(&v83, (uint64_t)v35, v36);
      sub_1002614D8(v37, (uint64_t)" ", 1);
      if ((char)v81 < 0)
        operator delete(*(void **)buf);
      v34 += 20;
      --v33;
    }
    while (v33);
    v38 = qword_1009998B8;
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str((char *)&v83 + 8);
      v39 = (v81 & 0x80u) == 0 ? buf : *(_BYTE **)buf;
      LODWORD(v78) = 136446210;
      *(_QWORD *)((char *)&v78 + 4) = v39;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", (uint8_t *)&v78, 0xCu);
      if ((char)v81 < 0)
        operator delete(*(void **)buf);
    }
    *(void **)((char *)__p
    *(_QWORD *)&v83 = v40;
    if (SHIBYTE(v88) < 0)
      operator delete(v87[1]);
    std::streambuf::~streambuf((char *)&v83 + 8);
    std::ios::~ios(&v90);
  }
  v41 = v9 - v8;
  if (v9 != v8)
  {
    v99 = 0;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    *(_OWORD *)v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    *(_OWORD *)__p = 0u;
    sub_1002613AC((uint64_t)__p);
    sub_1002614D8(&v83, (uint64_t)"      128-bit UUID(s): ", 23);
    if ((unint64_t)(v41 / 20) <= 1)
      v42 = 1;
    else
      v42 = v41 / 20;
    v43 = (uint64_t)v8;
    do
    {
      sub_10006887C(v43, buf);
      if ((v81 & 0x80u) == 0)
        v44 = buf;
      else
        v44 = *(_BYTE **)buf;
      if ((v81 & 0x80u) == 0)
        v45 = v81;
      else
        v45 = *(_QWORD *)&buf[8];
      v46 = sub_1002614D8(&v83, (uint64_t)v44, v45);
      sub_1002614D8(v46, (uint64_t)" ", 1);
      if ((char)v81 < 0)
        operator delete(*(void **)buf);
      v43 += 20;
      --v42;
    }
    while (v42);
    v47 = qword_1009998B8;
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str((char *)&v83 + 8);
      v48 = (v81 & 0x80u) == 0 ? buf : *(_BYTE **)buf;
      LODWORD(v78) = 136446210;
      *(_QWORD *)((char *)&v78 + 4) = v48;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", (uint8_t *)&v78, 0xCu);
      if ((char)v81 < 0)
        operator delete(*(void **)buf);
    }
    *(void **)((char *)__p
    *(_QWORD *)&v83 = v49;
    if (SHIBYTE(v88) < 0)
      operator delete(v87[1]);
    std::streambuf::~streambuf((char *)&v83 + 8);
    std::ios::~ios(&v90);
  }
  if (*(_BYTE *)(v3 + 308))
  {
    v99 = 0;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    *(_OWORD *)v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    *(_OWORD *)__p = 0u;
    sub_1002613AC((uint64_t)__p);
    v50 = sub_1002614D8(&v83, (uint64_t)"      ObjectLocatorOnThisInstance(", 34);
    v51 = (_QWORD *)std::ostream::operator<<(v50, *(unsigned int *)(v3 + 264));
    sub_1002614D8(v51, (uint64_t)")", 1);
    v52 = qword_1009998B8;
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str((char *)&v83 + 8);
      v53 = (v81 & 0x80u) == 0 ? buf : *(_BYTE **)buf;
      LODWORD(v78) = 136446210;
      *(_QWORD *)((char *)&v78 + 4) = v53;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", (uint8_t *)&v78, 0xCu);
      if ((char)v81 < 0)
        operator delete(*(void **)buf);
    }
    *(void **)((char *)__p
    *(_QWORD *)&v83 = v54;
    if (SHIBYTE(v88) < 0)
      operator delete(v87[1]);
    std::streambuf::~streambuf((char *)&v83 + 8);
    std::ios::~ios(&v90);
  }
  if (*(_BYTE *)(v3 + 360))
  {
    v99 = 0;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    *(_OWORD *)v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    *(_OWORD *)__p = 0u;
    sub_1002613AC((uint64_t)__p);
    sub_1002614D8(&v83, (uint64_t)"      PowerAssertion", 20);
    v55 = qword_1009998B8;
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str((char *)&v83 + 8);
      v56 = (v81 & 0x80u) == 0 ? buf : *(_BYTE **)buf;
      LODWORD(v78) = 136446210;
      *(_QWORD *)((char *)&v78 + 4) = v56;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", (uint8_t *)&v78, 0xCu);
      if ((char)v81 < 0)
        operator delete(*(void **)buf);
    }
    *(void **)((char *)__p
    *(_QWORD *)&v83 = v57;
    if (SHIBYTE(v88) < 0)
      operator delete(v87[1]);
    std::streambuf::~streambuf((char *)&v83 + 8);
    std::ios::~ios(&v90);
  }
  if (*(_DWORD *)(v3 + 264) == 2)
  {
    v99 = 0;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    *(_OWORD *)v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    *(_OWORD *)__p = 0u;
    sub_1002613AC((uint64_t)__p);
    sub_1002614D8(&v83, (uint64_t)"      Exposure Notification", 27);
    v58 = qword_100999950;
    if (os_log_type_enabled((os_log_t)qword_100999950, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str((char *)&v83 + 8);
      v59 = (v81 & 0x80u) == 0 ? buf : *(_BYTE **)buf;
      LODWORD(v78) = 136446210;
      *(_QWORD *)((char *)&v78 + 4) = v59;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", (uint8_t *)&v78, 0xCu);
      if ((char)v81 < 0)
        operator delete(*(void **)buf);
    }
    *(void **)((char *)__p
    *(_QWORD *)&v83 = v60;
    if (SHIBYTE(v88) < 0)
      operator delete(v87[1]);
    std::streambuf::~streambuf((char *)&v83 + 8);
    std::ios::~ios(&v90);
  }
  if (!*(_QWORD *)(v3 + 128))
    goto LABEL_164;
  v99 = 0;
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  *(_OWORD *)v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  *(_OWORD *)__p = 0u;
  sub_1002613AC((uint64_t)__p);
  sub_1002614D8(&v83, (uint64_t)"      serviceData(", 18);
  v61 = *(_QWORD **)(v3 + 112);
  if (v61 != (_QWORD *)(v3 + 120))
  {
    do
    {
      sub_10006887C((uint64_t)(v61 + 4), buf);
      if ((v81 & 0x80u) == 0)
        v62 = buf;
      else
        v62 = *(_BYTE **)buf;
      if ((v81 & 0x80u) == 0)
        v63 = v81;
      else
        v63 = *(_QWORD *)&buf[8];
      v64 = sub_1002614D8(&v83, (uint64_t)v62, v63);
      v65 = sub_1002614D8(v64, (uint64_t)"<", 1);
      sub_1000453F0((uint64_t)(v61 + 7), &v78);
      if ((v79 & 0x80u) == 0)
        v66 = &v78;
      else
        v66 = (__int128 *)v78;
      if ((v79 & 0x80u) == 0)
        v67 = v79;
      else
        v67 = *((_QWORD *)&v78 + 1);
      v68 = sub_1002614D8(v65, (uint64_t)v66, v67);
      sub_1002614D8(v68, (uint64_t)">", 1);
      if ((char)v79 < 0)
        operator delete((void *)v78);
      if ((char)v81 < 0)
        operator delete(*(void **)buf);
      v69 = (_QWORD *)v61[1];
      if (v69)
      {
        do
        {
          v70 = v69;
          v69 = (_QWORD *)*v69;
        }
        while (v69);
      }
      else
      {
        do
        {
          v70 = (_QWORD *)v61[2];
          v71 = *v70 == (_QWORD)v61;
          v61 = v70;
        }
        while (!v71);
      }
      v61 = v70;
    }
    while (v70 != (_QWORD *)(v3 + 120));
  }
  v31 = v76;
  sub_1002614D8(&v83, (uint64_t)")", 1);
  v72 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v72 + 176))(v72))
  {
    v73 = qword_100999950;
    if (os_log_type_enabled((os_log_t)qword_100999950, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str((char *)&v83 + 8);
      v74 = (v81 & 0x80u) == 0 ? buf : *(_BYTE **)buf;
      LODWORD(v78) = 136446210;
      *(_QWORD *)((char *)&v78 + 4) = v74;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", (uint8_t *)&v78, 0xCu);
      if ((char)v81 < 0)
        operator delete(*(void **)buf);
    }
  }
  *(void **)((char *)__p
  *(_QWORD *)&v83 = v75;
  if (SHIBYTE(v88) < 0)
    operator delete(v87[1]);
  std::streambuf::~streambuf((char *)&v83 + 8);
  std::ios::~ios(&v90);
  if (v3)
LABEL_164:
    sub_100056AAC((unsigned int *)v3);
  if (v77)
    operator delete(v77);
  if (v31)
    operator delete(v31);
  if (v5)
    operator delete(v5);
}

void sub_100606504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  unsigned int *v27;
  void *v28;
  void *v29;

  sub_100056AAC(v27);
  if (v28)
  {
    operator delete(v28);
    if (a11)
    {
LABEL_8:
      operator delete(a11);
      if (!v29)
LABEL_5:
        _Unwind_Resume(a1);
LABEL_4:
      operator delete(v29);
      goto LABEL_5;
    }
  }
  else if (a11)
  {
    goto LABEL_8;
  }
  if (!v29)
    goto LABEL_5;
  goto LABEL_4;
}

void sub_1006066BC(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  const char *v4;
  unsigned int v5;
  _BYTE *v6;
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  int v11;
  int v12;
  _BOOL4 v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v26;
  uint64_t v29;
  int v31;
  int v32;
  _BOOL8 v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t i;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v49;
  NSObject *v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t j;
  __int128 v58;
  id v59;
  void *__p[2];
  char v61;
  uint8_t buf[4];
  _BYTE v63[20];
  unint64_t v64;
  __int16 v65;
  const char *v66;

  v2 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: -------------------- LE Broadcaster ---------------------", buf, 2u);
    v2 = qword_1009998B8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 120);
    if (v3 > 3)
      v4 = "UNKNOWN";
    else
      v4 = off_10093CFF0[v3];
    v5 = (CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 128));
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)v63 = v4;
    *(_WORD *)&v63[8] = 1024;
    *(_DWORD *)&v63[10] = v3;
    *(_WORD *)&v63[14] = 1024;
    *(_DWORD *)&v63[16] = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Advertisement state: %{public}s(%d) duration:%d seconds", buf, 0x18u);
    v2 = qword_1009998B8;
  }
  v6 = (_BYTE *)(a1 + 16872);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a1 + 136);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v63 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Advertisement tech: %d", buf, 8u);
    v2 = qword_1009998B8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v8 = "";
    if (!*(_BYTE *)(a1 + 16873))
      v8 = "not";
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v63 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Extended advertising %{public}s supported", buf, 0xCu);
    v2 = qword_1009998B8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *v6;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v63 = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Advertisement # of instances: %d", buf, 8u);
    v2 = qword_1009998B8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v10 = "ON";
    if (!*(_BYTE *)(a1 + 41))
      v10 = "OFF";
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v63 = v10;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Stack:%{public}s", buf, 0xCu);
    v2 = qword_1009998B8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(unsigned __int16 *)(a1 + 16904);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v63 = v11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fControllerMaxExtendedAdvertisingPayloadSize:%d", buf, 8u);
    v2 = qword_1009998B8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(unsigned __int8 *)(a1 + 16874);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v63 = v12;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fHostSupportsBackgroundAdvertisingOnExtended:%d", buf, 8u);
    v2 = qword_1009998B8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_QWORD *)(a1 + 17016) != 0;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v63 = v13;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fConfigAdvertisingPowerAssertion:%d", buf, 8u);
    v2 = qword_1009998B8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_QWORD *)(a1 + 16936);
    v15 = "NO";
    if (*(_BYTE *)(a1 + 16944))
      v16 = "YES";
    else
      v16 = "NO";
    if (*(_BYTE *)(a1 + 16945))
      v15 = "YES";
    *(_DWORD *)buf = 134218754;
    *(_QWORD *)v63 = v14;
    *(_WORD *)&v63[8] = 2082;
    *(_QWORD *)&v63[10] = v16;
    *(_WORD *)&v63[18] = 2082;
    v64 = (unint64_t)v15;
    v65 = 2082;
    v66 = "YES";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fAdvertisingPowerAssertion:%llx fAddressChangeInProgress:%{public}s fDeferringUpdateAdvertisingState:%{public}s fAddressRefreshTimeoutCB created:%{public}s", buf, 0x2Au);
    v2 = qword_1009998B8;
  }
  if (*v6)
  {
    v17 = 0;
    do
    {
      v18 = a1 + 3336 * v17;
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        _X8 = v18 + 6817;
        v20 = a1 + 3336 * v17;
        __asm { PRFM            #0, [X8] }
        LODWORD(_X8) = *(unsigned __int8 *)(v20 + 145);
        LODWORD(v20) = *(unsigned __int16 *)(v20 + 146);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)v63 = v17;
        *(_WORD *)&v63[4] = 1024;
        *(_DWORD *)&v63[6] = _X8;
        *(_WORD *)&v63[10] = 1024;
        *(_DWORD *)&v63[12] = v20;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: %d. type:%d interval:%d ", buf, 0x14u);
        v2 = qword_1009998B8;
      }
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        _X8 = v18 + 8472;
        v26 = a1 + 3336 * v17;
        __asm { PRFM            #0, [X8] }
        LODWORD(_X8) = *(unsigned __int16 *)(v26 + 1800);
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)v63 = _X8;
        *(_WORD *)&v63[4] = 2096;
        *(_QWORD *)&v63[6] = v26 + 149;
        *(_WORD *)&v63[14] = 1024;
        *(_DWORD *)&v63[16] = _X8;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:     data:%.*P(%d)", buf, 0x18u);
        v2 = qword_1009998B8;
      }
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        _X8 = v18 + 10124;
        v29 = a1 + 3336 * v17;
        __asm { PRFM            #0, [X8] }
        LODWORD(_X8) = *(unsigned __int16 *)(v29 + 3452);
        *(_DWORD *)buf = 68158210;
        *(_DWORD *)v63 = _X8;
        *(_WORD *)&v63[4] = 2096;
        *(_QWORD *)&v63[6] = v29 + 1802;
        *(_WORD *)&v63[14] = 1024;
        *(_DWORD *)&v63[16] = _X8;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:     scanRspData:%.*P(%d)", buf, 0x18u);
        v2 = qword_1009998B8;
      }
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v31 = *(unsigned __int8 *)(a1 + v17 + 16921);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v63 = v31;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:     fObjectLocatorResponseOnAdvertisingHandle:%d", buf, 8u);
        v2 = qword_1009998B8;
      }
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v32 = *(unsigned __int8 *)(a1 + v17 + 16926);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v63 = v32;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:     fLEAdvTxPowerIncreaseAdvertisingHandle:%d", buf, 8u);
        v2 = qword_1009998B8;
      }
      ++v17;
    }
    while (v17 < *v6);
  }
  v33 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v33)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Advertising sessions:", buf, 2u);
  }
  v34 = *(_QWORD *)(a1 + 16824);
  v35 = (_QWORD *)(a1 + 16832);
  if (v34 != a1 + 16832)
  {
    do
    {
      sub_10060567C(v33, v34);
      v36 = *(_QWORD **)(v34 + 8);
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = *(_QWORD **)(v34 + 16);
          _ZF = *v37 == v34;
          v34 = (uint64_t)v37;
        }
        while (!_ZF);
      }
      v34 = (uint64_t)v37;
    }
    while (v37 != v35);
  }
  v38 = sub_1000063DC();
  v39 = *(_QWORD *)(a1 + 16864);
  if (v39)
  {
    v40 = v38;
    v41 = a1 + 16848;
    v42 = qword_1009998B8;
    if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v63 = v39;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: Backgrounded advertising sessions (%ld, sorted):", buf, 0xCu);
    }
    for (i = *(_QWORD *)(a1 + 16856); i != v41; i = *(_QWORD *)(i + 8))
    {
      v44 = (_QWORD *)*v35;
      if (!*v35)
        goto LABEL_70;
      v45 = *(_QWORD *)(i + 16);
      v46 = (_QWORD *)(a1 + 16832);
      do
      {
        v47 = v44[4];
        _CF = v47 >= v45;
        if (v47 >= v45)
          v49 = v44;
        else
          v49 = v44 + 1;
        if (_CF)
          v46 = v44;
        v44 = (_QWORD *)*v49;
      }
      while (*v49);
      if (v46 == v35 || v45 < v46[4])
LABEL_70:
        v46 = (_QWORD *)(a1 + 16832);
      v50 = qword_1009998B8;
      if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000340DC(v46[4], (uint64_t)__p);
        v51 = __p;
        if (v61 < 0)
          v51 = (void **)__p[0];
        v52 = v46[6];
        v53 = v40 - *(_QWORD *)(v52 + 320) / 0x3E8uLL;
        v54 = *(_QWORD *)(v52 + 328) / 0x3E8uLL;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)v63 = v51;
        *(_WORD *)&v63[8] = 2048;
        *(_QWORD *)&v63[10] = v53;
        *(_WORD *)&v63[18] = 2048;
        v64 = v54;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "statedump:    \"%{public}s\" for %llu seconds, timeout after %llu seconds", buf, 0x20u);
        if (v61 < 0)
          operator delete(__p[0]);
      }
    }
  }
  v55 = qword_1009998B8;
  if (os_log_type_enabled((os_log_t)qword_1009998B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "statedump: ADV Instance address history (recent first):", buf, 2u);
  }
  v56 = a1 + 17024;
  for (j = *(_QWORD *)(a1 + 17032); j != v56; j = *(_QWORD *)(j + 8))
  {
    v58 = *(_OWORD *)(j + 16);
    v59 = *(id *)(j + 32);
    sub_1005FBD18((uint64_t)v59, (uint64_t)&v58);
  }
}

uint64_t sub_100606F90(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD v5[4];
  int v6;

  v3 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100606FF4;
  v5[3] = &unk_100918130;
  v6 = a2;
  sub_100023D84(v3, v5);
  return 1;
}

void sub_100606FF4(uint64_t a1)
{
  if (qword_100978140 != -1)
    dispatch_once(&qword_100978140, &stru_10093CF80);
  if (*((_BYTE *)off_100978138 + 24) && *((_BYTE *)off_100978138 + 25) && !*((_BYTE *)off_100978138 + 27))
  {
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10093CEE0);
    sub_1002F164C((uint64_t)off_100978168, *(unsigned int *)(a1 + 32));
  }
}

uint64_t sub_1006070A0(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD v5[4];
  int v6;

  v3 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100606FF4;
  v5[3] = &unk_100918130;
  v6 = a2;
  sub_100023D84(v3, v5);
  return 1;
}

uint64_t sub_100607108()
{
  return 1;
}

uint64_t sub_100607110()
{
  return 1;
}

void sub_100607118(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];

        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_100607188(uint64_t a1, _QWORD *a2)
{
  unsigned int *v4;

  if (a2)
  {
    sub_100607188(a1, *a2);
    sub_100607188(a1, a2[1]);
    a2[5] = &off_100918298;
    v4 = (unsigned int *)a2[6];
    if (v4)
      sub_100056AAC(v4);
    operator delete(a2);
  }
}

void sub_1006071E0(id a1)
{
  operator new();
}

void sub_100607220()
{
  operator delete();
}

void sub_100607244(id a1)
{
  operator new();
}

void sub_100607284()
{
  operator delete();
}

void sub_1006072A8(id a1)
{
  operator new();
}

void sub_1006073C0()
{
  operator delete();
}

uint64_t *sub_1006073E4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100607438(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_100607420(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100607188(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100607438(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1006074BC(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1006074BC(uint64_t **a1, _QWORD *a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  v6 = (uint64_t **)sub_1002CCF34(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100607548((uint64_t)a1, a4, v8);
    sub_100004078(a1, v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void sub_100607548(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = operator new(0x38uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  v7[4] = *a2;
  v7[5] = &off_100918298;
  v8 = a2[2];
  v7[6] = v8;
  if (v8)
    sub_10003C37C(v8);
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1006075CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  *v1 = 0;
  sub_1006075E8(v2, v3);
  _Unwind_Resume(a1);
}

void sub_1006075E8(uint64_t a1, _QWORD *__p)
{
  unsigned int *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    __p[5] = &off_100918298;
    v3 = (unsigned int *)__p[6];
    if (v3)
      sub_100056AAC(v3);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *sub_10060763C(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10031F488(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_100607678(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001A82C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100607690(id a1)
{
  operator new();
}

void sub_1006076D0()
{
  operator delete();
}

uint64_t *sub_1006076F4(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x38uLL);
    v11[4] = **a4;
    v11[5] = (uint64_t)&off_100918298;
    v11[6] = 0;
    sub_100004078(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *sub_1006077BC(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  unsigned int *v4;

  v3 = sub_1000040CC(a1, a2);
  a2[5] = (uint64_t)&off_100918298;
  v4 = (unsigned int *)a2[6];
  if (v4)
    sub_100056AAC(v4);
  operator delete(a2);
  return v3;
}

void sub_100607804(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_BYTE **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - (uint64_t)v7) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = &v7[20 * a2];
      v14 = 20 * a2;
      do
      {
        sub_100069AFC(v7);
        v7 += 20;
        v14 -= 20;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v7[-*a1] >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL)
      abort();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x666666666666666)
      v11 = 0xCCCCCCCCCCCCCCCLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_1000B58EC(v4, v11);
    else
      v12 = 0;
    v15 = &v12[20 * v8];
    v16 = &v12[20 * v11];
    v17 = 5 * a2;
    v18 = &v15[20 * a2];
    v19 = 4 * v17;
    v20 = v15;
    do
    {
      v20 = sub_100069AFC(v20) + 20;
      v19 -= 20;
    }
    while (v19);
    v22 = (char *)*a1;
    v21 = (char *)a1[1];
    if (v21 != (char *)*a1)
    {
      do
      {
        v23 = *(_OWORD *)(v21 - 20);
        *((_DWORD *)v15 - 1) = *((_DWORD *)v21 - 1);
        *(_OWORD *)(v15 - 20) = v23;
        v15 -= 20;
        v21 -= 20;
      }
      while (v21 != v22);
      v21 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v18;
    a1[2] = v16;
    if (v21)
      operator delete(v21);
  }
}

void sub_100607978(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_10060799C(id a1)
{
  operator new();
}

void sub_1006079DC()
{
  operator delete();
}

void sub_100607A00(id a1)
{
  operator new();
}

void sub_100607A40()
{
  operator delete();
}

void sub_100607A80(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_100607A90(float a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;

  *(float *)a4 = a1;
  *(_QWORD *)(a4 + 4) = v4;
  *(_WORD *)(a4 + 12) = 1024;
  *(_DWORD *)(a4 + 14) = v5;
}

uint64_t sub_100607AA8(uint64_t a1)
{
  void *v2;
  uint64_t i;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  _BOOL4 v19;
  int v20;
  uint64_t v21;
  void *__p[2];
  char v24;
  unsigned __int8 v25;
  uint8_t buf[8];
  char v27;

  *(_QWORD *)a1 = off_10093D020;
  *(_QWORD *)(a1 + 8) = off_10093D080;
  v2 = (void *)(a1 + 16);
  for (i = 216; i != 840; i += 208)
    *(_QWORD *)(a1 + i) = 0;
  *(_DWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 672) = 5;
  bzero(v2, 0x288uLL);
  if (_os_feature_enabled_impl("BluetoothFeatures", "ConnectionSetup"))
    v4 = 5;
  else
    v4 = 4;
  *(_WORD *)(a1 + 680) = v4;
  v5 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 1))
  {
    v6 = sub_1000438A4();
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 2512))(v6);
    v8 = os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      if (v8)
        sub_10070FB20();
    }
    else if (v8)
    {
      sub_10070FB4C();
    }
    *(_DWORD *)(a1 + 664) |= 1u;
  }
  v9 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, 16))
  {
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEBUG))
      sub_10070FAF4();
    *(_DWORD *)(a1 + 664) |= 0x10u;
  }
  v10 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, 0x80000))
  {
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEBUG))
      sub_10070FAC8();
    *(_DWORD *)(a1 + 664) |= 0x80000u;
  }
  v11 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 48))(v11, 8))
  {
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEBUG))
      sub_10070FA9C();
    *(_DWORD *)(a1 + 664) |= 8u;
  }
  v12 = sub_10003BE44();
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 48))(v12, 0x100000);
  v14 = qword_1009999D0;
  if (v13)
  {
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Source supports GATT", buf, 2u);
      v14 = qword_1009999D0;
    }
    *(_DWORD *)(a1 + 664) |= 0x100000u;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_DWORD *)(a1 + 664);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Source supported profiles = %x", buf, 8u);
  }
  v25 = 0;
  v16 = sub_100027F68();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16) & 1) == 0)
  {
    v21 = *(_QWORD *)(a1 + 672);
LABEL_41:
    v21 |= 0x10uLL;
    *(_QWORD *)(a1 + 672) = v21;
    goto LABEL_42;
  }
  v17 = sub_100027F68();
  sub_100091AE8(buf, "FastConnect");
  sub_100091AE8(__p, "DisableFastConnectAll");
  (*(void (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(_QWORD *)v17 + 72))(v17, buf, __p, &v25);
  if (v24 < 0)
    operator delete(__p[0]);
  if (v27 < 0)
    operator delete(*(void **)buf);
  v18 = qword_1009999D0;
  v19 = os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT);
  v20 = v25;
  if (v19)
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v25;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "disableFastConnectAll = %d", buf, 8u);
    v20 = v25;
  }
  v21 = *(_QWORD *)(a1 + 672);
  if (!v20)
    goto LABEL_41;
LABEL_42:
  *(_BYTE *)(a1 + 682) = (v21 & 0x10) != 0;
  return a1;
}

void sub_100607E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t i;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  for (i = 632; i != 8; i -= 208)

  _Unwind_Resume(a1);
}

_QWORD *sub_100607E94(_QWORD *a1)
{
  uint64_t i;

  *a1 = off_10093D020;
  a1[1] = off_10093D080;
  sub_10060855C((uint64_t)a1);
  for (i = 79; i != 1; i -= 26)

  return a1;
}

void sub_100607EE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 632; i != 8; i -= 208)

  _Unwind_Resume(a1);
}

void sub_100607F10(_QWORD *a1)
{
  sub_100607E94(a1);
  operator delete();
}

void sub_100607F34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  void *__p[2];
  char v6;
  unsigned __int8 v7;
  uint8_t buf[8];
  char v9;

  v7 = 0;
  v2 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2))
  {
    v3 = sub_100027F68();
    sub_100091AE8(buf, "FastConnect");
    sub_100091AE8(__p, "DisableFastConnect");
    (*(void (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(_QWORD *)v3 + 72))(v3, buf, __p, &v7);
    if (v6 < 0)
      operator delete(__p[0]);
    if (v9 < 0)
      operator delete(*(void **)buf);
    v4 = qword_1009999D0;
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v7;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "disableFastConnect = %d", buf, 8u);
      if (v7)
        return;
    }
    else if (v7)
    {
      return;
    }
  }
  sub_100201844(sub_100608130);
  mach_timebase_info(&stru_100993EDC);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093D1E8);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093D208);
  sub_10007A76C((uint64_t)off_1009778E0 + 240, a1 + 8);
}

void sub_1006080F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100608130()
{
  sub_10006BBEC();
  operator new();
}

void sub_1006081F0()
{
  operator delete();
}

uint64_t sub_100608214(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;

  v2 = 0;
  while (1)
  {
    v3 = a1 + v2;
    if (*(_DWORD *)(a1 + v2 + 32))
    {
      v4 = *(_DWORD *)(v3 + 24);
      v5 = *(unsigned __int16 *)(v3 + 28);
      if (*(_DWORD *)a2 == v4 && *(unsigned __int16 *)(a2 + 4) == v5)
        break;
    }
    v2 += 208;
    if (v2 == 624)
      return 0;
  }
  return a1 + v2 + 16;
}

uint64_t sub_100608260(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v8;
  void *v9;

  v2 = 0;
  while (1)
  {
    v3 = a1 + v2;
    if (*(_DWORD *)(a1 + v2 + 32))
    {
      v4 = *(_DWORD *)(v3 + 24);
      v5 = *(unsigned __int16 *)(v3 + 28);
      if (*(_DWORD *)a2 == v4 && *(unsigned __int16 *)(a2 + 4) == v5)
        break;
    }
    v2 += 208;
    if (v2 == 624)
      return 120;
  }
  v8 = a1 + v2;
  sub_1006082D8(a1, a1 + v2 + 16, 0);
  v9 = *(void **)(v8 + 216);
  *(_QWORD *)(v8 + 216) = 0;

  return 0;
}

void sub_1006082D8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  _DWORD v9[2];
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;

  v5 = qword_1009999D0;
  if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(int *)(a2 + 16);
    if (v6 > 9)
      v7 = "Unknown State";
    else
      v7 = off_10093D3C0[v6];
    if (a3 > 9)
      v8 = "Unknown State";
    else
      v8 = off_10093D3C0[a3];
    v9[0] = 68158466;
    v9[1] = 6;
    v10 = 2096;
    v11 = a2 + 8;
    v12 = 2080;
    v13 = v7;
    v14 = 2080;
    v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{bluetooth:BD_ADDR}.6P state changed from %s to %s", (uint8_t *)v9, 0x26u);
  }
  *(_DWORD *)(a2 + 16) = a3;
}

uint64_t sub_1006083EC(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 680);
}

void sub_1006083F4(uint64_t a1)
{
  NSObject *v2;
  _BOOL8 v3;
  uint64_t i;
  void *v5;
  uint8_t v6[16];

  v2 = qword_1009999D0;
  v3 = os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Destroy all devices", v6, 2u);
  }
  for (i = 0; i != 624; i += 208)
  {
    sub_1006082D8(v3, a1 + i + 16, 0);
    v5 = *(void **)(a1 + i + 216);
    *(_QWORD *)(a1 + i + 216) = 0;

  }
}

uint64_t sub_100608490(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v4 = a2 + 128;
  v5 = sub_100608214(a1, a2 + 128);
  if (!v5)
  {
    v6 = 0;
    while (1)
    {
      v7 = a1 + v6;
      if (!*(_DWORD *)(a1 + v6 + 32))
        break;
      v6 += 208;
      if (v6 == 624)
        return 0;
    }
    *(_OWORD *)(v7 + 16) = 0u;
    v5 = v7 + 16;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    v8 = *(_DWORD *)v4;
    *(_WORD *)(v5 + 12) = *(_WORD *)(v4 + 4);
    *(_DWORD *)(v5 + 8) = v8;
    sub_1006082D8(0, v5, 1u);
    *(_DWORD *)(v5 + 20) = *(_DWORD *)(a1 + 664);
    v9 = sub_1004544B0(a2);
    *(_BYTE *)(v5 + 53) = v9;
    *(_BYTE *)(v5 + 145) = 0;
    if (v9 != 2)
      sub_10045446C(a2, 2);
  }
  return v5;
}

void sub_10060855C(uint64_t a1)
{
  sub_100201850();
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093D1E8);
  sub_100069060((uint64_t)off_100977A50 + 64, a1);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093D208);
  sub_100069060((uint64_t)off_1009778E0 + 240, a1 + 8);
}

uint64_t sub_1006085F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  int v12;
  char v14;
  uint8_t buf[4];
  int v16;

  v6 = qword_1009999D0;
  if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v16 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cleanup with result %d", buf, 8u);
  }
  v7 = (_QWORD *)sub_100608214(a1, a2);
  if (v7)
  {
    v8 = v7;
    if (*v7)
    {
      v14 = 0;
      sub_100043758(&v14);
      sub_1001DEB7C(*((unsigned __int16 *)v8 + 24), 436);
      sub_10004339C(&v14);
      if ((_DWORD)a3)
      {
        if (qword_100977A58 != -1)
          dispatch_once(&qword_100977A58, &stru_10093D1E8);
        v9 = sub_1004A35C0((uint64_t)off_100977A50, a3, 20000);
        if (qword_100977A78 != -1)
          dispatch_once(&qword_100977A78, &stru_10093D228);
        sub_10049BC28((int64x2_t *)off_100977A70, (unsigned __int8 *)*v8, v9);
      }
      *((_WORD *)v8 + 24) = 0;
      if (*((_WORD *)v8 + 27))
      {
        if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
          sub_10070FC54();
        if (qword_100977E00 != -1)
          dispatch_once(&qword_100977E00, &stru_10093D248);
        sub_1003EA164(qword_100977DF8, *v8, (_QWORD *)*((unsigned __int16 *)v8 + 27), *((unsigned __int16 *)v8 + 32), *((unsigned __int16 *)v8 + 68), *((unsigned __int8 *)v8 + 135));
      }
      v10 = *((unsigned __int16 *)v8 + 37);
      *((_WORD *)v8 + 27) = 0;
      *((_WORD *)v8 + 32) = 0;
      if (v10)
      {
        if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
          sub_10070FC28();
        if (qword_10097AA40 != -1)
          dispatch_once(&qword_10097AA40, &stru_10093D268);
        sub_1004E41CC((uint64_t)off_10097AA38, *v8 + 128, (unsigned __int16 *)v8 + 37, (unsigned __int16 *)v8 + 70);
      }
      *((_WORD *)v8 + 37) = 0;
      if (*((_WORD *)v8 + 62))
      {
        sub_10006D81C(&v14);
        if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
          sub_10070FBFC();
        sub_10025AD24(*v8 + 128, *((unsigned __int16 *)v8 + 62));
        sub_10004339C(&v14);
      }
      *((_WORD *)v8 + 62) = 0;
      if (*((_WORD *)v8 + 42))
      {
        if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
          sub_10070FBD0();
        if (qword_100977A88 != -1)
          dispatch_once(&qword_100977A88, &stru_10093D288);
        sub_1002A13F8(off_100977A80, *v8, *((unsigned __int16 *)v8 + 42), a3);
      }
      *((_WORD *)v8 + 42) = 0;
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_10093D288);
      if (sub_10027F958((uint64_t)off_100977A80))
      {
        v11 = qword_1009999D0;
        if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Reset TiPi pending flag as a result of connection failure", buf, 2u);
        }
        if (qword_100977A88 != -1)
          dispatch_once(&qword_100977A88, &stru_10093D288);
        sub_10027F960((uint64_t)off_100977A80, *v8, 0);
      }
      if (!*((_WORD *)v8 + 47))
        goto LABEL_49;
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
        sub_10070FBA4();
      v12 = *((_DWORD *)v8 + 4);
      if (v12 < 5)
      {
        if (qword_10097AC00 == -1)
        {
LABEL_48:
          sub_1005A5950((uint64_t)off_10097ABF8, *v8, *((unsigned __int16 *)v8 + 47), *((unsigned __int16 *)v8 + 52), v12 > 4);
LABEL_49:
          *((_WORD *)v8 + 47) = 0;
          *((_WORD *)v8 + 52) = 0;
          if (*((_WORD *)v8 + 57) && (*((_BYTE *)v8 + 22) & 0x10) != 0)
          {
            if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
              sub_10070FB78();
            sub_10006D81C(&v14);
            sub_100115AB0(a2, *((unsigned __int16 *)v8 + 57));
            sub_10004339C(&v14);
          }
          *((_WORD *)v8 + 57) = 0;
          sub_100043728(&v14);
          goto LABEL_55;
        }
      }
      else if (qword_10097AC00 == -1)
      {
        goto LABEL_48;
      }
      dispatch_once(&qword_10097AC00, &stru_10093D2A8);
      goto LABEL_48;
    }
  }
LABEL_55:
  sub_100608ABC(a1, a2);
  return sub_100608260(a1, a2);
}

void sub_100608A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_100608ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;

  v2 = sub_100608214(a1, a2);
  if (v2)
  {
    *(_OWORD *)(v2 + 180) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    *(_OWORD *)(v2 + 152) = 0u;
    v3 = *(void **)(v2 + 200);
    *(_QWORD *)(v2 + 200) = 0;

  }
}

uint64_t sub_100608AF4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  int *v13;
  NSObject *v14;
  _BOOL4 v15;
  void **v16;
  void **v17;
  _QWORD *v18;
  char v20;
  int *v21;
  uint8_t buf[4];
  void **v23;
  __int16 v24;
  int v25;
  void *__p[2];
  char v27;

  v21 = 0;
  v4 = qword_1009999D0;
  if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(a2, (uint64_t)__p);
    v5 = v27 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Check Fast Connect Support for device %s", buf, 0xCu);
    if (v27 < 0)
      operator delete(__p[0]);
  }
  v20 = 0;
  sub_100043758(&v20);
  v6 = sub_10019AEA4(a2 + 128);
  if (v6 && (v7 = *(_DWORD *)(v6 + 148), v7 >= 3))
  {
    sub_10004339C(&v20);
    v9 = qword_1009999D0;
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = (unsigned __int16)v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Killing Fast Connect attempt, already connected %d", (uint8_t *)__p, 8u);
    }
    v8 = 4506;
  }
  else
  {
    v8 = sub_1001DC04C(2u, (uint64_t *)&v21, 0);
    if ((_DWORD)v8)
    {
      sub_10004339C(&v20);
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
        sub_10070FC80();
    }
    else
    {
      v10 = *(_DWORD *)(a1 + 664);
      if (*(_BYTE *)(a2 + 968))
      {
        v11 = qword_1009999D0;
        if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Wireless Splitter guest not in contacts removing HFP and GATT profiles from support", (uint8_t *)__p, 2u);
        }
        v10 &= 0xFFEFFFFE;
      }
      word_100999A80 = 1;
      word_100999A82 = *(_WORD *)(a1 + 680);
      byte_100999A84 = *((_BYTE *)v21 + 4);
      byte_100999A85 = *((_BYTE *)v21 + 5);
      byte_100999A86 = *(_BYTE *)(sub_1001E3CCC(v21) + 36);
      byte_100999A87 = *(_BYTE *)(sub_1001E3CCC(v21) + 37);
      dword_100999A88 = v10;
      unk_100999A8C = *(_QWORD *)(a1 + 672);
      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_10093D1E8);
      byte_100999A94 = sub_1004A5E90((uint64_t)off_100977A50);
      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_10093D1E8);
      byte_100999A95 = (unsigned __int16)sub_1004A5E90((uint64_t)off_100977A50) >> 8;
      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_10093D1E8);
      byte_100999A96 = sub_1004A5E90((uint64_t)off_100977A50) >> 16;
      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_10093D1E8);
      byte_100999A97 = sub_1004A5E90((uint64_t)off_100977A50) >> 24;
      byte_100999A98 = sub_1002468C0();
      byte_100999A99 = (unsigned __int16)sub_1002468C0() >> 8;
      byte_100999A9A = sub_1002468C0() >> 16;
      byte_100999A9B = sub_1002468C0() >> 24;
      unk_100999A9C = 1;
      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_10093D1E8);
      v12 = sub_1004A5E98((uint64_t)off_100977A50);
      byte_100999A9E = BYTE4(v12);
      byte_100999A9F = BYTE5(v12);
      byte_100999AA0 = BYTE6(v12);
      byte_100999AA1 = HIBYTE(v12);
      word_100999AA2 = v12;
      byte_100999AA4 = BYTE2(v12);
      byte_100999AA5 = BYTE3(v12);
      *(_QWORD *)(sub_1001E3CCC(v21) + 88) = sub_1006090C8;
      v13 = v21;
      *((_QWORD *)v21 + 4) = sub_100609134;
      *(_BYTE *)(sub_1001E3CCC(v13) + 16) = 0;
      v8 = sub_100200C50((uint64_t)sub_1006094B4, *((unsigned __int16 *)v21 + 2), a2 + 128, (uint64_t)&word_100999A80, 42);
      v14 = qword_1009999D0;
      v15 = os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v8)
      {
        if (v15)
        {
          sub_10043E5F8(a2, __p);
          v16 = v27 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v23 = v16;
          v24 = 1024;
          v25 = v8;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Failed to send Fast Connect Echo Request for device %{public}s with status %d", buf, 0x12u);
          if (v27 < 0)
            operator delete(__p[0]);
        }
        sub_1001DC658((uint64_t)v21);
      }
      else
      {
        if (v15)
        {
          sub_10043E5F8(a2, __p);
          v17 = v27 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v23 = v17;
          v24 = 1024;
          v25 = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Sent Fast Connect Echo Request for device %{public}s with status %d", buf, 0x12u);
          if (v27 < 0)
            operator delete(__p[0]);
        }
        v18 = (_QWORD *)sub_100608214(a1, a2 + 128);
        *v18 = a2;
        sub_1006082D8((uint64_t)v18, (uint64_t)v18, 2u);
      }
      sub_10004339C(&v20);
    }
  }
  sub_100043728(&v20);
  return v8;
}

void sub_100609094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_100043728(&a12);
  _Unwind_Resume(a1);
}

void sub_1006090C8()
{
  sub_10006BBEC();
  operator new();
}

void sub_100609134(int a1, const void *a2, unsigned int a3)
{
  uint64_t v4;
  unsigned __int16 *v5;
  NSObject *v6;
  uint8_t v7[8];
  int *v8;
  _OWORD v9[2];
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003994C(v10, a2, a3);
  memset(v9, 0, sizeof(v9));
  sub_1004804E0((uint64_t)v9, 0, (uint64_t)v10);
  if (sub_100480558((uint64_t)v9) == 6)
  {
    v8 = 0;
    if (qword_10097AB58 != -1)
      dispatch_once(&qword_10097AB58, &stru_10093D2C8);
    v4 = 0;
    while (!*(_DWORD *)((char *)off_10097AB50 + v4 + 32)
         || *(unsigned __int16 *)((char *)off_10097AB50 + v4 + 64) != a1)
    {
      v4 += 208;
      if (v4 == 624)
      {
        v5 = 0;
        goto LABEL_10;
      }
    }
    v5 = (unsigned __int16 *)((char *)off_10097AB50 + v4 + 16);
LABEL_10:
    v6 = qword_1009999D0;
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setup Complete received, setting all channels to OPEN", v7, 2u);
    }
    if (v5)
    {
      if (v5[32])
      {
        sub_1001DB044(v5[32], (uint64_t *)&v8);
        if (v8)
        {
          if (sub_1001E3CCC(v8))
            *(_BYTE *)(sub_1001E3CCC(v8) + 16) = 4;
        }
      }
      if (v5[27])
      {
        sub_1001DB044(v5[27], (uint64_t *)&v8);
        if (v8)
        {
          if (sub_1001E3CCC(v8))
            *(_BYTE *)(sub_1001E3CCC(v8) + 16) = 4;
        }
      }
      if (v5[37])
      {
        sub_1001DB044(v5[37], (uint64_t *)&v8);
        if (v8)
        {
          if (sub_1001E3CCC(v8))
            *(_BYTE *)(sub_1001E3CCC(v8) + 16) = 4;
        }
      }
      if (v5[42])
      {
        sub_1001DB044(v5[42], (uint64_t *)&v8);
        if (v8)
        {
          if (sub_1001E3CCC(v8))
            *(_BYTE *)(sub_1001E3CCC(v8) + 16) = 4;
        }
      }
      if (v5[57])
      {
        sub_1001DB044(v5[57], (uint64_t *)&v8);
        if (v8)
        {
          if (sub_1001E3CCC(v8))
            *(_BYTE *)(sub_1001E3CCC(v8) + 16) = 4;
        }
      }
      if (v5[47])
      {
        sub_1001DB044(v5[47], (uint64_t *)&v8);
        if (v8)
        {
          if (sub_1001E3CCC(v8))
            *(_BYTE *)(sub_1001E3CCC(v8) + 16) = 4;
        }
      }
      if (v5[62])
      {
        sub_1001DB044(v5[62], (uint64_t *)&v8);
        if (v8)
        {
          if (sub_1001E3CCC(v8))
            *(_BYTE *)(sub_1001E3CCC(v8) + 16) = 4;
        }
      }
    }
  }
  sub_10006BBEC();
  operator new();
}

void sub_10060944C()
{
  operator delete();
}

void sub_1006094B4()
{
  if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEBUG))
    sub_10070FCE0();
  sub_10006BBEC();
  operator new();
}

void sub_1006095EC()
{
  operator delete();
}

uint64_t sub_100609610(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  const char *v12;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;

  v4 = sub_100608490(a1, a2);
  v5 = v4;
  if (*(int *)(v4 + 16) < 2)
  {
    if (!*(_QWORD *)(v4 + 152))
      *(_QWORD *)(v4 + 152) = mach_absolute_time();
    *(_QWORD *)(v5 + 160) = mach_absolute_time();
    v8 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v9 = *(void **)(v5 + 200);
    *(_QWORD *)(v5 + 200) = v8;

    return sub_100608AF4(a1, a2);
  }
  else
  {
    v6 = qword_1009999D0;
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
    {
      sub_10043F6EC(a2, (uint64_t)__p);
      if (v14 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      v11 = *(int *)(v5 + 16);
      if (v11 > 9)
        v12 = "Unknown State";
      else
        v12 = off_10093D3C0[v11];
      *(_DWORD *)buf = 136315394;
      v16 = v10;
      v17 = 2080;
      v18 = v12;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "PFC in progress for device %s, ignoring duplicate request - current state is %s", buf, 0x16u);
      if (v14 < 0)
        operator delete(__p[0]);
    }
    return 4508;
  }
}

uint64_t sub_1006097A4(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 672) & 0x10) != 0)
    return sub_100442118(a2, 47);
  else
    return 0;
}

void sub_1006097C0(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  void **v9;
  NSObject *v10;
  __int16 v11;
  char *v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  char *v16;
  int64_t v17;
  int v18;
  __int16 v19;
  char *v20;
  int64_t v21;
  int v22;
  __int16 v23;
  char *v24;
  int64_t v25;
  int v26;
  __int16 v27;
  char *v28;
  int64_t v29;
  __int16 *v30;
  __int16 v31;
  char *v32;
  int64_t v33;
  unsigned int v34;
  uint64_t v35;
  char *v36;
  unsigned __int16 v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  int v41;
  __int16 v42;
  char v43;
  __int16 v44;
  uint64_t (**v45)();
  unsigned int *v46;
  char v47;
  void *__p[2];
  __int128 v49;
  uint8_t v50[8];
  unsigned int *v51;
  uint8_t buf[40];

  v5 = *(_DWORD *)(a2 + 20);
  v4 = *(_DWORD *)(a2 + 24);
  v6 = *(unsigned int *)(a2 + 16);
  v7 = qword_1009999D0;
  if ((int)v6 >= 4 && os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_FAULT))
  {
    sub_10070FD38(v6, (uint64_t)v7, __p);
    v7 = __p[0];
  }
  v8 = v4 & v5;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(*(_QWORD *)a2, (uint64_t)__p);
    v9 = (SBYTE7(v49) & 0x80u) == 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Compose Profile Descriptor for device %s with supported profiles %x", buf, 0x12u);
    if (SBYTE7(v49) < 0)
      operator delete(__p[0]);
  }
  if (*(_BYTE *)(*(_QWORD *)a2 + 968))
  {
    v10 = qword_1009999D0;
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Wireless Splitter this is a guest not in contacts device removing HFP / GATT profiles", (uint8_t *)__p, 2u);
    }
    v8 &= 0xFFEFFFFE;
  }
  if (v8)
  {
    *(_OWORD *)__p = 0u;
    v49 = 0u;
    sub_1004806B4((uint64_t)__p, 0);
    v11 = *(_WORD *)(a1 + 680);
    sub_1004806E0((uint64_t)__p, 3);
    sub_1004806E0((uint64_t)__p, 0);
    v12 = sub_10048071C((uint64_t)__p, v11);
    sub_10060A56C((uint64_t)v12, (uint64_t)__p, v13, a2);
    sub_10048071C((uint64_t)__p, 2);
    v47 = 0;
    sub_100043758(&v47);
    if ((v8 & 0x10) != 0)
    {
      if (qword_100977E00 != -1)
        dispatch_once(&qword_100977E00, &stru_10093D248);
      v14 = sub_1003E8AB8(qword_100977DF8, (int *)(*(_QWORD *)a2 + 128), (unsigned __int16 *)(a2 + 54), (_WORD *)(a2 + 64));
      memset(buf, 0, 32);
      sub_1004806B4((uint64_t)buf, 0);
      if (!v14)
      {
        if (qword_100977E00 != -1)
          dispatch_once(&qword_100977E00, &stru_10093D248);
        v14 = sub_1003E8B24(qword_100977DF8, (uint64_t)buf, (__int16 *)(a2 + 54), (__int16 *)(a2 + 64));
      }
      sub_10004339C(&v47);
      if (v14)
      {
        if (qword_100977E00 != -1)
          dispatch_once(&qword_100977E00, &stru_10093D248);
        sub_1003EA164(qword_100977DF8, *(_QWORD *)a2, (_QWORD *)*(unsigned __int16 *)(a2 + 54), *(unsigned __int16 *)(a2 + 64), 0, *(unsigned __int8 *)(a2 + 135));
        v8 &= ~0x10u;
        *(_WORD *)(a2 + 54) = 0;
        *(_WORD *)(a2 + 64) = 0;
      }
      else
      {
        sub_10048076C((uint64_t)__p, 0x10u);
        sub_10003994C(v50, *(const void **)&buf[8], *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]);
        v15 = sub_10003F8C4((uint64_t)v50);
        sub_10048071C((uint64_t)__p, v15);
        *(_QWORD *)v50 = &off_100918258;
        if (v51)
          sub_100056AAC(v51);
        sub_10003994C(v50, *(const void **)&buf[8], *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]);
        v16 = (char *)sub_10003EB18((uint64_t)v50);
        sub_10003994C(&v45, *(const void **)&buf[8], *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]);
        v17 = sub_10003F8C4((uint64_t)&v45);
        sub_1004806C4((uint64_t)__p, v16, v17);
        v45 = &off_100918258;
        if (v46)
          sub_100056AAC(v46);
        *(_QWORD *)v50 = &off_100918258;
        if (v51)
          sub_100056AAC(v51);
      }
      sub_10006D81C(&v47);
      if (*(_QWORD *)&buf[8])
      {
        *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
    }
    if ((v8 & 1) != 0)
    {
      if (qword_10097AA40 != -1)
        dispatch_once(&qword_10097AA40, &stru_10093D268);
      v18 = sub_1004E4170((uint64_t)off_10097AA38, (int *)(*(_QWORD *)a2 + 128), (_WORD *)(a2 + 74), (_WORD *)(a2 + 140));
      if (!v18)
      {
        if (*(_BYTE *)(a2 + 145))
          v18 = sub_10025AB9C(*(_QWORD *)a2 + 128, (_WORD *)(a2 + 124));
        else
          v18 = 0;
      }
      memset(buf, 0, 32);
      sub_1004806B4((uint64_t)buf, 0);
      if (!v18)
      {
        if (qword_10097AA40 != -1)
          dispatch_once(&qword_10097AA40, &stru_10093D268);
        v18 = sub_1004E4258((uint64_t)off_10097AA38, (uint64_t)buf, *(_QWORD *)a2, (__int16 *)(a2 + 74), (unsigned __int16 *)(a2 + 140), *(unsigned __int8 *)(a2 + 145));
      }
      sub_10004339C(&v47);
      if (v18)
      {
        if (qword_10097AA40 != -1)
          dispatch_once(&qword_10097AA40, &stru_10093D268);
        sub_1004E41CC((uint64_t)off_10097AA38, *(_QWORD *)a2 + 128, (unsigned __int16 *)(a2 + 74), (unsigned __int16 *)(a2 + 140));
        v8 &= ~1u;
        *(_WORD *)(a2 + 74) = 0;
        if (*(_BYTE *)(a2 + 145))
        {
          sub_10025AD24(*(_QWORD *)a2 + 128, *(unsigned __int16 *)(a2 + 124));
          *(_WORD *)(a2 + 124) = 0;
        }
      }
      else
      {
        sub_10048076C((uint64_t)__p, 1u);
        sub_10003994C(v50, *(const void **)&buf[8], *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]);
        v19 = sub_10003F8C4((uint64_t)v50);
        sub_10048071C((uint64_t)__p, v19);
        *(_QWORD *)v50 = &off_100918258;
        if (v51)
          sub_100056AAC(v51);
        sub_10003994C(v50, *(const void **)&buf[8], *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]);
        v20 = (char *)sub_10003EB18((uint64_t)v50);
        sub_10003994C(&v45, *(const void **)&buf[8], *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]);
        v21 = sub_10003F8C4((uint64_t)&v45);
        sub_1004806C4((uint64_t)__p, v20, v21);
        v45 = &off_100918258;
        if (v46)
          sub_100056AAC(v46);
        *(_QWORD *)v50 = &off_100918258;
        if (v51)
          sub_100056AAC(v51);
      }
      sub_10006D81C(&v47);
      if (*(_QWORD *)&buf[8])
      {
        *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
    }
    if ((v8 & 0x80000) != 0)
    {
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_10093D288);
      v22 = sub_10029EC14((uint64_t)off_100977A80, *(_QWORD *)a2 + 128, (unsigned __int16 *)(a2 + 84));
      memset(buf, 0, 32);
      sub_1004806B4((uint64_t)buf, 0);
      if (!v22)
      {
        if (qword_100977A88 != -1)
          dispatch_once(&qword_100977A88, &stru_10093D288);
        v22 = sub_10029EC78((uint64_t)off_100977A80, *(_QWORD *)a2, (uint64_t)buf, (__int16 *)(a2 + 84));
      }
      sub_100449D84(*(_QWORD *)a2, v22 == 0);
      sub_10004339C(&v47);
      if (v22)
      {
        if (qword_100977A88 != -1)
          dispatch_once(&qword_100977A88, &stru_10093D288);
        sub_1002A13F8(off_100977A80, *(_QWORD *)a2, *(unsigned __int16 *)(a2 + 84), 114);
        v8 &= ~0x80000u;
        *(_WORD *)(a2 + 84) = 0;
      }
      else
      {
        sub_10048076C((uint64_t)__p, 0x80000u);
        sub_10003994C(v50, *(const void **)&buf[8], *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]);
        v23 = sub_10003F8C4((uint64_t)v50);
        sub_10048071C((uint64_t)__p, v23);
        *(_QWORD *)v50 = &off_100918258;
        if (v51)
          sub_100056AAC(v51);
        sub_10003994C(v50, *(const void **)&buf[8], *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]);
        v24 = (char *)sub_10003EB18((uint64_t)v50);
        sub_10003994C(&v45, *(const void **)&buf[8], *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]);
        v25 = sub_10003F8C4((uint64_t)&v45);
        sub_1004806C4((uint64_t)__p, v24, v25);
        v45 = &off_100918258;
        if (v46)
          sub_100056AAC(v46);
        *(_QWORD *)v50 = &off_100918258;
        if (v51)
          sub_100056AAC(v51);
      }
      sub_10006D81C(&v47);
      if (*(_QWORD *)&buf[8])
      {
        *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
    }
    if ((v8 & 8) != 0)
    {
      if (qword_10097AC00 != -1)
        dispatch_once(&qword_10097AC00, &stru_10093D2A8);
      v26 = sub_1005A5090((uint64_t)off_10097ABF8, *(_QWORD *)a2 + 128, (__int16 *)(a2 + 94));
      memset(buf, 0, 32);
      sub_1004806B4((uint64_t)buf, 0);
      if (!v26)
      {
        if (qword_10097AC00 != -1)
          dispatch_once(&qword_10097AC00, &stru_10093D2A8);
        v26 = sub_1005A50F8((uint64_t)off_10097ABF8, (uint64_t)buf, (__int16 *)(a2 + 94), (__int16 *)(a2 + 104));
      }
      sub_10004339C(&v47);
      if (v26)
      {
        if (qword_10097AC00 != -1)
          dispatch_once(&qword_10097AC00, &stru_10093D2A8);
        sub_1005A5950((uint64_t)off_10097ABF8, *(_QWORD *)a2, *(unsigned __int16 *)(a2 + 94), *(unsigned __int16 *)(a2 + 104), 0);
        v8 &= ~8u;
        *(_WORD *)(a2 + 94) = 0;
        *(_WORD *)(a2 + 104) = 0;
      }
      else
      {
        sub_10048076C((uint64_t)__p, 8u);
        sub_10003994C(v50, *(const void **)&buf[8], *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]);
        v27 = sub_10003F8C4((uint64_t)v50);
        sub_10048071C((uint64_t)__p, v27);
        *(_QWORD *)v50 = &off_100918258;
        if (v51)
          sub_100056AAC(v51);
        sub_10003994C(v50, *(const void **)&buf[8], *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]);
        v28 = (char *)sub_10003EB18((uint64_t)v50);
        sub_10003994C(&v45, *(const void **)&buf[8], *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]);
        v29 = sub_10003F8C4((uint64_t)&v45);
        sub_1004806C4((uint64_t)__p, v28, v29);
        v45 = &off_100918258;
        if (v46)
          sub_100056AAC(v46);
        *(_QWORD *)v50 = &off_100918258;
        if (v51)
          sub_100056AAC(v51);
      }
      sub_10006D81C(&v47);
      if (*(_QWORD *)&buf[8])
      {
        *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
    }
    if ((v8 & 0x100000) != 0)
    {
      v30 = (__int16 *)(a2 + 114);
      sub_100115988(*(_QWORD *)a2 + 128, (_WORD *)(a2 + 114));
      memset(buf, 0, 32);
      sub_1004806B4((uint64_t)buf, 0);
      v44 = 0;
      v43 = 0;
      v42 = 0;
      if (sub_1001DCC5C(*(unsigned __int16 *)(a2 + 114), &v42, &v44, &v43))
      {
        if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
          sub_10070FD0C();
        sub_100115AB0(*(_QWORD *)a2 + 128, *(unsigned __int16 *)(a2 + 114));
        v8 &= ~0x100000u;
        *v30 = 0;
      }
      else
      {
        sub_1004806E0((uint64_t)buf, 1);
        sub_1004806E0((uint64_t)buf, 7);
        sub_10048071C((uint64_t)buf, *v30);
        sub_10048071C((uint64_t)buf, v42);
        sub_10048071C((uint64_t)buf, v44);
        sub_1004806E0((uint64_t)buf, v43);
        sub_10048076C((uint64_t)__p, 0x100000u);
        sub_10003994C(v50, *(const void **)&buf[8], *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]);
        v31 = sub_10003F8C4((uint64_t)v50);
        sub_10048071C((uint64_t)__p, v31);
        *(_QWORD *)v50 = &off_100918258;
        if (v51)
          sub_100056AAC(v51);
        sub_10003994C(v50, *(const void **)&buf[8], *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]);
        v32 = (char *)sub_10003EB18((uint64_t)v50);
        sub_10003994C(&v45, *(const void **)&buf[8], *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]);
        v33 = sub_10003F8C4((uint64_t)&v45);
        sub_1004806C4((uint64_t)__p, v32, v33);
        v45 = &off_100918258;
        if (v46)
          sub_100056AAC(v46);
        *(_QWORD *)v50 = &off_100918258;
        if (v51)
          sub_100056AAC(v51);
      }
      if (*(_QWORD *)&buf[8])
      {
        *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
    }
    if (*(_DWORD *)(a2 + 20) != v8)
      *(_DWORD *)(a2 + 20) = v8;
    v34 = *(unsigned __int16 *)(a2 + 48);
    v35 = *(_QWORD *)a2;
    sub_10003994C(buf, __p[1], v49 - (unint64_t)__p[1]);
    v36 = (char *)sub_10003EB18((uint64_t)buf);
    sub_10003994C(v50, __p[1], v49 - (unint64_t)__p[1]);
    v37 = sub_10003F8C4((uint64_t)v50);
    v38 = sub_1001DBF20((uint64_t)sub_10060A7E8, v34, (__int128 *)(v35 + 128), v36, v37);
    *(_QWORD *)v50 = &off_100918258;
    if (v51)
      sub_100056AAC(v51);
    *(_QWORD *)buf = &off_100918258;
    v39 = *(_QWORD *)&buf[8];
    if (*(_QWORD *)&buf[8])
      sub_100056AAC(*(unsigned int **)&buf[8]);
    if ((_DWORD)v38)
    {
      v40 = qword_1009999D0;
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      {
        sub_10003994C(buf, __p[1], v49 - (unint64_t)__p[1]);
        v41 = sub_10003F8C4((uint64_t)buf);
        *(_DWORD *)v50 = 67109376;
        *(_DWORD *)&v50[4] = v38;
        LOWORD(v51) = 1024;
        *(_DWORD *)((char *)&v51 + 2) = v41;
        _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "Fast Connect L2CAP Write failed with result %d for data size %d", v50, 0xEu);
        *(_QWORD *)buf = &off_100918258;
        if (*(_QWORD *)&buf[8])
          sub_100056AAC(*(unsigned int **)&buf[8]);
      }
      sub_1006085F0(a1, *(_QWORD *)a2 + 128, v38);
    }
    else
    {
      sub_1006082D8(v39, a2, 4u);
    }
    sub_100043728(&v47);
    if (__p[1])
    {
      *(void **)&v49 = __p[1];
      operator delete(__p[1]);
    }
  }
}

void sub_10060A3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int *a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (a21)
    sub_100056AAC(a21);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_100043728(&a15);
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

void sub_10060A56C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v6;
  char *v7;
  int64_t v8;
  uint64_t (**v9)();
  unsigned int *v10;
  uint64_t (**v11)();
  unsigned int *v12;
  char v13;
  unsigned int v14;
  void *__p[2];
  __int128 v16;
  uint64_t __src;

  sub_10048071C(a2, 1);
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  sub_1004806B4((uint64_t)__p, 0);
  sub_1004806E0((uint64_t)__p, 1);
  sub_1004806E0((uint64_t)__p, 4);
  sub_10048076C((uint64_t)__p, *(_DWORD *)(a4 + 20));
  sub_1004806E0((uint64_t)__p, 2);
  sub_1004806E0((uint64_t)__p, 8);
  sub_1004807BC((uint64_t)__p, 0);
  sub_1004806E0((uint64_t)__p, 3);
  sub_1004806E0((uint64_t)__p, 4);
  v14 = 0;
  v13 = 0;
  sub_100043758(&v13);
  sub_1001FEEF8((char *)&v14);
  sub_10048076C((uint64_t)__p, v14);
  sub_1004806E0((uint64_t)__p, 4);
  sub_1004806E0((uint64_t)__p, 8);
  __src = 0;
  sub_1001DBAB4(&__src);
  sub_1004806C4((uint64_t)__p, (char *)&__src, 8);
  sub_10003994C(&v11, __p[1], v16 - (unint64_t)__p[1]);
  v6 = sub_10003F8C4((uint64_t)&v11);
  sub_10048071C(a2, v6);
  v11 = &off_100918258;
  if (v12)
    sub_100056AAC(v12);
  sub_10003994C(&v11, __p[1], v16 - (unint64_t)__p[1]);
  v7 = (char *)sub_10003EB18((uint64_t)&v11);
  sub_10003994C(&v9, __p[1], v16 - (unint64_t)__p[1]);
  v8 = sub_10003F8C4((uint64_t)&v9);
  sub_1004806C4(a2, v7, v8);
  v9 = &off_100918258;
  if (v10)
    sub_100056AAC(v10);
  v11 = &off_100918258;
  if (v12)
    sub_100056AAC(v12);
  sub_100043728(&v13);
  if (__p[1])
  {
    *(void **)&v16 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_10060A758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (a13)
    sub_100056AAC(a13);
  sub_100043728(&a16);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10060A7E8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  NSObject *v6;
  _DWORD v7[2];
  __int16 v8;
  int v9;

  v6 = qword_1009999D0;
  if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109376;
    v7[1] = a3;
    v8 = 1024;
    v9 = a4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Wrote %d bytes with result %d", (uint8_t *)v7, 0xEu);
  }
}

_BYTE *sub_10060A8A0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint8_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  __int16 v19;
  uint64_t *v20;
  int v21;
  int v22;
  __int16 v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  NSObject *v30;
  int v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  char v35;
  _BYTE v36[15];
  char v37;
  _BYTE v38[15];
  char v39;
  _BYTE v40[15];
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  char v45;
  uint8_t v46[16];
  __int128 v47;
  __int128 buf;

  if (sub_1004805A4(a3) != 1 && os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
    sub_10070FFC8();
  v45 = 0;
  sub_100043758(&v45);
  v44 = 0;
  v43 = 0;
  if (sub_1002012E0(a2, (uint64_t)&v43))
  {
    sub_10004339C(&v45);
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_10070FF68();
    return sub_100043728(&v45);
  }
  v6 = sub_100608214(a1, (uint64_t)&v43);
  v7 = v6;
  if (*(int *)(v6 + 16) >= 5)
  {
    v6 = os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_FAULT);
    if ((_DWORD)v6)
      sub_10070FEE4();
  }
  sub_1006082D8(v6, v7, 5u);
  v8 = qword_1009999D0;
  if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(*(_QWORD *)v7, (uint64_t)v46);
    v9 = (SBYTE7(v47) & 0x80u) == 0 ? v46 : *(uint8_t **)v46;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Parsing Profile Descriptor for device %s", (uint8_t *)&buf, 0xCu);
    if (SBYTE7(v47) < 0)
      operator delete(*(void **)v46);
  }
  v10 = sub_1004805A4(a3);
  v11 = sub_10019AEA4((uint64_t)&v43);
  if (v10)
  {
    v12 = v11;
    while (1)
    {
      v13 = (char)sub_100480558(a3);
      if (v13 < 0)
      {
        v14 = sub_1004805A4(a3);
        v15 = 65533;
      }
      else
      {
        v14 = sub_100480558(a3);
        v15 = 65534;
      }
      v16 = v13 & 0x7F;
      switch(v16)
      {
        case 1:
          if (v14)
          {
            if (v14 != 4)
              goto LABEL_38;
            sub_100480608(a3);
          }
          goto LABEL_41;
        case 2:
          if (v14)
          {
            if (v14 != 8)
              goto LABEL_38;
            *(_QWORD *)v46 = 0;
            sub_100480520(a3, v46, 8uLL);
          }
          goto LABEL_41;
        case 3:
          if (v14)
          {
            if (v14 != 4)
              goto LABEL_38;
            *(_DWORD *)(v12 + 229) = sub_100480608(a3);
            *(_BYTE *)(v12 + 228) = 1;
          }
          goto LABEL_41;
        case 4:
          if (v14)
          {
            if (v14 != 8)
              goto LABEL_38;
            *(_QWORD *)v46 = 0;
            sub_100480520(a3, v46, 8uLL);
            sub_1001E29E4((uint64_t)sub_1002297E4);
            sub_1001DFD3C((uint64_t)&v43, 0, 3, v46, 8, 0);
            sub_1001E2984((uint64_t)sub_1002297E4, 48);
          }
          goto LABEL_41;
        default:
          v17 = qword_1009999D0;
          if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v46 = 67109120;
            *(_DWORD *)&v46[4] = v16;
            _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "fastConnectParseProfileDescriptorMessage Key not recognized %d", v46, 8u);
            if (v14)
            {
LABEL_38:
              v18 = qword_1009999D0;
              if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v46 = 67109632;
                *(_DWORD *)&v46[4] = v16;
                *(_WORD *)&v46[8] = 1024;
                *(_DWORD *)&v46[10] = v14;
                *(_WORD *)&v46[14] = 1024;
                LODWORD(v47) = v14;
                _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "fastConnectParseProfileDescriptorMessage Key:%d Dumped %d of %d bytes ", v46, 0x14u);
              }
              sub_100480664(a3, v14);
            }
          }
          else if (v14)
          {
            goto LABEL_38;
          }
LABEL_41:
          v19 = v10 + v15;
          v10 = v10 + v15 - v14;
          if (v19 == (_WORD)v14)
            goto LABEL_42;
          break;
      }
    }
  }
LABEL_42:
  sub_10004339C(&v45);
  if (sub_1004805A4(a3) != 2 && os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
    sub_10070FE84();
  v41 = v43;
  v42 = v44;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093D208);
  v20 = (uint64_t *)sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v41, 1);
  v21 = 0;
  v34 = (unsigned __int16 *)(v7 + 74);
  v33 = (unsigned __int16 *)(v7 + 140);
  while ((unint64_t)(sub_10003F8C4(a3 + 8) - *(_QWORD *)(a3 + 24)) >= 9)
  {
    v22 = sub_100480608(a3);
    v23 = sub_1004805A4(a3);
    if (sub_10003F8C4(a3 + 8) - *(_QWORD *)(a3 + 24) < (unint64_t)v23)
    {
      v28 = qword_1009999D0;
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      {
        v32 = sub_10003F8C4(a3 + 8) - *(_DWORD *)(a3 + 24);
        *(_DWORD *)v46 = 67109376;
        *(_DWORD *)&v46[4] = v23;
        *(_WORD *)&v46[8] = 1024;
        *(_DWORD *)&v46[10] = v32;
        _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "fastConnectParseProfileDescriptorMessage Length Error Descriptor length %u remaining %u", v46, 0xEu);
      }
      break;
    }
    v24 = v23;
    v25 = sub_100052DC0(v23);
    if (!v25)
      break;
    sub_100480520(a3, v25, v24);
    buf = 0uLL;
    sub_10003994C(&buf, v25, v24);
    *(_OWORD *)v46 = 0u;
    v47 = 0u;
    v26 = sub_1004804E0((uint64_t)v46, 0, (uint64_t)&buf);
    if (v22 <= 15)
    {
      if (v22 == 1)
      {
        if (qword_10097AA40 != -1)
          dispatch_once(&qword_10097AA40, &stru_10093D268);
        if (sub_1004E45CC((uint64_t)off_10097AA38, (uint64_t)v46, (uint64_t)v20, *v34, v33, (_BYTE *)(v7 + 142), (_BYTE *)(v7 + 143), (_BYTE *)(v7 + 144)))
        {
          if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
            sub_10070FE00(&v37, v38);
          *(_DWORD *)(v7 + 20) &= ~1u;
          if (qword_10097AA40 != -1)
            dispatch_once(&qword_10097AA40, &stru_10093D268);
          sub_1004E41CC((uint64_t)off_10097AA38, *(_QWORD *)v7 + 128, v34, v33);
          if (*(_BYTE *)(v7 + 145))
          {
            sub_10025AD24(*(_QWORD *)v7 + 128, *(unsigned __int16 *)(v7 + 124));
            *(_WORD *)(v7 + 124) = 0;
          }
        }
      }
      else if (v22 == 8)
      {
        if (qword_10097AC00 != -1)
          dispatch_once(&qword_10097AC00, &stru_10093D2A8);
        sub_1005A52A0();
      }
    }
    else
    {
      switch(v22)
      {
        case 0x10:
          if (qword_100977E00 != -1)
            dispatch_once(&qword_100977E00, &stru_10093D248);
          if (sub_1003E8DF8(qword_100977DF8, (uint64_t)v46, v20, *(unsigned __int16 *)(v7 + 54), *(unsigned __int16 *)(v7 + 64), (_WORD *)(v7 + 136)))
          {
            if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
              sub_10070FDD4(&v39, v40);
            *(_DWORD *)(v7 + 20) &= ~0x10u;
            if (qword_100977E00 != -1)
              dispatch_once(&qword_100977E00, &stru_10093D248);
            sub_1003EA164(qword_100977DF8, (uint64_t)v20, (_QWORD *)*(unsigned __int16 *)(v7 + 54), *(unsigned __int16 *)(v7 + 64), *(unsigned __int16 *)(v7 + 136), *(unsigned __int8 *)(v7 + 135));
          }
          else
          {
            if (qword_100977E00 != -1)
              dispatch_once(&qword_100977E00, &stru_10093D248);
            sub_1003E9A8C(qword_100977DF8, *(unsigned __int16 *)(v7 + 136), (_BYTE *)(v7 + 135), (_BYTE *)(v7 + 134), (unsigned __int16 *)(v7 + 138), *(unsigned __int16 *)(v7 + 64));
          }
          break;
        case 0x80000:
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_10093D288);
          if (sub_10029EE18((uint64_t)off_100977A80, (uint64_t)v46, (uint64_t)v20, *(unsigned __int16 *)(v7 + 84)))
          {
            if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
              sub_10070FE2C(&v35, v36);
            *(_DWORD *)(v7 + 20) &= ~0x80000u;
            if (qword_100977A88 != -1)
              dispatch_once(&qword_100977A88, &stru_10093D288);
            sub_1002A13F8(off_100977A80, *(_QWORD *)v7, *(unsigned __int16 *)(v7 + 84), 114);
          }
          break;
        case 0x100000:
          sub_10060B358(v26, (uint64_t)v46, v27, *(unsigned __int16 *)(v7 + 114));
          break;
      }
    }
    sub_100053298(v25);
    *(_QWORD *)&v46[8] = &off_100918258;
    if ((_QWORD)v47)
      sub_100056AAC((unsigned int *)v47);
    *(_QWORD *)&buf = &off_100918258;
    if (*((_QWORD *)&buf + 1))
      sub_100056AAC(*((unsigned int **)&buf + 1));
    v21 |= v22;
  }
  v29 = *(_DWORD *)(v7 + 20);
  if (v29 != v21)
  {
    v30 = qword_1009999D0;
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v46 = 67109376;
      *(_DWORD *)&v46[4] = v21;
      *(_WORD *)&v46[8] = 1024;
      *(_DWORD *)&v46[10] = v29;
      _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Profile mismatch error expected 0x%x received 0x%x", v46, 0xEu);
      v29 = *(_DWORD *)(v7 + 20);
    }
    *(_DWORD *)(v7 + 20) = v29 & v21;
  }
  return sub_100043728(&v45);
}

void sub_10060B2CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100043728((_BYTE *)(v1 - 145));
  _Unwind_Resume(a1);
}

uint64_t sub_10060B358(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned __int16 v13;
  __int16 v14;
  __int16 v15;
  NSObject *v16;
  NSObject *v17;
  char v19;
  char v20[7];
  int *v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  unsigned int v27;

  v6 = sub_10003F8C4(a2 + 8) - *(_DWORD *)(a2 + 24);
  v7 = v6 << 16;
  if ((int)(v6 << 16) >= 1)
  {
    v21 = 0;
    do
    {
      v8 = (char)sub_100480558(a2);
      if (v8 < 0)
      {
        v9 = sub_1004805A4(a2);
        v10 = HIWORD(v7) - 3;
      }
      else
      {
        v9 = sub_100480558(a2);
        LOWORD(v10) = v6 - 2;
      }
      v11 = v8 & 0x7F;
      if (v11 == 16)
      {
        v12 = v9;
        v13 = v9;
        if (v9 != 2)
          goto LABEL_22;
      }
      else
      {
        if (v11 != 3)
        {
          if (v11 == 1)
          {
            v12 = v9;
            v13 = v9;
            if (v9 >= 7)
            {
              v14 = sub_1004805A4(a2);
              sub_1004805A4(a2);
              v15 = sub_1004805A4(a2);
              sub_100480558(a2);
              buf[0] = 0;
              sub_100043758(buf);
              if (sub_1001DB044(a4, (uint64_t *)&v21) || !sub_1001E3CCC(v21))
              {
                if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
                  sub_100710028(&v19, v20);
              }
              else
              {
                *(_WORD *)(sub_1001E3CCC(v21) + 8) = v14;
                *(_WORD *)(sub_1001E3CCC(v21) + 32) = v15;
              }
              sub_10004339C(buf);
              sub_100043728(buf);
              v12 = (unsigned __int16)(v9 - 7);
              v13 = v9 - 7;
            }
          }
          else
          {
            v16 = qword_1009999D0;
            v12 = v9;
            v13 = v9;
            if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              v23 = v11;
              _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "parseGATTDescriptor Key not recognized %d", buf, 8u);
              v12 = v9;
              v13 = v9;
            }
          }
LABEL_22:
          if (v13)
          {
            v17 = qword_1009999D0;
            if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109632;
              v23 = v11;
              v24 = 1024;
              v25 = v12;
              v26 = 1024;
              v27 = v9;
              _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "parseGATTDescriptor Key:%d Dumped %d of %d bytes ", buf, 0x14u);
            }
            sub_100480664(a2, v13);
          }
          goto LABEL_26;
        }
        v12 = v9;
        v13 = v9;
        if (v9 != 2)
          goto LABEL_22;
      }
      sub_1004805A4(a2);
LABEL_26:
      v6 = (__int16)v10 - v9;
      v7 = v6 << 16;
    }
    while ((int)(v6 << 16) > 0);
  }
  return 0;
}

void sub_10060B640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

_BYTE *sub_10060B65C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  unint64_t v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  __int16 v14;
  char *v15;
  int64_t v16;
  char *v17;
  unsigned __int16 v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  int v23;
  uint64_t (**v24)();
  unsigned int *v25;
  int v26;
  __int16 v27;
  char v28;
  __int128 v29;
  unsigned int *v30;
  uint8_t v31[32];
  uint8_t buf[16];
  __int128 v33;

  WORD2(v29) = 0;
  LODWORD(v29) = 0;
  v28 = 0;
  sub_100043758(&v28);
  if (sub_1002012E0(a2, (uint64_t)&v29))
  {
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_1007100D8();
  }
  else
  {
    sub_10004339C(&v28);
    v4 = sub_100608214(a1, (uint64_t)&v29);
    if (*(int *)(v4 + 16) >= 6 && os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_FAULT))
      sub_100710054();
    v5 = mach_absolute_time();
    *(_QWORD *)(v4 + 184) = v5;
    v6 = qword_1009999D0;
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (v5 - *(_QWORD *)(v4 + 176)) * stru_100993EDC.numer / stru_100993EDC.denom / 0xF4240;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Descriptor took %d ms", buf, 8u);
      v6 = qword_1009999D0;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F6EC(*(_QWORD *)v4, (uint64_t)buf);
      v8 = (SBYTE7(v33) & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      v9 = *(_DWORD *)(v4 + 20);
      *(_DWORD *)v31 = 136315394;
      *(_QWORD *)&v31[4] = v8;
      *(_WORD *)&v31[12] = 1024;
      *(_DWORD *)&v31[14] = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Compose Service Configure message for device %s with profiles %x", v31, 0x12u);
      if (SBYTE7(v33) < 0)
        operator delete(*(void **)buf);
    }
    v26 = v29;
    v27 = WORD2(v29);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10093D208);
    v10 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v26, 1);
    if (*(_DWORD *)(v4 + 20))
    {
      v11 = v10;
      *(_OWORD *)buf = 0u;
      v33 = 0u;
      sub_1004806B4((uint64_t)buf, 0);
      v12 = *(_WORD *)(a1 + 680);
      sub_1004806E0((uint64_t)buf, 5);
      sub_1004806E0((uint64_t)buf, 0);
      sub_10048071C((uint64_t)buf, v12);
      sub_10048071C((uint64_t)buf, 2);
      v13 = *(_DWORD *)(v4 + 20);
      if ((v13 & 0x10) != 0)
      {
        sub_10048076C((uint64_t)buf, 0x10u);
        sub_10048071C((uint64_t)buf, 6);
        sub_1004806E0((uint64_t)buf, 21);
        sub_1004806E0((uint64_t)buf, 1);
        sub_1004806E0((uint64_t)buf, *(_BYTE *)(v4 + 134));
        sub_1004806E0((uint64_t)buf, 20);
        sub_1004806E0((uint64_t)buf, 1);
        sub_1004806E0((uint64_t)buf, *(_BYTE *)(v4 + 135));
        v13 = *(_DWORD *)(v4 + 20);
      }
      if ((v13 & 1) != 0)
      {
        sub_10048076C((uint64_t)buf, 1u);
        sub_10048071C((uint64_t)buf, 0);
        v13 = *(_DWORD *)(v4 + 20);
      }
      if ((v13 & 0x80000) != 0)
      {
        memset(v31, 0, sizeof(v31));
        sub_1004806B4((uint64_t)v31, 0);
        if (qword_100977A88 != -1)
          dispatch_once(&qword_100977A88, &stru_10093D288);
        if (sub_1002A07AC((uint64_t)off_100977A80, v11, (uint64_t)v31))
        {
          *(_DWORD *)(v4 + 20) &= ~0x80000u;
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_10093D288);
          sub_1002A13F8(off_100977A80, *(_QWORD *)v4, *(unsigned __int16 *)(v4 + 84), 114);
        }
        else
        {
          sub_10048076C((uint64_t)buf, 0x80000u);
          sub_10003994C((_QWORD *)&v29 + 1, *(const void **)&v31[8], *(_QWORD *)&v31[16] - *(_QWORD *)&v31[8]);
          v14 = sub_10003F8C4((uint64_t)&v29 + 8);
          sub_10048071C((uint64_t)buf, v14);
          *((_QWORD *)&v29 + 1) = &off_100918258;
          if (v30)
            sub_100056AAC(v30);
          sub_10003994C((_QWORD *)&v29 + 1, *(const void **)&v31[8], *(_QWORD *)&v31[16] - *(_QWORD *)&v31[8]);
          v15 = (char *)sub_10003EB18((uint64_t)&v29 + 8);
          sub_10003994C(&v24, *(const void **)&v31[8], *(_QWORD *)&v31[16] - *(_QWORD *)&v31[8]);
          v16 = sub_10003F8C4((uint64_t)&v24);
          sub_1004806C4((uint64_t)buf, v15, v16);
          v24 = &off_100918258;
          if (v25)
            sub_100056AAC(v25);
          *((_QWORD *)&v29 + 1) = &off_100918258;
          if (v30)
            sub_100056AAC(v30);
        }
        if (*(_QWORD *)&v31[8])
        {
          *(_QWORD *)&v31[16] = *(_QWORD *)&v31[8];
          operator delete(*(void **)&v31[8]);
        }
        v13 = *(_DWORD *)(v4 + 20);
      }
      if ((v13 & 8) != 0)
      {
        sub_10048076C((uint64_t)buf, 8u);
        sub_10048071C((uint64_t)buf, 0);
        v13 = *(_DWORD *)(v4 + 20);
      }
      if ((v13 & 0x100000) != 0)
      {
        sub_10048076C((uint64_t)buf, 0x100000u);
        sub_10048071C((uint64_t)buf, 0);
      }
      sub_10006D81C(&v28);
      sub_10003994C(v31, *(const void **)&buf[8], v33 - *(_QWORD *)&buf[8]);
      v17 = (char *)sub_10003EB18((uint64_t)v31);
      sub_10003994C((_QWORD *)&v29 + 1, *(const void **)&buf[8], v33 - *(_QWORD *)&buf[8]);
      v18 = sub_10003F8C4((uint64_t)&v29 + 8);
      v19 = sub_1001DBF20((uint64_t)sub_10060A7E8, a2, &v29, v17, v18);
      *((_QWORD *)&v29 + 1) = &off_100918258;
      if (v30)
        sub_100056AAC(v30);
      *(_QWORD *)v31 = &off_100918258;
      if (*(_QWORD *)&v31[8])
        sub_100056AAC(*(unsigned int **)&v31[8]);
      v20 = sub_10004339C(&v28);
      if ((_DWORD)v19)
      {
        v21 = qword_1009999D0;
        if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
        {
          sub_10003994C(v31, *(const void **)&buf[8], v33 - *(_QWORD *)&buf[8]);
          v23 = sub_10003F8C4((uint64_t)v31);
          DWORD2(v29) = 67109376;
          HIDWORD(v29) = v19;
          LOWORD(v30) = 1024;
          *(_DWORD *)((char *)&v30 + 2) = v23;
          _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "L2CAP Write failed with result %d for data size %d", (uint8_t *)&v29 + 8, 0xEu);
          *(_QWORD *)v31 = &off_100918258;
          if (*(_QWORD *)&v31[8])
            sub_100056AAC(*(unsigned int **)&v31[8]);
        }
        sub_1006085F0(a1, *(_QWORD *)v4 + 128, v19);
      }
      else
      {
        sub_1006082D8(v20, v4, 6u);
      }
      if (*(_QWORD *)&buf[8])
      {
        *(_QWORD *)&v33 = *(_QWORD *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
    }
  }
  return sub_100043728(&v28);
}

void sub_10060BC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, unsigned int *a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (a17)
    sub_100056AAC(a17);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  sub_100043728(&a14);
  _Unwind_Resume(a1);
}

void sub_10060BDA4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int *v15;
  char v16;

  v7 = *a2;
  if ((*a2 & 0x10) != 0)
  {
    v16 = 0;
    sub_100043758(&v16);
    v15 = 0;
    v8 = sub_1001DB044(*(unsigned __int16 *)(a4 + 64), (uint64_t *)&v15);
    v9 = sub_1001E3CCC(v15);
    sub_10004339C(&v16);
    if (!v8 && v9)
    {
      if (qword_100977E00 != -1)
        dispatch_once(&qword_100977E00, &stru_10093D248);
      sub_1003E9D10((_QWORD *)qword_100977DF8, a3);
    }
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_1007102B8();
    *(_DWORD *)(a4 + 20) &= ~0x10u;
    *a2 &= ~0x10u;
    if (qword_100977E00 != -1)
      dispatch_once(&qword_100977E00, &stru_10093D248);
    sub_1003EA164(qword_100977DF8, a3, (_QWORD *)*(unsigned __int16 *)(a4 + 54), *(unsigned __int16 *)(a4 + 64), *(unsigned __int16 *)(a4 + 136), *(unsigned __int8 *)(a4 + 135));
    sub_100043728(&v16);
    v7 = *a2;
  }
  if ((v7 & 1) != 0)
  {
    v15 = 0;
    v16 = 0;
    sub_100043758(&v16);
    v10 = sub_1001DB044(*(unsigned __int16 *)(a4 + 74), (uint64_t *)&v15);
    sub_10004339C(&v16);
    if (!v10)
    {
      if (qword_10097AA40 != -1)
        dispatch_once(&qword_10097AA40, &stru_10093D268);
      sub_1004E4C58(off_10097AA38, a3);
    }
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_100710258();
    *(_DWORD *)(a4 + 20) &= ~1u;
    *a2 &= ~1u;
    sub_100043728(&v16);
    v7 = *a2;
  }
  if ((v7 & 0x80000) != 0)
  {
    v15 = 0;
    v16 = 0;
    sub_100043758(&v16);
    v11 = sub_1001DB044(*(unsigned __int16 *)(a4 + 84), (uint64_t *)&v15);
    sub_10004339C(&v16);
    if (!v11)
    {
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_10093D288);
      sub_1002A109C(off_100977A80, a3);
    }
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_1007101F8();
    *(_DWORD *)(a4 + 20) &= ~0x80000u;
    *a2 &= ~0x80000u;
    sub_100043728(&v16);
    v7 = *a2;
  }
  if ((v7 & 8) != 0)
  {
    v15 = 0;
    v16 = 0;
    sub_100043758(&v16);
    v12 = sub_1001DB044(*(unsigned __int16 *)(a4 + 94), (uint64_t *)&v15);
    sub_10004339C(&v16);
    if (!v12)
    {
      if (qword_10097AC00 != -1)
        dispatch_once(&qword_10097AC00, &stru_10093D2A8);
      sub_1005A5708(off_10097ABF8, a3);
    }
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_100710198();
    *(_DWORD *)(a4 + 20) &= ~0x80000u;
    *a2 &= ~0x80000u;
    sub_100043728(&v16);
    v7 = *a2;
  }
  if ((v7 & 0x100000) != 0)
  {
    v16 = 0;
    sub_100043758(&v16);
    v15 = 0;
    v13 = sub_1001DB044(*(unsigned __int16 *)(a4 + 114), (uint64_t *)&v15);
    v14 = sub_1001E3CCC(v15);
    sub_10004339C(&v16);
    if (!v13 && v14)
    {
      if (qword_10097B1A0 != -1)
        dispatch_once(&qword_10097B1A0, &stru_10093D2E8);
      sub_1004309F4((_QWORD *)qword_10097B198, a3);
    }
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_100710138();
    *(_DWORD *)(a4 + 20) &= ~0x100000u;
    *a2 &= ~0x100000u;
    sub_100043728(&v16);
  }
}

void sub_10060C230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_10060C25C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  _WORD *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  NSObject *v22;
  uint8_t v23[7];
  char v24;
  int *v25;

  v7 = *a2;
  if ((*a2 & 0x10) != 0)
  {
    v23[0] = 0;
    sub_100043758(v23);
    v25 = 0;
    v8 = sub_1001DB044(*(unsigned __int16 *)(a4 + 64), (uint64_t *)&v25);
    v9 = sub_1001E3CCC(v25);
    sub_10004339C(v23);
    if (!v8 && v9)
    {
      if (qword_100977E00 != -1)
        dispatch_once(&qword_100977E00, &stru_10093D248);
      v10 = qword_100977DF8;
      v11 = *(_QWORD *)a4;
      v12 = *(unsigned __int16 *)(a4 + 136);
      v13 = sub_1001E3CCC(v25);
      sub_1003E9E08(v10, v11, v12, *(unsigned __int16 *)(v13 + 32), 0);
    }
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_100710498();
    *(_DWORD *)(a4 + 20) &= ~0x10u;
    *a2 &= ~0x10u;
    if (qword_100977E00 != -1)
      dispatch_once(&qword_100977E00, &stru_10093D248);
    sub_1003EA164(qword_100977DF8, a3, (_QWORD *)*(unsigned __int16 *)(a4 + 54), *(unsigned __int16 *)(a4 + 64), *(unsigned __int16 *)(a4 + 136), *(unsigned __int8 *)(a4 + 135));
    if (qword_100977E00 != -1)
      dispatch_once(&qword_100977E00, &stru_10093D248);
    sub_1003E9E08(qword_100977DF8, *(_QWORD *)a4, *(unsigned __int16 *)(a4 + 136), 0, 4509);
  }
  if ((v7 & 1) != 0)
  {
    v25 = 0;
    v24 = 0;
    sub_100043758(&v24);
    v14 = sub_1001DB044(*(unsigned __int16 *)(a4 + 74), (uint64_t *)&v25);
    sub_10004339C(&v24);
    if (v14)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
        sub_100710438();
      *(_DWORD *)(a4 + 20) &= ~1u;
      *a2 &= ~1u;
      if (qword_10097AA40 != -1)
        dispatch_once(&qword_10097AA40, &stru_10093D268);
      sub_1004E4D50((uint64_t)off_10097AA38, a3, a4 + 140, a4 + 142, a4 + 143, *(unsigned __int8 *)(a4 + 144), 4510);
    }
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_10093D268);
    sub_1004E4D50((uint64_t)off_10097AA38, a3, a4 + 140, a4 + 142, a4 + 143, *(unsigned __int8 *)(a4 + 144), 0);
  }
  if ((v7 & 0x80000) != 0)
  {
    v25 = 0;
    v23[0] = 0;
    sub_100043758(v23);
    v15 = sub_1001DB044(*(unsigned __int16 *)(a4 + 84), (uint64_t *)&v25);
    sub_10004339C(v23);
    if (v15)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
        sub_1007103D8();
      *(_DWORD *)(a4 + 20) &= ~0x80000u;
      *a2 &= ~0x80000u;
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_10093D288);
      sub_1002A1194((uint64_t)off_100977A80, a3, 4512);
    }
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10093D288);
    sub_1002A1194((uint64_t)off_100977A80, a3, 0);
  }
  if ((v7 & 8) != 0)
  {
    v25 = 0;
    v23[0] = 0;
    sub_100043758(v23);
    v16 = sub_1001DB044(*(unsigned __int16 *)(a4 + 94), (uint64_t *)&v25);
    sub_10004339C(v23);
    if (v16)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
        sub_100710378();
      *(_DWORD *)(a4 + 20) &= ~8u;
      *a2 &= ~8u;
      if (qword_10097AC00 != -1)
        dispatch_once(&qword_10097AC00, &stru_10093D2A8);
      sub_1005A5800((uint64_t)off_10097ABF8, a3, 4511);
    }
    if (qword_10097AC00 != -1)
      dispatch_once(&qword_10097AC00, &stru_10093D2A8);
    sub_1005A5800((uint64_t)off_10097ABF8, a3, 0);
  }
  if ((v7 & 0x100000) != 0)
  {
    v24 = 0;
    sub_100043758(&v24);
    v25 = 0;
    v17 = (_WORD *)(a4 + 114);
    v18 = sub_1001DB044(*(unsigned __int16 *)(a4 + 114), (uint64_t *)&v25);
    if (!v18)
    {
      if (sub_1001E3CCC(v25))
      {
        v19 = (unsigned __int16)*v17;
        v20 = *(unsigned __int16 *)(sub_1001E3CCC(v25) + 36);
        v21 = sub_1001E3CCC(v25);
        v18 = sub_1001159E4(v19, v20, *(unsigned __int16 *)(v21 + 32), 0);
      }
      else
      {
        v18 = 0;
      }
    }
    sub_10004339C(&v24);
    v22 = qword_1009999D0;
    if (v18)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
        sub_100710318();
      if (qword_10097B1A0 != -1)
        dispatch_once(&qword_10097B1A0, &stru_10093D2E8);
      sub_100430AEC(qword_10097B198, a3, 4513);
    }
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "GATT Setup Complete", v23, 2u);
    }
    *v17 = 0;
    sub_100043728(&v24);
  }
}

void sub_10060C914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_100043728(&a9);
  _Unwind_Resume(a1);
}

_BYTE *sub_10060C944(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void **v10;
  __int16 v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  __int16 v17;
  int v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  unsigned int v22;
  __int16 v23;
  int v24;
  void *v25;
  int v26;
  unsigned int v27;
  __int16 v28;
  int v29;
  int v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  uint64_t v36;
  unint64_t v37;
  id v38;
  void *v39;
  void *v40;
  BOOL v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  BOOL v46;
  uint64_t v47;
  unint64_t denom;
  uint64_t numer;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  NSObject *v56;
  void *v57;
  void *v58;
  NSObject *v59;
  unint64_t v60;
  void *v61;
  void *v62;
  NSObject *v63;
  int v64;
  void *v65;
  void **v66;
  void *v67;
  NSObject *global_queue;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v81;
  int v82;
  uint64_t v83;
  void *v85;
  uint64_t v86;
  _QWORD block[4];
  id v88;
  int v89;
  char v90;
  _BYTE v91[15];
  uint64_t (**v92)();
  unsigned int *v93;
  int v94;
  __int16 v95;
  char v96;
  int v97;
  __int16 v98;
  uint8_t buf[16];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  void *__p[2];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;

  v98 = 0;
  v97 = 0;
  v96 = 0;
  sub_100043758(&v96);
  v5 = sub_1002012E0(a2, (uint64_t)&v97);
  sub_10004339C(&v96);
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_1007106E4();
    return sub_100043728(&v96);
  }
  v94 = v97;
  v95 = v98;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093D208);
  v6 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v94, 1);
  v7 = sub_100608214(a1, (uint64_t)&v97);
  if (v7)
  {
    v8 = v7;
    v83 = v6;
    v86 = v7;
    if (*(int *)(v7 + 16) >= 9)
    {
      v7 = os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_FAULT);
      if ((_DWORD)v7)
      {
        sub_10071066C();
        v8 = v86;
      }
    }
    sub_1006082D8(v7, v8, 9u);
    v9 = qword_1009999D0;
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F6EC(*(_QWORD *)v86, (uint64_t)__p);
      v10 = (SBYTE7(v116) & 0x80u) == 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Setup Complete received from device %s", buf, 0xCu);
      if (SBYTE7(v116) < 0)
        operator delete(__p[0]);
    }
    if (sub_1004805A4(a3) != 1 && os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_10071060C();
    v11 = sub_1004805A4(a3);
    v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    sub_10006D81C(&v96);
    v12 = sub_10019AEA4((uint64_t)&v97);
    LOWORD(v13) = v11;
    if (v11 >= 1)
    {
      v14 = v12;
      v82 = 0;
      while (1)
      {
        v15 = (char)sub_100480558(a3);
        if (v15 < 0)
        {
          v16 = sub_1004805A4(a3);
          v17 = -3;
        }
        else
        {
          v16 = sub_100480558(a3);
          v17 = -2;
        }
        v18 = v15 & 0x7F;
        switch(v15 & 0x7F)
        {
          case 1:
            if (v16)
            {
              if (v16 != 4)
                goto LABEL_39;
              v82 = sub_100480608(a3);
            }
            goto LABEL_42;
          case 2:
            if (v16)
            {
              if (v16 != 8)
                goto LABEL_39;
              __p[0] = 0;
              sub_100480520(a3, __p, 8uLL);
            }
            goto LABEL_42;
          case 3:
            if (v16)
            {
              if (v16 != 4)
                goto LABEL_39;
              *(_DWORD *)(v14 + 229) = sub_100480608(a3);
              *(_BYTE *)(v14 + 228) = 1;
            }
            goto LABEL_42;
          case 4:
            if (v16)
            {
              if (v16 != 8)
                goto LABEL_39;
              __p[0] = 0;
              sub_100480520(a3, __p, 8uLL);
              sub_1001E29E4((uint64_t)sub_1002297E4);
              sub_1001DFD3C((uint64_t)&v97, 0, 3, __p, 8, 0);
              sub_1001E2984((uint64_t)sub_1002297E4, 48);
            }
            goto LABEL_42;
          default:
            v19 = qword_1009999D0;
            if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
            {
              LODWORD(__p[0]) = 67109120;
              HIDWORD(__p[0]) = v18;
              _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Key %d not recognized in setup complete message", (uint8_t *)__p, 8u);
              if (v16)
              {
LABEL_39:
                v20 = qword_1009999D0;
                if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(__p[0]) = 67109632;
                  HIDWORD(__p[0]) = v18;
                  LOWORD(__p[1]) = 1024;
                  *(_DWORD *)((char *)&__p[1] + 2) = v16;
                  HIWORD(__p[1]) = 1024;
                  LODWORD(v116) = v16;
                  _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Key:%d Dumped %d of %d bytes ", (uint8_t *)__p, 0x14u);
                }
                sub_100480664(a3, v16);
              }
            }
            else if (v16)
            {
              goto LABEL_39;
            }
LABEL_42:
            v13 = (__int16)(v13 + v17 - v16);
            if (v13 <= 0)
              goto LABEL_49;
            break;
        }
      }
    }
    v82 = 0;
    v16 = 0;
LABEL_49:
    sub_10004339C(&v96);
    if (sub_1004805A4(a3) == 2)
    {
      v21 = a3 + 8;
      while (1)
      {
        if ((unint64_t)(sub_10003F8C4(v21) - *(_QWORD *)(a3 + 24)) < 9)
          goto LABEL_92;
        v22 = sub_100480608(a3);
        v23 = sub_1004805A4(a3);
        LOWORD(v24) = v23;
        if (sub_10003F8C4(v21) - *(_QWORD *)(a3 + 24) < (unint64_t)v23)
        {
          v35 = qword_1009999D0;
          if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
          {
            v81 = sub_10003F8C4(v21) - *(_DWORD *)(a3 + 24);
            LODWORD(__p[0]) = 67109376;
            HIDWORD(__p[0]) = v23;
            LOWORD(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 2) = v81;
            _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "fastConnectParseSetupCompleteMessage Length Error Descriptor length %u remaining %u", (uint8_t *)__p, 0xEu);
          }
          goto LABEL_92;
        }
        v25 = sub_100052DC0(v23);
        if (!v25)
          goto LABEL_92;
        sub_100480520(a3, v25, v23);
        v92 = 0;
        v93 = 0;
        sub_10003994C(&v92, v25, v23);
        *(_OWORD *)__p = 0u;
        v116 = 0u;
        sub_1004804E0((uint64_t)__p, 0, (uint64_t)&v92);
        if (v22 > 0x10 || ((1 << v22) & 0x10102) == 0)
        {
          if (v22 == 0x80000)
          {
            if (qword_100977A88 != -1)
              dispatch_once(&qword_100977A88, &stru_10093D288);
            if (sub_10029F1E4((uint64_t)off_100977A80, (uint64_t)__p, v83, v85)
              && os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
            {
              sub_100710580(&v90, v91);
            }
            goto LABEL_84;
          }
          if (v22 != 0x100000)
            goto LABEL_84;
        }
        if (v23 >= 1)
        {
          do
          {
            v26 = (char)sub_100480558((uint64_t)__p);
            if (v26 < 0)
            {
              v27 = sub_1004805A4((uint64_t)__p);
              v28 = -3;
            }
            else
            {
              v27 = sub_100480558((uint64_t)__p);
              v28 = -2;
            }
            v29 = v26 & 0x7F;
            if (v29 == 4)
            {
              if (v27 == 2)
              {
                v30 = sub_1004805A4((uint64_t)__p);
                if (v30)
                {
                  v31 = qword_1009999D0;
                  if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 67109376;
                    *(_DWORD *)&buf[4] = v22;
                    *(_WORD *)&buf[8] = 1024;
                    *(_DWORD *)&buf[10] = v30;
                    _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "fastConnectParseSetupCompleteMessage Service 0x%x status %u", buf, 0xEu);
                  }
                }
              }
              else
              {
                v33 = qword_1009999D0;
                if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&buf[4] = v27;
                  _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "fastConnectParseSetupCompleteMessage Error FC_COMMON_STATUS size wrong %d", buf, 8u);
                  if (v27)
                    goto LABEL_72;
                }
                else if (v27)
                {
                  goto LABEL_72;
                }
              }
            }
            else if (v27)
            {
              v32 = qword_1009999D0;
              if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&buf[4] = v29;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v27;
                *(_WORD *)&buf[14] = 1024;
                LODWORD(v100) = v16;
                _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Key not recognized :%d Dumped %d of %d bytes ", buf, 0x14u);
              }
LABEL_72:
              v34 = qword_1009999D0;
              if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&buf[4] = v27;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v29;
                _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "fastConnectParseSetupCompleteMessage dumping %d for Key:%d ", buf, 0xEu);
              }
              sub_100480664(a3, v27);
            }
            v24 = (__int16)(v24 + v28 - v27);
          }
          while (v24 > 0);
        }
LABEL_84:
        sub_100053298(v25);
        __p[1] = &off_100918258;
        v21 = a3 + 8;
        if ((_QWORD)v116)
          sub_100056AAC((unsigned int *)v116);
        v92 = &off_100918258;
        if (v93)
          sub_100056AAC(v93);
      }
    }
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_1007105AC();
LABEL_92:
    if (v82 != *(_DWORD *)(v86 + 20) && os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_FAULT))
      sub_100710548();
    v36 = mach_absolute_time();
    v37 = (v36 - *(_QWORD *)(v86 + 176)) * stru_100993EDC.numer / stru_100993EDC.denom / 0xF4240;
    *(_DWORD *)(v86 + 192) += v37;
    v38 = *(id *)(v86 + 200);
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v37));
    objc_msgSend(v85, "setObject:forKeyedSubscript:", v39, CFSTR("ProfileSetupDuration"));

    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "objectForKey:", CFSTR("BasebandDurationTotal")));
    v41 = v40 == 0;

    if (!v41)
    {
      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v85, "objectForKeyedSubscript:", CFSTR("BasebandDurationTotal")));
      *(_DWORD *)(v86 + 192) += objc_msgSend(v42, "intValue");

    }
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v86 + 192)));
    objc_msgSend(v85, "setObject:forKeyedSubscript:", v43, CFSTR("DurationWithRetries"));

    v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKeyedSubscript:", CFSTR("EncryptionConnectionTimeMs")));
    objc_msgSend(v85, "setObject:forKeyedSubscript:", v44, CFSTR("EncryptionSetupDuration"));

    v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKey:", CFSTR("BasebandConnectionTimeMs")));
    v46 = v45 == 0;

    if (!v46)
    {
      v47 = *(_QWORD *)(v86 + 160);
      numer = stru_100993EDC.numer;
      denom = stru_100993EDC.denom;
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "objectForKeyedSubscript:", CFSTR("BasebandConnectionTimeMs")));
      objc_msgSend(v85, "setObject:forKeyedSubscript:", v50, CFSTR("BasebandDurationTotal"));

      v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v47 * numer / denom / 0xF4240));
      objc_msgSend(v85, "setObject:forKeyedSubscript:", v51, CFSTR("BasebandDuration"));

    }
    v52 = sub_100065478();
    v53 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(_QWORD *)v52 + 520))(v52, v83, v85);
    LODWORD(v92) = v82;
    sub_10060BDA4(v53, (int *)&v92, v83, v86);
    v54 = (int)v92;
    v89 = (int)v92;
    sub_10060C25C(v55, &v89, v83, v86);
    v56 = qword_1009999D0;
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109632;
      HIDWORD(__p[0]) = v82;
      LOWORD(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 2) = v54;
      HIWORD(__p[1]) = 1024;
      LODWORD(v116) = v89;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "Setup Complete with profiles: %x, profile attempts: %x, profile results: %x", (uint8_t *)__p, 0x14u);
    }
    v57 = *(void **)(v86 + 200);
    v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v37));
    objc_msgSend(v57, "setObject:forKey:", v58, CFSTR("ProfileConnectionTimeMs"));

    v59 = qword_1009999D0;
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
    {
      v60 = (v36 - *(_QWORD *)(v86 + 184)) * stru_100993EDC.numer / stru_100993EDC.denom / 0xF4240;
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v60;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Configuration took %d ms", (uint8_t *)__p, 8u);
      v59 = qword_1009999D0;
    }
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v37;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Profile setup took %d ms", (uint8_t *)__p, 8u);
    }
    v61 = *(void **)(v86 + 200);
    v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v86 + 192)));
    objc_msgSend(v61, "setObject:forKey:", v62, CFSTR("TotalConnectionTimeMs"));

    v63 = qword_1009999D0;
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
    {
      v64 = *(_DWORD *)(v86 + 192);
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v64;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Total connection took %d ms!", (uint8_t *)__p, 8u);
    }
    v65 = *(void **)(v86 + 200);
    sub_1004491B4(v83, 0xAu, __p);
    if ((SBYTE7(v116) & 0x80u) == 0)
      v66 = __p;
    else
      v66 = (void **)__p[0];
    v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v66));
    objc_msgSend(v65, "setObject:forKey:", v67, CFSTR("FWVersion"));

    if (SBYTE7(v116) < 0)
      operator delete(__p[0]);
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10060D9C0;
    block[3] = &unk_1009172A0;
    v69 = v38;
    v88 = v69;
    dispatch_async(global_queue, block);
    sub_10006D81C(&v96);
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    *(_OWORD *)__p = 0u;
    v116 = 0u;
    sub_1002532F8((uint64_t)__p, 256, (uint64_t)"PFC Profile Setup took %d", v70, v71, v72, v73, v74, v37);
    sub_10011C9B4((const char *)__p);
    v113 = 0u;
    v114 = 0u;
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    *(_OWORD *)buf = 0u;
    v100 = 0u;
    sub_1002532F8((uint64_t)buf, 256, (uint64_t)"PFC Total connection took %d", v75, v76, v77, v78, v79, *(unsigned int *)(v86 + 192));
    sub_10011C9B4((const char *)buf);
    sub_10004339C(&v96);
    sub_1006085F0(a1, (uint64_t)&v97, 0);

  }
  else if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
  {
    sub_10046E9BC((unsigned __int8 *)&v94, __p);
    sub_1007104F8();
  }
  return sub_100043728(&v96);
}

void sub_10060D854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{

  sub_100043728(&a38);
  _Unwind_Resume(a1);
}

uint64_t sub_10060D9C0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100065478();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 344))(v2, *(_QWORD *)(a1 + 32));
}

void sub_10060D9EC(int a1, int a2, int a3)
{
  _DWORD *v6;
  NSObject *v7;
  _DWORD *v8;
  int v9;
  int v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;

  v6 = sub_1001DBA68(a1);
  if (v6)
  {
    v7 = qword_1009999D0;
    if (a2)
    {
      v8 = v6;
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      {
        v9 = *((unsigned __int16 *)v8 + 2);
        v10 = 67109888;
        v11 = a2;
        v12 = 1024;
        v13 = v9;
        v14 = 1024;
        v15 = a1;
        v16 = 1024;
        v17 = a3;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "FastConnectMagicPolicyCB: Policy enforcement failed %{bluetooth:OI_STATUS}u - cid 0x%x, handle %d securityFailed %d", (uint8_t *)&v10, 0x1Au);
        v7 = qword_1009999D0;
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 67109120;
      v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Magic Pairing came back with result %d", (uint8_t *)&v10, 8u);
    }
    if (a2 != 1500)
      sub_10060DB5C();
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
  {
    sub_100710744();
  }
}

void sub_10060DB5C()
{
  sub_10006BBEC();
  operator new();
}

void sub_10060DBC4(uint64_t a1, uint64_t a2, int a3)
{
  int *v5;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  unsigned int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  _BOOL4 v32;
  char v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  __int16 v43;
  uint8_t buf[16];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;

  v5 = sub_1001DBA68(a3);
  if (v5)
  {
    v6 = v5;
    v7 = v5;
    v8 = sub_1001E3CCC(v5);
    v42 = *(_DWORD *)(v8 + 10);
    v43 = *(_WORD *)(v8 + 14);
    v9 = sub_100608214(a1, (uint64_t)&v42);
    if (v9)
    {
      v10 = v9;
      if ((_DWORD)a2 == 1414 || (_DWORD)a2 == 742)
      {
        if (!*(_BYTE *)(v9 + 51))
        {
          v31 = qword_1009999D0;
          v32 = os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT);
          v33 = 1;
          if (v32)
          {
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)&buf[4] = a2;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = 0;
            *(_WORD *)&buf[14] = 1024;
            LODWORD(v45) = 1;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Authentication failed with result: %d. Retrying authentication since auth retries %d < %d", buf, 0x14u);
            v33 = *(_BYTE *)(v10 + 51) + 1;
          }
          *(_BYTE *)(v10 + 51) = v33;
          *((_QWORD *)v7 + 8) = &unk_10093D0A0;
          v41 = 0;
          sub_100043758(&v41);
          v34 = sub_10025495C((uint64_t)sub_10060D9EC, (uint64_t)&v42, *((__int128 **)v7 + 8), v6 + 18, 1);
          if ((_DWORD)v34)
          {
            v35 = qword_1009999D0;
            if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v34;
              _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Policy Mgr for PFC new connection failed %d", buf, 8u);
            }
          }
          sub_10004339C(&v41);
          if ((_DWORD)v34)
            sub_1006085F0(a1, (uint64_t)&v42, v34);
          goto LABEL_25;
        }
      }
      else if (!(_DWORD)a2)
      {
        v11 = (mach_absolute_time() - *(_QWORD *)(v9 + 168)) * stru_100993EDC.numer / stru_100993EDC.denom / 0xF4240;
        *(_DWORD *)(v10 + 192) += v11;
        v12 = *(void **)(v10 + 200);
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11));
        objc_msgSend(v12, "setObject:forKey:", v13, CFSTR("EncryptionConnectionTimeMs"));

        v14 = qword_1009999D0;
        if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v11;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Authentication took %d ms", buf, 8u);
        }
        v15 = mach_absolute_time();
        v16 = *(unsigned __int16 *)(v10 + 48);
        *(_QWORD *)(v10 + 176) = v15;
        if (sub_1002012E0(v16, (uint64_t)&v42))
        {
          v17 = qword_1009999D0;
          if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
            sub_100710818(v10 + 48, v17, v18, v19, v20, v21, v22, v23);
          return;
        }
        v41 = 0;
        sub_100043758(&v41);
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        *(_OWORD *)buf = 0u;
        v45 = 0u;
        sub_1002532F8((uint64_t)buf, 256, (uint64_t)"PFC Authentication took %d", v36, v37, v38, v39, v40, v11);
        sub_10011C9B4((const char *)buf);
        sub_10004339C(&v41);
        *(_BYTE *)(v10 + 51) = 0;
        sub_1006097C0(a1, v10);
LABEL_25:
        sub_100043728(&v41);
        return;
      }
      *(_BYTE *)(v9 + 51) = 0;
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
        sub_1007107EC();
      sub_1006085F0(a1, v10 + 8, a2);
    }
    else
    {
      v24 = qword_1009999D0;
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
        sub_100710770((uint64_t)&v42, v24, v25, v26, v27, v28, v29, v30);
    }
  }
}

void sub_10060DF88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10060DFB4(uint64_t a1, __int16 a2, char a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  NSObject *v14;
  uint64_t v15;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint8_t *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  NSObject *v29;
  _BOOL8 v30;
  void *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  void *v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  NSObject *v47;
  uint8_t *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned __int16 *v52;
  uint64_t v53;
  NSObject *v54;
  int v55;
  NSObject *v56;
  NSObject *v57;
  uint8_t *v58;
  __CFString *v59;
  void *v60;
  id v61;
  void *v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  NSObject *v67;
  const char *v68;
  NSObject *v69;
  void *__p[2];
  char v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  uint8_t buf[16];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint8_t v92[4];
  uint8_t *v93;
  __int16 v94;
  const char *v95;
  unsigned __int8 uu[8];
  uint64_t v97;

  v74 = a8;
  v75 = WORD2(a8);
  v14 = qword_1009999D0;
  if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a6;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Channel support came back with status %d", buf, 8u);
  }
  v72 = v74;
  v73 = v75;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093D208);
  v15 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v72, 1);
  v17 = (_DWORD)a6 != 4500 && (_DWORD)a6 != 0;
  if (!a4 || v17)
  {
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_100710930();
    if (a7 || !v15)
    {
      if ((_DWORD)a6 == 4515 && a7 && v15)
      {
        sub_100608260(a1, (uint64_t)&v74);
        v32 = qword_1009999D0;
        if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Start SDP due to SDP mismatch of incoming FC", buf, 2u);
        }
        if (qword_10097B080 != -1)
          dispatch_once(&qword_10097B080, &stru_10093D328);
        sub_10048BD34();
      }
      return;
    }
    v24 = sub_100608214(a1, (uint64_t)&v74);
    if (!v24)
    {
      if ((_DWORD)a6 != 711)
      {
LABEL_106:
        sub_100608260(a1, (uint64_t)&v74);
        v66 = a6 == 4515;
        *(_BYTE *)(a1 + 682) = v66;
        v67 = qword_1009999D0;
        if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
        {
          v68 = "Legacy";
          if ((_DWORD)a6 == 4515)
            v68 = "FC";
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v68;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "Profile connection: %s", buf, 0xCu);
          v66 = *(unsigned __int8 *)(a1 + 682);
        }
        if (v66)
        {
          if (qword_10097B080 != -1)
            dispatch_once(&qword_10097B080, &stru_10093D328);
          sub_10048BD34();
        }
        if (qword_100977A78 != -1)
          dispatch_once(&qword_100977A78, &stru_10093D228);
        sub_100498214((uint64_t)off_100977A70, v15, 0);
        return;
      }
LABEL_117:
      v69 = qword_1009999D0;
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 711;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "Cleaning up PFC because status is %d", buf, 8u);
      }
      sub_1006085F0(a1, (uint64_t)&v74, 711);
      return;
    }
    v25 = v24;
    v26 = (mach_absolute_time() - *(_QWORD *)(v24 + 152)) * stru_100993EDC.numer / stru_100993EDC.denom / 0xF4240;
    if ((_DWORD)a6 == 716 || (_DWORD)a6 == 704)
    {
      v27 = *(unsigned __int8 *)(v25 + 52);
      v28 = *(unsigned __int8 *)(v25 + 53);
      v29 = qword_1009999D0;
      if (v27 >= v28)
      {
        if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
          sub_1007108D0();
        sub_1006085F0(a1, (uint64_t)&v74, a6);
      }
      else
      {
        v30 = os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT);
        if (v30)
        {
          *(_DWORD *)buf = 67109888;
          *(_DWORD *)&buf[4] = a6;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v26;
          *(_WORD *)&buf[14] = 1024;
          LODWORD(v77) = v27;
          WORD2(v77) = 1024;
          *(_DWORD *)((char *)&v77 + 6) = v28;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Status: %d, took %d ms. Retrying echo request since retries %d < %d", buf, 0x1Au);
        }
        sub_1006082D8(v30, v25, 1u);
        v31 = *(void **)(v25 + 200);
        *(_QWORD *)(v25 + 200) = 0;

        *(_QWORD *)(v25 + 160) = 0;
        ++*(_BYTE *)(v25 + 52);
        if (qword_100977A78 != -1)
          dispatch_once(&qword_100977A78, &stru_10093D228);
        sub_100498214((uint64_t)off_100977A70, v15, 1);
        if (sub_100442118(v15, 12))
        {
          memset(buf, 0, sizeof(buf));
          *(_QWORD *)&v77 = 0;
          if (*(char *)(v15 + 1495) < 0)
          {
            sub_10003430C(buf, *(void **)(v15 + 1472), *(_QWORD *)(v15 + 1480));
          }
          else
          {
            *(_OWORD *)buf = *(_OWORD *)(v15 + 1472);
            *(_QWORD *)&v77 = *(_QWORD *)(v15 + 1488);
          }
          if (SBYTE7(v77) < 0)
          {
            if (*(_QWORD *)&buf[8])
            {
              v58 = *(uint8_t **)buf;
              goto LABEL_87;
            }
          }
          else if (BYTE7(v77))
          {
            v58 = buf;
LABEL_87:
            v59 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v58));
            goto LABEL_89;
          }
          v59 = CFSTR("Unknown");
LABEL_89:
          *(_QWORD *)uu = 0;
          v97 = 0;
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10093D308);
          sub_10065A6B4((uint64_t)off_1009778C0, (unsigned __int8 *)(v15 + 128), uu);
          if (uuid_is_null(uu))
          {
            if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
            {
              sub_10043E5F8(v15, v92);
              sub_100710880();
            }
          }
          else
          {
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093D308);
            v60 = off_1009778C0;
            v61 = sub_100030DF4(uu);
            v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
            v63 = sub_100660234((uint64_t)v60, v62);

            if (v63 > 0.0)
            {
              v64 = (uint64_t)(CFAbsoluteTimeGetCurrent() - v63);
LABEL_99:
              v65 = sub_100065478();
              sub_10043E5F8(v15, __p);
              (*(void (**)(uint64_t, void **, __CFString *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v65 + 392))(v65, __p, v59, v64, *(unsigned __int8 *)(v25 + 52), *(unsigned __int8 *)(v25 + 53));
              if (v71 < 0)
                operator delete(__p[0]);

              if (SBYTE7(v77) < 0)
                operator delete(*(void **)buf);
              goto LABEL_103;
            }
          }
          v64 = -1;
          goto LABEL_99;
        }
      }
    }
    else
    {
      v57 = qword_1009999D0;
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v26;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "PFC failed, took %d ms", buf, 8u);
      }
    }
LABEL_103:
    if ((_DWORD)a6 == 704)
      return;
    if ((_DWORD)a6 != 711)
    {
      if ((_DWORD)a6 == 716)
        return;
      goto LABEL_106;
    }
    goto LABEL_117;
  }
  if (a7)
  {
    v18 = sub_100608490(a1, v15);
    v19 = v18;
    if (v18)
    {
      if (*(int *)(v18 + 16) >= 2)
      {
        v20 = qword_1009999D0;
        if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
        {
          sub_10043E5F8(v15, buf);
          if ((SBYTE7(v77) & 0x80u) == 0)
            v21 = buf;
          else
            v21 = *(uint8_t **)buf;
          v22 = *(int *)(v19 + 16);
          if (v22 > 9)
            v23 = "Unknown State";
          else
            v23 = off_10093D3C0[v22];
          *(_DWORD *)v92 = 136446466;
          v93 = v21;
          v94 = 2080;
          v95 = v23;
          _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "PFC in progress for device %{public}s, ignoring duplicate request - current state is %s", v92, 0x16u);
          if (SBYTE7(v77) < 0)
            operator delete(*(void **)buf);
        }
        return;
      }
      sub_1006082D8(v18, v18, 3u);
      v45 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      v46 = *(void **)(v19 + 200);
      *(_QWORD *)(v19 + 200) = v45;

      *(_QWORD *)v19 = v15;
      goto LABEL_52;
    }
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_100710990();
  }
  else
  {
    v33 = sub_100608214(a1, (uint64_t)&v74);
    if (v33)
    {
      v19 = v33;
      v34 = mach_absolute_time();
      v35 = v34 - *(_QWORD *)(v19 + 152);
      *(_QWORD *)(v19 + 160) = v34 - *(_QWORD *)(v19 + 160);
      v36 = v35 * stru_100993EDC.numer / stru_100993EDC.denom / 0xF4240;
      *(_DWORD *)(v19 + 192) += v36;
      v37 = *(void **)(v19 + 200);
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v36));
      objc_msgSend(v37, "setObject:forKey:", v38, CFSTR("BasebandConnectionTimeMs"));

      v39 = qword_1009999D0;
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v36;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Baseband took %d ms", buf, 8u);
      }
      *(_BYTE *)(v19 + 52) = 0;
      v92[0] = 0;
      sub_100043758(v92);
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      *(_OWORD *)buf = 0u;
      v77 = 0u;
      sub_1002532F8((uint64_t)buf, 256, (uint64_t)"PFC Baseband took %d", v40, v41, v42, v43, v44, v36);
      sub_10011C9B4((const char *)buf);
      sub_10004339C(v92);
      sub_100043728(v92);
LABEL_52:
      v47 = qword_1009999D0;
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v15, buf);
        v48 = (SBYTE7(v77) & 0x80u) == 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v92 = 136446466;
        v93 = v48;
        v94 = 1024;
        LODWORD(v95) = a4;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Fast Connect supported by device %{public}s with profileMask %x", v92, 0x12u);
        if (SBYTE7(v77) < 0)
          operator delete(*(void **)buf);
      }
      v49 = sub_1000438A4();
      v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 2512))(v49);
      if (v50)
        LOBYTE(v50) = sub_100455920(*(_QWORD *)v19);
      *(_BYTE *)(v19 + 145) = v50;
      v51 = mach_absolute_time();
      *(_WORD *)(v19 + 48) = a2;
      v52 = (unsigned __int16 *)(v19 + 48);
      *((_QWORD *)v52 + 15) = v51;
      *((_DWORD *)v52 - 7) &= a4;
      *((_DWORD *)v52 - 6) = a4;
      *((_BYTE *)v52 - 20) = a7 != 0;
      *(_QWORD *)buf = 0;
      uu[0] = 0;
      sub_100043758(uu);
      v53 = sub_1001DB044(*v52, (uint64_t *)buf);
      sub_10004339C(uu);
      if ((_DWORD)v53)
        goto LABEL_70;
      if ((sub_10043E93C((unsigned __int8 *)v15) & 1) != 0 || (a3 & 0x10) != 0 && (*(_QWORD *)(a1 + 672) & 0x10) != 0)
      {
        v54 = qword_1009999D0;
        if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
        {
          v55 = sub_10043E93C((unsigned __int8 *)v15);
          *(_DWORD *)v92 = 67109120;
          LODWORD(v93) = v55;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "isPaired:%d", v92, 8u);
        }
        *(_QWORD *)(*(_QWORD *)buf + 64) = &unk_10093D0A0;
        sub_10006D81C(uu);
        v53 = sub_10025495C((uint64_t)sub_10060D9EC, v15 + 128, *(__int128 **)(*(_QWORD *)buf + 64), (int *)(*(_QWORD *)buf + 72), 1);
        if ((_DWORD)v53)
        {
          v56 = qword_1009999D0;
          if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v92 = 67109120;
            LODWORD(v93) = v53;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "Policy Mgr for PFC new connection failed %d", v92, 8u);
          }
        }
        sub_10004339C(uu);
        if ((_DWORD)v53)
LABEL_70:
          sub_1006085F0(a1, (uint64_t)&v74, v53);
      }
      sub_100043728(uu);
      return;
    }
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_1007109BC();
  }
}

void sub_10060EBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10060EC68(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t i;
  NSObject *v8;
  int v9;
  int v10;
  __int16 v11;
  int v12;

  v6 = qword_1009999D0;
  if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 67109376;
    v10 = a2;
    v11 = 1024;
    v12 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Fast connect channel disconnected for CID %d with status %d", (uint8_t *)&v9, 0xEu);
  }
  if ((_DWORD)a3 != 436)
  {
    for (i = 0; i != 624; i += 208)
    {
      if (*(_DWORD *)(a1 + i + 32) && *(unsigned __int16 *)(a1 + i + 64) == a2)
      {
        sub_1006085F0(a1, a1 + i + 24, a3);
        return;
      }
    }
    v8 = qword_1009999D0;
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 67109120;
      v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Fast connect channel disconnected can not find FC device for cid %d", (uint8_t *)&v9, 8u);
    }
  }
}

void sub_10060EDBC(uint64_t a1, unsigned int a2, const void *a3, unsigned int a4)
{
  int v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  NSObject *v12;
  uint8_t v13[16];
  __int128 v14;
  __int128 v15;
  uint64_t (**v16)();
  unsigned int *v17;

  v16 = 0;
  v17 = 0;
  sub_10003994C(&v16, a3, a4);
  v14 = 0u;
  v15 = 0u;
  sub_1004804E0((uint64_t)&v14, 0, (uint64_t)&v16);
  v6 = sub_100480558((uint64_t)&v14);
  sub_100480558((uint64_t)&v14);
  v7 = sub_1004805A4((uint64_t)&v14);
  v8 = 0;
  while (!*(_DWORD *)(a1 + v8 + 32) || *(unsigned __int16 *)(a1 + v8 + 64) != a2)
  {
    v8 += 208;
    if (v8 == 624)
      goto LABEL_7;
  }
  *(_DWORD *)(a1 + v8 + 48) = v7;
LABEL_7:
  switch(v6)
  {
    case 3:
      v9 = qword_1009999D0;
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v13 = 0;
        v10 = "Service Descriptor received";
        goto LABEL_17;
      }
      break;
    case 4:
      v11 = qword_1009999D0;
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Service Descriptor Rsp received", v13, 2u);
      }
      sub_10060A8A0(a1, a2, (uint64_t)&v14);
      sub_10060B65C(a1, a2);
      break;
    case 5:
      v9 = qword_1009999D0;
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v13 = 0;
        v10 = "Service Negotiation received";
LABEL_17:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, v13, 2u);
      }
      break;
    case 6:
      v12 = qword_1009999D0;
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Setup Complete received", v13, 2u);
      }
      sub_10060C944(a1, a2, (uint64_t)&v14);
      break;
    case 7:
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
        sub_100710A48();
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
        sub_1007109E8();
      break;
  }
  *((_QWORD *)&v14 + 1) = &off_100918258;
  if ((_QWORD)v15)
    sub_100056AAC((unsigned int *)v15);
  v16 = &off_100918258;
  if (v17)
    sub_100056AAC(v17);
}

void sub_10060F044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13, uint64_t a14, uint64_t a15, unsigned int *a16)
{
  if (a13)
    sub_100056AAC(a13);
  if (a16)
    sub_100056AAC(a16);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10060F090(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, char a5, uint64_t a6)
{
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  NSObject *v17;
  _BYTE *v18;
  int v19;
  unsigned int v20;
  NSObject *v21;
  int v22;
  NSObject *v23;
  int v24;
  NSObject *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  NSObject *v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  NSObject *v43;
  void **v44;
  __int16 v45;
  NSObject *v46;
  unsigned __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  int *v52;
  int *v53;
  uint64_t *v54;
  int v55;
  __int16 v56;
  __int16 v57;
  int v58;
  uint64_t v59;
  int v60;
  char v61;
  unint64_t v62;
  int v63;
  void *__p[2];
  char v65;
  uint64_t v66;
  int v67;
  int v68;
  char v69;
  unsigned int v70;
  unsigned __int16 v71;
  char v72;
  unsigned int v73;
  unsigned __int16 v74;
  int *v75;
  _BYTE buf[14];
  _BYTE v77[6];
  _DWORD v78[3];
  _BYTE v79[12];
  char v80;

  v75 = 0;
  v74 = 0;
  v73 = 0;
  v72 = 0;
  sub_100043758(&v72);
  if (sub_100182620(a6, (uint64_t)&v73))
  {
    v12 = qword_1009999D0;
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_100710CE0(a6, v12, v13);
    return sub_100043728(&v72);
  }
  sub_10004339C(&v72);
  v70 = v73;
  v71 = v74;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093D208);
  v14 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v70, 1);
  if (sub_100608214(a1, (uint64_t)&v73))
  {
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
    {
      sub_10043F6EC(v14, (uint64_t)buf);
      sub_100710C90();
    }
    return sub_100043728(&v72);
  }
  v15 = *(_DWORD *)(a1 + 664);
  if (*(_BYTE *)(v14 + 968))
  {
    v16 = qword_1009999D0;
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Wireless Splitter guest device removing HFP and GATT profiles from support", buf, 2u);
    }
    v15 &= 0xFFEFFFFE;
  }
  if (a4 < 0x18)
  {
LABEL_46:
    sub_10006D81C(&v72);
    sub_1001FF230("d", 9u, 0, (_BYTE *)a6, a5, v34, v35, v36, 0);
    sub_10004339C(&v72);
    return sub_100043728(&v72);
  }
  v17 = qword_1009999D0;
  if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(v14, (uint64_t)buf);
    v18 = v78[0] >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v79 = 136315138;
    *(_QWORD *)&v79[4] = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Received Echo Request from %s", v79, 0xCu);
    if (SHIBYTE(v78[0]) < 0)
      operator delete(*(void **)buf);
  }
  sub_10006D81C(&v72);
  if (!a2 || a3 < 0xA)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/FastConnectManager.mm");
  v19 = *(unsigned __int8 *)(a2 + 6);
  if (v19 != 1 || *(int *)(a6 + 148) > 2)
  {
    sub_10004339C(&v72);
    v33 = qword_1009999D0;
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
    {
      sub_10043F6EC(v14, (uint64_t)v79);
      v38 = v80 >= 0 ? v79 : *(_BYTE **)v79;
      v39 = *(_DWORD *)(a6 + 148);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v38;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)v77 = v19;
      *(_WORD *)&v77[4] = 1024;
      v78[0] = v39;
      _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Echo Request failed for device %s cmd:%d refCount:%d", buf, 0x18u);
      if (v80 < 0)
        operator delete(*(void **)v79);
    }
    goto LABEL_46;
  }
  v61 = *(_BYTE *)(a2 + 7);
  v20 = *(unsigned __int16 *)(a2 + 8);
  v69 = 0;
  v63 = sub_10024B810(a6, &v69);
  v21 = qword_1009999D0;
  if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v63;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "parseFastConnectEchoReq isPaired %d", buf, 8u);
  }
  if (!v63)
  {
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_100710C64();
    v60 = 0;
    LOBYTE(v62) = 0;
    v32 = 4502;
    goto LABEL_83;
  }
  if (a3 < 0x12)
    goto LABEL_111;
  if (a3 <= 0x19)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/FastConnectManager.mm");
  v56 = *(_WORD *)(a2 + 12);
  v57 = *(_WORD *)(a2 + 10);
  v22 = *(_DWORD *)(a2 + 14);
  v62 = *(_QWORD *)(a2 + 18);
  v23 = qword_1009999D0;
  if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v20;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "parseFastConnectEchoReq remote version %d", buf, 8u);
  }
  v60 = v22;
  if (v20 >= 2)
  {
    if (a3 >= 0x24)
    {
      v58 = *(_DWORD *)(a2 + 26);
      v24 = *(_DWORD *)(a2 + 30);
      v25 = qword_1009999D0;
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v58;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v24;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "remoteAppleSupportedFeatures %x remoteSdpServiceDataBaseState %x", buf, 0xEu);
      }
      v55 = v24;
      v67 = 0;
      v68 = 0;
      sub_10060FF5C((int *)&v73, &v68, &v67);
      v26 = qword_1009999D0;
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v68;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v67;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "parseFastConnectEchoReq deviceAppleSupportedFeatures %x deviceSdpServiceDataBaseState %x", buf, 0xEu);
      }
      v30 = v68;
      if (v68 != v58)
      {
        v31 = qword_1009999D0;
        if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v30;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v58;
          _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "parseFastConnectEchoReq DID expected %x received %x", buf, 0xEu);
          v31 = qword_1009999D0;
        }
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          sub_10043F6EC(v14, (uint64_t)v79);
          sub_100710C1C();
        }
        sub_100445F58(v14, v58, 0);
      }
      if (v67 == v55)
      {
        v32 = 4500;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
          sub_100710BBC();
        if (((v62 >> 4) & 1 & (*(unsigned __int8 *)(a1 + 672) >> 4)) != 0)
          v32 = 4515;
        else
          v32 = 4504;
      }
      if (v20 >= 3)
      {
        v66 = 0;
        if (a3 < 0x2C)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/FastConnectManager.mm");
        v40 = *(unsigned int *)(a2 + 40);
        v59 = *(unsigned int *)(a2 + 36);
        sub_10061008C((int *)&v73, &v66);
        v41 = v66;
        v42 = HIDWORD(v66);
        if (__PAIR64__(v66, HIDWORD(v66)) != __PAIR64__(v40, v59))
        {
          v43 = qword_1009999D0;
          if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109888;
            *(_DWORD *)&buf[4] = v41;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v42;
            *(_WORD *)v77 = 1024;
            *(_DWORD *)&v77[2] = v40;
            LOWORD(v78[0]) = 1024;
            *(_DWORD *)((char *)v78 + 2) = v59;
            _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Supported Extended Features expected: 0x%x 0x%x, Received: 0x%x 0x%x", buf, 0x1Au);
            v43 = qword_1009999D0;
          }
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043F6EC(v14, (uint64_t)__p);
            v44 = v65 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v44;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)v77 = v40;
            *(_WORD *)&v77[4] = 1024;
            v78[0] = v59;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Updating Supported Extended Features for device %s to 0x%x 0x%x", buf, 0x18u);
            if (v65 < 0)
              operator delete(__p[0]);
          }
          sub_100446234(v14, v40 | (v59 << 32), 0);
        }
      }
      if ((v62 & 1) == 0)
      {
        if ((_DWORD)v32 == 4500)
          goto LABEL_77;
LABEL_83:
        byte_100999AAA = 7;
        byte_100999AAB = v61;
        word_100999AAC = *(_WORD *)(a1 + 680);
        byte_100999AAE = v32;
        byte_100999AAF = 17;
        goto LABEL_84;
      }
LABEL_80:
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
        sub_100710B90();
      v32 = 4507;
      goto LABEL_83;
    }
LABEL_111:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/FastConnectManager.mm");
  }
  if ((v62 & 1) != 0)
    goto LABEL_80;
LABEL_77:
  if (sub_1001DC04C(2u, (uint64_t *)&v75, 0))
  {
    sub_10004339C(&v72);
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_100710B30();
    return sub_100043728(&v72);
  }
  *(_WORD *)(sub_1001E3CCC(v75) + 8) = v57;
  *(_WORD *)(sub_1001E3CCC(v75) + 32) = v56;
  if ((v62 & 4) != 0)
    sub_1002297E4((uint64_t)&v73);
  byte_100999AAA = 2;
  byte_100999AAB = v61;
  word_100999AAC = *(_WORD *)(a1 + 680);
  v46 = qword_1009999D0;
  if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEBUG))
  {
    v47 = *((_WORD *)v75 + 2);
    v48 = sub_1001E3CCC(v75);
    sub_100710AD4(v47, v48, buf, v46);
  }
  byte_100999AAE = *((_BYTE *)v75 + 4);
  byte_100999AAF = *((_BYTE *)v75 + 5);
  byte_100999AB0 = *(_BYTE *)(sub_1001E3CCC(v75) + 36);
  byte_100999AB1 = *(_BYTE *)(sub_1001E3CCC(v75) + 37);
  dword_100999AB2 = v15;
  unk_100999AB6 = *(_QWORD *)(a1 + 672);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093D1E8);
  byte_100999ABE = sub_1004A5E90((uint64_t)off_100977A50);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093D1E8);
  byte_100999ABF = (unsigned __int16)sub_1004A5E90((uint64_t)off_100977A50) >> 8;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093D1E8);
  byte_100999AC0 = sub_1004A5E90((uint64_t)off_100977A50) >> 16;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093D1E8);
  byte_100999AC1 = sub_1004A5E90((uint64_t)off_100977A50) >> 24;
  byte_100999AC2 = sub_1002468C0();
  byte_100999AC3 = (unsigned __int16)sub_1002468C0() >> 8;
  byte_100999AC4 = sub_1002468C0() >> 16;
  byte_100999AC5 = sub_1002468C0() >> 24;
  *(_WORD *)algn_100999AC6 = 0;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093D1E8);
  v49 = sub_1004A5E98((uint64_t)off_100977A50);
  byte_100999AC8 = BYTE4(v49);
  byte_100999AC9 = BYTE5(v49);
  byte_100999ACA = BYTE6(v49);
  byte_100999ACB = HIBYTE(v49);
  word_100999ACC = v49;
  byte_100999ACE = BYTE2(v49);
  byte_100999ACF = BYTE3(v49);
  sub_10018007C(a6);
  v50 = sub_1001E3CCC(v75);
  *(_DWORD *)(v50 + 10) = v73;
  *(_WORD *)(v50 + 14) = v74;
  *(_QWORD *)sub_1001E3CCC(v75) = a6;
  *(_BYTE *)(sub_1001E3CCC(v75) + 25) = 0;
  *(_BYTE *)(sub_1001E3CCC(v75) + 16) = 4;
  *(_BYTE *)(sub_1001E3CCC(v75) + 28) = 0;
  v51 = (uint64_t *)sub_1001E3CCC(v75);
  sub_1001F37D8(*v51);
  v52 = v75;
  v75[19] = -1;
  if (sub_1001F0E30(*((unsigned __int16 *)v52 + 2), 4, 5u, 0, (uint64_t *)v52 + 12, 0xFFFFFFFF))
  {
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_100710A74();
    sub_1001DC658((uint64_t)v75);
    return sub_100043728(&v72);
  }
  *(_QWORD *)(sub_1001E3CCC(v75) + 88) = sub_1006090C8;
  v53 = v75;
  *((_QWORD *)v75 + 4) = sub_100609134;
  *(_WORD *)(sub_1001E3CCC(v53) + 40) = 5000;
  v54 = (uint64_t *)sub_1001E3CCC(v75);
  sub_1001DCD0C(*v54);
  v32 = 0;
LABEL_84:
  sub_1001FF230("d", 9u, 0, (_BYTE *)a6, a5, v27, v28, v29, (uint64_t)&byte_100999AAA);
  sub_10004339C(&v72);
  if (v63)
  {
    if (v75)
      v45 = *((_WORD *)v75 + 2);
    else
      v45 = 0;
    sub_10060DFB4(a1, v45, v62, v60, 0, v32, 1, v73 | ((unint64_t)v74 << 32));
  }
  return sub_100043728(&v72);
}

void sub_10060FF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_100043728(&a27);
  _Unwind_Resume(a1);
}

void sub_10060FF5C(int *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *__p;
  void *v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  __int16 v13;

  v12 = *a1;
  v13 = *((_WORD *)a1 + 2);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093D208);
  v5 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v12, 1);
  if (v5)
  {
    v6 = v5;
    sub_1004466D8(v5, a2);
    v11 = xmmword_100741730;
    __p = 0;
    v9 = 0;
    v10 = 0;
    if (sub_1004442A0(v6, (uint64_t)&v11, 0x201u, &__p))
    {
      v7 = __p;
      if (*(_BYTE *)__p == 1)
        *a3 = *((_DWORD *)__p + 2);
    }
    else
    {
      *a3 = 0;
      v7 = __p;
      if (!__p)
        return;
    }
    v9 = v7;
    operator delete(v7);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
  {
    sub_100710D48();
  }
}

void sub_100610070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10061008C(int *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  __int16 v5;

  v4 = *a1;
  v5 = *((_WORD *)a1 + 2);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093D208);
  v3 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v4, 1);
  if (v3)
  {
    sub_100446790(v3, a2);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
  {
    sub_100710D74();
  }
}

_BYTE *sub_100610134(uint64_t a1, int *a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, unsigned int a7, uint64_t a8)
{
  uint64_t v14;
  int v15;
  NSObject *v16;
  void **v17;
  int v18;
  NSObject *v19;
  NSObject *v20;
  unsigned int v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  int v27;
  uint64_t v28;
  NSObject *v29;
  NSObject *v30;
  int v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  NSObject *v37;
  void **v38;
  NSObject *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int *v47;
  uint64_t *v48;
  uint64_t *v49;
  __int16 v50;
  int v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  void *v56[2];
  char v57;
  uint64_t v58;
  uint64_t v59;
  void *__p[2];
  char v61;
  int *v62;
  char v63;
  int v64;
  __int16 v65;
  uint8_t buf[4];
  _BYTE v67[10];
  _BYTE v68[6];
  _BYTE v69[6];
  __int16 v70;
  int v71;

  v64 = *a2;
  v65 = *((_WORD *)a2 + 2);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093D208);
  v14 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v64, 1);
  v63 = 0;
  sub_100043758(&v63);
  v62 = 0;
  v15 = sub_1001DB044(a3, (uint64_t *)&v62);
  if (v15 || !v62 || !sub_1001E3CCC(v62))
  {
    v20 = qword_1009999D0;
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_100710DA0((uint64_t *)&v62, v15, v20);
    goto LABEL_22;
  }
  v16 = qword_1009999D0;
  if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(v14, (uint64_t)__p);
    v17 = v61 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)v67 = v17;
    *(_WORD *)&v67[8] = 1024;
    *(_DWORD *)v68 = a7;
    *(_WORD *)&v68[4] = 1024;
    *(_DWORD *)v69 = a8;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "fastConnectEchoRspEvent for device %s of length %d with result %d", buf, 0x18u);
    if (v61 < 0)
      operator delete(__p[0]);
  }
  if (a7 >= 0x18)
  {
    v18 = *a6;
    if (v18 != 2)
    {
      if (v18 == 7)
      {
        a8 = *((unsigned __int16 *)a6 + 2);
        v19 = qword_1009999D0;
        if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v67 = a8;
          _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "fastConnectEchoRspEvent with errorCode %d", buf, 8u);
        }
      }
      goto LABEL_17;
    }
    v54 = sub_10019AEA4((uint64_t)a2);
    v22 = *((unsigned __int16 *)a6 + 1);
    v23 = a6[4];
    v24 = a6[5];
    *(_WORD *)(sub_1001E3CCC(v62) + 8) = v23 | (v24 << 8);
    v25 = a6[6];
    v26 = a6[7];
    *(_WORD *)(sub_1001E3CCC(v62) + 32) = v25 | (v26 << 8);
    v27 = *((_DWORD *)a6 + 2);
    v28 = *(_QWORD *)(a6 + 12);
    if (v22 >= 2)
    {
      if (a7 < 0x1C || (v51 = *((_DWORD *)a6 + 2), a7 <= 0x1D))
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/FastConnectManager.mm");
      v52 = *(_QWORD *)(a6 + 12);
      v55 = *((_DWORD *)a6 + 5);
      v53 = *((_DWORD *)a6 + 6);
      v29 = qword_1009999D0;
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v67 = v55;
        *(_WORD *)&v67[4] = 1024;
        *(_DWORD *)&v67[6] = v53;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "remoteAppleSupportedFeatures %x remoteSdpServiceDataBaseState %x", buf, 0xEu);
      }
      v59 = 0;
      sub_10060FF5C(a2, (_DWORD *)&v59 + 1, &v59);
      v30 = qword_1009999D0;
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v67 = HIDWORD(v59);
        *(_WORD *)&v67[4] = 1024;
        *(_DWORD *)&v67[6] = v59;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "deviceAppleSupportedFeatures %x deviceSdpServiceDataBaseState %x", buf, 0xEu);
      }
      v31 = HIDWORD(v59);
      if (HIDWORD(v59) != v55)
      {
        v32 = qword_1009999D0;
        if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)v67 = v31;
          *(_WORD *)&v67[4] = 1024;
          *(_DWORD *)&v67[6] = v55;
          _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "DID expected %x received %x", buf, 0xEu);
          v32 = qword_1009999D0;
        }
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          sub_10043F6EC(v14, (uint64_t)__p);
          sub_100710C1C();
        }
        sub_100445F58(v14, v55, 0);
      }
      LOBYTE(v28) = v52;
      if ((_DWORD)v59 != v53)
      {
        if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
          sub_100710EDC();
        if (((v52 >> 4) & 1 & (*(unsigned __int8 *)(a1 + 672) >> 4)) != 0)
          a8 = 4515;
        else
          a8 = 4504;
      }
      if (v22 >= 3)
      {
        v58 = 0;
        if (a7 < 0x26)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/FastConnectManager.mm");
        v33 = *(unsigned int *)(a6 + 30);
        v34 = *(unsigned int *)(a6 + 34);
        sub_10061008C(a2, &v58);
        v36 = v58;
        v35 = HIDWORD(v58);
        if (__PAIR64__(v58, HIDWORD(v58)) != __PAIR64__(v34, v33))
        {
          v37 = qword_1009999D0;
          if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109888;
            *(_DWORD *)v67 = v36;
            *(_WORD *)&v67[4] = 1024;
            *(_DWORD *)&v67[6] = v35;
            *(_WORD *)v68 = 1024;
            *(_DWORD *)&v68[2] = v34;
            *(_WORD *)v69 = 1024;
            *(_DWORD *)&v69[2] = v33;
            _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Supported Extended Features expected: 0x%x 0x%x, Received: 0x%x 0x%x", buf, 0x1Au);
            v37 = qword_1009999D0;
          }
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043F6EC(v14, (uint64_t)v56);
            v38 = v57 >= 0 ? v56 : (void **)v56[0];
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)v67 = v38;
            *(_WORD *)&v67[8] = 1024;
            *(_DWORD *)v68 = v34;
            *(_WORD *)&v68[4] = 1024;
            *(_DWORD *)v69 = v33;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Updating Supported Extended Features for device %s to 0x%x 0x%x", buf, 0x18u);
            if (v57 < 0)
              operator delete(v56[0]);
          }
          sub_100446234(v14, v34 | (v33 << 32), 0);
        }
        LOBYTE(v28) = v52;
      }
      v27 = v51;
    }
    if ((v28 & 1) != 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
        sub_100710B90();
      a8 = 4507;
    }
    else if (!(_DWORD)a8)
    {
      v39 = qword_1009999D0;
      if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
      {
        v40 = v27;
        v41 = *(unsigned __int16 *)(sub_1001E3CCC(v62) + 8);
        v42 = *((unsigned __int16 *)v62 + 2);
        v43 = *(unsigned __int16 *)(sub_1001E3CCC(v62) + 32);
        v44 = *(unsigned __int16 *)(sub_1001E3CCC(v62) + 36);
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)v67 = v41;
        *(_WORD *)&v67[4] = 1024;
        *(_DWORD *)&v67[6] = v42;
        *(_WORD *)v68 = 1024;
        *(_DWORD *)&v68[2] = v43;
        *(_WORD *)v69 = 1024;
        *(_DWORD *)&v69[2] = v44;
        v70 = 1024;
        v27 = v40;
        v71 = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "fastConnectEchoRspEvent CID sizes Remote %d, Local %d, Remote MTU %d, local %d, supported profiles %d", buf, 0x20u);
      }
      sub_10018007C(v54);
      v45 = sub_1001E3CCC(v62);
      v46 = *(_DWORD *)(v54 + 48);
      *(_WORD *)(v45 + 14) = *(_WORD *)(v54 + 52);
      *(_DWORD *)(v45 + 10) = v46;
      *(_QWORD *)sub_1001E3CCC(v62) = v54;
      *(_BYTE *)(sub_1001E3CCC(v62) + 25) = 0;
      *(_BYTE *)(sub_1001E3CCC(v62) + 28) = 0;
      if ((v28 & 4) != 0)
        sub_1002297E4((uint64_t)a2);
      *(_BYTE *)(sub_1001E3CCC(v62) + 16) = 4;
      v47 = v62;
      v62[19] = -1;
      a8 = sub_1001F0E30(*((unsigned __int16 *)v47 + 2), 4, 5u, 0, (uint64_t *)v47 + 12, 0xFFFFFFFF);
      v48 = (uint64_t *)sub_1001E3CCC(v62);
      sub_1001F37D8(*v48);
      *(_WORD *)(sub_1001E3CCC(v62) + 40) = 5000;
      v49 = (uint64_t *)sub_1001E3CCC(v62);
      sub_1001DCD0C(*v49);
      if (!(_DWORD)a8)
      {
        sub_10004339C(&v63);
        a8 = 0;
        v50 = *((_WORD *)v62 + 2);
LABEL_71:
        sub_10060DFB4(a1, v50, v28, v27, 0, a8, 0, *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32));
        return sub_100043728(&v63);
      }
    }
    sub_1001DC658((uint64_t)v62);
    sub_10004339C(&v63);
    if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
      sub_100710E7C();
    v50 = 0;
    LOBYTE(v28) = 0;
    v27 = 0;
    goto LABEL_71;
  }
LABEL_17:
  if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_ERROR))
    sub_100710E1C();
  sub_1001DC658((uint64_t)v62);
  sub_10004339C(&v63);
LABEL_22:
  sub_10060DFB4(a1, 0, 0, 0, 0, a8, 0, *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32));
  return sub_100043728(&v63);
}

void sub_1006109BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_100043728(&a26);
  _Unwind_Resume(a1);
}

void sub_1006109F8(uint64_t a1, void **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v3 = 0;
  v4 = a1 + 16;
  v5 = (uint64_t)(a2 + 2);
  do
  {
    v6 = (uint64_t *)(v4 + 208 * v3);
    if (*((_DWORD *)v6 + 4))
    {
      v7 = *v6;
      if (*v6)
      {
        v9 = a2[1];
        v8 = (unint64_t)a2[2];
        if ((unint64_t)v9 >= v8)
        {
          v11 = ((char *)v9 - (_BYTE *)*a2) >> 3;
          if ((unint64_t)(v11 + 1) >> 61)
            abort();
          v12 = v8 - (_QWORD)*a2;
          v13 = v12 >> 2;
          if (v12 >> 2 <= (unint64_t)(v11 + 1))
            v13 = v11 + 1;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v13;
          if (v14)
          {
            v15 = (char *)sub_10007ABA0(v5, v14);
            v7 = *v6;
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[8 * v11];
          *(_QWORD *)v16 = v7;
          v10 = v16 + 8;
          v18 = (char *)*a2;
          v17 = (char *)a2[1];
          if (v17 != *a2)
          {
            do
            {
              v19 = *((_QWORD *)v17 - 1);
              v17 -= 8;
              *((_QWORD *)v16 - 1) = v19;
              v16 -= 8;
            }
            while (v17 != v18);
            v17 = (char *)*a2;
          }
          *a2 = v16;
          a2[1] = v10;
          a2[2] = &v15[8 * v14];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *v9 = v7;
          v10 = v9 + 1;
        }
        a2[1] = v10;
      }
    }
    ++v3;
  }
  while (v3 != 3);
}

void sub_100610B14()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_1009999D0;
  if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "stackDidStart", v1, 2u);
  }
}

void sub_100610B78()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_1009999D0;
  if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "stackWillStop", v1, 2u);
  }
}

void sub_100610BDC(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_1009999D0;
  if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "stackDidStop", v3, 2u);
  }
  sub_1006083F4(a1);
}

uint64_t sub_100610C4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  NSObject *v8;
  void **v9;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  void **v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;

  v8 = qword_1009999D0;
  if (os_log_type_enabled((os_log_t)qword_1009999D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(a2, (uint64_t)__p);
    if (v12 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    v14 = v9;
    v15 = 1024;
    v16 = a3;
    v17 = 1024;
    v18 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "aclDisconnected for %s with result %d and reason %d", buf, 0x18u);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  return sub_1006085F0(a1, a2 + 128, a4);
}

uint64_t sub_100610D5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100610C4C(a1 - 8, a2, a3, a4);
}

void sub_100610D70()
{
  operator delete();
}

void sub_100610D84(uint64_t a1)
{
  if (qword_10097AB58 != -1)
    dispatch_once(&qword_10097AB58, &stru_10093D2C8);
  sub_10060DBC4((uint64_t)off_10097AB50, *(unsigned int *)(a1 + 12), *(_DWORD *)(a1 + 16));
}

_QWORD *sub_100610DD4(_QWORD *result)
{
  *result = off_10093D118;
  if (result[2])
    operator delete[]();
  return result;
}

void sub_100610E1C(_QWORD *a1)
{
  *a1 = off_10093D118;
  if (a1[2])
    operator delete[]();
  operator delete();
}

_BYTE *sub_100610E74(uint64_t a1)
{
  if (qword_10097AB58 != -1)
    dispatch_once(&qword_10097AB58, &stru_10093D2C8);
  return sub_10060F090((uint64_t)off_10097AB50, *(_QWORD *)(a1 + 16), *(unsigned __int16 *)(a1 + 24), *(unsigned __int16 *)(a1 + 26), *(_BYTE *)(a1 + 28), *(_QWORD *)(a1 + 32));
}

void sub_100610ED8(_QWORD *a1)
{
  sub_100610F60(a1);
  operator delete();
}

_BYTE *sub_100610EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_10097AB58 != -1)
    dispatch_once(&qword_10097AB58, &stru_10093D2C8);
  return sub_100610134((uint64_t)off_10097AB50, (int *)(a1 + 10), *(_QWORD *)(a1 + 16), a4, 0, *(unsigned __int8 **)(a1 + 40), *(unsigned __int16 *)(a1 + 48), *(unsigned int *)(a1 + 52));
}

_QWORD *sub_100610F60(_QWORD *result)
{
  *result = off_10093D150;
  if (result[3])
    operator delete[]();
  if (result[5])
    operator delete[]();
  return result;
}

void sub_100610FC8()
{
  operator delete();
}

void sub_100610FDC(uint64_t a1)
{
  if (qword_10097AB58 != -1)
    dispatch_once(&qword_10097AB58, &stru_10093D2C8);
  sub_10060EC68((uint64_t)off_10097AB50, *(unsigned __int16 *)(a1 + 10), *(unsigned int *)(a1 + 12));
}

_QWORD *sub_100611030(_QWORD *result)
{
  *result = &off_10093D1C0;
  if (result[2])
    operator delete[]();
  return result;
}

void sub_100611078(_QWORD *a1)
{
  *a1 = &off_10093D1C0;
  if (a1[2])
    operator delete[]();
  operator delete();
}

void sub_1006110D0(uint64_t a1)
{
  if (qword_10097AB58 != -1)
    dispatch_once(&qword_10097AB58, &stru_10093D2C8);
  sub_10060EDBC((uint64_t)off_10097AB50, *(unsigned __int16 *)(a1 + 10), *(const void **)(a1 + 16), *(unsigned __int16 *)(a1 + 12));
}

void sub_100611128(id a1)
{
  operator new();
}

void sub_100611168()
{
  operator delete();
}

void sub_10061118C(id a1)
{
  operator new();
}

void sub_1006111CC()
{
  operator delete();
}

void sub_1006111F0(id a1)
{
  operator new();
}

void sub_100611230()
{
  operator delete();
}

void sub_100611254(id a1)
{
  operator new();
}

void sub_100611294()
{
  operator delete();
}

void sub_1006112B8(id a1)
{
  operator new();
}

void sub_1006112F8()
{
  operator delete();
}

void sub_10061131C(id a1)
{
  operator new();
}

void sub_10061135C()
{
  operator delete();
}

void sub_100611380(id a1)
{
  operator new();
}

void sub_1006113C0()
{
  operator delete();
}

void sub_1006113E4(id a1)
{
  operator new();
}

void sub_100611424()
{
  operator delete();
}

void sub_100611448(id a1)
{
  operator new();
}

void sub_100611488()
{
  operator delete();
}

void sub_1006114AC(id a1)
{
  operator new();
}

void sub_1006114EC()
{
  operator delete();
}

void sub_100611510(id a1)
{
  operator new();
}

void sub_100611550()
{
  operator delete();
}

void sub_100611574(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

uint64_t sub_100611580(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  int v24;
  int v25;
  NSObject *v26;
  uint64_t v27;
  int v28;
  int v29;
  NSObject *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  int v53;
  NSObject *v54;
  uint64_t v55;
  int v56;
  NSObject *v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  NSObject *v62;
  uint64_t v63;
  int v64;
  int v65;
  NSObject *v66;
  uint64_t v67;
  _BYTE *v68;
  int v69;
  NSObject *v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  NSObject *v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  NSObject *v80;
  uint64_t v81;
  int v82;
  char v83;
  NSObject *v84;
  uint64_t v85;
  int v86;
  char v87;
  NSObject *v88;
  uint64_t v89;
  int v90;
  NSObject *v91;
  uint64_t v92;
  int v93;
  unsigned __int16 v94;
  NSObject *v95;
  uint64_t v96;
  int v97;
  unsigned __int16 v98;
  NSObject *v99;
  uint64_t v100;
  int v101;
  int v102;
  NSObject *v103;
  uint64_t v104;
  int v105;
  int v106;
  NSObject *v107;
  uint64_t v108;
  int v109;
  char v110;
  NSObject *v111;
  uint64_t v112;
  int v113;
  char v114;
  NSObject *v115;
  uint64_t v116;
  int v117;
  char v118;
  NSObject *v119;
  uint64_t v120;
  int v121;
  char v122;
  NSObject *v123;
  uint64_t v124;
  int v125;
  char v126;
  NSObject *v127;
  uint64_t v128;
  int v129;
  NSObject *v130;
  int v131;
  uint64_t v132;
  int v133;
  char v134;
  NSObject *v135;
  uint64_t v136;
  int v137;
  char v138;
  NSObject *v139;
  uint64_t v140;
  int v141;
  int v142;
  NSObject *v143;
  uint64_t v144;
  int v145;
  int v146;
  int v147;
  NSObject *v148;
  uint64_t v149;
  int v150;
  int v151;
  int v152;
  NSObject *v153;
  uint64_t v154;
  int v155;
  int v156;
  int v157;
  NSObject *v158;
  CMMotionActivityManager *v159;
  void *v160;
  NSOperationQueue *v161;
  void *v162;
  int v164;
  NSObject *v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  void *__p[2];
  char v175;
  int v176;
  std::string v177;
  _BYTE buf[12];
  char v179;

  *(_QWORD *)a1 = &off_10093DCA0;
  *(_QWORD *)(a1 + 8) = &off_10093DCD0;
  *(_QWORD *)(a1 + 16) = &off_10093DCE8;
  *(_QWORD *)(a1 + 24) = &off_10093DD18;
  sub_100091AE8(&v177, "LeConnectionManager");
  sub_1004AF368((_QWORD *)(a1 + 32), &v177);
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v177.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_10093D420;
  *(_QWORD *)(a1 + 8) = &off_10093D4B0;
  *(_QWORD *)(a1 + 16) = off_10093D4C8;
  *(_QWORD *)(a1 + 24) = off_10093D4F8;
  *(_QWORD *)(a1 + 32) = &off_10093D548;
  *(_QWORD *)(a1 + 88) = off_10093D560;
  *(_QWORD *)(a1 + 96) = off_10093D580;
  sub_1000160D0(a1 + 120);
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 336;
  *(_QWORD *)(a1 + 352) = a1 + 360;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_QWORD *)(a1 + 376) = a1 + 384;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 400) = a1 + 408;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_QWORD *)(a1 + 424) = a1 + 432;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_QWORD *)(a1 + 448) = a1 + 456;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_QWORD *)(a1 + 472) = a1 + 480;
  *(_QWORD *)(a1 + 496) = a1 + 504;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_QWORD *)(a1 + 520) = a1 + 528;
  *(_QWORD *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_QWORD *)(a1 + 600) = a1 + 608;
  *(_BYTE *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 632) = a1 + 640;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_QWORD *)(a1 + 656) = a1 + 664;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_QWORD *)(a1 + 680) = a1 + 688;
  *(_QWORD *)(a1 + 704) = a1 + 712;
  *(_BYTE *)(a1 + 728) = -127;
  v2 = (void **)(a1 + 736);
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_QWORD *)(a1 + 784) = 0;
  *(_QWORD *)(a1 + 792) = a1 + 800;
  *(_QWORD *)(a1 + 816) = 0;
  *(_BYTE *)(a1 + 824) = 0;
  *(_DWORD *)(a1 + 826) = 30;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_QWORD *)(a1 + 832) = a1 + 840;
  *(_DWORD *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_QWORD *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 944) = 0;
  *(_DWORD *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_QWORD *)(a1 + 928) = a1 + 936;
  sub_1002A90C4((pthread_cond_t *)(a1 + 952));
  *(_BYTE *)(a1 + 1000) = 1;
  sub_1002A90C4((pthread_cond_t *)(a1 + 1008));
  *(_BYTE *)(a1 + 1056) = 1;
  *(_BYTE *)(a1 + 1059) = 0;
  *(_OWORD *)(a1 + 1072) = xmmword_100742EF0;
  *(_QWORD *)(a1 + 1088) = 0xE10025801F407D0;
  *(_DWORD *)(a1 + 1096) = 786444;
  *(_WORD *)(a1 + 1100) = 3074;
  *(_BYTE *)(a1 + 1102) = 0;
  *(_DWORD *)(a1 + 1104) = 1572888;
  *(_DWORD *)(a1 + 1108) = 0x10000;
  *(_BYTE *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_QWORD *)(a1 + 1120) = a1 + 1128;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_QWORD *)(a1 + 1144) = a1 + 1152;
  *(_QWORD *)(a1 + 1168) = 0;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_QWORD *)(a1 + 1176) = a1 + 1184;
  *(_WORD *)(a1 + 1200) = 10;
  *(_DWORD *)(a1 + 1204) = 3600;
  *(_WORD *)(a1 + 1208) = 2;
  *(_DWORD *)(a1 + 1212) = 3600;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_QWORD *)(a1 + 1216) = a1 + 1224;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_QWORD *)(a1 + 1240) = a1 + 1248;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_QWORD *)(a1 + 1264) = a1 + 1272;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_QWORD *)(a1 + 1288) = a1 + 1296;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_QWORD *)(a1 + 1312) = a1 + 1320;
  *(_DWORD *)(a1 + 1336) = -1415142493;
  *(_WORD *)(a1 + 1340) = -24149;
  *(_BYTE *)(a1 + 1342) = -90;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_QWORD *)(a1 + 1344) = a1 + 1352;
  *(_DWORD *)(a1 + 1368) = 0;
  *(_BYTE *)(a1 + 1372) = 0;
  *(_WORD *)(a1 + 1374) = 2;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_QWORD *)(a1 + 1376) = a1 + 1384;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_QWORD *)(a1 + 1400) = a1 + 1408;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_QWORD *)(a1 + 1424) = a1 + 1432;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_QWORD *)(a1 + 1448) = a1 + 1456;
  *(_QWORD *)(a1 + 1472) = 0x7080000000ALL;
  *(_DWORD *)(a1 + 1480) = 10;
  *(_QWORD *)(a1 + 1488) = 0;
  *(_BYTE *)(a1 + 1496) = 0;
  *(_QWORD *)(a1 + 1516) = 0;
  *(_DWORD *)(a1 + 1524) = 0;
  *(_OWORD *)(a1 + 1500) = 0u;
  *(_BYTE *)(a1 + 1528) = 1;
  *(_QWORD *)(a1 + 1544) = 0;
  *(_QWORD *)(a1 + 1552) = 0;
  *(_QWORD *)(a1 + 1536) = a1 + 1544;
  *(_QWORD *)(a1 + 1560) = 0;
  *(_BYTE *)(a1 + 1568) = 0;
  v176 = 0;
  v3 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "MaxFilterAcceptListSize");
  v4 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v3 + 88))(v3, buf, __p, &v176);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v4)
      goto LABEL_15;
  }
  else if (!v4)
  {
    goto LABEL_15;
  }
  v5 = v176;
  v6 = qword_100999890;
  if (v176 < 2)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_10071124C();
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: Using override value (%d) for max number of devices in connection Filter Accept List", buf, 8u);
      LOBYTE(v5) = v176;
    }
    *(_BYTE *)(a1 + 824) = v5;
  }
LABEL_15:
  v7 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "DefaultConnectionInterval");
  v8 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v7 + 88))(v7, buf, __p, &v176);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v8)
      goto LABEL_27;
  }
  else if (!v8)
  {
    goto LABEL_27;
  }
  v9 = v176;
  v10 = qword_100999890;
  if ((v176 - 8) > 0x3E0)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_1007111EC();
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Warning: Using override value %d ms for default LE connection interval", buf, 8u);
      LOWORD(v9) = v176;
    }
    *(_WORD *)(a1 + 826) = v9;
  }
LABEL_27:
  v11 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "DataLength");
  v12 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v11 + 88))(v11, buf, __p, &v176);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v12)
      goto LABEL_39;
  }
  else if (!v12)
  {
    goto LABEL_39;
  }
  v13 = v176;
  v14 = qword_100999890;
  if (v176)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Warning: Using override value %d ms for LE data length", buf, 8u);
      LOWORD(v13) = v176;
    }
    *(_WORD *)(a1 + 828) = v13;
  }
  else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
  {
    sub_100711188();
  }
LABEL_39:
  v15 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "AllowAllConnectionParameterUpdates");
  v16 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v15 + 88))(v15, buf, __p, &v176);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v16)
      goto LABEL_52;
  }
  else if (!v16)
  {
    goto LABEL_52;
  }
  v17 = qword_100999890;
  if (v176)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Warning: Allow all connection parameters from remote request", buf, 2u);
      v18 = v176;
    }
    else
    {
      v18 = 1;
    }
    byte_100993EE8 = v18 != 0;
  }
  else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
  {
    sub_100711124();
  }
LABEL_52:
  *(_OWORD *)(a1 + 560) = xmmword_100742F00;
  *(_OWORD *)(a1 + 576) = xmmword_100742F10;
  *(_DWORD *)(a1 + 592) = 9000;
  *(_OWORD *)(a1 + 256) = xmmword_100742F20;
  *(_OWORD *)(a1 + 272) = xmmword_100742F30;
  v19 = sub_100027F68();
  sub_100091AE8(buf, "CoexConnectionScanParameters");
  sub_100091AE8(__p, "CoexConnectionScanTimeout");
  v20 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v19 + 88))(v19, buf, __p, &v176);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v20)
      goto LABEL_64;
  }
  else if (!v20)
  {
    goto LABEL_64;
  }
  v21 = v176;
  v22 = qword_100999890;
  if (v176)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Warning: Override fFastConnectionScanDurationMsCoexCarPlay=%dms", buf, 8u);
      v21 = v176;
    }
    *(_DWORD *)(a1 + 588) = v21;
    *(_DWORD *)(a1 + 592) = v21;
  }
  else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
  {
    sub_100711124();
  }
LABEL_64:
  v23 = sub_100027F68();
  sub_100091AE8(buf, "CoexConnectionScanParameters");
  sub_100091AE8(__p, "CoexConnectionScanIntervalWithAudio");
  v24 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v23 + 88))(v23, buf, __p, &v176);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v24)
      goto LABEL_76;
  }
  else if (!v24)
  {
    goto LABEL_76;
  }
  v25 = v176;
  v26 = qword_100999890;
  if (v176)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = (double)v25 * 0.625;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Warning: Override fFastConnectionScanIntervalMsCoexCarPlayWithAudio=%fms", buf, 0xCu);
      LOWORD(v25) = v176;
    }
    *(_WORD *)(a1 + 272) = v25;
  }
  else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
  {
    sub_1007110C0();
  }
LABEL_76:
  v27 = sub_100027F68();
  sub_100091AE8(buf, "CoexConnectionScanParameters");
  sub_100091AE8(__p, "CoexConnectionScanIntervalWithoutAudio");
  v28 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v27 + 88))(v27, buf, __p, &v176);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v28)
      goto LABEL_88;
  }
  else if (!v28)
  {
    goto LABEL_88;
  }
  v29 = v176;
  v30 = qword_100999890;
  if (v176)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&buf[4] = (double)v29 * 0.625;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Warning: Override fFastConnectionScanIntervalMsCoexCarPlayNoAudio=%fms", buf, 0xCu);
      LOWORD(v29) = v176;
    }
    *(_WORD *)(a1 + 270) = v29;
  }
  else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
  {
    sub_10071105C();
  }
LABEL_88:
  v31 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v32 = *v2;
  *v2 = (void *)v31;

  v33 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v34 = *(void **)(a1 + 744);
  *(_QWORD *)(a1 + 744) = v33;

  v35 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v36 = *(void **)(a1 + 752);
  *(_QWORD *)(a1 + 752) = v35;

  v37 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v38 = *(void **)(a1 + 760);
  *(_QWORD *)(a1 + 760) = v37;

  v39 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v40 = *(void **)(a1 + 768);
  *(_QWORD *)(a1 + 768) = v39;

  v41 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v42 = *(void **)(a1 + 776);
  *(_QWORD *)(a1 + 776) = v41;

  v43 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v44 = *(void **)(a1 + 784);
  *(_QWORD *)(a1 + 784) = v43;

  v45 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v46 = *(void **)(a1 + 816);
  *(_QWORD *)(a1 + 816) = v45;

  *(_BYTE *)(a1 + 1101) = 24;
  v47 = sub_1000438A4();
  *(_BYTE *)(a1 + 1100) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v47 + 3496))(v47, *(unsigned __int8 *)(a1 + 1101));
  v48 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48))
    sub_100613CCC(a1);
  v49 = *(void **)(a1 + 544);
  *(_QWORD *)(a1 + 544) = 0;

  *(_QWORD *)buf = 0;
  sub_10004AD30((uint64_t)buf);
  v50 = *(__int16 *)&buf[4];
  *(_QWORD *)(a1 + 864) = *(int *)buf;
  *(_QWORD *)(a1 + 872) = v50;
  *(_BYTE *)(a1 + 880) = 0;
  v173 = 0;
  *(_BYTE *)(a1 + 1060) = 0;
  *(_BYTE *)(a1 + 1066) = 0;
  *(_DWORD *)(a1 + 1062) = 0;
  v51 = sub_100027F68();
  sub_100091AE8(buf, "ScanCore");
  sub_100091AE8(__p, "IsScanCoreConnectionOverriden");
  v52 = (_BYTE *)(a1 + 1060);
  if ((*(unsigned int (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v51 + 72))(v51, buf, __p, a1 + 1060))
  {
    v53 = *v52;
    if (v175 < 0)
      operator delete(__p[0]);
    if (v179 < 0)
    {
      operator delete(*(void **)buf);
      if (!v53)
        goto LABEL_137;
    }
    else if (!v53)
    {
      goto LABEL_137;
    }
    v54 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Overriding Connection Scan Parameters on ScanCore.", buf, 2u);
    }
    v55 = sub_100027F68();
    sub_100091AE8(buf, "ScanCore");
    sub_100091AE8(__p, "IsScanCoreEnabledConnectionScan");
    if (!(*(unsigned int (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v55 + 72))(v55, buf, __p, a1 + 1066))
    {
      if (v175 < 0)
        operator delete(__p[0]);
      if (v179 < 0)
        operator delete(*(void **)buf);
      goto LABEL_134;
    }
    v56 = *(unsigned __int8 *)(a1 + 1066);
    if (v175 < 0)
      operator delete(__p[0]);
    if (v179 < 0)
    {
      operator delete(*(void **)buf);
      if (!v56)
        goto LABEL_134;
    }
    else if (!v56)
    {
LABEL_134:
      v66 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Overriding ScanCore Disabled for Connection Scan.", buf, 2u);
      }
LABEL_136:
      *(_DWORD *)(a1 + 1062) = 0;
      goto LABEL_137;
    }
    v57 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Overriding ScanCore Enabled for Connection Scan.", buf, 2u);
    }
    v58 = sub_100027F68();
    sub_100091AE8(buf, "ScanCore");
    sub_100091AE8(__p, "IntervalConnection");
    v59 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v58 + 88))(v58, buf, __p, &v173);
    if (v173)
      v60 = v59;
    else
      v60 = 0;
    if (v175 < 0)
      operator delete(__p[0]);
    if (v179 < 0)
      operator delete(*(void **)buf);
    if (v60)
    {
      v61 = v173;
      *(_WORD *)(a1 + 1064) = v173;
      v62 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v61;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Overriding ScanCore Connection Scan Interval %d.", buf, 8u);
      }
    }
    v63 = sub_100027F68();
    sub_100091AE8(buf, "ScanCore");
    sub_100091AE8(__p, "WindowConnection");
    v64 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v63 + 88))(v63, buf, __p, &v173);
    if (v173)
      v65 = v64;
    else
      v65 = 0;
    if (v175 < 0)
      operator delete(__p[0]);
    if (v179 < 0)
    {
      operator delete(*(void **)buf);
      if (!v65)
        goto LABEL_137;
    }
    else if (!v65)
    {
      goto LABEL_137;
    }
    v164 = v173;
    *(_WORD *)(a1 + 1062) = v173;
    v165 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v164;
      _os_log_impl((void *)&_mh_execute_header, v165, OS_LOG_TYPE_DEFAULT, "Overriding ScanCore Connection Scan Window %d.", buf, 8u);
      LOWORD(v164) = *(_WORD *)(a1 + 1062);
    }
    if (*(unsigned __int16 *)(a1 + 1064) < (unsigned __int16)v164)
    {
      *v52 = 0;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_100710FFC();
      goto LABEL_136;
    }
  }
  else
  {
    if (v175 < 0)
      operator delete(__p[0]);
    if (v179 < 0)
      operator delete(*(void **)buf);
  }
LABEL_137:
  v172 = 0;
  *(_BYTE *)(a1 + 1067) = 0;
  *(_DWORD *)(a1 + 1068) = 0;
  v67 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "IsConnectionScanOverriden");
  v68 = (_BYTE *)(a1 + 1067);
  if ((*(unsigned int (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v67 + 72))(v67, buf, __p, a1 + 1067))
  {
    v69 = *v68;
    if (v175 < 0)
      operator delete(__p[0]);
    if (v179 < 0)
    {
      operator delete(*(void **)buf);
      if (!v69)
        goto LABEL_174;
    }
    else if (!v69)
    {
      goto LABEL_174;
    }
    v70 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "Overriding Connection Scan Parameters on MainCore.", buf, 2u);
    }
    v71 = sub_100027F68();
    sub_100091AE8(buf, "LE");
    sub_100091AE8(__p, "ConnectionScanInterval");
    v72 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v71 + 88))(v71, buf, __p, &v172);
    if (v172)
      v73 = v72;
    else
      v73 = 0;
    if (v175 < 0)
      operator delete(__p[0]);
    if (v179 < 0)
      operator delete(*(void **)buf);
    if (v73)
    {
      v74 = v172;
      *(_WORD *)(a1 + 1070) = v172;
      v75 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v74;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "Overriding MainCore Connection Scan Interval %d.", buf, 8u);
      }
    }
    v76 = sub_100027F68();
    sub_100091AE8(buf, "LE");
    sub_100091AE8(__p, "ConnectionScanWindow");
    v77 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v76 + 88))(v76, buf, __p, &v172);
    if (v172)
      v78 = v77;
    else
      v78 = 0;
    if (v175 < 0)
      operator delete(__p[0]);
    if (v179 < 0)
      operator delete(*(void **)buf);
    if (v78)
    {
      v79 = v172;
      *(_WORD *)(a1 + 1068) = v172;
      v80 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v79;
        _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "Overriding MainCore Connection Scan Window %d.", buf, 8u);
      }
    }
    if (*(unsigned __int16 *)(a1 + 1068) > *(unsigned __int16 *)(a1 + 1070))
    {
      *v68 = 0;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_100710F9C();
      *(_DWORD *)(a1 + 1068) = 0;
    }
  }
  else
  {
    if (v175 < 0)
      operator delete(__p[0]);
    if (v179 < 0)
      operator delete(*(void **)buf);
  }
LABEL_174:
  v171 = 0;
  v81 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "MinRSSIConnection");
  v82 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v81 + 88))(v81, buf, __p, &v171);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v82)
      goto LABEL_182;
  }
  else if (!v82)
  {
    goto LABEL_182;
  }
  v83 = v171;
  *(_BYTE *)(a1 + 1109) = v171;
  v84 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v83;
    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "MinRSSIConnection %d overridden", buf, 8u);
  }
LABEL_182:
  v170 = 0;
  v85 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "GlobalMinRSSIConnection");
  v86 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v85 + 88))(v85, buf, __p, &v170);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v86)
      goto LABEL_190;
  }
  else if (!v86)
  {
    goto LABEL_190;
  }
  v87 = v170;
  *(_BYTE *)(a1 + 1112) = v170;
  v88 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v87;
    _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "GlobalMinRSSIConnection %d overridden", buf, 8u);
  }
LABEL_190:
  v89 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "MinRSSIConnectionEnabled");
  if ((*(unsigned int (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v89 + 72))(v89, buf, __p, a1 + 1110))
  {
    v90 = *(unsigned __int8 *)(a1 + 1110);
    if (v175 < 0)
      operator delete(__p[0]);
    if (v179 < 0)
      operator delete(*(void **)buf);
    if (v90)
    {
      v91 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "MinRSSIConnectionEnabled is enabled (overridden)", buf, 2u);
      }
    }
  }
  else
  {
    if (v175 < 0)
      operator delete(__p[0]);
    if (v179 < 0)
      operator delete(*(void **)buf);
  }
  v169 = 0;
  v92 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "NumDisconnectionsFromDisabledToStageOne");
  v93 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v92 + 88))(v92, buf, __p, &v169);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v93)
      goto LABEL_210;
  }
  else if (!v93)
  {
    goto LABEL_210;
  }
  v94 = (char)v169;
  *(_WORD *)(a1 + 1200) = (char)v169;
  v95 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v94;
    _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "NumDisconnectionsFromDisabledToStageOne %d overridden", buf, 8u);
  }
LABEL_210:
  v96 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "NumDisconnectionsFromStageOneToDisabled");
  v97 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v96 + 88))(v96, buf, __p, &v169);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v97)
      goto LABEL_218;
  }
  else if (!v97)
  {
    goto LABEL_218;
  }
  v98 = (char)v169;
  *(_WORD *)(a1 + 1208) = (char)v169;
  v99 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v98;
    _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "NumDisconnectionsFromStageOneToDisabled %d overridden", buf, 8u);
  }
LABEL_218:
  v168 = 0;
  v100 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "TimeDurationFromDisabledToStageOne");
  v101 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v100 + 88))(v100, buf, __p, &v168);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v101)
      goto LABEL_226;
  }
  else if (!v101)
  {
    goto LABEL_226;
  }
  v102 = v168;
  *(_DWORD *)(a1 + 1204) = v168;
  v103 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v102;
    _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "TimeDurationFromDisabledToStageOne %d overridden", buf, 8u);
  }
LABEL_226:
  v104 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "TimeDurationFromStageOneToDisabled");
  v105 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v104 + 88))(v104, buf, __p, &v168);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v105)
      goto LABEL_234;
  }
  else if (!v105)
  {
    goto LABEL_234;
  }
  v106 = v168;
  *(_DWORD *)(a1 + 1212) = v168;
  v107 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v106;
    _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "TimeDurationFromStageOneToDisabled %d overridden", buf, 8u);
  }
LABEL_234:
  v167 = -93;
  v108 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ConnRSSIStageOneFindMy");
  v109 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v108 + 88))(v108, buf, __p, &v167);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v109)
      goto LABEL_242;
  }
  else if (!v109)
  {
    goto LABEL_242;
  }
  v110 = v167;
  *(_BYTE *)(a1 + 1336) = v167;
  v111 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v110;
    _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "ConnRSSIStageOneFindMy %d overridden", buf, 8u);
  }
LABEL_242:
  v112 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ConnRSSIStageOneMagnet");
  v113 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v112 + 88))(v112, buf, __p, &v167);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v113)
      goto LABEL_250;
  }
  else if (!v113)
  {
    goto LABEL_250;
  }
  v114 = v167;
  *(_BYTE *)(a1 + 1337) = v167;
  v115 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v114;
    _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEFAULT, "ConnRSSIStageOneMagnet %d overridden", buf, 8u);
  }
LABEL_250:
  v116 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ConnRSSIStageOneExternal_Lock");
  v117 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v116 + 88))(v116, buf, __p, &v167);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v117)
      goto LABEL_258;
  }
  else if (!v117)
  {
    goto LABEL_258;
  }
  v118 = v167;
  *(_BYTE *)(a1 + 1338) = v167;
  v119 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v118;
    _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEFAULT, "ConnRSSIStageOneExternal_Lock %d overridden", buf, 8u);
  }
LABEL_258:
  v120 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ConnRSSIStageOneDigitalCarKey");
  v121 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v120 + 88))(v120, buf, __p, &v167);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v121)
      goto LABEL_266;
  }
  else if (!v121)
  {
    goto LABEL_266;
  }
  v122 = v167;
  *(_BYTE *)(a1 + 1339) = v167;
  v123 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v122;
    _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEFAULT, "ConnRSSIStageOneDigitalCarKey %d overridden", buf, 8u);
  }
LABEL_266:
  v124 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ConnRSSIStageOneDigitalHomeKey");
  v125 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v124 + 88))(v124, buf, __p, &v167);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v125)
      goto LABEL_274;
  }
  else if (!v125)
  {
    goto LABEL_274;
  }
  v126 = v167;
  *(_BYTE *)(a1 + 1340) = v167;
  v127 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v126;
    _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEFAULT, "ConnRSSIStageOneDigitalHomeKey %d overridden", buf, 8u);
  }
LABEL_274:
  v128 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ConfigureCreateConnectionEnabled");
  v129 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v128 + 72))(v128, buf, __p, a1 + 1111);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v129)
      goto LABEL_282;
  }
  else if (!v129)
  {
    goto LABEL_282;
  }
  v130 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v131 = *(unsigned __int8 *)(a1 + 1111);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v131;
    _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_DEFAULT, "ConfigureCreateConnectionEnabled is set to %d (overridden)", buf, 8u);
  }
LABEL_282:
  v132 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ConnRSSIStageOneThirdPartyApp");
  v133 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v132 + 88))(v132, buf, __p, &v167);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v133)
      goto LABEL_290;
  }
  else if (!v133)
  {
    goto LABEL_290;
  }
  v134 = v167;
  *(_BYTE *)(a1 + 1341) = v167;
  v135 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v134;
    _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_DEFAULT, "LEConnectionThirdPartyAppStageOneThresholdRssi %d overridden", buf, 8u);
  }
LABEL_290:
  v136 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ConnRSSIStageOneLECarPlay");
  v137 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v136 + 88))(v136, buf, __p, &v167);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v137)
      goto LABEL_298;
  }
  else if (!v137)
  {
    goto LABEL_298;
  }
  v138 = v167;
  *(_BYTE *)(a1 + 1342) = v167;
  v139 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v138;
    _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_DEFAULT, "LEConnectionLECarPlayStageOneThresholdRssi %d overridden", buf, 8u);
  }
LABEL_298:
  v166 = 0;
  v140 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ConnScanTimeoutExtendPercent");
  v141 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v140 + 88))(v140, buf, __p, &v166);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v141)
      goto LABEL_310;
  }
  else if (!v141)
  {
    goto LABEL_310;
  }
  v142 = v166;
  v143 = qword_100999890;
  if (v166 < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100710F3C();
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v142;
      _os_log_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_DEFAULT, "Set ConnScanTimeoutExtendPercent %d percent", buf, 8u);
      LOBYTE(v142) = v166;
    }
    *(_BYTE *)(a1 + 1372) = v142;
  }
LABEL_310:
  v144 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ConnectionDenyListTimeoutSecondsOverride");
  v145 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v144 + 88))(v144, buf, __p, &v176);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
    operator delete(*(void **)buf);
  v146 = v176;
  if (v176 > 0)
    v147 = v145;
  else
    v147 = 0;
  if (v147 == 1)
  {
    v148 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v146;
      _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_DEFAULT, "Warning: LeConnectionDenyList: Using override value (%d) for fLeConnectionDenyListTimeoutSec", buf, 8u);
      v146 = v176;
    }
    *(_DWORD *)(a1 + 1476) = v146;
  }
  v149 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ConnectionDenyListIntervalSecondsOverride");
  v150 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v149 + 88))(v149, buf, __p, &v176);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
    operator delete(*(void **)buf);
  v151 = v176;
  if (v176 > 0)
    v152 = v150;
  else
    v152 = 0;
  if (v152 == 1)
  {
    v153 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v151;
      _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_DEFAULT, "Warning: LeConnectionDenyList: Using override value (%d) for fLeConnectionDenyListIntervalSec", buf, 8u);
      v151 = v176;
    }
    *(_DWORD *)(a1 + 1472) = v151;
  }
  v154 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ConnectionDenyListCountThresholdOverride");
  v155 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v154 + 88))(v154, buf, __p, &v176);
  if (v175 < 0)
    operator delete(__p[0]);
  if (v179 < 0)
    operator delete(*(void **)buf);
  v156 = v176;
  if (v176 > 0)
    v157 = v155;
  else
    v157 = 0;
  if (v157 == 1)
  {
    v158 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v156;
      _os_log_impl((void *)&_mh_execute_header, v158, OS_LOG_TYPE_DEFAULT, "Warning: LeConnectionDenyList: Using override value (%d) for fLeConnectionDenyListCountThreshold", buf, 8u);
      v156 = v176;
    }
    *(_DWORD *)(a1 + 1480) = v156;
  }
  v159 = objc_opt_new(CMMotionActivityManager);
  v160 = *(void **)(a1 + 1512);
  *(_QWORD *)(a1 + 1512) = v159;

  v161 = objc_opt_new(NSOperationQueue);
  v162 = *(void **)(a1 + 1520);
  *(_QWORD *)(a1 + 1520) = v161;

  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 112) = 0;
  return a1;
}

void sub_100613854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v43;
  void *v44;
  void *v45;

  if (a35 < 0)
    operator delete(__p);
  if (*(char *)(v41 - 105) < 0)
    operator delete(*(void **)(v41 - 128));

  sub_100646154(v35 + 1536, *(_QWORD **)(v35 + 1544));
  sub_1006460DC(v35 + 1448, *(_QWORD **)(v35 + 1456));
  sub_1006460DC(v40, *(_QWORD **)(v35 + 1432));
  sub_10001A82C(v35 + 1400, *(_QWORD **)(v35 + 1408));
  sub_10001A82C(v39, *(_QWORD **)(v35 + 1384));
  sub_100056BAC(v38, *(char **)(v35 + 1352));
  sub_10001A82C(v37, *(_QWORD **)(v35 + 1320));
  sub_10001A82C(v35 + 1288, *(_QWORD **)(v35 + 1296));
  sub_10001A82C(a20, *(_QWORD **)(v35 + 1272));
  sub_10001A82C(v35 + 1240, *(_QWORD **)(v35 + 1248));
  sub_10001A82C(a21, *(_QWORD **)(v35 + 1224));
  sub_100056BAC(v35 + 1176, *(char **)(v35 + 1184));
  sub_1002F655C(v35 + 1144, *(_QWORD **)(v35 + 1152));
  sub_10001A82C(a22, *(_QWORD **)(v35 + 1128));
  sub_1002A912C(a23);
  sub_1002A912C(a24);
  sub_100068038((uint64_t)(v36 + 91), *(_QWORD **)(v35 + 936));
  v43 = *(void **)(v35 + 896);
  if (v43)
  {
    *(_QWORD *)(v35 + 904) = v43;
    operator delete(v43);
  }
  sub_10001A82C(a25, *(_QWORD **)(v35 + 840));

  sub_10001A82C((uint64_t)(v36 + 74), *(_QWORD **)(v35 + 800));
  sub_10001A82C(a17, *(_QWORD **)(v35 + 712));
  sub_10001A82C((uint64_t)(v36 + 60), *(_QWORD **)(v35 + 688));
  sub_10001A82C(a18, *(_QWORD **)(v35 + 664));
  sub_10001A82C((uint64_t)(v36 + 54), *(_QWORD **)(v35 + 640));
  sub_10001A82C((uint64_t)(v36 + 50), *(_QWORD **)(v35 + 608));

  sub_10001A82C((uint64_t)(v36 + 40), *(_QWORD **)(v35 + 528));
  sub_10001A82C(a12, *(_QWORD **)(v35 + 504));
  sub_10001A82C((uint64_t)(v36 + 34), *(_QWORD **)(v35 + 480));
  sub_10001A82C(a13, *(_QWORD **)(v35 + 456));
  sub_10001A82C((uint64_t)(v36 + 28), *(_QWORD **)(v35 + 432));
  sub_10001A82C(a14, *(_QWORD **)(v35 + 408));
  sub_10001A82C((uint64_t)(v36 + 22), *(_QWORD **)(v35 + 384));
  sub_10001A82C(a15, *(_QWORD **)(v35 + 360));
  sub_10001A82C((uint64_t)(v36 + 16), *(_QWORD **)(v35 + 336));
  v44 = *(void **)(v35 + 232);
  if (v44)
  {
    *(_QWORD *)(v35 + 240) = v44;
    operator delete(v44);
  }
  v45 = *v36;
  if (*v36)
  {
    *(_QWORD *)(v35 + 208) = v45;
    operator delete(v45);
  }
  sub_100069BDC(a16);
  sub_1004AF52C(a19);
  _Unwind_Resume(a1);
}

void sub_100613CCC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  int v24;
  NSObject *v25;
  unsigned int v26;
  unsigned int v27;
  NSObject *v28;
  uint64_t v29;
  int v30;
  int v31;
  NSObject *v32;
  uint64_t v33;
  int v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  int v38;
  int v39;
  NSObject *v40;
  uint64_t v41;
  int v42;
  int v43;
  NSObject *v44;
  uint64_t v45;
  int v46;
  int v47;
  NSObject *v48;
  uint64_t v49;
  int v50;
  int v51;
  NSObject *v52;
  uint64_t v53;
  int v54;
  unsigned __int16 v55;
  NSObject *v56;
  uint64_t v57;
  int v58;
  unsigned __int16 v59;
  NSObject *v60;
  uint64_t v61;
  int v62;
  int v63;
  NSObject *v64;
  uint64_t v65;
  int v66;
  int v67;
  NSObject *v68;
  unsigned int v69;
  unsigned int v70;
  NSObject *v71;
  uint64_t v72;
  int v73;
  int v74;
  NSObject *v75;
  const char *v76;
  uint64_t v77;
  int v78;
  unsigned __int16 v79;
  NSObject *v80;
  uint64_t v81;
  int v82;
  unsigned __int16 v83;
  NSObject *v84;
  int v85;
  int v86;
  unsigned __int8 v87;
  int v88;
  int v89;
  int v90;
  int v91;
  void *__p[2];
  char v93;
  int v94;
  int v95;
  int v96;
  _BYTE buf[14];
  __int16 v98;
  unsigned int v99;
  char v100;

  v96 = 0;
  v94 = 0;
  v95 = 0;
  v2 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "LeConnectionLatencyLowMinInterval");
  v3 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v2 + 88))(v2, buf, __p, &v96);
  if (v93 < 0)
    operator delete(__p[0]);
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3)
      goto LABEL_12;
  }
  else if (!v3)
  {
    goto LABEL_12;
  }
  v4 = v96;
  v5 = qword_100999890;
  if ((v96 - 8) >= 0xF9A && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v4;
    _os_log_fault_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Override rejected latency minInterval:%d LeConnectionLatencyLow", buf, 8u);
    LOWORD(v4) = v96;
    v5 = qword_100999890;
  }
  *(_WORD *)(a1 + 1072) = v4;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = (unsigned __int16)v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Override latency minInterval:%d LeConnectionLatencyLow", buf, 8u);
  }
LABEL_12:
  v6 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "LeConnectionLatencyLowMaxInterval");
  v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v6 + 88))(v6, buf, __p, &v95);
  if (v93 < 0)
    operator delete(__p[0]);
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v7)
      goto LABEL_23;
  }
  else if (!v7)
  {
    goto LABEL_23;
  }
  v8 = v95;
  v9 = qword_100999890;
  if ((v95 - 8) >= 0xF9A && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v8;
    _os_log_fault_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Override rejected latency maxInterval:%d LeConnectionLatencyLow", buf, 8u);
    LOWORD(v8) = v95;
    v9 = qword_100999890;
  }
  *(_WORD *)(a1 + 1074) = v8;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = (unsigned __int16)v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Override latency maxInterval:%d LeConnectionLatencyLow", buf, 8u);
  }
LABEL_23:
  v10 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "LeConnectionLatencyLowSupervisionTimeout");
  v11 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v10 + 88))(v10, buf, __p, &v94);
  if (v93 < 0)
    operator delete(__p[0]);
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v11)
      goto LABEL_34;
  }
  else if (!v11)
  {
    goto LABEL_34;
  }
  v12 = v94;
  v13 = qword_100999890;
  if ((v94 - 100) >= 0x7C9D && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v12;
    _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Override rejected latency supervisionTimeout:%d LeConnectionLatencyLow", buf, 8u);
    LOWORD(v12) = v94;
    v13 = qword_100999890;
  }
  *(_WORD *)(a1 + 1076) = v12;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = (unsigned __int16)v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Override latency supervisionTimeout:%d LeConnectionLatencyLow", buf, 8u);
  }
LABEL_34:
  if (*(unsigned __int16 *)(a1 + 1074) < *(unsigned __int16 *)(a1 + 1072)
    && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
  {
    sub_10071140C();
  }
  v14 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "LeConnectionLatencyMediumMinInterval");
  v15 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v14 + 88))(v14, buf, __p, &v96);
  if (v93 < 0)
    operator delete(__p[0]);
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v15)
      goto LABEL_48;
  }
  else if (!v15)
  {
    goto LABEL_48;
  }
  v16 = v96;
  v17 = qword_100999890;
  if ((v96 - 8) >= 0xF9A && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v16;
    _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Override rejected latency minInterval:%d LeConnectionLatencyMedium", buf, 8u);
    LOWORD(v16) = v96;
    v17 = qword_100999890;
  }
  *(_WORD *)(a1 + 1078) = v16;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = (unsigned __int16)v16;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Override latency minInterval:%d LeConnectionLatencyMedium", buf, 8u);
  }
LABEL_48:
  v18 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "LeConnectionLatencyMediumMaxInterval");
  v19 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v18 + 88))(v18, buf, __p, &v95);
  if (v93 < 0)
    operator delete(__p[0]);
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v19)
      goto LABEL_59;
  }
  else if (!v19)
  {
    goto LABEL_59;
  }
  v20 = v95;
  v21 = qword_100999890;
  if ((v95 - 8) >= 0xF9A && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v20;
    _os_log_fault_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Override rejected latency maxInterval:%d LeConnectionLatencyMedium", buf, 8u);
    LOWORD(v20) = v95;
    v21 = qword_100999890;
  }
  *(_WORD *)(a1 + 1080) = v20;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = (unsigned __int16)v20;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Override latency maxInterval:%d LeConnectionLatencyMedium", buf, 8u);
  }
LABEL_59:
  v22 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "LeConnectionLatencyMediumSupervisionTimeout");
  v23 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v22 + 88))(v22, buf, __p, &v94);
  if (v93 < 0)
    operator delete(__p[0]);
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v23)
      goto LABEL_70;
  }
  else if (!v23)
  {
    goto LABEL_70;
  }
  v24 = v94;
  v25 = qword_100999890;
  if ((v94 - 100) >= 0x7C9D && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v24;
    _os_log_fault_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "Override rejected latency supervisionTimeout:%d LeConnectionLatencyMedium", buf, 8u);
    LOWORD(v24) = v94;
    v25 = qword_100999890;
  }
  *(_WORD *)(a1 + 1082) = v24;
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = (unsigned __int16)v24;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Override latency supervisionTimeout:%d LeConnectionLatencyMedium", buf, 8u);
  }
LABEL_70:
  v26 = *(unsigned __int16 *)(a1 + 1080);
  v27 = *(unsigned __int16 *)(a1 + 1078);
  if (v26 < v27)
  {
    v28 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
      sub_10071136C(v26, v27, v28);
  }
  v29 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "LeConnectionLatencyHighMinInterval");
  v30 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v29 + 88))(v29, buf, __p, &v96);
  if (v93 < 0)
    operator delete(__p[0]);
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v30)
      goto LABEL_84;
  }
  else if (!v30)
  {
    goto LABEL_84;
  }
  v31 = v96;
  v32 = qword_100999890;
  if ((v96 - 8) >= 0xF9A && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v31;
    _os_log_fault_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "Override rejected latency minInterval:%d LeConnectionLatencyHigh", buf, 8u);
    LOWORD(v31) = v96;
    v32 = qword_100999890;
  }
  *(_WORD *)(a1 + 1084) = v31;
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = (unsigned __int16)v31;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Override latency minInterval:%d LeConnectionLatencyHigh", buf, 8u);
  }
LABEL_84:
  v33 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "LeConnectionLatencyHighMaxInterval");
  v34 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v33 + 88))(v33, buf, __p, &v95);
  if (v93 < 0)
    operator delete(__p[0]);
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v34)
      goto LABEL_95;
  }
  else if (!v34)
  {
    goto LABEL_95;
  }
  v35 = v95;
  v36 = qword_100999890;
  if ((v95 - 8) >= 0xF9A && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v35;
    _os_log_fault_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "Override rejected latency maxInterval:%d LeConnectionLatencyHigh", buf, 8u);
    LOWORD(v35) = v95;
    v36 = qword_100999890;
  }
  *(_WORD *)(a1 + 1086) = v35;
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = (unsigned __int16)v35;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Override latency maxInterval:%d LeConnectionLatencyHigh", buf, 8u);
  }
LABEL_95:
  v37 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "LeConnectionLatencyHighSupervisionTimeout");
  v38 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v37 + 88))(v37, buf, __p, &v94);
  if (v93 < 0)
    operator delete(__p[0]);
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v38)
      goto LABEL_106;
  }
  else if (!v38)
  {
    goto LABEL_106;
  }
  v39 = v94;
  v40 = qword_100999890;
  if ((v94 - 100) >= 0x7C9D && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v39;
    _os_log_fault_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "Override rejected latency supervisionTimeout:%d LeConnectionLatencyHigh", buf, 8u);
    LOWORD(v39) = v94;
    v40 = qword_100999890;
  }
  *(_WORD *)(a1 + 1088) = v39;
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = (unsigned __int16)v39;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Override latency supervisionTimeout:%d LeConnectionLatencyHigh", buf, 8u);
  }
LABEL_106:
  if (*(unsigned __int16 *)(a1 + 1086) < *(unsigned __int16 *)(a1 + 1084)
    && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
  {
    sub_10071130C();
  }
  v41 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "LeConnectionLatencyVeryHighMinInterval");
  v42 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v41 + 88))(v41, buf, __p, &v96);
  if (v93 < 0)
    operator delete(__p[0]);
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v42)
      goto LABEL_120;
  }
  else if (!v42)
  {
    goto LABEL_120;
  }
  v43 = v96;
  v44 = qword_100999890;
  if ((v96 - 8) >= 0xF9A && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v43;
    _os_log_fault_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_FAULT, "Override rejected latency minInterval:%d LeConnectionLatencyVeryHigh", buf, 8u);
    LOWORD(v43) = v96;
    v44 = qword_100999890;
  }
  *(_WORD *)(a1 + 1090) = v43;
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = (unsigned __int16)v43;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Override latency minInterval:%d LeConnectionLatencyVeryHigh", buf, 8u);
  }
LABEL_120:
  v45 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "LeConnectionLatencyVeryHighMaxInterval");
  v46 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v45 + 88))(v45, buf, __p, &v95);
  if (v93 < 0)
    operator delete(__p[0]);
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v46)
      goto LABEL_131;
  }
  else if (!v46)
  {
    goto LABEL_131;
  }
  v47 = v95;
  v48 = qword_100999890;
  if ((v95 - 8) >= 0xF9A && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v47;
    _os_log_fault_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_FAULT, "Override rejected latency maxInterval:%d LeConnectionLatencyVeryHigh", buf, 8u);
    LOWORD(v47) = v95;
    v48 = qword_100999890;
  }
  *(_WORD *)(a1 + 1092) = v47;
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = (unsigned __int16)v47;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Override latency maxInterval:%d LeConnectionLatencyVeryHigh", buf, 8u);
  }
LABEL_131:
  v49 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "LeConnectionLatencyVeryHighSupervisionTimeout");
  v50 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v49 + 88))(v49, buf, __p, &v94);
  if (v93 < 0)
    operator delete(__p[0]);
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v50)
      goto LABEL_142;
  }
  else if (!v50)
  {
    goto LABEL_142;
  }
  v51 = v94;
  v52 = qword_100999890;
  if ((v94 - 100) >= 0x7C9D && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v51;
    _os_log_fault_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_FAULT, "Override rejected latency supervisionTimeout:%d LeConnectionLatencyVeryHigh", buf, 8u);
    LOWORD(v51) = v94;
    v52 = qword_100999890;
  }
  *(_WORD *)(a1 + 1094) = v51;
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = (unsigned __int16)v51;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "Override latency supervisionTimeout:%d LeConnectionLatencyVeryHigh", buf, 8u);
  }
LABEL_142:
  if (*(unsigned __int16 *)(a1 + 1092) < *(unsigned __int16 *)(a1 + 1090)
    && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
  {
    sub_1007112AC();
  }
  v91 = 0;
  v53 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "LeConnectionMinIntervalDigitalID");
  v54 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v53 + 88))(v53, buf, __p, &v91);
  if (v93 < 0)
    operator delete(__p[0]);
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v54)
      goto LABEL_153;
  }
  else if (!v54)
  {
    goto LABEL_153;
  }
  v55 = v91;
  *(_WORD *)(a1 + 1096) = v91;
  v56 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v55;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "Override LeConnectionMinIntervalDigitalID:%d", buf, 8u);
  }
LABEL_153:
  v90 = 0;
  v57 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "LeConnectionMaxIntervalDigitalID");
  v58 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v57 + 88))(v57, buf, __p, &v90);
  if (v93 < 0)
    operator delete(__p[0]);
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v58)
      goto LABEL_161;
  }
  else if (!v58)
  {
    goto LABEL_161;
  }
  v59 = v90;
  *(_WORD *)(a1 + 1098) = v90;
  v60 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v59;
    _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Override LeConnectionMaxIntervalDigitalID:%d", buf, 8u);
  }
LABEL_161:
  v89 = 0;
  v61 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "LeMaxCEDigitalID");
  v62 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v61 + 88))(v61, buf, __p, &v89);
  if (v93 < 0)
    operator delete(__p[0]);
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v62)
      goto LABEL_169;
  }
  else if (!v62)
  {
    goto LABEL_169;
  }
  v63 = v89;
  *(_BYTE *)(a1 + 1101) = v89;
  v64 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v63;
    _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "Override LeMaxCEDigitalID:%d", buf, 8u);
  }
LABEL_169:
  v88 = 0;
  v65 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "LeMinCEDigitalID");
  v66 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v65 + 88))(v65, buf, __p, &v88);
  if (v93 < 0)
    operator delete(__p[0]);
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v66)
      goto LABEL_177;
  }
  else if (!v66)
  {
    goto LABEL_177;
  }
  v67 = v88;
  *(_BYTE *)(a1 + 1100) = v88;
  v68 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v67;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Override LeMinCEDigitalID:%d", buf, 8u);
  }
LABEL_177:
  v69 = *(unsigned __int8 *)(a1 + 1100);
  v70 = *(unsigned __int8 *)(a1 + 1101);
  if (v69 > v70)
  {
    v71 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v69;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v70;
      v98 = 1024;
      v99 = v70;
      _os_log_error_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "fMinCELenDigitalID %d is greater than fMaxCELenDigitalID %d. Replace fMinCELenDigitalID by %d.", buf, 0x14u);
      LOBYTE(v70) = *(_BYTE *)(a1 + 1101);
    }
    *(_BYTE *)(a1 + 1100) = v70;
  }
  v87 = 0;
  v72 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "OverrideConnectionIntervalFindMy");
  v73 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v72 + 72))(v72, buf, __p, &v87);
  if (v93 < 0)
    operator delete(__p[0]);
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v73)
      goto LABEL_191;
  }
  else if (!v73)
  {
    goto LABEL_191;
  }
  v74 = v87;
  *(_BYTE *)(a1 + 1102) = v87;
  v75 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v76 = "enabled";
    if (!v74)
      v76 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v76;
    _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "OverrideConnectionIntervalFindMy %s", buf, 0xCu);
  }
LABEL_191:
  v86 = 0;
  v77 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "LeConnectionMinIntervalFindMy");
  v78 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v77 + 88))(v77, buf, __p, &v86);
  if (v93 < 0)
    operator delete(__p[0]);
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v78)
      goto LABEL_199;
  }
  else if (!v78)
  {
    goto LABEL_199;
  }
  v79 = v86;
  *(_WORD *)(a1 + 1104) = v86;
  v80 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v79;
    _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "Override LeConnectionMinIntervalFindMy:%d", buf, 8u);
  }
LABEL_199:
  v85 = 0;
  v81 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "LeConnectionMaxIntervalFindMy");
  v82 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v81 + 88))(v81, buf, __p, &v85);
  if (v93 < 0)
    operator delete(__p[0]);
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v82)
      return;
  }
  else if (!v82)
  {
    return;
  }
  v83 = v85;
  *(_WORD *)(a1 + 1106) = v85;
  v84 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v83;
    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "Override LeConnectionMaxIntervalFindMy:%d", buf, 8u);
  }
}

void sub_100615294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v19 - 41) < 0)
    operator delete(*(void **)(v19 - 64));
  _Unwind_Resume(exception_object);
}

void sub_100615364(unsigned __int8 *a1, uint64_t a2, int a3, char a4)
{
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  _QWORD v10[6];
  int v11;
  BOOL v12;
  char v13;

  v7 = ((unint64_t)a1[1] << 40) | ((unint64_t)a1[2] << 32) | ((unint64_t)a1[3] << 24) | ((unint64_t)a1[4] << 16) | ((unint64_t)a1[5] << 8) | a1[6] | ((unint64_t)*a1 << 48);
  v8 = sub_100221568(a2);
  v9 = sub_1000419F4();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10063F0F8;
  v10[3] = &unk_100933AE8;
  v12 = v8;
  v10[4] = a2;
  v10[5] = v7;
  v11 = a3;
  v13 = a4;
  sub_100041A34(v9, v10);
}

void sub_10061542C(uint64_t a1, int a2, char a3, int a4)
{
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  char v10;
  unsigned int v11;
  char v12;
  __int16 v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  char v17;
  char v18;
  uint64_t v19;
  _QWORD v22[6];
  int v23;
  int v24;
  __int16 v25;
  BOOL v26;
  char v27;
  char v28;
  char v29;
  _QWORD v30[6];

  if (*(_BYTE *)(a1 + 55))
  {
    v6 = (unsigned __int8 *)(a1 + 56);
    v7 = ((unint64_t)*(unsigned __int8 *)(a1 + 57) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 58) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 59) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 60) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 61) << 8);
    v8 = (unsigned __int8 *)(a1 + 62);
  }
  else
  {
    v6 = (unsigned __int8 *)(a1 + 48);
    v7 = ((unint64_t)*(unsigned __int8 *)(a1 + 49) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 50) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 51) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 52) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 53) << 8);
    v8 = (unsigned __int8 *)(a1 + 54);
  }
  v9 = v7 | *v8 | ((unint64_t)*v6 << 48);
  v10 = *(_BYTE *)(a1 + 70);
  v11 = *(unsigned __int8 *)(a1 + 166);
  v12 = *(_BYTE *)(a1 + 280);
  v13 = sub_10019ADE8((unsigned __int16 *)a1);
  if (sub_10019AC00(a1) && *(_BYTE *)(a1 + 220))
  {
    v14 = sub_1000419F4();
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10063F294;
    v30[3] = &unk_100918090;
    v30[4] = v9;
    v30[5] = a1;
    sub_100041A34(v14, v30);
  }
  v15 = v11 == 1;
  v16 = v11 > 1;
  v17 = v15;
  v18 = v12 | a3;
  if (a2 == 708 && v16)
    a2 = 4834;
  v19 = sub_1000419F4();
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10063F35C;
  v22[3] = &unk_100935B18;
  v22[4] = a1;
  v22[5] = v9;
  v26 = v16;
  v25 = v13;
  v27 = v10;
  v28 = v18;
  v29 = v17;
  v23 = a2;
  v24 = a4;
  sub_100041A34(v19, v22);
}

void sub_1006155D0(int a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v4[4];
  int v5;
  uint8_t buf[4];
  int v7;

  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LE Connection Cancelled with status %d", buf, 8u);
  }
  v3 = sub_1000419F4();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10063F244;
  v4[3] = &unk_100918130;
  v5 = a1;
  sub_100041A34(v3, v4);
}

void sub_1006156AC(uint64_t a1, int a2, int a3, int a4, int a5)
{
  NSObject *v10;
  uint64_t v11;
  _QWORD v12[5];
  __int16 v13;
  __int16 v14;
  __int16 v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  v10 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134219008;
    v17 = a1;
    v18 = 1024;
    v19 = a2;
    v20 = 1024;
    v21 = a3;
    v22 = 1024;
    v23 = a4;
    v24 = 1024;
    v25 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "LE Connection Parameters Updated for handle %p, interval:%d peripheral latency:%d supervisionTO:%d maxCELen:%d", buf, 0x24u);
  }
  v11 = sub_1000419F4();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10063F9EC;
  v12[3] = &unk_10092D0A8;
  v12[4] = a1;
  v13 = a2;
  v14 = a3;
  v15 = a4;
  sub_100041A34(v11, v12);
}

void sub_1006157D8(uint64_t a1, int a2, int a3, int a4, int a5)
{
  NSObject *v10;
  uint64_t v11;
  _QWORD v12[5];
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  v10 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134219008;
    v18 = a1;
    v19 = 1024;
    v20 = a2;
    v21 = 1024;
    v22 = a3;
    v23 = 1024;
    v24 = a4;
    v25 = 1024;
    v26 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Connection Subrating Update completed for handle %p. Subrate factor: %d, Peripheral latency: %d, Continuation Number: %d, Supervision TO: %d", buf, 0x24u);
  }
  v11 = sub_1000419F4();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10063FA48;
  v12[3] = &unk_100918090;
  v12[4] = a1;
  v13 = a2;
  v14 = a3;
  v15 = a4;
  v16 = a5;
  sub_100041A34(v11, v12);
}

void sub_100615908(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  int v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD v11[5];
  int v12;
  int v13;
  char v14;
  char v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  if (*(_WORD *)(a1 + 22) == 26119)
  {
    v6 = sub_10003BE44();
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 344))(v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_DWORD *)(a1 + 328);
  v9 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134219008;
    v17 = a1;
    v18 = 1024;
    v19 = a2;
    v20 = 1024;
    v21 = a3;
    v22 = 1024;
    v23 = v8;
    v24 = 1024;
    v25 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "LE Link Ready for handle %p with status %d fastLEConnectionEnabled:%d linkReadyDurationMS:%d requiresCTOFix:%d", buf, 0x24u);
  }
  v10 = sub_1000419F4();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10063FAA8;
  v11[3] = &unk_1009186D0;
  v11[4] = a1;
  v14 = v7;
  v15 = a3;
  v12 = a2;
  v13 = v8;
  sub_100041A34(v10, v11);
}

uint64_t sub_100615A5C(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v3;
  void *v4;
  NSObject *v5;
  id v6;
  void *v7;
  NSObject *v9;
  uint64_t v10;
  _BYTE v11[18];

  v3 = ((unint64_t)a1[1] << 40) | ((unint64_t)a1[2] << 32) | ((unint64_t)a1[3] << 24) | ((unint64_t)a1[4] << 16) | ((unint64_t)a1[5] << 8) | a1[6] | ((unint64_t)*a1 << 48);
  v4 = objc_autoreleasePoolPush();
  v5 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v6 = sub_100021770(v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    *(_DWORD *)v11 = 138543618;
    *(_QWORD *)&v11[4] = v7;
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Address \"%{public}@\" Added to Filter Accept List with status:%d", v11, 0x12u);

  }
  objc_autoreleasePoolPop(v4);
  if ((_DWORD)a2)
  {
    if ((_DWORD)a2 != 758)
    {
      v9 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_10071146C(v3, a2, v9);
      v10 = sub_100027F68();
      sub_100576500(v10, 1);
    }
    *(_QWORD *)v11 = 0;
    *(_QWORD *)&v11[8] = 0;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    sub_10003F924((uint64_t)off_1009778C0, v3, 0, 0, 0, 0, v11);
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10093DDC8);
    sub_10061F62C((uint64_t)off_1009778A0, v11);
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10093DDC8);
    sub_10061B638((uint64_t)off_1009778A0, 4u);
  }
  *(_QWORD *)v11 = 0;
  *(_QWORD *)&v11[8] = 0;
  sub_10003415C((uint64_t)v11, (uint64_t)&unk_100999B38);
  byte_100999BB8 = 0;
  sub_1000445E0(&stru_100999AD8);
  return sub_100034234((uint64_t)v11);
}

void sub_100615C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100615CB8(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v3;
  void *v4;
  NSObject *v5;
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v10;
  _BYTE v11[18];

  v3 = ((unint64_t)a1[1] << 40) | ((unint64_t)a1[2] << 32) | ((unint64_t)a1[3] << 24) | ((unint64_t)a1[4] << 16) | ((unint64_t)a1[5] << 8) | a1[6] | ((unint64_t)*a1 << 48);
  v4 = objc_autoreleasePoolPush();
  v5 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v6 = sub_100021770(v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    *(_DWORD *)v11 = 138543618;
    *(_QWORD *)&v11[4] = v7;
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Address \"%{public}@\" Removed from Filter Accept List with status:%d", v11, 0x12u);

  }
  objc_autoreleasePoolPop(v4);
  if ((_DWORD)a2)
  {
    v8 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_1007114F8(v3, a2, v8);
    if ((_DWORD)a2 != 718)
    {
      if ((_DWORD)a2 != 758)
      {
        v10 = sub_100027F68();
        sub_100576500(v10, 1);
      }
      *(_QWORD *)v11 = 0;
      *(_QWORD *)&v11[8] = 0;
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      sub_10003F924((uint64_t)off_1009778C0, v3, 0, 0, 0, 0, v11);
      if (qword_1009778A8 != -1)
        dispatch_once(&qword_1009778A8, &stru_10093DDC8);
      sub_10061F784((uint64_t)off_1009778A0, v11);
      if (qword_1009778A8 != -1)
        dispatch_once(&qword_1009778A8, &stru_10093DDC8);
      sub_10061B638((uint64_t)off_1009778A0, 4u);
    }
  }
  *(_QWORD *)v11 = 0;
  *(_QWORD *)&v11[8] = 0;
  sub_10003415C((uint64_t)v11, (uint64_t)&unk_100999B78);
  byte_100999BB9 = 0;
  sub_1000445E0(&stru_100999B08);
  return sub_100034234((uint64_t)v11);
}

void sub_100615F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100615F1C(int a1, uint64_t a2, unsigned __int8 *a3)
{
  NSObject *v6;
  int v7;
  uint64_t v8;
  _QWORD v9[6];
  int v10;
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  int v14;

  v6 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *a3;
    *(_DWORD *)buf = 134218240;
    v12 = a2;
    v13 = 1024;
    v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "LE Read Remote FAE Table  handle %p, FAETable[0]:%0X ", buf, 0x12u);
  }
  v8 = sub_1000419F4();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10063CE24;
  v9[3] = &unk_1009180B0;
  v10 = a1;
  v9[4] = a2;
  v9[5] = a3;
  sub_100041A34(v8, v9);
}

void sub_10061601C(int a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD v6[5];
  int v7;
  uint8_t buf[4];
  uint64_t v9;

  v4 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "LE Security Enable handle %p, FAETable[0]: ", buf, 0xCu);
  }
  v5 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10063CE78;
  v6[3] = &unk_1009173C0;
  v7 = a1;
  v6[4] = a2;
  sub_100041A34(v5, v6);
}

void sub_100616108(int a1, uint64_t a2, char a3, int a4, char a5, char a6, char a7, char a8, char a9, char a10, char a11)
{
  NSObject *v17;
  uint64_t v18;
  _QWORD v21[5];
  int v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  int v35;

  v17 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    v33 = a2;
    v34 = 1024;
    v35 = a4;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "LE Procedure Enable  handle %p, enable:%0X ", buf, 0x12u);
  }
  v18 = sub_1000419F4();
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_10063CECC;
  v21[3] = &unk_1009226D0;
  v22 = a1;
  v21[4] = a2;
  v23 = a3;
  v24 = a4;
  v25 = a5;
  v26 = a6;
  v27 = a7;
  v28 = a8;
  v29 = a9;
  v30 = a10;
  v31 = a11;
  sub_100041A34(v18, v21);
}

void sub_100616264(uint64_t a1, int a2, char a3, char a4, char a5, char a6, char a7, char a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  NSObject *v18;
  uint64_t v19;
  _QWORD v23[9];
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  int v35;

  v18 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    v33 = a1;
    v34 = 1024;
    v35 = a2;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "LE SubEvent Result handle %p, enable:%0X ", buf, 0x12u);
  }
  v19 = sub_1000419F4();
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10063CF48;
  v23[3] = &unk_10093DAE0;
  v24 = a2;
  v25 = a3;
  v26 = a4;
  v27 = a5;
  v28 = a6;
  v29 = a7;
  v30 = a8;
  v31 = a9;
  v23[4] = a1;
  v23[5] = a10;
  v23[6] = a11;
  v23[7] = a12;
  v23[8] = a13;
  sub_100041A34(v19, v23);
}

void sub_1006163D0(uint64_t a1, int a2, char a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  NSObject *v17;
  uint64_t v18;
  _QWORD v20[9];
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  int v29;

  v17 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    v27 = a1;
    v28 = 1024;
    v29 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "LE SubEvent Result Continue handle %p, enable:%0X ", buf, 0x12u);
  }
  v18 = sub_1000419F4();
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10063CFD4;
  v20[3] = &unk_10093DB00;
  v21 = a2;
  v22 = a3;
  v23 = a4;
  v24 = a5;
  v25 = a6;
  v20[4] = a1;
  v20[5] = a7;
  v20[6] = a8;
  v20[7] = a9;
  v20[8] = a10;
  sub_100041A34(v18, v20);
}

void sub_100616518(uint64_t a1, uint64_t a2, unsigned __int8 a3, int a4, unsigned __int8 a5, int a6)
{
  const unsigned __int8 *v12;
  unsigned __int8 *v13;
  const unsigned __int8 **v14;
  BOOL v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  _QWORD v21[2];
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[4];
  int v30;
  int v31;
  unsigned __int8 v32[24];
  uuid_t uu;

  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  v12 = *(const unsigned __int8 **)(a1 + 376);
  if (v12 != (const unsigned __int8 *)(a1 + 384))
  {
    while (*((_QWORD *)v12 + 6) != a2)
    {
      v13 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
      if (v13)
      {
        do
        {
          v14 = (const unsigned __int8 **)v13;
          v13 = *(unsigned __int8 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (const unsigned __int8 **)*((_QWORD *)v12 + 2);
          v15 = *v14 == v12;
          v12 = (const unsigned __int8 *)v14;
        }
        while (!v15);
      }
      v12 = (const unsigned __int8 *)v14;
      if (v14 == (const unsigned __int8 **)(a1 + 384))
        goto LABEL_11;
    }
    uuid_copy(uu, v12 + 32);
  }
LABEL_11:
  if (!uuid_is_null(uu))
  {
    *(_QWORD *)&v25 = uu;
    sub_100646208((uint64_t **)(a1 + 424), uu, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v25)[6] = a2;
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    v16 = sub_100030DF4(uu);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    sub_1006167B8(a1, v17, (uint64_t)&v25);

    if (!(_QWORD)v25)
    {
LABEL_24:
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3321888768;
      v29[2] = sub_100616A50;
      v29[3] = &unk_10093D608;
      uuid_copy(v32, uu);
      v32[16] = a3;
      v32[17] = a5;
      v30 = a4;
      v31 = a6;
      sub_1006169D0((os_unfair_lock_s *)a1, v29);

      return;
    }
    if ((a4 & 0x40) != 0)
    {
      v18 = 5;
    }
    else
    {
      if ((a4 & 0x80) != 0)
      {
        *((_QWORD *)&v27 + 1) = 0;
LABEL_23:
        v19 = sub_100030DF4(uu);
        v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        v21[0] = (id)v25;
        v21[1] = *((id *)&v25 + 1);
        v22 = v26;
        v23 = v27;
        v24 = v28;
        sub_1006168D8(a1, v20, (uint64_t)v21);

        goto LABEL_24;
      }
      if ((a4 & 0x100) != 0)
        v18 = 1;
      else
        v18 = 6;
    }
    *((_QWORD *)&v27 + 1) = v18;
    goto LABEL_23;
  }
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    sub_100711584();
}

void sub_100616780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1006167B8(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 *v9;
  unsigned __int8 uu2[16];

  v5 = a2;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_QWORD *)(a3 + 48) = 0;
  sub_100030BCC(uu2, v5);
  if (a1 + 1544 != sub_10000C5B8(a1 + 1536, uu2))
  {
    sub_100030BCC(uu2, v5);
    v9 = uu2;
    v6 = sub_100648B94((uint64_t **)(a1 + 1536), uu2, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v9);
    *(_QWORD *)a3 = (id)v6[6];
    *(_QWORD *)(a3 + 8) = (id)v6[7];
    v7 = v6[12];
    v8 = *((_OWORD *)v6 + 5);
    *(_OWORD *)(a3 + 16) = *((_OWORD *)v6 + 4);
    *(_OWORD *)(a3 + 32) = v8;
    *(_QWORD *)(a3 + 48) = v7;
  }

}

void sub_1006168B4(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;

  sub_100616AC0(v2);

  _Unwind_Resume(a1);
}

void sub_1006168D8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t *v6;
  __int128 v7;
  __int128 v8;
  unsigned __int8 *v9;
  unsigned __int8 uu1[16];

  v5 = a2;
  sub_100030BCC(uu1, v5);
  v9 = uu1;
  v6 = sub_100648B94((uint64_t **)(a1 + 1536), uu1, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v9);
  objc_storeStrong((id *)v6 + 6, *(id *)a3);
  objc_storeStrong((id *)v6 + 7, *(id *)(a3 + 8));
  v7 = *(_OWORD *)(a3 + 16);
  v8 = *(_OWORD *)(a3 + 32);
  v6[12] = *(_QWORD *)(a3 + 48);
  *((_OWORD *)v6 + 4) = v7;
  *((_OWORD *)v6 + 5) = v8;

}

void sub_1006169B0(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;

  sub_100616AC0(v2);

  _Unwind_Resume(a1);
}

void sub_1006169D0(os_unfair_lock_s *a1, void *a2)
{
  id v3;
  _QWORD v4[2];

  v3 = a2;
  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, (uint64_t)&a1[30]);
  sub_100636F90(a1 + 48, v3);
  sub_100636F90(a1 + 56, v3);
  sub_100034234((uint64_t)v4);

}

void sub_100616A30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100616A50(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = sub_100030DF4((const unsigned __int8 *)(a1 + 40));
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);

}

void sub_100616AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id *sub_100616AC0(id *a1)
{

  return a1;
}

char *sub_100616AF0(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  int v24;
  NSObject *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  int v32;
  uint64_t **v33;
  int v34;
  uint64_t v35;
  int v36;
  NSObject *v37;
  uint64_t v38;
  int v39;
  NSObject *v40;
  uint64_t v41;
  int v42;
  NSObject *v43;
  uint64_t v44;
  int v45;
  NSObject *v46;
  uint64_t v47;
  int v48;
  NSObject *v49;
  char v50;
  __int16 v51;
  int v52;
  int v53;
  char v54;
  char v55;
  char v56;
  uint64_t v57;
  int v58;
  NSObject *v59;
  uint64_t v60;
  int v61;
  NSObject *v62;
  uint64_t v63;
  int v64;
  NSObject *v65;
  uint64_t v66;
  int v67;
  NSObject *v68;
  __int16 v69;
  int v70;
  int v71;
  char v72;
  char *result;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  void *__p[2];
  char v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint8_t buf[8];
  char v94;

  v91 = 1800;
  v92 = 3;
  v89 = 7200;
  v90 = 1;
  v87 = 1800;
  v88 = 3;
  v85 = 7200;
  v86 = 1;
  v2 = sub_100027F68();
  sub_100091AE8(buf, "CONNECTION");
  sub_100091AE8(__p, "LeConnectionDCKDisconnectionDisabledToStageOneValue");
  v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v2 + 88))(v2, buf, __p, &v92);
  if (v84 < 0)
    operator delete(__p[0]);
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3)
      goto LABEL_9;
  }
  else if (!v3)
  {
    goto LABEL_9;
  }
  v4 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v92;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "LeConnectionDCKDisconnectionDisabledToStageOneValue=%d (override)", buf, 8u);
  }
LABEL_9:
  v5 = sub_100027F68();
  sub_100091AE8(buf, "CONNECTION");
  sub_100091AE8(__p, "LeConnectionDCKTimeDurationFromDisabledToStageOneValue");
  v6 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v5 + 88))(v5, buf, __p, &v91);
  if (v84 < 0)
    operator delete(__p[0]);
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v6)
      goto LABEL_17;
  }
  else if (!v6)
  {
    goto LABEL_17;
  }
  v7 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v91;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "LeConnectionDCKTimeDurationFromDisabledToStageOneValue=%d (override)", buf, 8u);
  }
LABEL_17:
  v8 = sub_100027F68();
  sub_100091AE8(buf, "CONNECTION");
  sub_100091AE8(__p, "LeConnectionDCKDisconnectionStageOneToDisabledValue");
  v9 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v8 + 88))(v8, buf, __p, &v90);
  if (v84 < 0)
    operator delete(__p[0]);
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v9)
      goto LABEL_25;
  }
  else if (!v9)
  {
    goto LABEL_25;
  }
  v10 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v90;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "LeConnectionDCKDisconnectionStageOneToDisabledValue=%d (override)", buf, 8u);
  }
LABEL_25:
  v11 = sub_100027F68();
  sub_100091AE8(buf, "CONNECTION");
  sub_100091AE8(__p, "LeConnectionDCKTimeDurationFromStageOneToDisabledValue");
  v12 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v11 + 88))(v11, buf, __p, &v89);
  if (v84 < 0)
    operator delete(__p[0]);
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v12)
      goto LABEL_33;
  }
  else if (!v12)
  {
    goto LABEL_33;
  }
  v13 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v89;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "LeConnectionDCKTimeDurationFromStageOneToDisabledValue=%d (override)", buf, 8u);
  }
LABEL_33:
  v14 = sub_100027F68();
  sub_100091AE8(buf, "CONNECTION");
  sub_100091AE8(__p, "LeConnectionHomeDisconnectionDisabledToStageOneValue");
  v15 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v14 + 88))(v14, buf, __p, &v88);
  if (v84 < 0)
    operator delete(__p[0]);
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v15)
      goto LABEL_41;
  }
  else if (!v15)
  {
    goto LABEL_41;
  }
  v16 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v88;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "LeConnectionHomeDisconnectionDisabledToStageOneValue=%d (override)", buf, 8u);
  }
LABEL_41:
  v17 = sub_100027F68();
  sub_100091AE8(buf, "CONNECTION");
  sub_100091AE8(__p, "LeConnectionHomeTimeDurationFromDisabledToStageOneValue");
  v18 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v17 + 88))(v17, buf, __p, &v87);
  if (v84 < 0)
    operator delete(__p[0]);
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v18)
      goto LABEL_49;
  }
  else if (!v18)
  {
    goto LABEL_49;
  }
  v19 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v87;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "LeConnectionHomeTimeDurationFromDisabledToStageOneValue=%d (override)", buf, 8u);
  }
LABEL_49:
  v20 = sub_100027F68();
  sub_100091AE8(buf, "CONNECTION");
  sub_100091AE8(__p, "LeConnectionHomeDisconnectionStageOneToDisabledValue");
  v21 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v20 + 88))(v20, buf, __p, &v86);
  if (v84 < 0)
    operator delete(__p[0]);
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v21)
      goto LABEL_57;
  }
  else if (!v21)
  {
    goto LABEL_57;
  }
  v22 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v86;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "LeConnectionHomeDisconnectionStageOneToDisabledValue=%d (override)", buf, 8u);
  }
LABEL_57:
  v23 = sub_100027F68();
  sub_100091AE8(buf, "CONNECTION");
  sub_100091AE8(__p, "LeConnectionHomeTimeDurationFromStageOneToDisabledValue");
  v24 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v23 + 88))(v23, buf, __p, &v85);
  if (v84 < 0)
    operator delete(__p[0]);
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v24)
      goto LABEL_65;
  }
  else if (!v24)
  {
    goto LABEL_65;
  }
  v25 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v85;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "LeConnectionHomeTimeDurationFromStageOneToDisabledValue=%d (override)", buf, 8u);
  }
LABEL_65:
  v26 = v92;
  LODWORD(__p[0]) = 21;
  *(_QWORD *)buf = __p;
  *((_WORD *)sub_100646320((uint64_t **)(a1 + 1216), (unsigned int *)__p, (uint64_t)&unk_100740F58, (_DWORD **)buf) + 16) = v26;
  v27 = v91;
  LODWORD(__p[0]) = 21;
  *(_QWORD *)buf = __p;
  *((_DWORD *)sub_10033EC4C((uint64_t **)(a1 + 1240), (unsigned int *)__p, (uint64_t)&unk_100740F58, (unsigned int **)buf)
  + 8) = v27;
  v28 = v90;
  LODWORD(__p[0]) = 21;
  *(_QWORD *)buf = __p;
  *((_WORD *)sub_100646320((uint64_t **)(a1 + 1264), (unsigned int *)__p, (uint64_t)&unk_100740F58, (_DWORD **)buf) + 16) = v28;
  v29 = v89;
  LODWORD(__p[0]) = 21;
  *(_QWORD *)buf = __p;
  *((_DWORD *)sub_10033EC4C((uint64_t **)(a1 + 1288), (unsigned int *)__p, (uint64_t)&unk_100740F58, (unsigned int **)buf)
  + 8) = v29;
  v30 = v88;
  LODWORD(__p[0]) = 655360;
  *(_QWORD *)buf = __p;
  *((_WORD *)sub_100646320((uint64_t **)(a1 + 1216), (unsigned int *)__p, (uint64_t)&unk_100740F58, (_DWORD **)buf) + 16) = v30;
  v31 = v87;
  LODWORD(__p[0]) = 655360;
  *(_QWORD *)buf = __p;
  *((_DWORD *)sub_10033EC4C((uint64_t **)(a1 + 1240), (unsigned int *)__p, (uint64_t)&unk_100740F58, (unsigned int **)buf)
  + 8) = v31;
  LOWORD(v31) = v86;
  LODWORD(__p[0]) = 655360;
  *(_QWORD *)buf = __p;
  *((_WORD *)sub_100646320((uint64_t **)(a1 + 1264), (unsigned int *)__p, (uint64_t)&unk_100740F58, (_DWORD **)buf) + 16) = v31;
  v32 = v85;
  LODWORD(__p[0]) = 655360;
  *(_QWORD *)buf = __p;
  *((_DWORD *)sub_10033EC4C((uint64_t **)(a1 + 1288), (unsigned int *)__p, (uint64_t)&unk_100740F58, (unsigned int **)buf)
  + 8) = v32;
  v33 = (uint64_t **)(a1 + 1312);
  __p[0] = (void *)3;
  *(_QWORD *)buf = __p;
  sub_1006463E0((uint64_t **)(a1 + 1312), (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = 0;
  LOBYTE(v29) = *(_BYTE *)(a1 + 1336);
  __p[0] = (void *)(&_mh_execute_header + 3);
  *(_QWORD *)buf = __p;
  sub_1006463E0((uint64_t **)(a1 + 1312), (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = v29;
  __p[0] = (void *)0x200000003;
  *(_QWORD *)buf = __p;
  sub_1006463E0((uint64_t **)(a1 + 1312), (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = 0;
  v34 = *(char *)(a1 + 1337);
  v81 = 24;
  v82 = v34;
  v79 = 5;
  v80 = 1800;
  v78 = 3600;
  v35 = sub_100027F68();
  sub_100091AE8(buf, "CONNECTION");
  sub_100091AE8(__p, "LeConnectionMagnetRSSIThresholdStageOne");
  v36 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v35 + 88))(v35, buf, __p, &v82);
  if (v84 < 0)
    operator delete(__p[0]);
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v36)
      goto LABEL_73;
  }
  else if (!v36)
  {
    goto LABEL_73;
  }
  v37 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v82;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "LeConnectionMagnetRSSIThresholdStageOne =%d (override)", buf, 8u);
  }
LABEL_73:
  v38 = sub_100027F68();
  sub_100091AE8(buf, "CONNECTION");
  sub_100091AE8(__p, "LeConnectionMagnetDisabledToStageOneValue");
  v39 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v38 + 88))(v38, buf, __p, &v81);
  if (v84 < 0)
    operator delete(__p[0]);
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v39)
      goto LABEL_81;
  }
  else if (!v39)
  {
    goto LABEL_81;
  }
  v40 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v81;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "LeConnectionMagnetDisabledToStageOneValue =%d (override)", buf, 8u);
  }
LABEL_81:
  v41 = sub_100027F68();
  sub_100091AE8(buf, "CONNECTION");
  sub_100091AE8(__p, "LeConnectionMagnetTimeDurationFromDisabledToStageOneValue");
  v42 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v41 + 88))(v41, buf, __p, &v80);
  if (v84 < 0)
    operator delete(__p[0]);
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v42)
      goto LABEL_89;
  }
  else if (!v42)
  {
    goto LABEL_89;
  }
  v43 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v80;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "LeConnectionMagnetTimeDurationFromDisabledToStageOneValue =%d (override)", buf, 8u);
  }
LABEL_89:
  v44 = sub_100027F68();
  sub_100091AE8(buf, "CONNECTION");
  sub_100091AE8(__p, "LeConnectionMagnetStageOneToDisabledValue");
  v45 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v44 + 88))(v44, buf, __p, &v79);
  if (v84 < 0)
    operator delete(__p[0]);
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v45)
      goto LABEL_97;
  }
  else if (!v45)
  {
    goto LABEL_97;
  }
  v46 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v79;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "LeConnectionMagnetStageOneToDisabledValue =%d (override)", buf, 8u);
  }
LABEL_97:
  v47 = sub_100027F68();
  sub_100091AE8(buf, "CONNECTION");
  sub_100091AE8(__p, "LeConnectionMagnetTimeDurationFromStageOneToDisabledValue");
  v48 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v47 + 88))(v47, buf, __p, &v78);
  if (v84 < 0)
    operator delete(__p[0]);
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v48)
      goto LABEL_105;
  }
  else if (!v48)
  {
    goto LABEL_105;
  }
  v49 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v78;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "LeConnectionMagnetTimeDurationFromStageOneToDisabledValue =%d (override)", buf, 8u);
  }
LABEL_105:
  __p[0] = (void *)11;
  *(_QWORD *)buf = __p;
  sub_1006463E0((uint64_t **)(a1 + 1312), (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = 0;
  v50 = v82;
  __p[0] = &dword_100000008 + 3;
  *(_QWORD *)buf = __p;
  sub_1006463E0((uint64_t **)(a1 + 1312), (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = v50;
  __p[0] = (void *)0x20000000BLL;
  *(_QWORD *)buf = __p;
  sub_1006463E0((uint64_t **)(a1 + 1312), (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = 0;
  v51 = v81;
  LODWORD(__p[0]) = 11;
  *(_QWORD *)buf = __p;
  *((_WORD *)sub_100646320((uint64_t **)(a1 + 1216), (unsigned int *)__p, (uint64_t)&unk_100740F58, (_DWORD **)buf) + 16) = v51;
  v52 = v80;
  LODWORD(__p[0]) = 11;
  *(_QWORD *)buf = __p;
  *((_DWORD *)sub_10033EC4C((uint64_t **)(a1 + 1240), (unsigned int *)__p, (uint64_t)&unk_100740F58, (unsigned int **)buf)
  + 8) = v52;
  LOWORD(v52) = v79;
  LODWORD(__p[0]) = 11;
  *(_QWORD *)buf = __p;
  *((_WORD *)sub_100646320((uint64_t **)(a1 + 1264), (unsigned int *)__p, (uint64_t)&unk_100740F58, (_DWORD **)buf) + 16) = v52;
  v53 = v78;
  LODWORD(__p[0]) = 11;
  *(_QWORD *)buf = __p;
  *((_DWORD *)sub_10033EC4C((uint64_t **)(a1 + 1288), (unsigned int *)__p, (uint64_t)&unk_100740F58, (unsigned int **)buf)
  + 8) = v53;
  LODWORD(__p[0]) = 16;
  *(_QWORD *)buf = __p;
  *((_WORD *)sub_100646320((uint64_t **)(a1 + 1216), (unsigned int *)__p, (uint64_t)&unk_100740F58, (_DWORD **)buf) + 16) = 12;
  LODWORD(__p[0]) = 16;
  *(_QWORD *)buf = __p;
  *((_DWORD *)sub_10033EC4C((uint64_t **)(a1 + 1240), (unsigned int *)__p, (uint64_t)&unk_100740F58, (unsigned int **)buf)
  + 8) = 1800;
  LODWORD(__p[0]) = 16;
  *(_QWORD *)buf = __p;
  *((_WORD *)sub_100646320((uint64_t **)(a1 + 1264), (unsigned int *)__p, (uint64_t)&unk_100740F58, (_DWORD **)buf) + 16) = 2;
  LODWORD(__p[0]) = 16;
  *(_QWORD *)buf = __p;
  *((_DWORD *)sub_10033EC4C((uint64_t **)(a1 + 1288), (unsigned int *)__p, (uint64_t)&unk_100740F58, (unsigned int **)buf)
  + 8) = 3600;
  __p[0] = (void *)16;
  *(_QWORD *)buf = __p;
  sub_1006463E0((uint64_t **)(a1 + 1312), (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = 0;
  v54 = *(_BYTE *)(a1 + 1338);
  __p[0] = &dword_100000010;
  *(_QWORD *)buf = __p;
  sub_1006463E0((uint64_t **)(a1 + 1312), (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = v54;
  __p[0] = (void *)0x200000010;
  *(_QWORD *)buf = __p;
  sub_1006463E0((uint64_t **)(a1 + 1312), (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = 0;
  __p[0] = (void *)21;
  *(_QWORD *)buf = __p;
  sub_1006463E0((uint64_t **)(a1 + 1312), (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = 0;
  v55 = *(_BYTE *)(a1 + 1339);
  __p[0] = &dword_100000014 + 1;
  *(_QWORD *)buf = __p;
  sub_1006463E0((uint64_t **)(a1 + 1312), (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = v55;
  __p[0] = (void *)0x200000015;
  *(_QWORD *)buf = __p;
  sub_1006463E0((uint64_t **)(a1 + 1312), (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = 0;
  __p[0] = (void *)655360;
  *(_QWORD *)buf = __p;
  sub_1006463E0((uint64_t **)(a1 + 1312), (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = 0;
  v56 = *(_BYTE *)(a1 + 1340);
  __p[0] = &loc_1000A0000;
  *(_QWORD *)buf = __p;
  sub_1006463E0((uint64_t **)(a1 + 1312), (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = v56;
  __p[0] = (void *)0x2000A0000;
  *(_QWORD *)buf = __p;
  sub_1006463E0((uint64_t **)(a1 + 1312), (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = 0;
  v76 = 1800;
  v77 = 12;
  v74 = 3600;
  v75 = 2;
  v57 = sub_100027F68();
  sub_100091AE8(buf, "CONNECTION");
  sub_100091AE8(__p, "LeConnectionThirdPartyAppDisabledToStageOneValue");
  v58 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v57 + 88))(v57, buf, __p, &v77);
  if (v84 < 0)
    operator delete(__p[0]);
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v58)
      goto LABEL_113;
  }
  else if (!v58)
  {
    goto LABEL_113;
  }
  v59 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v77;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "LeConnectionThirdPartyAppDisabledToStageOneValue =%d (override)", buf, 8u);
  }
LABEL_113:
  v60 = sub_100027F68();
  sub_100091AE8(buf, "CONNECTION");
  sub_100091AE8(__p, "LeConnectionThirdPartyAppTimeDurationFromDisabledToStageOneValue");
  v61 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v60 + 88))(v60, buf, __p, &v76);
  if (v84 < 0)
    operator delete(__p[0]);
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v61)
      goto LABEL_121;
  }
  else if (!v61)
  {
    goto LABEL_121;
  }
  v62 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v76;
    _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "LeConnectionThirdPartyAppTimeDurationFromDisabledToStageOneValue =%d (override)", buf, 8u);
  }
LABEL_121:
  v63 = sub_100027F68();
  sub_100091AE8(buf, "CONNECTION");
  sub_100091AE8(__p, "LeConnectionThirdPartyAppStageOneToDisabledValue");
  v64 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v63 + 88))(v63, buf, __p, &v75);
  if (v84 < 0)
    operator delete(__p[0]);
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v64)
      goto LABEL_129;
  }
  else if (!v64)
  {
    goto LABEL_129;
  }
  v65 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v75;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "LeConnectionThirdPartyAppStageOneToDisabledValue =%d (override)", buf, 8u);
  }
LABEL_129:
  v66 = sub_100027F68();
  sub_100091AE8(buf, "CONNECTION");
  sub_100091AE8(__p, "LeConnectionThirdPartyAppTimeDurationFromStageOneToDisabledValue");
  v67 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v66 + 88))(v66, buf, __p, &v74);
  if (v84 < 0)
    operator delete(__p[0]);
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v67)
      goto LABEL_137;
  }
  else if (!v67)
  {
    goto LABEL_137;
  }
  v68 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v74;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "LeConnectionThirdPartyAppTimeDurationFromStageOneToDisabledValue =%d (override)", buf, 8u);
  }
LABEL_137:
  v69 = v77;
  LODWORD(__p[0]) = 23;
  *(_QWORD *)buf = __p;
  *((_WORD *)sub_100646320((uint64_t **)(a1 + 1216), (unsigned int *)__p, (uint64_t)&unk_100740F58, (_DWORD **)buf) + 16) = v69;
  v70 = v76;
  LODWORD(__p[0]) = 23;
  *(_QWORD *)buf = __p;
  *((_DWORD *)sub_10033EC4C((uint64_t **)(a1 + 1240), (unsigned int *)__p, (uint64_t)&unk_100740F58, (unsigned int **)buf)
  + 8) = v70;
  LOWORD(v70) = v75;
  LODWORD(__p[0]) = 23;
  *(_QWORD *)buf = __p;
  *((_WORD *)sub_100646320((uint64_t **)(a1 + 1264), (unsigned int *)__p, (uint64_t)&unk_100740F58, (_DWORD **)buf) + 16) = v70;
  v71 = v74;
  LODWORD(__p[0]) = 23;
  *(_QWORD *)buf = __p;
  *((_DWORD *)sub_10033EC4C((uint64_t **)(a1 + 1288), (unsigned int *)__p, (uint64_t)&unk_100740F58, (unsigned int **)buf)
  + 8) = v71;
  __p[0] = (void *)23;
  *(_QWORD *)buf = __p;
  sub_1006463E0((uint64_t **)(a1 + 1312), (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = 0;
  LOBYTE(v71) = *(_BYTE *)(a1 + 1341);
  __p[0] = &dword_100000014 + 3;
  *(_QWORD *)buf = __p;
  sub_1006463E0((uint64_t **)(a1 + 1312), (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = v71;
  __p[0] = (void *)0x200000017;
  *(_QWORD *)buf = __p;
  sub_1006463E0((uint64_t **)(a1 + 1312), (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = 0;
  LODWORD(__p[0]) = 267;
  *(_QWORD *)buf = __p;
  *((_WORD *)sub_100646320((uint64_t **)(a1 + 1216), (unsigned int *)__p, (uint64_t)&unk_100740F58, (_DWORD **)buf) + 16) = 12;
  LODWORD(__p[0]) = 267;
  *(_QWORD *)buf = __p;
  *((_DWORD *)sub_10033EC4C((uint64_t **)(a1 + 1240), (unsigned int *)__p, (uint64_t)&unk_100740F58, (unsigned int **)buf)
  + 8) = 1800;
  LODWORD(__p[0]) = 267;
  *(_QWORD *)buf = __p;
  *((_WORD *)sub_100646320((uint64_t **)(a1 + 1264), (unsigned int *)__p, (uint64_t)&unk_100740F58, (_DWORD **)buf) + 16) = 2;
  LODWORD(__p[0]) = 267;
  *(_QWORD *)buf = __p;
  *((_DWORD *)sub_10033EC4C((uint64_t **)(a1 + 1288), (unsigned int *)__p, (uint64_t)&unk_100740F58, (unsigned int **)buf)
  + 8) = 3600;
  __p[0] = (void *)267;
  *(_QWORD *)buf = __p;
  sub_1006463E0((uint64_t **)(a1 + 1312), (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = 0;
  v72 = *(_BYTE *)(a1 + 1342);
  __p[0] = &stru_100000100 + 11;
  *(_QWORD *)buf = __p;
  sub_1006463E0(v33, (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf)[36] = v72;
  __p[0] = (void *)0x20000010BLL;
  *(_QWORD *)buf = __p;
  result = sub_1006463E0(v33, (unsigned int *)__p, (uint64_t)&unk_100740F58, (uint64_t **)buf);
  result[36] = 0;
  return result;
}

void sub_1006181BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a20 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100618278(uint64_t a1, void *a2)
{
  id v3;
  char v4;
  int v5;
  unsigned int v6;
  id v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  char v12;
  unsigned int v14[2];
  void *__p[2];
  uint64_t v16;
  void *v17[2];
  uint64_t v18;

  v3 = a2;
  v4 = *(_BYTE *)(a1 + 1109);
  if (v4)
    goto LABEL_34;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v5 = sub_100659F5C((uint64_t)off_1009778C0, v3);
  if (v5)
  {
    if (v5 == -127)
      v4 = 0;
    else
      v4 = v5;
    goto LABEL_34;
  }
  if (!sub_1006184F4(a1, v3))
  {
    v4 = 0;
    goto LABEL_34;
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v6 = sub_1006589A8((uint64_t)off_1009778C0, v3);
  v17[0] = 0;
  v17[1] = 0;
  v18 = 0;
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString")));
  sub_100091AE8(v17, (char *)objc_msgSend(v7, "UTF8String"));

  if (SHIBYTE(v18) < 0)
  {
    sub_10003430C(__p, v17[0], (unint64_t)v17[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v17;
    v16 = v18;
  }
  v8 = sub_10001F2AC(a1 + 1176, (const void **)__p);
  if (a1 + 1184 == v8)
    v9 = 2;
  else
    v9 = *(_DWORD *)(v8 + 56);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  v14[0] = v6;
  v14[1] = v9;
  v10 = sub_100646550(a1 + 1312, v14);
  if (a1 + 1320 == v10)
  {
    v4 = 0;
    goto LABEL_32;
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v11 = sub_100656D70((uint64_t)off_1009778C0, v3);
  v4 = *(_BYTE *)(v10 + 36);
  if (v11 == 1)
    goto LABEL_32;
  if (v9 != 1)
    goto LABEL_30;
  if (v6 == 16)
  {
    v12 = 8;
    goto LABEL_31;
  }
  if (v6 == 267 || v6 == 23)
    v12 = 4;
  else
LABEL_30:
    v12 = 0;
LABEL_31:
  v4 += v12;
LABEL_32:
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
LABEL_34:

  return v4;
}

void sub_100618498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1006184F4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  int v6;

  v3 = a2;
  if (!*(_BYTE *)(a1 + 1110))
  {
    v4 = 0;
    goto LABEL_8;
  }
  if (*(_BYTE *)(a1 + 1109))
    goto LABEL_6;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  if (sub_100659F5C((uint64_t)off_1009778C0, v3))
    goto LABEL_6;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v6 = sub_1006589A8((uint64_t)off_1009778C0, v3);
  v4 = 0;
  if (v6 <= 22)
  {
    if (v6 != 11 && v6 != 16 && v6 != 21)
      goto LABEL_8;
LABEL_6:
    v4 = 1;
    goto LABEL_8;
  }
  if (v6 == 23 || v6 == 267 || v6 == 655360)
    goto LABEL_6;
LABEL_8:

  return v4;
}

void sub_1006185F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100618608(uint64_t a1, int a2)
{
  const unsigned __int8 *v2;
  const unsigned __int8 **v3;
  char v5;
  void *v6;
  id v7;
  void *v8;
  int v9;
  unsigned __int8 *v10;
  const unsigned __int8 **v11;
  BOOL v12;

  v2 = *(const unsigned __int8 **)(a1 + 328);
  v3 = (const unsigned __int8 **)(a1 + 336);
  if (v2 == (const unsigned __int8 *)(a1 + 336))
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    while (1)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v6 = off_1009778C0;
      v7 = sub_100030DF4(v2 + 25);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = sub_1006589A8((uint64_t)v6, v8);

      if (v9 == a2)
        break;
      v10 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
      if (v10)
      {
        do
        {
          v11 = (const unsigned __int8 **)v10;
          v10 = *(unsigned __int8 **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (const unsigned __int8 **)*((_QWORD *)v2 + 2);
          v12 = *v11 == v2;
          v2 = (const unsigned __int8 *)v11;
        }
        while (!v12);
      }
      v5 |= v9 == a2;
      v2 = (const unsigned __int8 *)v11;
      if (v11 == v3)
        return v5 & 1;
    }
    v5 = 1;
  }
  return v5 & 1;
}

void sub_100618710(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100618720(uint64_t a1, void *a2)
{
  id v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  uint8_t v10[16];

  v2 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v3 = sub_100659BAC((uint64_t)off_1009778C0, v2);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v4 = sub_100659A64((uint64_t)off_1009778C0, v2);
  if ((v4 & 4) == 0)
  {
    v5 = 0;
    goto LABEL_16;
  }
  if (v3 != 1)
  {
    if (v3 == 2)
    {
      v6 = 8;
      goto LABEL_13;
    }
    v7 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PHY options are not specified, set to default S2 only", v10, 2u);
    }
  }
  v6 = 16;
LABEL_13:
  v8 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 688))(v8))
    v5 = v6 | v4 | 2;
  else
    v5 = v6 | v4;
LABEL_16:

  return v5;
}

void sub_100618854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100618868(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  _DWORD *v23;
  const char *v24;
  const char *v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  int v28;
  const char *v29;
  unsigned int v30;
  void *v31[2];
  char v32;
  char v33;
  void *__p[2];
  char v35;
  int v36;
  uint8_t buf[8];
  const char *v38;
  uint64_t v39;

  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093DE08);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1);
  v2 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 408))(v2) & 1) == 0)
  {
    v3 = sub_100038E50();
    sub_10043B4A8(v3 + 728, a1 + 8);
  }
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10093DE28);
  sub_1004B983C((uint64_t)off_100977B38, a1 + 24);
  if (qword_100977FD0 != -1)
    dispatch_once(&qword_100977FD0, &stru_10093DE48);
  sub_10039CBB0(qword_100977FC8, a1 + 96);
  v36 = 0;
  v4 = sub_100027F68();
  sub_100091AE8(buf, "CONNECTION");
  sub_100091AE8(__p, "LeConnectionManagerConnectionScansDefaultDuration");
  v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v4 + 88))(v4, buf, __p, &v36);
  if (v35 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39) < 0)
  {
    operator delete(*(void **)buf);
    if (!v5)
      goto LABEL_17;
  }
  else if (!v5)
  {
    goto LABEL_17;
  }
  v6 = v36;
  *(_DWORD *)(a1 + 560) = v36;
  v7 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "LeConnectionManagerConnectionScansDefault duration=%d", buf, 8u);
  }
LABEL_17:
  sub_1000EF6F8((uint64_t)sub_100618EC4);
  *(_QWORD *)buf = 0;
  v38 = 0;
  v39 = 0;
  v8 = sub_100027F68();
  sub_100091AE8(__p, "BTUCMCustomConnectionSegments");
  if (!(*(unsigned int (**)(uint64_t, void **, uint8_t *))(*(_QWORD *)v8 + 120))(v8, __p, buf)
    || v38 == *(const char **)buf)
  {
    if (v35 < 0)
      operator delete(__p[0]);
    goto LABEL_24;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v38[-*(_QWORD *)buf] >> 3);
  if ((v35 & 0x80000000) == 0)
  {
    if ((v9 & 1) == 0)
      goto LABEL_49;
LABEL_24:
    *(_WORD *)(a1 + 112) = 5;
    v10 = malloc_type_malloc(0x28uLL, 0x100004000313F17uLL);
    *(_QWORD *)(a1 + 104) = v10;
    *v10 = xmmword_100742F40;
    v10[1] = xmmword_100742F40;
    *((_QWORD *)v10 + 4) = 500;
    goto LABEL_25;
  }
  operator delete(__p[0]);
  if ((v9 & 1) != 0)
    goto LABEL_24;
LABEL_49:
  v22 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Overriding connection schedule segments with user defined", (uint8_t *)__p, 2u);
  }
  v23 = malloc_type_malloc(0x5555555555555558 * ((unint64_t)&v38[-*(_QWORD *)buf] >> 3), 0x100004000313F17uLL);
  *(_QWORD *)(a1 + 104) = v23;
  v24 = *(const char **)buf;
  v25 = v38;
  if (*(const char **)buf == v38)
  {
    v26 = 0;
  }
  else
  {
    v26 = 0;
    do
    {
      v27 = v26;
      v28 = v24[23];
      v29 = v24;
      if ((v26 & 1) != 0)
      {
        if (v28 < 0)
          v29 = *(const char **)v24;
        v23[2 * (v26 >> 1) + 1] = atoi(v29);
      }
      else
      {
        if (v28 < 0)
          v29 = *(const char **)v24;
        v23[2 * (v26 >> 1)] = atoi(v29);
      }
      v26 = v27 + 1;
      v24 += 24;
    }
    while (v24 != v25);
  }
  *(_WORD *)(a1 + 112) = v26 >> 1;
LABEL_25:
  sub_100616AF0(a1);
  v33 = 0;
  v11 = sub_100027F68();
  sub_100091AE8(__p, "Sentinel");
  sub_100091AE8(v31, "IsFindMyWatchCoexHandled");
  v12 = (*(uint64_t (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v11 + 72))(v11, __p, v31, &v33);
  if (v33)
    v13 = v12;
  else
    v13 = 0;
  if (v32 < 0)
    operator delete(v31[0]);
  if (v35 < 0)
  {
    operator delete(__p[0]);
    if (!v13)
      goto LABEL_36;
  }
  else if (!v13)
  {
    goto LABEL_36;
  }
  v14 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Overriding to handle Coex on watchOS for FindMy.", (uint8_t *)__p, 2u);
  }
LABEL_36:
  v15 = sub_10003BE44();
  *(_BYTE *)(a1 + 1368) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 840))(v15);
  v16 = sub_10003BE44();
  *(_BYTE *)(a1 + 1369) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 880))(v16);
  v17 = sub_10003BE44();
  *(_BYTE *)(a1 + 1370) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 928))(v17);
  if (*(_BYTE *)(a1 + 1369))
  {
    v30 = *(unsigned __int16 *)(a1 + 1374);
    v18 = sub_100027F68();
    sub_100091AE8(__p, "LE");
    sub_100091AE8(v31, "LEInstantFactorMacAU");
    v19 = (*(uint64_t (**)(uint64_t, void **, void **, unsigned int *))(*(_QWORD *)v18 + 88))(v18, __p, v31, &v30);
    if (v32 < 0)
      operator delete(v31[0]);
    if (v35 < 0)
    {
      operator delete(__p[0]);
      if (!v19)
        goto LABEL_47;
    }
    else if (!v19)
    {
      goto LABEL_47;
    }
    if (HIWORD(v30))
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_1007115E8();
    }
    else
    {
      *(_WORD *)(a1 + 1374) = v30;
    }
  }
LABEL_47:
  v20 = sub_10003BE44();
  *(_BYTE *)(a1 + 1371) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 832))(v20);
  v21 = sub_100065478();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 608))(v21, *(unsigned __int8 *)(a1 + 1371));
  __p[0] = buf;
  sub_100091BF8((void ***)__p);
}

void sub_100618E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void **a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  a18 = &a25;
  sub_100091BF8(&a18);
  _Unwind_Resume(a1);
}

void sub_100618EC4(uint64_t a1, char a2, int a3, char a4, int a5)
{
  uint64_t v10;
  _QWORD v11[5];
  int v12;
  int v13;
  char v14;
  char v15;

  v10 = sub_1000419F4();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100645FE8;
  v11[3] = &unk_1009186D0;
  v11[4] = a1;
  v14 = a2;
  v15 = a4;
  v12 = a3;
  v13 = a5;
  sub_100041A34(v10, v11);
}

_BYTE *sub_100618F50(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  _BOOL4 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v14[5];
  void *__p[2];
  char v16;
  int v17;
  char v18;
  uint8_t buf[8];
  uint64_t v20;
  char v21;

  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stack Will Start", buf, 2u);
  }
  v18 = 0;
  sub_100043758(&v18);
  if (sub_100225224())
  {
    v3 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3))
    {
      v17 = 0;
      v4 = sub_100027F68();
      sub_100091AE8(buf, "CONNECTION");
      sub_100091AE8(__p, "ForceConnectionDelay");
      v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v4 + 88))(v4, buf, __p, &v17);
      if (v16 < 0)
        operator delete(__p[0]);
      if (v21 < 0)
        operator delete(*(void **)buf);
      v6 = qword_100999890;
      v7 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT);
      if (v5)
      {
        if (v7)
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v17;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ForceConnectionDelay=%d", buf, 8u);
        }
        sub_1002251A4(v17);
      }
      else if (v7)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Could not find ForceConnectionDelay", buf, 2u);
      }
    }
    sub_100223CB4();
    if (sub_100221B74(8))
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_1007118A4();
    }
    else if (sub_100221B74(4))
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_100711844();
    }
    else if (sub_10021F6A8((uint64_t)off_10093D5A0))
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_1007117E4();
    }
    else if (sub_10021F770((uint64_t)off_10093D5E0))
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_100711784();
    }
    else if (sub_100221860((uint64_t)sub_100619398))
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_100711724();
    }
    else if (sub_1002219E0((uint64_t)sub_1006194E8))
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_1007116C4();
    }
    else if (sub_100239D00((uint64_t)off_10093D5D0))
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_100711664();
    }
    else
    {
      sub_100221B0C((uint64_t (*)(void))sub_10061955C);
      sub_100221B38(sub_10061964C);
      if (*(_WORD *)(a1 + 828))
        sub_100215970(*(unsigned __int16 *)(a1 + 828));
      v8 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 352))(v8))
      {
        v9 = *(void **)(a1 + 1512);
        v10 = *(_QWORD *)(a1 + 1520);
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = sub_100619768;
        v14[3] = &unk_10093D638;
        v14[4] = a1;
        objc_msgSend(v9, "startActivityUpdatesToQueue:withHandler:", v10, v14);
      }
      v11 = *(void **)(a1 + 1504);
      *(_QWORD *)(a1 + 1504) = 0;

      *(_BYTE *)(a1 + 1528) = 1;
      sub_10004339C(&v18);
      *(_BYTE *)(a1 + 1058) = 0;
      *(_QWORD *)buf = 0;
      v20 = 0;
      v12 = sub_10003415C((uint64_t)buf, a1 + 120);
      sub_100034234(v12);
    }
  }
  return sub_100043728(&v18);
}

void sub_100619340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  sub_100043728((_BYTE *)(v20 - 65));
  _Unwind_Resume(a1);
}

void sub_100619398()
{
  uint64_t v0;
  _QWORD v1[5];
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  __n128 (*v5)(__n128 *, __n128 *);
  uint64_t (*v6)();
  void *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 v10[8];

  *(_DWORD *)&v10[3] = 0;
  *(_DWORD *)v10 = 0;
  sub_100073B84((uint64_t)v10);
  v2 = 0;
  v3 = &v2;
  v4 = 0x4012000000;
  v5 = sub_10006273C;
  v6 = nullsub_24;
  v8 = ((unint64_t)v10[1] << 40) | ((unint64_t)v10[2] << 32) | ((unint64_t)v10[3] << 24) | ((unint64_t)v10[4] << 16) | ((unint64_t)v10[5] << 8) | v10[6] | ((unint64_t)v10[0] << 48);
  v9 = 0;
  v7 = &unk_10083E079;
  sub_10022467C(1u, (uint64_t)v10);
  v3[7] = ((unint64_t)v10[1] << 40) | ((unint64_t)v10[2] << 32) | ((unint64_t)v10[3] << 24) | ((unint64_t)v10[4] << 16) | ((unint64_t)v10[5] << 8) | v10[6] | ((unint64_t)v10[0] << 48);
  v0 = sub_1000419F4();
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_10063EF70;
  v1[3] = &unk_1009193E8;
  v1[4] = &v2;
  sub_100041A34(v0, v1);
  _Block_object_dispose(&v2, 8);
}

void sub_1006194D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1006194E8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[16];

  v0 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "LeConnectionManager::leAddressWillChangeCallback", v2, 2u);
  }
  v1 = sub_1000419F4();
  sub_100041A34(v1, &stru_10093DBE0);
}

void sub_10061955C(uint64_t a1, char a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, int a7, char a8)
{
  char v16;
  uint64_t v17;
  _QWORD v18[5];
  int v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  char v24;
  char v25;
  char v26;

  if (a1)
  {
    v16 = *(_BYTE *)(a1 + 70);
    v17 = sub_1000419F4();
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10063B398;
    v18[3] = &unk_10093DA90;
    v18[4] = a1;
    v24 = a2;
    v20 = a3;
    v21 = a4;
    v22 = a5;
    v23 = a6;
    v19 = a7;
    v25 = v16;
    v26 = a8;
    sub_100041A34(v17, v18);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
  {
    sub_100711904();
  }
}

void sub_10061964C(char a1, __int16 a2, __int16 a3, unsigned int a4, unint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  uint64_t v12[3];
  __int16 v13;
  __int16 v14;
  char v15;
  uint64_t *v16;
  _QWORD *v17[2];

  v17[0] = 0;
  v17[1] = 0;
  v16 = (uint64_t *)v17;
  if (a4)
  {
    v9 = a4;
    do
    {
      sub_10000F7A0(&v16, a5, (uint64_t *)a5);
      ++a5;
      --v9;
    }
    while (v9);
  }
  v10 = sub_1000419F4();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_10063C760;
  v11[3] = &unk_10093DAB0;
  v15 = a1;
  v13 = a2;
  v14 = a3;
  sub_100648080(v12, (uint64_t)&v16);
  sub_100041A34(v10, v11);
  sub_10001A82C((uint64_t)v12, (_QWORD *)v12[1]);
  sub_10001A82C((uint64_t)&v16, v17[0]);
}

void sub_100619738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15, uint64_t a16, uint64_t a17, char a18, _QWORD *a19)
{
  uint64_t v19;

  sub_10001A82C(v19, a15);
  sub_10001A82C((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void sub_100619768(uint64_t a1, void *a2)
{
  sub_100619770(*(_QWORD *)(a1 + 32), a2);
}

void sub_100619770(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD v8[5];

  v4 = a2;
  v5 = sub_1000438A4();
  if (sub_100333DE4(v5, 3) && objc_msgSend(v4, "confidence") == (id)2)
  {
    if (!*(_QWORD *)(a1 + 1504)
      || (v6 = *(unsigned __int8 *)(a1 + 1528), v6 != objc_msgSend(v4, "stationary")))
    {
      objc_storeStrong((id *)(a1 + 1504), a2);
      *(_BYTE *)(a1 + 1528) = objc_msgSend(v4, "stationary");
      if ((objc_msgSend(v4, "stationary") & 1) == 0)
      {
        v7 = sub_1000419F4();
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 3221225472;
        v8[2] = sub_10061D82C;
        v8[3] = &unk_100917378;
        v8[4] = a1;
        sub_100041A34(v7, v8);
      }
    }
  }

}

void sub_100619848(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_BYTE *sub_100619858(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[5];
  char v30;
  int v31;
  void *__p[2];
  char v33;
  char v34;
  unsigned __int8 v35[8];
  unsigned __int8 v36[10];
  char v37;
  unsigned __int8 v38;
  uint8_t buf[16];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[31];

  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stack Did Start", buf, 2u);
  }
  v3 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 352))(v3, 1);
  v4 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 464))(v4, 12, 1);
  v5 = *(_DWORD *)(sub_1000438A4() + 712);
  if ((v5 - 1) > 0xA)
  {
    if ((v5 - 2000) <= 0x7CF)
    {
      v7 = sub_1000438A4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 872))(v7, 14, 1);
    }
  }
  else
  {
    v6 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 872))(v6, 7, 1);
  }
  v8 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 1000))(v8, 10);
  v9 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 3448))(v9))
  {
    v10 = sub_1000438A4();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 3456))(v10, 0);
  }
  *(_BYTE *)(a1 + 184) = 1;
  *(_BYTE *)(a1 + 1000) = 1;
  *(_WORD *)(a1 + 1056) = 1;
  *(_BYTE *)(a1 + 1059) = 0;
  v11 = sub_100038E50();
  sub_100260C8C(v11 + 368, a1 + 16);
  v12 = sub_100038E50();
  sub_10046E1C0(v12 + 328, a1 + 88);
  v38 = 0;
  *(_BYTE *)(a1 + 625) = 0;
  v13 = sub_100038E50();
  (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v13 + 72))(v13, &v38);
  v14 = sub_100038E50();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 80))(v14, a1 + 625);
  v15 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(unsigned __int8 *)(a1 + 625);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v16;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v38;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Low Power mode: %d. Airplane Mode: %d", buf, 0xEu);
  }
  v37 = 0;
  sub_100043758(&v37);
  *(_DWORD *)&v36[3] = 0;
  *(_DWORD *)v36 = 0;
  *(_DWORD *)&v35[3] = 0;
  *(_DWORD *)v35 = 0;
  sub_100073B84((uint64_t)v36);
  sub_10022467C(1u, (uint64_t)v35);
  *(_QWORD *)(a1 + 1569) = sub_100192EE4();
  sub_10004339C(&v37);
  v17 = ((unint64_t)v35[1] << 40) | ((unint64_t)v35[2] << 32) | ((unint64_t)v35[3] << 24) | ((unint64_t)v35[4] << 16) | ((unint64_t)v35[5] << 8) | v35[6] | ((unint64_t)v35[0] << 48);
  *(_QWORD *)(a1 + 288) = ((unint64_t)v36[1] << 40) | ((unint64_t)v36[2] << 32) | ((unint64_t)v36[3] << 24) | ((unint64_t)v36[4] << 16) | ((unint64_t)v36[5] << 8) | v36[6] | ((unint64_t)v36[0] << 48);
  *(_QWORD *)(a1 + 296) = v17;
  *(CFAbsoluteTime *)(a1 + 320) = CFAbsoluteTimeGetCurrent();
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10093DE28);
  sub_1004BA834((uint64_t)off_100977B38, 0);
  sub_100619F84(a1, 0, 0, 1);
  if (qword_100993EF0 != -1)
    dispatch_once(&qword_100993EF0, &stru_10093D658);
  v34 = 0;
  v18 = sub_100027F68();
  sub_100091AE8(buf, "Magnet");
  sub_100091AE8(__p, "DisableMagnetSetLatency");
  v19 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v18 + 72))(v18, buf, __p, &v34);
  if (v33 < 0)
    operator delete(__p[0]);
  if ((SBYTE7(v40) & 0x80000000) == 0)
  {
    if (!v19)
      goto LABEL_20;
    goto LABEL_19;
  }
  operator delete(*(void **)buf);
  if (v19)
LABEL_19:
    *(_BYTE *)(a1 + 624) = 1;
LABEL_20:
  v31 = 0;
  *(_BYTE *)(a1 + 1496) = 0;
  v20 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ConnectionScanTimeoutOverride");
  v21 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v20 + 88))(v20, buf, __p, &v31);
  if (v33 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v40) < 0)
  {
    operator delete(*(void **)buf);
    if (!v21)
      goto LABEL_31;
  }
  else if (!v21)
  {
    goto LABEL_31;
  }
  v22 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v31;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Warning: LeConnectionScanTimeoutOverride: Using override value (%d) for fLeConnectionScanTimeoutOverride", buf, 8u);
  }
  *(_DWORD *)(a1 + 1500) = v31;
  *(_BYTE *)(a1 + 1496) = 1;
LABEL_31:
  sub_1006460DC(a1 + 1424, *(_QWORD **)(a1 + 1432));
  *(_QWORD *)(a1 + 1424) = a1 + 1432;
  *(_QWORD *)(a1 + 1440) = 0;
  *(_QWORD *)(a1 + 1432) = 0;
  sub_1006460DC(a1 + 1448, *(_QWORD **)(a1 + 1456));
  *(_QWORD *)(a1 + 1448) = a1 + 1456;
  *(_QWORD *)(a1 + 1464) = 0;
  *(_QWORD *)(a1 + 1456) = 0;
  LOBYTE(__p[0]) = -1;
  v52 = 0u;
  memset(v53, 0, sizeof(v53));
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  *(_OWORD *)buf = 0u;
  v30 = 0;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093DE08);
  if (*((_BYTE *)off_100977A50 + 540))
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100711990();
  }
  else
  {
    v23 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t, char *, void **, uint8_t *))(*(_QWORD *)v23 + 1864))(v23, &v30, __p, buf))
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_100711930();
    }
    else
    {
      v24 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", buf, LOBYTE(__p[0])));
      v25 = *(void **)(a1 + 1560);
      *(_QWORD *)(a1 + 1560) = v24;

      *(_BYTE *)(a1 + 1568) = v30;
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_10061A418;
      v29[3] = &unk_10093D678;
      v29[4] = a1;
      sub_1006169D0((os_unfair_lock_s *)a1, v29);
      v26 = sub_1000419F4();
      sub_100041A34(v26, &stru_10093D698);
    }
  }
  v27 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 328))(v27))
  {
    if (qword_10097AC58 != -1)
      dispatch_once(&qword_10097AC58, &stru_10093DE68);
    sub_1006C00E8(qword_10097AC50, 0x10000u);
    if (qword_10097AC58 != -1)
      dispatch_once(&qword_10097AC58, &stru_10093DE68);
    sub_1006C00E8(qword_10097AC50, 0x10001u);
  }
  return sub_100043728(&v37);
}

void sub_100619F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a20 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  sub_100043728(&a25);
  _Unwind_Resume(a1);
}

void sub_100619F84(uint64_t a1, void *a2, char a3, int a4)
{
  id v7;
  uint64_t v8;
  const unsigned __int8 *v9;
  char v10;
  id v11;
  void *v12;
  int v13;
  id v14;
  void *v15;
  int v16;
  id v17;
  void *v18;
  unsigned __int8 *v19;
  const unsigned __int8 **v20;
  int v21;
  char v22;
  NSObject *v23;
  int v24;
  char v25;
  BOOL v26;
  NSObject *v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  int v31;
  id v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;

  v7 = a2;
  v8 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 2632))(v8))
  {
    v9 = *(const unsigned __int8 **)(a1 + 328);
    v10 = -127;
    if (v9 != (const unsigned __int8 *)(a1 + 336))
    {
      do
      {
        v11 = sub_100030DF4(v9 + 25);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        v13 = sub_100618278(a1, v12);

        if (v13)
        {
          v14 = sub_100030DF4(v9 + 25);
          v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
          v16 = sub_100618278(a1, v15);

          if (v16 > v10)
          {
            v17 = sub_100030DF4(v9 + 25);
            v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
            v10 = sub_100618278(a1, v18);

          }
        }
        v19 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
        if (v19)
        {
          do
          {
            v20 = (const unsigned __int8 **)v19;
            v19 = *(unsigned __int8 **)v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (const unsigned __int8 **)*((_QWORD *)v9 + 2);
            v26 = *v20 == v9;
            v9 = (const unsigned __int8 *)v20;
          }
          while (!v26);
        }
        v9 = (const unsigned __int8 *)v20;
      }
      while (v20 != (const unsigned __int8 **)(a1 + 336));
    }
    v21 = *(unsigned __int8 *)(a1 + 1112);
    if (*(_BYTE *)(a1 + 1112))
      v22 = *(_BYTE *)(a1 + 1112);
    else
      v22 = v10;
    if (sub_100618608(a1, 3))
    {
      v23 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        v24 = *(char *)(a1 + 728);
        v31 = 67109120;
        LODWORD(v32) = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "FindMy object connection enabled, skipping Global RSSI. LastApplied =%d dBm)", (uint8_t *)&v31, 8u);
      }
      if (*(_BYTE *)(a1 + 728))
      {
        v22 = 0;
        a4 = 1;
      }
    }
    if (a4)
      v25 = a3;
    else
      v25 = v22;
    if ((a4 & 1) != 0 || (v22 == a3 ? (v26 = v21 == 0) : (v26 = 0), !v26))
    {
      *(_BYTE *)(a1 + 728) = v25;
      v27 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        v31 = 138544386;
        v32 = v7;
        v33 = 1024;
        v34 = -1;
        v35 = 1024;
        v36 = -1;
        v37 = 1024;
        v38 = -1;
        v39 = 1024;
        v40 = v25;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Applying configureCreateConnection for device \"%{public}@\" to connection filter accept list with option Timeout=%d, smartNotification=%d, connectRequestRetry=%d, minRssiToUpdate=%d", (uint8_t *)&v31, 0x24u);
      }
      v28 = sub_1000438A4();
      v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v28 + 1648))(v28, 255, 255, 255, v25);
      if (v29)
      {
        v30 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          v31 = 67109120;
          LODWORD(v32) = v29;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "configureCreateConnection failed with error %d", (uint8_t *)&v31, 8u);
        }
      }
    }
  }

}

void sub_10061A268(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10061A2A8(id a1)
{
  uint64_t v1;
  int v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  int v8;
  uint8_t buf[8];
  char v10;

  v8 = 0;
  v1 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "FastConnectionOverrideInstance");
  v2 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v1 + 88))(v1, buf, __p, &v8);
  if (v8 > 0)
    v3 = v2;
  else
    v3 = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3)
      return;
  }
  else if (!v3)
  {
    return;
  }
  v4 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "FastLEConnection:calling setMaxInstantUpdateForFastLEConnection with %d", buf, 8u);
  }
  v5 = sub_1000438A4();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 1888))(v5, v8);
}

void sub_10061A3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10061A418(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 1568), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 1560));
}

void sub_10061A438(id a1)
{
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  sub_10065B948((uint64_t)off_1009778C0);
}

_BYTE *sub_10061A478(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const unsigned __int8 *v19;
  const unsigned __int8 **v20;
  uint64_t v21;
  id v22;
  void *v23;
  unsigned __int8 *v24;
  const unsigned __int8 **v25;
  BOOL v26;
  const unsigned __int8 *v27;
  const unsigned __int8 **v28;
  uint64_t v29;
  id v30;
  void *v31;
  unsigned __int8 *v32;
  const unsigned __int8 **v33;
  id v34;
  id v35;
  uint64_t v36;
  void *v37;
  id v38;
  NSObject *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  NSObject *v44;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  uint8_t v55[128];
  uint8_t v56[4];
  int v57;
  __int128 buf;

  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LeConnectionManager::stackWillStop enter", (uint8_t *)&buf, 2u);
  }
  v3 = sub_100038E50();
  sub_1002B43D4(v3 + 368, a1 + 16);
  v4 = sub_100038E50();
  sub_1002B43D4(v4 + 328, a1 + 88);
  v54 = 0;
  sub_100043758(&v54);
  if (sub_100225224())
  {
    sub_10004339C(&v54);
    *(_BYTE *)(a1 + 1059) = 1;
    v5 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD *)(a1 + 344);
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Trying to cancel all pending connections (%lu)", (uint8_t *)&buf, 0xCu);
    }
    buf = 0uLL;
    sub_10003415C((uint64_t)&buf, a1 + 120);
    if (*(_QWORD *)(a1 + 344)
      && !sub_10061AF78(a1, 1)
      && *(_BYTE *)(a1 + 1056)
      && !sub_100043714((pthread_cond_t *)(a1 + 1008), (pthread_mutex_t **)&buf, 0x1388uLL))
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_100711A48();
      v47 = sub_100027F68();
      sub_100091AE8(&v53, "");
      sub_1005756F0(v47, 141, &v53, 1);
    }
    sub_100034264((uint64_t)&buf);
    sub_10006D81C(&v54);
    v7 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Trying to disconnect all LE connections", v56, 2u);
    }
    v8 = sub_100223ED0((uint64_t (*)(void))sub_10061B55C);
    if (v8)
    {
      v9 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v56 = 67109120;
        v57 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "LE_GAP_DisconnectAll returned %{bluetooth:OI_STATUS}u", v56, 8u);
      }
    }
    sub_10004339C(&v54);
    v10 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v56 = 67109120;
      v57 = 5000;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "waiting for all LE devices complete disconnection, timeout %d", v56, 8u);
    }
    sub_100034188((uint64_t)&buf);
    if (!v8
      && *(_BYTE *)(a1 + 1000)
      && !sub_100043714((pthread_cond_t *)(a1 + 952), (pthread_mutex_t **)&buf, 0x1388uLL))
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_100711A1C();
      v46 = sub_100027F68();
      sub_100091AE8(&v52, "");
      sub_1005756F0(v46, 141, &v52, 1);
    }
    sub_100034264((uint64_t)&buf);
    byte_100999BB8 = 0;
    byte_100999BB9 = 0;
    sub_1000445E0(&stru_100999B08);
    sub_1000445E0(&stru_100999AD8);
    v11 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "No more LE connections", v56, 2u);
    }
    sub_1000445E0(&stru_100999BC0);
    byte_100999C30 = 0;
    sub_10006D81C(&v54);
    if (sub_100221C18(8, v12, v13, v14, v15, v16, v17, v18)
      && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    {
      sub_1007119BC();
    }
    sub_10021F838((uint64_t)off_10093D5A0);
    sub_100221928((uint64_t)sub_100619398);
    sub_10004339C(&v54);
    sub_100034188((uint64_t)&buf);
    *(_BYTE *)(a1 + 184) = 0;
    v19 = *(const unsigned __int8 **)(a1 + 376);
    v20 = (const unsigned __int8 **)(a1 + 384);
    if (v19 != (const unsigned __int8 *)(a1 + 384))
    {
      do
      {
        if (qword_10097AC58 != -1)
          dispatch_once(&qword_10097AC58, &stru_10093DE68);
        v21 = qword_10097AC50;
        v22 = sub_100030DF4(v19 + 32);
        v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        sub_1006C135C(v21, v23, 0);

        v24 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
        if (v24)
        {
          do
          {
            v25 = (const unsigned __int8 **)v24;
            v24 = *(unsigned __int8 **)v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v25 = (const unsigned __int8 **)*((_QWORD *)v19 + 2);
            v26 = *v25 == v19;
            v19 = (const unsigned __int8 *)v25;
          }
          while (!v26);
        }
        v19 = (const unsigned __int8 *)v25;
      }
      while (v25 != v20);
    }
    sub_10001A82C(a1 + 376, *(_QWORD **)(a1 + 384));
    *(_QWORD *)(a1 + 384) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 376) = v20;
    v27 = *(const unsigned __int8 **)(a1 + 328);
    v28 = (const unsigned __int8 **)(a1 + 336);
    if (v27 != (const unsigned __int8 *)(a1 + 336))
    {
      do
      {
        if (qword_10097AC58 != -1)
          dispatch_once(&qword_10097AC58, &stru_10093DE68);
        v29 = qword_10097AC50;
        v30 = sub_100030DF4(v27 + 25);
        v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
        sub_1006C135C(v29, v31, 0);

        v32 = (unsigned __int8 *)*((_QWORD *)v27 + 1);
        if (v32)
        {
          do
          {
            v33 = (const unsigned __int8 **)v32;
            v32 = *(unsigned __int8 **)v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            v33 = (const unsigned __int8 **)*((_QWORD *)v27 + 2);
            v26 = *v33 == v27;
            v27 = (const unsigned __int8 *)v33;
          }
          while (!v26);
        }
        v27 = (const unsigned __int8 *)v33;
      }
      while (v33 != v28);
    }
    sub_10001A82C(a1 + 328, *(_QWORD **)(a1 + 336));
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    *(_QWORD *)(a1 + 328) = v28;
    sub_10001A82C(a1 + 600, *(_QWORD **)(a1 + 608));
    *(_QWORD *)(a1 + 600) = a1 + 608;
    *(_QWORD *)(a1 + 616) = 0;
    *(_QWORD *)(a1 + 608) = 0;
    sub_10001A82C(a1 + 352, *(_QWORD **)(a1 + 360));
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 352) = a1 + 360;
    sub_10001A82C(a1 + 632, *(_QWORD **)(a1 + 640));
    *(_QWORD *)(a1 + 632) = a1 + 640;
    *(_QWORD *)(a1 + 648) = 0;
    *(_QWORD *)(a1 + 640) = 0;
    sub_10001A82C(a1 + 656, *(_QWORD **)(a1 + 664));
    *(_QWORD *)(a1 + 656) = a1 + 664;
    *(_QWORD *)(a1 + 672) = 0;
    *(_QWORD *)(a1 + 664) = 0;
    sub_10001A82C(a1 + 680, *(_QWORD **)(a1 + 688));
    *(_QWORD *)(a1 + 680) = a1 + 688;
    *(_QWORD *)(a1 + 696) = 0;
    *(_QWORD *)(a1 + 688) = 0;
    sub_10001A82C(a1 + 704, *(_QWORD **)(a1 + 712));
    *(_QWORD *)(a1 + 704) = a1 + 712;
    *(_QWORD *)(a1 + 720) = 0;
    *(_QWORD *)(a1 + 712) = 0;
    sub_10001A82C(a1 + 400, *(_QWORD **)(a1 + 408));
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 400) = a1 + 408;
    sub_10001A82C(a1 + 424, *(_QWORD **)(a1 + 432));
    *(_QWORD *)(a1 + 432) = 0;
    *(_QWORD *)(a1 + 440) = 0;
    *(_QWORD *)(a1 + 424) = a1 + 432;
    sub_10001A82C(a1 + 832, *(_QWORD **)(a1 + 840));
    *(_QWORD *)(a1 + 832) = a1 + 840;
    *(_QWORD *)(a1 + 848) = 0;
    *(_QWORD *)(a1 + 840) = 0;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    v34 = *(id *)(a1 + 736);
    v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v48, v55, 16);
    if (v35)
    {
      v36 = *(_QWORD *)v49;
      do
      {
        v37 = 0;
        do
        {
          if (*(_QWORD *)v49 != v36)
            objc_enumerationMutation(v34);
          v38 = *(id *)(*((_QWORD *)&v48 + 1) + 8 * (_QWORD)v37);
          if (qword_10097AC58 != -1)
            dispatch_once(&qword_10097AC58, &stru_10093DE68);
          sub_1006C135C(qword_10097AC50, v38, 0);

          v37 = (char *)v37 + 1;
        }
        while (v35 != v37);
        v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v48, v55, 16);
      }
      while (v35);
    }

    objc_msgSend(*(id *)(a1 + 736), "removeAllObjects", (_QWORD)v48);
    objc_msgSend(*(id *)(a1 + 744), "removeAllObjects");
    objc_msgSend(*(id *)(a1 + 752), "removeAllObjects");
    objc_msgSend(*(id *)(a1 + 760), "removeAllObjects");
    objc_msgSend(*(id *)(a1 + 768), "removeAllObjects");
    objc_msgSend(*(id *)(a1 + 776), "removeAllObjects");
    objc_msgSend(*(id *)(a1 + 784), "removeAllObjects");
    objc_msgSend(*(id *)(a1 + 816), "removeAllObjects");
    sub_10001A82C(a1 + 448, *(_QWORD **)(a1 + 456));
    *(_QWORD *)(a1 + 456) = 0;
    *(_QWORD *)(a1 + 464) = 0;
    *(_QWORD *)(a1 + 448) = a1 + 456;
    sub_10001A82C(a1 + 472, *(_QWORD **)(a1 + 480));
    *(_QWORD *)(a1 + 480) = 0;
    *(_QWORD *)(a1 + 488) = 0;
    *(_QWORD *)(a1 + 472) = a1 + 480;
    sub_10001A82C(a1 + 496, *(_QWORD **)(a1 + 504));
    *(_QWORD *)(a1 + 504) = 0;
    *(_QWORD *)(a1 + 512) = 0;
    *(_QWORD *)(a1 + 496) = a1 + 504;
    sub_10001A82C(a1 + 520, *(_QWORD **)(a1 + 528));
    *(_QWORD *)(a1 + 520) = a1 + 528;
    *(_QWORD *)(a1 + 536) = 0;
    *(_QWORD *)(a1 + 528) = 0;
    sub_10001A82C(a1 + 792, *(_QWORD **)(a1 + 800));
    *(_QWORD *)(a1 + 792) = a1 + 800;
    *(_QWORD *)(a1 + 808) = 0;
    *(_QWORD *)(a1 + 800) = 0;
    v39 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Setting initial connection state", v56, 2u);
    }
    sub_10061B638(a1, 0);
    sub_10061B9F0((os_unfair_lock_s *)a1, 0);
    sub_10061BB74(a1);
    sub_10061BC50(a1);
    sub_100068038(a1 + 928, *(_QWORD **)(a1 + 936));
    *(_QWORD *)(a1 + 928) = a1 + 936;
    *(_QWORD *)(a1 + 944) = 0;
    *(_QWORD *)(a1 + 936) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    sub_1002F655C(a1 + 1144, *(_QWORD **)(a1 + 1152));
    *(_QWORD *)(a1 + 1144) = a1 + 1152;
    *(_QWORD *)(a1 + 1160) = 0;
    *(_QWORD *)(a1 + 1152) = 0;
    sub_100056BAC(a1 + 1176, *(char **)(a1 + 1184));
    *(_QWORD *)(a1 + 1176) = a1 + 1184;
    *(_QWORD *)(a1 + 1192) = 0;
    *(_QWORD *)(a1 + 1184) = 0;
    sub_100056BAC(a1 + 1344, *(char **)(a1 + 1352));
    *(_QWORD *)(a1 + 1344) = a1 + 1352;
    *(_QWORD *)(a1 + 1360) = 0;
    *(_QWORD *)(a1 + 1352) = 0;
    sub_10001A82C(a1 + 1376, *(_QWORD **)(a1 + 1384));
    *(_QWORD *)(a1 + 1376) = a1 + 1384;
    *(_QWORD *)(a1 + 1392) = 0;
    *(_QWORD *)(a1 + 1384) = 0;
    sub_10001A82C(a1 + 1120, *(_QWORD **)(a1 + 1128));
    *(_QWORD *)(a1 + 1120) = a1 + 1128;
    *(_QWORD *)(a1 + 1136) = 0;
    *(_QWORD *)(a1 + 1128) = 0;
    sub_1004AF56C(a1 + 32);
    sub_1006460DC(a1 + 1424, *(_QWORD **)(a1 + 1432));
    *(_QWORD *)(a1 + 1424) = a1 + 1432;
    *(_QWORD *)(a1 + 1440) = 0;
    *(_QWORD *)(a1 + 1432) = 0;
    sub_1006460DC(a1 + 1448, *(_QWORD **)(a1 + 1456));
    *(_QWORD *)(a1 + 1448) = a1 + 1456;
    *(_QWORD *)(a1 + 1464) = 0;
    *(_QWORD *)(a1 + 1456) = 0;
    sub_10061BCE4(a1);
    v40 = sub_1000438A4();
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 3656))(v40);
    objc_msgSend(*(id *)(a1 + 1512), "stopActivityUpdates");
    v41 = *(void **)(a1 + 1512);
    *(_QWORD *)(a1 + 1512) = 0;

    v42 = *(void **)(a1 + 1520);
    *(_QWORD *)(a1 + 1520) = 0;

    v43 = *(void **)(a1 + 1504);
    *(_QWORD *)(a1 + 1504) = 0;

    *(_BYTE *)(a1 + 1528) = 1;
    v44 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "LeConnectionManager::stackWillStop exit", v56, 2u);
    }
    sub_100034234((uint64_t)&buf);
  }
  return sub_100043728(&v54);
}

void sub_10061AEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a29 < 0)
    operator delete(__p);
  sub_100034234(v33 - 112);
  sub_100043728(&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_10061AF78(uint64_t a1, int a2)
{
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSObject *v20;
  unsigned int v21;
  unint64_t v22;
  NSObject *v23;
  uint64_t v24;
  const char *v25;
  NSObject *v26;
  uint64_t v28;
  char *v29;
  void **v30;
  int v31;
  int v32;
  void **v33;
  void **v34;
  void **v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43[2];
  char v44;
  void *__p[2];
  char v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  _QWORD v50[2];
  _BYTE buf[34];
  int v52;

  v50[0] = 0;
  v50[1] = 0;
  sub_10003415C((uint64_t)v50, a1 + 120);
  v4 = *(_QWORD *)(a1 + 344);
  if (a2)
  {
    v5 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Clearing fDevicesToAddToFilterAcceptList", buf, 2u);
    }
    objc_msgSend(*(id *)(a1 + 760), "removeAllObjects");
  }
  if (*(_DWORD *)(a1 + 856) == 1)
  {
    if (v4)
    {
      v6 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        v7 = "connection";
        if (v4 > 1)
          v7 = "connections";
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)&buf[4] = v4;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cancelling %lu pending %{public}s", buf, 0x16u);
      }
      v49 = 0;
      v8 = sub_100043758(&v49);
      v16 = sub_100221D2C((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15);
      sub_10004339C(&v49);
      if ((v16 - 1301) >= 2)
      {
        if (!(_DWORD)v16)
        {
          sub_10061B638(a1, 2u);
LABEL_25:
          sub_100043728(&v49);
          goto LABEL_26;
        }
        if ((_DWORD)v16 != 3704)
        {
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
            sub_100711A74();
          v42 = sub_100027F68();
          sub_100576500(v42, 1);
        }
      }
      v17 = *(_QWORD *)(a1 + 864);
      v18 = *(_QWORD *)(a1 + 872);
      v47 = 0;
      v48 = 0;
      *(_QWORD *)buf = 0;
      sub_10004AD30((uint64_t)buf);
      v19 = 1000 * (*(int *)buf - *(_QWORD *)(a1 + 864)) - *(_QWORD *)(a1 + 872) + *(__int16 *)&buf[4];
      v47 = v19 / 0x3E8;
      v48 = v19 % 0x3E8;
      v20 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      {
        v28 = *(int *)(a1 + 856);
        v29 = v28 > 4 ? "UNKNOWN" : (&off_10093E078)[v28];
        sub_1003FCE28(&v47, __p);
        v30 = v46 >= 0 ? __p : (void **)__p[0];
        v31 = *(unsigned __int8 *)(a1 + 880);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v16;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = v29;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v30;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v31;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to cancel connection(s) with result %{bluetooth:OI_STATUS}u (state %{public}s,%{public}ssec %d errors)", buf, 0x22u);
        if (v46 < 0)
          operator delete(__p[0]);
      }
      if ((_DWORD)v16 == 1301)
      {
        v21 = ++*(_BYTE *)(a1 + 880);
        if (v21 >= 2)
        {
          v22 = (v18 + 60000) / 0x3E8uLL;
          *(_WORD *)&buf[6] = 0;
          *(_DWORD *)buf = v17 + v22;
          *(_WORD *)&buf[4] = v18 - 5536 - 1000 * v22;
          if (sub_100258AE0((uint64_t)buf))
          {
            v23 = qword_100999890;
            if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
            {
              v24 = *(int *)(a1 + 856);
              if (v24 > 4)
                v25 = "UNKNOWN";
              else
                v25 = (&off_10093E078)[v24];
              sub_1003FCE28(&v47, __p);
              v32 = v46;
              v33 = (void **)__p[0];
              sub_1003FCE28((_QWORD *)(a1 + 864), v43);
              v34 = __p;
              if (v32 < 0)
                v34 = v33;
              if (v44 >= 0)
                v35 = v43;
              else
                v35 = (void **)v43[0];
              v36 = *(unsigned __int8 *)(a1 + 880);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = v25;
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v34;
              *(_WORD *)&buf[22] = 2082;
              *(_QWORD *)&buf[24] = v35;
              *(_WORD *)&buf[32] = 1024;
              v52 = v36;
              _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "ABORTING TO RECOVER - %{public}s %{public}ssec (%{public}s) %d errors", buf, 0x26u);
              if (v44 < 0)
                operator delete(v43[0]);
              if (v46 < 0)
                operator delete(__p[0]);
            }
            v37 = sub_100027F68();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37))
            {
              if (qword_10097AA70 != -1)
                dispatch_once(&qword_10097AA70, &stru_10093DF08);
              v38 = qword_10097AA68;
              sub_100091AE8(buf, "Failed to cancel all pending connection/s");
              v39 = *(int *)(a1 + 856);
              if (v39 > 4)
                v40 = "UNKNOWN";
              else
                v40 = (&off_10093E078)[v39];
              sub_100091AE8(__p, v40);
              sub_10047C59C(0.0, v38, (uint64_t *)buf, (uint64_t *)__p);
              if (v46 < 0)
                operator delete(__p[0]);
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
            }
            v41 = sub_100027F68();
            sub_100576500(v41, 1);
          }
        }
      }
      goto LABEL_25;
    }
  }
  else
  {
    v26 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Cannot cancel connections when not in connecting state", buf, 2u);
    }
  }
  v16 = 408;
LABEL_26:
  sub_100034234((uint64_t)v50);
  return v16;
}

void sub_10061B4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a18 < 0)
    operator delete(__p);
  sub_100043728(&a24);
  sub_100034234((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_10061B55C(int a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v4[4];
  int v5;
  uint8_t buf[4];
  int v7;

  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LE All Disconnected with status %d", buf, 8u);
  }
  v3 = sub_1000419F4();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10063FB60;
  v4[3] = &unk_100918130;
  v5 = a1;
  sub_100041A34(v3, v4);
}

void sub_10061B638(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  unint64_t v9;
  unsigned int v10;
  char *v11;
  void **v12;
  char *v13;
  int v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  NSObject *v22;
  void *__p[2];
  char v24;
  char __str[72];

  if (*(_DWORD *)(a1 + 856) == a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
      sub_100711AD4();
  }
  else
  {
    *(_QWORD *)__str = 0;
    sub_10004AD30((uint64_t)__str);
    v4 = *(int *)__str;
    v5 = *(__int16 *)&__str[4];
    v6 = *(_QWORD *)(a1 + 864);
    v7 = *(_QWORD *)(a1 + 872);
    v8 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 1000 * (v4 - v6) - v7 + v5;
      v10 = *(_DWORD *)(a1 + 856);
      v11 = v10 > 4 ? "UNKNOWN" : (&off_10093E078)[v10];
      memset(__str, 0, 64);
      snprintf(__str, 0x3FuLL, "%0llu.%0llu", v9 / 0x3E8, v9 % 0x3E8);
      sub_100091AE8(__p, __str);
      v12 = v24 >= 0 ? __p : (void **)__p[0];
      v13 = a2 > 4 ? "UNKNOWN" : (&off_10093E078)[a2];
      v14 = *(unsigned __int8 *)(a1 + 880);
      v15 = *(_DWORD *)(a1 + 920);
      v16 = v15 > 3 ? "UNKNOWN" : (&off_10093E058)[v15];
      *(_DWORD *)__str = 136448002;
      *(_QWORD *)&__str[4] = v11;
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = v10;
      *(_WORD *)&__str[18] = 2082;
      *(_QWORD *)&__str[20] = v12;
      *(_WORD *)&__str[28] = 1024;
      *(_DWORD *)&__str[30] = v14;
      *(_WORD *)&__str[34] = 2082;
      *(_QWORD *)&__str[36] = v13;
      *(_WORD *)&__str[44] = 1024;
      *(_DWORD *)&__str[46] = a2;
      *(_WORD *)&__str[50] = 2082;
      *(_QWORD *)&__str[52] = v16;
      *(_WORD *)&__str[60] = 1024;
      *(_DWORD *)&__str[62] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Setting new connection state %{public}s(%d), %{public}ssec, %d errs --> %{public}s(%d), Connection Manager %{public}s(%d)", (uint8_t *)__str, 0x42u);
      if (v24 < 0)
        operator delete(__p[0]);
    }
    *(_QWORD *)__str = 0;
    sub_10004AD30((uint64_t)__str);
    v17 = *(__int16 *)&__str[4];
    *(_QWORD *)(a1 + 864) = *(int *)__str;
    *(_QWORD *)(a1 + 872) = v17;
    *(_DWORD *)(a1 + 856) = a2;
    *(_BYTE *)(a1 + 880) = 0;
    if (a2 != 1)
    {
      if (qword_100977B40 != -1)
        dispatch_once(&qword_100977B40, &stru_10093DE28);
      sub_1004BA834((uint64_t)off_100977B38, 0);
      v18 = *(_DWORD *)(a1 + 856);
      if (v18 == 4)
      {
        v21 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__str = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "autoReconnect caused pausing", (uint8_t *)__str, 2u);
        }
        sub_10063E5C8((os_unfair_lock_s *)a1);
      }
      else if (!v18)
      {
        v19 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__str = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Idle, checking Connection Manager state", (uint8_t *)__str, 2u);
        }
        v20 = *(_DWORD *)(a1 + 920);
        if (v20 == 3)
        {
          sub_10061B9F0((os_unfair_lock_s *)a1, 0);
        }
        else if (v20 == 1)
        {
          sub_10061B9F0((os_unfair_lock_s *)a1, 2u);
        }
        else
        {
          v22 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__str = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Connection Manager state is settled", (uint8_t *)__str, 2u);
          }
        }
      }
    }
  }
}

void sub_10061B9F0(os_unfair_lock_s *a1, unsigned int a2)
{
  NSObject *v4;
  unsigned int os_unfair_lock_opaque;
  const char *v6;
  const char *v7;
  unsigned int v8;
  const char *v9;
  Block_layout *v10;
  int v11;
  const char *v12;
  __int16 v13;
  unsigned int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  unsigned int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  unsigned int v22;

  v4 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    os_unfair_lock_opaque = a1[230]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque > 3)
      v6 = "UNKNOWN";
    else
      v6 = (&off_10093E058)[os_unfair_lock_opaque];
    if (a2 > 3)
      v7 = "UNKNOWN";
    else
      v7 = (&off_10093E058)[a2];
    v8 = a1[214]._os_unfair_lock_opaque;
    if (v8 > 4)
      v9 = "UNKNOWN";
    else
      v9 = (&off_10093E078)[v8];
    v11 = 136447490;
    v12 = v6;
    v13 = 1024;
    v14 = os_unfair_lock_opaque;
    v15 = 2082;
    v16 = v7;
    v17 = 1024;
    v18 = a2;
    v19 = 2082;
    v20 = v9;
    v21 = 1024;
    v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting new Connection Manager State %{public}s(%d) --> %{public}s(%d) Connection %{public}s(%d)", (uint8_t *)&v11, 0x32u);
  }
  a1[230]._os_unfair_lock_opaque = a2;
  if (!a2)
  {
    sub_1004AF56C((uint64_t)&a1[8]);
    v10 = &stru_10093DB60;
    goto LABEL_16;
  }
  if (a2 == 2)
  {
    v10 = &stru_10093DB40;
LABEL_16:
    sub_1006169D0(a1, v10);
    return;
  }
  sub_1004AF644((uint64_t)&a1[8]);
}

void sub_10061BB74(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 888);
  if (v1)
  {
    v3 = qword_1009998D8;
    if (!os_log_type_enabled((os_log_t)qword_1009998D8, OS_LOG_TYPE_DEFAULT)
      || (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1),
          v5 = 136446210,
          v6 = v4,
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "destroying %{public}s", (uint8_t *)&v5, 0xCu), (v1 = *(_QWORD *)(a1 + 888)) != 0))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    }
    *(_QWORD *)(a1 + 888) = 0;
  }
}

void sub_10061BC50(uint64_t a1)
{
  void *v1;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  v1 = *(void **)(a1 + 544);
  if (v1)
  {
    *(_QWORD *)(a1 + 552) = 0;
    v3 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Canceling Fast connection scan Timer", v5, 2u);
      v1 = *(void **)(a1 + 544);
    }
    objc_msgSend(v1, "invalidate");
    v4 = *(void **)(a1 + 544);
    *(_QWORD *)(a1 + 544) = 0;

  }
}

void sub_10061BCE4(uint64_t a1)
{
  NSObject *v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(NSObject **)(a1 + 1488);
  if (v1)
  {
    v3 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: fLeConnectionDenyListMaintainTimer destroyed!", v4, 2u);
      v1 = *(NSObject **)(a1 + 1488);
    }
    dispatch_source_cancel(v1);
    dispatch_release(*(dispatch_object_t *)(a1 + 1488));
    *(_QWORD *)(a1 + 1488) = 0;
  }
}

uint64_t sub_10061BD74(uint64_t result)
{
  *(_BYTE *)(result + 1059) = 0;
  return result;
}

uint64_t sub_10061BD7C()
{
  return 1;
}

uint64_t sub_10061BD84()
{
  return 1;
}

void sub_10061BD8C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10061BDEC;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100023D84(v2, v3);
}

void sub_10061BDEC(uint64_t a1)
{
  uint64_t v1;
  const unsigned __int8 *v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  unsigned __int8 *v17;
  const unsigned __int8 **v18;
  BOOL v19;
  const unsigned __int8 *v20;
  char v21;
  void *v22;
  id v23;
  void *v24;
  BOOL v25;
  unsigned __int8 *v26;
  const unsigned __int8 **v27;
  id v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  __int16 v34[8];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(const unsigned __int8 **)(v1 + 376);
  if (v2 != (const unsigned __int8 *)(v1 + 384))
  {
    do
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v3 = off_1009778C0;
      v4 = sub_100030DF4(v2 + 32);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LODWORD(v3) = sub_100658AD4((uint64_t)v3, v5);

      if ((_DWORD)v3)
      {
        v6 = sub_1000438A4();
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v7 = off_1009778C0;
        v8 = sub_100030DF4(v2 + 32);
        v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        v10 = sub_1000589DC((uint64_t)v7, v9, 0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 336))(v6, 0, 1, v10, 1);
      }
      else
      {
        v11 = sub_100030DF4(v2 + 32);
        v9 = (void *)objc_claimAutoreleasedReturnValue(v11);
        sub_10061C1A8(v1, v9);
      }

      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v12 = off_1009778C0;
      v13 = sub_100030DF4(v2 + 32);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      LODWORD(v12) = sub_10065E0D4((uint64_t)v12, v14);

      if ((_DWORD)v12)
      {
        v15 = sub_100030DF4(v2 + 32);
        v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        sub_10061C2F0(v1, v16);

      }
      v17 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
      if (v17)
      {
        do
        {
          v18 = (const unsigned __int8 **)v17;
          v17 = *(unsigned __int8 **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (const unsigned __int8 **)*((_QWORD *)v2 + 2);
          v19 = *v18 == v2;
          v2 = (const unsigned __int8 *)v18;
        }
        while (!v19);
      }
      v2 = (const unsigned __int8 *)v18;
    }
    while (v18 != (const unsigned __int8 **)(v1 + 384));
  }
  v20 = *(const unsigned __int8 **)(v1 + 328);
  if (v20 == (const unsigned __int8 *)(v1 + 336))
  {
    v21 = 0;
  }
  else
  {
    v21 = 0;
    while (1)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v22 = off_1009778C0;
      v23 = sub_100030DF4(v20 + 25);
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      v25 = sub_10066039C((uint64_t)v22, v24);

      if (v25)
        break;
      v26 = (unsigned __int8 *)*((_QWORD *)v20 + 1);
      if (v26)
      {
        do
        {
          v27 = (const unsigned __int8 **)v26;
          v26 = *(unsigned __int8 **)v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (const unsigned __int8 **)*((_QWORD *)v20 + 2);
          v19 = *v27 == v20;
          v20 = (const unsigned __int8 *)v27;
        }
        while (!v19);
      }
      v21 |= v25;
      v20 = (const unsigned __int8 *)v27;
      if (v27 == (const unsigned __int8 **)(v1 + 336))
        goto LABEL_33;
    }
    v21 = 1;
  }
LABEL_33:
  v28 = sub_1003500B8();
  v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  v30 = v29;
  if (v29)
    objc_msgSend(v29, "enableSystemWakesForUpdate:completion:", v21 & 1, &stru_10093D6B8);
  v31 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 344))(v31))
  {
    v32 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 944))(v32))
    {
      if (*(_BYTE *)(v1 + 625))
      {
        if (*(_QWORD *)(v1 + 512))
        {
          v33 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_INFO))
          {
            v34[0] = 0;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "Subrate Change Event not masked since connection subrating transactions are pending.", (uint8_t *)v34, 2u);
          }
        }
        else
        {
          sub_10061C61C(v1, 0);
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
            sub_100711B54();
        }
      }
    }
  }

}

void sub_10061C17C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10061C1A8(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a2;
  if (sub_10061C90C((uint64_t)v2, v2))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    if (sub_10065D208((uint64_t)off_1009778C0, v2))
    {
      v3 = sub_1000438A4();
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v4 = sub_1000589DC((uint64_t)off_1009778C0, v2, 0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 336))(v3, 0, 1, v4, 1);
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      sub_10065D180((uint64_t)off_1009778C0, v2, 0);
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      sub_10065D290((uint64_t)off_1009778C0, v2);
    }
  }

  return 0;
}

void sub_10061C2E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10061C2F0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  unsigned __int16 *v14;
  uint8_t buf[32];

  v3 = a2;
  v4 = sub_100027F68();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4) & 1) == 0)
  {
    v5 = sub_100027F68();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 480))(v5) & 1) == 0)
      goto LABEL_13;
  }
  v14 = 0;
  if (!v3)
  {
    v11 = qword_100999890;
    if (!os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      goto LABEL_21;
    *(_WORD *)buf = 0;
    v12 = "disableHIDLatencyStats -- device is NULL";
LABEL_20:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v12, buf, 2u);
    goto LABEL_21;
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  if (!sub_10065E0D4((uint64_t)off_1009778C0, v3))
  {
    v11 = qword_100999890;
    if (!os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      goto LABEL_21;
    *(_WORD *)buf = 0;
    v12 = "disableHIDLatencyStats -- does not have HID service";
    goto LABEL_20;
  }
  sub_100030BCC(buf, v3);
  if (!sub_100623C54(a1, buf, &v14))
  {
    v11 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v12 = "disableHIDLatencyStats -- cannot get connection handle";
      goto LABEL_20;
    }
LABEL_21:
    v10 = 1;
    goto LABEL_22;
  }
  v6 = v14;
  v7 = sub_10019ADE8(v14);
  v8 = sub_100065478();
  (*(void (**)(uint64_t, unsigned __int16 *, uint64_t))(*(_QWORD *)v8 + 560))(v8, v6, v7);
  v9 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v9 + 1048))(v9, v7, 1, 0))
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      sub_10000602C((uint64_t)off_1009778C0, v3, (uint64_t)buf);
      sub_100711BB4();
    }
    goto LABEL_21;
  }
LABEL_13:
  v10 = 0;
LABEL_22:

  return v10;
}

void sub_10061C554(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10061C57C(id a1, NSError *a2)
{
  NSObject *v3;
  int v4;
  NSError *v5;

  v3 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 138412290;
    v5 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "enableSystemWakesForUpdate returned %@", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t sub_10061C61C(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  char v12;
  uint64_t v13;

  v13 = *(_QWORD *)(a1 + 1569);
  v2 = BYTE4(v13);
  if (a2)
  {
    BYTE4(v13) |= 4u;
    if ((v2 | 4) != v2)
    {
      v12 = 0;
      sub_100043758(&v12);
      v9 = (uint64_t (*)())sub_100623628;
      goto LABEL_7;
    }
    return 0;
  }
  BYTE4(v13) &= ~4u;
  if ((v2 & 0xFFFFFFFB) == v2)
    return 0;
  v12 = 0;
  sub_100043758(&v12);
  v9 = (uint64_t (*)())sub_1006236F0;
LABEL_7:
  v10 = sub_10004C9BC(162, v9, v3, v4, v5, v6, v7, v8, (uint64_t)&v13);
  if ((_DWORD)v10 && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    sub_100711BFC();
  sub_100043728(&v12);
  return v10;
}

void sub_10061C730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_10061C74C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];

  v1 = a1 - 16;
  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10061BDEC;
  v3[3] = &unk_100917378;
  v3[4] = v1;
  sub_100023D84(v2, v3);
}

uint64_t sub_10061C7AC(uint64_t a1, void *a2)
{
  id v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a2;
  if (!sub_10061C90C((uint64_t)v2, v2))
    goto LABEL_13;
  sub_1000438A4();
  v3 = sub_1003335D8();
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  if (sub_10065E160((uint64_t)off_1009778C0) >= v3)
    goto LABEL_13;
  v4 = sub_1000438A4();
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v5 = sub_1000589DC((uint64_t)off_1009778C0, v2, 0);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 336))(v4, 1, 1, v5, 1);
  if (!(_DWORD)v6)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    sub_10065D180((uint64_t)off_1009778C0, v2, 1);
LABEL_13:
    v6 = 0;
    goto LABEL_14;
  }
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    sub_100711C5C();
LABEL_14:

  return v6;
}

void sub_10061C8F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t sub_10061C90C(uint64_t a1, void *a2)
{
  id v2;
  int v3;
  int v4;
  int v5;
  void *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  void *v13;
  void *v14[2];
  char v15;
  void *__p[2];
  char v17;

  v2 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v3 = sub_1006589A8((uint64_t)off_1009778C0, v2);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v4 = sub_1006589A8((uint64_t)off_1009778C0, v2);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v5 = sub_1006589A8((uint64_t)off_1009778C0, v2);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v6 = off_1009778C0;
  sub_100091AE8(__p, "BluetoothTVRemote");
  v7 = sub_10000628C((uint64_t)v6, v2, (uint64_t)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  v8 = sub_1000438A4();
  if (sub_1003335A8(v8))
  {
    v9 = sub_100027F68();
    if ((((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 472))(v9) | v7) & 1) != 0)
    {
      v10 = 1;
    }
    else
    {
      v10 = 1;
      if (v3 != 19 && v3 != 196608 && v4 != 21 && v5 != 655360)
      {
        v12 = sub_100065478();
        if (((*(uint64_t (**)(uint64_t, id))(*(_QWORD *)v12 + 512))(v12, v2) & 1) == 0)
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10093DDE8);
          v13 = off_1009778C0;
          sub_100091AE8(v14, "_HID_DEVICE_");
          v10 = sub_10000628C((uint64_t)v13, v2, (uint64_t)v14);
          if (v15 < 0)
            operator delete(v14[0]);
        }
      }
    }
  }
  else
  {
    v10 = 0;
  }

  return v10;
}

void sub_10061CB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_10061CB68(uint64_t a1, const unsigned __int8 **a2)
{
  NSObject *v4;
  __int128 v5;
  const unsigned __int8 **v6;
  const unsigned __int8 *v7;
  const unsigned __int8 *v8;
  NSObject *v9;
  int v10;
  void **v11;
  int v12;
  void **v13;
  const char *v14;
  void *v15;
  id v16;
  void *v17;
  unsigned __int8 *v18;
  const unsigned __int8 **v19;
  BOOL v20;
  __int128 v22;
  void *__p[2];
  char v24;
  uint8_t v25[4];
  void **v26;
  __int16 v27;
  const char *v28;
  uint8_t buf[16];
  _BYTE v30[21];

  v4 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Multiple devices addresses changed", buf, 2u);
  }
  v8 = *a2;
  v6 = a2 + 1;
  v7 = v8;
  if (v8 != (const unsigned __int8 *)v6)
  {
    *(_QWORD *)&v5 = 136446466;
    v22 = v5;
    do
    {
      v9 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_OWORD *)buf = 0u;
        memset(v30, 0, sizeof(v30));
        uuid_unparse_upper(v7 + 25, (char *)buf);
        sub_100091AE8(__p, (char *)buf);
        v10 = v24;
        v11 = (void **)__p[0];
        v12 = sub_10061CDB8((_QWORD *)a1, (unsigned __int8 *)v7 + 25);
        v13 = __p;
        if (v10 < 0)
          v13 = v11;
        *(_DWORD *)v25 = v22;
        v26 = v13;
        v14 = "NO";
        if (v12)
          v14 = "YES";
        v27 = 2082;
        v28 = v14;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device %{public}s addresses changed connecting:%{public}s", v25, 0x16u);
        if (v24 < 0)
          operator delete(__p[0]);
      }
      if (sub_10061CDB8((_QWORD *)a1, (unsigned __int8 *)v7 + 25))
      {
        v15 = *(void **)(a1 + 776);
        v16 = sub_100030DF4(v7 + 25);
        v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        objc_msgSend(v15, "addObject:", v17);

      }
      v18 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
      if (v18)
      {
        do
        {
          v19 = (const unsigned __int8 **)v18;
          v18 = *(unsigned __int8 **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (const unsigned __int8 **)*((_QWORD *)v7 + 2);
          v20 = *v19 == v7;
          v7 = (const unsigned __int8 *)v19;
        }
        while (!v20);
      }
      v7 = (const unsigned __int8 *)v19;
    }
    while (v19 != v6);
  }
  if (objc_msgSend(*(id *)(a1 + 776), "count", v22))
    sub_10061AF78(a1, 0);
  return 0;
}

void sub_10061CD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t sub_10061CDB8(_QWORD *a1, unsigned __int8 *a2)
{
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v12;
  id v13;
  void *v14;
  _QWORD v15[2];

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, (uint64_t)(a1 + 15));
  if (a1 + 42 != (_QWORD *)sub_100647368((uint64_t)(a1 + 41), a2))
    goto LABEL_4;
  v4 = (void *)a1[93];
  v5 = sub_100030DF4(a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  LOBYTE(v4) = objc_msgSend(v4, "containsObject:", v6);

  if ((v4 & 1) != 0
    || (v7 = (void *)a1[94],
        v8 = sub_100030DF4(a2),
        v9 = (void *)objc_claimAutoreleasedReturnValue(v8),
        LOBYTE(v7) = objc_msgSend(v7, "containsObject:", v9),
        v9,
        (v7 & 1) != 0))
  {
LABEL_4:
    v10 = 1;
  }
  else
  {
    v12 = (void *)a1[95];
    v13 = sub_100030DF4(a2);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v10 = (uint64_t)objc_msgSend(v12, "containsObject:", v14);

  }
  sub_100034234((uint64_t)v15);
  return v10;
}

void sub_10061CEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10061CED8(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10061CF38;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

void sub_10061CF38(uint64_t a1)
{
  uint64_t v1;
  const unsigned __int8 *v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  unsigned __int8 *v17;
  const unsigned __int8 **v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(const unsigned __int8 **)(v1 + 376);
  if (v2 != (const unsigned __int8 *)(v1 + 384))
  {
    do
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v3 = off_1009778C0;
      v4 = sub_100030DF4(v2 + 32);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      LODWORD(v3) = sub_100658AD4((uint64_t)v3, v5);

      if ((_DWORD)v3)
      {
        v6 = sub_1000438A4();
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v7 = off_1009778C0;
        v8 = sub_100030DF4(v2 + 32);
        v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        v10 = sub_1000589DC((uint64_t)v7, v9, 0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 336))(v6, 1, 1, v10, 1);
      }
      else
      {
        v11 = sub_100030DF4(v2 + 32);
        v9 = (void *)objc_claimAutoreleasedReturnValue(v11);
        sub_10061C7AC(v1, v9);
      }

      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v12 = off_1009778C0;
      v13 = sub_100030DF4(v2 + 32);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      LODWORD(v12) = sub_10065E0D4((uint64_t)v12, v14);

      if ((_DWORD)v12)
      {
        v15 = sub_100030DF4(v2 + 32);
        v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        sub_10061D1F0(v1, v16, 0);

      }
      v17 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
      if (v17)
      {
        do
        {
          v18 = (const unsigned __int8 **)v17;
          v17 = *(unsigned __int8 **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (const unsigned __int8 **)*((_QWORD *)v2 + 2);
          v19 = *v18 == v2;
          v2 = (const unsigned __int8 *)v18;
        }
        while (!v19);
      }
      v2 = (const unsigned __int8 *)v18;
    }
    while (v18 != (const unsigned __int8 **)(v1 + 384));
  }
  v20 = sub_1000419F4();
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100624CB0;
  v23[3] = &unk_100917378;
  v23[4] = v1;
  sub_100041A34(v20, v23);
  v21 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 344))(v21) & 1) != 0)
  {
    v22 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 944))(v22))
    {
      if (*(_BYTE *)(v1 + 625))
      {
        sub_10061C61C(v1, 1);
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
          sub_100711CBC();
      }
    }
  }
}

void sub_10061D1D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10061D1F0(uint64_t a1, void *a2, int a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint64_t v16;
  unsigned __int16 *v18;
  uint8_t buf[32];

  v5 = a2;
  v6 = sub_100027F68();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6) & 1) == 0)
  {
    v7 = sub_100027F68();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 480))(v7) & 1) == 0)
      goto LABEL_25;
  }
  v18 = 0;
  if (!v5)
  {
    v14 = qword_100999890;
    if (!os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      goto LABEL_22;
    *(_WORD *)buf = 0;
    v15 = "enableHIDLatencyStats -- device is NULL";
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v15, buf, 2u);
    goto LABEL_22;
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  if (!sub_10065E0D4((uint64_t)off_1009778C0, v5))
  {
    v14 = qword_100999890;
    if (!os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      goto LABEL_22;
    *(_WORD *)buf = 0;
    v15 = "enableHIDLatencyStats -- does not have HID service";
    goto LABEL_21;
  }
  sub_100030BCC(buf, v5);
  if (sub_100623C54(a1, buf, &v18))
  {
    v8 = v18;
    v9 = sub_10019ADE8(v18);
    if (a3)
    {
      v10 = sub_100065478();
      (*(void (**)(uint64_t, unsigned __int16 *, uint64_t))(*(_QWORD *)v10 + 536))(v10, v8, v9);
    }
    sub_100030BCC(buf, v5);
    v11 = sub_1006249C4(a1, buf);
    v12 = sub_100065478();
    (*(void (**)(uint64_t, uint64_t, unsigned __int16 *, uint64_t, uint64_t))(*(_QWORD *)v12 + 544))(v12, v9, v8, 2, v11);
    v13 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 1048))(v13, v9, 1, 1))
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        sub_10000602C((uint64_t)off_1009778C0, v5, (uint64_t)buf);
        sub_100711D1C();
      }
      goto LABEL_22;
    }
    if (a3)
      sub_10061C7AC(a1, v5);
LABEL_25:
    v16 = 0;
    goto LABEL_26;
  }
  v14 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v15 = "enableHIDLatencyStats -- cannot get connection handle";
    goto LABEL_21;
  }
LABEL_22:
  v16 = 1;
LABEL_26:

  return v16;
}

void sub_10061D4B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10061D4E0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100624CB0;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

void sub_10061D540(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];

  v1 = a1 - 16;
  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10061CF38;
  v3[3] = &unk_100917378;
  v3[4] = v1;
  sub_100041A34(v2, v3);
}

void sub_10061D5A0(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  unsigned int v10;
  unsigned int v11;
  const char *v12;
  const char *v13;
  void *v14;
  void *v15;
  __CFString *v16;
  int v17;
  uint8_t buf[4];
  __CFString *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;

  v3 = a2;
  v4 = objc_alloc_init((Class)NSDateFormatter);
  objc_msgSend(v4, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss.SSS"));
  v5 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    if (v3)
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "startDate"));
      if (v15)
      {
        v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "startDate"));
        v16 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "stringFromDate:", v2));
        v17 = 1;
      }
      else
      {
        v17 = 0;
        v15 = 0;
        v16 = CFSTR("nil");
      }
    }
    else
    {
      v17 = 0;
      v16 = CFSTR("nil");
    }
    if (objc_msgSend(v3, "walking", v2))
      v6 = "YES";
    else
      v6 = "NO";
    if (objc_msgSend(v3, "cycling"))
      v7 = "YES";
    else
      v7 = "NO";
    if (objc_msgSend(v3, "running"))
      v8 = "YES";
    else
      v8 = "NO";
    if (objc_msgSend(v3, "stationary"))
      v9 = "YES";
    else
      v9 = "NO";
    v10 = objc_msgSend(v3, "unknown");
    v11 = objc_msgSend(v3, "automotive");
    if (v10)
      v12 = "YES";
    else
      v12 = "NO";
    *(_DWORD *)buf = 138413826;
    if (v11)
      v13 = "YES";
    else
      v13 = "NO";
    v19 = v16;
    v20 = 2080;
    v21 = v6;
    v22 = 2080;
    v23 = v7;
    v24 = 2080;
    v25 = v8;
    v26 = 2080;
    v27 = v9;
    v28 = 2080;
    v29 = v12;
    v30 = 2080;
    v31 = v13;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "==== motion: activity.startDate:%@ walking:%s cycling:%s running:%s stationary:%s unknown:%s automotive:%s", buf, 0x48u);
    if (v17)
    {

    }
    if (v3)

  }
}

void sub_10061D7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

id sub_10061D82C(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  const unsigned __int8 *v3;
  id v4;
  void *v5;
  _BOOL4 v6;
  NSObject *v7;
  void **v8;
  void *v9;
  id v10;
  void *v11;
  unsigned __int8 *v12;
  const unsigned __int8 **v13;
  BOOL v14;
  id result;
  __n128 v16;
  void *__p[2];
  char v18;
  uint8_t out[40];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(const unsigned __int8 **)(v2 + 328);
  if (v3 != (const unsigned __int8 *)(v2 + 336))
  {
    a2.n128_u64[0] = 136446210;
    v16 = a2;
    do
    {
      v4 = sub_100030DF4(v3 + 25);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      v6 = sub_10061DA18(v2, v5);

      if (v6)
      {
        v7 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          memset(out, 0, 37);
          uuid_unparse_upper(v3 + 25, (char *)out);
          sub_100091AE8(__p, (char *)out);
          v8 = v18 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)out = v16.n128_u32[0];
          *(_QWORD *)&out[4] = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "motion detected, device to update %{public}s", out, 0xCu);
          if (v18 < 0)
            operator delete(__p[0]);
        }
        v9 = *(void **)(v2 + 784);
        v10 = sub_100030DF4(v3 + 25);
        v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        objc_msgSend(v9, "addObject:", v11);

      }
      v12 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
      if (v12)
      {
        do
        {
          v13 = (const unsigned __int8 **)v12;
          v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (const unsigned __int8 **)*((_QWORD *)v3 + 2);
          v14 = *v13 == v3;
          v3 = (const unsigned __int8 *)v13;
        }
        while (!v14);
      }
      v3 = (const unsigned __int8 *)v13;
    }
    while (v13 != (const unsigned __int8 **)(v2 + 336));
  }
  result = objc_msgSend(*(id *)(v2 + 784), "count", *(_OWORD *)&v16);
  if (result)
  {
    sub_10061D5A0((uint64_t)result, *(void **)(v2 + 1504));
    return (id)sub_10061AF78(v2, 0);
  }
  return result;
}

void sub_10061D9FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_10061DA18(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  int v6;
  int v7;
  NSObject *v8;
  void **v9;
  void *v11[2];
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  v3 = a2;
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString")));
  sub_100091AE8(v15, (char *)objc_msgSend(v4, "UTF8String"));

  if (SHIBYTE(v16) < 0)
  {
    sub_10003430C(__p, v15[0], (unint64_t)v15[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v15;
    v14 = v16;
  }
  v5 = sub_10001F2AC(a1 + 1176, (const void **)__p);
  if (a1 + 1184 == v5)
    v6 = 2;
  else
    v6 = *(_DWORD *)(v5 + 56);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  v7 = sub_10063D88C(a1, v3);
  v8 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v9 = v15;
    if (v16 < 0)
      v9 = (void **)v15[0];
    *(_DWORD *)buf = 136446722;
    v18 = v9;
    v19 = 1024;
    v20 = v6;
    v21 = 1024;
    v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "updateLeConnectionRSSIThresholdState for %{public}s from %d to %d ", buf, 0x18u);
  }
  if (v6 != v7)
  {
    if (v7 == 2)
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_100711D64();
    }
    else
    {
      if (SHIBYTE(v16) < 0)
      {
        sub_10003430C(v11, v15[0], (unint64_t)v15[1]);
      }
      else
      {
        *(_OWORD *)v11 = *(_OWORD *)v15;
        v12 = v16;
      }
      sub_10063D624(a1, (__int128 *)v11, v7);
      if (SHIBYTE(v12) < 0)
        operator delete(v11[0]);
    }
  }
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);

  return v6 != v7;
}

void sub_10061DC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  if (a14 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);

  _Unwind_Resume(a1);
}

void sub_10061DCA0(uint64_t a1, unint64_t a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t **v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  NSObject *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  NSObject *v21;
  unint64_t v22;
  unint64_t *v23;
  _BYTE buf[12];
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  uuid_t uu;

  v22 = a2;
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  if (sub_10061E090(a1, a2, uu))
  {
    v4 = sub_100030DF4(uu);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    if (sub_100658AD4((uint64_t)off_1009778C0, v5))
    {
      if (!*(_BYTE *)(a1 + 624))
      {
        v6 = sub_10003BE44();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 344))(v6))
        {
          v7 = sub_10003BE44();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 944))(v7))
          {
            if (*(_BYTE *)(a1 + 625))
            {
              v8 = qword_100999890;
              if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "setMagnetLatencyForLowPowerMode: Low power mode enabled; Requesting subrating on magnet link",
                  buf,
                  2u);
              }
              if (qword_1009778A8 != -1)
                dispatch_once(&qword_1009778A8, &stru_10093DDC8);
              sub_10061E160((uint64_t)off_1009778A0, v5, -11, 1);
            }
            else
            {
              v9 = *(_QWORD **)(a1 + 528);
              if (v9)
              {
                v10 = (uint64_t **)(a1 + 520);
                v11 = a1 + 528;
                do
                {
                  v12 = v9[4];
                  v13 = v12 >= a2;
                  if (v12 >= a2)
                    v14 = v9;
                  else
                    v14 = v9 + 1;
                  if (v13)
                    v11 = (uint64_t)v9;
                  v9 = (_QWORD *)*v14;
                }
                while (*v14);
                if (v11 != a1 + 528 && *(_QWORD *)(v11 + 32) <= a2)
                {
                  v15 = qword_100999890;
                  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
                  {
                    v23 = &v22;
                    v16 = *((unsigned __int16 *)sub_10064682C(v10, &v22, (uint64_t)&unk_100740F58, (uint64_t **)&v23) + 23);
                    v23 = &v22;
                    v17 = *((unsigned __int16 *)sub_10064682C(v10, &v22, (uint64_t)&unk_100740F58, (uint64_t **)&v23) + 21);
                    v23 = &v22;
                    v18 = *((unsigned __int16 *)sub_10064682C(v10, &v22, (uint64_t)&unk_100740F58, (uint64_t **)&v23) + 24);
                    v23 = &v22;
                    v19 = *((unsigned __int16 *)sub_10064682C(v10, &v22, (uint64_t)&unk_100740F58, (uint64_t **)&v23) + 22);
                    v23 = &v22;
                    v20 = *((_DWORD *)sub_10064682C(v10, &v22, (uint64_t)&unk_100740F58, (uint64_t **)&v23) + 13);
                    *(_DWORD *)buf = 134219264;
                    *(_QWORD *)&buf[4] = a2;
                    v25 = 1024;
                    v26 = v16;
                    v27 = 1024;
                    v28 = v17;
                    v29 = 1024;
                    v30 = v18;
                    v31 = 1024;
                    v32 = v19;
                    v33 = 1024;
                    v34 = v20;
                    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "setMagnetLatencyForLowPowerMode: Low power mode not enabled. Found configured parameters for handle %p. Subrate factor:%d Peripheral latency:%d Continuation Number=%d Supervision Timeout=%d. Subrating Status: %d", buf, 0x2Au);
                  }
                  *(_QWORD *)buf = &v22;
                  if (*((_DWORD *)sub_10064682C(v10, &v22, (uint64_t)&unk_100740F58, (uint64_t **)buf) + 13))
                  {
                    v21 = qword_100999890;
                    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "setMagnetLatencyForLowPowerMode: Low power mode disabled while LE Connection is subrated. Exiting subrating on magnet link", buf, 2u);
                    }
                    if (qword_1009778A8 != -1)
                      dispatch_once(&qword_1009778A8, &stru_10093DDC8);
                    sub_10061E160((uint64_t)off_1009778A0, v5, -2, 1);
                  }
                }
              }
            }
          }
        }
      }
    }

  }
}

void sub_10061E070(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10061E090(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  const unsigned __int8 *v6;
  unsigned __int8 *v7;
  const unsigned __int8 **v8;
  BOOL v9;
  uint64_t v10;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 120);
  v6 = *(const unsigned __int8 **)(a1 + 376);
  if (v6 == (const unsigned __int8 *)(a1 + 384))
  {
LABEL_9:
    v10 = 0;
  }
  else
  {
    while (*((_QWORD *)v6 + 6) != a2)
    {
      v7 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
      if (v7)
      {
        do
        {
          v8 = (const unsigned __int8 **)v7;
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const unsigned __int8 **)*((_QWORD *)v6 + 2);
          v9 = *v8 == v6;
          v6 = (const unsigned __int8 *)v8;
        }
        while (!v9);
      }
      v6 = (const unsigned __int8 *)v8;
      if (v8 == (const unsigned __int8 **)(a1 + 384))
        goto LABEL_9;
    }
    uuid_copy(a3, v6 + 32);
    v10 = 1;
  }
  sub_100034234((uint64_t)v12);
  return v10;
}

void sub_10061E14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10061E160(uint64_t a1, void *a2, int a3, int a4)
{
  id v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  NSObject *v18;
  int v19;
  int v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  unsigned int v36;
  uint64_t *v37;
  NSObject *v38;
  _BOOL4 v39;
  int v40;
  int v41;
  int v42;
  NSObject *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  _BYTE *v56;
  uint64_t v57;
  unint64_t v58;
  BOOL v59;
  _QWORD *v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t **v67;
  NSObject *v68;
  _BOOL4 v69;
  unsigned int v71;
  int v72;
  int v73;
  unsigned int v74;
  uint64_t **v75;
  int v76;
  int v77;
  char v78;
  _QWORD v79[2];
  __int16 v80;
  unsigned __int16 v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  _BYTE *v87;
  const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v88[2];
  _BYTE buf[14];
  _BYTE v90[12];
  _BYTE v91[6];
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;

  v7 = a2;
  v87 = 0;
  v79[0] = 0;
  v79[1] = 0;
  sub_10003415C((uint64_t)v79, a1 + 120);
  v8 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v9 = sub_1002F04A8(a3);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)v90 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "setConnectionLatency %{public}s to device \"%{public}@\"", buf, 0x16u);
  }
  sub_100030BCC(buf, v7);
  v10 = sub_10000C5B8(a1 + 376, buf);
  if (a1 + 384 == v10)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100711DCC();
    v11 = 3;
  }
  else
  {
    v85 = 0;
    v86 = 0;
    v83 = 0;
    v84 = 0;
    v82 = 0;
    v81 = 0;
    v80 = 0;
    v87 = *(_BYTE **)(v10 + 48);
    v11 = sub_100623350((_WORD *)a1, a3, (__int16 *)&v86 + 1, (__int16 *)&v86, (__int16 *)&v84, (__int16 *)&v84 + 1, (_WORD *)&v85 + 1, (__int16 *)&v85, (_WORD *)&v83 + 1, &v83, (_WORD *)&v82 + 1, &v82, &v81, (_BYTE *)&v80 + 1, &v80);
    if ((_DWORD)v11)
      goto LABEL_97;
    if (a3 == -2)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      if (!sub_100658AD4((uint64_t)off_1009778C0, v7))
      {
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
          sub_100711FC4();
        goto LABEL_93;
      }
      v12 = sub_1000438A4();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 2736))(v12))
      {
        v13 = *(_QWORD **)(a1 + 528);
        if (v13)
        {
          v14 = a1 + 528;
          do
          {
            v15 = v13[4];
            v16 = v15 >= (unint64_t)v87;
            if (v15 >= (unint64_t)v87)
              v17 = v13;
            else
              v17 = v13 + 1;
            if (v16)
              v14 = (uint64_t)v13;
            v13 = (_QWORD *)*v17;
          }
          while (*v17);
          if (v14 != a1 + 528 && (unint64_t)v87 >= *(_QWORD *)(v14 + 32))
          {
            *(_QWORD *)buf = &v87;
            if (*((_DWORD *)sub_10064682C((uint64_t **)(a1 + 520), (unint64_t *)&v87, (uint64_t)&unk_100740F58, (uint64_t **)buf)+ 13) == 2)
            {
              v18 = qword_100999890;
              if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138543618;
                *(_QWORD *)&buf[4] = v7;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)v90 = 1;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Magnet link to \"%{public}@\" is currently subrated. Switching to un-subrated link without parameter update (using a subrate factor of %d).", buf, 0x12u);
              }
              v19 = 0;
              v20 = 1;
              v80 = 256;
              goto LABEL_62;
            }
          }
        }
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
          sub_100711F04();
      }
      else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
      {
        sub_100711F64();
      }
    }
    v19 = v80;
    if (!(_BYTE)v80)
    {
      v20 = 1;
LABEL_62:
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v45 = sub_100658AD4((uint64_t)off_1009778C0, v7);
      v46 = HIBYTE(v80);
      if (HIBYTE(v80))
        v47 = v45;
      else
        v47 = 0;
      if (v47 == 1)
      {
        v48 = sub_1000438A4();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v48 + 2736))(v48))
        {
          v77 = v19;
          v49 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v46;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "Enable Subrating set to %d. This platform supports connection subrating.", buf, 8u);
          }
          v50 = HIWORD(v83);
          v51 = (unsigned __int16)v83;
          v52 = HIWORD(v82);
          v53 = (unsigned __int16)v82;
          v54 = v81;
          v75 = (uint64_t **)(a1 + 496);
          v55 = *(_QWORD **)(a1 + 504);
          if (v55)
          {
            v56 = v87;
            v57 = a1 + 504;
            do
            {
              v58 = v55[4];
              v59 = v58 >= (unint64_t)v87;
              if (v58 >= (unint64_t)v87)
                v60 = v55;
              else
                v60 = v55 + 1;
              if (v59)
                v57 = (uint64_t)v55;
              v55 = (_QWORD *)*v60;
            }
            while (*v60);
            if (v57 != a1 + 504 && (unint64_t)v87 >= *(_QWORD *)(v57 + 32))
            {
              v73 = v81;
              v61 = qword_100999890;
              if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134217984;
                *(_QWORD *)&buf[4] = v56;
                _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "Warning: Already pending on sending connection subrating parameters for handle %p", buf, 0xCu);
              }
              sub_100015ECC((uint64_t)v75, (unint64_t *)&v87);
              v54 = v73;
            }
          }
          v88[0] = 0;
          v88[1] = 0;
          sub_100030BCC(v88, v7);
          v62 = v53;
          v63 = v52;
          v64 = v51;
          v65 = v50;
          if (v20 && sub_100623A78(a1, (unsigned __int8 *)v88))
          {
            v66 = qword_100999890;
            if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138544642;
              *(_QWORD *)&buf[4] = v7;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)v90 = v65;
              *(_WORD *)&v90[4] = 1024;
              *(_DWORD *)&v90[6] = v64;
              *(_WORD *)&v90[10] = 1024;
              *(_DWORD *)v91 = v63;
              *(_WORD *)&v91[4] = 1024;
              v92 = v62;
              v93 = 1024;
              v94 = v54;
              _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "No locally initiated connection parameter update in progress and link is ready. Proceeding with subrating mode for device \"%{public}@\" subrateMin:%d subrateMax:%d maxLatency:%d continueationNumber=%d supervisionTimeout=%d", buf, 0x2Au);
            }
            sub_100034264((uint64_t)v79);
            v11 = sub_1006237B8(a1, (unint64_t)v87, (v65 << 16) | (v64 << 32) | v63 | (v62 << 48), v54);
            goto LABEL_97;
          }
          *(_QWORD *)buf = &v87;
          v67 = sub_100647174(v75, (unint64_t *)&v87, (uint64_t)&unk_100740F58, (uint64_t **)buf);
          v67[5] = (uint64_t *)((v50 << 16) | (v64 << 32) | v63 | (v62 << 48));
          *((_WORD *)v67 + 24) = v54;
          v68 = qword_100999890;
          v11 = 0;
          if (!os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
            goto LABEL_97;
          v69 = sub_100623A78(a1, (unsigned __int8 *)v88);
          *(_DWORD *)buf = 138543874;
          *(_QWORD *)&buf[4] = v7;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)v90 = v77;
          *(_WORD *)&v90[4] = 1024;
          *(_DWORD *)&v90[6] = v69;
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "For device \"%{public}@\" - Locally initiated connection parameter update in progress: %d. LE Link Ready: %d.", buf, 0x18u);
LABEL_96:
          v11 = 0;
          goto LABEL_97;
        }
      }
      if (a3 != -11)
        goto LABEL_96;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_100711E30();
LABEL_93:
      v11 = 17;
      goto LABEL_97;
    }
    if (a4)
    {
      if (!sub_100221568((uint64_t)v87))
      {
LABEL_61:
        v20 = 0;
        goto LABEL_62;
      }
    }
    else if (sub_100221568((uint64_t)v87))
    {
      goto LABEL_61;
    }
    v21 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v22 = sub_1002F04A8(a3);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v22;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)v90 = v7;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Setting connection latency to \"%{public}s\" for device \"%{public}@\"", buf, 0x16u);
    }
    sub_100030BCC(buf, v7);
    v76 = v19;
    if (a1 + 840 == sub_100646FD8(a1 + 832, buf))
    {
      v35 = 0;
      v33 = 0x60006001E0006;
      v34 = 4;
      v32 = 2;
    }
    else
    {
      sub_100030BCC(buf, v7);
      v88[0] = buf;
      if (*((_DWORD *)sub_100647050((uint64_t **)(a1 + 832), buf, (uint64_t)&unk_100740F58, v88) + 11) != 2)
      {
        v23 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
          sub_100711E94(v23, v24, v25, v26, v27, v28, v29, v30);
      }
      sub_100030BCC(buf, v7);
      v88[0] = buf;
      v31 = sub_100647050((uint64_t **)(a1 + 832), buf, (uint64_t)&unk_100740F58, v88);
      v32 = *((_DWORD *)v31 + 11);
      v33 = *(uint64_t *)((char *)v31 + 50);
      v34 = *((_WORD *)v31 + 30);
      v35 = *((_DWORD *)v31 + 19);
    }
    v36 = HIWORD(v86);
    v74 = (unsigned __int16)v86;
    v71 = HIWORD(v85);
    v72 = (unsigned __int16)v85;
    v78 = 0;
    sub_100043758(&v78);
    sub_100030BCC(buf, v7);
    v88[0] = buf;
    v37 = sub_100647050((uint64_t **)(a1 + 832), buf, (uint64_t)&unk_100740F58, v88);
    *((_DWORD *)v37 + 11) = v32;
    *((_WORD *)v37 + 24) = 256;
    *(uint64_t *)((char *)v37 + 50) = v33;
    *((_WORD *)v37 + 29) = v71;
    *((_WORD *)v37 + 30) = v34;
    *((_WORD *)v37 + 31) = v72;
    *((float *)v37 + 16) = (float)v36;
    *((float *)v37 + 17) = (float)v74;
    *((float *)v37 + 18) = (float)v74;
    *((_DWORD *)v37 + 19) = v35;
    v38 = qword_100999890;
    v39 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT);
    v40 = (unsigned __int16)v84;
    v41 = HIWORD(v84);
    if (v39)
    {
      *(_DWORD *)buf = 138544898;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)v90 = v36;
      *(_WORD *)&v90[4] = 1024;
      *(_DWORD *)&v90[6] = v74;
      *(_WORD *)&v90[10] = 1024;
      *(_DWORD *)v91 = v71;
      *(_WORD *)&v91[4] = 1024;
      v92 = (unsigned __int16)v84;
      v93 = 1024;
      v94 = HIWORD(v84);
      v95 = 1024;
      v96 = v72;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Trying to update connection parameters for device \"%{public}@\" minInterval:%d maxInterval:%d peripheralLatency:%d minCE=%d maxCE=%d timeout:%d", buf, 0x30u);
    }
    v19 = v76;
    v42 = sub_100223CB8(v87, (int)((double)v36 / 1.25), (int)((double)v74 / 1.25), v71, (52429 * v72) >> 19, v40, v41);
    sub_10004339C(&v78);
    if (!v42)
    {
      if (v74 == 1000)
        goto LABEL_59;
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      if (!sub_10065BE8C((uint64_t)off_1009778C0, v7))
      {
LABEL_59:
        v44 = sub_1000438A4();
        (*(void (**)(uint64_t, _BYTE *, BOOL, _QWORD))(*(_QWORD *)v44 + 1064))(v44, v87, v74 == 1000, 0);
      }
      sub_100043728(&v78);
      goto LABEL_61;
    }
    if (v42 != 4170)
    {
      v43 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)&buf[4] = v36;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v74;
        *(_WORD *)v90 = 1024;
        *(_DWORD *)&v90[2] = v71;
        *(_WORD *)&v90[6] = 1024;
        *(_DWORD *)&v90[8] = v72;
        *(_WORD *)v91 = 1024;
        *(_DWORD *)&v91[2] = v42;
        _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Failed to update connection parameters with interval=(%d/%d) peripheralLatency=%d, timeout=%d, status=%{bluetooth:OI_STATUS}u", buf, 0x20u);
      }
    }
    sub_100043728(&v78);
    v11 = 914;
  }
LABEL_97:
  sub_100034234((uint64_t)v79);

  return v11;
}

void sub_10061EBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  va_list va;

  va_start(va, a12);
  sub_100034234((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_10061EC50(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10061ECB8;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_10061ECB8(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  const unsigned __int8 *v8;
  void *v9;
  id v10;
  void *v11;
  unsigned __int8 *v12;
  const unsigned __int8 **v13;
  BOOL v14;
  _DWORD v15[2];
  __int16 v16;
  int v17;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = *(unsigned __int8 *)(v1 + 625);
  if (v2 != v3)
  {
    v5 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v15[0] = 67109376;
      v15[1] = v3;
      v16 = 1024;
      v17 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Low Power Mode has changed from %d to %d", (uint8_t *)v15, 0xEu);
      LOBYTE(v2) = *(_BYTE *)(a1 + 40);
    }
    *(_BYTE *)(v1 + 625) = v2;
    v6 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 944))(v6))
    {
      v7 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 344))(v7))
      {
        v8 = *(const unsigned __int8 **)(v1 + 376);
        if (v8 != (const unsigned __int8 *)(v1 + 384))
        {
          do
          {
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093DDE8);
            v9 = off_1009778C0;
            v10 = sub_100030DF4(v8 + 32);
            v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
            LODWORD(v9) = sub_100658AD4((uint64_t)v9, v11);

            if ((_DWORD)v9)
              sub_10061DCA0(v1, *((_QWORD *)v8 + 6));
            v12 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
            if (v12)
            {
              do
              {
                v13 = (const unsigned __int8 **)v12;
                v12 = *(unsigned __int8 **)v12;
              }
              while (v12);
            }
            else
            {
              do
              {
                v13 = (const unsigned __int8 **)*((_QWORD *)v8 + 2);
                v14 = *v13 == v8;
                v8 = (const unsigned __int8 *)v13;
              }
              while (!v14);
            }
            v8 = (const unsigned __int8 *)v13;
          }
          while (v13 != (const unsigned __int8 **)(v1 + 384));
        }
      }
    }
  }
}

void sub_10061EE80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10061EE98(uint64_t a1, char a2)
{
  sub_10061EC50(a1 - 88, a2);
}

void sub_10061EEB8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  _QWORD v4[4];
  __int128 v5;
  __int128 v6;

  v2 = a2[1];
  v5 = *a2;
  v6 = v2;
  v3 = sub_1000419F4();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10061EF40;
  v4[3] = &unk_1009181F8;
  sub_100041A34(v3, v4);
}

void sub_10061EF40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  char v14;
  char v15;
  uint64_t v16;
  uint8_t *v17;
  char v18;
  char v19;
  uint8_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint8_t buf[8];
  __int128 v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  int v32;
  __int16 v33;
  char v34;
  char v35;
  char v36;
  char v37;
  uint8_t v38;
  char v39;
  char v40;

  v3 = a1 + 52;
  v2 = *(_QWORD *)(a1 + 52);
  v4 = *(unsigned __int8 *)(a1 + 40);
  v5 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
  {
    v22 = *(unsigned __int16 *)(a1 + 42);
    v23 = *(char *)(a1 + 46);
    v24 = *(char *)(a1 + 45);
    v25 = *(char *)(a1 + 44);
    *(_DWORD *)buf = 68159746;
    *(_DWORD *)&buf[4] = 43;
    LOWORD(v28) = 2096;
    *(_QWORD *)((char *)&v28 + 2) = a1 + 32;
    WORD5(v28) = 1024;
    HIDWORD(v28) = v4;
    LOWORD(v29) = 1024;
    *(_DWORD *)((char *)&v29 + 2) = v22;
    HIWORD(v29) = 1040;
    LODWORD(v30) = 8;
    WORD2(v30) = 2096;
    *(_QWORD *)((char *)&v30 + 6) = v3;
    HIWORD(v30) = 1024;
    LODWORD(v31) = v23;
    WORD2(v31) = 1024;
    *(_DWORD *)((char *)&v31 + 6) = v24;
    WORD5(v31) = 1024;
    HIDWORD(v31) = v25;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "aopRssiDetectEvent: AOPBTConnectionRSSIDetect entry, entry_buff:%.43P len:%d handle:0x%2X rssi:%.8P rssi:%d:%d:%d", buf, 0x40u);
    v5 = qword_100999890;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    sub_1007120B4(v5, v6, v7, v8, v9, v10, v11, v12);
    if (v4)
    {
LABEL_5:
      if (v4 < 0x20)
      {
        v13 = sub_10019ACEC(*(unsigned __int16 *)(a1 + 42));
        v26 = v2;
        v14 = *(_BYTE *)(a1 + 44);
        v15 = *(_BYTE *)(a1 + 45);
        v16 = 1;
        v17 = (uint8_t *)&v26;
        v18 = *(_BYTE *)(a1 + 46);
        do
        {
          if ((char)buf[v16 - 8] < (char)v2)
          {
            LOBYTE(v2) = buf[v16 - 8];
            v17 = &buf[v16 - 8];
          }
          ++v16;
        }
        while (v16 != 8);
        v19 = *(_BYTE *)(a1 + 51);
        if (qword_1009778A8 != -1)
          dispatch_once(&qword_1009778A8, &stru_10093DDC8);
        v20 = *v17;
        v21 = sub_1000419F4();
        *(_QWORD *)buf = _NSConcreteStackBlock;
        *(_QWORD *)&v28 = 3221225472;
        *((_QWORD *)&v28 + 1) = sub_10063F6B0;
        v29 = &unk_10093DB00;
        v31 = 0uLL;
        *(_QWORD *)&v30 = v13;
        *((_QWORD *)&v30 + 1) = &v26;
        v34 = 32;
        v35 = v14;
        v36 = v15;
        v37 = v18;
        v38 = v20;
        v33 = 0;
        v32 = 0;
        v39 = 0;
        v40 = v19;
        sub_100041A34(v21, buf);
      }
      else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      {
        sub_100712054();
      }
      return;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
    sub_100712028();
}

void sub_10061F1CC(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, char a8, char a9, char a10, char a11, char a12, __int16 a13, int a14, char a15, char a16)
{
  uint64_t v21;
  _QWORD v24[6];
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  __int16 v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v21 = sub_1000419F4();
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_10063F6B0;
  v24[3] = &unk_10093DB00;
  v25 = a3;
  v26 = a4;
  v27 = a5;
  v28 = a6;
  v24[4] = a2;
  v24[5] = a7;
  v31 = a8;
  v32 = a9;
  v33 = a10;
  v34 = a11;
  v35 = a12;
  v30 = a13;
  v29 = a14;
  v36 = a15;
  v37 = a16;
  sub_100041A34(v21, v24);
}

void sub_10061F2D0(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  _QWORD v4[4];
  __int128 v5;
  __int128 v6;

  v2 = a2[1];
  v5 = *a2;
  v6 = v2;
  v3 = sub_1000419F4();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10061EF40;
  v4[3] = &unk_1009181F8;
  sub_100041A34(v3, v4);
}

uint64_t sub_10061F358(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 120);
  v6 = 224;
  if (a3)
    v6 = 192;
  sub_10061F3D4(a1 + v6, a2);
  return sub_100034234((uint64_t)v8);
}

void sub_10061F3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10061F3D4(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_1006468EC(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

uint64_t sub_10061F45C(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 120);
  sub_100069060(a1 + 192, a2);
  sub_100069060(a1 + 224, a2);
  return sub_100034234((uint64_t)v5);
}

void sub_10061F4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10061F4C8(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  NSObject *v5;
  id v6;
  void *v7;
  uint64_t *v8;
  NSObject *v9;
  uint64_t v10;
  unint64_t v11;
  uint8_t buf[24];

  v11 = a3;
  v5 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v6 = sub_100030DF4(a2);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "AutoReconnect - Added device \"%{public}@\" to connection filter accept list", buf, 0xCu);

  }
  if (a1 + 800 == sub_100646B28(a1 + 792, a2))
  {
    v9 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100712120(a2, v9);
    v10 = sub_100027F68();
    sub_100576500(v10, 1);
  }
  sub_10005682C((uint64_t **)(a1 + 328), a2, a2);
  *(_QWORD *)buf = &v11;
  v8 = sub_100646BA0(a1 + 352, &v11, (uint64_t)&unk_100740F58, (_QWORD **)buf);
  uuid_copy((unsigned __int8 *)v8 + 40, a2);
  if (!*(_DWORD *)(a1 + 856))
    sub_10061B638(a1, 1u);
}

void sub_10061F62C(uint64_t a1, const unsigned __int8 *a2)
{
  NSObject *v4;
  void **v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *__p[2];
  char v13;
  uint8_t out[40];

  v4 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a2, (char *)out);
    sub_100091AE8(__p, (char *)out);
    if (v13 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Adding \"%{public}s\" to AddToFilterAcceptList list", out, 0xCu);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  v6 = *(void **)(a1 + 760);
  v7 = sub_100030DF4(a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  objc_msgSend(v6, "addObject:", v8);

  v9 = *(void **)(a1 + 768);
  v10 = sub_100030DF4(a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  objc_msgSend(v9, "removeObject:", v11);

}

void sub_10061F768(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10061F784(uint64_t a1, const unsigned __int8 *a2)
{
  NSObject *v4;
  void **v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *__p[2];
  char v13;
  uint8_t out[40];

  v4 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a2, (char *)out);
    sub_100091AE8(__p, (char *)out);
    if (v13 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Adding \"%{public}s\" to RemoveFromFilterAcceptList list", out, 0xCu);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  v6 = *(void **)(a1 + 768);
  v7 = sub_100030DF4(a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  objc_msgSend(v6, "addObject:", v8);

  v9 = *(void **)(a1 + 760);
  v10 = sub_100030DF4(a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  objc_msgSend(v9, "removeObject:", v11);

}

void sub_10061F8C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10061F8DC(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  NSObject *v10;
  unsigned int v12;
  NSObject *v13;
  _BOOL4 v14;
  NSObject *v15;
  unsigned int v16;
  const char *v17;
  NSObject *v18;
  int v19;
  id v20;
  uint64_t *v21;
  NSObject *v22;
  int v23;
  void **v24;
  const char *v25;
  void **v26;
  void *p_p;
  id v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  NSObject *v36;
  const char *v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  void *__p;
  char v47;
  void *v48[2];
  uint64_t v49;
  __int128 v50;
  int v51;
  _QWORD v52[2];
  uint8_t v53[128];
  _BYTE buf[24];
  void *v55;

  v3 = a2;
  v4 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Connect called to \"%{public}@\"", buf, 0xCu);
  }
  v52[0] = 0;
  v52[1] = 0;
  sub_10003415C((uint64_t)v52, a1 + 120);
  if (*(_BYTE *)(a1 + 1059))
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_10071226C();
    v5 = 202;
  }
  else
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    if (sub_100656AA4((uint64_t)off_1009778C0, v3))
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v6 = sub_1000067B8((uint64_t)off_1009778C0, v3);
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = v7 == 0;

      if (v8)
        goto LABEL_16;
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      sub_100660428((uint64_t)off_1009778C0, v3, 2u, (uint64_t)buf);
      v9 = *(_QWORD *)&buf[16];
      sub_10001A82C((uint64_t)buf, *(_QWORD **)&buf[8]);
      if (v9)
      {
LABEL_16:
        sub_100030BCC(buf, v3);
        if (sub_10061CDB8((_QWORD *)a1, buf))
        {
          if ((objc_msgSend(*(id *)(a1 + 768), "containsObject:", v3) & 1) != 0
            || (sub_100030BCC(buf, v3), (sub_100620330(a1, buf) & 1) != 0))
          {
            v10 = qword_100999890;
            if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138543362;
              *(_QWORD *)&buf[4] = v3;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "device \"%{public}@\" pending for removal from filter accept list after asked to disconnect, moving back to our connection list", buf, 0xCu);
            }
            objc_msgSend(*(id *)(a1 + 768), "removeObject:", v3);
            objc_msgSend(*(id *)(a1 + 736), "removeObject:", v3);
          }
          else
          {
            v18 = qword_100999890;
            v5 = 0;
            if (!os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
              goto LABEL_26;
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v3;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Already trying to connect device \"%{public}@\"", buf, 0xCu);
          }
          v5 = 0;
        }
        else
        {
          sub_100030BCC(buf, v3);
          if (sub_100069F08(a1, buf))
          {
            sub_100030BCC(buf, v3);
            v12 = sub_100620330(a1, buf);
            v13 = qword_100999890;
            v14 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT);
            if (v12)
            {
              if (v14)
              {
                *(_DWORD *)buf = 138543362;
                *(_QWORD *)&buf[4] = v3;
                _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Device \"%{public}@\" as it is already connected and in the process of disconnecting", buf, 0xCu);
              }
              v5 = 310;
            }
            else
            {
              if (v14)
              {
                *(_DWORD *)buf = 138543362;
                *(_QWORD *)&buf[4] = v3;
                _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Cannot connect device \"%{public}@\" as it is already connected", buf, 0xCu);
              }
              v5 = 311;
            }
          }
          else
          {
            v15 = qword_100999890;
            if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
            {
              v16 = *(_DWORD *)(a1 + 856);
              if (v16 > 4)
                v17 = "UNKNOWN";
              else
                v17 = (&off_10093E078)[v16];
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = v17;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Current state when trying to connect %{public}s(%d)", buf, 0x12u);
            }
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093DDE8);
            v19 = sub_1006589A8((uint64_t)off_1009778C0, v3);
            v50 = 0uLL;
            v51 = 0;
            if (sub_1006203BC(a1, v19, (uint64_t)&v50)
              && _os_feature_enabled_impl("BluetoothFeatures", "Sentinel"))
            {
              if (qword_1009778C8 != -1)
                dispatch_once(&qword_1009778C8, &stru_10093DDE8);
              sub_10065FD4C((uint64_t)off_1009778C0, v3, SBYTE8(v50));
              if (qword_1009778C8 != -1)
                dispatch_once(&qword_1009778C8, &stru_10093DDE8);
              sub_10065A17C((uint64_t)off_1009778C0, v3, v51);
              v48[0] = 0;
              v48[1] = 0;
              v49 = 0;
              v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString")));
              sub_100091AE8(v48, (char *)objc_msgSend(v20, "UTF8String"));

              *(_QWORD *)buf = v48;
              v21 = sub_100646CDC((uint64_t **)(a1 + 1344), (const void **)v48, (uint64_t)&unk_100740F58, (__int128 **)buf);
              *(_OWORD *)(v21 + 7) = v50;
              *((_DWORD *)v21 + 18) = v51;
              v22 = qword_100999890;
              if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
              {
                v23 = SHIBYTE(v49);
                v24 = (void **)v48[0];
                sub_1006205F0((unsigned int *)&v50);
                v25 = sub_100036064(v19);
                v26 = v48;
                if (v23 < 0)
                  v26 = v24;
                if (v47 >= 0)
                  p_p = &__p;
                else
                  p_p = __p;
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = v26;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = v25;
                *(_WORD *)&buf[22] = 2080;
                v55 = p_p;
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "connScanUseCaseEntryCoex at connect: device %s useCase %s useCaseEntryCoex %s", buf, 0x20u);
                if (v47 < 0)
                  operator delete(__p);
              }
              if (SHIBYTE(v49) < 0)
                operator delete(v48[0]);
            }
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093DDE8);
            v28 = sub_10065C624((uint64_t)off_1009778C0, v3);
            v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "cuFilteredArrayUsingBlock:", &stru_10093D6F8));

            v44 = 0u;
            v45 = 0u;
            v42 = 0u;
            v43 = 0u;
            v31 = v30;
            v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v42, v53, 16);
            if (v32)
            {
              v33 = *(_QWORD *)v43;
              do
              {
                v34 = 0;
                do
                {
                  if (*(_QWORD *)v43 != v33)
                    objc_enumerationMutation(v31);
                  v35 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)v34);
                  if (qword_100977B40 != -1)
                    dispatch_once(&qword_100977B40, &stru_10093DE28);
                  sub_1004BBBEC((uint64_t)off_100977B38, objc_msgSend(v35, "integerValue", (_QWORD)v42));
                  v34 = (char *)v34 + 1;
                }
                while (v32 != v34);
                v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v42, v53, 16);
              }
              while (v32);
            }

            if (*(_DWORD *)(a1 + 920))
            {
              sub_100030BCC(buf, v3);
              sub_10061F62C(a1, buf);
              v5 = 0;
            }
            else
            {
              switch(*(_DWORD *)(a1 + 856))
              {
                case 0:
                  v36 = qword_100999890;
                  if (!os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_89;
                  *(_WORD *)buf = 0;
                  v37 = "Adding device to connecting list";
                  goto LABEL_88;
                case 1:
                  v38 = qword_100999890;
                  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Lets wait for the controller, cancelling", buf, 2u);
                  }
                  if (sub_10061AF78(a1, 1))
                    goto LABEL_89;
                  goto LABEL_92;
                case 2:
                  v39 = qword_100999890;
                  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "will add the device to connecting list once we're done with the pending cancelation", buf, 2u);
                  }
                  goto LABEL_92;
                case 3:
                  v36 = qword_100999890;
                  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    v37 = "adding the device to connecting list , will wait for cancelation to complete before trying to connect to it.";
LABEL_88:
                    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, v37, buf, 2u);
                  }
LABEL_89:
                  v5 = sub_10062079C(a1, v3);
                  goto LABEL_94;
                case 4:
                  v40 = qword_100999890;
                  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "will add the device to connecting list once we're done with auto reconnecct", buf, 2u);
                  }
LABEL_92:
                  sub_100030BCC(buf, v3);
                  sub_10061F62C(a1, buf);
                  goto LABEL_93;
                default:
LABEL_93:
                  v5 = 0;
LABEL_94:
                  v41 = sub_1000419F4();
                  sub_100041A34(v41, &stru_10093D718);
                  break;
              }
            }

          }
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
          sub_1007121A4();
        v5 = 149;
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_100712208();
      v5 = 8;
    }
  }
LABEL_26:
  sub_100034234((uint64_t)v52);

  return v5;
}

void sub_100620268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  void *v30;
  void *v31;

  sub_100034234((uint64_t)&a30);
  _Unwind_Resume(a1);
}

id sub_100620330(uint64_t a1, const unsigned __int8 *a2)
{
  void *v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 120);
  v4 = *(void **)(a1 + 736);
  v5 = sub_100030DF4(a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = objc_msgSend(v4, "containsObject:", v6);

  sub_100034234((uint64_t)v9);
  return v7;
}

void sub_10062039C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1006203BC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  NSObject *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  _QWORD v19[2];
  _DWORD buf[16];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 120);
  if ((a2 & 0xFFFF0000) == 0x10000)
    v6 = 63;
  else
    v6 = 0;
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10093DE28);
  v7 = sub_100046928((uint64_t)off_100977B38, v6, 1u);
  v8 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v9 = sub_100036064(a2);
    v10 = "Yes";
    buf[0] = 136447746;
    *(_QWORD *)&buf[1] = v9;
    LOWORD(buf[3]) = 2082;
    if ((v7 & 4) != 0)
      v11 = "Yes";
    else
      v11 = "No";
    *(_QWORD *)((char *)&buf[3] + 2) = v11;
    HIWORD(buf[5]) = 2048;
    if ((v7 & 2) != 0)
      v12 = "Yes";
    else
      v12 = "No";
    *(_QWORD *)&buf[6] = v6;
    if ((v7 & 1) != 0)
      v13 = "Yes";
    else
      v13 = "No";
    LOWORD(buf[8]) = 2082;
    if ((v7 & 8) == 0)
      v10 = "No";
    *(_QWORD *)((char *)&buf[8] + 2) = v12;
    HIWORD(buf[10]) = 2082;
    *(_QWORD *)&buf[11] = v13;
    LOWORD(buf[13]) = 2082;
    *(_QWORD *)((char *)&buf[13] + 2) = v10;
    HIWORD(buf[15]) = 2048;
    *(_QWORD *)&v21 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "getConnScanUseCaseEntryCoex for useCase %{public}s WiFi Coex Critical %{public}s (0x%llx) WiFi assoc 2.4GHz %{public}s BT Audio Active %{public}s HRB %{public}s coexState 0x%llx", (uint8_t *)buf, 0x48u);
  }
  v37 = 0;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  memset(buf, 0, sizeof(buf));
  v14 = sub_10063FFC4(a1, a2, (uint64_t)buf);
  if (v7 < 0x10)
    v15 = v14;
  else
    v15 = 0;
  if ((_DWORD)v15 == 1)
  {
    if (LOBYTE(buf[0]))
      v16 = v7;
    else
      v16 = 0;
    v17 = &buf[5 * v16];
    *(_DWORD *)(a3 + 16) = v17[5];
    *(_OWORD *)a3 = *(_OWORD *)(v17 + 1);
  }
  sub_100034234((uint64_t)v19);
  return v15;
}

void sub_1006205D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1006205F0(unsigned int *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _OWORD v12[4];
  void *__p[2];
  __int128 v14;
  __int128 v15;
  _OWORD v16[9];
  uint64_t v17;

  v17 = 0;
  v15 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)__p = 0u;
  v14 = 0u;
  memset(v12, 0, sizeof(v12));
  sub_100272ADC((uint64_t)v12);
  v2 = sub_1002614D8(v12, (uint64_t)"totalRx:", 8);
  v3 = (_QWORD *)std::ostream::operator<<(v2, *a1);
  v4 = sub_1002614D8(v3, (uint64_t)" btMCRx:", 8);
  v5 = (_QWORD *)std::ostream::operator<<(v4, a1[1]);
  v6 = sub_1002614D8(v5, (uint64_t)" timeout:", 9);
  v7 = (_QWORD *)std::ostream::operator<<(v6, a1[3]);
  v8 = sub_1002614D8(v7, (uint64_t)" connDutyCycle:", 15);
  v9 = (_QWORD *)std::ostream::operator<<(v8, a1[2]);
  v10 = sub_1002614D8(v9, (uint64_t)" scWindow:", 10);
  std::ostream::operator<<(v10, a1[4]);
  std::stringbuf::str((char *)v12 + 8);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v12 + 8);
  return std::ios::~ios(v16);
}

void sub_10062073C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100272CFC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_100620750(id a1, NSNumber *a2)
{
  NSNumber *v2;
  NSNumber *v3;
  NSNumber *v4;

  v2 = a2;
  if (-[NSNumber integerValue](v2, "integerValue") <= 0)
    v3 = 0;
  else
    v3 = v2;
  v4 = v3;

  return v4;
}

void sub_10062078C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10062079C(uint64_t a1, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  id v5;
  NSObject *v6;
  id *v7;
  void *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  const char *v12;
  _QWORD *v13;
  const char *v14;
  void *v15;
  NSObject *v16;
  id v17;
  id v18;
  int v19;
  int v20;
  id v21;
  void *v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD **v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  int v37;
  NSObject *v38;
  char v39;
  NSObject *v40;
  id v41;
  int v42;
  uint64_t **v43;
  uint64_t *v45;
  int v46;
  int v47;
  unsigned int v48;
  id v49;
  void *v50;
  NSObject *v51;
  const char *v52;
  void **v53;
  NSObject *v54;
  void *v55;
  int v56;
  int v57;
  NSObject *v58;
  int v59;
  NSObject *v60;
  int v61;
  int v62;
  unsigned int v63;
  const char *v64;
  char v65;
  unsigned int v66;
  unsigned int v67;
  NSObject *v68;
  int v69;
  int v70;
  unsigned int v71;
  const char *v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  NSObject *v78;
  _QWORD *v79;
  _QWORD **v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  NSObject *v89;
  _BOOL4 v90;
  __int16 v91;
  uint64_t v92;
  int v93;
  int v94;
  NSObject *v95;
  _BOOL4 v96;
  unsigned __int16 v97;
  uint64_t v98;
  int v99;
  int v100;
  NSObject *v101;
  NSObject *v102;
  uint8_t *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  void *v107;
  int v108;
  int v109;
  void *v110[2];
  char v111;
  uint64_t v112[3];
  _QWORD v113[5];
  __int128 v114;
  int v115;
  _QWORD v116[4];
  id v117;
  _QWORD v118[4];
  id v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  __int128 __dst;
  uint64_t v125;
  void *v126[2];
  char v127;
  char v128;
  void *v129[2];
  char v130;
  unsigned __int16 v131;
  unsigned __int16 v132;
  unsigned __int8 v133;
  unsigned __int8 v134;
  void *__p[2];
  char v136;
  char v137;
  __int16 v138;
  _DWORD v139[2];
  _QWORD v140[2];
  uint8_t v141[32];
  uint8_t buf[24];
  _BYTE v143[20];
  __int16 v144;
  int v145;
  __int16 v146;
  const char *v147;
  int v148;
  uint64_t v149;
  _QWORD **v150;
  _QWORD *v151;
  uint64_t v152;

  v5 = a2;
  v140[0] = 0;
  v140[1] = 0;
  sub_10003415C((uint64_t)v140, a1 + 120);
  v138 = 0;
  v137 = 0;
  v139[0] = 0;
  *(_DWORD *)((char *)v139 + 3) = 0;
  if (*(_BYTE *)(a1 + 824) && *(_QWORD *)(a1 + 344) >= (unint64_t)*(unsigned __int8 *)(a1 + 824))
    goto LABEL_99;
  if (!*(_BYTE *)(a1 + 184))
    goto LABEL_88;
  if (sub_10062B76C(a1, v5))
  {
    v6 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: LeConnectionDenyList: Device %{public}@ is currently blocked, ignoring request", buf, 0xCu);
    }
LABEL_7:
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_10071238C();
    v7 = (id *)(a1 + 752);
LABEL_102:
    objc_msgSend(*v7, "addObject:", v5);
LABEL_103:
    if (_os_feature_enabled_impl("BluetoothFeatures", "SentinelConnScanRx"))
    {
      v150 = 0;
      v151 = 0;
      v152 = 0;
      v41 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "UUIDString")));
      sub_100091AE8(&v150, (char *)objc_msgSend(v41, "UTF8String"));

      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v42 = sub_1006589A8((uint64_t)off_1009778C0, v5);
      if ((v42 - 0x10000) <= 0x19 && ((1 << v42) & 0x37800FF) != 0)
      {
        sub_100030BCC(buf, v5);
        v43 = (uint64_t **)(a1 + 600);
        if (a1 + 608 == sub_100647368(a1 + 600, buf))
        {
          if (a1 + 1352 == sub_10001F2AC(a1 + 1344, (const void **)&v150))
          {
            v54 = qword_100999890;
            if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
              sub_100712304(v42, (uint64_t)v5, v54);
          }
          else
          {
            *(_QWORD *)buf = &v150;
            v45 = sub_100646CDC((uint64_t **)(a1 + 1344), (const void **)&v150, (uint64_t)&unk_100740F58, (__int128 **)buf);
            v114 = *(_OWORD *)(v45 + 7);
            v115 = *((_DWORD *)v45 + 18);
            v46 = v114;
            v47 = DWORD1(v114);
            v48 = HIDWORD(v114);
            if ((_DWORD)v114 || __PAIR64__(DWORD1(v114), 0) != HIDWORD(v114))
            {
              memset(v141, 0, 24);
              v49 = v5;
              *(_QWORD *)buf = v49;
              *(_DWORD *)&buf[8] = v46;
              *(_DWORD *)&buf[12] = v47;
              *(_QWORD *)&buf[16] = v48;
              *(_DWORD *)v143 = v42;
              v113[0] = _NSConcreteStackBlock;
              v113[1] = 3221225472;
              v113[2] = sub_10063EBBC;
              v113[3] = &unk_10093DB80;
              v113[4] = a1;
              *(_QWORD *)&v143[8] = objc_retainBlock(v113);
              sub_10063EA74((uint64_t *)v141, (uint64_t *)buf);

              if (qword_100977B40 != -1)
                dispatch_once(&qword_100977B40, &stru_10093DE28);
              v50 = off_100977B38;
              memset(v112, 0, sizeof(v112));
              sub_100648A38(v112, *(uint64_t *)v141, *(uint64_t *)&v141[8], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v141[8] - *(_QWORD *)v141) >> 3));
              sub_1004BAD40((uint64_t)v50, v112);
              *(_QWORD *)buf = v112;
              sub_1006488A4((void ***)buf);
              sub_100030BCC(buf, v49);
              sub_1006487A8(v43, buf, buf);
              v51 = qword_100999890;
              if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
              {
                sub_1006205F0((unsigned int *)&v114);
                v52 = sub_100036064(v42);
                v53 = v111 >= 0 ? v110 : (void **)v110[0];
                *(_DWORD *)buf = 138543874;
                *(_QWORD *)&buf[4] = v49;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = v52;
                *(_WORD *)&buf[22] = 2080;
                *(_QWORD *)v143 = v53;
                _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "requestConnectionScanRxThreshold for device \"%{public}@\" useCase %s params %s", buf, 0x20u);
                if (v111 < 0)
                  operator delete(v110[0]);
              }
              *(_QWORD *)buf = v141;
              sub_1006488A4((void ***)buf);
            }
          }
        }
      }
      if (SHIBYTE(v152) < 0)
        operator delete(v150);
    }
    v32 = 0;
    goto LABEL_112;
  }
  if (!*(_BYTE *)(a1 + 184))
    goto LABEL_88;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v8 = off_1009778C0;
  sub_100091AE8(__p, "PairedUsingRSA");
  if (sub_10000628C((uint64_t)v8, v5, (uint64_t)__p))
  {
    v9 = sub_10003BE44();
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 384))(v9);
  }
  else
  {
    v10 = 0;
  }
  if (v136 < 0)
    operator delete(__p[0]);
  v11 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v12 = "NO";
    if (v10)
      v12 = "YES";
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "MUC - Adding device \"%{public}@\" to connection filter accept list supportsVAPairing:%{public}s, waiting for controller to complete.", buf, 0x16u);
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  if (!sub_100656AA4((uint64_t)off_1009778C0, v5))
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100712208();
    v32 = 8;
    goto LABEL_112;
  }
  v150 = 0;
  v151 = 0;
  v152 = 0;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  sub_1006602C4((uint64_t)off_1009778C0, v5, (uint64_t)&v150);
  v13 = v150;
  if (v150 == &v151)
  {
LABEL_43:
    sub_100030BCC(buf, v5);
    if (a1 + 336 != sub_100647368(a1 + 328, buf) && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
      sub_1007123F0();
    sub_100030BCC(buf, v5);
    sub_1006487A8((uint64_t **)(a1 + 328), buf, buf);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    if (sub_10065FB94((uint64_t)off_1009778C0, v5))
    {
      v27 = sub_1000438A4();
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v28 = sub_1000589DC((uint64_t)off_1009778C0, v5, 0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 3408))(v27, v28);
    }
    sub_10001A82C((uint64_t)&v150, v151);
    goto LABEL_53;
  }
  if (v10)
    v14 = "YES";
  else
    v14 = "NO";
  while (1)
  {
    v15 = (void *)v13[4];
    v110[0] = v15;
    v16 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v17 = sub_100021770((uint64_t)v15);
      v18 = (id)objc_claimAutoreleasedReturnValue(v17);
      *(_DWORD *)buf = 138544131;
      *(_QWORD *)&buf[4] = v5;
      *(_WORD *)&buf[12] = 2160;
      *(_QWORD *)&buf[14] = 1752392040;
      *(_WORD *)&buf[22] = 2113;
      *(_QWORD *)v143 = v18;
      *(_WORD *)&v143[8] = 2080;
      *(_QWORD *)&v143[10] = v14;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "MUC - Adding device \"%{public}@\" with address \"%{private, mask.hash}@\" to connection filter accept list supportsVAPairing:%s, waiting for controller to complete.", buf, 0x2Au);

      v15 = v110[0];
    }
    v19 = sub_10062B3FC(a1, (unint64_t)v15);
    v20 = v19;
    if (!v19)
      goto LABEL_37;
    if (v19 != 4152)
      break;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    {
      v21 = sub_100021770((uint64_t)v110[0]);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      sub_1007124BC(v22, &v148, &v149);
    }
LABEL_37:
    sub_100030BCC(buf, v5);
    *(_QWORD *)v141 = v110;
    v23 = sub_100646BA0(a1 + 352, (unint64_t *)v110, (uint64_t)&unk_100740F58, (_QWORD **)v141);
    uuid_copy((unsigned __int8 *)v23 + 40, buf);
    v24 = (_QWORD *)v13[1];
    if (v24)
    {
      do
      {
        v25 = (_QWORD **)v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
    }
    else
    {
      do
      {
        v25 = (_QWORD **)v13[2];
        v26 = *v25 == v13;
        v13 = v25;
      }
      while (!v26);
    }
    v13 = v25;
    if (v25 == &v151)
      goto LABEL_43;
  }
  v33 = *(uint64_t **)(a1 + 352);
  if (v33 != (uint64_t *)(a1 + 360))
  {
    do
    {
      sub_100030BCC(buf, v5);
      v34 = uuid_compare((const unsigned __int8 *)v33 + 40, buf);
      if ((_DWORD)v34)
      {
        v35 = (uint64_t *)v33[1];
        if (v35)
        {
          do
          {
            v36 = v35;
            v35 = (uint64_t *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            v36 = (uint64_t *)v33[2];
            v26 = *v36 == (_QWORD)v33;
            v33 = v36;
          }
          while (!v26);
        }
      }
      else
      {
        v37 = sub_10062B240(v34, v33[4]);
        v38 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v37;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "removeAddressFromBTController returned %d", buf, 8u);
        }
        v36 = sub_1000040CC((uint64_t **)(a1 + 352), v33);
        operator delete(v33);
      }
      v33 = v36;
    }
    while (v36 != (uint64_t *)(a1 + 360));
  }
  sub_10001A82C((uint64_t)&v150, v151);
  if (v20 > 103)
  {
    if (v20 != 104)
    {
      if (v20 != 160)
        goto LABEL_96;
      goto LABEL_7;
    }
LABEL_99:
    v40 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Added device \"%{public}@\" to connection overflow list", buf, 0xCu);
    }
    v7 = (id *)(a1 + 744);
    goto LABEL_102;
  }
  if (!v20)
  {
LABEL_53:
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    sub_10065CCCC((uint64_t)off_1009778C0, v5, (uint64_t)buf);
    if (!*(_QWORD *)buf && !*(_QWORD *)&buf[8])
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      sub_10065C9BC((uint64_t)off_1009778C0, v5);
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    sub_10065B534((uint64_t)off_1009778C0, v5, 1);
    if (qword_10097AC58 != -1)
      dispatch_once(&qword_10097AC58, &stru_10093DE68);
    sub_1006C135C(qword_10097AC50, v5, 1);
    v134 = 2;
    v133 = 12;
    LOWORD(v114) = 12;
    v132 = 12;
    v131 = 200;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    v29 = sub_1006589A8((uint64_t)off_1009778C0, v5);
    v30 = v29;
    switch(v29)
    {
      case 196608:
        goto LABEL_69;
      case 257:
        v39 = 0;
        LOWORD(v114) = 12;
        v132 = 12;
LABEL_141:
        v57 = 1;
        goto LABEL_144;
      case 19:
LABEL_69:
        LOWORD(v114) = *(_WORD *)(a1 + 1096);
        v132 = *(_WORD *)(a1 + 1098);
        v134 = *(_BYTE *)(a1 + 1100);
        v31 = *(_BYTE *)(a1 + 1101);
        break;
      default:
        sub_100030BCC(buf, v5);
        if (sub_100624080(a1, buf))
        {
          v31 = 6;
        }
        else
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10093DDE8);
          v55 = off_1009778C0;
          sub_100091AE8(v129, "FastConnection");
          v56 = sub_10000628C((uint64_t)v55, v5, (uint64_t)v129);
          if (v130 < 0)
            operator delete(v129[0]);
          if (!v56)
          {
            if (v30 == 18)
            {
              v134 = 2;
              v133 = 4;
              LOWORD(v114) = 23;
              v132 = 23;
              *(_DWORD *)v141 = 0;
              v86 = sub_100027F68();
              sub_100091AE8(buf, "LE");
              sub_100091AE8(&v150, "SRPipeMinConInt");
              v87 = (*(uint64_t (**)(uint64_t, uint8_t *, _QWORD ***, uint8_t *))(*(_QWORD *)v86 + 88))(v86, buf, &v150, v141);
              if (*(int *)v141 > 0)
                v88 = v87;
              else
                v88 = 0;
              if (SHIBYTE(v152) < 0)
                operator delete(v150);
              if ((char)buf[23] < 0)
                operator delete(*(void **)buf);
              if (v88)
              {
                v89 = qword_100999890;
                v90 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT);
                v91 = *(_WORD *)v141;
                if (v90)
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&buf[4] = *(_DWORD *)v141;
                  _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "Warning: Using override value (%d) SRPipe min connection interval", buf, 8u);
                  v91 = *(_WORD *)v141;
                }
                LOWORD(v114) = v91;
              }
              LODWORD(v110[0]) = 0;
              v92 = sub_100027F68();
              sub_100091AE8(buf, "LE");
              sub_100091AE8(&v150, "SRPipeMaxConInt");
              v93 = (*(uint64_t (**)(uint64_t, uint8_t *, _QWORD ***, void **))(*(_QWORD *)v92 + 88))(v92, buf, &v150, v110);
              if (SLODWORD(v110[0]) > 0)
                v94 = v93;
              else
                v94 = 0;
              if (SHIBYTE(v152) < 0)
                operator delete(v150);
              if ((char)buf[23] < 0)
                operator delete(*(void **)buf);
              if (v94)
              {
                v95 = qword_100999890;
                v96 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT);
                v97 = (unsigned __int16)v110[0];
                if (v96)
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&buf[4] = v110[0];
                  _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "Warning: Using override value (%d) SRPipe max connection interval", buf, 8u);
                  v97 = (unsigned __int16)v110[0];
                }
                v132 = v97;
              }
              v128 = 0;
              v98 = sub_100027F68();
              sub_100091AE8(buf, "LE");
              sub_100091AE8(&v150, "SRPipeSpecialParamsOff");
              v99 = (*(uint64_t (**)(uint64_t, uint8_t *, _QWORD ***, char *))(*(_QWORD *)v98 + 72))(v98, buf, &v150, &v128);
              if (v128)
                v100 = v99;
              else
                v100 = 0;
              if (SHIBYTE(v152) < 0)
                operator delete(v150);
              if ((char)buf[23] < 0)
                operator delete(*(void **)buf);
              if (v100)
              {
                v101 = qword_100999890;
                if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "Warning: Disabling special SRPipe connection intervals", buf, 2u);
                }
                LOWORD(v114) = 12;
                v132 = 12;
              }
              v39 = 0;
              v57 = v100 ^ 1;
              goto LABEL_144;
            }
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093DDE8);
            if (sub_100659BAC((uint64_t)off_1009778C0, v5))
            {
              v57 = 0;
            }
            else
            {
              if (qword_1009778C8 != -1)
                dispatch_once(&qword_1009778C8, &stru_10093DDE8);
              v107 = off_1009778C0;
              sub_100091AE8(v126, "requiresCTOFix");
              v57 = sub_10000628C((uint64_t)v107, v5, (uint64_t)v126);
              if (v127 < 0)
                operator delete(v126[0]);
              if (v57)
              {
                v131 = 300;
                goto LABEL_135;
              }
            }
LABEL_136:
            if ((v30 & 0xFFFF0000) == 0x10000)
            {
              if (_os_feature_enabled_impl("BluetoothFeatures", "EnableLEConnectionTxPowerBoost"))
              {
                v58 = qword_100999890;
                if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138543362;
                  *(_QWORD *)&buf[4] = v5;
                  _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "device \"%{public}@\" Using Tx Boosted power for LE Connection ", buf, 0xCu);
                }
                v39 = 1;
                v138 = 257;
                v137 = 1;
                goto LABEL_141;
              }
              v39 = 1;
            }
            else
            {
              v39 = 0;
            }
LABEL_144:
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093DDE8);
            v59 = sub_100662978((uint64_t)off_1009778C0, v5, &v134, &v133, &v114, &v132, &v131, (_BYTE *)&v138 + 1, &v138, &v137);
            v60 = qword_100999890;
            if (v59)
            {
              if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138543362;
                *(_QWORD *)&buf[4] = v5;
                _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "device \"%{public}@\" has override connection params", buf, 0xCu);
                v60 = qword_100999890;
              }
              v57 = 1;
            }
            if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
            {
              v61 = v134;
              v62 = v133;
              LOWORD(v3) = v114;
              LOWORD(v2) = v132;
              sub_100030BCC(&v150, v5);
              v63 = sub_100624080(a1, (const unsigned __int8 *)&v150);
              *(_DWORD *)buf = 138544898;
              *(_QWORD *)&buf[4] = v5;
              *(_WORD *)&buf[12] = 1024;
              v64 = "NO";
              if (v63)
                v64 = "YES";
              *(_DWORD *)&buf[14] = v61;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v62;
              *(_WORD *)v143 = 2048;
              *(double *)&v143[2] = (double)v3 * 1.25;
              *(_WORD *)&v143[10] = 2048;
              *(double *)&v143[12] = (double)v2 * 1.25;
              v144 = 1024;
              v145 = v57;
              v146 = 2082;
              v147 = v64;
              _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Added device \"%{public}@\" to connection filter accept list with CE min %d, max %d, connectionInterval min:%f ms max:%f ms WLParams %d, LowLatency %{public}s", buf, 0x3Cu);
            }
            v150 = 0;
            v151 = 0;
            v152 = 0;
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093DDE8);
            sub_1006602C4((uint64_t)off_1009778C0, v5, (uint64_t)&v150);
            v65 = v39 ^ 1;
            if (!*(_BYTE *)(a1 + 1102))
              v65 = 1;
            if ((v65 & 1) != 0)
            {
              if (!v57)
              {
LABEL_173:
                v81 = sub_1000438A4();
                if (sub_100333DE4(v81, 3)
                  || *(_BYTE *)(a1 + 1111)
                  && (v82 = sub_1000438A4(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v82 + 2632))(v82)))
                {
                  if (sub_1006184F4(a1, v5))
                  {
                    memset(buf, 0, sizeof(buf));
                    v83 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "UUIDString")));
                    sub_100091AE8(buf, (char *)objc_msgSend(v83, "UTF8String"));

                    if ((char)buf[23] < 0)
                    {
                      sub_10003430C(&__dst, *(void **)buf, *(unint64_t *)&buf[8]);
                    }
                    else
                    {
                      __dst = *(_OWORD *)buf;
                      v125 = *(_QWORD *)&buf[16];
                    }
                    sub_10063D49C((_QWORD *)a1);
                    v84 = sub_10001F2AC(a1 + 1176, (const void **)&__dst);
                    v85 = a1 + 1184;
                    if (SHIBYTE(v125) < 0)
                      operator delete((void *)__dst);
                    if (v85 == v84)
                    {
                      if ((char)buf[23] < 0)
                      {
                        sub_10003430C(&v122, *(void **)buf, *(unint64_t *)&buf[8]);
                      }
                      else
                      {
                        v122 = *(_OWORD *)buf;
                        v123 = *(_QWORD *)&buf[16];
                      }
                      sub_10063D624(a1, &v122, 0);
                      if (SHIBYTE(v123) < 0)
                        operator delete((void *)v122);
                    }
                    else
                    {
                      sub_10061DA18(a1, v5);
                    }
                    v102 = qword_100999890;
                    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
                    {
                      if ((char)buf[23] < 0)
                      {
                        v103 = *(uint8_t **)buf;
                        sub_10003430C(&v120, *(void **)buf, *(unint64_t *)&buf[8]);
                      }
                      else
                      {
                        v120 = *(_OWORD *)buf;
                        v121 = *(_QWORD *)&buf[16];
                        v103 = buf;
                      }
                      v104 = sub_10001F2AC(a1 + 1176, (const void **)&v120);
                      v105 = v85 == v104 ? 2 : *(_DWORD *)(v104 + 56);
                      *(_DWORD *)v141 = 136446466;
                      *(_QWORD *)&v141[4] = v103;
                      *(_WORD *)&v141[12] = 1024;
                      *(_DWORD *)&v141[14] = v105;
                      _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEFAULT, "RSSI threshold state for %{public}s is %d", v141, 0x12u);
                      if (SHIBYTE(v121) < 0)
                        operator delete((void *)v120);
                    }
                    if ((char)buf[23] < 0)
                      operator delete(*(void **)buf);
                  }
                  sub_100629EDC(a1, v5, 0);
                }
                if (*(_BYTE *)(a1 + 1111))
                {
                  v106 = sub_1000438A4();
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v106 + 2632))(v106))
                    sub_100619F84(a1, v5, *(_BYTE *)(a1 + 728), 0);
                }
                sub_10001A82C((uint64_t)&v150, v151);
                goto LABEL_103;
              }
            }
            else
            {
              v66 = *(unsigned __int16 *)(a1 + 1104);
              LOWORD(v114) = *(_WORD *)(a1 + 1104);
              v67 = *(unsigned __int16 *)(a1 + 1106);
              v132 = *(_WORD *)(a1 + 1106);
              v68 = qword_100999890;
              if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
              {
                v69 = v134;
                v70 = v133;
                sub_100030BCC(v141, v5);
                v71 = sub_100624080(a1, v141);
                *(_DWORD *)buf = 138544898;
                v72 = "NO";
                if (v71)
                  v72 = "YES";
                *(_QWORD *)&buf[4] = v5;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v69;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v70;
                *(_WORD *)v143 = 2048;
                *(double *)&v143[2] = (double)v66 * 1.25;
                *(_WORD *)&v143[10] = 2048;
                *(double *)&v143[12] = (double)v67 * 1.25;
                v144 = 1024;
                v145 = 1;
                v146 = 2082;
                v147 = v72;
                _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Added device \"%{public}@\" to connection filter accept list with CE min %d, max %d, connectionInterval min:%f ms max:%f ms WLParams %d, LowLatency %{public}s (overridden for FindMy)", buf, 0x3Cu);
              }
            }
            v73 = v150;
            if (v150 != &v151)
            {
              do
              {
                v74 = v73[4];
                *(_DWORD *)&v141[3] = 0;
                *(_DWORD *)v141 = 0;
                v75 = sub_1000746A4(v74);
                *(_DWORD *)v141 = v75;
                v141[6] = BYTE6(v75);
                *(_WORD *)&v141[4] = WORD2(v75);
                v76 = sub_1000438A4();
                BYTE2(v109) = v137;
                LOBYTE(v109) = HIBYTE(v138);
                BYTE1(v109) = v138;
                LOWORD(v108) = v133;
                v77 = (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int, _DWORD *, _DWORD, _QWORD, int, _QWORD))(*(_QWORD *)v76 + 3592))(v76, v141, 1, (unsigned __int16)v114, v132, 0, v131, v134, v108, v139, 0, 0, v109, 0);
                v78 = qword_100999890;
                if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&buf[4] = v77;
                  _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "addDeviceToFilterAcceptListUnified returned %d", buf, 8u);
                }
                v79 = (_QWORD *)v73[1];
                if (v79)
                {
                  do
                  {
                    v80 = (_QWORD **)v79;
                    v79 = (_QWORD *)*v79;
                  }
                  while (v79);
                }
                else
                {
                  do
                  {
                    v80 = (_QWORD **)v73[2];
                    v26 = *v80 == v73;
                    v73 = v80;
                  }
                  while (!v26);
                }
                v73 = v80;
              }
              while (v80 != &v151);
            }
            goto LABEL_173;
          }
          v31 = 4;
        }
        v134 = v31;
        break;
    }
    v133 = v31;
LABEL_135:
    v57 = 1;
    goto LABEL_136;
  }
  if (v20 == 103)
  {
LABEL_88:
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100712298();
    v118[0] = _NSConcreteStackBlock;
    v118[1] = 3221225472;
    v118[2] = sub_10063EA3C;
    v118[3] = &unk_10093D828;
    v119 = v5;
    sub_1006169D0((os_unfair_lock_s *)a1, v118);

    v32 = 202;
    goto LABEL_112;
  }
LABEL_96:
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    sub_100712450();
  v116[0] = _NSConcreteStackBlock;
  v116[1] = 3221225472;
  v116[2] = sub_10063EA58;
  v116[3] = &unk_10093D828;
  v117 = v5;
  sub_1006169D0((os_unfair_lock_s *)a1, v116);

  v32 = 1;
LABEL_112:
  sub_100034234((uint64_t)v140);

  return v32;
}

void sub_100621FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  char a72;
  void *v72;

  if (a61 < 0)
    operator delete(__p);
  sub_100034234((uint64_t)&a72);

  _Unwind_Resume(a1);
}

void sub_1006221D4(id a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  sub_100622214((uint64_t)off_1009778A0);
}

uint64_t sub_100622214(uint64_t a1)
{
  unsigned int v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  _QWORD v8[2];
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  const char *v12;

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 120);
  v2 = *(_DWORD *)(a1 + 920);
  if (v2)
  {
    v3 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(int *)(a1 + 856);
      if (v4 > 4)
        v5 = "UNKNOWN";
      else
        v5 = (&off_10093E078)[v4];
      if (v2 > 3)
        v6 = "UNKNOWN";
      else
        v6 = off_10093DF70[v2 - 1];
      *(_DWORD *)buf = 136446466;
      v10 = v5;
      v11 = 2082;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Not processing outgoing connections. LE Connection State=%{public}s LE Connection Manager State=%{public}s", buf, 0x16u);
    }
  }
  else
  {
    sub_100628CA8(a1);
  }
  return sub_100034234((uint64_t)v8);
}

void sub_10062233C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100622358(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  NSObject *v6;
  void **v7;
  char *v8;
  NSObject *v9;
  _BOOL4 v10;
  uint64_t result;
  void **v12;
  void *v13;
  id v14;
  void *v15;
  unsigned int v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  NSObject *v29;
  void **v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void *__p[2];
  char v36;
  _QWORD v37[4];
  unsigned __int8 v38[16];
  char v39[128];
  uuid_string_t out;

  v6 = qword_1009998D0;
  if (os_log_type_enabled((os_log_t)qword_1009998D0, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a2, out);
    sub_100091AE8(__p, out);
    v7 = v36 >= 0 ? __p : (void **)__p[0];
    v8 = a3 > 0xA ? "unknown" : (&off_10093E0A0)[a3];
    *(_DWORD *)out = 136446466;
    *(_QWORD *)&out[4] = v7;
    *(_WORD *)&out[12] = 2082;
    *(_QWORD *)&out[14] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Device disconnecting - {cbuuid: %{public}s, ledisconnectionreason: %{public}s}", (uint8_t *)out, 0x16u);
    if (v36 < 0)
      operator delete(__p[0]);
  }
  if (sub_100620330(a1, a2))
  {
    v9 = qword_100999890;
    v10 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v10)
      return result;
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a2, out);
    sub_100091AE8(__p, out);
    if (v36 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Already trying to disconnect device \"%{public}s\"", (uint8_t *)out, 0xCu);
    if (v36 < 0)
      operator delete(__p[0]);
    return 0;
  }
  if ((sub_10061CDB8((_QWORD *)a1, a2) & 1) != 0 || sub_100069F08(a1, a2))
  {
    *(_QWORD *)out = 0;
    *(_QWORD *)&out[8] = 0;
    uuid_copy((unsigned __int8 *)out, a2);
    __p[0] = a2;
    *((_DWORD *)sub_100646E30((uint64_t **)(a1 + 448), a2, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)__p)+ 11) = a3;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    v13 = off_1009778C0;
    v14 = sub_100030DF4(a2);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v16 = sub_1006589A8((uint64_t)v13, v15);

    if (v16)
    {
      if (qword_100977B40 != -1)
        dispatch_once(&qword_100977B40, &stru_10093DE28);
      sub_1004BBCD0((uint64_t)off_100977B38, v16);
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    v17 = off_1009778C0;
    v18 = sub_100030DF4(a2);
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v20 = sub_10065C624((uint64_t)v17, v19);
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "cuFilteredArrayUsingBlock:", &stru_10093D738));

    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v23 = v22;
    v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
    if (v24)
    {
      v25 = *(_QWORD *)v32;
      do
      {
        v26 = 0;
        do
        {
          if (*(_QWORD *)v32 != v25)
            objc_enumerationMutation(v23);
          v27 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)v26);
          if (qword_100977B40 != -1)
            dispatch_once(&qword_100977B40, &stru_10093DE28);
          sub_1004BBCD0((uint64_t)off_100977B38, objc_msgSend(v27, "integerValue", (_QWORD)v31));
          v26 = (char *)v26 + 1;
        }
        while (v24 != v26);
        v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
      }
      while (v24);
    }

    v28 = sub_1000419F4();
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3321888768;
    v37[2] = sub_1006228E8;
    v37[3] = &unk_10093C800;
    uuid_copy(v38, (const unsigned __int8 *)out);
    sub_100041A34(v28, v37);

    return 0;
  }
  v29 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a2, out);
    sub_100091AE8(__p, out);
    v30 = v36 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Cannot disconnect device \"%{public}s\" as it is not connecting or connected!", (uint8_t *)out, 0xCu);
    if (v36 < 0)
      operator delete(__p[0]);
  }
  return 312;
}

void sub_10062285C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10062289C(id a1, NSNumber *a2)
{
  NSNumber *v2;
  NSNumber *v3;
  NSNumber *v4;

  v2 = a2;
  if (-[NSNumber integerValue](v2, "integerValue") <= 0)
    v3 = 0;
  else
    v3 = v2;
  v4 = v3;

  return v4;
}

void sub_1006228D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1006228E8(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  return sub_100622938((uint64_t)off_1009778A0, (unsigned __int8 *)(a1 + 32));
}

uint64_t sub_100622938(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  _BYTE *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  _BYTE *v20;
  void *v21;
  id v22;
  void *v23;
  _BOOL4 v24;
  uint64_t v25;
  _BOOL4 v26;
  _BOOL4 v27;
  void *v28;
  id v29;
  void *v30;
  NSObject *v31;
  _BYTE *v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  NSObject *v39;
  _BYTE *v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  id v45;
  void *v46;
  void *v48;
  id v49;
  void *v50;
  NSObject *v51;
  _BOOL4 v52;
  char *v53;
  void *v54;
  id v55;
  void *v56;
  char *v57;
  NSObject *v58;
  NSObject *v59;
  void *v60;
  id v61;
  void *v62;
  id v63;
  void *v64;
  _QWORD v65[2];
  _BYTE __p[12];
  char v67;
  uint8_t buf[4];
  _BYTE *v69;
  uuid_string_t out;

  v65[0] = 0;
  v65[1] = 0;
  sub_10003415C((uint64_t)v65, a1 + 120);
  if (sub_100620330(a1, a2))
  {
    v4 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      memset(out, 0, sizeof(out));
      uuid_unparse_upper(a2, out);
      sub_100091AE8(__p, out);
      if (v67 >= 0)
        v5 = __p;
      else
        v5 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      v69 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device \"%{public}s\" is already disconnecting", buf, 0xCu);
      if (v67 < 0)
        operator delete(*(void **)__p);
    }
  }
  else if ((sub_10061CDB8((_QWORD *)a1, a2) & 1) != 0 || sub_100069F08(a1, a2))
  {
    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_10093DEA8);
    sub_10069E36C(qword_1009778B0, a2);
    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_10093DEA8);
    sub_10069E524(qword_1009778B0, a2);
    sub_100623F24(a1, a2);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    v6 = off_1009778C0;
    v7 = sub_100030DF4(a2);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    sub_10065CB44((uint64_t)v6, v8);

    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_10093DEA8);
    v9 = qword_1009778B0;
    v10 = sub_100030DF4(a2);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    LOBYTE(v9) = sub_100030864(v9, v11);

    if ((v9 & 1) == 0)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v12 = off_1009778C0;
      v13 = sub_100030DF4(a2);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      sub_10065DE88((uint64_t)v12, v14, 0);

    }
    if (qword_10097AC58 != -1)
      dispatch_once(&qword_10097AC58, &stru_10093DE68);
    v15 = qword_10097AC50;
    v16 = sub_100030DF4(a2);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    sub_1006C135C(v15, v17, 3);

    v18 = sub_10000C5B8(a1 + 376, a2);
    if (a1 + 384 == v18)
    {
      v28 = *(void **)(a1 + 744);
      v29 = sub_100030DF4(a2);
      v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      LODWORD(v28) = objc_msgSend(v28, "containsObject:", v30);

      if ((_DWORD)v28)
      {
        v31 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          memset(out, 0, sizeof(out));
          uuid_unparse_upper(a2, out);
          sub_100091AE8(__p, out);
          v32 = v67 >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136446210;
          v69 = v32;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Removing device \"%{public}s\" from connection overflow list", buf, 0xCu);
          if (v67 < 0)
            operator delete(*(void **)__p);
        }
        v33 = *(void **)(a1 + 744);
        v34 = sub_100030DF4(a2);
        v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
        objc_msgSend(v33, "removeObject:", v35);

      }
      else
      {
        v36 = *(void **)(a1 + 752);
        v37 = sub_100030DF4(a2);
        v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
        LODWORD(v36) = objc_msgSend(v36, "containsObject:", v38);

        if ((_DWORD)v36)
        {
          v39 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
          {
            memset(out, 0, sizeof(out));
            uuid_unparse_upper(a2, out);
            sub_100091AE8(__p, out);
            v40 = v67 >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 136446210;
            v69 = v40;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: Removing device \"%{public}s\" from blocked connection list", buf, 0xCu);
            if (v67 < 0)
              operator delete(*(void **)__p);
          }
          v41 = *(void **)(a1 + 752);
          v42 = sub_100030DF4(a2);
          v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
          objc_msgSend(v41, "removeObject:", v43);

        }
        else
        {
          v48 = *(void **)(a1 + 760);
          v49 = sub_100030DF4(a2);
          v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
          LODWORD(v48) = objc_msgSend(v48, "containsObject:", v50);

          v51 = qword_100999890;
          v52 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v48)
          {
            if (v52)
            {
              sub_1003D2DB4(a2, out);
              v53 = out[23] >= 0 ? out : *(char **)out;
              *(_DWORD *)__p = 136446210;
              *(_QWORD *)&__p[4] = v53;
              _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Removing device \"%{public}s\" from pending to go into filter accept list", __p, 0xCu);
              if (out[23] < 0)
                operator delete(*(void **)out);
            }
            v54 = *(void **)(a1 + 760);
            v55 = sub_100030DF4(a2);
            v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
            objc_msgSend(v54, "removeObject:", v56);

          }
          else
          {
            if (v52)
            {
              sub_1003D2DB4(a2, out);
              v57 = out[23] >= 0 ? out : *(char **)out;
              *(_DWORD *)__p = 136446210;
              *(_QWORD *)&__p[4] = v57;
              _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "\"Disconnecting\" pending device \"%{public}s\"", __p, 0xCu);
              if (out[23] < 0)
                operator delete(*(void **)out);
            }
            switch(*(_DWORD *)(a1 + 856))
            {
              case 0:
                if (!*(_DWORD *)(a1 + 920))
                {
                  v58 = qword_100999890;
                  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
                    sub_100712514(v58);
                }
                break;
              case 1:
                v59 = qword_100999890;
                if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)out = 0;
                  _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "cancelling, waiting for controller before removing from filter accept list", (uint8_t *)out, 2u);
                }
                if (!sub_10061AF78(a1, 1))
                  goto LABEL_76;
                v60 = *(void **)(a1 + 736);
                v61 = sub_100030DF4(a2);
                v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
                objc_msgSend(v60, "addObject:", v62);

                break;
              case 2:
              case 4:
LABEL_76:
                sub_10061F784(a1, a2);
                break;
              case 3:
                v63 = sub_100030DF4(a2);
                v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
                sub_100629970(a1, v64);

                break;
              default:
                return sub_100034234((uint64_t)v65);
            }
          }
        }
      }
    }
    else
    {
      v19 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        memset(out, 0, sizeof(out));
        uuid_unparse_upper(a2, out);
        sub_100091AE8(__p, out);
        v20 = v67 >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136446210;
        v69 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Disconnecting connected device \"%{public}s\"", buf, 0xCu);
        if (v67 < 0)
          operator delete(*(void **)__p);
      }
      v21 = *(void **)(a1 + 736);
      v22 = sub_100030DF4(a2);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      objc_msgSend(v21, "addObject:", v23);

      *(_QWORD *)out = 0;
      v24 = sub_100623C54(a1, a2, out);
      v25 = *(_QWORD *)out;
      if (*(_QWORD *)out)
        v26 = v24;
      else
        v26 = 0;
      if (v26)
      {
        __p[0] = 0;
        sub_100043758(__p);
        v27 = sub_10019AC00(v25) && *(_BYTE *)(v25 + 220) != 0;
        sub_10004339C(__p);
        if (v27)
        {
          v44 = sub_1000438A4();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v44 + 2936))(v44, v25, 0xFFFFLL, 1, 0, 1);
        }
        sub_100043728(__p);
      }
      v45 = sub_100030DF4(a2);
      v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
      sub_10061C1A8(a1, v46);

      __p[0] = 0;
      sub_100043758(__p);
      sub_10021F3D0(*(_QWORD *)(v18 + 48));
      sub_100043728(__p);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
  {
    sub_1003D2DB4(a2, out);
    sub_1007125A4();
  }
  return sub_100034234((uint64_t)v65);
}

void sub_100623230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100623350(_WORD *a1, int a2, __int16 *a3, __int16 *a4, __int16 *a5, __int16 *a6, _WORD *a7, __int16 *a8, _WORD *a9, _WORD *a10, _WORD *a11, _WORD *a12, _WORD *a13, _BYTE *a14, _BYTE *a15)
{
  uint64_t result;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;

  *a3 = 10;
  *a4 = 30;
  *a7 = 1;
  *a8 = 2000;
  *a6 = 12;
  *a5 = 2;
  *a9 = 3;
  *a10 = 3;
  *a11 = 1;
  *a12 = 2;
  *a13 = 200;
  *a14 = 0;
  *a15 = 1;
  switch(a2)
  {
    case -11:
      result = 0;
      *a3 = 10;
      *a4 = 30;
      *a7 = 1;
      *a6 = 12;
      *a5 = 12;
      *a9 = 3;
      *a10 = 3;
      *a11 = 1;
      *a12 = 2;
      *a13 = 200;
      *a14 = 1;
      *a15 = 0;
      return result;
    case -10:
      result = 0;
      *a3 = a1[545];
      *a4 = a1[546];
      *a7 = 1;
      v20 = a1[547];
      goto LABEL_22;
    case -9:
      result = 0;
      v21 = 150;
      goto LABEL_10;
    case -8:
      result = 0;
      v21 = 30;
LABEL_10:
      *a3 = v21;
      *a4 = v21;
      *a7 = 0;
      return result;
    case -7:
      result = 0;
      *a3 = 15;
      *a4 = 15;
      *a7 = 0;
      v20 = 2000;
      goto LABEL_22;
    case -6:
      result = 0;
      *a3 = 970;
      *a4 = 1000;
      *a7 = 0;
      *a8 = 8000;
      v22 = 4;
      goto LABEL_14;
    case -5:
      *a3 = 30;
      *a4 = 30;
      *a7 = 0;
      sub_1000438A4();
      result = 0;
      v22 = 8;
LABEL_14:
      *a6 = v22;
      v19 = 2;
      goto LABEL_17;
    case -4:
    case -1:
      result = 0;
      *a3 = 15;
      *a4 = 15;
      *a7 = 0;
      v19 = 6;
      goto LABEL_16;
    case -3:
      result = 0;
      *a3 = 60;
      *a4 = 60;
      *a7 = 5;
      v19 = 12;
LABEL_16:
      *a6 = v19;
LABEL_17:
      *a5 = v19;
      return result;
    case -2:
      result = 0;
      *a3 = 20;
      *a4 = 30;
      *a7 = 5;
      *a6 = 12;
      *a5 = 12;
      *a9 = 1;
      *a10 = 1;
      *a11 = 5;
      *a12 = 0;
      *a13 = 200;
      return result;
    case 0:
      result = 0;
      *a3 = a1[536];
      *a4 = a1[537];
      *a7 = 0;
      v20 = a1[538];
      goto LABEL_22;
    case 1:
      result = 0;
      *a3 = a1[539];
      *a4 = a1[540];
      *a7 = 1;
      v20 = a1[541];
      goto LABEL_22;
    case 2:
      result = 0;
      *a3 = a1[542];
      *a4 = a1[543];
      *a7 = 1;
      v20 = a1[544];
LABEL_22:
      *a8 = v20;
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_1007125F0();
      result = 3;
      break;
  }
  return result;
}

void sub_100623628(int a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = qword_100999890;
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_10071261C();
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Successfully Enabled event for connection subrating", v2, 2u);
    }
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10093DDC8);
    *((_BYTE *)off_1009778A0 + 1573) |= 4u;
  }
}

void sub_1006236F0(int a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = qword_100999890;
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_10071267C();
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Successfully Disabled event for connection subrating", v2, 2u);
    }
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10093DDC8);
    *((_BYTE *)off_1009778A0 + 1573) &= ~4u;
  }
}

uint64_t sub_1006237B8(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int16 a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD v21[2];
  char v22;
  unint64_t v23;
  uint8_t buf[8];
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;

  v23 = a2;
  v22 = 0;
  sub_100043758(&v22);
  v8 = sub_100223DC8(a2, WORD1(a3), WORD2(a3), (unsigned __int16)a3, HIWORD(a3), a4);
  sub_10004339C(&v22);
  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 120);
  v9 = *(_QWORD **)(a1 + 528);
  if (v9)
  {
    v10 = (_QWORD *)(a1 + 528);
    do
    {
      v11 = v9[4];
      v12 = v11 >= a2;
      if (v11 >= a2)
        v13 = v9;
      else
        v13 = v9 + 1;
      if (v12)
        v10 = v9;
      v9 = (_QWORD *)*v13;
    }
    while (*v13);
    if (v10 != (_QWORD *)(a1 + 528) && v10[4] <= a2)
    {
      *(_QWORD *)buf = &v23;
      *((_DWORD *)sub_10064682C((uint64_t **)(a1 + 520), &v23, (uint64_t)&unk_100740F58, (uint64_t **)buf) + 13) = v8 == 0;
    }
  }
  v14 = qword_100999890;
  if ((_DWORD)v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67110400;
      *(_DWORD *)&buf[4] = WORD1(a3);
      v25 = 1024;
      v26 = WORD2(a3);
      v27 = 1024;
      v28 = (unsigned __int16)a3;
      v29 = 1024;
      v30 = HIWORD(a3);
      v31 = 1024;
      v32 = a4;
      v33 = 1024;
      v34 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to enter Connection Subrating Mode with parameters: Subrate_Min=%d, Subrate_Max=%d, Max_Latency=%d, Continuation_Number=%d, Supervision_Timeout=%d. Status=%d", buf, 0x26u);
    }
    v15 = *(_QWORD **)(a1 + 504);
    if (v15)
    {
      v16 = (_QWORD *)(a1 + 504);
      do
      {
        v17 = v15[4];
        v18 = v17 >= v23;
        if (v17 >= v23)
          v19 = v15;
        else
          v19 = v15 + 1;
        if (v18)
          v16 = v15;
        v15 = (_QWORD *)*v19;
      }
      while (*v19);
      if (v16 != (_QWORD *)(a1 + 504) && v23 >= v16[4])
      {
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
          sub_1007126DC();
        sub_100015ECC(a1 + 496, &v23);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Successfully sent connection subrating request", buf, 2u);
  }
  sub_100034234((uint64_t)v21);
  sub_100043728(&v22);
  return v8;
}

void sub_100623A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_100034234((uint64_t)&a10);
  sub_100043728(&a15);
  _Unwind_Resume(a1);
}

BOOL sub_100623A78(uint64_t a1, unsigned __int8 *a2)
{
  _BOOL8 v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 120);
  v4 = a1 + 408 != sub_10000C5B8(a1 + 400, a2);
  sub_100034234((uint64_t)v6);
  return v4;
}

void sub_100623AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100623AE8(uint64_t a1, uint64_t a2, unsigned __int8 *a3, char a4)
{
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  unint64_t v12;
  unsigned __int8 *v13;

  v11[1] = 0;
  v12 = a2;
  v11[0] = 0;
  sub_10003415C((uint64_t)v11, a1 + 120);
  v7 = (uint64_t **)(a1 + 928);
  v8 = sub_10000C5B8(a1 + 928, a3);
  if (a1 + 936 != v8 && (a4 & 1) == 0)
    goto LABEL_5;
  v9 = sub_100623BB8(a1, a3);
  if (!(_DWORD)v9)
  {
    v13 = a3;
    v8 = (uint64_t)sub_100647234(v7, a3, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v13);
LABEL_5:
    sub_10000F7A0((uint64_t **)(v8 + 48), &v12, (uint64_t *)&v12);
    v9 = 0;
  }
  sub_100034234((uint64_t)v11);
  return v9;
}

void sub_100623BA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100623BB8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;

  v5 = 0;
  if (!sub_100623C54(a1, a2, &v5))
    return 312;
  v4 = 0;
  sub_100043758(&v4);
  if (sub_10019AC00(v5))
  {
    if (sub_100192918((uint64_t)sub_100623CE0))
      v2 = 7;
    else
      v2 = 0;
  }
  else
  {
    v2 = 7;
  }
  sub_100043728(&v4);
  return v2;
}

void sub_100623C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_100043728(&a12);
  _Unwind_Resume(a1);
}

BOOL sub_100623C54(uint64_t a1, unsigned __int8 *a2, _QWORD *a3)
{
  uint64_t v6;
  _BOOL8 v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 120);
  v6 = sub_10000C5B8(a1 + 376, a2);
  if (a1 + 384 != v6)
    *a3 = *(_QWORD *)(v6 + 48);
  v7 = a1 + 384 != v6;
  sub_100034234((uint64_t)v9);
  return v7;
}

void sub_100623CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100623CE0(int a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD v7[5];
  int v8;
  char v9;

  v6 = sub_1000419F4();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10063F490;
  v7[3] = &unk_100926B98;
  v8 = a1;
  v7[4] = a2;
  v9 = a3;
  sub_100041A34(v6, v7);
}

BOOL sub_100623D58(uint64_t a1, unsigned __int8 *a2)
{
  _BOOL8 v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 120);
  v4 = a1 + 432 != sub_10000C5B8(a1 + 424, a2);
  sub_100034234((uint64_t)v6);
  return v4;
}

void sub_100623DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100623DC8(uint64_t a1, const unsigned __int8 *a2)
{
  NSObject *v4;
  void **v5;
  void *v6;
  id v7;
  void *v8;
  void *__p[2];
  char v11;
  _QWORD v12[2];
  uint8_t buf[4];
  void **v14;
  char out[40];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 120);
  v4 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a2, out);
    sub_100091AE8(__p, out);
    if (v11 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device \"%{public}s\" requires low latency", buf, 0xCu);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  v6 = *(void **)(a1 + 816);
  v7 = sub_100030DF4(a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  objc_msgSend(v6, "addObject:", v8);

  return sub_100034234((uint64_t)v12);
}

void sub_100623EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100623F24(uint64_t a1, const unsigned __int8 *a2)
{
  NSObject *v4;
  void **v5;
  void *v6;
  id v7;
  void *v8;
  void *__p[2];
  char v11;
  _QWORD v12[2];
  uint8_t buf[4];
  void **v14;
  char out[40];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 120);
  v4 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a2, out);
    sub_100091AE8(__p, out);
    if (v11 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device \"%{public}s\" does not require low latency", buf, 0xCu);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  v6 = *(void **)(a1 + 816);
  v7 = sub_100030DF4(a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  objc_msgSend(v6, "removeObject:", v8);

  return sub_100034234((uint64_t)v12);
}

void sub_100624054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100624080(uint64_t a1, const unsigned __int8 *a2)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v2 = *(void **)(a1 + 816);
  v3 = sub_100030DF4(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = objc_msgSend(v2, "containsObject:", v4);

  return v5;
}

void sub_1006240C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1006240D4(uint64_t a1, unsigned __int8 *a2)
{
  _BOOL8 v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 120);
  v4 = a1 + 640 != sub_10000C5B8(a1 + 632, a2);
  sub_100034234((uint64_t)v6);
  return v4;
}

void sub_100624130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_100624144(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  _BOOL8 v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 120);
  v6 = *(_QWORD *)(sub_10000C5B8(a1 + 632, a3) + 48) == a2;
  sub_100034234((uint64_t)v8);
  return v6;
}

void sub_1006241AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1006241C0(uint64_t a1, unsigned __int8 *a2)
{
  _BOOL8 v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 120);
  v4 = a1 + 664 != sub_10000C5B8(a1 + 656, a2);
  sub_100034234((uint64_t)v6);
  return v4;
}

void sub_10062421C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_100624230(uint64_t a1, const unsigned __int8 *a2)
{
  const unsigned __int8 *v4;
  const unsigned __int8 *v5;
  const unsigned __int8 *v6;
  const unsigned __int8 *v7;
  BOOL v8;
  _QWORD v10[2];
  uuid_t dst;

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 120);
  v4 = *(const unsigned __int8 **)(a1 + 680);
  uuid_copy(dst, a2);
  v5 = (const unsigned __int8 *)(a1 + 688);
  if (v4 != v5)
  {
    while (uuid_compare(v4 + 40, dst))
    {
      v6 = (const unsigned __int8 *)*((_QWORD *)v4 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(const unsigned __int8 **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const unsigned __int8 *)*((_QWORD *)v4 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
      if (v7 == v5)
      {
        v4 = v5;
        break;
      }
    }
  }
  sub_100034234((uint64_t)v10);
  return v4 != v5;
}

void sub_100624318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100624338(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  _BOOL8 v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 120);
  v6 = *(_QWORD *)(sub_10000C5B8(a1 + 656, a3) + 48) == a2;
  sub_100034234((uint64_t)v8);
  return v6;
}

void sub_1006243A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1006243B4(uint64_t a1, unint64_t a2, const unsigned __int8 *a3)
{
  _QWORD *v6;
  const unsigned __int8 *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _BOOL8 v11;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 120);
  v6 = *(_QWORD **)(a1 + 688);
  if (!v6)
    goto LABEL_12;
  v7 = (const unsigned __int8 *)(a1 + 688);
  do
  {
    v8 = v6[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = (const unsigned __int8 *)v6;
    v6 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == (const unsigned __int8 *)(a1 + 688) || *((_QWORD *)v7 + 4) > a2)
LABEL_12:
    v7 = (const unsigned __int8 *)(a1 + 688);
  v11 = uuid_compare(v7 + 40, a3) == 0;
  sub_100034234((uint64_t)v13);
  return v11;
}

void sub_10062445C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100624470(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  char v7;
  uint64_t v8;

  v8 = 0;
  if (sub_100623C54(a1, a2, &v8))
  {
    v7 = 0;
    sub_100043758(&v7);
    sub_1002174AC(v8, a3, a4);
    sub_100043728(&v7);
  }
  return 1;
}

void sub_1006244D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_100043728(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1006244E4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v11;
  uint64_t v12;

  v12 = 0;
  if (sub_100623C54(a1, a2, &v12))
  {
    v11 = 0;
    sub_100043758(&v11);
    sub_100218534(v12, a3, a4, a5, a6);
    sub_100043728(&v11);
  }
  return 1;
}

void sub_10062455C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_100043728(&a12);
  _Unwind_Resume(a1);
}

BOOL sub_100624570(uint64_t a1)
{
  _BOOL8 v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 120);
  v2 = *(_QWORD *)(a1 + 392) != 0;
  sub_100034234((uint64_t)v4);
  return v2;
}

id sub_1006245BC(uint64_t a1)
{
  void *v2;
  const unsigned __int8 *v3;
  id v4;
  void *v5;
  unsigned __int8 *v6;
  const unsigned __int8 **v7;
  BOOL v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v13[2];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 120);
  v3 = *(const unsigned __int8 **)(a1 + 328);
  if (v3 != (const unsigned __int8 *)(a1 + 336))
  {
    do
    {
      v4 = sub_100030DF4(v3 + 25);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      objc_msgSend(v2, "addObject:", v5);

      v6 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
      if (v6)
      {
        do
        {
          v7 = (const unsigned __int8 **)v6;
          v6 = *(unsigned __int8 **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const unsigned __int8 **)*((_QWORD *)v3 + 2);
          v8 = *v7 == v3;
          v3 = (const unsigned __int8 *)v7;
        }
        while (!v8);
      }
      v3 = (const unsigned __int8 *)v7;
    }
    while (v7 != (const unsigned __int8 **)(a1 + 336));
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 744), "allObjects"));
  objc_msgSend(v2, "addObjectsFromArray:", v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 760), "allObjects"));
  objc_msgSend(v2, "addObjectsFromArray:", v10);

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 752), "allObjects"));
  objc_msgSend(v2, "addObjectsFromArray:", v11);

  sub_100034234((uint64_t)v13);
  return v2;
}

void sub_1006246E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_100624724(uint64_t a1, uint64_t a2)
{
  const unsigned __int8 *v4;
  unsigned __int8 *v5;
  const unsigned __int8 **v6;
  BOOL v7;
  void *v8;
  id v9;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 120);
  v4 = *(const unsigned __int8 **)(a1 + 376);
  if (v4 == (const unsigned __int8 *)(a1 + 384))
  {
LABEL_9:
    v8 = 0;
  }
  else
  {
    while (*((_QWORD *)v4 + 6) != a2)
    {
      v5 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      if (v5)
      {
        do
        {
          v6 = (const unsigned __int8 **)v5;
          v5 = *(unsigned __int8 **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (const unsigned __int8 **)*((_QWORD *)v4 + 2);
          v7 = *v6 == v4;
          v4 = (const unsigned __int8 *)v6;
        }
        while (!v7);
      }
      v4 = (const unsigned __int8 *)v6;
      if (v6 == (const unsigned __int8 **)(a1 + 384))
        goto LABEL_9;
    }
    v9 = sub_100030DF4(v4 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v9);
  }
  sub_100034234((uint64_t)v11);
  return v8;
}

void sub_1006247D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1006247E8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  __int128 *v10;
  _QWORD v11[2];
  unsigned __int8 v12[16];

  v5 = a3;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 120);
  v10 = 0;
  sub_100030BCC(v12, v5);
  if (sub_100623C54(a1, v12, &v10))
  {
    v12[0] = 0;
    sub_100043758(v12);
    v6 = sub_1000F06C0(v10, (uint64_t)sub_100624928, a2);
    sub_10004339C(v12);
    if (v6 == 414)
      v7 = 409;
    else
      v7 = v6 != 0;
    if (v6 == 116)
      v8 = 10;
    else
      v8 = v7;
    sub_100043728(v12);
  }
  else
  {
    v8 = 312;
  }
  sub_100034234((uint64_t)v11);

  return v8;
}

void sub_1006248EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_100624928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[10];
  int v16;

  v10 = __ROR8__(a2, 32);
  v11 = __ROR8__(a3, 32);
  v12 = __ROR8__(a4, 32);
  v13 = __ROR8__(a5, 32);
  v14 = sub_1000419F4();
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10063FB04;
  v15[3] = &unk_10091FEA8;
  v15[4] = a1;
  v15[5] = v10;
  v15[6] = v11;
  v15[7] = v12;
  v16 = a6;
  v15[8] = v13;
  v15[9] = a7;
  sub_100041A34(v14, v15);
}

uint64_t sub_1006249C4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  char v6;
  unsigned __int16 v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 120);
  v8 = 0;
  v7 = 0;
  if (sub_100623C54(a1, a2, &v8))
  {
    v6 = 0;
    sub_100043758(&v6);
    sub_1002213E8(v8, &v7);
    sub_100043728(&v6);
    v4 = v7;
  }
  else
  {
    v4 = 0;
  }
  sub_100034234((uint64_t)v9);
  return v4;
}

void sub_100624A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, char a11, uint64_t a12, char a13)
{
  sub_100043728(&a11);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100624A78(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  char v6;
  unsigned __int16 v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 120);
  v8 = 0;
  v7 = 12;
  if (sub_100623C54(a1, a2, &v8))
  {
    v6 = 0;
    sub_100043758(&v6);
    sub_100221448(v8, (__int16 *)&v7);
    sub_100043728(&v6);
    v4 = v7;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_10071273C();
    v4 = 12;
  }
  sub_100034234((uint64_t)v9);
  return v4;
}

void sub_100624B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, char a11, uint64_t a12, char a13)
{
  sub_100043728(&a11);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100624B58(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  char v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 120);
  v7 = 0;
  if (sub_100623C54(a1, a2, &v7))
  {
    v6 = 0;
    sub_100043758(&v6);
    v4 = sub_1002215F8(v7);
    sub_100043728(&v6);
  }
  else
  {
    v4 = 0;
  }
  sub_100034234((uint64_t)v8);
  return v4;
}

void sub_100624BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, char a14)
{
  sub_100043728(&a12);
  sub_100034234((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_100624C04(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  char v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 120);
  v7 = 0;
  if (sub_100623C54(a1, a2, &v7))
  {
    v6 = 0;
    sub_100043758(&v6);
    v4 = sub_10022163C(v7);
    sub_100043728(&v6);
  }
  else
  {
    v4 = 0;
  }
  sub_100034234((uint64_t)v8);
  return v4;
}

void sub_100624C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, char a14)
{
  sub_100043728(&a12);
  sub_100034234((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_100624CB0(uint64_t a1)
{
  uint64_t v1;
  double Current;
  double v3;
  double v4;
  NSObject *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  int v11;
  double v12;
  __int16 v13;
  double v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;

  v1 = *(_QWORD *)(a1 + 32);
  Current = CFAbsoluteTimeGetCurrent();
  v3 = *(double *)(v1 + 320);
  if (v3 != 0.0)
  {
    v4 = Current;
    if (Current - v3 > 1200.0)
    {
      v5 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        v6 = "YES";
        if (*(_BYTE *)(v1 + 184))
          v7 = "YES";
        else
          v7 = "NO";
        v8 = *(_QWORD *)(v1 + 344);
        v9 = *(int *)(v1 + 856);
        if (v9 > 4)
          v10 = "UNKNOWN";
        else
          v10 = (&off_10093E078)[v9];
        if (!*(_BYTE *)(v1 + 1058))
          v6 = "NO";
        v11 = 134219266;
        v12 = v4;
        v13 = 2048;
        v14 = v3;
        v15 = 2082;
        v16 = v7;
        v17 = 2048;
        v18 = v8;
        v19 = 2082;
        v20 = v10;
        v21 = 2082;
        v22 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Last address changed over 20 minutes ago (now:%f lastTime:%f fStarted:%{public}s fConnectingDevices.size():%zu fConnectionState:%{public}s fWaitForAddressChangeToComplete:%{public}s), forcing address change", (uint8_t *)&v11, 0x3Eu);
      }
      LOBYTE(v11) = 0;
      sub_100043758(&v11);
      sub_1002241DC();
      sub_10004339C(&v11);
      sub_100043728(&v11);
    }
  }
}

void sub_100624E20(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100624E3C(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4, void *a5)
{
  id v9;
  id v10;
  _QWORD *v11;
  __int128 v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  __int128 v18;
  id *v19;
  id v20;
  __int128 v21;
  NSObject *v22;
  int v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t *v27;
  __int128 v28;
  __int128 v30;
  _QWORD v31[4];
  id v32;
  __int128 v33;
  __int128 v34;
  int v35;
  int v36;
  _QWORD block[4];
  id v38;
  _QWORD v39[5];
  __int128 v40;
  __int128 v41;
  int v42;
  int v43;
  _QWORD v44[5];
  __int128 v45;
  __int128 v46;
  int v47;
  int v48;
  _QWORD v49[5];
  __int128 v50;
  __int128 v51;
  int v52;
  int v53;
  _QWORD v54[5];
  __int128 v55;
  __int128 v56;
  int v57;
  int v58;
  _QWORD v59[5];
  __int128 v60;
  __int128 v61;
  int v62;
  int v63;
  uint8_t *v64;
  uint8_t buf[4];
  id v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;

  v9 = a3;
  v10 = a5;
  if (!v9)
  {
    v14 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100712768((uint64_t)v10, v14, v15);
    v59[1] = 3221225472;
    v16 = *((_OWORD *)a4 + 1);
    v60 = *(_OWORD *)a4;
    v59[0] = _NSConcreteStackBlock;
    v59[2] = sub_10062561C;
    v59[3] = &unk_10093D760;
    v17 = v59;
    v59[4] = 0;
    v61 = v16;
    v13 = 22;
    v62 = *((_DWORD *)a4 + 8);
    v63 = 22;
    sub_1006169D0((os_unfair_lock_s *)a1, v59);
    goto LABEL_14;
  }
  sub_100030BCC(buf, v9);
  if (a1 + 384 == sub_10000C5B8(a1 + 376, buf))
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_1007127DC();
    v54[0] = _NSConcreteStackBlock;
    v54[1] = 3221225472;
    v54[2] = sub_100625674;
    v54[3] = &unk_10093D760;
    v17 = v54;
    v54[4] = v9;
    v18 = *((_OWORD *)a4 + 1);
    v55 = *(_OWORD *)a4;
    v56 = v18;
    v13 = 312;
    v57 = *((_DWORD *)a4 + 8);
    v58 = 312;
    sub_1006169D0((os_unfair_lock_s *)a1, v54);
LABEL_14:
    v19 = (id *)(v17 + 4);
    goto LABEL_48;
  }
  if (*a4)
  {
    sub_100030BCC(buf, v9);
    if (sub_1006240D4(a1, buf))
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_10071291C();
      v49[0] = _NSConcreteStackBlock;
      v49[1] = 3221225472;
      v49[2] = sub_1006256CC;
      v49[3] = &unk_10093D760;
      v11 = v49;
      v49[4] = v9;
      v12 = *((_OWORD *)a4 + 1);
      v50 = *(_OWORD *)a4;
      v51 = v12;
      v13 = 1500;
      v52 = *((_DWORD *)a4 + 8);
      v53 = 1500;
      sub_1006169D0((os_unfair_lock_s *)a1, v49);
LABEL_47:
      v19 = (id *)(v11 + 4);
      goto LABEL_48;
    }
  }
  else
  {
    sub_100030BCC(buf, v9);
    if (!sub_1006240D4(a1, buf))
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_1007128B4();
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 3221225472;
      v44[2] = sub_100625724;
      v44[3] = &unk_10093D760;
      v11 = v44;
      v44[4] = v9;
      v26 = *((_OWORD *)a4 + 1);
      v45 = *(_OWORD *)a4;
      v46 = v26;
      v13 = 1501;
      v47 = *((_DWORD *)a4 + 8);
      v48 = 1501;
      sub_1006169D0((os_unfair_lock_s *)a1, v44);
      goto LABEL_47;
    }
  }
  if (*a4)
  {
    sub_100030BCC(buf, v9);
    v64 = buf;
    sub_1006473E0((uint64_t **)(a1 + 632), buf, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v64)[6] = a2;
  }
  else
  {
    sub_100030BCC(buf, v9);
    if (!sub_100624144(a1, a2, buf))
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_1007128B4();
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_10062577C;
      v39[3] = &unk_10093D760;
      v11 = v39;
      v39[4] = v9;
      v28 = *((_OWORD *)a4 + 1);
      v40 = *(_OWORD *)a4;
      v41 = v28;
      v13 = 1502;
      v42 = *((_DWORD *)a4 + 8);
      v43 = 1502;
      sub_1006169D0((os_unfair_lock_s *)a1, v39);
      goto LABEL_47;
    }
    sub_100030BCC(buf, v9);
    v27 = (uint64_t *)sub_10000C5B8(a1 + 632, buf);
    if ((uint64_t *)(a1 + 640) != v27)
    {
      sub_1000040CC((uint64_t **)(a1 + 632), v27);
      operator delete(v27);
    }
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1006257D4;
  block[3] = &unk_1009172A0;
  v20 = v9;
  v38 = v20;
  if (qword_100993F00 != -1)
    dispatch_once(&qword_100993F00, block);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  if (sub_1006589A8((uint64_t)off_1009778C0, v20) == dword_100993EF8 && byte_100993EFC)
    a4[28] = 1;
  v64 = 0;
  sub_100030BCC(buf, v20);
  if (sub_100623C54(a1, buf, &v64))
  {
    v13 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100712840();
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_10062598C;
    v31[3] = &unk_10093D760;
    v32 = v20;
    v21 = *((_OWORD *)a4 + 1);
    v33 = *(_OWORD *)a4;
    v34 = v21;
    v35 = *((_DWORD *)a4 + 8);
    v36 = 7;
    sub_1006169D0((os_unfair_lock_s *)a1, v31);

    v13 = 7;
  }
  if ((a4[30] & 1) != 0)
  {
    if (qword_100977FD0 != -1)
      dispatch_once(&qword_100977FD0, &stru_10093DE48);
    sub_10039E854(qword_100977FC8, (uint64_t)v20, *(_WORD *)v64, a4[1], a4[3], a4[6], a4[29], 0);
    a4[28] |= 2u;
    v22 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v23 = (char)a4[3];
      v24 = (char)a4[6];
      *(_DWORD *)buf = 138543874;
      v66 = v20;
      v67 = 1024;
      v68 = v23;
      v69 = 1024;
      v70 = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "RSSI Detection Enabled AOP Path  \"%{public}@\". RSSI Further=%d Closer=%d", buf, 0x18u);
    }
  }
  if ((a4[30] & 2) != 0)
  {
    *(_DWORD *)(a4 + 2) = 344492168;
    *((_WORD *)a4 + 3) = 5140;
  }
  v25 = sub_1000438A4();
  DWORD2(v30) = *((_DWORD *)a4 + 6);
  *(_QWORD *)&v30 = *((_QWORD *)a4 + 2);
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unsigned __int8, _QWORD, unsigned __int8))(*(_QWORD *)v25 + 1776))(v25, *a4, *(unsigned __int16 *)v64, a4[1], (char)a4[2], (char)a4[3], (char)a4[4], (char)a4[5], *(_QWORD *)(a4 + 6), a4[14], *(_QWORD *)((char *)&v30 + 4), a4[28]);
  v19 = &v38;
LABEL_48:

  return v13;
}

void sub_100625570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  void *v33;
  void *v34;

  _Unwind_Resume(a1);
}

uint64_t sub_10062561C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  BYTE4(v4) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 76);
  WORD2(v3) = 0;
  LODWORD(v3) = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 60), 0, 0, 0, v3, v4);
}

uint64_t sub_100625674(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  BYTE4(v4) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 76);
  WORD2(v3) = 0;
  LODWORD(v3) = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 60), 0, 0, 0, v3, v4);
}

uint64_t sub_1006256CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  BYTE4(v4) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 76);
  WORD2(v3) = 0;
  LODWORD(v3) = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 60), 0, 0, 0, v3, v4);
}

uint64_t sub_100625724(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  BYTE4(v4) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 76);
  WORD2(v3) = 0;
  LODWORD(v3) = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 60), 0, 0, 0, v3, v4);
}

uint64_t sub_10062577C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  BYTE4(v4) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 76);
  WORD2(v3) = 0;
  LODWORD(v3) = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 60), 0, 0, 0, v3, v4);
}

void sub_1006257D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  void *__p[2];
  char v7;
  _BYTE buf[12];
  char v9;

  v2 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "EnableRSSIDetectionDebuggingUseCase");
  (*(void (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v2 + 88))(v2, buf, __p, &dword_100993EF8);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(*(void **)buf);
  v3 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "EnableRSSIDetectionDebugging");
  (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v3 + 72))(v3, buf, __p, &byte_100993EFC);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(*(void **)buf);
  v4 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "RSSI Detection Debugging enabled for \"%{public}@\". ", buf, 0xCu);
  }
}

void sub_100625948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10062598C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  BYTE4(v4) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 76);
  WORD2(v3) = 0;
  LODWORD(v3) = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 60), 0, 0, 0, v3, v4);
}

uint64_t sub_1006259E4(uint64_t a1, uint64_t a2, int a3, void *a4, int a5, uint64_t a6)
{
  id v11;
  const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t *v20;
  _QWORD v22[2];
  _QWORD v23[4];
  int v24;
  int v25;
  unsigned __int8 v26[16];
  const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v27[4];
  _BYTE v28[24];
  _QWORD v29[4];
  int v30;
  int v31;
  unsigned __int8 v32[16];
  _QWORD v33[4];
  int v34;
  int v35;
  unsigned __int8 v36[16];
  unsigned __int8 src[8];
  uint64_t v38;

  v11 = a4;
  *(_QWORD *)src = 0;
  v38 = 0;
  sub_100030BCC(src, v11);
  if (uuid_is_null(v12))
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100712A44();
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3321888768;
    v33[2] = sub_100625D94;
    v33[3] = &unk_10093D780;
    uuid_copy(v36, src);
    v35 = a5;
    v13 = 7;
    v34 = 7;
    sub_1006169D0((os_unfair_lock_s *)a1, v33);
  }
  else
  {
    v22[0] = 0;
    v22[1] = 0;
    sub_10003415C((uint64_t)v22, a1 + 120);
    if (a1 + 384 == sub_10000C5B8(a1 + 376, src))
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      {
        v19 = sub_100030DF4(src);
        objc_claimAutoreleasedReturnValue(v19);
        sub_100712984();
      }
      sub_100034264((uint64_t)v22);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3321888768;
      v29[2] = sub_100625E0C;
      v29[3] = &unk_10093D780;
      uuid_copy(v32, src);
      v31 = a5;
      v13 = 312;
      v30 = 312;
      sub_1006169D0((os_unfair_lock_s *)a1, v29);
    }
    else if (sub_100624338(a1, a2, src) || (v14 = sub_10000C5B8(a1 + 656, src), a1 + 664 == v14))
    {
      if (a3)
      {
        v27[0] = src;
        sub_1006474F8((uint64_t **)(a1 + 656), src, (uint64_t)&unk_100740F58, v27)[6] = a2;
        v18 = sub_1000438A4();
        (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v18 + 1784))(v18, (unsigned __int16)a5, HIWORD(a5), a6);
      }
      else
      {
        v20 = (uint64_t *)sub_10000C5B8(a1 + 656, src);
        if ((uint64_t *)(a1 + 664) != v20)
        {
          sub_1000040CC((uint64_t **)(a1 + 656), v20);
          operator delete(v20);
        }
      }
      v13 = 0;
    }
    else
    {
      v15 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      {
        v16 = sub_100030DF4(src);
        v17 = (id)objc_claimAutoreleasedReturnValue(v16);
        sub_1000340DC(*(_QWORD *)(v14 + 48), (uint64_t)v27);
        sub_1007129C4(v17, (char *)v27, (uint64_t)v28, v15);
      }
      sub_100034264((uint64_t)v22);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3321888768;
      v23[2] = sub_100625E84;
      v23[3] = &unk_10093D780;
      uuid_copy(v26, src);
      v25 = a5;
      v13 = 2100;
      v24 = 2100;
      sub_1006169D0((os_unfair_lock_s *)a1, v23);
    }
    sub_100034234((uint64_t)v22);
  }

  return v13;
}

void sub_100625D44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100625D94(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = sub_100030DF4((const unsigned __int8 *)(a1 + 40));
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);

}

void sub_100625DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100625E0C(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = sub_100030DF4((const unsigned __int8 *)(a1 + 40));
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);

}

void sub_100625E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100625E84(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = sub_100030DF4((const unsigned __int8 *)(a1 + 40));
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);

}

void sub_100625EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100625EFC(uint64_t a1, unint64_t a2, int a3, void *a4, uint64_t a5, __int128 *a6, uint64_t a7, void *a8)
{
  id v15;
  id v16;
  const unsigned __int8 *v17;
  __int128 v18;
  uint64_t v19;
  id v20;
  __int128 v21;
  NSObject *v22;
  id v23;
  void *v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  _QWORD *v32;
  uint64_t *v33;
  unint64_t v34;
  BOOL v35;
  _QWORD *v36;
  int v37;
  uint64_t **v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t *v41;
  unint64_t v42;
  BOOL v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  _QWORD v54[2];
  unint64_t v55;
  unint64_t *v56;
  char v57[24];
  _QWORD v58[4];
  __int128 v59;
  __int128 v60;
  int v61;
  unsigned __int8 v62[20];
  _QWORD v63[4];
  __int128 v64;
  __int128 v65;
  int v66;
  unsigned __int8 v67[20];
  unsigned __int8 src[8];
  uint64_t v69;

  v55 = a2;
  v15 = a4;
  v16 = a8;
  *(_QWORD *)src = 0;
  v69 = 0;
  v17 = (const unsigned __int8 *)sub_100030BCC(src, v15);
  if (!uuid_is_null(v17))
  {
    v54[0] = 0;
    v54[1] = 0;
    sub_10003415C((uint64_t)v54, a1 + 120);
    if (a1 + 384 == sub_10000C5B8(a1 + 376, src) && a3)
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      {
        v20 = sub_100030DF4(src);
        objc_claimAutoreleasedReturnValue(v20);
        sub_100712984();
      }
      sub_100034264((uint64_t)v54);
      v58[0] = _NSConcreteStackBlock;
      v58[1] = 3321888768;
      v58[2] = sub_1006264A8;
      v58[3] = &unk_10093D7B0;
      uuid_copy(v62, src);
      v21 = a6[1];
      v59 = *a6;
      v60 = v21;
      v19 = 312;
      v61 = 312;
      sub_1006169D0((os_unfair_lock_s *)a1, v58);
      goto LABEL_74;
    }
    sub_100034264((uint64_t)v54);
    if (!sub_1006243B4(a1, a2, src))
    {
      v22 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      {
        v23 = sub_100030DF4(src);
        v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        sub_100712AA8((uint64_t)v16, v24, (uint64_t)v57, v22);
      }
    }
    v25 = (uint64_t **)(a1 + 680);
    if (a3)
    {
      v56 = &v55;
      v26 = sub_100647610((uint64_t)v25, &v55, (uint64_t)&unk_100740F58, &v56);
      uuid_copy((unsigned __int8 *)v26 + 40, src);
      v56 = &v55;
      *((_WORD *)sub_100482BA8((uint64_t **)(a1 + 704), &v55, (uint64_t)&unk_100740F58, &v56) + 20) = a5;
      v27 = sub_1000438A4();
      v28 = *(_QWORD **)(a1 + 704);
      if (v28 != (_QWORD *)(a1 + 712))
      {
        do
        {
          if (*((unsigned __int16 *)v28 + 20) >= (unsigned __int16)a5)
            a5 = (unsigned __int16)a5;
          else
            a5 = *((unsigned __int16 *)v28 + 20);
          v29 = (_QWORD *)v28[1];
          if (v29)
          {
            do
            {
              v30 = v29;
              v29 = (_QWORD *)*v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              v30 = (_QWORD *)v28[2];
              v31 = *v30 == (_QWORD)v28;
              v28 = v30;
            }
            while (!v31);
          }
          v28 = v30;
        }
        while (v30 != (_QWORD *)(a1 + 712));
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27 + 1792))(v27, 1, a5, a7);
      goto LABEL_73;
    }
    v32 = *(_QWORD **)(a1 + 688);
    if (!v32)
      goto LABEL_36;
    v33 = (uint64_t *)(a1 + 688);
    do
    {
      v34 = v32[4];
      v35 = v34 >= a2;
      if (v34 >= a2)
        v36 = v32;
      else
        v36 = v32 + 1;
      if (v35)
        v33 = v32;
      v32 = (_QWORD *)*v36;
    }
    while (*v36);
    if (v33 != (uint64_t *)(a1 + 688) && v33[4] <= a2)
    {
      sub_1000040CC(v25, v33);
      operator delete(v33);
      v37 = 1;
    }
    else
    {
LABEL_36:
      v37 = 0;
    }
    v38 = (uint64_t **)(a1 + 704);
    v39 = (uint64_t *)(a1 + 712);
    v40 = *(_QWORD **)(a1 + 712);
    if (v40)
    {
      v41 = (uint64_t *)(a1 + 712);
      do
      {
        v42 = v40[4];
        v43 = v42 >= a2;
        if (v42 >= a2)
          v44 = v40;
        else
          v44 = v40 + 1;
        if (v43)
          v41 = v40;
        v40 = (_QWORD *)*v44;
      }
      while (*v44);
      if (v41 != v39 && v41[4] <= a2)
      {
        sub_1000040CC(v38, v41);
        operator delete(v41);
      }
    }
    v45 = *v38;
    if (*v38 == v39)
    {
      if (!v37)
      {
LABEL_73:
        v19 = 0;
LABEL_74:
        sub_100034234((uint64_t)v54);
        goto LABEL_75;
      }
      v46 = sub_1000438A4();
      v50 = *v38;
      if (*v38 != v39)
      {
        do
        {
          if (*((unsigned __int16 *)v50 + 20) >= (unsigned __int16)a5)
            a5 = (unsigned __int16)a5;
          else
            a5 = *((unsigned __int16 *)v50 + 20);
          v51 = (uint64_t *)v50[1];
          if (v51)
          {
            do
            {
              v52 = v51;
              v51 = (uint64_t *)*v51;
            }
            while (v51);
          }
          else
          {
            do
            {
              v52 = (uint64_t *)v50[2];
              v31 = *v52 == (_QWORD)v50;
              v50 = v52;
            }
            while (!v31);
          }
          v50 = v52;
        }
        while (v52 != v39);
      }
    }
    else
    {
      v46 = sub_1000438A4();
      a5 = *((unsigned __int16 *)v45 + 20);
      v47 = *v38;
      if (*v38 != v39)
      {
        do
        {
          if (*((unsigned __int16 *)v47 + 20) >= (unsigned __int16)a5)
            a5 = (unsigned __int16)a5;
          else
            a5 = *((unsigned __int16 *)v47 + 20);
          v48 = (uint64_t *)v47[1];
          if (v48)
          {
            do
            {
              v49 = v48;
              v48 = (uint64_t *)*v48;
            }
            while (v48);
          }
          else
          {
            do
            {
              v49 = (uint64_t *)v47[2];
              v31 = *v49 == (_QWORD)v47;
              v47 = v49;
            }
            while (!v31);
          }
          v47 = v49;
        }
        while (v49 != v39);
      }
    }
    (*(void (**)(uint64_t, BOOL, uint64_t, uint64_t))(*(_QWORD *)v46 + 1792))(v46, v45 != v39, a5, a7);
    goto LABEL_73;
  }
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    sub_100712B00();
  v63[0] = _NSConcreteStackBlock;
  v63[1] = 3321888768;
  v63[2] = sub_100626420;
  v63[3] = &unk_10093D7B0;
  uuid_copy(v67, src);
  v18 = a6[1];
  v64 = *a6;
  v65 = v18;
  v19 = 7;
  v66 = 7;
  sub_1006169D0((os_unfair_lock_s *)a1, v63);
LABEL_75:

  return v19;
}

void sub_1006263E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_100626420(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  __int128 v6;
  _OWORD v7[2];

  v4 = sub_100030DF4((const unsigned __int8 *)(a1 + 68));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = *(_OWORD *)(a1 + 48);
  v7[0] = *(_OWORD *)(a1 + 32);
  v7[1] = v6;
  (*(void (**)(uint64_t, void *, _OWORD *, _QWORD))(*(_QWORD *)a2 + 88))(a2, v5, v7, *(unsigned int *)(a1 + 64));

}

void sub_100626488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100626498(uint64_t a1, uint64_t a2)
{
  uuid_copy((unsigned __int8 *)(a1 + 68), (const unsigned __int8 *)(a2 + 68));
}

void sub_1006264A8(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  __int128 v6;
  _OWORD v7[2];

  v4 = sub_100030DF4((const unsigned __int8 *)(a1 + 68));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = *(_OWORD *)(a1 + 48);
  v7[0] = *(_OWORD *)(a1 + 32);
  v7[1] = v6;
  (*(void (**)(uint64_t, void *, _OWORD *, _QWORD))(*(_QWORD *)a2 + 88))(a2, v5, v7, *(unsigned int *)(a1 + 64));

}

void sub_100626510(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100626520(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11, unsigned __int16 a12, unsigned __int16 a13, unsigned __int16 a14, unsigned __int16 a15, unsigned __int16 a16, unsigned __int8 a17)
{
  NSObject *v22;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;

  v22 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67113216;
    v27 = a1;
    v28 = 1024;
    v29 = a2;
    v30 = 1024;
    v31 = a3;
    v32 = 1024;
    v33 = a4;
    v34 = 1024;
    v35 = a5;
    v36 = 1024;
    v37 = a6;
    v38 = 1024;
    v39 = a7;
    v40 = 1024;
    v41 = a8;
    v42 = 1024;
    v43 = a9;
    v44 = 1024;
    v45 = a10;
    v46 = 1024;
    v47 = a11;
    v48 = 1024;
    v49 = a12;
    v50 = 1024;
    v51 = a13;
    v52 = 1024;
    v53 = a14;
    v54 = 1024;
    v55 = a15;
    v56 = 1024;
    v57 = a16;
    v58 = 1024;
    v59 = a17;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Cscb: csLeLocalSupportedCapabilitiesCB status=%{bluetooth:OI_STATUS}u numConfig:%d maxProc:%d numAnt:%d rolesSup:%d modeSup:%d rttCap:%d rttCoarseN:%d rttSoundingN:%d rttRandomPayloadN:%d SyncPhy%d:%d:%d:%d FcsTime:%d %d:%d", buf, 0x68u);
  }
  BYTE12(xmmword_100998F98) = a2;
  HIWORD(xmmword_100998F98) = a3;
  byte_100998FA8 = a4;
  byte_100998FA9 = a5;
  byte_100998FAA = a6;
  byte_100998FAB = a7;
  byte_100998FAC = a8;
  byte_100998FAD = a9;
  byte_100998FAE = a10;
  byte_100998FAF = a11;
  word_100998FB0 = a12;
  word_100998FB2 = a13;
  word_100998FB4 = a14;
  word_100998FB6 = a15;
  LOWORD(dword_100998FB8) = a16;
  BYTE2(dword_100998FB8) = a17;
  sub_1000445E0(&stru_100999BC0);
  byte_100999C30 = 0;
}

uint64_t sub_100626754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  void *v9;
  uint64_t v11;
  char v12;
  uint8_t buf[8];
  uint64_t v14;

  v12 = 0;
  sub_100043758(&v12);
  v6 = sub_10004C9BC(259, (uint64_t (*)())sub_100626520, v0, v1, v2, v3, v4, v5, v11);
  sub_10004339C(&v12);
  v7 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "csReadLocalSupportedCapabilities status:%d", buf, 8u);
  }
  byte_100999C30 = 1;
  if ((_DWORD)v6)
  {
    if (sub_10005549C())
    {
      sub_100054530("CS read local capabilities failed with status %!", v6);
      v8 = sub_1000544A0(0x5Cu);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v9 = sub_100054494();
        sub_100712B68((uint64_t)v9, (uint64_t)buf);
      }
    }
    byte_100999C30 = 0;
  }
  else
  {
    *(_QWORD *)buf = 0;
    v14 = 0;
    sub_10003415C((uint64_t)buf, (uint64_t)&unk_100999BF0);
    if (byte_100999C30)
      sub_1002A9180(&stru_100999BC0, (pthread_mutex_t **)buf);
    sub_100034264((uint64_t)buf);
    sub_100034234((uint64_t)buf);
  }
  sub_100043728(&v12);
  return 0;
}

void sub_1006268C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1006268F8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  char v20;
  uint64_t v21;
  _BYTE v22[24];
  _QWORD v23[2];

  v23[0] = 0;
  v23[1] = 0;
  sub_100030BCC(v23, a3);
  if ((sub_10061CDB8(a1, (unsigned __int8 *)v23) & 1) != 0 || sub_100069F08((uint64_t)a1, (unsigned __int8 *)v23))
  {
    v4 = 0;
  }
  else
  {
    v5 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100712BA0((const unsigned __int8 *)v23, v5);
    v4 = 312;
  }
  v21 = 0;
  v6 = sub_100623C54((uint64_t)a1, (unsigned __int8 *)v23, &v21);
  v7 = v21;
  if (v21)
    v8 = v6;
  else
    v8 = 0;
  if (v8)
  {
    v20 = 0;
    sub_100043758(&v20);
    if (sub_10019AC00(v7))
    {
      v16 = sub_100196768(0x104u, v9, v10, v11, v12, v13, v14, v15, v7);
      if ((_DWORD)v16)
      {
        if (sub_10005549C())
        {
          sub_100054530("CS read remote capabilities failed with status %!", v16);
          v17 = sub_1000544A0(0x5Cu);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            v18 = sub_100054494();
            sub_100712B68((uint64_t)v18, (uint64_t)v22);
          }
        }
      }
    }
    sub_100043728(&v20);
  }
  return v4;
}

void sub_100626A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_100043728(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_100626A78(_QWORD *a1, unint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  _BOOL4 v8;
  _BOOL4 v9;
  __int128 v10;
  NSObject *v12;
  __int128 v13;
  _OWORD v14[2];
  uint64_t v15;
  char v16;
  uuid_t dst;
  unsigned __int8 src[8];
  uint64_t v19;

  *(_QWORD *)src = 0;
  v19 = 0;
  sub_100030BCC(src, a3);
  uuid_copy(dst, src);
  v7 = sub_100626BDC((uint64_t)a1, a2, dst);
  if ((sub_10061CDB8(a1, src) & 1) != 0 || sub_100069F08((uint64_t)a1, src))
  {
    if (v7)
    {
      v16 = 0;
      sub_100043758(&v16);
      v15 = 0;
      v8 = sub_100623C54((uint64_t)a1, src, &v15);
      if (v15)
        v9 = v8;
      else
        v9 = 0;
      if (v9)
      {
        v10 = a4[1];
        v13 = *a4;
        v14[0] = v10;
        *(_OWORD *)((char *)v14 + 10) = *(__int128 *)((char *)a4 + 26);
        sub_1002633BC(v7, v15, (unsigned __int16 *)&v13);
      }
      sub_10004339C(&v16);
      sub_100043728(&v16);
    }
    return 0;
  }
  else
  {
    v12 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100712C28(src, v12);
    return 312;
  }
}

void sub_100626BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_100043728(&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100626BDC(uint64_t a1, unint64_t a2, unsigned __int8 *uu)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v12;

  v5 = *(_QWORD **)(a1 + 1384);
  if (!v5)
    goto LABEL_12;
  v6 = (_QWORD *)(a1 + 1384);
  do
  {
    v7 = v5[4];
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v5;
    else
      v9 = v5 + 1;
    if (v8)
      v6 = v5;
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == (_QWORD *)(a1 + 1384) || v6[4] > a2)
LABEL_12:
    operator new();
  v10 = v6[5];
  if (!uuid_is_null(uu) && a1 + 1408 == sub_10000C5B8(a1 + 1400, uu))
  {
    v12 = uu;
    sub_10064774C((uint64_t **)(a1 + 1400), uu, (uint64_t)&unk_100740F58, &v12)[6] = v10;
  }
  return v10;
}

void sub_100626D2C()
{
  operator delete();
}

uint64_t sub_100626D50(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  NSObject *v15;
  uint64_t v16;
  char v17;
  uuid_t dst;
  unsigned __int8 src[8];
  uint64_t v20;

  *(_QWORD *)src = 0;
  v20 = 0;
  sub_100030BCC(src, a3);
  uuid_copy(dst, src);
  v5 = sub_100626BDC((uint64_t)a1, a2, dst);
  if ((sub_10061CDB8(a1, src) & 1) != 0 || sub_100069F08((uint64_t)a1, src))
  {
    if (v5)
    {
      v17 = 0;
      sub_100043758(&v17);
      v16 = 0;
      v6 = sub_100623C54((uint64_t)a1, src, &v16);
      if (v16)
        v13 = v6;
      else
        v13 = 0;
      if (v13)
        sub_100263398(v5, v16, v7, v8, v9, v10, v11, v12);
      sub_10004339C(&v17);
      sub_100043728(&v17);
    }
    return 0;
  }
  else
  {
    v15 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100712CB0(src, v15);
    return 312;
  }
}

void sub_100626E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_100043728(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_100626E94(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  NSObject *v15;
  uint64_t v16;
  char v17;
  uuid_t dst;
  unsigned __int8 src[8];
  uint64_t v20;

  *(_QWORD *)src = 0;
  v20 = 0;
  sub_100030BCC(src, a3);
  uuid_copy(dst, src);
  v5 = sub_100626BDC((uint64_t)a1, a2, dst);
  if ((sub_10061CDB8(a1, src) & 1) != 0 || sub_100069F08((uint64_t)a1, src))
  {
    if (v5)
    {
      v17 = 0;
      sub_100043758(&v17);
      v16 = 0;
      v6 = sub_100623C54((uint64_t)a1, src, &v16);
      if (v16)
        v13 = v6;
      else
        v13 = 0;
      if (v13)
        sub_100263398(v5, v16, v7, v8, v9, v10, v11, v12);
      sub_10004339C(&v17);
      sub_100043728(&v17);
    }
    return 0;
  }
  else
  {
    v15 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100712D38(src, v15);
    return 312;
  }
}

void sub_100626FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_100043728(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_100626FD8(_QWORD *a1, unint64_t a2, uint64_t a3, unsigned __int16 *a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  __int128 v10;
  unsigned int v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  __int128 v19;
  NSObject *v20;
  void **v22;
  void *__p[2];
  char v24;
  _OWORD v25[3];
  int v26;
  _OWORD v27[3];
  int v28;
  uint8_t buf[4];
  unsigned int v30;
  __int16 v31;
  void **v32;
  uuid_t dst;
  unsigned __int8 src[8];
  uint64_t v35;

  *(_QWORD *)src = 0;
  v35 = 0;
  sub_100030BCC(src, a3);
  uuid_copy(dst, src);
  v7 = sub_100626BDC((uint64_t)a1, a2, dst);
  if ((sub_10061CDB8(a1, src) & 1) != 0 || sub_100069F08((uint64_t)a1, src))
  {
    v8 = 0;
    if (!v7)
      return v8;
    goto LABEL_8;
  }
  v9 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    sub_100712DC0(src, v9);
  v8 = 312;
  if (v7)
  {
LABEL_8:
    v10 = *((_OWORD *)a4 + 1);
    v27[0] = *(_OWORD *)a4;
    v27[1] = v10;
    v27[2] = *((_OWORD *)a4 + 2);
    v28 = *((_DWORD *)a4 + 12);
    sub_100263E18(v7, (unsigned __int16 *)v27);
    v11 = *a4;
    if (v11 > 3)
    {
      v20 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      {
        sub_1003D2DB4(src, __p);
        v22 = v24 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 67109378;
        v30 = v11;
        v31 = 2082;
        v32 = v22;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Unsupported ConfigID:%d for   \"%{public}s\" ", buf, 0x12u);
        if (v24 < 0)
          operator delete(__p[0]);
      }
      return 312;
    }
    else
    {
      buf[0] = 0;
      sub_100043758(buf);
      __p[0] = 0;
      v12 = sub_100623C54((uint64_t)a1, src, __p);
      if (__p[0])
        v18 = v12;
      else
        v18 = 0;
      if (v18)
      {
        v19 = *((_OWORD *)a4 + 1);
        v25[0] = *(_OWORD *)a4;
        v25[1] = v19;
        v25[2] = *((_OWORD *)a4 + 2);
        v26 = *((_DWORD *)a4 + 12);
        sub_100263244(v7, (uint64_t)__p[0], (unsigned __int16 *)v25, v13, v14, v15, v16, v17);
      }
      sub_10004339C(buf);
      sub_100043728(buf);
    }
  }
  return v8;
}

void sub_100627200(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100043728((_BYTE *)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_10062721C(_QWORD *a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  void **v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  void **v26;
  char v27;
  void *v28[2];
  char v29;
  _BYTE buf[12];
  __int16 v31;
  void **v32;
  unsigned __int8 uu[8];
  uint64_t v34;
  void *__p[2];
  _BYTE v36[21];

  v7 = a3;
  *(_QWORD *)uu = 0;
  v34 = 0;
  sub_100030BCC(uu, v7);
  v8 = (_QWORD *)a1[173];
  if (!v8)
    goto LABEL_12;
  v9 = a1 + 173;
  do
  {
    v10 = v8[4];
    v11 = v10 >= a2;
    if (v10 >= a2)
      v12 = v8;
    else
      v12 = v8 + 1;
    if (v11)
      v9 = v8;
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 != a1 + 173 && v9[4] <= a2)
  {
    v18 = v9[5];
    if ((sub_10061CDB8(a1, uu) & 1) != 0 || sub_100069F08((uint64_t)a1, uu))
    {
      v16 = 0;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      {
        sub_1003D2DB4(uu, __p);
        sub_1007125A4();
      }
      v16 = 312;
    }
    v27 = 0;
    sub_100043758(&v27);
    *(_QWORD *)buf = 0;
    v19 = sub_100623C54((uint64_t)a1, uu, buf);
    if (*(_QWORD *)buf)
      v25 = v19;
    else
      v25 = 0;
    if (v25)
      sub_100263340(v18, *(uint64_t *)buf, a4, v20, v21, v22, v23, v24);
    sub_10004339C(&v27);
    sub_100043728(&v27);
  }
  else
  {
LABEL_12:
    sub_1000340DC(a2, (uint64_t)__p);
    if (v36[7] >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
    if ((v36[7] & 0x80000000) != 0)
      operator delete(__p[0]);
    v15 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)__p = 0u;
      memset(v36, 0, sizeof(v36));
      uuid_unparse_upper(uu, (char *)__p);
      sub_100091AE8(v28, (char *)__p);
      if (v29 >= 0)
        v26 = v28;
      else
        v26 = (void **)v28[0];
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v14;
      v31 = 2082;
      v32 = v26;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Session %{public}@ for \"%{public}s\" is not found", buf, 0x16u);
      if (v29 < 0)
        operator delete(v28[0]);
    }

    v16 = 2300;
  }

  return v16;
}

void sub_100627498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  _Unwind_Resume(a1);
}

uint64_t sub_1006274F4(_QWORD *a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  void **v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  void **v27;
  void *v28[2];
  char v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void **v33;
  unsigned __int8 uu[8];
  uint64_t v35;
  void *__p[2];
  _BYTE v37[21];

  v9 = a3;
  *(_QWORD *)uu = 0;
  v35 = 0;
  sub_100030BCC(uu, v9);
  v10 = (_QWORD *)a1[173];
  if (!v10)
    goto LABEL_12;
  v11 = a1 + 173;
  do
  {
    v12 = v10[4];
    v13 = v12 >= a2;
    if (v12 >= a2)
      v14 = v10;
    else
      v14 = v10 + 1;
    if (v13)
      v11 = v10;
    v10 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 != a1 + 173 && v11[4] <= a2)
  {
    v20 = v11[5];
    if ((sub_10061CDB8(a1, uu) & 1) != 0 || sub_100069F08((uint64_t)a1, uu))
    {
      LOBYTE(v28[0]) = 0;
      sub_100043758(v28);
      __p[0] = 0;
      v21 = sub_100623C54((uint64_t)a1, uu, __p);
      if (__p[0])
        v26 = v21;
      else
        v26 = 0;
      if (v26)
        sub_100263368(v20, (uint64_t)__p[0], a4, a5, v22, v23, v24, v25);
      sub_10004339C(v28);
      sub_100043728(v28);
      v18 = 0;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      {
        sub_1003D2DB4(uu, __p);
        sub_1007125A4();
      }
      v18 = 312;
    }
  }
  else
  {
LABEL_12:
    sub_1000340DC(a2, (uint64_t)__p);
    if (v37[7] >= 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15));
    if ((v37[7] & 0x80000000) != 0)
      operator delete(__p[0]);
    v17 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)__p = 0u;
      memset(v37, 0, sizeof(v37));
      uuid_unparse_upper(uu, (char *)__p);
      sub_100091AE8(v28, (char *)__p);
      if (v29 >= 0)
        v27 = v28;
      else
        v27 = (void **)v28[0];
      *(_DWORD *)buf = 138543618;
      v31 = v16;
      v32 = 2082;
      v33 = v27;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Session %{public}@ for \"%{public}s\" is not found", buf, 0x16u);
      if (v29 < 0)
        operator delete(v28[0]);
    }

    v18 = 2300;
  }

  return v18;
}

void sub_100627778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

uint64_t sub_1006277D4(_QWORD *a1, unint64_t a2, void *a3, __int128 *a4)
{
  id v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  char *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  void **v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  void *__p[2];
  char v31;
  _BYTE buf[12];
  __int16 v33;
  void **v34;
  unsigned __int8 uu[8];
  uint64_t v36;
  uuid_string_t out;

  v7 = a3;
  *(_QWORD *)uu = 0;
  v36 = 0;
  sub_100030BCC(uu, v7);
  v8 = (_QWORD *)a1[173];
  if (!v8)
    goto LABEL_12;
  v9 = a1 + 173;
  do
  {
    v10 = v8[4];
    v11 = v10 >= a2;
    if (v10 >= a2)
      v12 = v8;
    else
      v12 = v8 + 1;
    if (v11)
      v9 = v8;
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 != a1 + 173 && v9[4] <= a2)
  {
    v18 = v9[5];
    if ((sub_10061CDB8(a1, uu) & 1) != 0 || sub_100069F08((uint64_t)a1, uu))
    {
      v16 = 0;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      {
        sub_1003D2DB4(uu, out);
        sub_1007125A4();
      }
      v16 = 312;
    }
    v29 = 0;
    sub_100043758(&v29);
    *(_QWORD *)buf = 0;
    v19 = sub_100623C54((uint64_t)a1, uu, buf);
    if (*(_QWORD *)buf)
      v25 = v19;
    else
      v25 = 0;
    if (v25)
    {
      v27 = *a4;
      v28 = *((_QWORD *)a4 + 2);
      sub_100263468(v18, *(uint64_t *)buf, (uint64_t)&v27, v20, v21, v22, v23, v24);
    }
    sub_10004339C(&v29);
    sub_100043728(&v29);
  }
  else
  {
LABEL_12:
    sub_1000340DC(a2, (uint64_t)out);
    if (out[23] >= 0)
      v13 = out;
    else
      v13 = *(char **)out;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
    if (out[23] < 0)
      operator delete(*(void **)out);
    v15 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    {
      memset(out, 0, sizeof(out));
      uuid_unparse_upper(uu, out);
      sub_100091AE8(__p, out);
      if (v31 >= 0)
        v26 = __p;
      else
        v26 = (void **)__p[0];
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v14;
      v33 = 2082;
      v34 = v26;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Session %{public}@ for \"%{public}s\" is not found", buf, 0x16u);
      if (v31 < 0)
        operator delete(__p[0]);
    }

    v16 = 2300;
  }

  return v16;
}

void sub_100627A60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100627ABC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v15;
  void *v16;
  void *__p[2];
  char v18;
  uuid_t uu;

  uuid_clear(uu);
  v6 = sub_100626BDC(a1, a2, uu);
  if (v6)
  {
    LOBYTE(__p[0]) = 0;
    sub_100043758(__p);
    v7 = sub_10003EB18(a3);
    sub_100263584(v6, v7, v8, v9, v10, v11, v12, v13);
    sub_10004339C(__p);
    sub_100043728(__p);
    return 0;
  }
  else
  {
    sub_1000340DC(a2, (uint64_t)__p);
    if (v18 >= 0)
      v15 = __p;
    else
      v15 = (void **)__p[0];
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15));
    if (v18 < 0)
      operator delete(__p[0]);
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100712E48();

    return 2300;
  }
}

void sub_100627BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100627C20(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  void *__p[2];
  char v23;
  char v24;
  uuid_t uu;
  _QWORD v26[2];

  v26[0] = 0;
  v26[1] = 0;
  sub_100030BCC(v26, a3);
  uuid_clear(uu);
  v11 = sub_100626BDC((uint64_t)a1, a2, uu);
  if (v11)
  {
    if ((sub_10061CDB8(a1, (unsigned __int8 *)v26) & 1) != 0 || sub_100069F08((uint64_t)a1, (unsigned __int8 *)v26))
    {
      v12 = 0;
    }
    else
    {
      v15 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_100712EAC((const unsigned __int8 *)v26, v15);
      v12 = 312;
    }
    v24 = 0;
    sub_100043758(&v24);
    __p[0] = 0;
    v16 = sub_100623C54((uint64_t)a1, (unsigned __int8 *)v26, __p);
    if (__p[0])
      v20 = v16;
    else
      v20 = 0;
    if (v20)
      sub_100263650(v11, (uint64_t)__p[0], a4, a5, a6, v17, v18, v19);
    sub_10004339C(&v24);
    sub_100043728(&v24);
  }
  else
  {
    sub_1000340DC(a2, (uint64_t)__p);
    if (v23 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
    if (v23 < 0)
      operator delete(__p[0]);
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100712E48();

    return 2300;
  }
  return v12;
}

void sub_100627DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100627E28(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v13;
  void *v14;
  void *__p[2];
  char v16;
  uuid_t uu;

  uuid_clear(uu);
  v4 = sub_100626BDC(a1, a2, uu);
  if (v4)
  {
    LOBYTE(__p[0]) = 0;
    sub_100043758(__p);
    sub_10026372C(v4, v5, v6, v7, v8, v9, v10, v11);
    sub_10004339C(__p);
    sub_100043728(__p);
    return 0;
  }
  else
  {
    sub_1000340DC(a2, (uint64_t)__p);
    if (v16 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
    if (v16 < 0)
      operator delete(__p[0]);
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100712F34();

    return 2300;
  }
}

void sub_100627F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100627F7C(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  char *v15;
  void *v16;
  NSObject *v17;
  NSObject *v18;
  void **v19;
  void *__p[2];
  char v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  void **v25;
  uuid_t dst;
  unsigned __int8 src[8];
  uint64_t v28;
  uuid_string_t out;

  *(_QWORD *)src = 0;
  v28 = 0;
  sub_100030BCC(src, a3);
  uuid_copy(dst, src);
  v5 = sub_100626BDC((uint64_t)a1, a2, dst);
  if (v5)
  {
    if ((sub_10061CDB8(a1, src) & 1) != 0 || sub_100069F08((uint64_t)a1, src))
    {
      LOBYTE(__p[0]) = 0;
      sub_100043758(__p);
      *(_QWORD *)out = 0;
      v6 = sub_100623C54((uint64_t)a1, src, out);
      if (*(_QWORD *)out)
        v13 = v6;
      else
        v13 = 0;
      if (v13)
        sub_100263850(v5, *(uint64_t *)out, v7, v8, v9, v10, v11, v12);
      sub_10004339C(__p);
      sub_100043728(__p);
      return 0;
    }
    else
    {
      v18 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_100712F98(src, v18);
      return 312;
    }
  }
  else
  {
    sub_1000340DC(a2, (uint64_t)out);
    if (out[23] >= 0)
      v15 = out;
    else
      v15 = *(char **)out;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15));
    if (out[23] < 0)
      operator delete(*(void **)out);
    v17 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    {
      memset(out, 0, sizeof(out));
      uuid_unparse_upper(src, out);
      sub_100091AE8(__p, out);
      v19 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 138543618;
      v23 = v16;
      v24 = 2082;
      v25 = v19;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Session %{public}@ for \"%{public}s\" is not found", buf, 0x16u);
      if (v21 < 0)
        operator delete(__p[0]);
    }

    return 2300;
  }
}

void sub_1006281A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (*(char *)(v10 - 57) < 0)
    operator delete(*(void **)(v10 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006281F0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  void *v15;
  NSObject *v16;
  int v18;
  id v19;

  v7 = a3;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  v8 = off_1009778A0;
  sub_100030BCC(&v18, v7);
  if (sub_100069F08((uint64_t)v8, (unsigned __int8 *)&v18))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    v9 = sub_1000589DC((uint64_t)off_1009778C0, v7, 0);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10093DE88);
    v10 = sub_10006D488((uint64_t)off_1009778E0, v9, 1);
    v11 = sub_1000438A4();
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 160))(v11, a4, v10, a5);
    v13 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v14 = sub_100021770(v9);
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      v18 = 138412290;
      v19 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "MRC LE Address :    \"%@\" ", (uint8_t *)&v18, 0xCu);

    }
  }
  else
  {
    v16 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v18 = 138412290;
      v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "MRC needs to have device connected   \"%@\" ", (uint8_t *)&v18, 0xCu);
    }
    v12 = 312;
  }

  return v12;
}

void sub_10062840C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100628430(_QWORD *a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  void **v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  char v29;
  void *v30[2];
  char v31;
  _BYTE buf[12];
  __int16 v33;
  void **v34;
  unsigned __int8 uu[8];
  uint64_t v36;
  void *__p[2];
  _BYTE v38[21];

  v7 = a3;
  *(_QWORD *)uu = 0;
  v36 = 0;
  sub_100030BCC(uu, v7);
  v8 = (_QWORD *)a1[173];
  if (!v8)
    goto LABEL_12;
  v9 = a1 + 173;
  do
  {
    v10 = v8[4];
    v11 = v10 >= a2;
    if (v10 >= a2)
      v12 = v8;
    else
      v12 = v8 + 1;
    if (v11)
      v9 = v8;
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 != a1 + 173 && v9[4] <= a2)
  {
    v18 = v9[5];
    if ((sub_10061CDB8(a1, uu) & 1) != 0 || sub_100069F08((uint64_t)a1, uu))
    {
      v16 = 0;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      {
        sub_1003D2DB4(uu, __p);
        sub_1007125A4();
      }
      v16 = 312;
    }
    v29 = 0;
    sub_100043758(&v29);
    *(_QWORD *)buf = 0;
    v19 = sub_100623C54((uint64_t)a1, uu, buf);
    v20 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
      v21 = v19;
    else
      v21 = 0;
    if (v21)
    {
      v22 = sub_10003EB18(a4);
      sub_100263874(v18, v20, v22, v23, v24, v25, v26, v27);
    }
    sub_10004339C(&v29);
    sub_100043728(&v29);
  }
  else
  {
LABEL_12:
    sub_1000340DC(a2, (uint64_t)__p);
    if (v38[7] >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13));
    if ((v38[7] & 0x80000000) != 0)
      operator delete(__p[0]);
    v15 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)__p = 0u;
      memset(v38, 0, sizeof(v38));
      uuid_unparse_upper(uu, (char *)__p);
      sub_100091AE8(v30, (char *)__p);
      if (v31 >= 0)
        v28 = v30;
      else
        v28 = (void **)v30[0];
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v14;
      v33 = 2082;
      v34 = v28;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Session %{public}@ for \"%{public}s\" is not found", buf, 0x16u);
      if (v31 < 0)
        operator delete(v30[0]);
    }

    v16 = 2300;
  }

  return v16;
}

void sub_1006286B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;

  _Unwind_Resume(a1);
}

void sub_100628714(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t **v5;
  NSObject *v6;
  id v7;
  void *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  uint8_t buf[4];
  void *v13;

  v2 = *(uint64_t **)(a1 + 1120);
  v3 = (uint64_t *)(a1 + 1128);
  if (v2 != (uint64_t *)(a1 + 1128))
  {
    v5 = (uint64_t **)(a1 + 1120);
    do
    {
      if ((unint64_t)(a2 - v2[5]) < 0x6FC23AC01)
      {
        v10 = (uint64_t *)v2[1];
        if (v10)
        {
          do
          {
            v9 = v10;
            v10 = (uint64_t *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v9 = (uint64_t *)v2[2];
            v11 = *v9 == (_QWORD)v2;
            v2 = v9;
          }
          while (!v11);
        }
      }
      else
      {
        v6 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          v7 = sub_100649588(v2[4]);
          v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
          *(_DWORD *)buf = 138543362;
          v13 = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing expired ExpectedIncomingAddress:%{public}@", buf, 0xCu);

        }
        v9 = sub_1000040CC(v5, v2);
        operator delete(v2);
      }
      v2 = v9;
    }
    while (v9 != v3);
  }
}

void sub_10062887C(uint64_t a1, uint64_t a2)
{
  __uint64_t v3;
  NSObject *v4;
  id v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE buf[12];
  __int16 v10;
  uint64_t v11;

  v8 = a2;
  v3 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  sub_100628714(a1, v3);
  *(_QWORD *)buf = &v8;
  sub_10002252C((uint64_t **)(a1 + 1120), &v8, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] = v3;
  v4 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v5 = sub_100649588(v8);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = *(_QWORD *)(a1 + 1136);
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v6;
    v10 = 2048;
    v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Adding address %{public}@ to fAddressForIncomingConnectionPrioritizationMap[%lu]", buf, 0x16u);

  }
}

void sub_10062898C()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Stream state changed, re-evaluating scan params", v1, 2u);
  }
}

void sub_1006289F0()
{
  sub_10062898C();
}

uint64_t sub_1006289F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  _QWORD v17[6];
  _QWORD v18[2];
  uint8_t buf[4];
  _BYTE v20[14];
  __int16 v21;
  const char *v22;

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 120);
  *(_QWORD *)(a1 + 288) = a2;
  *(_QWORD *)(a1 + 296) = a3;
  v6 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v7 = sub_100021770(a2);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)v20 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Local LE Connectable address is now \"%{public}@\"", buf, 0xCu);

    v6 = qword_100999890;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v9 = sub_100021770(a3);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Local LE Non-Connectable address is now \"%{public}@\"", buf, 0xCu);

    v6 = qword_100999890;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *(unsigned __int8 *)(a1 + 184);
    v12 = *(_QWORD *)(a1 + 344);
    v13 = *(int *)(a1 + 856);
    if (v13 > 4)
      v14 = "UNKNOWN";
    else
      v14 = (&off_10093E078)[v13];
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)v20 = v11;
    *(_WORD *)&v20[4] = 2048;
    *(_QWORD *)&v20[6] = v12;
    v21 = 2082;
    v22 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "fStarted:%d, fConnectingDevices.size:%lu, fConnectionState:%{public}s", buf, 0x1Cu);
  }
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100628C90;
  v17[3] = &unk_10093D7E0;
  v17[4] = a2;
  v17[5] = a3;
  sub_1006169D0((os_unfair_lock_s *)a1, v17);
  if (*(_BYTE *)(a1 + 1058))
  {
    v15 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Address change complete, will process connecting devices now", buf, 2u);
    }
    *(_BYTE *)(a1 + 1058) = 0;
    if (!*(_DWORD *)(a1 + 856) && *(_QWORD *)(a1 + 344))
      sub_100628CA8(a1);
  }
  *(CFAbsoluteTime *)(a1 + 320) = CFAbsoluteTimeGetCurrent();
  return sub_100034234((uint64_t)v18);
}

void sub_100628C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100628C90(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 104))(a2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_100628CA8(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  NSObject *v4;
  uint32_t v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  int v14;
  const unsigned __int8 *v15;
  const unsigned __int8 *v16;
  char v17;
  void *v18;
  id v19;
  void *v20;
  char v21;
  const unsigned __int8 *v22;
  const unsigned __int8 *v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  unsigned __int8 v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  int v35;
  uint64_t v36;
  Block_layout *v37;
  NSObject *v38;
  const char *v39;
  int v40;
  const char *v41;
  int v42;
  const char *v43;
  uint64_t v44;
  int v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  NSObject *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const unsigned __int8 *v69;
  id v70;
  void *v71;
  const unsigned __int8 *v72;
  const unsigned __int8 *v73;
  NSObject *v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v78;
  __int128 v79;
  char v80;
  unsigned __int8 v81;
  unsigned __int16 v82;
  int v83;
  _QWORD v84[2];
  uint8_t buf[4];
  _BYTE v86[10];
  _BYTE v87[6];
  _BYTE v88[6];
  _BYTE v89[10];
  int v90;
  __int16 v91;
  int v92;

  v84[0] = 0;
  v84[1] = 0;
  sub_10003415C((uint64_t)v84, a1 + 120);
  sub_1006350A0(a1);
  if (!*(_BYTE *)(a1 + 1059))
  {
    if (*(_DWORD *)(a1 + 920))
    {
      v6 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "We should not get here, this is for debug purposes", buf, 2u);
        v6 = qword_100999890;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1007130AC();
      return sub_100034234((uint64_t)v84);
    }
    if (*(_BYTE *)(a1 + 1057))
    {
      v2 = qword_100999890;
      if (!os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        return sub_100034234((uint64_t)v84);
      *(_WORD *)buf = 0;
      v3 = "Controller Connection List is full, waiting for something to disconnect first";
      goto LABEL_4;
    }
    v7 = *(_DWORD *)(a1 + 856);
    if (v7)
    {
      v8 = qword_100999890;
      if (!os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        return sub_100034234((uint64_t)v84);
      if (v7 > 4)
        v9 = "UNKNOWN";
      else
        v9 = off_10093DF28[v7 - 1];
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)v86 = v9;
      *(_WORD *)&v86[8] = 1024;
      *(_DWORD *)v87 = v7;
      v3 = "Busy doing something else %{public}s(%d).";
      v4 = v8;
      v5 = 18;
      goto LABEL_5;
    }
    if (!*(_QWORD *)(a1 + 344))
    {
      v10 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Connection list empty, skipping", buf, 2u);
      }
      sub_10061B638(a1, 0);
      v11 = sub_100016B48();
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v11 + 104))(v11, 0, 0, 0, 1, 0);
      return sub_100034234((uint64_t)v84);
    }
    if (*(_BYTE *)(a1 + 1058))
    {
      v2 = qword_100999890;
      if (!os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        return sub_100034234((uint64_t)v84);
      *(_WORD *)buf = 0;
      v3 = "Address change in progress, waiting for it to complete";
      goto LABEL_4;
    }
    v83 = 0;
    v82 = 0;
    v81 = 0;
    sub_1006362F0(a1, (_WORD *)&v83 + 1, (unsigned __int16 *)&v83, &v82, (char *)&v81);
    if (*(_BYTE *)(a1 + 1067))
    {
      v12 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(unsigned __int16 *)(a1 + 1070);
        v14 = *(unsigned __int16 *)(a1 + 1068);
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)v86 = HIWORD(v83);
        *(_WORD *)&v86[4] = 1024;
        *(_DWORD *)&v86[6] = (unsigned __int16)v83;
        *(_WORD *)v87 = 1024;
        *(_DWORD *)&v87[2] = v13;
        *(_WORD *)v88 = 1024;
        *(_DWORD *)&v88[2] = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Override MainCore Connection Scan: interval %d window %d by interval %d window %d", buf, 0x1Au);
      }
      v83 = *(_DWORD *)(a1 + 1068);
    }
    v15 = *(const unsigned __int8 **)(a1 + 328);
    v16 = (const unsigned __int8 *)(a1 + 336);
    v17 = 1;
    if (v15 != (const unsigned __int8 *)(a1 + 336))
    {
      do
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v18 = off_1009778C0;
        v19 = sub_100030DF4(v15 + 25);
        v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        v21 = sub_100659A64((uint64_t)v18, v20);

        v22 = (const unsigned __int8 *)*((_QWORD *)v15 + 1);
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = *(const unsigned __int8 **)v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (const unsigned __int8 *)*((_QWORD *)v15 + 2);
            v24 = *(_QWORD *)v23 == (_QWORD)v15;
            v15 = v23;
          }
          while (!v24);
        }
        v17 |= v21;
        v15 = v23;
      }
      while (v23 != v16);
    }
    v25 = sub_10003BE44();
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 680))(v25);
    if ((v26 & 1) == 0)
    {
      v27 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "LELR is not enabled, disable coded PHY", buf, 2u);
      }
      v17 &= ~4u;
    }
    v28 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 688))(v28))
      v29 = v17 | 2;
    else
      v29 = v17;
    v30 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109888;
      *(_DWORD *)v86 = (unsigned __int16)v83;
      *(_WORD *)&v86[4] = 1024;
      *(_DWORD *)&v86[6] = HIWORD(v83);
      *(_WORD *)v87 = 1024;
      *(_DWORD *)&v87[2] = v26;
      *(_WORD *)v88 = 1024;
      *(_DWORD *)&v88[2] = v29;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Next connection parameters are: window - 0x%x, interval - 0x%x enableLELR - %d initPHYs - %x", buf, 0x1Au);
      v30 = qword_100999890;
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      v31 = *(_QWORD *)(a1 + 344);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v86 = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Starting auto connection for %lu devices", buf, 0xCu);
    }
    v32 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 648))(v32))
    {
      v33 = v82;
      v34 = v82 != 0;
      v35 = HIWORD(v83);
      if (v82)
        v36 = HIWORD(v83);
      else
        v36 = 0;
      if (*(_BYTE *)(a1 + 1108) != v34)
      {
        *(_BYTE *)(a1 + 1108) = v34;
        if ((_DWORD)v33)
          v37 = &stru_10093DBA0;
        else
          v37 = &stru_10093DBC0;
        sub_1006169D0((os_unfair_lock_s *)a1, v37);
      }
      v38 = qword_100999890;
      if (*(_BYTE *)(a1 + 1060))
      {
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          v39 = "No";
          v40 = *(unsigned __int16 *)(a1 + 1064);
          if ((_DWORD)v33)
            v41 = "Yes";
          else
            v41 = "No";
          v42 = *(unsigned __int16 *)(a1 + 1062);
          if (*(_BYTE *)(a1 + 1066))
            v39 = "Yes";
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)v86 = v41;
          *(_WORD *)&v86[8] = 1024;
          *(_DWORD *)v87 = v36;
          *(_WORD *)&v87[4] = 1024;
          *(_DWORD *)v88 = v33;
          *(_WORD *)&v88[4] = 2082;
          *(_QWORD *)v89 = v39;
          *(_WORD *)&v89[8] = 1024;
          v90 = v40;
          v91 = 1024;
          v92 = v42;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Override ScanCore Connection Scan: enabled %{public}s interval %d window %d by enabled %{public}s interval %d window %d", buf, 0x2Eu);
          v38 = qword_100999890;
        }
        v34 = *(_BYTE *)(a1 + 1066) != 0;
        v36 = *(unsigned __int16 *)(a1 + 1064);
        v33 = *(unsigned __int16 *)(a1 + 1062);
        v82 = *(_WORD *)(a1 + 1062);
      }
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        v43 = "No";
        *(_DWORD *)buf = 136447234;
        if (v34)
          v43 = "Yes";
        *(_QWORD *)v86 = v43;
        *(_WORD *)&v86[8] = 1024;
        *(_DWORD *)v87 = v36;
        *(_WORD *)&v87[4] = 1024;
        *(_DWORD *)v88 = v33;
        *(_WORD *)&v88[4] = 1024;
        *(_DWORD *)v89 = v35;
        *(_WORD *)&v89[4] = 1024;
        *(_DWORD *)&v89[6] = (unsigned __int16)v83;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "ScanCore Connection Scan Params enabled %{public}s interval %d window %d with MainCore interval %d window %d", buf, 0x24u);
      }
      v44 = sub_1000438A4();
      v45 = (*(uint64_t (**)(uint64_t, _BOOL8, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v44 + 1824))(v44, v34, v36, v33, 0);
      v46 = qword_100999890;
      if (v45)
      {
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v86 = v45;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Failed to execute btscLeSetConnectionScan with error %d", buf, 8u);
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
      {
        sub_100713080();
      }
    }
    v80 = 0;
    sub_100043758(&v80);
    v47 = HIWORD(v83);
    v48 = (unsigned __int16)v83;
    v49 = sub_100223ABC(HIWORD(v83), (unsigned __int16)v83, (int *)v29, 0, 0, 0, 0xFFu, 0xFFu);
    v50 = sub_10022405C();
    sub_10004339C(&v80);
    if (v49 > 757)
    {
      if (v49 == 758)
      {
        if (qword_1009778A8 != -1)
          dispatch_once(&qword_1009778A8, &stru_10093DDC8);
        sub_10061B638((uint64_t)off_1009778A0, 4u);
        goto LABEL_106;
      }
      if (v49 == 1319 && v50)
      {
        v51 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v52 = "We're busy disconnecting another device, lets wait before we issue another connection command";
          goto LABEL_88;
        }
LABEL_106:
        v76 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "Failure, setting new connectionState", buf, 2u);
        }
        sub_10061B638(a1, 0);
LABEL_109:
        sub_100043728(&v80);
        return sub_100034234((uint64_t)v84);
      }
    }
    else
    {
      if (!v49)
      {
        v74 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "Success, setting new connectionState", buf, 2u);
        }
        sub_10061B638(a1, 1u);
        v75 = sub_100016B48();
        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, unint64_t))(*(_QWORD *)v75 + 104))(v75, v47, v48, v81, 1, (unint64_t)(*(double *)(a1 + 552) * 1000.0));
        goto LABEL_109;
      }
      if (v49 == 133)
      {
        v51 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v52 = "Already connected - we should be getting a connection event imminently";
LABEL_88:
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, v52, buf, 2u);
          goto LABEL_106;
        }
        goto LABEL_106;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100713020();
    if (v49 == 1309)
    {
      v78 = sub_100027F68();
      sub_100091AE8(&v79, "");
      sub_1005756F0(v78, 1309, &v79, 1);
    }
    sub_10006D81C(&v80);
    sub_10023A440(v53, v54, v55, v56, v57, v58, v59, v60);
    sub_10001A82C(a1 + 352, *(_QWORD **)(a1 + 360));
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 352) = a1 + 360;
    sub_100221D2C(v61, v62, v63, v64, v65, v66, v67, v68);
    sub_10004339C(&v80);
    v69 = *(const unsigned __int8 **)(a1 + 328);
    if (v69 != v16)
    {
      do
      {
        v70 = sub_100030DF4(v69 + 25);
        v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
        sub_100030BCC(buf, v71);
        sub_10062B5B4(a1, buf, 1, v49, 1);

        v72 = (const unsigned __int8 *)*((_QWORD *)v69 + 1);
        if (v72)
        {
          do
          {
            v73 = v72;
            v72 = *(const unsigned __int8 **)v72;
          }
          while (v72);
        }
        else
        {
          do
          {
            v73 = (const unsigned __int8 *)*((_QWORD *)v69 + 2);
            v24 = *(_QWORD *)v73 == (_QWORD)v69;
            v69 = v73;
          }
          while (!v24);
        }
        v69 = v73;
      }
      while (v73 != v16);
    }
    sub_10001A82C(a1 + 328, *(_QWORD **)(a1 + 336));
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    *(_QWORD *)(a1 + 328) = v16;
    sub_10001A82C(a1 + 600, *(_QWORD **)(a1 + 608));
    *(_QWORD *)(a1 + 600) = a1 + 608;
    *(_QWORD *)(a1 + 616) = 0;
    *(_QWORD *)(a1 + 608) = 0;
    goto LABEL_106;
  }
  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v3 = "Stack is shutting down, we should not even be here.";
LABEL_4:
    v4 = v2;
    v5 = 2;
LABEL_5:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v3, buf, v5);
  }
  return sub_100034234((uint64_t)v84);
}

void sub_10062976C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a14 < 0)
    operator delete(__p);
  sub_100043728(&a15);
  sub_100034234((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1006297E8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  _QWORD v9[2];
  uint8_t buf[4];
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 120);
  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 184);
    v4 = *(_QWORD *)(a1 + 344);
    v5 = *(int *)(a1 + 856);
    if (v5 > 4)
      v6 = "UNKNOWN";
    else
      v6 = (&off_10093E078)[v5];
    *(_DWORD *)buf = 67109634;
    v11 = v3;
    v12 = 2048;
    v13 = v4;
    v14 = 2082;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "AddressWillChange event fStarted:%d, fConnectingDevices.size:%lu, fConnectionState:%{public}s", buf, 0x1Cu);
  }
  if (*(_BYTE *)(a1 + 184) && *(_QWORD *)(a1 + 344) && *(_DWORD *)(a1 + 856) == 1)
  {
    *(_BYTE *)(a1 + 1058) = 1;
    v7 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Cancelling connections due to advertising address changed", buf, 2u);
    }
    sub_10061AF78(a1, 0);
  }
  return sub_100034234((uint64_t)v9);
}

void sub_100629954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100629970(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  int v11;
  NSObject *v12;
  unsigned int v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t v20[3];
  _QWORD v21[5];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  __int128 buf;
  uint64_t v27;
  int v28;
  _QWORD *v29;

  v3 = a2;
  v25[0] = 0;
  v25[1] = 0;
  sub_10003415C((uint64_t)v25, a1 + 120);
  objc_msgSend(*(id *)(a1 + 760), "removeObject:", v3);
  objc_msgSend(*(id *)(a1 + 784), "removeObject:", v3);
  sub_100030BCC(&buf, v3);
  v19 = (uint64_t **)(a1 + 328);
  v4 = sub_100647368(a1 + 328, (unsigned __int8 *)&buf);
  v5 = qword_100999890;
  if (a1 + 336 == v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100713134();
  }
  else
  {
    v18 = (uint64_t *)v4;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Removing device \"%{public}@\" from connection filter accept list, waiting for controller to complete.", (uint8_t *)&buf, 0xCu);
    }
    v6 = *(uint64_t **)(a1 + 352);
    if (v6 != (uint64_t *)(a1 + 360))
    {
      do
      {
        sub_100030BCC(&buf, v3);
        v7 = uuid_compare((const unsigned __int8 *)v6 + 40, (const unsigned __int8 *)&buf);
        if ((_DWORD)v7)
        {
          v8 = (uint64_t *)v6[1];
          if (v8)
          {
            do
            {
              v9 = v8;
              v8 = (uint64_t *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              v9 = (uint64_t *)v6[2];
              v10 = *v9 == (_QWORD)v6;
              v6 = v9;
            }
            while (!v10);
          }
        }
        else
        {
          v11 = sub_10062B240(v7, v6[4]);
          v12 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_INFO))
          {
            LODWORD(buf) = 67109120;
            DWORD1(buf) = v11;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "removeAddressFromBTController returned %d", (uint8_t *)&buf, 8u);
          }
          v9 = sub_1000040CC((uint64_t **)(a1 + 352), v6);
          operator delete(v6);
        }
        v6 = v9;
      }
      while (v9 != (uint64_t *)(a1 + 360));
    }
    if (_os_feature_enabled_impl("BluetoothFeatures", "SentinelConnScanRx"))
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v13 = sub_1006589A8((uint64_t)off_1009778C0, v3) - 0x10000;
      if (v13 <= 0x19 && ((1 << v13) & 0x37800FF) != 0)
      {
        sub_100030BCC(&buf, v3);
        if (a1 + 608 != sub_100647368(a1 + 600, (unsigned __int8 *)&buf))
        {
          v14 = v3;
          v27 = 0;
          buf = (unint64_t)v14;
          v28 = 0;
          v21[0] = _NSConcreteStackBlock;
          v21[1] = 3221225472;
          v21[2] = sub_10063ED6C;
          v21[3] = &unk_10093DB80;
          v21[4] = a1;
          v29 = objc_retainBlock(v21);
          sub_10063EA74(&v22, (uint64_t *)&buf);

          sub_100030BCC(&buf, v14);
          sub_100648B04((uint64_t **)(a1 + 600), (unsigned __int8 *)&buf);
        }
      }
      if (v22 != v23)
      {
        if (qword_100977B40 != -1)
          dispatch_once(&qword_100977B40, &stru_10093DE28);
        v15 = off_100977B38;
        memset(v20, 0, sizeof(v20));
        sub_100648A38(v20, v22, v23, 0xCCCCCCCCCCCCCCCDLL * ((v23 - v22) >> 3));
        sub_1004BAD40((uint64_t)v15, v20);
        *(_QWORD *)&buf = v20;
        sub_1006488A4((void ***)&buf);
        sub_1006488E4((uint64_t)&v22, v22);
      }
      buf = 0uLL;
      v27 = 0;
      v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString", v18, v19)));
      sub_100091AE8(&buf, (char *)objc_msgSend(v16, "UTF8String"));

      sub_10035AE5C((uint64_t **)(a1 + 1344), (const void **)&buf);
      if (SHIBYTE(v27) < 0)
        operator delete((void *)buf);
      *(_QWORD *)&buf = &v22;
      sub_1006488A4((void ***)&buf);
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    sub_10065B534((uint64_t)off_1009778C0, v3, 0);
    sub_1000040CC(v19, v18);
    operator delete(v18);
  }
  if (*(_BYTE *)(a1 + 1111))
  {
    v17 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 2632))(v17))
      sub_100619F84(a1, v3, *(_BYTE *)(a1 + 728), 0);
  }
  sub_100034234((uint64_t)v25);

}

void sub_100629E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34)
{
  void *v34;

  __p = &a22;
  sub_1006488A4((void ***)&__p);
  sub_100034234((uint64_t)&a25);

  _Unwind_Resume(a1);
}

void sub_100629EDC(uint64_t a1, void *a2, char a3)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BOOL4 v13;
  unsigned __int8 v14;
  int v15;
  _QWORD *v16;
  unint64_t v17;
  NSObject *v18;
  id v19;
  void *v20;
  int v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  void *v25;
  uint64_t v26;
  int v27;
  NSObject *v28;
  _QWORD *v29;
  _QWORD **v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  _BOOL4 v37;
  _DWORD v38[2];
  _QWORD **v39;
  _QWORD *v40[2];
  uint8_t buf[4];
  id v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  _BYTE v46[10];
  __int16 v47;
  int v48;
  __int16 v49;
  _BOOL4 v50;

  v3 = a2;
  v4 = sub_1000438A4();
  if (!sub_100333DE4(v4, 100))
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100713198();
    goto LABEL_52;
  }
  v5 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 896))(v5))
    goto LABEL_15;
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10093DE28);
  if (!sub_1004BA874(off_100977B38))
    goto LABEL_15;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v6 = sub_1006589A8((uint64_t)off_1009778C0, v3);
  v7 = v6;
  v37 = 1;
  if (v6 == 19 || v6 == 196608)
    goto LABEL_16;
  v8 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 904))(v8))
  {
    v37 = 0;
    if ((v7 - 0x10000) <= 0x15)
      v37 = ((1 << v7) & 0x200011) != 0;
  }
  else
  {
LABEL_15:
    v37 = 0;
  }
LABEL_16:
  v9 = sub_1000438A4();
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 2576))(v9);
  if (!(_DWORD)v10)
    goto LABEL_23;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v11 = sub_1006589A8((uint64_t)off_1009778C0, v3);
  v12 = sub_10003BE44();
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 920))(v12);
  if ((_DWORD)v10
    && (v10 = _os_feature_enabled_impl("BluetoothFeatures", "EnableLEConnectionTxPowerBoost"), (_DWORD)v10))
  {
    v13 = 0;
    if ((v11 - 0x10000) <= 0x15)
      v13 = ((1 << v11) & 0x200011) != 0;
  }
  else
  {
LABEL_23:
    v13 = 0;
  }
  v14 = sub_100618720(v10, v3);
  v15 = sub_100618278(a1, v3);
  v39 = 0;
  v40[0] = 0;
  v40[1] = 0;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  sub_1006602C4((uint64_t)off_1009778C0, v3, (uint64_t)&v39);
  v16 = v39;
  if (v39 != v40)
  {
    while (1)
    {
      v17 = v16[4];
      v18 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        v19 = sub_100021770(v17);
        v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        *(_DWORD *)buf = 138544642;
        v42 = v3;
        v43 = 2114;
        v44 = (uint64_t)v20;
        v45 = 1024;
        *(_DWORD *)v46 = 0;
        *(_WORD *)&v46[4] = 1024;
        *(_DWORD *)&v46[6] = v15;
        v47 = 1024;
        v48 = v14;
        v49 = 1024;
        v50 = v37;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "device \"%{public}@\" with address \"%{public}@\" filter accept list options: conn_cmpt_option=%d, minRSSI=%d, PHYs=%x conn_scan_pri=%d waiting for controller to complete. ", buf, 0x2Eu);

      }
      if ((a3 & 1) != 0 || (v14 & 4) != 0)
        break;
      if (v15)
      {
        if (*(_BYTE *)(a1 + 1110))
          v21 = 1;
        else
          v21 = v13;
        if (((v21 | v37) & 1) != 0)
          break;
      }
      else if (v37 || v13)
      {
        break;
      }
LABEL_45:
      v29 = (_QWORD *)v16[1];
      if (v29)
      {
        do
        {
          v30 = (_QWORD **)v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD **)v16[2];
          v31 = *v30 == v16;
          v16 = v30;
        }
        while (!v31);
      }
      v16 = v30;
      if (v30 == v40)
        goto LABEL_51;
    }
    *(_DWORD *)((char *)v38 + 3) = 0;
    v38[0] = 0;
    v22 = sub_1000746A4(v17);
    v38[0] = v22;
    BYTE2(v38[1]) = BYTE6(v22);
    LOWORD(v38[1]) = WORD2(v22);
    if ((v14 & 4) == 0)
      v14 = 0;
    v23 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v24 = sub_100021770(v17);
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      *(_DWORD *)buf = 138543875;
      v42 = v3;
      v43 = 2160;
      v44 = 1752392040;
      v45 = 2113;
      *(_QWORD *)v46 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Adding device \"%{public}@\" with address \"%{private, mask.hash}@\" to connection filter accept list with option", buf, 0x20u);

    }
    v26 = sub_1000438A4();
    BYTE2(v34) = v13;
    BYTE1(v34) = v13;
    LOBYTE(v34) = v13;
    HIBYTE(v33) = v37;
    BYTE2(v33) = v14;
    BYTE1(v33) = v15;
    LOBYTE(v33) = 0;
    LOWORD(v32) = 0;
    v27 = (*(uint64_t (**)(uint64_t, _DWORD *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int, _QWORD, int, _QWORD, int, _QWORD))(*(_QWORD *)v26 + 3592))(v26, v38, 0, 0, 0, 0, 0, 0, v32, 0, v33, 0, v34, 0);
    if (v27)
    {
      v28 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v42) = v27;
        _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "addFilterAcceptListWithOptions failed with error %d", buf, 8u);
      }
    }
    goto LABEL_45;
  }
LABEL_51:
  sub_10001A82C((uint64_t)&v39, v40[0]);
LABEL_52:

}

void sub_10062A44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{

  _Unwind_Resume(a1);
}

void sub_10062A4A8(id *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *i;
  void *v5;
  NSObject *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *j;
  void *v11;
  NSObject *v12;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v13;
  unsigned __int8 *v14;
  id v15;
  __int128 v16;
  uint64_t **v17;
  uint64_t *v18;
  void *v19;
  void *v20;
  _BOOL4 v21;
  NSObject *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  int v28;
  NSObject *v29;
  uint8_t *v30;
  _QWORD *v31;
  int v32;
  int v33;
  BOOL v34;
  NSObject *v35;
  uint8_t *v36;
  uint64_t *v37;
  _QWORD *v38;
  _QWORD **v39;
  NSObject *v40;
  uint64_t *v41;
  NSObject *v42;
  _QWORD *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  BOOL v48;
  _QWORD *v49;
  NSObject *v50;
  _BOOL8 v51;
  _BYTE *v52;
  _QWORD *v53;
  _QWORD **v54;
  id v55;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v56;
  const unsigned __int8 *v57;
  NSObject *v58;
  void **v59;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  void *k;
  void *v65;
  uint64_t v66;
  NSObject *v67;
  const char *v68;
  uint64_t v69;
  __int128 v70;
  id v71;
  id obj;
  uint64_t **v73;
  uint64_t v74;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  unint64_t v80;
  void *__p;
  _QWORD *v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  void *v92;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v93;
  unint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _BYTE v99[128];
  _BYTE v100[12];
  __int16 v101;
  void *v102;
  char v103;
  _BYTE v104[128];
  _BYTE v105[128];
  _BYTE v106[128];
  uint8_t buf[40];

  v95 = 0u;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  v1 = a1[96];
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v95, v106, 16);
  if (v2)
  {
    v3 = *(_QWORD *)v96;
    do
    {
      for (i = 0; i != v2; i = (char *)i + 1)
      {
        if (*(_QWORD *)v96 != v3)
          objc_enumerationMutation(v1);
        v5 = *(void **)(*((_QWORD *)&v95 + 1) + 8 * (_QWORD)i);
        v6 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v5;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "trying to remove \"%{public}@\" from connecting list", buf, 0xCu);
        }
        sub_100629970((uint64_t)a1, v5);
      }
      v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v95, v106, 16);
    }
    while (v2);
  }

  objc_msgSend(a1[96], "removeAllObjects");
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  v7 = a1[95];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v88, v105, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v89;
    do
    {
      for (j = 0; j != v8; j = (char *)j + 1)
      {
        if (*(_QWORD *)v89 != v9)
          objc_enumerationMutation(v7);
        v11 = *(void **)(*((_QWORD *)&v88 + 1) + 8 * (_QWORD)j);
        v12 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v11;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "trying to add \"%{public}@\" to the connecting list", buf, 0xCu);
        }
        if (sub_10062079C((uint64_t)a1, v11) == 8)
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          sub_100030BCC(buf, v11);
          v13 = v93;
          if ((unint64_t)v93 >= v94)
          {
            v14 = (unsigned __int8 *)sub_10064792C((uint64_t)&v92, buf);
          }
          else
          {
            uuid_copy(v93, buf);
            v14 = v13 + 16;
          }
          v93 = v14;
        }
      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v88, v105, 16);
    }
    while (v8);
  }

  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  obj = a1[97];
  v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v84, v104, 16);
  if (v15)
  {
    v17 = (uint64_t **)(a1 + 44);
    v18 = (uint64_t *)(a1 + 45);
    v73 = (uint64_t **)(a1 + 41);
    v74 = *(_QWORD *)v85;
    *(_QWORD *)&v16 = 136315650;
    v70 = v16;
    do
    {
      v19 = 0;
      v71 = v15;
      do
      {
        if (*(_QWORD *)v85 != v74)
          objc_enumerationMutation(obj);
        v20 = *(void **)(*((_QWORD *)&v84 + 1) + 8 * (_QWORD)v19);
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v21 = sub_10066039C((uint64_t)off_1009778C0, v20);
        v22 = qword_100999890;
        if (!v21)
        {
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v20;
            _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Device \"%{public}@\" does not support multiple addresses", buf, 0xCu);
            v22 = qword_100999890;
          }
          if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v20;
            _os_log_fault_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "Device \"%{public}@\" does not support multiple addresses but still in the fDevicesToUpdateInFilterAcceptList", buf, 0xCu);
          }
          goto LABEL_77;
        }
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v20;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "processing %{public}@ from fDevicesToUpdateInFilterAcceptList", buf, 0xCu);
        }
        __p = 0;
        v82 = 0;
        v83 = 0;
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        sub_100660428((uint64_t)off_1009778C0, v20, 2u, (uint64_t)&__p);
        if (!v83)
        {
          v40 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v20;
            _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "Device \"%{public}@\" has no addresses, disconnecting ", buf, 0xCu);
          }
          sub_10001A82C((uint64_t)&__p, v82);
          goto LABEL_77;
        }
        v23 = *v17;
        if (*v17 != v18)
        {
          do
          {
            sub_100030BCC(buf, v20);
            v24 = uuid_compare((const unsigned __int8 *)v23 + 40, buf);
            if ((_DWORD)v24)
            {
              v25 = (uint64_t *)v23[1];
              if (v25)
              {
                do
                {
                  v26 = v25;
                  v25 = (uint64_t *)*v25;
                }
                while (v25);
              }
              else
              {
                do
                {
                  v26 = (uint64_t *)v23[2];
                  v34 = *v26 == (_QWORD)v23;
                  v23 = v26;
                }
                while (!v34);
              }
            }
            else
            {
              v27 = v23[4];
              v28 = sub_10062B240(v24, v27);
              v29 = qword_100999890;
              if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_INFO))
              {
                sub_1000217F4(v27);
                v30 = buf;
                if ((buf[23] & 0x80u) != 0)
                  v30 = *(uint8_t **)buf;
                *(_DWORD *)v100 = 136446466;
                *(_QWORD *)&v100[4] = v30;
                v101 = 1024;
                LODWORD(v102) = v28;
                _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "removeAddressFromBTController %{public}s returned %d", v100, 0x12u);
                if ((char)buf[23] < 0)
                  operator delete(*(void **)buf);
              }
              v26 = sub_1000040CC(v17, v23);
              operator delete(v23);
            }
            v23 = v26;
          }
          while (v26 != v18);
        }
        v31 = __p;
        if (__p == &v82)
        {
LABEL_69:
          sub_10001A82C((uint64_t)&__p, v82);
          v15 = v71;
          goto LABEL_83;
        }
        while (1)
        {
          v80 = v31[4];
          v32 = sub_10062B3FC((uint64_t)a1, v80);
          v33 = v32;
          v34 = !v32 || v32 == 4152;
          if (!v34)
            break;
          v35 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
          {
            sub_1000217F4(v80);
            v36 = buf;
            if ((buf[23] & 0x80u) != 0)
              v36 = *(uint8_t **)buf;
            *(_DWORD *)v100 = 136446466;
            *(_QWORD *)&v100[4] = v36;
            v101 = 2114;
            v102 = v20;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "setting fConnectingAddresses[%{public}s]=%{public}@", v100, 0x16u);
            if ((char)buf[23] < 0)
              operator delete(*(void **)buf);
          }
          sub_100030BCC(buf, v20);
          *(_QWORD *)v100 = &v80;
          v37 = sub_100646BA0((uint64_t)v17, &v80, (uint64_t)&unk_100740F58, (_QWORD **)v100);
          uuid_copy((unsigned __int8 *)v37 + 40, buf);
          v38 = (_QWORD *)v31[1];
          if (v38)
          {
            do
            {
              v39 = (_QWORD **)v38;
              v38 = (_QWORD *)*v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              v39 = (_QWORD **)v31[2];
              v34 = *v39 == v31;
              v31 = v39;
            }
            while (!v34);
          }
          v31 = v39;
          if (v39 == &v82)
            goto LABEL_69;
        }
        v43 = __p;
        if (__p == &v82)
        {
          sub_10001A82C((uint64_t)&__p, v82);
          v15 = v71;
LABEL_77:
          sub_100030BCC(buf, v20);
          if ((sub_100620330((uint64_t)a1, buf) & 1) == 0)
          {
            sub_100030BCC(buf, v20);
            v41 = (uint64_t *)sub_100647368((uint64_t)v73, buf);
            if (a1 + 42 != (id *)v41)
            {
              sub_1000040CC(v73, v41);
              operator delete(v41);
            }
            v42 = qword_100999890;
            if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v20;
              _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Sending device connection error for device %@", buf, 0xCu);
            }
            sub_100030BCC(buf, v20);
            sub_10062B5B4((uint64_t)a1, buf, 0, 8, 0);
          }
          goto LABEL_83;
        }
        do
        {
          v44 = (_QWORD *)*v18;
          if (*v18)
          {
            v45 = v43[4];
            v46 = (uint64_t *)(a1 + 45);
            do
            {
              v47 = v44[4];
              v48 = v47 >= v45;
              if (v47 >= v45)
                v49 = v44;
              else
                v49 = v44 + 1;
              if (v48)
                v46 = v44;
              v44 = (_QWORD *)*v49;
            }
            while (*v49);
            if (v46 != v18 && v45 >= v46[4])
            {
              v50 = qword_100999890;
              v51 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT);
              if (v51)
              {
                sub_1000217F4(v45);
                v52 = v100;
                if (v103 < 0)
                  v52 = *(_BYTE **)v100;
                *(_DWORD *)buf = v70;
                *(_QWORD *)&buf[4] = v52;
                *(_WORD *)&buf[12] = 2112;
                *(_QWORD *)&buf[14] = v20;
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = v33;
                _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "removing address %s from controller for device %@ due to error %d", buf, 0x1Cu);
                if (v103 < 0)
                  operator delete(*(void **)v100);
              }
              sub_10062B240(v51, v45);
              sub_1000040CC(v17, v46);
              operator delete(v46);
            }
          }
          v53 = (_QWORD *)v43[1];
          if (v53)
          {
            do
            {
              v54 = (_QWORD **)v53;
              v53 = (_QWORD *)*v53;
            }
            while (v53);
          }
          else
          {
            do
            {
              v54 = (_QWORD **)v43[2];
              v34 = *v54 == v43;
              v43 = v54;
            }
            while (!v34);
          }
          v43 = v54;
        }
        while (v54 != &v82);
        sub_10001A82C((uint64_t)&__p, v82);
        v15 = v71;
        if (v33)
          goto LABEL_77;
LABEL_83:
        v19 = (char *)v19 + 1;
      }
      while (v19 != v15);
      v55 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v84, v104, 16);
      v15 = v55;
    }
    while (v55);
  }

  objc_msgSend(a1[97], "removeAllObjects");
  objc_msgSend(a1[95], "removeAllObjects");
  v57 = (const unsigned __int8 *)v92;
  v56 = v93;
  if (v92 != v93)
  {
    do
    {
      v58 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v57, (char *)buf);
        sub_100091AE8(&__p, (char *)buf);
        v59 = v83 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)v100 = 136446210;
        *(_QWORD *)&v100[4] = v59;
        _os_log_error_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "Failed to connect to device %{public}s due to 0 address", v100, 0xCu);
        if (SHIBYTE(v83) < 0)
          operator delete(__p);
      }
      sub_10062B5B4((uint64_t)a1, v57, 0, 8, 0);
      v57 += 16;
    }
    while (v57 != v56);
  }
  v60 = sub_1000438A4();
  if (sub_100333DE4(v60, 100))
  {
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v61 = a1[98];
    v62 = objc_msgSend(v61, "countByEnumeratingWithState:objects:count:", &v76, v99, 16);
    if (!v62)
      goto LABEL_138;
    v63 = *(_QWORD *)v77;
    while (1)
    {
      for (k = 0; k != v62; k = (char *)k + 1)
      {
        if (*(_QWORD *)v77 != v63)
          objc_enumerationMutation(v61);
        v65 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * (_QWORD)k);
        if (sub_10062B76C((uint64_t)a1, v65))
        {
          v66 = qword_100999890;
          if (!os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
            continue;
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v65;
          v67 = v66;
          v68 = "Warning: LeConnectionDenyList: Device %{public}@ is currently blocked, ignoring request to add to filter accept list";
          goto LABEL_135;
        }
        sub_100030BCC(buf, v65);
        if (a1 + 42 != (id *)sub_100647368((uint64_t)(a1 + 41), buf))
        {
          sub_100629EDC((uint64_t)a1, v65, 1);
          continue;
        }
        v69 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v65;
          v67 = v69;
          v68 = "not connecting to Device Device %{public}@ any more, ignoring update filter accept list option";
LABEL_135:
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, v68, buf, 0xCu);
          continue;
        }
      }
      v62 = objc_msgSend(v61, "countByEnumeratingWithState:objects:count:", &v76, v99, 16);
      if (!v62)
      {
LABEL_138:

        break;
      }
    }
  }
  objc_msgSend(a1[98], "removeAllObjects", v70);
  if (v92)
  {
    v93 = (unsigned __int8 *)v92;
    operator delete(v92);
  }
}

void sub_10062B164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55)
{
  void *v55;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10062B240(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  id v5;
  void *v6;
  uint64_t v7;
  char v9;
  int v10;
  __int16 v11;
  char v12;
  _BYTE buf[22];

  v3 = sub_1000746A4(a2);
  v10 = v3;
  v12 = BYTE6(v3);
  v11 = WORD2(v3);
  v4 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v5 = sub_100021770(a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    *(_DWORD *)buf = 141558275;
    *(_QWORD *)&buf[4] = 1752392040;
    *(_WORD *)&buf[12] = 2113;
    *(_QWORD *)&buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Removing address \"%{private, mask.hash}@\" from connection FilterAcceptList, waiting for controller to complete.", buf, 0x16u);

  }
  v9 = 0;
  sub_100043758(&v9);
  byte_100999BB9 = 1;
  v7 = sub_10023A124((unsigned __int8 *)&v10);
  sub_10004339C(&v9);
  if ((_DWORD)v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_1007131FC();
    byte_100999BB9 = 0;
  }
  else
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    sub_10003415C((uint64_t)buf, (uint64_t)&unk_100999B78);
    if (byte_100999BB9)
      sub_1002A9180(&stru_100999B08, (pthread_mutex_t **)buf);
    sub_100034264((uint64_t)buf);
    sub_100034234((uint64_t)buf);
  }
  sub_100043728(&v9);
  return v7;
}

void sub_10062B3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_100043728(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_10062B3FC(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  id v5;
  void *v6;
  uint64_t v7;
  char v9;
  int v10;
  __int16 v11;
  char v12;
  uint8_t buf[24];

  if (!*(_BYTE *)(a1 + 184))
    return 103;
  v3 = sub_1000746A4(a2);
  v10 = v3;
  v12 = BYTE6(v3);
  v11 = WORD2(v3);
  v4 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v5 = sub_100021770(a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    *(_DWORD *)buf = 138477827;
    *(_QWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Adding address \"%{private}@\" to connection FilterAcceptList, waiting for controller to complete.", buf, 0xCu);

  }
  v9 = 0;
  sub_100043758(&v9);
  byte_100999BB8 = 1;
  v7 = sub_100239DC8((unsigned __int8 *)&v10);
  sub_10004339C(&v9);
  if ((_DWORD)v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_10071325C();
    byte_100999BB8 = 0;
  }
  else
  {
    *(_OWORD *)buf = 0uLL;
    sub_10003415C((uint64_t)buf, (uint64_t)&unk_100999B38);
    if (byte_100999BB8)
      sub_1002A9180(&stru_100999AD8, (pthread_mutex_t **)buf);
    sub_100034264((uint64_t)buf);
    sub_100034234((uint64_t)buf);
  }
  sub_100043728(&v9);
  return v7;
}

void sub_10062B584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_100043728(&a12);
  _Unwind_Resume(a1);
}

void sub_10062B5B4(uint64_t a1, const unsigned __int8 *a2, int a3, int a4, char a5)
{
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[4];
  id v20;
  int v21;
  char v22;
  _QWORD v23[4];
  id v24;
  int v25;
  char v26;

  v10 = *(_QWORD *)(a1 + 392);
  v11 = sub_100030DF4(a2);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v13 = sub_10006BBEC();
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100634AE8;
  v23[3] = &unk_10093D870;
  v25 = v10;
  v14 = v12;
  v24 = v14;
  v26 = a3;
  sub_100041A34(v13, v23);
  if (qword_10097AC58 != -1)
    dispatch_once(&qword_10097AC58, &stru_10093DE68);
  v15 = qword_10097AC50;
  v16 = sub_100030DF4(a2);
  v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  if (a3)
    v18 = 2;
  else
    v18 = 0;
  sub_1006C135C(v15, v17, v18);

  if (a4 != 305 && (a3 & 1) == 0)
  {
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100634D38;
    v19[3] = &unk_10093D898;
    v22 = a5;
    v20 = v14;
    v21 = a4;
    sub_1006169D0((os_unfair_lock_s *)a1, v19);

  }
}

void sub_10062B72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

uint64_t sub_10062B76C(uint64_t a1, void *a2)
{
  id v3;
  const unsigned __int8 *v4;
  const unsigned __int8 *v5;
  const unsigned __int8 *v6;
  const unsigned __int8 *v7;
  BOOL v8;
  uint64_t v9;
  unsigned __int8 uu2[16];

  v3 = a2;
  v4 = *(const unsigned __int8 **)(a1 + 1448);
  v5 = (const unsigned __int8 *)(a1 + 1456);
  if (v4 == v5)
  {
LABEL_11:
    v9 = 0;
  }
  else
  {
    while (1)
    {
      sub_100030BCC(uu2, v3);
      if (!uuid_compare(v4 + 32, uu2) && (*((_QWORD *)v4 + 9) || *((_QWORD *)v4 + 10)))
        break;
      v6 = (const unsigned __int8 *)*((_QWORD *)v4 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(const unsigned __int8 **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const unsigned __int8 *)*((_QWORD *)v4 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
      if (v7 == v5)
        goto LABEL_11;
    }
    v9 = 1;
  }

  return v9;
}

void sub_10062B854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10062B86C(uint64_t a1, int a2)
{
  const unsigned __int8 *v4;
  unsigned __int16 v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  unsigned __int16 v11;
  unsigned __int8 *v12;
  const unsigned __int8 **v13;
  BOOL v14;
  _QWORD v16[2];
  unsigned __int8 v17[16];

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 120);
  v4 = *(const unsigned __int8 **)(a1 + 376);
  if (v4 == (const unsigned __int8 *)(a1 + 384))
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v6 = off_1009778C0;
      v7 = sub_100030DF4(v4 + 32);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      if (sub_1006589A8((uint64_t)v6, v8) == a2)
      {
        v9 = sub_100030DF4(v4 + 32);
        v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        sub_100030BCC(v17, v10);
        v11 = (unsigned __int16)sub_100620330(a1, v17);

        v5 += v11 ^ 1;
      }
      else
      {

      }
      v12 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      if (v12)
      {
        do
        {
          v13 = (const unsigned __int8 **)v12;
          v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (const unsigned __int8 **)*((_QWORD *)v4 + 2);
          v14 = *v13 == v4;
          v4 = (const unsigned __int8 *)v13;
        }
        while (!v14);
      }
      v4 = (const unsigned __int8 *)v13;
    }
    while (v13 != (const unsigned __int8 **)(a1 + 384));
  }
  sub_100034234((uint64_t)v16);
  return v5;
}

void sub_10062B9EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10062BA24(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned __int16 v4;
  const unsigned __int8 *v5;
  void *v6;
  id v7;
  void *v8;
  unsigned int v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  unsigned __int16 v15;
  unsigned __int8 *v16;
  const unsigned __int8 **v17;
  BOOL v18;
  id v21;
  _QWORD v22[2];
  unsigned __int8 v23[16];

  v22[0] = 0;
  v22[1] = 0;
  v21 = a2;
  sub_10003415C((uint64_t)v22, a1 + 120);
  v4 = 0;
  if (v21 && (_DWORD)a3)
  {
    if (!objc_msgSend(v21, "length")
      || (v5 = *(const unsigned __int8 **)(a1 + 376), v5 == (const unsigned __int8 *)(a1 + 384)))
    {
      v4 = 0;
    }
    else
    {
      v4 = 0;
      do
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v6 = off_1009778C0;
        v7 = sub_100030DF4(v5 + 32);
        v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
        v9 = sub_10065C428((uint64_t)v6, v8, v21);

        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v10 = off_1009778C0;
        v11 = sub_100030DF4(v5 + 32);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        LODWORD(v10) = sub_10065C6B4((uint64_t)v10, v12, a3);

        if ((v9 & v10 & 1) != 0)
        {
          v13 = sub_100030DF4(v5 + 32);
          v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          sub_100030BCC(v23, v14);
          v15 = (unsigned __int16)sub_100620330(a1, v23);

          v4 += v15 ^ 1;
        }
        v16 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
        if (v16)
        {
          do
          {
            v17 = (const unsigned __int8 **)v16;
            v16 = *(unsigned __int8 **)v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (const unsigned __int8 **)*((_QWORD *)v5 + 2);
            v18 = *v17 == v5;
            v5 = (const unsigned __int8 *)v17;
          }
          while (!v18);
        }
        v5 = (const unsigned __int8 *)v17;
      }
      while (v17 != (const unsigned __int8 **)(a1 + 384));
    }
  }
  sub_100034234((uint64_t)v22);

  return v4;
}

void sub_10062BC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_10062BC80(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, __int16 a5, unsigned int a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  __int16 v25;
  __int16 v26;
  char v27;
  __int16 v28;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  id v34;
  void *v35;
  int v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *__p[2];
  char v51;
  void *v52[2];
  char v53;
  void *v54[2];
  char v55;
  void *v56[2];
  char v57;
  void *v58[2];
  char v59;
  unsigned __int16 *v60;
  unsigned __int8 *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;

  v14 = sub_1000438A4();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 2112))(v14))
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100713314();
    return 11;
  }
  v60 = 0;
  if (sub_100623C54(a1, a2, &v60))
  {
    v62 = 0;
    v63 = 0;
    v64 = 0;
    if (!(_DWORD)a4)
    {
      v30 = (uint64_t *)sub_100646B28(a1 + 792, a2);
      if ((uint64_t *)(a1 + 800) != v30)
      {
        v31 = v30;
        sub_1000040CC((uint64_t **)(a1 + 792), v30);
        operator delete(v31);
      }
      v21 = 0;
      v23 = 0;
      v28 = 0;
      v27 = 0;
      v26 = 0;
      v25 = 0;
      v18 = 0;
      goto LABEL_24;
    }
    v15 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 2120))(v15))
    {
      v61 = a2;
      *((_WORD *)sub_100647AE0((uint64_t **)(a1 + 792), a2, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v61)+ 21) = a5;
      v16 = sub_100030DF4(a2);
      v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      v18 = sub_100618720((uint64_t)v17, v17);

      v19 = sub_100030DF4(a2);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      v21 = sub_100618278(a1, v20);

      if (a6 && a7)
      {
        v22 = 0;
        if (a6 >= 5)
          v23 = 5;
        else
          v23 = a6;
        do
        {
          if (v22 >= a6)
            v24 = 0;
          else
            v24 = *(_DWORD *)(a7 + 4 * v22);
          *((_DWORD *)&v62 + v22++) = v24;
        }
        while (v22 != 5);
        v25 = 480;
        v26 = 20;
        v27 = 6;
        v28 = 48;
      }
      else
      {
        v62 = 0x2FA000002C4;
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v33 = off_1009778C0;
        v34 = sub_100030DF4(a2);
        v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
        sub_100091AE8(v58, "A1603");
        if ((sub_10000628C((uint64_t)v33, v35, (uint64_t)v58) & 1) != 0)
        {
          v36 = 1;
        }
        else
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10093DDE8);
          v37 = off_1009778C0;
          v38 = sub_100030DF4(a2);
          v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
          sub_100091AE8(v56, "A2051");
          if ((sub_10000628C((uint64_t)v37, v39, (uint64_t)v56) & 1) != 0)
          {
            v36 = 1;
          }
          else
          {
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093DDE8);
            v40 = off_1009778C0;
            v41 = sub_100030DF4(a2);
            v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
            sub_100091AE8(v54, "A3085");
            if ((sub_10000628C((uint64_t)v40, v42, (uint64_t)v54) & 1) != 0)
            {
              v36 = 1;
            }
            else
            {
              if (qword_1009778C8 != -1)
                dispatch_once(&qword_1009778C8, &stru_10093DDE8);
              v43 = off_1009778C0;
              v44 = sub_100030DF4(a2);
              v49 = (void *)objc_claimAutoreleasedReturnValue(v44);
              sub_100091AE8(v52, "A2538");
              if ((sub_10000628C((uint64_t)v43, v49, (uint64_t)v52) & 1) != 0)
              {
                v36 = 1;
              }
              else
              {
                if (qword_1009778C8 != -1)
                  dispatch_once(&qword_1009778C8, &stru_10093DDE8);
                v45 = off_1009778C0;
                v46 = sub_100030DF4(a2);
                v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
                sub_100091AE8(__p, "_HID_DEVICE_");
                v36 = sub_10000628C((uint64_t)v45, v47, (uint64_t)__p);
                if (v51 < 0)
                  operator delete(__p[0]);

              }
              if (v53 < 0)
                operator delete(v52[0]);

            }
            if (v55 < 0)
              operator delete(v54[0]);

          }
          if (v57 < 0)
            operator delete(v56[0]);

        }
        if (v59 < 0)
          operator delete(v58[0]);

        if (v36)
        {
          v25 = 480;
          LODWORD(v63) = 719;
          v26 = 20;
          v27 = 6;
          v28 = 48;
          v23 = 3;
        }
        else
        {
          v25 = 480;
          v26 = 20;
          v27 = 6;
          v28 = 48;
          v23 = 2;
        }
      }
LABEL_24:
      v32 = sub_1000438A4();
      HIWORD(v48) = v25;
      BYTE4(v48) = v27;
      WORD1(v48) = v28;
      LOWORD(v48) = v28;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, __int16))(*(_QWORD *)v32 + 1752))(v32, *v60, a3, a4, v23, &v62, v21, v18, v48, v26);
      return 0;
    }
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_1007132BC();
    return 11;
  }
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    sub_1007132E8();
  return 7;
}

void sub_10062C1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  void *v41;
  void *v42;
  void *v43;
  void *v44;

  if (a17 < 0)
    operator delete(__p);

  if (a23 < 0)
    operator delete(a18);

  if (a29 < 0)
    operator delete(a24);

  if (a35 < 0)
    operator delete(a30);

  if (a41 < 0)
    operator delete(a36);

  _Unwind_Resume(a1);
}

uint64_t sub_10062C2AC(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  uint64_t v21;
  int v22;
  int v23;
  NSObject *v24;
  uint64_t v26;
  int v27;
  NSObject *v28;
  uint64_t v29;
  int v30;
  NSObject *v31;
  uint64_t v32;
  int v33;
  NSObject *v34;
  uint64_t v35;
  int v36;
  NSObject *v37;
  uint64_t v38;
  int v39;
  NSObject *v40;
  unsigned __int8 v41;
  char v42;
  char v43;
  char v44;
  __int16 v45;
  __int16 v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  __int16 v53;
  void *__p[2];
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned __int8 v64;
  uint8_t buf[8];
  char v66;

  v64 = 0;
  v62 = -31;
  v63 = 1;
  v61 = -30;
  v59 = 0;
  v60 = 0;
  v57 = 0;
  v58 = 0;
  v2 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ForceRSSIDetectionEnable");
  v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(_QWORD *)v2 + 72))(v2, buf, __p, &v64);
  if (v56 < 0)
    operator delete(__p[0]);
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3)
      goto LABEL_9;
  }
  else if (!v3)
  {
    goto LABEL_9;
  }
  v4 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v64;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionEnable enable=(%d)", buf, 8u);
  }
LABEL_9:
  v5 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ForceRSSIDetectionWindow");
  v6 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned int *))(*(_QWORD *)v5 + 88))(v5, buf, __p, &v63);
  if (v56 < 0)
    operator delete(__p[0]);
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v6)
      goto LABEL_20;
  }
  else if (!v6)
  {
    goto LABEL_20;
  }
  v7 = v63;
  v8 = qword_100999890;
  if (v63 >= 3)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100713340();
    return 3;
  }
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionWindow (%d)", buf, 8u);
  }
LABEL_20:
  v9 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ForceRSSIDetectionFurther");
  v10 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v9 + 88))(v9, buf, __p, &v62);
  if (v56 < 0)
    operator delete(__p[0]);
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v10)
      goto LABEL_28;
  }
  else if (!v10)
  {
    goto LABEL_28;
  }
  v11 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v62;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionFurther (%d)", buf, 8u);
  }
LABEL_28:
  v12 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ForceRSSIDetectionCloser");
  v13 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v12 + 88))(v12, buf, __p, &v61);
  if (v56 < 0)
    operator delete(__p[0]);
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v13)
      goto LABEL_36;
  }
  else if (!v13)
  {
    goto LABEL_36;
  }
  v14 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v61;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionCloser (%d)", buf, 8u);
  }
LABEL_36:
  v15 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ForceRSSIDetectionVar1");
  v16 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v15 + 88))(v15, buf, __p, (char *)&v60 + 4);
  if (v56 < 0)
    operator delete(__p[0]);
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v16)
      goto LABEL_44;
  }
  else if (!v16)
  {
    goto LABEL_44;
  }
  v17 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = HIDWORD(v60);
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionVar1 (%d)", buf, 8u);
  }
LABEL_44:
  v18 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ForceRSSIDetectionVar2");
  v19 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, uint64_t *))(*(_QWORD *)v18 + 88))(v18, buf, __p, &v60);
  if (v56 < 0)
    operator delete(__p[0]);
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v19)
      goto LABEL_52;
  }
  else if (!v19)
  {
    goto LABEL_52;
  }
  v20 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v60;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionVar2 (%d)", buf, 8u);
  }
LABEL_52:
  v21 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ForceRSSIDetectionDebug");
  v22 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v21 + 88))(v21, buf, __p, (char *)&v59 + 4);
  if (v56 < 0)
    operator delete(__p[0]);
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v22)
      goto LABEL_64;
  }
  else if (!v22)
  {
    goto LABEL_64;
  }
  v23 = HIDWORD(v59);
  v24 = qword_100999890;
  if (HIDWORD(v59) >= 2)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_1007133A0();
    return 3;
  }
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v23;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionDebug (%d)", buf, 8u);
  }
LABEL_64:
  v26 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ForceRSSIDetectionMaskDecisionLogic");
  v27 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, uint64_t *))(*(_QWORD *)v26 + 88))(v26, buf, __p, &v59);
  if (v56 < 0)
    operator delete(__p[0]);
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v27)
      goto LABEL_72;
  }
  else if (!v27)
  {
    goto LABEL_72;
  }
  v28 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v59;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionMaskDecisionLogic (%d)", buf, 8u);
  }
LABEL_72:
  v29 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ForceRSSIDetectionCMCheckLogic");
  v30 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v29 + 88))(v29, buf, __p, (char *)&v58 + 4);
  if (v56 < 0)
    operator delete(__p[0]);
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v30)
      goto LABEL_80;
  }
  else if (!v30)
  {
    goto LABEL_80;
  }
  v31 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = HIDWORD(v58);
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionMCMCheckLogic (%d)", buf, 8u);
  }
LABEL_80:
  v32 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ForceRSSIDetectionCM_AND_Mask");
  v33 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, uint64_t *))(*(_QWORD *)v32 + 88))(v32, buf, __p, &v58);
  if (v56 < 0)
    operator delete(__p[0]);
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v33)
      goto LABEL_88;
  }
  else if (!v33)
  {
    goto LABEL_88;
  }
  v34 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v58;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionCM_AND_Mask (%d)", buf, 8u);
  }
LABEL_88:
  v35 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ForceRSSIDetectionCM_XOR_Mask");
  v36 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v35 + 88))(v35, buf, __p, (char *)&v57 + 4);
  if (v56 < 0)
    operator delete(__p[0]);
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v36)
      goto LABEL_96;
  }
  else if (!v36)
  {
    goto LABEL_96;
  }
  v37 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = HIDWORD(v57);
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionCM_XOR_Mask (%d)", buf, 8u);
  }
LABEL_96:
  v38 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ForceRSSIDetectionCM_AND_Mask2");
  v39 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, uint64_t *))(*(_QWORD *)v38 + 88))(v38, buf, __p, &v57);
  if (v56 < 0)
    operator delete(__p[0]);
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v39)
      goto LABEL_104;
LABEL_102:
    v40 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v57;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionCM_AND_Mask2 (%d)", buf, 8u);
    }
    goto LABEL_104;
  }
  if (v39)
    goto LABEL_102;
LABEL_104:
  if (!v64)
    return 1501;
  v42 = v62;
  v41 = v63;
  v43 = v61;
  v53 = WORD2(v60);
  v44 = BYTE4(v59);
  v45 = v60;
  v47 = BYTE4(v58);
  v46 = v59;
  v48 = HIDWORD(v57);
  v49 = v57;
  v50 = sub_1000438A4();
  LOBYTE(v52) = v44;
  HIWORD(v51) = v46;
  WORD2(v51) = v45;
  WORD1(v51) = v53;
  BYTE1(v51) = v43;
  LOBYTE(v51) = v43;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, char, unint64_t, _QWORD))(*(_QWORD *)v50 + 1776))(v50, 1, *a2, v41, v42, v42, v42, v43, v51, v47, __PAIR64__(v49, v48), v52);
}

void sub_10062CD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void sub_10062CE04(uint64_t a1, void *a2, unsigned int a3, int a4, int a5)
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  id v18;
  const char *v19;
  size_t v20;
  _QWORD *v21;
  char *v22;
  void *v23;
  int v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t (**v34)();
  unsigned int *v35;
  void *__p[2];
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[4];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[144];
  uint64_t v48;
  _QWORD v49[2];
  _BYTE v50[128];
  void *v51[2];
  char v52;
  uint64_t v53;

  v6 = a2;
  v48 = 0;
  v46 = 0u;
  memset(v47, 0, sizeof(v47));
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  memset(v43, 0, sizeof(v43));
  sub_1002613AC((uint64_t)&v42);
  if (v6)
  {
    if (a4)
    {
      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_10093DEC8);
      v7 = sub_1002E11E8((uint64_t)off_100978168, v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v8));
    }
    else
    {
      if (qword_10097AC58 != -1)
        dispatch_once(&qword_10097AC58, &stru_10093DE68);
      v10 = sub_1006C1B60(qword_10097AC50, v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v9 = objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithSet:](NSMutableSet, "setWithSet:", v8));
    }
    v11 = (void *)v9;

    if (qword_10097AB68 != -1)
      dispatch_once(&qword_10097AB68, &stru_10093DEE8);
    v12 = sub_1002ADEE4(qword_10097AB60, v6);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    objc_msgSend(v11, "addObjectsFromArray:", v13);

    if (objc_msgSend(v11, "count"))
    {
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v14 = v11;
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v38, v50, 16);
      if (v15)
      {
        v16 = *(_QWORD *)v39;
        do
        {
          for (i = 0; i != v15; i = (char *)i + 1)
          {
            if (*(_QWORD *)v39 != v16)
              objc_enumerationMutation(v14);
            v18 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)i));
            v19 = (const char *)objc_msgSend(v18, "UTF8String");
            v20 = strlen(v19);
            v21 = sub_1002614D8(v43, (uint64_t)v19, v20);
            sub_1002614D8(v21, (uint64_t)",", 1);

          }
          v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v38, v50, 16);
        }
        while (v15);
      }

      v49[0] = 0;
      v49[1] = 0;
      std::ostream::sentry::sentry(v49, v43);
      v22 = (char *)v43 + *(_QWORD *)(*(_QWORD *)&v43[0] - 24);
      if ((v22[32] & 5) == 0)
      {
        (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v22 + 5) + 32))(v51, *((_QWORD *)v22 + 5), -1, 1, 16);
        if (v53 == -1)
          std::ios_base::clear((std::ios_base *)((char *)v43 + *(_QWORD *)(*(_QWORD *)&v43[0] - 24)), *(_DWORD *)((char *)&v43[2] + *(_QWORD *)(*(_QWORD *)&v43[0] - 24)) | 4);
      }
      std::ostream::sentry::~sentry(v49);
      LOBYTE(v51[0]) = 0;
      sub_1002614D8(v43, (uint64_t)v51, 1);
    }
    else
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v23 = off_1009778C0;
      sub_100091AE8(__p, "HasTS");
      v24 = sub_10000628C((uint64_t)v23, v6, (uint64_t)__p);
      if (v37 < 0)
        operator delete(__p[0]);
      if (v24)
        v25 = "com.apple.magnet";
      else
        v25 = "Unknown";
      if (v24)
        v26 = 16;
      else
        v26 = 7;
      sub_1002614D8(v43, (uint64_t)v25, v26);
    }

  }
  else
  {
    sub_1002614D8(v43, (uint64_t)"Unknown", 7);
  }
  if (a5)
  {
    v27 = sub_10005D5A4();
    std::stringbuf::str((char *)v43 + 8);
    if (v52 >= 0)
      v28 = v51;
    else
      v28 = (void **)v51[0];
    v34 = &off_100918258;
    v35 = 0;
    (*(void (**)(uint64_t, _QWORD, void **, id, uint64_t (***)()))(*(_QWORD *)v27 + 40))(v27, a3, v28, v6, &v34);
    v34 = &off_100918258;
    if (v35)
      sub_100056AAC(v35);
    if (v52 < 0)
      operator delete(v51[0]);
  }
  if (a3 == 5 || a3 == 3)
  {
    v29 = sub_10005D5A4();
    std::stringbuf::str((char *)v43 + 8);
    v30 = v52 >= 0 ? v51 : (void **)v51[0];
    (*(void (**)(uint64_t, void **, BOOL, id))(*(_QWORD *)v29 + 8))(v29, v30, a3 == 3, v6);
    if (v52 < 0)
      operator delete(v51[0]);
  }
  *(_QWORD *)((char *)&v43[-1]
  *(_QWORD *)&v43[0] = v31;
  if (SHIBYTE(v45) < 0)
    operator delete(*((void **)&v44 + 1));
  std::streambuf::~streambuf((char *)v43 + 8);
  std::ios::~ios(v47);

}

void sub_10062D350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  void *v62;
  void *v63;

  std::ostream::sentry::~sentry(&a62);

  sub_1006CC5C8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_10062D43C(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  BOOL v7;
  int v8;
  NSObject *v13;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  _DWORD v19[2];
  __int16 v20;
  const char *v21;
  __int16 v22;
  unsigned int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  unsigned int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  unsigned int v31;
  __int16 v32;
  const char *v33;

  v7 = a2 > 2 || (a4 | a3) > 1 || a5 > 0x64 || a2 == 0;
  v8 = v7;
  if (v7)
  {
    v13 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    {
      v15 = "ok";
      v19[0] = 67110914;
      v16 = "VSC call not required";
      v19[1] = a2;
      if (a2)
        v16 = "ok";
      v20 = 2080;
      if (a2 > 2)
        v16 = "Can't be >2";
      v21 = v16;
      v22 = 1024;
      v23 = a3;
      v17 = "Can't be >1";
      v24 = 2080;
      if (a3 <= 1)
        v18 = "ok";
      else
        v18 = "Can't be >1";
      v25 = v18;
      if (a4 <= 1)
        v17 = "ok";
      v26 = 1024;
      v27 = a4;
      if (a5 > 0x64)
        v15 = "Can't be >100";
      v28 = 2080;
      v29 = v17;
      v30 = 1024;
      v31 = a5;
      v32 = 2080;
      v33 = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "SetConnectionPrioritization argument out of range: {priority:%d (%s), protectWLAN:%d (%s), protectLEA:%d (%s), percentageWithCriticalPriority:%d (%s)}", (uint8_t *)v19, 0x42u);
    }
  }
  return v8 ^ 1u;
}

uint64_t sub_10062D5B0(uint64_t a1, unint64_t a2, int a3, unsigned __int16 *a4, int a5, int a6)
{
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  NSObject *v12;
  id v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  NSObject *v19;
  uint32_t v20;
  const unsigned __int8 *v21;
  const unsigned __int8 **v22;
  NSObject *v23;
  id v24;
  void *v25;
  unsigned __int8 *v26;
  const unsigned __int8 **v27;
  BOOL v28;
  NSObject *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  id v42;
  unsigned int v43;
  uint64_t v44;
  const char *v45;
  int is_null;
  _BOOL4 v47;
  id v48;
  int v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  id v56;
  unint64_t v57;
  NSObject *v58;
  int v59;
  NSObject *v60;
  const char *v61;
  NSObject *v62;
  id v63;
  void *v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  void *v82;
  char *v83;
  NSObject *v84;
  NSObject *v85;
  id v86;
  void *v87;
  unsigned int v88;
  NSObject *v89;
  _BOOL4 v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  BOOL v94;
  _QWORD *v95;
  _BOOL8 v96;
  id v97;
  uint64_t *v98;
  const char *v99;
  unsigned int v100;
  NSObject *v101;
  id v102;
  id v103;
  NSObject *v104;
  int v105;
  _BYTE *v106;
  id v107;
  uint64_t v108;
  void *v109;
  _BYTE *v110;
  uint64_t v111;
  void *v112;
  id v113;
  void *v114;
  unsigned int v115;
  const unsigned __int8 *v116;
  unsigned __int16 v117;
  void *v118;
  id v119;
  void *v120;
  __int16 v121;
  unsigned __int8 *v122;
  const unsigned __int8 **v123;
  NSObject *v124;
  const unsigned __int8 *v125;
  void *v126;
  id v127;
  void *v128;
  id v129;
  void *v130;
  unsigned __int8 *v131;
  const unsigned __int8 **v132;
  NSObject *v133;
  id v134;
  id v135;
  uint64_t v136;
  void *i;
  uint64_t v138;
  id v139;
  id v140;
  uint64_t v141;
  void *v142;
  void *v143;
  NSObject *v144;
  id v145;
  id v146;
  uint64_t v147;
  void *v148;
  void *v149;
  NSObject *v150;
  id v151;
  uint64_t v152;
  void *j;
  uint64_t v154;
  NSObject *v155;
  id v156;
  void *v157;
  const char *v158;
  id v159;
  id v160;
  void *v161;
  const char *v162;
  id v163;
  void *v164;
  NSObject *v165;
  int v166;
  NSObject *v167;
  _BYTE *v168;
  void *v169;
  id v170;
  void *v171;
  void *v172;
  id v173;
  void *v174;
  NSObject *v175;
  const char *v176;
  const char *v177;
  int v178;
  _BYTE *v179;
  id v180;
  void *v181;
  _BYTE *v182;
  id v183;
  double v184;
  unsigned int v185;
  NSObject *v186;
  _BYTE *v187;
  uint64_t v188;
  uint64_t v189;
  id v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  id v195;
  void *v196;
  int v197;
  char v198;
  char v199;
  __uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  uint64_t *v203;
  unint64_t v204;
  BOOL v205;
  _QWORD *v206;
  unint64_t v207;
  NSObject *v208;
  id v209;
  id v210;
  NSObject *v211;
  const char *v212;
  const char *v213;
  int v214;
  _BYTE *v215;
  id v216;
  void *v217;
  _BYTE *v218;
  id v219;
  uint64_t v220;
  NSObject *v221;
  id v222;
  id v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  NSObject *v227;
  _BOOL8 v228;
  const char *v229;
  _BYTE *v230;
  const char *v231;
  uint64_t v232;
  int v233;
  NSObject *v234;
  _BOOL8 v235;
  const char *v236;
  _BYTE *v237;
  const char *v238;
  uint64_t v239;
  void *v240;
  id v241;
  void *v242;
  id v243;
  void *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  NSObject *v250;
  unsigned int v251;
  unsigned int v252;
  NSObject *v253;
  _BYTE *v254;
  id v255;
  void *v256;
  NSObject *v257;
  unint64_t v258;
  _BYTE *v259;
  id v260;
  void *v261;
  void *v262;
  id v263;
  void *v264;
  uint64_t v265;
  void *v266;
  id v267;
  void *v268;
  NSObject *v269;
  _BYTE *v270;
  id v271;
  void *v272;
  id v273;
  uint64_t v274;
  void *v275;
  NSMutableArray *v276;
  void *v277;
  id v278;
  void *v279;
  id v280;
  void *v281;
  unsigned int v282;
  const char *v283;
  uint64_t v284;
  int v286;
  id v287;
  int v288;
  _BOOL4 v292;
  _QWORD v294[2];
  __int128 v295;
  __int128 v296;
  uint64_t v297;
  __int16 v298;
  unsigned __int8 v299;
  unsigned __int8 v300;
  __int128 v301;
  _QWORD v302[5];
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  _QWORD v315[5];
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  int v320;
  __int16 v321;
  char v322;
  char v323;
  unsigned __int16 v324;
  _QWORD v325[2];
  uint8_t v326[4];
  const char *v327;
  _BYTE v328[12];
  __int16 v329;
  uint64_t v330;
  char v331;
  _BYTE buf[58];
  __int16 v333;
  int v334;
  _BYTE v335[128];
  _BYTE v336[128];
  _BYTE v337[128];
  unsigned __int8 v338[128];
  uuid_t uu;

  v325[1] = 0;
  v325[0] = 0;
  sub_10003415C((uint64_t)v325, a1 + 120);
  v324 = 0;
  if (qword_100993F10 != -1)
    dispatch_once(&qword_100993F10, &stru_10093D800);
  v323 = 0;
  sub_100043758(&v323);
  v8 = a2;
  v9 = sub_1000746A4(a2);
  v320 = v9;
  v322 = BYTE6(v9);
  v321 = WORD2(v9);
  v292 = sub_10019AC00((uint64_t)a4);
  if (v292)
  {
    v10 = sub_1002213E8((uint64_t)a4, &v324);
    v11 = sub_10022163C((uint64_t)a4);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  sub_10004339C(&v323);
  v288 = v10;
  v12 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v13 = sub_100021770(a2);
    v14 = (id)objc_claimAutoreleasedReturnValue(v13);
    *(_DWORD *)buf = 138544386;
    *(_QWORD *)&buf[4] = v14;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a4;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = a5;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v292;
    *(_WORD *)&buf[34] = 1024;
    *(_DWORD *)&buf[36] = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "handleConnectionCompleteCallback address=%{public}@ handle=%p status=%d connectionIsActive=%d, wakeupEvent=%d", buf, 0x28u);

    v8 = a2;
  }
  if (!a5 || *(_DWORD *)(a1 + 856) != 3)
  {
    if (*(_BYTE *)(a1 + 1059))
    {
      v16 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v17 = "Stack is shutting down, this is most likely an orphan event dispatched late, ignoring";
        goto LABEL_21;
      }
      goto LABEL_423;
    }
    memset(uu, 0, sizeof(uu));
    uuid_clear(uu);
    if (a5)
    {
      if (a5 > 710)
      {
        if (a5 != 713)
        {
          if (a5 == 711)
          {
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093DDE8);
            sub_10003F924((uint64_t)off_1009778C0, v8, 1u, 0, 0, 0, buf);
            uuid_copy(uu, buf);
            is_null = uuid_is_null(uu);
            v47 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR);
            if (is_null)
            {
              if (v47)
              {
                v48 = sub_100021770(v8);
                objc_claimAutoreleasedReturnValue(v48);
                sub_1007135D8();
              }
              goto LABEL_423;
            }
            if (v47)
            {
              sub_1003D2DB4(uu, buf);
              sub_100713574();
            }
            if (sub_10061CDB8((_QWORD *)a1, uu))
            {
              v81 = sub_100030DF4(uu);
              v82 = (void *)objc_claimAutoreleasedReturnValue(v81);
              sub_100629970(a1, v82);

              if (objc_msgSend(*(id *)(a1 + 744), "count"))
              {
                v83 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 744), "anyObject"));
                objc_msgSend(*(id *)(a1 + 744), "removeObject:", v83);
                v84 = qword_100999890;
                if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)v326 = 138543362;
                  v327 = v83;
                  _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "Moving device \"%{public}@\" off of the overflow list now that there's room", v326, 0xCu);
                }
                sub_10062079C(a1, v83);

              }
            }
            if (*(_DWORD *)(a1 + 856) != 1)
            {
              v49 = 0;
              goto LABEL_415;
            }
            v85 = qword_100999890;
            if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v326 = 0;
              _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "Connection already exists", v326, 2u);
            }
            goto LABEL_92;
          }
LABEL_84:
          v62 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
          {
            v63 = sub_100021770(v8);
            v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
            *(_DWORD *)buf = 138543618;
            *(_QWORD *)&buf[4] = v64;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = a5;
            _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Failed to connect to device \"%{public}@\" with result %{bluetooth:OI_STATUS}u", buf, 0x12u);

          }
          if (a3)
          {
            v65 = qword_100999890;
            if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
              sub_100713504(v65, v66, v67, v68, v69, v70, v71, v72);
          }
LABEL_92:
          sub_10061B638(a1, 0);
LABEL_93:
          v49 = 1;
LABEL_415:
          v280 = sub_100030DF4(uu);
          v281 = (void *)objc_claimAutoreleasedReturnValue(v280);
          sub_10062CE04((uint64_t)v281, v281, 3u, a3, a6);

          v282 = *(_DWORD *)(a1 + 920);
          if (v282)
          {
            v44 = qword_100999890;
            if (!os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
              goto LABEL_423;
            if (v282 > 3)
              v283 = "UNKNOWN";
            else
              v283 = off_10093DF70[v282 - 1];
            *(_DWORD *)v326 = 136446210;
            v327 = v283;
            v17 = "Skipping processConnectingDevices, current LE Connection Manager State is %{public}s";
            v18 = v326;
            goto LABEL_426;
          }
          if (!v49)
          {
            v284 = qword_100999890;
            if (!os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
              goto LABEL_423;
            *(_DWORD *)v326 = 67109120;
            LODWORD(v327) = 0;
            v17 = "Skipping processConnectingDevices, reissueConnections=%d";
            v18 = v326;
            v19 = v284;
            v20 = 8;
            goto LABEL_22;
          }
LABEL_420:
          sub_10062A4A8((id *)a1);
          sub_100628CA8(a1);
          goto LABEL_423;
        }
      }
      else
      {
        if (a5 == 157)
        {
          v73 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
            sub_100713678(v73, v74, v75, v76, v77, v78, v79, v80);
          if ((a3 & 1) != 0)
            goto LABEL_93;
          goto LABEL_92;
        }
        if (a5 != 709)
          goto LABEL_84;
      }
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_100713618();
      *(_BYTE *)(a1 + 1057) = 1;
      sub_10061B638(a1, 0);
      v49 = 0;
      goto LABEL_415;
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    sub_10003F924((uint64_t)off_1009778C0, v8, 1u, 0, 0, 0, buf);
    uuid_copy(uu, buf);
    if (uuid_is_null(uu))
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      {
        v42 = sub_100021770(v8);
        objc_claimAutoreleasedReturnValue(v42);
        sub_1007134C4();
      }
      sub_10006D81C(&v323);
      sub_100223EA0(&v320);
      sub_10004339C(&v323);
      if ((a3 & 1) != 0)
        goto LABEL_423;
      if (!*(_QWORD *)(a1 + 344))
      {
        sub_10061B638(a1, 0);
        goto LABEL_423;
      }
      sub_10061B638(a1, 1u);
      goto LABEL_420;
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    v50 = off_1009778C0;
    v51 = sub_100030DF4(uu);
    v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
    sub_10065C750((uint64_t)v50, v52, 1, 2, 0);

    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    v53 = off_1009778C0;
    v54 = sub_100030DF4(uu);
    v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
    sub_10065B5BC((uint64_t)v53, v55, 1, a2);

    v56 = (id)sub_10061CDB8((_QWORD *)a1, uu);
    v57 = a2;
    if (!(_DWORD)v56)
    {
      if ((a3 & 1) == 0)
      {
        v91 = *(_QWORD **)(a1 + 360);
        if (!v91)
          goto LABEL_141;
        v92 = a1 + 360;
        do
        {
          v93 = v91[4];
          v94 = v93 >= a2;
          if (v93 >= a2)
            v95 = v91;
          else
            v95 = v91 + 1;
          if (v94)
            v92 = (uint64_t)v91;
          v91 = (_QWORD *)*v95;
        }
        while (*v95);
        if (v92 == a1 + 360 || *(_QWORD *)(v92 + 32) > a2)
        {
LABEL_141:
          v104 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
          {
            sub_1003D2DB4(uu, buf);
            v105 = buf[23];
            v106 = *(_BYTE **)buf;
            v107 = sub_100021770(a2);
            v108 = objc_claimAutoreleasedReturnValue(v107);
            v109 = (void *)v108;
            v110 = buf;
            if (v105 < 0)
              v110 = v106;
            *(_DWORD *)v328 = 136446466;
            *(_QWORD *)&v328[4] = v110;
            v329 = 2114;
            v330 = v108;
            _os_log_fault_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_FAULT, "We have a successful outgoing connection to device \"%{public}s(%{public}@)\" but we never asked to connect to it", v328, 0x16u);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);

          }
          v111 = sub_100027F68();
          sub_100091AE8(&v301, "");
          sub_1005756F0(v111, 132, &v301, 1);
        }
        v96 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR);
        if (v96)
        {
          v97 = sub_100021770(a2);
          objc_claimAutoreleasedReturnValue(v97);
          sub_100713484();
          v57 = a2;
        }
        sub_10062B240(v96, v57);
        v98 = (uint64_t *)sub_100647368(a1 + 328, (unsigned __int8 *)(v92 + 40));
        if ((uint64_t *)(a1 + 336) != v98)
        {
          sub_1000040CC((uint64_t **)(a1 + 328), v98);
          operator delete(v98);
        }
        sub_1000040CC((uint64_t **)(a1 + 352), (uint64_t *)v92);
        operator delete((void *)v92);
        sub_10061B638(a1, 0);
        sub_10006D81C(&v323);
        sub_100223EA0(&v320);
        sub_10004339C(&v323);
        if (!*(_DWORD *)(a1 + 920))
        {
          sub_10062A4A8((id *)a1);
          sub_100628CA8(a1);
        }
        goto LABEL_423;
      }
      v49 = 0;
LABEL_245:
      sub_10062C2AC((uint64_t)v56, a4);
      *(_QWORD *)buf = uu;
      sub_100646208((uint64_t **)(a1 + 376), uu, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)buf)[6] = (uint64_t)a4;
      if (!v292)
      {
        v211 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          if (a3)
            v212 = "Incoming";
          else
            v212 = "Outgoing";
          if (a3)
            v213 = "from";
          else
            v213 = "to";
          sub_1003D2DB4(uu, v328);
          v214 = v331;
          v215 = *(_BYTE **)v328;
          v216 = sub_100021770(a2);
          v217 = (void *)objc_claimAutoreleasedReturnValue(v216);
          if (v214 >= 0)
            v218 = v328;
          else
            v218 = v215;
          v219 = v217;
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = v212;
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v213;
          *(_WORD *)&buf[22] = 2082;
          *(_QWORD *)&buf[24] = v218;
          *(_WORD *)&buf[32] = 2114;
          *(_QWORD *)&buf[34] = v219;
          *(_WORD *)&buf[42] = 2048;
          *(_QWORD *)&buf[44] = a4;
          _os_log_impl((void *)&_mh_execute_header, v211, OS_LOG_TYPE_DEFAULT, "%{public}s connection %{public}s device \"%{public}s\" (%{public}@) with handle:%p was successful but already disconnected", buf, 0x34u);

          if (v331 < 0)
            operator delete(*(void **)v328);

        }
        goto LABEL_410;
      }
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v169 = off_1009778C0;
      v170 = sub_100030DF4(uu);
      v171 = (void *)objc_claimAutoreleasedReturnValue(v170);
      sub_10065BCEC((uint64_t)v169, v171, a3 ^ 1);

      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v172 = off_1009778C0;
      v173 = sub_100030DF4(uu);
      v174 = (void *)objc_claimAutoreleasedReturnValue(v173);
      sub_10065BE04((uint64_t)v172, v174, 0);

      v175 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        if (a3)
          v176 = "Incoming";
        else
          v176 = "Outgoing";
        if (a3)
          v177 = "from";
        else
          v177 = "to";
        sub_1003D2DB4(uu, v328);
        v178 = v331;
        v179 = *(_BYTE **)v328;
        v180 = sub_100021770(a2);
        v181 = (void *)objc_claimAutoreleasedReturnValue(v180);
        if (v178 >= 0)
          v182 = v328;
        else
          v182 = v179;
        v183 = v181;
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = v176;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v177;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&buf[24] = v182;
        *(_WORD *)&buf[32] = 2114;
        *(_QWORD *)&buf[34] = v183;
        *(_WORD *)&buf[42] = 2048;
        *(_QWORD *)&buf[44] = a4;
        *(_WORD *)&buf[52] = 1024;
        *(_DWORD *)&buf[54] = v324;
        v333 = 1024;
        v334 = 1;
        _os_log_impl((void *)&_mh_execute_header, v175, OS_LOG_TYPE_DEFAULT, "%{public}s connection %{public}s device \"%{public}s\" (%{public}@) with handle:%p was successful with connection interval %d active=%d", buf, 0x40u);

        if (v331 < 0)
          operator delete(*(void **)v328);

      }
      v184 = 0.35;
      if (v324 < 0x308u)
        v184 = 0.75;
      v185 = (int)(v184 * (double)(10 * v11) / ((double)v324 * 1.25));
      v186 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        sub_1003D2DB4(uu, v328);
        v187 = v331 >= 0 ? v328 : *(_BYTE **)v328;
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = v187;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v185;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v324;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v11;
        _os_log_impl((void *)&_mh_execute_header, v186, OS_LOG_TYPE_DEFAULT, "Connection Complete: setting LE device \"%{public}s\" connection threshold to %d events with interval %d, LSTO %d", buf, 0x1Eu);
        if (v331 < 0)
          operator delete(*(void **)v328);
      }
      v188 = sub_10003BE44();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v188 + 336))(v188))
        goto LABEL_275;
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v189 = (uint64_t)off_1009778C0;
      v190 = sub_100030DF4(uu);
      v191 = (void *)objc_claimAutoreleasedReturnValue(v190);
      LOBYTE(v189) = sub_10065BD74(v189, v191);

      if ((v189 & 1) != 0)
      {
LABEL_275:
        v192 = sub_1000438A4();
        if (v185 >= 0xFF)
          v193 = 255;
        else
          v193 = v185;
        if ((*(unsigned int (**)(uint64_t, unsigned __int16 *, uint64_t))(*(_QWORD *)v192 + 1072))(v192, a4, v193)&& os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        {
          sub_100713458();
        }
      }
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v194 = off_1009778C0;
      v195 = sub_100030DF4(uu);
      v196 = (void *)objc_claimAutoreleasedReturnValue(v195);
      v197 = sub_1006589A8((uint64_t)v194, v196);

      if (qword_100977B40 != -1)
        dispatch_once(&qword_100977B40, &stru_10093DE28);
      v198 = *((_BYTE *)off_100977B38 + 198);
      v199 = *((_BYTE *)off_100977B38 + 197);
      v326[0] = 0;
      v326[0] = *((_BYTE *)off_100977B38 + 199);
      v300 = v199 | v198;
      if (*(_BYTE *)(a1 + 1371))
      {
        if (a3 && *(_QWORD *)(a1 + 1136))
        {
          v200 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
          v201 = v200;
          v202 = *(_QWORD **)(a1 + 1128);
          if (v202)
          {
            v203 = (uint64_t *)(a1 + 1128);
            do
            {
              v204 = v202[4];
              v205 = v204 >= a2;
              if (v204 >= a2)
                v206 = v202;
              else
                v206 = v202 + 1;
              if (v205)
                v203 = v202;
              v202 = (_QWORD *)*v206;
            }
            while (*v206);
            if (v203 != (uint64_t *)(a1 + 1128))
            {
              v207 = v203[4];
              if (v207 <= a2)
              {
                if (v200 - v203[5] < 0x6FC23AC01)
                {
                  v220 = sub_1000438A4();
                  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v220 + 2608))(v220, *a4, 1, 0, v326[0], v300, 0);
                  v221 = qword_100999890;
                  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
                  {
                    v222 = sub_100649588(a2);
                    v223 = (id)objc_claimAutoreleasedReturnValue(v222);
                    v224 = *(_QWORD *)(a1 + 1136);
                    *(_DWORD *)buf = 138543618;
                    *(_QWORD *)&buf[4] = v223;
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v224;
                    _os_log_impl((void *)&_mh_execute_header, v221, OS_LOG_TYPE_DEFAULT, "setConnectionPrioritization for matching incoming address:%{public}@ fAddressForIncomingConnectionPrioritizationMap:%lu", buf, 0x16u);

                  }
                  sub_1000040CC((uint64_t **)(a1 + 1120), v203);
                  operator delete(v203);
                }
                else
                {
                  v208 = qword_100999890;
                  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
                  {
                    v209 = sub_100649588(v207);
                    v210 = (id)objc_claimAutoreleasedReturnValue(v209);
                    *(_DWORD *)buf = 138543362;
                    *(_QWORD *)&buf[4] = v210;
                    _os_log_impl((void *)&_mh_execute_header, v208, OS_LOG_TYPE_DEFAULT, "Ignoring expired incoming prioritized connection address:%{public}@", buf, 0xCu);

                  }
                }
              }
            }
          }
          sub_100628714(a1, v201);
        }
        if (v197 == 196608)
        {
          v299 = *(_BYTE *)(a1 + 1371);
          v298 = 0;
          v232 = sub_100027F68();
          v233 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, char *, uint8_t *, unsigned __int8 *, __int16 *))(*(_QWORD *)v232 + 848))(v232, &v299, (char *)&v298 + 1, v326, &v300, &v298);
          v234 = qword_100999890;
          v235 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT);
          if (v235)
          {
            sub_1003D2DB4(uu, v328);
            v236 = "";
            if (v233)
              v236 = "(overridden)";
            if (v331 >= 0)
              v237 = v328;
            else
              v237 = *(_BYTE **)v328;
            if ((unint64_t)(char)v299 > 2)
              v238 = "UNKNOWN";
            else
              v238 = off_10093DF88[(char)v299];
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = v236;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v237;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = v238;
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = HIBYTE(v298);
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v326[0];
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = v298;
            _os_log_impl((void *)&_mh_execute_header, v234, OS_LOG_TYPE_DEFAULT, "CBUseCaseDigitalIDTSA %sfor device \"%s\" setConnectionPrioritization{priority:%s, protectWLAN:%d, protectLEA:%d, percentageWithCriticalPriority:%d}", buf, 0x32u);
            if (v331 < 0)
              operator delete(*(void **)v328);
          }
          if (!sub_10062D43C(v235, v299, HIBYTE(v298), v326[0], v298))
          {
            if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
              sub_10071342C();
            goto LABEL_350;
          }
LABEL_341:
          v239 = sub_1000438A4();
          (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v239 + 2608))(v239, *a4, v299, HIBYTE(v298), v326[0], v300, v298);
          goto LABEL_350;
        }
        if (v197 == 19)
        {
          v299 = *(_BYTE *)(a1 + 1371);
          v298 = 0;
          v225 = sub_100027F68();
          v226 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, char *, uint8_t *, unsigned __int8 *, __int16 *))(*(_QWORD *)v225 + 840))(v225, &v299, (char *)&v298 + 1, v326, &v300, &v298);
          v227 = qword_100999890;
          v228 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT);
          if (v228)
          {
            sub_1003D2DB4(uu, v328);
            v229 = "";
            if (v226)
              v229 = "(overridden)";
            if (v331 >= 0)
              v230 = v328;
            else
              v230 = *(_BYTE **)v328;
            if ((unint64_t)(char)v299 > 2)
              v231 = "UNKNOWN";
            else
              v231 = off_10093DF88[(char)v299];
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = v229;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v230;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = v231;
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = HIBYTE(v298);
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v326[0];
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = v298;
            _os_log_impl((void *)&_mh_execute_header, v227, OS_LOG_TYPE_DEFAULT, "CBUseCaseDigitalID for %sdevice \"%s\" setConnectionPrioritization{priority:%s, protectWLAN:%d, protectLEA:%d, percentageWithCriticalPriority:%d}", buf, 0x32u);
            if (v331 < 0)
              operator delete(*(void **)v328);
          }
          if (!sub_10062D43C(v228, v299, HIBYTE(v298), v326[0], v298))
          {
            if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
              sub_100713400();
            goto LABEL_350;
          }
          goto LABEL_341;
        }
      }
LABEL_350:
      if (*(_BYTE *)(a1 + 1369))
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v240 = off_1009778C0;
        v241 = sub_100030DF4(uu);
        v242 = (void *)objc_claimAutoreleasedReturnValue(v241);
        v243 = sub_10065C154((uint64_t)v240, v242);
        v244 = (void *)objc_claimAutoreleasedReturnValue(v243);

        v245 = sub_10063038C(a1, v197, v244);
        if ((_DWORD)v245)
        {
          v246 = sub_1000438A4();
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v246 + 1744))(v246, *a4, v245);
        }

      }
      if (*(_BYTE *)(a1 + 1370))
      {
        v247 = sub_10003BE44();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v247 + 912))(v247))
        {
          if ((v197 - 0x10000) <= 0x15 && ((1 << v197) & 0x200011) != 0)
          {
            v248 = sub_1000438A4();
            v249 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v248 + 144))(v248, 0, *a4, 1, 4294967227, 0, 4294967216);
            if (v249)
            {
              v250 = qword_100999890;
              if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = v249;
                _os_log_impl((void *)&_mh_execute_header, v250, OS_LOG_TYPE_DEFAULT, "Error results for enableEPATxBFForLE result:%d", buf, 8u);
              }
            }
          }
        }
      }
      if (!v288 && (a3 & 1) == 0)
      {
        v251 = sub_100624080(a1, uu);
        if (v324 > 0xCu)
          v252 = v251;
        else
          v252 = 0;
        if (v252 == 1 && v324)
        {
          v253 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003D2DB4(uu, buf);
            v254 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)v328 = 136446210;
            *(_QWORD *)&v328[4] = v254;
            _os_log_impl((void *)&_mh_execute_header, v253, OS_LOG_TYPE_DEFAULT, "Boosting connection interval to iCloud paired device \"%{public}s\"", v328, 0xCu);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          v255 = sub_100030DF4(uu);
          v256 = (void *)objc_claimAutoreleasedReturnValue(v255);
          sub_10061E160(a1, v256, -4, 0);

        }
        if (!*(_BYTE *)(a1 + 1102) && (v197 & 0xFFFF0000) == 0x10000 && (byte_100993F09 || v324 && v324 != 24))
        {
          v257 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
          {
            sub_1003D2DB4(uu, v328);
            v259 = v331 >= 0 ? v328 : *(_BYTE **)v328;
            LOWORD(v258) = v324;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = v259;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = (double)v258 * 1.25;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = byte_100993F09;
            _os_log_impl((void *)&_mh_execute_header, v257, OS_LOG_TYPE_DEFAULT, "Adjusting connection interval to FindMy device \"%{public}s\", current CI is :%fms sendFindMyConnectionUpdateAnyTime:%d", buf, 0x1Cu);
            if (v331 < 0)
              operator delete(*(void **)v328);
          }
          v260 = sub_100030DF4(uu);
          v261 = (void *)objc_claimAutoreleasedReturnValue(v260);
          sub_10061E160(a1, v261, -8, 0);

        }
      }
      if (!*(_BYTE *)(a1 + 624))
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v262 = off_1009778C0;
        v263 = sub_100030DF4(uu);
        v264 = (void *)objc_claimAutoreleasedReturnValue(v263);
        LODWORD(v262) = sub_100658AD4((uint64_t)v262, v264);

        if ((_DWORD)v262)
        {
          v265 = sub_10003BE44();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v265 + 344))(v265))
          {
            sub_10061DCA0(a1, (unint64_t)a4);
          }
          else if ((a3 & 1) == 0)
          {
            if (qword_1009778A8 != -1)
              dispatch_once(&qword_1009778A8, &stru_10093DDC8);
            v266 = off_1009778A0;
            v267 = sub_100030DF4(uu);
            v268 = (void *)objc_claimAutoreleasedReturnValue(v267);
            sub_10061E160((uint64_t)v266, v268, -2, 0);

          }
        }
      }
      if (sub_100620330(a1, uu))
      {
        v269 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003D2DB4(uu, buf);
          v270 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)v328 = 136446210;
          *(_QWORD *)&v328[4] = v270;
          _os_log_impl((void *)&_mh_execute_header, v269, OS_LOG_TYPE_DEFAULT, "Device was already disconnecting, disconnect connected device \"%{public}s\"", v328, 0xCu);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        sub_10006D81C(&v323);
        *(_QWORD *)buf = 0;
        if (sub_100623C54(a1, uu, buf))
          sub_10021F3D0(*(uint64_t *)buf);
        sub_10004339C(&v323);
      }
LABEL_410:
      memset(buf, 0, 56);
      v271 = sub_100030DF4(uu);
      v272 = (void *)objc_claimAutoreleasedReturnValue(v271);
      sub_1006167B8(a1, v272, (uint64_t)buf);

      v273 = sub_100030DF4(uu);
      v274 = objc_claimAutoreleasedReturnValue(v273);
      v275 = *(void **)buf;
      *(_QWORD *)buf = v274;

      *(_QWORD *)&buf[24] = CFAbsoluteTimeGetCurrent();
      buf[49] = 1;
      if (qword_1009778B8 != -1)
        dispatch_once(&qword_1009778B8, &stru_10093DEA8);
      buf[48] = sub_100030864(qword_1009778B0, *(void **)buf);
      buf[50] = a3 ^ 1;
      v276 = objc_opt_new(NSMutableArray);
      v277 = *(void **)&buf[8];
      *(_QWORD *)&buf[8] = v276;

      v278 = sub_100030DF4(uu);
      v279 = (void *)objc_claimAutoreleasedReturnValue(v278);
      v294[0] = *(id *)buf;
      v294[1] = *(id *)&buf[8];
      v295 = *(_OWORD *)&buf[16];
      v296 = *(_OWORD *)&buf[32];
      v297 = *(_QWORD *)&buf[48];
      sub_1006168D8(a1, v279, (uint64_t)v294);

      if ((sub_100620330(a1, uu) & 1) == 0)
        sub_10062B5B4(a1, uu, 1, 0, 1);

      goto LABEL_415;
    }
    if (a3)
    {
      v58 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Cancelling outgoing connection to same device", buf, 2u);
      }
      v59 = sub_10061AF78(a1, 1);
      if (v59 == 1302)
      {
        v60 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v61 = "Failed to cancel the connection because its already connected, waiting for event";
          goto LABEL_136;
        }
LABEL_137:
        sub_10061F784(a1, uu);
        v100 = 0;
LABEL_227:
        v155 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          v156 = sub_100030DF4(uu);
          v157 = (void *)objc_claimAutoreleasedReturnValue(v156);
          v158 = sub_100036064(v100);
          v159 = v157;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v158;
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v159;
          _os_log_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_DEFAULT, "BLE Connection Completed %{public}s %{public}@", buf, 0x16u);

          v155 = qword_100999890;
        }
        if (os_signpost_enabled(v155))
        {
          v160 = sub_100030DF4(uu);
          v161 = (void *)objc_claimAutoreleasedReturnValue(v160);
          v162 = sub_100036064(v100);
          v163 = v161;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = v162;
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v163;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v155, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "BLE Connection Completed %{public}s %{public}@", buf, 0x16u);

        }
        v56 = objc_msgSend(*(id *)(a1 + 744), "count");
        v49 = a3 ^ 1;
        if (v56)
        {
          v164 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 744), "anyObject"));
          objc_msgSend(*(id *)(a1 + 744), "removeObject:", v164);
          v165 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v164;
            _os_log_impl((void *)&_mh_execute_header, v165, OS_LOG_TYPE_DEFAULT, "Moving device \"%{public}@\" off of the overflow list now that there's room", buf, 0xCu);
          }
          v166 = *(_DWORD *)(a1 + 856);
          if (v166 == 4 || v166 == 2)
          {
            v167 = qword_100999890;
            if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
            {
              sub_1003D2DB4(uu, buf);
              v168 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
              *(_DWORD *)v328 = 136446210;
              *(_QWORD *)&v328[4] = v168;
              _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_DEFAULT, "Adding \"%{public}s\" to AddToFilterAcceptList list", v328, 0xCu);
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
            }
            sub_10061F62C(a1, uu);
          }
          else
          {
            sub_10062079C(a1, v164);
          }

        }
        goto LABEL_245;
      }
      if (!v59)
      {
        v60 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v61 = "Canceled pending connection successfuly, waiting for event";
LABEL_136:
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, v61, buf, 2u);
          goto LABEL_137;
        }
        goto LABEL_137;
      }
      v101 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "No pending event.", buf, 2u);
      }
      v102 = sub_100030DF4(uu);
      v103 = (id)objc_claimAutoreleasedReturnValue(v102);
      sub_100629970(a1, v103);
      v100 = 0;
    }
    else
    {
      v86 = sub_100030DF4(uu);
      v87 = (void *)objc_claimAutoreleasedReturnValue(v86);
      sub_100629970(a1, v87);

      v88 = *(_DWORD *)(a1 + 856);
      v89 = qword_100999890;
      v90 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT);
      if (v88 == 1)
      {
        if (v90)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "Successful outgoing connection", buf, 2u);
        }
        sub_10061B638(a1, 0);
      }
      else if (v90)
      {
        if (v88 > 4)
          v99 = "UNKNOWN";
        else
          v99 = off_10093DF48[v88];
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v99;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v88;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "Current state when connection completed is %{public}s(%d), lets wait for the controller.", buf, 0x12u);
      }
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v112 = off_1009778C0;
      v113 = sub_100030DF4(uu);
      v114 = (void *)objc_claimAutoreleasedReturnValue(v113);
      v100 = sub_1006589A8((uint64_t)v112, v114);

      if (qword_10097AC58 != -1)
        dispatch_once(&qword_10097AC58, &stru_10093DE68);
      v115 = sub_1006C00E8(qword_10097AC50, v100);
      v116 = *(const unsigned __int8 **)(a1 + 376);
      if (v116 == (const unsigned __int8 *)(a1 + 384))
      {
        v117 = v292;
      }
      else
      {
        v117 = v292;
        do
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10093DDE8);
          v118 = off_1009778C0;
          v119 = sub_100030DF4(v116 + 32);
          v120 = (void *)objc_claimAutoreleasedReturnValue(v119);
          v121 = sub_1006589A8((uint64_t)v118, v120) == v100;

          v122 = (unsigned __int8 *)*((_QWORD *)v116 + 1);
          if (v122)
          {
            do
            {
              v123 = (const unsigned __int8 **)v122;
              v122 = *(unsigned __int8 **)v122;
            }
            while (v122);
          }
          else
          {
            do
            {
              v123 = (const unsigned __int8 **)*((_QWORD *)v116 + 2);
              v28 = *v123 == v116;
              v116 = (const unsigned __int8 *)v123;
            }
            while (!v28);
          }
          v117 += v121;
          v116 = (const unsigned __int8 *)v123;
        }
        while (v123 != (const unsigned __int8 **)(a1 + 384));
      }
      v124 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v100;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v115;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = v117;
        _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_DEFAULT, "deviceUseCase:%d maxUseCaseConnections:%d currentlyConnectedForUseCase:%d", buf, 0x14u);
      }
      if (v115 > v117)
        goto LABEL_227;
      v287 = objc_alloc_init((Class)NSMutableArray);
      v125 = *(const unsigned __int8 **)(a1 + 328);
      if (v125 != (const unsigned __int8 *)(a1 + 336))
      {
        do
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10093DDE8);
          v126 = off_1009778C0;
          v127 = sub_100030DF4(v125 + 25);
          v128 = (void *)objc_claimAutoreleasedReturnValue(v127);
          LODWORD(v126) = sub_1006589A8((uint64_t)v126, v128) == v100;

          if ((_DWORD)v126)
          {
            v129 = sub_100030DF4(v125 + 25);
            v130 = (void *)objc_claimAutoreleasedReturnValue(v129);
            objc_msgSend(v287, "addObject:", v130);

          }
          v131 = (unsigned __int8 *)*((_QWORD *)v125 + 1);
          if (v131)
          {
            do
            {
              v132 = (const unsigned __int8 **)v131;
              v131 = *(unsigned __int8 **)v131;
            }
            while (v131);
          }
          else
          {
            do
            {
              v132 = (const unsigned __int8 **)*((_QWORD *)v125 + 2);
              v28 = *v132 == v125;
              v125 = (const unsigned __int8 *)v132;
            }
            while (!v28);
          }
          v125 = (const unsigned __int8 *)v132;
        }
        while (v132 != (const unsigned __int8 **)(a1 + 336));
      }
      v133 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v287;
        _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_DEFAULT, "devicesToDisconnect from fConnectingDevices: %{public}@", buf, 0xCu);
      }
      v286 = v11;
      v318 = 0u;
      v319 = 0u;
      v316 = 0u;
      v317 = 0u;
      v134 = v287;
      v135 = objc_msgSend(v134, "countByEnumeratingWithState:objects:count:", &v316, v338, 16);
      if (v135)
      {
        v136 = *(_QWORD *)v317;
        do
        {
          for (i = 0; i != v135; i = (char *)i + 1)
          {
            if (*(_QWORD *)v317 != v136)
              objc_enumerationMutation(v134);
            v138 = *(_QWORD *)(*((_QWORD *)&v316 + 1) + 8 * (_QWORD)i);
            if (*(_DWORD *)(a1 + 856))
              sub_10061F784(a1, uu);
            else
              sub_100629970(a1, *(void **)(*((_QWORD *)&v316 + 1) + 8 * (_QWORD)i));
            v315[0] = _NSConcreteStackBlock;
            v315[1] = 3221225472;
            v315[2] = sub_100630354;
            v315[3] = &unk_10093D828;
            v315[4] = v138;
            sub_1006169D0((os_unfair_lock_s *)a1, v315);
          }
          v135 = objc_msgSend(v134, "countByEnumeratingWithState:objects:count:", &v316, v338, 16);
        }
        while (v135);
      }

      objc_msgSend(v134, "removeAllObjects");
      v313 = 0u;
      v314 = 0u;
      v311 = 0u;
      v312 = 0u;
      v139 = *(id *)(a1 + 744);
      v140 = objc_msgSend(v139, "countByEnumeratingWithState:objects:count:", &v311, v337, 16);
      if (v140)
      {
        v141 = *(_QWORD *)v312;
        do
        {
          v142 = 0;
          do
          {
            if (*(_QWORD *)v312 != v141)
              objc_enumerationMutation(v139);
            v143 = *(void **)(*((_QWORD *)&v311 + 1) + 8 * (_QWORD)v142);
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093DDE8);
            if (sub_1006589A8((uint64_t)off_1009778C0, v143) == v100)
              objc_msgSend(v134, "addObject:", v143);
            v142 = (char *)v142 + 1;
          }
          while (v140 != v142);
          v140 = objc_msgSend(v139, "countByEnumeratingWithState:objects:count:", &v311, v337, 16);
        }
        while (v140);
      }

      v144 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v134;
        _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_DEFAULT, "devicesToDisconnect from fConnectingOverflowDevices: %{public}@", buf, 0xCu);
      }
      v309 = 0u;
      v310 = 0u;
      v307 = 0u;
      v308 = 0u;
      v145 = *(id *)(a1 + 752);
      v146 = objc_msgSend(v145, "countByEnumeratingWithState:objects:count:", &v307, v336, 16);
      if (v146)
      {
        v147 = *(_QWORD *)v308;
        do
        {
          v148 = 0;
          do
          {
            if (*(_QWORD *)v308 != v147)
              objc_enumerationMutation(v145);
            v149 = *(void **)(*((_QWORD *)&v307 + 1) + 8 * (_QWORD)v148);
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093DDE8);
            if (sub_1006589A8((uint64_t)off_1009778C0, v149) == v100)
              objc_msgSend(v134, "addObject:", v149);
            v148 = (char *)v148 + 1;
          }
          while (v146 != v148);
          v146 = objc_msgSend(v145, "countByEnumeratingWithState:objects:count:", &v307, v336, 16);
        }
        while (v146);
      }

      v150 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v134;
        _os_log_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: devicesToDisconnect from fDevicesBlockedFromOutgoingConnections: %{public}@", buf, 0xCu);
      }
      v305 = 0u;
      v306 = 0u;
      v303 = 0u;
      v304 = 0u;
      v103 = v134;
      v151 = objc_msgSend(v103, "countByEnumeratingWithState:objects:count:", &v303, v335, 16);
      if (v151)
      {
        v152 = *(_QWORD *)v304;
        do
        {
          for (j = 0; j != v151; j = (char *)j + 1)
          {
            if (*(_QWORD *)v304 != v152)
              objc_enumerationMutation(v103);
            v154 = *(_QWORD *)(*((_QWORD *)&v303 + 1) + 8 * (_QWORD)j);
            objc_msgSend(*(id *)(a1 + 744), "removeObject:", v154);
            objc_msgSend(*(id *)(a1 + 752), "removeObject:", v154);
            v302[0] = _NSConcreteStackBlock;
            v302[1] = 3221225472;
            v302[2] = sub_100630370;
            v302[3] = &unk_10093D828;
            v302[4] = v154;
            sub_1006169D0((os_unfair_lock_s *)a1, v302);
          }
          v151 = objc_msgSend(v103, "countByEnumeratingWithState:objects:count:", &v303, v335, 16);
        }
        while (v151);
      }

      v11 = v286;
    }

    goto LABEL_227;
  }
  v15 = qword_100999890;
  if (a5 != 702 && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a5;
    _os_log_fault_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Unexpected connection complete result (%{bluetooth:OI_STATUS}u) after cancellation!", buf, 8u);
    v15 = qword_100999890;
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Received connection complete event after successful cancellation. Parsing pending operations and processing pending connections", buf, 2u);
  }
  if (byte_100993F08)
  {
    v16 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v17 = "Warning: Ignoring connection complete after succesful cancellation for debug only";
LABEL_21:
      v18 = buf;
      v19 = v16;
      v20 = 2;
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v17, v18, v20);
      goto LABEL_423;
    }
    goto LABEL_423;
  }
  if (*(_DWORD *)(a1 + 920) == 1)
  {
    v21 = *(const unsigned __int8 **)(a1 + 328);
    v22 = (const unsigned __int8 **)(a1 + 336);
    if (v21 != (const unsigned __int8 *)(a1 + 336))
    {
      do
      {
        v23 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          v24 = sub_100030DF4(v21 + 25);
          v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v25;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Moving %{public}@ out of the filter accept list and into the pending list", buf, 0xCu);

        }
        sub_10061F62C(a1, v21 + 25);
        v26 = (unsigned __int8 *)*((_QWORD *)v21 + 1);
        if (v26)
        {
          do
          {
            v27 = (const unsigned __int8 **)v26;
            v26 = *(unsigned __int8 **)v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v27 = (const unsigned __int8 **)*((_QWORD *)v21 + 2);
            v28 = *v27 == v21;
            v21 = (const unsigned __int8 *)v27;
          }
          while (!v28);
        }
        v21 = (const unsigned __int8 *)v27;
      }
      while (v27 != v22);
    }
    sub_10001A82C(a1 + 328, *(_QWORD **)(a1 + 336));
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    *(_QWORD *)(a1 + 328) = v22;
    v29 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "calling LE_ClearFilterAcceptList", buf, 2u);
    }
    sub_10001A82C(a1 + 600, *(_QWORD **)(a1 + 608));
    *(_QWORD *)(a1 + 600) = a1 + 608;
    *(_QWORD *)(a1 + 616) = 0;
    *(_QWORD *)(a1 + 608) = 0;
    v328[0] = 0;
    v30 = sub_100043758(v328);
    v38 = sub_10023A440((uint64_t)v30, v31, v32, v33, v34, v35, v36, v37);
    v39 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v38;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "LE_ClearFilterAcceptList returned %d", buf, 8u);
    }
    sub_10001A82C(a1 + 352, *(_QWORD **)(a1 + 360));
    *(_QWORD *)(a1 + 360) = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_QWORD *)(a1 + 352) = a1 + 360;
    sub_100043728(v328);
  }
  v40 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Connection complete after successful connection cancelation", buf, 2u);
  }
  sub_10061B638(a1, 0);
  if (*(_BYTE *)(a1 + 1059))
  {
    v41 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Stack is shutting down, we're done here.", buf, 2u);
    }
    *(_BYTE *)(a1 + 1056) = 0;
    sub_1002A9188((pthread_cond_t *)(a1 + 1008));
    goto LABEL_423;
  }
  v43 = *(_DWORD *)(a1 + 920);
  if (!v43)
  {
    sub_10062A4A8((id *)a1);
    sub_100628CA8(a1);
    goto LABEL_423;
  }
  v44 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    if (v43 > 3)
      v45 = "UNKNOWN";
    else
      v45 = off_10093DF70[v43 - 1];
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v45;
    v17 = "Not updating connection list, current LE Connection Manager State is %{public}s";
    v18 = buf;
LABEL_426:
    v19 = v44;
    v20 = 12;
    goto LABEL_22;
  }
LABEL_423:
  sub_100043728(&v323);
  return sub_100034234((uint64_t)v325);
}

void sub_10062FF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;

  sub_100043728(&a72);
  sub_100034234((uint64_t)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void sub_100630228(id a1)
{
  uint64_t v1;
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  v1 = sub_100027F68();
  sub_100091AE8(v5, "LE");
  sub_100091AE8(__p, "IgnoreControllerConnectionCompleteOnCancel");
  (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v1 + 72))(v1, v5, __p, &byte_100993F08);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  v2 = sub_100027F68();
  sub_100091AE8(v5, "LE");
  sub_100091AE8(__p, "sendFindMyConnectionUpdateAnyTime");
  (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v2 + 72))(v2, v5, __p, &byte_100993F09);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_100630318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100630354(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, uint64_t))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32), 336);
}

uint64_t sub_100630370(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, uint64_t))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32), 336);
}

uint64_t sub_10063038C(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  unsigned int v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v5 = a3;
  v6 = v5;
  if (a2 == 131075)
  {
    v7 = *(unsigned __int16 *)(a1 + 1374);
    if (!v5)
      goto LABEL_20;
  }
  else
  {
    v7 = 0;
    if (!v5)
      goto LABEL_20;
  }
  if (objc_msgSend(v5, "count"))
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v8 = v6;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v15;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v15 != v10)
            objc_enumerationMutation(v8);
          if (objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i), "longLongValue", (_QWORD)v14) == 131075)v12 = *(unsigned __int16 *)(a1 + 1374);
          else
            v12 = 0;
          if (v12 <= (unsigned __int16)v7)
            v7 = (unsigned __int16)v7;
          else
            v7 = v12;
        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v9);
    }

  }
LABEL_20:

  return v7;
}

void sub_1006304EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100630518(uint64_t a1, int a2)
{
  int v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  const unsigned __int8 *v8;
  id v9;
  void *v10;
  BOOL v11;
  void *v12;
  id v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  const unsigned __int8 **v19;
  BOOL v20;
  int v21;
  NSObject *v22;
  const char *v23;
  _QWORD v25[2];
  _BYTE buf[24];

  v25[0] = 0;
  v25[1] = 0;
  sub_10003415C((uint64_t)v25, a1 + 120);
  v4 = *(_DWORD *)(a1 + 856);
  if (v4 == 2)
  {
LABEL_2:
    v5 = qword_100999890;
    if (a2)
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_1007136E4();
      if (a2 == 758)
      {
        sub_10061B638(a1, 4u);
      }
      else if (a2 == 621)
      {
        v6 = sub_100027F68();
        sub_100576500(v6, 1);
      }
      v21 = *(_DWORD *)(a1 + 920);
      if (v21 == 1)
      {
        sub_10061B638(a1, 0);
      }
      else if (v21)
      {
        v22 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          v23 = "UNKNOWN";
          if (v21 == 2)
            v23 = "Paused";
          if (v21 == 3)
            v23 = "Resuming";
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "handleConnectionCancelledCallback skipping processConnectingDevices, current Le Connection Manager state is %{public}s", buf, 0xCu);
        }
      }
      else
      {
        sub_10061B638(a1, 0);
        sub_10062A4A8((id *)a1);
        sub_100628CA8(a1);
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Pending connection(s) canceled successfully", buf, 2u);
      }
      sub_10061B638(a1, 3u);
      if (*(_BYTE *)(a1 + 1110))
      {
        v8 = *(const unsigned __int8 **)(a1 + 328);
        if (v8 != (const unsigned __int8 *)(a1 + 336))
        {
          do
          {
            v9 = sub_100030DF4(v8 + 25);
            v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
            v11 = sub_100618278(a1, v10) == 0;

            if (!v11)
            {
              if (qword_1009778C8 != -1)
                dispatch_once(&qword_1009778C8, &stru_10093DDE8);
              v12 = off_1009778C0;
              v13 = sub_100030DF4(v8 + 25);
              v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
              v15 = sub_1000589DC((uint64_t)v12, v14, 0);

              *(_DWORD *)&buf[3] = 0;
              *(_DWORD *)buf = 0;
              v16 = sub_1000746A4(v15);
              *(_DWORD *)buf = v16;
              buf[6] = BYTE6(v16);
              *(_WORD *)&buf[4] = WORD2(v16);
              v17 = sub_1000438A4();
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v17 + 1808))(v17, buf);
            }
            v18 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
            if (v18)
            {
              do
              {
                v19 = (const unsigned __int8 **)v18;
                v18 = *(unsigned __int8 **)v18;
              }
              while (v18);
            }
            else
            {
              do
              {
                v19 = (const unsigned __int8 **)*((_QWORD *)v8 + 2);
                v20 = *v19 == v8;
                v8 = (const unsigned __int8 *)v19;
              }
              while (!v20);
            }
            v8 = (const unsigned __int8 *)v19;
          }
          while (v19 != (const unsigned __int8 **)(a1 + 336));
        }
      }
    }
    return sub_100034234((uint64_t)v25);
  }
  v7 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v4;
    _os_log_fault_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Received cancel callback outside of cancel state (%d)", buf, 8u);
    if (*(_DWORD *)(a1 + 856) == 2)
      goto LABEL_2;
    v7 = qword_100999890;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    sub_10071374C();
  return sub_100034234((uint64_t)v25);
}

void sub_100630894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1006308D4(uint64_t a1, void *a2, unsigned int a3, int a4, double a5)
{
  id v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _BOOL4 v16;
  _BOOL4 v17;
  double v18;
  double v19;
  double v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  void *v24;
  double v25;
  double v26;
  double v27;
  int v28;
  int v31;
  NSObject *v32;
  id v33;
  const char *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  NSObject *v42;
  const char *v43;
  const char *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  id v49;
  const char *v50;
  const char *v51;
  const char *v52;
  const char *v53;
  const char *v54;
  const char *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  NSString *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  NSObject *v75;
  uint64_t v76;
  void *v77;
  _BOOL4 v78;
  void *v79;
  id v80;
  unsigned int v81;
  id v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  int v86;
  unsigned int v87;
  uint8_t buf[4];
  double v89;
  __int16 v90;
  _BYTE v91[10];
  _BYTE v92[10];
  _BYTE v93[10];
  _BYTE v94[10];
  _BYTE v95[20];
  __int16 v96;
  const char *v97;

  v9 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v10 = sub_100656DF8((uint64_t)off_1009778C0, v9);
  if (v10 != 0.0)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    v11 = sub_100656FA0((uint64_t)off_1009778C0, v9);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    v12 = sub_1006570B8((uint64_t)off_1009778C0, v9);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    v13 = sub_1006571D0((uint64_t)off_1009778C0, v9);
    if (v10 < a5 && v10 > 0.0)
      v14 = a5 - v10;
    else
      v14 = 0.0;
    if (v10 > 0.0 && v11 > v10)
      v15 = v11 - v10;
    else
      v15 = 0.0;
    v16 = v13 > v12;
    v17 = v12 > 0.0;
    v18 = v13 - v12;
    if (v17 && v16)
      v19 = v18;
    else
      v19 = 0.0;
    if (v12 < a5 && v17)
      v20 = a5 - v12;
    else
      v20 = 0.0;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    v21 = sub_1006572E8((uint64_t)off_1009778C0, v9);
    v80 = objc_alloc_init((Class)NSDateFormatter);
    objc_msgSend(v80, "setDateFormat:", CFSTR("yyyy-MM-dd H:mm:ss"));
    v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v10));
    v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(v80, "stringFromDate:"));
    v23 = &unk_100738000;
    LODWORD(v23) = llround((v10 - floor(v10)) * 1000.0);
    v79 = (void *)v22;
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%000d"), v22, v23));
    v25 = 0.0;
    v26 = (double)v21;
    v27 = 0.0;
    if (v19 > 0.0)
      v27 = v26 / v19;
    if (v20 > 0.0)
      v25 = v26 / v20;
    v84 = a1;
    v28 = *(unsigned __int8 *)(a1 + 1371);
    if (a4 != 196608 && a4 != 19 || v28 == 0)
      v31 = 0;
    else
      v31 = 75;
    v81 = v31;
    v32 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ DigitalID Transaction -------------------", buf, 2u);
      v32 = qword_100999890;
    }
    v87 = a3;
    v82 = v24;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      v33 = objc_msgSend(objc_retainAutorelease(v24), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v89 = *(double *)&v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Start: %{public}s", buf, 0xCu);
      v32 = qword_100999890;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v89 = v14;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Connection Duration: %.3f (secs)", buf, 0xCu);
      v32 = qword_100999890;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v89 = v15;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Connection Set-up Duration: %.3f (secs)", buf, 0xCu);
      v32 = qword_100999890;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v89 = v19;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Data Transfer Duration: %.3f (secs)", buf, 0xCu);
      v32 = qword_100999890;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v89 = v20;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Presentment Data Transfer Duration: %.3f (secs)", buf, 0xCu);
      v32 = qword_100999890;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v89) = v21;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Data Bytes: %d", buf, 8u);
      v32 = qword_100999890;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      v89 = v27;
      v90 = 2048;
      *(double *)v91 = v27 * 8.0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Data Transfer Throughput: %.3f (bytes/sec) %.3f (bits/sec)", buf, 0x16u);
      v32 = qword_100999890;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      v89 = v25;
      v90 = 2048;
      *(double *)v91 = v25 * 8.0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Presentment Data Transfer Throughput: %.3f (bytes/sec) %.3f (bits/sec)", buf, 0x16u);
      v32 = qword_100999890;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v89) = a3;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Disconnection Reason: %d", buf, 8u);
      v32 = qword_100999890;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      v34 = "Yes";
      if (!v28)
        v34 = "No";
      *(_DWORD *)buf = 136315138;
      v89 = *(double *)&v34;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Is Connection Prioritization Supported: %s", buf, 0xCu);
      v32 = qword_100999890;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v89) = v81;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Prioritized Connection Intervals Percent: %d", buf, 8u);
    }
    v83 = v21;
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_10093DE28);
    v35 = *((_DWORD *)off_100977B38 + 39);
    v36 = *((_DWORD *)off_100977B38 + 40);
    v37 = *((unsigned __int8 *)off_100977B38 + 196);
    v38 = *((unsigned __int8 *)off_100977B38 + 197);
    v86 = *((unsigned __int8 *)off_100977B38 + 198);
    v39 = *((unsigned __int8 *)off_100977B38 + 199);
    v85 = *((unsigned __int8 *)off_100977B38 + 204);
    v40 = sub_100016B48();
    v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 120))(v40);
    if (v39)
      v78 = *(_BYTE *)(a1 + 1371) != 0;
    else
      v78 = 0;
    v42 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: ---------- DigitalID Concurrent Usages Statistics ----------", buf, 2u);
      v42 = qword_100999890;
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v89) = v35;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Num Classic Connections: %d", buf, 8u);
      v42 = qword_100999890;
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v89) = v36;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Num LE Connections: %d", buf, 8u);
      v42 = qword_100999890;
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      v43 = "No";
      if (v37)
        v43 = "Yes";
      *(_DWORD *)buf = 136446210;
      v89 = *(double *)&v43;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Watch Connected: %{public}s", buf, 0xCu);
      v42 = qword_100999890;
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      v44 = "No";
      if (v38)
        v44 = "Yes";
      *(_DWORD *)buf = 136446210;
      v89 = *(double *)&v44;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - A2DP Streaming: %{public}s", buf, 0xCu);
      v42 = qword_100999890;
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      v45 = "No";
      if (v86)
        v45 = "Yes";
      *(_DWORD *)buf = 136446210;
      v89 = *(double *)&v45;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - HFP Streaming: %{public}s", buf, 0xCu);
      v42 = qword_100999890;
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      v46 = "No";
      if (v39)
        v46 = "Yes";
      *(_DWORD *)buf = 136446210;
      v89 = *(double *)&v46;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - LEA Streaming: %{public}s", buf, 0xCu);
      v42 = qword_100999890;
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      v47 = "No";
      if (v85)
        v47 = "Yes";
      *(_DWORD *)buf = 136446210;
      v89 = *(double *)&v47;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - ISO Pipe Streaming: %{public}s", buf, 0xCu);
      v42 = qword_100999890;
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      v48 = "No";
      if (v41)
        v48 = "Yes";
      *(_DWORD *)buf = 136446210;
      v89 = *(double *)&v48;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - WiFi on 2.4GHz: %{public}s", buf, 0xCu);
      v42 = qword_100999890;
    }
    if (os_signpost_enabled(v42))
    {
      v49 = objc_msgSend(objc_retainAutorelease(v82), "UTF8String");
      *(_DWORD *)buf = 138545154;
      v89 = *(double *)&v9;
      v90 = 2082;
      *(_QWORD *)v91 = v49;
      *(_WORD *)&v91[8] = 2048;
      *(double *)v92 = v14;
      *(_WORD *)&v92[8] = 2048;
      *(double *)v93 = v15;
      *(_WORD *)&v93[8] = 2048;
      *(double *)v94 = v19;
      *(_WORD *)&v94[8] = 1024;
      *(_DWORD *)v95 = v83;
      *(_WORD *)&v95[4] = 2048;
      *(double *)&v95[6] = v27;
      *(_WORD *)&v95[14] = 1024;
      *(_DWORD *)&v95[16] = v87;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "BLE DigitalID Stat for %{public}@ start %{public}s duration total %.3f set-up %.3f data_transfer %.3f bytes %d throughput %.3f (bytes/sec) disconnect_reason %d", buf, 0x4Au);
      v42 = qword_100999890;
    }
    if (os_signpost_enabled(v42))
    {
      v50 = "No";
      *(_DWORD *)buf = 138545410;
      v89 = *(double *)&v9;
      v90 = 1024;
      if (v37)
        v51 = "Yes";
      else
        v51 = "No";
      *(_DWORD *)v91 = v35;
      if (v38)
        v52 = "Yes";
      else
        v52 = "No";
      *(_WORD *)&v91[4] = 1024;
      if (v86)
        v53 = "Yes";
      else
        v53 = "No";
      *(_DWORD *)&v91[6] = v36;
      if (v39)
        v54 = "Yes";
      else
        v54 = "No";
      *(_WORD *)v92 = 2082;
      if (v85)
        v55 = "Yes";
      else
        v55 = "No";
      *(_QWORD *)&v92[2] = v51;
      if (v41)
        v50 = "Yes";
      *(_WORD *)v93 = 2082;
      *(_QWORD *)&v93[2] = v52;
      *(_WORD *)v94 = 2082;
      *(_QWORD *)&v94[2] = v53;
      *(_WORD *)v95 = 2082;
      *(_QWORD *)&v95[2] = v54;
      *(_WORD *)&v95[10] = 2082;
      *(_QWORD *)&v95[12] = v55;
      v96 = 2082;
      v97 = v50;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "BLE DigitalID Condition for %{public}@ Classic %d LE %d Watch %{public}s A2DP %{public}s HFP %{public}s LEA %{public}s ISO %{public}s WiFi 2.4GHz %{public}s", buf, 0x54u);
    }
    v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v14));
    objc_msgSend(v56, "setObject:forKeyedSubscript:", v57, CFSTR("ConnectionDurationInSec"));

    v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v15));
    objc_msgSend(v56, "setObject:forKeyedSubscript:", v58, CFSTR("ConnectionSetupDurationInSec"));

    v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v19));
    objc_msgSend(v56, "setObject:forKeyedSubscript:", v59, CFSTR("DataTransferDurationInSec"));

    v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v83));
    objc_msgSend(v56, "setObject:forKeyedSubscript:", v60, CFSTR("DataBytes"));

    v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v27));
    objc_msgSend(v56, "setObject:forKeyedSubscript:", v61, CFSTR("ThroughputBytesPerSec"));

    v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v87));
    objc_msgSend(v56, "setObject:forKeyedSubscript:", v62, CFSTR("DisconnectionReason"));

    v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v37 != 0));
    objc_msgSend(v56, "setObject:forKeyedSubscript:", v63, CFSTR("IsWatchConnected"));

    v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v38 != 0));
    objc_msgSend(v56, "setObject:forKeyedSubscript:", v64, CFSTR("IsA2DPSessionActive"));

    v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v86 != 0));
    objc_msgSend(v56, "setObject:forKeyedSubscript:", v65, CFSTR("IsHFPSessionActive"));

    v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v39 != 0));
    objc_msgSend(v56, "setObject:forKeyedSubscript:", v66, CFSTR("IsLEASessionActive"));

    v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v85 != 0));
    objc_msgSend(v56, "setObject:forKeyedSubscript:", v67, CFSTR("IsISOPipeStreamingActive"));

    v68 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sub_100036064(a4));
    v69 = (void *)objc_claimAutoreleasedReturnValue(v68);
    objc_msgSend(v56, "setObject:forKeyedSubscript:", v69, CFSTR("UseCase"));

    v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v84 + 1371)));
    objc_msgSend(v56, "setObject:forKeyedSubscript:", v70, CFSTR("IsConnPrioritizationSupported"));

    v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v81));
    objc_msgSend(v56, "setObject:forKeyedSubscript:", v71, CFSTR("PrioritizedConnIntervalsPercentage"));

    v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v78));
    objc_msgSend(v56, "setObject:forKeyedSubscript:", v72, CFSTR("ProtectLEA"));

    v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v20));
    objc_msgSend(v56, "setObject:forKeyedSubscript:", v73, CFSTR("PresentmentDuration"));

    v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v25));
    objc_msgSend(v56, "setObject:forKeyedSubscript:", v74, CFSTR("PresentmentThroughputBytesPerSec"));

    v75 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v89 = *(double *)&v56;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "Sending DigitalIDMetric :%{public}@", buf, 0xCu);
    }
    v76 = sub_100065478();
    (*(void (**)(uint64_t, void *))(*(_QWORD *)v76 + 288))(v76, v56);

  }
}

void sub_100631864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1006319B8(uint64_t a1, void *a2)
{
  id v2;

  v2 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  sub_100657148((uint64_t)off_1009778C0, v2, 0.0);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  sub_100657260((uint64_t)off_1009778C0, v2, 0.0);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  sub_100657370((uint64_t)off_1009778C0, v2, 0);

}

void sub_100631A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100631A9C(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  id v7;
  _BOOL8 v8;
  double v9;
  double v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSNumber *v18;
  void *v19;
  id v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t *v24;
  uint8_t buf[4];
  void *v26;

  v7 = a2;
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10093DEA8);
  v8 = sub_100030864(qword_1009778B0, v7);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v9 = sub_100656DF8((uint64_t)off_1009778C0, v7);
  v10 = 0.0;
  if (CFAbsoluteTimeGetCurrent() > v9)
    v10 = CFAbsoluteTimeGetCurrent() - v9;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v11 = sub_10065B41C((uint64_t)off_1009778C0, v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v8));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v13, CFSTR("Paired"));

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v10));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v14, CFSTR("DurationInSeconds"));

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a4));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v15, CFSTR("DisconnectReasonCode"));

  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a3 == 0));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v16, CFSTR("Initiator"));

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](NSNumber, "numberWithShort:", v11));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v17, CFSTR("ConnectionEstablishedRSSI"));

  sub_100030BCC(buf, v7);
  v24 = buf;
  v18 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *((unsigned __int16 *)sub_100647D50((uint64_t **)(a1 + 472), buf, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v24)+ 21));
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v19, CFSTR("PreviousConnectRetries"));

  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v20 = sub_10065C1E4((uint64_t)off_1009778C0, v7);
  v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v21, CFSTR("UseCase"));

  v22 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v26 = v12;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Sending LeConnectRetry metric :%{public}@", buf, 0xCu);
  }
  v23 = sub_100065478();
  (*(void (**)(uint64_t, void *))(*(_QWORD *)v23 + 280))(v23, v12);

}

void sub_100631DFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100631E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  id v20;
  void *v21;
  const char *v22;
  const char *v23;
  _QWORD v25[2];
  uint8_t buf[8];
  _WORD v27[6];
  const char *v28;
  _WORD v29[6];
  int v30;
  __int16 v31;
  int v32;
  uuid_t uu;

  v16 = sub_100065478();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 560))(v16, a3, a4);
  v17 = sub_100065478();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 536))(v17, a3, a4);
  if (qword_100977FD0 != -1)
    dispatch_once(&qword_100977FD0, &stru_10093DE48);
  sub_10039E9C8(qword_100977FC8, a4);
  v25[0] = 0;
  v25[1] = 0;
  sub_10003415C((uint64_t)v25, a1 + 120);
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  v18 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v19 = sub_100021770(a2);
    v20 = (id)objc_claimAutoreleasedReturnValue(v19);
    v21 = v20;
    *(_DWORD *)buf = 67110402;
    v22 = "Peripheral";
    *(_DWORD *)&buf[4] = a6;
    v27[0] = 2114;
    if (!a5)
      v22 = "Central";
    *(_QWORD *)&v27[1] = v20;
    v27[5] = 2082;
    v28 = v22;
    v23 = "Yes";
    v29[0] = 2082;
    if (!a7)
      v23 = "No";
    *(_QWORD *)&v29[1] = v23;
    v29[5] = 1024;
    v30 = a8;
    v31 = 1024;
    v32 = a9;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "LE ConnManager disconnection complete reason %d address=%{public}@ localRole=%{public}s wakeUp=%{public}s encrypted:%d timeOffsetInMs:%d", buf, 0x32u);

  }
  sub_1000419F4();
  operator new();
}

void sub_100633B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  void *v24;

  sub_100034234((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_100633E00(uint64_t a1, void *a2, int a3, char a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  int v13;
  char v14;

  v7 = a2;
  v8 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 2768))(v8))
  {
    v9 = sub_1000419F4();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100641E3C;
    v10[3] = &unk_1009197C8;
    v12 = a1;
    v11 = v7;
    v14 = a4;
    v13 = a3;
    sub_100041A34(v9, v10);

  }
}

void sub_100633EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_100633ED8(uint64_t a1, void *a2, int a3, char a4)
{
  id v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;
  int v12;
  char v13;

  v7 = a2;
  if (a3 == 4833 && _os_feature_enabled_impl("BluetoothFeatures", "OutgoingLeConnectionDenyList"))
  {
    v8 = sub_1000419F4();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100642DB4;
    v9[3] = &unk_1009197C8;
    v11 = a1;
    v10 = v7;
    v13 = a4;
    v12 = 4833;
    sub_100041A34(v8, v9);

  }
}

void sub_100633F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_100633FBC(uint64_t a1)
{
  double Current;
  unsigned int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;

  Current = CFAbsoluteTimeGetCurrent();
  *(double *)(a1 + 1168) = Current;
  if (Current + -172800.0 <= 0.0)
  {
    v4 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100713C64(v4, Current, Current + -172800.0, v5, v6);
  }
  else
  {
    v3 = *(unsigned __int16 *)(a1 + 1160);
    sub_10063DD9C(a1, Current + -172800.0);
    if (v3 > 0x20)
    {
      sub_10063E1B4(a1);
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
        sub_100713BF8();
    }
    else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
    {
      sub_100713B94();
    }
  }
}

void sub_1006340B4(uint64_t a1, char *a2, int a3, double a4)
{
  NSObject *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  double *v13;
  uint8_t *v14;
  double *v15;
  uint64_t v16;
  char *v17;
  uint8_t buf[24];

  v8 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v9 = a2;
    if (a2[23] < 0)
      v9 = *(char **)a2;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = (int)a4;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "upsertDisconnectionHistoryElement %{public}s time %d reason %d", buf, 0x18u);
  }
  v10 = sub_10001F2AC(a1 + 1144, (const void **)a2);
  if (a1 + 1152 == v10)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
      sub_100713CDC();
    if (*(_QWORD *)(a1 + 1160) >= 0x21uLL)
      sub_100633FBC(a1);
    *(_QWORD *)buf = buf;
    *(_OWORD *)&buf[8] = (unint64_t)buf;
    v13 = (double *)operator new(0x20uLL);
    v13[2] = a4;
    *((_DWORD *)v13 + 6) = a3;
    *((_DWORD *)v13 + 7) = 0;
    *(_QWORD *)v13 = buf;
    *((_QWORD *)v13 + 1) = buf;
    *(_QWORD *)buf = v13;
    *(_QWORD *)&buf[8] = v13;
    *(_QWORD *)&buf[16] = 1;
    v17 = a2;
    v14 = (uint8_t *)(sub_10064816C((uint64_t **)(a1 + 1144), (const void **)a2, (uint64_t)&unk_100740F58, (__int128 **)&v17)+ 56);
    if (v14 != buf)
      goto LABEL_23;
  }
  else
  {
    memset(buf, 0, sizeof(buf));
    sub_1006480D4(buf, v10 + 56);
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
      sub_100713DA4();
    if (*(_QWORD *)&buf[16] >= 0x60uLL)
    {
      if (*(_WORD *)&buf[16] == 95)
      {
        v12 = *(uint64_t **)&buf[8];
      }
      else
      {
        v11 = (unsigned __int16)(*(_WORD *)&buf[16] - 95) + 1;
        v12 = *(uint64_t **)&buf[8];
        do
        {
          v12 = (uint64_t *)v12[1];
          --v11;
        }
        while (v11 > 1);
      }
      sub_10047BFCC((uint64_t)buf, *(uint64_t **)&buf[8], v12);
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
        sub_100713D44();
    }
    v15 = (double *)operator new(0x20uLL);
    v15[2] = a4;
    *((_DWORD *)v15 + 6) = a3;
    *((_DWORD *)v15 + 7) = 0;
    v16 = *(_QWORD *)buf;
    *v15 = *(double *)buf;
    *((_QWORD *)v15 + 1) = buf;
    *(_QWORD *)(v16 + 8) = v15;
    v17 = a2;
    *(_QWORD *)buf = v15;
    ++*(_QWORD *)&buf[16];
    v14 = (uint8_t *)(sub_10064816C((uint64_t **)(a1 + 1144), (const void **)a2, (uint64_t)&unk_100740F58, (__int128 **)&v17)+ 56);
    if (v14 != buf)
LABEL_23:
      sub_10064832C((uint64_t *)v14, *(uint64_t *)&buf[8], (uint64_t)buf);
  }
  sub_10002074C(buf);
  sub_10063D054((_QWORD *)a1);
}

void sub_10063436C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10002074C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100634390(uint64_t a1, void *a2, int a3)
{
  uint64_t *v5;
  _UNKNOWN **v6;
  double v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  _BOOL8 v13;
  _BOOL8 v14;
  double Current;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  NSNumber *v23;
  void *v24;
  const __CFString *v25;
  void *v26;
  NSNumber *v27;
  void *v28;
  void *v29;
  void *v30;
  NSNumber *v31;
  void *v32;
  id v33;
  uint64_t v34;
  void *i;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int16 v45;
  uint8_t *v46;
  uint8_t v47[128];
  uint8_t buf[4];
  void *v49;

  v39 = a2;
  sub_100030BCC(buf, v39);
  if (a1 + 1544 != sub_10000C5B8(a1 + 1536, buf))
  {
    sub_100030BCC(buf, v39);
    v46 = buf;
    v5 = sub_100648B94((uint64_t **)(a1 + 1536), buf, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v46);
    v40 = (id)v5[6];
    v6 = (_UNKNOWN **)(id)v5[7];
    v7 = *((double *)v5 + 9);
    v8 = *((unsigned __int8 *)v5 + 80);
    v9 = v5[11];
    v10 = *((unsigned __int8 *)v5 + 97);
    v11 = *((unsigned __int8 *)v5 + 98);
    v12 = *((unsigned int *)v5 + 25);
    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_10093DEA8);
    v13 = sub_100030864(qword_1009778B0, v40);
    if (v10)
    {
      v14 = v13;
      Current = CFAbsoluteTimeGetCurrent();
      v16 = v12;
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v14));
      objc_msgSend(v17, "setObject:forKeyedSubscript:", v18, CFSTR("Paired"));

      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", Current - v7));
      objc_msgSend(v17, "setObject:forKeyedSubscript:", v19, CFSTR("Duration"));

      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a3));
      objc_msgSend(v17, "setObject:forKeyedSubscript:", v20, CFSTR("DisconnectReason"));

      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v11 != 0));
      objc_msgSend(v17, "setObject:forKeyedSubscript:", v21, CFSTR("Initiator"));

      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v8 != 0));
      objc_msgSend(v17, "setObject:forKeyedSubscript:", v22, CFSTR("RemoteDisconnected"));

      if (v11)
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v23 = +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", sub_10065B41C((uint64_t)off_1009778C0, v40));
        v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        objc_msgSend(v17, "setObject:forKeyedSubscript:", v24, CFSTR("ConnectionEstablishedRSSI"));

      }
      if (v9 > 5)
        v25 = CFSTR("PeerTypeOther");
      else
        v25 = (const __CFString *)*((_QWORD *)&off_10093DFE0 + v9);
      objc_msgSend(v17, "setObject:forKeyedSubscript:", v25, CFSTR("PeerType"));
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v16));
      objc_msgSend(v17, "setObject:forKeyedSubscript:", v26, CFSTR("DASessionType"));

      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v27 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", sub_10065BB54((uint64_t)off_1009778C0, v40));
      v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      objc_msgSend(v17, "setObject:forKeyedSubscript:", v28, CFSTR("LinkReadyDuration"));

      LOBYTE(v46) = 0;
      v45 = 0;
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      sub_10065B88C((uint64_t)off_1009778C0, v40, &v45, &v46, (char *)&v45 + 1);
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v46));
      objc_msgSend(v17, "setObject:forKeyedSubscript:", v29, CFSTR("FastLeConnectionConfigured"));

      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v45));
      objc_msgSend(v17, "setObject:forKeyedSubscript:", v30, CFSTR("FastLeConnectionUsed"));

      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v31 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", sub_10065BC64((uint64_t)off_1009778C0, v40));
      v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      objc_msgSend(v17, "setObject:forKeyedSubscript:", v32, CFSTR("LinkReadyConnectionInterval"));

      if (HIBYTE(v45))
        objc_msgSend(v17, "setObject:forKeyedSubscript:", 0, CFSTR("DASessionType"));
      if (!objc_msgSend(v6, "count"))
      {

        v6 = &off_100961308;
      }
      v38 = a1;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v6 = v6;
      v33 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
      if (v33)
      {
        v34 = *(_QWORD *)v42;
        do
        {
          for (i = 0; i != v33; i = (char *)i + 1)
          {
            if (*(_QWORD *)v42 != v34)
              objc_enumerationMutation(v6);
            objc_msgSend(v17, "setObject:forKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)i), CFSTR("BundleIdentifier"));
            v36 = qword_100999890;
            if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v49 = v17;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Sending LESessionEndedMetric %@", buf, 0xCu);
            }
            v37 = sub_100065478();
            (*(void (**)(uint64_t, void *))(*(_QWORD *)v37 + 272))(v37, v17);
          }
          v33 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v41, v47, 16);
        }
        while (v33);
      }

      sub_100634A5C(v38, v40);
    }

  }
}

void sub_100634974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_100634A5C(uint64_t a1, void *a2)
{
  id v3;
  unsigned __int8 v4[16];

  v3 = a2;
  sub_100030BCC(v4, v3);
  sub_100648D1C((uint64_t **)(a1 + 1536), v4);

}

void sub_100634AD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100634AE8(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10093DE28);
  sub_1004B9D90((os_unfair_lock_s *)off_100977B38, *(_DWORD *)(a1 + 40));
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v2 = sub_10065C624((uint64_t)off_1009778C0, *(void **)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cuFilteredArrayUsingBlock:", &stru_10093D848));

  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v5 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v8);
        if (qword_100977B40 != -1)
          dispatch_once(&qword_100977B40, &stru_10093DE28);
        sub_1004BBE00((uint64_t)off_100977B38, *(void **)(a1 + 32), objc_msgSend(v9, "integerValue", (_QWORD)v10), *(unsigned __int8 *)(a1 + 44));
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v6);
  }

}

void sub_100634CBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100634CEC(id a1, NSNumber *a2)
{
  NSNumber *v2;
  NSNumber *v3;
  NSNumber *v4;

  v2 = a2;
  if (-[NSNumber integerValue](v2, "integerValue") <= 0)
    v3 = 0;
  else
    v3 = v2;
  v4 = v3;

  return v4;
}

void sub_100634D28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100634D38(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = 16;
  if (!*(_BYTE *)(a1 + 44))
    v2 = 128;
  return (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*a2 + v2))(a2, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t sub_100634D68(uint64_t result)
{
  if (!*(_QWORD *)(result + 888))
    sub_10034FFF8();
  return result;
}

void sub_100634E40(uint64_t a1, double a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  _QWORD v9[5];
  uint8_t buf[4];
  double v11;

  if (*(_QWORD *)(a1 + 544))
  {
    v4 = qword_100999890;
    if (!os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT) || !sub_100713E0C(v4, (_QWORD *)(a1 + 544)))
      sub_10061BC50(a1);
  }
  v5 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Arming Fast connection scan Timer with interval %f seconds", buf, 0xCu);
  }
  *(double *)(a1 + 552) = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100634FCC;
  v9[3] = &unk_100921208;
  v9[4] = a1;
  v6 = objc_claimAutoreleasedReturnValue(+[NSTimer timerWithTimeInterval:repeats:block:](NSTimer, "timerWithTimeInterval:repeats:block:", 0, v9, a2));
  v7 = *(void **)(a1 + 544);
  *(_QWORD *)(a1 + 544) = v6;

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](NSRunLoop, "mainRunLoop"));
  objc_msgSend(v8, "addTimer:forMode:", *(_QWORD *)(a1 + 544), NSDefaultRunLoopMode);

}

void sub_100634FB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100634FCC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD v7[5];
  uint8_t buf[16];

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Fast connection scan Timer expired !", buf, 2u);
  }
  v6 = sub_1000419F4();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100635098;
  v7[3] = &unk_100917378;
  v7[4] = v4;
  sub_100041A34(v6, v7);

}

void sub_100635088(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100635098(uint64_t a1)
{
  return sub_1006350A0(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1006350A0(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  NSObject *v5;
  const unsigned __int8 *v6;
  __int16 v7;
  double v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  int v15;
  void *v16;
  id v17;
  void *v18;
  __int16 v19;
  NSObject *v20;
  id v21;
  void *v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void **v28;
  size_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  double v35;
  double v36;
  double v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  const unsigned __int8 **v42;
  BOOL v43;
  _QWORD *v44;
  void **v45;
  size_t v46;
  _QWORD *v47;
  _QWORD *v48;
  NSObject *v49;
  int v50;
  void **v51;
  void **v52;
  void **v53;
  int v54;
  int v55;
  BOOL v56;
  NSObject *v57;
  NSObject *v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  void *__p[2];
  char v69;
  void *v70[2];
  unsigned __int8 v71;
  char v72;
  __int16 v73;
  __int128 v74;
  __int16 v75;
  __int128 v76;
  _OWORD v77[4];
  void *v78[2];
  __int128 v79;
  __int128 v80;
  _OWORD v81[9];
  uint64_t v82;
  _QWORD v83[2];
  uint8_t buf[16];
  _OWORD v85[4];
  void *v86[2];
  __int128 v87;
  __int128 v88;
  _OWORD v89[9];
  uint64_t v90;
  uint8_t v91[48];
  __int128 v92;

  *(_QWORD *)&v76 = 0;
  sub_10004AD30((uint64_t)&v76);
  v66 = SWORD2(v76);
  v67 = (int)v76;
  v83[0] = 0;
  v83[1] = 0;
  sub_10003415C((uint64_t)v83, a1 + 120);
  v82 = 0;
  v80 = 0u;
  memset(v81, 0, sizeof(v81));
  *(_OWORD *)v78 = 0u;
  v79 = 0u;
  memset(v77, 0, sizeof(v77));
  v76 = 0u;
  sub_1002613AC((uint64_t)&v76);
  sub_10061BC50(a1);
  v75 = 0;
  v2 = sub_100016B48();
  (*(void (**)(uint64_t, char *, __int16 *))(*(_QWORD *)v2 + 48))(v2, (char *)&v75 + 1, &v75);
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10093DE28);
  v3 = *((unsigned __int8 *)off_100977B38 + 197);
  v4 = *((unsigned __int8 *)off_100977B38 + 198);
  v5 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = HIBYTE(v75);
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v75;
    *(_WORD *)&buf[14] = 1024;
    LODWORD(v85[0]) = v3;
    WORD2(v85[0]) = 1024;
    *(_DWORD *)((char *)v85 + 6) = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "checkIfFastConnectionScanIsRequired reason:%d state%d isA2DPStreaming:%d isHFPStreaming:%d", buf, 0x1Au);
  }
  v90 = 0;
  v88 = 0u;
  memset(v89, 0, sizeof(v89));
  *(_OWORD *)v86 = 0u;
  v87 = 0u;
  memset(v85, 0, sizeof(v85));
  *(_OWORD *)buf = 0u;
  sub_1002613AC((uint64_t)buf);
  v6 = *(const unsigned __int8 **)(a1 + 328);
  if (v6 != (const unsigned __int8 *)(a1 + 336))
  {
    if (v4 | v3)
      v7 = 8;
    else
      v7 = 7;
    v64 = v7;
    v65 = 0;
    v8 = 0.0;
    while (1)
    {
      v74 = 0uLL;
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v9 = off_1009778C0;
      v10 = sub_100030DF4(v6 + 25);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      sub_10065CCCC((uint64_t)v9, v11, (uint64_t)&v74);

      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v12 = off_1009778C0;
      v13 = sub_100030DF4(v6 + 25);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      v15 = sub_10065FCC4((uint64_t)v12, v14);

      if (v74 == 0 || v15 == 6)
        goto LABEL_48;
      v73 = 0;
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v16 = off_1009778C0;
      v17 = sub_100030DF4(v6 + 25);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      LOWORD(v16) = sub_10065FCC4((uint64_t)v16, v18);

      v73 = (__int16)v16;
      if (HIBYTE(v75) == 1)
      {
        if ((_BYTE)v75)
          break;
      }
      if (HIBYTE(v75) == 2 && (_BYTE)v75)
      {
        v20 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v91 = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Extending host scan request to DefaultExtended while in AirPlay critical buffering state", v91, 2u);
        }
        v19 = 1;
        goto LABEL_26;
      }
LABEL_27:
      v72 = 0;
      v21 = sub_100030DF4(v6 + 25);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      sub_100635C20(a1, v22, &v73, &v72, &v74);

      v23 = sub_1002614D8(v85, (uint64_t)" | ", 3);
      memset(v91, 0, 37);
      uuid_unparse_upper(v6 + 25, (char *)v91);
      sub_100091AE8(v70, (char *)v91);
      if ((v71 & 0x80u) == 0)
        v24 = v70;
      else
        v24 = (void **)v70[0];
      if ((v71 & 0x80u) == 0)
        v25 = v71;
      else
        v25 = (uint64_t)v70[1];
      v26 = sub_1002614D8(v23, (uint64_t)v24, v25);
      v27 = sub_1002614D8(v26, (uint64_t)",exp:", 5);
      v92 = 0u;
      memset(v91, 0, sizeof(v91));
      snprintf((char *)v91, 0x3FuLL, "%0llu.%0llu", (_QWORD)v74, *((_QWORD *)&v74 + 1));
      sub_100091AE8(__p, (char *)v91);
      if (v69 >= 0)
        v28 = __p;
      else
        v28 = (void **)__p[0];
      v29 = strlen((const char *)v28);
      v30 = sub_1002614D8(v27, (uint64_t)v28, v29);
      v31 = sub_1002614D8(v30, (uint64_t)",reached:", 9);
      *(_WORD *)&v91[6] = 0;
      *(_DWORD *)v91 = v74;
      *(_WORD *)&v91[4] = WORD4(v74);
      v32 = sub_100258AE0((uint64_t)v91);
      std::ostream::operator<<(v31, v32);
      if (v69 < 0)
        operator delete(__p[0]);
      if ((char)v71 < 0)
        operator delete(v70[0]);
      *(_WORD *)&v91[6] = 0;
      *(_DWORD *)v91 = v74;
      *(_WORD *)&v91[4] = WORD4(v74);
      if (!sub_100258AE0((uint64_t)v91))
      {
        v33 = *((_QWORD *)&v74 + 1) - v66 + 1000 * (v74 - v67);
        v34 = v33 / 0x3E8;
        v35 = (double)(v33 % 0x3E8) / 1000.0;
        v36 = v35 + (double)(v33 / 0x3E8);
        if (v8 >= v36)
          v37 = v35 + (double)v34;
        else
          v37 = v8;
        if (v8 == 0.0)
          v8 = v35 + (double)v34;
        else
          v8 = v37;
        v38 = sub_1002614D8(v85, (uint64_t)",interval:", 10);
        v91[0] = 48;
        v39 = sub_1003CDCD4(v38, v91);
        *(_QWORD *)((char *)v39 + *(_QWORD *)(*v39 - 24) + 16) = 3;
        v40 = (_QWORD *)std::ostream::operator<<(v36);
        sub_1002614D8(v40, (uint64_t)"sec", 3);
        v65 = 1;
      }
LABEL_48:
      v41 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
      if (v41)
      {
        do
        {
          v42 = (const unsigned __int8 **)v41;
          v41 = *(unsigned __int8 **)v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v42 = (const unsigned __int8 **)*((_QWORD *)v6 + 2);
          v43 = *v42 == v6;
          v6 = (const unsigned __int8 *)v42;
        }
        while (!v43);
      }
      v6 = (const unsigned __int8 *)v42;
      if (v42 == (const unsigned __int8 **)(a1 + 336))
        goto LABEL_56;
    }
    v19 = v64;
LABEL_26:
    v73 = v19;
    goto LABEL_27;
  }
  v65 = 0;
  v8 = 0.0;
LABEL_56:
  v44 = sub_1002614D8(v77, (uint64_t)"now:", 4);
  v92 = 0u;
  memset(v91, 0, sizeof(v91));
  snprintf((char *)v91, 0x3FuLL, "%0llu.%0llu", v67, v66);
  v45 = v70;
  sub_100091AE8(v70, (char *)v91);
  if ((v71 & 0x80u) != 0)
    v45 = (void **)v70[0];
  v46 = strlen((const char *)v45);
  v47 = sub_1002614D8(v44, (uint64_t)v45, v46);
  sub_1002614D8(v47, (uint64_t)" duration:", 10);
  v48 = (_QWORD *)std::ostream::operator<<(v8);
  sub_1002614D8(v48, (uint64_t)"sec", 3);
  if ((char)v71 < 0)
    operator delete(v70[0]);
  v49 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str((char *)v77 + 8);
    v50 = (char)v71;
    v51 = (void **)v70[0];
    std::stringbuf::str((char *)v85 + 8);
    v52 = v70;
    if (v50 < 0)
      v52 = v51;
    if (v69 >= 0)
      v53 = __p;
    else
      v53 = (void **)__p[0];
    *(_DWORD *)v91 = 67109634;
    *(_DWORD *)&v91[4] = v65 & 1;
    *(_WORD *)&v91[8] = 2082;
    *(_QWORD *)&v91[10] = v52;
    *(_WORD *)&v91[18] = 2082;
    *(_QWORD *)&v91[20] = v53;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "shouldEnableFastConnectionScan:%d %{public}s%{public}s", v91, 0x1Cu);
    if (v69 < 0)
      operator delete(__p[0]);
    if ((char)v71 < 0)
      operator delete(v70[0]);
  }
  if (*(_DWORD *)(a1 + 856) != 1 || !*(_QWORD *)(a1 + 344))
    goto LABEL_74;
  LOWORD(v70[0]) = 0;
  LOWORD(__p[0]) = 0;
  LOWORD(v74) = 0;
  LOBYTE(v73) = 0;
  sub_1006362F0(a1, v70, (unsigned __int16 *)__p, &v74, (char *)&v73);
  v72 = 0;
  sub_100043758(&v72);
  v54 = LOWORD(v70[0]);
  v55 = LOWORD(__p[0]);
  v56 = sub_100214388(LOWORD(v70[0]), LOWORD(__p[0]));
  sub_10004339C(&v72);
  if (v56)
  {
    sub_100043728(&v72);
LABEL_74:
    if ((v65 & 1) != 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
        sub_100713E60();
      if (*(_QWORD *)(a1 + 344) && *(_BYTE *)(a1 + 184) && v8 > 0.0)
      {
        sub_100634D68(a1);
        v57 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v91 = 134217984;
          *(double *)&v91[4] = v8;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Setting scan level expiration %f ms from now", v91, 0xCu);
        }
        sub_100634E40(a1, v8);
      }
    }
    else if (*(_QWORD *)(a1 + 888))
    {
      sub_10061BB74(a1);
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
        sub_100713EC4();
      if (*(_DWORD *)(a1 + 856) == 1 && *(_QWORD *)(a1 + 344))
      {
        v58 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v91 = 0;
          _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Reducing connection timing for current connections", v91, 2u);
        }
        sub_10061AF78(a1, 0);
      }
    }
    goto LABEL_94;
  }
  v59 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v91 = 67109376;
    *(_DWORD *)&v91[4] = v55;
    *(_WORD *)&v91[8] = 1024;
    *(_DWORD *)&v91[10] = v54;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Cancelling connections due to connection scan params: window - 0x%x, interval - 0x%x", v91, 0xEu);
  }
  sub_10061AF78(a1, 0);
  sub_100043728(&v72);
LABEL_94:
                            - 24)] = v62;
  *(_QWORD *)&v85[0] = v61;
  if (SHIBYTE(v87) < 0)
    operator delete(v86[1]);
  std::streambuf::~streambuf((char *)v85 + 8);
  std::ios::~ios(v89);
  *(_QWORD *)&v76 = v60;
  *(_QWORD *)((char *)&v77[-1] + *(_QWORD *)(v60 - 24)) = v62;
  *(_QWORD *)&v77[0] = v61;
  if (SHIBYTE(v79) < 0)
    operator delete(v78[1]);
  std::streambuf::~streambuf((char *)v77 + 8);
  std::ios::~ios(v81);
  return sub_100034234((uint64_t)v83);
}

void sub_100635B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
  sub_1006CC5C8((uint64_t)&a63);
  sub_1006CC5C8((uint64_t)&a25);
  sub_100034234((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void sub_100635C20(uint64_t a1, void *a2, _WORD *a3, char *a4, _QWORD *a5)
{
  id v8;
  uint64_t v9;
  unsigned __int16 v10;
  _QWORD *v11;
  const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v12;
  __int128 *p_buf;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  const char *v20;
  const char *v21;
  size_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  _QWORD *v32;
  _OWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  NSObject *v44;
  _OWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  __int128 v58;
  _OWORD v59[4];
  void *__p[2];
  __int128 v61;
  __int128 v62;
  _OWORD v63[9];
  uint64_t v64;
  _BYTE v65[16];
  __int128 buf;
  unsigned __int8 v67;
  _OWORD out[4];

  v8 = a2;
  v9 = sub_100016B48();
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 56))(v9);
  v64 = 0;
  v62 = 0u;
  memset(v63, 0, sizeof(v63));
  *(_OWORD *)__p = 0u;
  v61 = 0u;
  memset(v59, 0, sizeof(v59));
  v58 = 0u;
  sub_1002613AC((uint64_t)&v58);
  v11 = sub_1002614D8(v59, (uint64_t)"connectionScanParametersForDevice device:", 41);
  sub_100030BCC(v65, v8);
  memset(out, 0, 37);
  uuid_unparse_upper(v12, (char *)out);
  sub_100091AE8(&buf, (char *)out);
  if ((v67 & 0x80u) == 0)
    p_buf = &buf;
  else
    p_buf = (__int128 *)buf;
  if ((v67 & 0x80u) == 0)
    v14 = v67;
  else
    v14 = *((_QWORD *)&buf + 1);
  v15 = sub_1002614D8(v11, (uint64_t)p_buf, v14);
  v16 = sub_1002614D8(v15, (uint64_t)" coexRecommendedConnectionScanDutycycle:", 40);
  std::ostream::operator<<(v16, v10);
  if ((char)v67 < 0)
    operator delete((void *)buf);
  v17 = (unsigned __int16)*a3;
  if (!v10 || v17 > 2)
  {
    v25 = *(unsigned int *)(a1 + 4 * v17 + 560);
    sub_1002614D8(v59, (uint64_t)" No CoexRequested", 17);
    v30 = 0;
LABEL_27:
    *a4 = v30;
    goto LABEL_28;
  }
  sub_1002614D8(v59, (uint64_t)" CoexRequested", 14);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v18 = sub_10065FEE4((uint64_t)off_1009778C0, v8);
  v19 = sub_1002614D8(v59, (uint64_t)" devicePriority:", 16);
  v20 = "Low";
  if (v18 == 1)
    v20 = "Medium";
  if (v18 == 2)
    v21 = "High";
  else
    v21 = v20;
  v22 = strlen(v21);
  sub_1002614D8(v19, (uint64_t)v21, v22);
  if (!v18)
  {
    v25 = *(unsigned int *)(a1 + 592);
    *a3 = 8;
    v30 = 1;
    goto LABEL_27;
  }
  if (v18 == 2)
  {
    v25 = *(unsigned int *)(a1 + 4 * (unsigned __int16)*a3 + 560);
    v30 = 2;
    goto LABEL_27;
  }
  if (v18 == 1 && *(_WORD *)(a1 + 112))
  {
    v23 = 0;
    v24 = 0;
    LODWORD(v25) = 0;
    while (1)
    {
      v25 = (*(_DWORD *)(*(_QWORD *)(a1 + 104) + v23) + v25);
      v26 = a5[1] + v25;
      v27 = *a5 + v26 / 0x3E8;
      v28 = v26 % 0x3E8;
      LODWORD(out[0]) = *(_DWORD *)a5 + v26 / 0x3E8;
      DWORD1(out[0]) = v26 % 0x3E8;
      if (!sub_100258AE0((uint64_t)out))
        break;
      *a3 = 8;
      v29 = *(unsigned int *)(a1 + 592);
      *a4 = 1;
      ++v24;
      v23 += 8;
      if (v24 >= *(unsigned __int16 *)(a1 + 112))
      {
        v25 = v29;
        goto LABEL_28;
      }
    }
    v47 = sub_1002614D8(v59, (uint64_t)" within segment:", 16);
    v48 = (_QWORD *)std::ostream::operator<<(v47, v24);
    v49 = sub_1002614D8(v48, (uint64_t)" segmentTime:", 13);
    memset(out, 0, sizeof(out));
    snprintf((char *)out, 0x3FuLL, "%0llu.%0llu", v27, v28);
    sub_100091AE8(&buf, (char *)out);
    if ((v67 & 0x80u) == 0)
      v50 = &buf;
    else
      v50 = (__int128 *)buf;
    if ((v67 & 0x80u) == 0)
      v51 = v67;
    else
      v51 = *((_QWORD *)&buf + 1);
    v52 = sub_1002614D8(v49, (uint64_t)v50, v51);
    v53 = sub_1002614D8(v52, (uint64_t)" totalElapsedTime:", 18);
    v54 = (_QWORD *)std::ostream::operator<<(v53, v25);
    v55 = sub_1002614D8(v54, (uint64_t)" fConnectionScanScheduleSegments.durationMS:", 44);
    std::ostream::operator<<(v55, *(unsigned int *)(*(_QWORD *)(a1 + 104) + v23));
    if ((char)v67 < 0)
      operator delete((void *)buf);
    v56 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + v23 + 4);
    if (v56 == 9)
      LOWORD(v56) = 8;
    *a3 = v56;
    if ((unsigned __int16)v56 == 8)
      v30 = 1;
    else
      v30 = 2;
    goto LABEL_27;
  }
  v25 = 0;
LABEL_28:
  v31 = a5[1] + v25;
  *a5 += v31 / 0x3E8;
  a5[1] = v31 % 0x3E8;
  v32 = sub_1002614D8(v59, (uint64_t)" expirationTime:", 16);
  sub_1003FCE28(a5, out);
  if ((SBYTE7(out[1]) & 0x80u) == 0)
    v33 = out;
  else
    v33 = *(_OWORD **)&out[0];
  if ((SBYTE7(out[1]) & 0x80u) == 0)
    v34 = BYTE7(out[1]);
  else
    v34 = *((_QWORD *)&out[0] + 1);
  v35 = sub_1002614D8(v32, (uint64_t)v33, v34);
  v36 = sub_1002614D8(v35, (uint64_t)"sec (delta:", 11);
  v37 = (_QWORD *)std::ostream::operator<<(v36, v25);
  v38 = sub_1002614D8(v37, (uint64_t)"ms) ", 4);
  v39 = sub_1002614D8(v38, (uint64_t)"scanDutyCycle:", 14);
  v40 = (_QWORD *)std::ostream::operator<<(v39, (unsigned __int16)*a3);
  sub_1002614D8(v40, (uint64_t)" interval:", 10);
  LOWORD(v41) = *(_WORD *)(a1 + 2 * (unsigned __int16)*a3 + 256);
  v42 = (_QWORD *)std::ostream::operator<<((double)v41 * 0.625);
  v43 = sub_1002614D8(v42, (uint64_t)"ms coexOverrideReason:", 22);
  std::ostream::operator<<(v43, *a4);
  if (SBYTE7(out[1]) < 0)
    operator delete(*(void **)&out[0]);
  v44 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_INFO))
  {
    std::stringbuf::str((char *)v59 + 8);
    v45 = (SBYTE7(out[1]) & 0x80u) == 0 ? out : *(_OWORD **)&out[0];
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v45;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "%{public}s", (uint8_t *)&buf, 0xCu);
    if (SBYTE7(out[1]) < 0)
      operator delete(*(void **)&out[0]);
  }
  *(_QWORD *)((char *)&v59[-1]
  *(_QWORD *)&v59[0] = v46;
  if (SHIBYTE(v61) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v59 + 8);
  std::ios::~ios(v63);

}

void sub_100636264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1006CC5C8((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_1006362F0(uint64_t a1, _WORD *a2, unsigned __int16 *a3, _WORD *a4, char *a5)
{
  uint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  const unsigned __int8 *v12;
  void *v13;
  id v14;
  void *v15;
  unsigned int v16;
  unsigned __int16 *v17;
  unsigned int v18;
  NSObject *v19;
  unsigned int v20;
  unsigned int v21;
  NSObject *v22;
  unsigned __int8 *v23;
  const unsigned __int8 **v24;
  uint64_t v25;
  const unsigned __int8 *v26;
  unsigned int v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  unsigned __int8 *v34;
  const unsigned __int8 **v35;
  const unsigned __int8 *v36;
  const unsigned __int8 **v37;
  char v38;
  __int16 v39;
  void *v40;
  id v41;
  void *v42;
  int v43;
  BOOL v44;
  BOOL v45;
  __int16 v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  void *v51;
  uint64_t v52;
  NSObject *v53;
  id v54;
  void *v55;
  BOOL v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  void *v60;
  id v61;
  void *v62;
  void *v63;
  id v64;
  void *v65;
  NSObject *v66;
  id v67;
  id v68;
  int v69;
  int v70;
  int v71;
  _BOOL4 v72;
  int v73;
  const char *v74;
  int v75;
  int v76;
  unsigned __int8 *v77;
  const unsigned __int8 **v78;
  id v79;
  void *v80;
  uint64_t v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  NSObject *v89;
  int v90;
  int v91;
  int v92;
  int v93;
  NSObject *v94;
  int v95;
  uint64_t result;
  uint64_t v97;
  __int16 v99;
  uint64_t v104;
  uint64_t v105;
  unsigned __int16 v106;
  __int16 v107;
  _DWORD v108[2];
  int buf;
  _BYTE buf_4[10];
  _BYTE v111[6];
  _BYTE v112[6];
  _BYTE v113[6];
  const char *v114;
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;
  __int16 v119;
  int v120;

  *a4 = 0;
  *a5 = 0;
  if (*(_QWORD *)(a1 + 888))
  {
    v107 = 0;
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_10093DE28);
    sub_1004BA834((uint64_t)off_100977B38, 2);
    v5 = sub_100016B48();
    (*(void (**)(uint64_t, __int16 *, char *))(*(_QWORD *)v5 + 48))(v5, &v107, (char *)&v107 + 1);
    v6 = 0;
    *a3 = 48;
    *a2 = 480;
    if (v107 == 1)
    {
      HIDWORD(v97) = 0;
      v7 = a1;
      if (HIBYTE(v107))
      {
        if (qword_100977B40 != -1)
          dispatch_once(&qword_100977B40, &stru_10093DE28);
        HIDWORD(v97) = *((_BYTE *)off_100977B38 + 197) != 0;
        v6 = *((_BYTE *)off_100977B38 + 198) != 0;
      }
    }
    else
    {
      HIDWORD(v97) = 0;
      v7 = a1;
    }
    LODWORD(v97) = v6;
    v36 = *(const unsigned __int8 **)(v7 + 328);
    v37 = (const unsigned __int8 **)(v7 + 336);
    if (v36 == (const unsigned __int8 *)(v7 + 336))
    {
      v38 = 0;
    }
    else
    {
      v38 = 0;
      if (v97)
        v39 = 8;
      else
        v39 = 7;
      v99 = v39;
      do
      {
        v106 = 0;
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v40 = off_1009778C0;
        v41 = sub_100030DF4(v36 + 25);
        v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
        v43 = sub_10065FCC4((uint64_t)v40, v42);

        v44 = v43 == 1;
        if (HIBYTE(v107))
          v45 = v107 == 1;
        else
          v45 = 0;
        v46 = v99;
        if (!v45)
          v46 = v43;
        v106 = v46;
        v104 = 0;
        v105 = 0;
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v47 = off_1009778C0;
        v48 = sub_100030DF4(v36 + 25);
        v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
        sub_10065CCCC((uint64_t)v47, v49, (uint64_t)&v104);

        v50 = sub_100030DF4(v36 + 25);
        v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
        sub_100635C20(a1, v51, &v106, a5, &v104);

        v52 = v106;
        if (v106 < 9uLL)
        {
          *(_WORD *)&buf_4[2] = 0;
          buf = v104;
          *(_WORD *)buf_4 = v105;
          v56 = sub_100258AE0((uint64_t)&buf);
          v57 = (unsigned __int16)*a2;
          if (!v56 && v57 >= *(unsigned __int16 *)(a1 + 2 * v52 + 256))
            LOWORD(v57) = *(_WORD *)(a1 + 2 * v52 + 256);
          *a2 = v57;
          v58 = sub_10003BE44();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v58 + 648))(v58))
          {
            v59 = (unsigned __int16)*a4;
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093DDE8);
            v60 = off_1009778C0;
            v61 = sub_100030DF4(v36 + 25);
            v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
            if (v59 <= sub_10065A0F4((uint64_t)v60, v62))
            {
              if (qword_1009778C8 != -1)
                dispatch_once(&qword_1009778C8, &stru_10093DDE8);
              v63 = off_1009778C0;
              v64 = sub_100030DF4(v36 + 25);
              v65 = (void *)objc_claimAutoreleasedReturnValue(v64);
              *a4 = sub_10065A0F4((uint64_t)v63, v65);

            }
          }
          v66 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_INFO))
          {
            v67 = sub_100030DF4(v36 + 25);
            v68 = (id)objc_claimAutoreleasedReturnValue(v67);
            v69 = *a3;
            v70 = v106;
            v71 = *(unsigned __int16 *)(a1 + 2 * v106 + 256);
            v108[0] = v104;
            v108[1] = (unsigned __int16)v105;
            v72 = sub_100258AE0((uint64_t)v108);
            v73 = *a3;
            v74 = "NO";
            if (v72)
              v74 = "YES";
            v75 = (unsigned __int16)*a2;
            v76 = (unsigned __int16)*a4;
            buf = 138545154;
            *(_QWORD *)buf_4 = v68;
            *(_WORD *)&buf_4[8] = 1024;
            *(_DWORD *)v111 = v69;
            *(_WORD *)&v111[4] = 1024;
            *(_DWORD *)v112 = v71;
            *(_WORD *)&v112[4] = 1024;
            *(_DWORD *)v113 = v70;
            *(_WORD *)&v113[4] = 2082;
            v114 = v74;
            v115 = 1024;
            v116 = v73;
            v117 = 1024;
            v118 = v75;
            v119 = 1024;
            v120 = v76;
            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_INFO, "device \"%{public}@\" Connection scans [0x%x/0x%x(level:%d)] ignored:%{public}s [aggregated 0x%x/0x%x/0x%x]", (uint8_t *)&buf, 0x3Au);

          }
        }
        else
        {
          v53 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
          {
            v79 = sub_100030DF4(v36 + 25);
            v80 = (void *)objc_claimAutoreleasedReturnValue(v79);
            buf = 138543618;
            *(_QWORD *)buf_4 = v80;
            *(_WORD *)&buf_4[8] = 1024;
            *(_DWORD *)v111 = v106;
            _os_log_fault_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_FAULT, "device \"%{public}@\" connection scan duty cycle %d is invalid", (uint8_t *)&buf, 0x12u);

            v53 = qword_100999890;
          }
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
          {
            v54 = sub_100030DF4(v36 + 25);
            v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
            buf = 138543618;
            *(_QWORD *)buf_4 = v55;
            *(_WORD *)&buf_4[8] = 1024;
            *(_DWORD *)v111 = v106;
            _os_log_error_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "device \"%{public}@\" connection scan duty cycle %d is invalid", (uint8_t *)&buf, 0x12u);

          }
        }
        v77 = (unsigned __int8 *)*((_QWORD *)v36 + 1);
        if (v77)
        {
          do
          {
            v78 = (const unsigned __int8 **)v77;
            v77 = *(unsigned __int8 **)v77;
          }
          while (v77);
        }
        else
        {
          do
          {
            v78 = (const unsigned __int8 **)*((_QWORD *)v36 + 2);
            v9 = *v78 == v36;
            v36 = (const unsigned __int8 *)v78;
          }
          while (!v9);
        }
        v38 |= v44;
        v36 = (const unsigned __int8 *)v78;
      }
      while (v78 != v37);
    }
    if (v107 == 1 && HIBYTE(v107) != 0)
    {
      v82 = sub_10003BE44();
      v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 960))(v82);
      v84 = v83;
      v85 = (unsigned __int16)*a2;
      if ((v97 | HIDWORD(v97)) == 1)
      {
        if (v85 <= *(unsigned __int16 *)(a1 + 272))
          LOWORD(v85) = *(_WORD *)(a1 + 272);
        *a2 = v85;
        if (v83)
        {
          if (_os_feature_enabled_impl("BluetoothFeatures", "ScanCorePolicyV2"))
          {
            v86 = (unsigned __int16)*a2;
            if (v86 == *(unsigned __int16 *)(a1 + 272))
            {
              v87 = v86 - *a3;
              if (v87 < (unsigned __int16)*a4)
                LOWORD(v87) = *a4;
              *a4 = v87;
            }
          }
        }
      }
      else
      {
        if ((v38 & 1) != 0)
          v88 = *(unsigned __int16 *)(a1 + 272);
        else
          v88 = *(unsigned __int16 *)(a1 + 270);
        if (v85 <= v88)
          LOWORD(v85) = v88;
        *a2 = v85;
      }
      v89 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_INFO))
      {
        v90 = *a3;
        v91 = (unsigned __int16)*a2;
        v92 = (unsigned __int16)*a4;
        buf = 67110400;
        *(_DWORD *)buf_4 = HIDWORD(v97);
        *(_WORD *)&buf_4[4] = 1024;
        *(_DWORD *)&buf_4[6] = v97;
        *(_WORD *)v111 = 1024;
        *(_DWORD *)&v111[2] = v84;
        *(_WORD *)v112 = 1024;
        *(_DWORD *)&v112[2] = v90;
        *(_WORD *)v113 = 1024;
        *(_DWORD *)&v113[2] = v91;
        LOWORD(v114) = 1024;
        *(_DWORD *)((char *)&v114 + 2) = v92;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_INFO, "CarPlay is on, isA2DPStreaming:%d isHFPStreaming:%d highDutySC:%d Connection scans updated [0x%x/0x%x/0x%x]", (uint8_t *)&buf, 0x26u);
      }
    }
  }
  else
  {
    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_10093DE28);
    sub_1004BA834((uint64_t)off_100977B38, 1);
    LOBYTE(v104) = 0;
    LOBYTE(v108[0]) = 0;
    LOBYTE(v106) = 0;
    v8 = sub_100038E50();
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 152))(v8, &v104))
      v9 = 1;
    else
      v9 = v104 == 0;
    if (v9
      && ((v10 = sub_100038E50(),
           !(*(unsigned int (**)(uint64_t, _DWORD *, unsigned __int16 *))(*(_QWORD *)v10 + 96))(v10, v108, &v106))? (v11 = LOBYTE(v108[0]) == 0): (v11 = 1), v11))
    {
      *a2 = 480;
      *a3 = *(_WORD *)(a1 + 274);
      v12 = *(const unsigned __int8 **)(a1 + 328);
      if (v12 != (const unsigned __int8 *)(a1 + 336))
      {
        do
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10093DDE8);
          v13 = off_1009778C0;
          v14 = sub_100030DF4(v12 + 25);
          v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
          v16 = sub_10065FDD4((uint64_t)v13, v15);

          if (v16 >= 7)
          {
            v19 = qword_100999890;
            v17 = a3;
            if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
            {
              buf = 67109120;
              *(_DWORD *)buf_4 = v16;
              _os_log_fault_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "scanDutyCycle cannot be %d", (uint8_t *)&buf, 8u);
            }
          }
          else
          {
            v17 = a3;
            v18 = *a3;
            if (v18 <= *(unsigned __int16 *)(a1 + 2 * v16 + 274))
              LOWORD(v18) = *(_WORD *)(a1 + 2 * v16 + 274);
            *a3 = v18;
          }
          v20 = *v17;
          v21 = (unsigned __int16)*a2;
          if (v20 > v21)
          {
            v22 = qword_100999890;
            if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
            {
              buf = 67109376;
              *(_DWORD *)buf_4 = v20;
              *(_WORD *)&buf_4[4] = 1024;
              *(_DWORD *)&buf_4[6] = v21;
              _os_log_fault_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "scanWindow (0x%x), scanInterval (0x%x)", (uint8_t *)&buf, 0xEu);
            }
          }
          v23 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
          if (v23)
          {
            do
            {
              v24 = (const unsigned __int8 **)v23;
              v23 = *(unsigned __int8 **)v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v24 = (const unsigned __int8 **)*((_QWORD *)v12 + 2);
              v9 = *v24 == v12;
              v12 = (const unsigned __int8 *)v24;
            }
            while (!v9);
          }
          v12 = (const unsigned __int8 *)v24;
        }
        while (v24 != (const unsigned __int8 **)(a1 + 336));
      }
    }
    else
    {
      *a2 = 480;
      *a3 = 48;
    }
    v25 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 648))(v25))
    {
      v26 = *(const unsigned __int8 **)(a1 + 328);
      if (v26 != (const unsigned __int8 *)(a1 + 336))
      {
        do
        {
          v27 = (unsigned __int16)*a4;
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10093DDE8);
          v28 = off_1009778C0;
          v29 = sub_100030DF4(v26 + 25);
          v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
          if (v27 <= sub_10065A0F4((uint64_t)v28, v30))
          {
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093DDE8);
            v31 = off_1009778C0;
            v32 = sub_100030DF4(v26 + 25);
            v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
            *a4 = sub_10065A0F4((uint64_t)v31, v33);

          }
          v34 = (unsigned __int8 *)*((_QWORD *)v26 + 1);
          if (v34)
          {
            do
            {
              v35 = (const unsigned __int8 **)v34;
              v34 = *(unsigned __int8 **)v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              v35 = (const unsigned __int8 **)*((_QWORD *)v26 + 2);
              v9 = *v35 == v26;
              v26 = (const unsigned __int8 *)v35;
            }
            while (!v9);
          }
          v26 = (const unsigned __int8 *)v35;
        }
        while (v35 != (const unsigned __int8 **)(a1 + 336));
      }
    }
    *a5 = 0;
  }
  if (*(_BYTE *)(a1 + 1067))
  {
    *a3 = *(_WORD *)(a1 + 1068);
    v93 = *(unsigned __int16 *)(a1 + 1070);
    *a2 = v93;
    v94 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v95 = *a3;
      buf = 67109376;
      *(_DWORD *)buf_4 = v95;
      *(_WORD *)&buf_4[4] = 1024;
      *(_DWORD *)&buf_4[6] = v93;
      _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "Overriding Connection Scan Parameters on MainCore. window=%d: interval=%d ", (uint8_t *)&buf, 0xEu);
    }
  }
  result = sub_10063EE24((unsigned __int16 *)a1, (unsigned __int16)*a2, *a3, (unsigned __int16)*a4);
  if ((result & 1) == 0)
    *a4 = 0;
  return result;
}

void sub_100636E7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100636F00(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0 && *(_BYTE *)(a1 + 184))
  {
    if (*(_QWORD *)(a1 + 344))
      return sub_1006350A0(a1);
  }
  return a1;
}

uint64_t sub_100636F1C(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 120);
  if (*(_BYTE *)(a1 + 184) && *(_QWORD *)(a1 + 344))
    sub_1006350A0(a1);
  return sub_100034234((uint64_t)v3);
}

void sub_100636F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100636F84(uint64_t a1)
{
  return sub_100636F1C(a1 - 8);
}

void sub_100636F90(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_100637024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_10063704C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v13[2];
  unsigned __int8 uu2[8];
  uint64_t v15;
  uint64_t v16;

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 120);
  v5 = sub_100624724(a1, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    sub_100030BCC(uu2, v6);
    v7 = sub_10000C5B8(a1 + 928, uu2);
    v8 = v7;
    if (a1 + 936 != v7)
    {
      *(_QWORD *)uu2 = 0;
      v15 = 0;
      v16 = 0;
      v9 = v7 + 48;
      sub_100647F08((uint64_t *)uu2, v7 + 48);
      v11 = *(_QWORD **)(v8 + 56);
      v10 = (_QWORD *)(v8 + 56);
      sub_10001A82C(v9, v11);
      *(v10 - 1) = v10;
      *v10 = 0;
      v10[1] = 0;
      sub_1000419F4();
      operator new();
    }
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100713FCC();
  }
  else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
  {
    sub_100713F68();
  }

  return sub_100034234((uint64_t)v13);
}

void sub_1006372F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,_QWORD *a22)
{
  void *v22;

  sub_10001A82C((uint64_t)&a21, a22);

  sub_100034234((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100637368(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 24))(a2, **(_QWORD **)(a1 + 40), *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 48), *(char *)(a1 + 52));
}

uint64_t sub_10063738C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 120);
  v4 = sub_10000C5B8(a1 + 928, a2);
  if (a1 + 936 != v4)
  {
    if (*(_QWORD *)(v4 + 64))
      sub_100623BB8(a1, a2);
    else
      sub_100565D70((uint64_t **)(a1 + 928), v4);
  }
  return sub_100034234((uint64_t)v6);
}

void sub_100637414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100637428(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  id v6;
  void *v7;
  NSObject *v8;
  const char *v9;
  _QWORD v11[4];
  id v12;
  char v13;
  _QWORD v14[2];
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  const char *v18;

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, (uint64_t)&a1[30]);
  v6 = sub_100624724((uint64_t)a1, a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v7)
  {
    v8 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v9 = "asleep";
      if (a3)
        v9 = "awake";
      *(_DWORD *)buf = 138543618;
      v16 = v7;
      v17 = 2082;
      v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Device %{public}@ is now %{public}s", buf, 0x16u);
    }
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1006375B0;
    v11[3] = &unk_10093D8E8;
    v12 = v7;
    v13 = a3;
    sub_1006169D0(a1, v11);

  }
  return sub_100034234((uint64_t)v14);
}

void sub_100637580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006375B0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1006375CC(os_unfair_lock_s *a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  id v16;
  void *v17;
  NSObject *v18;
  _BOOL4 v19;
  BOOL v20;
  const char *v21;
  _QWORD v23[4];
  id v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  __int16 v29;
  char v30;
  _QWORD v31[2];
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;

  v31[0] = 0;
  v31[1] = 0;
  sub_10003415C((uint64_t)v31, (uint64_t)&a1[30]);
  v16 = sub_100624724((uint64_t)a1, a2);
  v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  v18 = qword_100999890;
  v19 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT);
  if (v17)
  {
    if (v19)
    {
      v20 = a3 == 1 || a3 == 10;
      *(_DWORD *)buf = 138545154;
      v21 = "LE_SET_PHY";
      v33 = (uint64_t)v17;
      v34 = 2082;
      if (v20)
        v21 = "ConnectionComplete";
      v35 = v21;
      v36 = 1024;
      v37 = a3;
      v38 = 2048;
      v39 = a4;
      v40 = 1024;
      v41 = a5;
      v42 = 1024;
      v43 = a6;
      v44 = 1024;
      v45 = a7;
      v46 = 1024;
      v47 = a8;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Device %{public}@ is receiving a timestamp %{public}s EventType=%d with value %llu %d eventCnt=%d, sec:%d ms:%d", buf, 0x3Eu);
    }
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    v23[2] = sub_100637804;
    v23[3] = &unk_10093D910;
    v30 = a3;
    v24 = v17;
    v25 = a4;
    v29 = a6;
    v26 = a5;
    v27 = a7;
    v28 = a8;
    sub_1006169D0(a1, v23);

  }
  else if (v19)
  {
    *(_DWORD *)buf = 134217984;
    v33 = a2;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Device is not connected for %p", buf, 0xCu);
  }

  return sub_100034234((uint64_t)v31);
}

void sub_1006377D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100637804(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 56))(a2, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 62), *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 60), *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56));
}

uint64_t sub_10063782C(os_unfair_lock_s *a1, uint64_t a2, unsigned __int8 *a3)
{
  id v6;
  void *v7;
  NSObject *v8;
  _BOOL4 v9;
  int v10;
  _QWORD v12[2];
  _QWORD v13[4];
  id v14;
  _BYTE v15[26092];
  int buf;
  uint64_t v17;
  __int16 v18;
  int v19;

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, (uint64_t)&a1[30]);
  v6 = sub_100624724((uint64_t)a1, a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = qword_100999890;
  v9 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (v9)
    {
      v10 = a3[26090];
      buf = 138543618;
      v17 = (uint64_t)v7;
      v18 = 1024;
      v19 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Device %{public}@ has completed a procedure of %d stetps", (uint8_t *)&buf, 0x12u);
    }
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100637A1C;
    v13[3] = &unk_10093D938;
    v14 = v7;
    memcpy(v15, a3, sizeof(v15));
    sub_1006169D0(a1, v13);

  }
  else if (v9)
  {
    buf = 134217984;
    v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Device is not connected for %p", (uint8_t *)&buf, 0xCu);
  }

  return sub_100034234((uint64_t)v12);
}

void sub_1006379EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;

  sub_100034234((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100637A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE __dst[26092];

  v3 = *(_QWORD *)(a1 + 32);
  memcpy(__dst, (const void *)(a1 + 40), sizeof(__dst));
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a2 + 64))(a2, v3, __dst);
}

uint64_t sub_100637AA8(os_unfair_lock_s *a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, char a8, char a9, char a10, char a11, char a12, unsigned __int16 a13, int a14, char a15, char a16)
{
  id v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  std::string *p_buf;
  NSObject *v32;
  uint64_t (**v34)();
  unsigned int *v35;
  _QWORD v36[4];
  id v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  unsigned __int16 v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  _QWORD v51[2];
  std::string buf;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  const char *v66;

  v51[0] = 0;
  v51[1] = 0;
  sub_10003415C((uint64_t)v51, (uint64_t)&a1[30]);
  v24 = sub_100624724((uint64_t)a1, a2);
  v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  if (v25)
  {
    sub_100030BCC(&buf, v25);
    if (sub_1006240D4((uint64_t)a1, (unsigned __int8 *)&buf))
    {
      v26 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        v27 = "";
        LODWORD(buf.__r_.__value_.__l.__data_) = 138545666;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
        if (a15)
          v27 = " wakeUp";
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a9;
        WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf.__r_.__value_.__r.__words[2]) = a10;
        v53 = 1024;
        v54 = a11;
        v55 = 1024;
        v56 = a12;
        v57 = 1024;
        v58 = a13;
        v59 = 1024;
        v60 = a3;
        v61 = 1024;
        v62 = a4;
        v63 = 1024;
        v64 = a5;
        v65 = 2082;
        v66 = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Device %{public}@ is receiving a Rssi Detection Rssi [Avg|Max|median|min] var = %d:%d:%d:%d %d  CoreMotion=%x:%x:%x %{public}s", (uint8_t *)&buf, 0x46u);
      }
      v36[0] = _NSConcreteStackBlock;
      v36[1] = 3221225472;
      v36[2] = sub_100637E84;
      v36[3] = &unk_10093D960;
      v28 = v25;
      v39 = a3;
      v40 = a4;
      v41 = a5;
      v42 = a6;
      v37 = v28;
      v38 = a7;
      v45 = a8;
      v46 = a9;
      v47 = a10;
      v48 = a11;
      v49 = a12;
      v44 = a13;
      v43 = a14;
      v50 = a16;
      sub_1006169D0(a1, v36);
      if (a15)
      {
        sub_100030BCC(&buf, v28);
        v29 = sub_10000C5B8((uint64_t)&a1[158], (unsigned __int8 *)&buf);
        if (&a1[160] != (os_unfair_lock_s *)v29)
        {
          memset(&buf, 0, sizeof(buf));
          sub_10050945C(*(_QWORD *)(v29 + 48), &buf);
          v30 = sub_10005D5A4();
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_buf = &buf;
          else
            p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          v34 = &off_100918258;
          v35 = 0;
          (*(void (**)(uint64_t, uint64_t, std::string *, id, uint64_t (***)()))(*(_QWORD *)v30 + 40))(v30, 6, p_buf, v28, &v34);
          v34 = &off_100918258;
          if (v35)
            sub_100056AAC(v35);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
      }

    }
  }
  else
  {
    v32 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a2;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Device is not connected for %p", (uint8_t *)&buf, 0xCu);
    }
  }

  return sub_100034234((uint64_t)v51);
}

void sub_100637E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;

  if (a14)
    sub_100056AAC(a14);
  if (a32 < 0)
    operator delete(__p);

  sub_100034234((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_100637E84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  BYTE4(v4) = *(_BYTE *)(a1 + 75);
  LODWORD(v4) = *(_DWORD *)(a1 + 64);
  WORD2(v3) = *(_WORD *)(a1 + 68);
  LODWORD(v3) = *(_DWORD *)(a1 + 71);
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(_QWORD *)(a1 + 40), *(char *)(a1 + 70), v3, v4);
}

uint64_t sub_100637EE0(os_unfair_lock_s *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, int a7)
{
  id v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  _QWORD v19[4];
  id v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  __int16 v24;
  char v25;
  _QWORD v26[2];
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;

  v26[0] = 0;
  v26[1] = 0;
  sub_10003415C((uint64_t)v26, (uint64_t)&a1[30]);
  v14 = sub_100624724((uint64_t)a1, a2);
  v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  if (v15)
  {
    sub_100030BCC(buf, v15);
    if (sub_1006241C0((uint64_t)a1, buf))
    {
      v16 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138544386;
        v28 = (uint64_t)v15;
        v29 = 1024;
        v30 = a3;
        v31 = 1024;
        v32 = a4;
        v33 = 1024;
        v34 = a5;
        v35 = 2048;
        v36 = a6;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Device %{public}@ is receiving a Bluetooth Usage Event max:%d min:%d  audioStream=%d timeStamp=%llu", buf, 0x28u);
      }
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_10063810C;
      v19[3] = &unk_10093D988;
      v23 = a3;
      v24 = a4;
      v25 = a5;
      v20 = v15;
      v21 = a6;
      v22 = a7;
      sub_1006169D0(a1, v19);

    }
  }
  else
  {
    v17 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v28 = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Device is not connected for %p", buf, 0xCu);
    }
  }

  return sub_100034234((uint64_t)v26);
}

void sub_1006380D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10063810C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 80))(a2, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 52), *(unsigned __int16 *)(a1 + 54), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

uint64_t sub_100638134(os_unfair_lock_s *a1, uint64_t a2, char *a3, int a4)
{
  id v8;
  void *v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  __int128 v16;
  NSObject *v17;
  _QWORD v19[4];
  id v20;
  __int128 v21;
  __int128 v22;
  int v23;
  _QWORD v24[2];
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, (uint64_t)&a1[30]);
  v8 = sub_100624724((uint64_t)a1, a2);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  if (v9)
  {
    sub_100030BCC(buf, v9);
    if (sub_100624230((uint64_t)a1, buf))
    {
      v10 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *a3;
        v12 = *((unsigned __int16 *)a3 + 1);
        v13 = *((unsigned __int16 *)a3 + 2);
        v14 = *((unsigned __int16 *)a3 + 5);
        v15 = *((unsigned __int16 *)a3 + 6);
        *(_DWORD *)buf = 138544642;
        v26 = (uint64_t)v9;
        v27 = 1024;
        v28 = v11;
        v29 = 1024;
        v30 = v12;
        v31 = 1024;
        v32 = v13;
        v33 = 1024;
        v34 = v14;
        v35 = 1024;
        v36 = v15;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device %{public}@ is receiving a Phy statistc Bluetooth Usage Event Rssi:%d TxPER:%d:%d RxPER:%d:%d ", buf, 0x2Au);
      }
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_100638364;
      v19[3] = &unk_10093D960;
      v20 = v9;
      v16 = *((_OWORD *)a3 + 1);
      v21 = *(_OWORD *)a3;
      v22 = v16;
      v23 = a4;
      sub_1006169D0(a1, v19);

    }
  }
  else
  {
    v17 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Device is not connected for %p", buf, 0xCu);
    }
  }

  return sub_100034234((uint64_t)v24);
}

void sub_10063832C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100638364(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  _OWORD v6[2];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 56);
  v6[0] = *(_OWORD *)(a1 + 40);
  v6[1] = v4;
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, _QWORD))(*(_QWORD *)a2 + 88))(a2, v3, v6, *(unsigned int *)(a1 + 72));
}

void sub_1006383A8(os_unfair_lock_s *a1, uint64_t a2, int a3, int a4)
{
  id v7;
  void *v8;
  NSObject *v9;
  const char *v10;
  _QWORD v11[4];
  id v12;
  char v13;
  char v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  int v20;

  v7 = sub_100624724((uint64_t)a1, a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = qword_100999890;
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v10 = "high";
      *(_DWORD *)buf = 136446722;
      if (a3)
        v10 = "low";
      v16 = v10;
      v17 = 2114;
      v18 = v8;
      v19 = 1024;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Crossed the %{public}s LE RSSI threshold for device %{public}@: %d", buf, 0x1Cu);
    }
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100638530;
    v11[3] = &unk_10093D9B0;
    v12 = v8;
    v13 = a3;
    v14 = a4;
    sub_1006169D0(a1, v11);

  }
  else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
  {
    sub_100714030();
  }

}

void sub_100638510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_100638530(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 96))(a2, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(char *)(a1 + 41));
}

uint64_t sub_100638550(uint64_t a1, unint64_t a2, unsigned int a3, __int16 a4, int a5)
{
  const unsigned __int8 *v9;
  unsigned __int8 *v10;
  const unsigned __int8 **v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  NSObject *v18;
  uint64_t *v19;
  NSObject *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t v32;
  const char *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint32_t v36;
  double v37;
  uint64_t v38;
  id v39;
  void *v40;
  NSObject *v41;
  _BYTE *v42;
  void *v43;
  void *v44;
  int v45;
  NSObject *v46;
  _BYTE *v47;
  unsigned int v48;
  NSObject *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  void *v59;
  int v61;
  int v62;
  __int16 v63;
  int v64;
  uint64_t *v65;
  BOOL v66;
  int v67;
  NSObject *v68;
  unint64_t v69;
  int v70;
  NSObject *v71;
  int v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  __int16 v76;
  __int16 v77;
  void *v79[2];
  char v80;
  void *v81[2];
  char v82;
  _QWORD v83[2];
  unint64_t v84;
  _QWORD v85[4];
  __int16 v86;
  __int16 v87;
  __int16 v88;
  __int16 v89;
  __int16 v90;
  unsigned __int8 v91[22];
  _BYTE v92[12];
  __int16 v93;
  unsigned int v94;
  char v95;
  _BYTE __p[12];
  __int16 v97;
  int v98;
  __int16 v99;
  signed int v100;
  __int16 v101;
  int v102;
  _BYTE buf[38];
  int v104;
  __int16 v105;
  int v106;
  uuid_t uu;

  v83[1] = 0;
  v84 = a2;
  v83[0] = 0;
  sub_10003415C((uint64_t)v83, a1 + 120);
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  v9 = *(const unsigned __int8 **)(a1 + 376);
  if (v9 != (const unsigned __int8 *)(a1 + 384))
  {
    while (*((_QWORD *)v9 + 6) != a2)
    {
      v10 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
      if (v10)
      {
        do
        {
          v11 = (const unsigned __int8 **)v10;
          v10 = *(unsigned __int8 **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (const unsigned __int8 **)*((_QWORD *)v9 + 2);
          v66 = *v11 == v9;
          v9 = (const unsigned __int8 *)v11;
        }
        while (!v66);
      }
      v9 = (const unsigned __int8 *)v11;
      if (v11 == (const unsigned __int8 **)(a1 + 384))
        goto LABEL_11;
    }
    uuid_copy(uu, v9 + 32);
  }
LABEL_11:
  if (uuid_is_null(uu))
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_10071405C();
    return sub_100034234((uint64_t)v83);
  }
  v12 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 944))(v12))
  {
    v76 = 0;
    v77 = 0;
    goto LABEL_46;
  }
  v13 = *(_QWORD **)(a1 + 528);
  if (!v13)
    goto LABEL_26;
  v14 = a1 + 528;
  do
  {
    v15 = v13[4];
    v16 = v15 >= v84;
    if (v15 >= v84)
      v17 = v13;
    else
      v17 = v13 + 1;
    if (v16)
      v14 = (uint64_t)v13;
    v13 = (_QWORD *)*v17;
  }
  while (*v17);
  if (v14 != a1 + 528 && v84 >= *(_QWORD *)(v14 + 32))
  {
    v61 = *(unsigned __int16 *)(v14 + 46);
    v62 = *(unsigned __int16 *)(v14 + 48);
    v63 = *(_WORD *)(v14 + 50);
    v64 = *(_DWORD *)(v14 + 52);
    *(_QWORD *)buf = &v84;
    v65 = sub_10064682C((uint64_t **)(a1 + 520), &v84, (uint64_t)&unk_100740F58, (uint64_t **)buf);
    if (v62)
      v66 = 0;
    else
      v66 = v61 == 1;
    if (v66)
      v67 = 0;
    else
      v67 = v64;
    *((_WORD *)v65 + 20) = a3;
    *((_WORD *)v65 + 21) = a4;
    *((_WORD *)v65 + 22) = a5;
    v76 = v61;
    v77 = v62;
    *((_WORD *)v65 + 23) = v61;
    *((_WORD *)v65 + 24) = v62;
    *((_WORD *)v65 + 25) = v63;
    *((_DWORD *)v65 + 13) = v67;
    v68 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v84;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Updated previously stored connection parameters for handle %p.", buf, 0xCu);
    }
  }
  else
  {
LABEL_26:
    v18 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "No previously stored connection parameters. Saving new parameters now. Subrate factor & Continuation number initialized to 0.", buf, 2u);
    }
    *(_QWORD *)buf = &v84;
    v19 = sub_10064682C((uint64_t **)(a1 + 520), &v84, (uint64_t)&unk_100740F58, (uint64_t **)buf);
    v76 = 0;
    v77 = 0;
    *((_WORD *)v19 + 20) = a3;
    *((_WORD *)v19 + 21) = a4;
    *((_WORD *)v19 + 22) = a5;
    *(uint64_t *)((char *)v19 + 46) = 0;
    *((_WORD *)v19 + 27) = 0;
  }
  v20 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v75 = v84;
    *(_QWORD *)__p = &v84;
    v74 = *((unsigned __int16 *)sub_10064682C((uint64_t **)(a1 + 520), &v84, (uint64_t)&unk_100740F58, (uint64_t **)__p)
          + 20);
    *(_QWORD *)__p = &v84;
    v21 = *((unsigned __int16 *)sub_10064682C((uint64_t **)(a1 + 520), &v84, (uint64_t)&unk_100740F58, (uint64_t **)__p)
          + 21);
    *(_QWORD *)__p = &v84;
    v22 = *((unsigned __int16 *)sub_10064682C((uint64_t **)(a1 + 520), &v84, (uint64_t)&unk_100740F58, (uint64_t **)__p)
          + 22);
    *(_QWORD *)__p = &v84;
    v23 = *((unsigned __int16 *)sub_10064682C((uint64_t **)(a1 + 520), &v84, (uint64_t)&unk_100740F58, (uint64_t **)__p)
          + 23);
    *(_QWORD *)__p = &v84;
    v24 = *((unsigned __int16 *)sub_10064682C((uint64_t **)(a1 + 520), &v84, (uint64_t)&unk_100740F58, (uint64_t **)__p)
          + 24);
    *(_QWORD *)__p = &v84;
    v25 = *((_DWORD *)sub_10064682C((uint64_t **)(a1 + 520), &v84, (uint64_t)&unk_100740F58, (uint64_t **)__p) + 13);
    *(_DWORD *)buf = 134219520;
    *(_QWORD *)&buf[4] = v75;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v74;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v21;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v22;
    *(_WORD *)&buf[30] = 1024;
    *(_DWORD *)&buf[32] = v23;
    *(_WORD *)&buf[36] = 1024;
    v104 = v24;
    v105 = 1024;
    v106 = v25;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "handleConnectionParametersUpdatedCallback: Connection parameters for handle %p. Connection Interval:%d Peripheral latency:%d Supervision Timeout=%d Subrate Factor: %d Continuation Number: %d. Subrating Status: %d", buf, 0x30u);
  }
  v26 = *(_QWORD **)(a1 + 504);
  if (v26)
  {
    v27 = v84;
    v28 = a1 + 504;
    do
    {
      v29 = v26[4];
      v30 = v29 >= v84;
      if (v29 >= v84)
        v31 = v26;
      else
        v31 = v26 + 1;
      if (v30)
        v28 = (uint64_t)v26;
      v26 = (_QWORD *)*v31;
    }
    while (*v31);
    if (v28 != a1 + 504 && v84 >= *(_QWORD *)(v28 + 32))
    {
      v69 = *(_QWORD *)(v28 + 40);
      v70 = *(unsigned __int16 *)(v28 + 48);
      v71 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)&buf[4] = WORD1(v69);
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = WORD2(v69);
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = (unsigned __int16)v69;
        *(_WORD *)&buf[20] = 1024;
        *(_DWORD *)&buf[22] = HIWORD(v69);
        *(_WORD *)&buf[26] = 1024;
        *(_DWORD *)&buf[28] = v70;
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "Locally initiated connection parameter update is now complete. Proceeding with sending connection subrating parameters: subrateMin:%d subrateMax:%d maxLatency:%d continuationNumber=%d supervisionTimeout=%d", buf, 0x20u);
        v27 = v84;
      }
      v72 = sub_1006237B8(a1, v27, v69, v70);
      v73 = qword_100999890;
      if (!os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        goto LABEL_46;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v72;
      v33 = "Sent LE Connection Subrating Request with status: %d";
      v34 = v73;
      v35 = OS_LOG_TYPE_DEFAULT;
      v36 = 8;
      goto LABEL_44;
    }
  }
  v32 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    v33 = "No connection subrating requests pending for this handle";
    v34 = v32;
    v35 = OS_LOG_TYPE_INFO;
    v36 = 2;
LABEL_44:
    _os_log_impl((void *)&_mh_execute_header, v34, v35, v33, buf, v36);
  }
LABEL_46:
  if (a3 >= 0x308)
    v37 = 0.35;
  else
    v37 = 0.75;
  v38 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 424))(v38))
  {
    v39 = sub_100030DF4(uu);
    v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    if (sub_10065E0D4((uint64_t)off_1009778C0, v40))
    {
      if (a3 > 0xB)
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v44 = off_1009778C0;
        sub_100091AE8(v79, "HIDDevicePoorBehavior");
        v45 = sub_10000628C((uint64_t)v44, v40, (uint64_t)v79);
        if (v80 < 0)
          operator delete(v79[0]);
        if (v45)
        {
          v46 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_INFO))
          {
            sub_1003D2DB4(uu, buf);
            v47 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)__p = 136446210;
            *(_QWORD *)&__p[4] = v47;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "Connection Update: Unsetting tag for LE_HID \"%{public}s\".", __p, 0xCu);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10093DDE8);
          sub_100653B18((uint64_t)off_1009778C0, v40, CFSTR("HIDDevicePoorBehavior"));
        }
      }
      else
      {
        v41 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          memset(buf, 0, 37);
          uuid_unparse_upper(uu, buf);
          sub_100091AE8(__p, buf);
          v42 = v100 >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)v92 = 136446466;
          *(_QWORD *)&v92[4] = v42;
          v93 = 1024;
          v94 = a3;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Connection Update: LE HID \"%{public}s\" has interval less than 15ms: %d. Setting tag.", v92, 0x12u);
          if (SHIBYTE(v100) < 0)
            operator delete(*(void **)__p);
        }
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v43 = off_1009778C0;
        sub_100091AE8(v81, "HIDDevicePoorBehavior");
        sub_1006576F0((uint64_t)v43, v40, (unsigned __int8 *)v81);
        if (v82 < 0)
          operator delete(v81[0]);
      }
    }

  }
  v48 = (int)(v37 * (double)(10 * a5) / ((double)a3 * 1.25));
  v49 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    memset(buf, 0, 37);
    uuid_unparse_upper(uu, buf);
    sub_100091AE8(v92, buf);
    v50 = v95 >= 0 ? v92 : *(_BYTE **)v92;
    *(_DWORD *)__p = 136446978;
    *(_QWORD *)&__p[4] = v50;
    v97 = 1024;
    v98 = (int)(v37 * (double)(10 * a5) / ((double)a3 * 1.25));
    v99 = 1024;
    v100 = a3;
    v101 = 1024;
    v102 = a5;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Connection Update: setting LE device \"%{public}s\" connection threshold to %d events with interval %d, LSTO %d", __p, 0x1Eu);
    if (v95 < 0)
      operator delete(*(void **)v92);
  }
  v51 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 336))(v51))
    goto LABEL_89;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v52 = (uint64_t)off_1009778C0;
  v53 = sub_100030DF4(uu);
  v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
  LOBYTE(v52) = sub_10065BD74(v52, v54);

  if ((v52 & 1) != 0)
  {
LABEL_89:
    v55 = sub_1000438A4();
    if (v48 >= 0xFF)
      v56 = 255;
    else
      v56 = v48;
    if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v55 + 1072))(v55, v84, v56)
      && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    {
      sub_100713458();
    }
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v57 = off_1009778C0;
  v58 = sub_100030DF4(uu);
  v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
  sub_10065D844((uint64_t)v57, v59, a3);

  v85[0] = _NSConcreteStackBlock;
  v85[1] = 3321888768;
  v85[2] = sub_1006390B4;
  v85[3] = &unk_10093D9D0;
  uuid_copy(v91, uu);
  v86 = a3;
  v87 = a4;
  v88 = a5;
  v89 = v76;
  v90 = v77;
  sub_1006169D0((os_unfair_lock_s *)a1, v85);
  return sub_100034234((uint64_t)v83);
}

void sub_100639018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  void *v26;

  sub_100034234((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_1006390B4(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;

  v3 = sub_100030DF4((const unsigned __int8 *)(a1 + 42));
  v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);

}

void sub_100639118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10063912C(uint64_t a1, uint64_t a2)
{
  uuid_copy((unsigned __int8 *)(a1 + 42), (const unsigned __int8 *)(a2 + 42));
}

uint64_t sub_10063913C(uint64_t a1, unint64_t a2, int a3, __int16 a4, __int16 a5, __int16 a6)
{
  __int16 v6;
  const unsigned __int8 *v13;
  unsigned __int8 *v14;
  const unsigned __int8 **v15;
  BOOL v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;
  NSObject *v23;
  __int16 v24;
  int v25;
  uint64_t *v26;
  NSObject *v27;
  uint64_t *v28;
  int v29;
  NSObject *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  BOOL v35;
  _QWORD *v36;
  NSObject *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  NSObject *v43;
  unint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v52;
  int v53;
  NSObject *log;
  _QWORD v55[2];
  unint64_t v56;
  unint64_t *v57;
  _QWORD v58[6];
  unsigned __int8 v59[16];
  _BYTE buf[18];
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  uuid_t uu;

  v55[1] = 0;
  v56 = a2;
  v55[0] = 0;
  sub_10003415C((uint64_t)v55, a1 + 120);
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  v13 = *(const unsigned __int8 **)(a1 + 376);
  if (v13 != (const unsigned __int8 *)(a1 + 384))
  {
    while (*((_QWORD *)v13 + 6) != a2)
    {
      v14 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
      if (v14)
      {
        do
        {
          v15 = (const unsigned __int8 **)v14;
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (const unsigned __int8 **)*((_QWORD *)v13 + 2);
          v16 = *v15 == v13;
          v13 = (const unsigned __int8 *)v15;
        }
        while (!v16);
      }
      v13 = (const unsigned __int8 *)v15;
      if (v15 == (const unsigned __int8 **)(a1 + 384))
        goto LABEL_11;
    }
    uuid_copy(uu, v13 + 32);
  }
LABEL_11:
  if (uuid_is_null(uu))
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_10071405C();
  }
  else
  {
    v17 = *(_QWORD **)(a1 + 528);
    if (!v17)
      goto LABEL_25;
    v18 = v56;
    v19 = (_QWORD *)(a1 + 528);
    do
    {
      v20 = v17[4];
      v21 = v20 >= v56;
      if (v20 >= v56)
        v22 = v17;
      else
        v22 = v17 + 1;
      if (v21)
        v19 = v17;
      v17 = (_QWORD *)*v22;
    }
    while (*v22);
    if (v19 != (_QWORD *)(a1 + 528) && v56 >= v19[4])
    {
      v24 = *((_WORD *)v19 + 20);
      v6 = *((_WORD *)v19 + 25);
      v25 = *((_DWORD *)v19 + 13);
      log = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "Updated previously stored connection parameters for handle %p.", buf, 0xCu);
      }
    }
    else
    {
LABEL_25:
      v23 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "No previously stored connection parameters. Saving new parameters now. Connection Interval initialized to 0.", buf, 2u);
      }
      v24 = 0;
      v25 = 0;
    }
    *(_QWORD *)buf = &v56;
    v26 = sub_10064682C((uint64_t **)(a1 + 520), &v56, (uint64_t)&unk_100740F58, (uint64_t **)buf);
    *((_WORD *)v26 + 20) = v24;
    *((_WORD *)v26 + 21) = a4;
    *((_WORD *)v26 + 22) = a6;
    *((_WORD *)v26 + 23) = a3;
    *((_WORD *)v26 + 24) = a5;
    *((_WORD *)v26 + 25) = v6;
    *((_DWORD *)v26 + 13) = v25;
    if (a3 == 1
      && (*(_QWORD *)buf = &v56,
          *((int *)sub_10064682C((uint64_t **)(a1 + 520), &v56, (uint64_t)&unk_100740F58, (uint64_t **)buf) + 13) <= 1))
    {
      v27 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
      {
        v57 = &v56;
        v53 = *((_DWORD *)sub_10064682C((uint64_t **)(a1 + 520), &v56, (uint64_t)&unk_100740F58, (uint64_t **)&v57) + 13);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v53;
        *(_WORD *)&buf[8] = 2048;
        *(_QWORD *)&buf[10] = v56;
        _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Connection subrating status was %d to handle %p. Setting status to OFF.", buf, 0x12u);
      }
      *(_QWORD *)buf = &v56;
      v28 = sub_10064682C((uint64_t **)(a1 + 520), &v56, (uint64_t)&unk_100740F58, (uint64_t **)buf);
      v29 = 0;
    }
    else
    {
      v30 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
      {
        v57 = &v56;
        v52 = *((_DWORD *)sub_10064682C((uint64_t **)(a1 + 520), &v56, (uint64_t)&unk_100740F58, (uint64_t **)&v57) + 13);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v52;
        *(_WORD *)&buf[8] = 2048;
        *(_QWORD *)&buf[10] = v56;
        _os_log_debug_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "Connection subrating status was %d to handle %p. Setting status to ON.", buf, 0x12u);
      }
      *(_QWORD *)buf = &v56;
      v28 = sub_10064682C((uint64_t **)(a1 + 520), &v56, (uint64_t)&unk_100740F58, (uint64_t **)buf);
      v29 = 2;
    }
    *((_DWORD *)v28 + 13) = v29;
    v31 = *(_QWORD **)(a1 + 504);
    if (v31)
    {
      v32 = v56;
      v33 = (_QWORD *)(a1 + 504);
      do
      {
        v34 = v31[4];
        v35 = v34 >= v56;
        if (v34 >= v56)
          v36 = v31;
        else
          v36 = v31 + 1;
        if (v35)
          v33 = v31;
        v31 = (_QWORD *)*v36;
      }
      while (*v36);
      if (v33 != (_QWORD *)(a1 + 504) && v56 >= v33[4])
      {
        v37 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          v38 = *((unsigned __int16 *)v33 + 24);
          v39 = *((unsigned __int16 *)v33 + 23);
          v40 = *((unsigned __int16 *)v33 + 22);
          v41 = *((unsigned __int16 *)v33 + 21);
          v42 = *((unsigned __int16 *)v33 + 20);
          *(_DWORD *)buf = 134219264;
          *(_QWORD *)&buf[4] = v32;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v41;
          v61 = 1024;
          v62 = v40;
          v63 = 1024;
          v64 = v42;
          v65 = 1024;
          v66 = v39;
          v67 = 1024;
          v68 = v38;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Locally initiated connection subrating update to handle %p is now complete. Connection subrating parameters requested: subrateMin:%d subrateMax:%d maxLatency:%d continuationNumber=%d supervisionTimeout=%d", buf, 0x2Au);
        }
        sub_100015ECC(a1 + 496, &v56);
      }
    }
    v43 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v44 = v56;
      v57 = &v56;
      v45 = *((unsigned __int16 *)sub_10064682C((uint64_t **)(a1 + 520), &v56, (uint64_t)&unk_100740F58, (uint64_t **)&v57)
            + 20);
      v57 = &v56;
      v46 = *((unsigned __int16 *)sub_10064682C((uint64_t **)(a1 + 520), &v56, (uint64_t)&unk_100740F58, (uint64_t **)&v57)
            + 21);
      v57 = &v56;
      v47 = *((unsigned __int16 *)sub_10064682C((uint64_t **)(a1 + 520), &v56, (uint64_t)&unk_100740F58, (uint64_t **)&v57)
            + 22);
      v57 = &v56;
      v48 = *((unsigned __int16 *)sub_10064682C((uint64_t **)(a1 + 520), &v56, (uint64_t)&unk_100740F58, (uint64_t **)&v57)
            + 23);
      v57 = &v56;
      v49 = *((unsigned __int16 *)sub_10064682C((uint64_t **)(a1 + 520), &v56, (uint64_t)&unk_100740F58, (uint64_t **)&v57)
            + 24);
      v57 = &v56;
      v50 = *((_DWORD *)sub_10064682C((uint64_t **)(a1 + 520), &v56, (uint64_t)&unk_100740F58, (uint64_t **)&v57) + 13);
      *(_DWORD *)buf = 134219520;
      *(_QWORD *)&buf[4] = v44;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v45;
      v61 = 1024;
      v62 = v46;
      v63 = 1024;
      v64 = v47;
      v65 = 1024;
      v66 = v48;
      v67 = 1024;
      v68 = v49;
      v69 = 1024;
      v70 = v50;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "handleConnectionSubratingCompleted: Updated previously stored connection parameters for handle %p. Connection Interval:%d Peripheral latency:%d Supervision Timeout=%d Subrate Factor: %d Continuation Number: %d. Subrating Status set to %d", buf, 0x30u);
    }
    v58[0] = _NSConcreteStackBlock;
    v58[1] = 3321888768;
    v58[2] = sub_100639844;
    v58[3] = &unk_10093DA00;
    v58[4] = a1;
    uuid_copy(v59, uu);
    v58[5] = v56;
    sub_1006169D0((os_unfair_lock_s *)a1, v58);
  }
  return sub_100034234((uint64_t)v55);
}

void sub_10063980C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100639844(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t **v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v3 = (uint64_t *)a1;
  v4 = *(uint64_t ***)(a1 + 32);
  v5 = sub_100030DF4((const unsigned __int8 *)(a1 + 48));
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v4 += 65;
  v3 += 5;
  v12 = v3;
  v7 = *((unsigned __int16 *)sub_10064682C(v4, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v12) + 20);
  v12 = v3;
  v8 = *((unsigned __int16 *)sub_10064682C(v4, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v12) + 21);
  v12 = v3;
  v9 = *((unsigned __int16 *)sub_10064682C(v4, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v12) + 22);
  v12 = v3;
  v10 = *((unsigned __int16 *)sub_10064682C(v4, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v12) + 23);
  v12 = v3;
  v11 = sub_10064682C(v4, (unint64_t *)v3, (uint64_t)&unk_100740F58, &v12);
  (*(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, v6, v7, v8, v9, v10, *((unsigned __int16 *)v11 + 24));

}

void sub_10063997C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10063998C(uint64_t a1, unint64_t a2, int a3, int a4, char a5, int a6)
{
  const unsigned __int8 *v12;
  unsigned __int8 *v13;
  const unsigned __int8 **v14;
  BOOL v15;
  int is_null;
  NSObject *v17;
  void **v18;
  unsigned int v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  BOOL v49;
  _QWORD *v50;
  NSObject *v51;
  uint64_t *v52;
  __int16 v53;
  __int16 v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  BOOL v59;
  _QWORD *v60;
  unint64_t v61;
  int v62;
  NSObject *v63;
  void *v64;
  id v65;
  void *v66;
  NSObject *v68;
  NSObject *v69;
  int v70;
  __int16 v71;
  __int16 v72;
  void *v73[2];
  char v74;
  _QWORD v75[2];
  unint64_t v76;
  _QWORD v77[4];
  int v78;
  __int16 v79;
  __int16 v80;
  __int16 v81;
  __int16 v82;
  __int16 v83;
  unsigned __int8 v84[18];
  void *__p[2];
  char v86;
  uint8_t buf[4];
  void **v88;
  __int16 v89;
  int v90;
  uuid_t uu;
  uuid_string_t out;

  v75[1] = 0;
  v76 = a2;
  v75[0] = 0;
  sub_10003415C((uint64_t)v75, a1 + 120);
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  v12 = *(const unsigned __int8 **)(a1 + 376);
  if (v12 != (const unsigned __int8 *)(a1 + 384))
  {
    while (*((_QWORD *)v12 + 6) != a2)
    {
      v13 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
      if (v13)
      {
        do
        {
          v14 = (const unsigned __int8 **)v13;
          v13 = *(unsigned __int8 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (const unsigned __int8 **)*((_QWORD *)v12 + 2);
          v15 = *v14 == v12;
          v12 = (const unsigned __int8 *)v14;
        }
        while (!v15);
      }
      v12 = (const unsigned __int8 *)v14;
      if (v14 == (const unsigned __int8 **)(a1 + 384))
        goto LABEL_11;
    }
    uuid_copy(uu, v12 + 32);
  }
LABEL_11:
  is_null = uuid_is_null(uu);
  v17 = qword_100999890;
  if (is_null)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_10071405C();
  }
  else if (a3)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    {
      sub_1003D2DB4(uu, out);
      sub_1007140EC();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      memset(out, 0, sizeof(out));
      uuid_unparse_upper(uu, out);
      sub_100091AE8(__p, out);
      v18 = v86 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v88 = v18;
      v89 = 1024;
      v90 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Le link \"%{public}s\" is ready with status %{bluetooth:OI_STATUS}u", buf, 0x12u);
      if (v86 < 0)
        operator delete(__p[0]);
    }
    buf[0] = 0;
    sub_100043758(buf);
    v19 = sub_1002215B4(v76);
    v72 = sub_1002215F8(v76);
    v71 = sub_10022163C(v76);
    sub_10004339C(buf);
    v20 = sub_100030DF4(uu);
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    sub_10061C7AC(a1, v21);

    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    v22 = off_1009778C0;
    v23 = sub_100030DF4(uu);
    v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    sub_10065B804((uint64_t)v22, v24, a5);

    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    v25 = off_1009778C0;
    v26 = sub_100030DF4(uu);
    v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    sub_10065BAC8((uint64_t)v25, v27, a6);

    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    v28 = off_1009778C0;
    v29 = sub_100030DF4(uu);
    v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    sub_10065BBDC((uint64_t)v28, v30, (int)((double)v19 * 1.25));

    v31 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 736))(v31))
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v32 = off_1009778C0;
      v33 = sub_100030DF4(uu);
      v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
      LODWORD(v32) = sub_100659CF0((uint64_t)v32, v34);

      if ((_DWORD)v32)
      {
        v35 = sub_100030DF4(uu);
        v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
        sub_100030BCC(out, v36);
        sub_10063A2A0(a1, (unsigned __int8 *)out);

      }
    }
    if (v19)
    {
      v37 = v76;
      *(_QWORD *)out = uu;
      sub_100646208((uint64_t **)(a1 + 400), uu, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)out)[6] = v37;
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v38 = off_1009778C0;
      v39 = sub_100030DF4(uu);
      v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
      sub_10065C934((uint64_t)v38, v40, *(_DWORD *)(v76 + 144));

      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v41 = off_1009778C0;
      v42 = sub_100030DF4(uu);
      v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
      sub_10065CB44((uint64_t)v41, v43);

      v44 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v44 + 944))(v44))
      {
        v45 = *(_QWORD **)(a1 + 528);
        if (!v45)
          goto LABEL_51;
        v46 = v76;
        v47 = a1 + 528;
        do
        {
          v48 = v45[4];
          v49 = v48 >= v76;
          if (v48 >= v76)
            v50 = v45;
          else
            v50 = v45 + 1;
          if (v49)
            v47 = (uint64_t)v45;
          v45 = (_QWORD *)*v50;
        }
        while (*v50);
        if (v47 != a1 + 528 && v76 >= *(_QWORD *)(v47 + 32))
        {
          v53 = *(_WORD *)(v47 + 46);
          v54 = *(_WORD *)(v47 + 48);
          v68 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)out = 134217984;
            *(_QWORD *)&out[4] = v46;
            _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Updated previously stored connection parameters for handle %p.", (uint8_t *)out, 0xCu);
          }
        }
        else
        {
LABEL_51:
          v51 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)out = 0;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "No previously stored connection parameters. Saving new parameters now. Subrate factor & Continuation number initialized to 0.", (uint8_t *)out, 2u);
          }
          *(_QWORD *)out = &v76;
          v52 = sub_10064682C((uint64_t **)(a1 + 520), &v76, (uint64_t)&unk_100740F58, (uint64_t **)out);
          v53 = 0;
          v54 = 0;
          *((_WORD *)v52 + 20) = v19;
          *((_WORD *)v52 + 21) = v72;
          *((_WORD *)v52 + 22) = v71;
          *(uint64_t *)((char *)v52 + 46) = 0;
          *((_WORD *)v52 + 27) = 0;
        }
        v55 = *(_QWORD **)(a1 + 504);
        if (v55)
        {
          v56 = v76;
          v57 = a1 + 504;
          do
          {
            v58 = v55[4];
            v59 = v58 >= v76;
            if (v58 >= v76)
              v60 = v55;
            else
              v60 = v55 + 1;
            if (v59)
              v57 = (uint64_t)v55;
            v55 = (_QWORD *)*v60;
          }
          while (*v60);
          if (v57 != a1 + 504 && v76 >= *(_QWORD *)(v57 + 32))
          {
            v61 = *(_QWORD *)(v57 + 40);
            v69 = qword_100999890;
            v70 = *(unsigned __int16 *)(v57 + 48);
            if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)out = 67110144;
              *(_DWORD *)&out[4] = WORD1(v61);
              *(_WORD *)&out[8] = 1024;
              *(_DWORD *)&out[10] = WORD2(v61);
              *(_WORD *)&out[14] = 1024;
              *(_DWORD *)&out[16] = (unsigned __int16)v61;
              *(_WORD *)&out[20] = 1024;
              *(_DWORD *)&out[22] = HIWORD(v61);
              *(_WORD *)&out[26] = 1024;
              *(_DWORD *)&out[28] = v70;
              _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "LE Link is now ready. Proceeding with sending connection subrating parameters: subrateMin:%d subrateMax:%d maxLatency:%d continuationNumber=%d supervisionTimeout=%d", (uint8_t *)out, 0x20u);
              v56 = v76;
            }
            v62 = sub_1006237B8(a1, v56, v61, v70);
            v63 = qword_100999890;
            if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)out = 67109120;
              *(_DWORD *)&out[4] = v62;
              _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Sent LE Connection Subrating Request with status: %d", (uint8_t *)out, 8u);
            }
          }
        }
      }
      else
      {
        v53 = 0;
        v54 = 0;
      }
      v77[0] = _NSConcreteStackBlock;
      v77[1] = 3321888768;
      v77[2] = sub_10063A2F4;
      v77[3] = &unk_10093DA30;
      uuid_copy(v84, uu);
      v78 = 0;
      v79 = v19;
      v80 = v72;
      v81 = v71;
      v82 = v53;
      v83 = v54;
      sub_1006169D0((os_unfair_lock_s *)a1, v77);
    }
    else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    {
      sub_1007140C0();
    }
    if (a4)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v64 = off_1009778C0;
      v65 = sub_100030DF4(uu);
      v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
      sub_100091AE8(v73, "requiresCTOFix");
      sub_1006576F0((uint64_t)v64, v66, (unsigned __int8 *)v73);
      if (v74 < 0)
        operator delete(v73[0]);

    }
    sub_100043728(buf);
  }
  return sub_100034234((uint64_t)v75);
}

void sub_10063A1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  sub_100043728(&a34);
  sub_100034234((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_10063A2A0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  unsigned __int16 *v5;

  v5 = 0;
  result = sub_100623C54(a1, a2, &v5);
  if ((_DWORD)result)
  {
    v4 = 0;
    v3 = sub_1000438A4();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, char *, uint64_t))(*(_QWORD *)v3 + 1768))(v3, *v5, 1, 0, &v4, 33);
  }
  return result;
}

void sub_10063A2F4(uint64_t a1, uint64_t a2)
{
  const unsigned __int8 *v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v3 = (const unsigned __int8 *)(a1 + 46);
  v4 = sub_100030DF4((const unsigned __int8 *)(a1 + 46));
  v6 = (id)objc_claimAutoreleasedReturnValue(v4);
  (**(void (***)(uint64_t))a2)(a2);

  v5 = sub_100030DF4(v3);
  v7 = (id)objc_claimAutoreleasedReturnValue(v5);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);

}

void sub_10063A394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_10063A3AC(uint64_t a1, uint64_t a2)
{
  uuid_copy((unsigned __int8 *)(a1 + 46), (const unsigned __int8 *)(a2 + 46));
}

uint64_t sub_10063A3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  const unsigned __int8 *v16;
  unsigned __int8 *v17;
  const unsigned __int8 **v18;
  BOOL v19;
  _QWORD v21[2];
  _QWORD v22[9];
  int v23;
  unsigned __int8 v24[20];
  uuid_t uu;

  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 120);
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  v16 = *(const unsigned __int8 **)(a1 + 376);
  if (v16 != (const unsigned __int8 *)(a1 + 384))
  {
    while (*((_QWORD *)v16 + 6) != a2)
    {
      v17 = (unsigned __int8 *)*((_QWORD *)v16 + 1);
      if (v17)
      {
        do
        {
          v18 = (const unsigned __int8 **)v17;
          v17 = *(unsigned __int8 **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (const unsigned __int8 **)*((_QWORD *)v16 + 2);
          v19 = *v18 == v16;
          v16 = (const unsigned __int8 *)v18;
        }
        while (!v19);
      }
      v16 = (const unsigned __int8 *)v18;
      if (v18 == (const unsigned __int8 **)(a1 + 384))
        goto LABEL_11;
    }
    uuid_copy(uu, v16 + 32);
  }
LABEL_11:
  if (uuid_is_null(uu) && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_FAULT))
    sub_100714134();
  if (!uuid_is_null(uu))
  {
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3321888768;
    v22[2] = sub_10063A58C;
    v22[3] = &unk_10093DA60;
    v22[4] = a8;
    uuid_copy(v24, uu);
    v22[5] = a3;
    v22[6] = a4;
    v22[7] = a5;
    v22[8] = a6;
    v23 = a7;
    sub_1006169D0((os_unfair_lock_s *)a1, v22);
  }
  return sub_100034234((uint64_t)v21);
}

void sub_10063A568(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10063A58C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  id v5;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = sub_100030DF4((const unsigned __int8 *)(a1 + 76));
  v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v3);

}

void sub_10063A5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10063A60C(uint64_t a1, uint64_t a2)
{
  uuid_copy((unsigned __int8 *)(a1 + 76), (const unsigned __int8 *)(a2 + 76));
}

uint64_t sub_10063A61C(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 120);
  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "All devices have been disconnected", v4, 2u);
  }
  *(_BYTE *)(a1 + 1000) = 0;
  sub_1002A9188((pthread_cond_t *)(a1 + 952));
  return sub_100034234((uint64_t)v5);
}

void sub_10063A6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10063A6BC(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  int v12;
  int v13;
  double v14;
  unsigned int v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  void *v22;
  uint64_t v23;
  uint8_t v24;
  _BYTE v25[15];
  uint8_t v26;
  _BYTE v27[11];
  unsigned __int16 v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _QWORD v34[2];
  uint8_t buf[4];
  uint64_t v36;
  __int16 v37;
  unsigned int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  _BYTE v43[128];

  v34[0] = 0;
  v34[1] = 0;
  sub_10003415C((uint64_t)v34, a1 + 120);
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v2 = sub_100069E14(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v30, v43, 16);
  if (v4)
  {
    v23 = *(_QWORD *)v31;
    v5 = a1 + 376;
    v6 = a1 + 384;
    v22 = v3;
LABEL_3:
    v7 = 0;
    while (1)
    {
      if (*(_QWORD *)v31 != v23)
        objc_enumerationMutation(v3);
      v8 = *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * v7);
      sub_100030BCC(buf, v8);
      v9 = sub_10000C5B8(v5, buf);
      if (v6 == v9)
        break;
      v10 = *(_QWORD *)(v9 + 48);
      v29 = 0;
      sub_100043758(&v29);
      v11 = sub_10019AC00(v10);
      v28 = 0;
      sub_1002213E8(v10, &v28);
      v12 = sub_10022163C(v10);
      sub_10004339C(&v29);
      if (v11)
      {
        v13 = v28;
        if (v28 >= 0x308u)
          v14 = 0.35;
        else
          v14 = 0.75;
        v15 = (int)(v14 * (double)(10 * v12) / ((double)v28 * 1.25));
        v16 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138544130;
          v36 = v8;
          v37 = 1024;
          v38 = v15;
          v39 = 1024;
          v40 = v13;
          v41 = 1024;
          v42 = v12;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "setVoicePrioritizationThreshold: setting LE device \"%{public}@\" connection threshold to %d events with interval %d, LSTO %d", buf, 0x1Eu);
        }
        v3 = v22;
        v17 = sub_1000438A4();
        if (v15 >= 0xFF)
          v18 = 255;
        else
          v18 = v15;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 1072))(v17, v10, v18))
        {
          v19 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
            sub_100714194(&v26, v27, v19);
        }
      }
      else
      {
        v20 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
          sub_1007141C8(&v24, v25, v20);
      }
      sub_100043728(&v29);
      if (v4 == (id)++v7)
      {
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v30, v43, 16);
        if (v4)
          goto LABEL_3;
        break;
      }
    }
  }

  return sub_100034234((uint64_t)v34);
}

void sub_10063A9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;

  sub_100034234((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_10063AA04(uint64_t result, unsigned __int8 *a2, int a3, int a4, unsigned int a5, __int16 a6, unsigned int a7, float a8, float a9, float a10)
{
  unsigned int v10;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  id v25;
  void *v26;
  int v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  unsigned __int8 v38;
  void *v39;
  id v40;
  void *v41;
  int v42;
  void *v43;
  id v44;
  void *v45;
  int v46;
  NSObject *v47;
  _BYTE *v48;
  float v49;
  int v50;
  uint64_t v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  void *v59;
  _BYTE *v60;
  void *v61[2];
  char v62;
  void *v63[2];
  char v64;
  void *__p[2];
  char v66;
  void *v67[2];
  char v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  _QWORD v73[2];
  uint8_t buf[8];
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  unsigned int v82;
  __int16 v83;
  unsigned int v84;

  if (a8 != 0.0)
  {
    v10 = a7;
    if (a10 != 0.0 && a7 != 0)
    {
      v20 = result;
      v73[0] = 0;
      v73[1] = 0;
      sub_10003415C((uint64_t)v73, result + 120);
      *(_QWORD *)buf = a2;
      v21 = *((unsigned __int16 *)sub_100647F5C((uint64_t **)(v20 + 832), a2, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)buf)+ 29);
      v22 = sub_10000C5B8(v20 + 376, a2);
      if (v20 + 384 != v22)
      {
        v60 = *(_BYTE **)(v22 + 48);
        if (v20 + 840 == sub_100646FD8(v20 + 832, a2))
          v21 = 0;
        *(_QWORD *)buf = a2;
        v23 = sub_100647F5C((uint64_t **)(v20 + 832), a2, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)buf);
        *(uint64_t *)((char *)v23 + 44) = 0x5010100000002;
        *((_WORD *)v23 + 26) = (int)a9;
        *((_WORD *)v23 + 27) = a3;
        *((_WORD *)v23 + 28) = a4;
        *((_WORD *)v23 + 29) = a5;
        *((_WORD *)v23 + 30) = a6;
        *((_WORD *)v23 + 31) = v10;
        *((float *)v23 + 16) = a8;
        *((float *)v23 + 17) = a9;
        *((float *)v23 + 18) = a10;
        *((_DWORD *)v23 + 19) = 0;
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v24 = off_1009778C0;
        v25 = sub_100030DF4(a2);
        v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        sub_100091AE8(v71, "A2051");
        if ((sub_10000628C((uint64_t)v24, v26, (uint64_t)v71) & 1) != 0)
        {
          v27 = 1;
        }
        else
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10093DDE8);
          v28 = off_1009778C0;
          v29 = sub_100030DF4(a2);
          v59 = (void *)objc_claimAutoreleasedReturnValue(v29);
          sub_100091AE8(v69, "A1603");
          if ((sub_10000628C((uint64_t)v28, v59, (uint64_t)v69) & 1) != 0)
          {
            v27 = 1;
          }
          else
          {
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10093DDE8);
            v30 = off_1009778C0;
            v31 = sub_100030DF4(a2);
            v58 = (void *)objc_claimAutoreleasedReturnValue(v31);
            sub_100091AE8(v67, "A3085");
            if ((sub_10000628C((uint64_t)v30, v58, (uint64_t)v67) & 1) != 0)
            {
              v27 = 1;
            }
            else
            {
              if (qword_1009778C8 != -1)
                dispatch_once(&qword_1009778C8, &stru_10093DDE8);
              v32 = off_1009778C0;
              v33 = sub_100030DF4(a2);
              v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
              sub_100091AE8(__p, "A2538");
              v27 = sub_10000628C((uint64_t)v32, v34, (uint64_t)__p);
              if (v66 < 0)
                operator delete(__p[0]);

            }
            if (v68 < 0)
              operator delete(v67[0]);

          }
          if (v70 < 0)
            operator delete(v69[0]);

        }
        if (v72 < 0)
          operator delete(v71[0]);

        if (v27 && v21 != a5)
        {
          v35 = sub_1000438A4();
          v36 = sub_100030DF4(a2);
          v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
          v38 = v21 + 2;
          if (v21 <= 5)
            v38 = 6;
          (*(void (**)(uint64_t, void *, _QWORD))(*(_QWORD *)v35 + 1008))(v35, v37, v38);

        }
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v39 = off_1009778C0;
        v40 = sub_100030DF4(a2);
        v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
        sub_100091AE8(v63, "BluetoothTVRemote");
        v42 = sub_10000628C((uint64_t)v39, v41, (uint64_t)v63);
        if (v64 < 0)
          operator delete(v63[0]);

        if (v42)
        {
          a4 = 6;
          a3 = 6;
        }
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v43 = off_1009778C0;
        v44 = sub_100030DF4(a2);
        v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
        sub_100091AE8(v61, "requiresCTOFix");
        v46 = sub_10000628C((uint64_t)v43, v45, (uint64_t)v61);
        if (v62 < 0)
          operator delete(v61[0]);

        if (v46)
          v10 = 3000;
        v47 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67110400;
          *(_DWORD *)&buf[4] = (int)a8;
          v75 = 1024;
          v76 = (int)a10;
          v77 = 1024;
          v78 = a3;
          v79 = 1024;
          v80 = a4;
          v81 = 1024;
          v82 = a5;
          v83 = 1024;
          v84 = v10;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Got a profile request to update parameters to %dms->%dms, %d min CE length, %d max CE length, %d latency, and %d timeout", buf, 0x26u);
        }
        buf[0] = 0;
        sub_100043758(buf);
        v48 = v60;
        v49 = (double)v10 / 10.0;
        v50 = sub_100223CB8(v60, (int)(a8 / 1.25), (int)(a9 / 1.25), a5, vcvtps_s32_f32(v49), a3, a4);
        sub_10004339C(buf);
        if (v50 && os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        {
          sub_1007141FC();
          v48 = v60;
        }
        v51 = sub_1000438A4();
        (*(void (**)(uint64_t, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)v51 + 1064))(v51, v48, 1, 0);
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v52 = off_1009778C0;
        v53 = sub_100030DF4(a2);
        v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
        sub_10065BE04((uint64_t)v52, v54, 1);

        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v55 = off_1009778C0;
        v56 = sub_100030DF4(a2);
        v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
        sub_10065BF1C((uint64_t)v55, v57, (int)a9);

        sub_100043728(buf);
      }
      return sub_100034234((uint64_t)v73);
    }
  }
  return result;
}

void sub_10063B0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  void *v50;
  void *v51;

  if (a31 < 0)
    operator delete(__p);

  if (a37 < 0)
    operator delete(a32);

  if (a43 < 0)
    operator delete(a38);

  if (a49 < 0)
    operator delete(a44);

  sub_100034234((uint64_t)&a50);
  _Unwind_Resume(a1);
}

uint64_t sub_10063B1EC(uint64_t a1, unsigned __int8 *a2, _WORD *a3, _WORD *a4, _WORD *a5, _WORD *a6, _WORD *a7)
{
  NSObject *v15;
  void **v16;
  void *__p[2];
  char v18;
  uint8_t out[40];

  if (sub_100623A78(a1, a2))
  {
    *(_QWORD *)out = 0;
    if (sub_100623C54(a1, a2, out))
    {
      LOBYTE(__p[0]) = 0;
      sub_100043758(__p);
      sub_100218164(*(_WORD **)out, a3, a4, a5, a6, a7, 0, 0);
      sub_10004339C(__p);
      sub_100043728(__p);
      return 0;
    }
    else
    {
      return 7;
    }
  }
  else
  {
    v15 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    {
      memset(out, 0, 37);
      uuid_unparse_upper(a2, (char *)out);
      sub_100091AE8(__p, (char *)out);
      if (v18 >= 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      *(_DWORD *)out = 136446210;
      *(_QWORD *)&out[4] = v16;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Device %{public}s is not ready, cannot get connection parameters", out, 0xCu);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    return 12;
  }
}

void sub_10063B37C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10063B398(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  return sub_10063B414((uint64_t)off_1009778A0, *(__int128 **)(a1 + 32), *(unsigned __int8 *)(a1 + 52), *(_WORD *)(a1 + 44), *(_WORD *)(a1 + 46), *(unsigned __int16 *)(a1 + 48), *(unsigned __int16 *)(a1 + 50), *(_DWORD *)(a1 + 40), *(_WORD *)(a1 + 53), HIBYTE(*(_WORD *)(a1 + 53)));
}

uint64_t sub_10063B414(uint64_t a1, __int128 *a2, unsigned int a3, unsigned __int16 a4, unsigned __int16 a5, unsigned int a6, int a7, int a8, unsigned __int8 a9, unsigned __int8 a10)
{
  int v14;
  int v15;
  int v16;
  NSObject *v17;
  const char *v18;
  id v19;
  void *v20;
  void *v22;
  id v23;
  void *v24;
  int v25;
  void *v26;
  id v27;
  void *v28;
  int v29;
  uint64_t v30;
  NSObject *v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  int v49;
  id v50;
  void *v51;
  void *v54[2];
  char v55;
  void *v56[2];
  char v57;
  void *v58[2];
  char v59;
  void *v60[2];
  char v61;
  void *__p[2];
  char v63;
  void *v64[2];
  char v65;
  _QWORD v66[2];
  unsigned __int16 v67;
  char v68;
  unsigned __int16 v69;
  unsigned __int16 v70;
  _BYTE buf[12];
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  unsigned int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  uuid_t uu;

  v70 = a4;
  v69 = a5;
  v68 = 0;
  v67 = 12;
  v66[0] = 0;
  v66[1] = 0;
  sub_10003415C((uint64_t)v66, a1 + 120);
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  if (byte_100993EE8)
  {
    v14 = 1;
  }
  else
  {
    v30 = sub_100027F68();
    sub_100091AE8(buf, "LE");
    sub_100091AE8(v64, "DisableConnectionParameterUpdates");
    (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v30 + 72))(v30, buf, v64, &v68);
    if (v65 < 0)
      operator delete(v64[0]);
    if (SHIBYTE(v75) < 0)
      operator delete(*(void **)buf);
    if (v68)
    {
      v31 = qword_100999890;
      v14 = 0;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Warning: Rejecting parameter updates due to override", buf, 2u);
        v14 = 0;
      }
    }
    else
    {
      if (sub_10061E090(a1, (uint64_t)a2, uu))
      {
        v35 = sub_100646FD8(a1 + 832, uu);
        if (a1 + 840 == v35)
          v36 = 0;
        else
          v36 = v35 + 44;
      }
      else
      {
        v36 = 0;
      }
      v50 = sub_100030DF4(uu);
      v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
      v14 = sub_10063BB9C((uint64_t)v51, &v70, &v69, a6, a7, v36, &v67, a9, v51);

    }
  }
  if (sub_100624080(a1, uu))
  {
    v15 = 0;
LABEL_5:
    v16 = 6;
LABEL_6:
    v67 = v16;
    goto LABEL_7;
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v22 = off_1009778C0;
  v23 = sub_100030DF4(uu);
  v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
  sub_100091AE8(__p, "FastConnection");
  v25 = sub_10000628C((uint64_t)v22, v24, (uint64_t)__p);
  if (v63 < 0)
    operator delete(__p[0]);

  if (v25)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    v26 = off_1009778C0;
    v27 = sub_100030DF4(uu);
    v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
    sub_100091AE8(v60, "A2051");
    if ((sub_10000628C((uint64_t)v26, v28, (uint64_t)v60) & 1) != 0)
    {
      v29 = 1;
    }
    else
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v37 = off_1009778C0;
      v38 = sub_100030DF4(uu);
      v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
      sub_100091AE8(v58, "A2538");
      v29 = sub_10000628C((uint64_t)v37, v39, (uint64_t)v58);
      if (v59 < 0)
        operator delete(v58[0]);

    }
    if (v61 < 0)
      operator delete(v60[0]);

    if (v29)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v40 = off_1009778C0;
      v41 = sub_100030DF4(uu);
      v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
      v15 = sub_10065BFA4((uint64_t)v40, v42);

      if (v15)
      {
        v70 = v15;
        v69 = v15;
      }
    }
    else
    {
      v15 = 0;
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    v46 = off_1009778C0;
    v47 = sub_100030DF4(uu);
    v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
    sub_100091AE8(v56, "BluetoothTVRemote");
    v49 = sub_10000628C((uint64_t)v46, v48, (uint64_t)v56);
    if (v57 < 0)
      operator delete(v56[0]);

    if (!v49)
    {
      v16 = 4;
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v32 = off_1009778C0;
  v33 = sub_100030DF4(uu);
  v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
  LODWORD(v32) = sub_100658AD4((uint64_t)v32, v34);

  if ((_DWORD)v32)
  {
    v15 = 0;
    v16 = 12;
    goto LABEL_6;
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v43 = off_1009778C0;
  v44 = sub_100030DF4(uu);
  v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
  sub_100091AE8(v54, "_HID_DEVICE_");
  sub_10000628C((uint64_t)v43, v45, (uint64_t)v54);
  if (v55 < 0)
    operator delete(v54[0]);

  v15 = 0;
  v16 = 2;
LABEL_7:
  v17 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v18 = "Rejecting";
    if (v14)
      v18 = "Accepting";
    *(_DWORD *)buf = 136447746;
    *(_QWORD *)&buf[4] = v18;
    v72 = 1024;
    v73 = v70;
    v74 = 1024;
    v75 = v69;
    v76 = 1024;
    v77 = a6;
    v78 = 1024;
    v79 = a7;
    v80 = 1024;
    v81 = v67;
    v82 = 1024;
    v83 = v15;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}s following parameters: min=%u, max=%u, lat=%u, mul=%u, cel=%u, preferredLowLatencyInterval=%d", buf, 0x30u);
  }
  buf[0] = 0;
  sub_100043758(buf);
  sub_1002216AC(a2, a3, v14, v70, v69, a6, a7, v16, v67, a8);
  v19 = sub_100030DF4(uu);
  v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  sub_10062CE04((uint64_t)v20, v20, 4u, a9 == 1, a10);

  sub_100043728(buf);
  return sub_100034234((uint64_t)v66);
}

void sub_10063BA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  sub_100034234((uint64_t)&a48);
  _Unwind_Resume(a1);
}

uint64_t sub_10063BB9C(uint64_t a1, unsigned __int16 *a2, _WORD *a3, unsigned int a4, __int16 a5, uint64_t a6, _WORD *a7, int a8, void *a9)
{
  id v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  float v20;
  NSObject *v21;
  _BOOL4 v22;
  float v23;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  NSObject *v36;
  NSObject *v37;
  float v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  float v43;
  int v44;
  NSObject *v45;
  int v46;
  _BYTE v47[10];
  _BYTE v48[10];

  v16 = a9;
  v17 = *a2;
  if ((unsigned __int16)(v17 - 3201) > 0xF384u)
  {
    v18 = (unsigned __int16)*a3;
    if ((unsigned __int16)(v18 - 3201) > 0xF384u)
    {
      if (v17 <= v18)
      {
        if (a4 < 0x1F5)
        {
          if ((unsigned __int16)(a5 - 3201) > 0xF388u)
          {
            v19 = (double)v17 * 1.25;
            v20 = (double)v18 * 1.25;
            if (!a6)
            {
              if (v19 < 15.0)
              {
                v21 = qword_100999890;
                v22 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT);
                if (a8)
                {
                  if (v22)
                  {
                    v46 = 134218240;
                    *(double *)v47 = v19;
                    *(_WORD *)&v47[8] = 1024;
                    *(_DWORD *)v48 = 15;
                    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Remote side (central) wants a min interval (%.0f ms) smaller than %d ms.", (uint8_t *)&v46, 0x12u);
                  }
                }
                else
                {
                  if (v22)
                  {
                    v46 = 134218240;
                    *(double *)v47 = v19;
                    *(_WORD *)&v47[8] = 1024;
                    *(_DWORD *)v48 = 15;
                    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Remote side (peripheral) wants a min interval (%.0f ms) smaller than %d ms. Scaling up", (uint8_t *)&v46, 0x12u);
                  }
                  *a2 = 12;
                  v19 = 15.0;
                }
              }
              v23 = 7.5;
              if (!a8)
                v23 = 15.0;
              if ((v23 != v20 || v19 != v23) && (float)(v20 - v19) < 15.0)
              {
                v26 = qword_100999890;
                if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(v46) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Intervals should be 15 ms apart - increasing the gap", (uint8_t *)&v46, 2u);
                }
                v20 = v19 + 15.0;
                *a3 = (int)((float)(v19 + 15.0) / 1.25);
              }
            }
            if (v20 <= 2000.0)
            {
              if ((float)(v20 * (float)(int)(a4 + 1)) <= 6000.0)
              {
                if (a4 < 0x1F || a6)
                {
                  v35 = (unsigned __int16)(10 * a5);
                  if (v35 >= 0x4651)
                  {
                    v36 = qword_100999890;
                    if (a8 != 1)
                    {
                      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
                        sub_10071457C();
                      goto LABEL_60;
                    }
                    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
                    {
                      v46 = 67109376;
                      *(_DWORD *)v47 = v35;
                      *(_WORD *)&v47[4] = 1024;
                      *(_DWORD *)&v47[6] = 18000;
                      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Remote side (central) asks for a timeout (%u ms) of more than %d seconds.", (uint8_t *)&v46, 0xEu);
                    }
                  }
                  if ((float)(v20 * (float)(int)(3 * (a4 + 1))) <= (float)v35)
                  {
                    if (a6)
                    {
                      v38 = *(float *)(a6 + 20);
                      if (v19 < v38)
                      {
                        v39 = qword_100999890;
                        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
                          sub_100714500(a2, v39, v40, v38);
                        goto LABEL_60;
                      }
                      v43 = *(float *)(a6 + 24);
                      if (v19 <= v43)
                      {
                        v44 = (int)(v43 / 1.25);
                        *a3 = v44;
                        v45 = qword_100999890;
                        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_INFO))
                        {
                          v46 = 67109120;
                          *(_DWORD *)v47 = v44;
                          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "Using %u as the max interval", (uint8_t *)&v46, 8u);
                        }
                      }
                      *a7 = *(_WORD *)(a6 + 12);
                    }
                    v41 = 1;
                    goto LABEL_61;
                  }
                  v37 = qword_100999890;
                  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
                  {
                    v46 = 67109632;
                    *(_DWORD *)v47 = v35;
                    *(_WORD *)&v47[4] = 1024;
                    *(_DWORD *)&v47[6] = a4;
                    *(_WORD *)v48 = 2048;
                    *(double *)&v48[2] = v20;
                    _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Remote sides asks for a timeout (%u ms) / latency (%u) / maxInterval (%f ms) that would cause link timeouts under bad conditions - refusing", (uint8_t *)&v46, 0x18u);
                  }
                }
                else
                {
                  v27 = qword_100999890;
                  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
                    sub_100714494(v27, v28, v29, v30, v31, v32, v33, v34);
                }
              }
              else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
              {
                sub_100714468();
              }
            }
            else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
            {
              sub_10071443C();
            }
          }
          else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
          {
            sub_1007143DC();
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        {
          sub_10071437C();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      {
        sub_10071431C();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
    {
      sub_1007142BC();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
  {
    sub_10071425C();
  }
LABEL_60:
  v41 = 0;
LABEL_61:

  return v41;
}

void sub_10063C174(uint64_t a1, int a2, unsigned int a3, unsigned int a4, _QWORD *a5)
{
  NSObject *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  NSObject *v21;
  uint8_t v22[4];
  int v23;
  int v24;
  uint64_t v25;
  uint8_t buf[8];
  _BYTE v27[10];
  __int16 v28;
  double v29;

  if (a2 == 2)
  {
    v9 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = 2;
      *(_WORD *)v27 = 2048;
      *(double *)&v27[2] = (float)((float)a3 * 1.25);
      v28 = 2048;
      v29 = (float)((float)a4 * 1.25);
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "autoReconnect caused resuming, state=%d, scan=%g/%g (ms)", buf, 0x1Cu);
    }
    v12 = (_QWORD *)*a5;
    v10 = a5 + 1;
    v11 = v12;
    if (v12 != v10)
    {
      do
      {
        v13 = v11[4];
        *(_QWORD *)buf = 0;
        *(_QWORD *)v27 = 0;
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        sub_10003F924((uint64_t)off_1009778C0, v13, 0, 1u, 0, 0, buf);
        if (uuid_is_null(buf))
        {
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
            sub_1007145F0(&v24, v13, &v25);
        }
        else if (a1 + 384 == sub_10000C5B8(a1 + 376, buf))
        {
          sub_10061F4C8(a1, buf, v13);
        }
        else
        {
          v17 = sub_1000746A4(v13);
          v18 = (unint64_t)v17 << 48;
          if (BYTE6(v13) == 3)
            v18 = 0x1000000000000;
          if (BYTE6(v13) == 2)
            v19 = 0;
          else
            v19 = v18;
          v20 = sub_10062B240(v17, v17 & 0xFF000000 | (unint64_t)BYTE6(v17) | ((unint64_t)BYTE2(v17) << 32) & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)BYTE1(v17) << 40) | (v17 >> 16) & 0xFF0000 | HIDWORD(v17) & 0xFF00 | v19);
          v21 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v22 = 67109120;
            v23 = v20;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "autoReconnect to a device already connected, removeAddressFromBTController returned %d", v22, 8u);
          }
        }
        v14 = (_QWORD *)v11[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (_QWORD *)v11[2];
            v16 = *v15 == (_QWORD)v11;
            v11 = v15;
          }
          while (!v16);
        }
        v11 = v15;
      }
      while (v15 != v10);
    }
    if (*(_DWORD *)(a1 + 856) == 4)
      sub_10063C498(a1);
  }
  else if (a2 == 1)
  {
    sub_10061B638(a1, 4u);
  }
}

uint64_t sub_10063C498(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  unsigned int v7;
  uint64_t result;
  NSObject *v9;
  int v10;
  NSObject *v11;
  _BOOL4 v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  const char *v16;
  __int16 v17;
  const char *v18;

  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(int *)(a1 + 856);
    if (v3 > 4)
      v4 = "UNKNOWN";
    else
      v4 = (&off_10093E078)[v3];
    v5 = *(int *)(a1 + 920);
    if (v5 > 3)
      v6 = "UNKNOWN";
    else
      v6 = (&off_10093E058)[v5];
    v15 = 136446466;
    v16 = v4;
    v17 = 2082;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "resumeConnectionManager called, LeConnectionState=%{public}s LeConnectionManagerState=%{public}s", (uint8_t *)&v15, 0x16u);
  }
  v7 = *(_DWORD *)(a1 + 920);
  if (v7 < 2)
    goto LABEL_12;
  if (v7 != 2)
  {
    if (v7 == 3)
    {
LABEL_12:
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_10071464C();
      return 12;
    }
    return 0;
  }
  v9 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v15) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Resuming LE Connection Manager", (uint8_t *)&v15, 2u);
  }
  sub_10061B9F0((os_unfair_lock_s *)a1, 3u);
  v10 = *(_DWORD *)(a1 + 856);
  if ((v10 - 1) < 3)
  {
    v11 = qword_100999890;
    v12 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v12)
      return result;
    LOWORD(v15) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "We're doing something else right now, will resume when idle", (uint8_t *)&v15, 2u);
    return 0;
  }
  if (v10 != 4)
  {
    if (!v10)
    {
      v13 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v15) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "We're idle, lets move on", (uint8_t *)&v15, 2u);
      }
      sub_10061B9F0((os_unfair_lock_s *)a1, 0);
      sub_10062A4A8((id *)a1);
      sub_100628CA8(a1);
    }
    return 0;
  }
  v14 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v15) = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "We're auto-reconnecting, lets move on", (uint8_t *)&v15, 2u);
  }
  sub_10061B9F0((os_unfair_lock_s *)a1, 0);
  sub_10061B638(a1, *(_QWORD *)(a1 + 344) != 0);
  if (objc_msgSend(*(id *)(a1 + 760), "count") || (result = (uint64_t)objc_msgSend(*(id *)(a1 + 768), "count")) != 0)
  {
    sub_10061AF78(a1, 0);
    return 0;
  }
  return result;
}

void sub_10063C760(uint64_t a1)
{
  void *v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6[3];

  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  v2 = off_1009778A0;
  v3 = *(unsigned __int8 *)(a1 + 60);
  v4 = *(unsigned __int16 *)(a1 + 56);
  v5 = *(unsigned __int16 *)(a1 + 58);
  sub_100648080(v6, a1 + 32);
  sub_10063C174((uint64_t)v2, v3, v4, v5, v6);
  sub_10001A82C((uint64_t)v6, (_QWORD *)v6[1]);
}

void sub_10063C800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_10001A82C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_10063C818(uint64_t a1, uint64_t a2)
{
  return sub_100648080((uint64_t *)(a1 + 32), a2 + 32);
}

void sub_10063C824(uint64_t a1)
{
  sub_10001A82C(a1 + 32, *(_QWORD **)(a1 + 40));
}

double sub_10063C834(uint64_t a1, int a2, unsigned __int16 *a3, uint64_t a4)
{
  NSObject *v8;
  double result;
  uint64_t v10;
  _QWORD v11[3];

  v8 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v11[0]) = 67109120;
    HIDWORD(v11[0]) = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "handleCsReadRemoteFAETableCallback status=%{bluetooth:OI_STATUS}u", (uint8_t *)v11, 8u);
  }
  v11[0] = 0;
  v11[1] = 0;
  uuid_clear((unsigned __int8 *)v11);
  if (sub_10061E090(a1, (uint64_t)a3, (unsigned __int8 *)v11))
  {
    v10 = sub_10000C5B8(a1 + 1400, (unsigned __int8 *)v11);
    if (a1 + 1408 != v10)
      *(_QWORD *)&result = sub_100263940(*(_QWORD *)(v10 + 48), *a3, a4).n128_u64[0];
  }
  return result;
}

uint64_t sub_10063C938(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t result;
  _QWORD v8[3];

  v6 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v8[0]) = 67109120;
    HIDWORD(v8[0]) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "handleCsReadRemoteFAETableCallback status=%{bluetooth:OI_STATUS}u", (uint8_t *)v8, 8u);
  }
  v8[0] = 0;
  v8[1] = 0;
  uuid_clear((unsigned __int8 *)v8);
  result = sub_10061E090(a1, a3, (unsigned __int8 *)v8);
  if ((_DWORD)result)
  {
    result = sub_10000C5B8(a1 + 1400, (unsigned __int8 *)v8);
    if (a1 + 1408 != result)
      return sub_100263968(*(_QWORD *)(result + 48));
  }
  return result;
}

void sub_10063CA2C(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint8_t buf[8];
  uint64_t v9;

  v6 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "handleCsProcedureEnableCallback status=%{bluetooth:OI_STATUS}u", buf, 8u);
  }
  *(_QWORD *)buf = 0;
  v9 = 0;
  uuid_clear(buf);
  if (sub_10061E090(a1, a3, buf))
  {
    v7 = sub_10000C5B8(a1 + 1400, buf);
    if (a1 + 1408 != v7)
      sub_100263974(*(_QWORD *)(v7 + 48), a2);
  }
}

void sub_10063CB84(uint64_t a1, uint64_t a2, char a3, __int16 a4, char a5, int a6, char a7, char a8, char a9, unsigned __int8 a10, size_t __n, const void *a12, unsigned __int8 *a13, const void *a14)
{
  NSObject *v22;
  uint64_t v23;
  uint8_t buf[8];
  uint64_t v25;

  v22 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a6;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "handleCsSubeventResultCallback status=%{bluetooth:OI_STATUS}u", buf, 8u);
  }
  *(_QWORD *)buf = 0;
  v25 = 0;
  uuid_clear(buf);
  if (sub_10061E090(a1, a2, buf))
  {
    v23 = sub_10000C5B8(a1 + 1400, buf);
    if (a1 + 1408 != v23)
      sub_100263A14(*(_QWORD *)(v23 + 48), a2, a3, a4, a5, a6, a7, a8, a9, a10, __n, a12, a13, a14);
  }
}

void sub_10063CCDC(uint64_t a1, uint64_t a2, char a3, int a4, char a5, char a6, unsigned int a7, const void *a8, const void *a9, unsigned __int8 *a10, const void *a11)
{
  NSObject *v19;
  uint64_t v20;
  uint8_t buf[8];
  uint64_t v22;

  v19 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a4;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "handleCsSubeventResultCallback status=%{bluetooth:OI_STATUS}u", buf, 8u);
  }
  *(_QWORD *)buf = 0;
  v22 = 0;
  uuid_clear(buf);
  if (sub_10061E090(a1, a2, buf))
  {
    v20 = sub_10000C5B8(a1 + 1400, buf);
    if (a1 + 1408 != v20)
      sub_100263C48(*(_BYTE **)(v20 + 48), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  }
}

double sub_10063CE24(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  return sub_10063C834((uint64_t)off_1009778A0, *(_DWORD *)(a1 + 48), *(unsigned __int16 **)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_10063CE78(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  return sub_10063C938((uint64_t)off_1009778A0, *(_DWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10063CECC(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  sub_10063CA2C((uint64_t)off_1009778A0, *(_DWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10063CF48(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  sub_10063CB84((uint64_t)off_1009778A0, *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 72), *(unsigned __int8 *)(a1 + 73), *(_BYTE *)(a1 + 74), *(unsigned __int8 *)(a1 + 75), *(_BYTE *)(a1 + 76), *(_BYTE *)(a1 + 77), *(_WORD *)(a1 + 78), HIBYTE(*(_WORD *)(a1 + 78)), *(_QWORD *)(a1 + 40), *(const void **)(a1 + 48), *(unsigned __int8 **)(a1 + 56), *(const void **)(a1 + 64));
}

void sub_10063CFD4(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  sub_10063CCDC((uint64_t)off_1009778A0, *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 72), *(unsigned __int8 *)(a1 + 73), *(_BYTE *)(a1 + 74), *(_BYTE *)(a1 + 75), *(unsigned __int8 *)(a1 + 76), *(const void **)(a1 + 40), *(const void **)(a1 + 48), *(unsigned __int8 **)(a1 + 56), *(const void **)(a1 + 64));
}

void sub_10063D054(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  double Current;
  id v5;
  _QWORD *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t i;
  double v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  int v16;
  id v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t buf[4];
  _BYTE v26[14];
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;

  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[145];
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v26 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Disconnection History: %d entries", buf, 8u);
  }
  if (a1[145])
  {
    Current = CFAbsoluteTimeGetCurrent();
    v5 = objc_alloc_init((Class)NSDateFormatter);
    objc_msgSend(v5, "setDateFormat:", CFSTR("yyyy-MM-dd H:mm:ss"));
    v6 = (_QWORD *)a1[143];
    v21 = a1 + 144;
    if (v6 != a1 + 144)
    {
      do
      {
        v22 = 0;
        v23 = 0;
        v24 = 0;
        sub_1006480D4(&v22, (uint64_t)(v6 + 7));
        v7 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          v8 = v6 + 4;
          if (*((char *)v6 + 55) < 0)
            v8 = (_QWORD *)*v8;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v26 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s:", buf, 0xCu);
        }
        for (i = v23; (uint64_t *)i != &v22; i = *(_QWORD *)(i + 8))
        {
          v10 = *(double *)(i + 16);
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v10));
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringFromDate:", v11));
          LODWORD(v13) = llround((v10 - floor(v10)) * 1000.0);
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.%000d"), v12, v13));
          v15 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
          {
            v16 = *(_DWORD *)(i + 24);
            v17 = objc_msgSend(objc_retainAutorelease(v14), "UTF8String");
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)v26 = v16;
            *(_WORD *)&v26[4] = 2082;
            *(_QWORD *)&v26[6] = v17;
            v27 = 2048;
            v28 = v10;
            v29 = 2048;
            v30 = Current - v10;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump:       reason %d time:%{public}s %.3f secs(%-12.2f secs ago)", buf, 0x26u);
          }

        }
        sub_10002074C(&v22);
        v18 = (_QWORD *)v6[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v6[2];
            v20 = *v19 == (_QWORD)v6;
            v6 = v19;
          }
          while (!v20);
        }
        v6 = v19;
      }
      while (v19 != v21);
    }

  }
}

void sub_10063D348(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10063D398(uint64_t a1, const void **a2)
{
  uint64_t *v4;
  uint64_t *v5;

  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
    sub_100714678();
  v4 = (uint64_t *)sub_10001F2AC(a1 + 1144, a2);
  if ((uint64_t *)(a1 + 1152) != v4)
  {
    v5 = v4;
    sub_1000040CC((uint64_t **)(a1 + 1144), v4);
    sub_1002F65A4((uint64_t)(v5 + 4));
    operator delete(v5);
  }
}

double sub_10063D428(uint64_t a1, const void **a2)
{
  uint64_t v3;
  double v4;
  _QWORD v6[2];
  uint64_t v7;

  v3 = sub_10001F2AC(a1 + 1144, a2);
  v4 = 0.0;
  if (a1 + 1152 != v3)
  {
    v6[0] = 0;
    v6[1] = 0;
    v7 = 0;
    sub_1006480D4(v6, v3 + 56);
    if (v7)
      v4 = *(double *)(v6[0] + 16);
    sub_10002074C(v6);
  }
  return v4;
}

void sub_10063D49C(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  NSObject *v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint8_t buf[4];
  _QWORD *v13;
  __int16 v14;
  int v15;

  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[149];
    *(_DWORD *)buf = 67109120;
    LODWORD(v13) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: LeConnectionRSSIThresholdState History: %d entries", buf, 8u);
  }
  if (a1[149])
  {
    v4 = (_QWORD *)a1[147];
    v5 = a1 + 148;
    if (v4 != a1 + 148)
    {
      v6 = qword_100999890;
      do
      {
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          v7 = v4 + 4;
          if (*((char *)v4 + 55) < 0)
            v7 = (_QWORD *)*v7;
          v8 = *((_DWORD *)v4 + 14);
          *(_DWORD *)buf = 136446466;
          v13 = v7;
          v14 = 1024;
          v15 = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s:%d", buf, 0x12u);
          v6 = qword_100999890;
        }
        v9 = (_QWORD *)v4[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v4[2];
            v11 = *v10 == (_QWORD)v4;
            v4 = v10;
          }
          while (!v11);
        }
        v4 = v10;
      }
      while (v10 != v5);
    }
  }
}

uint64_t *sub_10063D624(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t *result;
  __int128 *v7;

  if (*(_QWORD *)(a1 + 1192) >= 0x21uLL)
    sub_100633FBC(a1);
  v7 = a2;
  result = sub_10064844C((uint64_t **)(a1 + 1176), (const void **)a2, (uint64_t)&unk_100740F58, &v7);
  *((_DWORD *)result + 14) = a3;
  return result;
}

uint64_t sub_10063D690(uint64_t a1, const void **a2, double a3)
{
  double Current;
  double v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  BOOL v11;
  NSObject *v12;
  _QWORD v14[3];
  int v15;

  Current = CFAbsoluteTimeGetCurrent();
  if (Current <= a3)
    v7 = 0.0;
  else
    v7 = Current - a3;
  v8 = sub_10001F2AC(a1 + 1144, a2);
  if (a1 + 1152 == v8)
  {
    v10 = 0;
  }
  else
  {
    memset(v14, 0, sizeof(v14));
    sub_1006480D4(v14, v8 + 56);
    v9 = v14[1];
    if ((_QWORD *)v14[1] == v14)
    {
      v10 = 0;
    }
    else
    {
      v10 = 0;
      do
      {
        v11 = (*(_DWORD *)(v9 + 24) - 708) > 0x36
           || ((1 << (*(_BYTE *)(v9 + 24) + 60)) & 0x40000004000001) == 0;
        if (!v11 && *(double *)(v9 + 16) > v7)
          ++v10;
        v9 = *(_QWORD *)(v9 + 8);
      }
      while ((_QWORD *)v9 != v14);
    }
    sub_10002074C(v14);
  }
  v12 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a2 + 23) < 0)
      a2 = (const void **)*a2;
    LODWORD(v14[0]) = 136446722;
    *(_QWORD *)((char *)v14 + 4) = a2;
    WORD2(v14[1]) = 2048;
    *(double *)((char *)&v14[1] + 6) = a3;
    HIWORD(v14[2]) = 1024;
    v15 = v10;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "getNumDisconnectionsBySignalQuality for %{public}s over time window %f count %d", (uint8_t *)v14, 0x1Cu);
  }
  return v10;
}

uint64_t sub_10063D82C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_10003BE44();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 352))(v4);
  if ((_DWORD)result)
    return (a2 == 16 || a2 == 267 || a2 == 23) && *(_BYTE *)(a1 + 1528) == 0;
  return result;
}

uint64_t sub_10063D88C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  void *v36[2];
  uint64_t v37;
  void *__dst[2];
  uint64_t v39;
  void *__p[2];
  uint64_t v41;
  unsigned int v42;
  void *v43[2];
  uint64_t v44;
  unsigned int *v45;

  v3 = a2;
  v43[0] = 0;
  v43[1] = 0;
  v44 = 0;
  v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString")));
  sub_100091AE8(v43, (char *)objc_msgSend(v4, "UTF8String"));

  v42 = 0;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v5 = sub_1006589A8((uint64_t)off_1009778C0, v3);
  v42 = v5;
  v6 = *(unsigned __int16 *)(a1 + 1200);
  v7 = *(_DWORD *)(a1 + 1204);
  v8 = *(unsigned __int16 *)(a1 + 1208);
  v9 = *(_DWORD *)(a1 + 1212);
  v10 = *(_QWORD *)(a1 + 1224);
  if (v10)
  {
    v11 = a1 + 1224;
    do
    {
      v12 = *(_DWORD *)(v10 + 28);
      v13 = v12 >= v5;
      if (v12 >= v5)
        v14 = (uint64_t *)v10;
      else
        v14 = (uint64_t *)(v10 + 8);
      if (v13)
        v11 = v10;
      v10 = *v14;
    }
    while (*v14);
    if (v11 != a1 + 1224 && v5 >= *(_DWORD *)(v11 + 28))
    {
      v45 = &v42;
      v6 = *((unsigned __int16 *)sub_100646320((uint64_t **)(a1 + 1216), &v42, (uint64_t)&unk_100740F58, &v45) + 16);
    }
  }
  v15 = *(_QWORD *)(a1 + 1248);
  if (v15)
  {
    v16 = a1 + 1248;
    do
    {
      v17 = *(_DWORD *)(v15 + 28);
      v18 = v17 >= v42;
      if (v17 >= v42)
        v19 = (uint64_t *)v15;
      else
        v19 = (uint64_t *)(v15 + 8);
      if (v18)
        v16 = v15;
      v15 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 1248 && v42 >= *(_DWORD *)(v16 + 28))
    {
      v45 = &v42;
      v7 = *((_DWORD *)sub_10033EC4C((uint64_t **)(a1 + 1240), &v42, (uint64_t)&unk_100740F58, &v45) + 8);
    }
  }
  v20 = *(_QWORD *)(a1 + 1272);
  if (v20)
  {
    v21 = a1 + 1272;
    do
    {
      v22 = *(_DWORD *)(v20 + 28);
      v23 = v22 >= v42;
      if (v22 >= v42)
        v24 = (uint64_t *)v20;
      else
        v24 = (uint64_t *)(v20 + 8);
      if (v23)
        v21 = v20;
      v20 = *v24;
    }
    while (*v24);
    if (v21 != a1 + 1272 && v42 >= *(_DWORD *)(v21 + 28))
    {
      v45 = &v42;
      v8 = *((unsigned __int16 *)sub_100646320((uint64_t **)(a1 + 1264), &v42, (uint64_t)&unk_100740F58, &v45) + 16);
    }
  }
  v25 = *(_QWORD *)(a1 + 1296);
  if (v25)
  {
    v26 = a1 + 1296;
    do
    {
      v27 = *(_DWORD *)(v25 + 28);
      v28 = v27 >= v42;
      if (v27 >= v42)
        v29 = (uint64_t *)v25;
      else
        v29 = (uint64_t *)(v25 + 8);
      if (v28)
        v26 = v25;
      v25 = *v29;
    }
    while (*v29);
    if (v26 != a1 + 1296 && v42 >= *(_DWORD *)(v26 + 28))
    {
      v45 = &v42;
      v9 = *((_DWORD *)sub_10033EC4C((uint64_t **)(a1 + 1288), &v42, (uint64_t)&unk_100740F58, &v45) + 8);
    }
  }
  if (SHIBYTE(v44) < 0)
  {
    sub_10003430C(__p, v43[0], (unint64_t)v43[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v43;
    v41 = v44;
  }
  v30 = sub_10001F2AC(a1 + 1176, (const void **)__p);
  if (a1 + 1184 == v30)
    v31 = 2;
  else
    v31 = *(_DWORD *)(v30 + 56);
  if (SHIBYTE(v41) < 0)
  {
    operator delete(__p[0]);
    if (v31)
      goto LABEL_59;
  }
  else if (v31)
  {
LABEL_59:
    if (v31 == 1)
    {
      if (SHIBYTE(v44) < 0)
      {
        sub_10003430C(v36, v43[0], (unint64_t)v43[1]);
      }
      else
      {
        *(_OWORD *)v36 = *(_OWORD *)v43;
        v37 = v44;
      }
      v33 = sub_10063D690(a1, (const void **)v36, (double)(unsigned __int16)v9);
      if (SHIBYTE(v37) < 0)
        operator delete(v36[0]);
      if (v33 > v8)
      {
        v32 = sub_10063D82C(a1, v42) ^ 1;
        goto LABEL_79;
      }
      goto LABEL_78;
    }
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_1007146E0();
    v32 = 2;
    goto LABEL_79;
  }
  if (SHIBYTE(v44) < 0)
  {
    sub_10003430C(__dst, v43[0], (unint64_t)v43[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v43;
    v39 = v44;
  }
  v34 = sub_10063D690(a1, (const void **)__dst, (double)(unsigned __int16)v7);
  if (SHIBYTE(v39) < 0)
    operator delete(__dst[0]);
  if (v34 < v6 || (sub_10063D82C(a1, v42) & 1) != 0)
  {
LABEL_78:
    v32 = 0;
    goto LABEL_79;
  }
  v32 = 1;
LABEL_79:
  if (SHIBYTE(v44) < 0)
    operator delete(v43[0]);

  return v32;
}

void sub_10063DC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;

  if (a36 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t *sub_10063DD20(uint64_t a1, const void **a2)
{
  uint64_t *result;

  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
    sub_100714748();
  result = (uint64_t *)sub_10001F2AC(a1 + 1176, a2);
  if ((uint64_t *)(a1 + 1184) != result)
    return sub_100005290((uint64_t **)(a1 + 1176), (uint64_t)result);
  return result;
}

void sub_10063DD9C(uint64_t a1, double a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _OWORD *v6;
  NSObject *v7;
  double v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  void *v14;
  double v15;
  void **i;
  NSObject *v17;
  uint8_t *v18;
  void *v19[2];
  uint64_t v20;
  void *v21[2];
  uint64_t v22;
  void *__p[2];
  uint64_t v24;
  void *__dst[2];
  uint64_t v26;
  _QWORD *v27;
  void **v28;
  uint64_t v29;
  uint8_t v30[4];
  uint8_t *v31;
  uint8_t buf[24];
  double v33;

  if (a2 > 0.0)
  {
    v27 = &v27;
    v28 = (void **)&v27;
    v29 = 0;
    v3 = *(_QWORD **)(a1 + 1144);
    v4 = (_QWORD *)(a1 + 1152);
    if (v3 != (_QWORD *)(a1 + 1152))
    {
      do
      {
        v6 = v3 + 4;
        v7 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
        {
          if (*((char *)v3 + 55) < 0)
          {
            v14 = (void *)v3[4];
            sub_10003430C(__dst, v14, v3[5]);
          }
          else
          {
            *(_OWORD *)__dst = *v6;
            v26 = v3[6];
            v14 = v3 + 4;
          }
          v15 = sub_10063D428(a1, (const void **)__dst);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = v14;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v15;
          *(_WORD *)&buf[22] = 2048;
          v33 = a2;
          _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "purgeStaleDisconnectionHistoryLeConnectionRSSIThresholdState: %{public}s last %f cutoff %f", buf, 0x20u);
          if (SHIBYTE(v26) < 0)
            operator delete(__dst[0]);
        }
        if (*((char *)v3 + 55) < 0)
        {
          sub_10003430C(__p, (void *)v3[4], v3[5]);
        }
        else
        {
          *(_OWORD *)__p = *v6;
          v24 = v3[6];
        }
        v8 = sub_10063D428(a1, (const void **)__p);
        if (SHIBYTE(v24) < 0)
          operator delete(__p[0]);
        if (v8 < a2)
        {
          v9 = sub_10056FA0C((uint64_t)&v27, 0, 0, (uint64_t)(v3 + 4));
          v10 = v27;
          *v9 = v27;
          v9[1] = &v27;
          v10[1] = v9;
          v27 = v9;
          ++v29;
        }
        v11 = (_QWORD *)v3[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (_QWORD *)v3[2];
            v13 = *v12 == (_QWORD)v3;
            v3 = v12;
          }
          while (!v13);
        }
        v3 = v12;
      }
      while (v12 != v4);
      for (i = v28; i != (void **)&v27; i = (void **)i[1])
      {
        memset(buf, 0, sizeof(buf));
        if (*((char *)i + 39) < 0)
        {
          sub_10003430C(buf, i[2], (unint64_t)i[3]);
        }
        else
        {
          *(_OWORD *)buf = *((_OWORD *)i + 1);
          *(_QWORD *)&buf[16] = i[4];
        }
        v17 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          if ((buf[23] & 0x80u) == 0)
            v18 = buf;
          else
            v18 = *(uint8_t **)buf;
          *(_DWORD *)v30 = 136446210;
          v31 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "purgeStaleDisconnectionHistoryLeConnectionRSSIThresholdState: %{public}s deleted", v30, 0xCu);
        }
        if ((char)buf[23] < 0)
        {
          sub_10003430C(v21, *(void **)buf, *(unint64_t *)&buf[8]);
        }
        else
        {
          *(_OWORD *)v21 = *(_OWORD *)buf;
          v22 = *(_QWORD *)&buf[16];
        }
        sub_10063D398(a1, (const void **)v21);
        if (SHIBYTE(v22) < 0)
          operator delete(v21[0]);
        if ((char)buf[23] < 0)
        {
          sub_10003430C(v19, *(void **)buf, *(unint64_t *)&buf[8]);
        }
        else
        {
          *(_OWORD *)v19 = *(_OWORD *)buf;
          v20 = *(_QWORD *)&buf[16];
        }
        sub_10063DD20(a1, (const void **)v19);
        if (SHIBYTE(v20) < 0)
          operator delete(v19[0]);
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
      }
    }
    sub_10035940C((void **)&v27);
  }
}

void sub_10063E118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38)
{
  sub_10035940C(&a38);
  _Unwind_Resume(a1);
}

BOOL sub_10063E1A0(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 24) < *(double *)(a2 + 24);
}

void sub_10063E1B4(uint64_t a1)
{
  int v1;
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  _OWORD *v6;
  double v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  unint64_t v13;
  void **v14;
  int v15;
  NSObject *v16;
  void **v17;
  void *v18[2];
  void *v19;
  void *v20[2];
  void *v21;
  void *__p[2];
  uint64_t v23;
  void *__dst[2];
  void *v25;
  double v26;
  _QWORD *v27;
  void **v28;
  unint64_t v29;
  uint8_t buf[4];
  void **v31;

  v1 = *(_DWORD *)(a1 + 1160);
  if ((unsigned __int16)v1 <= 0x20u)
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
      sub_1007147B0();
    return;
  }
  v3 = &v27;
  v27 = &v27;
  v28 = (void **)&v27;
  v29 = 0;
  v4 = *(_QWORD **)(a1 + 1144);
  v5 = (_QWORD *)(a1 + 1152);
  if (v4 != (_QWORD *)(a1 + 1152))
  {
    while (1)
    {
      v6 = v4 + 4;
      if (*((char *)v4 + 55) < 0)
      {
        sub_10003430C(__dst, (void *)v4[4], v4[5]);
        if (*((char *)v4 + 55) < 0)
        {
          sub_10003430C(__p, (void *)v4[4], v4[5]);
          goto LABEL_9;
        }
      }
      else
      {
        *(_OWORD *)__dst = *v6;
        v25 = (void *)v4[6];
      }
      *(_OWORD *)__p = *v6;
      v23 = v4[6];
LABEL_9:
      v7 = sub_10063D428(a1, (const void **)__p);
      v26 = v7;
      v8 = operator new(0x30uLL);
      v8[1] = *(_OWORD *)__dst;
      *((_QWORD *)v8 + 4) = v25;
      __dst[1] = 0;
      v25 = 0;
      __dst[0] = 0;
      *((double *)v8 + 5) = v7;
      v9 = v27;
      *(_QWORD *)v8 = v27;
      *((_QWORD *)v8 + 1) = &v27;
      v9[1] = v8;
      v27 = v8;
      ++v29;
      if (SHIBYTE(v23) < 0)
        operator delete(__p[0]);
      v10 = (_QWORD *)v4[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v4[2];
          v12 = *v11 == (_QWORD)v4;
          v4 = v11;
        }
        while (!v12);
      }
      v4 = v11;
      if (v11 == v5)
      {
        v3 = (uint64_t **)v28;
        v13 = v29;
        goto LABEL_20;
      }
    }
  }
  v13 = 0;
LABEL_20:
  __dst[0] = sub_10063E1A0;
  sub_10064859C(v3, (uint64_t *)&v27, v13, (unsigned int (**)(uint64_t, uint64_t))__dst);
  v14 = v28;
  if (v28 != (void **)&v27)
  {
    if ((((_WORD)v1 - 32) & 0xFFFE) != 0)
      v15 = (unsigned __int16)(v1 - 32);
    else
      v15 = 1;
    do
    {
      __dst[0] = 0;
      __dst[1] = 0;
      v25 = 0;
      if (*((char *)v14 + 39) < 0)
      {
        sub_10003430C(__dst, v14[2], (unint64_t)v14[3]);
      }
      else
      {
        *(_OWORD *)__dst = *((_OWORD *)v14 + 1);
        v25 = v14[4];
      }
      if (SHIBYTE(v25) < 0)
      {
        sub_10003430C(v20, __dst[0], (unint64_t)__dst[1]);
      }
      else
      {
        *(_OWORD *)v20 = *(_OWORD *)__dst;
        v21 = v25;
      }
      sub_10063D398(a1, (const void **)v20);
      if (SHIBYTE(v21) < 0)
        operator delete(v20[0]);
      if (SHIBYTE(v25) < 0)
      {
        sub_10003430C(v18, __dst[0], (unint64_t)__dst[1]);
      }
      else
      {
        *(_OWORD *)v18 = *(_OWORD *)__dst;
        v19 = v25;
      }
      sub_10063DD20(a1, (const void **)v18);
      if (SHIBYTE(v19) < 0)
        operator delete(v18[0]);
      v16 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        if (SHIBYTE(v25) >= 0)
          v17 = __dst;
        else
          v17 = (void **)__dst[0];
        *(_DWORD *)buf = 136446210;
        v31 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "capDisconnectionHistoryLeConnectionRSSIThresholdState: delete %{public}s", buf, 0xCu);
      }
      if (SHIBYTE(v25) < 0)
        operator delete(__dst[0]);
      if (!--v15)
        break;
      v14 = (void **)v14[1];
    }
    while (v14 != (void **)&v27);
  }
  sub_10035940C((void **)&v27);
}

void sub_10063E524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10063E5C8(os_unfair_lock_s *a1)
{
  NSObject *v2;
  uint64_t os_unfair_lock_opaque;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint32_t v7;
  uint64_t result;
  NSObject *v9;
  _BOOL4 v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  int v14;
  const char *v15;
  __int16 v16;
  const char *v17;

  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    os_unfair_lock_opaque = (int)a1[214]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque > 4)
      v4 = "UNKNOWN";
    else
      v4 = (&off_10093E078)[os_unfair_lock_opaque];
    v5 = (int)a1[230]._os_unfair_lock_opaque;
    if (v5 > 3)
      v6 = "UNKNOWN";
    else
      v6 = (&off_10093E058)[v5];
    v14 = 136446466;
    v15 = v4;
    v16 = 2082;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "pauseConnectionManager called, LeConnectionState=%{public}s LeConnectionManagerState=%{public}s", (uint8_t *)&v14, 0x16u);
  }
  v7 = a1[230]._os_unfair_lock_opaque;
  if (v7 - 1 >= 3)
  {
    if (!v7)
    {
      sub_10061B9F0(a1, 1u);
      switch(a1[214]._os_unfair_lock_opaque)
      {
        case 0u:
          v11 = qword_100999890;
          if (!os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
            goto LABEL_25;
          LOWORD(v14) = 0;
          v12 = "We're idle, lets move on";
          goto LABEL_24;
        case 1u:
          v13 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v14) = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "We're trying to connect - cancelling all connections, will pause when idle", (uint8_t *)&v14, 2u);
          }
          sub_10061AF78(a1, 1);
          return 0;
        case 2u:
        case 3u:
          v9 = qword_100999890;
          v10 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (!v10)
            return result;
          LOWORD(v14) = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "We're in the middle of connection cancellation - will pause when idle", (uint8_t *)&v14, 2u);
          return 0;
        case 4u:
          v11 = qword_100999890;
          if (!os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
            goto LABEL_25;
          LOWORD(v14) = 0;
          v12 = "We're autoReconnect, lets pause";
LABEL_24:
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v14, 2u);
LABEL_25:
          sub_10061B9F0(a1, 2u);
          break;
        default:
          return 0;
      }
    }
    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_10071464C();
    return 12;
  }
}

void sub_10063E83C(id a1, LeConnectionManagerListener *a2)
{
  (*((void (**)(LeConnectionManagerListener *))a2->var0 + 14))(a2);
}

void sub_10063E84C(id a1, LeConnectionManagerListener *a2)
{
  (*((void (**)(LeConnectionManagerListener *))a2->var0 + 15))(a2);
}

uint64_t sub_10063E85C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  const char *v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  const char *v10;
  size_t v11;
  _QWORD *v12;
  _OWORD v14[4];
  void *__p[2];
  __int128 v16;
  __int128 v17;
  _OWORD v18[9];
  uint64_t v19;

  v19 = 0;
  v17 = 0u;
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  memset(v14, 0, sizeof(v14));
  sub_100272ADC((uint64_t)v14);
  v2 = sub_1002614D8(v14, (uint64_t)" client: ", 9);
  sub_1002614D8(v2, (uint64_t)"LeConnectionManager", 19);
  v3 = sub_1002614D8(v14, (uint64_t)" state: (", 9);
  v4 = *(int *)(a1 + 856);
  if (v4 > 4)
    v5 = "UNKNOWN";
  else
    v5 = (&off_10093E078)[v4];
  v6 = strlen(v5);
  v7 = sub_1002614D8(v3, (uint64_t)v5, v6);
  sub_1002614D8(v7, (uint64_t)")", 1);
  v8 = sub_1002614D8(v14, (uint64_t)" , ManagerState: (", 18);
  v9 = *(int *)(a1 + 920);
  if (v9 > 3)
    v10 = "UNKNOWN";
  else
    v10 = (&off_10093E058)[v9];
  v11 = strlen(v10);
  v12 = sub_1002614D8(v8, (uint64_t)v10, v11);
  sub_1002614D8(v12, (uint64_t)")", 1);
  std::stringbuf::str((char *)v14 + 8);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v14 + 8);
  return std::ios::~ios(v18);
}

void sub_10063EA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100272CFC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10063EA34(uint64_t a1)
{
  return sub_10063E85C(a1 - 32);
}

uint64_t sub_10063EA3C(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, uint64_t))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32), 202);
}

uint64_t sub_10063EA58(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, uint64_t))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32), 1);
}

uint64_t sub_10063EA74(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0x666666666666666)
      abort();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x333333333333333)
      v15 = 0x666666666666666;
    else
      v15 = v13;
    v21[4] = result;
    v16 = (char *)sub_100261D70(result, v15);
    v17 = &v16[40 * v12];
    v21[0] = v16;
    v21[1] = v17;
    v21[3] = &v16[40 * v18];
    v19 = *a2;
    *a2 = 0;
    *(_QWORD *)v17 = v19;
    LODWORD(v19) = *((_DWORD *)a2 + 6);
    *(_OWORD *)(v17 + 8) = *(_OWORD *)(a2 + 1);
    *((_DWORD *)v17 + 6) = v19;
    v20 = a2[4];
    a2[4] = 0;
    *((_QWORD *)v17 + 4) = v20;
    v21[2] = v17 + 40;
    sub_100648934(a1, v21);
    v11 = a1[1];
    result = sub_1006489AC((uint64_t)v21);
  }
  else
  {
    v8 = *a2;
    *a2 = 0;
    *(_QWORD *)v7 = v8;
    v9 = *(_OWORD *)(a2 + 1);
    *(_DWORD *)(v7 + 24) = *((_DWORD *)a2 + 6);
    *(_OWORD *)(v7 + 8) = v9;
    v10 = a2[4];
    a2[4] = 0;
    *(_QWORD *)(v7 + 32) = v10;
    v11 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v11;
  return result;
}

void sub_10063EBA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1006489AC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10063EBBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  void *__p[2];
  uint64_t v12;

  v10 = *(_QWORD *)(a1 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v12 = *(_QWORD *)(a2 + 16);
  }
  sub_10063EC74(v10, (__int128 *)__p, a3, a4, a5, a6);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
}

void sub_10063EC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10063EC74(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v12;
  _QWORD v13[5];
  __int128 __p;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = sub_1000419F4();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3321888768;
  v13[2] = sub_100640E10;
  v13[3] = &unk_10093DC40;
  v13[4] = a1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C(&__p, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __p = *a2;
    v15 = *((_QWORD *)a2 + 2);
  }
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  sub_100041A34(v12, v13);
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__p);
}

void sub_10063ED50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10063ED6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10;
  void *__p[2];
  uint64_t v12;

  v10 = *(_QWORD *)(a1 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v12 = *(_QWORD *)(a2 + 16);
  }
  sub_10063EC74(v10, (__int128 *)__p, a3, a4, a5, a6);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
}

void sub_10063EE08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10063EE24(unsigned __int16 *a1, int a2, int a3, int a4)
{
  BOOL v7;
  int v8;
  BOOL v9;
  uint64_t result;
  NSObject *v11;
  _BOOL4 v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;

  if (!a4)
    return 1;
  if (a1[132] == a2)
  {
    v7 = a4 == 24;
  }
  else if (a1[136] == a2)
  {
    v7 = a2 - 48 == a4;
  }
  else
  {
    v8 = a1[134];
    v7 = v8 != a2 || v8 - 48 == a4;
  }
  v9 = v7;
  if (a2 - a3 >= a4 && v9)
    return 1;
  v11 = qword_100999890;
  v12 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v12)
  {
    v13[0] = 67109632;
    v13[1] = a2;
    v14 = 1024;
    v15 = a3;
    v16 = 1024;
    v17 = a4;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "connectionScanParameters: Invalid combination of scan parameters interval %d window %d scancoreWindow %d  - do not use SC for connection scan.", (uint8_t *)v13, 0x14u);
    return 0;
  }
  return result;
}

void sub_10063EF50(id a1, LeConnectionManagerListener *a2)
{
  (*((void (**)(LeConnectionManagerListener *))a2->var0 + 17))(a2);
}

void sub_10063EF60(id a1, LeConnectionManagerListener *a2)
{
  (*((void (**)(LeConnectionManagerListener *))a2->var0 + 18))(a2);
}

uint64_t sub_10063EF70(uint64_t a1)
{
  NSObject *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;

  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v3 = sub_100021770(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48));
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = sub_100021770(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v8 = 138543618;
    v9 = v4;
    v10 = 2114;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LeConnectionManager::leAddressChangedCallback dispatched addresses connectable:%{public}@ non-connectable:%{public}@", (uint8_t *)&v8, 0x16u);

  }
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  return sub_1006289F8((uint64_t)off_1009778A0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56));
}

void sub_10063F0A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10063F0B8(id a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  sub_1006297E8((uint64_t)off_1009778A0);
}

uint64_t sub_10063F0F8(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t v4;
  id v5;
  void *v6;
  int v7;
  int v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  int v16;

  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 52))
      v3 = "Incoming";
    else
      v3 = "Outgoing";
    v4 = *(_QWORD *)(a1 + 32);
    v5 = sub_100021770(*(_QWORD *)(a1 + 40));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = *(_DWORD *)(a1 + 48);
    v9 = 136446978;
    v10 = v3;
    v11 = 2048;
    v12 = v4;
    v13 = 2114;
    v14 = v6;
    v15 = 1024;
    v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}s LE Connection complete for handle %p address %{public}@ with status %d", (uint8_t *)&v9, 0x26u);

  }
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  return sub_10062D5B0((uint64_t)off_1009778A0, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 52), *(unsigned __int16 **)(a1 + 32), *(_DWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 53));
}

uint64_t sub_10063F244(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  return sub_100630518((uint64_t)off_1009778A0, *(_DWORD *)(a1 + 32));
}

uint64_t sub_10063F294(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t v7;

  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v6 = 134217984;
    v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Clearing ConnectionEventTrigger for device %lld", (uint8_t *)&v6, 0xCu);
  }
  v4 = sub_1000438A4();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 2936))(v4, *(_QWORD *)(a1 + 40), 0xFFFFLL, 1, 0, 1);
}

void sub_10063F35C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  id v4;
  void *v5;
  int v6;
  int v7;
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  void *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;

  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = sub_100021770(*(_QWORD *)(a1 + 40));
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = *(_DWORD *)(a1 + 48);
    v7 = *(unsigned __int8 *)(a1 + 58);
    *(_DWORD *)buf = 134218754;
    v9 = v3;
    v10 = 2114;
    v11 = v5;
    v12 = 1024;
    v13 = v6;
    v14 = 1024;
    v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LE Link disconnected for handle %p address %{public}@ with reason %d encryptionPending %d", buf, 0x22u);

  }
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  sub_100631E78((uint64_t)off_1009778A0, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 56), *(unsigned __int8 *)(a1 + 59), *(_DWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 60), *(unsigned __int8 *)(a1 + 61), *(_DWORD *)(a1 + 52));
}

uint64_t sub_10063F490(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  return sub_10063704C((uint64_t)off_1009778A0, *(unsigned int *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_10063F4E8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  _QWORD v6[5];
  char v7;

  v5 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10063F550;
  v6[3] = &unk_100918888;
  v6[4] = a2;
  v7 = a3;
  sub_100041A34(v5, v6);
}

uint64_t sub_10063F550(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  return sub_100637428((os_unfair_lock_s *)off_1009778A0, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_10063F5A4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5, __int16 a6, int a7, int a8)
{
  uint64_t v15;
  _QWORD v16[6];
  int v17;
  int v18;
  int v19;
  __int16 v20;
  char v21;

  *(_BYTE *)(a2 + 248) = a3;
  *(_DWORD *)(a2 + 252) = a4;
  *(_DWORD *)(a2 + 256) = a5;
  *(_WORD *)(a2 + 260) = a6;
  v15 = sub_1000419F4();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10063F650;
  v16[3] = &unk_100935B38;
  v21 = a3;
  v16[4] = a2;
  v16[5] = a4;
  v20 = a6;
  v17 = a5;
  v18 = a7;
  v19 = a8;
  sub_100041A34(v15, v16);
}

uint64_t sub_10063F650(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  return sub_1006375CC((os_unfair_lock_s *)off_1009778A0, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 62), *(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 48), *(unsigned __int16 *)(a1 + 60), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 56));
}

uint64_t sub_10063F6B0(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  return sub_100637AA8((os_unfair_lock_s *)off_1009778A0, *(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 70), *(_DWORD *)(a1 + 71), BYTE1(*(_DWORD *)(a1 + 71)), BYTE2(*(_DWORD *)(a1 + 71)), HIBYTE(*(_DWORD *)(a1 + 71)), *(_WORD *)(a1 + 68), *(_DWORD *)(a1 + 64), *(_WORD *)(a1 + 75), HIBYTE(*(_WORD *)(a1 + 75)));
}

void sub_10063F738(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4, char a5, uint64_t a6, int a7)
{
  uint64_t v13;
  _QWORD v14[6];
  int v15;
  __int16 v16;
  __int16 v17;
  char v18;

  v13 = sub_1000419F4();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10063F7CC;
  v14[3] = &unk_100920450;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v14[4] = a2;
  v14[5] = a6;
  v15 = a7;
  sub_100041A34(v13, v14);
}

uint64_t sub_10063F7CC(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  return sub_100637EE0((os_unfair_lock_s *)off_1009778A0, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 52), *(unsigned __int16 *)(a1 + 54), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 48));
}

void sub_10063F82C(uint64_t a1, uint64_t a2, __int128 *a3, int a4)
{
  uint64_t v7;
  __int128 v8;
  _QWORD v9[5];
  __int128 v10;
  __int128 v11;
  int v12;

  v7 = sub_1000419F4();
  v9[1] = 3221225472;
  v8 = a3[1];
  v10 = *a3;
  v9[0] = _NSConcreteStackBlock;
  v9[2] = sub_10063F8AC;
  v9[3] = &unk_10093DC00;
  v9[4] = a2;
  v11 = v8;
  v12 = a4;
  sub_100041A34(v7, v9);
}

uint64_t sub_10063F8AC(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  _OWORD v5[2];

  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 56);
  v5[0] = *(_OWORD *)(a1 + 40);
  v5[1] = v3;
  return sub_100638134((os_unfair_lock_s *)off_1009778A0, v2, (char *)v5, *(_DWORD *)(a1 + 72));
}

void sub_10063F91C(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v7;
  _QWORD v8[5];
  char v9;
  char v10;

  v7 = sub_1000419F4();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10063F994;
  v8[3] = &unk_100920960;
  v8[4] = a2;
  v9 = a3;
  v10 = a4;
  sub_100041A34(v7, v8);
}

void sub_10063F994(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  sub_1006383A8((os_unfair_lock_s *)off_1009778A0, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(char *)(a1 + 41));
}

uint64_t sub_10063F9EC(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  return sub_100638550((uint64_t)off_1009778A0, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40), *(_WORD *)(a1 + 42), *(unsigned __int16 *)(a1 + 44));
}

uint64_t sub_10063FA48(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  return sub_10063913C((uint64_t)off_1009778A0, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40), *(_WORD *)(a1 + 42), *(_WORD *)(a1 + 44), *(_WORD *)(a1 + 46));
}

uint64_t sub_10063FAA8(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  return sub_10063998C((uint64_t)off_1009778A0, *(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_BYTE *)(a1 + 49), *(_DWORD *)(a1 + 44));
}

uint64_t sub_10063FB04(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  return sub_10063A3BC((uint64_t)off_1009778A0, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_DWORD *)(a1 + 80), *(_QWORD *)(a1 + 72));
}

uint64_t sub_10063FB60()
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  return sub_10063A61C((uint64_t)off_1009778A0);
}

void sub_10063FBA0(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  _QWORD v7[5];
  _BYTE v8[26092];
  _DWORD buf[2];

  v4 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a2[5];
    buf[0] = 67109120;
    buf[1] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "leCsProcedureCompleteCallback with status %d", (uint8_t *)buf, 8u);
  }
  v6 = sub_1000419F4();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10063FCC4;
  v7[3] = &unk_10093DC20;
  v7[4] = a1;
  memcpy(v8, a2, sizeof(v8));
  sub_100041A34(v6, v7);
}

uint64_t sub_10063FCC4(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 __dst[26092];

  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  v2 = *(_QWORD *)(a1 + 32);
  memcpy(__dst, (const void *)(a1 + 40), sizeof(__dst));
  return sub_10063782C((os_unfair_lock_s *)off_1009778A0, v2, __dst);
}

uint64_t sub_10063FD88(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  NSObject *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;

  v6 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v7 = sub_100030DF4(a2);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    *(_DWORD *)buf = 138543874;
    v19 = v8;
    v20 = 1040;
    v21 = 5;
    v22 = 2096;
    v23 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setConnectionAFHMap for device \"%{public}@\" with map %.5P", buf, 0x1Cu);

  }
  if (a1 + 384 == sub_10000C5B8(a1 + 376, a2))
  {
    v16 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100714814(a2, v16);
    return 3;
  }
  else
  {
    buf[0] = 0;
    sub_100043758(buf);
    v15 = sub_10004C9BC(180, (uint64_t (*)())sub_10063FF24, v9, v10, v11, v12, v13, v14, a3);
    if ((_DWORD)v15)
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_100714898();
      v15 = 1;
    }
    sub_100043728(buf);
  }
  return v15;
}

void sub_10063FF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

void sub_10063FF24(int a1)
{
  NSObject *v2;
  _DWORD v3[2];

  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Set AFH status=%{bluetooth:OI_STATUS}u", (uint8_t *)v3, 8u);
  }
}

uint64_t sub_10063FFC4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  int32x2_t v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  NSObject *v15;
  _BOOL4 v16;
  unsigned int v17;
  const char *v18;
  uint64_t v19;
  unsigned int v20;
  int32x2_t v21;
  unsigned int *v22;
  int v23;
  int v24;
  NSObject *v25;
  _BOOL4 v26;
  unsigned int v27;
  const char *v28;
  uint64_t v29;
  unsigned int v30;
  int32x2_t *v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  NSObject *v38;
  const char *v39;
  unsigned int v40;
  int v41;
  NSObject *v42;
  uint64_t i;
  BOOL v44;
  int v45;
  int v46;
  uint8_t buf[4];
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  unsigned int v52;
  __int16 v53;
  int v54;

  v6 = sub_10003BE44();
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 888))(v6);
  result = 0;
  switch(a2)
  {
    case 65536:
    case 65540:
    case 65555:
    case 65557:
      v9 = 0;
      *(_WORD *)(a3 + 1) = 1;
      *(_BYTE *)(a3 + 3) = 0;
      v45 = a2;
      if (a2 == 65555)
        v10 = 180000;
      else
        v10 = 10000;
      v11 = vdup_n_s32(v10);
      v12 = (unsigned int *)(a3 + 16);
      do
      {
        if ((v9 & 4) != 0)
          v13 = 3;
        else
          v13 = 1;
        *(v12 - 1) = v13;
        *v12 = v10;
        if (*(_BYTE *)(a1 + 1368))
        {
          *(int32x2_t *)(v12 - 3) = vdup_n_s32(48 * v10 / *(unsigned __int16 *)(a1 + 2 * v13 + 256));
          v14 = *(unsigned __int8 *)(a1 + 1372);
          if (*(_BYTE *)(a1 + 1372))
          {
            v15 = qword_100999890;
            v16 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG);
            v17 = v10;
            if (v16)
            {
              v18 = sub_100036064(v45);
              *(_DWORD *)buf = 136315906;
              v48 = v18;
              v49 = 1024;
              v50 = v9;
              v51 = 1024;
              v52 = v10;
              v53 = 1024;
              v54 = v14;
              _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Override %s Coex 0x%x connection  scan timeout %d extended by %d percent", buf, 0x1Eu);
              v14 = *(unsigned __int8 *)(a1 + 1372);
              v17 = *v12;
            }
            *v12 = v17 * ((656 * (v14 + 100)) >> 16);
          }
        }
        else
        {
          *(int32x2_t *)(v12 - 3) = v11;
        }
        ++v9;
        v12 += 5;
      }
      while (v9 != 16);
      goto LABEL_58;
    case 65537:
    case 65541:
    case 65560:
      v29 = 0;
      *(_WORD *)(a3 + 1) = 257;
      *(_BYTE *)(a3 + 3) = 1;
      v30 = v7 & 0xFFFFFFFE;
      v31 = (int32x2_t *)(a3 + 20);
      do
      {
        if ((v29 & 5) != 0)
        {
          v31[-1].i32[1] = 600000;
          if ((v29 & 8) != 0 && _os_feature_enabled_impl("BluetoothFeatures", "ScanCorePolicyV2"))
          {
            v32 = 0;
            v31->i32[0] = *(unsigned __int16 *)(a1 + 268) - 48;
          }
          else
          {
            v32 = 0;
          }
          v33 = 6;
        }
        else if ((v29 & 2) != 0)
        {
          *(int32x2_t *)((char *)&v31[-1] + 4) = (int32x2_t)0x1800004E20;
          v32 = 1;
          v33 = 4;
        }
        else
        {
          v32 = 0;
          v31[-1].i32[1] = 10000;
          v33 = 1;
        }
        v31[-1].i32[0] = v33;
        v34 = v31[-1].u32[1];
        if (*(_BYTE *)(a1 + 1368))
        {
          v35 = *(unsigned __int16 *)(a1 + 2 * v33 + 256);
          v36 = 48 * v34 / v35;
          v31[-2].i32[1] = v36;
          if (v30 != 2)
            v32 = 0;
          if (v32 == 1)
            v36 = (v31->i32[0] + 48) * v34 / v35;
          v31[-2].i32[0] = v36;
          v37 = *(unsigned __int8 *)(a1 + 1372);
          if (*(_BYTE *)(a1 + 1372))
          {
            v38 = qword_100999890;
            if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
            {
              v39 = sub_100036064(a2);
              *(_DWORD *)buf = 136315906;
              v48 = v39;
              v49 = 1024;
              v50 = v29;
              v51 = 1024;
              v52 = v34;
              v53 = 1024;
              v54 = v37;
              _os_log_debug_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "Override %s Coex 0x%x connection  scan timeout %d extended by %d percent", buf, 0x1Eu);
              v37 = *(unsigned __int8 *)(a1 + 1372);
              v34 = v31[-1].u32[1];
            }
            v31[-1].i32[1] = v34 * ((656 * (v37 + 100)) >> 16);
          }
        }
        else
        {
          v31[-2] = vdup_n_s32(v34);
        }
        ++v29;
        v31 = (int32x2_t *)((char *)v31 + 20);
      }
      while (v29 != 16);
      goto LABEL_58;
    case 65538:
    case 65542:
    case 65556:
    case 65558:
      v19 = 0;
      *(_WORD *)(a3 + 1) = 1;
      *(_BYTE *)(a3 + 3) = 0;
      v46 = a2;
      if (a2 == 65556)
        v20 = 180000;
      else
        v20 = 60000;
      v21 = vdup_n_s32(v20);
      v22 = (unsigned int *)(a3 + 16);
      do
      {
        if ((v19 & 4) != 0)
          v23 = 3;
        else
          v23 = 1;
        *(v22 - 1) = v23;
        *v22 = v20;
        *(int32x2_t *)(v22 - 3) = v21;
        if (*(_BYTE *)(a1 + 1368))
        {
          v24 = *(unsigned __int8 *)(a1 + 1372);
          if (*(_BYTE *)(a1 + 1372))
          {
            v25 = qword_100999890;
            v26 = os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG);
            v27 = v20;
            if (v26)
            {
              v28 = sub_100036064(v46);
              *(_DWORD *)buf = 136315906;
              v48 = v28;
              v49 = 1024;
              v50 = v19;
              v51 = 1024;
              v52 = v20;
              v53 = 1024;
              v54 = v24;
              _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Override %s Coex 0x%x connection  scan timeout %d extended by %d percent", buf, 0x1Eu);
              v24 = *(unsigned __int8 *)(a1 + 1372);
              v27 = *v22;
            }
            *v22 = v27 * ((656 * (v24 + 100)) >> 16);
          }
        }
        ++v19;
        v22 += 5;
      }
      while (v19 != 16);
      goto LABEL_58;
    case 65539:
    case 65543:
    case 65561:
      *(_WORD *)(a3 + 1) = 0;
      *(_BYTE *)(a3 + 3) = 0;
      *(_OWORD *)(a3 + 4) = xmmword_100742F50;
      if (*(_BYTE *)(a1 + 1368))
      {
        v40 = *(unsigned __int8 *)(a1 + 1372);
        if (*(_BYTE *)(a1 + 1372))
        {
          v41 = 600000;
          v42 = qword_100999890;
          if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315650;
            v48 = sub_100036064(a2);
            v49 = 1024;
            v50 = 600000;
            v51 = 1024;
            v52 = v40;
            _os_log_debug_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Override %s Coex None connection  scan timeout %d extended by %d percent", buf, 0x18u);
            v40 = *(unsigned __int8 *)(a1 + 1372);
            v41 = *(_DWORD *)(a3 + 16);
          }
          *(_DWORD *)(a3 + 16) = v41 * ((656 * (v40 + 100)) >> 16);
        }
      }
LABEL_58:
      if (*(_BYTE *)(a1 + 1496))
      {
        for (i = 16; i != 336; i += 20)
        {
          if (*(_DWORD *)(a3 + i))
            *(_DWORD *)(a3 + i) = *(_DWORD *)(a1 + 1500);
        }
      }
      v44 = *(_BYTE *)(a3 + 2) || *(_BYTE *)(a3 + 1) || *(_BYTE *)(a3 + 3) != 0;
      *(_BYTE *)a3 = v44;
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

void sub_100640590(uint64_t a1, void *a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  NSString *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  const char *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  NSObject *v49;
  uint64_t v50;
  void *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  void *v55;
  void *v56;
  _OWORD v57[20];
  int v58;
  _BYTE buf[12];

  v11 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093DDE8);
  v12 = sub_1006589A8((uint64_t)off_1009778C0, v11);
  v58 = 0;
  memset(v57, 0, sizeof(v57));
  if ((sub_10063FFC4(a1, v12, (uint64_t)v57) & 1) != 0)
  {
    if (a1 + 1352 == sub_10001F2AC(a1 + 1344, a3))
    {
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
        sub_1007148F8();
    }
    else
    {
      *(_QWORD *)buf = a3;
      v13 = sub_100646CDC((uint64_t **)(a1 + 1344), a3, (uint64_t)&unk_100740F58, (__int128 **)buf);
      v14 = *((int *)v13 + 16);
      v52 = *((_DWORD *)v13 + 15);
      v53 = *((_DWORD *)v13 + 14);
      v54 = *((_DWORD *)v13 + 17);
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", CFSTR("Connection"), CFSTR("ScanType"));
      v16 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sub_100036064(v12));
      v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v17, CFSTR("CBUseCase"));

      if (qword_10097AC58 != -1)
        dispatch_once(&qword_10097AC58, &stru_10093DE68);
      v18 = sub_1006C1B60(qword_10097AC50, v11);
      v51 = (void *)objc_claimAutoreleasedReturnValue(v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "allObjects"));
      v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v19));

      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v55, "sortedArrayUsingSelector:", "compare:"));
      v56 = v20;
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "componentsJoinedByString:", CFSTR(",")));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v21, CFSTR("BundleID"));

      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 1368)));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v22, CFSTR("IsFWBased"));

      if (v14 > 8)
        v23 = "Unknown";
      else
        v23 = (&off_10093E010)[v14];
      v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v23));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v25, CFSTR("InitialConnScanParamsType"));

      LODWORD(v25) = BYTE3(v57[0]);
      v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", BYTE3(v57[0])));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v26, CFSTR("IsWiFiCoexCriticalProtected"));

      v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", BYTE2(v57[0])));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v27, CFSTR("IsBTAudioProtected"));

      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (_DWORD)v25 != 0));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v28, CFSTR("IsWiFi2_4GHzProtected"));

      if ((v12 & 0xFFFF0000) == 0x10000)
        v29 = 63;
      else
        v29 = 0;
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v29));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v30, CFSTR("WiFiCriticalDefinition"));

      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v54));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v31, CFSTR("ScanDurationReqMsec"));

      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v53));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v32, CFSTR("ActualScanTimeReqMsec"));

      v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v52));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v33, CFSTR("ActualScanTimeMCReqMsec"));

      v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a6));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v34, CFSTR("ScanDurationMsec"));

      v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a4));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v35, CFSTR("ActualScanTimeMsec"));

      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a5));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v36, CFSTR("ActualScanTimeMCMsec"));

      if (v54)
        v37 = 100 * (int)a6 / v54;
      else
        v37 = 0;
      if (v37 <= 0x63)
        v38 = v37;
      else
        v38 = 100;
      if (v53)
        v39 = 100 * (int)a4 / v53;
      else
        v39 = 0;
      if (v39 <= 0x63)
        v40 = v39;
      else
        v40 = 100;
      if (v52)
        v41 = 100 * (int)a5 / v52;
      else
        v41 = 0;
      if (v41 <= 0x63)
        v42 = v41;
      else
        v42 = 100;
      v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v38));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v43, CFSTR("ScanDurationMsecPercentage"));

      v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v40));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v44, CFSTR("ActualScanTimeMsecPercentage"));

      v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v42));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v45, CFSTR("ActualScanTimeMCMsecPercentage"));

      v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v37 > 0x63));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v46, CFSTR("HasScanDurationReqMet"));

      v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v39 > 0x63));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v47, CFSTR("HasActualScanTimeReqMet"));

      v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v41 > 0x63));
      objc_msgSend(v15, "setObject:forKeyedSubscript:", v48, CFSTR("HasActualScanTimeMCReqMet"));

      v49 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v15;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Sending CloseLoopScanningStats :%{public}@", buf, 0xCu);
      }
      v50 = sub_100065478();
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v50 + 384))(v50, v15);

    }
  }
  else
  {
    v24 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_100714964(v12, v24);
  }

}

void sub_100640CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_100640E10(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const unsigned __int8 *v9;
  const void **v10;
  size_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  void *v19;
  int v20;
  unsigned __int8 *v21;
  const unsigned __int8 **v22;
  id v23;
  void *v24;
  void *v25[2];
  uint64_t v26;
  void *__p;
  size_t __n;
  unsigned __int8 v29;
  _BYTE buf[42];
  __int16 v31;
  int v32;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v4 = (_QWORD *)*v4;
    v5 = *(_QWORD *)(a1 + 64);
    v6 = *(_QWORD *)(a1 + 72);
    v7 = *(_QWORD *)(a1 + 80);
    v8 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = v4;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v5;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v6;
    *(_WORD *)&buf[32] = 2048;
    *(_QWORD *)&buf[34] = v7;
    v31 = 1024;
    v32 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "handleConnScanRxStoppedCB: %s totalRx %llu btMCRx %llu totalTime %llu reason %d", buf, 0x30u);
  }
  if (*(_DWORD *)(a1 + 88) == 1)
  {
    v9 = *(const unsigned __int8 **)(v2 + 328);
    if (v9 != (const unsigned __int8 *)(v2 + 336))
    {
      v10 = (const void **)(a1 + 40);
      do
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v9 + 25, buf);
        sub_100091AE8(&__p, buf);
        if ((v29 & 0x80u) == 0)
          v11 = v29;
        else
          v11 = __n;
        v12 = *(unsigned __int8 *)(a1 + 63);
        v13 = (char)v12;
        if ((v12 & 0x80u) != 0)
          v12 = *(_QWORD *)(a1 + 48);
        if (v11 == v12)
        {
          if (v13 >= 0)
            v14 = (unsigned __int8 *)(a1 + 40);
          else
            v14 = (unsigned __int8 *)*v10;
          if ((v29 & 0x80) != 0)
          {
            v19 = __p;
            v20 = memcmp(__p, v14, __n);
            operator delete(v19);
            if (!v20)
              goto LABEL_37;
          }
          else
          {
            if (!v29)
              goto LABEL_37;
            v15 = 0;
            do
            {
              v16 = *((unsigned __int8 *)&__p + v15);
              v17 = v14[v15];
              v18 = v16 != v17 || v29 - 1 == v15++;
            }
            while (!v18);
            if (v16 == v17)
            {
LABEL_37:
              v23 = sub_100030DF4(v9 + 25);
              v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
              if (*(char *)(a1 + 63) < 0)
              {
                sub_10003430C(v25, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
              }
              else
              {
                *(_OWORD *)v25 = *(_OWORD *)v10;
                v26 = *(_QWORD *)(a1 + 56);
              }
              sub_100640590(v2, v24, (const void **)v25, *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
              if (SHIBYTE(v26) < 0)
                operator delete(v25[0]);
              sub_100030BCC(buf, v24);
              sub_100622358(v2, buf, 10);
              sub_100030BCC(buf, v24);
              sub_10062B5B4(v2, buf, 0, 344, 0);

              return;
            }
          }
        }
        else if ((v29 & 0x80) != 0)
        {
          operator delete(__p);
        }
        v21 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
        if (v21)
        {
          do
          {
            v22 = (const unsigned __int8 **)v21;
            v21 = *(unsigned __int8 **)v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (const unsigned __int8 **)*((_QWORD *)v9 + 2);
            v18 = *v22 == v9;
            v9 = (const unsigned __int8 *)v22;
          }
          while (!v18);
        }
        v9 = (const unsigned __int8 *)v22;
      }
      while (v22 != (const unsigned __int8 **)(v2 + 336));
    }
  }
}

void sub_1006410E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_100641128(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1006411D8;
  v6[3] = &unk_100918868;
  v8 = a1;
  v5 = v3;
  v7 = v5;
  sub_100041A34(v4, v6);

}

void sub_1006411B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1006411D8(uint64_t a1)
{
  sub_1006411E8(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32), 1);
}

void sub_1006411E8(uint64_t a1, void *a2, int a3)
{
  id v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  _BOOL4 v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  NSObject *v16;
  int v17;
  void **v18;
  void **v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  _BOOL4 v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  NSObject *v32;
  int v33;
  void **v34;
  void **v35;
  char *v36;
  NSObject *v37;
  int v38;
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  void *v42[2];
  char v43;
  _BYTE buf[12];
  __int16 v45;
  int v46;
  __int16 v47;
  _BOOL4 v48;
  __int16 v49;
  _BOOL4 v50;
  __int16 v51;
  void **v52;
  __int16 v53;
  char *v54;
  unsigned __int8 uu2[48];
  __int128 __p;
  uint64_t v57;
  char __str[32];
  __int128 v59;
  __int128 v60;

  v5 = a2;
  v6 = sub_1000438A4();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 2768))(v6))
    goto LABEL_26;
  sub_100030BCC(uu2, v5);
  if (a1 + 1432 == sub_10000C5B8(a1 + 1424, uu2))
    goto LABEL_26;
  v57 = 0;
  __p = 0u;
  memset(uu2, 0, sizeof(uu2));
  sub_100030BCC(__str, v5);
  *(_QWORD *)buf = __str;
  v7 = sub_100648DA0((uint64_t **)(a1 + 1424), (unsigned __int8 *)__str, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)buf);
  *(_QWORD *)uu2 = *((id *)v7 + 6);
  *(_OWORD *)&uu2[8] = *(_OWORD *)(v7 + 56);
  *(_OWORD *)&uu2[24] = *(_OWORD *)(v7 + 72);
  *(_DWORD *)&uu2[40] = *((_DWORD *)v7 + 22);
  sub_1002D70C0(&__p, (uint64_t)(v7 + 96));
  *(_QWORD *)__str = 0;
  sub_10004AD30((uint64_t)__str);
  v8 = *(int *)__str;
  v9 = *(__int16 *)&__str[4];
  if ((a3 & 1) != 0)
  {
    v10 = 1;
    v11 = 1;
  }
  else if (*(_OWORD *)&uu2[24] == 0)
  {
    v12 = *(__int16 *)&__str[4] - *(_QWORD *)&uu2[16] + 1000 * (*(int *)__str - *(_QWORD *)&uu2[8]);
    v13 = *(_DWORD *)(a1 + 1472);
    *(_DWORD *)__str = v12 / 0x3E8;
    *(_DWORD *)&__str[4] = v12 % 0x3E8;
    *(_DWORD *)&buf[4] = 0;
    *(_DWORD *)buf = v13;
    v10 = 0;
    v11 = (int)sub_100072ACC((uint64_t)__str, (uint64_t)buf) > 0;
  }
  else
  {
    v14 = *(__int16 *)&__str[4] - *(_QWORD *)&uu2[32] + 1000 * (*(int *)__str - *(_QWORD *)&uu2[24]);
    v15 = *(_DWORD *)(a1 + 1476);
    *(_DWORD *)__str = v14 / 0x3E8;
    *(_DWORD *)&__str[4] = v14 % 0x3E8;
    *(_DWORD *)&buf[4] = 0;
    *(_DWORD *)buf = v15;
    v10 = (int)sub_100072ACC((uint64_t)__str, (uint64_t)buf) > 0;
    v11 = v10;
  }
  v16 = qword_100999890;
  if (!os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    goto LABEL_17;
  v59 = 0u;
  v60 = 0u;
  memset(__str, 0, sizeof(__str));
  snprintf(__str, 0x3FuLL, "%0llu.%0llu", v8, v9);
  sub_100091AE8(v42, __str);
  v17 = v43;
  v18 = (void **)v42[0];
  sub_10064295C((uint64_t)uu2);
  v19 = v42;
  if (v17 < 0)
    v19 = v18;
  if (__str[23] >= 0)
    v20 = __str;
  else
    v20 = *(char **)__str;
  *(_DWORD *)buf = 138413570;
  *(_QWORD *)&buf[4] = v5;
  v45 = 1024;
  v46 = a3;
  v47 = 1024;
  v48 = v11;
  v49 = 1024;
  v50 = v10;
  v51 = 2080;
  v52 = v19;
  v53 = 2080;
  v54 = v20;
  _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: evaluateDenyListDevice incoming Device %@ forceUnblock=%d stopMonitoring=%d stopBlocking=%d TimeNow:%ssec entry:%s", buf, 0x32u);
  if (__str[23] < 0)
    operator delete(*(void **)__str);
  if (v43 < 0)
  {
    operator delete(v42[0]);
    if (v10)
      goto LABEL_18;
  }
  else
  {
LABEL_17:
    if (v10)
    {
LABEL_18:
      v21 = sub_1000438A4();
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v22 = sub_1000589DC((uint64_t)off_1009778C0, v5, 0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 3648))(v21, v22);
    }
  }
  if (v11)
  {
    sub_100030BCC(__str, v5);
    sub_100648F1C((uint64_t **)(a1 + 1424), (unsigned __int8 *)__str);
  }
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }

LABEL_26:
  if (!_os_feature_enabled_impl("BluetoothFeatures", "OutgoingLeConnectionDenyList"))
    goto LABEL_65;
  sub_100030BCC(uu2, v5);
  if (a1 + 1456 == sub_10000C5B8(a1 + 1448, uu2))
    goto LABEL_65;
  v57 = 0;
  __p = 0u;
  memset(uu2, 0, sizeof(uu2));
  sub_100030BCC(__str, v5);
  *(_QWORD *)buf = __str;
  v23 = sub_100648DA0((uint64_t **)(a1 + 1448), (unsigned __int8 *)__str, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)buf);
  *(_QWORD *)uu2 = *((id *)v23 + 6);
  *(_OWORD *)&uu2[8] = *(_OWORD *)(v23 + 56);
  *(_OWORD *)&uu2[24] = *(_OWORD *)(v23 + 72);
  *(_DWORD *)&uu2[40] = *((_DWORD *)v23 + 22);
  sub_1002D70C0(&__p, (uint64_t)(v23 + 96));
  *(_QWORD *)__str = 0;
  sub_10004AD30((uint64_t)__str);
  v24 = *(int *)__str;
  v25 = *(__int16 *)&__str[4];
  if ((a3 & 1) != 0)
  {
    v26 = 1;
    v27 = 1;
  }
  else if (*(_OWORD *)&uu2[24] == 0)
  {
    v28 = *(__int16 *)&__str[4] - *(_QWORD *)&uu2[16] + 1000 * (*(int *)__str - *(_QWORD *)&uu2[8]);
    v29 = *(_DWORD *)(a1 + 1472);
    *(_DWORD *)__str = v28 / 0x3E8;
    *(_DWORD *)&__str[4] = v28 % 0x3E8;
    *(_DWORD *)&buf[4] = 0;
    *(_DWORD *)buf = v29;
    v26 = 0;
    v27 = (int)sub_100072ACC((uint64_t)__str, (uint64_t)buf) > 0;
  }
  else
  {
    v30 = *(__int16 *)&__str[4] - *(_QWORD *)&uu2[32] + 1000 * (*(int *)__str - *(_QWORD *)&uu2[24]);
    v31 = *(_DWORD *)(a1 + 1476);
    *(_DWORD *)__str = v30 / 0x3E8;
    *(_DWORD *)&__str[4] = v30 % 0x3E8;
    *(_DWORD *)&buf[4] = 0;
    *(_DWORD *)buf = v31;
    v26 = (int)sub_100072ACC((uint64_t)__str, (uint64_t)buf) > 0;
    v27 = v26;
  }
  v32 = qword_100999890;
  if (!os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    goto LABEL_42;
  v59 = 0u;
  v60 = 0u;
  memset(__str, 0, sizeof(__str));
  snprintf(__str, 0x3FuLL, "%0llu.%0llu", v24, v25);
  sub_100091AE8(v42, __str);
  v33 = v43;
  v34 = (void **)v42[0];
  sub_10064295C((uint64_t)uu2);
  v35 = v42;
  if (v33 < 0)
    v35 = v34;
  if (__str[23] >= 0)
    v36 = __str;
  else
    v36 = *(char **)__str;
  *(_DWORD *)buf = 138413570;
  *(_QWORD *)&buf[4] = v5;
  v45 = 1024;
  v46 = a3;
  v47 = 1024;
  v48 = v27;
  v49 = 1024;
  v50 = v26;
  v51 = 2080;
  v52 = v35;
  v53 = 2080;
  v54 = v36;
  _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: evaluateDenyListDevice outgoing Device %@ forceUnblock=%d stopMonitoring=%d stopBlocking=%d TimeNow:%ssec entry:%s", buf, 0x32u);
  if (__str[23] < 0)
    operator delete(*(void **)__str);
  if ((v43 & 0x80000000) == 0)
  {
LABEL_42:
    if (!v27)
      goto LABEL_44;
    goto LABEL_43;
  }
  operator delete(v42[0]);
  if (v27)
  {
LABEL_43:
    sub_100030BCC(__str, v5);
    sub_100648F1C((uint64_t **)(a1 + 1448), (unsigned __int8 *)__str);
  }
LABEL_44:
  if (v26 && objc_msgSend(*(id *)(a1 + 752), "containsObject:", v5))
  {
    objc_msgSend(*(id *)(a1 + 752), "removeObject:", v5);
    if (*(_DWORD *)(a1 + 920))
    {
      v37 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__str = 138543362;
        *(_QWORD *)&__str[4] = v5;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: Device %{public}@ setDeviceIntoConnectionPendingList ", (uint8_t *)__str, 0xCu);
      }
      sub_100030BCC(__str, v5);
      sub_10061F62C(a1, (const unsigned __int8 *)__str);
    }
    else
    {
      v38 = sub_10061AF78(a1, 0);
      v39 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__str = 138543618;
        *(_QWORD *)&__str[4] = v5;
        *(_WORD *)&__str[12] = 1024;
        *(_DWORD *)&__str[14] = v38;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: Device %{public}@ cancelAllPendingConnections returned %d ", (uint8_t *)__str, 0x12u);
      }
      if (v38)
      {
        sub_10062079C(a1, v5);
        v40 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__str = 138543362;
          *(_QWORD *)&__str[4] = v5;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: addToConnectingList %{public}@", (uint8_t *)__str, 0xCu);
        }
        sub_100628CA8(a1);
      }
      else
      {
        sub_100030BCC(__str, v5);
        sub_10061F62C(a1, (const unsigned __int8 *)__str);
        v41 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__str = 138543362;
          *(_QWORD *)&__str[4] = v5;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: setDeviceIntoConnectionPendingList %{public}@", (uint8_t *)__str, 0xCu);
        }
      }
    }
  }
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }

LABEL_65:
}

void sub_100641A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;

  sub_100642674((uint64_t)&a26);

  _Unwind_Resume(a1);
}

void sub_100641B34(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100641BE4;
  v6[3] = &unk_100918868;
  v8 = a1;
  v5 = v3;
  v7 = v5;
  sub_100041A34(v4, v6);

}

void sub_100641BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_100641BE4(uint64_t a1)
{
  sub_100633E00(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32), 0, 1);
}

void sub_100641BF8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100641CA8;
  v6[3] = &unk_100918868;
  v8 = a1;
  v5 = v3;
  v7 = v5;
  sub_100041A34(v4, v6);

}

void sub_100641C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_100641CA8(uint64_t a1)
{
  sub_1006411E8(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32), 1);
}

void sub_100641CB8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100641D68;
  v6[3] = &unk_100918868;
  v8 = a1;
  v5 = v3;
  v7 = v5;
  sub_100041A34(v4, v6);

}

void sub_100641D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_100641D68(uint64_t a1)
{
  sub_100633ED8(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32), 4833, 1);
}

void sub_100641D7C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100641E2C;
  v6[3] = &unk_100918868;
  v8 = a1;
  v5 = v3;
  v7 = v5;
  sub_100041A34(v4, v6);

}

void sub_100641E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_100641E2C(uint64_t a1)
{
  sub_1006411E8(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32), 1);
}

void sub_100641E3C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  unsigned int v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  NSObject *v29;
  _BOOL4 v30;
  uint64_t v31;
  _BYTE *v32;
  char *v33;
  void *v34;
  char *v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  int v43;
  NSObject *v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  int v48;
  unsigned int v49;
  NSObject *v50;
  uint64_t v51;
  unsigned __int8 *v52;
  _BYTE v53[12];
  __int16 v54;
  _BYTE *v55;
  char v56;
  _BYTE v57[12];
  __int16 v58;
  _BYTE *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  id obj[6];
  void *__p[2];
  _QWORD v66[2];
  uint8_t buf[32];
  __int128 v68;
  __int128 v69;

  v2 = *(_QWORD *)(a1 + 40);
  obj[0] = 0;
  sub_10004AD30((uint64_t)obj);
  v3 = (void *)SLODWORD(obj[0]);
  v4 = (void *)SWORD2(obj[0]);
  sub_100030BCC(obj, *(_QWORD *)(a1 + 32));
  if (v2 + 1432 == sub_10000C5B8(v2 + 1424, (unsigned __int8 *)obj) || *(_BYTE *)(a1 + 52))
  {
    v66[0] = 0;
    *(_OWORD *)__p = 0u;
    memset(obj, 0, sizeof(obj));
    *(_QWORD *)buf = 0;
    sub_10004AD30((uint64_t)buf);
    obj[1] = (id)*(int *)buf;
    obj[2] = (id)*(__int16 *)&buf[4];
    if (*(_BYTE *)(a1 + 52))
    {
      obj[3] = (id)*(int *)buf;
      obj[4] = (id)*(__int16 *)&buf[4];
      LODWORD(obj[5]) = *(_DWORD *)(v2 + 1480);
      if (LODWORD(obj[5]))
      {
        v5 = 0;
        v6 = (char *)__p[1];
        do
        {
          if ((unint64_t)v6 >= v66[0])
          {
            v8 = (char *)__p[0];
            v9 = (v6 - (char *)__p[0]) >> 2;
            v10 = v9 + 1;
            if ((unint64_t)(v9 + 1) >> 62)
              abort();
            v11 = v66[0] - (unint64_t)__p[0];
            if ((uint64_t)(v66[0] - (unint64_t)__p[0]) >> 1 > v10)
              v10 = v11 >> 1;
            if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
              v12 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v12 = v10;
            if (v12)
            {
              v13 = (char *)sub_1002B46E0((uint64_t)v66, v12);
              v8 = (char *)__p[0];
              v6 = (char *)__p[1];
            }
            else
            {
              v13 = 0;
            }
            v14 = &v13[4 * v9];
            *(_DWORD *)v14 = *(_DWORD *)(a1 + 48);
            v7 = v14 + 4;
            while (v6 != v8)
            {
              v15 = *((_DWORD *)v6 - 1);
              v6 -= 4;
              *((_DWORD *)v14 - 1) = v15;
              v14 -= 4;
            }
            __p[0] = v14;
            __p[1] = v7;
            v66[0] = &v13[4 * v12];
            if (v8)
              operator delete(v8);
          }
          else
          {
            *(_DWORD *)v6 = *(_DWORD *)(a1 + 48);
            v7 = v6 + 4;
          }
          __p[1] = v7;
          ++v5;
          v6 = (char *)v7;
        }
        while (v5 < LODWORD(obj[5]));
      }
    }
    else
    {
      memset(&obj[3], 0, 20);
    }
    sub_100030BCC(buf, *(_QWORD *)(a1 + 32));
    *(_QWORD *)v57 = buf;
    v16 = sub_100648DA0((uint64_t **)(v2 + 1424), buf, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)v57);
    objc_storeStrong((id *)v16 + 6, obj[0]);
    if (v16 + 48 == (unsigned __int8 *)obj)
    {
      *((_DWORD *)v16 + 22) = obj[5];
    }
    else
    {
      *(_OWORD *)(v16 + 56) = *(_OWORD *)&obj[1];
      *(_OWORD *)(v16 + 72) = *(_OWORD *)&obj[3];
      *((_DWORD *)v16 + 22) = obj[5];
      sub_1002D6FBC((char *)v16 + 96, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
    }
    v17 = *(unsigned __int8 *)(a1 + 52);
    v18 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v19 = "and blocking (forced)";
      v20 = *(_QWORD *)(a1 + 32);
      if (!v17)
        v19 = " ";
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v20;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: evaluateIncomingDisconnection Device %@ disconnected now, started monitoring %s", buf, 0x16u);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

    if (!v17)
      goto LABEL_38;
    goto LABEL_35;
  }
  v66[0] = 0;
  *(_OWORD *)__p = 0u;
  memset(obj, 0, sizeof(obj));
  sub_100030BCC(buf, *(_QWORD *)(a1 + 32));
  *(_QWORD *)v57 = buf;
  v23 = sub_100648DA0((uint64_t **)(v2 + 1424), buf, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)v57);
  obj[0] = *((id *)v23 + 6);
  *(_OWORD *)&obj[1] = *(_OWORD *)(v23 + 56);
  *(_OWORD *)&obj[3] = *(_OWORD *)(v23 + 72);
  LODWORD(obj[5]) = *((_DWORD *)v23 + 22);
  sub_1002D70C0(__p, (uint64_t)(v23 + 96));
  v24 = (_BYTE *)v4 - (char *)obj[2] + 1000 * ((_QWORD)v3 - (unint64_t)obj[1]);
  v25 = v24 / 0x3E8;
  v26 = *(_DWORD *)(v2 + 1472);
  *(_WORD *)&buf[6] = 0;
  *(_DWORD *)buf = v24 / 0x3E8;
  v27 = v24 % 0x3E8;
  *(_WORD *)&buf[4] = v24 % 0x3E8;
  *(_DWORD *)&v57[4] = 0;
  *(_DWORD *)v57 = v26;
  v28 = sub_100072ACC((uint64_t)buf, (uint64_t)v57);
  if (v28 < 0)
  {
    ++LODWORD(obj[5]);
    obj[1] = v3;
    obj[2] = v4;
    v33 = (char *)__p[1];
    if (__p[1] >= (void *)v66[0])
    {
      v35 = (char *)__p[0];
      v36 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 62)
        abort();
      v38 = v66[0] - (unint64_t)__p[0];
      if ((uint64_t)(v66[0] - (unint64_t)__p[0]) >> 1 > v37)
        v37 = v38 >> 1;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
        v39 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
      {
        v40 = (char *)sub_1002B46E0((uint64_t)v66, v39);
        v35 = (char *)__p[0];
        v33 = (char *)__p[1];
      }
      else
      {
        v40 = 0;
      }
      v41 = &v40[4 * v36];
      v42 = &v40[4 * v39];
      *(_DWORD *)v41 = *(_DWORD *)(a1 + 48);
      v34 = v41 + 4;
      while (v33 != v35)
      {
        v43 = *((_DWORD *)v33 - 1);
        v33 -= 4;
        *((_DWORD *)v41 - 1) = v43;
        v41 -= 4;
      }
      __p[0] = v41;
      __p[1] = v34;
      v66[0] = v42;
      if (v35)
        operator delete(v35);
    }
    else
    {
      *(_DWORD *)__p[1] = *(_DWORD *)(a1 + 48);
      v34 = v33 + 4;
    }
    __p[1] = v34;
    v44 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v45 = *(_QWORD *)(a1 + 32);
      v68 = 0u;
      v69 = 0u;
      memset(buf, 0, sizeof(buf));
      snprintf((char *)buf, 0x3FuLL, "%0llu.%0llu", v25, v27);
      sub_100091AE8(v53, (char *)buf);
      v46 = v56 >= 0 ? v53 : *(_BYTE **)v53;
      v47 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)v57 = 138413058;
      *(_QWORD *)&v57[4] = v45;
      v58 = 2080;
      v59 = v46;
      v60 = 1024;
      v61 = (int)obj[5];
      v62 = 1024;
      v63 = v47;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: evaluateIncomingDisconnection Device %@ disconnected %s seconds ago, increasing counter to %d, disconnectResult=%d", v57, 0x22u);
      if (v56 < 0)
        operator delete(*(void **)v53);
    }
    v48 = (int)obj[5];
    v49 = *(_DWORD *)(v2 + 1480);
    v30 = LODWORD(obj[5]) >= v49;
    if (LODWORD(obj[5]) >= v49)
    {
      obj[3] = v3;
      obj[4] = v4;
      v50 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        v51 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = v51;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v48;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: evaluateIncomingDisconnection Device %@ disconnected, counter:%d started blocking", buf, 0x12u);
      }
    }
    sub_100030BCC(buf, *(_QWORD *)(a1 + 32));
    *(_QWORD *)v57 = buf;
    v52 = sub_100648DA0((uint64_t **)(v2 + 1424), buf, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)v57);
    objc_storeStrong((id *)v52 + 6, obj[0]);
    if (v52 + 48 == (unsigned __int8 *)obj)
    {
      *((_DWORD *)v52 + 22) = obj[5];
    }
    else
    {
      *(_OWORD *)(v52 + 56) = *(_OWORD *)&obj[1];
      *(_OWORD *)(v52 + 72) = *(_OWORD *)&obj[3];
      *((_DWORD *)v52 + 22) = obj[5];
      sub_1002D6FBC((char *)v52 + 96, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
    }
  }
  else
  {
    sub_100030BCC(buf, *(_QWORD *)(a1 + 32));
    sub_100648F1C((uint64_t **)(v2 + 1424), buf);
    v29 = qword_100999890;
    v30 = 0;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v31 = *(_QWORD *)(a1 + 32);
      v68 = 0u;
      v69 = 0u;
      memset(buf, 0, sizeof(buf));
      snprintf((char *)buf, 0x3FuLL, "%0llu.%0llu", v25, v27);
      sub_100091AE8(v57, (char *)buf);
      if (v60 >= 0)
        v32 = v57;
      else
        v32 = *(_BYTE **)v57;
      *(_DWORD *)v53 = 138412546;
      *(_QWORD *)&v53[4] = v31;
      v54 = 2080;
      v55 = v32;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: evaluateIncomingDisconnection  Device %@ disconnected %s seconds ago, stop monitoring", v53, 0x16u);
      if (SHIBYTE(v60) < 0)
        operator delete(*(void **)v57);
      v30 = 0;
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  if (v28 < 0)
  {
    if (!v30)
    {
LABEL_38:
      sub_1006426AC(v2);
      return;
    }
LABEL_35:
    v21 = sub_1000438A4();
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093DDE8);
    v22 = sub_1000589DC((uint64_t)off_1009778C0, *(void **)(a1 + 32), 0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 3640))(v21, v22);
    goto LABEL_38;
  }
}

void sub_100642620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100642674((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100642674(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_1006426AC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const unsigned __int8 *v5;
  id v6;
  void *v7;
  const unsigned __int8 *v8;
  const unsigned __int8 *v9;
  BOOL v10;
  NSObject *v11;
  uint64_t v12;
  const unsigned __int8 *v13;
  id v14;
  void *v15;
  const unsigned __int8 *v16;
  const unsigned __int8 *v17;
  __int128 v18;
  uint64_t v19;

  v2 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 2768))(v2))
  {
    v3 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 1440);
      LODWORD(v18) = 134217984;
      *(_QWORD *)((char *)&v18 + 4) = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: LeConnectionManager::evaluateDenyListDevices incoming devices:%lu", (uint8_t *)&v18, 0xCu);
    }
    if (*(_QWORD *)(a1 + 1440))
    {
      v18 = 0uLL;
      v19 = 0;
      sub_100648F74((uint64_t *)&v18, a1 + 1424);
      v5 = (const unsigned __int8 *)v18;
      if ((__int128 *)v18 != (__int128 *)((char *)&v18 + 8))
      {
        do
        {
          v6 = sub_100030DF4(v5 + 32);
          v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
          sub_1006411E8(a1, v7, 0);

          v8 = (const unsigned __int8 *)*((_QWORD *)v5 + 1);
          if (v8)
          {
            do
            {
              v9 = v8;
              v8 = *(const unsigned __int8 **)v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              v9 = (const unsigned __int8 *)*((_QWORD *)v5 + 2);
              v10 = *(_QWORD *)v9 == (_QWORD)v5;
              v5 = v9;
            }
            while (!v10);
          }
          v5 = v9;
        }
        while (v9 != (const unsigned __int8 *)((char *)&v18 + 8));
      }
      sub_100642BAC(a1);
      sub_1006460DC((uint64_t)&v18, *((_QWORD **)&v18 + 1));
    }
  }
  if (_os_feature_enabled_impl("BluetoothFeatures", "OutgoingLeConnectionDenyList"))
  {
    v11 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 1464);
      LODWORD(v18) = 134217984;
      *(_QWORD *)((char *)&v18 + 4) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: LeConnectionManager::evaluateDenyListDevices outgoing devices:%lu", (uint8_t *)&v18, 0xCu);
    }
    if (*(_QWORD *)(a1 + 1464))
    {
      v18 = 0uLL;
      v19 = 0;
      sub_100648F74((uint64_t *)&v18, a1 + 1448);
      v13 = (const unsigned __int8 *)v18;
      if ((__int128 *)v18 != (__int128 *)((char *)&v18 + 8))
      {
        do
        {
          v14 = sub_100030DF4(v13 + 32);
          v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
          sub_1006411E8(a1, v15, 0);

          v16 = (const unsigned __int8 *)*((_QWORD *)v13 + 1);
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = *(const unsigned __int8 **)v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (const unsigned __int8 *)*((_QWORD *)v13 + 2);
              v10 = *(_QWORD *)v17 == (_QWORD)v13;
              v13 = v17;
            }
            while (!v10);
          }
          v13 = v17;
        }
        while (v17 != (const unsigned __int8 *)((char *)&v18 + 8));
      }
      sub_100642BAC(a1);
      sub_1006460DC((uint64_t)&v18, *((_QWORD **)&v18 + 1));
    }
  }
}

void sub_100642918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_1006460DC((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_10064295C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int *i;
  _QWORD *v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v19;
  void *v20[2];
  unsigned __int8 v21;
  __int128 v22;
  _OWORD v23[4];
  void *v24[2];
  __int128 v25;
  __int128 v26;
  _OWORD v27[9];
  uint64_t v28;

  v28 = 0;
  v26 = 0u;
  memset(v27, 0, sizeof(v27));
  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  memset(v23, 0, sizeof(v23));
  v22 = 0u;
  sub_1002613AC((uint64_t)&v22);
  v2 = (_QWORD *)std::ostream::operator<<(v23, *(_QWORD *)a1 != 0);
  v3 = sub_1002614D8(v2, (uint64_t)" fRecentDisconnectTime", 22);
  sub_1003FCE28((_QWORD *)(a1 + 8), v20);
  if ((v21 & 0x80u) == 0)
    v4 = v20;
  else
    v4 = (void **)v20[0];
  if ((v21 & 0x80u) == 0)
    v5 = v21;
  else
    v5 = (uint64_t)v20[1];
  v6 = sub_1002614D8(v3, (uint64_t)v4, v5);
  v7 = sub_1002614D8(v6, (uint64_t)" fStartBlockingTime:", 20);
  sub_1003FCE28((_QWORD *)(a1 + 24), __p);
  if ((v19 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v9 = v19;
  else
    v9 = (uint64_t)__p[1];
  v10 = sub_1002614D8(v7, (uint64_t)v8, v9);
  v11 = sub_1002614D8(v10, (uint64_t)" fDisconnectCount:", 18);
  v12 = (_QWORD *)std::ostream::operator<<(v11, *(unsigned int *)(a1 + 40));
  sub_1002614D8(v12, (uint64_t)" DisconnectResults:", 19);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  if ((char)v21 < 0)
    operator delete(v20[0]);
  v13 = *(unsigned int **)(a1 + 48);
  for (i = *(unsigned int **)(a1 + 56); v13 != i; ++v13)
  {
    v15 = (_QWORD *)std::ostream::operator<<(v23, *v13);
    sub_1002614D8(v15, (uint64_t)" ", 1);
  }
  std::stringbuf::str((char *)v23 + 8);
  *(_QWORD *)((char *)&v23[-1]
  *(_QWORD *)&v23[0] = v16;
  if (SHIBYTE(v25) < 0)
    operator delete(v24[1]);
  std::streambuf::~streambuf((char *)v23 + 8);
  return std::ios::~ios(v27);
}

void sub_100642B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
    operator delete(__p);
  sub_1006CC5C8((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_100642BAC(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  dispatch_time_t v7;
  _QWORD handler[5];
  uint8_t buf[4];
  unint64_t v10;

  if (*(_QWORD *)(a1 + 1488) || sub_100642D4C(a1) && (sub_100643514(a1) & 1) != 0)
  {
    sub_10061BCE4(a1);
  }
  else
  {
    v2 = (1000 * *(_DWORD *)(a1 + 1476)) / 0xAuLL;
    v3 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v10 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: armPeriodicLeConnectionDenyListTimer %llu ms Armed!", buf, 0xCu);
    }
    v4 = sub_1000419F4();
    v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v4 + 8));
    *(_QWORD *)(a1 + 1488) = v5;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10064357C;
    handler[3] = &unk_100917378;
    handler[4] = a1;
    dispatch_source_set_event_handler(v5, handler);
    v6 = *(NSObject **)(a1 + 1488);
    v7 = dispatch_time(0x8000000000000000, 1000000 * v2);
    dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_activate(*(dispatch_object_t *)(a1 + 1488));
  }
}

uint64_t sub_100642D4C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;

  v1 = *(_QWORD **)(a1 + 1424);
  if (v1 == (_QWORD *)(a1 + 1432))
    return 1;
  while (!v1[9] && !v1[10])
  {
    v2 = (_QWORD *)v1[1];
    if (v2)
    {
      do
      {
        v3 = v2;
        v2 = (_QWORD *)*v2;
      }
      while (v2);
    }
    else
    {
      do
      {
        v3 = (_QWORD *)v1[2];
        v4 = *v3 == (_QWORD)v1;
        v1 = v3;
      }
      while (!v4);
    }
    v1 = v3;
    if (v3 == (_QWORD *)(a1 + 1432))
      return 1;
  }
  return 0;
}

void sub_100642DB4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  unsigned int v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  unsigned __int8 *v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  NSObject *v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  void *v30;
  char *v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  int v39;
  NSObject *v40;
  uint64_t v41;
  _BYTE *v42;
  int v43;
  unsigned __int8 *v44;
  _BYTE v45[12];
  __int16 v46;
  _BYTE *v47;
  char v48;
  _BYTE v49[12];
  __int16 v50;
  _BYTE *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  id obj[6];
  void *__p[2];
  _QWORD v58[2];
  uint8_t buf[32];
  __int128 v60;
  __int128 v61;

  v2 = *(_QWORD *)(a1 + 40);
  obj[0] = 0;
  sub_10004AD30((uint64_t)obj);
  v3 = (void *)SLODWORD(obj[0]);
  v4 = (void *)SWORD2(obj[0]);
  sub_100030BCC(obj, *(_QWORD *)(a1 + 32));
  if (v2 + 1456 == sub_10000C5B8(v2 + 1448, (unsigned __int8 *)obj) || *(_BYTE *)(a1 + 52))
  {
    v58[0] = 0;
    *(_OWORD *)__p = 0u;
    memset(obj, 0, sizeof(obj));
    *(_QWORD *)buf = 0;
    sub_10004AD30((uint64_t)buf);
    obj[1] = (id)*(int *)buf;
    obj[2] = (id)*(__int16 *)&buf[4];
    if (*(_BYTE *)(a1 + 52))
    {
      obj[3] = (id)*(int *)buf;
      obj[4] = (id)*(__int16 *)&buf[4];
      LODWORD(obj[5]) = *(_DWORD *)(v2 + 1480);
      if (LODWORD(obj[5]))
      {
        v5 = 0;
        v6 = (char *)__p[1];
        do
        {
          if ((unint64_t)v6 >= v58[0])
          {
            v8 = (char *)__p[0];
            v9 = (v6 - (char *)__p[0]) >> 2;
            v10 = v9 + 1;
            if ((unint64_t)(v9 + 1) >> 62)
              abort();
            v11 = v58[0] - (unint64_t)__p[0];
            if ((uint64_t)(v58[0] - (unint64_t)__p[0]) >> 1 > v10)
              v10 = v11 >> 1;
            if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
              v12 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v12 = v10;
            if (v12)
            {
              v13 = (char *)sub_1002B46E0((uint64_t)v58, v12);
              v8 = (char *)__p[0];
              v6 = (char *)__p[1];
            }
            else
            {
              v13 = 0;
            }
            v14 = &v13[4 * v9];
            *(_DWORD *)v14 = *(_DWORD *)(a1 + 48);
            v7 = v14 + 4;
            while (v6 != v8)
            {
              v15 = *((_DWORD *)v6 - 1);
              v6 -= 4;
              *((_DWORD *)v14 - 1) = v15;
              v14 -= 4;
            }
            __p[0] = v14;
            __p[1] = v7;
            v58[0] = &v13[4 * v12];
            if (v8)
              operator delete(v8);
          }
          else
          {
            *(_DWORD *)v6 = *(_DWORD *)(a1 + 48);
            v7 = v6 + 4;
          }
          __p[1] = v7;
          ++v5;
          v6 = (char *)v7;
        }
        while (v5 < LODWORD(obj[5]));
      }
    }
    else
    {
      memset(&obj[3], 0, 20);
    }
    sub_100030BCC(buf, *(_QWORD *)(a1 + 32));
    *(_QWORD *)v49 = buf;
    v16 = sub_100648DA0((uint64_t **)(v2 + 1448), buf, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)v49);
    objc_storeStrong((id *)v16 + 6, obj[0]);
    if (v16 + 48 == (unsigned __int8 *)obj)
    {
      *((_DWORD *)v16 + 22) = obj[5];
    }
    else
    {
      *(_OWORD *)(v16 + 56) = *(_OWORD *)&obj[1];
      *(_OWORD *)(v16 + 72) = *(_OWORD *)&obj[3];
      *((_DWORD *)v16 + 22) = obj[5];
      sub_1002D6FBC((char *)v16 + 96, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
    }
    v17 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(_QWORD *)(a1 + 32);
      v19 = "and blocking (forced)";
      if (!*(_BYTE *)(a1 + 52))
        v19 = " ";
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v18;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: evaluateOutgoingDisconnection Device %@ disconnected now, started monitoring %s", buf, 0x16u);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

LABEL_35:
    sub_1006426AC(v2);
    return;
  }
  v58[0] = 0;
  *(_OWORD *)__p = 0u;
  memset(obj, 0, sizeof(obj));
  sub_100030BCC(buf, *(_QWORD *)(a1 + 32));
  *(_QWORD *)v49 = buf;
  v20 = sub_100648DA0((uint64_t **)(v2 + 1448), buf, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)v49);
  obj[0] = *((id *)v20 + 6);
  *(_OWORD *)&obj[1] = *(_OWORD *)(v20 + 56);
  *(_OWORD *)&obj[3] = *(_OWORD *)(v20 + 72);
  LODWORD(obj[5]) = *((_DWORD *)v20 + 22);
  sub_1002D70C0(__p, (uint64_t)(v20 + 96));
  v21 = (_BYTE *)v4 - (char *)obj[2] + 1000 * ((_QWORD)v3 - (unint64_t)obj[1]);
  v22 = v21 / 0x3E8;
  v23 = *(_DWORD *)(v2 + 1472);
  *(_WORD *)&buf[6] = 0;
  *(_DWORD *)buf = v21 / 0x3E8;
  v24 = v21 % 0x3E8;
  *(_WORD *)&buf[4] = v21 % 0x3E8;
  *(_DWORD *)&v49[4] = 0;
  *(_DWORD *)v49 = v23;
  v25 = sub_100072ACC((uint64_t)buf, (uint64_t)v49);
  if (v25 < 0)
  {
    ++LODWORD(obj[5]);
    obj[1] = v3;
    obj[2] = v4;
    v29 = (char *)__p[1];
    if (__p[1] >= (void *)v58[0])
    {
      v31 = (char *)__p[0];
      v32 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 62)
        abort();
      v34 = v58[0] - (unint64_t)__p[0];
      if ((uint64_t)(v58[0] - (unint64_t)__p[0]) >> 1 > v33)
        v33 = v34 >> 1;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
        v35 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      if (v35)
      {
        v36 = (char *)sub_1002B46E0((uint64_t)v58, v35);
        v31 = (char *)__p[0];
        v29 = (char *)__p[1];
      }
      else
      {
        v36 = 0;
      }
      v37 = &v36[4 * v32];
      v38 = &v36[4 * v35];
      *(_DWORD *)v37 = *(_DWORD *)(a1 + 48);
      v30 = v37 + 4;
      while (v29 != v31)
      {
        v39 = *((_DWORD *)v29 - 1);
        v29 -= 4;
        *((_DWORD *)v37 - 1) = v39;
        v37 -= 4;
      }
      __p[0] = v37;
      __p[1] = v30;
      v58[0] = v38;
      if (v31)
        operator delete(v31);
    }
    else
    {
      *(_DWORD *)__p[1] = *(_DWORD *)(a1 + 48);
      v30 = v29 + 4;
    }
    __p[1] = v30;
    v40 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v41 = *(_QWORD *)(a1 + 32);
      v60 = 0u;
      v61 = 0u;
      memset(buf, 0, sizeof(buf));
      snprintf((char *)buf, 0x3FuLL, "%0llu.%0llu", v22, v24);
      sub_100091AE8(v45, (char *)buf);
      v42 = v48 >= 0 ? v45 : *(_BYTE **)v45;
      v43 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)v49 = 138413058;
      *(_QWORD *)&v49[4] = v41;
      v50 = 2080;
      v51 = v42;
      v52 = 1024;
      v53 = (int)obj[5];
      v54 = 1024;
      v55 = v43;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: evaluateOutgoingDisconnection Device %@ disconnected %s seconds ago, increasing counter to %d, disconnectResult=%d", v49, 0x22u);
      if (v48 < 0)
        operator delete(*(void **)v45);
    }
    if (LODWORD(obj[5]) >= *(_DWORD *)(v2 + 1480))
    {
      obj[3] = v3;
      obj[4] = v4;
    }
    sub_100030BCC(buf, *(_QWORD *)(a1 + 32));
    *(_QWORD *)v49 = buf;
    v44 = sub_100648DA0((uint64_t **)(v2 + 1448), buf, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)v49);
    objc_storeStrong((id *)v44 + 6, obj[0]);
    if (v44 + 48 == (unsigned __int8 *)obj)
    {
      *((_DWORD *)v44 + 22) = obj[5];
    }
    else
    {
      *(_OWORD *)(v44 + 56) = *(_OWORD *)&obj[1];
      *(_OWORD *)(v44 + 72) = *(_OWORD *)&obj[3];
      *((_DWORD *)v44 + 22) = obj[5];
      sub_1002D6FBC((char *)v44 + 96, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
    }
  }
  else
  {
    sub_100030BCC(buf, *(_QWORD *)(a1 + 32));
    sub_100648F1C((uint64_t **)(v2 + 1448), buf);
    v26 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
    {
      v27 = *(_QWORD *)(a1 + 32);
      v60 = 0u;
      v61 = 0u;
      memset(buf, 0, sizeof(buf));
      snprintf((char *)buf, 0x3FuLL, "%0llu.%0llu", v22, v24);
      sub_100091AE8(v49, (char *)buf);
      v28 = v52 >= 0 ? v49 : *(_BYTE **)v49;
      *(_DWORD *)v45 = 138412546;
      *(_QWORD *)&v45[4] = v27;
      v46 = 2080;
      v47 = v28;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: evaluateOutgoingDisconnection  Device %@ disconnected %s seconds ago, stop monitoring", v45, 0x16u);
      if (SHIBYTE(v52) < 0)
        operator delete(*(void **)v49);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  if (v25 < 0)
    goto LABEL_35;
}

void sub_1006434C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100642674((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100643514(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;

  v1 = *(_QWORD **)(a1 + 1448);
  if (v1 == (_QWORD *)(a1 + 1456))
    return 1;
  while (!v1[9] && !v1[10])
  {
    v2 = (_QWORD *)v1[1];
    if (v2)
    {
      do
      {
        v3 = v2;
        v2 = (_QWORD *)*v2;
      }
      while (v2);
    }
    else
    {
      do
      {
        v3 = (_QWORD *)v1[2];
        v4 = *v3 == (_QWORD)v1;
        v1 = v3;
      }
      while (!v4);
    }
    v1 = v3;
    if (v3 == (_QWORD *)(a1 + 1456))
      return 1;
  }
  return 0;
}

uint64_t sub_10064357C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: fLeConnectionDenyListMaintainTimer Timer expired!", v4, 2u);
  }
  sub_10061BCE4(v1);
  return sub_1006426AC(v1);
}

void sub_1006435F4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  if (qword_100993F20 != -1)
    dispatch_once(&qword_100993F20, &stru_10093DC70);
  v4 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10064382C;
  v6[3] = &unk_10093CE18;
  v8 = a1;
  v5 = v3;
  v7 = v5;
  sub_100041A34(v4, v6);

}

void sub_1006436AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1006436CC(id a1)
{
  uint64_t v1;
  int v2;
  int v3;
  NSObject *v4;
  void *__p[2];
  char v6;
  uint8_t buf[8];
  char v8;

  v1 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "FastLEConnectionForceFakeLocalControllerInfo");
  v2 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, __p, &byte_100993F18);
  if (byte_100993F18)
    v3 = v2;
  else
    v3 = 0;
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3)
      return;
  }
  else if (!v3)
  {
    return;
  }
  v4 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = byte_100993F18;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Warning: FastLEConnection:FastLEConnectionForceFakeLocalControllerInfo fakeControllerInfo:%d", buf, 8u);
  }
}

void sub_1006437F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_10064382C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  __int16 v9[8];

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(v2 + 184)
    && (v3 = *(void **)(v2 + 1560)) != 0
    && objc_msgSend(v3, "length")
    && *(_BYTE *)(v2 + 1568))
  {
    v4 = *(id *)(v2 + 1560);
    if (byte_100993F18)
    {
      v5 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        v9[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Warning: FastLEConnection:LeConnectionManager::readLocalControllerCachedInfo randomizing controller info", (uint8_t *)v9, 2u);
      }
      v6 = objc_msgSend(*(id *)(v2 + 1560), "length");
      v7 = (char *)malloc_type_malloc(v6, 0xDD033FDuLL);
      memcpy(v7, objc_msgSend(*(id *)(v2 + 1560), "bytes"), v6);
      arc4random_buf(&v7[v6 - 4], 4uLL);
      v8 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v7, v6));

      free(v7);
      v4 = (id)v8;
    }
  }
  else
  {
    v4 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_100643990(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1006439A8(uint64_t a1)
{
  NSObject *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  unint64_t v9;
  unsigned int v10;
  const char *v11;
  unsigned int v12;
  const char *v13;
  char *v14;
  int v15;
  const char *v16;
  _BOOL4 v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  id v29;
  void *v30;
  _QWORD *v31;
  void **v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  BOOL v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t *v62;
  _QWORD *v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  BOOL v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t **v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t **v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t **v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t **v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t **v82;
  _QWORD *v83;
  NSObject *v84;
  char *v85;
  _QWORD *v86;
  _QWORD *v87;
  BOOL v88;
  NSObject *v89;
  const unsigned __int8 *v90;
  id v91;
  id v92;
  unsigned __int8 *v93;
  const unsigned __int8 **v94;
  const unsigned __int8 *v95;
  id v96;
  id v97;
  unsigned __int8 *v98;
  const unsigned __int8 **v99;
  const unsigned __int8 *v100;
  id v101;
  id v102;
  unsigned __int8 *v103;
  const unsigned __int8 **v104;
  _QWORD *v105;
  int v106;
  _QWORD *v107;
  _QWORD *v108;
  int v109;
  const unsigned __int8 *v110;
  NSObject *v111;
  char *v112;
  unsigned __int8 *v113;
  const unsigned __int8 **v114;
  NSObject *v115;
  const unsigned __int8 *v116;
  NSObject *v117;
  char *v118;
  unsigned __int8 *v119;
  const unsigned __int8 **v120;
  NSObject *v121;
  uint64_t v122;
  const unsigned __int8 *v123;
  const unsigned __int8 *v124;
  void *v125;
  id v126;
  void *v127;
  NSObject *v128;
  id v129;
  char *v130;
  void *v131;
  id v132;
  int v133;
  void *v134;
  id v135;
  void *v136;
  int v137;
  void *v138;
  id v139;
  void *v140;
  int v141;
  const unsigned __int8 *v142;
  id v143;
  void *v144;
  _BOOL4 v145;
  NSObject *v146;
  uint8_t *v147;
  const unsigned __int8 *v148;
  const unsigned __int8 *v149;
  unsigned __int8 *v150;
  const unsigned __int8 **v151;
  NSObject *v152;
  const unsigned __int8 *v153;
  NSObject *v154;
  char *v155;
  uint64_t v156;
  const char *v157;
  unsigned __int8 *v158;
  const unsigned __int8 **v159;
  NSObject *v160;
  id v161;
  id v162;
  uint64_t v163;
  void *i;
  NSObject *v165;
  uint64_t v166;
  NSObject *v167;
  id v168;
  id v169;
  uint64_t v170;
  void *j;
  NSObject *v172;
  uint64_t v173;
  NSObject *v174;
  id v175;
  id v176;
  uint64_t v177;
  void *k;
  NSObject *v179;
  uint64_t v180;
  NSObject *v181;
  id v182;
  id v183;
  uint64_t v184;
  void *m;
  NSObject *v186;
  uint64_t v187;
  NSObject *v188;
  id v189;
  id v190;
  uint64_t v191;
  void *n;
  NSObject *v193;
  uint64_t v194;
  NSObject *v195;
  id v196;
  id v197;
  uint64_t v198;
  void *ii;
  NSObject *v200;
  uint64_t v201;
  NSObject *v202;
  id v203;
  id v204;
  uint64_t v205;
  void *jj;
  NSObject *v207;
  uint64_t v208;
  NSObject *v209;
  _QWORD *v210;
  NSObject *v211;
  uint8_t *v212;
  _QWORD *v213;
  _QWORD *v214;
  NSObject *v215;
  _QWORD *v216;
  NSObject *v217;
  uint8_t *v218;
  _QWORD *v219;
  _QWORD *v220;
  NSObject *v221;
  const unsigned __int8 *v222;
  NSObject *v223;
  char *v224;
  int v225;
  unsigned __int8 *v226;
  const unsigned __int8 **v227;
  uint64_t **v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  void *v232;
  id v233;
  uint64_t **v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  unint64_t v264[2];
  _BYTE v265[128];
  _BYTE v266[128];
  _BYTE v267[128];
  _BYTE v268[128];
  _BYTE v269[128];
  _BYTE v270[128];
  _BYTE v271[128];
  void *__p[2];
  unsigned __int8 v273;
  uint8_t buf[64];
  __int128 v275;
  void *v276[2];
  __int128 v277;
  __int128 v278;
  _OWORD v279[9];
  uint64_t v280;
  uuid_string_t out;

  *(_QWORD *)buf = 0;
  sub_10004AD30((uint64_t)buf);
  v1 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ LE Connection Manager -------------------", buf, 2u);
    v1 = qword_100999890;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2 = sub_100021770(*(_QWORD *)(a1 + 288));
    v3 = (id)objc_claimAutoreleasedReturnValue(v2);
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: Local address \"%{public}@\"", buf, 0xCu);

  }
  *(_QWORD *)buf = 0;
  sub_10004AD30((uint64_t)buf);
  v4 = *(int *)buf;
  v5 = *(__int16 *)&buf[4];
  v6 = *(_QWORD *)(a1 + 864);
  v7 = *(_QWORD *)(a1 + 872);
  v8 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 1000 * (v4 - v6) - v7 + v5;
    v10 = *(_DWORD *)(a1 + 920);
    if (v10 > 3)
      v11 = "UNKNOWN";
    else
      v11 = (&off_10093E058)[v10];
    v12 = *(_DWORD *)(a1 + 856);
    if (v12 > 4)
      v13 = "UNKNOWN";
    else
      v13 = (&off_10093E078)[v12];
    memset(buf, 0, sizeof(buf));
    snprintf((char *)buf, 0x3FuLL, "%0llu.%0llu", v9 / 0x3E8, v9 % 0x3E8);
    sub_100091AE8(out, (char *)buf);
    if (out[23] >= 0)
      v14 = out;
    else
      v14 = *(char **)out;
    v15 = *(unsigned __int8 *)(a1 + 880);
    if (*(_BYTE *)(a1 + 1057))
      v16 = "YES";
    else
      v16 = "NO";
    *(_DWORD *)buf = 136447746;
    *(_QWORD *)&buf[4] = v11;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    *(_WORD *)&buf[18] = 2082;
    *(_QWORD *)&buf[20] = v13;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v12;
    *(_WORD *)&buf[34] = 2082;
    *(_QWORD *)&buf[36] = v14;
    *(_WORD *)&buf[44] = 1024;
    *(_DWORD *)&buf[46] = v15;
    *(_WORD *)&buf[50] = 2082;
    *(_QWORD *)&buf[52] = v16;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "statedump: state: %{public}s(%d),%{public}s(%d) for %{public}s seconds, %d errors, fControllerConnectionListFull=%{public}s", buf, 0x3Cu);
    if (out[23] < 0)
      operator delete(*(void **)out);
    v8 = qword_100999890;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(_QWORD *)(a1 + 888) != 0;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v17;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "statedump: FastConnectionScanAssertionActive:%d", buf, 8u);
    v8 = qword_100999890;
  }
  if (*(_QWORD *)(a1 + 544) && os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(_QWORD *)(a1 + 552);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v18;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "statedump: FastConnectionScanTimer interval:%f", buf, 0xCu);
    v8 = qword_100999890;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v19 = *(unsigned __int8 *)(a1 + 1059);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v19;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "statedump: stackIsShuttingDown:%d", buf, 8u);
    v8 = qword_100999890;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "statedump: Connected devices:", buf, 2u);
  }
  v20 = *(_QWORD **)(a1 + 376);
  if (v20 != (_QWORD *)(a1 + 384))
  {
    v235 = (uint64_t **)(a1 + 520);
    v21 = (_QWORD *)(a1 + 528);
    v228 = (uint64_t **)(a1 + 496);
    v22 = (_QWORD *)(a1 + 504);
    do
    {
      v280 = 0;
      memset(v279, 0, sizeof(v279));
      v278 = 0u;
      v277 = 0u;
      *(_OWORD *)v276 = 0u;
      v275 = 0u;
      memset(buf, 0, sizeof(buf));
      sub_1002613AC((uint64_t)buf);
      if (a1 + 408 == sub_10000C5B8(a1 + 400, (unsigned __int8 *)v20 + 32))
      {
        v264[1] = 0;
        v264[0] = 0;
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v28 = off_1009778C0;
        v29 = sub_100030DF4((const unsigned __int8 *)v20 + 32);
        v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
        sub_10065CCCC((uint64_t)v28, v30, (uint64_t)v264);

        v31 = sub_1002614D8(&buf[16], (uint64_t)"   ", 3);
        memset(out, 0, sizeof(out));
        uuid_unparse_upper((const unsigned __int8 *)v20 + 32, out);
        sub_100091AE8(__p, out);
        if ((v273 & 0x80u) == 0)
          v32 = __p;
        else
          v32 = (void **)__p[0];
        if ((v273 & 0x80u) == 0)
          v33 = v273;
        else
          v33 = (uint64_t)__p[1];
        v34 = sub_1002614D8(v31, (uint64_t)v32, v33);
        v35 = sub_1002614D8(v34, (uint64_t)" (not ready, added ", 19);
        sub_100645DCC(v264);
        if (out[23] >= 0)
          v36 = out;
        else
          v36 = *(char **)out;
        if (out[23] >= 0)
          v37 = out[23];
        else
          v37 = *(_QWORD *)&out[8];
        v38 = sub_1002614D8(v35, (uint64_t)v36, v37);
        sub_1002614D8(v38, (uint64_t)" ago)", 5);
        if (out[23] < 0)
          operator delete(*(void **)out);
      }
      else
      {
        v24 = sub_1002614D8(&buf[16], (uint64_t)"   ", 3);
        memset(out, 0, sizeof(out));
        uuid_unparse_upper((const unsigned __int8 *)v20 + 32, out);
        sub_100091AE8(__p, out);
        if ((v273 & 0x80u) == 0)
          v25 = __p;
        else
          v25 = (void **)__p[0];
        if ((v273 & 0x80u) == 0)
          v26 = v273;
        else
          v26 = (uint64_t)__p[1];
        v27 = sub_1002614D8(v24, (uint64_t)v25, v26);
        sub_1002614D8(v27, (uint64_t)" (ready)", 8);
      }
      if ((char)v273 < 0)
        operator delete(__p[0]);
      v39 = v20 + 6;
      v40 = (_QWORD *)*v21;
      if (*v21)
      {
        v41 = *v39;
        v42 = (_QWORD *)(a1 + 528);
        do
        {
          v43 = v40[4];
          v44 = v43 >= v41;
          if (v43 >= v41)
            v45 = v40;
          else
            v45 = v40 + 1;
          if (v44)
            v42 = v40;
          v40 = (_QWORD *)*v45;
        }
        while (*v45);
        if (v42 != v21 && v41 >= v42[4])
        {
          v46 = sub_1002614D8(&buf[16], (uint64_t)" | CI: ", 7);
          *(_QWORD *)out = v20 + 6;
          v47 = sub_10064682C(v235, v20 + 6, (uint64_t)&unk_100740F58, (uint64_t **)out);
          v48 = (_QWORD *)std::ostream::operator<<(v46, *((unsigned __int16 *)v47 + 20));
          v49 = sub_1002614D8(v48, (uint64_t)" PL: ", 5);
          *(_QWORD *)out = v20 + 6;
          v50 = sub_10064682C(v235, v20 + 6, (uint64_t)&unk_100740F58, (uint64_t **)out);
          v51 = (_QWORD *)std::ostream::operator<<(v49, *((unsigned __int16 *)v50 + 21));
          v52 = sub_1002614D8(v51, (uint64_t)" LSTO: ", 7);
          *(_QWORD *)out = v20 + 6;
          v53 = sub_10064682C(v235, v20 + 6, (uint64_t)&unk_100740F58, (uint64_t **)out);
          v54 = (_QWORD *)std::ostream::operator<<(v52, *((unsigned __int16 *)v53 + 22));
          v55 = sub_1002614D8(v54, (uint64_t)" SubrateFactor: ", 16);
          *(_QWORD *)out = v20 + 6;
          v56 = sub_10064682C(v235, v20 + 6, (uint64_t)&unk_100740F58, (uint64_t **)out);
          v57 = (_QWORD *)std::ostream::operator<<(v55, *((unsigned __int16 *)v56 + 23));
          v58 = sub_1002614D8(v57, (uint64_t)" CN: ", 5);
          *(_QWORD *)out = v20 + 6;
          v59 = sub_10064682C(v235, v20 + 6, (uint64_t)&unk_100740F58, (uint64_t **)out);
          v60 = (_QWORD *)std::ostream::operator<<(v58, *((unsigned __int16 *)v59 + 24));
          v61 = sub_1002614D8(v60, (uint64_t)" SubrateStatus: ", 16);
          *(_QWORD *)out = v20 + 6;
          v62 = sub_10064682C(v235, v20 + 6, (uint64_t)&unk_100740F58, (uint64_t **)out);
          std::ostream::operator<<(v61, *((unsigned int *)v62 + 13));
        }
      }
      v63 = (_QWORD *)*v22;
      if (*v22)
      {
        v64 = *v39;
        v65 = (_QWORD *)(a1 + 504);
        do
        {
          v66 = v63[4];
          v67 = v66 >= v64;
          if (v66 >= v64)
            v68 = v63;
          else
            v68 = v63 + 1;
          if (v67)
            v65 = v63;
          v63 = (_QWORD *)*v68;
        }
        while (*v68);
        if (v65 != v22 && v64 >= v65[4])
        {
          v69 = sub_1002614D8(&buf[16], (uint64_t)" | Max PL: ", 11);
          *(_QWORD *)out = v20 + 6;
          v70 = sub_100647174(v228, v20 + 6, (uint64_t)&unk_100740F58, (uint64_t **)out);
          v71 = (_QWORD *)std::ostream::operator<<(v69, *((unsigned __int16 *)v70 + 20));
          v72 = sub_1002614D8(v71, (uint64_t)" Min. SubrateFactor: ", 21);
          *(_QWORD *)out = v20 + 6;
          v73 = sub_100647174(v228, v20 + 6, (uint64_t)&unk_100740F58, (uint64_t **)out);
          v74 = (_QWORD *)std::ostream::operator<<(v72, *((unsigned __int16 *)v73 + 21));
          v75 = sub_1002614D8(v74, (uint64_t)"Max. SubrateFactor: ", 20);
          *(_QWORD *)out = v20 + 6;
          v76 = sub_100647174(v228, v20 + 6, (uint64_t)&unk_100740F58, (uint64_t **)out);
          v77 = (_QWORD *)std::ostream::operator<<(v75, *((unsigned __int16 *)v76 + 22));
          v78 = sub_1002614D8(v77, (uint64_t)" CN: ", 5);
          *(_QWORD *)out = v20 + 6;
          v79 = sub_100647174(v228, v20 + 6, (uint64_t)&unk_100740F58, (uint64_t **)out);
          v80 = (_QWORD *)std::ostream::operator<<(v78, *((unsigned __int16 *)v79 + 23));
          v81 = sub_1002614D8(v80, (uint64_t)" LSTO: ", 7);
          *(_QWORD *)out = v20 + 6;
          v82 = sub_100647174(v228, v20 + 6, (uint64_t)&unk_100740F58, (uint64_t **)out);
          v83 = (_QWORD *)std::ostream::operator<<(v81, 10 * *((unsigned __int16 *)v82 + 24));
          sub_1002614D8(v83, (uint64_t)" msec", 5);
        }
      }
      v84 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str(&buf[24]);
        v85 = out;
        if (out[23] < 0)
          v85 = *(char **)out;
        LODWORD(__p[0]) = 136446210;
        *(void **)((char *)__p + 4) = v85;
        _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", (uint8_t *)__p, 0xCu);
        if (out[23] < 0)
          operator delete(*(void **)out);
      }
      *(_QWORD *)buf = v23;
      *(_QWORD *)&buf[*(_QWORD *)(v23 - 24)] = v230;
      *(_QWORD *)&buf[16] = v229;
      if (SHIBYTE(v277) < 0)
        operator delete(v276[1]);
      std::streambuf::~streambuf(&buf[24]);
      std::ios::~ios(v279);
      v86 = (_QWORD *)v20[1];
      if (v86)
      {
        do
        {
          v87 = v86;
          v86 = (_QWORD *)*v86;
        }
        while (v86);
      }
      else
      {
        do
        {
          v87 = (_QWORD *)v20[2];
          v88 = *v87 == (_QWORD)v20;
          v20 = v87;
        }
        while (!v88);
      }
      v20 = v87;
    }
    while (v87 != (_QWORD *)(a1 + 384));
  }
  v89 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "statedump: UUIDToSessionMap :  fRSSIDetectionUUIDToSessionMap", buf, 2u);
    v89 = qword_100999890;
  }
  v90 = *(const unsigned __int8 **)(a1 + 632);
  if (v90 != (const unsigned __int8 *)(a1 + 640))
  {
    do
    {
      if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
      {
        v91 = sub_100030DF4(v90 + 32);
        v92 = (id)objc_claimAutoreleasedReturnValue(v91);
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v92;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "statedump:  Device%{public}@ : Session:", buf, 0xCu);

        v89 = qword_100999890;
      }
      v93 = (unsigned __int8 *)*((_QWORD *)v90 + 1);
      if (v93)
      {
        do
        {
          v94 = (const unsigned __int8 **)v93;
          v93 = *(unsigned __int8 **)v93;
        }
        while (v93);
      }
      else
      {
        do
        {
          v94 = (const unsigned __int8 **)*((_QWORD *)v90 + 2);
          v88 = *v94 == v90;
          v90 = (const unsigned __int8 *)v94;
        }
        while (!v88);
      }
      v90 = (const unsigned __int8 *)v94;
    }
    while (v94 != (const unsigned __int8 **)(a1 + 640));
  }
  if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "statedump: UUIDToSessionMap : fUsageNotificationUUIDToSessionMap", buf, 2u);
    v89 = qword_100999890;
  }
  v95 = *(const unsigned __int8 **)(a1 + 656);
  if (v95 != (const unsigned __int8 *)(a1 + 664))
  {
    do
    {
      if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
      {
        v96 = sub_100030DF4(v95 + 32);
        v97 = (id)objc_claimAutoreleasedReturnValue(v96);
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v97;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "statedump:  Device%{public}@ : Session", buf, 0xCu);

        v89 = qword_100999890;
      }
      v98 = (unsigned __int8 *)*((_QWORD *)v95 + 1);
      if (v98)
      {
        do
        {
          v99 = (const unsigned __int8 **)v98;
          v98 = *(unsigned __int8 **)v98;
        }
        while (v98);
      }
      else
      {
        do
        {
          v99 = (const unsigned __int8 **)*((_QWORD *)v95 + 2);
          v88 = *v99 == v95;
          v95 = (const unsigned __int8 *)v99;
        }
        while (!v88);
      }
      v95 = (const unsigned __int8 *)v99;
    }
    while (v99 != (const unsigned __int8 **)(a1 + 664));
  }
  if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "statedump: SessionToUUIDMap fUsagePhyStatisticsUUIDToSessionMap :  ", buf, 2u);
    v89 = qword_100999890;
  }
  v100 = *(const unsigned __int8 **)(a1 + 680);
  if (v100 != (const unsigned __int8 *)(a1 + 688))
  {
    do
    {
      if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
      {
        v101 = sub_100030DF4(v100 + 40);
        v102 = (id)objc_claimAutoreleasedReturnValue(v101);
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v102;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "statedump:  Session:  : Device%{public}@", buf, 0xCu);

        v89 = qword_100999890;
      }
      v103 = (unsigned __int8 *)*((_QWORD *)v100 + 1);
      if (v103)
      {
        do
        {
          v104 = (const unsigned __int8 **)v103;
          v103 = *(unsigned __int8 **)v103;
        }
        while (v103);
      }
      else
      {
        do
        {
          v104 = (const unsigned __int8 **)*((_QWORD *)v100 + 2);
          v88 = *v104 == v100;
          v100 = (const unsigned __int8 *)v104;
        }
        while (!v88);
      }
      v100 = (const unsigned __int8 *)v104;
    }
    while (v104 != (const unsigned __int8 **)(a1 + 688));
  }
  if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "statedump: SessionToUUIDMap fUsagePhyStatisticsSubratingToSessionMap :  ", buf, 2u);
    v89 = qword_100999890;
  }
  v105 = *(_QWORD **)(a1 + 704);
  if (v105 != (_QWORD *)(a1 + 712))
  {
    do
    {
      if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
      {
        v106 = *((unsigned __int16 *)v105 + 20);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v106;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "statedump:  Session:  : %d", buf, 8u);
        v89 = qword_100999890;
      }
      v107 = (_QWORD *)v105[1];
      if (v107)
      {
        do
        {
          v108 = v107;
          v107 = (_QWORD *)*v107;
        }
        while (v107);
      }
      else
      {
        do
        {
          v108 = (_QWORD *)v105[2];
          v88 = *v108 == (_QWORD)v105;
          v105 = v108;
        }
        while (!v88);
      }
      v105 = v108;
    }
    while (v108 != (_QWORD *)(a1 + 712));
  }
  if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
  {
    v109 = *(char *)(a1 + 728);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v109;
    _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "statedump: fLastGLobalMinRSSIApplied : %d", buf, 8u);
    v89 = qword_100999890;
  }
  if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "statedump: Ready devices:", buf, 2u);
  }
  v110 = *(const unsigned __int8 **)(a1 + 400);
  if (v110 != (const unsigned __int8 *)(a1 + 408))
  {
    do
    {
      v111 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v110 + 32, (char *)buf);
        sub_100091AE8(out, (char *)buf);
        v112 = out[23] >= 0 ? out : *(char **)out;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v112;
        _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", buf, 0xCu);
        if (out[23] < 0)
          operator delete(*(void **)out);
      }
      v113 = (unsigned __int8 *)*((_QWORD *)v110 + 1);
      if (v113)
      {
        do
        {
          v114 = (const unsigned __int8 **)v113;
          v113 = *(unsigned __int8 **)v113;
        }
        while (v113);
      }
      else
      {
        do
        {
          v114 = (const unsigned __int8 **)*((_QWORD *)v110 + 2);
          v88 = *v114 == v110;
          v110 = (const unsigned __int8 *)v114;
        }
        while (!v88);
      }
      v110 = (const unsigned __int8 *)v114;
    }
    while (v114 != (const unsigned __int8 **)(a1 + 408));
  }
  v115 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEFAULT, "statedump: Devices with CL Info:", buf, 2u);
  }
  v116 = *(const unsigned __int8 **)(a1 + 424);
  if (v116 != (const unsigned __int8 *)(a1 + 432))
  {
    do
    {
      v117 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v116 + 32, (char *)buf);
        sub_100091AE8(out, (char *)buf);
        v118 = out[23] >= 0 ? out : *(char **)out;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v118;
        _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", buf, 0xCu);
        if (out[23] < 0)
          operator delete(*(void **)out);
      }
      v119 = (unsigned __int8 *)*((_QWORD *)v116 + 1);
      if (v119)
      {
        do
        {
          v120 = (const unsigned __int8 **)v119;
          v119 = *(unsigned __int8 **)v119;
        }
        while (v119);
      }
      else
      {
        do
        {
          v120 = (const unsigned __int8 **)*((_QWORD *)v116 + 2);
          v88 = *v120 == v116;
          v116 = (const unsigned __int8 *)v120;
        }
        while (!v88);
      }
      v116 = (const unsigned __int8 *)v120;
    }
    while (v120 != (const unsigned __int8 **)(a1 + 432));
  }
  v121 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEFAULT, "statedump: Connecting devices:", buf, 2u);
  }
  v122 = a1;
  v123 = *(const unsigned __int8 **)(a1 + 328);
  if (v123 != (const unsigned __int8 *)(a1 + 336))
  {
    v124 = (const unsigned __int8 *)(a1 + 360);
    do
    {
      *(_OWORD *)__p = 0uLL;
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10093DDE8);
      v125 = off_1009778C0;
      v126 = sub_100030DF4(v123 + 25);
      v127 = (void *)objc_claimAutoreleasedReturnValue(v126);
      sub_10065CCCC((uint64_t)v125, v127, (uint64_t)__p);

      v128 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        v129 = sub_100030DF4(v123 + 25);
        v233 = (id)objc_claimAutoreleasedReturnValue(v129);
        sub_100645DCC((unint64_t *)__p);
        v130 = out;
        if (out[23] < 0)
          v130 = *(char **)out;
        v231 = v130;
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v131 = off_1009778C0;
        v132 = sub_100030DF4(v123 + 25);
        v232 = (void *)objc_claimAutoreleasedReturnValue(v132);
        v133 = sub_1006589A8((uint64_t)v131, v232);
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v134 = off_1009778C0;
        v135 = sub_100030DF4(v123 + 25);
        v136 = (void *)objc_claimAutoreleasedReturnValue(v135);
        v137 = sub_10065FCC4((uint64_t)v134, v136);
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093DDE8);
        v138 = off_1009778C0;
        v139 = sub_100030DF4(v123 + 25);
        v140 = (void *)objc_claimAutoreleasedReturnValue(v139);
        v141 = sub_10065FDD4((uint64_t)v138, v140);
        *(_DWORD *)buf = 138544386;
        *(_QWORD *)&buf[4] = v233;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v231;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v133;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v137;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v141;
        _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}@ (added %{public}s ago) useCase:%d scanDutyCycle screenON:%d screenOFF:%d", buf, 0x28u);

        if (out[23] < 0)
          operator delete(*(void **)out);

      }
      v142 = *(const unsigned __int8 **)(a1 + 352);
      if (v142 != v124)
      {
        do
        {
          v143 = sub_100030DF4(v123 + 25);
          v144 = (void *)objc_claimAutoreleasedReturnValue(v143);
          sub_100030BCC(buf, v144);
          v145 = uuid_compare(v142 + 40, buf) == 0;

          if (v145)
          {
            v146 = qword_100999890;
            if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
            {
              sub_10064960C(*((_QWORD *)v142 + 4));
              v147 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
              *(_DWORD *)out = 136315138;
              *(_QWORD *)&out[4] = v147;
              _os_log_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_DEFAULT, "statedump:       %s", (uint8_t *)out, 0xCu);
              if ((char)buf[23] < 0)
                operator delete(*(void **)buf);
            }
          }
          v148 = (const unsigned __int8 *)*((_QWORD *)v142 + 1);
          if (v148)
          {
            do
            {
              v149 = v148;
              v148 = *(const unsigned __int8 **)v148;
            }
            while (v148);
          }
          else
          {
            do
            {
              v149 = (const unsigned __int8 *)*((_QWORD *)v142 + 2);
              v88 = *(_QWORD *)v149 == (_QWORD)v142;
              v142 = v149;
            }
            while (!v88);
          }
          v142 = v149;
        }
        while (v149 != v124);
      }
      v150 = (unsigned __int8 *)*((_QWORD *)v123 + 1);
      if (v150)
      {
        do
        {
          v151 = (const unsigned __int8 **)v150;
          v150 = *(unsigned __int8 **)v150;
        }
        while (v150);
      }
      else
      {
        do
        {
          v151 = (const unsigned __int8 **)*((_QWORD *)v123 + 2);
          v88 = *v151 == v123;
          v123 = (const unsigned __int8 *)v151;
        }
        while (!v88);
      }
      v123 = (const unsigned __int8 *)v151;
      v122 = a1;
    }
    while (v151 != (const unsigned __int8 **)(a1 + 336));
  }
  v152 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_DEFAULT, "statedump: Disconnection reason map:", buf, 2u);
  }
  v153 = *(const unsigned __int8 **)(v122 + 448);
  if (v153 != (const unsigned __int8 *)(v122 + 456))
  {
    do
    {
      v154 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v153 + 28, (char *)buf);
        sub_100091AE8(out, (char *)buf);
        if (out[23] >= 0)
          v155 = out;
        else
          v155 = *(char **)out;
        v156 = *((int *)v153 + 11);
        v157 = "unknown";
        if (v156 <= 0xA)
          v157 = (&off_10093E0A0)[v156];
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v155;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v157;
        _os_log_impl((void *)&_mh_execute_header, v154, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s:%{public}s", buf, 0x16u);
        if (out[23] < 0)
          operator delete(*(void **)out);
      }
      v158 = (unsigned __int8 *)*((_QWORD *)v153 + 1);
      if (v158)
      {
        do
        {
          v159 = (const unsigned __int8 **)v158;
          v158 = *(unsigned __int8 **)v158;
        }
        while (v158);
      }
      else
      {
        do
        {
          v159 = (const unsigned __int8 **)*((_QWORD *)v153 + 2);
          v88 = *v159 == v153;
          v153 = (const unsigned __int8 *)v159;
        }
        while (!v88);
      }
      v153 = (const unsigned __int8 *)v159;
    }
    while (v159 != (const unsigned __int8 **)(v122 + 456));
  }
  v160 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_DEFAULT, "statedump: Devices pending to go into filter accept list:", buf, 2u);
  }
  v262 = 0u;
  v263 = 0u;
  v260 = 0u;
  v261 = 0u;
  v161 = *(id *)(a1 + 760);
  v162 = objc_msgSend(v161, "countByEnumeratingWithState:objects:count:", &v260, v271, 16);
  if (v162)
  {
    v163 = *(_QWORD *)v261;
    do
    {
      for (i = 0; i != v162; i = (char *)i + 1)
      {
        if (*(_QWORD *)v261 != v163)
          objc_enumerationMutation(v161);
        v165 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          v166 = *(_QWORD *)(*((_QWORD *)&v260 + 1) + 8 * (_QWORD)i);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v166;
          _os_log_impl((void *)&_mh_execute_header, v165, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}@", buf, 0xCu);
        }
      }
      v162 = objc_msgSend(v161, "countByEnumeratingWithState:objects:count:", &v260, v271, 16);
    }
    while (v162);
  }

  v167 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_DEFAULT, "statedump: Devices pending to go out of filter accept list:", buf, 2u);
  }
  v258 = 0u;
  v259 = 0u;
  v256 = 0u;
  v257 = 0u;
  v168 = *(id *)(a1 + 768);
  v169 = objc_msgSend(v168, "countByEnumeratingWithState:objects:count:", &v256, v270, 16);
  if (v169)
  {
    v170 = *(_QWORD *)v257;
    do
    {
      for (j = 0; j != v169; j = (char *)j + 1)
      {
        if (*(_QWORD *)v257 != v170)
          objc_enumerationMutation(v168);
        v172 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          v173 = *(_QWORD *)(*((_QWORD *)&v256 + 1) + 8 * (_QWORD)j);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v173;
          _os_log_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}@", buf, 0xCu);
        }
      }
      v169 = objc_msgSend(v168, "countByEnumeratingWithState:objects:count:", &v256, v270, 16);
    }
    while (v169);
  }

  v174 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v174, OS_LOG_TYPE_DEFAULT, "statedump: Devices pending to get updated in FilterAcceptList:", buf, 2u);
  }
  v254 = 0u;
  v255 = 0u;
  v252 = 0u;
  v253 = 0u;
  v175 = *(id *)(a1 + 776);
  v176 = objc_msgSend(v175, "countByEnumeratingWithState:objects:count:", &v252, v269, 16);
  if (v176)
  {
    v177 = *(_QWORD *)v253;
    do
    {
      for (k = 0; k != v176; k = (char *)k + 1)
      {
        if (*(_QWORD *)v253 != v177)
          objc_enumerationMutation(v175);
        v179 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          v180 = *(_QWORD *)(*((_QWORD *)&v252 + 1) + 8 * (_QWORD)k);
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v180;
          _os_log_impl((void *)&_mh_execute_header, v179, OS_LOG_TYPE_DEFAULT, "statedump:    %@", buf, 0xCu);
        }
      }
      v176 = objc_msgSend(v175, "countByEnumeratingWithState:objects:count:", &v252, v269, 16);
    }
    while (v176);
  }

  v181 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v181, OS_LOG_TYPE_DEFAULT, "statedump: Overflowed connecting devices:", buf, 2u);
  }
  v250 = 0u;
  v251 = 0u;
  v248 = 0u;
  v249 = 0u;
  v182 = *(id *)(a1 + 744);
  v183 = objc_msgSend(v182, "countByEnumeratingWithState:objects:count:", &v248, v268, 16);
  if (v183)
  {
    v184 = *(_QWORD *)v249;
    do
    {
      for (m = 0; m != v183; m = (char *)m + 1)
      {
        if (*(_QWORD *)v249 != v184)
          objc_enumerationMutation(v182);
        v186 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          v187 = *(_QWORD *)(*((_QWORD *)&v248 + 1) + 8 * (_QWORD)m);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v187;
          _os_log_impl((void *)&_mh_execute_header, v186, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}@", buf, 0xCu);
        }
      }
      v183 = objc_msgSend(v182, "countByEnumeratingWithState:objects:count:", &v248, v268, 16);
    }
    while (v183);
  }

  v188 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v188, OS_LOG_TYPE_DEFAULT, "statedump: Blocked connecting devices:", buf, 2u);
  }
  v246 = 0u;
  v247 = 0u;
  v244 = 0u;
  v245 = 0u;
  v189 = *(id *)(a1 + 752);
  v190 = objc_msgSend(v189, "countByEnumeratingWithState:objects:count:", &v244, v267, 16);
  if (v190)
  {
    v191 = *(_QWORD *)v245;
    do
    {
      for (n = 0; n != v190; n = (char *)n + 1)
      {
        if (*(_QWORD *)v245 != v191)
          objc_enumerationMutation(v189);
        v193 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          v194 = *(_QWORD *)(*((_QWORD *)&v244 + 1) + 8 * (_QWORD)n);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v194;
          _os_log_impl((void *)&_mh_execute_header, v193, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}@", buf, 0xCu);
        }
      }
      v190 = objc_msgSend(v189, "countByEnumeratingWithState:objects:count:", &v244, v267, 16);
    }
    while (v190);
  }

  v195 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v195, OS_LOG_TYPE_DEFAULT, "statedump: Disconnecting devices:", buf, 2u);
  }
  v242 = 0u;
  v243 = 0u;
  v240 = 0u;
  v241 = 0u;
  v196 = *(id *)(a1 + 736);
  v197 = objc_msgSend(v196, "countByEnumeratingWithState:objects:count:", &v240, v266, 16);
  if (v197)
  {
    v198 = *(_QWORD *)v241;
    do
    {
      for (ii = 0; ii != v197; ii = (char *)ii + 1)
      {
        if (*(_QWORD *)v241 != v198)
          objc_enumerationMutation(v196);
        v200 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          v201 = *(_QWORD *)(*((_QWORD *)&v240 + 1) + 8 * (_QWORD)ii);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v201;
          _os_log_impl((void *)&_mh_execute_header, v200, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}@", buf, 0xCu);
        }
      }
      v197 = objc_msgSend(v196, "countByEnumeratingWithState:objects:count:", &v240, v266, 16);
    }
    while (v197);
  }

  v202 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v202, OS_LOG_TYPE_DEFAULT, "statedump: Requiring low latency devices:", buf, 2u);
  }
  v238 = 0u;
  v239 = 0u;
  v236 = 0u;
  v237 = 0u;
  v203 = *(id *)(a1 + 816);
  v204 = objc_msgSend(v203, "countByEnumeratingWithState:objects:count:", &v236, v265, 16);
  if (v204)
  {
    v205 = *(_QWORD *)v237;
    do
    {
      for (jj = 0; jj != v204; jj = (char *)jj + 1)
      {
        if (*(_QWORD *)v237 != v205)
          objc_enumerationMutation(v203);
        v207 = qword_100999890;
        if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
        {
          v208 = *(_QWORD *)(*((_QWORD *)&v236 + 1) + 8 * (_QWORD)jj);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v208;
          _os_log_impl((void *)&_mh_execute_header, v207, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}@", buf, 0xCu);
        }
      }
      v204 = objc_msgSend(v203, "countByEnumeratingWithState:objects:count:", &v236, v265, 16);
    }
    while (v204);
  }

  v209 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v209, OS_LOG_TYPE_DEFAULT, "statedump: Incoming LE Connection Deny List:", buf, 2u);
  }
  v210 = *(_QWORD **)(a1 + 1424);
  if (v210 != (_QWORD *)(a1 + 1432))
  {
    do
    {
      v211 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        sub_10064295C((uint64_t)(v210 + 6));
        v212 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = v212;
        _os_log_impl((void *)&_mh_execute_header, v211, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", (uint8_t *)out, 0xCu);
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
      }
      v213 = (_QWORD *)v210[1];
      if (v213)
      {
        do
        {
          v214 = v213;
          v213 = (_QWORD *)*v213;
        }
        while (v213);
      }
      else
      {
        do
        {
          v214 = (_QWORD *)v210[2];
          v88 = *v214 == (_QWORD)v210;
          v210 = v214;
        }
        while (!v88);
      }
      v210 = v214;
    }
    while (v214 != (_QWORD *)(a1 + 1432));
  }
  v215 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v215, OS_LOG_TYPE_DEFAULT, "statedump: Outgoing LE Connection Deny List:", buf, 2u);
  }
  v216 = *(_QWORD **)(a1 + 1448);
  if (v216 != (_QWORD *)(a1 + 1456))
  {
    do
    {
      v217 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        sub_10064295C((uint64_t)(v216 + 6));
        v218 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)out = 136446210;
        *(_QWORD *)&out[4] = v218;
        _os_log_impl((void *)&_mh_execute_header, v217, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", (uint8_t *)out, 0xCu);
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
      }
      v219 = (_QWORD *)v216[1];
      if (v219)
      {
        do
        {
          v220 = v219;
          v219 = (_QWORD *)*v219;
        }
        while (v219);
      }
      else
      {
        do
        {
          v220 = (_QWORD *)v216[2];
          v88 = *v220 == (_QWORD)v216;
          v216 = v220;
        }
        while (!v88);
      }
      v216 = v220;
    }
    while (v220 != (_QWORD *)(a1 + 1456));
  }
  v221 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v221, OS_LOG_TYPE_DEFAULT, "statedump: Controller AutoReconnect map:", buf, 2u);
  }
  v222 = *(const unsigned __int8 **)(a1 + 792);
  if (v222 != (const unsigned __int8 *)(a1 + 800))
  {
    do
    {
      v223 = qword_100999890;
      if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v222 + 26, (char *)buf);
        sub_100091AE8(out, (char *)buf);
        v224 = out[23] >= 0 ? out : *(char **)out;
        v225 = *((unsigned __int16 *)v222 + 21);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v224;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v225;
        _os_log_impl((void *)&_mh_execute_header, v223, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s timeout:%d", buf, 0x12u);
        if (out[23] < 0)
          operator delete(*(void **)out);
      }
      v226 = (unsigned __int8 *)*((_QWORD *)v222 + 1);
      if (v226)
      {
        do
        {
          v227 = (const unsigned __int8 **)v226;
          v226 = *(unsigned __int8 **)v226;
        }
        while (v226);
      }
      else
      {
        do
        {
          v227 = (const unsigned __int8 **)*((_QWORD *)v222 + 2);
          v88 = *v227 == v222;
          v222 = (const unsigned __int8 *)v227;
        }
        while (!v88);
      }
      v222 = (const unsigned __int8 *)v227;
    }
    while (v227 != (const unsigned __int8 **)(a1 + 800));
  }
  sub_10063D054((_QWORD *)a1);
  sub_10063D49C((_QWORD *)a1);
}

void sub_100645C3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100645DCC(unint64_t *a1)
{
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 v13;
  __int128 v14;
  _OWORD v15[4];
  void *__p[2];
  __int128 v17;
  __int128 v18;
  _BYTE v19[144];
  uint64_t v20;

  v2 = *a1;
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v17 = 0u;
  v18 = 0u;
  *(_OWORD *)__p = 0u;
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  sub_1002613AC((uint64_t)&v14);
  if (v2 >> 7 >= 0x2A3)
  {
    v3 = (_QWORD *)std::ostream::operator<<(v15, v2 / 0x15180);
    sub_1002614D8(v3, (uint64_t)"days, ", 6);
  }
  v4 = v2 % 0x15180;
  if (v4 >= 0xE10)
  {
    v5 = (_QWORD *)std::ostream::operator<<(v15, v4 / 0xE10uLL);
    sub_1002614D8(v5, (uint64_t)"hours, ", 7);
  }
  if (v4 % 0xE10 >= 0x3C)
  {
    v6 = (_QWORD *)std::ostream::operator<<(v15, v4 % 0xE10 / 0x3C);
    sub_1002614D8(v6, (uint64_t)"minutes, ", 9);
  }
  v7 = (_QWORD *)std::ostream::operator<<(v15, *a1);
  v8 = sub_1002614D8(v7, (uint64_t)".", 1);
  v9 = *v8;
  *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 16) = 3;
  *(uint64_t *)((char *)v8 + *(_QWORD *)(v9 - 24) + 24) = 3;
  v13 = 48;
  v10 = sub_1003CDCD4(v8, &v13);
  std::ostream::operator<<(v10, a1[1]);
  std::stringbuf::str((char *)v15 + 8);
  *(_QWORD *)((char *)&v15[-1]
  *(_QWORD *)&v15[0] = v11;
  if (SHIBYTE(v17) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v15 + 8);
  return std::ios::~ios(v19);
}

void sub_100645FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1006CC5C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100645FE8(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  sub_100616518((uint64_t)off_1009778A0, *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 48), *(_DWORD *)(a1 + 40), *(_BYTE *)(a1 + 49), *(_DWORD *)(a1 + 44));
}

void sub_100646048()
{
  operator delete();
}

uint64_t sub_10064605C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_100646078()
{
  operator delete();
}

uint64_t sub_10064608C(uint64_t a1)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093DDC8);
  return sub_10063738C((uint64_t)off_1009778A0, (unsigned __int8 *)(a1 + 24));
}

void sub_1006460DC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1006460DC(a1, *a2);
    sub_1006460DC(a1, a2[1]);
    sub_100646124((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100646124(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }

}

void sub_100646154(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100646154(a1, *a2);
    sub_100646154(a1, a2[1]);

    operator delete(a2);
  }
}

void sub_1006461A4(id a1)
{
  operator new();
}

void sub_1006461E4()
{
  operator delete();
}

uint64_t *sub_100646208(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t **v6;
  uint64_t *result;
  unsigned __int8 *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_10000DC28((uint64_t)a1, &v9, uu1);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006462A8((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_1006462A8(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (unsigned __int8 *)operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((_QWORD *)v6 + 6) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_100646308(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t **sub_100646320(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((_WORD *)v11 + 16) = 0;
    sub_100004078(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

char *sub_1006463E0(uint64_t **a1, unsigned int *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;

  v10 = 0;
  v6 = sub_10064646C((uint64_t)a1, &v10, a2);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = **a4;
    *((_BYTE *)v7 + 36) = 0;
    sub_100004078(a1, v10, v8, v7);
  }
  return (char *)v7;
}

uint64_t *sub_10064646C(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;
  uint64_t *v8;
  unsigned int v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = *((_DWORD *)v4 + 7);
        v10 = *((_DWORD *)v8 + 8);
        v11 = v7 < v10;
        if (v6 != v9)
          v11 = v6 < v9;
        if (!v11)
          break;
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_15;
      }
      v12 = v10 < v7;
      if (v6 == v9)
        v13 = v12;
      else
        v13 = v9 < v6;
      if (!v13)
        break;
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

void sub_1006464EC(id a1)
{
  operator new();
}

void sub_10064652C()
{
  operator delete();
}

uint64_t sub_100646550(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  BOOL v10;
  uint64_t *v11;
  unsigned int v12;
  _BOOL4 v13;
  _BOOL4 v14;

  v4 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 8;
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *a2;
  v6 = a2[1];
  v7 = v2;
  do
  {
    v8 = *(_DWORD *)(v3 + 28);
    v10 = v8 == v5;
    v9 = v8 < v5;
    if (v10)
      v9 = *(_DWORD *)(v3 + 32) < v6;
    v10 = !v9;
    if (v9)
      v11 = (uint64_t *)(v3 + 8);
    else
      v11 = (uint64_t *)v3;
    if (v10)
      v7 = v3;
    v3 = *v11;
  }
  while (*v11);
  if (v7 == v2)
    return v2;
  v12 = *(_DWORD *)(v7 + 28);
  v13 = v6 < *(_DWORD *)(v7 + 32);
  v10 = v5 == v12;
  v14 = v5 < v12;
  if (v10)
    v14 = v13;
  if (v14)
    return v2;
  return v7;
}

void sub_1006465C4(id a1)
{
  operator new();
}

void sub_100646604()
{
  operator delete();
}

void sub_100646628(id a1)
{
  operator new();
}

void sub_100646740()
{
  operator delete();
}

void sub_100646764(id a1)
{
  operator new();
}

void sub_1006467A4()
{
  operator delete();
}

void sub_1006467C8(id a1)
{
  operator new();
}

void sub_100646808()
{
  operator delete();
}

uint64_t *sub_10064682C(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x38uLL);
    v11[4] = **a4;
    v11[5] = 0;
    v11[6] = 0;
    sub_100004078(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

char *sub_1006468EC(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_100646AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100646B28(uint64_t a1, unsigned __int8 *uu2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = uuid_compare((const unsigned __int8 *)(v3 + 26), uu2);
    v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || uuid_compare(uu2, (const unsigned __int8 *)(v5 + 26)) < 0)
    return v2;
  return v5;
}

uint64_t *sub_100646BA0(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    memset(v11, 0, sizeof(v11));
    sub_100646C60(a1, a4, v11);
    sub_100004078((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    return v11[0];
  }
  return (uint64_t *)v8;
}

void sub_100646C60(uint64_t a1@<X0>, _QWORD **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  void *v6;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  *((_QWORD *)v6 + 4) = **a2;
  uuid_clear((unsigned __int8 *)v6 + 40);
  *((_BYTE *)a3 + 16) = 1;
}

void sub_100646CC4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_100646CDC(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_10001F574((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100646D7C((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

_BYTE *sub_100646D7C@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  _BYTE *result;
  __int128 *v9;
  __int128 v10;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x50uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = v7 + 32;
  v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_10003430C(result, *(void **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v10 = *v9;
    *((_QWORD *)v7 + 6) = *((_QWORD *)v9 + 2);
    *(_OWORD *)result = v10;
  }
  *((_QWORD *)v7 + 7) = 0;
  *((_QWORD *)v7 + 8) = 0;
  *((_DWORD *)v7 + 18) = 0;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_100646E14(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1002A4BA0(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_100646E30(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t **v6;
  uint64_t *result;
  unsigned __int8 *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_100646ED0((uint64_t)a1, &v9, uu1);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100646F60((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

_QWORD *sub_100646ED0(uint64_t a1, _QWORD *a2, unsigned __int8 *uu1)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  const unsigned __int8 *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (const unsigned __int8 *)(v4 + 28);
        if ((uuid_compare(uu1, (const unsigned __int8 *)(v4 + 28)) & 0x80000000) == 0)
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((uuid_compare(v8, uu1) & 0x80000000) == 0)
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void sub_100646F60(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (unsigned __int8 *)operator new(0x30uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v6 + 28, *a2);
  *((_DWORD *)v6 + 11) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_100646FC0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100646FD8(uint64_t a1, unsigned __int8 *uu2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = uuid_compare((const unsigned __int8 *)(v3 + 28), uu2);
    v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || uuid_compare(uu2, (const unsigned __int8 *)(v5 + 28)) < 0)
    return v2;
  return v5;
}

uint64_t *sub_100647050(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_100646ED0((uint64_t)a1, &v9, uu1);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006470F0((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

double sub_1006470F0@<D0>(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  double result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy((unsigned __int8 *)v6 + 28, *a2);
  *((_DWORD *)v6 + 19) = 0;
  result = 0.0;
  *(_OWORD *)(v6 + 60) = 0u;
  *(_OWORD *)(v6 + 44) = 0u;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_10064715C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t **sub_100647174(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _WORD *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x38uLL);
    v12 = **a4;
    v11[24] = 0;
    *((_QWORD *)v11 + 4) = v12;
    *((_QWORD *)v11 + 5) = 0;
    sub_100004078(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *sub_100647234(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t **v6;
  uint64_t *result;
  unsigned __int8 *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_10000DC28((uint64_t)a1, &v9, uu1);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006472D4((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_1006472D4(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 *v7;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (unsigned __int8 *)operator new(0x48uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v7 + 32, *a2);
  *((_QWORD *)v7 + 7) = 0;
  *((_QWORD *)v7 + 8) = 0;
  *((_QWORD *)v7 + 6) = v7 + 56;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_10064734C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD **v3;

  *v1 = 0;
  sub_100565EE0(v2, v3);
  _Unwind_Resume(a1);
}

uint64_t sub_100647368(uint64_t a1, unsigned __int8 *uu2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = uuid_compare((const unsigned __int8 *)(v3 + 25), uu2);
    v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || uuid_compare(uu2, (const unsigned __int8 *)(v5 + 25)) < 0)
    return v2;
  return v5;
}

uint64_t *sub_1006473E0(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t **v6;
  uint64_t *result;
  unsigned __int8 *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_10000DC28((uint64_t)a1, &v9, uu1);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100647480((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_100647480(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (unsigned __int8 *)operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((_QWORD *)v6 + 6) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1006474E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1006474F8(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t **v6;
  uint64_t *result;
  unsigned __int8 *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_10000DC28((uint64_t)a1, &v9, uu1);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100647598((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_100647598(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (unsigned __int8 *)operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((_QWORD *)v6 + 6) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1006475F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_100647610(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    memset(v11, 0, sizeof(v11));
    sub_1006476D0(a1, a4, v11);
    sub_100004078((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    return v11[0];
  }
  return (uint64_t *)v8;
}

void sub_1006476D0(uint64_t a1@<X0>, _QWORD **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  void *v6;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  *((_QWORD *)v6 + 4) = **a2;
  uuid_clear((unsigned __int8 *)v6 + 40);
  *((_BYTE *)a3 + 16) = 1;
}

void sub_100647734(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_10064774C(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t **v6;
  uint64_t *result;
  unsigned __int8 *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_10000DC28((uint64_t)a1, &v9, uu1);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006477EC((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_1006477EC(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (unsigned __int8 *)operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((_QWORD *)v6 + 6) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_10064784C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_100647864(id a1)
{
  operator new();
}

void sub_1006478A4()
{
  operator delete();
}

void sub_1006478C8(id a1)
{
  operator new();
}

void sub_100647908()
{
  operator delete();
}

uint64_t sub_10064792C(uint64_t a1, const unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *__p;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15;
  unsigned __int8 *v16;
  char *v17;
  uint64_t v18;

  v2 = *(unsigned __int8 **)a1;
  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    abort();
  v8 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v9 = v8 - (_QWORD)v2;
  if (v9 >> 3 > v4)
    v4 = v9 >> 3;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v4;
  v18 = v7;
  if (v10)
    v11 = (char *)sub_10034957C(v7, v10);
  else
    v11 = 0;
  __p = v11;
  v15 = (unsigned __int8 *)&v11[16 * v3];
  v17 = &v11[16 * v10];
  uuid_copy(v15, a2);
  v16 = v15 + 16;
  sub_100647A50((unsigned __int8 **)a1, &__p);
  v12 = *(_QWORD *)(a1 + 8);
  if (v16 != v15)
    v16 += (v15 - v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  if (__p)
    operator delete(__p);
  return v12;
}

void sub_100647A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100647A50(unsigned __int8 **a1, _QWORD *a2)
{
  const unsigned __int8 *v4;
  const unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = (unsigned __int8 *)a2[1];
  while (v4 != v5)
  {
    v6 -= 16;
    v4 -= 16;
    uuid_copy(v6, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = (unsigned __int8 *)a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = (unsigned __int8 *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t *sub_100647AE0(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t **v6;
  uint64_t *result;
  unsigned __int8 *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_100647B80((uint64_t)a1, &v9, uu1);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100647C10((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

_QWORD *sub_100647B80(uint64_t a1, _QWORD *a2, unsigned __int8 *uu1)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  const unsigned __int8 *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (const unsigned __int8 *)(v4 + 26);
        if ((uuid_compare(uu1, (const unsigned __int8 *)(v4 + 26)) & 0x80000000) == 0)
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((uuid_compare(v8, uu1) & 0x80000000) == 0)
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void sub_100647C10(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (unsigned __int8 *)operator new(0x30uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v6 + 26, *a2);
  *((_WORD *)v6 + 21) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_100647C70(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_100647C88(id a1)
{
  operator new();
}

void sub_100647CC8()
{
  operator delete();
}

void sub_100647CEC(id a1)
{
  operator new();
}

void sub_100647D2C()
{
  operator delete();
}

uint64_t *sub_100647D50(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t **v6;
  uint64_t *result;
  unsigned __int8 *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_100647B80((uint64_t)a1, &v9, uu1);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100647DF0((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_100647DF0(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (unsigned __int8 *)operator new(0x30uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v6 + 26, *a2);
  *((_WORD *)v6 + 21) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_100647E50(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100647E68(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_100646FD8((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_1000040CC(a1, v3);
  operator delete(v4);
  return 1;
}

uint64_t sub_100647EB8(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_100646B28((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_1000040CC(a1, v3);
  operator delete(v4);
  return 1;
}

uint64_t *sub_100647F08(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10031F488(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_100647F44(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001A82C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100647F5C(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_100646ED0((uint64_t)a1, &v9, uu1);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100647FFC((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

double sub_100647FFC@<D0>(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  double result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy((unsigned __int8 *)v6 + 28, *a2);
  *((_DWORD *)v6 + 19) = 0;
  result = 0.0;
  *(_OWORD *)(v6 + 60) = 0u;
  *(_OWORD *)(v6 + 44) = 0u;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_100648068(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_100648080(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10031F488(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1006480BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001A82C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *sub_1006480D4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x20uLL);
      v7[1] = *(_OWORD *)(v3 + 16);
      *(_QWORD *)v7 = v6;
      *((_QWORD *)v7 + 1) = a1;
      *((_QWORD *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_100648158(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10002074C(v1);
  _Unwind_Resume(a1);
}

char *sub_10064816C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  char **v6;
  char *v7;
  uint64_t **v8;
  char *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (char **)sub_10001F574((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_100648220((uint64_t)a1, a4, v10);
    sub_100004078(a1, v11, v8, (uint64_t *)v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1006482E8((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_100648220@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, char **a3@<X8>)
{
  char *v5;
  char *v6;
  char *result;

  v5 = (char *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = sub_100648290(v6 + 32, *a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_100648278(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1006482E8(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_100648290(char *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  *((_QWORD *)__dst + 3) = __dst + 24;
  *((_QWORD *)__dst + 4) = __dst + 24;
  *((_QWORD *)__dst + 5) = 0;
  return __dst;
}

void sub_1006482E8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1002F65A4((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *sub_10064832C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *i;

  for (i = (uint64_t *)a1[1]; a2 != a3 && i != a1; i = (uint64_t *)i[1])
  {
    *((_OWORD *)i + 1) = *(_OWORD *)(a2 + 16);
    a2 = *(_QWORD *)(a2 + 8);
  }
  if (i == a1)
    return sub_10064837C((uint64_t)a1, a1, a2, a3);
  else
    return sub_10047BFCC((uint64_t)a1, i, a1);
}

uint64_t *sub_10064837C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = operator new(0x20uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    *((_OWORD *)v8 + 1) = *(_OWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 8);
    v11 = 1;
    if (v10 != a4)
    {
      v12 = v8;
      do
      {
        v8 = operator new(0x20uLL);
        *v8 = v12;
        v8[1] = 0;
        *((_OWORD *)v8 + 1) = *(_OWORD *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        v10 = *(_QWORD *)(v10 + 8);
        v12 = v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

uint64_t *sub_10064844C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_10001F574((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006484EC((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

_BYTE *sub_1006484EC@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  _BYTE *result;
  __int128 *v9;
  __int128 v10;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = v7 + 32;
  v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_10003430C(result, *(void **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v10 = *v9;
    *((_QWORD *)v7 + 6) = *((_QWORD *)v9 + 2);
    *(_OWORD *)result = v10;
  }
  *((_DWORD *)v7 + 14) = 0;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_100648580(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1002A4BA0(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_10064859C(uint64_t **a1, uint64_t *a2, unint64_t a3, unsigned int (**a4)(uint64_t, uint64_t))
{
  uint64_t **v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *i;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v4 = a1;
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v7 = (uint64_t *)*a2;
      if ((*a4)(*a2 + 16, (uint64_t)(a1 + 2)))
      {
        v8 = *v7;
        *(_QWORD *)(v8 + 8) = v7[1];
        *(_QWORD *)v7[1] = v8;
        v9 = *v4;
        v9[1] = (uint64_t)v7;
        *v7 = (uint64_t)v9;
        *v4 = v7;
        v7[1] = (uint64_t)v4;
        return v7;
      }
    }
    else
    {
      v11 = a3 >> 1;
      v12 = (a3 >> 1) + 1;
      v13 = a1;
      do
      {
        v13 = (uint64_t **)v13[1];
        --v12;
      }
      while (v12 > 1);
      v14 = (uint64_t **)sub_10064859C(a1, v13, a3 >> 1, a4);
      v4 = (uint64_t **)sub_10064859C(v13, a2, a3 - v11, a4);
      if ((*a4)((uint64_t)(v4 + 2), (uint64_t)(v14 + 2)))
      {
        for (i = v4[1]; i != a2; i = (uint64_t *)i[1])
        {
          if (!(*a4)((uint64_t)(i + 2), (uint64_t)(v14 + 2)))
            goto LABEL_14;
        }
        i = a2;
LABEL_14:
        v17 = *i;
        v18 = *v4;
        v18[1] = *(_QWORD *)(*i + 8);
        **(_QWORD **)(v17 + 8) = v18;
        v19 = *v14;
        v16 = v14[1];
        v19[1] = (uint64_t)v4;
        *v4 = v19;
        *v14 = (uint64_t *)v17;
        *(_QWORD *)(v17 + 8) = v14;
      }
      else
      {
        v16 = v14[1];
        i = (uint64_t *)v4;
        v4 = v14;
      }
      if (v16 != i && i != a2)
      {
        v20 = i;
        do
        {
          if ((*a4)((uint64_t)(i + 2), (uint64_t)(v16 + 2)))
          {
            for (j = (uint64_t *)i[1]; j != a2; j = (uint64_t *)j[1])
            {
              if (!(*a4)((uint64_t)(j + 2), (uint64_t)(v16 + 2)))
                goto LABEL_25;
            }
            j = a2;
LABEL_25:
            v22 = *j;
            v23 = *i;
            *(_QWORD *)(v23 + 8) = *(_QWORD *)(*j + 8);
            **(_QWORD **)(v22 + 8) = v23;
            if (v20 == i)
              v20 = j;
            v25 = *v16;
            v24 = (uint64_t *)v16[1];
            *(_QWORD *)(v25 + 8) = i;
            *i = v25;
            *v16 = v22;
            *(_QWORD *)(v22 + 8) = v16;
            v16 = v24;
            i = j;
          }
          else
          {
            v16 = (uint64_t *)v16[1];
          }
        }
        while (v16 != v20 && i != a2);
      }
    }
  }
  return (uint64_t *)v4;
}

uint64_t *sub_1006487A8(uint64_t **a1, unsigned __int8 *uu1, const unsigned __int8 *a3)
{
  uint64_t **v5;
  uint64_t *result;
  unsigned __int8 *v7[3];
  uint64_t v8;

  v8 = 0;
  v5 = (uint64_t **)sub_100056928((uint64_t)a1, &v8, uu1);
  result = *v5;
  if (!*v5)
  {
    memset(v7, 0, sizeof(v7));
    sub_100648830((uint64_t)a1, a3, v7);
    sub_100004078(a1, v8, v5, (uint64_t *)v7[0]);
    return (uint64_t *)v7[0];
  }
  return result;
}

void sub_100648830(uint64_t a1@<X0>, const unsigned __int8 *a2@<X1>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (unsigned __int8 *)operator new(0x30uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v6 + 25, a2);
  *((_BYTE *)a3 + 16) = 1;
}

void sub_10064888C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1006488A4(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1006488E4((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void sub_1006488E4(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 40)
  {

    v5 = *(void **)(i - 40);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t *sub_100648934(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_QWORD *)(v2 - 40);
    v2 -= 40;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v4 - 40) = v5;
    v4 -= 40;
    v6 = *(_OWORD *)(v2 + 8);
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(v2 + 24);
    *(_OWORD *)(v4 + 8) = v6;
    v7 = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v4 + 32) = v7;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1006489AC(uint64_t a1)
{
  sub_1006489E0(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1006489E0(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;

  }
}

_QWORD *sub_100648A38(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1004BF5FC(result, a4);
    result = (_QWORD *)sub_100648A94((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100648A8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100648A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  __int128 v7;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)a4 = *(id *)v6;
      v7 = *(_OWORD *)(v6 + 8);
      *(_DWORD *)(a4 + 24) = *(_DWORD *)(v6 + 24);
      *(_OWORD *)(a4 + 8) = v7;
      *(_QWORD *)(a4 + 32) = objc_retainBlock(*(id *)(v6 + 32));
      a4 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  return a4;
}

uint64_t sub_100648B04(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_100647368((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_1000040CC(a1, v3);
  operator delete(v4);
  return 1;
}

void sub_100648B54(id a1)
{
  operator new();
}

uint64_t *sub_100648B94(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t **v6;
  uint64_t *result;
  unsigned __int8 *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_10000DC28((uint64_t)a1, &v9, uu1);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100648C34((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

double sub_100648C34@<D0>(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  double result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (unsigned __int8 *)operator new(0x68uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v7 + 32, *a2);
  *((_QWORD *)v7 + 12) = 0;
  result = 0.0;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_100648CB4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  id *v3;

  *v1 = 0;
  sub_100648CD0(v2, v3);
  _Unwind_Resume(a1);
}

void sub_100648CD0(uint64_t a1, id *a2)
{
  if (*(_BYTE *)(a1 + 8))
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t sub_100648D1C(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t v3;

  v3 = sub_10000C5B8((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  sub_100648D60(a1, v3);
  return 1;
}

uint64_t *sub_100648D60(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = sub_1000040CC(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

unsigned __int8 *sub_100648DA0(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  uint64_t **v8;
  unsigned __int8 *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (unsigned __int8 **)sub_10000DC28((uint64_t)a1, &v11, uu1);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_100648E54((uint64_t)a1, a4, v10);
    sub_100004078(a1, v11, v8, (uint64_t *)v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100648ED8((uint64_t)v10, 0);
  }
  return v7;
}

double sub_100648E54@<D0>(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  double result;

  v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (unsigned __int8 *)operator new(0x78uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((_QWORD *)v6 + 14) = 0;
  result = 0.0;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_100648EC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100648ED8(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100648ED8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100646124((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_100648F1C(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_10000C5B8((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_1000040CC(a1, v3);
  sub_100646124((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t *sub_100648F74(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100648FC8(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_100648FB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1006460DC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100648FC8(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_10064904C(v5, v6, v4 + 32, (uint64_t)(v4 + 32));
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_10064904C(uint64_t **a1, uint64_t *a2, unsigned __int8 *uu2, uint64_t a4)
{
  const unsigned __int8 *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const unsigned __int8 *v12;

  v11 = 0;
  v12 = 0;
  v6 = sub_1006490EC(a1, a2, &v12, &v11, uu2);
  v7 = *(uint64_t **)v6;
  if (!*(_QWORD *)v6)
  {
    v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_100649270((uint64_t)a1, a4, v10);
    sub_100004078(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100648ED8((uint64_t)v10, 0);
  }
  return v7;
}

const unsigned __int8 *sub_1006490EC(_QWORD *a1, uint64_t *a2, const unsigned __int8 **a3, uint64_t *a4, unsigned __int8 *uu2)
{
  const unsigned __int8 *v9;
  const unsigned __int8 *v11;
  const unsigned __int8 *v12;
  uint64_t v13;
  const unsigned __int8 *v14;
  const unsigned __int8 *v15;
  uint64_t *v16;
  BOOL v17;
  const unsigned __int8 *v19;

  v9 = (const unsigned __int8 *)(a1 + 1);
  if (a1 + 1 == a2 || uuid_compare(uu2, (const unsigned __int8 *)a2 + 32) < 0)
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const unsigned __int8 *)a2;
    }
    else
    {
      v11 = (const unsigned __int8 *)*a2;
      if (*a2)
      {
        do
        {
          v12 = v11;
          v11 = (const unsigned __int8 *)*((_QWORD *)v11 + 1);
        }
        while (v11);
      }
      else
      {
        v16 = a2;
        do
        {
          v12 = (const unsigned __int8 *)v16[2];
          v17 = *(_QWORD *)v12 == (_QWORD)v16;
          v16 = (uint64_t *)v12;
        }
        while (v17);
      }
      if ((uuid_compare(v12 + 32, uu2) & 0x80000000) == 0)
        return (const unsigned __int8 *)sub_10000DC28((uint64_t)a1, a3, uu2);
    }
    if (*a2)
    {
      *a3 = v12;
      return v12 + 8;
    }
    else
    {
      *a3 = (const unsigned __int8 *)a2;
      return (const unsigned __int8 *)a2;
    }
  }
  if (uuid_compare((const unsigned __int8 *)a2 + 32, uu2) < 0)
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const unsigned __int8 *)a2[1];
      do
      {
        v15 = v14;
        v14 = *(const unsigned __int8 **)v14;
      }
      while (v14);
    }
    else
    {
      v19 = (const unsigned __int8 *)a2;
      do
      {
        v15 = (const unsigned __int8 *)*((_QWORD *)v19 + 2);
        v17 = *(_QWORD *)v15 == (_QWORD)v19;
        v19 = v15;
      }
      while (!v17);
    }
    if (v15 == v9)
      goto LABEL_27;
    if (uuid_compare(uu2, v15 + 32) < 0)
    {
      v13 = *a4;
LABEL_27:
      if (v13)
      {
        *a3 = v15;
        return v15;
      }
      else
      {
        *a3 = (const unsigned __int8 *)a2;
      }
      return (const unsigned __int8 *)a4;
    }
    return (const unsigned __int8 *)sub_10000DC28((uint64_t)a1, a3, uu2);
  }
  *a3 = (const unsigned __int8 *)a2;
  *a4 = (uint64_t)a2;
  return (const unsigned __int8 *)a4;
}

uint64_t sub_100649270@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x78uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = sub_1006492E0((uint64_t)v6 + 32, a2);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1006492C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100648ED8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1006492E0(uint64_t a1, uint64_t a2)
{
  uuid_copy((unsigned __int8 *)a1, (const unsigned __int8 *)a2);
  *(_QWORD *)(a1 + 16) = *(id *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  sub_1002D70C0((_QWORD *)(a1 + 64), a2 + 64);
  return a1;
}

void sub_100649338(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_10064936C(const unsigned __int8 *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return sub_1003D2DB4(a1, (uint64_t *)va);
}

void sub_100649390(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0xEu);
}

_QWORD *sub_1006493A4(_QWORD *result, unsigned __int16 a2, uint64_t a3, float a4)
{
  int v4;
  _QWORD *v5;

  if (v4 >= 0)
    v5 = result;
  else
    v5 = (_QWORD *)*result;
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = v5;
  *(_WORD *)(a3 + 12) = 1024;
  *(_DWORD *)(a3 + 14) = a2;
  return result;
}

void sub_1006493CC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xEu);
}

void sub_1006493D8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_debug_impl(a1, v4, OS_LOG_TYPE_DEBUG, a4, v5, 0xCu);
}

void sub_100649414(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

id sub_100649450(id a1)
{
  return a1;
}

void sub_100649470()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  sub_1002A90C4(&stru_100999AD8);
  __cxa_atexit((void (*)(void *))sub_1002A912C, &stru_100999AD8, (void *)&_mh_execute_header);
  sub_1002A90C4(&stru_100999B08);
  __cxa_atexit((void (*)(void *))sub_1002A912C, &stru_100999B08, (void *)&_mh_execute_header);
  sub_1000160D0(&unk_100999B38);
  __cxa_atexit((void (*)(void *))sub_100069BDC, &unk_100999B38, (void *)&_mh_execute_header);
  sub_1000160D0(&unk_100999B78);
  __cxa_atexit((void (*)(void *))sub_100069BDC, &unk_100999B78, (void *)&_mh_execute_header);
  sub_1002A90C4(&stru_100999BC0);
  __cxa_atexit((void (*)(void *))sub_1002A912C, &stru_100999BC0, (void *)&_mh_execute_header);
  sub_1000160D0(&unk_100999BF0);
  __cxa_atexit((void (*)(void *))sub_100069BDC, &unk_100999BF0, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

id sub_100649588(uint64_t a1)
{
  void *p_p;
  void *v2;
  void *__p;
  char v5;

  sub_10064960C(a1);
  if (v5 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p));
  if (v5 < 0)
    operator delete(__p);
  return v2;
}

void sub_1006495F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10064960C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 v20;
  _OWORD v21[4];
  void *__p[2];
  __int128 v23;
  __int128 v24;
  _OWORD v25[9];
  uint64_t v26;

  v26 = 0;
  v24 = 0u;
  memset(v25, 0, sizeof(v25));
  *(_OWORD *)__p = 0u;
  v23 = 0u;
  memset(v21, 0, sizeof(v21));
  sub_100272ADC((uint64_t)v21);
  *(_DWORD *)((char *)v21 + *(_QWORD *)(*(_QWORD *)&v21[0] - 24) + 8) |= 0x4000u;
  v20 = 48;
  v2 = sub_1003CDCD4(v21, &v20);
  v3 = *v2;
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 24) = 2;
  *(_DWORD *)((char *)v2 + *(_QWORD *)(v3 - 24) + 8) = *(_DWORD *)((_BYTE *)v2 + *(_QWORD *)(v3 - 24) + 8) & 0xFFFFFFB5 | 8;
  v4 = (_QWORD *)std::ostream::operator<<(v2, BYTE5(a1));
  v5 = sub_1002614D8(v4, (uint64_t)":", 1);
  v6 = *v5;
  *(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 24) = 2;
  *(_DWORD *)((char *)v5 + *(_QWORD *)(v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v5 + *(_QWORD *)(v6 - 24) + 8) & 0xFFFFFFB5 | 8;
  v7 = (_QWORD *)std::ostream::operator<<(v5, BYTE4(a1));
  v8 = sub_1002614D8(v7, (uint64_t)":", 1);
  v9 = *v8;
  *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 24) = 2;
  *(_DWORD *)((char *)v8 + *(_QWORD *)(v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(v9 - 24) + 8) & 0xFFFFFFB5 | 8;
  v10 = (_QWORD *)std::ostream::operator<<(v8, BYTE3(a1));
  v11 = sub_1002614D8(v10, (uint64_t)":", 1);
  v12 = *v11;
  *(uint64_t *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 24) = 2;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 8) & 0xFFFFFFB5 | 8;
  v13 = (_QWORD *)std::ostream::operator<<(v11, BYTE2(a1));
  v14 = sub_1002614D8(v13, (uint64_t)":", 1);
  v15 = *v14;
  *(uint64_t *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 24) = 2;
  *(_DWORD *)((char *)v14 + *(_QWORD *)(v15 - 24) + 8) = *(_DWORD *)((_BYTE *)v14 + *(_QWORD *)(v15 - 24) + 8) & 0xFFFFFFB5 | 8;
  v16 = (_QWORD *)std::ostream::operator<<(v14, BYTE1(a1));
  v17 = sub_1002614D8(v16, (uint64_t)":", 1);
  v18 = *v17;
  *(uint64_t *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 24) = 2;
  *(_DWORD *)((char *)v17 + *(_QWORD *)(v18 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(_QWORD *)(v18 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<(v17, a1);
  std::stringbuf::str((char *)v21 + 8);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v21 + 8);
  return std::ios::~ios(v25);
}

void sub_1006498AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100272CFC((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1006498DC(uint64_t a1)
{
  void *p_p;
  void *v2;
  void *__p;
  char v5;

  sub_100649960(a1);
  if (v5 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p));
  if (v5 < 0)
    operator delete(__p);
  return v2;
}

void sub_100649944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100649960(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  unsigned __int8 v22;
  _OWORD v23[4];
  void *__p[2];
  __int128 v25;
  __int128 v26;
  _OWORD v27[9];
  uint64_t v28;

  v28 = 0;
  v26 = 0u;
  memset(v27, 0, sizeof(v27));
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  memset(v23, 0, sizeof(v23));
  sub_100272ADC((uint64_t)v23);
  *(_DWORD *)((char *)v23 + *(_QWORD *)(*(_QWORD *)&v23[0] - 24) + 8) |= 0x4000u;
  v22 = 48;
  v2 = sub_1003CDCD4(v23, &v22);
  v3 = *v2;
  *(uint64_t *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 24) = 2;
  *(_DWORD *)((char *)v2 + *(_QWORD *)(v3 - 24) + 8) = *(_DWORD *)((_BYTE *)v2 + *(_QWORD *)(v3 - 24) + 8) & 0xFFFFFFB5 | 8;
  v4 = (_QWORD *)std::ostream::operator<<(v2, BYTE5(a1));
  v5 = sub_1002614D8(v4, (uint64_t)":", 1);
  v6 = *v5;
  *(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 24) = 2;
  *(_DWORD *)((char *)v5 + *(_QWORD *)(v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v5 + *(_QWORD *)(v6 - 24) + 8) & 0xFFFFFFB5 | 8;
  v7 = (_QWORD *)std::ostream::operator<<(v5, BYTE4(a1));
  v8 = sub_1002614D8(v7, (uint64_t)":", 1);
  v9 = *v8;
  *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 24) = 2;
  *(_DWORD *)((char *)v8 + *(_QWORD *)(v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(v9 - 24) + 8) & 0xFFFFFFB5 | 8;
  v10 = (_QWORD *)std::ostream::operator<<(v8, BYTE3(a1));
  v11 = sub_1002614D8(v10, (uint64_t)":", 1);
  v12 = *v11;
  *(uint64_t *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 24) = 2;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 8) & 0xFFFFFFB5 | 8;
  v13 = (_QWORD *)std::ostream::operator<<(v11, BYTE2(a1));
  v14 = sub_1002614D8(v13, (uint64_t)":", 1);
  v15 = *v14;
  *(uint64_t *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 24) = 2;
  *(_DWORD *)((char *)v14 + *(_QWORD *)(v15 - 24) + 8) = *(_DWORD *)((_BYTE *)v14 + *(_QWORD *)(v15 - 24) + 8) & 0xFFFFFFB5 | 8;
  v16 = (_QWORD *)std::ostream::operator<<(v14, BYTE1(a1));
  v17 = sub_1002614D8(v16, (uint64_t)":", 1);
  v18 = *v17;
  *(uint64_t *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 24) = 2;
  *(_DWORD *)((char *)v17 + *(_QWORD *)(v18 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(_QWORD *)(v18 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<(v17, a1);
  v19 = sub_1002614D8(v23, (uint64_t)"-", 1);
  *(_DWORD *)((char *)v19 + *(_QWORD *)(*v19 - 24) + 8) &= ~0x4000u;
  if ((a1 & 0xFF000000000000) != 0)
    v20 = "Random";
  else
    v20 = "Public";
  sub_1002614D8(v19, (uint64_t)v20, 6);
  std::stringbuf::str((char *)v23 + 8);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v23 + 8);
  return std::ios::~ios(v27);
}

void sub_100649C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100272CFC((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_100649C7C(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  void *__p[2];
  uint64_t v6;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    __p[0] = 0;
    __p[1] = 0;
    v6 = 0;
    sub_100091AE8(__p, (char *)objc_msgSend(objc_retainAutorelease(v1), "UTF8String"));
    v3 = sub_100649D08((char *)__p);
    if (SHIBYTE(v6) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_100649CF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unint64_t sub_100649D08(char *a1)
{
  const char *v1;
  uint64_t v4;
  int v5;
  __int16 v6;
  uint64_t v7;

  v1 = a1;
  if (a1[23] < 0)
  {
    if ((unint64_t)(*((_QWORD *)a1 + 1) - 25) < 0xFFFFFFFFFFFFFFE8)
      return 0;
    v1 = *(const char **)a1;
  }
  else if (a1[23] - 25 < 0xFFFFFFE8)
  {
    return 0;
  }
  v7 = 0;
  v6 = 0;
  v5 = 0;
  if (sscanf(v1, "%hhX:%hhX:%hhX:%hhX:%hhX:%hhX", &v5, (char *)&v5 + 1, (char *)&v5 + 2, (char *)&v5 + 3, &v6, (char *)&v6 + 1) == 6)return ((unint64_t)v5 << 40) | ((unint64_t)BYTE1(v5) << 32) | ((unint64_t)BYTE2(v5) << 24) | ((unint64_t)HIBYTE(v5) << 16) | ((unint64_t)v6 << 8) | HIBYTE(v6);
  if (sscanf(v1, "%7s %hhX:%hhX:%hhX:%hhX:%hhX:%hhX", &v7, &v5, (char *)&v5 + 1, (char *)&v5 + 2, (char *)&v5 + 3, &v6, (char *)&v6 + 1) != 7)return 0;
  v4 = (_DWORD)v7 != 1818391888 || *(_DWORD *)((char *)&v7 + 3) != 6515052;
  return (v4 << 48) | ((unint64_t)v5 << 40) | ((unint64_t)BYTE1(v5) << 32) | ((unint64_t)BYTE2(v5) << 24) | ((unint64_t)HIBYTE(v5) << 16) | ((unint64_t)v6 << 8) | HIBYTE(v6);
}

unint64_t sub_100649EA8(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v7;
  __int16 v8;

  v1 = a1;
  v2 = v1;
  v8 = 0;
  v7 = 0;
  if (!v1)
  {
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      sub_1007149D8();
    goto LABEL_9;
  }
  if (objc_msgSend(v1, "length") != (id)6 && objc_msgSend(v2, "length") != (id)7)
  {
    v4 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      sub_100714A04((uint64_t)v2, v4, v5);
LABEL_9:
    v3 = 0;
    goto LABEL_10;
  }
  objc_msgSend(v2, "getBytes:range:", &v7, (char *)objc_msgSend(v2, "length") - 6, 6);
  v3 = ((unint64_t)v7 << 40) | ((unint64_t)BYTE1(v7) << 32) | ((unint64_t)BYTE2(v7) << 24) | ((unint64_t)HIBYTE(v7) << 16) | ((unint64_t)v8 << 8) | HIBYTE(v8) | 0x1000000000000;
LABEL_10:

  return v3;
}

void sub_100649FC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100649FD0(unint64_t a1)
{
  uint64_t v1;
  void *v2;
  int v4;
  __int16 v5;
  char v6;

  v1 = sub_1000746A4(a1);
  v4 = v1;
  v6 = BYTE6(v1);
  v5 = WORD2(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
  objc_msgSend(v2, "appendBytes:length:", &v4, 1);
  objc_msgSend(v2, "appendBytes:length:", (char *)&v4 + 1, 6);
  return v2;
}

void sub_10064A040(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10064A050(uint64_t a1, uint64_t a2)
{
  const void *v4;
  id v5;
  __int16 v6;
  char v7;

  v4 = (const void *)a2;
  if (*(char *)(a2 + 23) < 0)
    v4 = *(const void **)a2;
  v5 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4));
  if ((objc_msgSend(v5, "isEqualToString:", CFSTR("APPEARANCE_KEYBOARD")) & 1) != 0)
  {
    v6 = 961;
  }
  else if ((objc_msgSend(v5, "isEqualToString:", CFSTR("APPEARANCE_MOUSE")) & 1) != 0)
  {
    v6 = 962;
  }
  else if ((objc_msgSend(v5, "isEqualToString:", CFSTR("APPEARANCE_TOUCHPAD")) & 1) != 0)
  {
    v6 = 969;
  }
  else if ((objc_msgSend(v5, "isEqualToString:", CFSTR("APPEARANCE_JOYSTICK")) & 1) != 0)
  {
    v6 = 963;
  }
  else if ((objc_msgSend(v5, "isEqualToString:", CFSTR("APPEARANCE_GAMEPAD")) & 1) != 0)
  {
    v6 = 964;
  }
  else if ((objc_msgSend(v5, "isEqualToString:", CFSTR("APPEARANCE_GENERIC AUDIO SINK")) & 1) != 0)
  {
    v6 = 2112;
  }
  else if ((objc_msgSend(v5, "isEqualToString:", CFSTR("APPEARANCE_STANDALONE SPEAKER")) & 1) != 0)
  {
    v6 = 2113;
  }
  else if ((objc_msgSend(v5, "isEqualToString:", CFSTR("APPEARANCE_SOUNDBAR")) & 1) != 0)
  {
    v6 = 2114;
  }
  else if ((objc_msgSend(v5, "isEqualToString:", CFSTR("APPEARANCE_BOOKSHELF SPEAKER")) & 1) != 0)
  {
    v6 = 2115;
  }
  else if ((objc_msgSend(v5, "isEqualToString:", CFSTR("APPEARANCE_STANDMOUNTED SPEAKER")) & 1) != 0)
  {
    v6 = 2116;
  }
  else if ((objc_msgSend(v5, "isEqualToString:", CFSTR("APPEARANCE_SPEAKERPHONE")) & 1) != 0)
  {
    v6 = 2117;
  }
  else if ((objc_msgSend(v5, "isEqualToString:", CFSTR("APPEARANCE_EARBUD")) & 1) != 0)
  {
    v6 = 2369;
  }
  else if ((objc_msgSend(v5, "isEqualToString:", CFSTR("APPEARANCE_HEADSET")) & 1) != 0)
  {
    v6 = 2370;
  }
  else if ((objc_msgSend(v5, "isEqualToString:", CFSTR("APPEARANCE_HEADPHONES")) & 1) != 0)
  {
    v6 = 2371;
  }
  else
  {
    if ((objc_msgSend(v5, "isEqualToString:", CFSTR("IsHearingAid")) & 1) == 0)
    {

      goto LABEL_34;
    }
    v6 = 2625;
  }

  *(_WORD *)(a1 + 392) = v6;
LABEL_34:
  sub_10064EEDC((uint64_t **)(a1 + 176), (const void **)a2, a2);
  return v7 & 1;
}

void sub_10064A268(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10064A27C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  __int128 v16;
  uint64_t v17;

  sub_1004174B8(a2, &v16);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v16;
  *(_QWORD *)(a2 + 16) = v17;
  v8 = *(_DWORD *)(a1 + 128);
  if (v8 < a3)
    goto LABEL_4;
  if (v8 != a3)
  {
    if (!a4)
      return 0;
LABEL_4:
    *(_DWORD *)(a1 + 128) = a3;
    std::string::operator=((std::string *)(a1 + 104), (const std::string *)a2);
    return 1;
  }
  v10 = *(unsigned __int8 *)(a2 + 23);
  if ((v10 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = *(unsigned __int8 *)(a1 + 127);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a1 + 112);
  if (v11 != v12)
    goto LABEL_4;
  v14 = v13 >= 0 ? (unsigned __int8 *)(a1 + 104) : *(unsigned __int8 **)(a1 + 104);
  if ((v10 & 0x80) != 0)
  {
    LOBYTE(v10) = memcmp(*(const void **)a2, v14, *(_QWORD *)(a2 + 8)) != 0;
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    v15 = (unsigned __int8 *)a2;
    while (*v15 == *v14)
    {
      ++v15;
      ++v14;
      if (!--v10)
        goto LABEL_24;
    }
    goto LABEL_4;
  }
LABEL_24:
  if ((v10 & 1) != 0 || (a4 & 1) != 0)
    goto LABEL_4;
  return 0;
}

void sub_10064A39C(uint64_t a1, void *a2, unsigned int a3)
{
  id v4;
  id v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  const std::ios_base *v9;
  const std::locale::facet *v10;
  uint64_t v11;
  unsigned int v12;
  _OWORD v13[4];
  void *__p[2];
  __int128 v15;
  __int128 v16;
  _OWORD v17[9];
  uint64_t v18;
  std::locale v19;

  v4 = a2;
  v18 = 0;
  v16 = 0u;
  memset(v17, 0, sizeof(v17));
  *(_OWORD *)__p = 0u;
  v15 = 0u;
  memset(v13, 0, sizeof(v13));
  sub_100272ADC((uint64_t)v13);
  v5 = objc_retainAutorelease(v4);
  v6 = (unsigned __int8 *)objc_msgSend(v5, "bytes");
  LOWORD(v7) = (unsigned __int16)objc_msgSend(v5, "length");
  v8 = *(_QWORD *)&v13[0];
  *(_DWORD *)((char *)v13 + *(_QWORD *)(*(_QWORD *)&v13[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v13
                                                                                    + *(_QWORD *)(*(_QWORD *)&v13[0]
                                                                                                - 24)
                                                                                    + 8) & 0xFFFFFFB5 | 8;
  v9 = (const std::ios_base *)((char *)v13 + *(_QWORD *)(v8 - 24));
  if (v9[1].__fmtflags_ == -1)
  {
    std::ios_base::getloc(v9);
    v10 = std::locale::use_facet(&v19, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
    std::locale::~locale(&v19);
  }
  v9[1].__fmtflags_ = 48;
  if ((unsigned __int16)v7 >= a3)
    v7 = a3;
  else
    v7 = (unsigned __int16)v7;
  if ((_DWORD)v7)
  {
    do
    {
      v11 = *(_QWORD *)&v13[0];
      *(_QWORD *)((char *)&v13[1] + *(_QWORD *)(*(_QWORD *)&v13[0] - 24) + 8) = 2;
      *(_DWORD *)((char *)v13 + *(_QWORD *)(v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v13 + *(_QWORD *)(v11 - 24) + 8) & 0xFFFFFF4F | 0x80;
      v12 = *v6++;
      std::ostream::operator<<(v13, v12);
      --v7;
    }
    while (v7);
  }
  std::stringbuf::str((char *)v13 + 8);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v13 + 8);
  std::ios::~ios(v17);

}

void sub_10064A56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  uint64_t v10;

  std::locale::~locale((std::locale *)(v10 - 88));
  sub_100272CFC((uint64_t)&a9);

  _Unwind_Resume(a1);
}

_DWORD *sub_10064A5A4(_DWORD *result, int a2)
{
  ++result[116];
  result[117] += a2;
  result[118] = a2;
  return result;
}

_DWORD *sub_10064A5C4(_DWORD *result, int a2)
{
  ++result[113];
  result[114] += a2;
  result[115] = a2;
  return result;
}

void sub_10064A5E4(uint64_t a1)
{
  int v1;
  id v3;
  void *v4;
  id v5;
  int v6;
  unsigned int v7;
  NSObject *v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  _DWORD __dst[2];
  uint8_t buf[4];
  int v23;
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  unsigned int v27;
  __int16 v28;
  unsigned int v29;
  __int16 v30;
  unsigned int v31;
  __int16 v32;
  int v33;

  v1 = *(_DWORD *)(a1 + 464);
  if (v1 && *(_DWORD *)(a1 + 468) / v1)
  {
    *(_DWORD *)((char *)__dst + 3) = 0;
    __dst[0] = 0;
    v3 = *(id *)(a1 + 336);
    v4 = v3;
    if (v3)
    {
      v5 = objc_retainAutorelease(v3);
      memcpy(__dst, objc_msgSend(v5, "bytes"), (size_t)objc_msgSend(v5, "length"));
      v6 = *(unsigned __int16 *)((char *)__dst + 1);
      v7 = *(unsigned __int16 *)((char *)__dst + 3);
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    v17 = 0;
    v18 = 0;
    v20 = 0;
    v19 = 0;
    v9 = *(_DWORD *)(a1 + 464);
    if (v9)
      v10 = *(_DWORD *)(a1 + 468) / v9;
    else
      v10 = 0;
    v11 = *(_DWORD *)(a1 + 452);
    if (v11)
      v12 = (char)(*(_DWORD *)(a1 + 456) / v11);
    else
      v12 = 0;
    v13 = *(_DWORD *)(a1 + 472);
    v14 = *(char *)(a1 + 460);
    sub_10047D368(&v17, 13);
    HIDWORD(v17) = v10;
    v18 = __PAIR64__(v13, v12);
    v19 = __PAIR64__(v7, v14);
    v20 = v6;
    v15 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67110400;
      v23 = v10;
      v24 = 1024;
      v25 = v12;
      v26 = 1024;
      v27 = v13;
      v28 = 1024;
      v29 = v14;
      v30 = 1024;
      v31 = v7;
      v32 = 1024;
      v33 = v6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending LeConnectionPhyStats AWDMetric: RSSI Average %d, PER Average %d%%, RSSI %d, PER %d%% pid %d Vid %d", buf, 0x26u);
    }
    if (sub_100065478())
    {
      v16 = sub_100065478();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 40))(v16, &v17);
    }
    *(_QWORD *)(a1 + 452) = 0;
    *(_QWORD *)(a1 + 460) = 0;
    *(_QWORD *)(a1 + 468) = 0;

  }
  else
  {
    v8 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Not sending LE connection phy stats as average RSSI is 0 dBm", buf, 2u);
    }
  }
}

void sub_10064A810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10064A82C(id *a1)
{
  uint64_t v2;
  _QWORD *v3;
  const char *v4;
  size_t v5;
  _QWORD *v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  const char *v10;
  size_t v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  const char *v19;
  size_t v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  _QWORD *v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;
  void **v28;
  uint64_t v29;
  _QWORD *v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  uint64_t v36;
  unsigned __int8 v37;
  _OWORD v38[4];
  void *v39[2];
  __int128 v40;
  __int128 v41;
  _BYTE v42[144];
  uint64_t v43;

  v43 = 0;
  memset(v42, 0, sizeof(v42));
  v40 = 0u;
  v41 = 0u;
  *(_OWORD *)v39 = 0u;
  memset(v38, 0, sizeof(v38));
  sub_100272ADC((uint64_t)v38);
  sub_1002614D8(v38, (uint64_t)"DIS:", 4);
  std::stringbuf::str((char *)v38 + 8);
  if ((char)v37 < 0)
  {
    v2 = v36;
    operator delete(__p);
  }
  else
  {
    v2 = v37;
  }
  if (a1[34])
  {
    v3 = sub_1002614D8(v38, (uint64_t)" MFGR:", 6);
    v4 = (const char *)objc_msgSend(a1[34], "UTF8String");
    v5 = strlen(v4);
    sub_1002614D8(v3, (uint64_t)v4, v5);
  }
  if (a1[35])
  {
    v6 = sub_1002614D8(v38, (uint64_t)" model:", 7);
    v7 = (const char *)objc_msgSend(a1[35], "UTF8String");
    v8 = strlen(v7);
    sub_1002614D8(v6, (uint64_t)v7, v8);
  }
  if (a1[36])
  {
    v9 = sub_1002614D8(v38, (uint64_t)" SN:", 4);
    v10 = (const char *)objc_msgSend(a1[36], "UTF8String");
    v11 = strlen(v10);
    sub_1002614D8(v9, (uint64_t)v10, v11);
  }
  if (a1[37])
  {
    v12 = sub_1002614D8(v38, (uint64_t)" HW:", 4);
    v13 = (const char *)objc_msgSend(a1[37], "UTF8String");
    v14 = strlen(v13);
    sub_1002614D8(v12, (uint64_t)v13, v14);
  }
  if (a1[38])
  {
    v15 = sub_1002614D8(v38, (uint64_t)" FW:", 4);
    v16 = (const char *)objc_msgSend(a1[38], "UTF8String");
    v17 = strlen(v16);
    sub_1002614D8(v15, (uint64_t)v16, v17);
  }
  if (a1[39])
  {
    v18 = sub_1002614D8(v38, (uint64_t)" SW:", 4);
    v19 = (const char *)objc_msgSend(a1[39], "UTF8String");
    v20 = strlen(v19);
    sub_1002614D8(v18, (uint64_t)v19, v20);
  }
  if (a1[40])
  {
    v21 = sub_1002614D8(v38, (uint64_t)" SYSID:", 7);
    sub_10064A39C((uint64_t)v21, a1[40], 0xAu);
    v22 = (v37 & 0x80u) == 0 ? &__p : (void **)__p;
    v23 = (v37 & 0x80u) == 0 ? v37 : v36;
    sub_1002614D8(v21, (uint64_t)v22, v23);
    if ((char)v37 < 0)
      operator delete(__p);
  }
  if (a1[42])
  {
    v24 = sub_1002614D8(v38, (uint64_t)" PNPID:", 7);
    sub_10064A39C((uint64_t)v24, a1[42], 0xAu);
    v25 = (v37 & 0x80u) == 0 ? &__p : (void **)__p;
    v26 = (v37 & 0x80u) == 0 ? v37 : v36;
    sub_1002614D8(v24, (uint64_t)v25, v26);
    if ((char)v37 < 0)
      operator delete(__p);
  }
  if (a1[43])
  {
    v27 = sub_1002614D8(v38, (uint64_t)" UDI:", 5);
    sub_10064A39C((uint64_t)v27, a1[43], 0xAu);
    v28 = (v37 & 0x80u) == 0 ? &__p : (void **)__p;
    v29 = (v37 & 0x80u) == 0 ? v37 : v36;
    sub_1002614D8(v27, (uint64_t)v28, v29);
    if ((char)v37 < 0)
      operator delete(__p);
  }
  if (a1[41])
  {
    v30 = sub_1002614D8(v38, (uint64_t)" Regulatory:", 12);
    sub_10064A39C((uint64_t)v30, a1[41], 0xAu);
    v31 = (v37 & 0x80u) == 0 ? &__p : (void **)__p;
    v32 = (v37 & 0x80u) == 0 ? v37 : v36;
    sub_1002614D8(v30, (uint64_t)v31, v32);
    if ((char)v37 < 0)
      operator delete(__p);
  }
  std::stringbuf::str((char *)v38 + 8);
  if ((char)v37 < 0)
  {
    v33 = v36;
    operator delete(__p);
    if (v33 != v2)
      goto LABEL_57;
    goto LABEL_56;
  }
  if (v2 == v37)
LABEL_56:
    sub_1002614D8(v38, (uint64_t)"Unavailable", 11);
LABEL_57:
  std::stringbuf::str((char *)v38 + 8);
  if (SHIBYTE(v40) < 0)
    operator delete(v39[1]);
  std::streambuf::~streambuf((char *)v38 + 8);
  return std::ios::~ios(v42);
}

void sub_10064ACA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_100272CFC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_10064ACF8(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  unsigned int v33;
  unsigned int v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  void *v39;
  NSObject *v40;
  void *v41;
  void *v43;
  void *v44;
  id v45;
  id obj;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE buf[12];
  __int16 v56;
  void *v57;
  __int16 v58;
  void *v59;
  __int16 v60;
  void *v61;
  __int16 v62;
  unsigned int v63;
  __int16 v64;
  unsigned int v65;
  _BYTE v66[128];
  _BYTE v67[128];

  v4 = a2;
  v5 = v4;
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "beaconIdentifier"));

    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allowedSessions"));
      if (v7
        && (v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allowedSessions")),
            v9 = objc_msgSend(v8, "count"),
            v8,
            v7,
            v9))
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "longTermKeyMap"));
        if (v10
          && (v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "longTermKeyMap")),
              v12 = objc_msgSend(v11, "count"),
              v11,
              v10,
              v12))
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "serialNumber"));
          if (v13)
          {
            v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "serialNumber"));
            v15 = objc_msgSend(v14, "length");

            if (v15)
            {
              v53 = 0u;
              v54 = 0u;
              v51 = 0u;
              v52 = 0u;
              obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "longTermKeyMap"));
              v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v67, 16);
              if (v16)
              {
                v17 = *(_QWORD *)v52;
                while (2)
                {
                  v18 = 0;
                  do
                  {
                    if (*(_QWORD *)v52 != v17)
                      objc_enumerationMutation(obj);
                    v19 = *(_QWORD *)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)v18);
                    if (!v19 || objc_msgSend(*(id *)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)v18), "length") != (id)7)
                    {
                      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
                      {
                        v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "beaconIdentifier"));
                        sub_100714B54(v19, v44, (uint64_t)buf);
                      }
                      v37 = 8;
LABEL_44:

                      goto LABEL_40;
                    }
                    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "longTermKeyMap"));
                    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", v19));

                    v49 = 0u;
                    v50 = 0u;
                    v47 = 0u;
                    v48 = 0u;
                    v22 = v21;
                    v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v47, v66, 16);
                    if (v23)
                    {
                      v24 = *(_QWORD *)v48;
                      v45 = v16;
                      while (2)
                      {
                        v25 = v17;
                        v26 = 0;
                        do
                        {
                          if (*(_QWORD *)v48 != v24)
                            objc_enumerationMutation(v22);
                          v27 = *(_QWORD *)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)v26);
                          if (!v27
                            || (unint64_t)objc_msgSend(*(id *)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)v26), "length") <= 0xF)
                          {
                            if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
                            {
                              v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "beaconIdentifier"));
                              sub_100714B9C(v27, v43, (uint64_t)buf);
                            }

                            v37 = 149;
                            goto LABEL_44;
                          }
                          v26 = (char *)v26 + 1;
                        }
                        while (v23 != v26);
                        v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v47, v66, 16);
                        v17 = v25;
                        v16 = v45;
                        if (v23)
                          continue;
                        break;
                      }
                    }

                    v18 = (char *)v18 + 1;
                  }
                  while (v18 != v16);
                  v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v67, 16);
                  if (v16)
                    continue;
                  break;
                }
              }

              v28 = qword_100999810;
              if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
              {
                v29 = *(_QWORD *)a1;
                v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "beaconIdentifier"));
                v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "groupIdentifier"));
                v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "serialNumber"));
                v33 = objc_msgSend(v5, "partIdentifier");
                v34 = objc_msgSend(v5, "managedByFindMy");
                *(_DWORD *)buf = 138413570;
                *(_QWORD *)&buf[4] = v29;
                v56 = 2112;
                v57 = v30;
                v58 = 2112;
                v59 = v31;
                v60 = 2112;
                v61 = v32;
                v62 = 1024;
                v63 = v33;
                v64 = 1024;
                v65 = v34;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "fIdentifier:%@ fFindMyID:%@ fFindMyGroupID:%@ fFindMySerialNumber:%@ fFindMyPartID:%d fManagedByFindMy:%d", buf, 0x36u);

              }
              v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "longTermKeyMap", v45));
              objc_msgSend(v35, "count");
              *(_QWORD *)buf = 0;
              sub_10004AD30((uint64_t)buf);
              v36 = *(__int16 *)&buf[4];
              *(_QWORD *)(a1 + 40) = *(int *)buf;
              *(_QWORD *)(a1 + 48) = v36;

              goto LABEL_30;
            }
          }
          if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
            sub_100714B28();
        }
        else
        {
          v40 = qword_100999810;
          if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
          {
            v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "beaconIdentifier"));
            sub_100714AE0(v41, (uint64_t)buf, v40);
          }
        }
      }
      else
      {
        v38 = qword_100999810;
        if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
        {
          v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "beaconIdentifier"));
          sub_100714A98(v39, (uint64_t)buf, v38);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
    {
      sub_100714A6C();
    }
    v37 = 3;
    goto LABEL_40;
  }
LABEL_30:
  objc_storeStrong((id *)(a1 + 64), a2);
  sub_10064B304(a1);
  v37 = 0;
  *(_BYTE *)(a1 + 238) = 1;
LABEL_40:

  return v37;
}

void sub_10064B238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10064B304(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "longTermKeyMap"));
  v3 = objc_msgSend(v2, "mutableCopy");
  v4 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v3;

  v5 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;

  v6 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;

}

void sub_10064B358(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10064B368(_QWORD *a1)
{
  id v2;
  void *v3;
  void *v4;

  v2 = sub_1003500B8();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = v3;
  if (v3 && a1[10] && a1[11] && a1[8])
    objc_msgSend(v3, "successfulConnectionForPeripheral:leMAC:ltk:completion:");

}

void sub_10064B3F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10064B404(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  id v7;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "successfulConnectionForPeripheral returned %@", (uint8_t *)&v6, 0xCu);
  }
  sub_10064B304(v4);

}

void sub_10064B4C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10064B4DC(uint64_t a1, int a2)
{
  uint64_t **v2;
  void *__p[2];
  char v4;

  v2 = (uint64_t **)(a1 + 176);
  if (a2)
  {
    sub_100091AE8(__p, "_HID_DEVICE_");
    sub_100565F28(v2, (const void **)__p, (uint64_t)__p);
  }
  else
  {
    sub_100091AE8(__p, "_HID_DEVICE_");
    sub_10035AE5C(v2, (const void **)__p);
  }
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_10064B554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10064B574(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (*(_QWORD *)(a1 + 496))
  {
    if (!v9)
      goto LABEL_9;
  }
  else
  {
    v6 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v7 = *(void **)(a1 + 496);
    *(_QWORD *)(a1 + 496) = v6;

    if (!v9)
      goto LABEL_9;
  }
  v8 = objc_msgSend(v9, "length");
  if (v5 && v8 && objc_msgSend(v5, "length"))
    objc_msgSend(*(id *)(a1 + 496), "setObject:forKeyedSubscript:", v5, v9);
LABEL_9:

}

void sub_10064B618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10064B630(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  if (v5)
  {
    if (objc_msgSend(v5, "length"))
    {
      v3 = *(void **)(a1 + 496);
      if (v3)
      {
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v5));

        if (v4)
          objc_msgSend(*(id *)(a1 + 496), "removeObjectForKey:", v5);
      }
    }
  }

}

void sub_10064B69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_10064B6B0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v2 = *(void **)(a1 + 496);
  if (!v2 || !objc_msgSend(v2, "count"))
    return 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = *(id *)(a1 + 496);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v13;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v4);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 496), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v7), (_QWORD)v12));
        v9 = v8;
        if (v8 && objc_msgSend(v8, "length"))
          objc_msgSend(v3, "addObject:", v9);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }

  if (objc_msgSend(v3, "count"))
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allObjects"));
  else
    v10 = 0;

  return v10;
}

void sub_10064B828(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_10064B864(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v3 = a2;
  v4 = v3;
  if (v3 && objc_msgSend(v3, "length"))
  {
    v5 = sub_10064B6B0(a1);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = v6;
    if (v6 && objc_msgSend(v6, "count"))
      v8 = objc_msgSend(v7, "containsObject:", v4);
    else
      v8 = 0;

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void sub_10064B8EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10064B90C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;

  v9 = a2;
  v5 = a3;
  if (*(_QWORD *)(a1 + 504))
  {
    if (!v9)
      goto LABEL_9;
  }
  else
  {
    v6 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v7 = *(void **)(a1 + 504);
    *(_QWORD *)(a1 + 504) = v6;

    if (!v9)
      goto LABEL_9;
  }
  v8 = objc_msgSend(v9, "length");
  if (v5 && v8 && objc_msgSend(v5, "count"))
    objc_msgSend(*(id *)(a1 + 504), "setObject:forKeyedSubscript:", v5, v9);
LABEL_9:

}

void sub_10064B9B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10064B9C8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v5 = a2;
  if (v5)
  {
    if (objc_msgSend(v5, "length"))
    {
      v3 = *(void **)(a1 + 504);
      if (v3)
      {
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v5));

        if (v4)
          objc_msgSend(*(id *)(a1 + 504), "removeObjectForKey:", v5);
      }
    }
  }

}

void sub_10064BA34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_10064BA48(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id obj;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  _BYTE v25[128];

  v2 = *(void **)(a1 + 504);
  if (!v2 || !objc_msgSend(v2, "count"))
    return 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  obj = *(id *)(a1 + 504);
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v21;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v21 != v5)
          objc_enumerationMutation(obj);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 504), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v6)));
        v8 = v7;
        if (v7 && objc_msgSend(v7, "count"))
        {
          v18 = 0u;
          v19 = 0u;
          v16 = 0u;
          v17 = 0u;
          v9 = v8;
          v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
          if (v10)
          {
            v11 = *(_QWORD *)v17;
            do
            {
              v12 = 0;
              do
              {
                if (*(_QWORD *)v17 != v11)
                  objc_enumerationMutation(v9);
                objc_msgSend(v3, "addObject:", *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v12));
                v12 = (char *)v12 + 1;
              }
              while (v10 != v12);
              v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
            }
            while (v10);
          }

        }
        v6 = (char *)v6 + 1;
      }
      while (v6 != v4);
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
    }
    while (v4);
  }

  if (objc_msgSend(v3, "count"))
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allObjects"));
  else
    v13 = 0;

  return v13;
}

void sub_10064BC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id sub_10064BCA0(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = sub_10064BA48(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = v4;
  if (v4 && objc_msgSend(v4, "count"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2));
    v7 = objc_msgSend(v5, "containsObject:", v6);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_10064BD1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10064BD38(uint64_t a1, int a2, void *a3, int a4)
{
  id v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  int v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  id v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;

  v8 = a3;
  v9 = sub_1000438A4();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 2744))(v9) & 1) == 0)
  {
    v11 = 0;
    goto LABEL_27;
  }
  v10 = *(unsigned __int8 *)(a1 + 528) != a2 || *(_DWORD *)(a1 + 532) != a4;
  v12 = *(void **)(a1 + 520);
  if ((v8 || !v12) && (!v8 || v12))
  {
    v13 = 0;
    if (v8 && v12)
      v13 = objc_msgSend(v12, "isEqualToData:", v8) ^ 1;
  }
  else
  {
    v13 = 1;
  }
  *(_BYTE *)(a1 + 528) = a2;
  objc_storeStrong((id *)(a1 + 520), a3);
  v14 = v13 | v10;
  *(_DWORD *)(a1 + 532) = a4;
  if (a4 != 2)
    *(_BYTE *)(a1 + 544) = 1;
  if (v14 || !*(_BYTE *)(a1 + 544))
  {
    sub_10064C02C((uint64_t *)a1, 0);
    sub_10064C7D4((uint64_t *)a1, 0);
  }
  if (!a2 || !objc_msgSend(v8, "length") || *(_BYTE *)(a1 + 529))
  {
    if (v14)
    {
      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_10093E118);
      sub_1002F3900((uint64_t)off_100978168, *(void **)a1);
    }
    v15 = 0;
    goto LABEL_24;
  }
  if (*(_BYTE *)(a1 + 544))
  {
    v11 = sub_10064C02C((uint64_t *)a1, 1);
    if (!(_DWORD)v11)
    {
      v15 = 1;
      sub_10064C7D4((uint64_t *)a1, 1);
LABEL_24:
      v11 = 0;
      goto LABEL_25;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      sub_100714BE4();
    v11 = 0;
  }
  v15 = 1;
LABEL_25:
  v16 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_INFO))
  {
    v17 = *(_QWORD *)a1;
    v18 = *(unsigned __int8 *)(a1 + 530);
    v19 = *(unsigned __int8 *)(a1 + 529);
    v20 = *(unsigned __int8 *)(a1 + 544);
    v21 = *(_DWORD *)(a1 + 532);
    v22 = *(_QWORD *)(a1 + 520);
    v23 = *(unsigned __int8 *)(a1 + 528);
    v25 = 138415362;
    v26 = v17;
    v27 = 1024;
    v28 = a2;
    v29 = 2112;
    v30 = v8;
    v31 = 1024;
    v32 = v14;
    v33 = 1024;
    v34 = v15;
    v35 = 1024;
    v36 = v11;
    v37 = 1024;
    v38 = v18;
    v39 = 1024;
    v40 = v19;
    v41 = 1024;
    v42 = v20;
    v43 = 1024;
    v44 = v21;
    v45 = 2112;
    v46 = v22;
    v47 = 1024;
    v48 = v23;
    v49 = 1024;
    v50 = a4;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "FastLeConnection:setControllerInfo fIdentifier:%@ version:%d info:%@ dataChanged:%d enable:%d result:%d fControllerLTKStored:%d fControllerInfoConfigured:%d fFastLeConnectionAllowed:%d fControllerInfoOrigin:%d fControllerInfo:%@ fControllerInfoVersion:%d newOrigin:%d", (uint8_t *)&v25, 0x5Cu);
  }
LABEL_27:

  return v11;
}

void sub_10064C008(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10064C02C(uint64_t *a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  int v28;
  uint64_t v29;
  char v30;
  int v31;
  int v32;
  unsigned int v33;
  NSObject *v34;
  uint64_t v35;
  _BYTE *v36;
  int v37;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _BYTE *v49;
  char v50;
  _BYTE buf[12];
  __int16 v52;
  _BYTE *v53;
  __int16 v54;
  _BYTE v55[10];
  _BYTE v56[6];
  _BYTE v57[6];
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  _BYTE __p[12];
  __int16 v63;
  _BYTE *v64;
  char v65;

  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093E138);
  if (!*((_BYTE *)off_100977A50 + 60))
    return 12;
  v4 = sub_1000438A4();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 2744))(v4))
    return 0;
  v5 = a1[3];
  if (v5 || (v5 = a1[2]) != 0)
  {
    if (a2 && *((_BYTE *)a1 + 528))
    {
      if (!*((_BYTE *)a1 + 544))
      {
        if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
          sub_100714CC0();
        v15 = 0;
        v14 = 0;
        LODWORD(v6) = 12;
        goto LABEL_48;
      }
      if (!*((_BYTE *)a1 + 530))
      {
        v17 = (void *)a1[69];
        if (v17 && objc_msgSend(v17, "length"))
        {
          v18 = sub_1000438A4();
          v19 = (*(uint64_t (**)(uint64_t, unint64_t, BOOL, _QWORD, id))(*(_QWORD *)v18 + 1848))(v18, v5, a1[3] != 0, objc_msgSend((id)a1[69], "length"), objc_msgSend((id)a1[69], "bytes"));
          if (v19)
          {
            LODWORD(v6) = v19;
            v20 = qword_100999810;
            if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
            {
              v21 = *a1;
              sub_1000217F4(v5);
              v22 = v65 >= 0 ? __p : *(_BYTE **)__p;
              v23 = a1[65];
              v24 = *((unsigned __int8 *)a1 + 528);
              *(_DWORD *)buf = 138413314;
              *(_QWORD *)&buf[4] = v21;
              v52 = 2080;
              v53 = v22;
              v54 = 2112;
              *(_QWORD *)v55 = v23;
              *(_WORD *)&v55[8] = 1024;
              *(_DWORD *)v56 = v24;
              *(_WORD *)&v56[4] = 1024;
              *(_DWORD *)v57 = v6;
              _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "FastLEConnection:Failed writeStoredLTKForDevice for device %@ (%s) cached data:%@ version:%d returned %d aborting", buf, 0x2Cu);
              if (v65 < 0)
                operator delete(*(void **)__p);
            }
LABEL_43:
            v15 = 0;
            v14 = 0;
            goto LABEL_48;
          }
          *((_BYTE *)a1 + 530) = 1;
        }
        else
        {
          v26 = sub_1000438A4();
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 2752))(v26) & 1) == 0)
          {
            v27 = qword_100999810;
            if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
            {
              v48 = *a1;
              sub_1000217F4(v5);
              v49 = v54 >= 0 ? buf : *(_BYTE **)buf;
              *(_DWORD *)__p = 138412546;
              *(_QWORD *)&__p[4] = v48;
              v63 = 2080;
              v64 = v49;
              _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "FastLEConnection:LeDevice::enableFastLEConnection device %@ (%s) No LTK provided but required", __p, 0x16u);
              if (SHIBYTE(v54) < 0)
                operator delete(*(void **)buf);
            }
            v15 = 0;
            v14 = 0;
            LODWORD(v6) = 149;
            goto LABEL_48;
          }
        }
      }
      if (*((_BYTE *)a1 + 529))
        return 0;
      v6 = sub_1000438A4();
      LODWORD(v6) = (*(uint64_t (**)(uint64_t, unint64_t, BOOL, _QWORD, _QWORD, id))(*(_QWORD *)v6 + 1872))(v6, v5, a1[3] != 0, *((unsigned __int8 *)a1 + 528), objc_msgSend((id)a1[65], "length"), objc_msgSend((id)a1[65], "bytes"));
      if (!(_DWORD)v6)
      {
        v15 = 0;
        v14 = 1;
        *((_BYTE *)a1 + 529) = 1;
        goto LABEL_48;
      }
      v25 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      {
        v44 = *a1;
        sub_1000217F4(v5);
        v45 = v65 >= 0 ? __p : *(_BYTE **)__p;
        v46 = a1[65];
        v47 = *((unsigned __int8 *)a1 + 528);
        *(_DWORD *)buf = 138413314;
        *(_QWORD *)&buf[4] = v44;
        v52 = 2080;
        v53 = v45;
        v54 = 2112;
        *(_QWORD *)v55 = v46;
        *(_WORD *)&v55[8] = 1024;
        *(_DWORD *)v56 = v47;
        *(_WORD *)&v56[4] = 1024;
        *(_DWORD *)v57 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "FastLEConnection:LeDevice::enableFastLEConnection Failed writePeerControllerCachedInfo for device %@ (%s) cached data:%@ version:%d returned %d, aborting", buf, 0x2Cu);
        if (v65 < 0)
          operator delete(*(void **)__p);
      }
      if (!*((_BYTE *)a1 + 530))
        goto LABEL_43;
    }
    else
    {
      if (*((_BYTE *)a1 + 529))
      {
        v7 = sub_1000438A4();
        v8 = (*(uint64_t (**)(uint64_t, unint64_t, BOOL))(*(_QWORD *)v7 + 1880))(v7, v5, a1[3] != 0);
        *((_BYTE *)a1 + 529) = 0;
        if (v8)
        {
          v9 = v8;
          v10 = qword_100999810;
          if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
          {
            v41 = *a1;
            sub_1000217F4(v5);
            v42 = v65 >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 138412802;
            *(_QWORD *)&buf[4] = v41;
            v52 = 2080;
            v53 = v42;
            v54 = 1024;
            *(_DWORD *)v55 = v9;
            _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "FastLEConnection:LeDevice::enableFastLEConnection FastLEConnection:removePeerControllerCachedInfo device %@ (%s) returned %d", buf, 0x1Cu);
            if (v65 < 0)
              operator delete(*(void **)__p);
          }
        }
      }
      if (!*((_BYTE *)a1 + 530))
      {
        v15 = 0;
        v14 = 0;
        LODWORD(v6) = 0;
LABEL_48:
        v50 = 0;
        sub_100043758(&v50);
        v28 = *((unsigned __int8 *)a1 + 530);
        v29 = sub_1000438A4();
        v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 2752))(v29);
        v31 = sub_100225380(v5, v28 != 0, v14, v30 ^ 1u);
        v32 = v31;
        if (v14)
          v33 = 1;
        else
          v33 = v6;
        if (v31)
          v6 = v33;
        else
          v6 = v6;
        v34 = qword_100999810;
        if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
        {
          v35 = *a1;
          sub_1000217F4(v5);
          if (v65 >= 0)
            v36 = __p;
          else
            v36 = *(_BYTE **)__p;
          v37 = *((unsigned __int8 *)a1 + 544);
          *(_DWORD *)buf = 138414082;
          *(_QWORD *)&buf[4] = v35;
          v52 = 2080;
          v53 = v36;
          v54 = 1024;
          *(_DWORD *)v55 = a2;
          *(_WORD *)&v55[4] = 1024;
          *(_DWORD *)&v55[6] = v37;
          *(_WORD *)v56 = 1024;
          *(_DWORD *)&v56[2] = v32;
          *(_WORD *)v57 = 1024;
          *(_DWORD *)&v57[2] = v15;
          v58 = 1024;
          v59 = v14;
          v60 = 1024;
          v61 = v6;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "FastLEConnection:LeDevice::enableFastLEConnection device:%@ address:%s enable:%d fFastLeConnectionAllowed:%d LE_GAP_EnableFastLeConnectionForAddress:%d shouldRemoveLTKFromController:%d, shouldEnable:%d ret:%d", buf, 0x3Au);
          if (v65 < 0)
            operator delete(*(void **)__p);
        }
        sub_100043728(&v50);
        return v6;
      }
      LODWORD(v6) = 0;
    }
    v11 = sub_1000438A4();
    v12 = (*(uint64_t (**)(uint64_t, unint64_t, BOOL))(*(_QWORD *)v11 + 1856))(v11, v5, a1[3] != 0);
    *((_BYTE *)a1 + 530) = 0;
    if (v12)
    {
      v13 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      {
        v39 = *a1;
        sub_1000217F4(v5);
        v40 = v65 >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v39;
        v52 = 2080;
        v53 = v40;
        v54 = 1024;
        *(_DWORD *)v55 = v12;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "FastLEConnection:LeDevice::enableFastLEConnection FastLEConnection:removeStoredLTKForDevice device %@ (%s) returned %d", buf, 0x1Cu);
        if (v65 < 0)
          operator delete(*(void **)__p);
      }
    }
    v14 = 0;
    v15 = 1;
    goto LABEL_48;
  }
  v16 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
  {
    v43 = *a1;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v43;
    _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "FastLEConnection: %@ Address cannot be 0", buf, 0xCu);
    v16 = qword_100999810;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    sub_100714C5C();
  return 8;
}

void sub_10064C7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_10064C7D4(uint64_t *a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  dispatch_time_t v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD v13[5];
  _QWORD block[5];
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  uint64_t v18;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10064CA00;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100993F28 != -1)
    dispatch_once(&qword_100993F28, block);
  v4 = a1[67];
  if (a2)
  {
    if (!v4 && *((_DWORD *)a1 + 133) == 3)
    {
      v5 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *a1;
        *(_DWORD *)buf = 138412546;
        v16 = v6;
        v17 = 2048;
        v18 = qword_10097B840;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "FastLeConnection:enableClientControllerInfoTimer %@ timer duration %llums armed!", buf, 0x16u);
      }
      v7 = sub_1000419F4();
      v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v7 + 8));
      a1[67] = (uint64_t)v8;
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_10064CB88;
      v13[3] = &unk_100917378;
      v13[4] = a1;
      dispatch_source_set_event_handler(v8, v13);
      v9 = a1[67];
      v10 = dispatch_time(0x8000000000000000, 1000000 * qword_10097B840);
      dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0);
      dispatch_activate((dispatch_object_t)a1[67]);
    }
  }
  else if (v4)
  {
    v11 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *a1;
      *(_DWORD *)buf = 138412290;
      v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "FastLeConnection:enableClientControllerInfoTimer %@ timer destroyed!", buf, 0xCu);
      v4 = a1[67];
    }
    dispatch_source_cancel(v4);
    dispatch_release((dispatch_object_t)a1[67]);
    a1[67] = 0;
  }
}

void sub_10064CA00(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  int v10;
  _BYTE buf[12];
  __int16 v12;
  uint64_t v13;
  char v14;

  v1 = *(uint64_t **)(a1 + 32);
  v10 = 0;
  v2 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "DeviceFastLeConnectionClientTimeoutSeconds");
  v3 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v2 + 88))(v2, buf, __p, &v10);
  if (v10)
    v4 = v3;
  else
    v4 = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
  {
    operator delete(*(void **)buf);
    if (!v4)
      return;
  }
  else if (!v4)
  {
    return;
  }
  v5 = 1000 * v10;
  qword_10097B840 = v5;
  v6 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *v1;
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = v7;
    v12 = 2048;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "FastLeConnection:enableClientControllerInfoTimer %@ Overriding timer duration to %llums", buf, 0x16u);
  }
}

void sub_10064CB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10064CB88(uint64_t a1)
{
  uint64_t *v1;
  NSObject *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;

  v1 = *(uint64_t **)(a1 + 32);
  v2 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *v1;
    v5 = 138412290;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "FastLeConnection:enableClientControllerInfoTimer %@ timer expired!", (uint8_t *)&v5, 0xCu);
  }
  dispatch_source_cancel((dispatch_source_t)v1[67]);
  dispatch_release((dispatch_object_t)v1[67]);
  v1[67] = 0;
  return sub_10064BD38(v1, 0, 0, 0);
}

uint64_t sub_10064CC54(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;
  void *v6;
  int v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;

  if (qword_100993F38 != -1)
    dispatch_once(&qword_100993F38, &stru_10093E0F8);
  v4 = sub_1000438A4();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 2744))(v4);
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 528)
      && (v6 = *(void **)(a1 + 520)) != 0
      && objc_msgSend(v6, "length")
      && (v7 = *(_DWORD *)(a1 + 532)) != 0)
    {
      if (v7 == 2)
        v8 = a2;
      else
        v8 = 1;
      *(_BYTE *)(a1 + 544) = v8;
      v9 = qword_100999810;
      if (byte_100993F30 == 1)
      {
        if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
        {
          v10 = *(_QWORD *)a1;
          v13 = 138412802;
          v14 = v10;
          v15 = 1024;
          v16 = byte_100993F31;
          v17 = 1024;
          v18 = 1;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Warning: FastLEConnection:fastLeConnectionAllowed %@ forceAllow:%d forceOverride:%d", (uint8_t *)&v13, 0x18u);
          v9 = qword_100999810;
        }
        v8 = byte_100993F31;
        *(_BYTE *)(a1 + 544) = byte_100993F31;
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)a1;
        v12 = *(_DWORD *)(a1 + 532);
        v13 = 138413058;
        v14 = v11;
        v15 = 1024;
        v16 = a2;
        v17 = 1024;
        v18 = v8;
        v19 = 1024;
        v20 = v12;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "FastLEConnection:fastLeConnectionAllowed %@ allowed:%d fFastLeConnectionAllowed:%d fControllerInfoOrigin:%d", (uint8_t *)&v13, 0x1Eu);
        v8 = *(unsigned __int8 *)(a1 + 544);
      }
      return sub_10064C02C((uint64_t *)a1, v8 != 0);
    }
    else
    {
      return 12;
    }
  }
  return result;
}

void sub_10064CE34(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  void *__p[2];
  char v6;
  _BYTE buf[12];
  char v8;

  v1 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "DeviceFastLeConnectionForceAllow");
  v2 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, __p, &byte_100993F31);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2)
      return;
  }
  else if (!v2)
  {
    return;
  }
  byte_100993F30 = 1;
  v3 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100993F31)
      v4 = "YES";
    else
      v4 = "NO";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: FastLeConnection:fastLeConnectionAllowed DeviceFastLeConnectionForceAllow %s", buf, 0xCu);
  }
}

void sub_10064CF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

const char *sub_10064CFB0(unsigned int a1)
{
  if (a1 > 0xD)
    return "?";
  else
    return (&off_10093E178)[a1];
}

uint64_t sub_10064CFD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  unsigned int v12;
  void *v13;
  unsigned int v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;
  const void *v23[2];
  char v24;
  const void *v25[2];
  char v26;

  sub_100091AE8(v25, "A1603");
  v2 = sub_10001F2AC(a1 + 176, v25);
  v3 = a1 + 184;
  if (a1 + 184 == v2)
  {
    sub_100091AE8(v23, "A2051");
    if (v2 == sub_10001F2AC(a1 + 176, v23))
    {
      sub_100091AE8(v21, "A3085");
      if (v2 == sub_10001F2AC(a1 + 176, (const void **)v21))
      {
        sub_100091AE8(__p, "A2538");
        v4 = v2 != sub_10001F2AC(a1 + 176, (const void **)__p);
        if (v20 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v4 = 1;
      }
      if (v22 < 0)
        operator delete(v21[0]);
    }
    else
    {
      v4 = 1;
    }
    if (v24 < 0)
      operator delete((void *)v23[0]);
  }
  else
  {
    v4 = 1;
  }
  if (v26 < 0)
  {
    operator delete((void *)v25[0]);
    if (v4)
      return 4;
  }
  else if (v4)
  {
    return 4;
  }
  sub_100091AE8(v17, "HasTS");
  v6 = sub_10001F2AC(a1 + 176, (const void **)v17);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v3 != v6)
  {
    v7 = sub_10003BE44();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 352))(v7) & 1) != 0)
      return 2;
    v9 = sub_10003BE44();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 344))(v9);
  }
  sub_100091AE8(v15, "_GHS_DEVICE_");
  v8 = sub_10001F2AC(a1 + 176, (const void **)v15);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v3 != v8)
    return 12;
  if (*(_BYTE *)(a1 + 608))
    return 5;
  v10 = *(void **)(a1 + 200);
  if (!v10)
  {
    v11 = *(_DWORD *)(a1 + 372);
    if (v11 == 655360)
      v12 = 11;
    else
      v12 = 0;
    if (v11 == 21)
      return 3;
    else
      return v12;
  }
  if ((objc_msgSend(v10, "containsString:", CFSTR("iPhone")) & 1) != 0)
    return 1;
  if ((objc_msgSend(*(id *)(a1 + 200), "containsString:", CFSTR("Watch")) & 1) != 0)
    return 2;
  if ((objc_msgSend(*(id *)(a1 + 200), "containsString:", CFSTR("iPad")) & 1) != 0)
    return 10;
  if ((objc_msgSend(*(id *)(a1 + 200), "containsString:", CFSTR("iMac")) & 1) != 0
    || (objc_msgSend(*(id *)(a1 + 200), "containsString:", CFSTR("MacBook")) & 1) != 0)
  {
    return 9;
  }
  result = CBProductIDFromNSString(*(_QWORD *)(a1 + 200));
  if ((_DWORD)result)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[CBProductInfo productInfoWithProductID:](CBProductInfo, "productInfoWithProductID:", result));
    v14 = objc_msgSend(v13, "flags");

    if ((v14 & 0x2000) == 0)
    {
      if ((v14 & 0x4000) != 0)
        return 8;
      if ((v14 & 0x8000) != 0)
        return 7;
      return ((int)(v14 << 15) >> 31) & 6;
    }
    return 5;
  }
  return result;
}

void sub_10064D2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;

  _Unwind_Resume(a1);
}

uint64_t sub_10064D348(uint64_t result)
{
  *(_WORD *)(result + 529) = 0;
  return result;
}

void sub_10064D354(uint64_t *a1, char a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  int v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  void *p_p;
  void *__p;
  char v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  int v18;

  *((_BYTE *)a1 + 160) = a2;
  if ((a2 & 1) == 0 && !*((_BYTE *)a1 + 161))
    *((_BYTE *)a1 + 162) = 0;
  v3 = a1[3];
  if (v3 || (v3 = a1[2]) != 0)
  {
    if ((a2 & 1) == 0)
    {
      v4 = (void *)a1[69];
      a1[69] = 0;

      if (*((_BYTE *)a1 + 530))
      {
        v5 = sub_1000438A4();
        v6 = (*(uint64_t (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v5 + 1856))(v5, v3, a1[3] != 0);
        if (v6)
        {
          v7 = v6;
          v8 = qword_100999810;
          if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
          {
            v9 = *a1;
            sub_1000217F4(v3);
            if (v12 >= 0)
              p_p = &__p;
            else
              p_p = __p;
            *(_DWORD *)buf = 138412802;
            v14 = v9;
            v15 = 2080;
            v16 = p_p;
            v17 = 1024;
            v18 = v7;
            _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "FastLEConnection:setLEPaired removePeerControllerCachedInfo device %@ (%s) returned %d", buf, 0x1Cu);
            if (v12 < 0)
              operator delete(__p);
          }
        }
        else
        {
          *((_BYTE *)a1 + 530) = 0;
        }
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
  {
    sub_100714D24();
  }
}

void sub_10064D4E4(id *a1, void *a2)
{
  id v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  id v10;
  void **v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  id v18;
  void **v19;
  id v20;
  int v21;
  void *__p[2];
  char v23;
  uint8_t buf[4];
  id v25;
  __int16 v26;
  void **v27;
  __int16 v28;
  id v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  v4 = a2;
  v5 = a1 + 69;
  objc_storeStrong(a1 + 69, a2);
  v6 = (uint64_t)a1[3];
  if (!v6)
    v6 = (uint64_t)a1[2];
  if (*v5)
  {
    if (!*((_BYTE *)a1 + 530) && *((_BYTE *)a1 + 160) && *((_BYTE *)a1 + 529))
    {
      v15 = sub_1000438A4();
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, BOOL, _QWORD, id))(*(_QWORD *)v15 + 1848))(v15, v6, a1[3] != 0, objc_msgSend(a1[69], "length"), objc_msgSend(*v5, "bytes"));
      *((_BYTE *)a1 + 530) = 1;
      if (!v16)
        goto LABEL_24;
      v17 = qword_100999810;
      if (!os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
      v18 = *a1;
      sub_1000217F4(v6);
      if (v23 >= 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      v20 = a1[65];
      v21 = *((unsigned __int8 *)a1 + 528);
      *(_DWORD *)buf = 138413314;
      v25 = v18;
      v26 = 2080;
      v27 = v19;
      v28 = 2112;
      v29 = v20;
      v30 = 1024;
      v31 = v21;
      v32 = 1024;
      v33 = v16;
      v12 = "FastLEConnection:setLocalLTK writeStoredLTKForDevice device %@ (%s) controller cached data:%@ version:%d fai"
            "led with error %d";
      v13 = v17;
      v14 = 44;
      goto LABEL_21;
    }
    if (objc_msgSend(*v5, "length"))
      goto LABEL_24;
  }
  if (*((_BYTE *)a1 + 530))
  {
    v7 = sub_1000438A4();
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v7 + 1856))(v7, v6, a1[3] != 0);
    if (!v8)
    {
      *((_BYTE *)a1 + 530) = 0;
      goto LABEL_24;
    }
    v9 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
    {
      v10 = *a1;
      sub_1000217F4(v6);
      if (v23 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      *(_DWORD *)buf = 138412802;
      v25 = v10;
      v26 = 2080;
      v27 = v11;
      v28 = 1024;
      LODWORD(v29) = v8;
      v12 = "FastLEConnection:setLocalLTK removePeerControllerCachedInfo device %@ (%s) returned %d";
      v13 = v9;
      v14 = 28;
LABEL_21:
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v12, buf, v14);
      if (v23 < 0)
        operator delete(__p[0]);
    }
  }
LABEL_24:

}

void sub_10064D770(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10064D798(uint64_t a1, int a2, uint64_t a3)
{
  *(_BYTE *)(a1 + 164) = a2;
  if (!a2)
    a3 = 0;
  *(_QWORD *)(a1 + 56) = a3;
  if ((a2 & 1) != 0)
  {
    *(CFAbsoluteTime *)(a1 + 416) = CFAbsoluteTimeGetCurrent();
  }
  else
  {
    *(_BYTE *)(a1 + 165) = 0;
    *(_BYTE *)(a1 + 236) = 0;
  }
}

uint64_t sub_10064D7DC(uint64_t result, int a2)
{
  uint64_t *v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  *(_DWORD *)(result + 168) = a2;
  if (*(_BYTE *)(result + 164))
  {
    v2 = (uint64_t *)result;
    if (*(_DWORD *)(result + 532) == 3)
    {
      v3 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
      {
        v4 = *v2;
        v5 = 138412290;
        v6 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "FastLEConnection:setLinkReadyDurationMS device %@ connected with Fast LE Connection cached info set by a CB client, removing.", (uint8_t *)&v5, 0xCu);
      }
      return sub_10064BD38((uint64_t)v2, 0, 0, 0);
    }
  }
  return result;
}

uint64_t sub_10064D8AC(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  id v4;
  const char *v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  void *p_p;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  const char *v23;
  size_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  id v28;
  const char *v29;
  size_t v30;
  _QWORD *v31;
  void *v32;
  id v33;
  const char *v34;
  size_t v35;
  _QWORD *v36;
  void *v37;
  id v38;
  const char *v39;
  size_t v40;
  _QWORD *v41;
  id v42;
  const char *v43;
  size_t v44;
  _QWORD *v45;
  id v46;
  const char *v47;
  size_t v48;
  _QWORD *v49;
  _QWORD *v50;
  id v51;
  const char *v52;
  size_t v53;
  void *__p;
  uint64_t v56;
  unsigned __int8 v57;
  _OWORD v58[4];
  void *v59[2];
  __int128 v60;
  __int128 v61;
  _BYTE v62[144];
  uint64_t v63;

  v63 = 0;
  memset(v62, 0, sizeof(v62));
  v60 = 0u;
  v61 = 0u;
  *(_OWORD *)v59 = 0u;
  memset(v58, 0, sizeof(v58));
  sub_100272ADC((uint64_t)v58);
  *(_DWORD *)((char *)v58 + *(_QWORD *)(*(_QWORD *)&v58[0] - 24) + 8) |= 4u;
  if (*(_QWORD *)(a1 + 64))
  {
    v2 = sub_1002614D8(v58, (uint64_t)", FindMyBeaconID: ", 18);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "beaconIdentifier"));
    v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString")));
    v5 = (const char *)objc_msgSend(v4, "UTF8String");
    v6 = strlen(v5);
    v7 = sub_1002614D8(v2, (uint64_t)v5, v6);
    v8 = sub_1002614D8(v7, (uint64_t)" updated:", 9);
    v9 = (void *)(a1 + 40);
    sub_100645DCC((unint64_t *)(a1 + 40));
    if ((v57 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v57 & 0x80u) == 0)
      v11 = v57;
    else
      v11 = v56;
    sub_1002614D8(v8, (uint64_t)p_p, v11);
    if ((char)v57 < 0)
      operator delete(__p);

    v12 = sub_1002614D8(v58, (uint64_t)", FindMyUserID: ", 16);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "userIdentifier"));
    v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "UUIDString")));
    v15 = (const char *)objc_msgSend(v14, "UTF8String");
    v16 = strlen(v15);
    v17 = sub_1002614D8(v12, (uint64_t)v15, v16);
    v18 = sub_1002614D8(v17, (uint64_t)" updated:", 9);
    sub_100645DCC((unint64_t *)(a1 + 40));
    if ((v57 & 0x80u) == 0)
      v19 = &__p;
    else
      v19 = __p;
    if ((v57 & 0x80u) == 0)
      v20 = v57;
    else
      v20 = v56;
    sub_1002614D8(v18, (uint64_t)v19, v20);
    if ((char)v57 < 0)
      operator delete(__p);

    v21 = sub_1002614D8(v58, (uint64_t)" FindMyGroupID:", 15);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "groupIdentifier"));
    if (v22)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "groupIdentifier"));
      v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "UUIDString")));
      v23 = (const char *)objc_msgSend(v18, "UTF8String");
    }
    else
    {
      v23 = "NONE";
    }
    v24 = strlen(v23);
    sub_1002614D8(v21, (uint64_t)v23, v24);
    if (v22)
    {

    }
    v25 = sub_1002614D8(v58, (uint64_t)" fFindMyPartID:", 15);
    std::ostream::operator<<(v25, objc_msgSend(*(id *)(a1 + 64), "partIdentifier"));
    v26 = sub_1002614D8(v58, (uint64_t)" fFindMySerialNumber:", 21);
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "serialNumber"));
    v28 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v27)));
    v29 = (const char *)objc_msgSend(v28, "UTF8String");
    v30 = strlen(v29);
    sub_1002614D8(v26, (uint64_t)v29, v30);

    v31 = sub_1002614D8(v58, (uint64_t)" keys:", 6);
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "longTermKeyMap"));
    v33 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v32)));
    v34 = (const char *)objc_msgSend(v33, "UTF8String");
    v35 = strlen(v34);
    sub_1002614D8(v31, (uint64_t)v34, v35);

    v36 = sub_1002614D8(v58, (uint64_t)" sessions:", 10);
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "allowedSessions"));
    v38 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v37)));
    v39 = (const char *)objc_msgSend(v38, "UTF8String");
    v40 = strlen(v39);
    sub_1002614D8(v36, (uint64_t)v39, v40);

    v41 = sub_1002614D8(v58, (uint64_t)" Valid LTKs:", 12);
    v42 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), *(_QWORD *)(a1 + 72))));
    v43 = (const char *)objc_msgSend(v42, "UTF8String");
    v44 = strlen(v43);
    sub_1002614D8(v41, (uint64_t)v43, v44);

    v45 = sub_1002614D8(v58, (uint64_t)" Last used Address/LTK:", 23);
    v46 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), *(_QWORD *)(a1 + 80))));
    v47 = (const char *)objc_msgSend(v46, "UTF8String");
    v48 = strlen(v47);
    v49 = sub_1002614D8(v45, (uint64_t)v47, v48);
    v50 = sub_1002614D8(v49, (uint64_t)"/", 1);
    v51 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), *(_QWORD *)(a1 + 88))));
    v52 = (const char *)objc_msgSend(v51, "UTF8String");
    v53 = strlen(v52);
    sub_1002614D8(v50, (uint64_t)v52, v53);

  }
  std::stringbuf::str((char *)v58 + 8);
  if (SHIBYTE(v60) < 0)
    operator delete(v59[1]);
  std::streambuf::~streambuf((char *)v58 + 8);
  return std::ios::~ios(v62);
}

void sub_10064DE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;

  sub_100272CFC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_10064DEE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  char v6;

  v2 = a1 + 176;
  sub_100091AE8(__p, "_HID_DEVICE_");
  v3 = sub_10001F2AC(v2, (const void **)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  return a1 + 184 != v3;
}

void sub_10064DF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_10064DF68(uint64_t a1)
{
  _BOOL8 result;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (sub_10064DEE8(a1))
    return *(_BYTE *)(a1 + 610) != 0;
  v3 = qword_100999810;
  v4 = os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v4)
  {
    v5 = *(_QWORD *)a1;
    v6 = 138412290;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Device %@ does not have _HID_SERVICE_", (uint8_t *)&v6, 0xCu);
    return 0;
  }
  return result;
}

uint64_t sub_10064E030(uint64_t a1)
{
  id v2;
  id v3;
  const char *v4;
  size_t v5;
  _QWORD *v6;
  id v7;
  id v8;
  const char *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  double Current;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  void **v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void *p_p;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  id v41;
  const char *v42;
  size_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  const char *v47;
  _QWORD *v48;
  _QWORD *v49;
  char *v50;
  char *v51;
  char v52;
  char v53;
  int v54;
  _QWORD *v55;
  _QWORD *v56;
  id v57;
  void *v58;
  id v59;
  id v60;
  uint64_t v61;
  void *i;
  const char *v63;
  size_t v64;
  _QWORD *v65;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  void *__p;
  uint64_t v72;
  unsigned __int8 v73;
  int v74;
  _OWORD v75[4];
  void *v76[2];
  __int128 v77;
  __int128 v78;
  _OWORD v79[9];
  uint64_t v80;
  _BYTE v81[128];

  v80 = 0;
  v78 = 0u;
  memset(v79, 0, sizeof(v79));
  *(_OWORD *)v76 = 0u;
  v77 = 0u;
  memset(v75, 0, sizeof(v75));
  sub_100272ADC((uint64_t)v75);
  *(_DWORD *)((char *)v75 + *(_QWORD *)(*(_QWORD *)&v75[0] - 24) + 8) |= 4u;
  v2 = sub_100021770(*(_QWORD *)(a1 + 16));
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v2));
  v4 = (const char *)objc_msgSend(v3, "UTF8String");
  v5 = strlen(v4);
  sub_1002614D8(v75, (uint64_t)v4, v5);

  if (*(_QWORD *)(a1 + 24) && *(_BYTE *)(a1 + 22))
  {
    v6 = sub_1002614D8(v75, (uint64_t)" (", 2);
    v7 = sub_100021770(*(_QWORD *)(a1 + 24));
    v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v7));
    v9 = (const char *)objc_msgSend(v8, "UTF8String");
    v10 = strlen(v9);
    v11 = sub_1002614D8(v6, (uint64_t)v9, v10);
    sub_1002614D8(v11, (uint64_t)")", 1);

  }
  if (*(char *)(a1 + 127) < 0)
  {
    if (!*(_QWORD *)(a1 + 112))
      goto LABEL_22;
  }
  else if (!*(_BYTE *)(a1 + 127))
  {
    goto LABEL_22;
  }
  switch(*(_DWORD *)(a1 + 128))
  {
    case 1:
      v12 = sub_1002614D8(v75, (uint64_t)", ", 2);
      v13 = "Adv.";
      goto LABEL_13;
    case 2:
      v12 = sub_1002614D8(v75, (uint64_t)", ", 2);
      v13 = "GAP";
      v14 = 3;
      break;
    case 3:
      v12 = sub_1002614D8(v75, (uint64_t)", ", 2);
      v13 = "User";
LABEL_13:
      v14 = 4;
      break;
    case 4:
      v12 = sub_1002614D8(v75, (uint64_t)", ", 2);
      v13 = "FindMy";
      v14 = 6;
      break;
    default:
      v12 = sub_1002614D8(v75, (uint64_t)", ", 2);
      v13 = "Unknown";
      v14 = 7;
      break;
  }
  sub_1002614D8(v12, (uint64_t)v13, v14);
  v15 = sub_1002614D8(v75, (uint64_t)"Name: ", 6);
  v16 = sub_1002614D8(v15, (uint64_t)"\"", 1);
  v17 = *(char *)(a1 + 127);
  if (v17 >= 0)
    v18 = a1 + 104;
  else
    v18 = *(_QWORD *)(a1 + 104);
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a1 + 127);
  else
    v19 = *(_QWORD *)(a1 + 112);
  v20 = sub_1002614D8(v16, v18, v19);
  sub_1002614D8(v20, (uint64_t)"\"", 1);
LABEL_22:
  Current = CFAbsoluteTimeGetCurrent();
  if (*(double *)(a1 + 400) != 0.0)
  {
    v22 = sub_1002614D8(v75, (uint64_t)", LastSeen: ", 12);
    *(_QWORD *)((char *)v22 + *(_QWORD *)(*v22 - 24) + 16) = 2;
    v23 = (_QWORD *)std::ostream::operator<<(Current - *(double *)(a1 + 400));
    sub_1002614D8(v23, (uint64_t)"s ago", 5);
  }
  v74 = 0;
  sub_10011344C(&v74, 0);
  if (*(_DWORD *)(a1 + 140))
  {
    v24 = sub_1002614D8(v75, (uint64_t)", LastConn: ", 12);
    *(_QWORD *)((char *)v24 + *(_QWORD *)(*v24 - 24) + 16) = 2;
    v25 = (_QWORD *)std::ostream::operator<<(v24, (v74 - *(_DWORD *)(a1 + 140)));
    sub_1002614D8(v25, (uint64_t)"s ago", 5);
  }
  if (*(_BYTE *)(a1 + 98))
    sub_1002614D8(v75, (uint64_t)", Dual-mode", 11);
  if (*(_BYTE *)(a1 + 160))
    sub_1002614D8(v75, (uint64_t)", Paired", 8);
  if (*(_BYTE *)(a1 + 236))
    sub_1002614D8(v75, (uint64_t)", AutoReconnectEnabled", 22);
  if (*(char *)(a1 + 231) < 0)
  {
    if (!*(_QWORD *)(a1 + 216))
      goto LABEL_43;
  }
  else if (!*(_BYTE *)(a1 + 231))
  {
    goto LABEL_43;
  }
  v26 = sub_1002614D8(v75, (uint64_t)", iCloud: ", 10);
  v27 = *(char *)(a1 + 231);
  if (v27 >= 0)
    v28 = a1 + 208;
  else
    v28 = *(_QWORD *)(a1 + 208);
  if (v27 >= 0)
    v29 = *(unsigned __int8 *)(a1 + 231);
  else
    v29 = *(_QWORD *)(a1 + 216);
  sub_1002614D8(v26, v28, v29);
LABEL_43:
  if (*(_BYTE *)(a1 + 354))
  {
    v30 = sub_1002614D8(v75, (uint64_t)", CoexPriority: ", 16);
    std::ostream::operator<<(v30, *(unsigned __int8 *)(a1 + 354));
  }
  if (*(_BYTE *)(a1 + 234))
    sub_1002614D8(v75, (uint64_t)", LE GATT Disabled", 18);
  if (*(_QWORD *)(a1 + 56))
  {
    v31 = sub_1002614D8(v75, (uint64_t)", connectedAddress:", 19);
    sub_1000217F4(*(_QWORD *)(a1 + 56));
    v32 = (v73 & 0x80u) == 0 ? &__p : (void **)__p;
    v33 = (v73 & 0x80u) == 0 ? v73 : v72;
    v34 = sub_1002614D8(v31, (uint64_t)v32, v33);
    sub_1002614D8(v34, (uint64_t)" ", 1);
    if ((char)v73 < 0)
      operator delete(__p);
  }
  v35 = sub_1002614D8(v75, (uint64_t)", ", 2);
  sub_10064A82C((id *)a1);
  if ((v73 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v73 & 0x80u) == 0)
    v37 = v73;
  else
    v37 = v72;
  sub_1002614D8(v35, (uint64_t)p_p, v37);
  if ((char)v73 < 0)
    operator delete(__p);
  if (*(_BYTE *)(a1 + 528))
  {
    v38 = sub_1002614D8(v75, (uint64_t)", Cached controller version:", 28);
    LOBYTE(__p) = *(_BYTE *)(a1 + 528);
    v39 = sub_1002614D8(v38, (uint64_t)&__p, 1);
    v40 = sub_1002614D8(v39, (uint64_t)" data:", 6);
    v41 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), *(_QWORD *)(a1 + 520))));
    v42 = (const char *)objc_msgSend(v41, "UTF8String");
    v43 = strlen(v42);
    v44 = sub_1002614D8(v40, (uint64_t)v42, v43);
    v45 = sub_1002614D8(v44, (uint64_t)" origin:", 8);
    std::ostream::operator<<(v45, *(unsigned int *)(a1 + 532));

  }
  v46 = sub_1002614D8(v75, (uint64_t)", EstablishedFastLeConnection:", 30);
  if (*(_BYTE *)(a1 + 165))
    v47 = "Y";
  else
    v47 = "N";
  sub_1002614D8(v46, (uint64_t)v47, 1);
  v48 = sub_1002614D8(v75, (uint64_t)", linkReadyDuration:", 20);
  v49 = (_QWORD *)std::ostream::operator<<(v48, *(unsigned int *)(a1 + 168));
  sub_1002614D8(v49, (uint64_t)"ms", 2);
  if (*(_BYTE *)(a1 + 608))
    sub_1002614D8(v75, (uint64_t)", ProxPayloadDecrypted", 22);
  v50 = *(char **)(a1 + 584);
  v51 = *(char **)(a1 + 592);
  if (v50 != v51)
  {
    v52 = -127;
    do
    {
      v54 = *v50++;
      v53 = v54;
      if (v52 <= v54)
        v52 = v53;
    }
    while (v50 != v51);
    if (v52 >= -126)
    {
      v55 = sub_1002614D8(v75, (uint64_t)", lastRSSIValue:", 16);
      v56 = (_QWORD *)std::ostream::operator<<(v55, v52);
      sub_1002614D8(v56, (uint64_t)"dBm", 3);
    }
  }
  v57 = sub_10064E8D4(a1);
  v58 = (void *)objc_claimAutoreleasedReturnValue(v57);
  if (objc_msgSend(v58, "count"))
  {
    sub_1002614D8(v75, (uint64_t)", customProps:[", 15);
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v59 = v58;
    v60 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v67, v81, 16);
    if (v60)
    {
      v61 = *(_QWORD *)v68;
      do
      {
        for (i = 0; i != v60; i = (char *)i + 1)
        {
          if (*(_QWORD *)v68 != v61)
            objc_enumerationMutation(v59);
          v63 = (const char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v67 + 1) + 8 * (_QWORD)i)), "UTF8String");
          v64 = strlen(v63);
          v65 = sub_1002614D8(v75, (uint64_t)v63, v64);
          sub_1002614D8(v65, (uint64_t)" ", 1);
        }
        v60 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v67, v81, 16);
      }
      while (v60);
    }

    sub_1002614D8(v75, (uint64_t)"]", 1);
  }
  std::stringbuf::str((char *)v75 + 8);

  if (SHIBYTE(v77) < 0)
    operator delete(v76[1]);
  std::streambuf::~streambuf((char *)v75 + 8);
  return std::ios::~ios(v79);
}

void sub_10064E838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;

  sub_100272CFC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

id sub_10064E8D4(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = *(void **)(a1 + 512);
  if (v1)
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "allKeys"));
  else
    v2 = &__NSArray0__struct;
  return v2;
}

id sub_10064E900(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a2;
  if (!v3)
  {
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      sub_100714D50();
    goto LABEL_6;
  }
  v4 = *(void **)(a1 + 512);
  if (!v4)
  {
LABEL_6:
    v5 = 0;
    goto LABEL_7;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", v3));
LABEL_7:

  return v5;
}

void sub_10064E978(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10064E988(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v9;
  NSMutableDictionary *v10;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  id v18;
  id v19;
  void *v20;
  NSObject *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  unsigned int v26;
  void *v27;
  void **v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  void *v31;
  id v32;
  unint64_t v33;
  void *v34[2];
  char v35;
  void *__p[2];
  char v37;
  uint8_t buf[4];
  id v39;
  __int16 v40;
  int v41;
  __int16 v42;
  _BOOL4 v43;
  __int16 v44;
  int v45;
  __int16 v46;
  _BOOL4 v47;
  __int16 v48;
  id v49;

  v5 = a2;
  v6 = a3;
  if (!v5 || (unint64_t)objc_msgSend(v5, "length") >= 0x401)
  {
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      sub_100714D50();
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  if ((unint64_t)objc_msgSend(v6, "length") >= 0x401)
  {
    v9 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      sub_100714D7C((uint64_t)v5, (uint64_t)v6, v9);
    goto LABEL_5;
  }
  if (!*(_QWORD *)(a1 + 512))
  {
    v10 = objc_opt_new(NSMutableDictionary);
    v11 = *(void **)(a1 + 512);
    *(_QWORD *)(a1 + 512) = v10;

  }
  if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit")
    && objc_msgSend(v5, "isEqualToString:", CFSTR("ASK_DISPLAY_NAME")))
  {
    sub_100091AE8(__p, "DA_ASK_RETAIN_DEVICE");
    v12 = sub_10001F2AC(a1 + 176, (const void **)__p);
    if (v37 < 0)
      operator delete(__p[0]);
    v13 = *(unsigned __int8 *)(a1 + 160);
    sub_100091AE8(v34, "_CTKD_");
    v14 = sub_10001F2AC(a1 + 176, (const void **)v34);
    v15 = a1 + 184;
    if (v13)
      v16 = v15 == v14;
    else
      v16 = 1;
    v17 = !v16;
    if (v35 < 0)
      operator delete(v34[0]);
    v18 = v6;
    v19 = sub_10064E900(a1, CFSTR("ASK_LINKED_RADIO_ADDRESS"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    v21 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138413570;
      v39 = v5;
      v40 = 1024;
      v41 = v17;
      v42 = 1024;
      v43 = v15 != v12;
      v44 = 1024;
      v45 = v13;
      v46 = 1024;
      v47 = v20 != 0;
      v48 = 2112;
      v49 = v18;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "setCustomProperty %@ ctkd:%d ASK:%d isPaired:%d isTransportLinked:%d askName:%@", buf, 0x2Eu);
    }
    if (v20)
      v22 = 1;
    else
      v22 = v17;
    if (v22 != 1 || v15 == v12)
      goto LABEL_41;
    if (v17)
    {
      v23 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      if (!v20)
      {
        if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
          sub_100714E58();
        goto LABEL_39;
      }
      v23 = sub_100649C7C(v20);
    }
    if (v23)
    {
      v24 = sub_10006BBEC();
      v28 = _NSConcreteStackBlock;
      v29 = 3221225472;
      v30 = sub_10064EDC0;
      v31 = &unk_100918868;
      v33 = v23;
      v32 = v18;
      sub_100041A34(v24, &v28);

LABEL_41:
      goto LABEL_42;
    }
LABEL_39:
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      sub_100714DF4();
    goto LABEL_41;
  }
LABEL_42:
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 512), "objectForKey:", v5, v28, v29, v30, v31));
  v26 = objc_msgSend(v25, "isEqualToString:", v6);
  if ((v26 & 1) == 0)
  {
    v27 = *(void **)(a1 + 512);
    if (v6)
      objc_msgSend(v27, "setObject:forKey:", v6, v5);
    else
      objc_msgSend(v27, "removeObjectForKey:", v5);
  }

  v7 = v26 ^ 1;
LABEL_6:

  return v7;
}

void sub_10064ED38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_10064EDC0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char *v5;
  NSObject *v6;
  void *__p[2];
  uint64_t v8;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093E158);
  v2 = sub_10006D488((uint64_t)off_1009778E0, *(_QWORD *)(a1 + 40), 1);
  if (v2)
  {
    v3 = v2;
    __p[0] = 0;
    __p[1] = 0;
    v8 = 0;
    v4 = *(void **)(a1 + 32);
    if (v4 && objc_msgSend(v4, "length"))
      v5 = (char *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String");
    else
      v5 = "";
    sub_100091AE8(__p, v5);
    sub_100440D9C(v3, (uint64_t)__p, 0);
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      sub_100714E84((uint64_t *)(a1 + 40), v6);
  }
}

void sub_10064EEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10064EEDC(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7[3];
  uint64_t v8;

  v8 = 0;
  v5 = (uint64_t **)sub_10001F574((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    memset(v7, 0, sizeof(v7));
    sub_1002F62A8((uint64_t)a1, a3, v7);
    sub_100004078(a1, v8, v5, v7[0]);
    return v7[0];
  }
  return result;
}

void sub_10064EF64(id a1)
{
  operator new();
}

void sub_10064EFA4()
{
  operator delete();
}

void sub_10064EFC8(id a1)
{
  operator new();
}

void sub_10064F008()
{
  operator delete();
}

void sub_10064F02C(id a1)
{
  operator new();
}

void sub_10064F06C()
{
  operator delete();
}

void sub_10064F12C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10064F17C(id a1)
{
  ContactTracingDaemonBridge *v1;
  void *v2;

  v1 = objc_alloc_init(ContactTracingDaemonBridge);
  v2 = (void *)qword_100993F40;
  qword_100993F40 = (uint64_t)v1;

}

void sub_10064F274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10064F40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  if (a10)
    sub_100056AAC(a10);
  _Unwind_Resume(exception_object);
}

void sub_10064F4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10064F588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_10064F600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10064F70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10064F870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10064F8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10064F8D8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v5 = a2;
  pthread_mutex_lock(&stru_10097B8A8);
  v3 = objc_msgSend(v5, "copy");
  v4 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;

  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_10093E280);
  sub_1002B4110((uint64_t)off_100978128 + 80, a1);
  pthread_mutex_unlock(&stru_10097B8A8);

}

void sub_10064F970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_10064F998(uint64_t a1)
{
  void *v2;

  pthread_mutex_lock(&stru_10097B8A8);
  v2 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;

  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_10093E280);
  sub_100069060((uint64_t)off_100978128 + 80, a1);
  return pthread_mutex_unlock(&stru_10097B8A8);
}

void sub_10064FA7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10064FBA8(uint64_t a1, void *a2)
{
  id v4;

  v4 = a2;
  pthread_mutex_lock(&stru_10097B8A8);
  objc_storeStrong((id *)(a1 + 8), a2);
  pthread_mutex_unlock(&stru_10097B8A8);

}

void sub_10064FC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_10064FC44(uint64_t a1)
{
  NSObject *v2;
  id v3;

  pthread_mutex_lock(&stru_10097B8A8);
  v2 = *(id *)(a1 + 8);
  if (v2)
  {
    v3 = objc_retainBlock(*(id *)(a1 + 16));
    if (v3)
      dispatch_async(v2, v3);

  }
  return pthread_mutex_unlock(&stru_10097B8A8);
}

void sub_10064FCA8(id a1)
{
  operator new();
}

void sub_10064FCE8()
{
  operator delete();
}

void sub_10064FD0C(id a1)
{
  operator new();
}

void sub_10064FD4C()
{
  operator delete();
}

void sub_10064FD70(id a1)
{
  operator new();
}

void sub_10064FDB0()
{
  operator delete();
}

void sub_10064FDD4(id a1)
{
  operator new();
}

void sub_10064FE14()
{
  operator delete();
}

uint64_t sub_10064FE38(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)sub_10048D2F0(a1, "GATTService", 0x100000);
  *v2 = &off_10093E2B0;
  v2[41] = 0;
  if (qword_10097B1A0 != -1)
    dispatch_once(&qword_10097B1A0, &stru_10093E3A0);
  v3 = qword_10097B198;
  *(_QWORD *)(a1 + 328) = qword_10097B198;
  sub_10048D5B0(a1, v3);
  return a1;
}

void sub_10064FEB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10048D3E0(v1);
  _Unwind_Resume(a1);
}

void sub_10064FED0(uint64_t a1)
{
  sub_10048D3E0(a1);
  operator delete();
}

uint64_t sub_10064FEF4(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "GATTService start", v4, 2u);
  }
  return sub_10048D760(a1);
}

uint64_t sub_10064FF64(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "GATTService stop", v4, 2u);
  }
  return sub_10048DA54(a1);
}

BOOL sub_10064FFD4(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  if (qword_10097AC28 != -1)
    dispatch_once(&qword_10097AC28, &stru_10093E3C0);
  if (!sub_1004844F0(qword_10097AC20, a2))
    return sub_10048EA9C(a1, (uint64_t)a2);
  v4 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8((uint64_t)a2, __p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Rejecting GATT connection because device %{public}s is already connected over GATT", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

uint64_t sub_10065012C(uint64_t a1, uint64_t a2)
{
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;
  unsigned int v7;
  __int128 v9;
  int v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[15];

  v12 = xmmword_1007412F0;
  memset(v14, 0, sizeof(v14));
  v11 = 0;
  v10 = 0;
  if (sub_100444790(a2))
  {
    if (sub_100442444(a2, &v12, 4u))
      v4 = 4;
    else
      v4 = 0;
  }
  else
  {
    v5 = sub_100452168(a2, v14, &v11);
    if (v11)
      v6 = v5;
    else
      v6 = 0;
    if (v6)
      v4 = 4 * (sub_10018F848((unsigned __int8 *)v14, 6145, &v10) == 0);
    else
      v4 = 0;
  }
  if (sub_100444790(a2) && sub_100442118(a2, 23))
    v4 = 4;
  v7 = *(_DWORD *)(a1 + 32);
  v13 = 0;
  sub_10004AD30((uint64_t)&v13);
  *(_QWORD *)&v9 = (int)v13;
  *((_QWORD *)&v9 + 1) = SWORD2(v13);
  return sub_1004415B0(a2, v7, v4, &v9, 0);
}

uint64_t sub_100650298(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;
  int v6;
  char v7;
  __int128 v8;
  _OWORD v9[15];

  v8 = xmmword_1007412F0;
  memset(v9, 0, sizeof(v9));
  v7 = 0;
  v6 = 0;
  *a3 = 0;
  if (sub_100444790(a2))
  {
    result = sub_100442444(a2, &v8, 4u);
    if ((result & 1) == 0)
      return result;
LABEL_10:
    *a3 = 1;
    return result;
  }
  if (sub_100452168(a2, v9, &v7) && v7 && !sub_10018F848((unsigned __int8 *)v9, 6145, &v6))
    *a3 = 1;
  result = sub_100444790(a2);
  if ((_DWORD)result)
  {
    result = sub_100442118(a2, 23);
    if ((_DWORD)result)
      goto LABEL_10;
  }
  return result;
}

void sub_1006503B4(id a1)
{
  operator new();
}

void sub_1006503F4()
{
  operator delete();
}

void sub_100650418(id a1)
{
  operator new();
}

void sub_100650458()
{
  operator delete();
}

uint64_t sub_10065047C(uint64_t a1, int a2, int a3, int a4)
{
  id *v8;
  __CFString *v9;
  __CFDictionary *Mutable;
  IOReturn v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  int v15;
  CFAbsoluteTime Current;
  int v17;
  __CFString *v19;
  int v20[4];
  CFAbsoluteTime v21;
  IOReturn v22;
  char v23;
  __int16 v24;
  char v25;
  int v26;
  int v27;
  int v28;
  uint8_t buf[4];
  __CFString *v30;
  __int16 v31;
  IOReturn v32;
  __int16 v33;
  const char *v34;

  *(_QWORD *)a1 = &off_10093E3F0;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (id *)(a1 + 8);
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_10093E408);
  if ((a3 - 1) > 0xA)
  {
    v9 = CFSTR("com.apple.bluetooth.LeBroadcaster.AdvertisingConfigAssertion");
    if (!a4)
      goto LABEL_8;
    goto LABEL_7;
  }
  v9 = off_10093E448[a3 - 1];
  if (a4)
LABEL_7:
    v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.ForceWake"), v9));
LABEL_8:
  objc_storeStrong(v8, v9);
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a2;
  *(_BYTE *)(a1 + 24) = a4;
  if (!a4)
  {
    v11 = IOPMAssertionCreateWithName(CFSTR("PreventUserIdleSystemSleep"), 0xFFu, v9, (IOPMAssertionID *)(a1 + 28));
    if (!v11)
      goto LABEL_21;
    goto LABEL_17;
  }
  v28 = 1;
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(Mutable, CFSTR("AssertName"), v9);
  v11 = IOPMAssertionDeclareSystemActivityWithProperties(Mutable, a1 + 28, &v28);
  v12 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412802;
    if (v28 == 1)
      v13 = "kIOPMSystemSleepNotReverted";
    else
      v13 = "kIOPMSystemSleepReverted";
    v30 = v9;
    v31 = 1024;
    v32 = v11;
    v33 = 2080;
    v34 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "IOPMAssertionDeclareSystemActivityWithProperties %@ returned %d systemState=%s ", buf, 0x1Cu);
  }
  CFRelease(Mutable);
  if (v11)
  {
LABEL_17:
    v14 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      v19 = (__CFString *)-[__CFString UTF8String](objc_retainAutorelease(v9), "UTF8String");
      *(_DWORD *)buf = 136315394;
      v30 = v19;
      v31 = 1024;
      v32 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to take assertionId for name: %s, return value was: %d", buf, 0x12u);
      v14 = qword_1009997E8;
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      sub_100714F34((uint64_t)-[__CFString UTF8String](objc_retainAutorelease(v9), "UTF8String"), buf, v11, v14);
  }
LABEL_21:
  v15 = *(_DWORD *)(a1 + 20);
  Current = CFAbsoluteTimeGetCurrent();
  v17 = *(_DWORD *)(a1 + 28);
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_10093E408);
  sub_10047FE7C((uint64_t)off_100978128);
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_10093E408);
  v20[0] = v15;
  v20[1] = 0;
  v20[2] = a3;
  v20[3] = 0;
  v21 = Current;
  v22 = v11;
  v23 = a4;
  v24 = 0;
  v25 = 0;
  v26 = v17;
  v27 = 0;
  sub_10047FC44((uint64_t)off_100978128, v20);

  return a1;
}

void sub_1006507DC(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10065081C(uint64_t a1)
{
  int *v2;
  IOReturn v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  CFAbsoluteTime Current;
  char v9;
  int v10;
  int v12;
  int v13[4];
  CFAbsoluteTime v14;
  IOReturn v15;
  char v16;
  __int16 v17;
  char v18;
  int v19;
  int v20;
  void *__p[2];
  char v22;
  uint8_t buf[8];
  __int16 v24;
  IOReturn v25;
  char v26;

  *(_QWORD *)a1 = &off_10093E3F0;
  v2 = (int *)(a1 + 28);
  v3 = IOPMAssertionRelease(*(_DWORD *)(a1 + 28));
  if (v3)
  {
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    {
      v12 = *v2;
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v12;
      v24 = 1024;
      v25 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to release assertionId: %d, return value was %d", buf, 0xEu);
      v4 = qword_1009997E8;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      sub_100714F88(v2, v3, v4);
    if (qword_10097AA70 != -1)
      dispatch_once(&qword_10097AA70, &stru_10093E428);
    v5 = qword_10097AA68;
    sub_100091AE8(buf, "Assertion");
    sub_100091AE8(__p, "FailedToReleaseAssertion");
    sub_10047C59C(0.0, v5, (uint64_t *)buf, (uint64_t *)__p);
    if (v22 < 0)
      operator delete(__p[0]);
    if (v26 < 0)
      operator delete(*(void **)buf);
  }
  v6 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 20);
  Current = CFAbsoluteTimeGetCurrent();
  v9 = *(_BYTE *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 28);
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_10093E408);
  v13[0] = v7;
  v13[1] = 1;
  v13[2] = v6;
  v13[3] = 0;
  v14 = Current;
  v15 = v3;
  v16 = v9;
  v17 = 0;
  v18 = 0;
  v19 = v10;
  v20 = 0;
  sub_10047FC44((uint64_t)off_100978128, v13);

  return a1;
}

void sub_100650A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);

  _Unwind_Resume(a1);
}

void sub_100650A88(uint64_t a1)
{
  sub_10065081C(a1);
  operator delete();
}

id sub_100650AAC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "UTF8String");
}

void sub_100650AB4(id a1)
{
  operator new();
}

void sub_100650AF4()
{
  operator delete();
}

void sub_100650B18(id a1)
{
  operator new();
}

void sub_100650B58(uint64_t a1)
{
  *(_QWORD *)a1 = off_10093E4B0;
  *(_QWORD *)(a1 + 8) = off_10093E558;
  *(_QWORD *)(a1 + 16) = off_10093E578;
  *(_QWORD *)(a1 + 24) = off_10093E5A0;
  *(_QWORD *)(a1 + 32) = &off_10093E5D0;
  *(_QWORD *)(a1 + 40) = &off_10093E5E8;
  *(_QWORD *)(a1 + 48) = &off_10093E600;
  *(_QWORD *)(a1 + 56) = &off_10093E618;
  *(_QWORD *)(a1 + 64) = &off_10093E630;
  *(_QWORD *)(a1 + 72) = 0;
  sub_1000160D0(a1 + 88);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_DWORD *)(a1 + 152) = 500;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 156) = 0;
  *(_BYTE *)(a1 + 164) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 200;
  *(_QWORD *)(a1 + 208) = a1 + 200;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 256) = a1 + 256;
  *(_QWORD *)(a1 + 264) = a1 + 256;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  operator new();
}

void sub_1006513DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void **v19;
  void *v21;

  __cxa_guard_abort(&qword_100994080);

  v21 = *(void **)(v14 + 296);
  if (v21)
  {
    *(_QWORD *)(v14 + 304) = v21;
    operator delete(v21);
  }

  sub_100668FCC(v19);
  sub_10001A82C(v18, *(_QWORD **)(v14 + 232));
  sub_10002074C(v17);
  sub_10001A82C(v16, *(_QWORD **)(v14 + 184));

  sub_100069BDC(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_10065156C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v5 = a2;
  v6 = a3;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 88);
  v7 = sub_1000306B0(a1, v5);
  v8 = (uint64_t)v7;
  if (v7)
  {
    objc_msgSend(*(id *)(a1 + 280), "addObject:", v5);
    LODWORD(v7) = sub_10064ACF8(v8, v6);
  }
  if (v8)
    v9 = v7;
  else
    v9 = 3;
  sub_100034234((uint64_t)v11);

  return v9;
}

void sub_10065160C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_100651630(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[2];
  _BYTE v14[128];

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 88);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v3 = *(id *)(a1 + 280);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v14, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v10;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v3);
        v7 = *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)i);
        if (*((_QWORD *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v7, (_QWORD)v9) + 8))
          objc_msgSend(v2, "addObject:", v7);
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v14, 16);
    }
    while (v4);
  }

  sub_100034234((uint64_t)v13);
  return v2;
}

void sub_100651770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a10);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1006517A8(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[2];

  v3 = a2;
  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 88);
  v4 = objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v3);
  if (v4)
    sub_100651824((uint64_t)v4);
  sub_100034234((uint64_t)v5);

}

void sub_100651804(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100651824(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  if (*(_QWORD *)(a1 + 88) && *(_QWORD *)(a1 + 80))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 72), "objectForKeyedSubscript:"));
    v7 = objc_msgSend(v2, "mutableCopy");

    objc_msgSend(v7, "removeObject:", *(_QWORD *)(a1 + 88));
    v3 = objc_msgSend(v7, "count");
    v4 = *(void **)(a1 + 72);
    if (v3)
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v7, *(_QWORD *)(a1 + 80));
    else
      objc_msgSend(v4, "removeObjectForKey:", *(_QWORD *)(a1 + 80));
    v5 = *(void **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;

    v6 = *(void **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;

  }
}

void sub_1006518D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1006518F8(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  NSObject *v19;
  _QWORD v21[2];
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  id v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  id v29;
  uint64_t v30;
  __int16 v31;

  v3 = a2;
  if (qword_100994090 != -1)
    dispatch_once(&qword_100994090, &stru_10093E680);
  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  v5 = (uint64_t)v4;
  if (v4)
  {
    v6 = (id)v4[8];
    if (v6)
    {
      if (*(_BYTE *)(v5 + 164))
        v7 = *(_QWORD *)(v5 + 56);
      else
        v7 = 0;
      v9 = sub_100649FD0(v7);
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      v11 = *(id *)(v5 + 72);
      v12 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_INFO))
      {
        v13 = CUPrintNSObjectOneLine(v11);
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        *(_DWORD *)buf = 141558275;
        v23 = 1752392040;
        v24 = 2113;
        v25 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "getFindMyDeviceLTK findMyEncryptionDictionary:%{private, mask.hash}@", buf, 0x16u);

      }
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v10));
      if (objc_msgSend(v15, "count"))
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectAtIndexedSubscript:", 0));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "subdataWithRange:", 0, 16));
        v8 = objc_msgSend(v17, "mutableCopy");

        if (byte_100994088)
        {
          v31 = 0;
          v30 = 0;
          objc_msgSend(v8, "replaceBytesInRange:withBytes:", 1, 10, &v30);
          v18 = qword_100999810;
          if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 141558275;
            v23 = 1752392040;
            v24 = 2113;
            v25 = v8;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "BAD LTK:%{private, mask.hash}@", buf, 0x16u);
          }
        }
        v19 = qword_100999810;
        if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 141558787;
          v23 = 1752392040;
          v24 = 2113;
          v25 = v10;
          v26 = 2160;
          v27 = 1752392040;
          v28 = 2113;
          v29 = v8;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "getFindMyDeviceLTK sessionKey:%{private, mask.hash}@ --> %{private, mask.hash}@", buf, 0x2Au);
        }
        sub_100651D38(v5, v10, v8);
      }
      else
      {
        v8 = 0;
      }

    }
    else
    {
      v8 = 0;
    }

  }
  else
  {
    v8 = 0;
  }
  sub_100034234((uint64_t)v21);

  return v8;
}

void sub_100651C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100651C7C(id a1)
{
  uint64_t v1;
  void *__p[2];
  char v3;
  void *v4[2];
  char v5;

  v1 = sub_100027F68();
  sub_100091AE8(v4, "FindMy");
  sub_100091AE8(__p, "ForceCorruptLTK");
  (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v1 + 72))(v1, v4, __p, &byte_100994088);
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
}

void sub_100651D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_100651D38(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  id v7;

  v5 = a2;
  objc_storeStrong((id *)(a1 + 88), a3);
  v7 = a3;
  v6 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v5;

}

void sub_100651D94(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100651E44;
  v6[3] = &unk_100918868;
  v8 = a1;
  v5 = v3;
  v7 = v5;
  sub_100041A34(v4, v6);

}

void sub_100651E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_100651E44(uint64_t a1)
{
  id v2;
  void *v3;
  __int128 v4;
  _QWORD *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  _BOOL4 v9;
  void *v10;
  BOOL v11;
  void *v12;
  void *v13;
  BOOL v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  unint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *j;
  unint64_t v26;
  NSObject *v27;
  NSObject *v28;
  void *v29;
  unint64_t v30;
  NSObject *v31;
  void *v32;
  _BYTE *v33;
  id v34;
  void *k;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  _QWORD *v43;
  id v44;
  void *v45;
  id v46;
  void *v47;
  unsigned __int8 v48;
  NSObject *v49;
  id v50;
  id v51;
  _BYTE *v52;
  id v53;
  void *v54;
  id *v55;
  id v56;
  void *v57;
  id v58;
  unsigned __int8 v59;
  NSObject *v60;
  id v61;
  id v62;
  _BYTE *v63;
  id v64;
  NSMutableSet *v65;
  id v66;
  uint64_t v67;
  void *v68;
  void *v69;
  NSObject *v70;
  id v71;
  void *v72;
  int v73;
  NSObject *v74;
  id v75;
  void *v76;
  id v77;
  NSObject *v78;
  id v79;
  void *v80;
  id v81;
  id v82;
  void *v83;
  void *v84;
  id v85;
  id v86;
  uint64_t v87;
  void *v88;
  void *v89;
  NSObject *v90;
  __int128 v91;
  id v92;
  id obj;
  uint64_t v94;
  id v95;
  NSMutableSet *v96;
  void *i;
  void *v98;
  NSMutableSet *v99;
  NSMutableSet *v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  const unsigned __int8 *v107[3];
  void *v108[2];
  char v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  _OWORD v118[4];
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  uint8_t v123;
  _BYTE v124[15];
  uint8_t v125;
  _BYTE v126[15];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t *v131;
  _QWORD *v132;
  uint64_t v133;
  _BYTE v134[128];
  _BYTE v135[128];
  _BYTE v136[128];
  _BYTE __p[12];
  __int16 v138;
  _BYTE *v139;
  char v140;
  _BYTE buf[22];
  __int16 v142;
  _BYTE *v143;
  _BYTE v144[128];
  unsigned __int8 v145[128];
  unsigned __int8 uu[8];
  uint64_t v147;
  _BYTE v148[128];

  v102 = *(_QWORD *)(a1 + 40);
  v2 = sub_100651630(v102);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v92 = objc_msgSend(v3, "mutableCopy");

  v133 = 0;
  v132 = 0;
  v131 = (uint64_t *)&v132;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  obj = *(id *)(a1 + 32);
  v95 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v127, v148, 16);
  if (v95)
  {
    v5 = (_QWORD *)(v102 + 184);
    v94 = *(_QWORD *)v128;
    *(_QWORD *)&v4 = 141558531;
    v91 = v4;
    do
    {
      for (i = 0; i != v95; i = (char *)i + 1)
      {
        if (*(_QWORD *)v128 != v94)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v127 + 1) + 8 * (_QWORD)i);
        v7 = qword_100999810;
        if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 141558275;
          *(_QWORD *)&buf[4] = 1752392040;
          *(_WORD *)&buf[12] = 2113;
          *(_QWORD *)&buf[14] = v6;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SPOwner peripheral updated %{private, mask.hash}@", buf, 0x16u);
        }
        v98 = v6;
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "longTermKeyMap", v91));
        v9 = objc_msgSend(v8, "count") == 0;

        if (v9)
        {
          v27 = qword_100999810;
          if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
            sub_1007150E4(&v125, v126, v27);
        }
        else
        {
          v96 = objc_opt_new(NSMutableSet);
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "lastConnectedLEMAC"));
          v11 = v10 == 0;

          if (!v11)
          {
            v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "lastConnectedLEMAC"));
            -[NSMutableSet addObject:](v96, "addObject:", v12);

          }
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "longTermKeyMap"));
          v14 = objc_msgSend(v13, "count") == 0;

          if (!v14)
          {
            v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "longTermKeyMap"));
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "allKeys"));
            -[NSMutableSet addObjectsFromArray:](v96, "addObjectsFromArray:", v16);

          }
          if (-[NSMutableSet count](v96, "count"))
          {
            *(_QWORD *)uu = 0;
            v147 = 0;
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "beaconIdentifier"));
            v18 = sub_100652E74(v102, v17);
            v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
            sub_100030BCC(uu, v19);

            if (!uuid_is_null(uu))
              goto LABEL_46;
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "lastConnectedLEMAC"));
            v21 = sub_100649EA8(v20);

            if (v21)
            {
              sub_10003F924(v102, v21, 0, 1u, 0, 0, buf);
              uuid_copy(uu, buf);
            }
            if (uuid_is_null(uu))
            {
              v121 = 0u;
              v122 = 0u;
              v119 = 0u;
              v120 = 0u;
              v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "longTermKeyMap"));
              v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v119, v145, 16);
              if (v23)
              {
                v24 = *(_QWORD *)v120;
                while (2)
                {
                  for (j = 0; j != v23; j = (char *)j + 1)
                  {
                    if (*(_QWORD *)v120 != v24)
                      objc_enumerationMutation(v22);
                    v26 = sub_100649EA8(*(void **)(*((_QWORD *)&v119 + 1) + 8 * (_QWORD)j));
                    *(_QWORD *)&buf[8] = 0;
                    *(_QWORD *)buf = 0;
                    sub_10003F924(v102, v26, 0, 1u, 0, 0, buf);
                    if (!uuid_is_null(buf))
                    {
                      uuid_copy(uu, buf);
                      goto LABEL_32;
                    }
                  }
                  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v119, v145, 16);
                  if (v23)
                    continue;
                  break;
                }
              }
LABEL_32:

            }
            if (uuid_is_null(uu))
            {
              memset(v118, 0, sizeof(v118));
              v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "longTermKeyMap"));
              if (objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", v118, v144, 16))
              {
                v30 = sub_100649EA8(**((void ***)&v118[0] + 1));
                sub_10003F924(v102, v30, 1u, 1u, 0, 0, buf);
                uuid_copy(uu, buf);
              }
              else
              {
                v30 = 0;
              }

            }
            else
            {
              v30 = 0;
            }
            if (uuid_is_null(uu))
            {
              v31 = qword_100999810;
              if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
              {
                v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "beaconIdentifier"));
                sub_10064960C(v30);
                v33 = __p;
                if (v140 < 0)
                  v33 = *(_BYTE **)__p;
                *(_DWORD *)buf = v91;
                *(_QWORD *)&buf[4] = 1752392040;
                *(_WORD *)&buf[12] = 2113;
                *(_QWORD *)&buf[14] = v32;
                v142 = 2082;
                v143 = v33;
                _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Failed to retrieve/create FindMy peripheral %{private, mask.hash}@ with address %{public}s, ignoring this device", buf, 0x20u);
                if (v140 < 0)
                  operator delete(*(void **)__p);

              }
            }
            else
            {
LABEL_46:
              v99 = objc_opt_new(NSMutableSet);
              v116 = 0u;
              v117 = 0u;
              v114 = 0u;
              v115 = 0u;
              v100 = v96;
              v34 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v100, "countByEnumeratingWithState:objects:count:", &v114, v136, 16);
              if (v34)
              {
                v101 = *(_QWORD *)v115;
                do
                {
                  for (k = 0; k != v34; k = (char *)k + 1)
                  {
                    if (*(_QWORD *)v115 != v101)
                      objc_enumerationMutation(v100);
                    v36 = sub_100649EA8(*(void **)(*((_QWORD *)&v114 + 1) + 8 * (_QWORD)k));
                    v37 = v36;
                    v38 = (_QWORD *)*v5;
                    v39 = v102 + 184;
                    if (*v5)
                    {
                      v40 = v102 + 184;
                      do
                      {
                        v41 = v38[4];
                        v42 = v41 >= v36;
                        if (v41 >= v36)
                          v43 = v38;
                        else
                          v43 = v38 + 1;
                        if (v42)
                          v40 = (uint64_t)v38;
                        v38 = (_QWORD *)*v43;
                      }
                      while (*v43);
                      v39 = v102 + 184;
                      if ((_QWORD *)v40 != v5)
                      {
                        v39 = v102 + 184;
                        if (v36 >= *(_QWORD *)(v40 + 32))
                        {
                          v44 = sub_100030DF4(uu);
                          v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
                          v46 = sub_100030DF4((const unsigned __int8 *)(v40 + 40));
                          v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
                          v48 = objc_msgSend(v45, "isEqual:", v47);

                          if ((v48 & 1) == 0)
                          {
                            v49 = qword_100999810;
                            if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
                            {
                              v50 = sub_100030DF4((const unsigned __int8 *)(v40 + 40));
                              v51 = (id)objc_claimAutoreleasedReturnValue(v50);
                              sub_1000217F4(v37);
                              v52 = buf;
                              if (v142 < 0)
                                v52 = *(_BYTE **)buf;
                              *(_DWORD *)__p = 138543618;
                              *(_QWORD *)&__p[4] = v51;
                              v138 = 2082;
                              v139 = v52;
                              _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Previous device %{public}@ with address %{public}s pending removal", __p, 0x16u);
                              if (SHIBYTE(v142) < 0)
                                operator delete(*(void **)buf);

                            }
                            v53 = sub_100030DF4((const unsigned __int8 *)(v40 + 40));
                            v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
                            -[NSMutableSet addObject:](v99, "addObject:", v54);

                          }
                          v39 = v40;
                        }
                      }
                    }
                    if (*(_BYTE *)(v102 + 164))
                    {
                      v55 = (id *)sub_100004C14(*(_QWORD *)(v102 + 248), v37);
                      if (v55)
                      {
                        v56 = sub_100030DF4(uu);
                        v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
                        v58 = *v55;
                        v59 = objc_msgSend(v57, "isEqual:", v58);

                        if ((v59 & 1) == 0)
                        {
                          v60 = qword_100999810;
                          if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
                          {
                            v61 = sub_100030DF4((const unsigned __int8 *)(v39 + 40));
                            v62 = (id)objc_claimAutoreleasedReturnValue(v61);
                            sub_1000217F4(v37);
                            v63 = buf;
                            if (v142 < 0)
                              v63 = *(_BYTE **)buf;
                            *(_DWORD *)__p = 138543618;
                            *(_QWORD *)&__p[4] = v62;
                            v138 = 2082;
                            v139 = v63;
                            _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Previous device %{public}@ with address %{public}s pending removal", __p, 0x16u);
                            if (SHIBYTE(v142) < 0)
                              operator delete(*(void **)buf);

                          }
                          v64 = *v55;
                          -[NSMutableSet addObject:](v99, "addObject:", v64);

                        }
                      }
                    }
                  }
                  v34 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v100, "countByEnumeratingWithState:objects:count:", &v114, v136, 16);
                }
                while (v34);
              }

              v112 = 0u;
              v113 = 0u;
              v110 = 0u;
              v111 = 0u;
              v65 = v99;
              v66 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v65, "countByEnumeratingWithState:objects:count:", &v110, v135, 16);
              if (v66)
              {
                v67 = *(_QWORD *)v111;
                do
                {
                  v68 = 0;
                  do
                  {
                    if (*(_QWORD *)v111 != v67)
                      objc_enumerationMutation(v65);
                    v69 = *(void **)(*((_QWORD *)&v110 + 1) + 8 * (_QWORD)v68);
                    v70 = qword_100999810;
                    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 138543362;
                      *(_QWORD *)&buf[4] = v69;
                      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "Removing previous device %{public}@ with same address, disconnecting if already connecting/connected", buf, 0xCu);
                    }
                    if (qword_100978170 != -1)
                      dispatch_once(&qword_100978170, &stru_10093E850);
                    sub_1002E4F54((uint64_t)off_100978168, v69, 8u);
                    sub_100653040(v102, v69);
                    v68 = (char *)v68 + 1;
                  }
                  while (v66 != v68);
                  v66 = -[NSMutableSet countByEnumeratingWithState:objects:count:](v65, "countByEnumeratingWithState:objects:count:", &v110, v135, 16);
                }
                while (v66);
              }

              v71 = sub_100030DF4(uu);
              v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
              v73 = sub_10065156C(v102, v72, v98);

              if (v73)
              {
                v74 = qword_100999810;
                if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
                {
                  v82 = sub_100030DF4(uu);
                  v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
                  *(_DWORD *)buf = 138543618;
                  *(_QWORD *)&buf[4] = v83;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v73;
                  _os_log_error_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "Failed to set FindMy info for device %{public}@ with result %d, skipping", buf, 0x12u);

                }
                v75 = sub_100030DF4(uu);
                v76 = (void *)objc_claimAutoreleasedReturnValue(v75);
                sub_100653040(v102, v76);
              }
              else
              {
                v77 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v98, "name")));
                sub_100091AE8(v108, (char *)objc_msgSend(v77, "UTF8String"));
                sub_10065354C(v102, uu, (uint64_t)v108, 4);
                if (v109 < 0)
                  operator delete(v108[0]);

                v78 = qword_100999810;
                if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
                {
                  v79 = sub_100030DF4(uu);
                  v80 = (void *)objc_claimAutoreleasedReturnValue(v79);
                  *(_DWORD *)buf = 138543362;
                  *(_QWORD *)&buf[4] = v80;
                  _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "new addresses for device %{public}@ changed", buf, 0xCu);

                }
                sub_10005682C(&v131, uu, uu);
                v81 = sub_100030DF4(uu);
                v76 = (void *)objc_claimAutoreleasedReturnValue(v81);
                objc_msgSend(v92, "removeObject:", v76);
              }

            }
          }
          else
          {
            v28 = qword_100999810;
            if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
              sub_100715118(&v123, v124, v28);
          }

        }
      }
      v95 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v127, v148, 16);
    }
    while (v95);
  }

  if (v133)
  {
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10093E870);
    v84 = off_1009778A0;
    sub_100669AE0((uint64_t *)v107, (uint64_t)&v131);
    sub_10061CB68((uint64_t)v84, v107);
    sub_10001A82C((uint64_t)v107, (_QWORD *)v107[1]);
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10093E850);
    sub_1002F17EC((uint64_t)off_100978168);
  }
  v105 = 0u;
  v106 = 0u;
  v103 = 0u;
  v104 = 0u;
  v85 = v92;
  v86 = objc_msgSend(v85, "countByEnumeratingWithState:objects:count:", &v103, v134, 16);
  if (v86)
  {
    v87 = *(_QWORD *)v104;
    do
    {
      v88 = 0;
      do
      {
        if (*(_QWORD *)v104 != v87)
          objc_enumerationMutation(v85);
        v89 = *(void **)(*((_QWORD *)&v103 + 1) + 8 * (_QWORD)v88);
        v90 = qword_100999810;
        if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v89;
          _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "removing FindMy %{public}@, disconnecting if already connecting/connected", buf, 0xCu);
        }
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_10093E850);
        sub_1002E4F54((uint64_t)off_100978168, v89, 8u);
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10093E890);
        sub_100653040((uint64_t)off_1009778C0, v89);
        v88 = (char *)v88 + 1;
      }
      while (v86 != v88);
      v86 = objc_msgSend(v85, "countByEnumeratingWithState:objects:count:", &v103, v134, 16);
    }
    while (v86);
  }

  sub_10001A82C((uint64_t)&v131, v132);
}

void sub_100652C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42)
{
  sub_10001A82C((uint64_t)&a41, (_QWORD *)a42);
  sub_10001A82C((uint64_t)&STACK[0x298], (_QWORD *)STACK[0x2A0]);

  _Unwind_Resume(a1);
}

id sub_100652E74(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  id *v9;
  id v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  id v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[2];
  _BYTE v21[128];

  v3 = a2;
  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 88);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v4 = *(id *)(a1 + 280);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v17;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v17 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
        v9 = (id *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v8, (_QWORD)v16);
        if (v9)
        {
          v10 = v9[8];
          v11 = v10;
          if (v10)
          {
            v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "beaconIdentifier"));
            v13 = objc_msgSend(v12, "isEqual:", v3);

            if ((v13 & 1) != 0)
            {
              v14 = v8;

              goto LABEL_14;
            }
          }

        }
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
      if (v5)
        continue;
      break;
    }
  }
  v14 = 0;
LABEL_14:

  sub_100034234((uint64_t)v20);
  return v14;
}

void sub_100652FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100653040(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _BYTE *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  int v9;
  id v10;
  void *v11;
  void *v12;
  unint64_t v13;
  NSObject *v14;
  unsigned __int8 *v15;
  unsigned __int8 *i;
  uint64_t v17;
  NSObject *v18;
  const void *v19;
  int64_t v20;
  char *v21;
  _QWORD v22[4];
  id v23;
  os_unfair_lock_s v24;
  void *v25;
  void *__dst;
  uint64_t v27;
  void *__p[2];
  char v29;
  _QWORD v30[2];
  uint8_t buf[40];
  unsigned __int8 uu2[8];
  uint64_t v33;

  v3 = a2;
  v4 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Clearing all records of device %{public}@", buf, 0xCu);
  }
  v30[0] = 0;
  v30[1] = 0;
  sub_10003415C((uint64_t)v30, a1 + 88);
  v5 = objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v3);
  v6 = (uint64_t)v5;
  if (!v5)
    goto LABEL_34;
  if (v5[164])
  {
    v7 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Device %@ is pending delete but still connected, wait for a complete disconnection", buf, 0xCu);
    }
    *(_BYTE *)(v6 + 488) = 1;
    goto LABEL_34;
  }
  if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
  {
    sub_100091AE8(__p, "DA_ASK_RETAIN_DEVICE");
    v8 = sub_10000628C(a1, v3, (uint64_t)__p);
    v9 = v8;
    if (v29 < 0)
    {
      operator delete(__p[0]);
      if (!v9)
        goto LABEL_20;
    }
    else if (!v8)
    {
      goto LABEL_20;
    }
    v10 = sub_1006591DC(a1, v3, CFSTR("ASK_LINKED_RADIO_ADDRESS"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = v11;
    if (v11)
    {
      v13 = sub_100649C7C(v11);
      v14 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138478083;
        *(_QWORD *)&buf[4] = v12;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "removing classic paired device with address %{private}@ linked with %@", buf, 0x16u);
      }
      if (qword_100978150 != -1)
        dispatch_once(&qword_100978150, &stru_10093E970);
      sub_1005B8674((uint64_t)off_100978148, v13);
      sub_1006592E8(a1, v3, CFSTR("ASK_LINKED_RADIO_ADDRESS"), 0);
    }

  }
LABEL_20:
  objc_msgSend(*(id *)(a1 + 168), "removeObjectForKey:", v3);
  *(_QWORD *)uu2 = 0;
  v33 = 0;
  sub_100030BCC(uu2, v3);
  v15 = (unsigned __int8 *)(a1 + 200);
  for (i = *(unsigned __int8 **)(a1 + 208); i != v15; i = (unsigned __int8 *)*((_QWORD *)i + 1))
  {
    if (!uuid_compare(i + 16, uu2))
    {
      if (i != v15)
      {
        v17 = *(_QWORD *)i;
        *(_QWORD *)(v17 + 8) = *((_QWORD *)i + 1);
        **((_QWORD **)i + 1) = v17;
        --*(_QWORD *)(a1 + 216);
        operator delete(i);
      }
      break;
    }
  }
  objc_msgSend(*(id *)(a1 + 280), "removeObject:", v3);
  *(_QWORD *)buf = *(_QWORD *)(v6 + 24);
  sub_100015ECC(a1 + 176, (unint64_t *)buf);
  *(_QWORD *)buf = *(_QWORD *)(v6 + 16);
  sub_100015ECC(a1 + 176, (unint64_t *)buf);
  sub_10033FD4C(*(_QWORD *)(a1 + 248), v6);
  sub_10064BD38(v6, 0, 0, 0);
  sub_10065CED8(v6, a1 + 256);
  free((void *)v6);
  v18 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Device %@ deleted", buf, 0xCu);
  }
  memset(buf, 0, 32);
  *(_DWORD *)buf = *(_DWORD *)(a1 + 288);
  sub_10001FE6C(&buf[8], a1 + 296);
  v24._os_unfair_lock_opaque = *(_DWORD *)buf;
  __dst = 0;
  v27 = 0;
  v25 = 0;
  v19 = *(const void **)&buf[8];
  v20 = *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8];
  if (*(_QWORD *)&buf[16] != *(_QWORD *)&buf[8])
  {
    sub_1002A3F78(&v25, v20 >> 3);
    v21 = (char *)__dst;
    memmove(__dst, v19, v20);
    __dst = &v21[8 * (v20 >> 3)];
  }
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_10065E28C;
  v22[3] = &unk_10093E780;
  v23 = v3;
  sub_100668ECC(&v24, v22);
  if (v25)
  {
    __dst = v25;
    operator delete(v25);
  }

  if (*(_QWORD *)&buf[8])
  {
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    operator delete(*(void **)&buf[8]);
  }
LABEL_34:
  sub_100034234((uint64_t)v30);

}

void sub_1006534B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;

  sub_100034234((uint64_t)&a24);

  _Unwind_Resume(a1);
}

uint64_t sub_10065354C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  void *v8;
  id v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v17[2];
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  _QWORD v21[2];

  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 88);
  v8 = objc_autoreleasePoolPush();
  v9 = sub_100030DF4(a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = sub_1000306B0(a1, v10);

  if (!v11)
  {
    v12 = 0;
    goto LABEL_17;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10003430C(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v20 = *(_QWORD *)(a3 + 16);
  }
  v13 = sub_10064A27C((uint64_t)v11, (uint64_t)__p, a4, 0);
  v12 = v13;
  if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
    if (!(_DWORD)v13)
      goto LABEL_11;
    goto LABEL_10;
  }
  operator delete(__p[0]);
  if ((_DWORD)v12)
LABEL_10:
    sub_100030BD0(a1, a2);
LABEL_11:
  v14 = sub_100030DF4(a2);
  v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10003430C(v17, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v17 = *(_OWORD *)a3;
    v18 = *(_QWORD *)(a3 + 16);
  }
  sub_10065B14C(a1, v15, (unsigned __int8 *)v17);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);

LABEL_17:
  objc_autoreleasePoolPop(v8);
  sub_100034234((uint64_t)v21);
  return v12;
}

void sub_1006536B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  void *v23;

  sub_100034234((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_100653718(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;
  char v26;
  _BYTE v27[128];

  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10093E8B0);
  sub_10042381C(qword_100977B48 + 8, a1 + 8);
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10093E8D0);
  sub_100695F80((_QWORD *)qword_1009778B0, a1 + 16);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093E8F0);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 24);
  if ((sub_10033F62C(*(_QWORD *)(a1 + 248), a1 + 32) & 1) == 0
    && os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
  {
    sub_100715348();
  }
  sub_10034FCFC();
  v26 = 0;
  v2 = sub_100027F68();
  sub_100091AE8(v24, "Device");
  sub_100091AE8(__p, "wipeIDCache");
  (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v2 + 72))(v2, v24, __p, &v26);
  if (v23 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
    operator delete(v24[0]);
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10093E910);
  v3 = sub_1004B9B48((uint64_t)off_100977B38);
  if (v26)
    v4 = 1;
  else
    v4 = v3;
  if (v4 == 1)
  {
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v5 = *(id *)(a1 + 168);
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v27, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v19 != v7)
            objc_enumerationMutation(v5);
          sub_100653B18(a1, *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i), CFSTR("LeIdentificationHashExist"));
        }
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v27, 16);
      }
      while (v6);
    }

  }
  v9 = sub_1003500B8();
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = v10;
  if (v10)
    objc_msgSend(v10, "setPeripheralsUpdatedCallback:", &stru_10093E6C0);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093E8F0);
  *(_BYTE *)(a1 + 321) = *((_BYTE *)off_100977A50 + 60);
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_10093E930);
  sub_1000B5218((uint64_t)off_100977FA8 + 1872, a1 + 64);
  v12 = sub_100038E50();
  sub_10066905C(v12 + 1128, a1 + 56);
  v13 = sub_100038E50();
  sub_10066934C(v13 + 1088, a1 + 48);
  v14 = sub_100038E50();
  sub_10043B4A8(v14 + 728, a1 + 40);
  v15 = sub_100038E50();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 152))(v15, a1 + 375);
  v16 = sub_100038E50();
  *(_BYTE *)(a1 + 377) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 184))(v16);
  v17 = sub_100038E50();
  *(_BYTE *)(a1 + 376) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 192))(v17);
  *(_WORD *)(a1 + 372) = 0;

}

void sub_100653ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  _Unwind_Resume(a1);
}

BOOL sub_100653B18(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *v7;
  _QWORD *v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  const void *v17;
  int64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  NSObject *v28;
  id v29;
  NSObject *v30;
  id v31;
  _QWORD v32[4];
  id v33;
  os_unfair_lock_s v34;
  void *v35;
  void *__dst;
  uint64_t v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *__p[2];
  char v43;
  void *v44[2];
  char v45;
  _QWORD v46[2];
  uint8_t buf[40];

  v5 = a2;
  v6 = a3;
  v46[0] = 0;
  v46[1] = 0;
  sub_10003415C((uint64_t)v46, a1 + 88);
  v7 = sub_1000306B0(a1, v5);
  v8 = v7;
  if (!v7)
  {
    v16 = 0;
    goto LABEL_35;
  }
  if (!_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit")
    || !objc_msgSend(v6, "isEqualToString:", CFSTR("DA_ASK_RETAIN_DEVICE")))
  {
    goto LABEL_7;
  }
  if (*((_BYTE *)v8 + 160))
  {
    v9 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Ignoring unsetting DA_ASK_RETAIN_DEVICE for LE Paired devices", buf, 2u);
    }
LABEL_7:
    v10 = 0;
    goto LABEL_8;
  }
  v24 = sub_10064E900((uint64_t)v8, CFSTR("ASK_LINKED_RADIO_ADDRESS"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  if (v25)
  {
    sub_100091AE8(v44, (char *)objc_msgSend(objc_retainAutorelease(v6), "UTF8String"));
    v26 = sub_10001F2AC((uint64_t)(v8 + 22), (const void **)v44);
    if (v45 < 0)
      operator delete(v44[0]);
    if (v8 + 23 == (_QWORD *)v26)
    {
      v30 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
      {
        v31 = (id)*v8;
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Device %@ does not have DA_ASK_RETAIN_DEVICE tag", buf, 0xCu);

      }
    }
    else
    {
      v27 = sub_100649C7C(v25);
      v28 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_INFO))
      {
        v29 = (id)*v8;
        *(_DWORD *)buf = 138478083;
        *(_QWORD *)&buf[4] = v25;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Removing classic paired device with address %{private}@ linked with %@", buf, 0x16u);

      }
      if (qword_100978150 != -1)
        dispatch_once(&qword_100978150, &stru_10093E970);
      sub_1005B8674(off_100978148, v27);
      sub_10064E988((uint64_t)v8, CFSTR("ASK_LINKED_RADIO_ADDRESS"), 0);
      sub_10064E988((uint64_t)v8, CFSTR("ASK_RELATED_RADIO_ADDRESS"), 0);
    }
  }

  v10 = 1;
LABEL_8:
  v11 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    sub_100091AE8(__p, (char *)objc_msgSend(objc_retainAutorelease(v6), "UTF8String"));
    v12 = sub_10001F2AC((uint64_t)(v8 + 22), (const void **)__p);
    *(_DWORD *)buf = 138543874;
    *(_QWORD *)&buf[4] = v6;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v5;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = v8 + 23 != (_QWORD *)v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Removing \"%{public}@\" tag from device \"%{public}@\" hasTag:%d", buf, 0x1Cu);
    if (v43 < 0)
      operator delete(__p[0]);
  }
  v13 = objc_retainAutorelease(v6);
  sub_100091AE8(v40, (char *)objc_msgSend(v13, "UTF8String"));
  v14 = sub_10035AE5C((uint64_t **)v8 + 22, (const void **)v40);
  v15 = v14;
  v16 = v14 != 0;
  if (v41 < 0)
  {
    operator delete(v40[0]);
    if (!v15)
      goto LABEL_17;
    goto LABEL_16;
  }
  if (v14)
  {
LABEL_16:
    sub_100030BCC(buf, v5);
    sub_100030BD0(a1, buf);
  }
LABEL_17:
  sub_100034264((uint64_t)v46);
  if ((objc_msgSend(v13, "isEqualToString:", CFSTR("HasBuiltinServices")) & 1) != 0
    || objc_msgSend(v13, "isEqualToString:", CFSTR("DoNotAutoConnect")))
  {
    sub_100655F30(a1, 1);
  }
  if (objc_msgSend(v13, "isEqualToString:", CFSTR("IsAppleWatch")))
  {
    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_10093E8D0);
    sub_10069A7B4(qword_1009778B0, v5);
  }
  if (objc_msgSend(v13, "isEqualToString:", CFSTR("BluetoothTVRemote")))
  {
    sub_100091AE8(v38, "DoNotStopAutoConnecting");
    sub_10035AE5C((uint64_t **)v8 + 22, (const void **)v38);
    if (v39 < 0)
      operator delete(v38[0]);
  }
  memset(buf, 0, 32);
  *(_DWORD *)buf = *(_DWORD *)(a1 + 288);
  sub_10001FE6C(&buf[8], a1 + 296);
  v34._os_unfair_lock_opaque = *(_DWORD *)buf;
  __dst = 0;
  v37 = 0;
  v35 = 0;
  v17 = *(const void **)&buf[8];
  v18 = *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8];
  if (*(_QWORD *)&buf[16] != *(_QWORD *)&buf[8])
  {
    sub_1002A3F78(&v35, v18 >> 3);
    v19 = (char *)__dst;
    memmove(__dst, v17, v18);
    __dst = &v19[8 * (v18 >> 3)];
  }
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_100658B64;
  v32[3] = &unk_10093E780;
  v33 = v5;
  sub_100668ECC(&v34, v32);
  if (v35)
  {
    __dst = v35;
    operator delete(v35);
  }
  if (v10)
    sub_100653040(a1, *v8);

  v7 = *(_QWORD **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    operator delete(*(void **)&buf[8]);
  }
LABEL_35:
  v20 = sub_100005044((uint64_t)v7, v5);
  if (v20)
  {
    v21 = sub_10034D650();
    sub_100091AE8(buf, (char *)objc_msgSend(objc_retainAutorelease(v6), "UTF8String"));
    v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v21 + 800))(v21, v20, buf);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    if (v22)
    {
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(v20, buf);
        sub_1007153B8();
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEBUG))
      {
        sub_10043E5F8(v20, buf);
        sub_100715374();
      }
      v16 = 1;
    }
  }
  sub_100034234((uint64_t)v46);

  return v16;
}

void sub_100654190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  void *v43;
  void *v44;
  void *v45;

  if (a42 < 0)
    operator delete(__p);

  sub_100034234((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_1006542A0(id a1, NSArray *a2)
{
  NSArray *v2;
  NSObject *v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  NSArray *v7;

  v2 = a2;
  v3 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 141558275;
    v5 = 1752392040;
    v6 = 2113;
    v7 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "FindMy update %{private, mask.hash}@", (uint8_t *)&v4, 0x16u);
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093E890);
  sub_100651D94((uint64_t)off_1009778C0, v2);

}

void sub_100654394(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1006543AC(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10093E8F0);
  sub_100069060((uint64_t)off_100977A50 + 64, a1 + 24);
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10093E8D0);
  sub_1006960C4(qword_1009778B0, a1 + 16);
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10093E8B0);
  sub_100069060(qword_100977B48 + 8, a1 + 8);
  v2 = *(const void **)(a1 + 336);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 344);
  if (v3)
    CFRelease(v3);
  sub_100654494(a1);
}

void sub_100654494(uint64_t a1)
{
  const char **v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[5];

  if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit") && *(_QWORD *)(a1 + 72))
  {
    v2 = (const char **)sub_1000419F4();
    if (sub_100475DDC(v2))
    {
      objc_msgSend(*(id *)(a1 + 72), "setEventHandler:", 0);
      objc_msgSend(*(id *)(a1 + 72), "invalidate");
      v3 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;

    }
    else
    {
      v4 = sub_1000419F4();
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      v5[2] = sub_100654978;
      v5[3] = &unk_100917378;
      v5[4] = a1;
      sub_100041A34(v4, v5);
    }
  }
}

void sub_10065454C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  void *v4;
  NSObject *v5;
  _QWORD v6[5];
  uint8_t buf[16];

  if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
  {
    if (*(_QWORD *)(a1 + 72))
    {
      v2 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "LeDeviceManager::registerForDAEvents Already registered", buf, 2u);
      }
    }
    else
    {
      v3 = objc_alloc_init((Class)DASession);
      v4 = *(void **)(a1 + 72);
      *(_QWORD *)(a1 + 72) = v3;

      objc_msgSend(*(id *)(a1 + 72), "setDispatchQueue:", *(_QWORD *)(sub_1000419F4() + 8));
      objc_msgSend(*(id *)(a1 + 72), "setDeviceFlags:", 8);
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      v6[2] = sub_100654694;
      v6[3] = &unk_10092DD10;
      v6[4] = a1;
      objc_msgSend(*(id *)(a1 + 72), "setEventHandler:", v6);
      v5 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "LeDeviceManager::registerForDAEvents registering for deviceAccess events", buf, 2u);
      }
      objc_msgSend(*(id *)(a1 + 72), "activate");
    }
  }
}

void sub_100654694(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  _BOOL4 v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  uint8_t buf[4];
  void *v19;
  __int16 v20;
  void *v21;
  __int16 v22;
  id v23;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    v6 = DAEventTypeToString(objc_msgSend(v3, "eventType"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "error"));
    *(_DWORD *)buf = 138412802;
    v19 = v7;
    v20 = 2112;
    v21 = v8;
    v22 = 2112;
    v23 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "LeDeviceManager ASK eventHandler %@ error %@ event %@", buf, 0x20u);

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "error"));
  v10 = v9 == 0;

  if (v10)
  {
    v11 = objc_msgSend(v3, "eventType");
    if (v11 == (id)10)
    {
      sub_1006548AC(v4, 0);
    }
    else if (v11 == (id)42)
    {
      v12 = objc_opt_class(DADeviceEvent);
      if ((objc_opt_isKindOfClass(v3, v12) & 1) != 0
        || (v13 = objc_opt_class(DAEventDevice), (objc_opt_isKindOfClass(v3, v13) & 1) != 0))
      {
        v14 = v3;
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "device"));
        v17 = v15;
        v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
        sub_1006548AC(v4, v16);

      }
    }
  }

}

void sub_100654860(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1006548AC(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  _QWORD v7[5];

  v6 = a2;
  if ((_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit") & 1) != 0)
  {
    v3 = *(void **)(a1 + 72);
    if (v3)
    {
      if (v6)
        v4 = v6;
      else
        v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "availableDevices"));
      v5 = v4;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_1006549B0;
      v7[3] = &unk_10093E6E0;
      v7[4] = a1;
      objc_msgSend(v4, "enumerateObjectsUsingBlock:", v7, v6);

    }
  }

}

void sub_100654954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_100654978(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(v1 + 72), "setEventHandler:", 0);
  objc_msgSend(*(id *)(v1 + 72), "invalidate");
  v2 = *(void **)(v1 + 72);
  *(_QWORD *)(v1 + 72) = 0;

}

void sub_1006549B0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  int v9;
  NSObject *v10;
  void *p_p;
  void *__p;
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  id v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if ((objc_msgSend(v3, "flags") & 8) != 0)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bluetoothIdentifier"));

    if (v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "bluetoothIdentifier"));
      v7 = objc_msgSend(*(id *)(v4 + 168), "objectForKey:", v6);
      if (v7)
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
        if (v8)
        {
          v9 = sub_10064E988((uint64_t)v7, CFSTR("ASK_DISPLAY_NAME"), v8);
          v10 = qword_100999810;
          if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_INFO))
          {
            sub_10064E030((uint64_t)v7);
            if (v13 >= 0)
              p_p = &__p;
            else
              p_p = __p;
            *(_DWORD *)buf = 67109890;
            v15 = v9;
            v16 = 2112;
            v17 = v3;
            v18 = 2080;
            v19 = p_p;
            v20 = 2112;
            v21 = v8;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "LeDeviceManager::refreshDANames setCustomProperty returned %d for %@ %s %@", buf, 0x26u);
            if (v13 < 0)
              operator delete(__p);
          }
        }

      }
    }
  }

}

void sub_100654B40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100654B7C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100654BDC;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

void sub_100654BDC(uint64_t a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD v9[5];
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_1003500B8();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (v3)
  {
    v4 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("FFFFEEEE-DDDD-CCCC-BBBB-AAAA00000000"));
    v5 = objc_alloc_init((Class)NSArray);
    objc_msgSend(v3, "startSessionForUserIdentifier:bundleId:vendorIdentifierList:completion:", v4, CFSTR("com.apple.bluetoothd"), v5, &stru_10093E700);

    v6 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "FindMy registration completed", buf, 2u);
    }
  }
  *(_BYTE *)(v1 + 321) = 1;
  if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
  {
    v7 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[BTGlobalTCCNames] LeDeviceManager::stackDidStart", buf, 2u);
    }
    v8 = sub_1000419F4();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100654E28;
    v9[3] = &unk_100917378;
    v9[4] = v1;
    sub_100475CEC(v8, 5000, v9);
    sub_10065454C(v1);
  }

}

void sub_100654D60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100654D88(id a1, NSError *a2)
{
  NSObject *v3;
  int v4;
  NSError *v5;

  v3 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 138412290;
    v5 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "startSessionForUserIdentifier returned %@", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t sub_100654E28(uint64_t a1)
{
  return sub_100654E30(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100654E30(uint64_t a1)
{
  double v2;
  unsigned int v3;
  int v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10093E910);
  v2 = *((double *)off_100977B38 + 62);
  if (v2 == 0.0)
  {
    v3 = 0;
    v4 = 9999;
  }
  else
  {
    v4 = (int)((CFAbsoluteTimeGetCurrent() - v2) / 60.0);
    v3 = v4;
  }
  v5 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(unsigned __int8 *)(a1 + 375);
    v7 = *(unsigned __int8 *)(a1 + 321);
    v8 = *(unsigned __int8 *)(a1 + 376);
    v9 = *(unsigned __int8 *)(a1 + 377);
    v10 = *(_DWORD *)(a1 + 368);
    v12[0] = 67110400;
    v12[1] = v6;
    v13 = 1024;
    v14 = v7;
    v15 = 1024;
    v16 = v8;
    v17 = 1024;
    v18 = v9;
    v19 = 1024;
    v20 = v10;
    v21 = 1024;
    v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[BTGlobalTCCNames] LeDeviceManager::startActiveScanIfNeededForGlobalTCCDialog fScreenState:%d fStackStarted:%d fDeviceFirstUnlocked:%d fDeviceLocked:%d fNameSearchActiveScanCounter:%d LastActiveScanTime:%d minutes ago", (uint8_t *)v12, 0x26u);
  }
  if (*(_BYTE *)(a1 + 375)
    && *(_BYTE *)(a1 + 321)
    && *(_BYTE *)(a1 + 376)
    && !*(_BYTE *)(a1 + 377)
    && v3 >= *(unsigned __int16 *)(a1 + 372)
    && !*(_QWORD *)(a1 + 352))
  {
    sub_10066644C(a1);
    ++*(_DWORD *)(a1 + 368);
  }
  if (*(_QWORD *)(a1 + 352) && (!*(_BYTE *)(a1 + 375) || *(_BYTE *)(a1 + 377)))
    sub_1006666D8(a1);
  return 0;
}

void sub_100654FF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];

  v1 = a1 - 24;
  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100654BDC;
  v3[3] = &unk_100917378;
  v3[4] = v1;
  sub_100041A34(v2, v3);
}

uint64_t sub_100655050(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  NSObject *v14;
  uint8_t v16[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD v21[5];
  uint8_t buf[8];
  uint64_t v23;
  _BYTE v24[128];

  v2 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LeDeviceManager::stackWillStop enter", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v23 = 0;
  sub_10003415C((uint64_t)buf, a1 + 88);
  v3 = sub_1000419F4();
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100655374;
  v21[3] = &unk_100917378;
  v21[4] = a1;
  sub_100041A34(v3, v21);
  v4 = sub_1003500B8();
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (v5)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093E890);
    v6 = sub_100651630((uint64_t)off_1009778C0);
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v7 = (id)objc_claimAutoreleasedReturnValue(v6);
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v24, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v18;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v18 != v9)
            objc_enumerationMutation(v7);
          v11 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v10);
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10093E890);
          sub_100653040((uint64_t)off_1009778C0, v11);
          v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v24, 16);
      }
      while (v8);
    }

    objc_msgSend(*(id *)(a1 + 280), "removeAllObjects");
    v12 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("FFFFEEEE-DDDD-CCCC-BBBB-AAAA00000000"));
    objc_msgSend(v5, "stopSessionForUserIdentifier:bundleId:completion:", v12, CFSTR("com.apple.bluetoothd"), &stru_10093E720);

    v13 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "FindMy unregistration completed", v16, 2u);
    }

  }
  v14 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "LeDeviceManager::stackWillStop exit", v16, 2u);
  }

  return sub_100034234((uint64_t)buf);
}

void sub_10065531C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  void *v18;
  void *v19;
  va_list va;

  va_start(va, a17);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100655374(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 32) + 321) = 0;
  return result;
}

void sub_100655380(id a1, NSError *a2)
{
  NSObject *v3;
  int v4;
  NSError *v5;

  v3 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 138412290;
    v5 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "stopSessionForUserIdentifier returned %@", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t sub_100655420(uint64_t a1)
{
  return sub_100655050(a1 - 24);
}

void sub_100655428(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];

  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v2 = *(id *)(a1 + 168);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v2);
        sub_10064D348((uint64_t)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", *(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)v5), (_QWORD)v6));
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

void sub_10065551C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100655540(uint64_t a1)
{
  sub_100655428(a1 - 24);
}

void sub_100655548(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1006555B0;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_1006555B0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  uint64_t result;
  _DWORD v6[2];

  v2 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v2 + 375) = *(_BYTE *)(a1 + 40);
  v3 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    v6[0] = 67109120;
    v6[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "LeDeviceManager::screenStateChanged screenState:%d", (uint8_t *)v6, 8u);
  }
  result = _os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit");
  if ((_DWORD)result)
    return sub_100654E30(v2);
  return result;
}

void sub_100655688(uint64_t a1, char a2)
{
  sub_100655548(a1 - 40, a2);
}

void sub_100655690(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1006556F8;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

uint64_t sub_1006556F8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  uint64_t result;
  _DWORD v6[2];

  v2 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v2 + 377) = *(_BYTE *)(a1 + 40);
  v3 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    v6[0] = 67109120;
    v6[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "LeDeviceManager::deviceLockStateChanged fDeviceLocked:%d", (uint8_t *)v6, 8u);
  }
  result = _os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit");
  if ((_DWORD)result)
    return sub_100654E30(v2);
  return result;
}

void sub_1006557D0(uint64_t a1, char a2)
{
  sub_100655690(a1 - 48, a2);
}

void sub_1006557D8(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100655838;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

uint64_t sub_100655838(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t result;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 376) = 1;
  v2 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LeDeviceManager::deviceFirstUnlocked", v4, 2u);
  }
  result = _os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit");
  if ((_DWORD)result)
    return sub_100654E30(v1);
  return result;
}

void sub_1006558C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];

  v1 = a1 - 56;
  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100655838;
  v3[3] = &unk_100917378;
  v3[4] = v1;
  sub_100041A34(v2, v3);
}

void sub_100655928(uint64_t a1, void *a2, int a3)
{
  id v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  _QWORD *v11;
  __int128 *p_buf;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30[2];
  char v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36;
  char v37;
  void *__p[2];
  char v39;
  _QWORD v40[2];
  __int128 buf;
  unsigned __int8 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[144];
  uint64_t v51;

  v5 = a2;
  v40[0] = 0;
  v40[1] = 0;
  sub_10003415C((uint64_t)v40, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
  {
    sub_100091AE8(__p, "HasBuiltinServices");
    v7 = sub_10001F2AC((uint64_t)(v6 + 22), (const void **)__p);
    if (v39 < 0)
      operator delete(__p[0]);
    if (a3)
    {
      if (qword_1009778B8 != -1)
        dispatch_once(&qword_1009778B8, &stru_10093E8D0);
      if (!sub_100030864(qword_1009778B0, v5))
        sub_10064D354(v6, 0);
    }
    else
    {
      sub_10064D354(v6, 1);
      v8 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 384))(v8))
      {
        v9 = *((unsigned __int16 *)v6 + 196) - 961;
        if (v9 < 9 && ((0x10Fu >> (*((_WORD *)v6 + 196) + 63)) & 1) != 0)
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*((id *)&off_10093E9D0 + (__int16)v9), "uppercaseString"));
          v51 = 0;
          v49 = 0u;
          memset(v50, 0, sizeof(v50));
          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          v43 = 0u;
          v44 = 0u;
          sub_100272ADC((uint64_t)&v43);
          v11 = sub_1002614D8(&v43, (uint64_t)"APPEARANCE_", 11);
          v29 = objc_retainAutorelease(v10);
          sub_100091AE8(&buf, (char *)objc_msgSend(v29, "UTF8String"));
          if ((v42 & 0x80u) == 0)
            p_buf = &buf;
          else
            p_buf = (__int128 *)buf;
          if ((v42 & 0x80u) == 0)
            v13 = v42;
          else
            v13 = *((_QWORD *)&buf + 1);
          sub_1002614D8(v11, (uint64_t)p_buf, v13);
          if ((char)v42 < 0)
            operator delete((void *)buf);
          std::stringbuf::str((char *)&v43 + 8);
          sub_10064A050((uint64_t)v6, (uint64_t)&v36);
          if (v37 < 0)
            operator delete(v36);
          if (SHIBYTE(v48) < 0)
            operator delete(*((void **)&v47 + 1));
          std::streambuf::~streambuf((char *)&v43 + 8);
          std::ios::~ios(v50);

        }
      }
    }
    sub_100030BCC(&v43, v5);
    sub_100030BD0(a1, (unsigned __int8 *)&v43);
    sub_100034264((uint64_t)v40);
    v14 = v6 + 23;
    if (v6 + 23 != (uint64_t *)v7)
    {
      sub_100655F30(a1, 1);
      if (sub_10064DEE8((uint64_t)v6))
        goto LABEL_30;
      sub_100091AE8(v34, "_GHS_DEVICE_");
      v15 = sub_10001F2AC((uint64_t)(v6 + 22), (const void **)v34);
      if (v35 < 0)
        operator delete(v34[0]);
      if (v14 != (_QWORD *)v15)
LABEL_30:
        sub_100656134(a1, v5, 2);
    }
    v43 = 0uLL;
    *(_QWORD *)&v44 = 0;
    sub_10047D628((uint64_t)&v43, v5, a3, v14 != (_QWORD *)v7);
    if (sub_100065478())
    {
      v16 = sub_100065478();
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v16 + 40))(v16, &v43);
    }
    if (*((_BYTE *)v6 + 160))
    {
      v17 = sub_1000306B0(a1, v5);
      sub_100091AE8(v32, "needsMFiAuthenticationCertClass2.0c");
      v18 = sub_10001F2AC((uint64_t)(v17 + 22), (const void **)v32);
      v19 = v17 + 23;
      if (v33 < 0)
        operator delete(v32[0]);
      if (v19 != (_QWORD *)v18)
      {
        v20 = qword_100999810;
        if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 138543362;
          *(_QWORD *)((char *)&buf + 4) = v5;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Starting MFI Auth 2.0c with device \"%{public}@\"", (uint8_t *)&buf, 0xCu);
        }
        v21 = sub_10034FCFC();
        (*(void (**)(uint64_t, id))(*(_QWORD *)v21 + 24))(v21, v5);
        v22 = sub_10034FCFC();
        (*(void (**)(uint64_t, id))(*(_QWORD *)v22 + 176))(v22, v5);
      }
      v23 = sub_1000306B0(a1, v5);
      sub_100091AE8(v30, "needsMFiAuthentication4.0");
      v24 = sub_10001F2AC((uint64_t)(v23 + 22), (const void **)v30);
      v25 = v23 + 23;
      if (v31 < 0)
        operator delete(v30[0]);
      if (v25 != (_QWORD *)v24)
      {
        v26 = qword_100999810;
        if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 138543362;
          *(_QWORD *)((char *)&buf + 4) = v5;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Starting MFI Auth 4.0 with device \"%{public}@\"", (uint8_t *)&buf, 0xCu);
        }
        v27 = sub_10034FCFC();
        (*(void (**)(uint64_t, id))(*(_QWORD *)v27 + 24))(v27, v5);
        v28 = sub_10034FCFC();
        (*(void (**)(uint64_t, id))(*(_QWORD *)v28 + 176))(v28, v5);
      }
    }

  }
  sub_100034234((uint64_t)v40);

}

void sub_100655E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,char a49,uint64_t a50)
{
  void *v50;
  void *v51;

  if (a33 < 0)
    operator delete(__p);
  sub_100272CFC((uint64_t)&a49);

  sub_100034234((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void sub_100655F30(uint64_t a1, char a2)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  void *__p[2];
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v4 = sub_10065D314(a1);
  v15 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v14 = a2;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v6 = v15;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v8)
          objc_enumerationMutation(v6);
        v10 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
        v11 = (char *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v10);
        sub_100091AE8(__p, "DoNotAutoConnect");
        v12 = sub_10001F2AC((uint64_t)(v11 + 176), (const void **)__p);
        if (v17 < 0)
          operator delete(__p[0]);
        if (v11 + 184 == (char *)v12)
          objc_msgSend(v5, "addObject:", v10);
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v7);
  }

  if ((v14 & 1) != 0 || objc_msgSend(v5, "count"))
  {
    v13 = sub_10034FCFC();
    (*(void (**)(uint64_t, void *))(*(_QWORD *)v13 + 32))(v13, v5);
  }

}

void sub_1006560DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_100656134(uint64_t a1, void *a2, int a3)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  NSObject *v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;
  void *__p[2];
  char v33;
  uint8_t buf[4];
  id v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;

  v5 = a2;
  if (!v5)
    goto LABEL_47;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093E890);
  v6 = sub_1000306B0((uint64_t)off_1009778C0, v5);
  v7 = (uint64_t)v6;
  if (!v6 || !*((_BYTE *)v6 + 160))
  {
    v16 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v35) = a3;
      v17 = "Identification - device not yet le-paired, stimulus %d";
      v18 = v16;
      v19 = 8;
LABEL_46:
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
      goto LABEL_47;
    }
    goto LABEL_47;
  }
  if (a3 == 1)
    *((_BYTE *)v6 + 359) = 1;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093E890);
  v8 = off_1009778C0;
  sub_100091AE8(__p, "LeIdentificationHashExist");
  v9 = sub_10000628C((uint64_t)v8, v5, (uint64_t)__p);
  v10 = v9;
  if ((v33 & 0x80000000) == 0)
  {
    if (v9)
      goto LABEL_12;
LABEL_19:
    v20 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Identification - Identification hash does not exist - generating", buf, 2u);
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10093E890);
    v21 = sub_1006669DC((uint64_t)off_1009778C0, v5);
    v22 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543874;
      v35 = v5;
      v36 = 1024;
      v37 = a3;
      v38 = 1024;
      v39 = v21;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Identification - generating for device %{public}@, stimulus %d, sent %d", buf, 0x18u);
    }
    if ((v21 & 5) == 0 && sub_10064DEE8(v7))
      sub_100658238(a1, v5);
    goto LABEL_47;
  }
  operator delete(__p[0]);
  if (!v10)
    goto LABEL_19;
LABEL_12:
  v11 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 360))(v11))
  {
    sub_100091AE8(v30, "IsLEMouse");
    v12 = v7 + 176;
    v13 = sub_10001F2AC(v7 + 176, (const void **)v30);
    v14 = v7 + 184;
    if (v14 == v13)
    {
      if (v31 < 0)
        operator delete(v30[0]);
    }
    else
    {
      sub_100091AE8(v28, "HIDDeviceUnknownBehavior");
      if (v14 == sub_10001F2AC(v12, (const void **)v28))
      {
        sub_100091AE8(v26, "HIDDeviceKnownPoorBehavior");
        if (v14 == sub_10001F2AC(v12, (const void **)v26))
        {
          sub_100091AE8(v24, "HIDDeviceKnownGoodBehavior");
          v15 = v14 == sub_10001F2AC(v12, (const void **)v24);
          if (v25 < 0)
            operator delete(v24[0]);
        }
        else
        {
          v15 = 0;
        }
        if (v27 < 0)
          operator delete(v26[0]);
      }
      else
      {
        v15 = 0;
      }
      if (v29 < 0)
        operator delete(v28[0]);
      if (v31 < 0)
      {
        operator delete(v30[0]);
        if (v15)
        {
LABEL_40:
          v23 = qword_100999810;
          if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            v35 = v5;
            v17 = "Identification - no hids tags for device %{public}@, not regenerating metric";
LABEL_45:
            v18 = v23;
            v19 = 12;
            goto LABEL_46;
          }
          goto LABEL_47;
        }
      }
      else if (v15)
      {
        goto LABEL_40;
      }
    }
  }
  v23 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v35 = v5;
    v17 = "Identification - le identification tag exist for device %{public}@ - not generating";
    goto LABEL_45;
  }
LABEL_47:

}

void sub_100656560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);

  _Unwind_Resume(a1);
}

void sub_1006565F4(uint64_t a1, void *a2, int a3)
{
  sub_100655928(a1 - 16, a2, a3);
}

void sub_1006565FC(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  void *__p[2];
  char v18;
  uint64_t v19;
  id v20;
  _QWORD v21[2];
  std::string __str;

  v3 = a2;
  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
  {
    v19 = 0;
    v20 = 0;
    sub_10047D670((uint64_t)&v19, v3);
    if (sub_100065478())
    {
      v5 = sub_100065478();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 40))(v5, &v19);
    }
    sub_100091AE8(__p, "HasBuiltinServices");
    v6 = sub_10001F2AC((uint64_t)(v4 + 22), (const void **)__p);
    if (v18 < 0)
      operator delete(__p[0]);
    if (*((char *)v4 + 231) < 0)
      v7 = v4[27];
    else
      v7 = *((unsigned __int8 *)v4 + 231);
    *((_BYTE *)v4 + 357) = 0;
    *((_BYTE *)v4 + 359) = 0;
    *((_BYTE *)v4 + 368) = 1;
    sub_10064D354(v4, 0);
    sub_100091AE8(&__str, "");
    std::string::operator=((std::string *)(v4 + 26), &__str);
    v8 = v4 + 23;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    sub_100056BAC((uint64_t)(v4 + 22), (char *)v4[23]);
    v4[23] = 0;
    v4[24] = 0;
    v4[22] = v8;
    v4[60] = 0;
    if (v7)
      sub_10064BD38((uint64_t)v4, 0, 0, 0);
    v9 = v4[3];
    if (v9)
    {
      v10 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_INFO))
      {
        LODWORD(__str.__r_.__value_.__l.__data_) = 138543362;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Clearing resolved address for device \"%{public}@\"", (uint8_t *)&__str, 0xCu);
      }
      v4[3] = 0;
      v11 = v4[2];
      if ((v11 & 0xFF000000000000) == 0 || (v11 & 0xFFC00000000000) == 0x1C00000000000)
      {
        sub_100030BCC(&__str, v3);
        sub_100030BD0(a1, (unsigned __int8 *)&__str);
      }
      else
      {
        sub_10033FD4C(*(_QWORD *)(a1 + 248), (uint64_t)v4);
      }
      if (v9 != v4[2])
      {
        v12 = *(_QWORD **)(a1 + 184);
        if (v12)
        {
          v13 = (uint64_t *)(a1 + 184);
          do
          {
            v14 = v12[4];
            v15 = v14 >= v9;
            if (v14 >= v9)
              v16 = v12;
            else
              v16 = v12 + 1;
            if (v15)
              v13 = v12;
            v12 = (_QWORD *)*v16;
          }
          while (*v16);
          if (v13 != (uint64_t *)(a1 + 184) && v9 >= v13[4])
          {
            sub_1000040CC((uint64_t **)(a1 + 176), v13);
            operator delete(v13);
          }
        }
      }
    }
    if (v8 != (_QWORD *)v6)
      sub_100655F30(a1, 1);

  }
  sub_100034234((uint64_t)v21);

}

void sub_1006568A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;

  sub_100034234((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_100656924(uint64_t a1, void *a2)
{
  sub_1006565FC(a1 - 16, a2);
}

uint64_t sub_10065692C(uint64_t a1, int a2, int a3)
{
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  _DWORD *v10;
  int v11;
  int v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[2];
  _BYTE v19[128];

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 88);
  *(_BYTE *)(a1 + 164) = 1;
  *(_DWORD *)(a1 + 156) = a3;
  *(_DWORD *)(a1 + 160) = a2;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v6 = *(id *)(a1 + 168);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v8)
          objc_enumerationMutation(v6);
        v10 = objc_msgSend(*(id *)(a1 + 168), "objectForKey:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i), (_QWORD)v14);
        v11 = v10[33];
        if (v11)
          v10[33] = *(_DWORD *)(a1 + 160) + v11;
        v12 = v10[34];
        if (v12)
          v10[34] = *(_DWORD *)(a1 + 156) + v12;
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
    }
    while (v7);
  }

  return sub_100034234((uint64_t)v18);
}

void sub_100656A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  va_list va;

  va_start(va, a10);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100656A9C(uint64_t a1, int a2, int a3)
{
  return sub_10065692C(a1 - 32, a2, a3);
}

BOOL sub_100656AA4(uint64_t a1, void *a2)
{
  return sub_1000306B0(a1, a2) != 0;
}

BOOL sub_100656AC0(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _BOOL8 v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = v4[3] != 0;
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100656B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100656B50(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((unsigned int *)v4 + 35);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100656BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100656BD8(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((unsigned int *)v4 + 36);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100656C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100656C60(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = v4[19];
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100656CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100656CE8(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((unsigned int *)v4 + 33);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100656D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100656D70(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((unsigned int *)v4 + 65);
  else
    v5 = 1;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100656DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

double sub_100656DF8(uint64_t a1, void *a2)
{
  id v3;
  double *v4;
  double v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = (double *)sub_1000306B0(a1, v3);
  if (v4)
    v5 = v4[51];
  else
    v5 = 0.0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100656E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100656E88(uint64_t a1, void *a2, double a3)
{
  id v5;
  double *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = (double *)sub_1000306B0(a1, v5);
  if (v6)
    v6[51] = a3;
  sub_100034234((uint64_t)v7);

}

void sub_100656EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

double sub_100656F10(uint64_t a1, void *a2)
{
  id v3;
  double *v4;
  double v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = (double *)sub_1000306B0(a1, v3);
  if (v4)
    v5 = v4[52];
  else
    v5 = 0.0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100656F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

double sub_100656FA0(uint64_t a1, void *a2)
{
  id v3;
  double *v4;
  double v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = (double *)sub_1000306B0(a1, v3);
  if (v4)
    v5 = v4[53];
  else
    v5 = 0.0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100657010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100657030(uint64_t a1, void *a2, double a3)
{
  id v5;
  double *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = (double *)sub_1000306B0(a1, v5);
  if (v6)
    v6[53] = a3;
  sub_100034234((uint64_t)v7);

}

void sub_100657098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

double sub_1006570B8(uint64_t a1, void *a2)
{
  id v3;
  double *v4;
  double v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = (double *)sub_1000306B0(a1, v3);
  if (v4)
    v5 = v4[54];
  else
    v5 = 0.0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100657128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100657148(uint64_t a1, void *a2, double a3)
{
  id v5;
  double *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = (double *)sub_1000306B0(a1, v5);
  if (v6)
    v6[54] = a3;
  sub_100034234((uint64_t)v7);

}

void sub_1006571B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

double sub_1006571D0(uint64_t a1, void *a2)
{
  id v3;
  double *v4;
  double v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = (double *)sub_1000306B0(a1, v3);
  if (v4)
    v5 = v4[55];
  else
    v5 = 0.0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100657240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100657260(uint64_t a1, void *a2, double a3)
{
  id v5;
  double *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = (double *)sub_1000306B0(a1, v5);
  if (v6)
    v6[55] = a3;
  sub_100034234((uint64_t)v7);

}

void sub_1006572C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006572E8(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((unsigned int *)v4 + 112);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100657350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100657370(uint64_t a1, void *a2, int a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_DWORD *)v6 + 112) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_1006573D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006573F8(uint64_t a1, void *a2, int a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_DWORD *)v6 + 112) += a3;
  sub_100034234((uint64_t)v7);

}

void sub_100657468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_100657488(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _BOOL8 v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((_BYTE *)v4 + 162) != 0;
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_1006574F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100657518@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  const unsigned __int8 *v7;
  _QWORD *v8;
  const unsigned __int8 *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 88);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  uuid_clear((unsigned __int8 *)a3);
  if (a2)
  {
    v8 = *(_QWORD **)(a1 + 232);
    v7 = (const unsigned __int8 *)(a1 + 232);
    v6 = v8;
    if (v8)
    {
      v9 = v7;
      do
      {
        v10 = v6[4];
        v11 = v10 >= a2;
        if (v10 >= a2)
          v12 = v6;
        else
          v12 = v6 + 1;
        if (v11)
          v9 = (const unsigned __int8 *)v6;
        v6 = (_QWORD *)*v12;
      }
      while (*v12);
      if (v9 != v7 && *((_QWORD *)v9 + 4) <= a2)
        uuid_copy((unsigned __int8 *)a3, v9 + 40);
    }
  }
  return sub_100034234((uint64_t)v14);
}

void sub_1006575BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1006575D4(uint64_t a1, void *a2, __int16 a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_WORD *)v6 + 196) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10065763C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_10065765C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  _QWORD v12[2];

  v2 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 384))(v2))
    return 0;
  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 88);
  v3 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEBUG))
    sub_10071554C(a1, v3, v4, v5, v6, v7, v8, v9);
  v10 = *(_BYTE *)(a1 + 320) != 0;
  sub_100034234((uint64_t)v12);
  return v10;
}

uint64_t sub_1006576F0(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  NSObject *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t v16;
  BOOL v17;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int v50;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v59;
  unsigned __int8 *v60;
  int v61;
  int v62;
  BOOL v63;
  uint64_t v64;
  int v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  const void *v72;
  int64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v78[4];
  id v79;
  os_unfair_lock_s v80;
  void *v81;
  void *__dst;
  uint64_t v83;
  void *v84[2];
  char v85;
  _QWORD v86[4];
  id v87;
  uint64_t v88;
  _QWORD v89[4];
  id v90;
  __int128 v91;
  uint64_t v92;
  void *__p[2];
  uint64_t v94;
  _QWORD v95[2];
  uint8_t buf[32];
  void *v97[2];
  char v98;

  v5 = a2;
  v95[0] = 0;
  v95[1] = 0;
  sub_10003415C((uint64_t)v95, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  v7 = v6;
  if (!v6)
  {
    v10 = 0;
    goto LABEL_169;
  }
  v8 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    v9 = a3;
    if ((char)a3[23] < 0)
      v9 = *(unsigned __int8 **)a3;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Adding \"%{public}s\" tag to device \"%{public}@\"", buf, 0x16u);
  }
  if ((char)a3[23] < 0)
  {
    sub_10003430C(__p, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v94 = *((_QWORD *)a3 + 2);
  }
  v11 = sub_10064A050((uint64_t)v7, (uint64_t)__p);
  v10 = v11;
  if (SHIBYTE(v94) < 0)
  {
    operator delete(__p[0]);
    if (!(_DWORD)v10)
      goto LABEL_15;
    goto LABEL_14;
  }
  if ((_DWORD)v11)
  {
LABEL_14:
    sub_100030BCC(buf, v5);
    sub_100030BD0(a1, buf);
  }
LABEL_15:
  sub_100034264((uint64_t)v95);
  v12 = a3[23];
  if ((char)a3[23] < 0)
  {
    v16 = *((_QWORD *)a3 + 1);
    if (v16 != 16)
    {
      if (v16 != 18)
        goto LABEL_46;
      v17 = **(_QWORD **)a3 == 0x746C697542736148 && *(_QWORD *)(*(_QWORD *)a3 + 8) == 0x6369767265536E69;
      if (!v17 || *(_WORD *)(*(_QWORD *)a3 + 16) != 29541)
        goto LABEL_46;
      goto LABEL_45;
    }
    v13 = *(uint64_t **)a3;
  }
  else
  {
    v13 = (uint64_t *)a3;
    if (v12 != 16)
    {
      if (v12 != 18)
        goto LABEL_43;
      if (*(_QWORD *)a3 != 0x746C697542736148
        || *((_QWORD *)a3 + 1) != 0x6369767265536E69
        || *((_WORD *)a3 + 8) != 29541)
      {
        goto LABEL_129;
      }
LABEL_45:
      sub_100655F30(a1, 1);
      v12 = a3[23];
      if ((v12 & 0x80) != 0)
        goto LABEL_46;
LABEL_43:
      if (v12 != 12)
      {
LABEL_53:
        if (v12 != 35)
        {
LABEL_62:
          if (v12 != 25)
          {
LABEL_78:
            if (v12 != 14)
            {
              v36 = a3;
              if (v12 != 16)
                goto LABEL_105;
              goto LABEL_93;
            }
            v37 = 0;
            v38 = (uint64_t *)a3;
            goto LABEL_85;
          }
          v27 = (uint64_t *)a3;
          goto LABEL_67;
        }
        v26 = a3;
        goto LABEL_60;
      }
      v22 = a3;
      goto LABEL_48;
    }
  }
  v20 = *v13;
  v19 = v13[1];
  if (v20 == 0x747541746F4E6F44 && v19 == 0x7463656E6E6F436FLL)
    goto LABEL_45;
  if ((v12 & 0x80) == 0)
    goto LABEL_43;
LABEL_46:
  if (*((_QWORD *)a3 + 1) != 12)
    goto LABEL_58;
  v22 = *(unsigned __int8 **)a3;
LABEL_48:
  v23 = *(_QWORD *)v22;
  v24 = *((_DWORD *)v22 + 2);
  if (v23 == 0x57656C7070417349 && v24 == 1751348321)
  {
    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_10093E8D0);
    sub_10069A244(qword_1009778B0, v5);
    v12 = a3[23];
    if ((v12 & 0x80) == 0)
      goto LABEL_53;
  }
  else if ((v12 & 0x80) == 0)
  {
    goto LABEL_53;
  }
LABEL_58:
  if (*((_QWORD *)a3 + 1) != 35)
    goto LABEL_65;
  v26 = *(unsigned __int8 **)a3;
LABEL_60:
  if (!memcmp(v26, "needsMFiAuthenticationCertClass2.0c", 0x23uLL))
  {
    v28 = sub_10034FCFC();
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 168))(v28);
    v12 = a3[23];
    if ((v12 & 0x80) == 0)
      goto LABEL_62;
  }
  else if ((v12 & 0x80) == 0)
  {
    goto LABEL_62;
  }
LABEL_65:
  if (*((_QWORD *)a3 + 1) != 25)
    goto LABEL_83;
  v27 = *(uint64_t **)a3;
LABEL_67:
  v29 = *v27;
  v30 = v27[1];
  v31 = v27[2];
  v32 = *((unsigned __int8 *)v27 + 24);
  if (v29 == 0x69464D736465656ELL && v30 == 0x69746E6568747541 && v31 == 0x2E346E6F69746163 && v32 == 48)
  {
    v39 = sub_10034FCFC();
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 168))(v39);
    v12 = a3[23];
    if ((v12 & 0x80) == 0)
      goto LABEL_78;
  }
  else if ((v12 & 0x80) == 0)
  {
    goto LABEL_78;
  }
LABEL_83:
  v40 = *((_QWORD *)a3 + 1);
  if (v40 != 14)
  {
LABEL_91:
    if (v40 != 16)
      goto LABEL_104;
    v36 = *(unsigned __int8 **)a3;
LABEL_93:
    v45 = *(_QWORD *)v36;
    v44 = *((_QWORD *)v36 + 1);
    if (v45 != 0x75616E5553434E41 || v44 != 0x64657A69726F6874)
      goto LABEL_104;
    goto LABEL_98;
  }
  v38 = *(uint64_t **)a3;
  v37 = 1;
LABEL_85:
  v41 = *v38;
  v42 = *(uint64_t *)((char *)v38 + 6);
  if (v41 != 0x6874754153434E41 || v42 != 0x64657A69726F6874)
  {
    if (!v37)
      goto LABEL_104;
    v40 = *((_QWORD *)a3 + 1);
    goto LABEL_91;
  }
LABEL_98:
  v47 = sub_1000419F4();
  v89[0] = _NSConcreteStackBlock;
  v89[1] = 3321888768;
  v89[2] = sub_100658178;
  v89[3] = &unk_10093E748;
  v90 = v5;
  if ((char)a3[23] < 0)
  {
    sub_10003430C(&v91, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v91 = *(_OWORD *)a3;
    v92 = *((_QWORD *)a3 + 2);
  }
  sub_100041A34(v47, v89);
  if (SHIBYTE(v92) < 0)
    operator delete((void *)v91);

  v12 = a3[23];
LABEL_104:
  if ((v12 & 0x80) == 0)
  {
LABEL_105:
    if (v12 != 9)
      goto LABEL_114;
    v48 = a3;
    goto LABEL_109;
  }
  if (*((_QWORD *)a3 + 1) != 9)
    goto LABEL_117;
  v48 = *(unsigned __int8 **)a3;
LABEL_109:
  v49 = *(_QWORD *)v48;
  v50 = v48[8];
  if (v49 == 0x73756F4D454C7349 && v50 == 101)
  {
    v53 = sub_1000419F4();
    v86[0] = _NSConcreteStackBlock;
    v86[1] = 3221225472;
    v86[2] = sub_10065822C;
    v86[3] = &unk_100918868;
    v88 = a1;
    v87 = v5;
    sub_100041A34(v53, v86);

    v12 = a3[23];
    if ((v12 & 0x80) == 0)
    {
LABEL_114:
      v52 = (uint64_t *)a3;
      if (v12 != 17)
        goto LABEL_129;
      goto LABEL_119;
    }
  }
  else if ((v12 & 0x80) == 0)
  {
    goto LABEL_114;
  }
LABEL_117:
  if (*((_QWORD *)a3 + 1) != 17)
    goto LABEL_129;
  v52 = *(uint64_t **)a3;
LABEL_119:
  v54 = *v52;
  v55 = v52[1];
  v56 = *((unsigned __int8 *)v52 + 16);
  if (v54 == 0x746F6F7465756C42 && v55 == 0x746F6D6552565468 && v56 == 101)
  {
    sub_100091AE8(v84, "DoNotStopAutoConnecting");
    sub_10064A050((uint64_t)v7, (uint64_t)v84);
    if (v85 < 0)
      operator delete(v84[0]);
  }
LABEL_129:
  v59 = (char)a3[23];
  if (v59 < 0)
  {
    if (*((_QWORD *)a3 + 1) != 5)
      goto LABEL_148;
    v60 = *(unsigned __int8 **)a3;
  }
  else
  {
    v60 = a3;
    if (v59 != 5)
      goto LABEL_148;
  }
  v61 = *(_DWORD *)v60;
  v62 = v60[4];
  v63 = v61 == 1416847688 && v62 == 83;
  if (v63 && sub_1006589A8(a1, v5) == 16)
  {
    if (qword_10097AA70 != -1)
      dispatch_once(&qword_10097AA70, &stru_10093E950);
    v64 = qword_10097AA68;
    sub_100091AE8(buf, "HasTS");
    sub_100091AE8(v97, "External Lock Tagged HasTS setTag");
    sub_10047C59C(60.0, v64, (uint64_t *)buf, (uint64_t *)v97);
    if (v98 < 0)
      operator delete(v97[0]);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      sub_10071563C();
  }
LABEL_148:
  if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
  {
    v65 = (char)a3[23];
    if ((v65 & 0x80000000) == 0)
    {
      v66 = a3;
      if (v65 != 20)
        goto LABEL_163;
LABEL_154:
      v67 = *(_QWORD *)v66;
      v68 = *((_QWORD *)v66 + 1);
      v69 = *((_DWORD *)v66 + 4);
      if (v67 == 0x525F4B53415F4144 && v68 == 0x45445F4E49415445 && v69 == 1162037590)
        sub_10033FC58(*(_QWORD *)(a1 + 248), v7);
      goto LABEL_163;
    }
    if (*((_QWORD *)a3 + 1) == 20)
    {
      v66 = *(unsigned __int8 **)a3;
      goto LABEL_154;
    }
  }
LABEL_163:
  memset(buf, 0, sizeof(buf));
  *(_DWORD *)buf = *(_DWORD *)(a1 + 288);
  sub_10001FE6C(&buf[8], a1 + 296);
  v80._os_unfair_lock_opaque = *(_DWORD *)buf;
  __dst = 0;
  v83 = 0;
  v81 = 0;
  v72 = *(const void **)&buf[8];
  v73 = *(_QWORD *)&buf[16] - *(_QWORD *)&buf[8];
  if (*(_QWORD *)&buf[16] != *(_QWORD *)&buf[8])
  {
    sub_1002A3F78(&v81, v73 >> 3);
    v74 = (char *)__dst;
    memmove(__dst, v72, v73);
    __dst = &v74[8 * (v73 >> 3)];
  }
  v78[0] = _NSConcreteStackBlock;
  v78[1] = 3221225472;
  v78[2] = sub_100658A30;
  v78[3] = &unk_10093E780;
  v79 = v5;
  sub_100668ECC(&v80, v78);
  if (v81)
  {
    __dst = v81;
    operator delete(v81);
  }

  v6 = *(_QWORD **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    operator delete(*(void **)&buf[8]);
  }
LABEL_169:
  v75 = sub_100005044((uint64_t)v6, v5);
  if (v75)
  {
    v76 = sub_10034D650();
    if ((*(unsigned int (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v76 + 792))(v76, v75, a3))
    {
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(v75, buf);
        sub_1007155F8();
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEBUG))
      {
        sub_10043E5F8(v75, buf);
        sub_1007155B4();
      }
      v10 = 1;
    }
  }
  sub_100034234((uint64_t)v95);

  return v10;
}

void sub_100658074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  void *v46;
  uint64_t v47;

  if (*(char *)(v47 - 105) < 0)
    operator delete(*(void **)(v47 - 128));
  if (*(char *)(v47 - 137) < 0)
    operator delete(*(void **)(v47 - 160));
  sub_100034234(v47 - 176);

  _Unwind_Resume(a1);
}

void sub_100658178(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  _BOOL8 v7;

  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_10093E850);
  v2 = (_QWORD *)(a1 + 40);
  v3 = *(char *)(a1 + 63);
  if (v3 < 0)
  {
    if (*(_QWORD *)(a1 + 48) != 14)
    {
LABEL_14:
      v7 = 0;
      goto LABEL_15;
    }
    v2 = (_QWORD *)*v2;
  }
  else if (v3 != 14)
  {
    goto LABEL_14;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)((char *)v2 + 6);
  v7 = v4 == (_QWORD *)0x6874754153434E41 && v5 == 0x64657A69726F6874;
LABEL_15:
  sub_1002F125C((uint64_t)off_100978168, *(void **)(a1 + 32), v7);
}

void sub_10065822C(uint64_t a1)
{
  sub_100658238(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32));
}

void sub_100658238(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  _BOOL4 v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  __int128 *v13;
  NSStringEncoding v14;
  __int128 *p_buf;
  void *v16;
  NSObject *v17;
  id v18;
  void *v19;
  void *v20;
  _BOOL4 v21;
  NSObject *v22;
  const char *v23;
  void *v24;
  NSObject *v25;
  NSObject *v26;
  __int128 *v27;
  void *v28;
  void *v29;
  void *v30[2];
  char v31;
  const void *v32[2];
  char v33;
  _QWORD v34[2];
  char v35;
  _QWORD v36[2];
  char v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42[2];
  char v43;
  void *__p[2];
  char v45;
  const void *v46[2];
  char v47;
  uint8_t v48[4];
  __int128 *v49;
  __int128 buf;
  uint64_t v51;

  v3 = a2;
  v4 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 360))(v4) & 1) == 0)
    goto LABEL_66;
  v5 = sub_1000306B0(a1, v3);
  sub_100091AE8(v46, "IsLEMouse");
  v6 = sub_10001F2AC((uint64_t)(v5 + 22), v46);
  v7 = v5 + 23;
  if (v47 < 0)
    operator delete((void *)v46[0]);
  v8 = qword_100999810;
  v9 = os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT);
  if (v7 != (_QWORD *)v6)
  {
    if (v9)
    {
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "HIDIdentification - The device \"%{public}@\" supports HID. SetLEHIDDeviceBehavior", (uint8_t *)&buf, 0xCu);
    }
    v10 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 272))(v10))
    {
      v11 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "HIDIdentification - limitedSupportForHID - Known Poor", (uint8_t *)&buf, 2u);
      }
      sub_100091AE8(__p, "HIDDeviceKnownPoorBehavior");
      sub_10064A050((uint64_t)v5, (uint64_t)__p);
      if (v45 < 0)
        operator delete(__p[0]);
      goto LABEL_57;
    }
    if (*((char *)v5 + 127) < 0)
    {
      sub_10003430C(&buf, (void *)v5[13], v5[14]);
    }
    else
    {
      buf = *(_OWORD *)(v5 + 13);
      v51 = v5[15];
    }
    v12 = SHIBYTE(v51);
    v13 = (__int128 *)buf;
    v14 = +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding");
    if (v12 >= 0)
      p_buf = &buf;
    else
      p_buf = v13;
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", p_buf, v14));
    if (SHIBYTE(v51) < 0)
      operator delete((void *)buf);
    if (objc_msgSend((id)qword_100999C48, "containsObject:", v16))
    {
      v17 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "HIDIdentification - WAR for known good LE HID %@", (uint8_t *)&buf, 0xCu);
      }
      sub_100091AE8(v42, "HIDDeviceKnownGoodBehavior");
      sub_10064A050((uint64_t)v5, (uint64_t)v42);
      if (v43 < 0)
        operator delete(v42[0]);
      goto LABEL_56;
    }
    v18 = (id)v5[45];
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_100999C38, "objectForKey:", v16));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_100999C40, "objectForKey:", v16));
    sub_100091AE8(v40, "HIDDeviceKnownGoodBehavior");
    if (v7 == (_QWORD *)sub_10001F2AC((uint64_t)(v5 + 22), (const void **)v40))
    {
      sub_100091AE8(v38, "HIDDeviceKnownPoorBehavior");
      v21 = v7 != (_QWORD *)sub_10001F2AC((uint64_t)(v5 + 22), (const void **)v38);
      if (v39 < 0)
        operator delete(v38[0]);
    }
    else
    {
      v21 = 1;
    }
    if (v41 < 0)
      operator delete(v40[0]);
    if (v21)
    {
      v22 = qword_100999810;
      if (!os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
      {
LABEL_55:

LABEL_56:
LABEL_57:
        v26 = qword_100999810;
        if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
        {
          if (*((char *)v5 + 127) < 0)
          {
            sub_10003430C(&buf, (void *)v5[13], v5[14]);
          }
          else
          {
            buf = *(_OWORD *)(v5 + 13);
            v51 = v5[15];
          }
          v27 = &buf;
          if (v51 < 0)
            v27 = (__int128 *)buf;
          *(_DWORD *)v48 = 136315138;
          v49 = v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Post leHIDBehaviorKnown for %s", v48, 0xCu);
          if (SHIBYTE(v51) < 0)
            operator delete((void *)buf);
        }
        v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDistributedNotificationCenter defaultCenter](NSDistributedNotificationCenter, "defaultCenter"));
        v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotification notificationWithName:object:](NSNotification, "notificationWithName:object:", CFSTR("com.apple.bluetooth.leHIDBehaviorKnown"), 0));
        objc_msgSend(v28, "postNotification:", v29);

        goto LABEL_66;
      }
      LOWORD(buf) = 0;
      v23 = "HIDIdentification - Device already identified as Good/Poor";
    }
    else
    {
      if (objc_msgSend(v18, "length") || !*((_BYTE *)v5 + 368))
      {
        if (objc_msgSend(v19, "isEqualToData:", v18))
        {
          sub_100091AE8(v36, "HIDDeviceKnownPoorBehavior");
          sub_10064A050((uint64_t)v5, (uint64_t)v36);
          if ((v37 & 0x80000000) == 0)
            goto LABEL_55;
          v24 = (void *)v36[0];
        }
        else if (objc_msgSend(v20, "isEqualToData:", v18))
        {
          sub_100091AE8(v34, "HIDDeviceKnownGoodBehavior");
          sub_10064A050((uint64_t)v5, (uint64_t)v34);
          if ((v35 & 0x80000000) == 0)
            goto LABEL_55;
          v24 = (void *)v34[0];
        }
        else
        {
          v25 = qword_100999810;
          if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf) = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "HIDIdentification - Device not found in known good/poor device lists", (uint8_t *)&buf, 2u);
          }
          if (_os_feature_enabled_impl("BluetoothFeatures", "RuleBasedHIDClassification"))
          {
            sub_100091AE8(v32, "HIDDeviceUnknownBehavior");
            sub_10035AE5C((uint64_t **)v5 + 22, v32);
            if ((v33 & 0x80000000) == 0)
              goto LABEL_55;
            v24 = (void *)v32[0];
          }
          else
          {
            sub_100091AE8(v30, "HIDDeviceUnknownBehavior");
            sub_10064A050((uint64_t)v5, (uint64_t)v30);
            if ((v31 & 0x80000000) == 0)
              goto LABEL_55;
            v24 = v30[0];
          }
        }
        operator delete(v24);
        goto LABEL_55;
      }
      v22 = qword_100999810;
      if (!os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
        goto LABEL_55;
      LOWORD(buf) = 0;
      v23 = "HIDIdentification - No currently available identification data.";
    }
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)&buf, 2u);
    goto LABEL_55;
  }
  if (v9)
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Not a mouse - no need to setLEHIDDeviceBehavior", (uint8_t *)&buf, 2u);
  }
LABEL_66:

}

void sub_100658864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1006589A8(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((unsigned int *)v4 + 93);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100658A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100658A30(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, uint64_t))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32), 2);
}

void sub_100658A4C(uint64_t a1, void *a2)
{
  id v3;
  void *__p[2];
  char v5;

  v3 = a2;
  sub_100091AE8(__p, "HasTS");
  sub_1006576F0(a1, v3, (unsigned __int8 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);

}

void sub_100658AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

unint64_t sub_100658AD4(uint64_t a1, void *a2)
{
  id v3;
  unint64_t v4;
  void *__p[2];
  char v7;

  v3 = a2;
  sub_100091AE8(__p, "HasTS");
  v4 = sub_10000628C(a1, v3, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);

  return v4;
}

void sub_100658B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_100658B64(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, uint64_t))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32), 3);
}

id sub_100658B80(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[2];
  _BYTE v20[128];

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 88);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = *(id *)(a1 + 168);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v5);
        v9 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        v10 = (char *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v9, __p[0], __p[1], v14);
        if (*(char *)(a2 + 23) < 0)
        {
          sub_10003430C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)a2;
          v14 = *(_QWORD *)(a2 + 16);
        }
        v11 = sub_10001F2AC((uint64_t)(v10 + 176), (const void **)__p);
        if (SHIBYTE(v14) < 0)
          operator delete(__p[0]);
        if (v10 + 184 != (char *)v11)
          objc_msgSend(v4, "addObject:", v9);
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
    }
    while (v6);
  }

  sub_100034264((uint64_t)v19);
  sub_100034234((uint64_t)v19);
  return v4;
}

void sub_100658D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  sub_100034234((uint64_t)&a24);

  _Unwind_Resume(a1);
}

void sub_100658D7C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  id v5;
  uint64_t v6;
  const void ***v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *__p[2];
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[2];
  _BYTE v23[128];

  v5 = a2;
  a3[2] = 0;
  a3[1] = 0;
  *a3 = (uint64_t)(a3 + 1);
  v6 = sub_100005044((uint64_t)v5, v5);
  v22[0] = 0;
  v22[1] = 0;
  sub_10003415C((uint64_t)v22, a1 + 88);
  v7 = (const void ***)sub_1000306B0(a1, v5);
  if (v7)
    sub_1002F6198(a3, v7[22], v7 + 23);
  if (v6)
  {
    v8 = sub_10034D650();
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 824))(v8, v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = v10;
    if (v10)
    {
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v12 = v10;
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
      if (v13)
      {
        v14 = *(_QWORD *)v19;
        do
        {
          v15 = 0;
          do
          {
            if (*(_QWORD *)v19 != v14)
              objc_enumerationMutation(v12);
            sub_100091AE8(__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v15)), "UTF8String"));
            sub_100565F28((uint64_t **)a3, (const void **)__p, (uint64_t)__p);
            if (v17 < 0)
              operator delete(__p[0]);
            v15 = (char *)v15 + 1;
          }
          while (v13 != v15);
          v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
        }
        while (v13);
      }

    }
  }
  sub_100034234((uint64_t)v22);

}

void sub_100658F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void *v25;
  uint64_t v26;
  void *v27;

  sub_100034234((uint64_t)&a25);
  sub_100056BAC(v26, *(char **)(v26 + 8));

  _Unwind_Resume(a1);
}

id sub_100658F98(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  __int128 *v5;
  __int128 *i;
  __int128 v7;
  id v8;
  void **v9;
  void *v10;
  id v11;
  void *__p[2];
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v15 = 0;
  v16 = 0;
  v17 = 0;
  sub_10033F72C(*(_QWORD *)(a1 + 248), v3, (uint64_t)&v15);
  v5 = v15;
  for (i = v16; v5 != i; v5 = (__int128 *)((char *)v5 + 24))
  {
    __p[0] = 0;
    __p[1] = 0;
    v14 = 0;
    if (*((char *)v5 + 23) < 0)
    {
      sub_10003430C(__p, *(void **)v5, *((_QWORD *)v5 + 1));
    }
    else
    {
      v7 = *v5;
      v14 = *((_QWORD *)v5 + 2);
      *(_OWORD *)__p = v7;
    }
    v8 = objc_alloc((Class)NSUUID);
    if (v14 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9, __p[0], __p[1], v14));
    v11 = objc_msgSend(v8, "initWithUUIDString:", v10);

    objc_msgSend(v4, "addObject:", v11);
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
  }
  __p[0] = &v15;
  sub_100091BF8((void ***)__p);

  return v4;
}

void sub_1006590DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

id sub_100659144(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  id v5;
  void *v6;
  _QWORD v8[2];

  v3 = a2;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
  {
    v5 = sub_10064E8D4((uint64_t)v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  }
  else
  {
    v6 = &__NSArray0__struct;
  }
  sub_100034234((uint64_t)v8);

  return v6;
}

void sub_1006591B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

id sub_1006591DC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *v7;
  id v8;
  void *v9;
  _QWORD v11[2];

  v5 = a2;
  v6 = a3;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 88);
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      sub_100703470();
    goto LABEL_9;
  }
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      sub_1007156CC();
    goto LABEL_9;
  }
  v7 = sub_1000306B0(a1, v5);
  if (!v7)
  {
LABEL_9:
    v9 = 0;
    goto LABEL_10;
  }
  v8 = sub_10064E900((uint64_t)v7, v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
LABEL_10:
  sub_100034234((uint64_t)v11);

  return v9;
}

void sub_1006592C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006592E8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v13[2];
  unsigned __int8 v14[16];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (v7)
  {
    if (v8 && (unint64_t)objc_msgSend(v8, "length") < 0x401)
    {
      if ((unint64_t)objc_msgSend(v9, "length") <= 0x400)
      {
        v11 = sub_1000306B0(a1, v7);
        if (v11)
        {
          v13[0] = 0;
          v13[1] = 0;
          sub_10003415C((uint64_t)v13, a1 + 88);
          if (sub_10064E988((uint64_t)v11, v8, v9))
          {
            sub_100034264((uint64_t)v13);
            sub_100030BCC(v14, v7);
            sub_100030BD0(a1, v14);
          }
          sub_100034234((uint64_t)v13);
          v10 = 0;
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
            sub_1007156F8();
          v10 = 2;
        }
      }
      else
      {
        v10 = 11;
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
        sub_1007156CC();
      v10 = 10;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      sub_100703470();
    v10 = 1;
  }

  return v10;
}

void sub_100659490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1006594CC(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  _QWORD *v6;
  __int128 v7;
  _QWORD v8[2];

  v5 = a2;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
  {
    if (*((char *)v6 + 231) < 0)
    {
      sub_10003430C((_BYTE *)a3, (void *)v6[26], v6[27]);
    }
    else
    {
      v7 = *((_OWORD *)v6 + 13);
      *(_QWORD *)(a3 + 16) = v6[28];
      *(_OWORD *)a3 = v7;
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  sub_100034234((uint64_t)v8);

}

void sub_100659568(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100659588(uint64_t a1, void *a2, const std::string *a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];
  unsigned __int8 v8[16];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
  {
    std::string::operator=((std::string *)(v6 + 26), a3);
    sub_100030BCC(v8, v5);
    sub_100030BD0(a1, v8);
  }
  sub_100034234((uint64_t)v7);

}

void sub_10065963C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_100659668(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _BOOL8 v6;
  _QWORD v8[2];

  v3 = a2;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
  {
    if (*((char *)v4 + 231) < 0)
      v5 = v4[27];
    else
      v5 = *((unsigned __int8 *)v4 + 231);
    v6 = v5 != 0;
  }
  else
  {
    v6 = 0;
  }
  sub_100034234((uint64_t)v8);

  return v6;
}

void sub_1006596E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

id sub_100659708(uint64_t a1, unsigned __int8 *a2)
{
  id v2;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  char v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void **v15;
  unsigned __int8 *v16;
  int v17;
  id v18;
  void *__p[2];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[2];
  _BYTE v27[128];

  v26[0] = 0;
  v26[1] = 0;
  sub_10003415C((uint64_t)v26, a1 + 88);
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v5 = *(id *)(a1 + 168);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (!v6)
    goto LABEL_34;
  v7 = *(_QWORD *)v23;
  do
  {
    v8 = 0;
    do
    {
      if (*(_QWORD *)v23 != v7)
        objc_enumerationMutation(v5);
      v9 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v8);
      v10 = (char *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v9, __p[0]);
      __p[0] = 0;
      __p[1] = 0;
      v21 = 0;
      if (v10[231] < 0)
      {
        sub_10003430C(__p, *((void **)v10 + 26), *((_QWORD *)v10 + 27));
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v10 + 13);
        v21 = *((_QWORD *)v10 + 28);
      }
      v11 = HIBYTE(v21);
      v12 = __p[1];
      if (v21 >= 0)
        v12 = (void *)HIBYTE(v21);
      if (!v12)
        goto LABEL_26;
      v13 = a2[23];
      v14 = (v13 & 0x80u) == 0 ? (void *)a2[23] : (void *)*((_QWORD *)a2 + 1);
      if (v14 != v12)
        goto LABEL_26;
      if (v21 >= 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, v15, *((_QWORD *)a2 + 1)))
          goto LABEL_26;
      }
      else if (a2[23])
      {
        v16 = a2;
        while (*v16 == *(unsigned __int8 *)v15)
        {
          ++v16;
          v15 = (void **)((char *)v15 + 1);
          if (!--v13)
            goto LABEL_31;
        }
LABEL_26:
        v17 = 1;
        if ((v11 & 0x80) == 0)
          goto LABEL_28;
LABEL_27:
        operator delete(__p[0]);
        goto LABEL_28;
      }
LABEL_31:
      v2 = v9;
      v17 = 0;
      if (v21 < 0)
        goto LABEL_27;
LABEL_28:
      if (!v17)
        goto LABEL_35;
      v8 = (char *)v8 + 1;
    }
    while (v8 != v6);
    v18 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    v6 = v18;
  }
  while (v18);
LABEL_34:
  v2 = 0;
LABEL_35:

  sub_100034234((uint64_t)v26);
  return v2;
}

void sub_100659914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100659944(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((unsigned __int16 *)v4 + 128);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_1006599AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006599CC(uint64_t a1, void *a2, __int16 a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_WORD *)v6 + 128) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_100659A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100659A54(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    sub_100655F30(a1, 1);
}

uint64_t sub_100659A64(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((unsigned __int8 *)v4 + 258);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100659ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100659AEC(uint64_t a1, void *a2, int a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  if ((a3 - 1) >= 7 && os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
    sub_100715724();
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_BYTE *)v6 + 258) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_100659B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100659BAC(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((unsigned __int8 *)v4 + 259);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100659C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100659C34(uint64_t a1, void *a2, unsigned int a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  if (a3 >= 4 && os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
    sub_100715784();
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_BYTE *)v6 + 259) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_100659CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100659CF0(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  BOOL v5;
  uint64_t v6;
  _QWORD v8[2];

  v3 = a2;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((_BYTE *)v4 + 264) != 0;
  v6 = (v4 != 0) & v5;
  sub_100034234((uint64_t)v8);

  return v6;
}

void sub_100659D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100659D88(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD v14[2];

  v5 = a2;
  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 88);
  v6 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEBUG))
    sub_1007157E4(a3, v6, v7, v8, v9, v10, v11, v12);
  v13 = sub_1000306B0(a1, v5);
  if (v13)
    *((_BYTE *)v13 + 264) = a3;
  sub_100034234((uint64_t)v14);

}

void sub_100659E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100659E3C(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  BOOL v5;
  uint64_t v6;
  _QWORD v8[2];

  v3 = a2;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((_BYTE *)v4 + 265) != 0;
  v6 = (v4 != 0) & v5;
  sub_100034234((uint64_t)v8);

  return v6;
}

void sub_100659EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100659ED4(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_BYTE *)v6 + 265) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_100659F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100659F5C(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  char v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((_BYTE *)v4 + 385);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100659FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100659FE4(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_BYTE *)v6 + 385) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10065A04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065A06C(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_BYTE *)v6 + 384) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10065A0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_10065A0F4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((unsigned __int16 *)v4 + 197);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_10065A15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065A17C(uint64_t a1, void *a2, __int16 a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_WORD *)v6 + 197) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10065A1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065A204(uint64_t a1, void *a2, char a3)
{
  id v4;
  id v5;
  void *i;
  id v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  id v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  void *v17;
  NSObject *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[2];
  uint8_t buf[4];
  id v30;
  __int16 v31;
  void *v32;
  _BYTE v33[128];

  v28[0] = 0;
  v28[1] = 0;
  v21 = a2;
  sub_10003415C((uint64_t)v28, a1 + 88);
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v4 = v21;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v24, v33, 16);
  if (v5)
  {
    v22 = *(_QWORD *)v25;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v22)
          objc_enumerationMutation(v4);
        v7 = *(id *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
        v8 = objc_autoreleasePoolPush();
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v7));
        v10 = objc_msgSend(v9, "unsignedLongLongValue");

        v11 = qword_100999810;
        if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_INFO))
        {
          v12 = sub_100021770((uint64_t)v10);
          v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
          *(_DWORD *)buf = 138543618;
          v30 = v7;
          v31 = 2114;
          v32 = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Attempting to load paired device \"%{public}@\" (%{public}@) from the device cache", buf, 0x16u);

        }
        v14 = sub_10033F924(*(_QWORD *)(a1 + 248), v7, (uint64_t)v10, a3);
        if (v14)
        {
          sub_100011488(a1, v14);
          v15 = qword_100999810;
          if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
          {
            v16 = sub_100021770((uint64_t)v10);
            v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
            *(_DWORD *)buf = 138543618;
            v30 = v7;
            v31 = 2114;
            v32 = v17;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Successfully reconciled paired device \"%{public}@\" (%{public}@)", buf, 0x16u);

          }
        }
        else
        {
          v18 = qword_100999810;
          if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
          {
            v19 = sub_100021770((uint64_t)v10);
            v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
            *(_DWORD *)buf = 138543362;
            v30 = v20;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "could not find (%{public}@) in the paired devices database", buf, 0xCu);

          }
        }
        objc_autoreleasePoolPop(v8);

      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v24, v33, 16);
    }
    while (v5);
  }

  sub_100034234((uint64_t)v28);
}

void sub_10065A4CC(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  va_list va;

  va_start(va, a17);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10065A530(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  id v5;
  void *v6;
  _BOOL8 v7;

  v4 = *(_QWORD *)(a1 + 248);
  v5 = sub_100030DF4(a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = sub_10033FB3C(v4, v6, a3) != 0;

  return v7;
}

void sub_10065A588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10065A598(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *v7;
  void *v8;
  _QWORD v9[2];

  v5 = a2;
  v6 = a3;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v7 = sub_1000306B0(a1, v5);
  v8 = (void *)v7[1];
  v7[1] = v6;

  sub_100034234((uint64_t)v9);
}

void sub_10065A60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

id sub_10065A630(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v6[2];

  v3 = a2;
  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 88);
  v4 = (id)sub_1000306B0(a1, v3)[1];
  sub_100034234((uint64_t)v6);

  return v4;
}

void sub_10065A694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_10065A6B4@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *i;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  NSObject *v20;
  uint8_t v22[16];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[2];
  _BYTE v28[128];

  v27[0] = 0;
  v27[1] = 0;
  sub_10003415C((uint64_t)v27, a1 + 88);
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v12 = *(id *)(a1 + 168);
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v13)
  {
    v14 = (v6 << 40) | (v7 << 32) | (v8 << 24) | (v9 << 16) | (v10 << 8) | v11;
    v15 = *(_QWORD *)v24;
    while (2)
    {
      for (i = 0; i != v13; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v15)
          objc_enumerationMutation(v12);
        v17 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        v18 = objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v17);
        v19 = v18[3];
        if (!v19)
          v19 = v18[2];
        if (v14 == v19)
        {
          sub_100030BCC(a3, v17);

          return sub_100034234((uint64_t)v27);
        }
      }
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
      if (v13)
        continue;
      break;
    }
  }

  v20 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "BD Addr not in deviceMap, generating new UUID", v22, 2u);
  }
  uuid_clear(a3);
  return sub_100034234((uint64_t)v27);
}

void sub_10065A87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10065A8B4(uint64_t a1@<X0>, void *a2@<X1>, unsigned __int8 *a3@<X8>)
{
  id v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  NSObject *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  unsigned __int8 *v19;
  id v20;
  void *v21;
  unsigned __int8 v22;
  id v23;
  id v24;
  _QWORD v25[2];
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  id v29;
  _QWORD v30[2];

  v5 = a2;
  v25[0] = 0;
  v25[1] = 0;
  sub_10003415C((uint64_t)v25, a1 + 88);
  v30[0] = 0;
  v30[1] = 0;
  sub_100030BCC(v30, v5);
  v6 = sub_10065AC44(v30);
  v7 = v6;
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      sub_1007159AC();
    goto LABEL_30;
  }
  v8 = *(_QWORD **)(a1 + 184);
  if (v8)
  {
    v9 = a1 + 184;
    do
    {
      v10 = v8[4];
      v11 = v10 >= v6;
      if (v10 >= v6)
        v12 = v8;
      else
        v12 = v8 + 1;
      if (v11)
        v9 = (uint64_t)v8;
      v8 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 != a1 + 184 && v6 >= *(_QWORD *)(v9 + 32))
    {
      v19 = (unsigned __int8 *)(v9 + 40);
      v20 = sub_100030DF4((const unsigned __int8 *)(v9 + 40));
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      v22 = objc_msgSend(v5, "isEqual:", v21);

      if ((v22 & 1) != 0)
      {
        sub_100030E34(a1, v19);
        uuid_copy(a3, v19);
        goto LABEL_31;
      }
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
      {
        v23 = sub_100021770(v7);
        v24 = (id)objc_claimAutoreleasedReturnValue(v23);
        sub_1003D2DB4(v19, buf);
        sub_1007152D0();
      }
LABEL_30:
      uuid_clear(a3);
      goto LABEL_31;
    }
  }
  v13 = (_QWORD *)sub_10000B0C8(*(_QWORD *)(a1 + 248), v5);
  v14 = qword_100999810;
  if (!v13)
  {
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEBUG))
    {
      v18 = sub_100021770(v7);
      objc_claimAutoreleasedReturnValue(v18);
      sub_100715A10();
    }
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    v15 = sub_100021770(v7);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    *(_DWORD *)buf = 138543618;
    v27 = v16;
    v28 = 2114;
    v29 = v5;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Address \"%{public}@\" is already associated with device \"%{public}@\"", buf, 0x16u);

  }
  if (objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v5)
    && os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
  {
    v17 = sub_100021770(v7);
    objc_claimAutoreleasedReturnValue(v17);
    sub_100715258();
  }
  sub_100030BCC(a3, *v13);
LABEL_31:
  sub_100034234((uint64_t)v25);

}

void sub_10065ABB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_10065AC44(const void *a1)
{
  unsigned __int8 v2[8];

  *(_DWORD *)&v2[3] = 0;
  *(_DWORD *)v2 = 0;
  if (sub_10011496C(a1, 16, (uint64_t)v2, 7))
    return 0;
  else
    return ((unint64_t)v2[1] << 40) | ((unint64_t)v2[2] << 32) | ((unint64_t)v2[3] << 24) | ((unint64_t)v2[4] << 16) | ((unint64_t)v2[5] << 8) | v2[6] | ((unint64_t)v2[0] << 48);
}

void sub_10065ACB8(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void **v10;
  void *__p[2];
  char v12;
  uint8_t out[40];

  if ((a3 & 0xFF000000000000) != 0)
  {
    v6 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
    {
      memset(out, 0, 37);
      uuid_unparse_upper(a2, (char *)out);
      sub_100091AE8(__p, (char *)out);
      if (v12 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)out = 136446210;
      *(_QWORD *)&out[4] = v10;
      _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Trying to remove duplicates of an address that is not public for device \"%{public}s\"", out, 0xCu);
      if (v12 < 0)
        operator delete(__p[0]);
    }
  }
  v7 = *(_QWORD *)(a1 + 248);
  v8 = sub_100030DF4(a2);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  sub_10033FA5C(v7, a3, v9);

}

void sub_10065ADEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10065AE04(uint64_t a1, const unsigned __int8 *a2)
{
  id v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v4 = sub_100030DF4(a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = sub_1000306B0(a1, v5);

  if (v6)
    v7 = v6[3];
  else
    v7 = 0;
  sub_100034234((uint64_t)v9);
  return v7;
}

void sub_10065AE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10065AE9C(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  id v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  NSObject *v15;
  id v16;
  id v17;
  void **v18;
  uint64_t *v19;
  void *__p[2];
  char v22;
  _QWORD v23[3];
  _QWORD v24[2];
  unint64_t v25;
  uint8_t buf[4];
  id v27;
  __int16 v28;
  void **v29;
  char out[40];

  v24[1] = 0;
  v25 = a3;
  v24[0] = 0;
  sub_10003415C((uint64_t)v24, a1 + 88);
  v6 = sub_100030DF4(a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = sub_1000306B0(a1, v7);

  if (v8)
  {
    if (BYTE6(a3)
      && (BYTE6(a3) != 1 || (~a3 & 0xC00000000000) != 0)
      && os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
    {
      sub_1003D2DB4(a2, v23);
      sub_100715A4C();
    }
    v9 = v8[3];
    if (v9)
    {
      if (v9 != v8[2])
      {
        v10 = *(_QWORD **)(a1 + 184);
        if (v10)
        {
          v11 = (uint64_t *)(a1 + 184);
          do
          {
            v12 = v10[4];
            v13 = v12 >= a3;
            if (v12 >= a3)
              v14 = v10;
            else
              v14 = v10 + 1;
            if (v13)
              v11 = v10;
            v10 = (_QWORD *)*v14;
          }
          while (*v14);
          if (v11 != (uint64_t *)(a1 + 184) && v11[4] <= a3)
          {
            sub_1000040CC((uint64_t **)(a1 + 176), v11);
            operator delete(v11);
          }
        }
      }
    }
    v15 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_INFO))
    {
      v16 = sub_100021770(a3);
      v17 = (id)objc_claimAutoreleasedReturnValue(v16);
      memset(out, 0, 37);
      uuid_unparse_upper(a2, out);
      sub_100091AE8(__p, out);
      if (v22 >= 0)
        v18 = __p;
      else
        v18 = (void **)__p[0];
      *(_DWORD *)buf = 138543618;
      v27 = v17;
      v28 = 2082;
      v29 = v18;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Now using resolved address \"%{public}@\" for resolvable device \"%{public}s\"", buf, 0x16u);
      if (v22 < 0)
        operator delete(__p[0]);

    }
    v8[3] = a3;
    sub_100030BD0(a1, a2);
    *(_QWORD *)out = &v25;
    v19 = sub_100646BA0(a1 + 176, &v25, (uint64_t)&unk_100740F58, (_QWORD **)out);
    uuid_copy((unsigned __int8 *)v19 + 40, a2);
  }
  return sub_100034234((uint64_t)v24);
}

void sub_10065B10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10065B14C(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  id v5;
  uint64_t i;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  char v14;
  char v15;
  NSObject *v16;
  const void *v17;
  void *v18[2];
  char v19;
  void *__p[2];
  char v21;
  uint8_t buf[4];
  const void *v23;

  v5 = a2;
  for (i = 0; i != 5; ++i)
  {
    v7 = (char *)&unk_100993F58 + 32 * i;
    v8 = a3[23];
    if ((v8 & 0x80u) == 0)
      v9 = a3[23];
    else
      v9 = *((_QWORD *)a3 + 1);
    v10 = v7[23];
    v11 = (char)v10;
    if ((v10 & 0x80u) != 0)
      v10 = *((_QWORD *)v7 + 1);
    if (v9 != v10)
      continue;
    if (v11 >= 0)
      v12 = (unsigned __int8 *)&unk_100993F58 + 32 * i;
    else
      v12 = *(unsigned __int8 **)v7;
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a3, v12, *((_QWORD *)a3 + 1)))
        continue;
    }
    else if (a3[23])
    {
      v13 = a3;
      while (*v13 == *v12)
      {
        ++v13;
        ++v12;
        if (!--v8)
          goto LABEL_18;
      }
      continue;
    }
LABEL_18:
    sub_100091AE8(__p, "LEPhyDenylist");
    v14 = sub_10000628C(a1, v5, (uint64_t)__p);
    v15 = v14;
    if (v21 < 0)
    {
      operator delete(__p[0]);
      if ((v15 & 1) != 0)
        continue;
    }
    else if ((v14 & 1) != 0)
    {
      continue;
    }
    sub_100091AE8(v18, "LEPhyDenylist");
    sub_1006576F0(a1, v5, (unsigned __int8 *)v18);
    if (v19 < 0)
      operator delete(v18[0]);
    v16 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
    {
      v17 = a3;
      if ((char)a3[23] < 0)
        v17 = *(const void **)a3;
      *(_DWORD *)buf = 136315138;
      v23 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "LEPhyDenylist: set tag for %s", buf, 0xCu);
    }
  }

}

void sub_10065B340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

BOOL sub_10065B384(uint64_t a1, void *a2, _DWORD *a3)
{
  id v5;
  _QWORD *v6;
  _BOOL8 v7;
  _QWORD v9[2];

  v5 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *a3 = *((_DWORD *)v6 + 32);
  v7 = v6 != 0;
  sub_100034234((uint64_t)v9);

  return v7;
}

void sub_10065B3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_10065B41C(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  char v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((_BYTE *)v4 + 476);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_10065B484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065B4A4(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
  {
    *((_BYTE *)v6 + 476) = a3;
    sub_100666900((uint64_t)v6, a3);
  }
  sub_100034234((uint64_t)v7);

}

void sub_10065B514(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10065B534(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_BYTE *)v6 + 163) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10065B59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065B5BC(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  id v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[4];
  id v14;
  uint64_t v15;
  void *__p[2];
  char v17;
  _QWORD v18[2];

  v7 = a2;
  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 88);
  v8 = sub_1000306B0(a1, v7);
  v9 = v8;
  if (v8)
  {
    sub_10064D798((uint64_t)v8, a3, a4);
    if (a3)
    {
      sub_100091AE8(__p, "DoNotAutoConnect");
      v10 = sub_10001F2AC((uint64_t)(v9 + 22), (const void **)__p);
      v11 = v9 + 23;
      if (v17 < 0)
        operator delete(__p[0]);
      if (v11 != (_QWORD *)v10)
        sub_100653B18(a1, v7, CFSTR("DoNotAutoConnect"));
    }
    else if (*((_BYTE *)v9 + 488))
    {
      v12 = sub_1000419F4();
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_10065B740;
      v13[3] = &unk_100918868;
      v15 = a1;
      v14 = v7;
      sub_100475CEC(v12, 1000, v13);

    }
  }
  sub_100034234((uint64_t)v18);

}

void sub_10065B6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  uint64_t v22;

  sub_100034234(v22 - 64);
  _Unwind_Resume(a1);
}

void sub_10065B740(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = 138543362;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "deleting pending device %{public}@", (uint8_t *)&v5, 0xCu);
  }
  sub_100653040(v2, *(void **)(a1 + 32));
}

void sub_10065B7FC(uint64_t a1, void *a2, int a3)
{
  sub_10065B5BC(a1, a2, a3, 0);
}

void sub_10065B804(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_BYTE *)v6 + 165) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10065B86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065B88C(uint64_t a1, void *a2, _BYTE *a3, _BYTE *a4, char *a5)
{
  id v9;
  _QWORD *v10;
  BOOL v11;
  char v12;
  _QWORD v13[2];

  v9 = a2;
  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 88);
  v10 = sub_1000306B0(a1, v9);
  if (v10)
  {
    *a3 = *((_BYTE *)v10 + 165);
    *a4 = *((_BYTE *)v10 + 529);
    if (*((_BYTE *)v10 + 528))
      v11 = v10[65] == 0;
    else
      v11 = 1;
    v12 = !v11;
    *a5 = v12;
  }
  sub_100034234((uint64_t)v13);

}

void sub_10065B928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_10065B948(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  id *v6;
  int v7;
  id v8;
  void *v9;
  BOOL v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[2];
  _BYTE v17[128];

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 88);
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = *(id *)(a1 + 168);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v13;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v13 != v4)
          objc_enumerationMutation(v2);
        v6 = (id *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v5), (_QWORD)v12);
        v7 = *((unsigned __int8 *)v6 + 528);
        v8 = v6[65];
        v9 = v8;
        if (v7)
          v10 = v8 == 0;
        else
          v10 = 1;
        if (!v10)
          sub_10064C02C((uint64_t *)v6, 1);

        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v17, 16);
    }
    while (v3);
  }

  return sub_100034234((uint64_t)v16);
}

void sub_10065BA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  va_list va;

  va_start(va, a10);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10065BAC8(uint64_t a1, void *a2, int a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    sub_10064D7DC((uint64_t)v6, a3);
  sub_100034234((uint64_t)v7);

}

void sub_10065BB34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10065BB54(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((unsigned int *)v4 + 42);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_10065BBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065BBDC(uint64_t a1, void *a2, __int16 a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_WORD *)v6 + 86) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10065BC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_10065BC64(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((unsigned __int16 *)v4 + 86);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_10065BCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065BCEC(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_BYTE *)v6 + 232) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10065BD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_10065BD74(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _BOOL8 v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((_BYTE *)v4 + 232) != 0;
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_10065BDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065BE04(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_BYTE *)v6 + 233) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10065BE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_10065BE8C(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _BOOL8 v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((_BYTE *)v4 + 233) != 0;
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_10065BEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065BF1C(uint64_t a1, void *a2, __int16 a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_WORD *)v6 + 176) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10065BF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_10065BFA4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((unsigned __int16 *)v4 + 176);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_10065C00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065C02C(uint64_t a1, void *a2, int a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_DWORD *)v6 + 93) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10065C094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065C0B4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  _QWORD v8[2];

  v5 = a2;
  v6 = a3;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 88);
  v7 = (id *)sub_1000306B0(a1, v5);
  if (v7)
    objc_storeStrong(v7 + 47, a3);
  sub_100034234((uint64_t)v8);

}

void sub_10065C130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

id sub_10065C154(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  id v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = (id)v4[47];
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_10065C1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

id sub_10065C1E4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  int v7;
  NSString *v8;
  void *v9;
  _QWORD v11[2];

  v3 = a2;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 88);
  v4 = (id)sub_1000306B0(a1, v3)[47];
  v5 = v4;
  if (v4 && objc_msgSend(v4, "count"))
  {
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "componentsJoinedByString:", CFSTR(",")));
  }
  else
  {
    v7 = sub_1006589A8(a1, v3);
    v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sub_100036798(v7));
    v6 = objc_claimAutoreleasedReturnValue(v8);
  }
  v9 = (void *)v6;

  sub_100034234((uint64_t)v11);
  return v9;
}

void sub_10065C2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10065C2D8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  _QWORD *v10;
  _QWORD v11[2];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 88);
  v10 = sub_1000306B0(a1, v7);
  if (v10)
    sub_10064B574((uint64_t)v10, v8, v9);
  sub_100034234((uint64_t)v11);

}

void sub_10065C364(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10065C38C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *v7;
  _QWORD v8[2];

  v5 = a2;
  v6 = a3;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 88);
  v7 = sub_1000306B0(a1, v5);
  if (v7)
    sub_10064B630((uint64_t)v7, v6);
  sub_100034234((uint64_t)v8);

}

void sub_10065C404(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_10065C428(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *v7;
  id v8;
  _QWORD v10[2];

  v5 = a2;
  v6 = a3;
  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 88);
  v7 = sub_1000306B0(a1, v5);
  if (v7)
    v8 = sub_10064B864((uint64_t)v7, v6);
  else
    v8 = 0;
  sub_100034234((uint64_t)v10);

  return v8;
}

void sub_10065C4B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10065C4D4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  _QWORD *v10;
  _QWORD v11[2];

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 88);
  v10 = sub_1000306B0(a1, v7);
  if (v10)
    sub_10064B90C((uint64_t)v10, v8, v9);
  sub_100034234((uint64_t)v11);

}

void sub_10065C560(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10065C588(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *v7;
  _QWORD v8[2];

  v5 = a2;
  v6 = a3;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 88);
  v7 = sub_1000306B0(a1, v5);
  if (v7)
    sub_10064B9C8((uint64_t)v7, v6);
  sub_100034234((uint64_t)v8);

}

void sub_10065C600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_10065C624(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  id v5;
  void *v6;
  _QWORD v8[2];

  v3 = a2;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
  {
    v5 = sub_10064BA48((uint64_t)v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  }
  else
  {
    v6 = 0;
  }
  sub_100034234((uint64_t)v8);

  return v6;
}

void sub_10065C694(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10065C6B4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD *v6;
  id v7;
  _QWORD v9[2];

  v5 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    v7 = sub_10064BCA0((uint64_t)v6, a3);
  else
    v7 = 0;
  sub_100034234((uint64_t)v9);

  return v7;
}

void sub_10065C730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10065C750(uint64_t a1, void *a2, char a3, int a4, unsigned int a5)
{
  id v9;
  _QWORD *v10;
  NSObject *v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD v16[2];
  uint8_t buf[4];
  id v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unsigned int v22;

  v9 = a2;
  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 88);
  v10 = sub_1000306B0(a1, v9);
  if (v10)
  {
    v15 = 0;
    sub_10011344C((_DWORD *)&v15 + 1, (__darwin_suseconds_t *)&v15);
    v11 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543874;
      v18 = v9;
      v19 = 1024;
      v20 = HIDWORD(v15);
      v21 = 1024;
      v22 = a5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Device \"%{public}@\" set last connected time to %d s offset %d ms", buf, 0x18u);
    }
    if (a4 == 1)
    {
      *((_DWORD *)v10 + 36) = HIDWORD(v15);
    }
    else if (a4 == 2)
    {
      v12 = *(_DWORD *)(a1 + 156) + 1;
      *(_DWORD *)(a1 + 156) = v12;
      v13 = HIDWORD(v15);
      v14 = HIDWORD(v15) - a5 / 0x3E8;
      *((_DWORD *)v10 + 34) = v12;
      *((_DWORD *)v10 + 35) = v14;
      if ((a3 & 1) == 0)
        v10[19] = 1000 * v13 - a5 + (int)v15 / 1000;
    }
    sub_100030BCC(buf, v9);
    sub_100030BD0(a1, buf);
  }
  sub_100034234((uint64_t)v16);

}

void sub_10065C904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_10065C934(uint64_t a1, void *a2, int a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_DWORD *)v6 + 65) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10065C99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065C9BC(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void **v8;
  void *__p[2];
  char v10;
  _QWORD v11[2];
  uint8_t buf[4];
  id v13;
  __int16 v14;
  void **v15;
  char __str[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = a2;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
  {
    *(_QWORD *)__str = 0;
    sub_10004AD30((uint64_t)__str);
    v5 = *(int *)__str;
    v6 = *(__int16 *)&__str[4];
    v4[30] = *(int *)__str;
    v4[31] = v6;
    v7 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEBUG))
    {
      v18 = 0u;
      v19 = 0u;
      *(_OWORD *)__str = 0u;
      v17 = 0u;
      snprintf(__str, 0x3FuLL, "%0llu.%0llu", v5, v6);
      sub_100091AE8(__p, __str);
      if (v10 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      *(_DWORD *)buf = 138543618;
      v13 = v3;
      v14 = 2080;
      v15 = v8;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "device %{public}@ added to filter accept list at %s", buf, 0x16u);
      if (v10 < 0)
        operator delete(__p[0]);
    }
  }
  sub_100034234((uint64_t)v11);

}

void sub_10065CB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_10065CB44(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void *__p[2];
  char v10;
  _QWORD v11[2];
  uint8_t buf[4];
  id v13;
  __int16 v14;
  void **v15;
  char __str[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = a2;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
  {
    v4[30] = 0;
    v4[31] = 0;
    v5 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)__str = 0;
      sub_10004AD30((uint64_t)__str);
      v6 = *(int *)__str;
      v7 = *(__int16 *)&__str[4];
      v18 = 0u;
      v19 = 0u;
      *(_OWORD *)__str = 0u;
      v17 = 0u;
      snprintf(__str, 0x3FuLL, "%0llu.%0llu", v6, v7);
      sub_100091AE8(__p, __str);
      if (v10 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      *(_DWORD *)buf = 138543618;
      v13 = v3;
      v14 = 2080;
      v15 = v8;
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "resetDeviceAddedToFilterAcceptListTime for device %{public}@ at %s", buf, 0x16u);
      if (v10 < 0)
        operator delete(__p[0]);
    }
  }
  sub_100034234((uint64_t)v11);

}

void sub_10065CC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_10065CCCC(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
  {
    *(_OWORD *)a3 = *((_OWORD *)v6 + 15);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  sub_100034234((uint64_t)v7);

}

void sub_10065CD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065CD60(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];
  unsigned __int8 v8[16];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
  {
    *((_BYTE *)v6 + 162) = a3;
    sub_100030BCC(v8, v5);
    sub_100030BD0(a1, v8);
  }
  sub_100034234((uint64_t)v7);

}

void sub_10065CE0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_10065CE38(uint64_t a1, uint64_t a2)
{
  id v4;
  int v5;
  char v6;
  BOOL v7;
  int v8;
  id v9;

  v4 = *(id *)(a2 + 520);
  v5 = *(unsigned __int8 *)(a2 + 528);
  v6 = *(_BYTE *)(a2 + 544);
  v9 = v4;
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = *(_DWORD *)(a2 + 532);
    sub_10064BD38(a2, 0, 0, 0);
    sub_10064BD38(a1, v5, v9, v8);
  }
  *(_BYTE *)(a1 + 544) = v6;

}

void sub_10065CEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10065CED8(uint64_t a1, uint64_t a2)
{
  void *v4;
  double Current;
  double v6;
  double v7;
  double v8;
  uint64_t i;
  _QWORD *v10;
  char *v11;
  char *v12;
  char **v13;
  unint64_t v14;
  uint64_t v15;
  double v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  void *v21[3];
  void *__p[2];
  __int128 v23;
  __int128 v24;

  if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
  {
    if (*(char *)(a1 + 127) < 0)
    {
      sub_10003430C(__p, *(void **)(a1 + 104), *(_QWORD *)(a1 + 112));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a1 + 104);
      *(_QWORD *)&v23 = *(_QWORD *)(a1 + 120);
    }
    if (SBYTE7(v23) < 0)
    {
      v4 = __p[1];
      operator delete(__p[0]);
      if (!v4)
        return;
    }
    else if (!BYTE7(v23))
    {
      return;
    }
    Current = CFAbsoluteTimeGetCurrent();
    v6 = *(double *)(a1 + 400);
    v7 = Current;
    if (!*(_BYTE *)(a1 + 164))
      v7 = (double)*(int *)(a1 + 140);
    if (v6 < v7)
      v6 = v7;
    v8 = Current + -7200.0;
    if (v6 >= Current + -7200.0)
    {
      v23 = 0u;
      v24 = 0u;
      *(_OWORD *)__p = 0u;
      sub_100663F3C(a1, (uint64_t)__p);
      for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
      {
        if ((sub_10066A4F8(i + 16, (uint64_t)__p) & 1) != 0)
        {
          if (i != a2)
          {
            v10 = *(_QWORD **)i;
            v10[1] = *(_QWORD *)(i + 8);
            **(_QWORD **)(i + 8) = v10;
            --*(_QWORD *)(a2 + 16);
            sub_10066902C(a2, (void **)i);
          }
          break;
        }
      }
      v11 = sub_10066A598(a2, 0, 0, (uint64_t)__p);
      v12 = v11;
      *(_QWORD *)v11 = a2;
      v13 = *(char ***)(a2 + 8);
      *((_QWORD *)v11 + 1) = v13;
      *v13 = v11;
      v14 = *(_QWORD *)(a2 + 16) + 1;
      *(_QWORD *)(a2 + 8) = v11;
      *(_QWORD *)(a2 + 16) = v14;
      if (v14 < 0x191)
        goto LABEL_35;
      v21[0] = v21;
      v21[1] = v21;
      v21[2] = 0;
      if (v11 == (char *)a2)
        goto LABEL_39;
      v15 = a2;
      do
      {
        v16 = *((double *)v12 + 2);
        if (v16 >= v8)
        {
          if (v16 < Current)
          {
            v15 = (uint64_t)v12;
            Current = *((double *)v12 + 2);
          }
          v12 = (char *)*((_QWORD *)v12 + 1);
        }
        else
        {
          v17 = *(_QWORD **)v12;
          v18 = (char *)*((_QWORD *)v12 + 1);
          v17[1] = v18;
          **((_QWORD **)v12 + 1) = v17;
          --*(_QWORD *)(a2 + 16);
          sub_10066902C(a2, (void **)v12);
          v12 = v18;
        }
      }
      while (v12 != (char *)a2);
      v19 = *(_QWORD *)(a2 + 16);
      if (v19 <= 0x190)
        goto LABEL_34;
      if (v15 == a2)
      {
LABEL_39:
        if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
          sub_100715A98();
      }
      else
      {
        v20 = *(_QWORD **)v15;
        v20[1] = *(_QWORD *)(v15 + 8);
        **(_QWORD **)(v15 + 8) = v20;
        *(_QWORD *)(a2 + 16) = v19 - 1;
        sub_10066902C(a2, (void **)v15);
      }
LABEL_34:
      sub_100668FCC(v21);
LABEL_35:
      if (SHIBYTE(v23) < 0)
        operator delete(__p[1]);
    }
  }
}

void sub_10065D138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_100668FCC(&a10);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10065D168(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 8))(a2, *(_QWORD *)(a1 + 32));
}

void sub_10065D180(uint64_t a1, void *a2, char a3)
{
  id v4;
  void *v5;
  _QWORD *v6;
  id v7;

  v4 = a2;
  v7 = v4;
  if (qword_1009778C8 == -1)
  {
    v5 = v4;
  }
  else
  {
    dispatch_once(&qword_1009778C8, &stru_10093E890);
    v5 = v7;
  }
  v6 = sub_1000306B0((uint64_t)off_1009778C0, v5);
  if (v6)
    *((_BYTE *)v6 + 237) = a3;

}

void sub_10065D1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL sub_10065D208(uint64_t a1, void *a2)
{
  id v2;
  _QWORD *v3;
  _BOOL8 v4;

  v2 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093E890);
  v3 = sub_1000306B0((uint64_t)off_1009778C0, v2);
  if (v3)
    v4 = *((_BYTE *)v3 + 237) != 0;
  else
    v4 = 0;

  return v4;
}

void sub_10065D280(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10065D290(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  _QWORD *v4;
  id v5;

  v2 = a2;
  v5 = v2;
  if (qword_1009778C8 == -1)
  {
    v3 = v2;
  }
  else
  {
    dispatch_once(&qword_1009778C8, &stru_10093E890);
    v3 = v5;
  }
  v4 = sub_1000306B0((uint64_t)off_1009778C0, v3);
  if (v4)
    sub_10064A5E4((uint64_t)v4);

}

void sub_10065D300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_10065D314(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  void *__p[2];
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[2];
  _BYTE v19[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 88);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = *(id *)(a1 + 168);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v15;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v15 != v5)
          objc_enumerationMutation(v3);
        v7 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
        v8 = (char *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v7);
        sub_100091AE8(__p, "HasBuiltinServices");
        v9 = sub_10001F2AC((uint64_t)(v8 + 176), (const void **)__p);
        if (v13 < 0)
          operator delete(__p[0]);
        if (v8 + 184 != (char *)v9)
          objc_msgSend(v2, "addObject:", v7);
      }
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v14, v19, 16);
    }
    while (v4);
  }

  sub_100034264((uint64_t)v18);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "indexesOfObjectsPassingTest:", &stru_10093E7C0));
  objc_msgSend(v2, "removeObjectsAtIndexes:", v10);

  sub_100034234((uint64_t)v18);
  return v2;
}

void sub_10065D4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;
  void *v25;

  sub_100034234((uint64_t)&a24);
  _Unwind_Resume(a1);
}

BOOL sub_10065D530(id a1, NSUUID *a2, unint64_t a3, BOOL *a4)
{
  NSUUID *v4;
  BOOL v5;

  v4 = a2;
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10093E8D0);
  v5 = !sub_100030864(qword_1009778B0, v4);

  return v5;
}

void sub_10065D594(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10065D5A4(uint64_t a1, void *a2, int a3)
{
  id v4;
  _QWORD *v5;
  NSObject *v6;
  int v7;
  id v8;

  v4 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093E890);
  v5 = sub_1000306B0((uint64_t)off_1009778C0, v4);
  if (v5)
  {
    sub_10064A5A4(v5, a3);
  }
  else
  {
    v6 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
    {
      v7 = 138543362;
      v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "updateRSSIStatForDevice - device not available %{public}@", (uint8_t *)&v7, 0xCu);
    }
  }

}

void sub_10065D698(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_10065D6B0(uint64_t a1, void *a2, int a3)
{
  id v4;
  _QWORD *v5;
  NSObject *v6;
  int v7;
  id v8;

  v4 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093E890);
  v5 = sub_1000306B0((uint64_t)off_1009778C0, v4);
  if (v5)
  {
    sub_10064A5C4(v5, a3);
  }
  else
  {
    v6 = qword_100999810;
    if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
    {
      v7 = 138543362;
      v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "updatePERStatForDevice - device not available %{public}@", (uint8_t *)&v7, 0xCu);
    }
  }

}

void sub_10065D7A4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_10065D7BC(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_BYTE *)v6 + 609) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10065D824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065D844(uint64_t a1, void *a2, __int16 a3)
{
  id v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  __int16 v9;

  v4 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093E890);
  *((_WORD *)sub_1000306B0((uint64_t)off_1009778C0, v4) + 16) = a3;
  v5 = sub_10006BBEC();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10065D930;
  v7[3] = &unk_10093E7E8;
  v6 = v4;
  v8 = v6;
  v9 = a3;
  sub_100041A34(v5, v7);

}

void sub_10065D910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_10065D930(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100016B48();
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v2 + 88))(v2, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40), 1);
}

void sub_10065D964(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;

  v3 = a2;
  v4 = sub_10065D314(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (objc_msgSend(v5, "indexOfObject:", v3) != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v6 = (char *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v3);
    sub_100091AE8(__p, "HasBuiltinServices");
    v7 = sub_10001F2AC((uint64_t)(v6 + 176), (const void **)__p);
    v8 = v6 + 184;
    if (v12 < 0)
      operator delete(__p[0]);
    if (v8 != (char *)v7)
    {
      sub_100091AE8(v9, "DoNotAutoConnect");
      sub_1006576F0(a1, v3, (unsigned __int8 *)v9);
      if (v10 < 0)
        operator delete(v9[0]);
    }
  }

}

void sub_10065DA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10065DA94(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_BYTE *)v6 + 234) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10065DAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_10065DB1C(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _BOOL8 v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((_BYTE *)v4 + 234) != 0;
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_10065DB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065DBAC(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_BYTE *)v6 + 235) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10065DC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_10065DC34(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _BOOL8 v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((_BYTE *)v4 + 235) != 0;
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_10065DCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065DCC4(uint64_t a1, void *a2, int a3)
{
  id v5;
  _QWORD *v6;
  int v7;
  NSObject *v8;
  _QWORD v9[2];
  uint8_t buf[4];
  id v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;

  v5 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
  {
    v7 = *((unsigned __int8 *)v6 + 236);
    if ((*((_BYTE *)v6 + 236) != 0) != a3)
    {
      *((_BYTE *)v6 + 236) = a3;
      v8 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543874;
        v11 = v5;
        v12 = 1024;
        v13 = v7;
        v14 = 1024;
        v15 = a3;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "AutoReconnectEnabled changed - device %{public}@ enabled updated from %d to %d", buf, 0x18u);
      }
    }
  }
  sub_100034234((uint64_t)v9);

}

void sub_10065DDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_10065DDF8(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _BOOL8 v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((_BYTE *)v4 + 236) != 0;
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_10065DE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065DE88(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  const void *v7;
  int64_t v8;
  char *v9;
  _QWORD v10[4];
  id v11;
  os_unfair_lock_s v12;
  void *__p;
  void *__dst;
  uint64_t v15;
  void *v16[2];
  __int128 v17;
  _QWORD v18[2];

  v5 = a2;
  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
  {
    if (!v6[8])
      *((_BYTE *)v6 + 238) = a3;
    *(_OWORD *)v16 = 0u;
    v17 = 0u;
    LODWORD(v16[0]) = *(_DWORD *)(a1 + 288);
    sub_10001FE6C(&v16[1], a1 + 296);
    sub_100034264((uint64_t)v18);
    v12._os_unfair_lock_opaque = (uint32_t)v16[0];
    __dst = 0;
    v15 = 0;
    __p = 0;
    v7 = v16[1];
    v8 = v17 - (unint64_t)v16[1];
    if ((void *)v17 != v16[1])
    {
      sub_1002A3F78(&__p, v8 >> 3);
      v9 = (char *)__dst;
      memmove(__dst, v7, v8);
      __dst = &v9[8 * (v8 >> 3)];
    }
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10065E038;
    v10[3] = &unk_10093E780;
    v11 = v5;
    sub_100668ECC(&v12, v10);
    if (__p)
    {
      __dst = __p;
      operator delete(__p);
    }

    if (v16[1])
    {
      *(void **)&v17 = v16[1];
      operator delete(v16[1]);
    }
  }
  sub_100034234((uint64_t)v18);

}

void sub_10065DFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  void *v21;
  uint64_t v22;

  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  sub_100034234(v22 - 64);

  _Unwind_Resume(a1);
}

uint64_t sub_10065E038(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, uint64_t))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32), 1);
}

void sub_10065E054(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = a2;
  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    sub_10064B4DC((uint64_t)v4, 1);
  sub_100034234((uint64_t)v5);

}

void sub_10065E0B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_10065E0D4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _BOOL8 v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = sub_10064DEE8((uint64_t)v4);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_10065E140(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10065E160(uint64_t a1)
{
  id v2;
  unsigned __int8 v3;
  id v4;
  uint64_t v5;
  void *i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(a1 + 168);
  v3 = 0;
  v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v9;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        v3 += *((_BYTE *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i), (_QWORD)v8)+ 237);
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  return v3;
}

void sub_10065E268(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10065E28C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 8))(a2, *(_QWORD *)(a1 + 32));
}

uint64_t sub_10065E2A4(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint8_t buf[8];
  uint64_t v15;
  _BYTE v16[128];

  v2 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Clearing all records of all devices", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v15 = 0;
  sub_10003415C((uint64_t)buf, a1 + 88);
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v3 = *(id *)(a1 + 168);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v16, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v11;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v3);
        free(objc_msgSend(*(id *)(a1 + 168), "objectForKey:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v6), (_QWORD)v10));
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v16, 16);
    }
    while (v4);
  }

  objc_msgSend(*(id *)(a1 + 168), "removeAllObjects");
  sub_10002074C((_QWORD *)(a1 + 200));
  objc_msgSend(*(id *)(a1 + 280), "removeAllObjects");
  v8 = *(_QWORD **)(a1 + 184);
  v7 = (_QWORD *)(a1 + 184);
  sub_10001A82C((uint64_t)(v7 - 1), v8);
  *(v7 - 1) = v7;
  *v7 = 0;
  v7[1] = 0;
  sub_10033FDFC(v7[8]);
  return sub_100034234((uint64_t)buf);
}

void sub_10065E428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10065E45C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;
  void **v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  void (**v19)(id, _QWORD);
  void *__p[2];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[2];
  _BYTE v27[128];

  v5 = a2;
  v19 = a3;
  v26[0] = 0;
  v26[1] = 0;
  sub_10003415C((uint64_t)v26, a1 + 88);
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v6 = *(id *)(a1 + 168);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v23;
LABEL_3:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v23 != v8)
        objc_enumerationMutation(v6);
      v10 = (char *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * v9));
      v11 = v10;
      v12 = v10 + 208;
      if (v10[231] < 0)
      {
        sub_10003430C(__p, *((void **)v10 + 26), *((_QWORD *)v10 + 27));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v12;
        v21 = *((_QWORD *)v10 + 28);
      }
      if (SHIBYTE(v21) < 0)
      {
        v13 = __p[1];
        operator delete(__p[0]);
        if (v13)
        {
LABEL_13:
          if (v11[231] < 0)
          {
            sub_10003430C(__p, *((void **)v11 + 26), *((_QWORD *)v11 + 27));
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)v12;
            v21 = *((_QWORD *)v12 + 2);
          }
          if (v21 >= 0)
            v14 = __p;
          else
            v14 = (void **)__p[0];
          v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14));
          v16 = objc_msgSend(v5, "isEqualToString:", v15);

          if (SHIBYTE(v21) < 0)
            operator delete(__p[0]);
          if (v16)
          {
            ((void (**)(id, char *))v19)[2](v19, v11);
            v17 = 1;
            goto LABEL_26;
          }
        }
      }
      else if (HIBYTE(v21))
      {
        goto LABEL_13;
      }
      if (v7 == (id)++v9)
      {
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
        if (v7)
          goto LABEL_3;
        break;
      }
    }
  }
  v17 = 0;
LABEL_26:

  sub_100034234((uint64_t)v26);
  return v17;
}

void sub_10065E67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;

  sub_100034234((uint64_t)&a26);
  _Unwind_Resume(a1);
}

BOOL sub_10065E6EC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void (**v6)(id, _QWORD *);
  _QWORD *v7;
  _QWORD v9[2];

  v5 = a2;
  v6 = a3;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v7 = sub_1000306B0(a1, v5);
  if (v7)
    v6[2](v6, v7);
  sub_100034234((uint64_t)v9);

  return v7 != 0;
}

void sub_10065E77C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10065E7A0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id *v8;
  _BYTE v9[22];

  v5 = a2;
  v6 = a3;
  v7 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v9 = 138543618;
    *(_QWORD *)&v9[4] = v5;
    *(_WORD *)&v9[12] = 2114;
    *(_QWORD *)&v9[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@ DIS Manufacturer: %{public}@", v9, 0x16u);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)&v9[8] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v8 = (id *)sub_1000306B0(a1, v5);
  if (v8)
    objc_storeStrong(v8 + 34, a3);
  sub_100034234((uint64_t)v9);

}

void sub_10065E8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

id sub_10065E8D8(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD *v5;
  id v6;
  __int128 v8;

  v3 = a2;
  v4 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v8) = 138543362;
    *(_QWORD *)((char *)&v8 + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "DIS manufacturer name for device %{public}@", (uint8_t *)&v8, 0xCu);
  }
  v8 = 0uLL;
  sub_10003415C((uint64_t)&v8, a1 + 88);
  v5 = sub_1000306B0(a1, v3);
  if (v5)
    v6 = (id)v5[34];
  else
    v6 = 0;
  sub_100034234((uint64_t)&v8);

  return v6;
}

void sub_10065E9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065E9F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id *v8;
  _BYTE v9[22];

  v5 = a2;
  v6 = a3;
  v7 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v9 = 138543618;
    *(_QWORD *)&v9[4] = v5;
    *(_WORD *)&v9[12] = 2114;
    *(_QWORD *)&v9[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@ DIS Model number: %{public}@", v9, 0x16u);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)&v9[8] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v8 = (id *)sub_1000306B0(a1, v5);
  if (v8)
    objc_storeStrong(v8 + 35, a3);
  sub_100034234((uint64_t)v9);

}

void sub_10065EB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065EB2C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id *v8;
  _BYTE v9[22];

  v5 = a2;
  v6 = a3;
  v7 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v9 = 138543618;
    *(_QWORD *)&v9[4] = v5;
    *(_WORD *)&v9[12] = 2112;
    *(_QWORD *)&v9[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@ DIS serial number: %@", v9, 0x16u);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)&v9[8] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v8 = (id *)sub_1000306B0(a1, v5);
  if (v8)
    objc_storeStrong(v8 + 36, a3);
  sub_100034234((uint64_t)v9);

}

void sub_10065EC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065EC64(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id *v8;
  _BYTE v9[22];

  v5 = a2;
  v6 = a3;
  v7 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v9 = 138543618;
    *(_QWORD *)&v9[4] = v5;
    *(_WORD *)&v9[12] = 2114;
    *(_QWORD *)&v9[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@ DIS HW Revision: %{public}@", v9, 0x16u);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)&v9[8] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v8 = (id *)sub_1000306B0(a1, v5);
  if (v8)
    objc_storeStrong(v8 + 37, a3);
  sub_100034234((uint64_t)v9);

}

void sub_10065ED70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065ED9C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id *v8;
  _BYTE v9[22];

  v5 = a2;
  v6 = a3;
  v7 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v9 = 138543618;
    *(_QWORD *)&v9[4] = v5;
    *(_WORD *)&v9[12] = 2114;
    *(_QWORD *)&v9[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@ DIS FW Revision: %{public}@", v9, 0x16u);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)&v9[8] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v8 = (id *)sub_1000306B0(a1, v5);
  if (v8)
    objc_storeStrong(v8 + 38, a3);
  sub_100034234((uint64_t)v9);

}

void sub_10065EEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065EED4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id *v8;
  _BYTE v9[22];

  v5 = a2;
  v6 = a3;
  v7 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v9 = 138543618;
    *(_QWORD *)&v9[4] = v5;
    *(_WORD *)&v9[12] = 2114;
    *(_QWORD *)&v9[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@ DIS SW Revision: %{public}@", v9, 0x16u);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)&v9[8] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v8 = (id *)sub_1000306B0(a1, v5);
  if (v8)
    objc_storeStrong(v8 + 39, a3);
  sub_100034234((uint64_t)v9);

}

void sub_10065EFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065F00C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id *v8;
  _BYTE v9[22];

  v5 = a2;
  v6 = a3;
  v7 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v9 = 138543618;
    *(_QWORD *)&v9[4] = v5;
    *(_WORD *)&v9[12] = 2114;
    *(_QWORD *)&v9[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@ DIS systemID: %{public}@", v9, 0x16u);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)&v9[8] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v8 = (id *)sub_1000306B0(a1, v5);
  if (v8)
    objc_storeStrong(v8 + 40, a3);
  sub_100034234((uint64_t)v9);

}

void sub_10065F118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065F144(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id *v8;
  _BYTE v9[22];

  v5 = a2;
  v6 = a3;
  v7 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v9 = 138543618;
    *(_QWORD *)&v9[4] = v5;
    *(_WORD *)&v9[12] = 2112;
    *(_QWORD *)&v9[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@ DIS regulatory data: %@", v9, 0x16u);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)&v9[8] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v8 = (id *)sub_1000306B0(a1, v5);
  if (v8)
    objc_storeStrong(v8 + 41, a3);
  sub_100034234((uint64_t)v9);

}

void sub_10065F250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065F27C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id *v8;
  id *v9;
  uint64_t v10;
  _BYTE v11[22];

  v5 = a2;
  v6 = a3;
  v7 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v11 = 138543618;
    *(_QWORD *)&v11[4] = v5;
    *(_WORD *)&v11[12] = 2114;
    *(_QWORD *)&v11[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@ DIS PNP ID: %{public}@", v11, 0x16u);
  }
  *(_QWORD *)v11 = 0;
  *(_QWORD *)&v11[8] = 0;
  sub_10003415C((uint64_t)v11, a1 + 88);
  v8 = (id *)sub_1000306B0(a1, v5);
  v9 = v8;
  if (v8)
  {
    if (sub_10064DEE8((uint64_t)v8) && sub_100065478())
    {
      v10 = sub_100065478();
      (*(void (**)(uint64_t, _QWORD, id))(*(_QWORD *)v10 + 576))(v10, *((unsigned __int16 *)v9 + 128), v6);
    }
    objc_storeStrong(v9 + 42, a3);
    sub_10065F3F0(a1, v5);
  }
  sub_100034234((uint64_t)v11);

}

void sub_10065F3C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10065F3F0(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  void *v7;
  char *v8;
  int v9;
  int v10;
  id v12;
  id v13;
  NSObject *v14;
  _BOOL4 v15;
  void **v16;
  void *v17;
  void *v18;
  const void *v19[2];
  char v20;
  _QWORD v21[2];
  char v22;
  void *__p[2];
  char v24;
  uint8_t buf[4];
  id v26;
  __int16 v27;
  const __CFString *v28;
  __int16 v29;
  id v30;

  v3 = a2;
  v4 = sub_1000306B0(a1, v3);
  v5 = (uint64_t)v4;
  if (v4)
  {
    v6 = (id)v4[42];
    v7 = v6;
    if (!v6)
    {
LABEL_27:

      goto LABEL_28;
    }
    v8 = (char *)objc_msgSend(objc_retainAutorelease(v6), "bytes");
    v9 = *(unsigned __int16 *)(v8 + 1);
    v10 = *(unsigned __int16 *)(v8 + 3);
    if (v9 != 1118)
      goto LABEL_26;
    if ((v10 - 2835) > 0xF || ((1 << (v10 - 19)) & 0xE001) == 0)
      goto LABEL_26;
    sub_100091AE8(__p, "IsXboxBLEController");
    sub_10064A050(v5, (uint64_t)__p);
    if (v24 < 0)
      operator delete(__p[0]);
    if (v10 != 2835)
    {
LABEL_26:
      sub_10065F9C0(a1, v3, v9, v10);
      goto LABEL_27;
    }
    v12 = *(id *)(v5 + 304);
    if (!v12)
    {
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
        sub_100715AC4();
      goto LABEL_25;
    }
    v13 = objc_msgSend(CFSTR("5.5.2641"), "compare:options:", v12, 64);
    v14 = qword_100999810;
    v15 = os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT);
    if (v13 == (id)1)
    {
      if (v15)
      {
        *(_DWORD *)buf = 138543874;
        v26 = v12;
        v27 = 2114;
        v28 = CFSTR("5.5.2641");
        v29 = 2114;
        v30 = v3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Firmware version: %{public}@ < minumum firmware version: %{public}@ for device %{public}@", buf, 0x20u);
      }
      sub_100091AE8(v21, "XboxControllerRequiresFWUpdate");
      sub_10064A050(v5, (uint64_t)v21);
      if ((v22 & 0x80000000) == 0)
        goto LABEL_24;
      v16 = (void **)v21;
    }
    else
    {
      if (v15)
      {
        *(_DWORD *)buf = 138543874;
        v26 = v12;
        v27 = 2114;
        v28 = CFSTR("5.5.2641");
        v29 = 2114;
        v30 = v3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Firmware version: %{public}@ >= minumum firmware version: %{public}@ for device %{public}@", buf, 0x20u);
      }
      sub_100091AE8(v19, "XboxControllerRequiresFWUpdate");
      sub_10035AE5C((uint64_t **)(v5 + 176), v19);
      if ((v20 & 0x80000000) == 0)
        goto LABEL_24;
      v16 = (void **)v19;
    }
    operator delete(*v16);
LABEL_24:
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDistributedNotificationCenter defaultCenter](NSDistributedNotificationCenter, "defaultCenter"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotification notificationWithName:object:](NSNotification, "notificationWithName:object:", CFSTR("com.apple.bluetooth.leDeviceFirmwareUpdateWarning"), 0));
    objc_msgSend(v17, "postNotification:", v18);

LABEL_25:
    goto LABEL_26;
  }
LABEL_28:

}

void sub_10065F6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id sub_10065F76C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD *v5;
  id v6;
  __int128 v8;

  v3 = a2;
  v4 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v8) = 138543362;
    *(_QWORD *)((char *)&v8 + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@", (uint8_t *)&v8, 0xCu);
  }
  v8 = 0uLL;
  sub_10003415C((uint64_t)&v8, a1 + 88);
  v5 = sub_1000306B0(a1, v3);
  if (v5)
    v6 = (id)v5[42];
  else
    v6 = 0;
  sub_100034234((uint64_t)&v8);

  return v6;
}

void sub_10065F860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065F888(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id *v8;
  _BYTE v9[22];

  v5 = a2;
  v6 = a3;
  v7 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v9 = 138412546;
    *(_QWORD *)&v9[4] = v5;
    *(_WORD *)&v9[12] = 2112;
    *(_QWORD *)&v9[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %@ DIS UDI: %@", v9, 0x16u);
  }
  *(_QWORD *)v9 = 0;
  *(_QWORD *)&v9[8] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v8 = (id *)sub_1000306B0(a1, v5);
  if (v8)
    objc_storeStrong(v8 + 43, a3);
  sub_100034234((uint64_t)v9);

}

void sub_10065F994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065F9C0(uint64_t a1, void *a2, int a3, int a4)
{
  id v7;
  uint64_t i;
  char v9;
  char v10;
  NSObject *v11;
  void *v12[2];
  char v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;

  v7 = a2;
  for (i = 0; i != 160; i += 32)
  {
    if (*(unsigned __int16 *)((char *)&unk_100993F58 + i + 24) == a3
      && *(unsigned __int16 *)((char *)&unk_100993F58 + i + 26) == a4)
    {
      sub_100091AE8(__p, "LEPhyDenylist");
      v9 = sub_10000628C(a1, v7, (uint64_t)__p);
      v10 = v9;
      if (v15 < 0)
      {
        operator delete(__p[0]);
        if ((v10 & 1) != 0)
          continue;
      }
      else if ((v9 & 1) != 0)
      {
        continue;
      }
      sub_100091AE8(v12, "LEPhyDenylist");
      sub_1006576F0(a1, v7, (unsigned __int8 *)v12);
      if (v13 < 0)
        operator delete(v12[0]);
      v11 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        v17 = a3;
        v18 = 1024;
        v19 = a4;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "LEPhyDenylist: set tag for VID = 0x%04x, PID = 0x%04x", buf, 0xEu);
      }
    }
  }

}

void sub_10065FB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

unint64_t sub_10065FB94(uint64_t a1, void *a2)
{
  id v3;
  unint64_t v4;
  void *__p[2];
  char v7;

  v3 = a2;
  sub_100091AE8(__p, "LEPhyDenylist");
  v4 = sub_10000628C(a1, v3, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);

  return v4;
}

void sub_10065FBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10065FC24(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  id *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = (id *)sub_1000306B0(a1, v5);
  if (v6)
    sub_10064A82C(v6);
  else
    sub_100091AE8(a3, "");
  sub_100034234((uint64_t)v7);

}

void sub_10065FCA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10065FCC4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((unsigned __int8 *)v4 + 355);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_10065FD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065FD4C(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_BYTE *)v6 + 355) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10065FDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_10065FDD4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((unsigned __int8 *)v4 + 356);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_10065FE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065FE5C(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_BYTE *)v6 + 356) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10065FEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_10065FEE4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((unsigned __int8 *)v4 + 354);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_10065FF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065FF6C(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_BYTE *)v6 + 354) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10065FFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10065FFF4(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_BYTE *)v6 + 358) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10066005C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_10066007C(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _BOOL8 v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((_BYTE *)v4 + 358) != 0;
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_1006600EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10066010C(uint64_t a1, void *a2, char a3, int a4)
{
  id v7;
  _QWORD *v8;
  _QWORD v9[2];

  v7 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v8 = sub_1000306B0(a1, v7);
  if (v8)
  {
    *((_BYTE *)v8 + 386) = a3;
    *((_DWORD *)v8 + 97) = a4;
  }
  sub_100034234((uint64_t)v9);

}

void sub_10066017C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_10066019C(uint64_t a1, void *a2, _BYTE *a3, _DWORD *a4)
{
  id v7;
  _QWORD *v8;
  _QWORD v9[2];

  v7 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v8 = sub_1000306B0(a1, v7);
  if (v8)
  {
    *a3 = *((_BYTE *)v8 + 386);
    *a4 = *((_DWORD *)v8 + 97);
  }
  sub_100034234((uint64_t)v9);

}

void sub_100660214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

double sub_100660234(uint64_t a1, void *a2)
{
  id v3;
  double *v4;
  double v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = (double *)sub_1000306B0(a1, v3);
  if (v4)
    v5 = v4[50];
  else
    v5 = 0.0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_1006602A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006602C4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  uint64_t v6;

  v5 = a2;
  if (sub_10066039C(a1, v5))
  {
    sub_100660428(a1, v5, 2u, a3);
  }
  else
  {
    v6 = sub_1000589DC(a1, v5, 0);
    sub_10066A25C(a3, (unint64_t *)&v6, 1);
  }

}

void sub_10066037C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_10066039C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _BOOL8 v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v3);
  if (v4)
    v5 = sub_100661850((uint64_t)v4);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100660408(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100660428(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  id v7;
  id *v8;
  id *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[8];
  _QWORD v23[2];
  _BYTE v24[128];

  v7 = a2;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)a4 = a4 + 8;
  v23[0] = 0;
  v23[1] = 0;
  sub_10003415C((uint64_t)v23, a1 + 88);
  v8 = (id *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v7);
  v9 = v8;
  if (v8)
  {
    v10 = v8[8];
    if (v10)
    {
      v11 = v9[9];
      if (objc_msgSend(v11, "count"))
      {
        if (!a3)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "lastConnectedLEMAC"));
          *(_QWORD *)buf = sub_100649EA8(v12);
          sub_10000F7A0((uint64_t **)a4, (unint64_t *)buf, (uint64_t *)buf);

        }
        v20 = 0u;
        v21 = 0u;
        v18 = 0u;
        v19 = 0u;
        v13 = v11;
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
        if (v14)
        {
          v15 = *(_QWORD *)v19;
LABEL_8:
          v16 = 0;
          while (1)
          {
            if (*(_QWORD *)v19 != v15)
              objc_enumerationMutation(v13);
            *(_QWORD *)buf = sub_100649EA8(*(void **)(*((_QWORD *)&v18 + 1) + 8 * v16));
            sub_10000F7A0((uint64_t **)a4, (unint64_t *)buf, (uint64_t *)buf);
            if (a3)
            {
              if (*(_QWORD *)(a4 + 16) >= (unint64_t)a3)
                break;
            }
            if (v14 == (id)++v16)
            {
              v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
              if (v14)
                goto LABEL_8;
              break;
            }
          }
        }

      }
      else
      {
        v17 = qword_100999810;
        if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "getDeviceExtraAddresses returning empty", buf, 2u);
        }
      }

    }
  }
  sub_100034234((uint64_t)v23);

}

void sub_100660644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a11);

  sub_100034234((uint64_t)va);
  sub_10001A82C(v12, *(_QWORD **)(v12 + 8));

  _Unwind_Resume(a1);
}

id sub_1006606B0(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD v9[2];

  v3 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v4 = (id *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v3);
  if (v4 && (v5 = v4[8]) != 0)
  {
    v6 = v5;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "userIdentifier"));

  }
  else
  {
    v7 = 0;
  }
  sub_100034234((uint64_t)v9);

  return v7;
}

void sub_10066073C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_100660768(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  id *v9;
  id v10;
  void *v11;
  void *v12;
  BOOL v13;
  void *v14;
  unsigned __int8 v15;
  id v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[2];
  _BYTE v23[128];

  v3 = a2;
  v22[0] = 0;
  v22[1] = 0;
  sub_10003415C((uint64_t)v22, a1 + 88);
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v4 = *(id *)(a1 + 280);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v19;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
        v9 = (id *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v8, (_QWORD)v18);
        if (v9)
        {
          v10 = v9[8];
          v11 = v10;
          if (v10)
          {
            v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "serialNumber"));
            v13 = objc_msgSend(v12, "length") == 0;

            if (!v13)
            {
              v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "serialNumber"));
              v15 = objc_msgSend(v3, "isEqualToString:", v14);

              if ((v15 & 1) != 0)
              {
                v16 = v8;

                goto LABEL_15;
              }
            }
          }

        }
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
      if (v5)
        continue;
      break;
    }
  }
  v16 = 0;
LABEL_15:

  sub_100034234((uint64_t)v22);
  return v16;
}

void sub_10066090C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100660968(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  unsigned int v12;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[2];
  _BYTE v20[128];

  v3 = a2;
  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 88);
  v14 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v4 = *(id *)(a1 + 280);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v6)
          objc_enumerationMutation(v4);
        v8 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
        v9 = *((id *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v8) + 8);
        v10 = v9;
        if (v9)
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "groupIdentifier"));
          v12 = objc_msgSend(v11, "isEqual:", v3);

          if (v12)
            objc_msgSend(v14, "addObject:", v8);
        }

      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
    }
    while (v5);
  }

  sub_100034234((uint64_t)v19);
  return v14;
}

void sub_100660AEC(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  void *v12;
  va_list va;

  va_start(va, a11);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100660B4C(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD v9[2];

  v3 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v4 = (id *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v3);
  if (v4 && (v5 = v4[8]) != 0)
  {
    v6 = v5;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "groupIdentifier"));

  }
  else
  {
    v7 = 0;
  }
  sub_100034234((uint64_t)v9);

  return v7;
}

void sub_100660BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_100660C04(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;

  v3 = sub_100660B4C(a1, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (v4)
  {
    v5 = sub_100660968(a1, v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_100660C54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100660C64(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id v5;
  void *v6;
  void *v7;
  _QWORD v9[2];

  v3 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v4 = (id *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v3);
  if (v4 && (v5 = v4[8]) != 0)
  {
    v6 = v5;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "serialNumber"));

  }
  else
  {
    v7 = 0;
  }
  sub_100034234((uint64_t)v9);

  return v7;
}

void sub_100660CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_100660D1C(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v9[2];

  v3 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v4 = (id *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v3);
  if (v4 && (v5 = v4[8]) != 0)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, "partIdentifier");

  }
  else
  {
    v7 = 0;
  }
  sub_100034234((uint64_t)v9);

  return v7;
}

void sub_100660DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_100660DD0(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v9[2];

  v3 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v4 = (id *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v3);
  if (v4 && (v5 = v4[8]) != 0)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, "managedByFindMy");

  }
  else
  {
    v7 = 0;
  }
  sub_100034234((uint64_t)v9);

  return v7;
}

void sub_100660E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100660E84(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = a2;
  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 88);
  v4 = objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v3);
  if (v4)
    sub_10064B368(v4);
  sub_100034234((uint64_t)v5);

}

void sub_100660EE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100660F00()
{
  NSObject *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  std::string::size_type size;
  std::string::size_type v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::size_type v8;
  int v9;
  NSObject *v10;
  std::string *p_str;
  std::string *p_p;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[5];
  _QWORD v17[5];
  std::string __str;
  std::string __p;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  void *v29;
  void *__dst;
  uint64_t v31;
  std::string v32;
  uint64_t v33;
  __int16 v34;
  std::string *v35;
  __int128 buf;
  uint64_t v37;
  _QWORD *(*v38)(_QWORD *, _QWORD *);
  void (*v39)(uint64_t);
  void *v40;
  _QWORD **v41;
  _QWORD *v42[2];

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093E990);
  v29 = 0;
  __dst = 0;
  v31 = 0;
  sub_100472B98((uint64_t)off_1009778E0, 8212, &v29);
  v26 = 0;
  v27 = 0;
  v28 = 0;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093E990);
  sub_100472B98((uint64_t)off_1009778E0, 8228, &v26);
  sub_10048293C((uint64_t)&v29, (uint64_t)__dst, (char *)v26, v27, (v27 - (_BYTE *)v26) >> 3);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093E990);
  sub_100472B98((uint64_t)off_1009778E0, 8219, &v23);
  sub_10048293C((uint64_t)&v29, (uint64_t)__dst, (char *)v23, v24, (v24 - (_BYTE *)v23) >> 3);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093E990);
  sub_100472B98((uint64_t)off_1009778E0, 8224, &v20);
  sub_10048293C((uint64_t)&v29, (uint64_t)__dst, (char *)v20, v21, (v21 - (_BYTE *)v20) >> 3);
  v0 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = ((_BYTE *)__dst - (_BYTE *)v29) >> 3;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "parseCurrentAACPInfo devices:%lu", (uint8_t *)&buf, 0xCu);
  }
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v37 = 0x4812000000;
  v38 = sub_100062748;
  v39 = sub_100062430;
  v42[0] = 0;
  v42[1] = 0;
  v40 = &unk_10083E079;
  v41 = v42;
  v1 = (uint64_t *)v29;
  v2 = (uint64_t *)__dst;
  if (v29 != __dst)
  {
    do
    {
      v3 = *v1;
      if ((sub_100442118(*v1, 3) & 1) == 0)
        break;
      memset(&__p, 0, sizeof(__p));
      sub_1004491B4(v3, 3u, &v32);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      {
        size = v32.__r_.__value_.__l.__size_;
        operator delete(v32.__r_.__value_.__l.__data_);
        if (size >= 2)
        {
LABEL_17:
          sub_1004491B4(v3, 3u, &v32);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = v32;
          memset(&__str, 0, sizeof(__str));
          sub_1004491B4(v3, 8u, &v32);
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          {
            v5 = v32.__r_.__value_.__l.__size_;
            operator delete(v32.__r_.__value_.__l.__data_);
            if (v5 < 2)
              goto LABEL_48;
          }
          else if (HIBYTE(v32.__r_.__value_.__r.__words[2]) <= 1u)
          {
LABEL_48:
            v14 = sub_10006BBEC();
            v17[0] = _NSConcreteStackBlock;
            v17[1] = 3221225472;
            v17[2] = sub_100661598;
            v17[3] = &unk_100917378;
            v17[4] = v3;
            sub_100041A34(v14, v17);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            goto LABEL_50;
          }
          sub_1004491B4(v3, 8u, &v32);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          __str = v32;
          v6 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
          if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v6 = __str.__r_.__value_.__l.__size_;
          if (!v6)
          {
            sub_1004491B4(v3, 9u, &v32);
            if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v7 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
            else
              v7 = v32.__r_.__value_.__l.__size_;
            if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v32.__r_.__value_.__l.__data_);
            if (v7 >= 2)
            {
              sub_1004491B4(v3, 9u, &v32);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              __str = v32;
            }
          }
          v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          v9 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v8 = __str.__r_.__value_.__l.__size_;
          if (v8)
          {
            v10 = qword_100999810;
            if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_INFO))
            {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
              if (v9 >= 0)
                p_str = &__str;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_p = &__p;
              else
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              LODWORD(v32.__r_.__value_.__l.__data_) = 141558787;
              *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + 4) = 1752392040;
              WORD2(v32.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&v32.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_str;
              HIWORD(v32.__r_.__value_.__r.__words[2]) = 2160;
              v33 = 1752392040;
              v34 = 2081;
              v35 = p_p;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "otherSN:%{private, mask.hash}s caseSN:%{private, mask.hash}s", (uint8_t *)&v32, 0x2Au);
            }
            v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            v13 = sub_10066A364((uint64_t **)(*((_QWORD *)&buf + 1) + 48), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_100740F58, (__int128 **)&v32);
            std::string::operator=((std::string *)(v13 + 7), &__str);
          }
          goto LABEL_48;
        }
      }
      else if (HIBYTE(v32.__r_.__value_.__r.__words[2]) > 1u)
      {
        goto LABEL_17;
      }
LABEL_50:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v1;
    }
    while (v1 != v2);
  }
  v15 = sub_1000419F4();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1006615EC;
  v16[3] = &unk_1009193E8;
  v16[4] = &buf;
  sub_100041A34(v15, v16);
  _Block_object_dispose(&buf, 8);
  sub_10066A2D8((uint64_t)&v41, v42[0]);
  if (v20)
  {
    v21 = (char *)v20;
    operator delete(v20);
  }
  if (v23)
  {
    v24 = (char *)v23;
    operator delete(v23);
  }
  if (v26)
  {
    v27 = (char *)v26;
    operator delete(v26);
  }
  if (v29)
  {
    __dst = v29;
    operator delete(v29);
  }
}

void sub_1006614BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46)
{
  uint64_t v46;

  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Block_object_dispose((const void *)(v46 - 192), 8);
  sub_10066A2D8(a12, *(_QWORD **)(v46 - 136));
  if (a36)
    operator delete(a36);
  if (a39)
    operator delete(a39);
  if (a42)
    operator delete(a42);
  if (a45)
    operator delete(a45);
  _Unwind_Resume(a1);
}

void sub_100661598(uint64_t a1)
{
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10093E990);
  sub_1004703C8((os_unfair_lock_s *)off_1009778E0, *(_QWORD *)(a1 + 32), 15);
}

void sub_1006615EC(uint64_t a1, __n128 a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  _BOOL4 v8;
  _QWORD *v9;
  NSObject *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  __n128 v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  _QWORD *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _QWORD *v27;
  _QWORD v28[2];

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  if (v2[8])
  {
    v3 = (_QWORD *)v2[6];
    v4 = v2 + 7;
    if (v3 != v2 + 7)
    {
      a2.n128_u64[0] = 141559043;
      v17 = a2;
      do
      {
        v28[0] = 0;
        v28[1] = 0;
        if (qword_100977FB0 != -1)
          dispatch_once(&qword_100977FB0, &stru_10093E930);
        v5 = v3 + 7;
        v6 = off_100977FA8;
        if (*((char *)v3 + 79) < 0)
          v5 = (_QWORD *)*v5;
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5, *(_OWORD *)&v17));
        v8 = sub_100684370((uint64_t)v6, v7, (uint64_t)v28);

        if (v8)
        {
          v9 = v3 + 4;
          v10 = qword_100999810;
          if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_INFO))
          {
            v11 = v3 + 4;
            if (*((char *)v3 + 55) < 0)
              v11 = (_QWORD *)*v9;
            *(_DWORD *)buf = v17.n128_u32[0];
            v19 = 1752392040;
            v20 = 2081;
            v21 = v11;
            v22 = 2160;
            v23 = 1752392040;
            v24 = 1041;
            v25 = 16;
            v26 = 2097;
            v27 = v28;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Setting %{private, mask.hash}s encryption key to %{private, mask.hash}.16P", buf, 0x30u);
          }
          if (qword_100977FB0 != -1)
            dispatch_once(&qword_100977FB0, &stru_10093E930);
          v12 = off_100977FA8;
          if (*((char *)v3 + 55) < 0)
            v9 = (_QWORD *)*v9;
          v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));
          sub_100683FE8((uint64_t)v12, v13, (uint64_t)v28);

        }
        v14 = (_QWORD *)v3[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (_QWORD *)v3[2];
            v16 = *v15 == (_QWORD)v3;
            v3 = v15;
          }
          while (!v16);
        }
        v3 = v15;
      }
      while (v15 != v4);
    }
  }
}

void sub_100661834(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_100661850(uint64_t a1)
{
  void *v1;
  _BOOL8 v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "longTermKeyMap"));
  v2 = objc_msgSend(v1, "count") != 0;

  return v2;
}

void sub_10066188C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10066189C(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  int v10;
  int v11;
  _QWORD *v12;
  void *__p[2];
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[2];
  _BYTE v21[128];

  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093E870);
  v2 = sub_100069E14((uint64_t)off_1009778A0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 88);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v4 = v3;
  v5 = 0;
  v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v17 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
        sub_100091AE8(__p, "HasBuiltinServices");
        v10 = sub_10000628C(a1, v9, (uint64_t)__p);
        v11 = v10;
        if (v15 < 0)
        {
          operator delete(__p[0]);
          if (!v11)
            continue;
LABEL_12:
          v12 = sub_1000306B0(a1, v9);
          v5 = (v5 + sub_10064DEE8((uint64_t)v12));
          continue;
        }
        if (v10)
          goto LABEL_12;
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    }
    while (v6);
  }

  sub_100034234((uint64_t)v20);
  return v5;
}

void sub_100661A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;
  void *v25;

  sub_100034234((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_100661A98(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD *v5;
  id v6;
  void *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  void *v11;
  char v12;
  char v13;
  uint64_t v14;
  void *__p[2];
  char v17;
  uint8_t buf[24];

  v3 = a2;
  if (!v3)
    goto LABEL_24;
  v4 = qword_100999810;
  if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Checking if device %{public}@ is Apple Device", buf, 0xCu);
  }
  *(_OWORD *)buf = 0uLL;
  sub_10003415C((uint64_t)buf, a1 + 88);
  v5 = sub_1000306B0(a1, v3);
  if (!v5)
  {
LABEL_23:
    sub_100034234((uint64_t)buf);
LABEL_24:
    v14 = 0;
    goto LABEL_25;
  }
  v6 = (id)v5[42];
  v7 = v6;
  if (v6 && (unint64_t)objc_msgSend(v6, "length") >= 5)
  {
    v8 = (unsigned __int8 *)objc_msgSend(objc_retainAutorelease(v7), "bytes");
    v9 = *v8;
    v10 = *(unsigned __int16 *)(v8 + 1);
    if (v9 == 2 && v10 == 1452)
      goto LABEL_20;
    if (v9 == 1 && v10 == 76)
      goto LABEL_20;
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093E890);
  v11 = off_1009778C0;
  sub_100091AE8(__p, "IsAppleWatch");
  if ((sub_10000628C((uint64_t)v11, v3, (uint64_t)__p) & 1) != 0)
  {
    if (v17 < 0)
      operator delete(__p[0]);
    goto LABEL_20;
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093E890);
  v12 = sub_100658AD4((uint64_t)off_1009778C0, v3);
  v13 = v12;
  if (v17 < 0)
  {
    operator delete(__p[0]);
    if ((v13 & 1) != 0)
      goto LABEL_20;
    goto LABEL_22;
  }
  if ((v12 & 1) == 0)
  {
LABEL_22:

    goto LABEL_23;
  }
LABEL_20:

  sub_100034234((uint64_t)buf);
  v14 = 1;
LABEL_25:

  return v14;
}

void sub_100661CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  void *v17;

  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100661CF8(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  char v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v24[2];
  _BYTE v25[128];

  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10093E870);
  v2 = sub_100069E14((uint64_t)off_1009778A0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, a1 + 88);
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v21;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v21 != v6)
          objc_enumerationMutation(v4);
        v8 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i);
        sub_100091AE8(v18, "A1603");
        if ((sub_10000628C(a1, v8, (uint64_t)v18) & 1) != 0)
        {
          v9 = 1;
        }
        else
        {
          sub_100091AE8(v16, "A2051");
          if ((sub_10000628C(a1, v8, (uint64_t)v16) & 1) != 0)
          {
            v9 = 1;
          }
          else
          {
            sub_100091AE8(v14, "A3085");
            if ((sub_10000628C(a1, v8, (uint64_t)v14) & 1) != 0)
            {
              v9 = 1;
            }
            else
            {
              sub_100091AE8(__p, "A2538");
              v9 = sub_10000628C(a1, v8, (uint64_t)__p);
              if (v13 < 0)
                operator delete(__p[0]);
            }
            if (v15 < 0)
              operator delete(v14[0]);
          }
          if (v17 < 0)
            operator delete(v16[0]);
        }
        if (v19 < 0)
          operator delete(v18[0]);
        if ((v9 & 1) != 0)
        {
          v10 = 1;
          goto LABEL_27;
        }
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
      if (v5)
        continue;
      break;
    }
  }
  v10 = 0;
LABEL_27:

  sub_100034234((uint64_t)v24);
  return v10;
}

void sub_100661F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  void *v43;

  sub_100034234((uint64_t)&a43);
  _Unwind_Resume(a1);
}

uint64_t sub_100661FF0(uint64_t a1, void *a2, int a3, void *a4, int a5)
{
  id v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[2];

  v9 = a2;
  v10 = a4;
  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 88);
  v11 = sub_1000306B0(a1, v9);
  if (v11)
    v12 = sub_10064BD38((uint64_t)v11, a3, v10, a5);
  else
    v12 = 8;
  sub_100034234((uint64_t)v14);

  return v12;
}

void sub_100662090(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1006620B4(uint64_t a1, void *a2)
{
  return sub_100661FF0(a1, a2, 0, 0, 0);
}

NSMutableArray *sub_1006620C4(uint64_t a1, int a2)
{
  NSMutableArray *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[2];
  _BYTE v16[128];

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 88);
  v4 = objc_opt_new(NSMutableArray);
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v5 = *(id *)(a1 + 168);
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v16, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v5);
        v9 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        if (*((_DWORD *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v9, (_QWORD)v11) + 133) == a2)
          -[NSMutableArray addObject:](v4, "addObject:", v9);
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v16, 16);
    }
    while (v6);
  }

  sub_100034234((uint64_t)v15);
  return v4;
}

void sub_100662210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a10);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100662248(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = *((unsigned int *)v4 + 133);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_1006622B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006622D0(uint64_t a1, void *a2, int a3)
{
  id v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[2];

  v5 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    v7 = sub_10064CC54((uint64_t)v6, a3);
  else
    v7 = 8;
  sub_100034234((uint64_t)v9);

  return v7;
}

void sub_10066234C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10066236C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  _QWORD v8[2];

  v5 = a2;
  v6 = a3;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 88);
  v7 = (id *)sub_1000306B0(a1, v5);
  if (v7)
    objc_storeStrong(v7 + 25, a3);
  sub_100034234((uint64_t)v8);

}

void sub_1006623E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_10066240C(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[2];

  v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v4 = sub_1000306B0(a1, v3);
  if (v4)
    v5 = sub_10064CFD4((uint64_t)v4);
  else
    v5 = 0;
  sub_100034234((uint64_t)v7);

  return v5;
}

void sub_100662478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100662498(uint64_t a1, void *a2)
{
  id v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v10;
  __int16 v11;
  unsigned __int8 v12;
  int v13;
  __int16 v14;
  char v15;
  _QWORD v16[2];
  _OWORD v17[20];

  v3 = a2;
  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 88);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10093E890);
  v4 = sub_1000589DC((uint64_t)off_1009778C0, v3, 0);
  v5 = sub_1000746A4(v4);
  v13 = v5;
  v15 = BYTE6(v5);
  v14 = WORD2(v5);
  v6 = sub_1000306B0(a1, v3);
  v7 = v6;
  v12 = *((_BYTE *)v6 + 560);
  v8 = v12;
  if (!v12)
  {
    v11 = *((_WORD *)v6 + 281);
    v10 = *((_WORD *)v6 + 282);
    memset(v17, 0, sizeof(v17));
    sub_1001828C0(&v13, &v10, &v12, &v11);
    *((_BYTE *)v7 + 560) = v12;
    *((_WORD *)v7 + 281) = v11;
    *((_WORD *)v7 + 282) = v10;
    sub_100393448((uint64_t)v17);
    v8 = v12;
  }
  sub_100034234((uint64_t)v16);

  return v8;
}

void sub_100662604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_100393448((uint64_t)va1);
  sub_100034234((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_100662644(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  id *v6;
  id *v7;
  uint64_t v8;
  NSData *v9;
  void *v10;
  uint64_t (**v11)();
  unsigned int *v12;
  _QWORD v13[2];

  v5 = a2;
  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 88);
  v6 = (id *)sub_1000306B0(a1, v5);
  v7 = v6;
  if (v6)
  {
    sub_10064D4E4(v6, 0);
    if ((*(_WORD *)(a3 + 80) & 8) != 0)
    {
      v11 = 0;
      v12 = 0;
      sub_10003994C(&v11, (const void *)(a3 + 28), 0x10uLL);
      if (sub_10003F8C4((uint64_t)&v11))
      {
        v8 = sub_10003EB18((uint64_t)&v11);
        v9 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v8, sub_10003F8C4((uint64_t)&v11));
        v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        sub_10064D4E4(v7, v10);

      }
      v11 = &off_100918258;
      if (v12)
        sub_100056AAC(v12);
    }
  }
  sub_100034234((uint64_t)v13);

}

void sub_10066273C(_Unwind_Exception *a1, uint64_t a2, unsigned int *a3, ...)
{
  void *v3;
  void *v4;
  va_list va;

  va_start(va, a3);

  if (a3)
    sub_100056AAC(a3);
  sub_100034234((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_10066278C(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_BYTE *)v6 + 97) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_1006627F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100662814(uint64_t a1, void *a2, char a3)
{
  id v5;
  _QWORD *v6;
  _QWORD v7[2];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 88);
  v6 = sub_1000306B0(a1, v5);
  if (v6)
    *((_BYTE *)v6 + 96) = a3;
  sub_100034234((uint64_t)v7);

}

void sub_10066287C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_10066289C(uint64_t a1, void *a2, char a3, char a4, __int16 a5, __int16 a6, __int16 a7, char a8, char a9, char a10)
{
  id v17;
  _QWORD *v18;
  _BOOL8 v19;
  _QWORD v21[2];

  v17 = a2;
  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 88);
  v18 = sub_1000306B0(a1, v17);
  if (v18)
  {
    *((_BYTE *)v18 + 566) = a3;
    *((_BYTE *)v18 + 567) = a4;
    *((_WORD *)v18 + 284) = a5;
    *((_WORD *)v18 + 285) = a6;
    *((_WORD *)v18 + 286) = a7;
    *((_BYTE *)v18 + 574) = a8;
    *((_BYTE *)v18 + 575) = a9;
    *((_BYTE *)v18 + 576) = a10;
  }
  v19 = v18 != 0;
  sub_100034234((uint64_t)v21);

  return v19;
}

void sub_100662958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100662978(uint64_t a1, void *a2, _BYTE *a3, _BYTE *a4, _WORD *a5, _WORD *a6, _WORD *a7, _BYTE *a8, _BYTE *a9, _BYTE *a10)
{
  id v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v21[2];

  v17 = a2;
  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 88);
  v18 = sub_1000306B0(a1, v17);
  if (v18)
    v19 = sub_100662A54((uint64_t)v18, a3, a4, a5, a6, a7, a8, a9, a10);
  else
    v19 = 0;
  sub_100034234((uint64_t)v21);

  return v19;
}

void sub_100662A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_100662A54(uint64_t a1, _BYTE *a2, _BYTE *a3, _WORD *a4, _WORD *a5, _WORD *a6, _BYTE *a7, _BYTE *a8, _BYTE *a9)
{
  _BOOL8 v9;

  v9 = *(_BYTE *)(a1 + 566) != 0;
  if (*(_BYTE *)(a1 + 566))
    *a2 = *(_BYTE *)(a1 + 566);
  if (*(_BYTE *)(a1 + 567))
  {
    *a3 = *(_BYTE *)(a1 + 567);
    v9 = 1;
  }
  if (*(_WORD *)(a1 + 568))
  {
    *a4 = *(_WORD *)(a1 + 568);
    v9 = 1;
  }
  if (*(_WORD *)(a1 + 570))
  {
    *a5 = *(_WORD *)(a1 + 570);
    v9 = 1;
  }
  if (*(_WORD *)(a1 + 572))
  {
    *a6 = *(_WORD *)(a1 + 572);
    v9 = 1;
  }
  if (*(_BYTE *)(a1 + 574))
  {
    *a7 = *(_BYTE *)(a1 + 574);
    v9 = 1;
  }
  if (*(_BYTE *)(a1 + 575))
  {
    *a8 = *(_BYTE *)(a1 + 575);
    v9 = 1;
  }
  if (*(_BYTE *)(a1 + 576))
  {
    *a9 = *(_BYTE *)(a1 + 576);
    return 1;
  }
  return v9;
}

uint64_t sub_100662AE4(uint64_t a1, int a2)
{
  double Current;
  id v5;
  unsigned __int16 v6;
  id v7;
  double v8;
  uint64_t v9;
  void *i;
  double *v11;
  double v12;
  BOOL v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[2];
  _BYTE v20[128];

  Current = CFAbsoluteTimeGetCurrent();
  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 88);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = *(id *)(a1 + 168);
  v6 = 0;
  v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
  if (v7)
  {
    v8 = Current - (double)(60 * a2);
    v9 = *(_QWORD *)v16;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(_QWORD *)v16 != v9)
          objc_enumerationMutation(v5);
        v11 = (double *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i), (_QWORD)v15);
        v12 = v11[50];
        v13 = v12 <= 0.0 || v12 < v8;
        if (!v13 || !a2 || *((_BYTE *)v11 + 160))
          ++v6;
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v20, 16);
    }
    while (v7);
  }

  sub_100034234((uint64_t)v19);
  return v6;
}

void sub_100662C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  va_list va;

  va_start(va, a10);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

const char *sub_100662C6C(int a1)
{
  const char *result;

  switch(a1)
  {
    case 2700:
      result = "BT_ERROR_NAME_EMPTY";
      break;
    case 2701:
      result = "BT_ERROR_NAME_IS_UUID";
      break;
    case 2702:
      result = "BT_ERROR_NAME_IS_BDADDR";
      break;
    case 2703:
      result = "BT_ERROR_NAME_START_OR_END_INVALID";
      break;
    case 2704:
      result = "BT_ERROR_NAME_FAILED_TO_TOKENIZE";
      break;
    case 2705:
      result = "BT_ERROR_NAME_LEXICON_FOUND_UNWANTED_WORDS";
      break;
    case 2706:
      result = "BT_ERROR_NAME_LEXICON_TOO_MANY_INVALID_WORDS";
      break;
    case 2707:
      result = "BT_ERROR_NAME_LEXICON_NO_VALID_WORD";
      break;
    case 2708:
      result = "BT_ERROR_NAME_LEXICON_CAPITALIZED_WORDS";
      break;
    default:
      if (a1)
        result = "Unknown";
      else
        result = "BT_SUCCESS";
      break;
  }
  return result;
}

const char *sub_100662D18(int a1)
{
  const char *result;

  switch(a1)
  {
    case 2700:
      result = "NameEmpty";
      break;
    case 2701:
      result = "NameIsUUID";
      break;
    case 2702:
      result = "NameIsBDADDR";
      break;
    case 2703:
      result = "StartOrEndInvalid";
      break;
    case 2704:
      result = "FailedToTokenize";
      break;
    case 2705:
      result = "LexiconFailedToTokenize";
      break;
    case 2706:
      result = "LexiconTooManyInvalidWords";
      break;
    case 2707:
      result = "LexiconNoValidWords";
      break;
    case 2708:
      result = "LexiconCapitalizedWords";
      break;
    default:
      if (a1)
        result = "Unknown";
      else
        result = "Success";
      break;
  }
  return result;
}

uint64_t sub_100662DC4(_QWORD *a1, void *a2, int a3, uint64_t a4, unsigned __int16 *a5, _WORD *a6, _BYTE *a7, unsigned __int16 *a8, uint64_t a9)
{
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  unsigned __int16 v23;
  void *v24;
  __CFString *v25;
  unsigned int v26;
  __CFString *v27;
  __CFString *v28;
  __CFString *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v37[10];

  v13 = a2;
  if (objc_msgSend(v13, "length"))
  {
    v14 = a1[41];
    if (!v14)
    {
      v15 = objc_claimAutoreleasedReturnValue(+[NSMutableCharacterSet whitespaceAndNewlineCharacterSet](NSMutableCharacterSet, "whitespaceAndNewlineCharacterSet"));
      v16 = (void *)a1[41];
      a1[41] = v15;

      v17 = (void *)a1[41];
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet punctuationCharacterSet](NSCharacterSet, "punctuationCharacterSet"));
      objc_msgSend(v17, "formUnionWithCharacterSet:", v18);

      v19 = (void *)a1[41];
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet symbolCharacterSet](NSCharacterSet, "symbolCharacterSet"));
      objc_msgSend(v19, "formUnionWithCharacterSet:", v20);

      v14 = a1[41];
    }
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "componentsSeparatedByCharactersInSet:", v14));
    v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v21));

    v23 = (unsigned __int16)objc_msgSend(v22, "count");
    *a8 = v23;
    if (v23)
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](NSLocale, "currentLocale"));
      v25 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "localeIdentifier"));

      v26 = -[__CFString hasPrefix:](v25, "hasPrefix:", CFSTR("en"));
      if (v26)
        v27 = v25;
      else
        v27 = CFSTR("en");
      v28 = v27;
      v29 = v28;
      if (!a1[42] && (a3 & 1) == 0)
      {
        v28 = (__CFString *)sub_100663090((uint64_t)v28, v28);
        a1[42] = v28;
      }
      if (((a3 ^ 1 | v26) & 1) == 0 && !a1[43])
        a1[43] = sub_100663090((uint64_t)v28, v25);
      v30 = 42;
      if (a3)
        v30 = 43;
      v31 = a1[v30];
      if (v31)
      {
        v37[0] = _NSConcreteStackBlock;
        v37[1] = 3221225472;
        v37[2] = sub_1006631B0;
        v37[3] = &unk_10093E830;
        v37[4] = a6;
        v37[5] = v31;
        v37[6] = a4;
        v37[7] = a9;
        v37[8] = a7;
        v37[9] = a5;
        objc_msgSend(v22, "enumerateObjectsUsingBlock:", v37);
        if (*a7)
        {
          v32 = 2705;
        }
        else if (*a5 == *a8)
        {
          if (*a6)
            v32 = 2708;
          else
            v32 = 2707;
        }
        else
        {
          v32 = 0;
        }
      }
      else
      {
        v32 = 2704;
      }

    }
    else
    {
      v32 = 2704;
    }

  }
  else
  {
    v32 = 2700;
  }

  return v32;
}

void sub_100663038(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_100663090(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];
  _QWORD v8[2];

  v2 = a2;
  v7[0] = kLXLexiconLocaleKey;
  v7[1] = kLXLexiconEnumerateCachedOnlyOTAPaths;
  v8[0] = v2;
  v8[1] = &__kCFBooleanTrue;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v7, 2));
  v6 = 0;
  v4 = LXLexiconCreate(v3, &v6);
  if (v6 && os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_ERROR))
    sub_100715B28();

  return v4;
}

void sub_10066318C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1006631B0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v3 = a2;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  if (objc_msgSend(v3, "rangeOfString:options:", CFSTR("(?:^[A-Z][a-z]{3,}$)"), 1024) != (id)0x7FFFFFFFFFFFFFFFLL)
    ++**(_WORD **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1006632E4;
  v6[3] = &unk_10093E810;
  v4 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v5 = v3;
  v10 = *(_OWORD *)(a1 + 56);
  v7 = v5;
  v8 = &v11;
  LXLexiconEnumerateEntriesForString(v4, v5, v6);
  if (!*((_BYTE *)v12 + 24))
    ++**(_WORD **)(a1 + 72);

  _Block_object_dispose(&v11, 8);
}

void sub_1006632B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  uint64_t v15;

  _Block_object_dispose((const void *)(v15 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1006632E4(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  id v6;

  v6 = (id)LXEntryCopyString(a2);
  **(_DWORD **)(a1 + 48) = LXEntryGetMetaFlags(a2);
  if (objc_msgSend(v6, "caseInsensitiveCompare:", *(_QWORD *)(a1 + 32)) && !**(_DWORD **)(a1 + 48))
  {
    std::string::assign(*(std::string **)(a1 + 56), (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"));
  }
  else
  {
    if ((LXEntryGetMetaFlags(a2) & 0x3800000) != 0)
    {
      std::string::assign(*(std::string **)(a1 + 56), (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 32)), "UTF8String"));
      **(_BYTE **)(a1 + 64) = 1;
      *a3 = 1;
    }
    if ((LXEntryGetMetaFlags(a2) & 0x86) == 0)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }

}

void sub_1006633CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1006633E0(_QWORD *a1, void *a2, int a3)
{
  id v5;
  void *v6;
  _BYTE *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  int v14;
  const char *v15;
  void **v16;
  void **v17;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  uint64_t v21;
  id v22;
  int v23;
  const char *v24;
  void **v25;
  void **v26;
  void *__p[2];
  char v29;
  void *v30[2];
  uint64_t v31;
  int v32;
  unsigned __int8 v33;
  unsigned __int16 v34;
  int v35;
  uint8_t buf[4];
  id v37;
  __int16 v38;
  _BYTE v39[14];
  __int16 v40;
  _BYTE v41[14];
  __int16 v42;
  _BYTE v43[10];
  _BYTE v44[6];
  _BYTE v45[6];
  _BYTE v46[10];
  __int16 v47;
  void **v48;

  v5 = a2;
  if (objc_msgSend(v5, "length"))
  {
    if (objc_msgSend(v5, "rangeOfString:options:", CFSTR("(?:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})"), 1024) == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      if (objc_msgSend(v5, "rangeOfString:options:", CFSTR("(?:[0-9A-Fa-f]{2}_|-){5}[0-9A-Fa-f]{2}"), 1024) == (id)0x7FFFFFFFFFFFFFFFLL)
      {
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR("_.-")));
        v7 = objc_msgSend(v5, "rangeOfCharacterFromSet:", v6);
        if (v7 && v7 != (char *)objc_msgSend(v5, "length") - 1)
          v8 = 0;
        else
          v8 = 2703;

      }
      else
      {
        v8 = 2702;
      }
    }
    else
    {
      v8 = 2701;
    }
  }
  else
  {
    v8 = 2700;
  }
  v35 = 0;
  v34 = 0;
  v33 = 0;
  v32 = 0;
  v30[0] = 0;
  v30[1] = 0;
  v31 = 0;
  sub_100091AE8(v30, "");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSRegularExpression regularExpressionWithPattern:options:error:](NSRegularExpression, "regularExpressionWithPattern:options:error:", CFSTR("([a-z])([A-Z0-9])"), 0, 0));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "stringByReplacingMatchesInString:options:range:withTemplate:", v5, 0, 0, objc_msgSend(v5, "length"), CFSTR("$1 $2")));
  if (!(_DWORD)v8)
  {
    v8 = sub_100662DC4(a1, v10, 0, (uint64_t)&v35, &v34, &v32, &v33, (unsigned __int16 *)&v32 + 1, (uint64_t)v30);
    if ((_DWORD)v8)
    {
      if (a1[43])
        v8 = sub_100662DC4(a1, v10, 1, (uint64_t)&v35, &v34, &v32, &v33, (unsigned __int16 *)&v32 + 1, (uint64_t)v30);
    }
  }
  v11 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 160))(v11))
  {
    if (a3)
    {
      if ((_DWORD)v8 == 2700)
        goto LABEL_37;
      v12 = qword_100999810;
      if (!os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
        goto LABEL_37;
      v13 = objc_msgSend(objc_retainAutorelease(v5), "UTF8String");
      v14 = v35;
      sub_1006638E8(v35);
      v15 = sub_100662C6C(v8);
      if (v29 >= 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      v17 = v30;
      if (v31 < 0)
        v17 = (void **)v30[0];
      *(_DWORD *)buf = 136317699;
      v37 = v13;
      v38 = 2112;
      *(_QWORD *)v39 = v10;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)&v39[10] = v8;
      v40 = 2080;
      *(_QWORD *)v41 = v15;
      *(_WORD *)&v41[8] = 1024;
      *(_DWORD *)&v41[10] = v14;
      v42 = 2080;
      *(_QWORD *)v43 = v16;
      *(_WORD *)&v43[8] = 1024;
      *(_DWORD *)v44 = v34;
      *(_WORD *)&v44[4] = 1024;
      *(_DWORD *)v45 = (unsigned __int16)v32;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)v46 = v33;
      *(_WORD *)&v46[4] = 1024;
      *(_DWORD *)&v46[6] = HIWORD(v32);
      v47 = 2081;
      v48 = v17;
      v18 = "statedump: isDeviceNameValidForDisplay deviceName:\"%s\" newDeviceName:\"%@\" result:%d(%s) flags:%d(%s) lex"
            "iconNonMatches:%d capitalizedCount:%d unwantedWord:%d tokenCount:%d outToken:%{private}s";
      v19 = v12;
      v20 = 88;
    }
    else
    {
      if (!(_DWORD)v8)
        goto LABEL_37;
      if ((_DWORD)v8 == 2700)
        goto LABEL_37;
      v21 = qword_100999810;
      if (!os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
        goto LABEL_37;
      v22 = objc_msgSend(objc_retainAutorelease(v5), "UTF8String");
      v23 = v35;
      sub_1006638E8(v35);
      v24 = sub_100662C6C(v8);
      if (v29 >= 0)
        v25 = __p;
      else
        v25 = (void **)__p[0];
      v26 = v30;
      if (v31 < 0)
        v26 = (void **)v30[0];
      *(_DWORD *)buf = 136317443;
      v37 = v22;
      v38 = 1024;
      *(_DWORD *)v39 = v8;
      *(_WORD *)&v39[4] = 2080;
      *(_QWORD *)&v39[6] = v24;
      v40 = 1024;
      *(_DWORD *)v41 = v23;
      *(_WORD *)&v41[4] = 2080;
      *(_QWORD *)&v41[6] = v25;
      v42 = 1024;
      *(_DWORD *)v43 = v34;
      *(_WORD *)&v43[4] = 1024;
      *(_DWORD *)&v43[6] = (unsigned __int16)v32;
      *(_WORD *)v44 = 1024;
      *(_DWORD *)&v44[2] = v33;
      *(_WORD *)v45 = 1024;
      *(_DWORD *)&v45[2] = HIWORD(v32);
      *(_WORD *)v46 = 2081;
      *(_QWORD *)&v46[2] = v26;
      v18 = "Warning: isDeviceNameValidForDisplay name:\"%s\" result:%d(%s) flags:%d(%s) lexiconNonMatches:%d capitalized"
            "Count:%d unwantedWord:%d tokenCount:%d outToken:%{private}s";
      v19 = v21;
      v20 = 78;
    }
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, buf, v20);
    if (v29 < 0)
      operator delete(__p[0]);
  }
LABEL_37:

  if (SHIBYTE(v31) < 0)
    operator delete(v30[0]);

  return v8;
}

void sub_100663874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  void *v20;
  void *v21;

  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1006638E8(int a1)
{
  _OWORD v3[4];
  void *__p[2];
  __int128 v5;
  __int128 v6;
  _OWORD v7[9];
  uint64_t v8;

  v8 = 0;
  v6 = 0u;
  memset(v7, 0, sizeof(v7));
  *(_OWORD *)__p = 0u;
  v5 = 0u;
  memset(v3, 0, sizeof(v3));
  sub_100272ADC((uint64_t)v3);
  sub_1002614D8(v3, (uint64_t)"[LXMetaFlags:", 13);
  if ((a1 & 1) != 0)
    sub_1002614D8(v3, (uint64_t)"HasTitleCase ", 13);
  if ((a1 & 2) != 0)
    sub_1002614D8(v3, (uint64_t)"NoSuggest ", 10);
  if ((a1 & 4) != 0)
    sub_1002614D8(v3, (uint64_t)"NoPredictUntilLearned ", 22);
  if ((a1 & 8) != 0)
    sub_1002614D8(v3, (uint64_t)"PreferredFormForSortKey ", 24);
  if ((a1 & 0x20) != 0)
    sub_1002614D8(v3, (uint64_t)"CannotBeCapitalized ", 20);
  if ((a1 & 0x40) != 0)
    sub_1002614D8(v3, (uint64_t)"PreventShiftAfterPeriod ", 24);
  if ((a1 & 0x80) != 0)
    sub_1002614D8(v3, (uint64_t)"NoSuggestUntilLearned ", 22);
  if ((a1 & 0x200000) != 0)
    sub_1002614D8(v3, (uint64_t)"HasCustomCapitalization ", 24);
  if ((a1 & 0x400000) != 0)
    sub_1002614D8(v3, (uint64_t)"FormInsertion ", 14);
  if ((a1 & 0x800000) != 0)
    sub_1002614D8(v3, (uint64_t)"Vulgar ", 7);
  if ((a1 & 0x1000000) != 0)
    sub_1002614D8(v3, (uint64_t)"Offensive ", 10);
  if ((a1 & 0x2000000) != 0)
    sub_1002614D8(v3, (uint64_t)"Sensitive ", 10);
  if ((a1 & 0x4000000) != 0)
    sub_1002614D8(v3, (uint64_t)"Recent ", 7);
  if ((a1 & 0x8000000) != 0)
    sub_1002614D8(v3, (uint64_t)"Transient ", 10);
  if ((a1 & 0x10000000) != 0)
    sub_1002614D8(v3, (uint64_t)"Probationary ", 13);
  if ((a1 & 0x20000000) != 0)
    sub_1002614D8(v3, (uint64_t)"ContainsEmoji ", 14);
  sub_1002614D8(v3, (uint64_t)"]", 1);
  std::stringbuf::str((char *)v3 + 8);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v3 + 8);
  return std::ios::~ios(v7);
}

void sub_100663B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100272CFC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__CFString *sub_100663B74(uint64_t a1, unsigned int a2, int a3)
{
  __CFString *v3;
  __CFString *v6;
  __CFString *v7;
  __CFString *v8;
  __CFString *v9;
  __CFString *v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v16;

  v3 = &stru_100941758;
  if (!a2)
    return v3;
  v6 = CFSTR("BT_GLOBAL_TCC_CENTER_LABEL_ONE_DEVICE");
  if (a3)
    v6 = &stru_100941758;
  v7 = v6;
  if (a2 > 0x32)
  {
    v8 = CFSTR("More than %d devices found");
    v9 = CFSTR("BT_GLOBAL_TCC_CENTER_LABEL_MULTI_DEVICES_CAPPED");
LABEL_8:
    if (a3)
      v9 = &stru_100941758;
    v10 = v9;

    v7 = v10;
    goto LABEL_12;
  }
  if (a2 >= 2)
  {
    v8 = CFSTR("%d devices found");
    v9 = CFSTR("BT_GLOBAL_TCC_CENTER_LABEL_MULTI_DEVICES");
    goto LABEL_8;
  }
  v8 = CFSTR("%d device found");
LABEL_12:
  v11 = sub_100355F10(v7, v8);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  if (a2 >= 0x32)
    v13 = 50;
  else
    v13 = a2;
  v16 = 0;
  v3 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithValidatedFormat:validFormatSpecifiers:error:](NSString, "stringWithValidatedFormat:validFormatSpecifiers:error:", v12, CFSTR("%d"), &v16, v13));
  v14 = v16;

  return v3;
}

void sub_100663C90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double sub_100663CAC(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  double v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  unint64_t j;
  unsigned __int16 v13;
  unsigned __int16 v14;
  unint64_t v15;
  void *v16;
  void *v17;
  unsigned __int8 v18;
  id v19;
  double v20;
  void *v22;
  id obj;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];

  v5 = a1;
  v6 = a2;
  v22 = v5;
  if (objc_msgSend(v5, "containsObject:", v6))
  {
    *a3 = objc_retainAutorelease(v6);
    v7 = 1.5;
  }
  else
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    obj = v5;
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v25;
      v7 = 0.0;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v25 != v9)
            objc_enumerationMutation(obj);
          v11 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
          for (j = 1; ; ++j)
          {
            v13 = (unsigned __int16)objc_msgSend(v11, "length");
            v14 = (unsigned __int16)objc_msgSend(v6, "length");
            v15 = v14 >= v13 ? v13 : v14;
            if (j >= v15)
              break;
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "substringWithRange:", 0, j));
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "substringWithRange:", 0, j));
            v18 = objc_msgSend(v16, "isEqualToString:", v17);

            if ((v18 & 1) == 0)
              break;
            v19 = objc_msgSend(v6, "length");
            v20 = (double)(unsigned __int16)j / (double)(unint64_t)v19
                + (double)(unsigned __int16)j / (double)(unint64_t)objc_msgSend(v11, "length");
            if (a3 && v20 > v7)
              *a3 = objc_retainAutorelease(v11);
            if (v20 >= v7)
              v7 = v20;
          }
        }
        v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v24, v28, 16);
      }
      while (v8);
    }
    else
    {
      v7 = 0.0;
    }

  }
  return v7;
}

void sub_100663EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100663F3C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double Current;
  int v5;
  int v6;
  double v7;
  double v8;
  char *v9;
  char *v10;
  char v11;
  char v12;
  int v13;
  BOOL v14;
  int v15;
  _BYTE *v16;
  int v17;
  void *v18[2];
  uint64_t v19;
  void *__p[2];
  char v21;
  __darwin_suseconds_t v22;
  int v23;

  v23 = 0;
  v22 = 0;
  sub_10011344C(&v23, &v22);
  Current = CFAbsoluteTimeGetCurrent();
  v5 = *(_DWORD *)(a1 + 140);
  if (v5)
    v6 = v23 - v5;
  else
    v6 = 0;
  v7 = Current - (double)v6;
  if (!v6)
    v7 = 0.0;
  if (!*(_BYTE *)(a1 + 164))
    Current = v7;
  if (*(double *)(a1 + 400) >= Current)
    v8 = *(double *)(a1 + 400);
  else
    v8 = Current;
  v9 = *(char **)(a1 + 584);
  v10 = *(char **)(a1 + 592);
  v11 = -127;
  if (v9 != v10)
  {
    do
    {
      v13 = *v9++;
      v12 = v13;
      if (v11 <= v13)
        v11 = v12;
    }
    while (v9 != v10);
    if (!v11)
      v11 = *(_BYTE *)(a1 + 476);
  }
  if (*(char *)(a1 + 231) < 0)
  {
    if (*(_QWORD *)(a1 + 216))
      goto LABEL_19;
  }
  else if (*(_BYTE *)(a1 + 231))
  {
LABEL_19:
    v14 = 1;
    goto LABEL_26;
  }
  sub_100091AE8(__p, "HasTS");
  v14 = a1 + 184 != sub_10001F2AC(a1 + 176, (const void **)__p) || *(_BYTE *)(a1 + 608) || *(_QWORD *)(a1 + 64) != 0;
  if (v21 < 0)
    operator delete(__p[0]);
LABEL_26:
  if (*(char *)(a1 + 127) < 0)
  {
    sub_10003430C(v18, *(void **)(a1 + 104), *(_QWORD *)(a1 + 112));
  }
  else
  {
    *(_OWORD *)v18 = *(_OWORD *)(a1 + 104);
    v19 = *(_QWORD *)(a1 + 120);
  }
  v15 = *(_DWORD *)(a1 + 128);
  *(double *)a2 = v8;
  v16 = (_BYTE *)(a2 + 8);
  if (SHIBYTE(v19) < 0)
  {
    sub_10003430C(v16, v18[0], (unint64_t)v18[1]);
    v17 = SHIBYTE(v19);
    *(_BYTE *)(a2 + 32) = v11;
    *(_DWORD *)(a2 + 36) = v15;
    *(_BYTE *)(a2 + 40) = v14;
    if (v17 < 0)
      operator delete(v18[0]);
  }
  else
  {
    *(_OWORD *)v16 = *(_OWORD *)v18;
    *(_QWORD *)(a2 + 24) = v19;
    *(_BYTE *)(a2 + 32) = v11;
    *(_DWORD *)(a2 + 36) = v15;
    *(_BYTE *)(a2 + 40) = v14;
  }
}

void sub_1006640FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

NSMutableArray *sub_100664130(uint64_t a1, uint64_t a2, unsigned int a3)
{
  double Current;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int i;
  uint64_t v9;
  double v10;
  double v11;
  void **v12;
  void *v13;
  uint64_t **v14;
  int v15;
  double v16;
  double v17;
  BOOL v18;
  double v19;
  id v20;
  float v21;
  unsigned int v22;
  NSObject *v23;
  uint8_t *v24;
  int v25;
  char **v26;
  char *v27;
  char *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t j;
  char *v32;
  uint64_t k;
  NSObject *v34;
  const char *v35;
  void **v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unsigned __int8 *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  double *v45;
  double *v46;
  double v47;
  double v48;
  unsigned int v50;
  NSMutableDictionary *v51;
  void **v52;
  void *v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  void *v57;
  const char *v58;
  void *v59;
  void *v60;
  NSObject *v61;
  _UNKNOWN **v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  const __CFString *v80;
  uint64_t m;
  const char *v82;
  void *v83;
  char *v84;
  uint64_t v85;
  unsigned __int16 v86;
  double v87;
  __int16 v88;
  void *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  const __CFString *v93;
  _UNKNOWN **v94;
  const char *v95;
  size_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  BOOL v100;
  uint64_t *v101;
  uint64_t v102;
  NSString *v103;
  void *v104;
  void *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  id v109;
  int v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t *v114;
  double v115;
  float v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  uint64_t *v123;
  float v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  const char *v130;
  size_t v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t *v149;
  float v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t *v157;
  float v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t *v161;
  int v162;
  const char *v163;
  size_t v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t *v168;
  float v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t *v172;
  uint64_t *v173;
  NSObject *v174;
  _BYTE *v175;
  _BYTE *v176;
  uint64_t v177;
  uint64_t n;
  NSMutableArray *v179;
  uint64_t v182;
  NSMutableSet *v183;
  uint64_t v186;
  unsigned int v187;
  NSMutableArray *v188;
  unsigned int v189;
  uint64_t v190;
  NSMutableDictionary *v191;
  id v192;
  uint64_t *v193;
  _QWORD *v194[2];
  _BYTE v195[12];
  char v196;
  uint8_t v197[4];
  _BYTE *v198;
  uint8_t buf[32];
  __int128 v200;
  __int128 v201;
  void *v202[2];
  __int128 v203;
  __int128 v204;
  _OWORD v205[9];
  uint64_t v206;
  void *__p[4];
  __int128 v208;
  __int128 v209;
  void *v210[2];
  __int128 v211;
  __int128 v212;
  _OWORD v213[9];
  uint64_t v214;
  uint8_t v215[16];
  _QWORD v216[3];
  uint64_t v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  double v221;
  double v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  __int128 v228;
  _OWORD v229[5];

  v188 = objc_opt_new(NSMutableArray);
  if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
  {
    Current = CFAbsoluteTimeGetCurrent();
    v191 = objc_opt_new(NSMutableDictionary);
    v4 = 0;
    v194[0] = 0;
    v194[1] = 0;
    v193 = (uint64_t *)v194;
    v5 = 0uLL;
    v228 = 0u;
    memset(v229, 0, sizeof(v229));
    do
    {
      *(_QWORD *)&v6 = &v229[v4 - 1];
      *((_QWORD *)&v6 + 1) = (char *)&v229[v4] + 8;
      v7 = v6;
      vst3q_f64((double *)v6, *(float64x2x3_t *)(&v5 - 2));
      v4 += 3;
    }
    while (v4 != 6);
    v183 = objc_opt_new(NSMutableSet);
    for (i = 2700; i != 2709; ++i)
    {
      *(_DWORD *)buf = i;
      __p[0] = buf;
      *((_WORD *)sub_1002BB7C4(&v193, (int *)buf, (uint64_t)&unk_100740F58, (_DWORD **)__p) + 16) = 0;
    }
    v9 = *(_QWORD *)(a2 + 8);
    if (v9 != a2)
    {
      v182 = 0;
      v10 = 0.0;
      v11 = 0.0;
      while (1)
      {
        if (*(char *)(v9 + 47) < 0)
        {
          sub_10003430C(__p, *(void **)(v9 + 24), *(_QWORD *)(v9 + 32));
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)(v9 + 24);
          __p[2] = *(void **)(v9 + 40);
        }
        if (SHIBYTE(__p[2]) >= 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
        LODWORD(v216[0]) = 0;
        LODWORD(v216[0]) = sub_1006633E0((_QWORD *)a1, v13, 1);
        __p[0] = v216;
        v14 = sub_1002BB7C4(&v193, (int *)v216, (uint64_t)&unk_100740F58, (_DWORD **)__p);
        ++*((_WORD *)v14 + 16);
        if (LODWORD(v216[0]) != 2700)
        {
          v15 = HIDWORD(v182);
          if (*(_DWORD *)(v9 + 52) == 1)
            v15 = HIDWORD(v182) + 1;
          HIDWORD(v182) = v15;
        }
        v16 = *(double *)(v9 + 16);
        if (v16 > 0.0)
        {
          v17 = Current - v16;
          v18 = v11 < v17 || v11 == 0.0;
          if (v18)
            v11 = v17;
          if (v10 == 0.0)
          {
            v10 = v17;
          }
          else if (v17 < v10)
          {
            v10 = v17;
          }
        }
        if ((LODWORD(v216[0]) - 2707) >= 2 && LODWORD(v216[0]))
          goto LABEL_49;
        v192 = 0;
        v19 = sub_100663CAC(v183, v13, &v192);
        v20 = v192;
        v21 = v19;
        if (v21 >= 1.5)
        {
          v23 = qword_100999810;
          if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
          {
            sub_100665BD4(v9 + 16);
            v24 = buf;
            if ((buf[23] & 0x80u) != 0)
              v24 = *(uint8_t **)buf;
            LODWORD(__p[0]) = 136381443;
            *(void **)((char *)__p + 4) = v24;
            WORD2(__p[1]) = 2048;
            *(double *)((char *)&__p[1] + 6) = v21;
            HIWORD(__p[2]) = 2048;
            __p[3] = (void *)0x3FF8000000000000;
            LOWORD(v208) = 2113;
            *(_QWORD *)((char *)&v208 + 2) = v20;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "_retrieveRecentDevicesInfo nameSimilarToReportedName %{private}s similarity %f > %f already reported as %{private}@", (uint8_t *)__p, 0x2Au);
            if ((char)buf[23] < 0)
              operator delete(*(void **)buf);
          }
          LOWORD(v182) = v182 + 1;
          goto LABEL_48;
        }
        -[NSMutableSet addObject:](v183, "addObject:", v13);
        if (*(_BYTE *)(v9 + 56))
        {
          v22 = 0;
        }
        else
        {
          v25 = v216[0];
          if (LODWORD(v216[0]))
          {
            if (LODWORD(v216[0]) == 2707)
            {
              v22 = 3;
            }
            else
            {
              if (LODWORD(v216[0]) != 2708)
              {
                v29 = qword_100999810;
                if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
                {
                  LODWORD(__p[0]) = 67109120;
                  HIDWORD(__p[0]) = v25;
                  _os_log_fault_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "_retrieveRecentDevicesInfo invalid code path sanityCheckResult:%d", (uint8_t *)__p, 8u);
                }
                goto LABEL_48;
              }
              v22 = 2;
            }
          }
          else
          {
            v22 = 1;
          }
        }
        v26 = (char **)&v229[-1] + 3 * v22;
        v27 = sub_10066A598((uint64_t)v26, 0, 0, v9 + 16);
        *((_QWORD *)v27 + 1) = v26;
        v28 = *v26;
        *(_QWORD *)v27 = *v26;
        *((_QWORD *)v28 + 1) = v27;
        *v26 = v27;
        ++v26[2];
LABEL_48:

LABEL_49:
        v9 = *(_QWORD *)(v9 + 8);
        if (v9 == a2)
          goto LABEL_55;
      }
    }
    v182 = 0;
    v11 = 0.0;
    v10 = 0.0;
LABEL_55:
    v30 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 160))(v30))
    {
      for (j = 0; j != 4; ++j)
      {
        v32 = (char *)&v229[-1] + 24 * j;
        for (k = *((_QWORD *)v32 + 1); (char *)k != v32; k = *(_QWORD *)(k + 8))
        {
          v34 = qword_100999810;
          if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
          {
            v35 = "Unknown";
            if (j <= 4u)
              v35 = off_10093EA18[(char)j];
            sub_100665BD4(k + 16);
            v36 = __p;
            if (SHIBYTE(__p[2]) < 0)
              v36 = (void **)__p[0];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v35;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v36;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "_retrieveRecentDevicesInfo deviceBucket[%s]:%s", buf, 0x16u);
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
          }
        }
      }
    }
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v227 = 0;
    v226 = 0;
    v216[0] = 0x200000000;
    v218 = 0u;
    v219 = 0u;
    v220 = 0u;
    *(double *)&v216[1] = Current;
    *(double *)&v216[2] = Current + -1800.0;
    v217 = 1;
    v40 = (unsigned __int8 *)(a1 + 374);
    WORD2(v217) = *(unsigned __int8 *)(a1 + 374);
    *(double *)&v218 = Current;
    *((double *)&v218 + 1) = Current + -1800.0;
    LODWORD(v219) = 2;
    WORD2(v219) = WORD2(v217);
    *((double *)&v219 + 1) = Current;
    *(double *)&v220 = Current + -1800.0;
    DWORD2(v220) = 3;
    WORD6(v220) = WORD2(v217);
    v221 = Current;
    v222 = Current + -1800.0;
    v224 = 0;
    v223 = 4;
    v225 = 0;
    do
    {
      v41 = (char *)&v229[-1] + 24 * v37;
      v42 = *((_QWORD *)v41 + 1);
      if ((char *)v42 != v41)
      {
        v189 = WORD2(v216[3 * v38]);
        v43 = v37;
        v44 = &v216[3 * v38];
        v45 = (double *)(v44 + 2);
        v46 = (double *)(v44 + 1);
        v186 = (int)v37;
        do
        {
          v47 = *(double *)(v42 + 16);
          if (v47 > 0.0)
          {
            v48 = *v45;
            if (*v45 != 0.0 && v47 <= *v46 && v47 >= v48 && *v46 != 0.0)
            {
              ++*((_WORD *)&v226 + v43);
              if (*v40 > (unsigned __int16)-[NSMutableArray count](v188, "count", v48))
              {
                v50 = *((unsigned __int16 *)&v227 + v43);
                if (v50 < v189)
                {
                  *((_WORD *)&v227 + v43) = v50 + 1;
                  v51 = objc_opt_new(NSMutableDictionary);
                  if (*(char *)(v42 + 47) < 0)
                  {
                    sub_10003430C(__p, *(void **)(v42 + 24), *(_QWORD *)(v42 + 32));
                  }
                  else
                  {
                    *(_OWORD *)__p = *(_OWORD *)(v42 + 24);
                    __p[2] = *(void **)(v42 + 40);
                  }
                  if (SHIBYTE(__p[2]) >= 0)
                    v52 = __p;
                  else
                    v52 = (void **)__p[0];
                  v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v52));
                  -[NSMutableDictionary setObject:forKeyedSubscript:](v51, "setObject:forKeyedSubscript:", v53, CFSTR("mapLabelCalloutTitleKey"));

                  if (SHIBYTE(__p[2]) < 0)
                    operator delete(__p[0]);
                  v54 = *(unsigned __int8 *)(v42 + 48);
                  if ((v54 + 127) > 0x93u)
                  {
                    v55 = 25;
                  }
                  else if ((char)v54 <= -65)
                  {
                    if (v54 <= 0xB4)
                      v55 = 25;
                    else
                      v55 = 50;
                  }
                  else
                  {
                    v55 = 100;
                  }
                  v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), v55));
                  -[NSMutableDictionary setObject:forKeyedSubscript:](v51, "setObject:forKeyedSubscript:", v56, CFSTR("mapLabelCalloutPercentageValue"));

                  v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d"), *(char *)(v42 + 48)));
                  -[NSMutableDictionary setObject:forKeyedSubscript:](v51, "setObject:forKeyedSubscript:", v57, CFSTR("rssiValue"));

                  v58 = "Unknown";
                  if (v43 < 5)
                    v58 = off_10093EA18[v186];
                  v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v58));
                  -[NSMutableDictionary setObject:forKeyedSubscript:](v51, "setObject:forKeyedSubscript:", v59, CFSTR("bucketName"));

                  if (v47 > 0.0)
                  {
                    v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%f"), (Current - v47) / 60.0));
                    -[NSMutableDictionary setObject:forKeyedSubscript:](v51, "setObject:forKeyedSubscript:", v60, CFSTR("seenMinutesAgo"));

                  }
                  -[NSMutableArray addObject:](v188, "addObject:", v51);

                }
              }
            }
          }
          v42 = *(_QWORD *)(v42 + 8);
        }
        while ((char *)v42 != v41);
      }
      v38 = ++v39;
      v37 = v216[3 * v39];
    }
    while (v37 != 4);
    if ((unint64_t)-[NSMutableArray count](v188, "count") > *v40)
    {
      v61 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_FAULT))
        sub_100715BA4((unsigned __int16)-[NSMutableArray count](v188, "count"), v40, v215, v61);
    }
    -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", &off_100960A90, CFSTR("DeviceAgeThresholdMinutes"));
    v62 = &AMFDRSealingMapCopyLocalDictForClass_ptr;
    v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", v63, CFSTR("MetricSourceTrigger"));

    v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", -[NSMutableArray count](v188, "count")));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", v64, CFSTR("TotalReported"));

    v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a2 + 16)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", v65, CFSTR("DiscoveredDevices"));

    v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 152)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", v66, CFSTR("DBSize"));

    v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", (unsigned __int16)v227));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", v67, CFSTR("ReportedMyAppleDevicesCount"));

    v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD1(v227)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", v68, CFSTR("ReportedOtherSanitizedLexicalCount"));

    v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD2(v227)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", v69, CFSTR("ReportedOtherSanitizedCapitalizedCount"));

    v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", HIWORD(v227)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", v70, CFSTR("ReportedOtherSanitizedCount"));

    if (qword_100977B40 != -1)
      dispatch_once(&qword_100977B40, &stru_10093E910);
    v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)off_100977B38 + 126)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", v71, CFSTR("ActiveScansCount"));

    v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 368)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", v72, CFSTR("ActiveScansForNameSearchCount"));

    v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", 0));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", v73, CFSTR("ScanRSPNamesCount"));

    v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", WORD2(v182)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", v74, CFSTR("ADVNameCount"));

    v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v11));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", v75, CFSTR("OldestDeviceAgeSeconds"));

    v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v10));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", v76, CFSTR("NewestDeviceAgeSeconds"));

    v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", (unsigned __int16)v182));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", v77, CFSTR("DupNameDropCount"));

    v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(_QWORD *)(a1 + 272)));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", v78, CFSTR("CachedEvictedCount"));

    -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", &off_100960AA8, CFSTR("CachedEvictedMaxCount"));
    v214 = 0;
    v212 = 0u;
    memset(v213, 0, sizeof(v213));
    *(_OWORD *)v210 = 0u;
    v211 = 0u;
    v208 = 0u;
    v209 = 0u;
    memset(__p, 0, sizeof(__p));
    sub_100272ADC((uint64_t)__p);
    v79 = 15;
    v80 = CFSTR("Bucket%dMin%s");
    do
    {
      for (m = 0; m != 4; ++m)
      {
        v82 = "Unknown";
        if (m <= 4u)
          v82 = off_10093EA18[(char)m];
        v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", v80, v79, v82));
        v84 = (char *)&v229[-1] + 24 * m;
        v85 = *((_QWORD *)v84 + 1);
        if ((char *)v85 == v84)
        {
          v86 = 0;
        }
        else
        {
          v86 = 0;
          do
          {
            v87 = *(double *)(v85 + 16);
            v88 = v87 >= 0.0;
            if (Current < v87)
              v88 = 0;
            if (Current - v87 > (double)(60 * (int)v79))
              v88 = 0;
            v86 += v88;
            v85 = *(_QWORD *)(v85 + 8);
          }
          while ((char *)v85 != v84);
        }
        v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62[486], "numberWithUnsignedShort:", v86));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", v89, v83);

        v90 = sub_100027F68();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v90 + 160))(v90))
        {
          v91 = (_QWORD *)std::ostream::operator<<(__p, (unsigned __int16)v79);
          v92 = sub_1002614D8(v91, (uint64_t)"m", 1);
          v93 = v80;
          v94 = v62;
          v95 = "Unknown";
          if (m <= 4u)
            v95 = off_10093EA18[(char)m];
          v96 = strlen(v95);
          v97 = sub_1002614D8(v92, (uint64_t)v95, v96);
          v62 = v94;
          v80 = v93;
          v98 = sub_1002614D8(v97, (uint64_t)":", 1);
          v99 = (_QWORD *)std::ostream::operator<<(v98, v86);
          sub_1002614D8(v99, (uint64_t)" ", 1);
        }

      }
      v100 = v79 >= 0x2E;
      v79 = (v79 + 15);
    }
    while (!v100);
    v101 = v193;
    if (v193 != (uint64_t *)v194)
    {
      do
      {
        v102 = *(uint64_t *)((char *)v101 + 28);
        v103 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("NameError%s"), sub_100662D18(v102));
        v104 = (void *)objc_claimAutoreleasedReturnValue(v103);
        v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62[486], "numberWithUnsignedShort:", WORD2(v102)));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v191, "setObject:forKeyedSubscript:", v105, v104);

        v106 = (uint64_t *)v101[1];
        if (v106)
        {
          do
          {
            v107 = v106;
            v106 = (uint64_t *)*v106;
          }
          while (v106);
        }
        else
        {
          do
          {
            v107 = (uint64_t *)v101[2];
            v18 = *v107 == (_QWORD)v101;
            v101 = v107;
          }
          while (!v18);
        }
        v101 = v107;
      }
      while (v107 != (uint64_t *)v194);
    }
    v108 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v108 + 160))(v108))
    {
      if (qword_100977B40 != -1)
        dispatch_once(&qword_100977B40, &stru_10093E910);
      v187 = *((_DWORD *)off_100977B38 + 126);
      v190 = *(_QWORD *)(a2 + 16);
      v206 = 0;
      v204 = 0u;
      memset(v205, 0, sizeof(v205));
      *(_OWORD *)v202 = 0u;
      v203 = 0u;
      v200 = 0u;
      v201 = 0u;
      memset(buf, 0, sizeof(buf));
      sub_100272ADC((uint64_t)buf);
      v109 = -[NSMutableArray count](v188, "count");
      v110 = *(_DWORD *)(a1 + 152);
      v111 = (_QWORD *)std::ostream::operator<<(buf, -[NSMutableArray count](v188, "count"));
      v112 = sub_1002614D8(v111, (uint64_t)"/", 1);
      v113 = (_QWORD *)std::ostream::operator<<(v112, (unsigned __int16)v190);
      v114 = sub_1002614D8(v113, (uint64_t)"(", 1);
      v115 = (double)(unsigned __int16)v190;
      v116 = (double)(unint64_t)v109 * 100.0 / v115;
      v117 = *v114;
      *(uint64_t *)((char *)v114 + *(_QWORD *)(*v114 - 24) + 24) = 5;
      *(uint64_t *)((char *)v114 + *(_QWORD *)(v117 - 24) + 16) = 3;
      v118 = (_QWORD *)std::ostream::operator<<(v116);
      v119 = sub_1002614D8(v118, (uint64_t)"%) dbUtilization:", 17);
      v120 = (_QWORD *)std::ostream::operator<<(v119, (unsigned __int16)v190);
      v121 = sub_1002614D8(v120, (uint64_t)"/", 1);
      v122 = (_QWORD *)std::ostream::operator<<(v121, *(unsigned int *)(a1 + 152));
      v123 = sub_1002614D8(v122, (uint64_t)"(", 1);
      v124 = v115 * 100.0 / (double)v110;
      v125 = *v123;
      *(uint64_t *)((char *)v123 + *(_QWORD *)(*v123 - 24) + 24) = 5;
      *(uint64_t *)((char *)v123 + *(_QWORD *)(v125 - 24) + 16) = 3;
      v126 = (_QWORD *)std::ostream::operator<<(v124);
      sub_1002614D8(v126, (uint64_t)"%)", 2);
      v127 = 0;
      v128 = v229;
      do
      {
        v129 = sub_1002614D8(buf, (uint64_t)" ", 1);
        v130 = "Unknown";
        if (v127 <= 4u)
          v130 = off_10093EA18[v127];
        v131 = strlen(v130);
        v132 = sub_1002614D8(v129, (uint64_t)v130, v131);
        v133 = sub_1002614D8(v132, (uint64_t)":", 1);
        v134 = (_QWORD *)std::ostream::operator<<(v133, *((unsigned __int16 *)&v227 + v127));
        v135 = sub_1002614D8(v134, (uint64_t)"/", 1);
        v136 = (_QWORD *)std::ostream::operator<<(v135, *((unsigned __int16 *)&v226 + v127));
        v137 = sub_1002614D8(v136, (uint64_t)"/", 1);
        std::ostream::operator<<(v137, *v128);
        ++v127;
        v128 += 3;
      }
      while (v127 != 4);
      sub_1002614D8(buf, (uint64_t)" oldestAge", 10);
      if (v11 <= 60.0)
      {
        sub_1002614D8(buf, (uint64_t)"Seconds:", 8);
      }
      else if (v11 <= 3600.0)
      {
        sub_1002614D8(buf, (uint64_t)"Minutes:", 8);
        v11 = v11 / 60.0;
      }
      else
      {
        sub_1002614D8(buf, (uint64_t)"Hours:", 6);
        v11 = v11 / 3600.0;
      }
      std::ostream::operator<<(v11);
      sub_1002614D8(buf, (uint64_t)" newestAge", 10);
      if (v10 <= 60.0)
      {
        sub_1002614D8(buf, (uint64_t)"Seconds:", 8);
      }
      else if (v10 <= 3600.0)
      {
        sub_1002614D8(buf, (uint64_t)"Minutes:", 8);
        v10 = v10 / 60.0;
      }
      else
      {
        sub_1002614D8(buf, (uint64_t)"Hours:", 6);
        v10 = v10 / 3600.0;
      }
      std::ostream::operator<<(v10);
      v138 = sub_1002614D8(buf, (uint64_t)" dupNameCount:", 14);
      std::ostream::operator<<(v138, (unsigned __int16)v182);
      v139 = sub_1002614D8(buf, (uint64_t)" evictedCacheSize:", 18);
      v140 = (_QWORD *)std::ostream::operator<<(v139, *(_QWORD *)(a1 + 272));
      v141 = sub_1002614D8(v140, (uint64_t)"/", 1);
      std::ostream::operator<<(v141, 400);
      v142 = sub_1002614D8(buf, (uint64_t)" activeScans:", 13);
      v143 = (_QWORD *)std::ostream::operator<<(v142, v187);
      v144 = sub_1002614D8(v143, (uint64_t)" nameSearchActiveScans:", 23);
      std::ostream::operator<<(v144, *(unsigned int *)(a1 + 368));
      v145 = sub_1002614D8(buf, (uint64_t)" scanRspNames:", 14);
      v146 = (_QWORD *)std::ostream::operator<<(v145, 0);
      v147 = sub_1002614D8(v146, (uint64_t)"/", 1);
      v148 = (_QWORD *)std::ostream::operator<<(v147, (unsigned __int16)v190);
      v149 = sub_1002614D8(v148, (uint64_t)"(", 1);
      v150 = 0.0 / v115;
      v151 = *v149;
      *(uint64_t *)((char *)v149 + *(_QWORD *)(*v149 - 24) + 24) = 5;
      *(uint64_t *)((char *)v149 + *(_QWORD *)(v151 - 24) + 16) = 3;
      v152 = (_QWORD *)std::ostream::operator<<(v150);
      sub_1002614D8(v152, (uint64_t)"%) ", 3);
      v153 = sub_1002614D8(buf, (uint64_t)" advIndNames:", 13);
      v154 = (_QWORD *)std::ostream::operator<<(v153, WORD2(v182));
      v155 = sub_1002614D8(v154, (uint64_t)"/", 1);
      v156 = (_QWORD *)std::ostream::operator<<(v155, (unsigned __int16)v190);
      v157 = sub_1002614D8(v156, (uint64_t)"(", 1);
      v158 = (double)WORD2(v182) * 100.0 / v115;
      v159 = *v157;
      *(uint64_t *)((char *)v157 + *(_QWORD *)(*v157 - 24) + 24) = 5;
      *(uint64_t *)((char *)v157 + *(_QWORD *)(v159 - 24) + 16) = 3;
      v160 = (_QWORD *)std::ostream::operator<<(v158);
      sub_1002614D8(v160, (uint64_t)"%) ", 3);
      sub_1002614D8(buf, (uint64_t)" errors: ", 9);
      v161 = v193;
      if (v193 != (uint64_t *)v194)
      {
        do
        {
          v162 = *((_DWORD *)v161 + 8);
          v163 = sub_100662C6C(*((_DWORD *)v161 + 7));
          v164 = strlen(v163);
          v165 = sub_1002614D8(buf, (uint64_t)v163, v164);
          v166 = sub_1002614D8(v165, (uint64_t)":", 1);
          v167 = (_QWORD *)std::ostream::operator<<(v166, (unsigned __int16)v162);
          v168 = sub_1002614D8(v167, (uint64_t)"(", 1);
          v169 = (double)(unsigned __int16)v162 * 100.0 / v115;
          v170 = *v168;
          *(uint64_t *)((char *)v168 + *(_QWORD *)(*v168 - 24) + 24) = 5;
          *(uint64_t *)((char *)v168 + *(_QWORD *)(v170 - 24) + 16) = 3;
          v171 = (_QWORD *)std::ostream::operator<<(v169);
          sub_1002614D8(v171, (uint64_t)"%) ", 3);
          v172 = (uint64_t *)v161[1];
          if (v172)
          {
            do
            {
              v173 = v172;
              v172 = (uint64_t *)*v172;
            }
            while (v172);
          }
          else
          {
            do
            {
              v173 = (uint64_t *)v161[2];
              v18 = *v173 == (_QWORD)v161;
              v161 = v173;
            }
            while (!v18);
          }
          v161 = v173;
        }
        while (v173 != (uint64_t *)v194);
      }
      v174 = qword_100999810;
      if (os_log_type_enabled((os_log_t)qword_100999810, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str(&buf[8]);
        if (v196 >= 0)
          v175 = v195;
        else
          v175 = *(_BYTE **)v195;
        *(_DWORD *)v197 = 136315138;
        v198 = v175;
        _os_log_impl((void *)&_mh_execute_header, v174, OS_LOG_TYPE_DEFAULT, "statedump: _retrieveRecentDevicesInfo stats reported: %s", v197, 0xCu);
        if (v196 < 0)
          operator delete(*(void **)v195);
        v174 = qword_100999810;
      }
      if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str(&__p[1]);
        if (v196 >= 0)
          v176 = v195;
        else
          v176 = *(_BYTE **)v195;
        *(_DWORD *)v197 = 136315138;
        v198 = v176;
        _os_log_impl((void *)&_mh_execute_header, v174, OS_LOG_TYPE_DEFAULT, "statedump: _retrieveRecentDevicesInfo time buckets: %s", v197, 0xCu);
        if (v196 < 0)
          operator delete(*(void **)v195);
        v174 = qword_100999810;
      }
      if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v195 = 138477827;
        *(_QWORD *)&v195[4] = v188;
        _os_log_impl((void *)&_mh_execute_header, v174, OS_LOG_TYPE_DEFAULT, "statedump: _retrieveRecentDevicesInfo return dict: %{private}@", v195, 0xCu);
      }
      if (SHIBYTE(v203) < 0)
        operator delete(v202[1]);
      std::streambuf::~streambuf(&buf[8]);
      std::ios::~ios(v205);
    }
    v177 = sub_100065478();
    (*(void (**)(uint64_t, NSMutableDictionary *))(*(_QWORD *)v177 + 688))(v177, v191);
    if (SHIBYTE(v211) < 0)
      operator delete(v210[1]);
    std::streambuf::~streambuf(&__p[1]);
    std::ios::~ios(v213);

    for (n = 72; n != -24; n -= 24)
      sub_100668FCC((void **)((char *)&v229[-1] + n));
    sub_10001A82C((uint64_t)&v193, v194[0]);

  }
  v179 = v188;

  return v179;
}

void sub_100665968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  uint64_t v69;
  uint64_t i;

  sub_100272CFC((uint64_t)&a35);
  sub_100272CFC((uint64_t)&__p);

  for (i = 72; i != -24; i -= 24)
    sub_100668FCC((void **)(v69 - 256 + i));
  sub_10001A82C((uint64_t)&a26, (_QWORD *)a27);

  _Unwind_Resume(a1);
}

uint64_t sub_100665BD4(uint64_t a1)
{
  const char *v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  double v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  _OWORD v18[4];
  void *__p[2];
  __int128 v20;
  __int128 v21;
  _OWORD v22[9];
  uint64_t v23;

  v23 = 0;
  v21 = 0u;
  memset(v22, 0, sizeof(v22));
  *(_OWORD *)__p = 0u;
  v20 = 0u;
  memset(v18, 0, sizeof(v18));
  sub_100272ADC((uint64_t)v18);
  sub_1002614D8(v18, (uint64_t)"CachedLeDeviceEntry:", 20);
  v2 = "GAP,";
  v3 = v18;
  v4 = 4;
  switch(*(_DWORD *)(a1 + 36))
  {
    case 1:
      v2 = "Adv,";
      v3 = v18;
      v4 = 4;
      break;
    case 2:
      break;
    case 3:
      v2 = "User,";
      v3 = v18;
      v4 = 5;
      break;
    case 4:
      v2 = "FindMy,";
      v3 = v18;
      v4 = 7;
      break;
    default:
      v3 = sub_1002614D8(v18, (uint64_t)", ", 2);
      v2 = "Unknown,";
      v4 = 8;
      break;
  }
  sub_1002614D8(v3, (uint64_t)v2, v4);
  v5 = *(char *)(a1 + 31);
  if (v5 >= 0)
    v6 = a1 + 8;
  else
    v6 = *(_QWORD *)(a1 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 31);
  else
    v7 = *(_QWORD *)(a1 + 16);
  v8 = sub_1002614D8(v18, v6, v7);
  v9 = sub_1002614D8(v8, (uint64_t)" RSSI:", 6);
  std::ostream::operator<<(v9, *(char *)(a1 + 32));
  v10 = sub_1002614D8(v18, (uint64_t)" MyAppleDevice:", 15);
  if (*(_BYTE *)(a1 + 40))
    v11 = "YES";
  else
    v11 = "NO";
  if (*(_BYTE *)(a1 + 40))
    v12 = 3;
  else
    v12 = 2;
  sub_1002614D8(v10, (uint64_t)v11, v12);
  sub_1002614D8(v18, (uint64_t)" LastSeen:", 10);
  if (*(double *)a1 <= 0.0)
  {
    sub_1002614D8(v18, (uint64_t)"Never", 5);
    goto LABEL_27;
  }
  v13 = CFAbsoluteTimeGetCurrent() - *(double *)a1;
  if (v13 <= 60.0)
  {
    v14 = (_QWORD *)std::ostream::operator<<(v18, (int)v13);
    v15 = " seconds";
LABEL_25:
    v16 = 8;
    goto LABEL_26;
  }
  if (v13 <= 3600.0)
  {
    v14 = (_QWORD *)std::ostream::operator<<(v18, (int)(v13 / 60.0));
    v15 = " minutes";
    goto LABEL_25;
  }
  v14 = (_QWORD *)std::ostream::operator<<(v18, (int)(v13 / 3600.0));
  v15 = " hours";
  v16 = 6;
LABEL_26:
  sub_1002614D8(v14, (uint64_t)v15, v16);
LABEL_27:
  std::stringbuf::str((char *)v18 + 8);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v18 + 8);
  return std::ios::~ios(v22);
}

void sub_100665E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100272CFC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

NSArray *sub_100665EA8(_QWORD *a1, unsigned int a2)
{
  NSArray *v4;
  uint64_t i;
  void *v6;
  id v7;
  void *v8;
  id v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *j;
  char *v15;
  _QWORD *v16;
  NSMutableArray *v17;
  uint64_t v18;
  void *v20[3];
  uint64_t v21;
  __int128 __p;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void *v26[2];
  uint64_t v27;
  _QWORD v28[2];

  v4 = objc_opt_new(NSArray);
  if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
  {
    v28[0] = 0;
    v28[1] = 0;
    sub_10003415C((uint64_t)v28, (uint64_t)(a1 + 11));
    v26[0] = v26;
    v26[1] = v26;
    v27 = 0;
    for (i = a1[26]; (_QWORD *)i != a1 + 25; i = *(_QWORD *)(i + 8))
    {
      v6 = (void *)a1[21];
      v7 = sub_100030DF4((const unsigned __int8 *)(i + 16));
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = objc_msgSend(v6, "objectForKey:", v8);

      sub_100663F3C((uint64_t)v9, (uint64_t)&v21);
      v10 = (char *)operator new(0x40uLL);
      *((_QWORD *)v10 + 2) = v21;
      *(_OWORD *)(v10 + 24) = __p;
      v11 = v23;
      __p = 0uLL;
      v23 = 0;
      v12 = v24;
      *((_QWORD *)v10 + 5) = v11;
      *((_QWORD *)v10 + 6) = v12;
      v10[56] = v25;
      v13 = v26[0];
      *(void **)v10 = v26[0];
      *((_QWORD *)v10 + 1) = v26;
      v13[1] = v10;
      v26[0] = v10;
      ++v27;
      if (SHIBYTE(v23) < 0)
        operator delete((void *)__p);
    }
    for (j = (_QWORD *)a1[33]; j != a1 + 32; j = (_QWORD *)j[1])
    {
      v15 = sub_10066A598((uint64_t)v26, 0, 0, (uint64_t)(j + 2));
      v16 = v26[0];
      *(void **)v15 = v26[0];
      *((_QWORD *)v15 + 1) = v26;
      v16[1] = v15;
      v26[0] = v15;
      ++v27;
    }
    sub_10066A630((char **)v20, (uint64_t)v26);
    v17 = sub_100664130((uint64_t)a1, (uint64_t)v20, a2);
    v18 = objc_claimAutoreleasedReturnValue(v17);

    sub_100668FCC(v20);
    sub_100668FCC(v26);
    sub_100034234((uint64_t)v28);
    v4 = (NSArray *)v18;
  }
  return v4;
}

void sub_100666088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  sub_100668FCC((void **)&a9);
  sub_100668FCC(&a21);
  sub_100034234((uint64_t)&a24);

  _Unwind_Resume(a1);
}

void sub_1006660F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _QWORD v10[7];
  int v11;

  if (*(_QWORD *)(a1 + 352) == a2)
  {
    v9 = sub_1000419F4();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10066617C;
    v10[3] = &unk_10092A420;
    v11 = a3;
    v10[4] = a1;
    v10[5] = a4;
    v10[6] = a5;
    sub_100041A34(v9, v10);
  }
}

