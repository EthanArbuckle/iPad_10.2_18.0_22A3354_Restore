uint64_t **sub_1003946D0(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _BYTE *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[32] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    sub_100004078(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **sub_100394794(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _BYTE *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int8 *)v6 + 28);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[28] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    *((_QWORD *)v11 + 4) = 0;
    sub_100004078(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_100394858(id a1)
{
  operator new();
}

void sub_100394898()
{
  operator delete();
}

void sub_1003948BC(id a1)
{
  operator new();
}

void sub_1003948FC()
{
  operator delete();
}

void sub_100394920(id a1)
{
  operator new();
}

void sub_100394960()
{
  operator delete();
}

uint64_t sub_100394984(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(unsigned __int16 *)(v2 + 32);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(unsigned __int16 *)(v4 + 32))
    return 0;
  sub_1000040CC((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t **sub_1003949FC(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  char *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x118uLL);
    *((_WORD *)v11 + 16) = **a4;
    *(_OWORD *)(v11 + 248) = 0u;
    *(_OWORD *)(v11 + 232) = 0u;
    *(_OWORD *)(v11 + 216) = 0u;
    *(_OWORD *)(v11 + 200) = 0u;
    *(_OWORD *)(v11 + 184) = 0u;
    *(_OWORD *)(v11 + 168) = 0u;
    *(_OWORD *)(v11 + 152) = 0u;
    *(_OWORD *)(v11 + 136) = 0u;
    *(_OWORD *)(v11 + 120) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 264) = 0u;
    sub_100004078(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_QWORD *sub_100394AFC(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = *a2;
      if (v6 >= v7)
        v9 = v6 % v7;
    }
    else
    {
      v9 = (v7 - 1) & v6;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v6)
          {
            if (v11[2] == v6)
              return v11;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= v7)
                v12 %= v7;
            }
            else
            {
              v12 &= v7 - 1;
            }
            if (v12 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v6;
  v11[2] = **a4;
  *((_DWORD *)v11 + 6) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_1000B678C(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v9 = v6 % v7;
      else
        v9 = v6;
    }
    else
    {
      v9 = (v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v9) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_100394D0C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100394D3C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x12u);
}

uint64_t sub_100394D4C(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_10092AF18;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  sub_100049F50();
  return a1;
}

void sub_100394D9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  sub_100398FEC(v1, *v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100394DB8(uint64_t a1)
{
  *(_QWORD *)a1 = off_10092AF18;
  sub_100049F50();
  sub_100398FEC(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_100394DF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100398FEC(v1 + 8, *(_QWORD **)(v1 + 16));
  _Unwind_Resume(a1);
}

void sub_100394E10(uint64_t a1)
{
  sub_100394DB8(a1);
  operator delete();
}

uint64_t sub_100394E34(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  int v32;
  uint64_t v33;

  v4 = *(unsigned __int8 *)(a1 + 32);
  v5 = qword_100999850;
  v6 = os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v6)
    {
      v7 = *(_QWORD *)(a1 + 24);
      v32 = 134217984;
      v33 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "getStoredDevices reading from local cache (%zu devices)", (uint8_t *)&v32, 0xCu);
    }
    v8 = *(_QWORD **)(a1 + 8);
    if (v8 != (_QWORD *)(a1 + 16))
    {
      do
      {
        v9 = (unsigned __int8 *)(v8 + 4);
        LOWORD(v33) = 0;
        v32 = 0;
        if (*((char *)v8 + 55) < 0)
          v9 = *(unsigned __int8 **)v9;
        if (sub_10006D80C((uint64_t)&v32, v9))
        {
          if ((_BYTE)v32)
          {
LABEL_9:
            if (qword_1009778E8 != -1)
              dispatch_once(&qword_1009778E8, &stru_10092B008);
            v10 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v32, 1);
            if (!sub_10046EA5C(a2, v10))
            {
              v12 = *(uint64_t **)(a2 + 8);
              v11 = *(_QWORD *)(a2 + 16);
              if ((unint64_t)v12 >= v11)
              {
                v16 = ((uint64_t)v12 - *(_QWORD *)a2) >> 3;
                if ((unint64_t)(v16 + 1) >> 61)
                  abort();
                v17 = v11 - *(_QWORD *)a2;
                v18 = v17 >> 2;
                if (v17 >> 2 <= (unint64_t)(v16 + 1))
                  v18 = v16 + 1;
                if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
                  v19 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v19 = v18;
                if (v19)
                  v20 = (char *)sub_10007ABA0(a2 + 16, v19);
                else
                  v20 = 0;
                v21 = (uint64_t *)&v20[8 * v16];
                *v21 = v10;
                v13 = v21 + 1;
                v23 = *(uint64_t **)a2;
                v22 = *(uint64_t **)(a2 + 8);
                if (v22 != *(uint64_t **)a2)
                {
                  do
                  {
                    v24 = *--v22;
                    *--v21 = v24;
                  }
                  while (v22 != v23);
                  v22 = *(uint64_t **)a2;
                }
                *(_QWORD *)a2 = v21;
                *(_QWORD *)(a2 + 8) = v13;
                *(_QWORD *)(a2 + 16) = &v20[8 * v19];
                if (v22)
                  operator delete(v22);
              }
              else
              {
                *v12 = v10;
                v13 = v12 + 1;
              }
              *(_QWORD *)(a2 + 8) = v13;
            }
          }
          else
          {
            v14 = 1;
            while (v14 != 6)
            {
              if (*((unsigned __int8 *)&v32 + v14++))
              {
                if ((unint64_t)(v14 - 2) <= 4)
                  goto LABEL_9;
                break;
              }
            }
          }
        }
        v25 = (_QWORD *)v8[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v8[2];
            v27 = *v26 == (_QWORD)v8;
            v8 = v26;
          }
          while (!v27);
        }
        v8 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 16));
    }
    return 0;
  }
  else
  {
    if (v6)
    {
      LOWORD(v32) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "getStoredDevices reading from keychain", (uint8_t *)&v32, 2u);
    }
    v28 = sub_1002FBBD8((void **)a2);
    v30 = *(uint64_t **)a2;
    v29 = *(uint64_t **)(a2 + 8);
    while (v30 != v29)
      sub_10039511C(a1, *v30++);
    *(_BYTE *)(a1 + 32) = 1;
  }
  return v28;
}

void sub_10039511C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  int v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  int v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  int v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  int v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  int v94;
  unsigned int *v95;
  void *v96;
  int64_t v97;
  char *v98;
  void *v99;
  void *__dst;
  uint64_t v101;
  _QWORD v102[2];
  void *v103;
  char *v104;
  char *v105;
  void *__p[2];
  char v107;
  uint64_t v108;
  unsigned int *v109;
  int v110;
  __int16 v111;
  uint8_t buf[4];
  void **v113;

  v110 = *(_DWORD *)(a2 + 128);
  v111 = *(_WORD *)(a2 + 132);
  v108 = 0;
  v109 = 0;
  sub_10046E9BC((unsigned __int8 *)&v110, __p);
  sub_100395DA0(a1, (const void **)__p, &v108);
  if (v107 < 0)
    operator delete(__p[0]);
  v4 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    sub_10046E9BC((unsigned __int8 *)&v110, &v103);
    v5 = SHIBYTE(v105) >= 0 ? &v103 : (void **)v103;
    *(_DWORD *)buf = 136446210;
    v113 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Loading keys from keychain for device address %{public}s", buf, 0xCu);
    if (SHIBYTE(v105) < 0)
      operator delete(v103);
  }
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v7 = (char *)sub_1002B46E0((uint64_t)&v105, 1uLL);
  v8 = (char *)v103;
  v9 = v104;
  v10 = &v7[4 * v6];
  *(_DWORD *)v7 = 1;
  v11 = v7 + 4;
  v12 = v7;
  while (v9 != v8)
  {
    v13 = *((_DWORD *)v9 - 1);
    v9 -= 4;
    *((_DWORD *)v12 - 1) = v13;
    v12 -= 4;
  }
  v103 = v12;
  v104 = v7 + 4;
  v105 = &v7[4 * v6];
  if (v8)
  {
    operator delete(v8);
    v10 = v105;
  }
  v104 = v7 + 4;
  if (v11 >= v10)
  {
    v8 = (char *)v103;
    v15 = (v11 - (_BYTE *)v103) >> 2;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62)
      abort();
    v17 = v10 - (_BYTE *)v103;
    if (v17 >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      v19 = (char *)sub_1002B46E0((uint64_t)&v105, v18);
      v8 = (char *)v103;
      v11 = v104;
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[4 * v15];
    v10 = &v19[4 * v18];
    *(_DWORD *)v20 = 2;
    v14 = v20 + 4;
    while (v11 != v8)
    {
      v21 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *((_DWORD *)v20 - 1) = v21;
      v20 -= 4;
    }
    v103 = v20;
    v104 = v14;
    v105 = v10;
    if (v8)
    {
      operator delete(v8);
      v10 = v105;
    }
  }
  else
  {
    *((_DWORD *)v7 + 1) = 2;
    v14 = v7 + 8;
  }
  v104 = v14;
  if (v14 >= v10)
  {
    v8 = (char *)v103;
    v23 = (v14 - (_BYTE *)v103) >> 2;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 62)
      abort();
    v25 = v10 - (_BYTE *)v103;
    if (v25 >> 1 > v24)
      v24 = v25 >> 1;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
      v26 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      v27 = (char *)sub_1002B46E0((uint64_t)&v105, v26);
      v8 = (char *)v103;
      v14 = v104;
    }
    else
    {
      v27 = 0;
    }
    v28 = &v27[4 * v23];
    v10 = &v27[4 * v26];
    *(_DWORD *)v28 = 4;
    v22 = v28 + 4;
    while (v14 != v8)
    {
      v29 = *((_DWORD *)v14 - 1);
      v14 -= 4;
      *((_DWORD *)v28 - 1) = v29;
      v28 -= 4;
    }
    v103 = v28;
    v104 = v22;
    v105 = v10;
    if (v8)
    {
      operator delete(v8);
      v10 = v105;
    }
  }
  else
  {
    *(_DWORD *)v14 = 4;
    v22 = v14 + 4;
  }
  v104 = v22;
  if (v22 >= v10)
  {
    v8 = (char *)v103;
    v31 = (v22 - (_BYTE *)v103) >> 2;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 62)
      abort();
    v33 = v10 - (_BYTE *)v103;
    if (v33 >> 1 > v32)
      v32 = v33 >> 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
      v34 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      v35 = (char *)sub_1002B46E0((uint64_t)&v105, v34);
      v8 = (char *)v103;
      v22 = v104;
    }
    else
    {
      v35 = 0;
    }
    v36 = &v35[4 * v31];
    v10 = &v35[4 * v34];
    *(_DWORD *)v36 = 8;
    v30 = v36 + 4;
    while (v22 != v8)
    {
      v37 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *((_DWORD *)v36 - 1) = v37;
      v36 -= 4;
    }
    v103 = v36;
    v104 = v30;
    v105 = v10;
    if (v8)
    {
      operator delete(v8);
      v10 = v105;
    }
  }
  else
  {
    *(_DWORD *)v22 = 8;
    v30 = v22 + 4;
  }
  v104 = v30;
  if (v30 >= v10)
  {
    v8 = (char *)v103;
    v39 = (v30 - (_BYTE *)v103) >> 2;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 62)
      abort();
    v41 = v10 - (_BYTE *)v103;
    if (v41 >> 1 > v40)
      v40 = v41 >> 1;
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
      v42 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v42 = v40;
    if (v42)
    {
      v43 = (char *)sub_1002B46E0((uint64_t)&v105, v42);
      v8 = (char *)v103;
      v30 = v104;
    }
    else
    {
      v43 = 0;
    }
    v44 = &v43[4 * v39];
    v10 = &v43[4 * v42];
    *(_DWORD *)v44 = 16;
    v38 = v44 + 4;
    while (v30 != v8)
    {
      v45 = *((_DWORD *)v30 - 1);
      v30 -= 4;
      *((_DWORD *)v44 - 1) = v45;
      v44 -= 4;
    }
    v103 = v44;
    v104 = v38;
    v105 = v10;
    if (v8)
    {
      operator delete(v8);
      v10 = v105;
    }
  }
  else
  {
    *(_DWORD *)v30 = 16;
    v38 = v30 + 4;
  }
  v104 = v38;
  if (v38 >= v10)
  {
    v8 = (char *)v103;
    v47 = (v38 - (_BYTE *)v103) >> 2;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 62)
      abort();
    v49 = v10 - (_BYTE *)v103;
    if (v49 >> 1 > v48)
      v48 = v49 >> 1;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
      v50 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    if (v50)
    {
      v51 = (char *)sub_1002B46E0((uint64_t)&v105, v50);
      v8 = (char *)v103;
      v38 = v104;
    }
    else
    {
      v51 = 0;
    }
    v52 = &v51[4 * v47];
    v10 = &v51[4 * v50];
    *(_DWORD *)v52 = 32;
    v46 = v52 + 4;
    while (v38 != v8)
    {
      v53 = *((_DWORD *)v38 - 1);
      v38 -= 4;
      *((_DWORD *)v52 - 1) = v53;
      v52 -= 4;
    }
    v103 = v52;
    v104 = v46;
    v105 = v10;
    if (v8)
    {
      operator delete(v8);
      v10 = v105;
    }
  }
  else
  {
    *(_DWORD *)v38 = 32;
    v46 = v38 + 4;
  }
  v104 = v46;
  if (v46 >= v10)
  {
    v8 = (char *)v103;
    v55 = (v46 - (_BYTE *)v103) >> 2;
    v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 62)
      abort();
    v57 = v10 - (_BYTE *)v103;
    if (v57 >> 1 > v56)
      v56 = v57 >> 1;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
      v58 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v58 = v56;
    if (v58)
    {
      v59 = (char *)sub_1002B46E0((uint64_t)&v105, v58);
      v8 = (char *)v103;
      v46 = v104;
    }
    else
    {
      v59 = 0;
    }
    v60 = &v59[4 * v55];
    v10 = &v59[4 * v58];
    *(_DWORD *)v60 = 64;
    v54 = v60 + 4;
    while (v46 != v8)
    {
      v61 = *((_DWORD *)v46 - 1);
      v46 -= 4;
      *((_DWORD *)v60 - 1) = v61;
      v60 -= 4;
    }
    v103 = v60;
    v104 = v54;
    v105 = v10;
    if (v8)
    {
      operator delete(v8);
      v10 = v105;
    }
  }
  else
  {
    *(_DWORD *)v46 = 64;
    v54 = v46 + 4;
  }
  v104 = v54;
  if (v54 >= v10)
  {
    v8 = (char *)v103;
    v63 = (v54 - (_BYTE *)v103) >> 2;
    v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 62)
      abort();
    v65 = v10 - (_BYTE *)v103;
    if (v65 >> 1 > v64)
      v64 = v65 >> 1;
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
      v66 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v66 = v64;
    if (v66)
    {
      v67 = (char *)sub_1002B46E0((uint64_t)&v105, v66);
      v8 = (char *)v103;
      v54 = v104;
    }
    else
    {
      v67 = 0;
    }
    v68 = &v67[4 * v63];
    v10 = &v67[4 * v66];
    *(_DWORD *)v68 = 128;
    v62 = v68 + 4;
    while (v54 != v8)
    {
      v69 = *((_DWORD *)v54 - 1);
      v54 -= 4;
      *((_DWORD *)v68 - 1) = v69;
      v68 -= 4;
    }
    v103 = v68;
    v104 = v62;
    v105 = v10;
    if (v8)
    {
      operator delete(v8);
      v10 = v105;
    }
  }
  else
  {
    *(_DWORD *)v54 = 128;
    v62 = v54 + 4;
  }
  v104 = v62;
  if (v62 >= v10)
  {
    v8 = (char *)v103;
    v71 = (v62 - (_BYTE *)v103) >> 2;
    v72 = v71 + 1;
    if ((unint64_t)(v71 + 1) >> 62)
      abort();
    v73 = v10 - (_BYTE *)v103;
    if (v73 >> 1 > v72)
      v72 = v73 >> 1;
    if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
      v74 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v74 = v72;
    if (v74)
    {
      v75 = (char *)sub_1002B46E0((uint64_t)&v105, v74);
      v8 = (char *)v103;
      v62 = v104;
    }
    else
    {
      v75 = 0;
    }
    v76 = &v75[4 * v71];
    v10 = &v75[4 * v74];
    *(_DWORD *)v76 = 256;
    v70 = v76 + 4;
    while (v62 != v8)
    {
      v77 = *((_DWORD *)v62 - 1);
      v62 -= 4;
      *((_DWORD *)v76 - 1) = v77;
      v76 -= 4;
    }
    v103 = v76;
    v104 = v70;
    v105 = v10;
    if (v8)
    {
      operator delete(v8);
      v10 = v105;
    }
  }
  else
  {
    *(_DWORD *)v62 = 256;
    v70 = v62 + 4;
  }
  v104 = v70;
  if (v70 >= v10)
  {
    v8 = (char *)v103;
    v79 = (v70 - (_BYTE *)v103) >> 2;
    v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 62)
      abort();
    v81 = v10 - (_BYTE *)v103;
    if (v81 >> 1 > v80)
      v80 = v81 >> 1;
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
      v82 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v82 = v80;
    if (v82)
    {
      v83 = (char *)sub_1002B46E0((uint64_t)&v105, v82);
      v8 = (char *)v103;
      v70 = v104;
    }
    else
    {
      v83 = 0;
    }
    v84 = &v83[4 * v79];
    v10 = &v83[4 * v82];
    *(_DWORD *)v84 = 512;
    v78 = v84 + 4;
    while (v70 != v8)
    {
      v85 = *((_DWORD *)v70 - 1);
      v70 -= 4;
      *((_DWORD *)v84 - 1) = v85;
      v84 -= 4;
    }
    v103 = v84;
    v104 = v78;
    v105 = v10;
    if (v8)
    {
      operator delete(v8);
      v10 = v105;
    }
  }
  else
  {
    *(_DWORD *)v70 = 512;
    v78 = v70 + 4;
  }
  v104 = v78;
  if (v78 >= v10)
  {
    v8 = (char *)v103;
    v87 = (v78 - (_BYTE *)v103) >> 2;
    v88 = v87 + 1;
    if ((unint64_t)(v87 + 1) >> 62)
      abort();
    v89 = v10 - (_BYTE *)v103;
    if (v89 >> 1 > v88)
      v88 = v89 >> 1;
    if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
      v90 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v90 = v88;
    if (v90)
    {
      v91 = (char *)sub_1002B46E0((uint64_t)&v105, v90);
      v8 = (char *)v103;
      v78 = v104;
    }
    else
    {
      v91 = 0;
    }
    v92 = &v91[4 * v87];
    v93 = &v91[4 * v90];
    *(_DWORD *)v92 = 1024;
    v86 = v92 + 4;
    while (v78 != v8)
    {
      v94 = *((_DWORD *)v78 - 1);
      v78 -= 4;
      *((_DWORD *)v92 - 1) = v94;
      v92 -= 4;
    }
    v103 = v92;
    v104 = v86;
    v105 = v93;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_DWORD *)v78 = 1024;
    v86 = v78 + 4;
  }
  v104 = v86;
  v95 = v109;
  v102[0] = off_10092B038;
  v102[1] = v109;
  if (v109)
  {
    sub_10003C37C((uint64_t)v109);
    v86 = v104;
  }
  v99 = 0;
  __dst = 0;
  v101 = 0;
  v96 = v103;
  v97 = v86 - (_BYTE *)v103;
  if (v97)
  {
    sub_1002D65D4(&v99, v97 >> 2);
    v98 = (char *)__dst;
    v8 = (char *)memmove(__dst, v96, v97);
    __dst = &v98[4 * (v97 >> 2)];
  }
  sub_100395AF8((uint64_t)v8, a2, (uint64_t)v102, (int **)&v99);
  if (v99)
  {
    __dst = v99;
    operator delete(v99);
  }
  if (v95)
    sub_100056AAC(v95);
  if (v103)
  {
    v104 = (char *)v103;
    operator delete(v103);
  }
  if (v95)
    sub_100056AAC(v95);
}

void sub_100395A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int *a21)
{
  if (a21)
    sub_100056AAC(a21);
  _Unwind_Resume(exception_object);
}

void sub_100395AD8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  JUMPOUT(0x100395AD0);
}

void sub_100395AF0()
{
  JUMPOUT(0x100395AD0);
}

void sub_100395AF8(uint64_t a1, uint64_t a2, uint64_t a3, int **a4)
{
  int *v4;
  int *v5;
  int v7;
  int8x8_t v8;
  const char *v9;
  int v10;
  int v11;
  BOOL v12;
  NSObject *v13;
  uint64_t v14;
  void **v15;
  void *v16[2];
  char v17;
  CFTypeRef cf;
  int v19;
  int v20;
  __int16 v21;
  _BYTE __p[18];
  __int16 v23;
  _OWORD *v24;
  __int16 v25;
  int v26;
  _OWORD v27[4];

  v20 = *(_DWORD *)(a2 + 128);
  v21 = *(_WORD *)(a2 + 132);
  cf = 0;
  v4 = *a4;
  v5 = a4[1];
  if (*a4 != v5)
  {
    do
    {
      v7 = *v4;
      v19 = 64;
      memset(v27, 0, sizeof(v27));
      sub_10046E9BC((unsigned __int8 *)&v20, __p);
      if (SBYTE3(v24) >= 0)
        v9 = __p;
      else
        v9 = *(const char **)__p;
      v10 = sub_1002FB49C(v7, v9, (char *)v27, &v19, (const __CFDictionary **)&cf, v8);
      if (SBYTE3(v24) < 0)
        operator delete(*(void **)__p);
      v11 = v19;
      if (v10)
        v12 = 1;
      else
        v12 = v19 == 0;
      if (!v12)
      {
        v13 = qword_100999850;
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEBUG))
        {
          sub_10046E9BC((unsigned __int8 *)&v20, v16);
          v15 = v16;
          if (v17 < 0)
            v15 = (void **)v16[0];
          *(_DWORD *)__p = 136446978;
          *(_QWORD *)&__p[4] = v15;
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = v7;
          v23 = 2080;
          v24 = v27;
          v25 = 1024;
          v26 = v19;
          _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "readKeyForDevice(%{public}s) aType:%d data:%s len:%d", __p, 0x22u);
          if (v17 < 0)
            operator delete(v16[0]);
          v11 = v19;
        }
        v14 = *(_QWORD *)(a3 + 8);
        sub_10003994C(__p, v27, v11 + 1);
        sub_100395D48(v14, v7, (uint64_t)__p);
        *(_QWORD *)__p = &off_100918258;
        if (*(_QWORD *)&__p[8])
          sub_100056AAC(*(unsigned int **)&__p[8]);
      }
      ++v4;
    }
    while (v4 != v5);
    if (cf)
      CFRelease(cf);
  }
}

void sub_100395D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, unsigned int *a18, int a19, __int16 a20,char a21,char a22)
{
  if (a18)
    sub_100056AAC(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100395D48(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t **v4;
  int v6;
  int *v7;

  v6 = a2;
  v7 = &v6;
  v4 = sub_1003990E4((uint64_t **)(a1 + 16), &v6, (uint64_t)&unk_100740F58, &v7);
  return sub_100041698((uint64_t)(v4 + 5), a3);
}

void sub_100395DA0(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_10001F2AC(a1 + 8, a2);
  if (a1 + 16 == v5)
    operator new();
  v6 = *(_QWORD *)(v5 + 64);
  *a3 = off_10092B038;
  a3[1] = v6;
  if (v6)
    sub_10003C37C(v6);
}

void sub_100395EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  if (a10)
    sub_100056AAC(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100395EE4(_QWORD *a1)
{
  unsigned int *v2;

  *a1 = off_10092B038;
  v2 = (unsigned int *)a1[1];
  if (v2)
    sub_100056AAC(v2);
  return a1;
}

void sub_100395F1C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned int *v4;
  NSObject *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  NSObject *v21;
  __int128 buf;
  uint8_t v23[4];
  uint64_t v24;

  if (IsAppleInternalBuild(a1))
  {
    v2 = *(_QWORD **)(a1 + 8);
    v3 = (_QWORD *)(a1 + 16);
    if (v2 != (_QWORD *)(a1 + 16))
    {
      do
      {
        v4 = (unsigned int *)v2[8];
        if (v4)
          sub_10003C37C(v2[8]);
        v5 = qword_100999850;
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
        {
          v6 = v2 + 4;
          if (*((char *)v2 + 55) < 0)
            v6 = (_QWORD *)*v6;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:    %s", (uint8_t *)&buf, 0xCu);
          v5 = qword_100999850;
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003965C0((uint64_t)v4, 1, &buf);
          v7 = sub_10003EB18((uint64_t)&buf);
          *(_DWORD *)v23 = 136315138;
          v24 = v7;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:       Pincode:\t       %s", v23, 0xCu);
          *(_QWORD *)&buf = &off_100918258;
          if (*((_QWORD *)&buf + 1))
            sub_100056AAC(*((unsigned int **)&buf + 1));
          v5 = qword_100999850;
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003965C0((uint64_t)v4, 2, &buf);
          v8 = sub_10003EB18((uint64_t)&buf);
          *(_DWORD *)v23 = 136315138;
          v24 = v8;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:       Link key:       %s", v23, 0xCu);
          *(_QWORD *)&buf = &off_100918258;
          if (*((_QWORD *)&buf + 1))
            sub_100056AAC(*((unsigned int **)&buf + 1));
          v5 = qword_100999850;
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003965C0((uint64_t)v4, 4, &buf);
          v9 = sub_10003EB18((uint64_t)&buf);
          *(_DWORD *)v23 = 136315138;
          v24 = v9;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:       Link key type:  %s", v23, 0xCu);
          *(_QWORD *)&buf = &off_100918258;
          if (*((_QWORD *)&buf + 1))
            sub_100056AAC(*((unsigned int **)&buf + 1));
          v5 = qword_100999850;
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003965C0((uint64_t)v4, 8, &buf);
          v10 = sub_10003EB18((uint64_t)&buf);
          *(_DWORD *)v23 = 136315138;
          v24 = v10;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:       Local address:  %s", v23, 0xCu);
          *(_QWORD *)&buf = &off_100918258;
          if (*((_QWORD *)&buf + 1))
            sub_100056AAC(*((unsigned int **)&buf + 1));
          v5 = qword_100999850;
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003965C0((uint64_t)v4, 16, &buf);
          v11 = sub_10003EB18((uint64_t)&buf);
          *(_DWORD *)v23 = 136315138;
          v24 = v11;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:       Magic IRK:      %s", v23, 0xCu);
          *(_QWORD *)&buf = &off_100918258;
          if (*((_QWORD *)&buf + 1))
            sub_100056AAC(*((unsigned int **)&buf + 1));
          v5 = qword_100999850;
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003965C0((uint64_t)v4, 32, &buf);
          v12 = sub_10003EB18((uint64_t)&buf);
          *(_DWORD *)v23 = 136315138;
          v24 = v12;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:       Magic Enc:      %s", v23, 0xCu);
          *(_QWORD *)&buf = &off_100918258;
          if (*((_QWORD *)&buf + 1))
            sub_100056AAC(*((unsigned int **)&buf + 1));
          v5 = qword_100999850;
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003965C0((uint64_t)v4, 64, &buf);
          v13 = sub_10003EB18((uint64_t)&buf);
          *(_DWORD *)v23 = 136315138;
          v24 = v13;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:       Magic Acc:      %s", v23, 0xCu);
          *(_QWORD *)&buf = &off_100918258;
          if (*((_QWORD *)&buf + 1))
            sub_100056AAC(*((unsigned int **)&buf + 1));
          v5 = qword_100999850;
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003965C0((uint64_t)v4, 128, &buf);
          v14 = sub_10003EB18((uint64_t)&buf);
          *(_DWORD *)v23 = 136315138;
          v24 = v14;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:       Magic Hint:     %s", v23, 0xCu);
          *(_QWORD *)&buf = &off_100918258;
          if (*((_QWORD *)&buf + 1))
            sub_100056AAC(*((unsigned int **)&buf + 1));
          v5 = qword_100999850;
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003965C0((uint64_t)v4, 256, &buf);
          v15 = sub_10003EB18((uint64_t)&buf);
          *(_DWORD *)v23 = 136315138;
          v24 = v15;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:       Magic Ratchet:   %s", v23, 0xCu);
          *(_QWORD *)&buf = &off_100918258;
          if (*((_QWORD *)&buf + 1))
            sub_100056AAC(*((unsigned int **)&buf + 1));
          v5 = qword_100999850;
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003965C0((uint64_t)v4, 512, &buf);
          v16 = sub_10003EB18((uint64_t)&buf);
          *(_DWORD *)v23 = 136315138;
          v24 = v16;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:       Guest IRK:      %s", v23, 0xCu);
          *(_QWORD *)&buf = &off_100918258;
          if (*((_QWORD *)&buf + 1))
            sub_100056AAC(*((unsigned int **)&buf + 1));
          v5 = qword_100999850;
        }
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003965C0((uint64_t)v4, 1024, &buf);
          v17 = sub_10003EB18((uint64_t)&buf);
          *(_DWORD *)v23 = 136315138;
          v24 = v17;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:       Guest Enc:      %s", v23, 0xCu);
          *(_QWORD *)&buf = &off_100918258;
          if (*((_QWORD *)&buf + 1))
            sub_100056AAC(*((unsigned int **)&buf + 1));
        }
        if (v4)
          sub_100056AAC(v4);
        v18 = (_QWORD *)v2[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v2[2];
            v20 = *v19 == (_QWORD)v2;
            v2 = v19;
          }
          while (!v20);
        }
        v2 = v19;
      }
      while (v19 != v3);
    }
  }
  else
  {
    v21 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump:    Not authorized to view security keys.", (uint8_t *)&buf, 2u);
    }
  }
}

void sub_100396538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned int *a12)
{
  unsigned int *v12;

  if (a12)
    sub_100056AAC(a12);
  if (v12)
    sub_100056AAC(v12);
  _Unwind_Resume(exception_object);
}

void sub_1003965B8()
{
  JUMPOUT(0x1003965B0);
}

void sub_1003965C0(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a1 + 24);
  v3 = a1 + 24;
  v4 = v5;
  if (!v5)
    goto LABEL_11;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v10 = *(_QWORD *)(v6 + 48);
    *a3 = &off_100918258;
    a3[1] = v10;
    if (v10)
      sub_10003C37C(v10);
  }
  else
  {
LABEL_11:
    *a3 = &off_100918258;
    a3[1] = 0;
  }
}

uint64_t sub_100396624(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v8;
  void *__p;
  unsigned int *v10;
  char v11;
  int v12;
  __int16 v13;

  v12 = *(_DWORD *)(a2 + 128);
  v13 = *(_WORD *)(a2 + 132);
  v5 = a1 + 8;
  sub_10046E9BC((unsigned __int8 *)&v12, &__p);
  v6 = sub_10001F2AC(v5, (const void **)&__p);
  if (v11 < 0)
    operator delete(__p);
  if (a1 + 16 == v6)
    return 155;
  __p = 0;
  v10 = 0;
  sub_1003965C0(*(_QWORD *)(v6 + 64), 1, &__p);
  if (sub_1000452EC((uint64_t)&__p))
  {
    __p = &off_100918258;
    if (v10)
      sub_100056AAC(v10);
    return 155;
  }
  v8 = (char *)sub_10003EB18((uint64_t)&__p);
  sub_1005BCD78(a3, v8);
  __p = &off_100918258;
  if (v10)
    sub_100056AAC(v10);
  return 0;
}

void sub_100396710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, unsigned int *a10, int a11, __int16 a12, char a13, char a14)
{
  if (a10)
    sub_100056AAC(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100396750(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  char *v6;
  char *v7;
  uint8_t *v8;
  int v9;
  unint64_t v10;
  uint8_t *v11;
  NSObject *v12;
  uint64_t v13;
  unsigned int *v15;
  uint64_t v16;
  void *v17;
  size_t __n;
  unsigned __int8 v19;
  void *__p[2];
  char v21;
  uint64_t v22;
  unsigned int *v23;
  int v24;
  __int16 v25;
  void *__dst[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[8];
  uint64_t v31;
  unsigned __int8 v32;

  v24 = *(_DWORD *)(a2 + 128);
  v25 = *(_WORD *)(a2 + 132);
  v22 = 0;
  v23 = 0;
  sub_10046E9BC((unsigned __int8 *)&v24, __p);
  sub_100395DA0(a1, (const void **)__p, &v22);
  if (v21 < 0)
    operator delete(__p[0]);
  sub_10046E9BC((unsigned __int8 *)&v24, __dst);
  v5 = SBYTE7(v27);
  v6 = (char *)__dst[0];
  sub_1005BCE08(a3, buf);
  if (v5 >= 0)
    v7 = (char *)__dst;
  else
    v7 = v6;
  if ((v32 & 0x80u) == 0)
    v8 = buf;
  else
    v8 = *(uint8_t **)buf;
  v9 = sub_1002FA49C(1, v7, (const char *)v8, 0);
  if ((char)v32 < 0)
    operator delete(*(void **)buf);
  if (SBYTE7(v27) < 0)
  {
    operator delete(__dst[0]);
    if (v9)
      goto LABEL_25;
  }
  else if (v9)
  {
    goto LABEL_25;
  }
  sub_1005BCE08(a3, __dst);
  if ((SBYTE7(v27) & 0x80u) == 0)
    v10 = BYTE7(v27);
  else
    v10 = (unint64_t)__dst[1];
  if (SBYTE7(v27) < 0)
    operator delete(__dst[0]);
  if (v10 <= 0x40)
  {
    v28 = 0u;
    v29 = 0u;
    *(_OWORD *)__dst = 0u;
    v27 = 0u;
    v11 = buf;
    sub_1005BCE08(a3, buf);
    if ((v32 & 0x80u) != 0)
      v11 = *(uint8_t **)buf;
    sub_1005BCE08(a3, &v17);
    if ((char)v19 < 0)
    {
      memcpy(__dst, v11, __n);
      operator delete(v17);
    }
    else
    {
      memcpy(__dst, v11, v19);
    }
    if ((char)v32 < 0)
      operator delete(*(void **)buf);
    v15 = v23;
    sub_1005BCE08(a3, buf);
    v16 = v32;
    if ((v32 & 0x80u) != 0)
      v16 = v31;
    sub_10003994C(&v17, __dst, v16 + 1);
    sub_100395D48((uint64_t)v15, 1, (uint64_t)&v17);
    v17 = &off_100918258;
    if (__n)
      sub_100056AAC((unsigned int *)__n);
    if ((char)v32 < 0)
      operator delete(*(void **)buf);
    v13 = 0;
    goto LABEL_28;
  }
LABEL_25:
  v12 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
  {
    sub_1005BCE08(a3, __dst);
    sub_1006E437C((uint64_t)__dst, buf, v12);
  }
  v13 = 159;
LABEL_28:
  if (v23)
    sub_100056AAC(v23);
  return v13;
}

void sub_1003969D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, unsigned int *a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a11)
    sub_100056AAC(a11);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  if (a20)
    sub_100056AAC(a20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100396A88()
{
  return 2;
}

uint64_t sub_100396A90()
{
  return 2;
}

uint64_t sub_100396A98(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  char *v10;
  void **v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  NSObject *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  __n128 *v25;
  const char *v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  __n128 *v31;
  int v33;
  unint64_t v34;
  const char *v35;
  __n128 *v36;
  int v37;
  NSObject *v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  __n128 *v43;
  uint64_t (**v44)();
  unsigned int *v45;
  void *__p[2];
  uint64_t v47;
  int v48;
  __int16 v49;
  __n128 v50;
  char v51;
  uint8_t buf[4];
  __n128 *v53;
  __int16 v54;
  uint64_t v55;
  __int128 v56;

  v48 = *(_DWORD *)(a3 + 128);
  v49 = *(_WORD *)(a3 + 132);
  v56 = 0uLL;
  sub_10046E9BC((unsigned __int8 *)&v48, __p);
  v8 = sub_10001F2AC(a1 + 8, (const void **)__p);
  if (SHIBYTE(v47) < 0)
    operator delete(__p[0]);
  if (a1 + 16 == v8)
    return 150;
  v44 = 0;
  v45 = 0;
  sub_1003965C0(*(_QWORD *)(v8 + 64), 2, &v44);
  if (sub_1000452EC((uint64_t)&v44))
  {
    v9 = 2;
    goto LABEL_48;
  }
  __p[0] = 0;
  __p[1] = 0;
  v47 = 0;
  v10 = (char *)sub_10003EB18((uint64_t)&v44);
  sub_100091AE8(__p, v10);
  if (v47 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if (!sub_100397098((uint64_t)v11, (uint64_t)&v56, 16))
  {
    v21 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a3, &v50);
      v28 = v51;
      v29 = v50.n128_u64[0];
      v30 = sub_10003EB18((uint64_t)&v44);
      v31 = &v50;
      if (v28 < 0)
        v31 = (__n128 *)v29;
      *(_DWORD *)buf = 136446466;
      v53 = v31;
      v54 = 2080;
      v55 = v30;
      v26 = "Failed to parse malformed link key for device %{public}s - data was %s";
      goto LABEL_34;
    }
LABEL_27:
    v9 = 1;
    a4 = 151;
    goto LABEL_46;
  }
  sub_1003965C0(*(_QWORD *)(v8 + 64), 4, &v50);
  sub_100041698((uint64_t)&v44, (uint64_t)&v50);
  v50.n128_u64[0] = (unint64_t)&off_100918258;
  if (v50.n128_u64[1])
    sub_100056AAC((unsigned int *)v50.n128_u64[1]);
  if (!sub_1000452EC((uint64_t)&v44))
  {
    v12 = (const char *)sub_10003EB18((uint64_t)&v44);
    if (!strcmp(v12, "Combo"))
    {
      v27 = 0;
    }
    else
    {
      v13 = (const char *)sub_10003EB18((uint64_t)&v44);
      if (!strcmp(v13, "Local"))
      {
        v27 = 1;
      }
      else
      {
        v14 = (const char *)sub_10003EB18((uint64_t)&v44);
        if (!strcmp(v14, "Remote"))
        {
          v27 = 2;
        }
        else
        {
          v15 = (const char *)sub_10003EB18((uint64_t)&v44);
          if (!strcmp(v15, "DebugCombo"))
          {
            v27 = 3;
          }
          else
          {
            v16 = (const char *)sub_10003EB18((uint64_t)&v44);
            if (!strcmp(v16, "UnAuthenticated"))
            {
              v27 = 4;
            }
            else
            {
              v17 = (const char *)sub_10003EB18((uint64_t)&v44);
              if (!strcmp(v17, "Authenticated"))
              {
                v27 = 5;
              }
              else
              {
                v18 = (const char *)sub_10003EB18((uint64_t)&v44);
                if (!strcmp(v18, "ChangedCombo"))
                {
                  v27 = 6;
                }
                else
                {
                  v19 = (const char *)sub_10003EB18((uint64_t)&v44);
                  if (!strcmp(v19, "UnAuthComboP256"))
                  {
                    v27 = 7;
                  }
                  else
                  {
                    v20 = (const char *)sub_10003EB18((uint64_t)&v44);
                    if (strcmp(v20, "AuthComboP256"))
                    {
                      v21 = qword_100999850;
                      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
                      {
                        sub_10043E5F8(a3, &v50);
                        v22 = v51;
                        v23 = v50.n128_u64[0];
                        v24 = sub_10003EB18((uint64_t)&v44);
                        v25 = &v50;
                        if (v22 < 0)
                          v25 = (__n128 *)v23;
                        *(_DWORD *)buf = 136446466;
                        v53 = v25;
                        v54 = 2080;
                        v55 = v24;
                        v26 = "Invalid link key type for device %{public}s - %s";
LABEL_34:
                        _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, v26, buf, 0x16u);
                        if (v51 < 0)
                          operator delete((void *)v50.n128_u64[0]);
                        goto LABEL_27;
                      }
                      goto LABEL_27;
                    }
                    v27 = 8;
                  }
                }
              }
            }
          }
        }
      }
    }
    sub_1003965C0(*(_QWORD *)(v8 + 64), 8, &v50);
    sub_100041698((uint64_t)&v44, (uint64_t)&v50);
    v50.n128_u64[0] = (unint64_t)&off_100918258;
    if (v50.n128_u64[1])
      sub_100056AAC((unsigned int *)v50.n128_u64[1]);
    if (!sub_1000452EC((uint64_t)&v44))
    {
      sub_10046E9BC(a2, &v50);
      v33 = v51;
      v34 = v50.n128_u64[0];
      v35 = (const char *)sub_10003EB18((uint64_t)&v44);
      if (v33 >= 0)
        v36 = &v50;
      else
        v36 = (__n128 *)v34;
      v37 = strcmp((const char *)v36, v35);
      if (v51 < 0)
        operator delete((void *)v50.n128_u64[0]);
      if (v37)
      {
        v38 = qword_100999850;
        if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
        {
          sub_10046E9BC(a2, &v50);
          v40 = v51;
          v41 = v50.n128_u64[0];
          v42 = sub_10003EB18((uint64_t)&v44);
          v43 = &v50;
          if (v40 < 0)
            v43 = (__n128 *)v41;
          *(_DWORD *)buf = 136315394;
          v53 = v43;
          v54 = 2080;
          v55 = v42;
          _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "We have a link key for the wrong local device : %s != %s.", buf, 0x16u);
          if (v51 < 0)
            operator delete((void *)v50.n128_u64[0]);
        }
        v9 = 1;
        a4 = 150;
      }
      else
      {
        sub_1005A9734((uint64_t)&v50, &v56, v27);
        sub_1005A9720((__n128 *)a4, &v50);
        nullsub_90(&v50, v39);
        a4 = 0;
        v9 = 1;
      }
      goto LABEL_46;
    }
  }
  v9 = 2;
LABEL_46:
  if (SHIBYTE(v47) < 0)
    operator delete(__p[0]);
LABEL_48:
  v44 = &off_100918258;
  if (v45)
    sub_100056AAC(v45);
  if (v9 == 2)
    return 150;
  return a4;
}

void sub_100396FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a11)
    sub_100056AAC(a11);
  _Unwind_Resume(exception_object);
}

BOOL sub_100397098(uint64_t a1, uint64_t a2, int a3)
{
  BOOL v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  char v10;
  int v11;

  v3 = 0;
  if (a1 && a2)
  {
    v4 = (unsigned __int8 *)(a1 - 1);
    do
      v5 = *++v4;
    while (v5 == 32);
    if (a3 < 1)
    {
      return 1;
    }
    else
    {
      v6 = 0;
      v3 = 0;
      do
      {
        v7 = *v4;
        v8 = v7 - 48;
        if ((v7 - 48) >= 0xA)
        {
          if ((v7 - 97) > 5)
          {
            if ((v7 - 65) > 5)
              return v3;
            v8 = v7 - 55;
          }
          else
          {
            v8 = v7 - 87;
          }
        }
        v9 = v4[1];
        v10 = v9 - 48;
        if ((v9 - 48) >= 0xA)
        {
          if ((v9 - 97) > 5)
          {
            if ((v9 - 65) > 5)
              return v3;
            v10 = v9 - 55;
          }
          else
          {
            v10 = v9 - 87;
          }
        }
        *(_BYTE *)(a2 + v6) = v10 + 16 * v8;
        v11 = v4[2];
        v4 += 2;
        if (v11 == 45)
          ++v4;
        v3 = ++v6 >= (unint64_t)a3;
      }
      while (a3 != v6);
    }
  }
  return v3;
}

uint64_t sub_100397168(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _BYTE *a4, int a5)
{
  uint64_t v10;
  unsigned __int8 *v12;
  unsigned int v13;
  const char *v14;
  NSObject *v15;
  char *v16;
  int v17;
  int v18;
  unsigned int *v19;
  size_t v20;
  char *v21;
  int v22;
  int v23;
  unsigned int *v24;
  size_t v25;
  int v26;
  char *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  void **v31;
  unsigned int *v32;
  unint64_t v33;
  void *v34;
  unsigned int *v35;
  char v36;
  void *v37[2];
  unsigned __int8 v38;
  void *v39;
  unsigned int *v40;
  char v41;
  void *v42;
  unsigned int *v43;
  char v44;
  void *__p[2];
  char v46;
  uint64_t v47;
  unsigned int *v48;
  int v49;
  __int16 v50;
  char __str[16];
  __int128 v52;
  __int128 v53;
  __int128 v54;

  if (sub_1005A9778(a4))
    return (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2, a3);
  v49 = *(_DWORD *)(a3 + 128);
  v50 = *(_WORD *)(a3 + 132);
  v53 = 0u;
  v54 = 0u;
  *(_OWORD *)__str = 0u;
  v52 = 0u;
  v12 = (unsigned __int8 *)nullsub_90(a4, v10);
  v13 = sub_1005A9764((uint64_t)a4);
  if (v13 >= 9)
  {
    v15 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      sub_1006E44D4((uint64_t)a4, v15);
    v14 = "Unknown";
  }
  else
  {
    v14 = (&off_10092B048)[v13];
  }
  v47 = 0;
  v48 = 0;
  sub_10046E9BC((unsigned __int8 *)&v49, __p);
  sub_100395DA0(a1, (const void **)__p, &v47);
  if (v46 < 0)
    operator delete(__p[0]);
  sub_10046E9BC((unsigned __int8 *)&v49, &v42);
  if (v44 >= 0)
    v16 = (char *)&v42;
  else
    v16 = (char *)v42;
  v17 = sub_1002FA49C(4, v16, v14, a5);
  v18 = v17;
  if (v44 < 0)
  {
    operator delete(v42);
    if (v18)
    {
LABEL_15:
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(a3, &v42);
        sub_1006E4490();
      }
      goto LABEL_20;
    }
  }
  else if (v17)
  {
    goto LABEL_15;
  }
  v19 = v48;
  v20 = strlen(v14);
  sub_10003994C(&v42, v14, v20 + 1);
  sub_100395D48((uint64_t)v19, 4, (uint64_t)&v42);
  v42 = &off_100918258;
  if (v43)
    sub_100056AAC(v43);
LABEL_20:
  snprintf(__str, 0x3FuLL, "%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X", *v12, v12[1], v12[2], v12[3], v12[4], v12[5], v12[6], v12[7], v12[8], v12[9], v12[10], v12[11], v12[12], v12[13], v12[14], v12[15]);
  HIBYTE(v54) = 0;
  sub_10046E9BC((unsigned __int8 *)&v49, &v39);
  if (v41 >= 0)
    v21 = (char *)&v39;
  else
    v21 = (char *)v39;
  v22 = sub_1002FA49C(2, v21, __str, a5);
  v23 = v22;
  if (v41 < 0)
  {
    operator delete(v39);
    if (v23)
    {
LABEL_25:
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(a3, &v39);
        sub_1006E444C();
      }
      goto LABEL_30;
    }
  }
  else if (v22)
  {
    goto LABEL_25;
  }
  v24 = v48;
  v25 = strlen(__str);
  sub_10003994C(&v39, __str, v25 + 1);
  sub_100395D48((uint64_t)v24, 2, (uint64_t)&v39);
  v39 = &off_100918258;
  if (v40)
    sub_100056AAC(v40);
LABEL_30:
  sub_10046E9BC((unsigned __int8 *)&v49, v37);
  v26 = (char)v38;
  v27 = (char *)v37[0];
  sub_10046E9BC(a2, &v34);
  if (v26 >= 0)
    v28 = (char *)v37;
  else
    v28 = v27;
  if (v36 >= 0)
    v29 = (const char *)&v34;
  else
    v29 = (const char *)v34;
  v30 = sub_1002FA49C(8, v28, v29, a5);
  if (v36 < 0)
    operator delete(v34);
  if (((char)v38 & 0x80000000) == 0)
  {
    if ((_DWORD)v30)
      goto LABEL_40;
LABEL_43:
    v53 = 0u;
    v54 = 0u;
    *(_OWORD *)__str = 0u;
    v52 = 0u;
    sub_10046E9BC(a2, v37);
    if ((v38 & 0x80u) == 0)
      v31 = v37;
    else
      v31 = (void **)v37[0];
    strlcpy(__str, (const char *)v31, 0x40uLL);
    if ((char)v38 < 0)
      operator delete(v37[0]);
    v32 = v48;
    sub_10046E9BC(a2, v37);
    v33 = v38;
    if ((v38 & 0x80u) != 0)
      v33 = (unint64_t)v37[1];
    sub_10003994C(&v34, __str, v33 + 1);
    sub_100395D48((uint64_t)v32, 8, (uint64_t)&v34);
    v34 = &off_100918258;
    if (v35)
      sub_100056AAC(v35);
    if ((char)v38 < 0)
      operator delete(v37[0]);
    goto LABEL_54;
  }
  operator delete(v37[0]);
  if (!(_DWORD)v30)
    goto LABEL_43;
LABEL_40:
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
    sub_1006E43E8();
LABEL_54:
  if (v48)
    sub_100056AAC(v48);
  return v30;
}

void sub_100397650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,unsigned int *a56)
{
  if (a56)
    sub_100056AAC(a56);
  _Unwind_Resume(exception_object);
}

void sub_100397764(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int *v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  void *__p[2];
  char v20;
  int v21;
  __int16 v22;

  v21 = *(_DWORD *)(a2 + 128);
  v22 = *(_WORD *)(a2 + 132);
  v7 = (uint64_t **)(a1 + 8);
  sub_10046E9BC((unsigned __int8 *)&v21, __p);
  v8 = (uint64_t *)sub_10001F2AC((uint64_t)v7, (const void **)__p);
  if (v20 < 0)
    operator delete(__p[0]);
  if ((uint64_t *)(a1 + 16) != v8)
  {
    for (; a3; --a3)
    {
      v9 = v8[8];
      v10 = *a4++;
      LODWORD(__p[0]) = v10;
      sub_10039938C(v9 + 16, (int *)__p);
    }
    v11 = (_QWORD *)v8[8];
    v12 = v11[4];
    if (v12 != 1)
    {
      if (v12)
        return;
      v13 = (_QWORD *)v11[3];
      goto LABEL_9;
    }
    v13 = (_QWORD *)v11[3];
    if (v13)
    {
      v14 = (int *)(v11 + 3);
      v15 = v11[3];
      do
      {
        v16 = *(_DWORD *)(v15 + 32);
        v17 = v16 < 8;
        if (v16 >= 8)
          v18 = (uint64_t *)v15;
        else
          v18 = (uint64_t *)(v15 + 8);
        if (!v17)
          v14 = (int *)v15;
        v15 = *v18;
      }
      while (*v18);
      if (v14 != (int *)(v11 + 3) && v14[8] <= 8)
      {
LABEL_9:
        sub_100398F94((uint64_t)(v11 + 2), v13);
        v11[3] = 0;
        v11[2] = v11 + 3;
        v11[4] = 0;
        sub_1000040CC(v7, v8);
        sub_100399034((uint64_t)(v8 + 4));
        operator delete(v8);
      }
    }
  }
}

void sub_1003978A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003978C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  int v8;
  __int16 v9;
  uint64_t v10;

  v8 = *(_DWORD *)(a3 + 128);
  v9 = *(_WORD *)(a3 + 132);
  v10 = 0x400000002;
  sub_100397764(a1, a3, 2, (int *)&v10);
  sub_10046E9BC((unsigned __int8 *)&v8, __p);
  if (v7 >= 0)
    v3 = (char *)__p;
  else
    v3 = (char *)__p[0];
  v4 = sub_1002FB6F0(v3, 6u);
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_10039797C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003979A0(uint64_t a1, uint64_t a2)
{
  int v2;
  char *v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  int v8;
  int v9;
  __int16 v10;

  v2 = *(_DWORD *)(a2 + 128);
  v10 = *(_WORD *)(a2 + 132);
  v8 = 1;
  v9 = v2;
  sub_100397764(a1, a2, 1, &v8);
  sub_10046E9BC((unsigned __int8 *)&v9, __p);
  if (v7 >= 0)
    v3 = (char *)__p;
  else
    v3 = (char *)__p[0];
  v4 = sub_1002FB6F0(v3, 1u);
  if (v7 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_100397A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100397A3C(uint64_t a1, uint64_t a2)
{
  return sandbox_extension_consume(a2);
}

uint64_t sub_100397A44(uint64_t a1, uint64_t a2)
{
  return sandbox_extension_release(a2);
}

uint64_t sub_100397A4C(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unsigned int *v11;
  size_t v12;
  unsigned int *v13;
  size_t v14;
  void *v16;
  unsigned int *v17;
  char v18;
  void *__p[2];
  char v20;
  uint64_t v21;
  unsigned int *v22;
  int v23;
  __int16 v24;
  char __str[16];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v23 = *(_DWORD *)(a2 + 128);
  v24 = *(_WORD *)(a2 + 132);
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  *(_OWORD *)__str = 0u;
  v26 = 0u;
  v21 = 0;
  v22 = 0;
  sub_10046E9BC((unsigned __int8 *)&v23, __p);
  sub_100395DA0(a1, (const void **)__p, &v21);
  if (v20 < 0)
    operator delete(__p[0]);
  snprintf(__str, 0x3FuLL, "%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X", *a4, a4[1], a4[2], a4[3], a4[4], a4[5], a4[6], a4[7], a4[8], a4[9], a4[10], a4[11], a4[12], a4[13], a4[14], a4[15]);
  HIBYTE(v28) = 0;
  if (a3)
  {
    v7 = 0;
    if (a3 != 1)
      goto LABEL_23;
    sub_10046E9BC((unsigned __int8 *)&v23, &v16);
    if (v18 >= 0)
      v8 = (char *)&v16;
    else
      v8 = (char *)v16;
    v9 = sub_1002FA49C(1024, v8, __str, 1);
  }
  else
  {
    sub_10046E9BC((unsigned __int8 *)&v23, &v16);
    if (v18 >= 0)
      v10 = (char *)&v16;
    else
      v10 = (char *)v16;
    v9 = sub_1002FA49C(512, v10, __str, 1);
  }
  v7 = v9;
  if (v18 < 0)
  {
    operator delete(v16);
    if ((_DWORD)v7)
      goto LABEL_23;
  }
  else if ((_DWORD)v9)
  {
    goto LABEL_23;
  }
  if (a3 == 1)
  {
    v13 = v22;
    v14 = strlen(__str);
    sub_10003994C(&v16, __str, v14 + 1);
    sub_100395D48((uint64_t)v13, 1024, (uint64_t)&v16);
  }
  else
  {
    v11 = v22;
    v12 = strlen(__str);
    sub_10003994C(&v16, __str, v12 + 1);
    sub_100395D48((uint64_t)v11, 512, (uint64_t)&v16);
  }
  v16 = &off_100918258;
  if (v17)
    sub_100056AAC(v17);
  v7 = 0;
LABEL_23:
  if (v22)
    sub_100056AAC(v22);
  return v7;
}

void sub_100397CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,unsigned int *a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,unsigned int *a39)
{
  if (a27)
    sub_100056AAC(a27);
  if (a39)
    sub_100056AAC(a39);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100397D28(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint8_t *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  void **v12;
  uint64_t (**v14)();
  unsigned int *v15;
  int v16;
  __int16 v17;
  uint8_t buf[23];
  char v19;
  void *__p;
  __int16 v21;
  uint8_t *v22;
  __int16 v23;
  int v24;

  v16 = *(_DWORD *)(a2 + 128);
  v17 = *(_WORD *)(a2 + 132);
  sub_10046E9BC((unsigned __int8 *)&v16, &__p);
  v6 = sub_10001F2AC(a1 + 8, (const void **)&__p);
  if (SHIBYTE(v24) < 0)
    operator delete(__p);
  if (a1 + 16 == v6)
    return 150;
  v14 = 0;
  v15 = 0;
  sub_1003965C0(*(_QWORD *)(v6 + 64), dword_10073F530[a3], &v14);
  if (sub_1000452EC((uint64_t)&v14))
  {
    v7 = qword_100999850;
    if (!os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_INFO))
      goto LABEL_21;
    sub_10043E5F8(a2, buf);
    v8 = v19 >= 0 ? buf : *(uint8_t **)buf;
    LODWORD(__p) = 67109634;
    HIDWORD(__p) = a3;
    v21 = 2080;
    v22 = v8;
    v23 = 1024;
    v24 = 150;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Wireless Splitter call to retrieve key chain key data of type %d for device %s failed with result %d", (uint8_t *)&__p, 0x18u);
    if ((v19 & 0x80000000) == 0)
      goto LABEL_21;
    v9 = *(void **)buf;
    goto LABEL_20;
  }
  sub_10003EB18((uint64_t)&v14);
  if (sub_10003F8C4((uint64_t)&v14))
  {
    v10 = 0;
    goto LABEL_22;
  }
  v11 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, &__p);
    v12 = v24 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Wireless Splitter key was empty for device %s", buf, 0xCu);
    if (SHIBYTE(v24) < 0)
    {
      v9 = __p;
LABEL_20:
      operator delete(v9);
    }
  }
LABEL_21:
  v10 = 150;
LABEL_22:
  v14 = &off_100918258;
  if (v15)
    sub_100056AAC(v15);
  return v10;
}

void sub_100397F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a11)
    sub_100056AAC(a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100397FA4(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  int v7;
  __int16 v8;
  uint64_t v9;

  v7 = *(_DWORD *)(a2 + 128);
  v8 = *(_WORD *)(a2 + 132);
  v9 = 0x40000000200;
  sub_100397764(a1, a2, 2, (int *)&v9);
  sub_10046E9BC((unsigned __int8 *)&v7, __p);
  if (v6 >= 0)
    v2 = (char *)__p;
  else
    v2 = (char *)__p[0];
  v3 = sub_1002FB6F0(v2, 0x600u);
  if (v6 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_100398058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10039807C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  uint64_t v4;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  void **v16;
  char *v17;
  unsigned int *v18;
  size_t v19;
  char *v20;
  char *v21;
  char *v22;
  unsigned int *v23;
  size_t v24;
  unsigned int *v25;
  size_t v26;
  unsigned int *v27;
  size_t v28;
  unsigned int *v29;
  size_t v30;
  void *v32[2];
  char v33;
  void *__p[2];
  char v35;
  uint64_t v36;
  unsigned int *v37;
  int v38;
  __int16 v39;
  _BYTE buf[18];
  __int16 v41;
  signed int v42;
  char __str[16];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  v38 = *(_DWORD *)(a2 + 128);
  v39 = *(_WORD *)(a2 + 132);
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  *(_OWORD *)__str = 0u;
  v44 = 0u;
  if (a3 > 4)
    return 3;
  v36 = 0;
  v37 = 0;
  sub_10046E9BC((unsigned __int8 *)&v38, __p);
  sub_100395DA0(a1, (const void **)__p, &v36);
  if (v35 < 0)
    operator delete(__p[0]);
  v9 = *a4;
  v10 = a4[1];
  v11 = a4[2];
  v12 = a4[4];
  if (a3 != 4)
  {
    snprintf(__str, 0x3FuLL, "%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X", v9, v10, v11, a4[3], v12, a4[5], a4[6], a4[7], a4[8], a4[9], a4[10], a4[11], a4[12], a4[13], a4[14], a4[15]);
    HIBYTE(v46) = 0;
    switch(a3)
    {
      case 0u:
        sub_10046E9BC((unsigned __int8 *)&v38, buf);
        if (v42 >= 0)
          v17 = buf;
        else
          v17 = *(char **)buf;
        v14 = sub_1002FA49C(64, v17, __str, 0);
        goto LABEL_10;
      case 1u:
        sub_10046E9BC((unsigned __int8 *)&v38, buf);
        if (v42 >= 0)
          v20 = buf;
        else
          v20 = *(char **)buf;
        v14 = sub_1002FA49C(128, v20, __str, 0);
        goto LABEL_10;
      case 2u:
        sub_10046E9BC((unsigned __int8 *)&v38, buf);
        if (v42 >= 0)
          v21 = buf;
        else
          v21 = *(char **)buf;
        v14 = sub_1002FA49C(16, v21, __str, 0);
        goto LABEL_10;
      case 3u:
        sub_10046E9BC((unsigned __int8 *)&v38, buf);
        if (v42 >= 0)
          v22 = buf;
        else
          v22 = *(char **)buf;
        v14 = sub_1002FA49C(32, v22, __str, 0);
        goto LABEL_10;
      default:
        goto LABEL_44;
    }
  }
  snprintf(__str, 0x14uLL, "%02X-%02X-%02X-%02X-%02x", v9, v10, v11, a4[3], v12);
  BYTE4(v44) = 0;
  sub_10046E9BC((unsigned __int8 *)&v38, buf);
  if (v42 >= 0)
    v13 = buf;
  else
    v13 = *(char **)buf;
  v14 = sub_1002FA49C(256, v13, __str, 0);
LABEL_10:
  v4 = v14;
  if (SHIBYTE(v42) < 0)
  {
    operator delete(*(void **)buf);
    if ((_DWORD)v4)
      goto LABEL_12;
LABEL_24:
    switch(a3)
    {
      case 0u:
        v18 = v37;
        v19 = strlen(__str);
        sub_10003994C(buf, __str, v19 + 1);
        sub_100395D48((uint64_t)v18, 64, (uint64_t)buf);
        goto LABEL_42;
      case 1u:
        v29 = v37;
        v30 = strlen(__str);
        sub_10003994C(buf, __str, v30 + 1);
        sub_100395D48((uint64_t)v29, 128, (uint64_t)buf);
        goto LABEL_42;
      case 2u:
        v23 = v37;
        v24 = strlen(__str);
        sub_10003994C(buf, __str, v24 + 1);
        sub_100395D48((uint64_t)v23, 16, (uint64_t)buf);
        goto LABEL_42;
      case 3u:
        v25 = v37;
        v26 = strlen(__str);
        sub_10003994C(buf, __str, v26 + 1);
        sub_100395D48((uint64_t)v25, 32, (uint64_t)buf);
        goto LABEL_42;
      case 4u:
        v27 = v37;
        v28 = strlen(__str);
        sub_10003994C(buf, __str, v28 + 1);
        sub_100395D48((uint64_t)v27, 256, (uint64_t)buf);
LABEL_42:
        *(_QWORD *)buf = &off_100918258;
        if (*(_QWORD *)&buf[8])
          sub_100056AAC(*(unsigned int **)&buf[8]);
        break;
      default:
        break;
    }
LABEL_44:
    v4 = 0;
    goto LABEL_45;
  }
  if (!(_DWORD)v14)
    goto LABEL_24;
LABEL_12:
  v15 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, v32);
    v16 = v33 >= 0 ? v32 : (void **)v32[0];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v16;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v4;
    v41 = 1024;
    v42 = a3;
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed to write magicKey data for device %{public}s to keychain with result %d for keyType %d", buf, 0x18u);
    if (v33 < 0)
      operator delete(v32[0]);
  }
LABEL_45:
  if (v37)
    sub_100056AAC(v37);
  return v4;
}

void sub_100398508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,unsigned int *a36,uint64_t a37,void *__p,unsigned int *a39,int a40,__int16 a41,char a42,char a43)
{
  if (a39)
    sub_100056AAC(a39);
  if (a36)
    sub_100056AAC(a36);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003985C0(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  uint64_t v4;
  uint64_t v9;
  NSObject *v10;
  uint8_t *v11;
  void *v12;
  uint64_t v13;
  size_t v14;
  NSObject *v15;
  void **v16;
  NSObject *v18;
  uint64_t (**v19)();
  unsigned int *v20;
  int v21;
  __int16 v22;
  uint8_t buf[23];
  char v24;
  void *__p;
  __int16 v26;
  uint8_t *v27;
  __int16 v28;
  int v29;
  _QWORD __src[2];

  v21 = *(_DWORD *)(a2 + 128);
  v22 = *(_WORD *)(a2 + 132);
  __src[0] = 0;
  __src[1] = 0;
  if (a3 > 4)
    return 3;
  sub_10046E9BC((unsigned __int8 *)&v21, &__p);
  v9 = sub_10001F2AC(a1 + 8, (const void **)&__p);
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
  if (a1 + 16 == v9)
    return 150;
  v19 = 0;
  v20 = 0;
  sub_1003965C0(*(_QWORD *)(v9 + 64), dword_10073F544[a3], &v19);
  if (sub_1000452EC((uint64_t)&v19))
  {
    v10 = qword_100999850;
    if (!os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_INFO))
      goto LABEL_27;
    sub_10043E5F8(a2, buf);
    v11 = v24 >= 0 ? buf : *(uint8_t **)buf;
    LODWORD(__p) = 67109634;
    HIDWORD(__p) = a3;
    v26 = 2082;
    v27 = v11;
    v28 = 1024;
    v29 = 150;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Call to retrieve key chain magic key data of type %d for device %{public}s failed with result %d", (uint8_t *)&__p, 0x18u);
    if ((v24 & 0x80000000) == 0)
      goto LABEL_27;
    v12 = *(void **)buf;
    goto LABEL_26;
  }
  v13 = sub_10003EB18((uint64_t)&v19);
  if (sub_10003F8C4((uint64_t)&v19))
  {
    if (a3 == 4)
      v14 = 5;
    else
      v14 = 16;
    if (sub_100397098(v13, (uint64_t)__src, v14))
    {
      memcpy(a4, __src, v14);
      v4 = 0;
    }
    else
    {
      v18 = qword_100999850;
      if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(a2, &__p);
        sub_1006E4548((uint64_t *)&__p, v13, buf, v18);
      }
      v4 = 151;
    }
    goto LABEL_28;
  }
  v15 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, &__p);
    v16 = v29 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "magic key was empty for device %{public}s", buf, 0xCu);
    if (SHIBYTE(v29) < 0)
    {
      v12 = __p;
LABEL_26:
      operator delete(v12);
    }
  }
LABEL_27:
  v4 = 150;
LABEL_28:
  v19 = &off_100918258;
  if (v20)
    sub_100056AAC(v20);
  return v4;
}

void sub_10039888C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, unsigned int *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a11)
    sub_100056AAC(a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003988DC(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  int v7;
  __int16 v8;

  v7 = *(_DWORD *)(a2 + 128);
  v8 = *(_WORD *)(a2 + 132);
  sub_100397764(a1, a2, 5, dword_10073F544);
  sub_10046E9BC((unsigned __int8 *)&v7, __p);
  if (v6 >= 0)
    v2 = (char *)__p;
  else
    v2 = (char *)__p[0];
  v3 = sub_1002FB6F0(v2, 0x1F0u);
  if (v6 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_10039895C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_100398978(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  int v5;
  NSObject *v6;
  double result;
  __int128 v8;
  unsigned int v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  unsigned int v13;
  __int128 v14;
  __int128 v15;

  v9 = 0;
  v14 = 0u;
  v15 = 0u;
  v5 = sub_1002FD250(4, (UInt8 *)&v14, 32, &v9);
  v6 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v11 = v5;
    v12 = 1024;
    v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "readCloudMasterKeys res = %d, %d", buf, 0xEu);
  }
  if (!v5 && v9 >= 0x20)
  {
    result = *(double *)&v14;
    v8 = v15;
    *a2 = v14;
    *a3 = v8;
  }
  return result;
}

uint64_t sub_100398A7C(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  int v8;
  __int16 v9;
  unsigned int v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  unsigned int v14;
  __int128 v15;

  v10 = 0;
  v15 = 0uLL;
  v9 = 0;
  v8 = 0;
  v5 = 1;
  if (!sub_1002FD250(8, (UInt8 *)&v15, 16, &v10) && v10 >= 0x10)
  {
    v5 = sub_1002FD250(9, (UInt8 *)&v8, 6, &v10);
    v6 = qword_100999850;
    if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      v12 = v5;
      v13 = 1024;
      v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "readCloudMasterKeys res = %d, %d", buf, 0xEu);
    }
    *a2 = v15;
    *(_WORD *)(a3 + 4) = v9;
    *(_DWORD *)a3 = v8;
  }
  return v5;
}

BOOL sub_100398BA4(uint64_t a1, _OWORD *a2, __int128 *a3)
{
  __int128 v4;
  int v5;
  unsigned int v7;
  _OWORD v8[2];
  _OWORD v9[2];

  v7 = 32;
  memset(v8, 0, sizeof(v8));
  v4 = *a3;
  v9[0] = *a2;
  v9[1] = v4;
  if (!sub_1002FD250(4, (UInt8 *)v8, 32, &v7))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  v5 = sub_1002FD428(4u, (const UInt8 *)v9, v7);
  if (v5 && os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_FAULT))
    sub_1006E45C0();
  return v5 != 0;
}

BOOL sub_100398C84(uint64_t a1, UInt8 *a2, const UInt8 *a3)
{
  int v6;
  unsigned int v8;

  v8 = 16;
  if (!sub_1002FD250(8, a2, 16, &v8))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  if (sub_1002FD428(8u, a2, 0x10u) && os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_FAULT))
    sub_1006E4680();
  v6 = sub_1002FD428(9u, a3, 6u);
  if (v6 && os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_FAULT))
    sub_1006E4620();
  return v6 != 0;
}

uint64_t sub_100398D6C()
{
  uint64_t v0;
  NSObject *v1;
  _DWORD v3[2];

  v0 = sub_1002FD630(4);
  v1 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "deleteCloudMasterKeys result %d", (uint8_t *)v3, 8u);
  }
  return v0;
}

uint64_t sub_100398E18()
{
  int v0;
  NSObject *v1;
  uint64_t v2;
  NSObject *v3;
  int v5;
  int v6;

  v0 = sub_1002FD630(9);
  v1 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 67109120;
    v6 = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "deleteCloudFCIRKAddress address result %d", (uint8_t *)&v5, 8u);
  }
  v2 = sub_1002FD630(8);
  v3 = qword_100999850;
  if (os_log_type_enabled((os_log_t)qword_100999850, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 67109120;
    v6 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "deleteCloudFCIRKAddress IRK result %d", (uint8_t *)&v5, 8u);
  }
  return v2;
}

uint64_t sub_100398F1C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_10092AFF8;
  sub_100398F94(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

void sub_100398F50(uint64_t a1)
{
  *(_QWORD *)a1 = &off_10092AFF8;
  sub_100398F94(a1 + 16, *(_QWORD **)(a1 + 24));
  operator delete();
}

void sub_100398F94(uint64_t a1, _QWORD *a2)
{
  unsigned int *v4;

  if (a2)
  {
    sub_100398F94(a1, *a2);
    sub_100398F94(a1, a2[1]);
    a2[5] = &off_100918258;
    v4 = (unsigned int *)a2[6];
    if (v4)
      sub_100056AAC(v4);
    operator delete(a2);
  }
}

void sub_100398FEC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100398FEC(a1, *a2);
    sub_100398FEC(a1, a2[1]);
    sub_100399034((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100399034(uint64_t a1)
{
  unsigned int *v2;

  *(_QWORD *)(a1 + 24) = off_10092B038;
  v2 = *(unsigned int **)(a1 + 32);
  if (v2)
    sub_100056AAC(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_100399080(id a1)
{
  operator new();
}

void sub_1003990C0()
{
  operator delete();
}

uint64_t **sub_1003990E4(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = &off_100918258;
    *((_QWORD *)v11 + 6) = 0;
    sub_100004078(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1003991AC(_QWORD *a1)
{
  unsigned int *v1;

  *a1 = off_10092B038;
  v1 = (unsigned int *)a1[1];
  if (v1)
    sub_100056AAC(v1);
  operator delete();
}

uint64_t *sub_1003991F4(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (uint64_t **)sub_10001F574((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_1003992A8((uint64_t)a1, a4, v10);
    sub_100004078(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100399348((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_1003992A8@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_10003430C(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = off_10092B038;
  v6[8] = 0;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_100399330(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100399348(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100399348(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100399034((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_10039938C(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  sub_1003993F0((uint64_t **)a1, (uint64_t *)v4);
  return 1;
}

uint64_t *sub_1003993F0(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  unsigned int *v4;

  v3 = sub_1000040CC(a1, a2);
  a2[5] = (uint64_t)&off_100918258;
  v4 = (unsigned int *)a2[6];
  if (v4)
    sub_100056AAC(v4);
  operator delete(a2);
  return v3;
}

void sub_10039943C(uint64_t a1)
{
  char **v1;
  char **v2;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  NSObject *v8;
  id v9;
  dispatch_block_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  int64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char **v21;
  BOOL v22;
  char *v23;
  int v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  NSObject *v29;
  uint64_t v30;
  char **v31;
  char *v32[2];
  _QWORD block[4];
  id v34;
  uint64_t v35;
  _BYTE buf[12];
  __int16 v37;
  _QWORD *v38;
  char v39;
  uint64_t v40[3];
  uint64_t v41[3];
  _QWORD v42[3];

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 12) != v4)
  {
    *(_DWORD *)(a1 + 12) = v4;
LABEL_17:
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
    return;
  }
  if (!*(_BYTE *)(a1 + 4))
  {
    if (*(_QWORD *)(a1 + 16))
      sub_1000066E8(a1);
    goto LABEL_17;
  }
  if (*(_QWORD *)(a1 + 56) && !*(_DWORD *)(a1 + 24))
  {
    v5 = (_QWORD *)(a1 + 32);
    v6 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v6 = (_QWORD *)*v5;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
    v8 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 55) < 0)
        v5 = (_QWORD *)*v5;
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v7;
      v37 = 2082;
      v38 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Watchdog dispatch scheduled: %@ (%{public}s)", buf, 0x16u);
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10039999C;
    block[3] = &unk_100918868;
    v34 = v7;
    v35 = a1;
    v9 = v7;
    v10 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INITIATED, 0, block);
    dispatch_async(*(dispatch_queue_t *)(a1 + 56), v10);

  }
  ++*(_DWORD *)(a1 + 24);
  v11 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 664))(v11))
    WriteStackshotReport_stdc("BT XPC PreTimeout", (*(_DWORD *)(a1 + 24) - 1159991568));
  if (*(_DWORD *)(a1 + 24) == 3)
  {
    v12 = sub_100027F68();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 672))(v12) & 1) == 0)
    {
      v14 = sub_100027F68();
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14))
      {
        while (1)
        {
          sub_100399A5C(a1);
          __break(1u);
LABEL_29:
          v15 = *(char *)(a1 + 55);
          if (v15 >= 0)
            v16 = (unsigned __int8 *)(a1 + 32);
          else
            v16 = *(unsigned __int8 **)(a1 + 32);
          if (v15 >= 0)
            v17 = *(unsigned __int8 *)(a1 + 55);
          else
            v17 = *(_QWORD *)(a1 + 40);
          while (1)
          {
            if (*((char *)v2 + 55) < 0)
            {
              v19 = v2[4];
              v18 = v2[5];
            }
            else
            {
              v18 = (char *)*((unsigned __int8 *)v2 + 55);
              v19 = (char *)(v2 + 4);
            }
            if (!v17)
              break;
            if ((uint64_t)v18 >= v17)
            {
              v23 = &v18[(_QWORD)v19];
              v24 = *v16;
              v25 = v19;
              while (1)
              {
                v26 = &v18[-v17];
                if (v26 == (char *)-1)
                  goto LABEL_40;
                v27 = (char *)memchr(v25, v24, (size_t)(v26 + 1));
                if (!v27)
                  goto LABEL_40;
                v28 = v27;
                if (!memcmp(v27, v16, v17))
                  break;
                v25 = v28 + 1;
                v18 = (char *)(v23 - (v28 + 1));
                if ((uint64_t)v18 < v17)
                  goto LABEL_40;
              }
              if (v28 != v23 && v28 - v19 != -1)
                break;
            }
LABEL_40:
            v20 = v2[1];
            if (v20)
            {
              do
              {
                v21 = (char **)v20;
                v20 = *(char **)v20;
              }
              while (v20);
            }
            else
            {
              do
              {
                v21 = (char **)v2[2];
                v22 = *v21 == (char *)v2;
                v2 = v21;
              }
              while (!v22);
            }
            v2 = v21;
            if (v21 == v1)
              goto LABEL_26;
          }
          v29 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v16;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Targetted WatchDog Stall signature found, filing ABC Snapshot for %s", buf, 0xCu);
          }
          if (qword_10097AA70 != -1)
            dispatch_once(&qword_10097AA70, &stru_10092B090);
          v30 = qword_10097AA68;
          sub_100091AE8(buf, "Watchdog");
          sub_10047C59C(60.0, v30, (uint64_t *)buf, (uint64_t *)v2 + 4);
          if (v39 < 0)
            operator delete(*(void **)buf);
LABEL_26:
          sub_100056BAC((uint64_t)&v31, v32[0]);
        }
      }
    }
    v31 = 0;
    v32[0] = 0;
    v32[1] = 0;
    sub_100091AE8(buf, "com.apple.UserEventAgent");
    sub_100091AE8(v40, "com.apple.cloudpaird");
    sub_100091AE8(v41, "com.apple.nearbyd");
    sub_100091AE8(v42, "com.apple.bluetooth.coreBluetooth");
    sub_100393D54((uint64_t)&v31, (const void **)buf, 4);
    for (i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v42[i + 2]) < 0)
        operator delete((void *)v42[i]);
    }
    v2 = v31;
    v1 = v32;
    if (v31 != v32)
      goto LABEL_29;
    goto LABEL_26;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_10039990C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  sub_100056BAC((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_10039999C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  _QWORD *v9;

  v2 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = (_QWORD *)(v4 + 32);
    if (*(char *)(v4 + 55) < 0)
      v5 = (_QWORD *)*v5;
    v6 = 138412546;
    v7 = v3;
    v8 = 2082;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Watchdog dispatch performed: %@ (%{public}s)", (uint8_t *)&v6, 0x16u);
  }
}

void sub_100399A5C(uint64_t a1)
{
  const char **v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  os_log_t v9;
  os_log_t v10;
  void *v11;
  char __str[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  WriteStackshotReport_stdc("BT XPC Timeout", 3735928559);
  sub_100253460();
  v2 = (const char **)(a1 + 32);
  v3 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v3 = *v2;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  *(_OWORD *)__str = 0u;
  v13 = 0u;
  snprintf(__str, 0x80uLL, "XPC watchdog timeout on thread: %s", v3);
  qword_10097BA60 = (uint64_t)__str;
  v4 = _os_log_pack_size(12);
  v6 = &__str[-((__chkstk_darwin(v4, v5) + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __error();
  v8 = _os_log_pack_fill(v6, v4, *v7, &_mh_execute_header, "XPC watchdog timeout on thread: %{public}s");
  if (*(char *)(a1 + 55) < 0)
    v2 = (const char **)*v2;
  *(_DWORD *)v8 = 136446210;
  *(_QWORD *)(v8 + 4) = v2;
  v9 = os_log_create("com.apple.bluetooth", "CBCrash");
  if (v9)
    v10 = v9;
  else
    v10 = (os_log_t)&_os_log_default;
  qword_10097BA60 = os_log_pack_send_and_compose(v6, v10, 16, 0, 0);
  v11 = (void *)abort_with_payload(18, 2, v6, v4, qword_10097BA60, 0);
  sub_100399BB8(v11);
}

void sub_100399BB8(id a1)
{
  operator new();
}

xpc_object_t sub_100399BF8(uint64_t **a1)
{
  uint64_t *i;
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  uint64_t *j;
  xpc_object_t v6;
  uint64_t *k;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t *m;
  xpc_object_t v11;
  xpc_object_t v14;
  xpc_object_t xdict;
  void *__p;
  uint64_t *v17;
  uint64_t v18;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  uint64_t *v23;
  uint64_t v24;

  v14 = xpc_array_create(0, 0);
  for (i = *a1; i != a1[1]; ++i)
  {
    v2 = *i;
    xdict = sub_100399ED4(*i);
    xpc_dictionary_set_int64(xdict, "kCBMsgArgAttributeID", *(unsigned __int16 *)(v2 + 16));
    v3 = xpc_array_create(0, 0);
    v4 = xpc_array_create(0, 0);
    v22 = 0;
    v23 = 0;
    v24 = 0;
    sub_10001FE6C(&v22, v2 + 104);
    for (j = (uint64_t *)v22; j != v23; ++j)
    {
      v6 = sub_100399FE0(*j);
      xpc_dictionary_set_int64(v6, "kCBMsgArgAttributeID", *(unsigned __int16 *)(*j + 104));
      xpc_array_append_value(v3, v6);
      xpc_release(v6);
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    sub_10001FE6C(&v19, v2 + 136);
    for (k = (uint64_t *)v19; k != v20; ++k)
    {
      v8 = xpc_array_create(0, 0);
      v9 = sub_10039A0D4(*k);
      xpc_dictionary_set_int64(v9, "kCBMsgArgAttributeID", *(unsigned __int16 *)(*k + 16));
      __p = 0;
      v17 = 0;
      v18 = 0;
      sub_10001FE6C(&__p, *k + 104);
      for (m = (uint64_t *)__p; m != v17; ++m)
      {
        v11 = sub_10039A230(*m);
        xpc_dictionary_set_int64(v11, "kCBMsgArgAttributeID", *(unsigned __int16 *)(*m + 16));
        xpc_array_append_value(v8, v11);
        xpc_release(v11);
      }
      xpc_dictionary_set_value(v9, "kCBMsgArgDescriptors", v8);
      xpc_array_append_value(v4, v9);
      xpc_release(v9);
      xpc_release(v8);
      if (__p)
      {
        v17 = (uint64_t *)__p;
        operator delete(__p);
      }
    }
    xpc_dictionary_set_value(xdict, "kCBMsgArgCharacteristics", v4);
    xpc_dictionary_set_value(xdict, "kCBMsgArgIncludedServices", v3);
    xpc_array_append_value(v14, xdict);
    xpc_release(v3);
    xpc_release(v4);
    xpc_release(xdict);
    if (v19)
    {
      v20 = (uint64_t *)v19;
      operator delete(v19);
    }
    if (v22)
    {
      v23 = (uint64_t *)v22;
      operator delete(v22);
    }
  }
  return v14;
}

void sub_100399E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

xpc_object_t sub_100399ED4(uint64_t a1)
{
  xpc_object_t v2;
  size_t v3;
  __n128 v5;
  _QWORD bytes[2];
  __n128 v7;
  int v8;

  v2 = xpc_dictionary_create(0, 0, 0);
  bytes[0] = 0;
  bytes[1] = 0;
  v7 = *(__n128 *)(a1 + 72);
  v8 = *(_DWORD *)(a1 + 88);
  sub_100042F44(&v5, &v7);
  v3 = sub_1000689E4((unsigned __int8 *)&v5, bytes);
  xpc_dictionary_set_int64(v2, "kCBMsgArgAttributeID", *(unsigned int *)(a1 + 16));
  xpc_dictionary_set_data(v2, "kCBMsgArgUUID", bytes, v3);
  xpc_dictionary_set_BOOL(v2, "kCBMsgArgType", *(_BYTE *)(a1 + 96));
  xpc_dictionary_set_int64(v2, "kCBMsgArgServiceStartHandle", **(unsigned __int16 **)(a1 + 8));
  xpc_dictionary_set_int64(v2, "kCBMsgArgServiceEndHandle", *(unsigned __int16 *)(a1 + 48));
  return v2;
}

xpc_object_t sub_100399FE0(uint64_t a1)
{
  xpc_object_t v2;
  size_t v3;
  __n128 v5;
  _QWORD bytes[2];
  __n128 v7;
  int v8;

  v2 = xpc_dictionary_create(0, 0, 0);
  bytes[0] = 0;
  bytes[1] = 0;
  v7 = *(__n128 *)(a1 + 76);
  v8 = *(_DWORD *)(a1 + 92);
  sub_100042F44(&v5, &v7);
  v3 = sub_1000689E4((unsigned __int8 *)&v5, bytes);
  xpc_dictionary_set_int64(v2, "kCBMsgArgAttributeID", *(unsigned int *)(a1 + 104));
  xpc_dictionary_set_data(v2, "kCBMsgArgUUID", bytes, v3);
  xpc_dictionary_set_int64(v2, "kCBMsgArgServiceStartHandle", *(unsigned __int16 *)(a1 + 72));
  xpc_dictionary_set_int64(v2, "kCBMsgArgServiceEndHandle", *(unsigned __int16 *)(a1 + 74));
  return v2;
}

xpc_object_t sub_10039A0D4(uint64_t a1)
{
  xpc_object_t v2;
  size_t v3;
  uint64_t v4;
  const void *v5;
  size_t v6;
  __n128 v8;
  _QWORD bytes[2];
  __n128 v10;
  int v11;

  v2 = xpc_dictionary_create(0, 0, 0);
  bytes[0] = 0;
  bytes[1] = 0;
  v10 = *(__n128 *)(a1 + 76);
  v11 = *(_DWORD *)(a1 + 92);
  sub_100042F44(&v8, &v10);
  v3 = sub_1000689E4((unsigned __int8 *)&v8, bytes);
  xpc_dictionary_set_int64(v2, "kCBMsgArgAttributeID", *(unsigned int *)(a1 + 16));
  xpc_dictionary_set_data(v2, "kCBMsgArgUUID", bytes, v3);
  xpc_dictionary_set_int64(v2, "kCBMsgArgCharacteristicHandle", **(unsigned __int16 **)(a1 + 8));
  xpc_dictionary_set_int64(v2, "kCBMsgArgCharacteristicValueHandle", *(unsigned __int16 *)(a1 + 74));
  xpc_dictionary_set_int64(v2, "kCBMsgArgCharacteristicProperties", *(unsigned __int8 *)(a1 + 72));
  v4 = *(_QWORD *)(a1 + 96);
  if (v4)
  {
    v5 = (const void *)sub_10003EB18(v4 + 72);
    v6 = sub_10003F8C4(v4 + 72);
    xpc_dictionary_set_data(v2, "kCBMsgArgData", v5, v6);
    xpc_dictionary_set_int64(v2, "kCBMsgArgAttributePermissions", *(unsigned __int8 *)(*(_QWORD *)(v4 + 8) + 26));
  }
  return v2;
}

xpc_object_t sub_10039A230(uint64_t a1)
{
  xpc_object_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  void **v6;
  unsigned __int8 v8[20];
  void *__p[2];
  int v10;
  char v11;
  __n128 v12;
  int v13;
  _QWORD bytes[2];

  v2 = xpc_dictionary_create(0, 0, 0);
  bytes[0] = 0;
  bytes[1] = 0;
  v12 = 0uLL;
  v13 = 0;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(v3 + 20);
  *(_OWORD *)__p = *(_OWORD *)(v3 + 4);
  v10 = v4;
  sub_100042F44(&v12, (__n128 *)__p);
  v5 = sub_1000689E4((unsigned __int8 *)&v12, bytes);
  xpc_dictionary_set_int64(v2, "kCBMsgArgAttributeID", *(unsigned int *)(a1 + 16));
  xpc_dictionary_set_data(v2, "kCBMsgArgUUID", bytes, v5);
  xpc_dictionary_set_int64(v2, "kCBMsgArgDescriptorHandle", **(unsigned __int16 **)(a1 + 8));
  if (*(_BYTE *)(a1 + 20))
  {
    sub_10005F5E4((uint64_t)__p, 10496);
    if (sub_100072DF0((unsigned __int8 *)&v12, (unsigned __int8 *)__p))
    {
      xpc_dictionary_set_int64(v2, "kCBMsgArgData", *(unsigned __int16 *)(a1 + 72));
    }
    else
    {
      sub_10005F5E4((uint64_t)__p, 10497);
      if (sub_100072DF0((unsigned __int8 *)&v12, (unsigned __int8 *)__p))
      {
        sub_10039A49C(a1, __p);
        if (v11 >= 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        xpc_dictionary_set_string(v2, "kCBMsgArgData", (const char *)v6);
        if (v11 < 0)
          operator delete(__p[0]);
      }
      else
      {
        sub_10005F5E4((uint64_t)__p, 10498);
        if (sub_100072DF0((unsigned __int8 *)&v12, (unsigned __int8 *)__p)
          || (sub_10005F5E4((uint64_t)v8, 10499), sub_100072DF0((unsigned __int8 *)&v12, v8)))
        {
          xpc_dictionary_set_int64(v2, "kCBMsgArgData", *(unsigned __int16 *)(a1 + 72));
        }
        else
        {
          sub_10005F5E4((uint64_t)__p, 10500);
          if (sub_100072DF0((unsigned __int8 *)&v12, (unsigned __int8 *)__p))
          {
            LODWORD(__p[0]) = *(_DWORD *)(a1 + 72);
            BYTE4(__p[0]) = *(_BYTE *)(a1 + 76);
            *(_WORD *)((char *)__p + 5) = *(_WORD *)(a1 + 78);
            xpc_dictionary_set_data(v2, "kCBMsgArgData", __p, 7uLL);
          }
          else
          {
            xpc_dictionary_set_data(v2, "kCBMsgArgData", *(const void **)(a1 + 72), *(unsigned __int16 *)(a1 + 80));
          }
        }
      }
    }
  }
  return v2;
}

void sub_10039A478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10039A49C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  if (*(_WORD *)(a1 + 80))
    return sub_1002D236C(a2, *(void **)(a1 + 72), *(unsigned __int16 *)(a1 + 80));
  else
    return sub_100091AE8(a2, "");
}

uint64_t sub_10039A4C0(uint64_t a1, int a2, void *a3)
{
  id v5;

  v5 = a3;
  *(_QWORD *)a1 = off_10092B0C0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_10039A4FC(uint64_t a1)
{

  return a1;
}

xpc_object_t sub_10039A52C(id *a1, int a2, uint64_t a3)
{
  xpc_object_t v6;
  unsigned __int8 uuid[8];
  uint64_t v9;

  v6 = xpc_dictionary_create(0, 0, 0);
  (*((void (**)(id *, xpc_object_t, uint64_t))*a1 + 2))(a1, v6, a3);
  *(_QWORD *)uuid = 0;
  v9 = 0;
  objc_msgSend(a1[2], "getUUIDBytes:", uuid);
  xpc_dictionary_set_uuid(v6, "kCBMsgArgDeviceUUID", uuid);
  xpc_dictionary_set_int64(v6, "kCBMsgArgResult", a2);
  return v6;
}

void sub_10039A5F4(uint64_t a1, void *a2, uint64_t **a3)
{
  xpc_object_t v5;
  uint64_t *i;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  id v13;
  xpc_object_t v14;
  __n128 v16;
  __n128 v17;
  int v18;

  if (a3[1] != *a3)
  {
    v5 = xpc_array_create(0, 0);
    for (i = *a3; i != a3[1]; ++i)
    {
      v7 = *i;
      v9 = *(unsigned __int8 **)(a1 + 24);
      v8 = *(unsigned __int8 **)(a1 + 32);
      if (v8 != v9)
      {
        v17 = *(__n128 *)(v7 + 72);
        v18 = *(_DWORD *)(v7 + 88);
        sub_100042F44(&v16, &v17);
        while (!sub_100072DF0(v9, (unsigned __int8 *)&v16))
        {
          v9 += 20;
          if (v9 == v8)
          {
            v9 = v8;
            break;
          }
        }
        if (v9 == *(unsigned __int8 **)(a1 + 32))
          continue;
      }
      if (qword_1009778F8 != -1)
        dispatch_once(&qword_1009778F8, &stru_10092B1F0);
      v10 = qword_1009778F0;
      v17 = *(__n128 *)(v7 + 72);
      v18 = *(_DWORD *)(v7 + 88);
      sub_100042F44(&v16, &v17);
      v11 = *(unsigned __int8 *)(a1 + 48);
      v12 = *(unsigned int *)(a1 + 52);
      v13 = *(id *)(a1 + 16);
      LOBYTE(v10) = sub_1005E084C(v10, (unsigned __int8 *)&v16, v11, v12, v13);

      if ((v10 & 1) != 0)
      {
        v14 = sub_100399ED4(v7);
        xpc_array_set_value(v5, 0xFFFFFFFFFFFFFFFFLL, v14);
        xpc_release(v14);
      }
    }
    xpc_dictionary_set_value(a2, "kCBMsgArgServices", v5);
    xpc_release(v5);
  }
}

void sub_10039A7C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10039A7DC(uint64_t a1, xpc_object_t xdict, uint64_t **a3)
{
  xpc_object_t v3;
  xpc_object_t v6;
  uint64_t *i;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  id v14;
  xpc_object_t v15;
  __n128 v17;
  __n128 v18;
  int v19;

  v3 = xdict;
  if (a3[1] != *a3)
  {
    v6 = xpc_array_create(0, 0);
    for (i = *a3; i != a3[1]; ++i)
    {
      v8 = *i;
      v10 = *(unsigned __int8 **)(a1 + 32);
      v9 = *(unsigned __int8 **)(a1 + 40);
      if (v9 != v10)
      {
        v18 = *(__n128 *)(v8 + 76);
        v19 = *(_DWORD *)(v8 + 92);
        sub_100042F44(&v17, &v18);
        while (!sub_100072DF0(v10, (unsigned __int8 *)&v17))
        {
          v10 += 20;
          if (v10 == v9)
          {
            v10 = v9;
            break;
          }
        }
        if (v10 == *(unsigned __int8 **)(a1 + 40))
          continue;
      }
      if (qword_1009778F8 != -1)
        dispatch_once(&qword_1009778F8, &stru_10092B1F0);
      v11 = qword_1009778F0;
      v18 = *(__n128 *)(v8 + 76);
      v19 = *(_DWORD *)(v8 + 92);
      sub_100042F44(&v17, &v18);
      v12 = *(unsigned __int8 *)(a1 + 56);
      v13 = *(unsigned int *)(a1 + 60);
      v14 = *(id *)(a1 + 16);
      LOBYTE(v11) = sub_1005E084C(v11, (unsigned __int8 *)&v17, v12, v13, v14);

      if ((v11 & 1) != 0)
      {
        v15 = sub_100399FE0(v8);
        xpc_array_set_value(v6, 0xFFFFFFFFFFFFFFFFLL, v15);
        xpc_release(v15);
      }
    }
    xpc_dictionary_set_value(xdict, "kCBMsgArgServices", v6);
    xpc_release(v6);
    v3 = xdict;
  }
  xpc_dictionary_set_int64(v3, "kCBMsgArgServiceStartHandle", *(_QWORD *)(a1 + 24));
}

void sub_10039A9C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10039A9E0(int64_t *a1, xpc_object_t xdict, uint64_t **a3)
{
  xpc_object_t v6;
  uint64_t *i;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  xpc_object_t v11;
  __n128 v12;
  __n128 v13;
  int v14;

  if (a3[1] != *a3)
  {
    v6 = xpc_array_create(0, 0);
    for (i = *a3; i != a3[1]; ++i)
    {
      v8 = *i;
      v9 = (unsigned __int8 *)a1[4];
      v10 = (unsigned __int8 *)a1[5];
      if (v10 == v9)
        goto LABEL_10;
      v13 = *(__n128 *)(v8 + 76);
      v14 = *(_DWORD *)(v8 + 92);
      sub_100042F44(&v12, &v13);
      while (!sub_100072DF0(v9, (unsigned __int8 *)&v12))
      {
        v9 += 20;
        if (v9 == v10)
        {
          v9 = v10;
          break;
        }
      }
      if (v9 != (unsigned __int8 *)a1[5])
      {
LABEL_10:
        v11 = sub_10039A0D4(v8);
        xpc_array_set_value(v6, 0xFFFFFFFFFFFFFFFFLL, v11);
        xpc_release(v11);
      }
    }
    xpc_dictionary_set_value(xdict, "kCBMsgArgCharacteristics", v6);
    xpc_release(v6);
  }
  xpc_dictionary_set_int64(xdict, "kCBMsgArgServiceStartHandle", a1[3]);
}

void sub_10039AB30(uint64_t a1, xpc_object_t xdict)
{
  xpc_dictionary_set_int64(xdict, "kCBMsgArgCharacteristicHandle", *(_QWORD *)(a1 + 24));
}

void sub_10039AB48(uint64_t a1, xpc_object_t xdict, uint64_t a3)
{
  uint64_t v5;
  const void *v6;
  size_t v7;

  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)a3)
  {
    v5 = **(_QWORD **)a3 + 72;
    v6 = (const void *)sub_10003EB18(v5);
    v7 = sub_10003F8C4(v5);
    xpc_dictionary_set_data(xdict, "kCBMsgArgData", v6, v7);
  }
  xpc_dictionary_set_int64(xdict, "kCBMsgArgCharacteristicHandle", *(_QWORD *)(a1 + 24));
}

void sub_10039ABC0(uint64_t a1, xpc_object_t xdict)
{
  xpc_dictionary_set_int64(xdict, "kCBMsgArgState", *(unsigned __int8 *)(a1 + 32));
  xpc_dictionary_set_int64(xdict, "kCBMsgArgCharacteristicHandle", *(_QWORD *)(a1 + 24));
}

void sub_10039AC04(uint64_t a1, xpc_object_t xdict, uint64_t **a3)
{
  xpc_object_t v6;
  uint64_t *v7;
  uint64_t v8;
  xpc_object_t v9;

  if (a3[1] != *a3)
  {
    v6 = xpc_array_create(0, 0);
    v7 = *a3;
    while (v7 != a3[1])
    {
      v8 = *v7++;
      v9 = sub_10039A230(v8);
      xpc_array_set_value(v6, 0xFFFFFFFFFFFFFFFFLL, v9);
      xpc_release(v9);
    }
    xpc_dictionary_set_value(xdict, "kCBMsgArgDescriptors", v6);
    xpc_release(v6);
  }
  xpc_dictionary_set_int64(xdict, "kCBMsgArgCharacteristicHandle", *(_QWORD *)(a1 + 24));
}

void sub_10039ACB8(uint64_t a1, xpc_object_t xdict)
{
  xpc_dictionary_set_int64(xdict, "kCBMsgArgDescriptorHandle", *(_QWORD *)(a1 + 24));
}

void sub_10039ACD0(uint64_t a1, xpc_object_t xdict, uint64_t a3)
{
  xpc_object_t v5;
  xpc_object_t value;

  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)a3)
  {
    v5 = sub_10039A230(**(_QWORD **)a3);
    value = xpc_dictionary_get_value(v5, "kCBMsgArgData");
    xpc_dictionary_set_value(xdict, "kCBMsgArgData", value);
    xpc_release(v5);
  }
  xpc_dictionary_set_int64(xdict, "kCBMsgArgDescriptorHandle", *(_QWORD *)(a1 + 24));
}

uint64_t sub_10039AD48(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_10092B0E8;
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_10039AD8C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_10092B0E8;
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_10039ADE0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_10092B110;
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_10039AE24(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_10092B110;
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_10039AE78(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_10092B138;
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_10039AEBC(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_10092B138;
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_10039AF10(uint64_t a1)
{

  return a1;
}

void sub_10039AF38(uint64_t a1)
{

  operator delete();
}

uint64_t sub_10039AF70(uint64_t a1)
{

  return a1;
}

void sub_10039AF98(uint64_t a1)
{

  operator delete();
}

uint64_t sub_10039AFD0(uint64_t a1)
{

  return a1;
}

void sub_10039AFF8(uint64_t a1)
{

  operator delete();
}

uint64_t sub_10039B030(uint64_t a1)
{

  return a1;
}

void sub_10039B058(uint64_t a1)
{

  operator delete();
}

void sub_10039B090(id a1)
{
  operator new();
}

void sub_10039B0D0()
{
  operator delete();
}

void sub_10039B0F8(id a1)
{
  _QWORD *v1;
  _QWORD *v2;
  const char *v3;
  uint64_t v4;
  const char **v5;

  v3 = "kCBMsgIdSessionAttach";
  v4 = 21;
  v5 = &v3;
  v1 = sub_1000685DC((uint64_t)&xmmword_100999440, (uint64_t)&v3, (uint64_t)&unk_100740F58, (_OWORD **)&v5);
  v1[4] = sub_100015818;
  v1[5] = 0;
  v3 = "kCBMsgIdSessionDetach";
  v4 = 21;
  v5 = &v3;
  v2 = sub_1000685DC((uint64_t)&xmmword_100999440, (uint64_t)&v3, (uint64_t)&unk_100740F58, (_OWORD **)&v5);
  v2[4] = sub_10039B1A0;
  v2[5] = 0;
}

void sub_10039B1A0(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  xpc_object_t value;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t buf[24];

  v4 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 72);
    v6 = (_QWORD *)(v5 + 56);
    if (*(char *)(v5 + 79) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BTSessionMsgHandler::handleDetachMsg name:%s", buf, 0xCu);
  }
  *(_QWORD *)buf = 0;
  value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  if (!sub_100023B7C(value, 1, v8, v9, v10, v11, v12, v13, (uint64_t)"kCBMsgArgSessionID"))
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 72) + 152))
      sub_10039B2B0(a1);
  }
}

void sub_10039B2B0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _BYTE v6[24];

  v2 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 72);
    v4 = (_QWORD *)(v3 + 56);
    if (*(char *)(v3 + 79) < 0)
      v4 = (_QWORD *)*v4;
    *(_DWORD *)v6 = 136315138;
    *(_QWORD *)&v6[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BTSessionMsgHandler::cleanupBTSession name:%s", v6, 0xCu);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 152);
  *(_QWORD *)v6 = v5;
  if (v5)
  {
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_10092B290);
    sub_10050B328(qword_100977B48, v5);
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_10092B290);
    sub_10050B054(qword_100977B48, v5);
    sub_100508DC0((unint64_t *)v6);
  }
}

void sub_10039B3EC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  _QWORD *v6;

  v2 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 72);
    v4 = (_QWORD *)(v3 + 56);
    if (*(char *)(v3 + 79) < 0)
      v4 = (_QWORD *)*v4;
    v5 = 136315138;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BTSessionMsgHandler::handleDisconnection name:%s", (uint8_t *)&v5, 0xCu);
  }
  sub_10039B2B0(a1);
}

_QWORD *sub_10039B4A8(_QWORD *a1)
{
  *a1 = &off_10092B270;
  sub_100069BDC(a1 + 1);
  return a1;
}

void sub_10039B4D8(_QWORD *a1)
{
  *a1 = &off_10092B270;
  sub_100069BDC(a1 + 1);
  operator delete();
}

unint64_t sub_10039B518(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_10039B8C4(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_10039B818(a2, a3);
  }
  else
  {
    return sub_10039B720(a2, a3);
  }
}

unint64_t sub_10039B720(_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_10039B818(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_10039B8C4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void sub_10039B984(id a1)
{
  operator new();
}

void sub_10039B9C4()
{
  operator delete();
}

void sub_10039B9E8()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  xmmword_100999440 = 0u;
  *(_OWORD *)algn_100999450 = 0u;
  dword_100999460 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_10039B0F4, &xmmword_100999440, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_10039BA38(unint64_t *a1, __int16 a2)
{
  unint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  char *v24;
  _BYTE *v25;
  char v26;

  v5 = (_BYTE *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = &v5[-*a1];
    v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0)
      goto LABEL_38;
    v10 = v4 - v7;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (unint64_t)operator new(v11);
    else
      v12 = 0;
    v13 = (char *)(v12 + v11);
    v8[v12] = a2;
    v6 = &v8[v12 + 1];
    if (v5 == (_BYTE *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      v14 = &v5[~v7];
      do
      {
        v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (_BYTE *)v7);
      v5 = (_BYTE *)*a1;
    }
    *a1 = v12;
    a1[1] = (unint64_t)v6;
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  a1[1] = (unint64_t)v6;
  v16 = a1[2];
  if ((unint64_t)v6 < v16)
  {
    *v6 = HIBYTE(a2);
    v17 = (uint64_t)(v6 + 1);
    goto LABEL_37;
  }
  v18 = *a1;
  v19 = &v6[-*a1];
  v20 = (unint64_t)(v19 + 1);
  if ((uint64_t)(v19 + 1) < 0)
LABEL_38:
    abort();
  v21 = v16 - v18;
  if (2 * v21 > v20)
    v20 = 2 * v21;
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
    v22 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v22 = v20;
  if (v22)
    v23 = (unint64_t)operator new(v22);
  else
    v23 = 0;
  v24 = (char *)(v23 + v22);
  v19[v23] = HIBYTE(a2);
  v17 = (uint64_t)&v19[v23 + 1];
  if (v6 == (_BYTE *)v18)
  {
    *a1 = (unint64_t)&v19[v23];
    a1[1] = v17;
    a1[2] = (unint64_t)v24;
LABEL_36:
    operator delete(v6);
    goto LABEL_37;
  }
  v25 = &v6[~v18];
  do
  {
    v26 = *--v6;
    (v25--)[v23] = v26;
  }
  while (v6 != (_BYTE *)v18);
  v6 = (_BYTE *)*a1;
  *a1 = v23;
  a1[1] = v17;
  a1[2] = (unint64_t)v24;
  if (v6)
    goto LABEL_36;
LABEL_37:
  a1[1] = v17;
}

void sub_10039BBE0(unint64_t *a1, __int16 a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  char v21;

  sub_10039BA38(a1, a2);
  sub_10039BA38(a1, a3);
  if (a3)
  {
    v7 = 0;
    v8 = (_BYTE *)a1[1];
    v9 = a3;
    do
    {
      v10 = *a4;
      v11 = a1[2];
      if ((unint64_t)v8 >= v11)
      {
        v13 = *a1;
        v14 = &v8[-*a1];
        v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0)
          abort();
        v16 = v11 - v13;
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)operator new(v17);
        else
          v18 = 0;
        v19 = &v14[(_QWORD)v18];
        v14[(_QWORD)v18] = *(_BYTE *)(v10 + v7);
        v12 = (uint64_t)&v14[(_QWORD)v18 + 1];
        if (v8 != (_BYTE *)v13)
        {
          v20 = &v8[~v13];
          do
          {
            v21 = *--v8;
            (v20--)[(_QWORD)v18] = v21;
          }
          while (v8 != (_BYTE *)v13);
          v8 = (_BYTE *)*a1;
          v19 = v18;
        }
        *a1 = (unint64_t)v19;
        a1[1] = v12;
        a1[2] = (unint64_t)&v18[v17];
        if (v8)
          operator delete(v8);
      }
      else
      {
        *v8 = *(_BYTE *)(v10 + v7);
        v12 = (uint64_t)(v8 + 1);
      }
      a1[1] = v12;
      ++v7;
      v8 = (_BYTE *)v12;
    }
    while (v7 != v9);
  }
}

id sub_10039BD14(unsigned __int8 *a1, uint64_t a2)
{
  id i;
  unsigned int v5;

  for (i = objc_msgSend(objc_alloc((Class)NSMutableString), "initWithString:", CFSTR("0x")); a2; --a2)
  {
    v5 = *a1++;
    objc_msgSend(i, "appendFormat:", CFSTR("%02x"), v5);
  }
  return i;
}

void sub_10039BD8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10039BD9C(void *a1)
{
  id v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = a1;
  v2 = qword_100999978;
  if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "handleHIDDeviceRemoved:", v3, 2u);
  }
  objc_msgSend(v1, "close");

}

void sub_10039BE14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10039BE24(int a1, int a2, uint64_t a3)
{
  NSObject *v6;
  _DWORD v7[2];
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  v6 = qword_100999978;
  if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109634;
    v7[1] = a1;
    v8 = 1024;
    v9 = a2;
    v10 = 2112;
    v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "handleHIDReportWithType:%d reportID:%d data:%@", (uint8_t *)v7, 0x18u);
  }
}

void sub_10039BEEC(uint64_t a1, void *a2, void *a3)
{
  float v3;
  id v6;
  id v7;
  unsigned __int8 v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t DataValue;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  id v22;
  void *v23;
  unint64_t v24;
  __int128 v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  NSObject *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  NSObject *v39;
  unsigned int v40;
  float *i;
  float v42;
  uint64_t v43;
  float v44;
  uint64_t v45;
  NSObject *v46;
  const char *v47;
  uint32_t v48;
  float v49;
  float *v50;
  float v51;
  NSObject *v52;
  NSObject *v53;
  __int16 v54;
  NSObject *v55;
  _QWORD v56[4];
  unsigned __int8 v57;
  unsigned __int8 v58;
  unsigned __int8 v59;
  unint64_t v60;
  __int128 v61;
  _BYTE v62[44];
  _QWORD v63[5];
  __int16 v64;
  int v65;
  char v66;
  char v67;
  __int16 v68;
  char v69;
  char v70;
  uint64_t v71;
  int v72;
  _BYTE buf[32];
  __int128 v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  _QWORD v99[5];
  __int128 v100;
  __int128 v101;
  __int128 v102;

  v6 = a2;
  v7 = a3;
  v8 = atomic_load((unsigned __int8 *)(a1 + 96));
  if ((v8 & 1) == 0)
  {
    v9 = qword_100999978;
    if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
      sub_1006E47F8(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  if (v6)
  {
    if (v7)
    {
      DataValue = IOHIDEventGetDataValue(v6, 65540);
      v18 = objc_msgSend(v6, "integerValueForField:", 65539);
      if (DataValue && (v19 = (uint64_t)v18) != 0)
      {
        v20 = sub_100027F68();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 160))(v20))
        {
          v21 = qword_100999978;
          if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
          {
            v22 = sub_10039BD14((unsigned __int8 *)DataValue, v19);
            v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v23;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "handleHIDEvent:forService: received: %@", buf, 0xCu);

          }
        }
        memset(v62, 0, sizeof(v62));
        v61 = 0u;
        v59 = *(_BYTE *)DataValue;
        v24 = *(_QWORD *)(DataValue + 1);
        v60 = v24;
        if (v59 != 225)
        {
          if (v59 == 227)
          {
            v54 = *(_WORD *)(DataValue + 25);
            v61 = *(_OWORD *)(DataValue + 9);
            *(_WORD *)v62 = v54;
            if (HIBYTE(v61))
            {
              v55 = qword_100999978;
              if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67110656;
                *(_DWORD *)&buf[4] = WORD6(v61);
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = SBYTE14(v61);
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&buf[16] = SHIBYTE(v61);
                *(_WORD *)&buf[20] = 1024;
                *(_DWORD *)&buf[22] = v62[0];
                *(_WORD *)&buf[26] = 1024;
                *(_DWORD *)&buf[28] = 0;
                LOWORD(v74) = 1024;
                *(_DWORD *)((char *)&v74 + 2) = SBYTE4(v61);
                WORD3(v74) = 1024;
                DWORD2(v74) = v62[1];
                _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "handleHIDEvent (rssiDetectReport) onSendRSSI: notifying listeners. Connection Handle 0x%04X RSSI avg:%d max:%d median:%d var:%d orig:%d state:%d", buf, 0x2Cu);
              }
              v63[0] = _NSConcreteStackBlock;
              v63[1] = 3221225472;
              v63[2] = sub_10039CB98;
              v63[3] = &unk_10092B2F0;
              v63[4] = 0;
              v64 = 31;
              v65 = HIDWORD(v61);
              v66 = v62[0];
              v67 = 0;
              v68 = 0;
              v69 = 0;
              v70 = v62[1];
              v71 = *(_QWORD *)((char *)&v61 + 4);
              v72 = 0;
              sub_10039CAAC((os_unfair_lock_s *)a1, v63);
            }
            else if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
            {
              sub_1006E47CC();
            }
          }
          else if (v59 == 226)
          {
            v25 = *(_OWORD *)(DataValue + 9);
            v62[0] = *(_BYTE *)(DataValue + 25);
            v61 = v25;
            v26 = qword_100999978;
            if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
            {
              v27 = CUPrintAddress((char *)&v61 + 4, 6, 1);
              v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
              v29 = CUPrintHex((char *)&v61 + 13, 3, 3, 1);
              v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
              *(_DWORD *)buf = 138412802;
              *(_QWORD *)&buf[4] = v28;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v30;
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = SBYTE10(v61);
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "handleHIDEvent:forService Nearby Action Wake Event : Address [%@] AuthTag [%@] RSSI %d", buf, 0x1Cu);

            }
            v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData data](NSMutableData, "data"));
            objc_msgSend(v31, "appendBytes:length:", (char *)&v61 + 11, 1);
            objc_msgSend(v31, "appendBytes:length:", (char *)&v61 + 12, 1);
            objc_msgSend(v31, "appendBytes:length:", (char *)&v61 + 13, 3);
            objc_msgSend(v31, "appendBytes:length:", v62, 1);
            if (qword_100977C30 != -1)
              dispatch_once(&qword_100977C30, &stru_10092B4B0);
            v32 = sub_100600598((uint64_t)off_100977C28, 0, 26, v31);
            v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
            buf[31] = objc_msgSend(v33, "length");
            BYTE6(v74) = BYTE10(v61);
            BYTE7(v74) = 40;
            *((_QWORD *)&v74 + 1) = 0;
            memset(buf, 0, 31);
            LODWORD(v74) = DWORD1(v61);
            WORD2(v74) = WORD4(v61);
            v34 = objc_retainAutorelease(v33);
            memcpy(buf, objc_msgSend(v34, "bytes"), (size_t)objc_msgSend(v34, "length"));
            v99[1] = 3221225472;
            v100 = *(_OWORD *)buf;
            v99[0] = _NSConcreteStackBlock;
            v99[2] = sub_10039CB68;
            v99[3] = &unk_10092B2B0;
            v99[4] = 0;
            v101 = *(_OWORD *)&buf[16];
            v102 = v74;
            sub_10039CAAC((os_unfair_lock_s *)a1, v99);

          }
          goto LABEL_65;
        }
        v36 = *(_OWORD *)(DataValue + 9);
        v37 = *(_OWORD *)(DataValue + 25);
        v38 = *(_OWORD *)(DataValue + 41);
        *(_OWORD *)&v62[28] = *(_OWORD *)(DataValue + 53);
        *(_OWORD *)&v62[16] = v38;
        *(_OWORD *)v62 = v37;
        v61 = v36;
        v39 = qword_100999978;
        if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134222592;
          *(double *)&buf[4] = (double)v24 / 1000000.0;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v61;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = DWORD1(v61);
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = BYTE8(v61);
          *(_WORD *)&buf[30] = 1024;
          LODWORD(v74) = BYTE9(v61);
          WORD2(v74) = 1024;
          *(_DWORD *)((char *)&v74 + 6) = BYTE10(v61);
          WORD5(v74) = 1024;
          HIDWORD(v74) = BYTE11(v61);
          v75 = 1024;
          v76 = BYTE12(v61);
          v77 = 1024;
          v78 = BYTE13(v61);
          v79 = 1024;
          v80 = BYTE14(v61);
          v81 = 1024;
          v82 = HIBYTE(v61);
          v83 = 1024;
          v84 = v62[0];
          v85 = 1024;
          v86 = v62[1];
          v87 = 1024;
          v88 = v62[2];
          v89 = 1024;
          v90 = v62[3];
          v91 = 1024;
          v92 = v62[4];
          v93 = 1024;
          v94 = v62[5];
          v95 = 1024;
          v96 = v62[6];
          v97 = 1024;
          v98 = v62[7];
          _os_log_debug_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "handleHIDEvent (Telemetry) time %.3f intervalSeconds %u spmiXactions %u hist %u:%u %u:%u %u:%u %u:%u %u:%u %u:%u %u:%u %u:%u", buf, 0x78u);
        }
        v40 = v61;
        if ((_DWORD)v61)
        {
          for (i = *(float **)(a1 + 144); i; i = *(float **)i)
          {
            if (!*((_BYTE *)i + 28))
            {
              v42 = i[5];
              if (v42 > i[8])
                i[5] = v42 + -1.0;
            }
          }
          v43 = 0;
          v44 = (float)v40;
          while (1)
          {
            v58 = v62[v43 - 8];
            if (!v58)
              goto LABEL_65;
            if (sub_100262E78((_QWORD *)(a1 + 128), &v58))
            {
              *(_QWORD *)buf = &v58;
              if (*((_BYTE *)sub_1003A1B38(a1 + 128, &v58, (uint64_t)&unk_100740F58, (_BYTE **)buf) + 28))
              {
                v45 = qword_100999978;
                if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&buf[4] = v58;
                  v46 = v45;
                  v47 = "handleHIDEvent (Telemetry) type %d previous RSSI threshold not yet committed, continue";
                  v48 = 8;
LABEL_54:
                  _os_log_debug_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, v47, buf, v48);
                }
              }
              else
              {
                *(_QWORD *)buf = &v58;
                v49 = *((float *)sub_1003A1B38(a1 + 128, &v58, (uint64_t)&unk_100740F58, (_BYTE **)buf) + 5);
                LOBYTE(v3) = v62[v43 - 7];
                *(_QWORD *)buf = &v58;
                v50 = (float *)sub_1003A1B38(a1 + 128, &v58, (uint64_t)&unk_100740F58, (_BYTE **)buf);
                v3 = (float)LODWORD(v3) / v44;
                if ((float)(v3 + -10.0) <= 0.0)
                  v51 = v49 + (float)((float)(v3 + -10.0) * 0.25);
                else
                  v51 = v49 + (float)(v3 + -10.0);
                if (v51 < v50[8])
                {
                  *(_QWORD *)buf = &v58;
                  v51 = *((float *)sub_1003A1B38(a1 + 128, &v58, (uint64_t)&unk_100740F58, (_BYTE **)buf) + 8);
                }
                *(_QWORD *)buf = &v58;
                if (v51 > *((float *)sub_1003A1B38(a1 + 128, &v58, (uint64_t)&unk_100740F58, (_BYTE **)buf) + 9))
                {
                  *(_QWORD *)buf = &v58;
                  v51 = *((float *)sub_1003A1B38(a1 + 128, &v58, (uint64_t)&unk_100740F58, (_BYTE **)buf) + 9);
                }
                v52 = qword_100999978;
                if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 134218496;
                  *(double *)&buf[4] = v3;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v58;
                  *(_WORD *)&buf[18] = 2048;
                  *(double *)&buf[20] = v51;
                  _os_log_debug_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "handleHIDEvent (Telemetry) msgPerSecond %.3f, type %d change RSSI threshold %.1f", buf, 0x1Cu);
                }
                *(_QWORD *)buf = &v58;
                *((float *)sub_1003A1B38(a1 + 128, &v58, (uint64_t)&unk_100740F58, (_BYTE **)buf) + 5) = v51;
                *(_QWORD *)buf = &v58;
                *((float *)sub_1003A1B38(a1 + 128, &v58, (uint64_t)&unk_100740F58, (_BYTE **)buf) + 6) = v3;
                *(_QWORD *)buf = &v58;
                *((_BYTE *)sub_1003A1B38(a1 + 128, &v58, (uint64_t)&unk_100740F58, (_BYTE **)buf) + 28) = 1;
                v53 = qword_100999978;
                if (v3 > 20.0)
                {
                  if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 134218240;
                    *(double *)&buf[4] = v3;
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v58;
                    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "handleHIDEvent (Telemetry) msgPerSecond %.3f, type %d, notify immediately!", buf, 0x12u);
                  }
                  v56[0] = _NSConcreteStackBlock;
                  v56[1] = 3221225472;
                  v56[2] = sub_10039CB80;
                  v56[3] = &unk_10092B2D0;
                  v57 = v58;
                  sub_10039CAAC((os_unfair_lock_s *)a1, v56);
                  goto LABEL_55;
                }
                if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 134218240;
                  *(double *)&buf[4] = v3;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v58;
                  v46 = v53;
                  v47 = "handleHIDEvent (Telemetry) msgPerSecond %.3f, type %d, not urgent";
                  v48 = 18;
                  goto LABEL_54;
                }
              }
            }
LABEL_55:
            v43 += 2;
            if (v43 == 32)
              goto LABEL_65;
          }
        }
        if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
          sub_1006E47A0();
      }
      else
      {
        v35 = qword_100999978;
        if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "handleHIDEvent:forService: Empty Packet Received", buf, 2u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
    {
      sub_1006E4774();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
  {
    sub_1006E4748();
  }
LABEL_65:

}

void sub_10039CA44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10039CAAC(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_10039CB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_10039CB68(uint64_t a1, uint64_t (***a2)(_QWORD, uint64_t))
{
  return (**a2)(a2, a1 + 32);
}

uint64_t sub_10039CB80(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_10039CB98(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1 + 32);
}

void sub_10039CBB4(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_1003A1D68(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

uint64_t sub_10039CC3C(uint64_t a1, uint64_t a2, CFAbsoluteTime *a3)
{
  unsigned __int8 v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  uint64_t v12;
  id v14;
  uint64_t v15;
  _BYTE v16[33];
  __int128 v17;
  __int128 v18;
  int v19;
  uint8_t buf[4];
  id v21;

  if (*(_QWORD *)(a1 + 64))
  {
    v19 = 0;
    v18 = 0u;
    v17 = 0u;
    memset(&v16[1], 0, 32);
    v16[0] = 1;
    v14 = 0;
    v15 = 69;
    v5 = objc_msgSend(*(id *)(a1 + 112), "getReport:reportLength:withIdentifier:forType:error:", v16, &v15, 1, 1, &v14);
    v6 = v14;
    if ((v5 & 1) != 0)
    {
      *(_QWORD *)(a2 + 7) = *(_QWORD *)&v16[16];
      *(_QWORD *)a2 = *(_QWORD *)&v16[9];
      if (*(_BYTE *)(a2 + 12))
      {
        v7 = 0;
        *a3 = CFAbsoluteTimeGetCurrent() + (double)*(unint64_t *)&v16[1] / -1000000.0;
LABEL_14:

        return v7;
      }
      v12 = qword_100999978;
      if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v9 = "readAopCaches: bt-services not running";
        v10 = v12;
        v11 = 2;
        goto LABEL_12;
      }
    }
    else
    {
      v8 = qword_100999978;
      if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v21 = v6;
        v9 = "readAopCaches: getReport::ServiceState failed %@";
        v10 = v8;
        v11 = 12;
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
      }
    }
    v7 = 1;
    goto LABEL_14;
  }
  if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
    sub_1006E4868();
  return 1;
}

void sub_10039CE08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10039CE20(uint64_t a1, unsigned int a2, int **a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  id v8;
  int v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  int *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  int *v22;
  char *v23;
  int *v24;
  int v25;
  uint64_t v26;
  const char *v27;
  NSObject *v28;
  uint32_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  uint8_t buf[4];
  int v41;
  __int16 v42;
  _QWORD v43[2];

  a3[1] = *a3;
  if (!a2)
    return;
  v5 = 0;
  v31 = (uint64_t)(a3 + 2);
  v6 = a2;
  while (1)
  {
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = v5 + 5;
    v32 = 0;
    v33 = 69;
    v7 = objc_msgSend(*(id *)(a1 + 112), "getReport:reportLength:withIdentifier:forType:error:", &v34, &v33, (v5 + 5), 1, &v32);
    v8 = v32;
    if ((v7 & 1) == 0)
    {
      v26 = qword_100999978;
      if (!os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
        goto LABEL_33;
      *(_DWORD *)buf = 67109378;
      v41 = v5;
      v42 = 2112;
      v43[0] = v8;
      v27 = "readAopCaches: getReport::MatchTableConf%u failed %@";
      v28 = v26;
      v29 = 18;
LABEL_30:
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v27, buf, v29);
      goto LABEL_33;
    }
    if (!BYTE9(v35))
    {
      v30 = qword_100999978;
      if (!os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
        goto LABEL_33;
      *(_DWORD *)buf = 67109120;
      v41 = BYTE8(v35);
      v27 = "readAopCaches: handleIndex %d empty";
      v28 = v30;
      v29 = 8;
      goto LABEL_30;
    }
    v9 = BYTE8(v35);
    v10 = qword_100999978;
    if (v5 != BYTE8(v35))
      break;
    v11 = (unsigned __int16)v36;
    v12 = (unsigned __int16)(HIWORD(v35) + 14);
    if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109632;
      v41 = v9;
      v42 = 1024;
      LODWORD(v43[0]) = v11;
      WORD2(v43[0]) = 1024;
      *(_DWORD *)((char *)v43 + 6) = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "readAopCaches: handleIndex %d num %d size %d", buf, 0x14u);
    }
    v13 = v11 | (v12 << 16);
    v15 = a3[1];
    v14 = (unint64_t)a3[2];
    if ((unint64_t)v15 >= v14)
    {
      v17 = v15 - *a3;
      if ((unint64_t)(v17 + 1) >> 62)
        abort();
      v18 = v14 - (_QWORD)*a3;
      v19 = v18 >> 1;
      if (v18 >> 1 <= (unint64_t)(v17 + 1))
        v19 = v17 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v20 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v21 = (char *)sub_1002B46E0(v31, v20);
      else
        v21 = 0;
      v22 = (int *)&v21[4 * v17];
      *v22 = v13;
      v16 = v22 + 1;
      v24 = *a3;
      v23 = (char *)a3[1];
      if (v23 != (char *)*a3)
      {
        do
        {
          v25 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *--v22 = v25;
        }
        while (v23 != (char *)v24);
        v23 = (char *)*a3;
      }
      *a3 = v22;
      a3[1] = v16;
      a3[2] = (int *)&v21[4 * v20];
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v15 = v13;
      v16 = v15 + 1;
    }
    a3[1] = v16;

    if (++v5 == v6)
      return;
  }
  if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
    sub_1006E4894(v5, v9, v10);
LABEL_33:

}

void sub_10039D13C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10039D158(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  void *v5;
  unsigned __int8 v6;
  double Current;
  unsigned __int16 v8;
  double v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  id v24;
  int v25;
  id v26;
  unint64_t v27;
  uint8_t buf[8];
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  id v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;

  v27 = 1041;
  v4 = operator new(0x411uLL);
  bzero(v4 + 1, 0x410uLL);
  *v4 = 9;
  v5 = *(void **)(a1 + 112);
  v26 = 0;
  v6 = objc_msgSend(v5, "getReport:reportLength:withIdentifier:forType:error:", v4, &v27, 9, 1, &v26);
  v24 = v26;
  if ((v6 & 1) != 0)
  {
    if (v27 >= 0x45)
    {
      Current = CFAbsoluteTimeGetCurrent();
      if (v27 - 69 >= 0x30)
      {
        v8 = 0;
        v9 = Current + (double)*(unint64_t *)(v4 + 1) / -1000000.0;
        v10 = (v27 - 69) / 0x30;
        v11 = v4 + 31;
        do
        {
          v12 = *(_QWORD *)(v11 - 14);
          if (v12)
          {
            v13 = qword_100999978;
            if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
            {
              v14 = CUPrintAddress(v11 - 6, 6, 1);
              v15 = (id)objc_claimAutoreleasedReturnValue(v14);
              v16 = CUPrintHex(v11, 31, 31, 0);
              v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
              v18 = (char)v11[31];
              v19 = v11[32];
              *(_DWORD *)buf = 67110402;
              *(_DWORD *)&buf[4] = v8;
              v29 = 2048;
              v30 = v12;
              v31 = 2112;
              v32 = v15;
              v33 = 2112;
              v34 = v17;
              v35 = 1024;
              v36 = v18;
              v37 = 1024;
              v38 = v19;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "_fetchBtProxCtxCache %2d, TS %llu, ADDR %@, PAYLOAD %@, RSSI %3d, CH %2d", buf, 0x32u);

              v12 = *(_QWORD *)(v11 - 14);
            }
            *(double *)buf = v9 + (double)v12 / 1000000.0;
            v25 = 31;
            sub_10039D478((void **)a2, buf, &v25, v11 + 31, v11 + 32, (uint64_t *)(v11 - 14));
            v20 = *(_QWORD *)(a2 + 8);
            v21 = *(_DWORD *)(v11 - 6);
            *(_WORD *)(v20 - 12) = *((_WORD *)v11 - 1);
            *(_DWORD *)(v20 - 16) = v21;
            v22 = *(_QWORD *)(a2 + 8);
            v23 = *(_OWORD *)v11;
            *(_OWORD *)(v22 - 33) = *(_OWORD *)(v11 + 15);
            *(_OWORD *)(v22 - 48) = v23;
          }
          ++v8;
          v11 += 48;
        }
        while (v10 > v8);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
  {
    sub_1006E491C();
  }

  operator delete(v4);
}

void sub_10039D41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  operator delete(v11);
  _Unwind_Resume(a1);
}

char *sub_10039D478(void **a1, _QWORD *a2, int *a3, char *a4, char *a5, uint64_t *a6)
{
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  int v16;
  char v17;
  char v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char v26;
  char *v27;
  char v28;
  char v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v14 = a1[2];
  v12 = (uint64_t)(a1 + 2);
  v13 = v14;
  v15 = *(_QWORD *)(v12 - 8);
  if (v15 >= (unint64_t)v14)
  {
    v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - (_QWORD)*a1) >> 3);
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) > 0x492492492492492)
      abort();
    v23 = 0x6DB6DB6DB6DB6DB7 * ((v13 - (_BYTE *)*a1) >> 3);
    if (2 * v23 > v22)
      v22 = 2 * v23;
    if (v23 >= 0x249249249249249)
      v24 = 0x492492492492492;
    else
      v24 = v22;
    if (v24)
      v25 = (char *)sub_100355428(v12, v24);
    else
      v25 = 0;
    v26 = *a3;
    v27 = &v25[56 * v21];
    v28 = *a4;
    v29 = *a5;
    v30 = &v25[56 * v24];
    v31 = *a6;
    *(_QWORD *)v27 = *a2;
    v27[39] = v26;
    v27[46] = v28;
    v27[47] = v29;
    *((_QWORD *)v27 + 6) = v31;
    *((_QWORD *)v27 + 2) = 0;
    *((_QWORD *)v27 + 3) = 0;
    *((_QWORD *)v27 + 1) = 0;
    *(_QWORD *)(v27 + 31) = 0;
    *((_DWORD *)v27 + 10) = 0;
    *((_WORD *)v27 + 22) = 0;
    v20 = v27 + 56;
    v33 = (char *)*a1;
    v32 = (char *)a1[1];
    if (v32 != *a1)
    {
      do
      {
        v34 = *(_OWORD *)(v32 - 56);
        v35 = *(_OWORD *)(v32 - 40);
        v36 = *(_OWORD *)(v32 - 24);
        *((_QWORD *)v27 - 1) = *((_QWORD *)v32 - 1);
        *(_OWORD *)(v27 - 24) = v36;
        *(_OWORD *)(v27 - 40) = v35;
        *(_OWORD *)(v27 - 56) = v34;
        v27 -= 56;
        v32 -= 56;
      }
      while (v32 != v33);
      v32 = (char *)*a1;
    }
    *a1 = v27;
    a1[1] = v20;
    a1[2] = v30;
    if (v32)
      operator delete(v32);
  }
  else
  {
    v16 = *a3;
    v17 = *a4;
    v18 = *a5;
    v19 = *a6;
    *(_QWORD *)v15 = *a2;
    *(_BYTE *)(v15 + 39) = v16;
    *(_BYTE *)(v15 + 46) = v17;
    *(_BYTE *)(v15 + 47) = v18;
    *(_QWORD *)(v15 + 48) = v19;
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 24) = 0;
    *(_QWORD *)(v15 + 8) = 0;
    *(_QWORD *)(v15 + 31) = 0;
    *(_DWORD *)(v15 + 40) = 0;
    v20 = (char *)(v15 + 56);
    *(_WORD *)(v15 + 44) = 0;
  }
  a1[1] = v20;
  return v20 - 56;
}

void sub_10039D63C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_100475B20();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10039D69C;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

void sub_10039D69C(uint64_t a1)
{
  os_unfair_lock_s *v1;
  void *v2;
  int64_t v3;
  char *v4;
  _QWORD v5[4];
  void *__p;
  void *__dst;
  uint64_t v8;
  void *v9;
  _BYTE *v10;
  uint64_t v11;

  v1 = *(os_unfair_lock_s **)(a1 + 32);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  sub_10039D158((uint64_t)v1, (uint64_t)&v9);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_10039D7CC;
  v5[3] = &unk_10092B310;
  __dst = 0;
  v8 = 0;
  __p = 0;
  v2 = v9;
  v3 = v10 - (_BYTE *)v9;
  if (v10 != v9)
  {
    sub_1003A201C(&__p, 0x6DB6DB6DB6DB6DB7 * (v3 >> 3));
    v4 = (char *)__dst;
    memmove(__dst, v2, v3);
    __dst = &v4[8 * (v3 >> 3)];
  }
  sub_10039CAAC(v1, v5);
  if (__p)
  {
    __dst = __p;
    operator delete(__p);
  }
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
}

void sub_10039D798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10039D7CC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, a1 + 32);
}

_QWORD *sub_10039D7E4(uint64_t a1, uint64_t a2)
{
  return sub_1003A1FA4((_QWORD *)(a1 + 32), a2 + 32);
}

void sub_10039D7F0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void sub_10039D808(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_100475B20();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10039D868;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

void sub_10039D868(uint64_t a1)
{
  os_unfair_lock_s *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  _BOOL4 v14;
  uint64_t v15;
  size_t v16;
  void *v17;
  NSObject *v18;
  uint64_t v19;
  unsigned __int16 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unsigned int v26;
  size_t v27;
  char v28;
  _WORD *v29;
  int v30;
  _WORD *v31;
  NSObject *v32;
  const void *v33;
  int64_t v34;
  char *v35;
  _BYTE *v36;
  _BYTE *v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD v42[4];
  void *v43;
  void *__dst;
  uint64_t v45;
  int v46;
  char v47;
  void *__p[2];
  char v49;
  uint64_t v50;
  void *v51;
  _BYTE *v52;
  uint64_t v53;
  double v54;
  _QWORD v55[2];
  uint8_t buf[8];
  _WORD *v57;
  uint64_t v58;

  v1 = *(os_unfair_lock_s **)(a1 + 32);
  v54 = 0.0;
  memset(v55, 0, 15);
  v2 = sub_10039CC3C((uint64_t)v1, (uint64_t)v55, &v54);
  v3 = LOBYTE(v55[1]);
  v4 = BYTE1(v55[1]);
  if (v2)
    v5 = 1;
  else
    v5 = LOBYTE(v55[1]) == 0;
  if (v5 || BYTE1(v55[1]) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
      sub_1006E497C();
    sub_10039CAAC(v1, &stru_10092B360);
  }
  else
  {
    v51 = 0;
    v52 = 0;
    v53 = 0;
    sub_10039CE20((uint64_t)v1, BYTE3(v55[1]), (int **)&v51);
    if (v51 == v52)
    {
      if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
        sub_1006E49A8();
      sub_10039CAAC(v1, &stru_10092B380);
    }
    else
    {
      v50 = 0;
      v7 = mach_continuous_time();
      v8 = sub_100027F68();
      sub_100091AE8(buf, "AOPInterfaceManager");
      sub_100091AE8(__p, "LastDramFetchInterval");
      v9 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, uint64_t *))(*(_QWORD *)v8 + 144))(v8, buf, __p, &v50);
      if (v49 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)buf);
      if (v50)
        v10 = v9;
      else
        v10 = 0;
      v11 = v3;
      if (v10 == 1)
      {
        v12 = UpTicksToSeconds(v7 - v50) / v4;
        if (v12 + 1 < v3)
          v11 = v12 + 1;
        else
          v11 = v3;
      }
      v14 = v3 > 1 && v11 == v3;
      v15 = v11 - v14;
      v16 = v15 * WORD2(v55[0]);
      if ((_DWORD)v16)
      {
        v17 = operator new(v15 * WORD2(v55[0]));
        bzero(v17, v16);
      }
      else
      {
        v17 = 0;
      }
      v38 = sub_10058F698((uint64_t)&v1[12], (char *)v17, v15);
      v18 = qword_100999978;
      if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v15;
        LOWORD(v57) = 1024;
        *(_DWORD *)((char *)&v57 + 2) = v38;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "readAopCaches: asked %u, read %u caches", buf, 0xEu);
      }
      v19 = sub_100027F68();
      sub_100091AE8(buf, "AOPInterfaceManager");
      sub_100091AE8(__p, "LastDramFetchInterval");
      (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(_QWORD *)v19 + 152))(v19, buf, __p, v7);
      if (v49 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)buf);
      v36 = v51;
      v37 = v52;
      *(_QWORD *)buf = 0;
      v57 = 0;
      v58 = 0;
      if (v38)
      {
        v20 = 0;
        v41 = (v52 - (_BYTE *)v51) >> 2;
        do
        {
          v39 = v20;
          if (v37 != v36)
          {
            v21 = 0;
            v22 = 0;
            v40 = (uint64_t)v17 + WORD2(v55[0]) * v39 + 11;
            do
            {
              v23 = *((unsigned __int16 *)v51 + 2 * v21);
              if (*((_WORD *)v51 + 2 * v21))
              {
                v24 = *((unsigned __int16 *)v51 + 2 * v21 + 1);
                v25 = (char *)v40;
                do
                {
                  v26 = *(_DWORD *)(v25 - 11);
                  if (!v26)
                    break;
                  v27 = v25[2] >= 0x16u ? 22 : v25[2];
                  v28 = v25[1];
                  *(double *)__p = v54 + (double)v26;
                  v47 = 40;
                  v46 = v27 + 9;
                  sub_10039DF8C((void **)buf, __p, &v46, v25, &v47);
                  v29 = v57;
                  v30 = *(_DWORD *)(v25 - 7);
                  *(v57 - 6) = *(_WORD *)(v25 - 3);
                  *((_DWORD *)v29 - 4) = v30;
                  v31 = v57;
                  *((_BYTE *)v57 - 46) = 26;
                  *(v31 - 24) = 258;
                  *((_BYTE *)v31 - 45) = v27 + 5;
                  *((_BYTE *)v31 - 42) = 0;
                  *(v31 - 22) = 19711;
                  *((_BYTE *)v31 - 41) = v28;
                  *((_BYTE *)v31 - 40) = v27;
                  memcpy((char *)v31 - 39, v25 + 3, v27);
                  v25 += v24;
                  --v23;
                }
                while (v23);
              }
              v21 = (unsigned __int16)++v22;
            }
            while (v41 > (unsigned __int16)v22);
          }
          v20 = v39 + 1;
        }
        while (v38 > (unsigned __int16)(v39 + 1));
      }
      v32 = qword_100999978;
      if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "readAopCaches: calling _listeners.notify(^(AOPEventListener* listener)...", (uint8_t *)__p, 2u);
      }
      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3321888768;
      v42[2] = sub_10039E13C;
      v42[3] = &unk_10092B310;
      __dst = 0;
      v45 = 0;
      v43 = 0;
      v33 = *(const void **)buf;
      v34 = (int64_t)v57 - *(_QWORD *)buf;
      if (v57 != *(_WORD **)buf)
      {
        sub_1003A201C(&v43, 0x6DB6DB6DB6DB6DB7 * (v34 >> 3));
        v35 = (char *)__dst;
        memmove(__dst, v33, v34);
        __dst = &v35[8 * (v34 >> 3)];
      }
      sub_10039CAAC(v1, v42);
      if (v43)
      {
        __dst = v43;
        operator delete(v43);
      }
      if (*(_QWORD *)buf)
      {
        v57 = *(_WORD **)buf;
        operator delete(*(void **)buf);
      }
      if (v17)
        operator delete(v17);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_10039DDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10039DEBC(id a1, AOPEventListener *a2)
{
  void *__p;
  void *v3;
  uint64_t v4;

  v3 = 0;
  v4 = 0;
  __p = 0;
  (*((void (**)(AOPEventListener *, void **))a2->var0 + 1))(a2, &__p);
  if (__p)
  {
    v3 = __p;
    operator delete(__p);
  }
}

void sub_10039DF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10039DF24(id a1, AOPEventListener *a2)
{
  void *__p;
  void *v3;
  uint64_t v4;

  v3 = 0;
  v4 = 0;
  __p = 0;
  (*((void (**)(AOPEventListener *, void **))a2->var0 + 1))(a2, &__p);
  if (__p)
  {
    v3 = __p;
    operator delete(__p);
  }
}

void sub_10039DF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_10039DF8C(void **a1, _QWORD *a2, int *a3, char *a4, char *a5)
{
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  int v14;
  char v15;
  char v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char v23;
  char *v24;
  char v25;
  char v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v12 = a1[2];
  v10 = (uint64_t)(a1 + 2);
  v11 = v12;
  v13 = *(_QWORD *)(v10 - 8);
  if (v13 >= (unint64_t)v12)
  {
    v18 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - (_QWORD)*a1) >> 3);
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) > 0x492492492492492)
      abort();
    v20 = 0x6DB6DB6DB6DB6DB7 * ((v11 - (_BYTE *)*a1) >> 3);
    if (2 * v20 > v19)
      v19 = 2 * v20;
    if (v20 >= 0x249249249249249)
      v21 = 0x492492492492492;
    else
      v21 = v19;
    if (v21)
      v22 = (char *)sub_100355428(v10, v21);
    else
      v22 = 0;
    v23 = *a3;
    v24 = &v22[56 * v18];
    v25 = *a4;
    v26 = *a5;
    v27 = &v22[56 * v21];
    *(_QWORD *)v24 = *a2;
    v24[39] = v23;
    v24[46] = v25;
    v24[47] = v26;
    *((_QWORD *)v24 + 6) = 0;
    *((_QWORD *)v24 + 2) = 0;
    *((_QWORD *)v24 + 3) = 0;
    *((_QWORD *)v24 + 1) = 0;
    *(_QWORD *)(v24 + 31) = 0;
    *((_DWORD *)v24 + 10) = 0;
    *((_WORD *)v24 + 22) = 0;
    v17 = v24 + 56;
    v29 = (char *)*a1;
    v28 = (char *)a1[1];
    if (v28 != *a1)
    {
      do
      {
        v30 = *(_OWORD *)(v28 - 56);
        v31 = *(_OWORD *)(v28 - 40);
        v32 = *(_OWORD *)(v28 - 24);
        *((_QWORD *)v24 - 1) = *((_QWORD *)v28 - 1);
        *(_OWORD *)(v24 - 24) = v32;
        *(_OWORD *)(v24 - 40) = v31;
        *(_OWORD *)(v24 - 56) = v30;
        v24 -= 56;
        v28 -= 56;
      }
      while (v28 != v29);
      v28 = (char *)*a1;
    }
    *a1 = v24;
    a1[1] = v17;
    a1[2] = v27;
    if (v28)
      operator delete(v28);
  }
  else
  {
    v14 = *a3;
    v15 = *a4;
    v16 = *a5;
    *(_QWORD *)v13 = *a2;
    *(_BYTE *)(v13 + 39) = v14;
    *(_BYTE *)(v13 + 46) = v15;
    *(_BYTE *)(v13 + 47) = v16;
    *(_QWORD *)(v13 + 48) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 31) = 0;
    *(_DWORD *)(v13 + 40) = 0;
    v17 = (char *)(v13 + 56);
    *(_WORD *)(v13 + 44) = 0;
  }
  a1[1] = v17;
  return v17 - 56;
}

uint64_t sub_10039E13C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, a1 + 32);
}

uint64_t sub_10039E154(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  unsigned int v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  uint8_t v11[16];
  id v12;
  char v13;
  size_t v14;
  _BYTE v15[4087];

  bzero(v15, 0xFF7uLL);
  v13 = 4;
  v4 = *(const void **)a2;
  v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  memcpy(v15, v4, v14);
  v5 = *(void **)(a1 + 112);
  v12 = 0;
  v6 = objc_msgSend(v5, "setReport:reportLength:withIdentifier:forType:error:", &v13, v14 + 9, 0, 1, &v12);
  v7 = v12;
  v8 = qword_100999978;
  if (v6)
  {
    v9 = 0;
    if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Successfully sent report to AOP", v11, 2u);
      v9 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
      sub_1006E49D4();
    v9 = 1;
  }

  return v9;
}

void sub_10039E2A8(void *a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  NSObject *v9;
  uint64_t v10;
  id v11;
  id v12;
  void *j;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *k;
  id v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  uint8_t v37[128];
  uint8_t buf[4];
  uint64_t v39;
  _BYTE v40[128];

  v3 = a1;
  v4 = qword_100999978;
  if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v39) = objc_msgSend(v3, "count");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "sendProxyOOBKeys: %d keys", buf, 8u);
  }
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v33;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v33 != v7)
          objc_enumerationMutation(v5);
        v9 = qword_100999978;
        if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
        {
          v10 = *(_QWORD *)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i);
          *(_DWORD *)buf = 138412290;
          v39 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "keyType: %@", buf, 0xCu);
        }
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
    }
    while (v6);
  }

  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v11 = v5;
  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v28, v37, 16);
  if (v12)
  {
    v23 = *(_QWORD *)v29;
    do
    {
      for (j = 0; j != v12; j = (char *)j + 1)
      {
        if (*(_QWORD *)v29 != v23)
          objc_enumerationMutation(v11);
        v14 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)j);
        sub_10039BA38((unint64_t *)a2, 2);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v14));
        sub_10039BA38((unint64_t *)a2, 16 * ((unsigned __int16)objc_msgSend(v15, "count") & 0xFFF));

        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v14));
        v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v24, v36, 16);
        if (v17)
        {
          v18 = *(_QWORD *)v25;
          do
          {
            for (k = 0; k != v17; k = (char *)k + 1)
            {
              if (*(_QWORD *)v25 != v18)
                objc_enumerationMutation(v16);
              v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)k), "irkData")));
              v21 = objc_msgSend(v20, "bytes");

              v22 = (char *)operator new(0x10uLL);
              *(_OWORD *)v22 = *v21;
              sub_1003A206C(a2, *(char **)(a2 + 8), v22, v22 + 16, 16);
              operator delete(v22);
            }
            v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v24, v36, 16);
          }
          while (v17);
        }

      }
      v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v28, v37, 16);
    }
    while (v12);
  }

}

void sub_10039E600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_10039E68C(uint64_t a1, void *a2)
{
  id v3;
  unsigned __int8 v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19[3];
  void *__p;
  void *v21;
  uint64_t v22;

  v3 = a2;
  v4 = atomic_load((unsigned __int8 *)(a1 + 96));
  if ((v4 & 1) == 0)
  {
    v5 = qword_100999978;
    if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
      sub_1006E4A34(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  __p = 0;
  v21 = 0;
  v22 = 0;
  v13 = operator new(1uLL);
  *v13 = 0;
  v19[1] = (uint64_t)(v13 + 1);
  v19[2] = (uint64_t)(v13 + 1);
  v19[0] = (uint64_t)v13;
  sub_10039BBE0((unint64_t *)&__p, 3, 1u, v19);
  operator delete(v13);
  sub_10039E2A8(v3, (uint64_t)&__p);
  sub_10039BA38((unint64_t *)&__p, 4);
  sub_10039BA38((unint64_t *)&__p, 0);
  sub_10039E154(a1, (uint64_t)&__p);
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 1));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", v14));

  if (v15)
  {
    v16 = sub_100065478();
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 1));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", v17));
    (*(void (**)(uint64_t, id))(*(_QWORD *)v16 + 416))(v16, objc_msgSend(v18, "count"));

  }
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }

}

void sub_10039E800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_10039E854(uint64_t a1, uint64_t a2, __int16 a3, char a4, char a5, char a6, char a7, char a8)
{
  void *v15;
  unsigned int v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  uint8_t v21[16];
  id v22;
  char v23;
  __int16 v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;

  bzero(&v30, 0xFF8uLL);
  v23 = 6;
  v24 = a3;
  v25 = a4;
  v26 = a5;
  v27 = a6;
  v28 = a8;
  v29 = a7;
  v15 = *(void **)(a1 + 112);
  v22 = 0;
  v16 = objc_msgSend(v15, "setReport:reportLength:withIdentifier:forType:error:", &v23, 8, 0, 1, &v22);
  v17 = v22;
  v18 = qword_100999978;
  if (v16)
  {
    v19 = 0;
    if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Successfully sent report to AOP", v21, 2u);
      v19 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
      sub_1006E49D4();
    v19 = 1;
  }

  return v19;
}

uint64_t sub_10039E9C8(uint64_t a1, __int16 a2)
{
  void *v4;
  unsigned int v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint8_t v10[16];
  id v11;
  char v12;
  __int16 v13;
  _BYTE v14[5];

  bzero(v14, 0xFFDuLL);
  v12 = 9;
  v13 = a2;
  v4 = *(void **)(a1 + 112);
  v11 = 0;
  v5 = objc_msgSend(v4, "setReport:reportLength:withIdentifier:forType:error:", &v12, 3, 0, 1, &v11);
  v6 = v11;
  v7 = qword_100999978;
  if (v5)
  {
    v8 = 0;
    if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Successfully sent report to AOP", v10, 2u);
      v8 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
      sub_1006E49D4();
    v8 = 1;
  }

  return v8;
}

void sub_10039EB04(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;

  v2 = qword_100999978;
  if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
  {
    v3 = sub_1000438A4();
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 2360))(v3);
    v5 = sub_1000438A4();
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 2368))(v5);
    *(_DWORD *)buf = 67109376;
    v17 = v4;
    v18 = 1024;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting AOPInterfaceManager, AOPInterface: %d, AOPBuffering: %d\n", buf, 0xEu);
  }
  v7 = sub_1000438A4();
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 2376))(v7);
  v9 = _os_feature_enabled_impl("BluetoothFeatures", "ADPD");
  v10 = (v9 & 1) != 0 || IsAppleInternalBuild(v9) != 0;
  v11 = sub_1000438A4();
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 2368))(v11);
  v13 = sub_1000438A4();
  if ((((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 2392))(v13) | v8) & 1) != 0
    || (v12 & v10 & 1) != 0)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(sub_100475B20() + 8);
    v14 = sub_100475B20();
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10039ECC0;
    v15[3] = &unk_100917378;
    v15[4] = a1;
    sub_100023D84(v14, v15);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
  {
    sub_1006E4AA4();
  }
}

void sub_10039ECC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  id v7;
  NSObject *v8;
  id v9;
  id v10;
  void *v11;
  id *v12;
  void *v13;
  id v14;
  void *v15;
  unsigned __int8 v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  _QWORD v21[5];
  id v22;
  id v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  _QWORD v31[5];
  uint8_t buf[16];
  char v33;

  v1 = *(_QWORD *)(a1 + 32);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 32));
  v2 = objc_opt_new(HIDManager);
  v3 = *(void **)(v1 + 104);
  *(_QWORD *)(v1 + 104) = v2;

  objc_msgSend(*(id *)(v1 + 104), "open");
  objc_msgSend(*(id *)(v1 + 104), "setDispatchQueue:", *(_QWORD *)(v1 + 32));
  objc_msgSend(*(id *)(v1 + 104), "setDeviceMatching:", &off_100961050);
  v4 = *(void **)(v1 + 104);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_10039F050;
  v31[3] = &unk_10092B3A0;
  v31[4] = v1;
  objc_msgSend(v4, "setDeviceNotificationHandler:", v31);
  objc_msgSend(*(id *)(v1 + 104), "setInputReportHandler:", &stru_10092B3E0);
  objc_msgSend(*(id *)(v1 + 104), "activate");
  v5 = *(void **)(v1 + 112);
  if (v5)
  {
    v30 = 0;
    v29 = 0u;
    v28 = 0u;
    v27 = 0u;
    v26 = 0u;
    v25 = 1;
    v23 = 0;
    v24 = 69;
    v6 = objc_msgSend(v5, "getReport:reportLength:withIdentifier:forType:error:", &v25, &v24, 1, 1, &v23);
    v7 = v23;
    v8 = qword_100999978;
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
      {
        v9 = objc_alloc((Class)NSData);
        v10 = objc_msgSend(v9, "initWithBytes:length:", &v25, v24);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "description"));
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Get service state report: %@", buf, 0xCu);

      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
    {
      sub_1006E4B5C();
    }
    v33 = 0;
    *(_OWORD *)buf = xmmword_10073F57D;
    v15 = *(void **)(v1 + 112);
    v22 = 0;
    v16 = objc_msgSend(v15, "setReport:reportLength:withIdentifier:forType:error:", buf, 17, 0, 1, &v22);
    v17 = v22;

    if ((v16 & 1) == 0 && os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
      sub_1006E4AFC();
    v18 = objc_msgSend(objc_alloc((Class)HIDEventSystemClient), "initWithType:", 1);
    v19 = *(void **)(v1 + 120);
    *(_QWORD *)(v1 + 120) = v18;

    objc_msgSend(*(id *)(v1 + 120), "setDispatchQueue:", *(_QWORD *)(v1 + 32));
    objc_msgSend(*(id *)(v1 + 120), "setMatching:", &off_100961078);
    v20 = *(void **)(v1 + 120);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_10039F618;
    v21[3] = &unk_10092B400;
    v21[4] = v1;
    objc_msgSend(v20, "setEventHandler:", v21);
    objc_msgSend(*(id *)(v1 + 120), "setResetHandler:", &stru_10092B420);
    objc_msgSend(*(id *)(v1 + 120), "setCancelHandler:", &stru_10092B440);
    objc_msgSend(*(id *)(v1 + 120), "activate");
    atomic_store(1u, (unsigned __int8 *)(v1 + 96));

  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
      sub_1006E4AD0();
    v13 = *(void **)(v1 + 104);
    v12 = (id *)(v1 + 104);
    objc_msgSend(v13, "cancel");
    objc_msgSend(*v12, "close");
    v14 = *v12;
    *v12 = 0;

  }
}

void sub_10039F028(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10039F050(uint64_t a1, void *a2, int a3)
{
  id v6;
  uint64_t v7;
  uint64_t RegistryEntryID;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  void **v18;
  void *v19;
  uint64_t entryID;
  uint8_t buf[4];
  uint64_t v22;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 32);
  entryID = 0;
  RegistryEntryID = IORegistryEntryGetRegistryEntryID((io_registry_entry_t)objc_msgSend(v6, "service"), &entryID);
  v9 = RegistryEntryID;
  if ((_DWORD)RegistryEntryID)
  {
    NSLog(CFSTR("IORegistryEntryGetRegistryEntryID failed 0x%x"), RegistryEntryID);
    v10 = qword_100999978;
    if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
      sub_1006E4BBC(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  else if (a3)
  {
    v17 = qword_100999978;
    if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v22 = entryID;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "New client to SPUBluetooth 0x%llx", buf, 0xCu);
    }
    objc_storeStrong((id *)(v7 + 112), a2);
    sub_10039F1C0(v7, *(void **)(v7 + 112));
  }
  else
  {
    v19 = *(void **)(v7 + 112);
    v18 = (void **)(v7 + 112);
    *v18 = 0;

    sub_10039BD9C(*v18);
  }

}

void sub_10039F1A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10039F1C0(uint64_t a1, void *a2)
{
  id v3;
  unsigned __int8 v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  id v14;
  uint64_t ParentEntry;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ChildIterator;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  io_object_t v31;
  CFStringRef v32;
  kern_return_t ChildEntry;
  NSObject *v34;
  CFStringRef v35;
  kern_return_t Name;
  NSObject *v37;
  NSObject *v38;
  const char *v39;
  uint32_t v40;
  NSObject *v41;
  int v42;
  uint64_t v43;
  uint8_t v44;
  _BYTE v45[11];
  io_registry_entry_t child;
  io_registry_entry_t parent[2];
  id v48;
  uint8_t v49[4];
  uint8_t *v50;
  __int16 v51;
  int v52;
  uint8_t buf[16];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;

  v3 = a2;
  v4 = atomic_load((unsigned __int8 *)(a1 + 96));
  if ((v4 & 1) == 0)
  {
    v5 = qword_100999978;
    if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
      sub_1006E4D84(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  v48 = 0;
  v13 = objc_msgSend(v3, "openWithOptions:error:", 0, &v48);
  v14 = v48;
  if ((v13 & 1) == 0 && os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
    sub_1006E4D24();
  *(_QWORD *)parent = 0;
  ParentEntry = IORegistryEntryGetParentEntry((io_registry_entry_t)objc_msgSend(v3, "service"), "IOService", &parent[1]);
  if ((_DWORD)ParentEntry)
  {
    v16 = qword_100999978;
    if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
      sub_1006E4CC0(ParentEntry, v16, v17, v18, v19, v20, v21, v22);
    goto LABEL_38;
  }
  ChildIterator = IORegistryEntryGetChildIterator(parent[1], "IOService", parent);
  if (!(_DWORD)ChildIterator)
  {
    v31 = IOIteratorNext(parent[0]);
    if (!v31)
      goto LABEL_38;
    while (1)
    {
      v32 = IOObjectCopyClass(v31);
      if (!CFEqual(CFSTR("AppleSPUFastpathInterface"), v32))
      {
        CFRelease(v32);
        goto LABEL_32;
      }
      CFRelease(v32);
      child = 0;
      ChildEntry = IORegistryEntryGetChildEntry(v31, "IOService", &child);
      if (ChildEntry)
      {
        v34 = qword_100999978;
        if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = ChildEntry;
          _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "IORegistryEntryGetChildEntry failed for AppleSPUFastpathInterface 0x%0x", buf, 8u);
        }
        goto LABEL_32;
      }
      v35 = IOObjectCopyClass(child);
      if (CFEqual(v35, CFSTR("AppleSPUFastpathDriver")))
      {
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        *(_OWORD *)buf = 0u;
        v54 = 0u;
        Name = IORegistryEntryGetName(child, (char *)buf);
        v37 = qword_100999978;
        if (Name)
        {
          if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v49 = 67109120;
            LODWORD(v50) = Name;
            v38 = v37;
            v39 = "IORegistryEntryGetName failed 0x%0x";
            v40 = 8;
            goto LABEL_36;
          }
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v49 = 136315138;
            v50 = buf;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Found fastpath service with name %s", v49, 0xCu);
          }
          v42 = sub_10058F444(a1 + 48, 0, child);
          if (v42)
          {
            v43 = qword_100999978;
            if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v49 = 136315394;
              v50 = buf;
              v51 = 1024;
              v52 = v42;
              v38 = v43;
              v39 = "Failed to open %s, error 0x%x";
              v40 = 18;
LABEL_36:
              _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, v39, v49, v40);
              if (!v35)
                goto LABEL_31;
LABEL_30:
              CFRelease(v35);
              goto LABEL_31;
            }
          }
        }
      }
      else
      {
        v41 = qword_100999978;
        if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
          sub_1006E4C20(&v44, v45, v41);
      }
      if (v35)
        goto LABEL_30;
LABEL_31:
      IOObjectRelease(child);
LABEL_32:
      if (!IOObjectRelease(v31))
      {
        v31 = IOIteratorNext(parent[0]);
        if (!v31)
          goto LABEL_38;
      }
    }
  }
  v24 = qword_100999978;
  if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
    sub_1006E4C5C(ChildIterator, v24, v25, v26, v27, v28, v29, v30);
LABEL_38:

}

void sub_10039F5CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10039F608(id a1, HIDDevice *a2, unint64_t a3, int64_t a4, int64_t a5, NSData *a6)
{
  sub_10039BE24(a4, a5, (uint64_t)a6);
}

void sub_10039F618(uint64_t a1, void *a2, void *a3)
{
  sub_10039BEEC(*(_QWORD *)(a1 + 32), a3, a2);
}

void sub_10039F62C(id a1)
{
  if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
    sub_1006E4DF4();
}

void sub_10039F66C(id a1)
{
  if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
    sub_1006E4E20();
}

void sub_10039F6AC(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_100475B20();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10039F714;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100023D84(v2, v3);
  atomic_store(0, (unsigned __int8 *)(a1 + 96));
}

id sub_10039F714(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_100999978;
  if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "AOPInterfaceManager terminate", v4, 2u);
  }
  objc_msgSend(*(id *)(v1 + 120), "cancel");
  return objc_msgSend(*(id *)(v1 + 104), "cancel");
}

_DWORD *sub_10039F78C(uint64_t a1, unsigned __int8 a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v6;
  _DWORD *result;
  int v8;
  unsigned __int8 v9;
  unsigned __int8 *v10;

  v9 = a2;
  v6 = a1 + 128;
  result = sub_100262E78((_QWORD *)(a1 + 128), &v9);
  if (result)
  {
    v10 = &v9;
    *a3 = *((_DWORD *)sub_1003A1B38(v6, &v9, (uint64_t)&unk_100740F58, &v10) + 5);
    v10 = &v9;
    result = sub_1003A1B38(v6, &v9, (uint64_t)&unk_100740F58, &v10);
    v8 = result[6];
  }
  else
  {
    *a3 = 0;
    v8 = 0;
  }
  *a4 = v8;
  return result;
}

uint64_t sub_10039F83C(uint64_t a1, unsigned __int8 a2)
{
  _QWORD *v3;
  int v5;
  float v6;
  unsigned __int8 v7;
  unsigned __int8 *v8;

  v7 = a2;
  v6 = 0.0;
  sub_10039F78C(a1, a2, &v6, &v5);
  v3 = (_QWORD *)(a1 + 128);
  if (sub_100262E78(v3, &v7))
  {
    v8 = &v7;
    *((_BYTE *)sub_1003A1B38((uint64_t)v3, &v7, (uint64_t)&unk_100740F58, &v8) + 28) = 0;
  }
  return (char)(uint64_t)rintf(v6);
}

void sub_10039F8C0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  char v15;
  uint8_t buf[4];
  id v17;

  v3 = a2;
  v4 = qword_100999978;
  if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Send report to AOP %@", buf, 0xCu);
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("type")));
  v6 = objc_msgSend(v5, "unsignedCharValue");

  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", CFSTR("descriptor")));
  v8 = (void *)v7;
  if (!v6 || !v7)
  {
    v10 = qword_100999978;
    if (!os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
      goto LABEL_12;
    *(_DWORD *)buf = 67109120;
    LODWORD(v17) = v6;
    v11 = "Send report to AOP (type %d) invalid argument";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 8u);
    goto LABEL_12;
  }
  if (!*(_QWORD *)(a1 + 112))
  {
    v10 = qword_100999978;
    if (!os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
      goto LABEL_12;
    *(_DWORD *)buf = 67109120;
    LODWORD(v17) = v6;
    v11 = "Send report to AOP (type %d) _device is null";
    goto LABEL_11;
  }
  v9 = sub_100475B20();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10039FAEC;
  v12[3] = &unk_10092B468;
  v14 = a1;
  v15 = v6;
  v13 = v8;
  sub_100041A34(v9, v12);

LABEL_12:
}

void sub_10039FAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_10039FAEC(uint64_t a1)
{
  id v1;
  int v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 v8;
  NSObject *v9;
  int v10;
  id v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  uint64_t v15;
  _QWORD v16[2];
  char v17;

  v1 = 0;
  v3 = (unsigned __int8 *)(a1 + 48);
  v2 = *(unsigned __int8 *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 40);
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  switch(v2)
  {
    case 1:
      v5 = sub_10039FCA0(a1, *(void **)(a1 + 32), v16);
      goto LABEL_6;
    case 2:
      LOBYTE(v16[0]) = 2;
      goto LABEL_9;
    case 3:
      v5 = sub_10039FEE0(a1, *(void **)(a1 + 32), (uint64_t)v16);
      goto LABEL_6;
    case 5:
      v5 = sub_10039FDC0(a1, *(void **)(a1 + 32), (uint64_t)v16);
LABEL_6:
      v6 = v5;
      goto LABEL_10;
    case 8:
      sub_1003A01F4(a1, *(void **)(a1 + 32), v16);
      goto LABEL_9;
    case 10:
      sub_1003A0424(a1, *(void **)(a1 + 32), v16);
LABEL_9:
      v6 = 1;
LABEL_10:
      v7 = *(void **)(v4 + 112);
      v11 = 0;
      v8 = objc_msgSend(v7, "setReport:reportLength:withIdentifier:forType:error:", v16, 17, 0, 1, &v11);
      v1 = v11;
      v9 = qword_100999978;
      if ((v8 & 1) != 0)
      {
        if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
        {
          v10 = *v3;
          *(_DWORD *)buf = 67109376;
          v13 = v10;
          v14 = 2048;
          v15 = v6;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Send report to AOP (type %d) success. Return 0x%016llx", buf, 0x12u);
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
      {
        sub_1006E4E4C(v3, (uint64_t)v1, v9);
      }
      break;
    default:
      break;
  }

}

uint64_t sub_10039FCA0(uint64_t a1, void *a2, _BYTE *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v4 = a2;
  *a3 = 1;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", CFSTR("baseDramWakePeriodSeconds")));
  if (v5 && (v6 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v5, v6) & 1) != 0))
  {
    v7 = objc_msgSend(v5, "unsignedCharValue");
    if (v7)
      v8 = v7;
    else
      v8 = 60;
    a3[2] = v8;
    v9 = 3;
  }
  else
  {
    v9 = 1;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", CFSTR("running")));

  if (v10)
  {
    v11 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
      a3[1] = objc_msgSend(v10, "unsignedCharValue") != 0;
  }

  return v9;
}

void sub_10039FD94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10039FDC0(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  __int16 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2;
  *(_BYTE *)a3 = 5;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", CFSTR("bufferSize")));
  if (v5)
  {
    v6 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
    {
      v7 = objc_msgSend(v5, "unsignedShortValue");
      if (v7 >= 0x800)
        v8 = 2048;
      else
        v8 = v7;
      *(_WORD *)(a3 + 1) = v8;
    }
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", CFSTR("multiType")));

  if (v9 && (v10 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v9, v10) & 1) != 0))
  {
    *(_BYTE *)(a3 + 3) = objc_msgSend(v9, "unsignedCharValue") != 0;
    v11 = 5;
  }
  else
  {
    v11 = 1;
  }

  return v11;
}

void sub_10039FEB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10039FEE0(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unsigned int v22;
  __int16 v23;

  v4 = a2;
  *(_BYTE *)a3 = 3;
  *(_QWORD *)(a3 + 1) = 0x28000AFFB01F0816;
  *(_BYTE *)(a3 + 9) = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", CFSTR("conf")));
  if (v5 && (v6 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v5, v6) & 1) != 0))
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", CFSTR("appleType")));
    if (v7)
    {
      v8 = objc_opt_class(NSNumber);
      if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
        *(_BYTE *)(a3 + 1) = objc_msgSend(v7, "unsignedCharValue");
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", CFSTR("payloadLengthLimits")));

    if (v9 && (v10 = objc_opt_class(NSArray), (objc_opt_isKindOfClass(v9, v10) & 1) != 0))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndex:", 0));
      *(_BYTE *)(a3 + 2) = objc_msgSend(v11, "unsignedCharValue");

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectAtIndex:", 1));
      *(_BYTE *)(a3 + 3) = objc_msgSend(v12, "unsignedCharValue");

      v13 = 3;
    }
    else
    {
      v13 = 1;
    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", CFSTR("rssiLimits")));

    if (v14)
    {
      v15 = objc_opt_class(NSArray);
      if ((objc_opt_isKindOfClass(v14, v15) & 1) != 0)
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectAtIndex:", 0));
        *(_BYTE *)(a3 + 4) = objc_msgSend(v16, "charValue");

        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectAtIndex:", 1));
        *(_BYTE *)(a3 + 5) = objc_msgSend(v17, "charValue");

        v13 |= 8uLL;
      }
    }
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", CFSTR("pktSize")));

    if (v18)
    {
      v19 = objc_opt_class(NSNumber);
      if ((objc_opt_isKindOfClass(v18, v19) & 1) != 0)
      {
        *(_WORD *)(a3 + 6) = (unsigned __int16)objc_msgSend(v18, "unsignedShortValue");
        v13 |= 0x20uLL;
      }
    }
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", CFSTR("numLines")));

    if (v20)
    {
      v21 = objc_opt_class(NSNumber);
      if ((objc_opt_isKindOfClass(v20, v21) & 1) != 0)
      {
        v22 = objc_msgSend(v20, "unsignedShortValue");
        if (v22 <= 1)
          v23 = 1;
        else
          v23 = v22;
        *(_WORD *)(a3 + 8) = v23;
        v13 |= 0x80uLL;
      }
    }

  }
  else
  {
    v13 = 1;
  }

  return v13;
}

void sub_1003A0194(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1003A01F4(uint64_t a1, void *a2, _BYTE *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  unsigned __int8 v9;
  uint64_t v10;
  _BYTE *v11;
  void *i;
  void *v13;
  void *v14;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v4 = a2;
  *a3 = 8;
  v16 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", CFSTR("TypeToRssiThresholdMapping")));
  if (!v5)
    goto LABEL_16;
  v6 = objc_opt_class(NSDictionary);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) == 0)
    goto LABEL_16;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allKeys"));
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (!v8)
  {

    v9 = 0;
LABEL_15:
    bzero(&a3[(2 * v9) | 1], 2 * (2 - v9) + 2);
    goto LABEL_16;
  }
  v9 = 0;
  v10 = *(_QWORD *)v18;
  v11 = a3 + 1;
  while (2)
  {
    for (i = 0; i != v8; i = (char *)i + 1)
    {
      if (*(_QWORD *)v18 != v10)
        objc_enumerationMutation(v7);
      v13 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
      v11[2 * v9] = objc_msgSend(v13, "unsignedIntValue");
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", v13));
      v11[2 * v9 + 1] = objc_msgSend(v14, "intValue");

      if (++v9 == 3)
      {

        goto LABEL_16;
      }
    }
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v8)
      continue;
    break;
  }

  if (v9 <= 2u)
    goto LABEL_15;
LABEL_16:

  return 1;
}

void sub_1003A03D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1003A0424(uint64_t a1, void *a2, _BYTE *a3)
{
  void *v4;
  void *v5;

  *a3 = 10;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "valueForKey:", CFSTR("log_verbose")));
  v5 = v4;
  if (v4)
    a3[1] = objc_msgSend(v4, "unsignedIntValue");

  return 1;
}

void sub_1003A0478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003A0488(uint64_t a1, int a2, _QWORD *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[7];
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint8_t buf[8];
  uint8_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v6 = qword_100999978;
  if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Receive report %d from AOP", buf, 8u);
  }
  v7 = 3;
  if (a2 && a3)
  {
    if (*(_QWORD *)(a1 + 112))
    {
      v12 = 0;
      v13 = &v12;
      v14 = 0x2020000000;
      v15 = 0;
      *(_QWORD *)buf = 0;
      v17 = buf;
      v18 = 0x3032000000;
      v19 = sub_100062620;
      v20 = sub_1000623CC;
      v21 = 0;
      v8 = sub_100475B20();
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_1003A0660;
      v10[3] = &unk_10092B490;
      v10[5] = buf;
      v10[6] = a1;
      v11 = a2;
      v10[4] = &v12;
      sub_100023D84(v8, v10);
      v7 = *((unsigned int *)v13 + 6);
      if (!(_DWORD)v7)
      {
        *a3 = objc_retainAutorelease(*((id *)v17 + 5));
        v7 = *((unsigned int *)v13 + 6);
      }
      _Block_object_dispose(buf, 8);

      _Block_object_dispose(&v12, 8);
    }
    else
    {
      return 22;
    }
  }
  return v7;
}

void sub_1003A062C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1003A0660(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  void *v5;
  unsigned __int8 v6;
  id v7;
  id v8;
  uint64_t v9;
  id *v10;
  uint64_t v11;
  id v12;
  void *v13;
  unsigned __int8 v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  unsigned __int8 v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  unsigned __int8 v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  unsigned __int8 v29;
  uint64_t v30;
  void *v31;
  void *v32;
  unsigned __int8 v33;
  id v34;
  uint64_t v35;
  void *v36;
  id obj;
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  _QWORD v43[2];
  void *v44;
  id v45;
  void *v46;
  id v47;
  unint64_t v48;

  v2 = *(_QWORD *)(a1 + 48);
  v48 = 1093;
  v3 = (unsigned __int8 *)operator new(0x445uLL);
  bzero(v3 + 1, 0x444uLL);
  v4 = *(unsigned __int8 *)(a1 + 56);
  *v3 = v4;
  switch(v4)
  {
    case 1:
      v13 = *(void **)(v2 + 112);
      v47 = 0;
      v14 = objc_msgSend(v13, "getReport:reportLength:withIdentifier:forType:error:", v3, &v48, 1, 1, &v47);
      v15 = v47;
      v8 = v15;
      if ((v14 & 1) != 0)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v17 = *(void **)(v16 + 40);
        v10 = (id *)(v16 + 40);
        v46 = v17;
        sub_1003A0A7C((uint64_t)v15, (uint64_t)v3, v48, &v46);
        v12 = v46;
        goto LABEL_18;
      }
      if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
        sub_1006E4ED0();
      goto LABEL_6;
    case 2:
      v18 = *(void **)(v2 + 112);
      v45 = 0;
      v19 = objc_msgSend(v18, "getReport:reportLength:withIdentifier:forType:error:", v3, &v48, 2, 1, &v45);
      v20 = v45;
      v8 = v20;
      if ((v19 & 1) != 0)
      {
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v22 = *(void **)(v21 + 40);
        v10 = (id *)(v21 + 40);
        v44 = v22;
        sub_1003A0D30((uint64_t)v20, (uint64_t)v3, v48, &v44);
        v12 = v44;
        goto LABEL_18;
      }
      if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
        sub_1006E4F30();
      goto LABEL_6;
    case 5:
    case 6:
    case 7:
    case 8:
      v5 = *(void **)(v2 + 112);
      v43[1] = 0;
      v6 = objc_msgSend(v5, "getReport:reportLength:withIdentifier:forType:error:", v3, &v48);
      v7 = 0;
      v8 = v7;
      if ((v6 & 1) != 0)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v11 = *(_QWORD *)(v9 + 40);
        v10 = (id *)(v9 + 40);
        v43[0] = v11;
        sub_1003A104C((uint64_t)v7, (uint64_t)v3, v48, v43);
        v12 = (id)v43[0];
        goto LABEL_18;
      }
      if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
        sub_1006E4F90();
      goto LABEL_6;
    case 9:
      v23 = *(void **)(v2 + 112);
      v42 = 0;
      v24 = objc_msgSend(v23, "getReport:reportLength:withIdentifier:forType:error:", v3, &v48, 9, 1, &v42);
      v25 = v42;
      v8 = v25;
      if ((v24 & 1) != 0)
      {
        v26 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v27 = *(void **)(v26 + 40);
        v10 = (id *)(v26 + 40);
        v41 = v27;
        sub_1003A13E0((uint64_t)v25, v3, v48, &v41);
        v12 = v41;
        goto LABEL_18;
      }
      if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
        sub_1006E4FF0();
      goto LABEL_6;
    case 10:
      v28 = *(void **)(v2 + 112);
      v40 = 0;
      v29 = objc_msgSend(v28, "getReport:reportLength:withIdentifier:forType:error:", v3, &v48, 10, 1, &v40);
      v8 = v40;
      if ((v29 & 1) != 0)
      {
        v30 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v31 = *(void **)(v30 + 40);
        v10 = (id *)(v30 + 40);
        v39 = v31;
        sub_1003A170C(v2, (uint64_t)v3, v48, &v39);
        v12 = v39;
        goto LABEL_18;
      }
      if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
        sub_1006E5050();
      goto LABEL_6;
    case 11:
      v32 = *(void **)(v2 + 112);
      v38 = 0;
      v33 = objc_msgSend(v32, "getReport:reportLength:withIdentifier:forType:error:", v3, &v48, 11, 1, &v38);
      v34 = v38;
      v8 = v34;
      if ((v33 & 1) != 0)
      {
        v35 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v36 = *(void **)(v35 + 40);
        v10 = (id *)(v35 + 40);
        obj = v36;
        sub_1003A1A1C((uint64_t)v34, (uint64_t)v3, v48, &obj);
        v12 = obj;
LABEL_18:
        objc_storeStrong(v10, v12);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_ERROR))
          sub_1006E50B0();
LABEL_6:
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
      }

LABEL_20:
      operator delete(v3);
      return;
    default:
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
      goto LABEL_20;
  }
}

void sub_1003A0A64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1003A0A7C(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  NSMutableDictionary *v15;
  void *v16;
  NSMutableDictionary *v17;

  if (a3 >= 0x18)
  {
    if (a4)
    {
      v17 = objc_opt_new(NSMutableDictionary);
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(unsigned int *)(a2 + 9)));
      -[NSMutableDictionary setObject:forKey:](v17, "setObject:forKey:", v6, CFSTR("serviceFlags"));

      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a2 + 13)));
      -[NSMutableDictionary setObject:forKey:](v17, "setObject:forKey:", v7, CFSTR("maxSramSize"));

      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a2 + 15)));
      -[NSMutableDictionary setObject:forKey:](v17, "setObject:forKey:", v8, CFSTR("currentSramSize"));

      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a2 + 17)));
      -[NSMutableDictionary setObject:forKey:](v17, "setObject:forKey:", v9, CFSTR("sramToDramMultiplier"));

      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a2 + 18)));
      -[NSMutableDictionary setObject:forKey:](v17, "setObject:forKey:", v10, CFSTR("baseDramWakePeriodSeconds"));

      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a2 + 19)));
      -[NSMutableDictionary setObject:forKey:](v17, "setObject:forKey:", v11, CFSTR("maxNumMatchTableHandlers"));

      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a2 + 20)));
      -[NSMutableDictionary setObject:forKey:](v17, "setObject:forKey:", v12, CFSTR("currentValidMatchTableHandlers"));

      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a2 + 22)));
      -[NSMutableDictionary setObject:forKey:](v17, "setObject:forKey:", v13, CFSTR("currentSramBufferOffset"));

      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a2 + 21)));
      -[NSMutableDictionary setObject:forKey:](v17, "setObject:forKey:", v14, CFSTR("running"));

      v15 = objc_opt_new(NSMutableDictionary);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + 1)));
      -[NSMutableDictionary setObject:forKey:](v15, "setObject:forKey:", v16, CFSTR("aop_time"));

      -[NSMutableDictionary setObject:forKey:](v15, "setObject:forKey:", v17, CFSTR("ServiceStateReport"));
      *a4 = -[NSMutableDictionary copy](v15, "copy");

    }
  }
}

void sub_1003A0CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1003A0D30(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  id v5;
  uint64_t i;
  void *v7;
  void *v8;
  void *v9;
  NSMutableDictionary *v10;
  id v11;
  NSMutableDictionary *v12;
  void *v13;
  void *v14;
  id v15;
  NSMutableDictionary *v16;
  void *v17;
  id v18;
  _QWORD *v19;
  _QWORD v20[2];
  _QWORD v21[2];

  if (a3 >= 0x45 && a4)
  {
    v19 = a4;
    v5 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 16);
    for (i = 0; i != 32; i += 2)
    {
      v20[0] = CFSTR("type");
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a2 + i + 17), v19, CFSTR("type")));
      v20[1] = CFSTR("count");
      v21[0] = v7;
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a2 + i + 18)));
      v21[1] = v8;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v21, v20, 2));
      objc_msgSend(v5, "addObject:", v9);

    }
    v10 = objc_opt_new(NSMutableDictionary);
    v11 = objc_msgSend(v5, "copy");
    -[NSMutableDictionary setObject:forKey:](v10, "setObject:forKey:", v11, CFSTR("histSamples"));

    v12 = objc_opt_new(NSMutableDictionary);
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(unsigned int *)(a2 + 9)));
    -[NSMutableDictionary setObject:forKey:](v12, "setObject:forKey:", v13, CFSTR("intervalSeconds"));

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a2 + 13)));
    -[NSMutableDictionary setObject:forKey:](v12, "setObject:forKey:", v14, CFSTR("spmiXactions"));

    v15 = -[NSMutableDictionary copy](v10, "copy");
    -[NSMutableDictionary setObject:forKey:](v12, "setObject:forKey:", v15, CFSTR("tlvHist"));

    v16 = objc_opt_new(NSMutableDictionary);
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + 1)));
    -[NSMutableDictionary setObject:forKey:](v16, "setObject:forKey:", v17, CFSTR("aop_time"));

    v18 = -[NSMutableDictionary copy](v12, "copy");
    -[NSMutableDictionary setObject:forKey:](v16, "setObject:forKey:", v18, CFSTR("TelemetryReport"));

    *v19 = -[NSMutableDictionary copy](v16, "copy");
  }
}

void sub_1003A0F98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1003A104C(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  NSMutableDictionary *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NSMutableDictionary *v16;
  void *v17;
  id v18;
  NSMutableDictionary *v19;
  void *v20;
  id v21;
  _QWORD v22[2];
  _QWORD v23[2];

  if (a3 >= 0x13)
  {
    if (a4)
    {
      v6 = objc_opt_new(NSMutableDictionary);
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int8 *)(a2 + 10)));
      -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v7, CFSTR("appleType"));

      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a2 + 11)));
      v23[0] = v8;
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)(a2 + 12)));
      v23[1] = v9;
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v23, 2));
      -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v10, CFSTR("payloadLengthLimits"));

      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *(unsigned __int8 *)(a2 + 13)));
      v22[0] = v11;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *(unsigned __int8 *)(a2 + 14)));
      v22[1] = v12;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v22, 2));
      -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v13, CFSTR("rssiLimits"));

      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a2 + 15)));
      -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v14, CFSTR("pktSize"));

      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)(a2 + 17)));
      -[NSMutableDictionary setObject:forKey:](v6, "setObject:forKey:", v15, CFSTR("numLines"));

      v16 = objc_opt_new(NSMutableDictionary);
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int8 *)(a2 + 9)));
      -[NSMutableDictionary setObject:forKey:](v16, "setObject:forKey:", v17, CFSTR("handleIndex"));

      v18 = -[NSMutableDictionary copy](v6, "copy");
      -[NSMutableDictionary setObject:forKey:](v16, "setObject:forKey:", v18, CFSTR("conf"));

      v19 = objc_opt_new(NSMutableDictionary);
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + 1)));
      -[NSMutableDictionary setObject:forKey:](v19, "setObject:forKey:", v20, CFSTR("aop_time"));

      v21 = -[NSMutableDictionary copy](v16, "copy");
      -[NSMutableDictionary setObject:forKey:](v19, "setObject:forKey:", v21, CFSTR("MatchTableConfReport"));

      *a4 = -[NSMutableDictionary copy](v19, "copy");
    }
  }
}

void sub_1003A130C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1003A13E0(uint64_t a1, unsigned __int8 *a2, unint64_t a3, _QWORD *a4)
{
  int64_t v4;
  int64_t v7;
  NSObject *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  void *v14;
  void *v15;
  NSMutableDictionary *v16;
  void *v17;
  void *v18;
  id v19;
  NSMutableDictionary *v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  int64_t v24;

  v4 = a3 - 17;
  if (a3 >= 0x11 && a4)
  {
    v7 = *(unsigned int *)(a2 + 13);
    if (v4 >= v7)
    {
      v20 = objc_opt_new(NSMutableDictionary);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 9)));
      -[NSMutableDictionary setObject:forKey:](v20, "setObject:forKey:", v9, CFSTR("cacheSize"));

      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a2 + 13)));
      -[NSMutableDictionary setObject:forKey:](v20, "setObject:forKey:", v10, CFSTR("reportLength"));

      if (*(_DWORD *)(a2 + 13) >= 0x30u)
      {
        v11 = 0;
        v12 = a2 + 17;
        v13 = *(_DWORD *)(a2 + 13);
        do
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v12, 48));
          v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("cacheline%02d"), v11));
          -[NSMutableDictionary setObject:forKey:](v20, "setObject:forKey:", v14, v15);

          ++v11;
          v12 += 48;
        }
        while (v13 / 0x30uLL != v11);
      }
      v16 = objc_opt_new(NSMutableDictionary);
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *a2));
      -[NSMutableDictionary setObject:forKey:](v16, "setObject:forKey:", v17, CFSTR("type"));

      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", *(_QWORD *)(a2 + 1)));
      -[NSMutableDictionary setObject:forKey:](v16, "setObject:forKey:", v18, CFSTR("aop_time"));

      v19 = -[NSMutableDictionary copy](v20, "copy");
      -[NSMutableDictionary setObject:forKey:](v16, "setObject:forKey:", v19, CFSTR("BtProxCtxCacheFetchReport"));

      *a4 = -[NSMutableDictionary copy](v16, "copy");
    }
    else
    {
      v8 = qword_100999978;
      if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        v22 = v7;
        v23 = 2048;
        v24 = v4;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "invalid BtProxCtxCacheFetchReport reportLength : %d/%ld", buf, 0x12u);
      }
    }
  }
}

void sub_1003A16A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(exception_object);
}

void sub_1003A170C(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  NSObject *v13;
  float v14;
  int v15;
  NSObject *v16;
  NSMutableDictionary *v18;
  unsigned __int8 v19;
  _BYTE buf[12];
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;

  if (a3 >= 0xF && a4)
  {
    v18 = objc_opt_new(NSMutableDictionary);
    v6 = 0;
    v7 = (_QWORD *)(a1 + 128);
    do
    {
      v8 = *(char *)(a2 + v6 + 10);
      v19 = *(_BYTE *)(a2 + v6 + 9);
      v9 = objc_alloc((Class)NSNumber);
      v10 = objc_msgSend(v9, "initWithUnsignedInt:", v19);
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v8));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "stringValue"));
      -[NSMutableDictionary setObject:forKey:](v18, "setObject:forKey:", v11, v12);

      if (sub_100262E78(v7, &v19))
      {
        v13 = qword_100999978;
        if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "void AOPInterfaceManager::_parseGetReportTypeToRssiThresholdMapFetch(const GetReportPacke"
                               "t &, NSInteger, NSDictionary *__autoreleasing *)";
          v21 = 1024;
          v22 = v19;
          v23 = 1024;
          v24 = v8;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%s updating lower bound RSSI for type %d to %+d", buf, 0x18u);
        }
        *(_QWORD *)buf = &v19;
        *((float *)sub_1003A1B38((uint64_t)v7, &v19, (uint64_t)&unk_100740F58, (_BYTE **)buf) + 8) = (float)(int)v8;
        *(_QWORD *)buf = &v19;
        v14 = *((float *)sub_1003A1B38((uint64_t)v7, &v19, (uint64_t)&unk_100740F58, (_BYTE **)buf) + 9);
        *(_QWORD *)buf = &v19;
        if (v14 < *((float *)sub_1003A1B38((uint64_t)v7, &v19, (uint64_t)&unk_100740F58, (_BYTE **)buf) + 8))
        {
          *(_QWORD *)buf = &v19;
          v15 = *((_DWORD *)sub_1003A1B38((uint64_t)v7, &v19, (uint64_t)&unk_100740F58, (_BYTE **)buf) + 8);
          *(_QWORD *)buf = &v19;
          *((_DWORD *)sub_1003A1B38((uint64_t)v7, &v19, (uint64_t)&unk_100740F58, (_BYTE **)buf) + 9) = v15;
        }
      }

      v6 += 2;
    }
    while (v6 != 6);
    v16 = qword_100999978;
    if (os_log_type_enabled((os_log_t)qword_100999978, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "dPayload : %@", buf, 0xCu);
    }
    *a4 = -[NSMutableDictionary copy](v18, "copy");

  }
}

void sub_1003A19D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1003A1A1C(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  id v6;
  NSMutableDictionary *v7;

  if (a3 >= 0xA)
  {
    if (a4)
    {
      v7 = objc_opt_new(NSMutableDictionary);
      v6 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithUnsignedInt:", *(unsigned __int8 *)(a2 + 9));
      -[NSMutableDictionary setObject:forKey:](v7, "setObject:forKey:", v6, CFSTR("log_verbose"));

      *a4 = -[NSMutableDictionary copy](v7, "copy");
    }
  }
}

void sub_1003A1AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1003A1AD4(id a1)
{
  operator new();
}

void sub_1003A1B14()
{
  operator delete();
}

_QWORD *sub_1003A1B38(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = *a2;
      if (v7 <= v6)
        v9 = v6 % v7;
    }
    else
    {
      v9 = ((_DWORD)v7 - 1) & v6;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v6)
          {
            if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v6)
              return v11;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= v7)
                v12 %= v7;
            }
            else
            {
              v12 &= v7 - 1;
            }
            if (v12 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v11 = operator new(0x28uLL);
  *v11 = 0;
  v11[1] = v6;
  *((_BYTE *)v11 + 16) = **a4;
  *((_DWORD *)v11 + 9) = 0;
  *(_QWORD *)((char *)v11 + 20) = 0;
  *(_QWORD *)((char *)v11 + 28) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_1000B678C(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v9 = v6 % v7;
      else
        v9 = v6;
    }
    else
    {
      v9 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v9) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1003A1D54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_1003A1D68(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1003A1F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1003A1FA4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    sub_1003A201C(a1, 0x6DB6DB6DB6DB6DB7 * (v5 >> 3));
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *sub_1003A201C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    abort();
  result = (char *)sub_100355428((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

char *sub_1003A206C(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int64_t v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  char *v30;
  char *v31;
  char *v32;
  char v33;
  char *v34;
  char *v35;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v6 = a5;
  v7 = __src;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      abort();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = operator new(v15);
    else
      v16 = 0;
    v26 = &v13[(_QWORD)v16];
    v27 = &v13[(_QWORD)v16 + v6];
    v28 = v26;
    do
    {
      v29 = *v7++;
      *v28++ = v29;
      --v6;
    }
    while (v6);
    v30 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      v32 = v26;
    }
    else
    {
      v31 = v5;
      v32 = v26;
      do
      {
        v33 = *--v31;
        *--v32 = v33;
      }
      while (v31 != v30);
      v10 = *(char **)(a1 + 8);
    }
    v34 = (char *)v16 + v15;
    if (v10 != v5)
      memmove(v27, v5, v10 - v5);
    v35 = *(char **)a1;
    *(_QWORD *)a1 = v32;
    *(_QWORD *)(a1 + 8) = &v27[v10 - v5];
    *(_QWORD *)(a1 + 16) = v34;
    if (v35)
      operator delete(v35);
    return v26;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(char **)(a1 + 8);
LABEL_17:
    v21 = &v5[v6];
    v22 = &v20[-v6];
    v23 = v20;
    if (&v20[-v6] < v10)
    {
      v24 = &v10[v6] - v20;
      v23 = v20;
      do
      {
        v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&v5[v6], v5, v20 - v21);
    if (v18 != v7)
      memmove(v5, v7, v18 - v7);
    return v5;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
    goto LABEL_17;
  return v5;
}

uint64_t sub_1003A2248(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  xpc_object_t v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD v19[2];
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  unsigned int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;

  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006E5110();
  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 8);
  v6 = *(_QWORD **)(a1 + 80);
  v7 = (_QWORD *)(a1 + 88);
  if (v6 != (_QWORD *)(a1 + 88))
  {
    do
    {
      v8 = v6[4];
      if (v8 && *(_BYTE *)(*(_QWORD *)(v8 + 48) + 160))
      {
        v9 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
        {
          v15 = *(_QWORD *)(v8 + 32);
          *(_DWORD *)buf = 134218752;
          v21 = a2;
          v22 = 1024;
          v23 = a3;
          v24 = 1024;
          v25 = a4;
          v26 = 2048;
          v27 = v15;
          _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "BTLocalDeviceMsgHandler::BTLocalDeviceStatusEventCallback localDevice:%llx event:%d result:%d cbid:%llx", buf, 0x22u);
        }
        v10 = xpc_dictionary_create(0, 0, 0);
        v11 = v10;
        if (v10)
        {
          xpc_dictionary_set_uint64(v10, "kCBMsgArgID", *(_QWORD *)(v8 + 32));
          xpc_dictionary_set_uint64(v11, "kCBMsgArgLocalDeviceID", a2);
          xpc_dictionary_set_uint64(v11, "kCBMsgArgResult", a4);
          xpc_dictionary_set_uint64(v11, "kCBMsgArgEvent", a3);
          sub_1002C5EC8(*(_QWORD *)(v8 + 48), "kCBMsgIdLocalDeviceStatusEvent", v11, 1);
        }
      }
      v12 = (_QWORD *)v6[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v6[2];
          v14 = *v13 == (_QWORD)v6;
          v6 = v13;
        }
        while (!v14);
      }
      v6 = v13;
    }
    while (v13 != v7);
  }
  return sub_100034234((uint64_t)v19);
}

void sub_1003A247C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A2498(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  xpc_object_t v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD v18[2];
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 8);
  v7 = *(_QWORD **)(a1 + 80);
  if (v7 != (_QWORD *)(a1 + 88))
  {
    do
    {
      v8 = v7[4];
      if (v8 && *(_BYTE *)(*(_QWORD *)(v8 + 48) + 160))
      {
        v9 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
        {
          v15 = *(_QWORD *)(v8 + 32);
          *(_DWORD *)buf = 134218752;
          v20 = a2;
          v21 = 1024;
          v22 = a3;
          v23 = 2048;
          v24 = a4;
          v25 = 2048;
          v26 = v15;
          _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "BTLocalDeviceMsgHandler::BTLocalDeviceLeTestStoppedCallback localDevice:%llx result:%d nbPackets:%lld cbid:%llx", buf, 0x26u);
        }
        v10 = xpc_dictionary_create(0, 0, 0);
        v11 = v10;
        if (v10)
        {
          xpc_dictionary_set_uint64(v10, "kCBMsgArgID", *(_QWORD *)(v8 + 32));
          xpc_dictionary_set_uint64(v11, "kCBMsgArgLocalDeviceID", a2);
          xpc_dictionary_set_uint64(v11, "kCBMsgArgResult", a3);
          xpc_dictionary_set_uint64(v11, "kCBMsgArgNumberOfPackets", a4);
          sub_1002C5EC8(*(_QWORD *)(v8 + 48), "kCBMsgIdLocalDeviceLETestStoppedEvent", v11, 1);
        }
      }
      v12 = (_QWORD *)v7[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v7[2];
          v14 = *v13 == (_QWORD)v7;
          v7 = v13;
        }
        while (!v14);
      }
      v7 = v13;
    }
    while (v13 != (_QWORD *)(a1 + 88));
  }
  return sub_100034234((uint64_t)v18);
}

void sub_1003A26A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A26C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const void *a5)
{
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  xpc_object_t v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v20[2];
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 8);
  v9 = *(_QWORD **)(a1 + 80);
  if (v9 != (_QWORD *)(a1 + 88))
  {
    do
    {
      v10 = v9[4];
      if (v10 && *(_BYTE *)(*(_QWORD *)(v10 + 48) + 160))
      {
        v11 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
        {
          v17 = *(_QWORD *)(v10 + 32);
          *(_DWORD *)buf = 134218752;
          v22 = a2;
          v23 = 1024;
          v24 = a3;
          v25 = 2048;
          v26 = a4;
          v27 = 2048;
          v28 = v17;
          _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "BTLocalDeviceMsgHandler::BTLocalDeviceAFHMapChangedCallback localDevice:%llx result:%d remoteDevice:%llx cbid:%llx", buf, 0x26u);
        }
        v12 = xpc_dictionary_create(0, 0, 0);
        v13 = v12;
        if (v12)
        {
          xpc_dictionary_set_uint64(v12, "kCBMsgArgID", *(_QWORD *)(v10 + 32));
          xpc_dictionary_set_uint64(v13, "kCBMsgArgLocalDeviceID", a2);
          xpc_dictionary_set_uint64(v13, "kCBMsgArgResult", a3);
          xpc_dictionary_set_uint64(v13, "kCBMsgArgBTDevice", a4);
          xpc_dictionary_set_data(v13, "kCBMsgArgAFHMap", a5, 0xAuLL);
          sub_1002C5EC8(*(_QWORD *)(v10 + 48), "kCBMsgIdLocalDeviceAFHMapChangedEvent", v13, 1);
        }
      }
      v14 = (_QWORD *)v9[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v9[2];
          v16 = *v15 == (_QWORD)v9;
          v9 = v15;
        }
        while (!v16);
      }
      v9 = v15;
    }
    while (v15 != (_QWORD *)(a1 + 88));
  }
  return sub_100034234((uint64_t)v20);
}

void sub_1003A28E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A28FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  xpc_object_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  _QWORD v16[2];
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 8);
  v6 = *(_QWORD **)(a1 + 80);
  if (v6 != (_QWORD *)(a1 + 88))
  {
    do
    {
      v7 = v6[4];
      if (v7 && *(_BYTE *)(*(_QWORD *)(v7 + 48) + 160))
      {
        v8 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
        {
          v14 = *(_QWORD *)(v7 + 32);
          *(_DWORD *)buf = 134218496;
          v18 = a2;
          v19 = 2048;
          v20 = a3;
          v21 = 2048;
          v22 = v14;
          _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "BTLocalDeviceMsgHandler::BTLocalDeviceLinkModeChangedCallback localDevice:%llx device:%llx cbid:%llx", buf, 0x20u);
        }
        v9 = xpc_dictionary_create(0, 0, 0);
        v10 = v9;
        if (v9)
        {
          xpc_dictionary_set_uint64(v9, "kCBMsgArgID", *(_QWORD *)(v7 + 32));
          xpc_dictionary_set_uint64(v10, "kCBMsgArgLocalDeviceID", a2);
          xpc_dictionary_set_uint64(v10, "kCBMsgArgBTDevice", a3);
          sub_1002C5EC8(*(_QWORD *)(v7 + 48), "kCBMsgIdLocalDeviceLinkModeChangedEvent", v10, 1);
        }
      }
      v11 = (_QWORD *)v6[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v6[2];
          v13 = *v12 == (_QWORD)v6;
          v6 = v12;
        }
        while (!v13);
      }
      v6 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 88));
  }
  return sub_100034234((uint64_t)v16);
}

void sub_1003A2AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A2AF4(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  if (a4)
    return sub_1003A2248(a4, result, a2, a3);
  return result;
}

uint64_t sub_1003A2B14(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
    return sub_1003A28FC(a3, result, a2);
  return result;
}

uint64_t sub_1003A2B30(uint64_t result, int a2, unsigned int a3, uint64_t a4)
{
  if (a4)
    return sub_1003A2498(a4, result, a2, a3);
  return result;
}

uint64_t sub_1003A2B50(uint64_t result, int a2, uint64_t a3, const void *a4, uint64_t a5)
{
  if (a5)
    return sub_1003A26C0(a5, result, a2, a3, a4);
  return result;
}

void sub_1003A2B74(id a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  const char *v54;
  uint64_t v55;
  const char **v56;

  v54 = "kCBMsgIdLocalDeviceGetDefaultMsg";
  v55 = 32;
  v56 = &v54;
  v1 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v1[4] = sub_10000ED9C;
  v1[5] = 0;
  v54 = "kCBMsgIdLocalDeviceAddCallbacksMsg";
  v55 = 34;
  v56 = &v54;
  v2 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v2[4] = sub_10000E8EC;
  v2[5] = 0;
  v54 = "kCBMsgIdLocalDeviceRemoveCallbacksMsg";
  v55 = 37;
  v56 = &v54;
  v3 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v3[4] = sub_1003A3700;
  v3[5] = 0;
  v54 = "kCBMsgIdLocalDeviceMaskCallbacks";
  v55 = 32;
  v56 = &v54;
  v4 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v4[4] = sub_1003A39D4;
  v4[5] = 0;
  v54 = "kCBMsgIdLocalDeviceSetModulePowerMsg";
  v55 = 36;
  v56 = &v54;
  v5 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v5[4] = sub_1003A3AEC;
  v5[5] = 0;
  v54 = "kCBMsgIdLocalDeviceGetModulePowerMsg";
  v55 = 36;
  v56 = &v54;
  v6 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v6[4] = sub_100024EF0;
  v6[5] = 0;
  v54 = "kCBMsgIdLocalDeviceGetSpatialPlatformSupportMsg";
  v55 = 47;
  v56 = &v54;
  v7 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v7[4] = sub_1003A3C5C;
  v7[5] = 0;
  v54 = "kCBMsgIdLocalDevicePowerResetMsg";
  v55 = 32;
  v56 = &v54;
  v8 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v8[4] = sub_1003A3D44;
  v8[5] = 0;
  v54 = "kCBMsgIdLocalDeviceGetAirplaneModeStatusMsg";
  v55 = 43;
  v56 = &v54;
  v9 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v9[4] = sub_10000CEF0;
  v9[5] = 0;
  v54 = "kCBMsgIdLocalDeviceGetAddressStringMsg";
  v55 = 38;
  v56 = &v54;
  v10 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v10[4] = sub_1003A3E08;
  v10[5] = 0;
  v54 = "kCBMsgIdLocalDeviceGetNameMsg";
  v55 = 29;
  v56 = &v54;
  v11 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v11[4] = sub_1003A3F84;
  v11[5] = 0;
  v54 = "kCBMsgIdLocalDeviceSetDiscoverableMsg";
  v55 = 37;
  v56 = &v54;
  v12 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v12[4] = sub_1003A414C;
  v12[5] = 0;
  v54 = "kCBMsgIdLocalDeviceGetDiscoverableMsg";
  v55 = 37;
  v56 = &v54;
  v13 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v13[4] = sub_1003A4238;
  v13[5] = 0;
  v54 = "kCBMsgIdLocalDeviceSetConnectableMsg";
  v55 = 36;
  v56 = &v54;
  v14 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v14[4] = sub_1003A4320;
  v14[5] = 0;
  v54 = "kCBMsgIdLocalDeviceGetConnectableMsg";
  v55 = 36;
  v56 = &v54;
  v15 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v15[4] = sub_1003A440C;
  v15[5] = 0;
  v54 = "kCBMsgIdLocalDeviceGetPairingStatusMsg";
  v55 = 38;
  v56 = &v54;
  v16 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v16[4] = sub_1003A44F4;
  v16[5] = 0;
  v54 = "kCBMsgIdLocalDeviceGetPairedDevicesMsg";
  v55 = 38;
  v56 = &v54;
  v17 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v17[4] = sub_10000FDE4;
  v17[5] = 0;
  v54 = "kCBMsgIdLocalDeviceGetConnectionStatusMsg";
  v55 = 41;
  v56 = &v54;
  v18 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v18[4] = sub_1003A45DC;
  v18[5] = 0;
  v54 = "kCBMsgIdLocalDeviceGetConnectedDevicesMsg";
  v55 = 41;
  v56 = &v54;
  v19 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v19[4] = sub_1003A46C4;
  v19[5] = 0;
  v54 = "kCBMsgIdLocalDeviceGetConnectingDevicesMsg";
  v55 = 42;
  v56 = &v54;
  v20 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v20[4] = sub_1003A4878;
  v20[5] = 0;
  v54 = "kCBMsgIdLocalDeviceGetAdvertisingStatusMsg";
  v55 = 42;
  v56 = &v54;
  v21 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v21[4] = sub_1003A4A2C;
  v21[5] = 0;
  v54 = "kCBMsgIdLocalDeviceGetScanningMsg";
  v55 = 33;
  v56 = &v54;
  v22 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v22[4] = sub_1003A4B14;
  v22[5] = 0;
  v54 = "kCBMsgIdLocalDeviceEnableDUTModeMsg";
  v55 = 35;
  v56 = &v54;
  v23 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v23[4] = sub_1003A4BFC;
  v23[5] = 0;
  v54 = "kCBMsgIdLocalDeviceGetDUTModeEnabledMsg";
  v55 = 39;
  v56 = &v54;
  v24 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v24[4] = sub_1003A4C98;
  v24[5] = 0;
  v54 = "kCBMsgIdLocalDeviceEnableLeTxTestModeMsg";
  v55 = 40;
  v56 = &v54;
  v25 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v25[4] = sub_1003A4D80;
  v25[5] = 0;
  v54 = "kCBMsgIdLocalDeviceEnableLeRxTestModeMsg";
  v55 = 40;
  v56 = &v54;
  v26 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v26[4] = sub_1003A4F18;
  v26[5] = 0;
  v54 = "kCBMsgIdLocalDeviceDisableLeTestModeMsg";
  v55 = 39;
  v56 = &v54;
  v27 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v27[4] = sub_1003A5004;
  v27[5] = 0;
  v54 = "kCBMsgIdLocalDeviceSupportsServiceMsg";
  v55 = 37;
  v56 = &v54;
  v28 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v28[4] = sub_1003A50C8;
  v28[5] = 0;
  v54 = "kCBMsgIdLocalDeviceAdvertiseDataMsg";
  v55 = 35;
  v56 = &v54;
  v29 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v29[4] = sub_1003A51D8;
  v29[5] = 0;
  v54 = "kCBMsgIdLocalDeviceRemoveDataMsg";
  v55 = 32;
  v56 = &v54;
  v30 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v30[4] = sub_1003A52FC;
  v30[5] = 0;
  v54 = "kCBMsgIdLocalDeviceRegisterForPowerUpdatesMsg";
  v55 = 45;
  v56 = &v54;
  v31 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v31[4] = sub_1003A5420;
  v31[5] = 0;
  v54 = "kCBMsgIdLocalDeviceUnregisterForPowerUpdatesMsg";
  v55 = 47;
  v56 = &v54;
  v32 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v32[4] = sub_1003A5718;
  v32[5] = 0;
  v54 = "kCBMsgIdLocalDeviceReadPowerConsumptionMsg";
  v55 = 42;
  v56 = &v54;
  v33 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v33[4] = sub_1003A59D0;
  v33[5] = 0;
  v54 = "kCBMsgIdLocalDeviceRegisterForPowerProfileStatisticsMsg";
  v55 = 55;
  v56 = &v54;
  v34 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v34[4] = sub_1003A5AB8;
  v34[5] = 0;
  v54 = "kCBMsgIdLocalDeviceUnregisterForPowerProfileStatisticsMsg";
  v55 = 57;
  v56 = &v54;
  v35 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v35[4] = sub_1003A5DB0;
  v35[5] = 0;
  v54 = "kCBMsgIdLocalDeviceReadPowerProfileStatisticsMsg";
  v55 = 48;
  v56 = &v54;
  v36 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v36[4] = sub_1003A6068;
  v36[5] = 0;
  v54 = "kCBMsgIdLocalDeviceReadEnhancedPowerProfileStatisticsMsg";
  v55 = 56;
  v56 = &v54;
  v37 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v37[4] = sub_1003A61BC;
  v37[5] = 0;
  v54 = "kCBMsgIdLocalDeviceReadTransportSwitchStatisticsMsg";
  v55 = 51;
  v56 = &v54;
  v38 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v38[4] = sub_1003A62F0;
  v38[5] = 0;
  v54 = "kCBMsgIdLocalDeviceReadDetailedPowerProfileStatisticsMsg";
  v55 = 56;
  v56 = &v54;
  v39 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v39[4] = sub_1003A6444;
  v39[5] = 0;
  v54 = "kCBMsgIdLocalDeviceStartHCITracesMsg";
  v55 = 36;
  v56 = &v54;
  v40 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v40[4] = sub_1003A66A8;
  v40[5] = 0;
  v54 = "kCBMsgIdLocalDeviceStopHCITracesMsg";
  v55 = 35;
  v56 = &v54;
  v41 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v41[4] = sub_1003A676C;
  v41[5] = 0;
  v54 = "kCBMsgIdLocalDeviceShowPowerPromptMsg";
  v55 = 37;
  v56 = &v54;
  v42 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v42[4] = sub_1003A692C;
  v42[5] = 0;
  v54 = "kCBMsgIdLocalDeviceSetAFHMapMsg";
  v55 = 31;
  v56 = &v54;
  v43 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v43[4] = sub_1003A6A14;
  v43[5] = 0;
  v54 = "kCBMsgIdLocalDeviceReadAFHMapMsg";
  v55 = 32;
  v56 = &v54;
  v44 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v44[4] = sub_1003A6B54;
  v44[5] = 0;
  v54 = "kCBMsgIdLocalDeviceSetDelayedWakeMsg";
  v55 = 36;
  v56 = &v54;
  v45 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v45[4] = sub_1003A6C3C;
  v45[5] = 0;
  v54 = "kCBMsgIdLocalDeviceSetDenylistEnabledMsg";
  v55 = 40;
  v56 = &v54;
  v46 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v46[4] = sub_1003A6CF0;
  v46[5] = 0;
  v54 = "kCBMsgIdLocalDeviceGetDenylistEnabledMsg";
  v55 = 40;
  v56 = &v54;
  v47 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v47[4] = sub_10002607C;
  v47[5] = 0;
  v54 = "kCBMsgIdLocalDeviceGetDeviceNamesThatMayBeDenylistedMsg";
  v55 = 55;
  v56 = &v54;
  v48 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v48[4] = sub_1003A6DD8;
  v48[5] = 0;
  v54 = "kCBMsgIdLocalDeviceGetSharingAddressesMsg";
  v55 = 41;
  v56 = &v54;
  v49 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v49[4] = sub_1003A6F98;
  v49[5] = 0;
  v54 = "kCBMsgIdLocalDeviceIsSharingEnabledMsg";
  v55 = 38;
  v56 = &v54;
  v50 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v50[4] = sub_1003A715C;
  v50[5] = 0;
  v54 = "kCBMsgIdLocalDeviceDumpExposureNotificationDatabaseMsg";
  v55 = 54;
  v56 = &v54;
  v51 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v51[4] = sub_1003A7244;
  v51[5] = 0;
  v54 = "kCBMsgIdLocalDeviceLinkQualityGetDataMsg";
  v55 = 40;
  v56 = &v54;
  v52 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v52[4] = sub_1003A73C0;
  v52[5] = 0;
  v54 = "kCBMsgIdLocalDeviceSetCallScreeningMsg";
  v55 = 38;
  v56 = &v54;
  v53 = sub_100024BBC((uint64_t)&xmmword_100999468, (uint64_t)&v54, (uint64_t)&unk_100740F58, (_OWORD **)&v56);
  v53[4] = sub_1003A7650;
  v53[5] = 0;
}

uint64_t sub_1003A3700(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  int v8;
  au_asid_t asid;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  int v16;
  xpc_object_t reply;
  void *v18;
  _QWORD v20[2];
  _BYTE buf[12];
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006E5278();
  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 8);
  if (!uint64)
    goto LABEL_21;
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_DWORD *)(v7 + 40);
  asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
  v10 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = uint64;
    v22 = 1024;
    v23 = v8;
    v24 = 2048;
    v25 = asid;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "identifier mapping localDevice:%llx pid:%d asid:%llx", buf, 0x1Cu);
  }
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092B520);
  if (sub_10000973C(qword_100977B48, uint64, v8, asid))
  {
    v11 = *(_QWORD **)(a1 + 80);
    if (v11 == (_QWORD *)(a1 + 88))
    {
LABEL_18:
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006E524C();
      v16 = 3;
    }
    else
    {
      while (1)
      {
        v12 = v11[4];
        if (*(_QWORD *)(v12 + 32) == v6 && *(_QWORD *)(v12 + 40) == uint64)
          break;
        v13 = (_QWORD *)v11[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v11[2];
            v15 = *v14 == (_QWORD)v11;
            v11 = v14;
          }
          while (!v15);
        }
        v11 = v14;
        if (v14 == (_QWORD *)(a1 + 88))
          goto LABEL_18;
      }
      *(_QWORD *)buf = v11[4];
      if (*(_BYTE *)(a1 + 104))
      {
        v16 = sub_100435AF0(uint64, (__int128 *)v12);
        *(_BYTE *)(a1 + 104) = 0;
      }
      else
      {
        v16 = 0;
      }
      sub_100015ECC(a1 + 80, (unint64_t *)buf);
      free(*(void **)buf);
    }
  }
  else
  {
LABEL_21:
    v16 = 1;
  }
  reply = xpc_dictionary_create_reply(xdict);
  v18 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v16);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v18);
    xpc_release(v18);
  }
  return sub_100034234((uint64_t)v20);
}

void sub_1003A39B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1003A39D4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  int v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceEventMask");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E52D8();
    if (uint64)
      goto LABEL_3;
LABEL_7:
    v7 = 1;
    goto LABEL_8;
  }
  if (!uint64)
    goto LABEL_7;
LABEL_3:
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092B520);
  sub_10050B3C0(qword_100977B48, uint64, v6);
  v7 = 0;
LABEL_8:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003A3AEC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  xpc_object_t reply;
  void *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTPowerModule");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTPowerMode");
  v8 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    v12 = 134218496;
    v13 = uint64;
    v14 = 2048;
    v15 = v6;
    v16 = 2048;
    v17 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "BTLocalDeviceMsgHandler::handleBTLocalDeviceSetModulePowerMsg localDeviceId:%llx module:%llx powerOn:%llx", (uint8_t *)&v12, 0x20u);
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v9 = (int)sub_100435B64(uint64, v6, v7);
    goto LABEL_6;
  }
  v9 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1003A3C5C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E540C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100435E8C(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgSpatialPlatformSupport", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003A3D44(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E546C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100436048(uint64);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003A3E08(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  xpc_object_t reply;
  void *v12;
  uint64_t v13;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v13 - v8;
  bzero((char *)&v13 - v8, v6);
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E552C();
    if (uint64)
    {
LABEL_3:
      if (*(int *)(*(_QWORD *)(a1 + 72) + 80) < 1)
        v10 = 13;
      else
        v10 = (int)sub_1004361C0(uint64, v9, v6);
      goto LABEL_8;
    }
  }
  else if (uint64)
  {
    goto LABEL_3;
  }
  v10 = 1;
LABEL_8:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_dictionary_set_string(v12, "kCBMsgArgAddressString", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

void sub_1003A3F84(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  int v8;
  std::string::size_type size;
  xpc_object_t reply;
  void *v11;
  std::string *p_p;
  std::string __p;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  memset(&__p, 0, sizeof(__p));
  sub_100091AE8(&__p, "");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E558C();
    if (uint64)
      goto LABEL_3;
LABEL_14:
    v8 = 1;
    goto LABEL_15;
  }
  if (!uint64)
    goto LABEL_14;
LABEL_3:
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_10092B540);
  v7 = sub_100025158((uint64_t)off_100977890, uint64);
  if (v7)
  {
    v8 = sub_10047919C(v7, &__p);
    if (!v8)
    {
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (v6 >= size + 1)
        v8 = 0;
      else
        v8 = 5;
    }
  }
  else
  {
    v8 = 7;
  }
LABEL_15:
  reply = xpc_dictionary_create_reply(xdict);
  v11 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    xpc_dictionary_set_string(v11, "kCBMsgArgDeviceName", (const char *)p_p);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1003A412C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1003A414C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  int v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgDiscoverable");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E55EC();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_1004362E4(uint64, v6);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003A4238(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E564C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100436488(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgDiscoverable", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003A4320(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  int v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnectable");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E56AC();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100436510(uint64, v6);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003A440C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E570C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100436588(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgConnectable", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003A44F4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E570C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100436610(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgPaired", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003A45DC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E57CC();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100436698(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgConnected", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003A46C4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  size_t v9;
  int v10;
  xpc_object_t reply;
  void *v12;
  xpc_object_t v13;
  unint64_t i;
  unint64_t v15;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  __chkstk_darwin(v6, 8 * v6);
  v8 = (unint64_t *)((char *)&v15 - v7);
  bzero((char *)&v15 - v7, v9);
  v15 = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E582C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v10 = sub_100436720(uint64, v8, &v15, v6);
    goto LABEL_6;
  }
  v10 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    v13 = xpc_array_create(0, 0);
    if (!v10 && v15)
    {
      for (i = 0; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, v8[i]);
    }
    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v13);
    xpc_release(v12);
  }
}

void sub_1003A4878(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  size_t v9;
  int v10;
  xpc_object_t reply;
  void *v12;
  xpc_object_t v13;
  unint64_t i;
  unint64_t v15;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  __chkstk_darwin(v6, 8 * v6);
  v8 = (unint64_t *)((char *)&v15 - v7);
  bzero((char *)&v15 - v7, v9);
  v15 = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E588C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v10 = sub_1004368CC(uint64, v8, &v15, v6);
    goto LABEL_6;
  }
  v10 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    v13 = xpc_array_create(0, 0);
    if (!v10 && v15)
    {
      for (i = 0; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, v8[i]);
    }
    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v13);
    xpc_release(v12);
  }
}

void sub_1003A4A2C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E58EC();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100436A78(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgAdvertising", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003A4B14(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E594C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100436B00(uint64, (int *)&value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgScanning", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003A4BFC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  if (uint64)
    v6 = (int)sub_100436B78(uint64);
  else
    v6 = 1;
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003A4C98(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E59AC();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100436BE0(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgDutModeEnabled", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003A4D80(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  xpc_object_t reply;
  void *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgTestFrequency");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgPayloadSize");
  v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgPayload");
  v9 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    v13 = 134218752;
    v14 = uint64;
    v15 = 2048;
    v16 = v6;
    v17 = 2048;
    v18 = v7;
    v19 = 2048;
    v20 = v8;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "BTLocalDeviceMsgHandler::handleBTLocalDeviceEnableLeTxTestModeMsg localDeviceId:%llx testFrequency:%llx payloadSize:%llx payload:%llx", (uint8_t *)&v13, 0x2Au);
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v10 = (int)sub_100436C68(uint64, (unsigned __int16)v6, v7, v8);
    goto LABEL_6;
  }
  v10 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

void sub_1003A4F18(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  unsigned __int16 v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgTestFrequency");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E5A0C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100436CF4(uint64, v6);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003A5004(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E5A6C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100436D64(uint64);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003A50C8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgServices");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E5ACC();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100436DCC(uint64, v6, &value);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgServiceSuppored", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003A51D8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  const void *data;
  const void *v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;
  size_t v11;
  size_t length;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  length = 0;
  data = xpc_dictionary_get_data(value, "kCBMsgArgKey", &length);
  v11 = 0;
  v7 = xpc_dictionary_get_data(value, "kCBMsgArgValue", &v11);
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006E5B2C();
  v8 = 1;
  if (uint64 && length && v11)
    v8 = (int)sub_100436E60(uint64, data, length, v7, v11);
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003A52FC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  const void *data;
  const void *v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;
  size_t v11;
  size_t length;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  length = 0;
  data = xpc_dictionary_get_data(value, "kCBMsgArgKey", &length);
  v11 = 0;
  v7 = xpc_dictionary_get_data(value, "kCBMsgArgValue", &v11);
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006E5B8C();
  v8 = 1;
  if (uint64 && length && v11)
    v8 = (int)sub_100436F04(uint64, data, length, v7, v11);
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

uint64_t sub_1003A5420(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  int v8;
  au_asid_t asid;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  int v17;
  xpc_object_t reply;
  void *v19;
  _QWORD v21[2];
  _BYTE buf[12];
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006E5BEC();
  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 8);
  if (!uint64)
  {
LABEL_20:
    v17 = 1;
    goto LABEL_23;
  }
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_DWORD *)(v7 + 40);
  asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
  v10 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = uint64;
    v23 = 1024;
    v24 = v8;
    v25 = 2048;
    v26 = asid;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "identifier mapping localDevice:%llx pid:%d asid:%llx", buf, 0x1Cu);
  }
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092B520);
  if (sub_10000973C(qword_100977B48, uint64, v8, asid))
  {
    v11 = *(_QWORD **)(a1 + 80);
    if (v11 != (_QWORD *)(a1 + 88))
    {
      do
      {
        v12 = v11[4];
        if (*(_QWORD *)(v12 + 32) == v6 && *(_QWORD *)(v12 + 40) == uint64)
          goto LABEL_20;
        v13 = (_QWORD *)v11[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v11[2];
            v15 = *v14 == (_QWORD)v11;
            v11 = v14;
          }
          while (!v15);
        }
        v11 = v14;
      }
      while (v14 != (_QWORD *)(a1 + 88));
    }
    v16 = malloc_type_calloc(1uLL, 0x38uLL, 0x10A0040AF0111D3uLL);
    *(_QWORD *)buf = v16;
    v16[4] = v6;
    v16[5] = uint64;
    v16[3] = sub_1003A2B14;
    v16[6] = *(_QWORD *)(a1 + 72);
    sub_10000F7A0((uint64_t **)(a1 + 80), (unint64_t *)buf, (uint64_t *)buf);
    if (*(_BYTE *)(a1 + 105))
    {
      v17 = 0;
    }
    else
    {
      v17 = sub_100436FA8(uint64);
      *(_BYTE *)(a1 + 105) = 1;
    }
  }
  else
  {
    v17 = 7;
  }
LABEL_23:
  reply = xpc_dictionary_create_reply(xdict);
  v19 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v17);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v19);
    xpc_release(v19);
  }
  return sub_100034234((uint64_t)v21);
}

void sub_1003A56F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A5718(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  int v7;
  au_asid_t asid;
  NSObject *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  xpc_object_t reply;
  void *v17;
  _QWORD v19[2];
  _BYTE buf[12];
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006E5C4C();
  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 8);
  if (!uint64)
    goto LABEL_21;
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_DWORD *)(v6 + 40);
  asid = xpc_connection_get_asid(*(xpc_connection_t *)(v6 + 16));
  v9 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = uint64;
    v21 = 1024;
    v22 = v7;
    v23 = 2048;
    v24 = asid;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "identifier mapping localDevice:%llx pid:%d asid:%llx", buf, 0x1Cu);
  }
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092B520);
  if (sub_10000973C(qword_100977B48, uint64, v7, asid))
  {
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 == (_QWORD *)(a1 + 88))
    {
LABEL_18:
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006E524C();
      v15 = 3;
    }
    else
    {
      while (1)
      {
        v11 = v10[4];
        if (*(_QWORD *)(v11 + 24))
        {
          if (*(_QWORD *)(v11 + 40) == uint64)
            break;
        }
        v12 = (_QWORD *)v10[1];
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (_QWORD *)v10[2];
            v14 = *v13 == (_QWORD)v10;
            v10 = v13;
          }
          while (!v14);
        }
        v10 = v13;
        if (v13 == (_QWORD *)(a1 + 88))
          goto LABEL_18;
      }
      *(_QWORD *)buf = v10[4];
      if (*(_BYTE *)(a1 + 105))
      {
        v15 = sub_100437058(uint64);
        *(_BYTE *)(a1 + 105) = 0;
      }
      else
      {
        v15 = 0;
      }
      sub_100015ECC(a1 + 80, (unint64_t *)buf);
      free(*(void **)buf);
    }
  }
  else
  {
LABEL_21:
    v15 = 1;
  }
  reply = xpc_dictionary_create_reply(xdict);
  v17 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v15);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v17);
    xpc_release(v17);
  }
  return sub_100034234((uint64_t)v19);
}

void sub_1003A59AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1003A59D0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E5CAC();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_1004370EC(uint64, (uint64_t)&value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgPowerConsumed", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

uint64_t sub_1003A5AB8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  int v8;
  au_asid_t asid;
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  int v17;
  xpc_object_t reply;
  void *v19;
  _QWORD v21[2];
  _BYTE buf[12];
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006E5D0C();
  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 8);
  if (!uint64)
  {
LABEL_20:
    v17 = 1;
    goto LABEL_23;
  }
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_DWORD *)(v7 + 40);
  asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
  v10 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = uint64;
    v23 = 1024;
    v24 = v8;
    v25 = 2048;
    v26 = asid;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "identifier mapping localDevice:%llx pid:%d asid:%llx", buf, 0x1Cu);
  }
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092B520);
  if (sub_10000973C(qword_100977B48, uint64, v8, asid))
  {
    v11 = *(_QWORD **)(a1 + 80);
    if (v11 != (_QWORD *)(a1 + 88))
    {
      do
      {
        v12 = v11[4];
        if (*(_QWORD *)(v12 + 32) == v6 && *(_QWORD *)(v12 + 40) == uint64)
          goto LABEL_20;
        v13 = (_QWORD *)v11[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v11[2];
            v15 = *v14 == (_QWORD)v11;
            v11 = v14;
          }
          while (!v15);
        }
        v11 = v14;
      }
      while (v14 != (_QWORD *)(a1 + 88));
    }
    v16 = malloc_type_calloc(1uLL, 0x38uLL, 0x10A0040AF0111D3uLL);
    *(_QWORD *)buf = v16;
    v16[4] = v6;
    v16[5] = uint64;
    v16[3] = sub_1003A2B14;
    v16[6] = *(_QWORD *)(a1 + 72);
    sub_10000F7A0((uint64_t **)(a1 + 80), (unint64_t *)buf, (uint64_t *)buf);
    if (*(_BYTE *)(a1 + 106))
    {
      v17 = 0;
    }
    else
    {
      v17 = sub_100437188(uint64);
      *(_BYTE *)(a1 + 106) = 1;
    }
  }
  else
  {
    v17 = 7;
  }
LABEL_23:
  reply = xpc_dictionary_create_reply(xdict);
  v19 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v17);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v19);
    xpc_release(v19);
  }
  return sub_100034234((uint64_t)v21);
}

void sub_1003A5D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003A5DB0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  int v7;
  au_asid_t asid;
  NSObject *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  xpc_object_t reply;
  void *v17;
  _QWORD v19[2];
  _BYTE buf[12];
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006E5D6C();
  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 8);
  if (!uint64)
    goto LABEL_21;
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_DWORD *)(v6 + 40);
  asid = xpc_connection_get_asid(*(xpc_connection_t *)(v6 + 16));
  v9 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = uint64;
    v21 = 1024;
    v22 = v7;
    v23 = 2048;
    v24 = asid;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "identifier mapping localDevice:%llx pid:%d asid:%llx", buf, 0x1Cu);
  }
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092B520);
  if (sub_10000973C(qword_100977B48, uint64, v7, asid))
  {
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 == (_QWORD *)(a1 + 88))
    {
LABEL_18:
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006E524C();
      v15 = 3;
    }
    else
    {
      while (1)
      {
        v11 = v10[4];
        if (*(_QWORD *)(v11 + 24))
        {
          if (*(_QWORD *)(v11 + 40) == uint64)
            break;
        }
        v12 = (_QWORD *)v10[1];
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (_QWORD *)v10[2];
            v14 = *v13 == (_QWORD)v10;
            v10 = v13;
          }
          while (!v14);
        }
        v10 = v13;
        if (v13 == (_QWORD *)(a1 + 88))
          goto LABEL_18;
      }
      *(_QWORD *)buf = v10[4];
      if (*(_BYTE *)(a1 + 106))
      {
        v15 = sub_100437238(uint64);
        *(_BYTE *)(a1 + 106) = 0;
      }
      else
      {
        v15 = 0;
      }
      sub_100015ECC(a1 + 80, (unint64_t *)buf);
      free(*(void **)buf);
    }
  }
  else
  {
LABEL_21:
    v15 = 1;
  }
  reply = xpc_dictionary_create_reply(xdict);
  v17 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v15);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v17);
    xpc_release(v17);
  }
  return sub_100034234((uint64_t)v19);
}

void sub_1003A6044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1003A6068(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  unsigned __int16 v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value[2];

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgReset");
  value[0] = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E5DCC();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_1004372CC(uint64, v6, (uint64_t)value + 6, (uint64_t)value + 4, (uint64_t)value + 2, (uint64_t)value);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsTransmitting", HIWORD(value[0]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsReceiving", WORD2(value[0]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsSleep", WORD1(value[0]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsOthers", LOWORD(value[0]));
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003A61BC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  unsigned __int16 v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  _OWORD v10[15];
  uint64_t v11;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgReset");
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E5E2C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_1004373A4(uint64, v6, (uint64_t)v10);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_data(v9, "kCBMsgArgData", v10, 0xF8uLL);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003A62F0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  unsigned __int16 v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t v10;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgReset");
  v10 = 0;
  value = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E5E8C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100437458(uint64, v6, (uint64_t)&value + 4, (uint64_t)&value, (uint64_t)&v10 + 4, (uint64_t)&v10);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsTotal", HIDWORD(value));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsSuccesful", value);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsDowngraded", HIDWORD(v10));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsInvolundaryDowngraded", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003A6444(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  unsigned __int16 v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t value;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgReset");
  v15 = 0;
  v16 = 0;
  v13 = 0;
  v14 = 0;
  value = 0;
  v10 = 0;
  v11 = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E5EEC();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_10043752C(uint64, v6, (uint64_t)&v16 + 4, (uint64_t)&v16, (uint64_t)&v15 + 4, (uint64_t)&v15, (uint64_t)&v14 + 4, (uint64_t)&v14, (uint64_t)&v13 + 4, (uint64_t)&v13, (uint64_t)&value + 4, (uint64_t)&value, (uint64_t)&v11 + 4, (uint64_t)&v11, (uint64_t)&v10 + 4, (uint64_t)&v10);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsDurationTotal", HIDWORD(v16));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsDurationActive", v16);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsDurationIdle", HIDWORD(v15));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsDurationSleep", v15);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsDisableCounter", HIDWORD(v14));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsiPATxBT", v14);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsePATxBT", HIDWORD(v13));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsiPATxLE", v13);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsePATxLE", HIDWORD(value));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsConnectedRxBT", value);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsConnectedRxLE", HIDWORD(v11));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsScanRxBT", v11);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsScanRxLE", HIDWORD(v10));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsTotalPHYCal", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003A66A8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E5F4C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100437638(uint64);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003A676C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  char *string;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  xpc_object_t reply;
  void *v14;
  uint64_t v15;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  string = (char *)xpc_dictionary_get_string(value, "kCBMsgArgExtensionToken");
  v7 = xpc_dictionary_get_string(value, "kCBMsgArgPath");
  v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v15 - v10;
  bzero((char *)&v15 - v10, v8);
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E5FAC();
    if (string)
      goto LABEL_3;
LABEL_5:
    if (uint64)
      v12 = (int)sub_1004376C8(uint64, (uint64_t)v7, string, (uint64_t)v11, v8);
    else
      v12 = 1;
    goto LABEL_9;
  }
  if (!string)
    goto LABEL_5;
LABEL_3:
  if (!*string || *(_BYTE *)(*(_QWORD *)(a1 + 72) + 90))
    goto LABEL_5;
  v12 = 3;
LABEL_9:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v14 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v12);
    xpc_dictionary_set_string(v14, "kCBMsgArgName", v11);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v14);
    xpc_release(v14);
  }
}

void sub_1003A692C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  char *string;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  string = (char *)xpc_dictionary_get_string(value, "kCBMsgArgBundleIdString");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E600C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100437798(uint64, string);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003A6A14(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  const void *data;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;
  uint64_t v11;
  size_t length;

  length = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  data = xpc_dictionary_get_data(value, "kCBMsgArgData", &length);
  if (length == 10)
  {
    v7 = (uint64_t)data;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    {
      sub_1006E606C();
      if (uint64)
        goto LABEL_4;
    }
    else if (uint64)
    {
LABEL_4:
      v8 = (int)sub_100437884(uint64, v7);
LABEL_11:
      reply = xpc_dictionary_create_reply(xdict);
      if (!reply)
        return;
      v10 = reply;
      v11 = v8;
      goto LABEL_13;
    }
    v8 = 1;
    goto LABEL_11;
  }
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_FAULT))
    sub_1006E60CC();
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    v11 = 3;
LABEL_13:
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003A6B54(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E6104();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100437970(uint64, v6);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003A6C3C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  unsigned __int16 uint64;
  int v6;
  xpc_object_t reply;
  void *v8;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgDelay");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006E6164();
  v6 = sub_100437A9C(uint64);
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003A6CF0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  int v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E619C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100437B04(uint64, v6);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003A6DD8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  xpc_object_t reply;
  void *v13;
  xpc_object_t v14;
  unint64_t i;
  unint64_t v16;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  v16 = 0;
  v7 = os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG);
  if (v7)
    sub_1006E625C();
  __chkstk_darwin(v7, 248 * v6);
  v9 = (char *)&v16 - v8;
  bzero((char *)&v16 - v8, v10);
  if (uint64)
    v11 = (int)sub_100437B7C(uint64, v9, &v16, v6);
  else
    v11 = 1;
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v13 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
    v14 = xpc_array_create(0, 0);
    if (v16)
    {
      for (i = 0; i < v16; ++i)
      {
        xpc_array_set_string(v14, 0xFFFFFFFFFFFFFFFFLL, v9);
        v9 += 248;
      }
    }
    xpc_dictionary_set_value(v13, "kCBMsgArgDeviceArray", v14);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v13);
    xpc_release(v14);
    xpc_release(v13);
  }
}

void sub_1003A6F98(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  _BOOL8 v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  xpc_object_t reply;
  void *v12;
  xpc_object_t v13;
  unint64_t i;
  unint64_t v15;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  v15 = 0;
  v7 = os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG);
  if (v7)
    sub_1006E62BC();
  __chkstk_darwin(v7, 6 * v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v9, v8);
  if (uint64)
    v10 = (int)sub_100437C00(uint64, (uint64_t)v9, &v15);
  else
    v10 = 1;
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    v13 = xpc_array_create(0, 0);
    if (v15)
    {
      for (i = 0; i < v15; ++i)
      {
        xpc_array_set_data(v13, 0xFFFFFFFFFFFFFFFFLL, v9, 6uLL);
        v9 += 6;
      }
    }
    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v13);
    xpc_release(v12);
  }
}

void sub_1003A715C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E631C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100437CB8(uint64, (int *)&value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003A7244(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  xpc_object_t reply;
  void *v12;
  uint64_t v13;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v13 - v8;
  bzero((char *)&v13 - v8, v6);
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E637C();
    if (uint64)
    {
LABEL_3:
      if (*(int *)(*(_QWORD *)(a1 + 72) + 80) < 1)
        v10 = 13;
      else
        v10 = (int)sub_100437D60(uint64, v9, v6);
      goto LABEL_8;
    }
  }
  else if (uint64)
  {
    goto LABEL_3;
  }
  v10 = 1;
LABEL_8:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_dictionary_set_string(v12, "kCBMsgArgBufferName", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

void sub_1003A73C0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t reply;
  void *v9;
  unint64_t v10;
  const char *v11;
  xpc_object_t v12;
  uint64_t v13;
  char v14;
  char v15;
  void *v16;
  xpc_object_t xdicta;
  uint64_t v18;
  _WORD v19[7];
  int v20;
  _QWORD v21[2];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  bzero(v19, 0x21AuLL);
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006E63DC();
  if (uint64)
    v6 = (int)sub_100437E9C(uint64, v19);
  else
    v6 = 1;
  v7 = xpc_array_create(0, 0);
  v21[0] = 0;
  v21[1] = 0;
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    if (v19[0])
    {
      xdicta = v9;
      v18 = a1;
      v10 = 0;
      v11 = (const char *)&v20;
      do
      {
        v12 = xpc_dictionary_create(0, 0, 0);
        v21[v10] = v12;
        xpc_dictionary_set_uint64(v12, "kCBMsgArgRetX", *((unsigned __int8 *)v11 - 10));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgRssi", *(v11 - 9));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgNoise", *(v11 - 8));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgSnr", *((unsigned __int8 *)v11 - 7));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgDataRate", *((unsigned __int16 *)v11 - 3));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgJitterBuffer", *((unsigned __int16 *)v11 - 2));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgCodecType", *((unsigned __int16 *)v11 - 1));
        xpc_dictionary_set_string(v12, "kCBMsgArgName", v11);
        xpc_array_set_value(v7, 0xFFFFFFFFFFFFFFFFLL, v12);
        ++v10;
        v11 += 268;
      }
      while (v10 < v19[0]);
      v9 = xdicta;
      xpc_dictionary_set_value(xdicta, "kCBMsgArgBTLinkQualityData", v7);
      a1 = v18;
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    v13 = 0;
    v14 = 1;
    do
    {
      v15 = v14;
      v16 = (void *)v21[v13];
      if (v16)
        xpc_release(v16);
      v14 = 0;
      v13 = 1;
    }
    while ((v15 & 1) != 0);
    xpc_release(v7);
    xpc_release(v9);
  }
}

void sub_1003A7650(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  const uint8_t *uuid;
  int v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uuid = xpc_dictionary_get_uuid(value, "kCBMsgArgUUID");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E643C();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v8 = (int)sub_100437F9C(uint64, (uint64_t)uuid, v7);
    goto LABEL_6;
  }
  v8 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

uint64_t sub_1003A7750(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006E649C();
  sub_10001A82C(a1 + 80, *(_QWORD **)(a1 + 88));
  *(_QWORD *)a1 = &off_10092B270;
  sub_100069BDC(a1 + 8);
  return a1;
}

void sub_1003A77C0(uint64_t a1)
{
  sub_1003A7750(a1);
  operator delete();
}

uint64_t sub_1003A77E4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[2];

  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006E64FC();
  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 8);
  v2 = *(_QWORD **)(a1 + 80);
  v3 = (_QWORD *)(a1 + 88);
  if (v2 != (_QWORD *)(a1 + 88))
  {
    do
    {
      v4 = (_QWORD *)v2[4];
      v13 = 0uLL;
      v14 = 0;
      v6 = v4[2];
      v5 = v4[3];
      v13 = *(_OWORD *)v4;
      v14 = v6;
      v7 = v4[5];
      if (v6)
        v8 = 0;
      else
        v8 = *((_QWORD *)&v13 + 1) == 0;
      v9 = v8 && (_QWORD)v13 == 0;
      if (v9 || !*(_BYTE *)(a1 + 104))
      {
        if (v5)
        {
          if (*(_BYTE *)(a1 + 105))
          {
            sub_100437058(v7);
            *(_BYTE *)(a1 + 105) = 0;
          }
          else if (*(_BYTE *)(a1 + 106))
          {
            sub_100437238(v7);
            *(_BYTE *)(a1 + 106) = 0;
          }
        }
      }
      else
      {
        sub_100435AF0(v7, &v13);
        *(_BYTE *)(a1 + 104) = 0;
      }
      free(v4);
      v10 = (_QWORD *)v2[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v2[2];
          v8 = *v11 == (_QWORD)v2;
          v2 = v11;
        }
        while (!v8);
      }
      v2 = v11;
    }
    while (v11 != v3);
  }
  sub_10001A82C(a1 + 80, *(_QWORD **)(a1 + 88));
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = v3;
  return sub_100034234((uint64_t)v15);
}

void sub_1003A7938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003A794C(id a1)
{
  operator new();
}

void sub_1003A798C()
{
  operator delete();
}

void sub_1003A79B0(id a1)
{
  operator new();
}

void sub_1003A79F0()
{
  operator delete();
}

void sub_1003A7A14(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_1003A7A28()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  xmmword_100999468 = 0u;
  unk_100999478 = 0u;
  dword_100999488 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_1003A2244, &xmmword_100999468, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1003A7A78(uint64_t a1)
{
  int *v2;
  const __CFNumber *v3;
  const __CFNumber *v4;
  NSObject *v5;
  int v6;
  _DWORD v8[2];

  *(_QWORD *)a1 = &off_10092B570;
  *(_BYTE *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 8) = -1;
  v2 = (int *)(a1 + 8);
  v3 = (const __CFNumber *)MGCopyAnswer(CFSTR("DeviceClassNumber"), 0);
  if (v3)
  {
    v4 = v3;
    CFNumberGetValue(v3, kCFNumberIntType, v2);
    CFRelease(v4);
  }
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v6 = *v2;
    v8[0] = 67109120;
    v8[1] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "deviceClass=%d", (uint8_t *)v8, 8u);
  }
  return a1;
}

void sub_1003A7B78()
{
  operator delete();
}

uint64_t sub_1003A7B8C(int a1, std::string *this)
{
  std::string::assign(this, "Apple Inc.");
  return 0;
}

uint64_t sub_1003A7BB0(uint64_t a1, std::string *a2)
{
  utsname v4;

  bzero(&v4, 0x500uLL);
  uname(&v4);
  if (!v4.machine[0])
    return 1;
  std::string::assign(a2, v4.machine);
  return 0;
}

uint64_t sub_1003A7C40(uint64_t a1, std::string *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  int v10;
  id v11;

  v3 = objc_autoreleasePoolPush();
  v4 = (void *)MGCopyAnswer(CFSTR("MarketingDeviceFamilyName"), 0);
  v5 = v4;
  if (v4)
  {
    v6 = objc_retainAutorelease(v4);
    std::string::assign(a2, (const std::string::value_type *)objc_msgSend(v6, "UTF8String"));
    v7 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      v10 = 138412290;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "modelName=%@", (uint8_t *)&v10, 0xCu);
    }
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }

  objc_autoreleasePoolPop(v3);
  return v8;
}

void sub_1003A7D40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003A7D58(uint64_t a1, std::string *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  int v10;
  id v11;

  v3 = objc_autoreleasePoolPush();
  v4 = (void *)MGCopyAnswer(CFSTR("ProductType"), 0);
  v5 = v4;
  if (v4)
  {
    v6 = objc_retainAutorelease(v4);
    std::string::assign(a2, (const std::string::value_type *)objc_msgSend(v6, "UTF8String"));
    v7 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      v10 = 138412290;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "productType=%@", (uint8_t *)&v10, 0xCu);
    }
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }

  objc_autoreleasePoolPop(v3);
  return v8;
}

void sub_1003A7E58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003A7E70(uint64_t a1, std::string *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = objc_autoreleasePoolPush();
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"));
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "operatingSystemVersionString")));
  std::string::assign(a2, (const std::string::value_type *)objc_msgSend(v5, "UTF8String"));

  objc_autoreleasePoolPop(v3);
  return 0;
}

void sub_1003A7EE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003A7F00(uint64_t a1, std::string *a2, char a3)
{
  void *v5;
  CFAbsoluteTime Current;
  const __CFLocale *v7;
  __CFDateFormatter *v8;
  const __CFString *Format;
  const __CFString *v10;
  CFIndex location;
  const __CFString *v12;
  __CFString *StringWithAbsoluteTime;
  __CFString *v14;
  uint64_t v15;

  v5 = objc_autoreleasePoolPush();
  Current = CFAbsoluteTimeGetCurrent();
  v7 = CFLocaleCopyCurrent();
  v8 = CFDateFormatterCreate(0, v7, kCFDateFormatterNoStyle, kCFDateFormatterShortStyle);
  CFRelease(v7);
  Format = CFDateFormatterGetFormat(v8);
  if (Format)
  {
    v10 = Format;
    if (CFStringFind(Format, CFSTR("H"), 0).location == -1)
    {
      location = CFStringFind(v10, CFSTR("k"), 0).location;
      v12 = CFSTR("yy'/'MM'/'dd', 'HH':'mm':'ss");
      if (location != -1 || (a3 & 1) != 0)
        goto LABEL_9;
      goto LABEL_8;
    }
LABEL_7:
    v12 = CFSTR("yy'/'MM'/'dd', 'HH':'mm':'ss");
    goto LABEL_9;
  }
  if ((a3 & 1) != 0)
    goto LABEL_7;
LABEL_8:
  v12 = CFSTR("yy'/'MM'/'dd', 'hh':'mm':'ss");
LABEL_9:
  CFDateFormatterSetFormat(v8, v12);
  StringWithAbsoluteTime = (__CFString *)CFDateFormatterCreateStringWithAbsoluteTime(0, v8, Current);
  if (StringWithAbsoluteTime)
  {
    v14 = objc_retainAutorelease(StringWithAbsoluteTime);
    std::string::assign(a2, (const std::string::value_type *)-[__CFString UTF8String](v14, "UTF8String"));
    CFRelease(v14);
    v15 = 0;
  }
  else
  {
    v15 = 1;
  }
  CFRelease(v8);
  objc_autoreleasePoolPop(v5);
  return v15;
}

uint64_t sub_1003A8038(uint64_t a1, int a2)
{
  const std::string::value_type *v4;
  uint64_t v5;
  int v6;
  int v7;
  NSObject *v8;
  std::string *v9;
  BOOL v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  char v23;
  char v24;
  std::string v25;
  unsigned __int8 v26;
  uint8_t buf[8];
  __int16 v28;
  std::string *v29;
  char v30;

  v26 = 1;
  memset(&v25, 0, sizeof(v25));
  sub_100091AE8(&v25, "");
  if (a2 <= 511)
  {
    if (a2 <= 15)
    {
      switch(a2)
      {
        case 1:
          v4 = "handsfree";
          break;
        case 2:
          v4 = "phonebook";
          break;
        case 8:
          v4 = "avrcp";
          break;
        default:
          goto LABEL_38;
      }
    }
    else if (a2 > 127)
    {
      if (a2 == 128)
      {
        v4 = "wiap";
      }
      else
      {
        if (a2 != 256)
          goto LABEL_38;
        v4 = "netSharing";
      }
    }
    else if (a2 == 16)
    {
      v4 = "a2dp";
    }
    else
    {
      if (a2 != 32)
        goto LABEL_38;
      v4 = "hid";
    }
  }
  else if (a2 >= 0x20000)
  {
    if (a2 >= 0x80000)
    {
      if (a2 == 0x80000)
      {
        v4 = "aacp";
      }
      else
      {
        if (a2 != 0x100000)
          goto LABEL_38;
        v4 = "GATT";
      }
    }
    else if (a2 == 0x20000)
    {
      v4 = "wiapSink";
    }
    else
    {
      if (a2 != 0x40000)
        goto LABEL_38;
      v4 = "wirelessCarplay";
    }
  }
  else if (a2 > 4095)
  {
    if (a2 == 4096)
    {
      v4 = "netConsumer";
    }
    else
    {
      if (a2 != 0x2000)
        goto LABEL_38;
      v4 = "braille";
    }
  }
  else if (a2 == 512)
  {
    v4 = "MAP";
  }
  else
  {
    if (a2 != 2048)
      goto LABEL_38;
    v4 = "d2d";
  }
  std::string::assign(&v25, v4);
LABEL_38:
  v5 = sub_100027F68();
  sub_100091AE8(buf, "ServiceSettings");
  v6 = (*(uint64_t (**)(uint64_t, std::string *, uint8_t *, unsigned __int8 *))(*(_QWORD *)v5 + 72))(v5, &v25, buf, &v26);
  v7 = v6;
  if (v30 < 0)
  {
    operator delete(*(void **)buf);
    if (v7)
      goto LABEL_40;
  }
  else if (v6)
  {
LABEL_40:
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = &v25;
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v9 = (std::string *)v25.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v26;
      v28 = 2082;
      v29 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: Using override value %d for service %{public}s", buf, 0x12u);
    }
    v10 = v26 == 0;
    goto LABEL_77;
  }
  v11 = *(_DWORD *)(a1 + 8);
  v12 = 2046907;
  switch(v11)
  {
    case 1:
      break;
    case 2:
      v12 = 1653433;
      break;
    case 3:
      if (MGGetBoolAnswer(CFSTR("cellular-data")))
        v12 = 2046905;
      else
        v12 = 2046649;
      break;
    case 4:
      v13 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 416))(v13))
        v14 = 128;
      else
        v14 = 127;
      v12 = v14 + 1581113;
      break;
    case 6:
      v24 = 0;
      v16 = sub_100027F68();
      sub_100091AE8(buf, "StackSettings");
      sub_100091AE8(__p, "HFServiceEnable");
      (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v16 + 72))(v16, buf, __p, &v24);
      if (v23 < 0)
        operator delete(__p[0]);
      if (v30 < 0)
        operator delete(*(void **)buf);
      v12 = 1581113;
      if (v24)
      {
        v17 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = 1581113;
          v18 = "Warning: Enabling HF Service using override, serviceMask is now 0x%x";
          goto LABEL_72;
        }
      }
      else
      {
        v12 = 1581112;
      }
      break;
    case 7:
      v12 = 0x20000;
      break;
    case 9:
      v24 = 0;
      v19 = sub_100027F68();
      sub_100091AE8(buf, "IAP");
      sub_100091AE8(__p, "enableIAP");
      (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v19 + 72))(v19, buf, __p, &v24);
      if (v23 < 0)
        operator delete(__p[0]);
      if (v30 < 0)
        operator delete(*(void **)buf);
      v12 = 1782201;
      if (v24)
      {
        v17 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = 1782201;
          v18 = "Warning: Enabling IAP using override, serviceMask is now 0x%x";
LABEL_72:
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v18, buf, 8u);
        }
      }
      else
      {
        v12 = 1782073;
      }
      break;
    case 11:
      v12 = 1784505;
      break;
    default:
      v12 = 789176;
      v15 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E655C(v11, v15);
      break;
  }
  v10 = (v12 & a2) == 0;
LABEL_77:
  v20 = !v10;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  return v20;
}

void sub_1003A8560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A85D8()
{
  unsigned int v0;

  v0 = sub_10005F864() - 135;
  return (v0 > 0x1A) | (0x5E07FCu >> v0) & 1;
}

uint64_t sub_1003A860C()
{
  unsigned int v0;

  v0 = sub_10005F864() - 135;
  return (v0 > 0x1A) | (0x5E07FCu >> v0) & 1;
}

uint64_t sub_1003A8640(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  void *__p[2];
  char v8;
  unsigned int v9;
  uint8_t buf[8];
  char v11;

  v1 = *(_DWORD *)(a1 + 8) - 1;
  if (v1 > 0xA)
    v2 = 0;
  else
    v2 = dword_10073FDAC[v1];
  v9 = 0;
  v3 = sub_100027F68();
  sub_100091AE8(buf, "Device");
  sub_100091AE8(__p, "ClassOfDevice");
  v4 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned int *))(*(_QWORD *)v3 + 88))(v3, buf, __p, &v9);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
  {
    operator delete(*(void **)buf);
    if (!v4)
      return v2;
  }
  else if (!v4)
  {
    return v2;
  }
  v2 = v9;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Class of device set to %d", buf, 8u);
  }
  return v2;
}

void sub_1003A8780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A87BC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  int v14;
  int v15;

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v3 = *(_DWORD *)(a1 + 8);
    v14 = 67109120;
    v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "getPairingInputs deviceClass=%d", (uint8_t *)&v14, 8u);
  }
  v4 = *(_DWORD *)(a1 + 8);
  if ((v4 - 1) < 3)
  {
    v8 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
LABEL_10:
      v6 = 3;
      goto LABEL_25;
    }
    LOWORD(v14) = 0;
    v9 = "iphone/ipod/ipad";
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v9, (uint8_t *)&v14, 2u);
    goto LABEL_10;
  }
  if ((v4 - 6) < 2)
  {
    v5 = qword_1009997E8;
    v6 = 1;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
      goto LABEL_25;
    LOWORD(v14) = 0;
    v7 = "watch/homepod";
    goto LABEL_20;
  }
  if (v4 == 4)
  {
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
    {
      LOWORD(v14) = 0;
      v7 = "appleTV";
LABEL_14:
      v6 = 2;
LABEL_20:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v14, 2u);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v10 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    LOWORD(v14) = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "dunno", (uint8_t *)&v14, 2u);
  }
  v11 = sub_10005F864();
  if ((v11 - 170) < 5)
  {
    v5 = qword_1009997E8;
    v6 = 1;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
      goto LABEL_25;
    LOWORD(v14) = 0;
    v7 = "531/541/8006";
    goto LABEL_20;
  }
  if (v11 != 267)
  {
    v8 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
      goto LABEL_10;
    LOWORD(v14) = 0;
    v9 = "default";
    goto LABEL_9;
  }
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    LOWORD(v14) = 0;
    v7 = "unknown";
    goto LABEL_14;
  }
LABEL_24:
  v6 = 2;
LABEL_25:
  v12 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v14 = 67109120;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "selected input caps : %d", (uint8_t *)&v14, 8u);
  }
  return v6;
}

BOOL sub_1003A8A6C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  void *__p[2];
  char v7;
  char v8;
  _BYTE buf[12];
  char v10;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1) & 1) != 0)
    return 1;
  v8 = 0;
  v1 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "SupportsScalablePipes");
  v2 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, __p, &v8);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
  {
    operator delete(*(void **)buf);
    if (v2)
      goto LABEL_6;
    return 1;
  }
  if (!v2)
    return 1;
LABEL_6:
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (v8)
      v4 = "enabled";
    else
      v4 = "disabled";
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: Overriding scalable pipe support - pipes are %{public}s", buf, 0xCu);
  }
  return v8 != 0;
}

void sub_1003A8BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

BOOL sub_1003A8BF8(uint64_t a1)
{
  int v2;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1) & 1) != 0)
    return 1;
  v2 = sub_10005F864();
  return (v2 - 4) < 2 || v2 == 134;
}

uint64_t sub_1003A8C44()
{
  __int128 v1;
  int v2;

  v1 = xmmword_10073F85B;
  v2 = -2114570942;
  return MGIsDeviceOneOfType(&v1);
}

uint64_t sub_1003A95A4()
{
  int v0;
  uint64_t result;

  v0 = sub_10005F864();
  result = 1;
  switch(v0)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 54:
    case 56:
    case 58:
    case 62:
    case 64:
    case 66:
    case 76:
    case 78:
    case 80:
    case 84:
    case 86:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 105:
    case 106:
    case 107:
    case 108:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 152:
    case 168:
    case 169:
    case 170:
    case 171:
    case 174:
    case 177:
    case 178:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 201:
    case 202:
    case 203:
    case 206:
    case 207:
    case 208:
    case 211:
    case 212:
    case 213:
    case 214:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL sub_1003A95EC()
{
  return sub_10005F864() < 4;
}

BOOL sub_1003A9608()
{
  return (*(_DWORD *)(sub_1000438A4() + 712) - 15) < 0xF91;
}

BOOL sub_1003A962C(uint64_t a1)
{
  _BOOL8 result;
  int v2;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1))
    return (*(_DWORD *)(sub_1000438A4() + 712) - 20) < 0x7BC;
  v2 = sub_10005F864() - 10;
  result = 1;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 95:
    case 96:
    case 97:
    case 98:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 138:
    case 140:
    case 142:
    case 146:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL sub_1003A9698()
{
  return ((sub_10005F864() - 125) & 0xFFFFFFFD) == 0;
}

uint64_t sub_1003A96B8()
{
  unsigned int v0;

  v0 = sub_10005F864() - 67;
  return (v0 < 0x12) & (0x200FFu >> v0);
}

BOOL sub_1003A96E8(uint64_t a1)
{
  _BOOL8 result;
  int v2;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1))
    return (*(_DWORD *)(sub_1000438A4() + 712) - 20) < 0x7BC;
  v2 = sub_10005F864() - 20;
  result = 1;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 85:
    case 86:
    case 87:
    case 88:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 123:
    case 124:
    case 128:
    case 130:
    case 132:
    case 136:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

BOOL sub_1003A9754(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1))
    return (*(_DWORD *)(sub_1000438A4() + 712) - 20) < 0x7BC;
  v1 = 1;
  v2 = sub_10005F864();
  if ((v2 > 0x32 || ((1 << v2) & 0x7FFFFF0F00000) == 0)
    && (v2 - 93 > 0x3F || ((1 << (v2 - 93)) & 0x8884000FFDF8F003) == 0))
  {
    return 0;
  }
  return v1;
}

BOOL sub_1003A97F8()
{
  return (*(_DWORD *)(sub_1000438A4() + 712) - 22) < 0x7BA;
}

BOOL sub_1003A981C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  BOOL v6;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;
  char v11;

  v11 = 1;
  v0 = sub_100027F68();
  sub_100091AE8(v9, "Device");
  sub_100091AE8(__p, "EnableHDR");
  (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v0 + 72))(v0, v9, __p, &v11);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (!v11)
    return 0;
  v1 = *(_DWORD *)(sub_1000438A4() + 712);
  v2 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 344))(v2) & 1) != 0)
    return 0;
  v3 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 336))(v3) & 1) != 0)
    return 0;
  v5 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 384))(v5))
    v6 = (v1 - 21) >= 0x7BB;
  else
    v6 = (v1 - 20) >= 0x7BC;
  return !v6;
}

void sub_1003A9914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003A9948()
{
  unsigned int v0;

  v0 = sub_10005F864() - 53;
  return (v0 < 0x1A) & (0x3C003FFu >> v0);
}

uint64_t sub_1003A9978()
{
  unsigned int v0;
  unsigned int v1;
  unsigned int v2;

  v0 = *(_DWORD *)(sub_1000438A4() + 712);
  v1 = _os_feature_enabled_impl("BluetoothFeatures", "UseLowLatencyGameControllers");
  if (v0 - 1 < 0x7CF)
    v2 = v1;
  else
    v2 = 0;
  if (v0 > 0xC)
    return v2;
  else
    return 0;
}

uint64_t sub_1003A99C0(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
  if ((_DWORD)result)
    return _os_feature_enabled_impl("BluetoothFeatures", "UserSpaceMacOSHIDDrivers");
  return result;
}

uint64_t sub_1003A99F8(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
  if ((_DWORD)result)
    return _os_feature_enabled_impl("BluetoothFeatures", "ThirdPartyHIDsOffHIDShimKernelDriver");
  return result;
}

uint64_t sub_1003A9A30()
{
  if (qword_100991FC0 != -1)
    dispatch_once(&qword_100991FC0, &stru_10092B950);
  return byte_100991FB8;
}

void sub_1003A9A70(id a1)
{
  byte_100991FB8 = MGGetBoolAnswer(CFSTR("HasBaseband"));
}

uint64_t sub_1003A9A94()
{
  return 0;
}

BOOL sub_1003A9A9C()
{
  return sub_10005F864() - 67 < 8;
}

BOOL sub_1003A9ABC()
{
  uint64_t v0;
  int v1;
  BOOL v2;

  v0 = 1;
  v1 = sub_10005F864();
  v2 = (v1 - 230) > 0x15 || v1 == 231;
  if (v2 && ((v1 - 112) > 0x29 || ((1 << (v1 - 112)) & 0x2000001E78FLL) == 0))
    return (v1 - 44) < 6;
  return v0;
}

uint64_t sub_1003A9B24()
{
  return 1;
}

uint64_t sub_1003A9B2C()
{
  return 0;
}

uint64_t sub_1003A9B34()
{
  return 0;
}

void sub_1003A9B3C(id a1)
{
  byte_100991FC8 = sub_1003A9B60((uint64_t)CFSTR("iPhone"));
}

id sub_1003A9B60(uint64_t a1)
{
  id result;
  const void *v3;
  id v4;

  result = (id)MGGetStringAnswer(CFSTR("DeviceClass"));
  if (result)
  {
    v3 = result;
    v4 = objc_msgSend(result, "isEqualToString:", a1);
    CFRelease(v3);
    return v4;
  }
  return result;
}

uint64_t sub_1003A9BA8()
{
  if (qword_100991FE0 != -1)
    dispatch_once(&qword_100991FE0, &stru_10092B990);
  return byte_100991FD8;
}

void sub_1003A9BE8(id a1)
{
  byte_100991FD8 = sub_1003A9B60((uint64_t)CFSTR("iPad"));
}

uint64_t sub_1003A9C0C()
{
  if (qword_100991FF0 != -1)
    dispatch_once(&qword_100991FF0, &stru_10092B9B0);
  return byte_100991FE8;
}

void sub_1003A9C4C(id a1)
{
  byte_100991FE8 = sub_1003A9B60((uint64_t)CFSTR("iPod"));
}

void sub_1003A9C70(id a1)
{
  byte_100991FF8 = sub_1003A9B60((uint64_t)CFSTR("Watch"));
}

void sub_1003A9C94(id a1)
{
  byte_100992008 = sub_1003A9B60((uint64_t)CFSTR("Mac"));
}

uint64_t sub_1003A9CB8()
{
  if (qword_100992020 != -1)
    dispatch_once(&qword_100992020, &stru_10092BA10);
  return byte_100992018;
}

void sub_1003A9CF8(id a1)
{
  byte_100992018 = sub_1003A9B60((uint64_t)CFSTR("RealityDevice"));
}

uint64_t sub_1003A9D1C()
{
  return MGGetBoolAnswer(CFSTR("pX2TxZTxWKS7QSXZDC/Z6A"));
}

uint64_t sub_1003A9D28()
{
  if (qword_100992030 != -1)
    dispatch_once(&qword_100992030, &stru_10092BA30);
  return byte_100992028;
}

void sub_1003A9D68(id a1)
{
  byte_100992028 = sub_1003A9B60((uint64_t)CFSTR("AudioAccessory"));
}

uint64_t sub_1003A9D8C()
{
  if (qword_100992040 != -1)
    dispatch_once(&qword_100992040, &stru_10092BA50);
  return byte_100992038;
}

void sub_1003A9DCC(id a1)
{
  byte_100992038 = sub_1003A9B60((uint64_t)CFSTR("AppleTV"));
}

BOOL sub_1003A9DF0()
{
  if (qword_100992050 != -1)
    dispatch_once(&qword_100992050, &stru_10092BA70);
  return (byte_100992048 & 1) == 0;
}

void sub_1003A9E38(id a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = MGGetProductType(a1);
  if (v1 <= 1110205731)
  {
    if (v1 != 33245053)
    {
      v2 = 741626682;
LABEL_7:
      if (v1 != v2)
        return;
    }
  }
  else if (v1 != 1110205732 && v1 != 2692844695)
  {
    v2 = 2271819421;
    goto LABEL_7;
  }
  byte_100992048 = 1;
}

uint64_t sub_1003A9EB4()
{
  return 60;
}

uint64_t sub_1003A9EBC(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 376))(a1))
    return 60;
  else
    return 180;
}

uint64_t sub_1003A9EE8()
{
  uint64_t v0;
  int v1;
  NSObject *v2;
  void *__p[2];
  char v5;
  uint8_t buf[8];
  char v7;
  unsigned __int8 v8;

  v8 = 0;
  v0 = sub_100027F68();
  sub_100091AE8(buf, "SMP");
  sub_100091AE8(__p, "DisableCTKD");
  v1 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(_QWORD *)v0 + 72))(v0, buf, __p, &v8);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
  {
    operator delete(*(void **)buf);
    if (!v1)
      return v8;
  }
  else if (!v1)
  {
    return v8;
  }
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Warning: DisableCTKD", buf, 2u);
  }
  return v8;
}

void sub_1003A9FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AA000()
{
  if (qword_100992060 != -1)
    dispatch_once(&qword_100992060, &stru_10092BA90);
  return byte_100992058;
}

void sub_1003AA040(id a1)
{
  char *v1;
  io_registry_entry_t v2;
  io_object_t v3;
  CFTypeRef CFProperty;
  int v5;
  NSObject *v6;
  uint8_t buf[4];
  int v8;

  v1 = (char *)malloc_type_malloc(0x16uLL, 0x95A13758uLL);
  snprintf(v1, 0x16uLL, "%s%s", "IODeviceTree", ":/product");
  v2 = IORegistryEntryFromPath(kIOMainPortDefault, v1);
  if (v2)
  {
    v3 = v2;
    CFProperty = IORegistryEntryCreateCFProperty(v2, CFSTR("boot-ios-diagnostics"), kCFAllocatorDefault, 0);
    if (CFProperty)
    {
      CFRelease(CFProperty);
      v5 = 1;
    }
    else
    {
      v5 = 0;
    }
    IOObjectRelease(v3);
    if (v1)
      goto LABEL_8;
  }
  else
  {
    v5 = 0;
    if (v1)
LABEL_8:
      free(v1);
  }
  byte_100992058 = v5;
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting diagnositcs mode to %d", buf, 8u);
  }
}

void sub_1003AA190(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  BOOL v9;
  char v10;
  NSObject *v11;
  const char *v12;
  void *__p[2];
  char v14;
  unsigned __int8 v15;
  _BYTE buf[12];
  char v17;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 336))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 344))(v1))
  {
    v2 = sub_1000438A4();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2128))(v2);
    byte_100992068 = v3;
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "disabled";
      if (v3)
        v5 = "enabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for extended scans : %s", buf, 0xCu);
    }
    v15 = 0;
    v6 = sub_100027F68();
    sub_100091AE8(buf, "AE");
    sub_100091AE8(__p, "DisableExtScans");
    v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7)
        goto LABEL_24;
    }
    else if (!v7)
    {
      goto LABEL_24;
    }
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding DisableExtScans=%d", buf, 8u);
    }
    if (byte_100992068)
      v9 = v15 == 0;
    else
      v9 = 0;
    v10 = v9;
    byte_100992068 = v10;
  }
LABEL_24:
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992068)
      v12 = "enabled";
    else
      v12 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for Extended Scanning is %s", buf, 0xCu);
  }
}

void sub_1003AA3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1003AA438(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  BOOL v9;
  char v10;
  NSObject *v11;
  const char *v12;
  void *__p[2];
  char v14;
  unsigned __int8 v15;
  _BYTE buf[12];
  char v17;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 336))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 344))(v1))
  {
    v2 = sub_1000438A4();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 1992))(v2);
    byte_100992078 = v3;
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "disabled";
      if (v3)
        v5 = "enabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for extended advertisingsets : %s", buf, 0xCu);
    }
    v15 = 0;
    v6 = sub_100027F68();
    sub_100091AE8(buf, "AE");
    sub_100091AE8(__p, "DisableExtAdvertising");
    v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7)
        goto LABEL_24;
    }
    else if (!v7)
    {
      goto LABEL_24;
    }
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding DisableAdvertising=%d", buf, 8u);
    }
    if (byte_100992078)
      v9 = v15 == 0;
    else
      v9 = 0;
    v10 = v9;
    byte_100992078 = v10;
  }
LABEL_24:
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992078)
      v12 = "enabled";
    else
      v12 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for Extended Advertising is %s", buf, 0xCu);
  }
}

void sub_1003AA6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AA6E0()
{
  if (qword_100992090 != -1)
    dispatch_once(&qword_100992090, &stru_10092BAB0);
  return byte_100992088;
}

void sub_1003AA720(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  BOOL v8;
  char v9;
  NSObject *v10;
  const char *v11;
  void *__p[2];
  char v13;
  unsigned __int8 v14;
  _BYTE buf[12];
  char v16;

  v1 = sub_1000438A4();
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2000))(v1);
  byte_100992088 = v2;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = "disabled";
    if (v2)
      v4 = "enabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for periodic advertising advertiser : %s", buf, 0xCu);
    v2 = byte_100992088;
  }
  if (v2)
  {
    v14 = 0;
    v5 = sub_100027F68();
    sub_100091AE8(buf, "AE");
    sub_100091AE8(__p, "DisablePeriodicAdvertisingAdv");
    v6 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v5 + 72))(v5, buf, __p, &v14);
    if (v13 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
    {
      operator delete(*(void **)buf);
      if (!v6)
        goto LABEL_21;
    }
    else if (!v6)
    {
      goto LABEL_21;
    }
    v7 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Overriding DisablePeriodicAdvertisingAdv=%d", buf, 8u);
    }
    if (byte_100992088)
      v8 = v14 == 0;
    else
      v8 = 0;
    v9 = v8;
    byte_100992088 = v9;
  }
LABEL_21:
  v10 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992088)
      v11 = "enabled";
    else
      v11 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "support for Periodic Advertising Advertiser is %s", buf, 0xCu);
  }
}

void sub_1003AA940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AA97C()
{
  if (qword_1009920A0 != -1)
    dispatch_once(&qword_1009920A0, &stru_10092BAD0);
  return byte_100992098;
}

void sub_1003AA9BC(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  BOOL v8;
  char v9;
  NSObject *v10;
  const char *v11;
  void *__p[2];
  char v13;
  unsigned __int8 v14;
  _BYTE buf[12];
  char v16;

  v1 = sub_1000438A4();
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2008))(v1);
  byte_100992098 = v2;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = "disabled";
    if (v2)
      v4 = "enabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for periodic advertising synchronizer : %s", buf, 0xCu);
    v2 = byte_100992098;
  }
  if (v2)
  {
    v14 = 0;
    v5 = sub_100027F68();
    sub_100091AE8(buf, "AE");
    sub_100091AE8(__p, "DisablePeriodicAdvertisingSync");
    v6 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v5 + 72))(v5, buf, __p, &v14);
    if (v13 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
    {
      operator delete(*(void **)buf);
      if (!v6)
        goto LABEL_21;
    }
    else if (!v6)
    {
      goto LABEL_21;
    }
    v7 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Overriding DisablePeriodicAdvertisingSync=%d", buf, 8u);
    }
    if (byte_100992098)
      v8 = v14 == 0;
    else
      v8 = 0;
    v9 = v8;
    byte_100992098 = v9;
  }
LABEL_21:
  v10 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992098)
      v11 = "enabled";
    else
      v11 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "support for Periodic Advertising Synchronizer is %s", buf, 0xCu);
  }
}

void sub_1003AABDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AAC18()
{
  if (qword_1009920B0 != -1)
    dispatch_once(&qword_1009920B0, &stru_10092BAF0);
  return byte_1009920A8;
}

void sub_1003AAC58(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  BOOL v8;
  char v9;
  NSObject *v10;
  const char *v11;
  void *__p[2];
  char v13;
  unsigned __int8 v14;
  _BYTE buf[12];
  char v16;

  v1 = sub_1000438A4();
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2016))(v1);
  byte_1009920A8 = v2;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = "disabled";
    if (v2)
      v4 = "enabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for periodic advertising sync transfer sender : %s", buf, 0xCu);
    v2 = byte_1009920A8;
  }
  if (v2)
  {
    v14 = 0;
    v5 = sub_100027F68();
    sub_100091AE8(buf, "AE");
    sub_100091AE8(__p, "DisablePeriodicAdvSyncTranSender");
    v6 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v5 + 72))(v5, buf, __p, &v14);
    if (v13 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
    {
      operator delete(*(void **)buf);
      if (!v6)
        goto LABEL_21;
    }
    else if (!v6)
    {
      goto LABEL_21;
    }
    v7 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Overriding DisablePeriodicAdvSyncTranSender=%d", buf, 8u);
    }
    if (byte_1009920A8)
      v8 = v14 == 0;
    else
      v8 = 0;
    v9 = v8;
    byte_1009920A8 = v9;
  }
LABEL_21:
  v10 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1009920A8)
      v11 = "enabled";
    else
      v11 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "support for Periodic Advertising Sync Transfer Sender is %s", buf, 0xCu);
  }
}

void sub_1003AAE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AAEB4()
{
  if (qword_1009920C0 != -1)
    dispatch_once(&qword_1009920C0, &stru_10092BB10);
  return byte_1009920B8;
}

void sub_1003AAEF4(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  BOOL v8;
  char v9;
  NSObject *v10;
  const char *v11;
  void *__p[2];
  char v13;
  unsigned __int8 v14;
  _BYTE buf[12];
  char v16;

  v1 = sub_1000438A4();
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2024))(v1);
  byte_1009920B8 = v2;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = "disabled";
    if (v2)
      v4 = "enabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for periodic advertising sync transfer recipient: %s", buf, 0xCu);
    v2 = byte_1009920B8;
  }
  if (v2)
  {
    v14 = 0;
    v5 = sub_100027F68();
    sub_100091AE8(buf, "AE");
    sub_100091AE8(__p, "DisablePeriodicAdvSyncTranRecipient");
    v6 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v5 + 72))(v5, buf, __p, &v14);
    if (v13 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
    {
      operator delete(*(void **)buf);
      if (!v6)
        goto LABEL_21;
    }
    else if (!v6)
    {
      goto LABEL_21;
    }
    v7 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Overriding DisablePeriodicAdvSyncTranRecipient=%d", buf, 8u);
    }
    if (byte_1009920B8)
      v8 = v14 == 0;
    else
      v8 = 0;
    v9 = v8;
    byte_1009920B8 = v9;
  }
LABEL_21:
  v10 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1009920B8)
      v11 = "enabled";
    else
      v11 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "support for Periodic Advertising Sync Transfer Recipient is %s", buf, 0xCu);
  }
}

void sub_1003AB114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1003AB150(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  const char *v7;
  int v8;
  const char *v9;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 336))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1))
  {
    v2 = sub_1000438A4();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2032))(v2);
    byte_1009920C8 = v3;
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "disabled";
      if (v3)
        v5 = "enabled";
      v8 = 136315138;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for extended advertising report with scan source core : %s", (uint8_t *)&v8, 0xCu);
    }
  }
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1009920C8)
      v7 = "enabled";
    else
      v7 = "disabled";
    v8 = 136315138;
    v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "support for extended advertising report with scan source core is %s", (uint8_t *)&v8, 0xCu);
  }
}

void sub_1003AB2CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  const char *v7;
  int v8;
  const char *v9;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 336))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1))
  {
    v2 = sub_1000438A4();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2040))(v2);
    byte_1009920D8 = v3;
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "disabled";
      if (v3)
        v5 = "enabled";
      v8 = 136315138;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for extended advertising report with pass up : %s", (uint8_t *)&v8, 0xCu);
    }
  }
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1009920D8)
      v7 = "enabled";
    else
      v7 = "disabled";
    v8 = 136315138;
    v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "support for extended advertising report with pass up is %s", (uint8_t *)&v8, 0xCu);
  }
}

void sub_1003AB448(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  const char *v7;
  int v8;
  const char *v9;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 336))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1))
  {
    v2 = sub_1000438A4();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2048))(v2);
    byte_1009920E8 = v3;
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "disabled";
      if (v3)
        v5 = "enabled";
      v8 = 136315138;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for extended advertising report with ELNA mode : %s", (uint8_t *)&v8, 0xCu);
    }
  }
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1009920E8)
      v7 = "enabled";
    else
      v7 = "disabled";
    v8 = 136315138;
    v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "support for extended advertising report with ELNA mode is %s", (uint8_t *)&v8, 0xCu);
  }
}

uint64_t sub_1003AB5C4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AB638;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992100 != -1)
    dispatch_once(&qword_100992100, block);
  return byte_1009920F8;
}

void sub_1003AB638(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  BOOL v9;
  char v10;
  NSObject *v11;
  const char *v12;
  void *__p[2];
  char v14;
  unsigned __int8 v15;
  _BYTE buf[12];
  char v17;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 400))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 376))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1))
  {
    v2 = sub_1000438A4();
    byte_1009920F8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2200))(v2);
    if (sub_10005F864() == 93 || sub_10005F864() == 94)
    {
      v3 = sub_1000438A4();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3))
        byte_1009920F8 = 0;
    }
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (byte_1009920F8)
        v5 = "enabled";
      else
        v5 = "disabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for LowPowerCore Scan : %s", buf, 0xCu);
    }
    v15 = 0;
    v6 = sub_100027F68();
    sub_100091AE8(buf, "LowPowerCoreScan");
    sub_100091AE8(__p, "DisableLowPowerCoreScan");
    v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7)
        goto LABEL_29;
    }
    else if (!v7)
    {
      goto LABEL_29;
    }
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding Disabling LowPowerCore Scan=%d", buf, 8u);
    }
    if (byte_1009920F8)
      v9 = v15 == 0;
    else
      v9 = 0;
    v10 = v9;
    byte_1009920F8 = v10;
  }
LABEL_29:
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1009920F8)
      v12 = "enabled";
    else
      v12 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for new LowPowerCore scan is %s", buf, 0xCu);
  }
}

void sub_1003AB8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AB910(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AB984;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992110 != -1)
    dispatch_once(&qword_100992110, block);
  return byte_100992108;
}

void sub_1003AB984(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  const char *v6;
  int v7;
  const char *v8;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 328))(*(_QWORD *)(a1 + 32)))
  {
    v1 = sub_1000438A4();
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2056))(v1);
    byte_100992108 = v2;
    v3 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = "disabled";
      if (v2)
        v4 = "enabled";
      v7 = 136315138;
      v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for extended advertising report with SC Compensation : %s", (uint8_t *)&v7, 0xCu);
    }
  }
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992108)
      v6 = "enabled";
    else
      v6 = "disabled";
    v7 = 136315138;
    v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "support for extended advertising report with SC Compensation is %s", (uint8_t *)&v7, 0xCu);
  }
}

uint64_t sub_1003ABAD4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003ABB48;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992120 != -1)
    dispatch_once(&qword_100992120, block);
  return dword_100992118;
}

void sub_1003ABB48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  NSObject *v11;
  void *__p[2];
  char v13;
  int v14;
  uint8_t buf[8];
  __int16 v16;
  int v17;
  char v18;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_1000438A4();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2072))(v2);
  if (v3)
  {
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for extended advertising report with antenna enabled", buf, 2u);
    }
  }
  v5 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 2064))(v5))
  {
    v6 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BT chip support for extended advertising report with Coex Denial enabled", buf, 2u);
    }
  }
  if ((*(_DWORD *)(sub_1000438A4() + 712) - 1) <= 0x7CE)
  {
    if (v3)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
        || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1) & 1) != 0
        || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 424))(v1))
      {
        v7 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "getEstimateScanRequestTxDeniedByCoexType : Yes", buf, 2u);
        }
        dword_100992118 = 1;
      }
      v14 = 0;
      v8 = sub_100027F68();
      sub_100091AE8(buf, "BBFC");
      sub_100091AE8(__p, "EnableEstimateScanRequestTxDeniedByCoex");
      v9 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v8 + 88))(v8, buf, __p, &v14);
      if (v13 < 0)
        operator delete(__p[0]);
      if (v18 < 0)
        operator delete(*(void **)buf);
      if (v9)
      {
        v10 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = dword_100992118;
          v16 = 1024;
          v17 = v14;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "getEstimateScanRequestTxDeniedByCoexType (overriden): original %d overriden %d", buf, 0xEu);
        }
        dword_100992118 = v14;
      }
    }
    else
    {
      v11 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "getEstimateScanRequestTxDeniedByCoexType : No", buf, 2u);
      }
    }
  }
}

void sub_1003ABE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1003ABE58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  BOOL v10;
  char v11;
  NSObject *v12;
  const char *v13;
  void *__p[2];
  char v15;
  unsigned __int8 v16;
  _BYTE buf[12];
  char v18;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 400))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1))
  {
    v2 = sub_1000438A4();
    byte_100992128 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2192))(v2);
    if (sub_10005F864() == 93 || sub_10005F864() == 94)
    {
      v3 = sub_1000438A4();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3))
        byte_100992128 = 0;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1)
      && *(_DWORD *)(sub_1000438A4() + 712) == 21)
    {
      byte_100992128 = 0;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 424))(v1))
    {
      v4 = sub_1000438A4();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4))
        byte_100992128 = 0;
    }
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (byte_100992128)
        v6 = "enabled";
      else
        v6 = "disabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BT chip support for LowPowerCore Scan : %s", buf, 0xCu);
    }
    v16 = 0;
    v7 = sub_100027F68();
    sub_100091AE8(buf, "LowPowerCoreScan");
    sub_100091AE8(__p, "DisableLowPowerCoreScan");
    v8 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v7 + 72))(v7, buf, __p, &v16);
    if (v15 < 0)
      operator delete(__p[0]);
    if (v18 < 0)
    {
      operator delete(*(void **)buf);
      if (!v8)
        goto LABEL_34;
    }
    else if (!v8)
    {
      goto LABEL_34;
    }
    v9 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Overriding Disabling LowPowerCore Scan=%d", buf, 8u);
    }
    if (byte_100992128)
      v10 = v16 == 0;
    else
      v10 = 0;
    v11 = v10;
    byte_100992128 = v11;
  }
LABEL_34:
  v12 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992128)
      v13 = "enabled";
    else
      v13 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "support for new LowPowerCore scan is %s", buf, 0xCu);
  }
}

void sub_1003AC134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AC170(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AC1E4;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992140 != -1)
    dispatch_once(&qword_100992140, block);
  return byte_100992138;
}

void sub_1003AC1E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  BOOL v9;
  char v10;
  NSObject *v11;
  const char *v12;
  void *__p[2];
  char v14;
  unsigned __int8 v15;
  _BYTE buf[12];
  char v17;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 400))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1))
  {
    v2 = sub_1000438A4();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2208))(v2);
    byte_100992138 = v3;
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "disabled";
      if (v3)
        v5 = "enabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for Low Power Scan with Limited RSSI Reading: %s", buf, 0xCu);
    }
    v15 = 0;
    v6 = sub_100027F68();
    sub_100091AE8(buf, "LowPowerCoreScan");
    sub_100091AE8(__p, "DisableLowPowerCoreScanWithLimitedRSSIReading");
    v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7)
        goto LABEL_23;
    }
    else if (!v7)
    {
      goto LABEL_23;
    }
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding Disabling LowPowerCore with limited RSSI Reading %d", buf, 8u);
    }
    if (byte_100992138)
      v9 = v15 == 0;
    else
      v9 = 0;
    v10 = v9;
    byte_100992138 = v10;
  }
LABEL_23:
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992138)
      v12 = "enabled";
    else
      v12 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for Low Power Scan with Limited RSSI Reading %s", buf, 0xCu);
  }
}

void sub_1003AC43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AC478()
{
  if (qword_100992150 != -1)
    dispatch_once(&qword_100992150, &stru_10092BB30);
  return byte_100992148;
}

void sub_1003AC4B8(id a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  BOOL v5;
  char v6;
  const char *v7;
  void *__p[2];
  char v9;
  unsigned __int8 v10;
  _BYTE buf[12];
  char v12;

  v1 = sub_1000438A4();
  byte_100992148 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2216))(v1);
  v10 = 0;
  v2 = sub_100027F68();
  sub_100091AE8(buf, "VSCScanParams");
  sub_100091AE8(__p, "DisableVSCScanParams");
  v3 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v2 + 72))(v2, buf, __p, &v10);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete(*(void **)buf);
  v4 = qword_1009997E8;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Overriding Disabling VSScanParams Scan=%d", buf, 8u);
      v4 = qword_1009997E8;
    }
    if (byte_100992148)
      v5 = v10 == 0;
    else
      v5 = 0;
    v6 = v5;
    byte_100992148 = v6;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992148)
      v7 = "enabled";
    else
      v7 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "support for new VSScanParams scan is %s", buf, 0xCu);
  }
}

void sub_1003AC664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1003AC6A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  const char *v11;
  char v12;
  NSObject *v13;
  const char *v14;
  void *__p[2];
  char v16;
  char v17;
  _BYTE buf[12];
  char v19;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 400))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1))
  {
    v2 = sub_1000438A4();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2224))(v2);
    byte_100992158 = v3;
    if (sub_10005F864() == 93 || sub_10005F864() == 94)
    {
      v4 = sub_1000438A4();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4))
        byte_100992158 = 0;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 424))(v1))
    {
      v5 = sub_1000438A4();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5))
        byte_100992158 = 0;
    }
    v6 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = "disabled";
      if (v3)
        v7 = "enabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BT chip support for Scan Core : %s", buf, 0xCu);
    }
    v17 = 0;
    v8 = sub_100027F68();
    sub_100091AE8(buf, "ScanCore");
    sub_100091AE8(__p, "EnableScanCore");
    v9 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v8 + 72))(v8, buf, __p, &v17);
    if (v16 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
    {
      operator delete(*(void **)buf);
      if (!v9)
        goto LABEL_30;
    }
    else if (!v9)
    {
      goto LABEL_30;
    }
    v10 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (v17)
        v11 = "Enabled";
      else
        v11 = "Disabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Overriding EnableScanCore with %s", buf, 0xCu);
    }
    if (v17)
      v12 = v3;
    else
      v12 = 0;
    byte_100992158 = v12;
  }
LABEL_30:
  v13 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992158)
      v14 = "enabled";
    else
      v14 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Support for Scan Core is %s", buf, 0xCu);
  }
}

void sub_1003AC964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AC9A0(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003ACA14;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992170 != -1)
    dispatch_once(&qword_100992170, block);
  return byte_100992168;
}

void sub_1003ACA14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  BOOL v9;
  char v10;
  NSObject *v11;
  const char *v12;
  void *__p[2];
  char v14;
  unsigned __int8 v15;
  _BYTE buf[12];
  char v17;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 400))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1))
  {
    v2 = sub_1000438A4();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2224))(v2);
    byte_100992168 = v3;
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "disabled";
      if (v3)
        v5 = "enabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for LE non-Connection Stats : %s", buf, 0xCu);
    }
    v15 = 0;
    v6 = sub_100027F68();
    sub_100091AE8(buf, "LowPowerCoreScan");
    sub_100091AE8(__p, "DisableLEConnectionStatsV1");
    v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7)
        goto LABEL_23;
    }
    else if (!v7)
    {
      goto LABEL_23;
    }
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding Disabling LE non-Connection stats V1 (going back to V0)=%d", buf, 8u);
    }
    if (byte_100992168)
      v9 = v15 == 0;
    else
      v9 = 0;
    v10 = v9;
    byte_100992168 = v10;
  }
LABEL_23:
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992168)
      v12 = "enabled";
    else
      v12 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for new LE non-Connection Stats V1 scan is %s", buf, 0xCu);
  }
}

void sub_1003ACC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003ACCA8(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003ACD1C;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992180 != -1)
    dispatch_once(&qword_100992180, block);
  return byte_100992178;
}

void sub_1003ACD1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  const char *v7;
  int v8;
  const char *v9;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1))
  {
    v2 = sub_1000438A4();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2240))(v2);
    byte_100992178 = v3;
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "disabled";
      if (v3)
        v5 = "enabled";
      v8 = 136315138;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for Get Scan Stats : %s", (uint8_t *)&v8, 0xCu);
    }
  }
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992178)
      v7 = "enabled";
    else
      v7 = "disabled";
    v8 = 136315138;
    v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "support for Get Scan Stats is %s", (uint8_t *)&v8, 0xCu);
  }
}

void sub_1003ACE84(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  int v5;
  const char *v6;

  v1 = sub_1000438A4();
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2256))(v1);
  byte_100992188 = v2;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = "disabled";
    if (v2)
      v4 = "enabled";
    v5 = 136315138;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for scan core compensation : %s", (uint8_t *)&v5, 0xCu);
  }
}

uint64_t sub_1003ACF54(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003ACFC8;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_1009921A0 != -1)
    dispatch_once(&qword_1009921A0, block);
  return byte_100992198;
}

void sub_1003ACFC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  BOOL v9;
  char v10;
  NSObject *v11;
  const char *v12;
  void *__p[2];
  char v14;
  unsigned __int8 v15;
  _BYTE buf[12];
  char v17;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) == 0
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 344))(v1) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 400))(v1))
  {
    goto LABEL_23;
  }
  v2 = sub_1000438A4();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2296))(v2);
  byte_100992198 = v3;
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "disabled";
    if (v3)
      v5 = "enabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for Low Energy Long Range : %s", buf, 0xCu);
  }
  v15 = 0;
  v6 = sub_100027F68();
  sub_100091AE8(buf, "LowEnergyLongRange");
  sub_100091AE8(__p, "LowEnergyLongRangeDisable");
  v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v15);
  if (v14 < 0)
    operator delete(__p[0]);
  if ((v17 & 0x80000000) == 0)
  {
    if (!v7)
      goto LABEL_16;
LABEL_14:
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding Disabling Low Energy Long Range=%d", buf, 8u);
    }
    goto LABEL_16;
  }
  operator delete(*(void **)buf);
  if (v7)
    goto LABEL_14;
LABEL_16:
  if (byte_100992198)
    v9 = v15 == 0;
  else
    v9 = 0;
  v10 = v9;
  byte_100992198 = v10;
LABEL_23:
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992198)
      v12 = "enabled";
    else
      v12 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for new Low Energy Long Range is %s", buf, 0xCu);
  }
}

void sub_1003AD220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AD25C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AD2D0;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_1009921A8 != -1)
    dispatch_once(&qword_1009921A8, block);
  return byte_10097ADC8;
}

void sub_1003AD2D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  BOOL v9;
  char v10;
  NSObject *v11;
  const char *v12;
  void *__p[2];
  char v14;
  unsigned __int8 v15;
  _BYTE buf[12];
  char v17;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 344))(v1))
  {
    goto LABEL_22;
  }
  v2 = sub_1000438A4();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2312))(v2);
  byte_10097ADC8 = v3;
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "disabled";
    if (v3)
      v5 = "enabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for LE 2M PHy  : %s", buf, 0xCu);
  }
  v15 = 0;
  v6 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "LE2MPhyDisabled");
  v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v15);
  if (v14 < 0)
    operator delete(__p[0]);
  if ((v17 & 0x80000000) == 0)
  {
    if (!v7)
      goto LABEL_15;
LABEL_13:
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding Force LE PHY 2M =%d", buf, 8u);
    }
    goto LABEL_15;
  }
  operator delete(*(void **)buf);
  if (v7)
    goto LABEL_13;
LABEL_15:
  if (byte_10097ADC8)
    v9 = v15 == 0;
  else
    v9 = 0;
  v10 = v9;
  byte_10097ADC8 = v10;
LABEL_22:
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_10097ADC8)
      v12 = "enabled";
    else
      v12 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Support for LE2MPhy  is %s", buf, 0xCu);
  }
}

void sub_1003AD514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1003AD550(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  BOOL v8;
  char v9;
  const char *v10;
  void *__p[2];
  char v12;
  unsigned __int8 v13;
  _BYTE buf[12];
  char v15;

  v1 = sub_1000438A4();
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2168))(v1);
  byte_1009921B0 = v2;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = "disabled";
    if (v2)
      v4 = "enabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for Scan With New Vsc : %s", buf, 0xCu);
  }
  v13 = 0;
  v5 = sub_100027F68();
  sub_100091AE8(buf, "ScanEnhancements");
  sub_100091AE8(__p, "DisableScanEnhancements");
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v5 + 72))(v5, buf, __p, &v13);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(*(void **)buf);
  v7 = qword_1009997E8;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Overriding Disabling ScanEnhancements=%d", buf, 8u);
      v7 = qword_1009997E8;
    }
    if (byte_1009921B0)
      v8 = v13 == 0;
    else
      v8 = 0;
    v9 = v8;
    byte_1009921B0 = v9;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1009921B0)
      v10 = "enabled";
    else
      v10 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "support for new Scan Enhancement VSC is %s", buf, 0xCu);
  }
}

void sub_1003AD760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AD79C()
{
  if (qword_1009921C8 != -1)
    dispatch_once(&qword_1009921C8, &stru_10092BB90);
  return byte_1009921C0;
}

void sub_1003AD7DC(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  BOOL v8;
  char v9;
  const char *v10;
  void *__p[2];
  char v12;
  unsigned __int8 v13;
  _BYTE buf[12];
  char v15;

  v1 = sub_1000438A4();
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2176))(v1);
  byte_1009921C0 = v2;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = "disabled";
    if (v2)
      v4 = "enabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for removeMultipleDuplicateEntries VSC is %s", buf, 0xCu);
  }
  v13 = 0;
  v5 = sub_100027F68();
  sub_100091AE8(buf, "ScanEnhancements");
  sub_100091AE8(__p, "DisableRemoveMultipleDupliateEntries");
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v5 + 72))(v5, buf, __p, &v13);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(*(void **)buf);
  v7 = qword_1009997E8;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Overriding Disabling removeMultipleDuplicateEntries=%d", buf, 8u);
      v7 = qword_1009997E8;
    }
    if (byte_1009921C0)
      v8 = v13 == 0;
    else
      v8 = 0;
    v9 = v8;
    byte_1009921C0 = v9;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1009921C0)
      v10 = "enabled";
    else
      v10 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "support for removeMultipleDuplicateEntries VSC is %s", buf, 0xCu);
  }
}

void sub_1003AD9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003ADA28()
{
  if (qword_1009921D8 != -1)
    dispatch_once(&qword_1009921D8, &stru_10092BBB0);
  return byte_1009921D0;
}

void sub_1003ADA68(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  BOOL v8;
  char v9;
  const char *v10;
  void *__p[2];
  char v12;
  unsigned __int8 v13;
  _BYTE buf[12];
  char v15;

  v1 = sub_1000438A4();
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2184))(v1);
  byte_1009921D0 = v2;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = "disabled";
    if (v2)
      v4 = "enabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "support keeping Duplicate filter when Scan Enable VSC is: %s", buf, 0xCu);
  }
  v13 = 0;
  v5 = sub_100027F68();
  sub_100091AE8(buf, "ScanEnhancements");
  sub_100091AE8(__p, "KeepDupFilterWhenScanEnable");
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v5 + 72))(v5, buf, __p, &v13);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(*(void **)buf);
  v7 = qword_1009997E8;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Overriding Disabling KeepDupFilterWhenScanEnable=%d", buf, 8u);
      v7 = qword_1009997E8;
    }
    if (byte_1009921D0)
      v8 = v13 == 0;
    else
      v8 = 0;
    v9 = v8;
    byte_1009921D0 = v9;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1009921D0)
      v10 = "enabled";
    else
      v10 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "support for KeepDupFilterWhenScanEnable VSC is %s", buf, 0xCu);
  }
}

void sub_1003ADC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003ADCB4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003ADD28;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_1009921E8 != -1)
    dispatch_once(&qword_1009921E8, block);
  return byte_1009921E0;
}

void sub_1003ADD28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  BOOL v9;
  char v10;
  NSObject *v11;
  const char *v12;
  void *__p[2];
  char v14;
  unsigned __int8 v15;
  _BYTE buf[12];
  char v17;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 336))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 344))(v1))
  {
    v2 = sub_1000438A4();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2152))(v2);
    byte_1009921E0 = v3;
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "disabled";
      if (v3)
        v5 = "enabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for BT Spec advertisingsets : %s", buf, 0xCu);
    }
    v15 = 0;
    v6 = sub_100027F68();
    sub_100091AE8(buf, "AE");
    sub_100091AE8(__p, "DisableSpecSets");
    v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7)
        goto LABEL_24;
    }
    else if (!v7)
    {
      goto LABEL_24;
    }
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding DisableSpecSets=%d", buf, 8u);
    }
    if (byte_1009921E0)
      v9 = v15 == 0;
    else
      v9 = 0;
    v10 = v9;
    byte_1009921E0 = v10;
  }
LABEL_24:
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1009921E0)
      v12 = "enabled";
    else
      v12 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for BT 5.0 advertising sets is %s", buf, 0xCu);
  }
}

void sub_1003ADF94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1003ADFD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  BOOL v9;
  char v10;
  NSObject *v11;
  const char *v12;
  void *__p[2];
  char v14;
  unsigned __int8 v15;
  _BYTE buf[12];
  char v17;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 336))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 376))(v1))
  {
    v2 = sub_1000438A4();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2136))(v2);
    byte_1009921F0 = v3;
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "disabled";
      if (v3)
        v5 = "enabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for Enhanced Connections : %s", buf, 0xCu);
    }
    v15 = 0;
    v6 = sub_100027F68();
    sub_100091AE8(buf, "AE");
    sub_100091AE8(__p, "DisableEnhancedConnections");
    v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7)
        goto LABEL_24;
    }
    else if (!v7)
    {
      goto LABEL_24;
    }
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding DisableEnhancedConnections=%d", buf, 8u);
    }
    if (byte_1009921F0)
      v9 = v15 == 0;
    else
      v9 = 0;
    v10 = v9;
    byte_1009921F0 = v10;
  }
LABEL_24:
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1009921F0)
      v12 = "enabled";
    else
      v12 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for Enhanced Connections is %s", buf, 0xCu);
  }
}

void sub_1003AE23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AE278(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AE2EC;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992208 != -1)
    dispatch_once(&qword_100992208, block);
  return byte_100992200;
}

void sub_1003AE2EC(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  BOOL v8;
  char v9;
  NSObject *v10;
  const char *v11;
  void *__p[2];
  char v13;
  unsigned __int8 v14;
  _BYTE buf[12];
  char v16;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 328))(*(_QWORD *)(a1 + 32)))
  {
    v1 = sub_1000438A4();
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2144))(v1);
    byte_100992200 = v2;
    v3 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = "disabled";
      if (v2)
        v4 = "enabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for Enhanced Connections V2 : %s", buf, 0xCu);
    }
    v14 = 0;
    v5 = sub_100027F68();
    sub_100091AE8(buf, "AE");
    sub_100091AE8(__p, "DisableEnhancedConnectionsV2");
    v6 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v5 + 72))(v5, buf, __p, &v14);
    if (v13 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
    {
      operator delete(*(void **)buf);
      if (!v6)
        goto LABEL_21;
    }
    else if (!v6)
    {
      goto LABEL_21;
    }
    v7 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Overriding DisableEnhancedConnectionsV2=%d", buf, 8u);
    }
    if (byte_100992200)
      v8 = v14 == 0;
    else
      v8 = 0;
    v9 = v8;
    byte_100992200 = v9;
  }
LABEL_21:
  v10 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992200)
      v11 = "enabled";
    else
      v11 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "support for Enhanced Connections V2 is %s", buf, 0xCu);
  }
}

void sub_1003AE51C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AE558(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AE5CC;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992218 != -1)
    dispatch_once(&qword_100992218, block);
  return byte_100992210;
}

void sub_1003AE5CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  BOOL v9;
  char v10;
  NSObject *v11;
  const char *v12;
  void *__p[2];
  char v14;
  unsigned __int8 v15;
  _BYTE buf[12];
  char v17;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 344))(v1))
  {
    v2 = sub_1000438A4();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2264))(v2);
    byte_100992210 = v3;
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "disabled";
      if (v3)
        v5 = "enabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for Controller BT clock capture : %s", buf, 0xCu);
    }
    v15 = 0;
    v6 = sub_100027F68();
    sub_100091AE8(buf, "LE");
    sub_100091AE8(__p, "DisallowControllerBTClockConfigure");
    v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7)
        goto LABEL_22;
    }
    else if (!v7)
    {
      goto LABEL_22;
    }
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding Controller BT clock capture =%d", buf, 8u);
    }
    if (byte_100992210)
      v9 = v15 == 0;
    else
      v9 = 0;
    v10 = v9;
    byte_100992210 = v10;
  }
LABEL_22:
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992210)
      v12 = "enabled";
    else
      v12 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for new Controller BT clock capture is %s", buf, 0xCu);
  }
}

void sub_1003AE810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1003AE84C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  BOOL v9;
  char v10;
  NSObject *v11;
  const char *v12;
  void *__p[2];
  char v14;
  unsigned __int8 v15;
  _BYTE buf[12];
  char v17;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 344))(v1))
  {
    v2 = sub_1000438A4();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2272))(v2);
    byte_100992220 = v3;
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "disabled";
      if (v3)
        v5 = "enabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for RSSI Connection statistics and detection : %s", buf, 0xCu);
    }
    v15 = 0;
    v6 = sub_100027F68();
    sub_100091AE8(buf, "LE");
    sub_100091AE8(__p, "DisallowRSSIConnectionStatisticAndInterval");
    v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7)
        goto LABEL_22;
    }
    else if (!v7)
    {
      goto LABEL_22;
    }
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding RSSI Connection statistics and detection =%d", buf, 8u);
    }
    if (byte_100992220)
      v9 = v15 == 0;
    else
      v9 = 0;
    v10 = v9;
    byte_100992220 = v10;
  }
LABEL_22:
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992220)
      v12 = "enabled";
    else
      v12 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for new RSSI Connection statistics and detection is %s", buf, 0xCu);
  }
}

void sub_1003AEA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AEACC(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AEB40;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992238 != -1)
    dispatch_once(&qword_100992238, block);
  return byte_100992230;
}

void sub_1003AEB40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  void *__p[2];
  char v8;
  unsigned __int8 v9;
  _BYTE buf[12];
  char v11;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 344))(v1))
  {
    byte_100992230 = 1;
    v9 = 0;
    v2 = sub_100027F68();
    sub_100091AE8(buf, "LE");
    sub_100091AE8(__p, "MagnetTimeoutABCLog");
    v3 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v2 + 72))(v2, buf, __p, &v9);
    if (v8 < 0)
      operator delete(__p[0]);
    if (v11 < 0)
    {
      operator delete(*(void **)buf);
      if (!v3)
        goto LABEL_12;
    }
    else if (!v3)
    {
      goto LABEL_12;
    }
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Overriding MagnetTimeoutABCLog =%d", buf, 8u);
    }
    byte_100992230 = v9;
  }
LABEL_12:
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992230)
      v6 = "enabled";
    else
      v6 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "support for Magnet Timeout ABC Log is %s", buf, 0xCu);
  }
}

void sub_1003AED04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1003AED40(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  const char *v6;
  int v7;
  const char *v8;

  v1 = sub_1000438A4();
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2464))(v1);
  byte_100992240 = v2;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (v2)
      v4 = "enabled";
    else
      v4 = "disabled";
    v7 = 136315138;
    v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for LE Manufacturer Scan Filter : %s", (uint8_t *)&v7, 0xCu);
    v2 = byte_100992240;
  }
  if (v2)
    v2 = _os_feature_enabled_impl("BluetoothFeatures", "LEManufacturerScanFilter");
  byte_100992240 = v2;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (v2)
      v6 = "enabled";
    else
      v6 = "disabled";
    v7 = 136315138;
    v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "support for LE Manufacturer Scan Filter %s", (uint8_t *)&v7, 0xCu);
  }
}

uint64_t sub_1003AEE98(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AEF0C;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992258 != -1)
    dispatch_once(&qword_100992258, block);
  return byte_100992250;
}

void sub_1003AEF0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  BOOL v9;
  char v10;
  NSObject *v11;
  const char *v12;
  void *__p[2];
  char v14;
  unsigned __int8 v15;
  _BYTE buf[12];
  char v17;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 344))(v1))
  {
    v2 = sub_1000438A4();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2280))(v2);
    byte_100992250 = v3;
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "disabled";
      if (v3)
        v5 = "enabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for Bluetooth Usage  : %s", buf, 0xCu);
    }
    v15 = 0;
    v6 = sub_100027F68();
    sub_100091AE8(buf, "LE");
    sub_100091AE8(__p, "DisallowBluetoothUsageNotification");
    v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7)
        goto LABEL_22;
    }
    else if (!v7)
    {
      goto LABEL_22;
    }
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding Bluetooth usage notification =%d", buf, 8u);
    }
    if (byte_100992250)
      v9 = v15 == 0;
    else
      v9 = 0;
    v10 = v9;
    byte_100992250 = v10;
  }
LABEL_22:
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992250)
      v12 = "enabled";
    else
      v12 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for Bluetooth usage notification is %s", buf, 0xCu);
  }
}

void sub_1003AF150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AF18C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AF200;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992268 != -1)
    dispatch_once(&qword_100992268, block);
  return byte_100992260;
}

void sub_1003AF200(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  BOOL v9;
  char v10;
  NSObject *v11;
  const char *v12;
  void *__p[2];
  char v14;
  unsigned __int8 v15;
  _BYTE buf[12];
  char v17;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 344))(v1))
  {
    v2 = sub_1000438A4();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2288))(v2);
    byte_100992260 = v3;
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "disabled";
      if (v3)
        v5 = "enabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for Phy Statistics Usage : %s", buf, 0xCu);
    }
    v15 = 0;
    v6 = sub_100027F68();
    sub_100091AE8(buf, "LE");
    sub_100091AE8(__p, "DisallowPhyStatisticsUsageNotification");
    v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7)
        goto LABEL_22;
    }
    else if (!v7)
    {
      goto LABEL_22;
    }
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding Phy Statistics Bluetooth usage notification =%d", buf, 8u);
    }
    if (byte_100992260)
      v9 = v15 == 0;
    else
      v9 = 0;
    v10 = v9;
    byte_100992260 = v10;
  }
LABEL_22:
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992260)
      v12 = "enabled";
    else
      v12 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for Phy Statistics Bluetooth notification is %s", buf, 0xCu);
  }
}

void sub_1003AF444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1003AF480(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  void *__p[2];
  char v12;
  unsigned __int8 v13;
  _BYTE buf[12];
  __int16 v15;
  int v16;
  char v17;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 376))(v1))
  {
    v2 = sub_1000438A4();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2320))(v2);
    byte_100992270 = v3;
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "YES";
      if (!v3)
        v5 = "NO";
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v5;
      v15 = 1024;
      v16 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for ADV Buffers is : %s (%d buffers)", buf, 0x12u);
    }
    v13 = 0;
    v6 = sub_100027F68();
    sub_100091AE8(buf, "LE");
    sub_100091AE8(__p, "DisableADVBuffers");
    v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v13);
    if (v12 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7)
        goto LABEL_16;
    }
    else if (!v7)
    {
      goto LABEL_16;
    }
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding DisableADVBuffers=%d", buf, 8u);
    }
    byte_100992270 = 0;
  }
LABEL_16:
  v9 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v10 = "YES";
    if (!byte_100992270)
      v10 = "NO";
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v10;
    v15 = 1024;
    v16 = byte_100992270;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "support for ADV Buffering is %s (%d buffers)", buf, 0x12u);
  }
}

void sub_1003AF6C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003AF704(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003AF778;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992288 != -1)
    dispatch_once(&qword_100992288, block);
  return byte_100992280;
}

void sub_1003AF778(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  BOOL v9;
  char v10;
  NSObject *v11;
  const char *v12;
  void *__p[2];
  char v14;
  unsigned __int8 v15;
  _BYTE buf[12];
  char v17;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 376))(v1))
  {
    v2 = sub_1000438A4();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2488))(v2);
    byte_100992280 = v3;
    v4 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "disabled";
      if (v3)
        v5 = "enabled";
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for Match Buffers is  : %s", buf, 0xCu);
    }
    v15 = 0;
    v6 = sub_100027F68();
    sub_100091AE8(buf, "LE");
    sub_100091AE8(__p, "DisableMatchBuffers");
    v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7)
        goto LABEL_22;
    }
    else if (!v7)
    {
      goto LABEL_22;
    }
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding DisableMatchBuffers=%d", buf, 8u);
    }
    if (byte_100992280)
      v9 = v15 == 0;
    else
      v9 = 0;
    v10 = v9;
    byte_100992280 = v10;
  }
LABEL_22:
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992280)
      v12 = "enabled";
    else
      v12 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for Match Buffering is %s", buf, 0xCu);
  }
}

void sub_1003AF9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

BOOL sub_1003AF9F8()
{
  uint64_t v0;
  _BOOL8 v1;
  NSObject *v2;
  const char *v3;
  void *__p[2];
  char v6;
  unsigned __int8 v7;
  _BYTE buf[12];
  char v9;

  if (qword_100992298 != -1)
    dispatch_once(&qword_100992298, &stru_10092BBF0);
  v7 = 0;
  v0 = sub_100027F68();
  sub_100091AE8(buf, "A2DP");
  sub_100091AE8(__p, "WirelessSplitter");
  (*(void (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v0 + 72))(v0, buf, __p, &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(*(void **)buf);
  v1 = (byte_100992290 | v7) != 0;
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = "not supported";
    if (v1)
      v3 = "supported";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Wireless Splitter is %s on this hardware platform", buf, 0xCu);
  }
  return v1;
}

void sub_1003AFB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1003AFB94(id a1)
{
  byte_100992290 = MGGetBoolAnswer(CFSTR("2zyzecwSf2ZYRpB3tuQhOQ"));
}

uint64_t sub_1003AFBB8()
{
  unsigned int v0;

  v0 = sub_10005F864() - 57;
  return (v0 < 0x16) & (0x3C0033u >> v0);
}

uint64_t sub_1003AFBE8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
}

BOOL sub_1003AFC04()
{
  return sub_10005F864() == 134;
}

uint64_t sub_1003AFC20()
{
  if (qword_1009922A0 != -1)
    dispatch_once(&qword_1009922A0, &stru_10092BC10);
  return (unsigned __int16)word_10097ADCA;
}

void sub_1003AFC60(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  void *__p[2];
  char v8;
  int v9;
  uint8_t buf[8];
  char v11;

  v1 = sub_1000438A4();
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2624))(v1);
  word_10097ADCA = v2;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Minimum advertising interval supported by HW : %d", buf, 8u);
  }
  v9 = 32;
  v4 = sub_100027F68();
  sub_100091AE8(buf, "AE");
  sub_100091AE8(__p, "MinAdvertisingInterval");
  v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v4 + 88))(v4, buf, __p, &v9);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(*(void **)buf);
  v6 = qword_1009997E8;
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Overriding MinAdvertisingInterval=%d", buf, 8u);
      v6 = qword_1009997E8;
    }
    word_10097ADCA = v9;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = (unsigned __int16)word_10097ADCA;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Minimum advertising interval is %d", buf, 8u);
  }
}

void sub_1003AFE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

BOOL sub_1003AFE70()
{
  return sub_10005F864() == 146;
}

void sub_1003AFE8C(id a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  NSObject *v4;
  const char *v5;
  void *__p[2];
  char v7;
  char v8;
  _BYTE buf[12];
  char v10;

  v8 = 0;
  v1 = sub_100027F68();
  sub_100091AE8(buf, "Scan");
  sub_100091AE8(__p, "DisableMatchTableConfigV2");
  (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, __p, &v8);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(*(void **)buf);
  v2 = sub_1000438A4();
  if (!v8)
  {
    v3 = *(_DWORD *)(v2 + 712);
    if (v3 >= 0x7D0 && v3 <= 0xF9F && v3 >= 0x7D1)
      byte_1009922A8 = 1;
  }
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1009922A8)
      v5 = "enabled";
    else
      v5 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "support for MatchTableV2 usage notification is %s", buf, 0xCu);
  }
}

void sub_1003AFFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B0020()
{
  if (qword_1009922C0 != -1)
    dispatch_once(&qword_1009922C0, &stru_10092BC50);
  return byte_1009922B8;
}

void sub_1003B0060(id a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  NSObject *v4;
  const char *v5;
  void *__p[2];
  char v7;
  char v8;
  _BYTE buf[12];
  char v10;

  v8 = 0;
  v1 = sub_100027F68();
  sub_100091AE8(buf, "Scan");
  sub_100091AE8(__p, "DisableMatchTableConfigV3");
  (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, __p, &v8);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(*(void **)buf);
  v2 = sub_1000438A4();
  if (!v8)
  {
    v3 = *(_DWORD *)(v2 + 712);
    if (v3 >= 0x7D0 && v3 <= 0xF9F && v3 >= 0x7D1)
      byte_1009922B8 = 1;
  }
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1009922B8)
      v5 = "enabled";
    else
      v5 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "support for MatchTableV3 usage notification is %s", buf, 0xCu);
  }
}

void sub_1003B01B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B01F4()
{
  if (qword_1009922D0 != -1)
    dispatch_once(&qword_1009922D0, &stru_10092BC70);
  return byte_1009922C8;
}

void sub_1003B0234(id a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  void *__p[2];
  char v6;
  char v7;
  _BYTE buf[12];
  char v9;

  v7 = 0;
  v1 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "IncludeHiddenLEFeatureVendors");
  (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, __p, &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(*(void **)buf);
  v2 = sub_1000438A4();
  byte_1009922C8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2616))(v2);
  if ((*(_DWORD *)(sub_1000438A4() + 712) - 1) <= 0x7CE && !v7)
    byte_1009922C8 = 0;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1009922C8)
      v4 = "include";
    else
      v4 = "not include";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "support for Inclue Hidden LE Feature Vendor List Vendors is %s", buf, 0xCu);
  }
}

void sub_1003B038C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B03C8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  void *__p[2];
  char v5;
  uint8_t buf[8];
  char v7;
  char v8;

  v0 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0))
    goto LABEL_10;
  v8 = 0;
  v1 = sub_100027F68();
  sub_100091AE8(buf, "HFP");
  sub_100091AE8(__p, "DisableUWBS");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, __p, &v8);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(*(void **)buf);
  if (v8)
  {
    v2 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "UWBS for HFP disabled by defaults write", buf, 2u);
    }
    return 0;
  }
  else
  {
LABEL_10:
    sub_1000438A4();
    return sub_1003310D8();
  }
}

void sub_1003B04C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B04F4()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  v0 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v0 + 328))(v0)
    || (result = _os_feature_enabled_impl("BluetoothFeatures", "SuperWideBandAudio"), (_DWORD)result))
  {
    v2 = sub_1000438A4();
    return sub_10033131C(v2);
  }
  return result;
}

uint64_t sub_1003B053C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;
  char v12;

  v0 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v0 + 384))(v0))
  {
    v1 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1))
    {
      v12 = 0;
      v2 = sub_100027F68();
      sub_100091AE8(v10, "HFP");
      sub_100091AE8(__p, "DisableUWBSStereo");
      (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v2 + 72))(v2, v10, __p, &v12);
      if (v9 < 0)
        operator delete(__p[0]);
      if (v11 < 0)
        operator delete(v10[0]);
      if (v12)
        return 0;
    }
  }
  v3 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 328))(v3))
  {
    v4 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4))
    {
      v12 = 0;
      v5 = sub_100027F68();
      sub_100091AE8(v10, "HFP");
      sub_100091AE8(__p, "DisableUWBSStereo");
      (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v5 + 72))(v5, v10, __p, &v12);
      if (v9 < 0)
        operator delete(__p[0]);
      if (v11 < 0)
        operator delete(v10[0]);
      if (v12)
        return 0;
    }
  }
  v7 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 336))(v7)
    || (result = _os_feature_enabled_impl("BluetoothFeatures", "AACELDStereotvOS"), (_DWORD)result))
  {
    sub_1000438A4();
    return sub_1003311F4();
  }
  return result;
}

void sub_1003B06C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B0704()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;
  char v11;

  v0 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v0 + 328))(v0)
    || (result = _os_feature_enabled_impl("BluetoothFeatures", "AACELDStereo48K"), (_DWORD)result))
  {
    v2 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 384))(v2))
    {
      result = _os_feature_enabled_impl("BluetoothFeatures", "AACELDStereo48K");
      if (!(_DWORD)result)
        return result;
      v11 = 0;
      v3 = sub_100027F68();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3))
      {
        v4 = sub_100027F68();
        sub_100091AE8(v9, "HFP");
        sub_100091AE8(__p, "DisableUWBSStereo");
        (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v4 + 72))(v4, v9, __p, &v11);
        if (v8 < 0)
          operator delete(__p[0]);
        if (v10 < 0)
          operator delete(v9[0]);
        if (v11)
          return 0;
      }
    }
    else
    {
      v5 = sub_10003BE44();
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 336))(v5) & 1) != 0)
        return 0;
    }
    v6 = sub_1000438A4();
    return sub_100331360(v6);
  }
  return result;
}

void sub_1003B0824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B0858()
{
  uint64_t result;
  uint64_t v1;

  result = _os_feature_enabled_impl("AudioAccessoryFeatures", "AoSGaming");
  if ((_DWORD)result)
  {
    v1 = sub_1000438A4();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2504))(v1);
  }
  return result;
}

uint64_t sub_1003B0894()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 384))(v0) & 1) != 0
    || (v1 = sub_10003BE44(), result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1), (_DWORD)result))
  {
    sub_1000438A4();
    return sub_1003311F4();
  }
  return result;
}

uint64_t sub_1003B08D8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  void *__p[2];
  char v5;
  uint8_t buf[8];
  char v7;
  char v8;

  v0 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0))
    goto LABEL_10;
  v8 = 0;
  v1 = sub_100027F68();
  sub_100091AE8(buf, "HFP");
  sub_100091AE8(__p, "DisableWBS");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, __p, &v8);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(*(void **)buf);
  if (v8)
  {
    v2 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "WBS for HFP disabled by defaults write", buf, 2u);
    }
    return 0;
  }
  else
  {
LABEL_10:
    sub_1000438A4();
    return sub_100331090();
  }
}

void sub_1003B09D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B0A04(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t (*v8)(void);
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  switch(a2)
  {
    case 3:
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1) & 1) != 0)
        return 0;
      else
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 792))(a1, 1);
    case 6:
      v8 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 192);
      goto LABEL_19;
    case 7:
      v8 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 200);
      goto LABEL_19;
    case 8:
      v8 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 208);
      goto LABEL_19;
    case 9:
      v8 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 216);
      goto LABEL_19;
    case 10:
      v8 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 224);
      goto LABEL_19;
    case 11:
      v8 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 232);
      goto LABEL_19;
    case 12:
      v8 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 240);
LABEL_19:
      result = v8();
      break;
    default:
      v5 = sub_1000438A4();
      result = 0;
      v6 = *(_DWORD *)(v5 + 712);
      switch(a2)
      {
        case 0:
          v9 = sub_10005F864() - 6;
          result = 1;
          switch(v9)
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 51:
            case 52:
            case 55:
            case 56:
            case 61:
            case 62:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 103:
            case 104:
            case 110:
            case 111:
            case 112:
            case 134:
            case 135:
            case 136:
            case 137:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
              return result;
            default:
              result = v6 > 0x13;
              break;
          }
          break;
        case 1:
        case 4:
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1))
            v7 = v6 > 0xB;
          else
            v7 = 0;
          if (v7)
            goto LABEL_27;
          LODWORD(result) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 360))(a1);
          if (v6 > 0xC)
            result = result;
          else
            result = 0;
          break;
        case 2:
          v10 = sub_10003BE44();
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 328))(v10))
            return 0;
          v11 = sub_10003BE44();
          if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 792))(v11, 0))
            return 0;
          v12 = sub_100027F68();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12))
          {
            v13 = sub_100027F68();
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 592))(v13) & 1) == 0)
              return 0;
          }
LABEL_27:
          result = 1;
          break;
        case 5:
          v14 = sub_10003BE44();
          v15 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 792))(v14, 0);
          result = 0;
          if (v15)
          {
            v8 = *(uint64_t (**)(void))(*(_QWORD *)sub_10003BE44() + 424);
            goto LABEL_19;
          }
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

uint64_t sub_1003B0C20()
{
  unsigned int v0;

  v0 = sub_10005F864();
  if (v0 > 0x16)
    return 0;
  else
    return byte_10073FDD8[v0];
}

BOOL sub_1003B0C50(uint64_t a1)
{
  return *(_DWORD *)(sub_1000438A4() + 712)
      && *(_DWORD *)(sub_1000438A4() + 712) <= 0x7CFu
      && *(_DWORD *)(sub_1000438A4() + 712) >= 0x16u
      && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 384))(a1);
}

uint64_t sub_1003B0CB8()
{
  if (qword_1009922E0 != -1)
    dispatch_once(&qword_1009922E0, &stru_10092BC90);
  return byte_1009922D8;
}

void sub_1003B0CF8(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _DWORD v4[2];

  v1 = sub_1000438A4();
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2080))(v1);
  byte_1009922D8 = v2;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Support power Tag feature =%d", (uint8_t *)v4, 8u);
  }
}

uint64_t sub_1003B0DB0()
{
  if (qword_1009922F0 != -1)
    dispatch_once(&qword_1009922F0, &stru_10092BCB0);
  return byte_1009922E8;
}

void sub_1003B0DF0(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _DWORD v4[2];

  v1 = sub_1000438A4();
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2088))(v1);
  byte_1009922E8 = v2;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Support power Tag feature =%d", (uint8_t *)v4, 8u);
  }
}

uint64_t sub_1003B0EA8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t sub_1003B0EB0(uint64_t a1, char a2)
{
  uint64_t result;

  result = _os_feature_enabled_impl("BluetoothFeatures", "TimestampedACLDataFromController");
  *(_BYTE *)(a1 + 12) = result & a2;
  return result;
}

uint64_t sub_1003B0EEC()
{
  if (qword_100992300 != -1)
    dispatch_once(&qword_100992300, &stru_10092BCD0);
  return byte_1009922F8;
}

void sub_1003B0F2C(id a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  void *__p[2];
  char v12;
  char v13;
  _BYTE buf[12];
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;

  v1 = sub_1000438A4();
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2104))(v1);
  v13 = 0;
  v3 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "EnableAdjustLEInstantFactor");
  v4 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v3 + 72))(v3, buf, __p, &v13);
  if (v13)
    v5 = v4;
  else
    v5 = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v17) < 0)
    operator delete(*(void **)buf);
  v6 = v5 | v2;
  byte_1009922F8 = v5 | v2;
  v7 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = "No";
    if (v6)
      v9 = "Yes";
    else
      v9 = "No";
    if (v2)
      v10 = "Yes";
    else
      v10 = "No";
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v9;
    v15 = 2080;
    v16 = v10;
    if (v13)
      v8 = "Yes";
    v17 = 2080;
    v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Support for Adjusting LE Instant Factor is enabled: %s (hw %s override %s)", buf, 0x20u);
  }
}

void sub_1003B10A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1003B10E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  void *__p[2];
  char v17;
  char v18;
  _BYTE buf[12];
  __int16 v20;
  const char *v21;
  char v22;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 336))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 344))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 424))(v1))
  {
    v2 = sub_1000438A4();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2656))(v2);
    byte_100992308 = v3;
  }
  else
  {
    v3 = byte_100992308;
  }
  if (!v3)
    goto LABEL_29;
  v4 = *(_DWORD *)(sub_1000438A4() + 712);
  v5 = !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1) || v4 == 0;
  if (v5 || v4 != 20)
  {
    v6 = !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 336))(v1) || v4 == 0;
    if (v6 || v4 > 0x7CF)
      goto LABEL_29;
  }
  v18 = 0;
  v7 = sub_100027F68();
  sub_100091AE8(buf, "BLESCAN");
  sub_100091AE8(__p, "EnforcePrioritization");
  v8 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v7 + 72))(v7, buf, __p, &v18);
  if (v18)
    v9 = v8;
  else
    v9 = 0;
  if (v17 < 0)
    operator delete(__p[0]);
  if ((v22 & 0x80000000) == 0)
  {
    if (v9)
      goto LABEL_25;
LABEL_28:
    byte_100992308 = 0;
    goto LABEL_29;
  }
  operator delete(*(void **)buf);
  if (!v9)
    goto LABEL_28;
LABEL_25:
  v10 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Support for Discovery Scan Prioritization is enforced.", buf, 2u);
  }
LABEL_29:
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992308)
      v12 = "enabled";
    else
      v12 = "disabled";
    v13 = sub_1000438A4();
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 2656))(v13);
    v15 = "N";
    if (v14)
      v15 = "Y";
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v12;
    v20 = 2080;
    v21 = v15;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Support for Discovery Scan Prioritization is %s (hw capability %s)", buf, 0x16u);
  }
}

void sub_1003B1384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B13C0()
{
  if (qword_100992320 != -1)
    dispatch_once(&qword_100992320, &stru_10092BCF0);
  return byte_100992318;
}

void sub_1003B1400(id a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  int v10;
  void *__p[2];
  char v12;
  char v13;
  _BYTE buf[12];
  __int16 v15;
  int v16;
  char v17;

  v1 = sub_1000438A4();
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2688))(v1);
  byte_100992318 = v2;
  if (v2)
  {
    v13 = 0;
    v3 = sub_100027F68();
    sub_100091AE8(buf, "LE");
    sub_100091AE8(__p, "DisableLEConnectionPrioritization");
    v4 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v3 + 72))(v3, buf, __p, &v13);
    if (v13)
      v5 = v4;
    else
      v5 = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v5)
        goto LABEL_13;
    }
    else if (!v5)
    {
      goto LABEL_13;
    }
    byte_100992318 = 0;
    v6 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Disable LE Connection Prioritization.", buf, 2u);
    }
  }
LABEL_13:
  v7 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992318)
      v8 = "enabled";
    else
      v8 = "disabled";
    v9 = sub_1000438A4();
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 2688))(v9);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v8;
    v15 = 1024;
    v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Support for LE Connection Prioritization is %s (hw capability %{BOOL}d)", buf, 0x12u);
  }
}

void sub_1003B15B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B15F4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003B1668;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992330 != -1)
    dispatch_once(&qword_100992330, block);
  return byte_100992328;
}

void sub_1003B1668(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  void *__p[2];
  char v14;
  char v15;
  _BYTE buf[12];
  char v17;

  v1 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 344))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 328))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 384))(v1))
  {
    v2 = sub_1000438A4();
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 3568))(v2);
    byte_100992328 = v3;
    v4 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_9;
    v5 = "disabled";
    if (v3)
      v5 = "enabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for Controller Scan Rx Stats : %s", buf, 0xCu);
  }
  v3 = byte_100992328;
LABEL_9:
  if (!v3)
    goto LABEL_22;
  v6 = _os_feature_enabled_impl("BluetoothFeatures", "SentinelFWStatsScan");
  byte_100992328 = v6;
  if (!v6 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 344))(v1))
    goto LABEL_23;
  v15 = 0;
  v7 = sub_100027F68();
  sub_100091AE8(buf, "BLESCAN");
  sub_100091AE8(__p, "FWStatsScan");
  v8 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v7 + 72))(v7, buf, __p, &v15);
  if (v15)
    v9 = v8;
  else
    v9 = 0;
  if (v14 < 0)
    operator delete(__p[0]);
  if ((v17 & 0x80000000) == 0)
  {
    if (v9)
      goto LABEL_19;
LABEL_22:
    byte_100992328 = 0;
    goto LABEL_23;
  }
  operator delete(*(void **)buf);
  if (!v9)
    goto LABEL_22;
LABEL_19:
  byte_100992328 = 1;
  v10 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Controller Scan Rx Stats is enabled with override.", buf, 2u);
  }
LABEL_23:
  v11 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992328)
      v12 = "enabled";
    else
      v12 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for Get Scan Stats is %s", buf, 0xCu);
  }
}

void sub_1003B18EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B1928(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003B199C;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992340 != -1)
    dispatch_once(&qword_100992340, block);
  return dword_100992338;
}

void sub_1003B199C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;

  v1 = *(_QWORD *)(a1 + 32);
  if (sub_1000417B4(v1))
  {
    v2 = sub_1000438A4();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 2232))(v2))
      v3 = 2;
    else
      v3 = 3;
  }
  else
  {
    if (!sub_10003BF6C(v1))
      goto LABEL_8;
    v3 = 1;
  }
  dword_100992338 = v3;
LABEL_8:
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (dword_100992338 > 3)
      v5 = "Unknown ScanCoreHWType";
    else
      v5 = off_10092BDB0[dword_100992338];
    v6 = 136315138;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ScanCore HW Type : %s", (uint8_t *)&v6, 0xCu);
  }
}

uint64_t sub_1003B1AA4()
{
  if (qword_100992350 != -1)
    dispatch_once(&qword_100992350, &stru_10092BD10);
  return byte_100992348;
}

void sub_1003B1AE4(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  const char *v6;
  int v7;
  const char *v8;

  v1 = sub_1000438A4();
  v2 = sub_100333DE4(v1, 5);
  byte_100992348 = v2;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (v2)
      v4 = "enabled";
    else
      v4 = "disabled";
    v7 = 136315138;
    v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for LE Connection Scan Prioritization : %s", (uint8_t *)&v7, 0xCu);
    v2 = byte_100992348;
  }
  if (v2)
    v2 = _os_feature_enabled_impl("BluetoothFeatures", "SentinelConnScanProtection");
  byte_100992348 = v2;
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (v2)
      v6 = "enabled";
    else
      v6 = "disabled";
    v7 = 136315138;
    v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "support for LE Connection Scan Prioritization is %s", (uint8_t *)&v7, 0xCu);
  }
}

uint64_t sub_1003B1C38()
{
  if (qword_100992360 != -1)
    dispatch_once(&qword_100992360, &stru_10092BD30);
  return byte_100992358;
}

void sub_1003B1C78(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  void *__p[2];
  char v6;
  _BYTE buf[12];
  char v8;

  v1 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "AllowFindMyActionConnScanPrioritization");
  v2 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, __p, &byte_100992359);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2)
      return;
  }
  else if (!v2)
  {
    return;
  }
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992359)
      v4 = "Yes";
    else
      v4 = "No";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: FindMyConnScanPrioritization: %s", buf, 0xCu);
  }
  byte_100992358 = byte_100992359;
}

void sub_1003B1DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B1DF4()
{
  if (qword_100992370 != -1)
    dispatch_once(&qword_100992370, &stru_10092BD50);
  return byte_100992368;
}

void sub_1003B1E34(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  void *__p[2];
  char v6;
  _BYTE buf[12];
  char v8;

  v1 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "AllowFindMyActionTxPowerIncreaseLEConnecting");
  v2 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, __p, &byte_100992369);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2)
      return;
  }
  else if (!v2)
  {
    return;
  }
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992369)
      v4 = "Yes";
    else
      v4 = "No";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: AllowFindMyActionTxPowerIncreaseLEConnecting: %s", buf, 0xCu);
  }
  byte_100992368 = byte_100992369;
}

void sub_1003B1F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B1FB0()
{
  if (qword_100992380 != -1)
    dispatch_once(&qword_100992380, &stru_10092BD70);
  return byte_100992378;
}

void sub_1003B1FF0(id a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  void *__p[2];
  char v6;
  _BYTE buf[12];
  char v8;

  v1 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "AllowFindMyActionTxPowerIncrease");
  v2 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, __p, &byte_100992379);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2)
      return;
  }
  else if (!v2)
  {
    return;
  }
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992379)
      v4 = "Yes";
    else
      v4 = "No";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: allowFindMyActionTxPowerIncrease: %s", buf, 0xCu);
  }
  byte_100992378 = byte_100992379;
}

void sub_1003B2130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B216C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003B21E0;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100992390 != -1)
    dispatch_once(&qword_100992390, block);
  return byte_100992388;
}

void sub_1003B21E0(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  char v5;
  uint64_t v6;
  int v7;
  int v8;
  NSObject *v9;
  const char *v10;
  void *__p[2];
  char v12;
  char v13;
  _BYTE buf[12];
  char v15;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 328))(*(_QWORD *)(a1 + 32)))
  {
    v1 = sub_1000438A4();
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2584))(v1);
    byte_100992388 = v2;
    v3 = qword_1009997E8;
    if (!os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
    v4 = "disabled";
    if (v2)
      v4 = "enabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for Controller LE Connection Tx Power Increase HPLink : %s", buf, 0xCu);
  }
  v2 = byte_100992388;
LABEL_7:
  if (v2)
    v5 = _os_feature_enabled_impl("BluetoothFeatures", "EnableLEConnectionTxPowerBoost");
  else
    v5 = 0;
  byte_100992388 = v5;
  v13 = 0;
  v6 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "forceLEConnectionTxPowerEPA");
  v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v13);
  if (v13)
    v8 = v7;
  else
    v8 = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(*(void **)buf);
  v9 = qword_1009997E8;
  if (v8)
  {
    byte_100992388 = v13;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "forceLEConnectionTxPowerEPA is enabled with override.", buf, 2u);
      v9 = qword_1009997E8;
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100992388)
      v10 = "enabled";
    else
      v10 = "disabled";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "support for Get Scan Stats is %s", buf, 0xCu);
  }
}

void sub_1003B2414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B2450()
{
  if (qword_1009923A0 != -1)
    dispatch_once(&qword_1009923A0, &stru_10092BD90);
  return byte_100992398;
}

void sub_1003B2490(id a1)
{
  uint64_t v1;
  int v2;
  int v3;
  NSObject *v4;
  void *__p[2];
  char v6;
  uint8_t buf[8];
  char v8;

  v1 = sub_100027F68();
  sub_100091AE8(buf, "BBFC");
  sub_100091AE8(__p, "EnforceBBFCScanPrioritization");
  v2 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v1 + 72))(v1, buf, __p, &byte_100992398);
  if (byte_100992398)
    v3 = v2;
  else
    v3 = 0;
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3)
      return;
  }
  else if (!v3)
  {
    return;
  }
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Warning: BBFC: enforceBBFCScanPrioritization=true", buf, 2u);
  }
}

void sub_1003B2578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B25AC(uint64_t a1)
{
  uint64_t result;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1) & 1) != 0)
    return _os_feature_enabled_impl("BluetoothFeatures", "LowPowerModeForMagnet");
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 328))(a1);
  if ((_DWORD)result)
    return _os_feature_enabled_impl("BluetoothFeatures", "LowPowerModeForMagnet");
  return result;
}

uint64_t sub_1003B2608(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 328))(a1);
  if ((_DWORD)result)
    return (*(_DWORD *)(sub_1000438A4() + 712) - 1) >= 0x17 && (sub_10005F864() & 0xFFFFFFFC) != 112;
  return result;
}

BOOL sub_1003B2654(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 888))(a1) == 3;
}

void sub_1003B2744(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1003B27BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1003B2818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)AppProtectionObserver;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1003B28D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  char *v6;
  _DWORD v7[2];
  __int16 v8;
  char *v9;

  v2 = sub_100038E50();
  if (v2)
  {
    v3 = v2;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 272))(v2, *(unsigned int *)(a1 + 32));
    v4 = (id)qword_1009997E8;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 280))(v3);
      v6 = off_10092BDD0[(*(int (**)(uint64_t))(*(_QWORD *)v3 + 280))(v3)];
      v7[0] = 67109378;
      v7[1] = v5;
      v8 = 2080;
      v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "smartCoverStateDidChange -- getSmartCoverState() returned %d (%s)", (uint8_t *)v7, 0x12u);
    }

  }
}

void sub_1003B29E0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1003B2B8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1003B2C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)SystemScreenObserver;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1003B2DB8(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;
  void *v3;
  uint64_t v4;

  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v4 - 72));

  _Unwind_Resume(a1);
}

void sub_1003B2DF0(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  id WeakRetained;

  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEBUG))
    sub_1006E65FC();
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BLSBacklight sharedBacklight](BLSBacklight, "sharedBacklight"));
  v3 = objc_msgSend(v2, "isAlwaysOnEnabled");

  if (v3)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "screenStateChanged:", 1);

  }
}

void sub_1003B2E78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1003B2E8C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "screenStateChanged:", *(unsigned __int8 *)(a1 + 40));
}

void sub_1003B2F7C(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = sub_1002CD140(a1);
  *(_QWORD *)v2 = off_10092BE28;
  *(_QWORD *)(v2 + 8) = off_10092C1A0;
  *(_QWORD *)(v2 + 16) = off_10092C1C0;
  *(_QWORD *)(v2 + 24) = off_10092C1E0;
  *(_QWORD *)(v2 + 32) = off_10092C200;
  *(_QWORD *)(v2 + 40) = off_10092C220;
  *(_QWORD *)(v2 + 48) = off_10092C240;
  *(_QWORD *)(v2 + 56) = off_10092C260;
  *(_QWORD *)(v2 + 64) = off_10092C280;
  *(_QWORD *)(v2 + 72) = off_10092C2A0;
  *(_QWORD *)(v2 + 80) = off_10092C2C0;
  *(_QWORD *)(v2 + 88) = off_10092C2E0;
  *(_QWORD *)(v2 + 96) = off_10092C300;
  *(_QWORD *)(v2 + 104) = off_10092C320;
  *(_QWORD *)(v2 + 112) = off_10092C340;
  *(_QWORD *)(v2 + 120) = off_10092C360;
  *(_QWORD *)(v2 + 128) = off_10092C380;
  *(_QWORD *)(v2 + 136) = off_10092C3A0;
  *(_QWORD *)(v2 + 144) = off_10092C3C0;
  *(_QWORD *)(v2 + 152) = off_10092C3E0;
  *(_QWORD *)(v2 + 160) = off_10092C400;
  *(_QWORD *)(v2 + 168) = off_10092C420;
  *(_QWORD *)(v2 + 176) = off_10092C440;
  *(_QWORD *)(v2 + 184) = off_10092C460;
  *(_QWORD *)(v2 + 192) = off_10092C480;
  *(_QWORD *)(v2 + 200) = off_10092C4A0;
  *(_QWORD *)(v2 + 1256) = &off_10092C4C0;
  *(_QWORD *)(v2 + 1328) = 0;
  *(_OWORD *)(v2 + 1289) = 0u;
  *(_OWORD *)(v2 + 1280) = 0u;
  *(_OWORD *)(v2 + 1264) = 0u;
  *(_OWORD *)(v2 + 1308) = 0u;
  *(_BYTE *)(v2 + 1324) = 0;
  *(_DWORD *)(v2 + 1348) = -1;
  *(_QWORD *)(v2 + 1352) = -1;
  *(_QWORD *)(v2 + 1360) = 0;
  *(_DWORD *)(v2 + 1368) = -1;
  *(_BYTE *)(v2 + 1372) = 0;
  *(_QWORD *)(v2 + 1380) = -1;
  *(_BYTE *)(v2 + 1388) = 1;
  *(_OWORD *)(v2 + 1392) = 0u;
  *(_OWORD *)(v2 + 1432) = 0u;
  sub_1000160D0(v2 + 1448);
  *(_WORD *)(a1 + 1512) = 256;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(_BYTE *)(a1 + 1552) = 0;
  *(_QWORD *)(a1 + 1560) = CFSTR("XZ");
  v3 = *(void **)(a1 + 1432);
  *(_QWORD *)(a1 + 1432) = 0;

  *(_DWORD *)(a1 + 1408) = -1;
  *(_BYTE *)(a1 + 1412) = 0;
  operator new();
}

void sub_1003B327C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100069BDC(v2);
  sub_1003B3658((_QWORD *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003B32E0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  int v4;
  _QWORD v6[2];
  uint8_t buf[4];
  int v8;
  __int16 v9;
  int v10;

  v1 = *(_QWORD *)(a1 + 32);
  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, v1 + 1448);
  *(_BYTE *)(v1 + 1512) = 1;
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(v1 + 1512);
    v4 = *(unsigned __int8 *)(v1 + 1513);
    *(_DWORD *)buf = 67109376;
    v8 = v3;
    v9 = 1024;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SystemSettingsModel::systemMonitor fDeviceFirstUnlocked:%d fDeviceLocked:%d", buf, 0xEu);
  }
  sub_100034264((uint64_t)v6);
  sub_1002CFB34((os_unfair_lock_s *)v1);
  return sub_100034234((uint64_t)v6);
}

void sub_1003B33C4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

id sub_1003B33E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1528), "screenStateChanged:", objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 1440), "screenOn"));
}

uint64_t sub_1003B3410(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  NSObject *v3;
  int v4;
  int v5;
  _QWORD v7[2];
  uint8_t buf[4];
  int v9;
  __int16 v10;
  int v11;

  v1 = *(_QWORD *)(a1 + 32);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, v1 + 1448);
  v2 = objc_msgSend(*(id *)(v1 + 1440), "systemLockStateSync") == 3
    || objc_msgSend(*(id *)(v1 + 1440), "systemLockStateSync") == 2;
  *(_BYTE *)(v1 + 1513) = v2;
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(v1 + 1512);
    v5 = *(unsigned __int8 *)(v1 + 1513);
    *(_DWORD *)buf = 67109376;
    v9 = v4;
    v10 = 1024;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SystemSettingsModel::systemMonitor fDeviceFirstUnlocked:%d fDeviceLocked:%d", buf, 0xEu);
  }
  sub_100034264((uint64_t)v7);
  sub_1002CF978((os_unfair_lock_s *)v1, *(unsigned __int8 *)(v1 + 1513));
  return sub_100034234((uint64_t)v7);
}

void sub_1003B351C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B3538(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  NSObject *v3;
  int v4;
  int v5;
  _QWORD v7[2];
  uint8_t buf[4];
  int v9;
  __int16 v10;
  int v11;

  v1 = *(_QWORD *)(a1 + 32);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, v1 + 1448);
  v2 = objc_msgSend(*(id *)(v1 + 1440), "systemLockStateSync") == 3
    || objc_msgSend(*(id *)(v1 + 1440), "systemLockStateSync") == 2;
  *(_BYTE *)(v1 + 1513) = v2;
  *(_BYTE *)(v1 + 1512) = objc_msgSend(*(id *)(v1 + 1440), "firstUnlockedSync");
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(v1 + 1512);
    v5 = *(unsigned __int8 *)(v1 + 1513);
    *(_DWORD *)buf = 67109376;
    v9 = v4;
    v10 = 1024;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SystemSettings::SystemMonitor activated fDeviceFirstUnlocked:%d fDeviceLocked:%d", buf, 0xEu);
  }
  return sub_100034234((uint64_t)v7);
}

void sub_1003B363C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1003B3658(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  *a1 = &off_100923480;
  a1[1] = &off_100923658;
  a1[2] = &off_100923678;
  a1[3] = &off_100923698;
  a1[4] = &off_1009236B8;
  a1[5] = &off_1009236D8;
  a1[6] = &off_1009236F8;
  a1[7] = &off_100923718;
  a1[8] = &off_100923738;
  a1[9] = &off_100923758;
  a1[10] = &off_100923778;
  a1[11] = &off_100923798;
  a1[12] = &off_1009237B8;
  a1[13] = &off_1009237D8;
  a1[14] = &off_1009237F8;
  a1[15] = &off_100923818;
  a1[16] = &off_100923838;
  a1[17] = &off_100923858;
  a1[18] = &off_100923878;
  a1[19] = &off_100923898;
  a1[20] = &off_1009238B8;
  a1[21] = &off_1009238D8;
  a1[22] = &off_1009238F8;
  a1[23] = &off_100923918;
  a1[24] = &off_100923938;
  a1[25] = &off_100923958;
  v2 = (void *)a1[152];
  if (v2)
  {
    a1[153] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[147];
  if (v3)
  {
    a1[148] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[142];
  if (v4)
  {
    a1[143] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[137];
  if (v5)
  {
    a1[138] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[132];
  if (v6)
  {
    a1[133] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[127];
  if (v7)
  {
    a1[128] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[122];
  if (v8)
  {
    a1[123] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[117];
  if (v9)
  {
    a1[118] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[112];
  if (v10)
  {
    a1[113] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[107];
  if (v11)
  {
    a1[108] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[102];
  if (v12)
  {
    a1[103] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[97];
  if (v13)
  {
    a1[98] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[92];
  if (v14)
  {
    a1[93] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[87];
  if (v15)
  {
    a1[88] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[82];
  if (v16)
  {
    a1[83] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[77];
  if (v17)
  {
    a1[78] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[72];
  if (v18)
  {
    a1[73] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[67];
  if (v19)
  {
    a1[68] = v19;
    operator delete(v19);
  }
  v20 = (void *)a1[62];
  if (v20)
  {
    a1[63] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[57];
  if (v21)
  {
    a1[58] = v21;
    operator delete(v21);
  }
  v22 = (void *)a1[52];
  if (v22)
  {
    a1[53] = v22;
    operator delete(v22);
  }
  v23 = (void *)a1[47];
  if (v23)
  {
    a1[48] = v23;
    operator delete(v23);
  }
  v24 = (void *)a1[42];
  if (v24)
  {
    a1[43] = v24;
    operator delete(v24);
  }
  v25 = (void *)a1[37];
  if (v25)
  {
    a1[38] = v25;
    operator delete(v25);
  }
  v26 = (void *)a1[32];
  if (v26)
  {
    a1[33] = v26;
    operator delete(v26);
  }
  v27 = (void *)a1[27];
  if (v27)
  {
    a1[28] = v27;
    operator delete(v27);
  }
  return a1;
}

uint64_t sub_1003B38BC(int a1, std::string *this)
{
  unsigned __int8 v3;

  v3 = atomic_load((unsigned __int8 *)&qword_1009923C0);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1009923C0))
  {
    sub_100091AE8(&stru_1009923A8, "");
    __cxa_atexit((void (*)(void *))&std::string::~string, &stru_1009923A8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1009923C0);
  }
  if (qword_1009923C8 != -1)
    dispatch_once(&qword_1009923C8, &stru_10092C500);
  std::string::operator=(this, &stru_1009923A8);
  return 0;
}

void sub_1003B3974(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1009923C0);
  _Unwind_Resume(a1);
}

void sub_1003B398C(id a1)
{
  std::string::value_type *v1;
  NSObject *v2;
  _QWORD *v3;
  std::string *p_p;
  std::string::size_type size;
  std::string *v6;
  uint64_t v7;
  NSObject *v8;
  std::string __p;
  unint64_t __val;
  uint8_t buf[16];
  _OWORD v12[4];
  void *v13[2];
  __int128 v14;
  __int128 v15;
  _OWORD v16[9];
  uint64_t v17;

  __val = 1;
  v1 = (std::string::value_type *)container_system_group_path_for_identifier(0, "systemgroup.com.apple.bluetooth", &__val);
  if (v1)
  {
    v2 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Using containerized path %s", buf, 0xCu);
    }
    std::string::assign(&stru_1009923A8, v1);
    free(v1);
  }
  else if (IsAppleInternalBuild(0))
  {
    v17 = 0;
    v15 = 0u;
    memset(v16, 0, sizeof(v16));
    *(_OWORD *)v13 = 0u;
    v14 = 0u;
    memset(v12, 0, sizeof(v12));
    *(_OWORD *)buf = 0u;
    sub_1002613AC((uint64_t)buf);
    v3 = sub_1002614D8(v12, (uint64_t)"Failed to find the system container: ", 37);
    std::to_string(&__p, __val);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_1002614D8(v3, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::stringbuf::str((char *)v12 + 8);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &__p;
    else
      v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
    sub_10011D44C((const char *)v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *(_QWORD *)&v12[0] = v7;
    if (SHIBYTE(v14) < 0)
      operator delete(v13[1]);
    std::streambuf::~streambuf((char *)v12 + 8);
    std::ios::~ios(v16);
  }
  else
  {
    v8 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006E6634((uint64_t *)&__val, v8);
  }
}

void sub_1003B3BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1006CC5C8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1003B3C0C(uint64_t a1)
{
  *(_QWORD *)(a1 + 1272) = SCDynamicStoreKeyCreateComputerName(kCFAllocatorDefault);
  sub_1003B3C40(a1);
}

void sub_1003B3C40(uint64_t a1)
{
  SCDynamicStoreRef v2;
  const __SCDynamicStore *v3;
  uint64_t v4;
  __CFArray *Mutable;
  __CFArray *v6;
  const void *v7;
  const void *v8;
  const __SCDynamicStore *v9;
  SCDynamicStoreContext v10;

  if (*(_QWORD *)(a1 + 1272) || *(_QWORD *)(a1 + 1280))
  {
    if (*(_QWORD *)(a1 + 1264))
      goto LABEL_6;
    v10.version = 0;
    memset(&v10.retain, 0, 24);
    v10.info = (void *)a1;
    v2 = SCDynamicStoreCreate(kCFAllocatorDefault, CFSTR("com.apple.MobileBluetooth.SystemSettings"), (SCDynamicStoreCallBack)sub_1003B3E2C, &v10);
    *(_QWORD *)(a1 + 1264) = v2;
    if (v2)
    {
      v3 = v2;
      v4 = sub_10006BBEC();
      SCDynamicStoreSetDispatchQueue(v3, *(dispatch_queue_t *)(v4 + 8));
LABEL_6:
      Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (Mutable)
      {
        v6 = Mutable;
        v7 = *(const void **)(a1 + 1272);
        if (v7)
          CFArrayAppendValue(Mutable, v7);
        v8 = *(const void **)(a1 + 1280);
        if (v8)
          CFArrayAppendValue(v6, v8);
        SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 1264), v6, 0);
        CFRelease(v6);
      }
      return;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E66A8();
  }
  else
  {
    v9 = *(const __SCDynamicStore **)(a1 + 1264);
    if (v9)
    {
      SCDynamicStoreSetDispatchQueue(v9, 0);
      CFRelease(*(CFTypeRef *)(a1 + 1264));
      *(_QWORD *)(a1 + 1264) = 0;
    }
  }
}

void sub_1003B3D74(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 1272);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 1272) = 0;
  }
  sub_1003B3C40(a1);
}

void sub_1003B3DA4(uint64_t a1)
{
  if (sub_1004F9520())
  {
    *(_QWORD *)(a1 + 1280) = CFSTR("com.apple.MobileInternetSharing");
    sub_1003B3C40(a1);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006E66D4();
  }
}

void sub_1003B3E0C(uint64_t a1)
{
  sub_1003B3DA4(a1 - 8);
}

void sub_1003B3E14(uint64_t a1)
{
  *(_QWORD *)(a1 + 1280) = 0;
  sub_1003B3C40(a1);
}

void sub_1003B3E1C(uint64_t a1)
{
  *(_QWORD *)(a1 + 1272) = 0;
  sub_1003B3C40(a1 - 8);
}

void sub_1003B3E2C(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  sub_1003B40A8(a3, a2);
}

uint64_t sub_1003B3E34(uint64_t a1, std::string *a2)
{
  __CFString *HostName;
  const void *v4;
  uint64_t v5;
  SCPreferencesRef v7;

  HostName = (__CFString *)SCDynamicStoreCopyComputerName(*(SCDynamicStoreRef *)(a1 + 1264), 0);
  v4 = HostName;
  if (HostName)
    goto LABEL_2;
  v7 = SCPreferencesCreate(kCFAllocatorDefault, CFSTR("com.apple.MobileBluetooth.SystemSettings"), 0);
  if (!v7)
    return 1;
  v4 = v7;
  HostName = (__CFString *)SCPreferencesGetHostName();
  if (HostName)
  {
LABEL_2:
    std::string::assign(a2, (const std::string::value_type *)-[__CFString UTF8String](objc_retainAutorelease(HostName), "UTF8String"));
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  CFRelease(v4);
  return v5;
}

uint64_t sub_1003B3EC4(uint64_t a1, BOOL *a2, _BYTE *a3, _BYTE *a4)
{
  const __SCDynamicStore *v8;
  const __CFString *v9;
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  CFTypeID v12;
  const __CFNumber *Value;
  const __CFNumber *v14;
  CFTypeID v15;
  uint64_t v16;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  CFTypeID v20;
  const __CFNumber *v21;
  const __CFNumber *v22;
  CFTypeID v23;
  const __CFNumber *v24;
  const __CFNumber *v25;
  CFTypeID v26;
  int valuePtr;

  *a2 = 0;
  *a4 = 0;
  *a3 = 0;
  if (!sub_1004F9520())
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E66D4();
    return 1;
  }
  v8 = *(const __SCDynamicStore **)(a1 + 1264);
  if (!v8)
    return 1;
  v9 = *(const __CFString **)(a1 + 1280);
  if (!v9)
    return 1;
  v10 = (const __CFDictionary *)SCDynamicStoreCopyValue(v8, v9);
  if (!v10)
    return 1;
  v11 = v10;
  v12 = CFGetTypeID(v10);
  if (v12 == CFDictionaryGetTypeID())
  {
    valuePtr = 0;
    Value = (const __CFNumber *)CFDictionaryGetValue(v11, CFSTR("State"));
    if (Value
      && (v14 = Value, v15 = CFGetTypeID(Value), v15 == CFNumberGetTypeID())
      && CFNumberGetValue(v14, kCFNumberIntType, &valuePtr))
    {
      v16 = 0;
      *a2 = valuePtr == 1023;
    }
    else
    {
      v16 = 1;
    }
    v18 = (const __CFDictionary *)CFDictionaryGetValue(v11, CFSTR("Hosts"));
    if (v18)
    {
      v19 = v18;
      v20 = CFGetTypeID(v18);
      if (v20 == CFDictionaryGetTypeID())
      {
        v21 = (const __CFNumber *)CFDictionaryGetValue(v19, CFSTR("Current"));
        if (v21)
        {
          v22 = v21;
          v23 = CFGetTypeID(v21);
          if (v23 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v22, kCFNumberIntType, &valuePtr);
            *a3 = valuePtr;
          }
        }
        v24 = (const __CFNumber *)CFDictionaryGetValue(v19, CFSTR("Max"));
        if (v24)
        {
          v25 = v24;
          v26 = CFGetTypeID(v24);
          if (v26 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v25, kCFNumberIntType, &valuePtr);
            *a4 = valuePtr;
          }
        }
      }
    }
  }
  else
  {
    v16 = 1;
  }
  CFRelease(v11);
  return v16;
}

void sub_1003B40A8(uint64_t a1, const __CFArray *a2)
{
  CFIndex v4;
  const __CFString *ValueAtIndex;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  __int16 v9;
  void *__p[2];
  uint64_t v11;
  void *v12[2];
  uint64_t v13;

  if (sub_1004F9520())
  {
    if (CFArrayGetCount(a2) >= 1)
    {
      v4 = 0;
      do
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v4);
        v6 = ValueAtIndex;
        v7 = *(const __CFString **)(a1 + 1272);
        if (v7 && CFStringCompare(ValueAtIndex, v7, 0) == kCFCompareEqualTo)
        {
          v12[1] = 0;
          v13 = 0;
          v12[0] = 0;
          if (!(*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a1 + 16))(a1, v12))
          {
            if (SHIBYTE(v13) < 0)
            {
              sub_10003430C(__p, v12[0], (unint64_t)v12[1]);
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)v12;
              v11 = v13;
            }
            sub_1002CD46C((os_unfair_lock_s *)a1, __p);
            if (SHIBYTE(v11) < 0)
              operator delete(__p[0]);
          }
          if (SHIBYTE(v13) < 0)
            operator delete(v12[0]);
        }
        else
        {
          v8 = *(const __CFString **)(a1 + 1280);
          if (v8 && CFStringCompare(v6, v8, 0) == kCFCompareEqualTo)
          {
            LOBYTE(v12[0]) = 0;
            v9 = 0;
            if (!(*(unsigned int (**)(uint64_t, void **, char *, __int16 *))(*(_QWORD *)a1 + 24))(a1, v12, (char *)&v9 + 1, &v9))sub_1002CD750((os_unfair_lock_s *)a1, LOBYTE(v12[0]), HIBYTE(v9), v9);
          }
        }
        ++v4;
      }
      while (v4 < CFArrayGetCount(a2));
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006E66D4();
  }
}

void sub_1003B4228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_1003B425C()
{
  if (!sub_1004F950C() && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006E6700();
}

uint64_t sub_1003B42A8(uint64_t a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, _BYTE *a6, _DWORD *a7)
{
  int v14;
  int v15;
  uint64_t result;

  if (sub_1004F950C())
  {
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
    v14 = sub_1005F6E08(*(_QWORD *)(a1 + 1400));
    *a5 = v14;
    if (v14 && sub_1005F6E28(*(_QWORD *)(a1 + 1400)))
    {
      if (sub_1005F6E18(*(_QWORD *)(a1 + 1400)) == 1)
        *a2 = 1;
      if (sub_1005F6E18(*(_QWORD *)(a1 + 1400)) == 2)
        *a3 = 1;
      if (sub_1005F6E18(*(_QWORD *)(a1 + 1400)) == 3)
        *a4 = 1;
    }
    *a6 = sub_1005F6E38(*(_QWORD *)(a1 + 1400));
    v15 = sub_1005F6DFC(*(_QWORD *)(a1 + 1400));
    result = 0;
    *a7 = v15;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E6700();
    return 1;
  }
  return result;
}

void sub_1003B43BC(uint64_t a1)
{
  char *v1;
  std::string *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  const std::string::value_type *v6;
  std::string *v7;
  std::string v8;
  std::string v9;
  std::string v10;
  int v11;
  char v12;
  __int16 v13;
  __int16 v14;

  v14 = 0;
  v13 = 0;
  v12 = 0;
  v11 = 0;
  if (!(*(unsigned int (**)(uint64_t, char *, __int16 *, char *, __int16 *, char *, int *))(*(_QWORD *)a1 + 48))(a1, (char *)&v14 + 1, &v14, (char *)&v13 + 1, &v13, &v12, &v11))
  {
    if ((_BYTE)v13)
      v1 = "On";
    else
      v1 = "Off";
    sub_100091AE8(&v8, v1);
    v2 = std::string::insert(&v8, 0, "WiFi State: ");
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v3;
    v2->__r_.__value_.__l.__size_ = 0;
    v2->__r_.__value_.__r.__words[2] = 0;
    v2->__r_.__value_.__r.__words[0] = 0;
    v4 = std::string::append(&v9, ", Band: ");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
    if ((_BYTE)v14)
    {
      v6 = "5 GHz";
    }
    else if (HIBYTE(v14))
    {
      v6 = "2.4 GHz";
    }
    else if (HIBYTE(v13))
    {
      v6 = "6 GHz";
    }
    else
    {
      v6 = "Unknown";
    }
    std::string::append(&v10, v6);
    if (v12)
      std::string::append(&v10, ". [WARNING] 2.4 GHz critical state!");
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v10;
    else
      v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
    sub_10011C9B4((const char *)v7);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_1003B4538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B4580(uint64_t a1, _BYTE *a2)
{
  char v4;
  uint64_t result;

  if (sub_1004F950C())
  {
    v4 = sub_1005F6E28(*(_QWORD *)(a1 + 1400));
    result = 0;
    *a2 = v4;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E6700();
    return 1;
  }
  return result;
}

void sub_1003B45EC(uint64_t a1)
{
  sub_1005F6480(*(_QWORD *)(a1 + 1400));
}

void sub_1003B45F4(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  if (sub_1004F950C())
  {
    v2 = sub_10006BBEC();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1003B4688;
    v3[3] = &unk_100917378;
    v3[4] = a1;
    sub_100041A34(v2, v3);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006E6700();
  }
}

void sub_1003B4688(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_1005F6E08(*(_QWORD *)(v1 + 1400));
  v3 = sub_1005F6E18(*(_QWORD *)(v1 + 1400)) - 1;
  if (v3 >= 3)
  {
    sub_1005F6E28(*(_QWORD *)(v1 + 1400));
    v4 = 0;
  }
  else
  {
    v4 = (unint64_t)&_mh_execute_header + ((unint64_t)v3 << 32);
  }
  v5 = sub_1005F6E38(*(_QWORD *)(v1 + 1400));
  v6 = v5 | (sub_1005F6DFC(*(_QWORD *)(v1 + 1400)) << 32);
  sub_1003B43BC(v1);
  sub_1002CD958((os_unfair_lock_s *)v1, v4 | v2, v6);
}

void sub_1003B4718(uint64_t a1)
{
  const __SCPreferences *v2;
  const __SCPreferences *v3;
  uint64_t v4;
  __CFNotificationCenter *LocalCenter;
  SCPreferencesContext v6;

  v2 = SCPreferencesCreate(kCFAllocatorDefault, CFSTR("com.apple.MobileBluetooth.SystemSettings"), CFSTR("com.apple.radios.plist"));
  *(_QWORD *)(a1 + 1296) = v2;
  if (v2)
  {
    v6.version = 0;
    memset(&v6.retain, 0, 24);
    v6.info = (void *)a1;
    SCPreferencesSetCallback(v2, (SCPreferencesCallBack)sub_1003B47D0, &v6);
    v3 = *(const __SCPreferences **)(a1 + 1296);
    v4 = sub_10006BBEC();
    SCPreferencesSetDispatchQueue(v3, *(dispatch_queue_t *)(v4 + 8));
  }
  if (!*(_BYTE *)(a1 + 1304))
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(LocalCenter, (const void *)a1, (CFNotificationCallback)sub_1003B47D8, (CFStringRef)NSProcessInfoPowerStateDidChangeNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    *(_BYTE *)(a1 + 1304) = 1;
  }
}

void sub_1003B47D0(uint64_t a1, char a2, uint64_t a3)
{
  sub_1003B4A20(a3, a2);
}

void sub_1003B47D8(uint64_t a1, os_unfair_lock_s *a2)
{
  void *v3;
  int v4;
  NSObject *v5;
  _DWORD v6[2];

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"));
  v4 = objc_msgSend(v3, "isLowPowerModeEnabled");

  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Low Power Mode Enabled: %d", (uint8_t *)v6, 8u);
  }
  sub_1002CDD24(a2, v4);
}

void sub_1003B48AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1003B48C4(uint64_t a1)
{
  sub_1003B4718(a1 - 24);
}

void sub_1003B48CC(uint64_t a1)
{
  const __SCPreferences *v2;
  __CFNotificationCenter *LocalCenter;

  v2 = *(const __SCPreferences **)(a1 + 1296);
  if (v2)
  {
    SCPreferencesSetDispatchQueue(v2, 0);
    CFRelease(*(CFTypeRef *)(a1 + 1296));
    *(_QWORD *)(a1 + 1296) = 0;
  }
  if (*(_BYTE *)(a1 + 1304))
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterRemoveObserver(LocalCenter, (const void *)a1, (CFNotificationName)NSProcessInfoPowerStateDidChangeNotification, 0);
    *(_BYTE *)(a1 + 1304) = 0;
  }
}

void sub_1003B492C(uint64_t a1)
{
  sub_1003B48CC(a1 - 24);
}

BOOL sub_1003B4934(uint64_t a1, BOOL *a2)
{
  return !sub_1003B4958(a1, CFSTR("AirplaneMode"), a2);
}

BOOL sub_1003B4958(uint64_t a1, const __CFString *a2, BOOL *a3)
{
  const __CFBoolean *Value;
  _BOOL8 v5;
  const __CFBoolean *v6;
  CFTypeID v7;
  BOOL v8;

  Value = (const __CFBoolean *)SCPreferencesGetValue(*(SCPreferencesRef *)(a1 + 1296), a2);
  v5 = Value != 0;
  if (Value)
  {
    v6 = Value;
    v7 = CFGetTypeID(Value);
    if (v7 != CFBooleanGetTypeID())
      return 0;
    v8 = CFBooleanGetValue(v6) != 0;
  }
  else
  {
    v8 = 0;
  }
  *a3 = v8;
  return v5;
}

uint64_t sub_1003B49D0(uint64_t a1, _BYTE *a2)
{
  void *v3;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"));
  *a2 = objc_msgSend(v3, "isLowPowerModeEnabled");

  return 0;
}

void sub_1003B4A10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1003B4A20(uint64_t a1, char a2)
{
  unsigned __int8 v3;

  if ((a2 & 2) != 0)
  {
    v3 = 0;
    SCPreferencesSynchronize(*(SCPreferencesRef *)(a1 + 1296));
    if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)a1 + 72))(a1, &v3))
      sub_1002CDB68((os_unfair_lock_s *)a1, v3);
  }
}

void sub_1003B4A78(uint64_t a1)
{
  io_connect_t v2;
  IONotificationPort *v3;
  NSObject *v4;

  v2 = IORegisterForSystemPower((void *)a1, (IONotificationPortRef *)(a1 + 1312), (IOServiceInterestCallback)sub_1003B4AD0, (io_object_t *)(a1 + 1320));
  *(_DWORD *)(a1 + 1308) = v2;
  if (v2)
  {
    *(_BYTE *)(a1 + 1324) = 0;
    v3 = *(IONotificationPort **)(a1 + 1312);
    v4 = *(NSObject **)(sub_10006BBEC() + 8);
    IONotificationPortSetDispatchQueue(v3, v4);
  }
}

void sub_1003B4AD0(uint64_t a1, uint64_t a2, int a3, intptr_t a4)
{
  sub_1003B4B2C(a1, a3, a4);
}

void sub_1003B4ADC(uint64_t a1)
{
  sub_1003B4A78(a1 - 32);
}

uint64_t sub_1003B4AE4(uint64_t result)
{
  uint64_t v1;

  if (*(_DWORD *)(result + 1308))
  {
    v1 = result;
    IODeregisterForSystemPower((io_object_t *)(result + 1320));
    IONotificationPortDestroy(*(IONotificationPortRef *)(v1 + 1312));
    result = IOServiceClose(*(_DWORD *)(v1 + 1308));
    *(_DWORD *)(v1 + 1308) = 0;
  }
  return result;
}

uint64_t sub_1003B4B24(uint64_t a1)
{
  return sub_1003B4AE4(a1 - 32);
}

void sub_1003B4B2C(uint64_t a1, int a2, intptr_t a3)
{
  NSObject *v6;
  double v7;
  char v8;
  double v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  int v21;
  _BOOL4 v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  NSObject *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  __int128 __p;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t buf[64];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "powerManagementMessage %x", buf, 8u);
  }
  if (a2 == -536870144)
  {
    sub_1002CDE24((os_unfair_lock_s *)a1, 2u, 0);
    if (*(double *)(a1 + 1392) == 0.0)
    {
      v7 = 0.0;
    }
    else
    {
      +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
      v7 = v9 - *(double *)(a1 + 1392);
    }
    *(_QWORD *)(a1 + 1392) = 0;
    goto LABEL_15;
  }
  v7 = 0.0;
  if (a2 == -536870272)
  {
    v10 = sub_1002CDE24((os_unfair_lock_s *)a1, 1u, 0);
    *(_BYTE *)(a1 + 1324) = 0;
    +[NSDate timeIntervalSinceReferenceDate](NSDate, "timeIntervalSinceReferenceDate");
    *(_QWORD *)(a1 + 1392) = v11;
    if (!v10)
    {
LABEL_8:
      IOCancelPowerChange(*(_DWORD *)(a1 + 1308), a3);
      goto LABEL_15;
    }
LABEL_12:
    IOAllowPowerChange(*(_DWORD *)(a1 + 1308), a3);
    goto LABEL_15;
  }
  if (a2 == -536870288)
  {
    if (!*(_BYTE *)(a1 + 1324))
    {
      v8 = sub_1002CDE24((os_unfair_lock_s *)a1, 0, 0);
      *(_BYTE *)(a1 + 1324) = 1;
      if ((v8 & 1) == 0)
        goto LABEL_8;
    }
    goto LABEL_12;
  }
LABEL_15:
  v12 = sub_10003BE44();
  if (v7 > (double)(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 464))(v12))
  {
    v13 = sub_1000438A4();
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 1264))(v13);
    v14 = sub_10003BE44();
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 392))(v14) ^ 1;
    if (a2 != -536870144)
      LOBYTE(v15) = 1;
    if ((v15 & 1) == 0)
    {
      v16 = *(_DWORD *)(sub_1000438A4() + 712);
      if (v16 - 2000 <= 0x7CF)
      {
        v47 = 0;
        v48 = 0;
        v45 = 0;
        v46 = 0;
        v43 = 0;
        v44 = 0;
        v42 = 0;
        if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 176))(a1, 0) & 1) != 0)
        {
          v17 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v47;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Calling PPS - durationSleep %d, controllerDidSleep %d", buf, 0xEu);
          }
          v18 = sub_1000438A4();
          v19 = (*(uint64_t (**)(uint64_t, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *))(*(_QWORD *)v18 + 1200))(v18, (char *)&v48 + 4, &v48, (char *)&v47 + 4, &v47, (char *)&v46 + 4, &v46, (char *)&v45 + 4, &v45, (char *)&v44 + 4, &v44, (char *)&v43 + 4, &v43, (char *)&v42 + 4, &v42);
          v20 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67112704;
            *(_DWORD *)&buf[4] = v19;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = HIDWORD(v48);
            *(_WORD *)&buf[14] = 1024;
            *(_DWORD *)&buf[16] = v48;
            *(_WORD *)&buf[20] = 1024;
            *(_DWORD *)&buf[22] = HIDWORD(v47);
            *(_WORD *)&buf[26] = 1024;
            *(_DWORD *)&buf[28] = v47;
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = HIDWORD(v46);
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v46;
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = HIDWORD(v45);
            *(_WORD *)&buf[50] = 1024;
            *(_DWORD *)&buf[52] = v45;
            *(_WORD *)&buf[56] = 1024;
            *(_DWORD *)&buf[58] = HIDWORD(v44);
            *(_WORD *)&buf[62] = 1024;
            LODWORD(v50) = v44;
            WORD2(v50) = 1024;
            *(_DWORD *)((char *)&v50 + 6) = HIDWORD(v43);
            WORD5(v50) = 1024;
            HIDWORD(v50) = v43;
            LOWORD(v51) = 1024;
            *(_DWORD *)((char *)&v51 + 2) = HIDWORD(v42);
            WORD3(v51) = 1024;
            DWORD2(v51) = v42;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "PPS completed with result %d durationTotal %d, durationActive %d, durationIdle %d, durationSleep %d disableCounter %d, iPATxBT %d, ePATxBT %d, iPATxLE %d, ePATxLE %d, connectedRxBT %d, connectedRxLE %d, scanRxBT %d scanRxLE %d, totalPHYCal %d", buf, 0x5Cu);
          }
          v21 = v47;
          v22 = v47 == 0;
        }
        else
        {
          v22 = 0;
          v19 = 205;
          v21 = v47;
        }
        v25 = v21 != 0;
        v26 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&buf[4] = v19;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v47;
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&buf[16] = v21 != 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "result %d, durationSleep %d, controllerDidSleep %d", buf, 0x14u);
        }
        if (v19)
          return;
LABEL_41:
        if (v25)
          return;
        v28 = sub_10003BE44();
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 328))(v28) & 1) == 0)
        {
          v29 = sub_10003BE44();
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 344))(v29))
            return;
        }
        if (qword_100977B40 != -1)
          dispatch_once(&qword_100977B40, &stru_10092C598);
        v30 = *((_DWORD *)off_100977B38 + 40) + *((_DWORD *)off_100977B38 + 39);
        if (v30)
        {
          v31 = sub_10003BE44();
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 344))(v31))
          {
            v37 = qword_1009997E8;
            if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
              sub_1006E672C(v30, v37, v38, v7);
            return;
          }
        }
        v32 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218752;
          *(_QWORD *)&buf[4] = (uint64_t)v7;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v30;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 0;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v22;
          _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Detected that BT did not sleep during AP sleep of %lld seconds.  Restarting nb connections: %d, controllerDidSleep: %d, retry: %d", buf, 0x1Eu);
          if (!v22)
            goto LABEL_59;
        }
        else if (!v22)
        {
          goto LABEL_59;
        }
        v33 = sub_10003BE44();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 344))(v33))
        {
          v47 = 0;
          v48 = 0;
          v45 = 0;
          v46 = 0;
          v43 = 0;
          v44 = 0;
          v42 = 0;
          v34 = sub_1000438A4();
          v35 = (*(uint64_t (**)(uint64_t, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *))(*(_QWORD *)v34 + 1200))(v34, (char *)&v48 + 4, &v48, (char *)&v47 + 4, &v47, (char *)&v46 + 4, &v46, (char *)&v45 + 4, &v45, (char *)&v44 + 4, &v44, (char *)&v43 + 4, &v43, (char *)&v42 + 4, &v42);
          v36 = qword_1009997E8;
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&buf[4] = v35;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v47;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Retry PPS completed with result %d, durationSleep %d", buf, 0xEu);
          }
          if (!v35 && (_DWORD)v47)
            return;
        }
LABEL_59:
        v39 = sub_100065478();
        memset(buf, 0, 24);
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint8_t *))(*(_QWORD *)v39 + 104))(v39, 6, 0, buf);
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
        if (qword_100977A58 != -1)
          dispatch_once(&qword_100977A58, &stru_10092C5B8);
        v40 = off_100977A50;
        sub_100091AE8(&__p, "");
        sub_1004A37B0((uint64_t)v40, 653, &__p);
      }
      if (v16 - 1 > 0x7CE)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006E67A4();
      }
      else
      {
        WORD2(v48) = 0;
        LOWORD(v48) = 0;
        WORD2(v47) = 0;
        LOWORD(v47) = 0;
        if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 176))(a1, 0))
        {
          if (v16 < 0x13)
          {
            v27 = sub_1000438A4();
            v24 = (*(uint64_t (**)(uint64_t, _QWORD, char *, uint64_t *, char *, uint64_t *))(*(_QWORD *)v27 + 1168))(v27, 0, (char *)&v48 + 4, &v48, (char *)&v47 + 4, &v47);
          }
          else
          {
            v61 = 0;
            v59 = 0u;
            v60 = 0u;
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v50 = 0u;
            memset(buf, 0, sizeof(buf));
            v23 = sub_1000438A4();
            v24 = (*(uint64_t (**)(uint64_t, _QWORD, uint8_t *))(*(_QWORD *)v23 + 1176))(v23, 0, buf);
            if (!v24)
            {
              WORD2(v48) = *(_WORD *)&buf[4];
              WORD2(v47) = *(_WORD *)&buf[12];
            }
          }
        }
        else
        {
          v24 = 205;
        }
        v22 = 0;
        v25 = WORD2(v47) != 0;
        if (!v24)
          goto LABEL_41;
      }
    }
  }
}

void sub_1003B531C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1003B5354(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  *(CFAbsoluteTime *)(a1 + 1336) = CFAbsoluteTimeGetCurrent();
  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 1336);
    v25 = 134217984;
    v26 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): current timestamp: %f", (uint8_t *)&v25, 0xCu);
  }
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 1328);
    v25 = 134217984;
    v26 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): previous timestamp: %f", (uint8_t *)&v25, 0xCu);
  }
  v8 = *(double *)(a1 + 1336) - *(double *)(a1 + 1328);
  v9 = sub_10003BE44();
  v10 = (double)(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 456))(v9);
  if (v8 <= v10)
  {
    v17 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v25) = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): can't read power stats right now", (uint8_t *)&v25, 2u);
    }
    if (*(double *)(a1 + 1336) < *(double *)(a1 + 1328))
    {
      v18 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v19 = *(_QWORD *)(a1 + 1336);
        v20 = *(_QWORD *)(a1 + 1328);
        v25 = 134218240;
        v26 = v19;
        v27 = 2048;
        v28 = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): current timestamp: %f is less than previous time stamp: %f", (uint8_t *)&v25, 0x16u);
      }
      *(_QWORD *)(a1 + 1328) = *(_QWORD *)(a1 + 1336);
    }
    v21 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v22 = *(_QWORD *)(a1 + 1336);
      v25 = 134217984;
      v26 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): end current timestamp: %f", (uint8_t *)&v25, 0xCu);
    }
    v15 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v23 = *(_QWORD *)(a1 + 1328);
      v25 = 134217984;
      v26 = v23;
      goto LABEL_23;
    }
  }
  else
  {
    if (a2)
    {
      *(_QWORD *)(a1 + 1328) = *(_QWORD *)(a1 + 1336);
      v11 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_QWORD *)(a1 + 1328);
        v25 = 134217984;
        v26 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): (reset) previous timestamp: %f", (uint8_t *)&v25, 0xCu);
      }
    }
    v13 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_QWORD *)(a1 + 1336);
      v25 = 134217984;
      v26 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): end current timestamp: %f", (uint8_t *)&v25, 0xCu);
    }
    v15 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(_QWORD *)(a1 + 1328);
      v25 = 134217984;
      v26 = v16;
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): end previous timestamp: %f", (uint8_t *)&v25, 0xCu);
    }
  }
  return v8 > v10;
}

uint64_t sub_1003B56A8(os_unfair_lock_s *a1, int a2)
{
  NSObject *v4;
  _DWORD v6[2];

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Notifying system is shutting down with reason %d", (uint8_t *)v6, 8u);
  }
  return sub_1002CDE24(a1, 4u, a2);
}

void sub_1003B5764(uint64_t a1)
{
  int *v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t v13[8];
  _QWORD handler[5];

  v2 = (int *)(a1 + 1344);
  v3 = *(NSObject **)(sub_10006BBEC() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1003B5844;
  handler[3] = &unk_100927440;
  handler[4] = a1;
  v4 = notify_register_dispatch("com.apple.mobile.keybagd.first_unlock", v2, v3, handler);
  v5 = qword_1009997E8;
  if ((_DWORD)v4)
  {
    v6 = v4;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E67D0(v6, v5, v7, v8, v9, v10, v11, v12);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Successfully registered for MKB first unlock notification", v13, 2u);
  }
}

void sub_1003B5844(uint64_t a1)
{
  os_unfair_lock_s *v1;
  NSObject *v2;
  _BOOL4 v3;
  _DWORD v4[2];

  v1 = *(os_unfair_lock_s **)(a1 + 32);
  v2 = (id)qword_1009997E8;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = MKBDeviceUnlockedSinceBoot();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received MKB first unlock notification. MKBDeviceUnlockedSinceBoot returns : %d", (uint8_t *)v4, 8u);
  }

  if (MKBDeviceUnlockedSinceBoot() != 1
    && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
  {
    sub_1006D7194();
  }
  v3 = MKBDeviceUnlockedSinceBoot() == 1;
  sub_1002CE108(v1, v3);
}

void sub_1003B5934(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1003B594C(uint64_t a1)
{
  sub_1003B5764(a1 - 48);
}

uint64_t sub_1003B5954(uint64_t a1)
{
  uint64_t result;

  result = notify_cancel(*(_DWORD *)(a1 + 1344));
  *(_DWORD *)(a1 + 1344) = -1;
  return result;
}

uint64_t sub_1003B5980(uint64_t a1)
{
  uint64_t result;

  result = notify_cancel(*(_DWORD *)(a1 + 1296));
  *(_DWORD *)(a1 + 1296) = -1;
  return result;
}

uint64_t sub_1003B59AC(uint64_t a1, BOOL *a2)
{
  *a2 = MKBDeviceUnlockedSinceBoot() == 1;
  return 0;
}

void sub_1003B59DC(const void *a1)
{
  _BOOL8 v2;
  __CFNotificationCenter *DarwinNotifyCenter;

  v2 = sub_1004F9534();
  if (v2)
  {
    if (BYSetupAssistantNeedsToRun(v2))
    {
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_1003B5A38, BYSetupAssistantFinishedDarwinNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    }
  }
}

void sub_1003B5A38(uint64_t a1, uint64_t a2)
{
  sub_1003B5AC8(a2);
}

void sub_1003B5A40(uint64_t a1)
{
  sub_1003B59DC((const void *)(a1 - 56));
}

void sub_1003B5A48(const void *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  if (sub_1004F9534())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, BYSetupAssistantFinishedDarwinNotification, 0);
  }
}

void sub_1003B5A90(uint64_t a1)
{
  sub_1003B5A48((const void *)(a1 - 56));
}

uint64_t sub_1003B5A98(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;

  v3 = sub_1004F9534();
  if ((_DWORD)v3)
    LOBYTE(v3) = BYSetupAssistantNeedsToRun(v3);
  *a2 = v3;
  return 0;
}

void sub_1003B5AC8(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  if (sub_1004F9534())
  {
    v2 = *(NSObject **)(sub_10006BBEC() + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003B5B34;
    block[3] = &unk_100917378;
    block[4] = a1;
    dispatch_async(v2, block);
  }
}

void sub_1003B5B34(uint64_t a1)
{
  os_unfair_lock_s *v1;
  char v2;

  v1 = *(os_unfair_lock_s **)(a1 + 32);
  v2 = BYSetupAssistantNeedsToRun(a1);
  sub_1002CE2C4(v1, v2);
}

uint64_t sub_1003B5B5C(uint64_t a1)
{
  int *v2;
  NSObject *v3;
  _QWORD handler[5];

  v2 = (int *)(a1 + 1348);
  v3 = *(NSObject **)(sub_10006BBEC() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1003B5BD0;
  handler[3] = &unk_100927440;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.system.powersources.percent", v2, v3, handler);
}

void sub_1003B5BD0(uint64_t a1)
{
  os_unfair_lock_s *v1;
  __int16 v2;

  v1 = *(os_unfair_lock_s **)(a1 + 32);
  v2 = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, char *, __int16 *))(*(_QWORD *)&v1->_os_unfair_lock_opaque
                                                                              + 96))(v1, (char *)&v2 + 1, &v2))sub_1002CE3EC(v1, HIBYTE(v2), v2);
}

uint64_t sub_1003B5C24(uint64_t a1)
{
  return sub_1003B5B5C(a1 - 40);
}

uint64_t sub_1003B5C2C(uint64_t a1)
{
  uint64_t result;

  result = notify_cancel(*(_DWORD *)(a1 + 1348));
  *(_DWORD *)(a1 + 1348) = -1;
  return result;
}

uint64_t sub_1003B5C58(uint64_t a1)
{
  uint64_t result;

  result = notify_cancel(*(_DWORD *)(a1 + 1308));
  *(_DWORD *)(a1 + 1308) = -1;
  return result;
}

uint64_t sub_1003B5C84(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t result;
  char v7;
  int v8;

  v5 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 392))(v5) & 1) != 0)
  {
    v8 = 0;
    v7 = 0;
    result = IOPSGetPercentRemaining(&v8, &v7, 0);
    if ((_DWORD)result)
    {
      return 1;
    }
    else
    {
      *a3 = v8;
      *a2 = v7;
    }
  }
  else
  {
    result = 0;
    *a2 = 1;
    *a3 = 100;
  }
  return result;
}

uint64_t sub_1003B5D0C(uint64_t a1)
{
  int *v2;
  NSObject *v3;
  _QWORD handler[5];

  v2 = (int *)(a1 + 1352);
  v3 = *(NSObject **)(sub_10006BBEC() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1003B5D80;
  handler[3] = &unk_100927440;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.system.powersources.source", v2, v3, handler);
}

void sub_1003B5D80(uint64_t a1)
{
  os_unfair_lock_s *v1;
  unsigned int v2;

  v1 = *(os_unfair_lock_s **)(a1 + 32);
  v2 = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, unsigned int *))(*(_QWORD *)&v1->_os_unfair_lock_opaque
                                                                           + 120))(v1, &v2))sub_1002CE5D8(v1, v2);
}

uint64_t sub_1003B5DCC(uint64_t a1)
{
  return sub_1003B5D0C(a1 - 64);
}

uint64_t sub_1003B5DD4(uint64_t a1)
{
  uint64_t result;

  result = notify_cancel(*(_DWORD *)(a1 + 1352));
  *(_DWORD *)(a1 + 1352) = -1;
  return result;
}

uint64_t sub_1003B5E00(uint64_t a1)
{
  uint64_t result;

  result = notify_cancel(*(_DWORD *)(a1 + 1288));
  *(_DWORD *)(a1 + 1288) = -1;
  return result;
}

uint64_t sub_1003B5E2C(uint64_t a1, int *a2)
{
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  const __CFNumber *Value;
  const __CFNumber *v6;
  CFTypeID v7;
  int v8;
  int v9;
  const __CFDictionary *v10;
  CFStringRef v11;
  int valuePtr;

  v3 = IOPSCopyExternalPowerAdapterDetails();
  if (!v3)
  {
    v10 = (const __CFDictionary *)IOPSCopyPowerSourcesInfo();
    if (!v10)
    {
      LODWORD(v6) = 0;
      return v6 ^ 1;
    }
    v4 = v10;
    v11 = IOPSGetProvidingPowerSourceType(v10);
    if (v11 && CFEqual(v11, CFSTR("Battery Power")))
    {
      *a2 = 0;
      LODWORD(v6) = 1;
      goto LABEL_15;
    }
LABEL_14:
    LODWORD(v6) = 0;
    goto LABEL_15;
  }
  v4 = v3;
  if (!CFDictionaryContainsKey(v3, CFSTR("FamilyCode")))
    goto LABEL_14;
  Value = (const __CFNumber *)CFDictionaryGetValue(v4, CFSTR("FamilyCode"));
  v6 = Value;
  if (Value)
  {
    v7 = CFGetTypeID(Value);
    if (v7 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      v8 = CFNumberGetValue(v6, kCFNumberIntType, &valuePtr);
      LODWORD(v6) = v8 != 0;
      if (v8)
      {
        if (valuePtr == -536723452)
          v9 = 2;
        else
          v9 = 1;
        *a2 = v9;
      }
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_15:
  CFRelease(v4);
  return v6 ^ 1;
}

void sub_1003B5F2C(uint64_t a1)
{
  NSObject *v2;
  _QWORD handler[5];

  if ((sub_10005549C() & 1) != 0)
  {
    v2 = *(NSObject **)(sub_10006BBEC() + 8);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1000667AC;
    handler[3] = &unk_100927440;
    handler[4] = a1;
    notify_register_dispatch("com.apple.coreaudio.ActivePorts", (int *)(a1 + 1356), v2, handler);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006E6834();
  }
}

void sub_1003B5FD4(uint64_t a1)
{
  sub_1003B5F2C(a1 - 72);
}

uint64_t sub_1003B5FDC(uint64_t a1)
{
  uint64_t result;

  result = notify_cancel(*(_DWORD *)(a1 + 1356));
  *(_DWORD *)(a1 + 1356) = -1;
  return result;
}

uint64_t sub_1003B6008(uint64_t a1)
{
  uint64_t result;

  result = notify_cancel(*(_DWORD *)(a1 + 1284));
  *(_DWORD *)(a1 + 1284) = -1;
  return result;
}

void sub_1003B6034(CFBundleRef *a1)
{
  const __CFURL *v2;
  __CFNotificationCenter *DarwinNotifyCenter;
  const __CFString *v4;

  v2 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, CFSTR("/System/Library/PrivateFrameworks/AssistantServices.framework"), kCFURLPOSIXPathStyle, 1u);
  a1[170] = CFBundleCreate(kCFAllocatorDefault, v2);
  CFRelease(v2);
  if (a1[170])
  {
    if (MGGetBoolAnswer(CFSTR("assistant")))
    {
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      v4 = *(const __CFString **)CFBundleGetDataPointerForName(a1[170], CFSTR("kAFPreferencesDidChangeDarwinNotification"));
      CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_1003B60F4, v4, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    }
  }
}

void sub_1003B60F4(uint64_t a1, uint64_t a2)
{
  sub_1003B6200(a2);
}

void sub_1003B60FC(uint64_t a1)
{
  sub_1003B6034((CFBundleRef *)(a1 - 80));
}

void sub_1003B6104(CFBundleRef *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  CFNotificationName *DataPointerForName;

  if (MGGetBoolAnswer(CFSTR("assistant")))
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    DataPointerForName = (CFNotificationName *)CFBundleGetDataPointerForName(a1[170], CFSTR("kAFPreferencesDidChangeDarwinNotification"));
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, *DataPointerForName, 0);
  }
  CFRelease(a1[170]);
  a1[170] = 0;
}

void sub_1003B6168(uint64_t a1)
{
  sub_1003B6104((CFBundleRef *)(a1 - 80));
}

uint64_t sub_1003B6170(uint64_t a1, BOOL *a2)
{
  uint64_t v4;
  void (*FunctionPointerForName)(void);
  uint64_t (*v6)(void);
  int v7;
  uint64_t result;

  v4 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4)
    || !*(_QWORD *)(a1 + 1360)
    || !MGGetBoolAnswer(CFSTR("assistant")))
  {
    return 1;
  }
  FunctionPointerForName = (void (*)(void))CFBundleGetFunctionPointerForName(*(CFBundleRef *)(a1 + 1360), CFSTR("AFSupportPreferencesSynchronize"));
  FunctionPointerForName();
  v6 = (uint64_t (*)(void))CFBundleGetFunctionPointerForName(*(CFBundleRef *)(a1 + 1360), CFSTR("AFPreferencesAssistantEnabled"));
  v7 = v6();
  result = 0;
  *a2 = v7 != 0;
  return result;
}

void sub_1003B6200(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)(sub_10006BBEC() + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003B6264;
  block[3] = &unk_100917378;
  block[4] = a1;
  dispatch_async(v2, block);
}

void sub_1003B6264(uint64_t a1)
{
  os_unfair_lock_s *v1;
  unsigned __int8 v2;

  v1 = *(os_unfair_lock_s **)(a1 + 32);
  v2 = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, unsigned __int8 *))(*(_QWORD *)&v1->_os_unfair_lock_opaque
                                                                              + 136))(v1, &v2))sub_1002CE7B4(v1, v2);
}

uint64_t sub_1003B62B0(uint64_t a1)
{
  int *v2;
  NSObject *v3;
  _QWORD handler[5];

  v2 = (int *)(a1 + 1368);
  v3 = *(NSObject **)(sub_10006BBEC() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1003B6324;
  handler[3] = &unk_100927440;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.coreaudio.BorealisToggled", v2, v3, handler);
}

void sub_1003B6324(uint64_t a1)
{
  sub_1002CE988(*(os_unfair_lock_s **)(a1 + 32));
}

uint64_t sub_1003B632C(uint64_t a1)
{
  return sub_1003B62B0(a1 - 88);
}

uint64_t sub_1003B6334(uint64_t a1)
{
  uint64_t result;

  result = notify_cancel(*(_DWORD *)(a1 + 1368));
  *(_DWORD *)(a1 + 1368) = -1;
  return result;
}

uint64_t sub_1003B6360(uint64_t a1)
{
  uint64_t result;

  result = notify_cancel(*(_DWORD *)(a1 + 1280));
  *(_DWORD *)(a1 + 1280) = -1;
  return result;
}

void sub_1003B638C(_BYTE *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  if (sub_1004F93A0())
  {
    a1[1372] = 0;
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_1003B6410, CFSTR("com.apple.carplay.allowed-changed"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    sub_1003B6418((uint64_t)a1);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006E6860();
  }
}

void sub_1003B6410(uint64_t a1, uint64_t a2)
{
  sub_1003B6418(a2);
}

void sub_1003B6418(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];

  if (sub_1004F93A0())
  {
    v2 = objc_autoreleasePoolPush();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1003B6544;
    v3[3] = &unk_10092C520;
    v3[4] = a1;
    CRIsCarPlayAllowed(v3);
    objc_autoreleasePoolPop(v2);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006E6860();
  }
}

void sub_1003B64B8(uint64_t a1)
{
  sub_1003B638C((_BYTE *)(a1 - 96));
}

void sub_1003B64C0(_BYTE *a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  if (sub_1004F93A0())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, CFSTR("com.apple.carplay.allowed-changed"), 0);
    a1[1372] = 0;
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006E6860();
  }
}

void sub_1003B652C(uint64_t a1)
{
  sub_1003B64C0((_BYTE *)(a1 - 96));
}

uint64_t sub_1003B6534(uint64_t a1, _BYTE *a2)
{
  *a2 = *(_BYTE *)(a1 + 1372);
  return 0;
}

void sub_1003B6544(uint64_t a1, char a2)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[5];
  char v6;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(NSObject **)(sub_10006BBEC() + 8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003B65B0;
  v5[3] = &unk_100918888;
  v5[4] = v3;
  v6 = a2;
  dispatch_async(v4, v5);
}

void sub_1003B65B0(uint64_t a1)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v2 + 1372) != v3)
  {
    *(_BYTE *)(v2 + 1372) = v3;
    sub_1002CEACC((os_unfair_lock_s *)v2, v3 != 0);
  }
}

_QWORD *sub_1003B65DC(_QWORD *result)
{
  _QWORD *v1;
  SystemScreenObserver *v2;

  if (!result[191])
  {
    v1 = result;
    v2 = objc_alloc_init(SystemScreenObserver);
    result = -[SystemScreenObserver activateWithSystemMonitor:](v2, "activateWithSystemMonitor:", v1[180]);
    v1[191] = v2;
  }
  return result;
}

void sub_1003B661C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1003B662C(uint64_t a1)
{
  return sub_1003B65DC((_QWORD *)(a1 - 104));
}

uint64_t sub_1003B6634(uint64_t result)
{
  *(_QWORD *)(result + 1528) = 0;
  return result;
}

uint64_t sub_1003B663C(uint64_t result)
{
  *(_QWORD *)(result + 1424) = 0;
  return result;
}

uint64_t sub_1003B6644(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v4 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 408))(v4) & 1) != 0
    || (v5 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 384))(v5) & 1) != 0))
  {
    v6 = 1;
  }
  else
  {
    v6 = objc_msgSend(*(id *)(a1 + 1528), "screenOn");
  }
  *a2 = v6;
  return 0;
}

uint64_t sub_1003B66B4()
{
  return 11;
}

uint64_t sub_1003B66BC(uint64_t a1)
{
  int *v2;
  NSObject *v3;
  _QWORD handler[5];

  v2 = (int *)(a1 + 1380);
  v3 = *(NSObject **)(sub_10006BBEC() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1003B6730;
  handler[3] = &unk_100927440;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.keyboard.isOnScreen", v2, v3, handler);
}

void sub_1003B6730(uint64_t a1)
{
  os_unfair_lock_s *v1;
  unsigned __int8 v2;

  v1 = *(os_unfair_lock_s **)(a1 + 32);
  v2 = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, unsigned __int8 *, _QWORD))(*(_QWORD *)&v1->_os_unfair_lock_opaque
                                                                                      + 208))(v1, &v2, 0))sub_1002CF5C4(v1, v2);
}

uint64_t sub_1003B6780(uint64_t a1)
{
  return sub_1003B66BC(a1 - 120);
}

uint64_t sub_1003B6788(uint64_t a1)
{
  uint64_t result;

  result = notify_cancel(*(_DWORD *)(a1 + 1380));
  *(_DWORD *)(a1 + 1380) = -1;
  return result;
}

uint64_t sub_1003B67B4(uint64_t a1)
{
  uint64_t result;

  result = notify_cancel(*(_DWORD *)(a1 + 1260));
  *(_DWORD *)(a1 + 1260) = -1;
  return result;
}

uint64_t sub_1003B67E0(uint64_t a1, BOOL *a2, int a3)
{
  uint64_t result;
  uint64_t state64;

  state64 = 0;
  if (a3)
    notify_register_check("com.apple.keyboard.isOnScreen", (int *)(a1 + 1380));
  result = notify_get_state(*(_DWORD *)(a1 + 1380), &state64);
  if ((_DWORD)result)
    return 1;
  *a2 = state64 == 1;
  return result;
}

uint64_t sub_1003B6848(uint64_t a1)
{
  int *v2;
  NSObject *v3;
  _QWORD handler[5];

  v2 = (int *)(a1 + 1384);
  v3 = *(NSObject **)(sub_10006BBEC() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1003B68BC;
  handler[3] = &unk_100927440;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.mobilegarageband.appAndSessionState", v2, v3, handler);
}

void sub_1003B68BC(uint64_t a1)
{
  os_unfair_lock_s *v1;
  unsigned __int8 v2;

  v1 = *(os_unfair_lock_s **)(a1 + 32);
  v2 = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, unsigned __int8 *))(*(_QWORD *)&v1->_os_unfair_lock_opaque
                                                                              + 216))(v1, &v2))sub_1002CEE74(v1, v2);
}

uint64_t sub_1003B6908(uint64_t a1)
{
  return sub_1003B6848(a1 - 136);
}

uint64_t sub_1003B6910(uint64_t a1)
{
  uint64_t result;

  result = notify_cancel(*(_DWORD *)(a1 + 1384));
  *(_DWORD *)(a1 + 1384) = -1;
  return result;
}

uint64_t sub_1003B693C(uint64_t a1)
{
  uint64_t result;

  result = notify_cancel(*(_DWORD *)(a1 + 1248));
  *(_DWORD *)(a1 + 1248) = -1;
  return result;
}

uint64_t sub_1003B6968(uint64_t a1, BOOL *a2)
{
  uint64_t result;
  uint64_t state64;

  state64 = 0;
  result = notify_get_state(*(_DWORD *)(a1 + 1384), &state64);
  if ((_DWORD)result)
    return 1;
  *a2 = state64 != 0;
  return result;
}

void sub_1003B69C8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  int v5;
  unsigned __int8 v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  int v10;

  v6 = 1;
  v2 = sub_10034FDA0();
  (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v2 + 64))(v2, &v6);
  v3 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(a1 + 1388);
    *(_DWORD *)buf = 67109376;
    v8 = v6;
    v9 = 1024;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SystemSettings Accessibility setting newHT:%u, currHT:%u", buf, 0xEu);
  }
  v5 = v6;
  if (*(unsigned __int8 *)(a1 + 1388) != v6)
  {
    *(_BYTE *)(a1 + 1388) = v6;
    sub_1002CF048((os_unfair_lock_s *)a1, v5 != 0);
  }
}

uint64_t sub_1003B6ABC(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;

  v4 = sub_10034FDA0();
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 64))(v4, a2);
  *(_BYTE *)(a1 + 1388) = *a2;
  return 0;
}

void sub_1003B6B0C(uint64_t a1, void *a2)
{
  id v4;
  id *v5;
  NSObject *v6;
  id v7;
  int v8;
  id v9;

  v4 = a2;
  v5 = (id *)(a1 + 1560);
  objc_storeStrong(v5, a2);
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v7 = *v5;
    v8 = 138412290;
    v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Country code changed %@", (uint8_t *)&v8, 0xCu);
  }

}

void sub_1003B6BD8(uint64_t a1, void *a2)
{
  sub_1003B6B0C(a1 - 1256, a2);
}

uint64_t sub_1003B6BE0(uint64_t a1)
{
  uint64_t result;

  result = sub_1004F9720();
  if ((_DWORD)result)
  {
    *(_BYTE *)(a1 + 1412) = 0;
    result = notify_cancel(*(_DWORD *)(a1 + 1408));
    *(_DWORD *)(a1 + 1408) = -1;
  }
  return result;
}

uint64_t sub_1003B6C18(uint64_t a1)
{
  uint64_t result;

  result = sub_1004F9720();
  if ((_DWORD)result)
  {
    *(_BYTE *)(a1 + 1252) = 0;
    result = notify_cancel(*(_DWORD *)(a1 + 1248));
    *(_DWORD *)(a1 + 1248) = -1;
  }
  return result;
}

uint64_t sub_1003B6C50(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  _QWORD handler[5];

  result = sub_1004F9720();
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 1408) == -1)
    {
      v3 = *(NSObject **)(sub_10006BBEC() + 8);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1003B6CD8;
      handler[3] = &unk_100927440;
      handler[4] = a1;
      return notify_register_dispatch("com.apple.bluetooth.prefsChanged", (int *)(a1 + 1408), v3, handler);
    }
  }
  return result;
}

void sub_1003B6CD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  id v4;

  v1 = *(_QWORD *)(a1 + 32);
  v4 = (id)CFPreferencesCopyValue(CFSTR("SpatialSoundProfileAllowed"), CFSTR("com.apple.bluetooth"), kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
  if (v4 && (v2 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v4, v2) & 1) != 0))
    v3 = objc_msgSend(v4, "BOOLValue");
  else
    v3 = 1;
  if (*(unsigned __int8 *)(v1 + 1412) != v3)
  {
    *(_BYTE *)(v1 + 1412) = v3;
    sub_1002CF21C((os_unfair_lock_s *)v1, v3);
  }

}

void sub_1003B6D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1003B6D90(uint64_t a1)
{
  return sub_1003B6C50(a1 - 160);
}

uint64_t sub_1003B6D98(uint64_t a1, _BYTE *a2)
{
  void *v4;
  uint64_t v5;
  unsigned int v6;

  if (sub_1004F9720())
  {
    v4 = (void *)CFPreferencesCopyValue(CFSTR("SpatialSoundProfileAllowed"), CFSTR("com.apple.bluetooth"), kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
    if (v4 && (v5 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v4, v5) & 1) != 0))
      v6 = objc_msgSend(v4, "BOOLValue");
    else
      v6 = 1;
    *a2 = v6;
    if (*(unsigned __int8 *)(a1 + 1412) != v6)
      *(_BYTE *)(a1 + 1412) = v6;

  }
  return 0;
}

void sub_1003B6E44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003B6E54(uint64_t a1)
{
  int *v2;
  NSObject *v3;
  _QWORD handler[5];

  v2 = (int *)(a1 + 1416);
  v3 = *(NSObject **)(sub_10006BBEC() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1003B6EC8;
  handler[3] = &unk_100927440;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.bluetooth.prefsChanged", v2, v3, handler);
}

void sub_1003B6EC8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (void *)CFPreferencesCopyValue(CFSTR("move3PPLEMSToLegacyMode"), CFSTR("com.apple.bluetooth"), kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
  v3 = objc_opt_class(NSNumber);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
  {
    v4 = objc_msgSend(v2, "BOOLValue");
    v5 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 136315394;
      v9 = "virtual void BT::SystemSettings::listenersWillBecomeNonEmpty(const ObservedListeners<HID3ppLELegacyModeListen"
           "er> &)_block_invoke";
      v10 = 1024;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s: Using Pref Setting for LE Mouse at 7.5ms: %d", (uint8_t *)&v8, 0x12u);
    }
  }
  else
  {
    v4 = 0;
  }
  if (*(unsigned __int8 *)(v1 + 1420) != v4)
  {
    *(_BYTE *)(v1 + 1420) = v4;
    sub_1002CF3F0((os_unfair_lock_s *)v1, v4);
  }
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int8 *)(v1 + 1420);
    v8 = 136315394;
    v9 = "virtual void BT::SystemSettings::listenersWillBecomeNonEmpty(const ObservedListeners<HID3ppLELegacyModeListener"
         "> &)_block_invoke";
    v10 = 1024;
    v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s: LE Mouse at 7.5ms is currently set to %d", (uint8_t *)&v8, 0x12u);
  }

}

void sub_1003B706C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003B7084(uint64_t a1)
{
  return sub_1003B6E54(a1 - 168);
}

uint64_t sub_1003B708C(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 1420) = 0;
  result = notify_cancel(*(_DWORD *)(a1 + 1416));
  *(_DWORD *)(a1 + 1416) = -1;
  return result;
}

uint64_t sub_1003B70BC(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 1252) = 0;
  result = notify_cancel(*(_DWORD *)(a1 + 1248));
  *(_DWORD *)(a1 + 1248) = -1;
  return result;
}

uint64_t sub_1003B70EC(uint64_t a1)
{
  int *v2;
  NSObject *v3;
  _QWORD handler[5];

  v2 = (int *)(a1 + 1424);
  v3 = *(NSObject **)(sub_10006BBEC() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1003B7160;
  handler[3] = &unk_100927440;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.system.console_mode_changed", v2, v3, handler);
}

void sub_1003B7160(uint64_t a1)
{
  os_unfair_lock_s *v1;
  uint32_t state;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t state64;
  uint8_t buf[4];
  uint64_t v7;

  v1 = *(os_unfair_lock_s **)(a1 + 32);
  state64 = 0;
  state = notify_get_state(v1[356]._os_unfair_lock_opaque, &state64);
  v3 = qword_1009997E8;
  v4 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
  if (state)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "fGameConsoleModeNotifyToken is invalid", buf, 2u);
    }
  }
  else
  {
    if (v4)
    {
      *(_DWORD *)buf = 134217984;
      v7 = state64;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "com.apple.system.console_mode_changed: %llu", buf, 0xCu);
    }
    sub_1002CFC78(v1, state64 == 1);
  }
}

uint64_t sub_1003B7274(uint64_t a1)
{
  return sub_1003B70EC(a1 - 192);
}

uint64_t sub_1003B727C(uint64_t a1)
{
  uint64_t result;

  result = notify_cancel(*(_DWORD *)(a1 + 1424));
  *(_DWORD *)(a1 + 1424) = -1;
  return result;
}

uint64_t sub_1003B72A8(uint64_t a1)
{
  uint64_t result;

  result = notify_cancel(*(_DWORD *)(a1 + 1232));
  *(_DWORD *)(a1 + 1232) = -1;
  return result;
}

uint64_t sub_1003B72D4(uint64_t a1, BOOL *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  size_t v6;
  uint64_t v7;

  v3 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 384))(v3) & 1) == 0)
  {
    v4 = sub_10003BE44();
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 328))(v4))
      return 1;
  }
  v6 = 8;
  v7 = 0;
  if (sysctlbyname("kern.console_mode", &v7, &v6, 0, 0) == -1)
    return 1;
  result = 0;
  *a2 = v7 == 1;
  return result;
}

void sub_1003B7368(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  _QWORD v6[5];

  if ((sub_1004F9420() & 1) != 0)
  {
    v2 = *(void **)(a1 + 1432);
    if (!v2)
    {
      v3 = objc_alloc_init((Class)CMDeviceOrientationManager);
      v4 = *(void **)(a1 + 1432);
      *(_QWORD *)(a1 + 1432) = v3;

      v2 = *(void **)(a1 + 1432);
    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSOperationQueue mainQueue](NSOperationQueue, "mainQueue"));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003B7454;
    v6[3] = &unk_10092C540;
    v6[4] = a1;
    objc_msgSend(v2, "startDeviceOrientationUpdatesToQueue:withHandler:", v5, v6);

  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006E688C();
  }
}

void sub_1003B7444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1003B7454(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  os_unfair_lock_s *v7;
  NSObject *v8;
  id v9;
  int v10;
  uint8_t buf[16];

  v5 = a2;
  v6 = a3;
  v7 = *(os_unfair_lock_s **)(a1 + 32);
  v8 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Receiving device orientation update", buf, 2u);
  }
  v10 = 0;
  v9 = objc_msgSend(v5, "orientation");
  if (!sub_1003B7520((uint64_t)v9, (int)v9, &v10))
    sub_1002CF798(v7, v10);

}

void sub_1003B750C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1003B7520(uint64_t a1, int a2, int *a3)
{
  uint64_t result;
  int v6;

  if ((sub_1004F9420() & 1) != 0)
  {
    switch(a2)
    {
      case 0:
      case 7:
        result = 0;
        v6 = 1;
        break;
      case 1:
        result = 0;
        v6 = 2;
        break;
      case 2:
        result = 0;
        v6 = 6;
        break;
      case 3:
        result = 0;
        v6 = 7;
        break;
      case 4:
        result = 0;
        v6 = 3;
        break;
      case 5:
        result = 0;
        v6 = 4;
        break;
      case 6:
        result = 0;
        v6 = 5;
        break;
      default:
        *a3 = 0;
        return 1;
    }
    *a3 = v6;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E688C();
    return 1;
  }
  return result;
}

void sub_1003B75F8(uint64_t a1)
{
  sub_1003B7368(a1 - 128);
}

id sub_1003B7600(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 1432), "stopDeviceOrientationUpdates");
}

id sub_1003B7608(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 1304), "stopDeviceOrientationUpdates");
}

uint64_t sub_1003B7610(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  int v5;
  NSObject *v6;
  _BOOL4 v7;
  const char *v8;
  uint64_t v9;
  unsigned int v11;
  uint8_t buf[4];
  unsigned int v13;

  if ((sub_1004F9420() & 1) != 0)
  {
    v11 = 0;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 1432), "deviceOrientationBlocking"));
    v3 = v2;
    if (!v2)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E68B8();
      v9 = 0;
      goto LABEL_16;
    }
    v4 = objc_msgSend(v2, "orientation");
    v5 = sub_1003B7520((uint64_t)v4, (int)v4, (int *)&v11);
    v6 = qword_1009997E8;
    v7 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v7)
      {
        *(_DWORD *)buf = 67109120;
        v13 = v11;
        v8 = "Unexpected device orientation received - %u";
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 8u);
      }
    }
    else if (v7)
    {
      *(_DWORD *)buf = 67109120;
      v13 = v11;
      v8 = "Successfully queried device orientation - %u";
      goto LABEL_14;
    }
    v9 = v11;
LABEL_16:

    return v9;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006E688C();
  return 0;
}

void sub_1003B7788(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1003B77A0()
{
  NSObject *v1;
  uint8_t v2[16];
  size_t v3;
  uint64_t v4;

  v3 = 8;
  v4 = 0;
  if (sysctlbyname("security.mac.amfi.developer_mode_status", &v4, &v3, 0, 0))
    return 0;
  v1 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Developer Mode enabled", v2, 2u);
  }
  return v4 == 1;
}

uint64_t sub_1003B7840()
{
  if (qword_1009923D8 != -1)
    dispatch_once(&qword_1009923D8, &stru_10092C560);
  return byte_1009923D0;
}

void sub_1003B7880(id a1)
{
  size_t v1;
  int v2;

  v2 = 0;
  v1 = 4;
  if (!sysctlbyname("kern.hv_vmm_present", &v2, &v1, 0, 0))
    byte_1009923D0 = v2 != 0;
}

id sub_1003B78D8(uint64_t a1)
{
  id result;

  result = (id)sub_1004F9904();
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 1536), "messagesAppLockState");
  return result;
}

uint64_t sub_1003B790C(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003B79C0;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_1009923E0 != -1)
    dispatch_once(&qword_1009923E0, block);
  if (*(_QWORD *)(a1 + 1544))
    return 0;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006E68E4();
  return 1;
}

void sub_1003B79C0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  useconds_t v3;
  __int128 v4;
  double v5;
  const __CFDictionary *v6;
  io_service_t MatchingService;
  io_registry_entry_t v8;
  CFTypeRef v9;
  const void *v10;
  CFTypeID v11;
  const void *v12;
  const __CFBoolean *v13;
  const __CFBoolean *v14;
  CFTypeID v15;
  const __CFDictionary *v16;
  const __CFNumber *Value;
  const __CFNumber *v18;
  CFTypeID v19;
  int v20;
  NSObject *v21;
  _BOOL4 v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  int v27;
  __int128 v28;
  uint64_t valuePtr;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  int v33;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:", 10.0));
  v3 = 10000;
  *(_QWORD *)&v4 = 138412290;
  v28 = v4;
  while (1)
  {
    objc_msgSend(v2, "timeIntervalSinceNow", v28);
    if (v5 <= 0.0)
      break;
    v6 = IOServiceNameMatching("AppleOLYHAL");
    MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v6);
    v8 = MatchingService;
    if (MatchingService)
    {
      v9 = IORegistryEntrySearchCFProperty(MatchingService, "IODeviceTree", CFSTR("HWIdentifiers"), kCFAllocatorDefault, 1u);
      v10 = v9;
      if (v9)
      {
        v11 = CFGetTypeID(v9);
        if (v11 == CFDictionaryGetTypeID())
        {
          v12 = *(const void **)(v1 + 1544);
          if (v12)
          {
            CFRelease(v12);
            *(_QWORD *)(v1 + 1544) = 0;
          }
          CFRetain(v10);
          *(_QWORD *)(v1 + 1544) = v10;
        }
        CFRelease(v10);
      }
      v13 = (const __CFBoolean *)IORegistryEntrySearchCFProperty(v8, "IODeviceTree", CFSTR("WiFiBootState"), kCFAllocatorDefault, 1u);
      v14 = v13;
      if (v13)
      {
        v15 = CFGetTypeID(v13);
        if (v15 == CFBooleanGetTypeID())
          *(_BYTE *)(v1 + 1552) = CFBooleanGetValue(v14) != 0;
        CFRelease(v14);
      }
      IOObjectRelease(v8);
      v16 = *(const __CFDictionary **)(v1 + 1544);
      if (v16)
      {
        valuePtr = 0;
        Value = (const __CFNumber *)CFDictionaryGetValue(v16, CFSTR("C"));
        v18 = Value;
        if (!Value || (v19 = CFGetTypeID(Value), v19 != CFNumberGetTypeID()))
        {
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
            sub_1006E6910();
          break;
        }
        CFNumberGetValue(v18, kCFNumberLongType, &valuePtr);
        if (valuePtr != 4399)
          break;
        v20 = *(unsigned __int8 *)(v1 + 1552);
        v21 = qword_1009997E8;
        v22 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT);
        if (v20)
        {
          if (v22)
          {
            v26 = *(_QWORD *)(v1 + 1544);
            v27 = *(unsigned __int8 *)(v1 + 1552);
            *(_DWORD *)buf = 138412546;
            v31 = v26;
            v32 = 1024;
            v33 = v27;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "HWIdentifiers property is set: %@ and WiFi has booted %d", buf, 0x12u);
          }
          break;
        }
        if (v22)
        {
          v23 = *(_QWORD *)(v1 + 1544);
          *(_DWORD *)buf = v28;
          v31 = v23;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "HWIdentifiers property is set: %@ but WiFi has not booted", buf, 0xCu);
        }
      }
      else
      {
        v25 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "No HWIdentifiers property. Retrying...\n", buf, 2u);
        }
      }
    }
    else
    {
      v24 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "No AppleOLYHAL service. Retrying...\n", buf, 2u);
      }
    }
    usleep(v3);
    v3 *= 2;
  }

}

void sub_1003B7D44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003B7D68(_QWORD *a1)
{
  uint64_t result;

  result = a1[193];
  if (!result)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E6968();
    if ((*(unsigned int (**)(_QWORD *))(*a1 + 288))(a1))
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E693C();
      return 0;
    }
    else
    {
      return a1[193];
    }
  }
  return result;
}

uint64_t sub_1003B7DFC(CFDictionaryRef *a1)
{
  const __CFNumber *Value;
  uint64_t valuePtr;

  if (!(*((uint64_t (**)(CFDictionaryRef *))*a1 + 37))(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E6994();
    return 0;
  }
  valuePtr = 0;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1[193], CFSTR("C"));
  if (!Value)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E6910();
    return 0;
  }
  CFNumberGetValue(Value, kCFNumberLongType, &valuePtr);
  if (valuePtr == 276347)
    return 4377;
  else
    return valuePtr;
}

_QWORD *sub_1003B7EC0@<X0>(CFDictionaryRef *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  CFStringRef v6;
  CFTypeRef v7;
  const __CFString *Value;
  char *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char cStr[2];
  char buffer[16];
  __int128 v29;

  if ((*((uint64_t (**)(CFDictionaryRef *))*a1 + 37))(a1))
  {
    *(_OWORD *)buffer = 0u;
    v29 = 0u;
    cStr[0] = a2;
    cStr[1] = 0;
    v6 = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
    v7 = CFAutorelease(v6);
    Value = (const __CFString *)CFDictionaryGetValue(a1[193], v7);
    if (Value)
    {
      v9 = buffer;
      CFStringGetCString(Value, buffer, 32, 0x8000100u);
    }
    else
    {
      v19 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E6A28(a2, v19, v20, v21, v22, v23, v24, v25);
      v9 = "";
    }
    v18 = a3;
    v17 = v9;
  }
  else
  {
    v10 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E69C0(a2, v10, v11, v12, v13, v14, v15, v16);
    v17 = "";
    v18 = a3;
  }
  return sub_100091AE8(v18, v17);
}

uint64_t sub_1003B8008(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, 86);
}

uint64_t sub_1003B8018(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, 77);
}

uint64_t sub_1003B8028(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, 115);
}

uint64_t sub_1003B8038(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, 80);
}

uint64_t sub_1003B8048(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, 109);
}

void sub_1003B8058(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  void **v3;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  id v14;
  id v15;
  id v16;
  _BYTE buf[24];

  v3 = (void **)a2;
  sub_1003B8310(a2, 0, buf);
  if (*((char *)v3 + 23) < 0)
    operator delete(*v3);
  *(_OWORD *)v3 = *(_OWORD *)buf;
  v3[2] = *(void **)&buf[16];
  v6 = v3;
  if (*((char *)v3 + 23) < 0)
    v6 = *v3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(".*(%@)"), v7));
  v9 = (*(uint64_t (**)(uint64_t, const __CFString *, void *))(*(_QWORD *)a1 + 384))(a1, CFSTR("/etc/bluetool/"), v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = MGCopyAnswer(CFSTR("ReleaseType"), 0);
  v12 = qword_1009997E8;
  if (v11 && v10)
  {
    v13 = (id)qword_1009997E8;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("/etc/bluetool/"), "stringByAppendingString:", v10)));
      v16 = objc_msgSend(v15, "UTF8String");
      if (*((char *)v3 + 23) < 0)
        v3 = (void **)*v3;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v16;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Found file from override directory: %s with extension: %s", buf, 0x16u);

    }
    v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("/etc/bluetool/"), "stringByAppendingString:", v10)));
    sub_100091AE8(a3, (char *)objc_msgSend(v14, "UTF8String"));

  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v3 + 23) < 0)
        v3 = (void **)*v3;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v3;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = CFSTR("/etc/bluetool/");
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "No override %s file in %@", buf, 0x16u);
    }
    sub_100091AE8(a3, "");
  }

}

void sub_1003B82BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t sub_1003B8310@<X0>(const void **a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  size_t v6;
  size_t v7;
  size_t v8;
  uint64_t result;
  char *v10;
  const void *v11;
  char *v12;

  v6 = *((unsigned __int8 *)a1 + 23);
  v7 = (size_t)a1[1];
  a3[1] = 0;
  a3[2] = 0;
  if ((v6 & 0x80u) == 0)
    v8 = v6;
  else
    v8 = v7;
  *a3 = 0;
  result = sub_1002D6774((uint64_t)a3, v8 + 1);
  if (*(char *)(result + 23) >= 0)
    v10 = (char *)result;
  else
    v10 = *(char **)result;
  if (v8)
  {
    if (*((char *)a1 + 23) >= 0)
      v11 = a1;
    else
      v11 = *a1;
    result = (uint64_t)memmove(v10, v11, v8);
  }
  v12 = &v10[v8];
  *v12 = a2;
  v12[1] = 0;
  return result;
}

void sub_1003B83A8(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  const void **v3;
  void *v5;
  _BYTE *v6;
  void *v7;
  _BYTE *v8;
  _BYTE *v9;
  void *v10;
  _BYTE *v11;
  __CFString *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  id v24;
  id v25;
  id v26;
  NSObject *v27;
  _QWORD *v28;
  void *v29;
  void *v30;
  _BYTE __p[24];

  v3 = a2;
  v28 = a3;
  sub_1003B8310(a2, 0, __p);
  if (*((char *)v3 + 23) < 0)
    operator delete((void *)*v3);
  *(_OWORD *)v3 = *(_OWORD *)__p;
  v3[2] = *(const void **)&__p[16];
  v5 = v3;
  if (*((char *)v3 + 23) < 0)
    v5 = (void *)*v3;
  v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5));
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 336))(__p, a1);
  if (__p[23] >= 0)
    v6 = __p;
  else
    v6 = *(_BYTE **)__p;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 344))(__p, a1);
  if (__p[23] >= 0)
    v8 = __p;
  else
    v8 = *(_BYTE **)__p;
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 320))(__p, a1);
  if (__p[23] >= 0)
    v9 = __p;
  else
    v9 = *(_BYTE **)__p;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 424))(__p, a1);
  if (__p[23] >= 0)
    v11 = __p;
  else
    v11 = *(_BYTE **)__p;
  v12 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11));
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (objc_msgSend(v7, "length") && objc_msgSend(v30, "length") && objc_msgSend(v10, "length"))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "uppercaseString"));
    if (objc_msgSend(v13, "characterAtIndex:", 0) == 71)
    {
      v14 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "S"));

      v10 = (void *)v14;
    }

    if (objc_msgSend(v29, "containsString:", CFSTR("ptb")))
    {
      if (-[__CFString length](v12, "length"))
      {
        v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("K_%@"), v12));

        v12 = (__CFString *)v15;
      }
      else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      {
        sub_1006E6B80();
      }
    }
    else
    {

      v12 = &stru_100941758;
    }
    if (-[__CFString length](v12, "length")
      || (objc_msgSend(v29, "containsString:", CFSTR("ptb")) & 1) == 0)
    {
      v18 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(".*(%@).*(%@).*._(%@).*(%@)_.*(%@)"), v7, v30, v10, v12, v29, v28));
      v19 = (*(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)a1 + 384))(a1, CFSTR("/usr/share/firmware/bluetooth/"), v18);
      v20 = objc_claimAutoreleasedReturnValue(v19);
      v17 = (void *)v18;
      if (v20)
      {
        v21 = (void *)v20;
        goto LABEL_44;
      }
    }
    else
    {
      v17 = 0;
    }
    if (!objc_msgSend(v29, "containsString:", CFSTR("ptb"))
      || (v12,
          v12 = CFSTR("K_R"),
          v18 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR(".*(%@).*(%@).*._(%@).*(%@)_.*(%@)"), v7, v30, v10, CFSTR("K_R"), v29)), v17, v22 = (*(uint64_t (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)a1 + 384))(a1, CFSTR("/usr/share/firmware/bluetooth/"), v18), v21 = (void *)objc_claimAutoreleasedReturnValue(v22), v17 = (void *)v18, !v21))
    {
      v27 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E6B08((char *)v3 + 23, v3, v27);
      sub_100091AE8(v28, "");
      goto LABEL_52;
    }
LABEL_44:
    v23 = (id)qword_1009997E8;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("/usr/share/firmware/bluetooth/"), "stringByAppendingString:", v21)));
      v25 = objc_msgSend(v24, "UTF8String");
      if (*((char *)v3 + 23) < 0)
        v3 = (const void **)*v3;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = v25;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v3;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Found file from HWIdentifiers: %s with extension: %s", __p, 0x16u);

    }
    v26 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("/usr/share/firmware/bluetooth/"), "stringByAppendingString:", v21)));
    sub_100091AE8(v28, (char *)objc_msgSend(v26, "UTF8String"));

    v17 = (void *)v18;
LABEL_52:

    goto LABEL_53;
  }
  v16 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
    sub_1006E6A90((char *)v3 + 23, v3, v16);
  sub_100091AE8(v28, "");
LABEL_53:

}

void sub_1003B8930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void sub_1003B8A24(const void **a1@<X1>, _QWORD *a2@<X8>)
{
  void **v2;
  void *v4;
  const __CFDictionary *v5;
  io_service_t MatchingService;
  io_object_t v7;
  const __CFString *v8;
  const __CFString *v9;
  char *v10;
  char *v11;
  char *v12;
  NSObject *v13;
  void *v14;
  int v15;
  char *v16;
  __int16 v17;
  char *v18;
  __int16 v19;
  char *v20;
  char buffer[16];
  __int128 v22;

  v2 = (void **)a1;
  sub_1003B8310(a1, 0, buffer);
  if (*((char *)v2 + 23) < 0)
    operator delete(*v2);
  *(_OWORD *)v2 = *(_OWORD *)buffer;
  v2[2] = (void *)v22;
  if (*((char *)v2 + 23) < 0)
    v2 = (void **)*v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2));
  v5 = IOServiceNameMatching("bluetooth-pcie");
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v5);
  v7 = MatchingService;
  if (MatchingService)
  {
    v8 = (const __CFString *)IORegistryEntrySearchCFProperty(MatchingService, "IODeviceTree", CFSTR("IOName"), kCFAllocatorDefault, 1u);
    v9 = v8;
    if (v8)
    {
      *(_OWORD *)buffer = 0u;
      v22 = 0u;
      if (CFStringGetCString(v8, buffer, 32, 0x8000100u))
      {
        CFRelease(v9);
        IOObjectRelease(v7);
        v10 = strtok(buffer, ",");
        v11 = strtok(0, ",");
        v12 = v11;
        v13 = qword_1009997E8;
        if (v10 && v11)
        {
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
          {
            v15 = 136315394;
            v16 = v10;
            v17 = 2080;
            v18 = v12;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Got IOName with vendorId %s, deviceId %s", (uint8_t *)&v15, 0x16u);
          }
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10));
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
            sub_1006E6C30();
          sub_100091AE8(a2, "");

        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          {
            v15 = 136315650;
            v16 = v10;
            v17 = 2080;
            v18 = v12;
            v19 = 2080;
            v20 = buffer;
            _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Missing vendorId (%s) or deviceId (%s) from IOName %s", (uint8_t *)&v15, 0x20u);
          }
          sub_100091AE8(a2, "");
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006E6C04();
        CFRelease(v9);
        IOObjectRelease(v7);
        sub_100091AE8(a2, "");
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E6BD8();
      IOObjectRelease(v7);
      sub_100091AE8(a2, "");
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E6BAC();
    sub_100091AE8(a2, "");
  }

}

void sub_1003B8D7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

NSObject *sub_1003B8DB0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  uint64_t v23;
  id v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  id v30;
  _BYTE v31[128];
  char v32[32];

  v5 = a2;
  v25 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v5));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](NSArray, "arrayWithObject:", NSURLNameKey));
  v30 = 0;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v7, v8, 4, &v30));
  v10 = v30;

  if (v10)
  {
    v11 = (id)qword_1009997E8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "debugDescription"));
      sub_1006E6C94((uint64_t)v5, v12, (uint64_t)v32);
    }
    v13 = 0;
  }
  else
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v15 = v9;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v27;
      do
      {
        v18 = 0;
        do
        {
          if (*(_QWORD *)v27 != v17)
            objc_enumerationMutation(v15);
          v19 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)v18);
          if (v19)
          {
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "lastPathComponent"));
            objc_msgSend(v14, "addObject:", v20);

          }
          v18 = (char *)v18 + 1;
        }
        while (v16 != v18);
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
      }
      while (v16);
    }

    v21 = objc_msgSend(v14, "count");
    v22 = 0;
    if (v25 && v21)
    {
      v23 = (*(uint64_t (**)(uint64_t, void *, id))(*(_QWORD *)a1 + 416))(a1, v14, v25);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v23);
    }
    v11 = v22;

    v13 = v11;
  }

  return v13;
}

void sub_1003B9024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

id sub_1003B90B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const __CFString *v6;
  const __CFString *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  _BOOL4 v24;
  NSObject *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  id v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[32];
  _BYTE v43[128];
  _BYTE v44[128];

  v32 = a2;
  v5 = a3;
  if ((objc_msgSend(v5, "containsString:", CFSTR("aladdink")) & 1) != 0)
  {
    v6 = CFSTR("aladdin");
    v7 = CFSTR("aladdink");
  }
  else
  {
    if (!objc_msgSend(v5, "containsString:", CFSTR("geniek")))
      goto LABEL_6;
    v6 = CFSTR("genie");
    v7 = CFSTR("geniek");
  }
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringByReplacingOccurrencesOfString:withString:", v7, v6));

  v5 = (id)v8;
LABEL_6:
  v31 = a1;
  v33 = v5;
  v9 = objc_alloc_init((Class)NSMutableArray);
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v10 = v32;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v38, v44, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v39;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v39 != v12)
          objc_enumerationMutation(v10);
        v14 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)v13);
        v34 = 0u;
        v35 = 0u;
        v36 = 0u;
        v37 = 0u;
        v15 = objc_msgSend(&off_100961200, "countByEnumeratingWithState:objects:count:", &v34, v43, 16);
        if (v15)
        {
          v16 = *(_QWORD *)v35;
          do
          {
            v17 = 0;
            do
            {
              if (*(_QWORD *)v35 != v16)
                objc_enumerationMutation(&off_100961200);
              if ((objc_msgSend(v14, "containsString:", *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)v17)) & 1) == 0)objc_msgSend(v9, "addObject:", v14);
              v17 = (char *)v17 + 1;
            }
            while (v15 != v17);
            v15 = objc_msgSend(&off_100961200, "countByEnumeratingWithState:objects:count:", &v34, v43, 16);
          }
          while (v15);
        }
        v13 = (char *)v13 + 1;
      }
      while (v13 != v11);
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v38, v44, 16);
    }
    while (v11);
  }

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("SELF MATCHES[c] %@"), v33));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "filteredArrayUsingPredicate:", v18));
  v20 = objc_msgSend(v19, "mutableCopy");

  if (!objc_msgSend(v20, "count"))
    goto LABEL_27;
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "sortedArrayUsingSelector:", "localizedCaseInsensitiveCompare:"));
  v22 = objc_msgSend(v21, "mutableCopy");

  v20 = v22;
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "lastObject"));
  v24 = (unint64_t)objc_msgSend(v23, "length") > 0xFF;

  if (v24)
  {
    v25 = (id)qword_1009997E8;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "lastObject"));
      sub_1006E6CDC(v26, (uint64_t)v33, (uint64_t)v42);
    }

LABEL_27:
    v27 = 0;
    goto LABEL_34;
  }
  if ((unint64_t)objc_msgSend(v22, "count") < 2)
  {
    v29 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "lastObject"));
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E6D3C();
    v28 = (*(uint64_t (**)(uint64_t, id))(*(_QWORD *)v31 + 392))(v31, v22);
    v29 = objc_claimAutoreleasedReturnValue(v28);
  }
  v27 = (void *)v29;
LABEL_34:

  return v27;
}

void sub_1003B943C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

id sub_1003B94DC(uint64_t a1, void *a2)
{
  NSObject *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  __CFString *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  id v11;
  void *j;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v26;
  id v27;
  id obj;
  uint64_t v29;
  id v30;
  void *v31;
  void *i;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  id v47;
  _BYTE v48[128];
  _BYTE v49[128];
  _BYTE v50[32];

  v27 = a2;
  v47 = 0;
  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSRegularExpression regularExpressionWithPattern:options:error:](NSRegularExpression, "regularExpressionWithPattern:options:error:", CFSTR(".*_([0-9]*)[.]([0-9]*)[.]([0-9]*)[.].*"), 1, &v47));
  v26 = v47;
  if (v26)
  {
    v2 = (id)qword_1009997E8;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "lastObject"));
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "debugDescription"));
      sub_1006E6DA0(v3, v4, (uint64_t)v50);
    }

    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "lastObject"));
  }
  else
  {
    v37 = objc_alloc_init((Class)NSNumberFormatter);
    v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "lastObject"));
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    obj = v27;
    v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v49, 16);
    if (v6)
    {
      v33 = 0;
      v34 = 0;
      v36 = 0;
      v29 = *(_QWORD *)v44;
      v30 = v6;
      v7 = &stru_100941758;
      v8 = &stru_100941758;
      do
      {
        for (i = 0; i != v30; i = (char *)i + 1)
        {
          if (*(_QWORD *)v44 != v29)
            objc_enumerationMutation(obj);
          v9 = *(void **)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)i);
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "matchesInString:options:range:", v9, 0, 0, objc_msgSend(v9, "length")));

          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v33 = v10;
          v11 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v39, v48, 16);
          if (v11)
          {
            v38 = *(_QWORD *)v40;
            v7 = &stru_100941758;
            v8 = &stru_100941758;
            do
            {
              for (j = 0; j != v11; j = (char *)j + 1)
              {
                if (*(_QWORD *)v40 != v38)
                  objc_enumerationMutation(v33);
                v13 = *(void **)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)j);
                if ((unint64_t)objc_msgSend(v13, "numberOfRanges") >= 4)
                {
                  v14 = objc_msgSend(v13, "rangeAtIndex:", 1);
                  v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "substringWithRange:", v14, v15));

                  v17 = objc_msgSend(v13, "rangeAtIndex:", 3);
                  v19 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "substringWithRange:", v17, v18));

                  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "numberFromString:", v16));
                  v21 = objc_msgSend(v20, "longValue");

                  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "numberFromString:", v19));
                  v23 = objc_msgSend(v22, "longValue");

                  if ((uint64_t)v36 < (uint64_t)v21 || v36 == v21 && (uint64_t)v34 < (uint64_t)v23)
                  {
                    v24 = v9;

                    v35 = v24;
                    v36 = v21;
                    v8 = (__CFString *)v16;
                    v7 = (__CFString *)v19;
                    v34 = v23;
                  }
                  else
                  {
                    v8 = (__CFString *)v16;
                    v7 = (__CFString *)v19;
                  }
                }
              }
              v11 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v39, v48, 16);
            }
            while (v11);
          }
          else
          {
            v7 = &stru_100941758;
            v8 = &stru_100941758;
          }

        }
        v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v49, 16);
      }
      while (v30);
    }
    else
    {
      v33 = 0;
      v8 = &stru_100941758;
      v7 = &stru_100941758;
    }

    v5 = v35;
  }

  return v5;
}

void sub_1003B9900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t sub_1003B99EC(uint64_t a1, uint64_t *a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t v7;
  size_t v9;
  void *v10;
  _QWORD v11[16];
  uint64_t v12;
  void (__cdecl **v13[2])(std::ifstream *__hidden);
  _BYTE v14[120];
  uint64_t v15;
  uint64_t v16;

  bzero(v13, 0x240uLL);
  sub_1003B9D1C(v13, a2, 8);
  if ((v14[(unint64_t)*(v13[0] - 3) + 16] & 5) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E6F5C();
    v7 = 2402;
  }
  else
  {
    *a4 = 0;
    std::istream::seekg(v13, 0, 2);
    std::istream::tellg(v11, v13);
    *a4 = v12;
    std::istream::seekg(v13, 0, 0);
    v9 = *a4;
    if ((int)v9 <= 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006E6DF0();
      if (v15 && !std::filebuf::close(v14))
        std::ios_base::clear((std::ios_base *)((char *)v13 + (unint64_t)*(v13[0] - 3)), *(_DWORD *)&v14[(unint64_t)*(v13[0] - 3) + 16] | 4);
      v7 = 2403;
    }
    else
    {
      v10 = malloc_type_malloc(v9, 0x100004077774924uLL);
      *a3 = v10;
      if (v10)
      {
        std::istream::read(v13, v10, (int)*a4);
        if ((v14[(unint64_t)*(v13[0] - 3) + 16] & 5) != 0)
        {
          if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
            sub_1006E6EDC();
          if (v15 && !std::filebuf::close(v14))
            std::ios_base::clear((std::ios_base *)((char *)v13 + (unint64_t)*(v13[0] - 3)), *(_DWORD *)&v14[(unint64_t)*(v13[0] - 3) + 16] | 4);
          v7 = 2405;
        }
        else
        {
          if (v15 && !std::filebuf::close(v14))
            std::ios_base::clear((std::ios_base *)((char *)v13 + (unint64_t)*(v13[0] - 3)), *(_DWORD *)&v14[(unint64_t)*(v13[0] - 3) + 16] | 4);
          v7 = 0;
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006E6E70();
        if (v15 && !std::filebuf::close(v14))
          std::ios_base::clear((std::ios_base *)((char *)v13 + (unint64_t)*(v13[0] - 3)), *(_DWORD *)&v14[(unint64_t)*(v13[0] - 3) + 16] | 4);
        v7 = 2404;
      }
    }
  }
  std::filebuf::~filebuf(v14);
  std::ios::~ios(&v16);
  return v7;
}

void sub_1003B9CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_1003B9E34(&a26);
  _Unwind_Resume(a1);
}

void (__cdecl ***sub_1003B9D1C(void (__cdecl ***a1)(std::ifstream *__hidden this), uint64_t *a2, int a3))(std::ifstream *__hidden this)
{
  _QWORD *v6;
  void (__cdecl **v7)(std::ifstream *__hidden);
  void (__cdecl **v8)(std::ifstream *__hidden);
  std::ios_base *v9;
  uint64_t *v10;

  v6 = a1 + 2;
  *a1 = v7;
  *(_QWORD *)((char *)*(v7 - 3) + (_QWORD)a1) = v8;
  a1[1] = 0;
  v9 = (std::ios_base *)((char *)*(*a1 - 3) + (_QWORD)a1);
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v6);
  if (*((char *)a2 + 23) >= 0)
    v10 = a2;
  else
    v10 = (uint64_t *)*a2;
  if (!std::filebuf::open(v6, v10, a3 | 8u))
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (_QWORD)a1), *(_DWORD *)((char *)*(*a1 - 3) + (_QWORD)a1 + 32) | 4);
  return a1;
}

void sub_1003B9DFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::istream::~istream(v1, v2 + 8);
  std::ios::~ios(v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003B9E34(_QWORD *a1)
{
  uint64_t v2;

  std::filebuf::~filebuf(a1 + 2);
  std::ios::~ios(a1 + 53);
  return a1;
}

uint64_t sub_1003B9E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  char *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  unint64_t v16;
  void *v17;
  void *v19[2];
  uint64_t v20;
  void *v21[2];
  uint64_t v22;
  __int128 __dst;
  uint64_t v24;
  void *__p[2];
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v10 = (char *)(a2 + 23);
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a2 + 23))
      goto LABEL_3;
LABEL_7:
    v11 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E6FC8(v11, v12, v13);
    return 2400;
  }
  if (!*(_QWORD *)(a2 + 8))
    goto LABEL_7;
LABEL_3:
  if (!a4)
  {
    v15 = qword_1009997E8;
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006E703C(v10, (_QWORD *)a2, v15);
    return 2401;
  }
  if ((*(_BYTE *)(a2 + 23) & 0x80) != 0)
  {
    sub_10003430C(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v26 = *(_QWORD *)(a2 + 16);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)a1 + 360))(&v27, a1, __p);
  if (*((char *)a5 + 23) < 0)
    operator delete(*(void **)a5);
  *a5 = v27;
  *((_QWORD *)a5 + 2) = v28;
  HIBYTE(v28) = 0;
  LOBYTE(v27) = 0;
  if (SHIBYTE(v26) < 0)
    operator delete(__p[0]);
  if (*((char *)a5 + 23) < 0)
  {
    v16 = *((_QWORD *)a5 + 1);
    if (v16)
    {
      sub_10003430C(&__dst, *(void **)a5, v16);
LABEL_23:
      v14 = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 400))(a1, &__dst, a3, a4);
      if (SHIBYTE(v24) < 0)
      {
        v17 = (void *)__dst;
LABEL_37:
        operator delete(v17);
        return v14;
      }
      return v14;
    }
  }
  else if (*((_BYTE *)a5 + 23))
  {
    __dst = *a5;
    v24 = *((_QWORD *)a5 + 2);
    goto LABEL_23;
  }
  if (*v10 < 0)
  {
    sub_10003430C(v21, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)a2;
    v22 = *(_QWORD *)(a2 + 16);
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, void **))(*(_QWORD *)a1 + 368))(&v27, a1, v21);
  if (*((char *)a5 + 23) < 0)
    operator delete(*(void **)a5);
  *a5 = v27;
  *((_QWORD *)a5 + 2) = v28;
  HIBYTE(v28) = 0;
  LOBYTE(v27) = 0;
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (*((char *)a5 + 23) < 0)
  {
    sub_10003430C(v19, *(void **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    *(_OWORD *)v19 = *a5;
    v20 = *((_QWORD *)a5 + 2);
  }
  v14 = (*(uint64_t (**)(uint64_t, void **, uint64_t, uint64_t))(*(_QWORD *)a1 + 400))(a1, v19, a3, a4);
  if (SHIBYTE(v20) < 0)
  {
    v17 = v19[0];
    goto LABEL_37;
  }
  return v14;
}

void sub_1003BA108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1003BA160(std::string *a1@<X8>)
{
  NSObject *v2;
  const __CFData *v3;
  const __CFData *v4;
  uint64_t v5;
  const UInt8 *v6;
  unsigned int v7;
  NSObject *v8;
  std::string *v9;
  int v10;
  std::string *v11;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  sub_100091AE8(a1, "");
  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "System Settings MGCopyAnswer WSKU", (uint8_t *)&v10, 2u);
  }
  v3 = (const __CFData *)MGCopyAnswer(CFSTR("WSKU"), 0);
  v4 = v3;
  if (v3)
  {
    if (CFDataGetLength(v3) == 16)
    {
      v5 = 0;
      v6 = CFDataGetBytePtr(v4) + 8;
      do
      {
        v7 = v6[v5];
        if (v7 >= 0x21)
          std::string::push_back(a1, v7);
        ++v5;
      }
      while (v5 != 4);
      v8 = qword_1009997E8;
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
      {
        if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v9 = a1;
        else
          v9 = (std::string *)a1->__r_.__value_.__r.__words[0];
        v10 = 136315138;
        v11 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Obtained sku from system is: %s", (uint8_t *)&v10, 0xCu);
      }
    }
    CFRelease(v4);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
  {
    sub_1006E70E4();
  }
}

void sub_1003BA2F4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1003BA320(uint64_t a1)
{
  *(_QWORD *)a1 = off_10092BE28;
  *(_QWORD *)(a1 + 8) = off_10092C1A0;
  *(_QWORD *)(a1 + 16) = off_10092C1C0;
  *(_QWORD *)(a1 + 24) = off_10092C1E0;
  *(_QWORD *)(a1 + 32) = off_10092C200;
  *(_QWORD *)(a1 + 40) = off_10092C220;
  *(_QWORD *)(a1 + 48) = off_10092C240;
  *(_QWORD *)(a1 + 56) = off_10092C260;
  *(_QWORD *)(a1 + 64) = off_10092C280;
  *(_QWORD *)(a1 + 72) = off_10092C2A0;
  *(_QWORD *)(a1 + 80) = off_10092C2C0;
  *(_QWORD *)(a1 + 88) = off_10092C2E0;
  *(_QWORD *)(a1 + 96) = off_10092C300;
  *(_QWORD *)(a1 + 104) = off_10092C320;
  *(_QWORD *)(a1 + 112) = off_10092C340;
  *(_QWORD *)(a1 + 120) = off_10092C360;
  *(_QWORD *)(a1 + 128) = off_10092C380;
  *(_QWORD *)(a1 + 136) = off_10092C3A0;
  *(_QWORD *)(a1 + 144) = off_10092C3C0;
  *(_QWORD *)(a1 + 152) = off_10092C3E0;
  *(_QWORD *)(a1 + 160) = off_10092C400;
  *(_QWORD *)(a1 + 168) = off_10092C420;
  *(_QWORD *)(a1 + 176) = off_10092C440;
  *(_QWORD *)(a1 + 184) = off_10092C460;
  *(_QWORD *)(a1 + 192) = off_10092C480;
  *(_QWORD *)(a1 + 200) = off_10092C4A0;
  *(_QWORD *)(a1 + 1256) = &off_10092C4C0;

  sub_100069BDC(a1 + 1448);
  return sub_1003B3658((_QWORD *)a1);
}

void sub_1003BA408(uint64_t a1)
{
  *(_QWORD *)a1 = off_10092BE28;
  *(_QWORD *)(a1 + 8) = off_10092C1A0;
  *(_QWORD *)(a1 + 16) = off_10092C1C0;
  *(_QWORD *)(a1 + 24) = off_10092C1E0;
  *(_QWORD *)(a1 + 32) = off_10092C200;
  *(_QWORD *)(a1 + 40) = off_10092C220;
  *(_QWORD *)(a1 + 48) = off_10092C240;
  *(_QWORD *)(a1 + 56) = off_10092C260;
  *(_QWORD *)(a1 + 64) = off_10092C280;
  *(_QWORD *)(a1 + 72) = off_10092C2A0;
  *(_QWORD *)(a1 + 80) = off_10092C2C0;
  *(_QWORD *)(a1 + 88) = off_10092C2E0;
  *(_QWORD *)(a1 + 96) = off_10092C300;
  *(_QWORD *)(a1 + 104) = off_10092C320;
  *(_QWORD *)(a1 + 112) = off_10092C340;
  *(_QWORD *)(a1 + 120) = off_10092C360;
  *(_QWORD *)(a1 + 128) = off_10092C380;
  *(_QWORD *)(a1 + 136) = off_10092C3A0;
  *(_QWORD *)(a1 + 144) = off_10092C3C0;
  *(_QWORD *)(a1 + 152) = off_10092C3E0;
  *(_QWORD *)(a1 + 160) = off_10092C400;
  *(_QWORD *)(a1 + 168) = off_10092C420;
  *(_QWORD *)(a1 + 176) = off_10092C440;
  *(_QWORD *)(a1 + 184) = off_10092C460;
  *(_QWORD *)(a1 + 192) = off_10092C480;
  *(_QWORD *)(a1 + 200) = off_10092C4A0;
  *(_QWORD *)(a1 + 1256) = &off_10092C4C0;

  sub_100069BDC(a1 + 1448);
  sub_1003B3658((_QWORD *)a1);
  operator delete();
}

Class sub_1003BA548(uint64_t a1)
{
  Class result;
  __int128 v3;
  uint64_t v4;

  if (!qword_1009923F0)
  {
    v3 = off_10092C580;
    v4 = 0;
    qword_1009923F0 = _sl_dlopen(&v3, 0);
  }
  result = objc_getClass("SBSSmartCoverService");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1009923E8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1003BA5FC(id a1)
{
  operator new();
}

void sub_1003BA714()
{
  operator delete();
}

void sub_1003BA738(id a1)
{
  operator new();
}

void sub_1003BA778()
{
  operator delete();
}

uint64_t sub_1003BA79C(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2112;
  *(_QWORD *)(a3 + 14) = a2;
  return result;
}

void sub_1003BA7B4(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

uint64_t sub_1003BA7C4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  xpc_object_t v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD v22[2];
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;

  v22[0] = 0;
  v22[1] = 0;
  sub_10003415C((uint64_t)v22, a1 + 8);
  v8 = *(_QWORD **)(a1 + 80);
  if (v8 != (_QWORD *)(a1 + 88))
  {
    while (1)
    {
      v9 = v8[4];
      v10 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
        break;
      if (v9)
        goto LABEL_4;
LABEL_7:
      v13 = (_QWORD *)v8[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v8[2];
          v15 = *v14 == (_QWORD)v8;
          v8 = v14;
        }
        while (!v15);
      }
      v8 = v14;
      if (v14 == (_QWORD *)(a1 + 88))
        return sub_100034234((uint64_t)v22);
    }
    v16 = *(_QWORD *)(v9 + 8);
    *(_DWORD *)buf = 134219264;
    v24 = a2;
    v25 = 1024;
    v26 = a3;
    v27 = 1024;
    v28 = a4;
    v29 = 1024;
    v30 = a5;
    v31 = 1024;
    v32 = a6;
    v33 = 2048;
    v34 = v16;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "BTDeviceMsgHandler::BTServiceEventCallback device:%llx services:%x eventType:%x ServiceSpecificEvent:%x result:%d cbid:%llx", buf, 0x2Eu);
LABEL_4:
    if (*(_BYTE *)(*(_QWORD *)(v9 + 24) + 160))
    {
      v11 = xpc_dictionary_create(0, 0, 0);
      v12 = v11;
      if (v11)
      {
        xpc_dictionary_set_uint64(v11, "kCBMsgArgID", *(_QWORD *)(v9 + 8));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgSessionID", *(_QWORD *)(v9 + 16));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgBTDevice", a2);
        xpc_dictionary_set_uint64(v12, "kCBMsgArgServiceMask", a3);
        xpc_dictionary_set_uint64(v12, "kCBMsgArgEventType", a4);
        xpc_dictionary_set_uint64(v12, "kCBMsgArgEvent", a5);
        xpc_dictionary_set_uint64(v12, "kCBMsgArgResult", a6);
        sub_1002C5EC8(*(_QWORD *)(v9 + 24), "kCBMsgIdServiceEvent", v12, 1);
      }
    }
    goto LABEL_7;
  }
  return sub_100034234((uint64_t)v22);
}

void sub_1003BAA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BAA54(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, int a5, uint64_t a6)
{
  if (a6)
    return sub_1003BA7C4(a6, result, a2, a3, a4, a5);
  return result;
}

void sub_1003BAA7C(id a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  const char *v55;
  uint64_t v56;
  const char **v57;

  v55 = "kCBMsgIdDeviceAddressToStringMsg";
  v56 = 32;
  v57 = &v55;
  v1 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v1[4] = sub_1003BB638;
  v1[5] = 0;
  v55 = "kCBMsgIdDeviceAddressFromStringMsg";
  v56 = 34;
  v57 = &v55;
  v2 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v2[4] = sub_100010DD4;
  v2[5] = 0;
  v55 = "kCBMsgIdDeviceFromAddressMsg";
  v56 = 28;
  v57 = &v55;
  v3 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v3[4] = sub_100010A2C;
  v3[5] = 0;
  v55 = "kCBMsgIdDeviceFromIdentifierMsg";
  v56 = 31;
  v57 = &v55;
  v4 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v4[4] = sub_1003BB824;
  v4[5] = 0;
  v55 = "kCBMsgIdDeviceGetAddressStringMsg";
  v56 = 33;
  v57 = &v55;
  v5 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v5[4] = sub_1003BB930;
  v5[5] = 0;
  v55 = "kCBMsgIdDeviceGetDeviceTypeMsg";
  v56 = 30;
  v57 = &v55;
  v6 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v6[4] = sub_1003BBA90;
  v6[5] = 0;
  v55 = "kCBMsgIdDeviceGetDeviceClassMsg";
  v56 = 31;
  v57 = &v55;
  v7 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v7[4] = sub_1003BBB78;
  v7[5] = 0;
  v55 = "kCBMsgIdDeviceGetDefaultNameMsg";
  v56 = 31;
  v57 = &v55;
  v8 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v8[4] = sub_1003BBC60;
  v8[5] = 0;
  v55 = "kCBMsgIdDeviceGetNameMsg";
  v56 = 24;
  v57 = &v55;
  v9 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v9[4] = sub_1003BBDC0;
  v9[5] = 0;
  v55 = "kCBMsgIdDeviceGetProductNameMsg";
  v56 = 31;
  v57 = &v55;
  v10 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v10[4] = sub_1003BBF20;
  v10[5] = 0;
  v55 = "kCBMsgIdDeviceSetUserNameMsg";
  v56 = 28;
  v57 = &v55;
  v11 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v11[4] = sub_1003BC080;
  v11[5] = 0;
  v55 = "kCBMsgIdDeviceGetSyncSettingsMsg";
  v56 = 32;
  v57 = &v55;
  v12 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v12[4] = sub_1003BC168;
  v12[5] = 0;
  v55 = "kCBMsgIdDeviceSetSyncSettingsMsg";
  v56 = 32;
  v57 = &v55;
  v13 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v13[4] = sub_1003BC250;
  v13[5] = 0;
  v55 = "kCBMsgIdDeviceGetGroupsMsg";
  v56 = 26;
  v57 = &v55;
  v14 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v14[4] = sub_1003BC338;
  v14[5] = 0;
  v55 = "kCBMsgIdDeviceSetGroupMsg";
  v56 = 25;
  v57 = &v55;
  v15 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v15[4] = sub_1003BC4EC;
  v15[5] = 0;
  v55 = "kCBMsgIdDeviceGetPairingStatusMsg";
  v56 = 33;
  v57 = &v55;
  v16 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v16[4] = sub_1003BC5EC;
  v16[5] = 0;
  v55 = "kCBMsgIdDeviceGetCloudPairingStatusMsg";
  v56 = 38;
  v57 = &v55;
  v17 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v17[4] = sub_1003BC6D4;
  v17[5] = 0;
  v55 = "kCBMsgIdDeviceGetMagicPairingStatusMsg";
  v56 = 38;
  v57 = &v55;
  v18 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v18[4] = sub_1003BC7BC;
  v18[5] = 0;
  v55 = "kCBMsgIdDeviceGetConnectionStatusMsg";
  v56 = 36;
  v57 = &v55;
  v19 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v19[4] = sub_1003BC8A4;
  v19[5] = 0;
  v55 = "kCBMsgIdDeviceIsAppleAudioDeviceMsg";
  v56 = 35;
  v57 = &v55;
  v20 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v20[4] = sub_1003BC98C;
  v20[5] = 0;
  v55 = "kCBMsgIdDeviceSupportsHSMsg";
  v56 = 27;
  v57 = &v55;
  v21 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v21[4] = sub_1003BCA74;
  v21[5] = 0;
  v55 = "kCBMsgIdDeviceIsProControllerMsg";
  v56 = 32;
  v57 = &v55;
  v22 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v22[4] = sub_1003BCB5C;
  v22[5] = 0;
  v55 = "kCBMsgIdDeviceServiceAddCallbacksMsg";
  v56 = 36;
  v57 = &v55;
  v23 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v23[4] = sub_10000E6CC;
  v23[5] = 0;
  v55 = "kCBMsgIdDeviceServiceRemoveCallbacksMsg";
  v56 = 39;
  v57 = &v55;
  v24 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v24[4] = sub_1003BCC44;
  v24[5] = 0;
  v55 = "kCBMsgIdDeviceConnectMsg";
  v56 = 24;
  v57 = &v55;
  v25 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v25[4] = sub_1003BCE24;
  v25[5] = 0;
  v55 = "kCBMsgIdDeviceConnectServicesMsg";
  v56 = 32;
  v57 = &v55;
  v26 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v26[4] = sub_1003BCEEC;
  v26[5] = 0;
  v55 = "kCBMsgIdDeviceConnectServicesWithParametersMsg";
  v56 = 46;
  v57 = &v55;
  v27 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v27[4] = sub_1003BCFD4;
  v27[5] = 0;
  v55 = "kCBMsgIdDeviceDisconnectMsg";
  v56 = 27;
  v57 = &v55;
  v28 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v28[4] = sub_1003BD134;
  v28[5] = 0;
  v55 = "kCBMsgIdDeviceDisconnectServicesMsg";
  v56 = 35;
  v57 = &v55;
  v29 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v29[4] = sub_1003BD1FC;
  v29[5] = 0;
  v55 = "kCBMsgIdDeviceGetConnectedServicesMsg";
  v56 = 37;
  v57 = &v55;
  v30 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v30[4] = sub_1003BD2E4;
  v30[5] = 0;
  v55 = "kCBMsgIdDeviceGetSupportedServicesMsg";
  v56 = 37;
  v57 = &v55;
  v31 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v31[4] = sub_1003BD3CC;
  v31[5] = 0;
  v55 = "kCBMsgIdDeviceSetServiceSettingsMsg";
  v56 = 35;
  v57 = &v55;
  v32 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v32[4] = sub_1003BD4B4;
  v32[5] = 0;
  v55 = "kCBMsgIdDeviceGetServiceSettingsMsg";
  v56 = 35;
  v57 = &v55;
  v33 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v33[4] = sub_1003BD5D4;
  v33[5] = 0;
  v55 = "kCBMsgIdDeviceSetVirtualTypeMsg";
  v56 = 31;
  v57 = &v55;
  v34 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v34[4] = sub_1003BD74C;
  v34[5] = 0;
  v55 = "kCBMsgIdDeviceGetVirtualTypeMsg";
  v56 = 31;
  v57 = &v55;
  v35 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v35[4] = sub_1003BD834;
  v35[5] = 0;
  v55 = "kCBMsgIdDeviceGetComPortForServiceMsg";
  v56 = 37;
  v57 = &v55;
  v36 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v36[4] = sub_1003BD91C;
  v36[5] = 0;
  v55 = "kCBMsgIdDeviceGetComPortForServiceWithSandboxExtensionMsg";
  v56 = 57;
  v57 = &v55;
  v37 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v37[4] = sub_1003BDAB0;
  v37[5] = 0;
  v55 = "kCBMsgIdDeviceMatchesAdvertisedKeyMsg";
  v56 = 37;
  v57 = &v55;
  v38 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v38[4] = sub_1003BDCF4;
  v38[5] = 0;
  v55 = "kCBMsgIdDeviceGetAdvertisedValueForKeyMsg";
  v56 = 41;
  v57 = &v55;
  v39 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v39[4] = sub_1003BDE0C;
  v39[5] = 0;
  v55 = "kCBMsgIdDeviceGetDeviceIdMsg";
  v56 = 28;
  v57 = &v55;
  v40 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v40[4] = sub_1003BDFBC;
  v40[5] = 0;
  v55 = "kCBMsgIdDeviceSetHIDPropertiesMsg";
  v56 = 33;
  v57 = &v55;
  v41 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v41[4] = sub_1003BE0EC;
  v41[5] = 0;
  v55 = "kCBMsgIdDevicePhysicalLinkDisconnectMsg";
  v56 = 39;
  v57 = &v55;
  v42 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v42[4] = sub_1003BE1EC;
  v42[5] = 0;
  v55 = "kCBMsgIdDeviceConfigureLinkKeyMsg";
  v56 = 33;
  v57 = &v55;
  v43 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v43[4] = sub_1003BE2B0;
  v43[5] = 0;
  v55 = "kCBMsgIdDeviceIsTemporaryPairedMsg";
  v56 = 34;
  v57 = &v55;
  v44 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v44[4] = sub_1003BE438;
  v44[5] = 0;
  v55 = "kCBMsgIdDeviceIsWirelessSplitterSupportedMsg";
  v56 = 44;
  v57 = &v55;
  v45 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v45[4] = sub_1003BE520;
  v45[5] = 0;
  v55 = "kCBMsgIdDeviceIsTemporaryPairedNotInContactsMsg";
  v56 = 47;
  v57 = &v55;
  v46 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v46[4] = sub_1003BE608;
  v46[5] = 0;
  v55 = "kCBMsgIdDeviceGetLowSecurityStatusMsg";
  v56 = 37;
  v57 = &v55;
  v47 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v47[4] = sub_1003BE6F0;
  v47[5] = 0;
  v55 = "kCBMsgIdDeviceGetHIDDeviceBehaviorMsg";
  v56 = 37;
  v57 = &v55;
  v48 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v48[4] = sub_1003BE7D8;
  v48[5] = 0;
  v55 = "kCBMsgIdDeviceSetHijackAudioRouteMsg";
  v56 = 36;
  v57 = &v55;
  v49 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v49[4] = sub_1003BE8C4;
  v49[5] = 0;
  v55 = "kCBMsgIdDeviceSetACLHighPriorityMsg";
  v56 = 35;
  v57 = &v55;
  v50 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v50[4] = sub_1003BE9AC;
  v50[5] = 0;
  v55 = "kCBMsgIdDeviceIsCentralMsg";
  v56 = 26;
  v57 = &v55;
  v51 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v51[4] = sub_1003BEAAC;
  v51[5] = 0;
  v55 = "kCBMsgIdDeviceGetUserSelectedDeviceTypeMsg";
  v56 = 42;
  v57 = &v55;
  v52 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v52[4] = sub_1003BEB94;
  v52[5] = 0;
  v55 = "kCBMsgIdDeviceSetUserSelectedDeviceTypeMsg";
  v56 = 42;
  v57 = &v55;
  v53 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v53[4] = sub_1003BEC7C;
  v53[5] = 0;
  v55 = "kCBMsgIdDeviceIsGenuineAirPodsMsg";
  v56 = 33;
  v57 = &v55;
  v54 = sub_100025BAC((uint64_t)&xmmword_100999490, (uint64_t)&v55, (uint64_t)&unk_100740F58, (_OWORD **)&v57);
  v54[4] = sub_1003BED64;
  v54[5] = 0;
}

void sub_1003BB638(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  int *data;
  uint64_t uint64;
  uint64_t v7;
  xpc_object_t reply;
  void *v10;
  size_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  xpc_object_t v15;
  void *v16;
  size_t length;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  length = 0;
  data = (int *)xpc_dictionary_get_data(value, "kCBMsgArgAddressBytes", &length);
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAddressStringBuffSize");
  if (length != 6 || uint64 == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_FAULT))
      sub_1006E7110();
    reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      v10 = reply;
      xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", 3uLL);
      xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
      xpc_release(v10);
    }
  }
  else
  {
    if (uint64 >= 0x200)
      v11 = 512;
    else
      v11 = uint64;
    __chkstk_darwin(uint64, v7);
    v13 = (char *)&length - v12;
    bzero((char *)&length - v12, v11);
    *v13 = 0;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
      sub_1006E713C();
    v14 = sub_100431424(data, v13, v11);
    v15 = xpc_dictionary_create_reply(xdict);
    if (v15)
    {
      v16 = v15;
      xpc_dictionary_set_uint64(v15, "kCBMsgArgResult", v14);
      xpc_dictionary_set_string(v16, "kCBMsgArgAddressString", v13);
      xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v16);
      xpc_release(v16);
    }
  }
}

void sub_1003BB824(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  const uint8_t *uuid;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgSessionID");
  uuid = xpc_dictionary_get_uuid(v4, "kCBMsgArgUUID");
  value = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7260();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_1004314F4(uint64, (uint64_t)uuid, &value);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBTDevice", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003BB930(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;
  _OWORD v11[16];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  memset(v11, 0, sizeof(v11));
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E72C0();
    if (uint64)
      goto LABEL_3;
LABEL_8:
    v8 = 1;
    goto LABEL_9;
  }
  if (!uint64)
    goto LABEL_8;
LABEL_3:
  if (v6 >= 0x200)
    v7 = 512;
  else
    v7 = v6;
  v8 = (int)sub_10043163C(uint64, (char *)v11, v7);
LABEL_9:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_string(v10, "kCBMsgArgAddressString", (const char *)v11);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003BBA90(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7320();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_10043187C(uint64, (int *)&value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgDeviceType", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BBB78(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7380();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100431A24(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgDeviceClass", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BBC60(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;
  _OWORD v11[16];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  memset(v11, 0, sizeof(v11));
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E73E0();
    if (uint64)
      goto LABEL_3;
LABEL_8:
    v8 = 1;
    goto LABEL_9;
  }
  if (!uint64)
    goto LABEL_8;
LABEL_3:
  if (v6 >= 0x100)
    v7 = 256;
  else
    v7 = v6;
  v8 = (int)sub_100431B0C(uint64, (char *)v11, v7);
LABEL_9:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_string(v10, "kCBMsgArgName", (const char *)v11);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003BBDC0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;
  _OWORD v11[16];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  memset(v11, 0, sizeof(v11));
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7440();
    if (uint64)
      goto LABEL_3;
LABEL_8:
    v8 = 1;
    goto LABEL_9;
  }
  if (!uint64)
    goto LABEL_8;
LABEL_3:
  if (v6 >= 0x100)
    v7 = 256;
  else
    v7 = v6;
  v8 = (int)sub_100431D34(uint64, (char *)v11, v7);
LABEL_9:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_string(v10, "kCBMsgArgName", (const char *)v11);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003BBF20(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;
  _OWORD v11[16];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  memset(v11, 0, sizeof(v11));
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E74A0();
    if (uint64)
      goto LABEL_3;
LABEL_8:
    v8 = 1;
    goto LABEL_9;
  }
  if (!uint64)
    goto LABEL_8;
LABEL_3:
  if (v6 >= 0x100)
    v7 = 256;
  else
    v7 = v6;
  v8 = (int)sub_100431FC4(uint64, (char *)v11, v7);
LABEL_9:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_string(v10, "kCBMsgArgName", (const char *)v11);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003BC080(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  char *string;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  string = (char *)xpc_dictionary_get_string(value, "kCBMsgArgName");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7500();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100432254(uint64, string);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003BC168(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7560();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_1004323D8(uint64, (int *)&value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgSyncSettings", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BC250(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  unsigned int v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgSyncSettings");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E75C0();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_1004324AC(uint64, v6);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003BC338(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  uint64_t v10;
  xpc_object_t reply;
  void *v12;
  xpc_object_t v13;
  uint64_t i;
  uint64_t v15;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgGrouIdArraySize");
  __chkstk_darwin(v6, 4 * v6);
  v8 = (char *)&v15 - v7;
  bzero((char *)&v15 - v7, v9);
  v15 = v6;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7620();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v10 = (int)sub_100432568(uint64, (uint64_t)v8, &v15);
    goto LABEL_6;
  }
  v15 = 0;
  v10 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    v13 = xpc_array_create(0, 0);
    if (v15)
    {
      for (i = 0; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, *(int *)&v8[4 * i]);
    }
    xpc_dictionary_set_value(v12, "kCBMsgArgGrouIdArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v13);
    xpc_release(v12);
  }
}

void sub_1003BC4EC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  int v6;
  int v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgGrouId");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7680();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v8 = (int)sub_100432634(uint64, v6, v7);
    goto LABEL_6;
  }
  v8 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003BC5EC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E76E0();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_1004327FC(uint64, (int *)&value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgPaired", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BC6D4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7740();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_10043297C(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgPaired", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BC7BC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E77A0();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_1004329E8(uint64, (int *)&value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgPaired", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BC8A4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7800();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100432A9C(uint64, (int *)&value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgConnected", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BC98C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7860();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100432B14(uint64, (int *)&value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BCA74(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E78C0();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100432C00(uint64, (int *)&value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BCB5C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7920();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100432CEC(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

uint64_t sub_1003BCC44(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  int v12;
  xpc_object_t reply;
  void *v14;
  void *v16;
  _QWORD v17[2];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSessionID");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006E7A34();
  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 8);
  if (uint64)
  {
    v7 = *(_QWORD **)(a1 + 80);
    if (v7 == (_QWORD *)(a1 + 88))
    {
LABEL_13:
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006E79FC();
      v12 = 3;
    }
    else
    {
      while (1)
      {
        v8 = (uint64_t *)v7[4];
        if (v8[1] == v6 && v8[2] == uint64)
          break;
        v9 = (_QWORD *)v7[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v7[2];
            v11 = *v10 == (_QWORD)v7;
            v7 = v10;
          }
          while (!v11);
        }
        v7 = v10;
        if (v10 == (_QWORD *)(a1 + 88))
          goto LABEL_13;
      }
      v16 = (void *)v7[4];
      if (*(_BYTE *)(a1 + 104))
      {
        v12 = sub_100432D60(uint64, *v8);
        *(_BYTE *)(a1 + 104) = 0;
      }
      else
      {
        v12 = 0;
      }
      sub_100015ECC(a1 + 80, (unint64_t *)&v16);
      free(v16);
    }
  }
  else
  {
    v12 = 1;
  }
  reply = xpc_dictionary_create_reply(xdict);
  v14 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v12);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v14);
    xpc_release(v14);
  }
  return sub_100034234((uint64_t)v17);
}

void sub_1003BCE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003BCE24(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7A94();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100432DB8(uint64, -1);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BCEEC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  int v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgServices");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7AF4();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100432DB8(uint64, v6);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003BCFD4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  int v6;
  __int128 *data;
  int v8;
  uint64_t v9;
  xpc_object_t reply;
  void *v11;
  __int128 v12;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgServices");
  data = (__int128 *)xpc_dictionary_get_data(value, "kCBMsgArgKey", 0);
  v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnectionMode");
  v12 = 0uLL;
  if (data)
    v12 = *data;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7B54();
    if (uint64)
      goto LABEL_5;
  }
  else if (uint64)
  {
LABEL_5:
    v9 = (int)sub_100433204(uint64, v6, v8, &v12);
    goto LABEL_8;
  }
  v9 = 1;
LABEL_8:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1003BD134(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7BB4();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100433F24(uint64, -1);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BD1FC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  int v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgServiceMask");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7C14();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100433F24(uint64, v6);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003BD2E4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7C74();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100434208(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgServiceMask", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BD3CC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7CD4();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_10043436C(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgServiceMask", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BD4B4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  const char *string;
  const char *v7;
  int v8;
  uint64_t v9;
  xpc_object_t reply;
  void *v11;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  string = xpc_dictionary_get_string(value, "kCBMsgArgKey");
  v7 = xpc_dictionary_get_string(value, "kCBMsgArgValue");
  v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgServiceMask");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7D34();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v9 = (int)sub_1004344CC(uint64, v8, (uint64_t)string, (uint64_t)v7);
    goto LABEL_6;
  }
  v9 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1003BD5D4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  const char *string;
  int v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;
  _OWORD v11[16];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  string = xpc_dictionary_get_string(value, "kCBMsgArgKey");
  memset(v11, 0, sizeof(v11));
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgServiceMask");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7D94();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v8 = (int)sub_1004345AC(uint64, v7, (uint64_t)string, (uint64_t)v11);
    goto LABEL_6;
  }
  v8 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_string(v10, "kCBMsgArgValue", (const char *)v11);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003BD74C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  xpc_dictionary_get_uint64(value, "kCBMsgArgType");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7DF4();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_10043468C(uint64);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BD834(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7E54();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_10043297C(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgType", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BD91C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  xpc_object_t reply;
  void *v15;
  uint64_t v16;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  if (v6 >= 0x200)
    v7 = 512;
  else
    v7 = v6;
  v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgServiceID");
  v9 = v8;
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v16 - v11;
  bzero((char *)&v16 - v11, v7);
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7EB4();
    if (uint64)
      goto LABEL_6;
  }
  else if (uint64)
  {
LABEL_6:
    v13 = sub_1004346F8(uint64, v9, v12, v7);
    goto LABEL_9;
  }
  v13 = 1;
LABEL_9:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v15 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v13);
    if (!v13)
      xpc_dictionary_set_data(v15, "kCBMsgArgData", v12, v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v15);
    xpc_release(v15);
  }
}

void sub_1003BDAB0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  char *uint64;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  xpc_object_t reply;
  void *v14;
  _OWORD v15[31];
  __int128 v16;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = (char *)xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  if (v6 >= 0x200)
    v7 = 512;
  else
    v7 = v6;
  v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgServiceID");
  v9 = v8;
  v16 = 0u;
  memset(v15, 0, sizeof(v15));
  __chkstk_darwin(v8, v10);
  v12 = (char *)v15 - v11;
  bzero((char *)v15 - v11, v7);
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7F14();
    if (uint64)
      goto LABEL_6;
LABEL_10:
    LODWORD(uint64) = 1;
    goto LABEL_11;
  }
  if (!uint64)
    goto LABEL_10;
LABEL_6:
  LODWORD(uint64) = sub_1004346F8((unint64_t)uint64, v9, v12, v7);
  if (!(_DWORD)uint64)
  {
    uint64 = (char *)sandbox_extension_issue_file("com.apple.sandbox.pty", v12, 0);
    if (uint64)
    {
      strlcpy((char *)v15, uint64, 0x200uLL);
      HIBYTE(v16) = 0;
      free(uint64);
      LODWORD(uint64) = 0;
    }
  }
LABEL_11:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v14 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", (int)uint64);
    if (!(_DWORD)uint64)
    {
      xpc_dictionary_set_data(v14, "kCBMsgArgData", v12, v7);
      xpc_dictionary_set_data(v14, "kCBMsgArgExtensionToken", v15, 0x200uLL);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v14);
    xpc_release(v14);
  }
}

void sub_1003BDCF4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  void *data;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  int value[3];

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  *(_QWORD *)&value[1] = 0;
  data = (void *)xpc_dictionary_get_data(v4, "kCBMsgArgKey", (size_t *)&value[1]);
  value[0] = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7F74();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_1004347D8(uint64, data, *(size_t *)&value[1], value);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBool", value[0]);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003BDE0C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  size_t v7;
  void *data;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  xpc_object_t reply;
  void *v14;
  uint64_t v15;
  size_t v16;
  size_t length;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  if (v6 >= 0x200)
    v7 = 512;
  else
    v7 = v6;
  length = 0;
  data = (void *)xpc_dictionary_get_data(value, "kCBMsgArgKey", &length);
  __chkstk_darwin(data, v9);
  v11 = (char *)&v15 - v10;
  bzero((char *)&v15 - v10, v7);
  v16 = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E7FD4();
    if (uint64)
      goto LABEL_6;
  }
  else if (uint64)
  {
LABEL_6:
    v12 = sub_100434868(uint64, data, length, (uint64_t)v11, &v16, v7);
    goto LABEL_9;
  }
  v12 = 1;
LABEL_9:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v14 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v12);
    if (!v12)
      xpc_dictionary_set_data(v14, "kCBMsgArgData", v11, v16);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v14);
    xpc_release(v14);
  }
}

void sub_1003BDFBC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  v9 = 0;
  value = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E8034();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_10043491C(uint64, (_DWORD *)&value + 1, &value, (_DWORD *)&v9 + 1, &v9);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgVendorIdSource", HIDWORD(value));
    xpc_dictionary_set_uint64(v8, "kCBMsgArgVendorId", value);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgProductId", HIDWORD(v9));
    xpc_dictionary_set_uint64(v8, "kCBMsgArgVersionId", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BE0EC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgAuthStatus");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgHIDType");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E8094();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v8 = (int)sub_100434A38(uint64, v6, v7);
    goto LABEL_6;
  }
  v8 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003BE1EC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E80F4();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100433B78(uint64);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BE2B0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  int v6;
  const void *data;
  int *v8;
  int *v9;
  uint64_t v10;
  xpc_object_t reply;
  void *v12;
  uint64_t v13;
  size_t length;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (v6)
    data = xpc_dictionary_get_data(value, "kCBMsgArgKey", 0);
  else
    data = 0;
  length = 0;
  v8 = (int *)xpc_dictionary_get_data(value, "kCBMsgArgAddressBytes", &length);
  if (length == 6)
  {
    v9 = v8;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    {
      sub_1006E8154();
      if (uint64)
        goto LABEL_7;
    }
    else if (uint64)
    {
LABEL_7:
      v10 = (int)sub_100434AEC(uint64, v9, (uint64_t)data, v6);
LABEL_14:
      reply = xpc_dictionary_create_reply(xdict);
      if (!reply)
        return;
      v12 = reply;
      v13 = v10;
      goto LABEL_16;
    }
    v10 = 1;
    goto LABEL_14;
  }
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_FAULT))
    sub_1006E7234();
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v12 = reply;
    v13 = 8;
LABEL_16:
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

void sub_1003BE438(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E81B4();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100434C88(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgPaired", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BE520(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E8214();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100434D28(uint64, (int *)&value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BE608(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E8274();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100434E14(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BE6F0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E82D4();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100434EB4(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgLowSecurityStatus", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BE7D8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 2;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E8334();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100434F28(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMSgArgHIDDeviceBehavior", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BE8C4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  int v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E8394();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_100434F9C(uint64, v6);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003BE9AC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  uint64_t v6;
  int v7;
  uint64_t v8;
  xpc_object_t reply;
  void *v10;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgRequesterID");
  v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E83F4();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v8 = (int)sub_100435070(uint64, v6, v7);
    goto LABEL_6;
  }
  v8 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003BEAAC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E8454();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_10043518C(uint64, (int *)&value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BEB94(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  xpc_object_t reply;
  void *v8;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E84B4();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_100435204(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBTDeviceType", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003BEC7C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t uint64;
  int v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDeviceType");
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E8514();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v7 = (int)sub_1004352E0(uint64, v6);
    goto LABEL_6;
  }
  v7 = 1;
LABEL_6:
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003BED64(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  uint64_t uint64;
  uint64_t v6;
  NSObject *v7;
  xpc_object_t reply;
  void *v9;
  uint64_t value;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = -1;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
  {
    sub_1006E8620();
    if (uint64)
      goto LABEL_3;
  }
  else if (uint64)
  {
LABEL_3:
    v6 = (int)sub_1004354DC(uint64, &value);
    goto LABEL_6;
  }
  v6 = 1;
LABEL_6:
  v7 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006E8574((int *)&value, uint64, v7);
  reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgGenuine", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(_QWORD *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

_QWORD *sub_1003BEE80(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = (uint64_t)(a1 + 10);
  v3 = (_QWORD *)a1[10];
  v4 = a1 + 11;
  if (v3 != a1 + 11)
  {
    do
    {
      free((void *)v3[4]);
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v4);
  }
  sub_10001A82C(v2, (_QWORD *)a1[11]);
  a1[11] = 0;
  a1[12] = 0;
  a1[10] = v4;
  sub_10001A82C(v2, 0);
  *a1 = &off_10092B270;
  sub_100069BDC(a1 + 1);
  return a1;
}

void sub_1003BEF34(_QWORD *a1)
{
  sub_1003BEE80(a1);
  operator delete();
}

uint64_t sub_1003BEF58(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 8);
  v2 = *(_QWORD **)(a1 + 80);
  v3 = (_QWORD *)(a1 + 88);
  if (v2 != (_QWORD *)(a1 + 88))
  {
    do
    {
      v4 = (uint64_t *)v2[4];
      if (*(_BYTE *)(a1 + 104))
      {
        sub_100432D60(v4[2], *v4);
        *(_BYTE *)(a1 + 104) = 0;
      }
      free(v4);
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  sub_10001A82C(a1 + 80, *(_QWORD **)(a1 + 88));
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = v3;
  return sub_100034234((uint64_t)v9);
}

void sub_1003BF028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1003BF03C()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  xmmword_100999490 = 0u;
  unk_1009994A0 = 0u;
  dword_1009994B0 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_1003BA7C0, &xmmword_100999490, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1003BF08C(uint64_t a1)
{
  NSISO8601DateFormatter *v2;
  void *v3;
  uint64_t v4;
  NSMutableOrderedSet *v5;
  void *v6;
  _QWORD v8[5];

  *(_QWORD *)a1 = off_10092C638;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_1000160D0(a1 + 64);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10092C6F0);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1);
  v2 = objc_opt_new(NSISO8601DateFormatter);
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v2;

  objc_msgSend(*(id *)(a1 + 8), "setFormatOptions:", 1907);
  v4 = sub_10006BBEC();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1003BF230;
  v8[3] = &unk_100917378;
  v8[4] = a1;
  sub_100041A34(v4, v8);
  v5 = objc_opt_new(NSMutableOrderedSet);
  v6 = *(void **)(a1 + 424);
  *(_QWORD *)(a1 + 424) = v5;

  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 142) = 0;
  *(_WORD *)(a1 + 139) = 1023;
  *(_BYTE *)(a1 + 141) = 8;
  *(_DWORD *)(a1 + 142) = 100000;
  *(_DWORD *)(a1 + 433) = 33619967;
  *(_BYTE *)(a1 + 437) = 2;
  *(double *)(a1 + 440) = sub_1003BF648();
  sub_1003BF784(a1);
  return a1;
}

void sub_1003BF1EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

void sub_1003BF234()
{
  void *v0;
  void *v1;
  id v2;
  BOOL v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  id obj;
  id v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  id v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  void *v31;
  __int16 v32;
  double v33;
  __int16 v34;
  id v35;
  _BYTE v36[128];

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
  v27 = 0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "contentsOfDirectoryAtPath:error:", CFSTR("/private/var/mobile/Library/Logs/Bluetooth/"), &v27));
  v2 = v27;
  v18 = v1;
  v19 = v2;
  if (v1)
    v3 = v2 == 0;
  else
    v3 = 0;
  if (v3)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    obj = v1;
    v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v36, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v24;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v24 != v5)
            objc_enumerationMutation(obj);
          v7 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)v6);
          if ((objc_msgSend(v7, "hasPrefix:", CFSTR("Accessory")) & 1) != 0
            || (objc_msgSend(v7, "hasPrefix:", CFSTR("bluetoothd-Accessory")) & 1) != 0)
          {
            v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%@"), CFSTR("/private/var/mobile/Library/Logs/Bluetooth/"), v7, v18));
            v22 = 0;
            v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "attributesOfItemAtPath:error:", v8, &v22));
            v10 = v22;
            v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", NSFileCreationDate));
            objc_msgSend(v11, "timeIntervalSinceNow");
            v13 = v12;

            if (v10)
            {
              v14 = qword_1009997D8;
              if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 141558531;
                v29 = 1752392040;
                v30 = 2113;
                v31 = v8;
                v32 = 2114;
                v33 = *(double *)&v10;
                _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "deleteOldLogFiles: Can't get path attributes for %{private, mask.hash}@, error %{public}@", buf, 0x20u);
              }
            }
            else if (v13 >= -15552000.0
                   && (v13 >= -604800.0
                    || (v16 = sub_100027F68(),
                        ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16) & 1) != 0)))
            {
              v10 = 0;
            }
            else
            {
              v21 = 0;
              objc_msgSend(v0, "removeItemAtPath:error:", v8, &v21);
              v10 = v21;
              v15 = qword_1009997D8;
              if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 141558787;
                v29 = 1752392040;
                v30 = 2113;
                v31 = v8;
                v32 = 2048;
                v33 = v13;
                v34 = 2114;
                v35 = v10;
                _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "deleteOldLogFiles: Deleting old log file: %{private, mask.hash}@, fileAge %f, error %{public}@", buf, 0x2Au);
              }
            }

          }
          v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v36, 16);
        v4 = v17;
      }
      while (v17);
    }

  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
  {
    sub_1006E8680();
  }

}

void sub_1003BF5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

double sub_1003BF648()
{
  uint64_t v0;
  double v1;
  CFIndex AppIntegerValue;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  Boolean keyExistsAndHasValidFormat;
  uint8_t buf[4];
  double v15;

  v0 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0))
    v1 = 1.0;
  else
    v1 = 0.1;
  keyExistsAndHasValidFormat = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("com.apple.bluetooth.accessory.CrashAnalyticsSamplingRate"), CFSTR("com.apple.da"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    v3 = AppIntegerValue;
    if ((unint64_t)AppIntegerValue > 0x64)
    {
      v4 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006E86E4(v3, v4, v5, v6, v7, v8, v9, v10);
    }
    else
    {
      v1 = (double)AppIntegerValue / 100.0;
    }
  }
  v11 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v15 = v1;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "getCrashAnalyticsSamplingRate: Returning %f", buf, 0xCu);
  }
  return v1;
}

double sub_1003BF784(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  double result;

  v1 = a1;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  objc_msgSend(*(id *)(a1 + 128), "invalidate");
  v2 = *(void **)(v1 + 128);
  *(_QWORD *)(v1 + 128) = 0;

  objc_msgSend(*(id *)(v1 + 424), "removeAllObjects");
  result = 0.0;
  *(_OWORD *)(v1 + 150) = 0u;
  v1 += 150;
  *(_BYTE *)(v1 + 282) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_BYTE *)(v1 + 256) = 0;
  *(_WORD *)(v1 + 257) = 1;
  *(_WORD *)(v1 + 265) = 768;
  *(_DWORD *)(v1 + 268) = 0;
  *(_BYTE *)(v1 + 272) = 1;
  return result;
}

uint64_t sub_1003BF81C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_10092C638;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10092C6F0);
  sub_100069060((uint64_t)off_100977A50 + 64, a1);

  sub_100069BDC(a1 + 64);
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_1003BF8B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  sub_100069BDC(v1 + 64);
  v3 = *(void **)(v1 + 40);
  if (v3)
  {
    *(_QWORD *)(v1 + 48) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(a1);
}

void sub_1003BF8F4(uint64_t a1)
{
  sub_1003BF81C(a1);
  operator delete();
}

uint64_t sub_1003BF918(uint64_t result)
{
  *(_BYTE *)(result + 448) = 1;
  return result;
}

uint64_t sub_1003BF924(uint64_t result)
{
  *(_BYTE *)(result + 448) = 0;
  return result;
}

void sub_1003BF92C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  NSObject *v22;
  id v23;
  int v24;
  NSObject *v25;
  id v26;
  int v27;
  NSObject *v28;
  id v29;
  int v30;
  int v31;
  FILE *v32;
  int v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  NSObject *v48;
  int *v49;
  NSObject *v50;
  id v51;
  int v52;
  __int16 v53;
  uint64_t v54;
  _QWORD v55[5];
  char v56;
  _QWORD v57[5];
  _QWORD v58[2];
  _BYTE v59[16];
  _BYTE buf[14];
  _BYTE v61[6];
  _BYTE v62[6];
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;

  if (*(_BYTE *)(a1 + 448))
  {
    if (a2)
    {
      v58[0] = 0;
      v58[1] = 0;
      sub_10003415C((uint64_t)v58, a1 + 64);
      v6 = a2 + 128;
      v7 = sub_1003C0344(a1, a2 + 128);
      if (!v7)
        operator new();
      v8 = v7;
      v9 = qword_1009997D8;
      if (*(_BYTE *)(v7 + 40) == 3)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        {
          v10 = *(id *)(v8 + 8);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "initializeAccessoryLoggingSession: Disconnected device %{public}@ reconnected", buf, 0xCu);

        }
      }
      else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      {
        sub_1006E89C0(v8);
      }
      sub_1003C0384(a1, a2 + 128);
      v11 = sub_10006BBEC();
      v57[0] = _NSConcreteStackBlock;
      v57[1] = 3221225472;
      v57[2] = sub_1003C064C;
      v57[3] = &unk_100917378;
      v57[4] = a1;
      sub_100041A34(v11, v57);
      if (((a3 - 8194) > 0xE || ((1 << (a3 - 2)) & 0x409B) == 0)
        && !sub_10044936C(a2)
        && !*(_BYTE *)(a2 + 952))
      {
        v44 = sub_10003BE44();
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 328))(v44) & 1) != 0
          || (v45 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 384))(v45) & 1) != 0)
          || (v46 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 424))(v46)))
        {
          if (sub_1003C0650())
            v47 = 8;
          else
            v47 = 9;
          sub_1003C0728(a1, a2 + 128, v47, 2u);
        }
      }
      v12 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 328))(v12))
      {
        if ((a3 - 8194) <= 0xE && ((1 << (a3 - 2)) & 0x409B) != 0)
        {
          v13 = sub_100027F68();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13))
          {
            v14 = qword_1009997D8;
            if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "initializeAccessoryLoggingSession: Invoking W1 iOS-internal initialization steps", buf, 2u);
              v14 = qword_1009997D8;
            }
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            {
              v15 = *(unsigned __int8 *)(a1 + 136);
              v16 = *(unsigned __int8 *)(a1 + 137);
              v17 = *(unsigned __int16 *)(a1 + 139);
              v18 = *(unsigned __int8 *)(a1 + 141);
              v19 = *(_DWORD *)(a1 + 142);
              v20 = *(_DWORD *)(a1 + 146);
              v21 = *(unsigned __int8 *)(a1 + 138);
              *(_DWORD *)buf = 67110656;
              *(_DWORD *)&buf[4] = v15;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v16;
              *(_WORD *)v61 = 1024;
              *(_DWORD *)&v61[2] = v17;
              *(_WORD *)v62 = 1024;
              *(_DWORD *)&v62[2] = v18;
              v63 = 1024;
              v64 = v19;
              v65 = 1024;
              v66 = v20;
              v67 = 1024;
              v68 = v21;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "initializeAccessoryLoggingSession: isTimeStampPeriodicallyEnabled = %d, isDisableDiagnosticsPeriodicallyEnabled = %d, module = %d, level = %d, log_interval = %d, power_logging_interval = %d, isCrashLoggingDisabled = %d", buf, 0x2Cu);
            }
            if (*(_BYTE *)(a1 + 137))
            {
              v22 = qword_1009997D8;
              if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
              {
                v23 = *(id *)(v8 + 8);
                *(_DWORD *)buf = 138543874;
                *(_QWORD *)&buf[4] = v23;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)v61 = 1;
                *(_WORD *)&v61[4] = 1024;
                *(_DWORD *)v62 = 3000;
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Send Diagnostics Request Periodically to %{public}@, type = %d, interval = %d", buf, 0x18u);

              }
              buf[0] = 0;
              sub_100043758(buf);
              v24 = sub_1000E1864((unsigned __int8 *)(a2 + 128), 1, 3000);
              sub_10004339C(buf);
              if (v24 && os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                sub_1006E8948();
              sub_100043728(buf);
            }
            if (*(_BYTE *)(a1 + 136))
            {
              v25 = qword_1009997D8;
              if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
              {
                v26 = *(id *)(v8 + 8);
                *(_DWORD *)buf = 138543874;
                *(_QWORD *)&buf[4] = v26;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)v61 = 0;
                *(_WORD *)&v61[4] = 1024;
                *(_DWORD *)v62 = 100;
                _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Send TimeStamp Request Periodically to %{public}@, type = %d, interval = %d", buf, 0x18u);

              }
              buf[0] = 0;
              sub_100043758(buf);
              v27 = sub_1000E1864((unsigned __int8 *)(a2 + 128), 0, 100);
              sub_10004339C(buf);
              if (v27 && os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                sub_1006E88D0();
              sub_100043728(buf);
            }
            if (*(_DWORD *)(a1 + 146))
            {
              v28 = qword_1009997D8;
              if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
              {
                v29 = *(id *)(v8 + 8);
                v30 = *(_DWORD *)(a1 + 146);
                *(_DWORD *)buf = 138543874;
                *(_QWORD *)&buf[4] = v29;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)v61 = 2;
                *(_WORD *)&v61[4] = 1024;
                *(_DWORD *)v62 = v30;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Send Power Logging Request Periodically to %{public}@, type = %d, interval = %d", buf, 0x18u);

              }
              *(_BYTE *)(v8 + 40) = 6;
              LOBYTE(dword_10097AF60) = 1;
              v56 = 0;
              sub_100043758(&v56);
              v31 = sub_1000E2430((unsigned __int8 *)(a2 + 128), 4u, 5u, (unsigned __int8 *)&dword_10097AF60);
              sub_10004339C(&v56);
              if (v31 && os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                sub_1006E8858();
              v32 = fopen(aPrivateVarMobi_13, "a");
              if (v32)
              {
                sub_10043F6EC(a2, (uint64_t)buf);
                v33 = v62[3];
                v34 = *(const char **)buf;
                v42 = (const char *)sub_10025304C(v6, v35, v36, v37, v38, v39, v40, v41);
                v43 = buf;
                if (v33 < 0)
                  v43 = v34;
                fprintf(v32, "Power Logging - Device Name -> \"%s\", Bluetooth Addr -> \"%s\" \n", v43, v42);
                if ((v62[3] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
                fclose(v32);
              }
              else
              {
                v48 = qword_1009997D8;
                if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                {
                  v49 = __error();
                  sub_1006E8818(v49, (uint64_t)v59, v48);
                }
              }
              sub_100043728(&v56);
            }
            if (!*(_BYTE *)(a1 + 138) && *(_BYTE *)(v8 + 40) != 6)
            {
              sub_1003C0FBC(a1);
              v50 = qword_1009997D8;
              if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
              {
                v51 = *(id *)(v8 + 8);
                *(_DWORD *)buf = 138543362;
                *(_QWORD *)&buf[4] = v51;
                _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "initializeAccessoryLoggingSession: Send request to %{public}@ for check crash log existence, Left Bud", buf, 0xCu);

              }
              *(_DWORD *)(a1 + 418) = 0x10000;
              *(_BYTE *)(v8 + 40) = 7;
              LOBYTE(dword_10097AF60) = 2;
              *(_BYTE *)(a1 + 416) = 2;
              buf[0] = 0;
              sub_100043758(buf);
              v52 = sub_1000E2430((unsigned __int8 *)v6, 4u, 5u, (unsigned __int8 *)&dword_10097AF60);
              sub_10004339C(buf);
              dword_100992610 = dword_10097AF60;
              byte_100992614 = byte_10097AF64;
              byte_100992619 = 5;
              v53 = *(_WORD *)(v6 + 4);
              *(_DWORD *)(a1 + 409) = *(_DWORD *)v6;
              *(_WORD *)(a1 + 413) = v53;
              *(_BYTE *)(a1 + 415) = 0;
              if (v52)
              {
                if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                  sub_1006E87A0();
              }
              sub_100043728(buf);
            }
            v54 = sub_10006BBEC();
            v55[0] = _NSConcreteStackBlock;
            v55[1] = 3221225472;
            v55[2] = sub_1003C103C;
            v55[3] = &unk_100917378;
            v55[4] = a1;
            sub_100475CEC(v54, 30000, v55);
          }
        }
      }
      sub_100034234((uint64_t)v58);
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    {
      sub_1006E8774();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
  {
    sub_1006E8748();
  }
}

void sub_1003C02AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  sub_100043728(&a20);
  sub_100034234((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_1003C0344(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t result;

  if (a2)
  {
    v2 = *(uint64_t **)(a1 + 40);
    v3 = *(uint64_t **)(a1 + 48);
    while (v2 != v3)
    {
      result = *v2;
      if (*(_DWORD *)(*v2 + 16) == *(_DWORD *)a2 && *(unsigned __int16 *)(*v2 + 20) == *(unsigned __int16 *)(a2 + 4))
        return result;
      ++v2;
    }
  }
  return 0;
}

uint64_t sub_1003C0384(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  BOOL v7;
  __darwin_time_t tv_sec;
  __darwin_suseconds_t tv_usec;
  id v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  const char *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  const char *v34;
  timeval v35;
  uint8_t buf[4];
  __darwin_time_t v37;
  __int16 v38;
  __darwin_suseconds_t v39;
  __int16 v40;
  id v41;

  v32 = 0;
  v33 = 0;
  v34 = 0;
  v4 = sub_1003C0344(a1, a2);
  if (*(_BYTE *)(a1 + 448))
  {
    v5 = v4;
    if (v4)
    {
      v35.tv_sec = 0;
      *(_QWORD *)&v35.tv_usec = 0;
      gettimeofday(&v35, 0);
      v6 = qword_1009997D8;
      v7 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
      tv_sec = v35.tv_sec;
      tv_usec = v35.tv_usec;
      if (v7)
      {
        v10 = *(id *)(v5 + 8);
        *(_DWORD *)buf = 134218498;
        v37 = tv_sec;
        v38 = 1024;
        v39 = tv_usec;
        v40 = 2114;
        v41 = v10;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "sendTimestamp: Sending UNIX Epoch Time (seconds %ld, useconds %u) to %{public}@", buf, 0x1Cu);

      }
      v32 = __PAIR64__(tv_usec, tv_sec);
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"));
      objc_msgSend(*(id *)(a1 + 8), "setTimeZone:", v19);

      v20 = *(void **)(a1 + 8);
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", (double)tv_sec));
      v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "stringFromDate:", v21)));
      v23 = (const char *)objc_msgSend(v22, "UTF8String");

      v34 = v23;
      LOWORD(v33) = strlen(v23);
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10092C750);
      *(_DWORD *)buf = *(_DWORD *)a2;
      LOWORD(v37) = *(_WORD *)(a2 + 4);
      v24 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
      if (v24)
      {
        if (qword_100977A88 != -1)
          dispatch_once(&qword_100977A88, &stru_10092C770);
        return sub_10027BA18((uint64_t)off_100977A80, v24, (uint64_t)&v32);
      }
      else
      {
        v25 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
          sub_1006E8AD4(a2, v25, v26, v27, v28, v29, v30, v31);
        return 1;
      }
    }
    else
    {
      v12 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006E8A6C(a2, v12, v13, v14, v15, v16, v17, v18);
      return 312;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E8A40();
    return 111;
  }
}

void sub_1003C0624(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1003C0650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;
  char v7;

  v7 = 0;
  v0 = sub_100027F68();
  sub_100091AE8(v5, "AccessoryLogging");
  sub_100091AE8(__p, "APLogCollectionEnabled");
  (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v0 + 72))(v0, v5, __p, &v7);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  v1 = sub_100027F68();
  LODWORD(result) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 264))(v1);
  if (v7)
    return 1;
  else
    return result;
}

void sub_1003C06F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003C0728(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *i;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  int v30;
  NSObject *v32;
  id v33;
  int v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  os_log_t *v55;
  __objc2_class *v56;
  __objc2_class *v57;
  __objc2_class *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_t *v61;
  __objc2_class *v62;
  __objc2_class *v63;
  __objc2_class *v64;
  unsigned int v65;
  const char *v66;
  id v67;
  uint64_t info;
  uint64_t v69;
  unsigned int v70;
  NSObject *v71;
  id v72;
  NSObject *v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v85;
  uint64_t v86;
  char v87;
  int v88;
  unsigned int v89;
  void *v90[2];
  char v91;
  unsigned __int8 v92;
  _BYTE v93[5];
  _QWORD v94[2];
  void *__p;
  uint64_t *v96;
  uint64_t *v97;
  _BYTE buf[12];
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  int v102;
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;

  __p = 0;
  v96 = 0;
  v97 = 0;
  v8 = sub_100027F68();
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 160))(v8);
  if (a4 == 1)
    v10 = 1;
  else
    v10 = v9;
  if ((v10 & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 448))
    {
      if (*(_BYTE *)(a1 + 32))
      {
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
          sub_1006E8BB4();
        v11 = 10;
      }
      else
      {
        v94[0] = 0;
        v94[1] = 0;
        sub_10003415C((uint64_t)v94, a1 + 64);
        v88 = a3;
        if (a2)
        {
          v12 = qword_1009997D8;
          if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
          {
            v20 = sub_10025304C(a2, v13, v14, v15, v16, v17, v18, v19);
            *(_DWORD *)buf = 141558275;
            *(_QWORD *)&buf[4] = 1752392040;
            v99 = 2081;
            v100 = v20;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "sendLogCommand: BdAddr %{private, mask.hash}s specified", buf, 0x16u);
          }
          v21 = sub_1003C0344(a1, a2);
          if (v21)
          {
            v22 = v21;
            v23 = *(_DWORD *)(v21 + 24) - 8194;
            if (v23 > 0xE || ((1 << v23) & 0x409B) == 0)
            {
              v24 = v96;
              if (v96 >= v97)
              {
                v45 = ((char *)v96 - (_BYTE *)__p) >> 3;
                if ((unint64_t)(v45 + 1) >> 61)
                  abort();
                v46 = ((char *)v97 - (_BYTE *)__p) >> 2;
                if (v46 <= v45 + 1)
                  v46 = v45 + 1;
                if ((unint64_t)((char *)v97 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                  v47 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v47 = v46;
                if (v47)
                  v48 = (char *)sub_10007ABA0((uint64_t)&v97, v47);
                else
                  v48 = 0;
                v49 = (uint64_t *)&v48[8 * v45];
                v50 = &v48[8 * v47];
                *v49 = v22;
                v25 = v49 + 1;
                v52 = (char *)__p;
                v51 = (char *)v96;
                if (v96 != __p)
                {
                  do
                  {
                    v53 = *((_QWORD *)v51 - 1);
                    v51 -= 8;
                    *--v49 = v53;
                  }
                  while (v51 != v52);
                  v51 = (char *)__p;
                }
                __p = v49;
                v96 = v25;
                v97 = (uint64_t *)v50;
                if (v51)
                  operator delete(v51);
              }
              else
              {
                *v96 = v21;
                v25 = v24 + 1;
              }
              v96 = v25;
            }
          }
        }
        else
        {
          for (i = *(uint64_t **)(a1 + 40); i != *(uint64_t **)(a1 + 48); ++i)
          {
            v27 = *i;
            v28 = *(_DWORD *)(*i + 24) - 8194;
            v29 = v28 > 0xE;
            v30 = (1 << v28) & 0x409B;
            if (v29 || v30 == 0)
            {
              if (*(_BYTE *)(v27 + 40))
              {
                v32 = qword_1009997D8;
                if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
                {
                  v33 = *(id *)(v27 + 8);
                  v34 = *(unsigned __int8 *)(v27 + 40);
                  *(_DWORD *)buf = 138543618;
                  *(_QWORD *)&buf[4] = v33;
                  v99 = 1024;
                  LODWORD(v100) = v34;
                  _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "sendLogCommand: %{public}@ not idle (status %d), skipping", buf, 0x12u);

                }
              }
              else
              {
                v35 = v96;
                if (v96 >= v97)
                {
                  v37 = ((char *)v96 - (_BYTE *)__p) >> 3;
                  if ((unint64_t)(v37 + 1) >> 61)
                    abort();
                  v38 = ((char *)v97 - (_BYTE *)__p) >> 2;
                  if (v38 <= v37 + 1)
                    v38 = v37 + 1;
                  if ((unint64_t)((char *)v97 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
                    v39 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v39 = v38;
                  if (v39)
                    v40 = (char *)sub_10007ABA0((uint64_t)&v97, v39);
                  else
                    v40 = 0;
                  v41 = &v40[8 * v37];
                  *(_QWORD *)v41 = v27;
                  v36 = (uint64_t *)(v41 + 8);
                  v43 = (char *)__p;
                  v42 = (char *)v96;
                  if (v96 != __p)
                  {
                    do
                    {
                      v44 = *((_QWORD *)v42 - 1);
                      v42 -= 8;
                      *((_QWORD *)v41 - 1) = v44;
                      v41 -= 8;
                    }
                    while (v42 != v43);
                    v42 = (char *)__p;
                  }
                  __p = v41;
                  v96 = v36;
                  v97 = (uint64_t *)&v40[8 * v39];
                  if (v42)
                    operator delete(v42);
                }
                else
                {
                  *v96 = v27;
                  v36 = v35 + 1;
                }
                v96 = v36;
              }
            }
          }
        }
        v54 = (uint64_t *)__p;
        if (v96 == __p)
        {
          v73 = qword_1009997D8;
          if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "sendLogCommand: No appropriate accessory to command", buf, 2u);
          }
          v11 = 312;
        }
        else
        {
          v92 = v88;
          *(_DWORD *)v93 = *(_DWORD *)(a1 + 433);
          v93[4] = *(_BYTE *)(a1 + 437);
          if (a4 <= 0xA && ((1 << a4) & 0x63E) != 0)
            v93[3] = a4;
          v85 = a4;
          if (v88 == 7)
            *(_DWORD *)&v93[1] = 1;
          v86 = a1;
          v89 = 0;
          v87 = 0;
          v55 = (os_log_t *)&qword_1009997D8;
          v56 = &OBJC_METACLASS___BTVCLinkAdvertiseSet;
          v57 = &OBJC_METACLASS___BTVCLinkAdvertiseSet;
          v58 = &OBJC_METACLASS___BTVCLinkAdvertiseSet;
          while (1)
          {
            v59 = *v54;
            v60 = *v55;
            if (os_log_type_enabled(*v55, OS_LOG_TYPE_DEFAULT))
            {
              v61 = v55;
              v62 = v58;
              v63 = v57;
              v64 = v56;
              v65 = v92 - 1;
              v66 = "Unknown";
              if (v65 <= 8)
                v66 = off_10092C790[(char)v65];
              v67 = *(id *)(v59 + 8);
              *(_DWORD *)buf = 136316674;
              *(_QWORD *)&buf[4] = v66;
              v99 = 2114;
              v100 = (uint64_t)v67;
              v101 = 1024;
              v102 = v93[0];
              v103 = 1024;
              v104 = v93[1];
              v105 = 1024;
              v106 = v93[2];
              v107 = 1024;
              v108 = v93[3];
              v109 = 1024;
              v110 = v93[4];
              _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "sendLogCommand: Sending command %s to %{public}@: device %d module %d submodule %d type %d level %d", buf, 0x34u);

              v56 = v64;
              v57 = v63;
              v58 = v62;
              v55 = v61;
            }
            if (v56[57].isa != (__objc2_class *)-1)
              dispatch_once(&qword_1009778E8, &stru_10092C750);
            info = (uint64_t)v57[56].info;
            *(_DWORD *)buf = *(_DWORD *)(v59 + 16);
            *(_WORD *)&buf[4] = *(_WORD *)(v59 + 20);
            v69 = sub_1004704A8(info, (uint64_t)buf, 1);
            if (!v69)
              break;
            if (v58[67].cache != (void *)-1)
              dispatch_once(&qword_100977A88, &stru_10092C770);
            v70 = sub_10027958C((uint64_t)off_100977A80, v69, 512, 6, (uint64_t)&v92);
            if (v70)
            {
              v71 = *v55;
              if (os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
              {
                v72 = *(id *)(v59 + 8);
                *(_DWORD *)buf = 138543618;
                *(_QWORD *)&buf[4] = v72;
                v99 = 1024;
                LODWORD(v100) = v70;
                _os_log_error_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "sendLogCommand: Failed to send command to %{public}@ (error = %d)", buf, 0x12u);

              }
              v89 = v70;
            }
            else
            {
              if (v88 == 5)
                sub_1003C1234(v86, v59);
              v87 = 1;
            }
            if (++v54 == v96)
            {
              if (!((v85 != 2) | v87 & 1))
              {
                v83 = sub_100027F68();
                sub_100091AE8(buf, "AccessoryLogging");
                sub_100091AE8(v90, "StoredLogsRetrieved");
                (*(void (**)(uint64_t, _BYTE *, void **, _QWORD))(*(_QWORD *)v83 + 80))(v83, buf, v90, 0);
                if (v91 < 0)
                  operator delete(v90[0]);
                if (SHIBYTE(v101) < 0)
                  operator delete(*(void **)buf);
              }
              if ((v87 & 1) != 0)
                v11 = 0;
              else
                v11 = v89;
              goto LABEL_105;
            }
          }
          v74 = *v55;
          if (os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
          {
            v82 = sub_10025304C(v59 + 16, v75, v76, v77, v78, v79, v80, v81);
            sub_1006E8B78(v82, (uint64_t)buf, v74);
          }
          v11 = 1;
        }
LABEL_105:
        sub_100034234((uint64_t)v94);
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006E8B4C();
      v11 = 111;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E8BE0();
    v11 = 2;
  }
  if (__p)
  {
    v96 = (uint64_t *)__p;
    operator delete(__p);
  }
  return v11;
}

void sub_1003C0F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  sub_100034234((uint64_t)&a27);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id sub_1003C0FBC(uint64_t a1)
{
  id result;

  objc_msgSend(*(id *)(a1 + 424), "removeAllObjects");
  sub_1003CCE90(a1, (uint64_t)aPrivateVarMobi_14);
  sub_1003CCE90(a1, (uint64_t)aPrivateVarMobi_13);
  sub_1003CCE90(a1, (uint64_t)aPrivateVarMobi_15);
  sub_1003CCE90(a1, (uint64_t)&unk_100992400);
  sub_1003CCE90(a1, (uint64_t)&unk_100992500);
  result = objc_msgSend(*(id *)(a1 + 424), "count");
  *(_BYTE *)(a1 + 432) = (_BYTE)result;
  return result;
}

uint64_t sub_1003C103C(uint64_t a1)
{
  return sub_1003C1044(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1003C1044(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  int v23;
  __int16 v24;

  v22[0] = 0;
  v22[1] = 0;
  sub_10003415C((uint64_t)v22, a1 + 64);
  v2 = *(_QWORD *)(a1 + 48);
  while (v2 != *(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD *)(v2 - 8);
    v2 -= 8;
    v3 = v4;
    v5 = *(_DWORD *)(v4 + 24) - 8194;
    v6 = v5 > 0xE;
    v7 = (1 << v5) & 0x409B;
    if (!v6 && v7 != 0)
    {
      if (*(_BYTE *)(a1 + 448))
      {
        if (qword_1009778E8 != -1)
          dispatch_once(&qword_1009778E8, &stru_10092C750);
        v10 = *(_DWORD *)(v3 + 16);
        v9 = v3 + 16;
        v23 = v10;
        v24 = *(_WORD *)(v9 + 4);
        v11 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v23, 1);
        if (v11)
        {
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_10092C770);
          sub_100279E6C((uint64_t)off_100977A80, v11, 9, 0, 2u);
        }
        else
        {
          v12 = qword_1009997D8;
          if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
          {
            v20 = sub_10025304C(v9, v13, v14, v15, v16, v17, v18, v19);
            sub_1006E8C64(v20, (uint64_t)&v23, v12);
          }
        }
        return sub_100034234((uint64_t)v22);
      }
      goto LABEL_19;
    }
  }
  if (!*(_BYTE *)(a1 + 448))
  {
LABEL_19:
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E8C0C();
    return sub_100034234((uint64_t)v22);
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006E8C38();
  return sub_100034234((uint64_t)v22);
}

void sub_1003C1210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1003C1234(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  int v6;
  int v7;
  BOOL v8;
  double v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  void *v13;
  _QWORD v14[6];
  uint8_t buf[4];
  id v16;
  __int16 v17;
  int v18;

  *(_BYTE *)(a2 + 40) = 1;
  *(_BYTE *)(a1 + 32) = 1;
  v4 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(id *)(a2 + 8);
    v6 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)buf = 138543618;
    v16 = v5;
    v17 = 1024;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "startInactivityTimer: Timeout period for %{public}@ begun, pId = 0x%x", buf, 0x12u);

  }
  v7 = *(_DWORD *)(a2 + 24);
  v8 = v7 == 8223 || v7 == 8202;
  v9 = 45.0;
  if (!v8)
    v9 = 12.0;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1003C13C8;
  v14[3] = &unk_10092C668;
  v14[4] = a1;
  v14[5] = a2;
  v10 = objc_claimAutoreleasedReturnValue(+[NSTimer timerWithTimeInterval:repeats:block:](NSTimer, "timerWithTimeInterval:repeats:block:", 0, v14, v9));
  v12 = *(void **)(a2 + 32);
  v11 = (uint64_t *)(a2 + 32);
  *v11 = v10;

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](NSRunLoop, "mainRunLoop"));
  objc_msgSend(v13, "addTimer:forMode:", *v11, NSDefaultRunLoopMode);

}

void sub_1003C13B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003C13C8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[2];

  v2 = *(_QWORD *)(a1 + 32);
  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, v2 + 64);
  v3 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006E8CA0(a1, v3);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 80), "removeAllObjects");
  v4 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v4 + 40) = 2;
  sub_1003C1470(v2, v4);
  return sub_100034234((uint64_t)v6);
}

void sub_1003C145C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003C1470(uint64_t a1, uint64_t a2)
{
  NSMutableOrderedSet *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  __int128 v8;
  id v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  unsigned int v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  BOOL v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  id v42;
  NSObject *v43;
  uint64_t *v44;
  void *v45;
  int v46;
  id v47;
  uint64_t v48;
  char *v49;
  char *v50;
  NSObject *v51;
  uint64_t *v52;
  void *v53;
  int v54;
  id v55;
  NSObject *v56;
  unsigned int v57;
  uint64_t v58;
  NSMutableOrderedSet *v60;
  void *v61;
  void *v62;
  id v63;
  id v64;
  uint64_t v65;
  void *i;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  NSObject *v75;
  uint64_t *v76;
  id v77;
  NSObject *v78;
  id v79;
  NSObject *v80;
  const char *v81;
  NSMutableOrderedSet *v82;
  NSObject *v83;
  NSObject *v84;
  uint64_t *v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  NSObject *v96;
  _BOOL4 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  void *v102;
  __int128 v103;
  int v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  char v108;
  void *v109[2];
  char v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  void *__p;
  char *v120;
  char *v121;
  _BYTE v122[128];
  _BYTE v123[128];
  _BYTE buf[12];
  __int16 v125;
  int v126;
  __int16 v127;
  int v128;

  v4 = objc_opt_new(NSMutableOrderedSet);
  __p = 0;
  v120 = 0;
  v121 = 0;
  if (a2)
  {
    if (*(unsigned __int8 *)(a2 + 40) - 3 <= 1 && *(_QWORD *)(a2 + 64))
    {
      v5 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(_QWORD *)(a2 + 48);
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Warning: finishSession: File %@ still open, closing and marking as corrupt", buf, 0xCu);
      }
      *(_BYTE *)(a2 + 56) = 1;
      sub_1003C88B4(a2);
    }
    v7 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(id *)(a2 + 8);
      v10 = v9;
      v11 = *(unsigned __int8 *)(a2 + 40);
      v12 = *(_QWORD *)(a1 + 40);
      v13 = *(_QWORD *)(a1 + 48);
      if (v12 == v13)
      {
        v14 = 0;
      }
      else
      {
        v14 = 0;
        do
        {
          v15 = *(unsigned __int8 *)(*(_QWORD *)v12 + 40);
          v16 = v15 > 8;
          v17 = (1 << v15) & 0x182;
          if (!v16 && v17 != 0)
            ++v14;
          v12 += 8;
        }
        while (v12 != v13);
      }
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)&buf[4] = v9;
      v125 = 1024;
      v126 = v11;
      v127 = 1024;
      v128 = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "finishSession: %{public}@ logging session finished (state now %d); remaining sessions: %d",
        buf,
        0x18u);

    }
    v21 = *(uint64_t **)(a1 + 40);
    v20 = *(uint64_t **)(a1 + 48);
    if (v21 == v20)
      goto LABEL_103;
    v22 = 0;
    v23 = *(uint64_t **)(a1 + 40);
    do
    {
      v24 = *(unsigned __int8 *)(*v23 + 40);
      v16 = v24 > 8;
      v25 = (1 << v24) & 0x182;
      if (!v16 && v25 != 0)
        ++v22;
      ++v23;
    }
    while (v23 != v20);
    if (v22 > 0)
    {
      v19 = 0;
      goto LABEL_132;
    }
    if (v21 == v20)
    {
LABEL_103:
      v27 = 0;
      v108 = 0;
      v104 = 0;
      goto LABEL_104;
    }
    v104 = 0;
    v108 = 0;
    v27 = 0;
    *(_QWORD *)&v8 = 67109120;
    v103 = v8;
    v107 = a1;
    while (1)
    {
      v28 = *v21;
      v29 = *(unsigned __int8 *)(*v21 + 40);
      switch(*(_BYTE *)(*v21 + 40))
      {
        case 0:
        case 6:
          goto LABEL_84;
        case 1:
        case 8:
          v43 = qword_1009997D8;
          if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
          {
            v44 = v21;
            v45 = *(void **)(v28 + 8);
            v46 = *(unsigned __int8 *)(v28 + 40);
            *(_DWORD *)buf = 138543618;
            *(_QWORD *)&buf[4] = v45;
            v125 = 1024;
            v126 = v46;
            v47 = v45;
            _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "finishSession: %{public}@ should not be in state %d", buf, 0x12u);

            v21 = v44;
          }
          goto LABEL_66;
        case 2:
        case 4:
        case 5:
          goto LABEL_35;
        case 3:
          v48 = v28 + 16;
          v49 = v120;
          if (v120 >= v121)
          {
            v67 = (v120 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v67 + 1) >> 61)
              abort();
            v68 = (v121 - (_BYTE *)__p) >> 2;
            if (v68 <= v67 + 1)
              v68 = v67 + 1;
            if ((unint64_t)(v121 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v69 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v69 = v68;
            if (v69)
              v70 = (char *)sub_10007ABA0((uint64_t)&v121, v69);
            else
              v70 = 0;
            v71 = (uint64_t *)&v70[8 * v67];
            *v71 = v48;
            v50 = (char *)(v71 + 1);
            v73 = (char *)__p;
            v72 = v120;
            if (v120 != __p)
            {
              do
              {
                v74 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *--v71 = v74;
              }
              while (v72 != v73);
              v72 = (char *)__p;
            }
            __p = v71;
            v120 = v50;
            v121 = &v70[8 * v69];
            if (v72)
              operator delete(v72);
          }
          else
          {
            *(_QWORD *)v120 = v48;
            v50 = v49 + 8;
          }
          v120 = v50;
          v75 = qword_1009997D8;
          if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
          {
            v76 = v21;
            v77 = *(id *)(v28 + 8);
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v77;
            _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "finishSession: Session for %{public}@ marked for deletion", buf, 0xCu);

            v21 = v76;
          }
LABEL_35:
          v30 = *(_DWORD *)(v28 + 24) - 8194;
          v16 = v30 > 0xE;
          v31 = (1 << v30) & 0x409B;
          v32 = v16 || v31 == 0;
          v105 = v21;
          if (v32)
          {
            v33 = *(id *)(v28 + 80);
          }
          else
          {
            v33 = *(id *)(a1 + 424);
            v108 |= (unint64_t)objc_msgSend(*(id *)(a1 + 424), "count") > *(unsigned __int8 *)(a1 + 432);
          }
          v117 = 0u;
          v118 = 0u;
          v115 = 0u;
          v116 = 0u;
          v34 = v33;
          v35 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v115, v123, 16);
          if (!v35)
            goto LABEL_57;
          v36 = *(_QWORD *)v116;
          break;
        case 7:
          v51 = qword_1009997D8;
          if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
          {
            v52 = v21;
            v53 = *(void **)(v28 + 8);
            v54 = *(unsigned __int8 *)(v28 + 40);
            *(_DWORD *)buf = 138543618;
            *(_QWORD *)&buf[4] = v53;
            v125 = 1024;
            v126 = v54;
            v55 = v53;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Warning: finishSession: %{public}@ in state %d", buf, 0x12u);

            v21 = v52;
          }
          goto LABEL_84;
        default:
          v56 = qword_1009997D8;
          if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v103;
            *(_DWORD *)&buf[4] = v29;
            _os_log_error_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "finishSession: Unhandled status %d", buf, 8u);
          }
          goto LABEL_66;
      }
      do
      {
        v37 = 0;
        do
        {
          if (*(_QWORD *)v116 != v36)
            objc_enumerationMutation(v34);
          v38 = *(_QWORD *)(*((_QWORD *)&v115 + 1) + 8 * (_QWORD)v37);
          v39 = *(_DWORD *)(v28 + 24) - 8194;
          v16 = v39 > 0xE;
          v40 = (1 << v39) & 0x409B;
          if (!v16 && v40 != 0)
            goto LABEL_49;
          if (!objc_msgSend(*(id *)(*((_QWORD *)&v115 + 1) + 8 * (_QWORD)v37), "hasPrefix:", CFSTR("/private/var/mobile/Library/Logs/Bluetooth/AccessoryVersionInfo")))
          {
            v108 = 1;
LABEL_49:
            -[NSMutableOrderedSet addObject:](v4, "addObject:", v38, v103);
            v27 = v28;
            goto LABEL_50;
          }
          if (!*(_BYTE *)(v107 + 34))
            goto LABEL_49;
LABEL_50:
          v37 = (char *)v37 + 1;
        }
        while (v35 != v37);
        v42 = objc_msgSend(v34, "countByEnumeratingWithState:objects:count:", &v115, v123, 16);
        v35 = v42;
      }
      while (v42);
LABEL_57:

      a1 = v107;
      v21 = v105;
LABEL_66:
      if (*(_BYTE *)(a1 + 34))
      {
        v57 = *(_DWORD *)(v28 + 24) - 8194;
        v16 = v57 > 0x22;
        v58 = (1 << v57) & 0x47A877F9BLL;
        if (!v16 && v58 != 0)
        {
          v106 = v21;
          v60 = sub_1003C8CF4(a1, v28);
          v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
          v62 = v61;
          if (v61 && (!*(_QWORD *)(a1 + 24) || *(_BYTE *)(a1 + 16)))
          {
            v113 = 0u;
            v114 = 0u;
            v111 = 0u;
            v112 = 0u;
            v63 = v61;
            v64 = objc_msgSend(v63, "countByEnumeratingWithState:objects:count:", &v111, v122, 16);
            if (v64)
            {
              v65 = *(_QWORD *)v112;
              do
              {
                for (i = 0; i != v64; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v112 != v65)
                    objc_enumerationMutation(v63);
                  -[NSMutableOrderedSet addObject:](v4, "addObject:", *(_QWORD *)(*((_QWORD *)&v111 + 1) + 8 * (_QWORD)i), v103);
                }
                v64 = objc_msgSend(v63, "countByEnumeratingWithState:objects:count:", &v111, v122, 16);
              }
              while (v64);
            }

            a1 = v107;
          }

          v21 = v106;
        }
      }
      sub_1003C69C4(v28);
      ++v104;
LABEL_84:
      if (++v21 == *(uint64_t **)(a1 + 48))
      {
LABEL_104:
        v78 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        {
          v79 = -[NSMutableOrderedSet count](v4, "count");
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = v79;
          v125 = 1024;
          v126 = v104;
          _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "finishSession: Sending %lu file(s) from %d session(s)", buf, 0x12u);
        }
        if (*(_QWORD *)(a1 + 24))
        {
          v80 = qword_1009997D8;
          if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
          {
            if (*(_BYTE *)(a1 + 16))
              v81 = "Diagnostic Extension";
            else
              v81 = "Sysdiagnose";
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v81;
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "finishSession: %{public}s - Accessory Log Retrieval Completed", buf, 0xCu);
          }
          if ((v108 & 1) != 0)
            v82 = v4;
          else
            v82 = 0;
          sub_1003CCF80(a1, v82);
          goto LABEL_116;
        }
        if ((v108 & 1) != 0)
        {
          if (*(_BYTE *)(a1 + 33))
          {
            v83 = qword_1009997D8;
            v19 = 0;
            if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "finishSession: Force send complete", buf, 2u);
              goto LABEL_116;
            }
          }
          else
          {
            v91 = sub_10003BE44();
            if ((((*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 328))(v91) & 1) != 0
               || (v92 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v92 + 384))(v92) & 1) != 0)
               || (v93 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v93 + 424))(v93)))
              && (v94 = sub_100027F68(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94)))
            {
              v95 = *(unsigned __int8 *)(a1 + 34);
              v96 = qword_1009997D8;
              v97 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
              if (v95)
              {
                if (v97)
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "finishSession: Retrieved crash log, opening Tap-to-Radar", buf, 2u);
                }
                v98 = sub_100069D20();
                (*(void (**)(uint64_t, NSMutableOrderedSet *, uint64_t, _QWORD))(*(_QWORD *)v98 + 168))(v98, v4, 1, *(unsigned int *)(v27 + 24));
              }
              else
              {
                if (v97)
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "finishSession: Internal Settings - Accessory Log Retrieval Completed", buf, 2u);
                }
                v99 = sub_100069D20();
                v100 = *(unsigned int *)(v27 + 24);
                v101 = *(id *)v27;
                v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithString:](NSString, "stringWithString:", v101));
                (*(void (**)(uint64_t, NSMutableOrderedSet *, _QWORD, uint64_t, void *))(*(_QWORD *)v99 + 152))(v99, v4, 0, v100, v102);

              }
LABEL_116:
              v19 = 0;
            }
            else
            {
              if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                sub_1006E8D54();
              v19 = 2;
            }
          }
        }
        else
        {
          v84 = qword_1009997D8;
          if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "Warning: finishSession: No real log files to send", buf, 2u);
          }
          v19 = 1;
        }
        if (!*(_BYTE *)(a1 + 34))
        {
          v87 = sub_10003BE44();
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 328))(v87) & 1) != 0
            || (v88 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v88 + 424))(v88)))
          {
            v89 = sub_100027F68();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89))
            {
              v90 = sub_100027F68();
              sub_100091AE8(buf, "AccessoryLogging");
              sub_100091AE8(v109, "StoredLogsRetrieved");
              (*(void (**)(uint64_t, _BYTE *, void **, _QWORD))(*(_QWORD *)v90 + 80))(v90, buf, v109, v108 & 1);
              if (v110 < 0)
                operator delete(v109[0]);
              if (SHIBYTE(v128) < 0)
                operator delete(*(void **)buf);
            }
          }
        }
        v85 = (uint64_t *)__p;
        if (__p != v120)
        {
          do
          {
            if (qword_100977A88 != -1)
              dispatch_once(&qword_100977A88, &stru_10092C770);
            if (!sub_100287F54((uint64_t)off_100977A80, *v85))
              sub_1003C3240(a1, *v85);
            ++v85;
          }
          while (v85 != (uint64_t *)v120);
        }
        sub_1003BF784(a1);
LABEL_132:
        if (__p)
        {
          v120 = (char *)__p;
          operator delete(__p);
        }
        goto LABEL_134;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
  {
    sub_1006E8D28();
    v19 = 1;
    goto LABEL_132;
  }
  v19 = 1;
LABEL_134:

  return v19;
}

void sub_1003C2058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46)
{
  void *v46;
  void *v47;
  void *v48;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void *sub_1003C2140@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return memcpy(a2, (const void *)(a1 + 150), 0x101uLL);
}

void sub_1003C2150(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v6;
  _BYTE v7[14];
  uint8_t buf[4];
  int v9;
  __int16 v10;
  unsigned int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  unsigned int v21;

  *(_QWORD *)v7 = a2;
  *(_DWORD *)&v7[8] = a3;
  *(_WORD *)&v7[12] = WORD2(a3);
  v6 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67110656;
    v9 = a2 & 1;
    v10 = 1024;
    v11 = (a2 >> 8) & 1;
    v12 = 1024;
    v13 = (unsigned __int16)(a2 >> 24);
    v14 = 1024;
    v15 = BYTE5(a2);
    v16 = 1024;
    v17 = *(_DWORD *)&v7[6];
    v18 = 1024;
    v19 = a3 >> 16;
    v20 = 1024;
    v21 = WORD1(a2) & 1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setW1Logging: isTimeStampPeriodicallyEnabled = %d, isDisableDiagnosticsPeriodicallyEnabled = %d, module = %d, level = %d, log_interval = %d, power_logging_interval = %d, isCrashLoggingDisabled = %d", buf, 0x2Cu);
  }
  *(_QWORD *)(a1 + 136) = *(_QWORD *)v7;
  *(_QWORD *)(a1 + 142) = *(_QWORD *)&v7[6];
}

void sub_1003C2270(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;

  v4 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109888;
    v5[1] = BYTE1(a2);
    v6 = 1024;
    v7 = BYTE4(a2);
    v8 = 1024;
    v9 = BYTE2(a2);
    v10 = 1024;
    v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setAccessoryLogging: module = %d, level = %d, submodule = %d, device = %d", (uint8_t *)v5, 0x1Au);
  }
  *(_WORD *)(a1 + 433) = a2;
  *(_BYTE *)(a1 + 435) = BYTE2(a2);
  *(_BYTE *)(a1 + 436) = BYTE3(a2);
  *(_BYTE *)(a1 + 437) = BYTE4(a2);
}

uint64_t sub_1003C2368()
{
  sub_1003C2380();
  return 0;
}

void sub_1003C2380()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Post an event to trigger AWD Diagnostics ", v1, 2u);
  }
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_10092C710);
  if ((*(unsigned int (**)(void *))(*(_QWORD *)off_10097AB20 + 32))(off_10097AB20))
  {
    if (qword_10097AB28 != -1)
      dispatch_once(&qword_10097AB28, &stru_10092C710);
    sub_10048D538((uint64_t)off_10097AB20, &stru_10092C6D0);
  }
}

uint64_t sub_1003C2458(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void **v10;
  uint64_t v11;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;

  if (!*(_BYTE *)(a1 + 448))
    return 111;
  v7 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7)
    && (v8 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 328))(v8)))
  {
    v9 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F6EC(a2, (uint64_t)__p);
      v10 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v16 = v10;
      v17 = 1024;
      v18 = a3;
      v19 = 1024;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Send RequestPeriodically to device \"%s\", type = %d, interval = %d", buf, 0x18u);
      if (v14 < 0)
        operator delete(__p[0]);
    }
    buf[0] = 0;
    sub_100043758(buf);
    v11 = sub_1000E1864((unsigned __int8 *)(a2 + 128), a3, a4);
    sub_10004339C(buf);
    if ((_DWORD)v11 && os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E8D80();
    sub_100043728(buf);
  }
  else
  {
    v11 = 102;
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10092C6F0);
  return sub_1004A35C0((uint64_t)off_100977A50, v11, 10000);
}

void sub_1003C2624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003C2640(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  void **v14;
  __int16 v15;
  unsigned int v16;

  if (!*(_BYTE *)(a1 + 448))
    return 111;
  v5 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5)
    && (v6 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 328))(v6)))
  {
    v7 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F6EC(a2, (uint64_t)__p);
      v8 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v14 = v8;
      v15 = 1024;
      v16 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Send CancelRequestPeriodically to device \"%s\", type = %d", buf, 0x12u);
      if (v12 < 0)
        operator delete(__p[0]);
    }
    LOBYTE(__p[0]) = 0;
    sub_100043758(__p);
    v9 = sub_1000E1B80((unsigned __int8 *)(a2 + 128), a3);
    sub_10004339C(__p);
    if ((_DWORD)v9 && os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E8DE0();
    sub_100043728(__p);
  }
  else
  {
    v9 = 102;
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10092C6F0);
  return sub_1004A35C0((uint64_t)off_100977A50, v9, 10000);
}

void sub_1003C27FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003C2818(uint64_t a1, uint64_t a2, char a3)
{
  *(_QWORD *)(a1 + 24) = a2;
  *(_BYTE *)(a1 + 16) = a3;
  sub_1003C2838();
  return 0;
}

void sub_1003C2838()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "TraceLogCollection - syncLogOnDemand", v1, 2u);
  }
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_10092C710);
  if ((*(unsigned int (**)(void *))(*(_QWORD *)off_10097AB20 + 32))(off_10097AB20))
  {
    if (qword_10097AB28 != -1)
      dispatch_once(&qword_10097AB28, &stru_10092C710);
    sub_10048D538((uint64_t)off_10097AB20, &stru_10092C688);
  }
}

void sub_1003C2910(id a1)
{
  if (qword_100978180 != -1)
    dispatch_once(&qword_100978180, &stru_10092C730);
  sub_1003C2950(qword_100978178);
}

uint64_t sub_1003C2950(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  __int16 v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  _QWORD v25[5];
  char v26;
  int v27;
  _QWORD v28[2];
  uint8_t buf[4];
  id v30;
  __int16 v31;
  int v32;

  v2 = sub_100027F68();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 160))(v2) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 448))
    {
      if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 40))
      {
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
          sub_1006E8E6C();
        return 312;
      }
      else if (*(_BYTE *)(a1 + 32))
      {
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
          sub_1006E8E98();
        return 10;
      }
      else
      {
        v3 = sub_1003C0728(a1, 0, 5, 2u);
        v4 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v30) = v3;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "syncLogOnDemandEvent: sendLogCommand returned %d", buf, 8u);
        }
        v5 = sub_100027F68();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5))
        {
          sub_1003C0FBC(a1);
          v28[0] = 0;
          v28[1] = 0;
          sub_10003415C((uint64_t)v28, a1 + 64);
          v7 = *(_QWORD *)(a1 + 40);
          v6 = *(_QWORD *)(a1 + 48);
          do
          {
            v8 = v6;
            if (v6 == v7)
            {
              v16 = 0;
              goto LABEL_37;
            }
            v6 -= 8;
            v9 = *(_QWORD *)(v8 - 8);
            v10 = *(_DWORD *)(v9 + 24) - 8194;
            v11 = v10 > 0xE;
            v12 = (1 << v10) & 0x409B;
          }
          while (v11 || v12 == 0);
          if (qword_1009778E8 != -1)
            dispatch_once(&qword_1009778E8, &stru_10092C750);
          *(_DWORD *)buf = *(_DWORD *)(v9 + 16);
          LOWORD(v30) = *(_WORD *)(v9 + 20);
          v14 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
          v27 = 3;
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_10092C770);
          sub_100283884((uint64_t)off_100977A80, v14, &v27);
          v15 = v27;
          if ((v27 - 3) <= 0xFFFFFFFD)
          {
            v15 = 2;
            v27 = 2;
          }
          *(_BYTE *)(a1 + 416) = v15;
          *(_WORD *)(a1 + 407) = 1;
          *(_DWORD *)(a1 + 418) = 0x10000;
          LOBYTE(dword_10097AF60) = v15;
          v26 = 0;
          sub_100043758(&v26);
          v16 = sub_1000E2430((unsigned __int8 *)(v9 + 16), 4u, 5u, (unsigned __int8 *)&dword_10097AF60);
          v17 = qword_1009997D8;
          if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
          {
            v18 = *(id *)(v9 + 8);
            *(_DWORD *)buf = 138543618;
            v30 = v18;
            v31 = 1024;
            v32 = v16;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "syncLogOnDemandEvent: Requested trace log from W1 device %{public}@, Left Bud (result = %d)", buf, 0x12u);

          }
          dword_100992610 = dword_10097AF60;
          byte_100992614 = byte_10097AF64;
          byte_100992619 = 5;
          v19 = *(_WORD *)(v9 + 20);
          *(_DWORD *)(a1 + 409) = *(_DWORD *)(v9 + 16);
          *(_WORD *)(a1 + 413) = v19;
          *(_BYTE *)(a1 + 415) = 0;
          sub_10004339C(&v26);
          if (!(_DWORD)v16)
          {
            *(_BYTE *)(v9 + 40) = 8;
            *(_BYTE *)(a1 + 32) = 1;
          }
          sub_100043728(&v26);
LABEL_37:
          if (*(_BYTE *)(a1 + 32) && *(_QWORD *)(a1 + 24))
          {
            v20 = qword_1009997D8;
            if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "syncLogOnDemandEvent: Starting overall timer", buf, 2u);
            }
            v25[0] = _NSConcreteStackBlock;
            v25[1] = 3221225472;
            v25[2] = sub_1003C2EC0;
            v25[3] = &unk_100921208;
            v25[4] = a1;
            v21 = objc_claimAutoreleasedReturnValue(+[NSTimer timerWithTimeInterval:repeats:block:](NSTimer, "timerWithTimeInterval:repeats:block:", 0, v25, 415.0));
            v22 = *(void **)(a1 + 128);
            *(_QWORD *)(a1 + 128) = v21;

            v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](NSRunLoop, "mainRunLoop"));
            objc_msgSend(v23, "addTimer:forMode:", *(_QWORD *)(a1 + 128), NSDefaultRunLoopMode);

          }
          if ((_DWORD)v3 && v8 != v7)
          {
            if (qword_100977A58 != -1)
              dispatch_once(&qword_100977A58, &stru_10092C6F0);
            v3 = sub_1004A35C0((uint64_t)off_100977A50, v16, 10000);
          }
          sub_100034234((uint64_t)v28);
        }
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006E8E40();
      return 111;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E8EC4();
    return 2;
  }
  return v3;
}

void sub_1003C2E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003C2EB8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

void sub_1003C2EC0(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  unsigned int v11;
  int v12;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  id v24;
  char *v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD v28[2];

  v24 = a2;
  v3 = *(_QWORD *)(a1 + 32);
  v28[0] = 0;
  v28[1] = 0;
  sub_10003415C((uint64_t)v28, v3 + 64);
  v25 = 0;
  v26 = 0;
  v27 = 0;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006E8EF0(v3);
  v5 = *(uint64_t **)(v3 + 40);
  v4 = *(uint64_t **)(v3 + 48);
  if (v5 != v4)
  {
    while (1)
    {
      v6 = *v5;
      v7 = *(_DWORD *)(*v5 + 24) - 8194;
      v8 = v7 > 0xE;
      v9 = (1 << v7) & 0x409B;
      if (v8 || v9 == 0)
        break;
      v11 = *(unsigned __int8 *)(v6 + 40);
      if (v11 != 7)
        goto LABEL_11;
LABEL_32:
      if (++v5 == v4)
        goto LABEL_33;
    }
    v11 = *(unsigned __int8 *)(v6 + 40);
LABEL_11:
    v8 = v11 > 8;
    v12 = (1 << v11) & 0x182;
    if (!v8 && v12 != 0)
    {
      if (v26 >= v27)
      {
        v15 = ((char *)v26 - v25) >> 3;
        if ((unint64_t)(v15 + 1) >> 61)
          abort();
        v16 = ((char *)v27 - v25) >> 2;
        if (v16 <= v15 + 1)
          v16 = v15 + 1;
        if ((unint64_t)((char *)v27 - v25) >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)sub_10007ABA0((uint64_t)&v27, v17);
        else
          v18 = 0;
        v19 = &v18[8 * v15];
        *(_QWORD *)v19 = v6;
        v14 = (uint64_t *)(v19 + 8);
        v20 = v26;
        if (v26 != (uint64_t *)v25)
        {
          do
          {
            v21 = *--v20;
            *((_QWORD *)v19 - 1) = v21;
            v19 -= 8;
          }
          while (v20 != (uint64_t *)v25);
          v20 = (uint64_t *)v25;
        }
        v25 = v19;
        v27 = (uint64_t *)&v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v26 = v6;
        v14 = v26 + 1;
      }
      v26 = v14;
      v4 = *(uint64_t **)(v3 + 48);
    }
    goto LABEL_32;
  }
LABEL_33:
  v22 = (uint64_t *)v25;
  if (v25 != (char *)v26)
  {
    do
    {
      v23 = *v22;
      *(_BYTE *)(v23 + 40) = 4;
      sub_1003C1470(v3, v23);
      ++v22;
    }
    while (v22 != v26);
    v22 = (uint64_t *)v25;
  }
  if (v22)
    operator delete(v22);
  sub_100034234((uint64_t)v28);

}

void sub_1003C30D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1003C3110(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  NSObject *v7;
  uint8_t v8[16];

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092C770);
  v4 = sub_100285C20((uint64_t)off_100977A80);
  if (*(_QWORD *)(a1 + 24) && !*(_BYTE *)(a1 + 16))
  {
    v6 = v4;
    *(_BYTE *)(a1 + 16) = 1;
    v7 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "purgeCallback: Returning zero files to sysdiagnose", v8, 2u);
    }
    return sub_10028E798(v6, a2, 64);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E8F9C();
    return 12;
  }
}

BOOL sub_1003C3220(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) && *(_BYTE *)(a1 + 16) == 0;
}

uint64_t sub_1003C3240(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  NSObject *v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  _QWORD v18[2];
  uint8_t buf[4];
  id v20;

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 64);
  v4 = sub_1003C0344(a1, a2);
  v5 = v4;
  v6 = *(char **)(a1 + 48);
  v7 = *(char **)(a1 + 40);
  if (v7 != v6)
  {
    while (*(_QWORD *)v7 != v4)
    {
      v7 += 8;
      if (v7 == v6)
      {
        v7 = *(char **)(a1 + 48);
        break;
      }
    }
  }
  if (v7 == v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E8FC8();
    v14 = 312;
  }
  else
  {
    v8 = *(unsigned __int8 *)(v4 + 40);
    v9 = v8 > 8;
    v10 = (1 << v8) & 0x182;
    if (v9 || v10 == 0)
    {
      v15 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(id *)(v5 + 8);
        *(_DWORD *)buf = 138543362;
        v20 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "removeAccessoryLoggingSession: Removing %{public}@", buf, 0xCu);

        v6 = *(char **)(a1 + 48);
      }
      if (v6 != v7 + 8)
        memmove(v7, v7 + 8, v6 - (v7 + 8));
      *(_QWORD *)(a1 + 48) = v6 - 8;
      sub_1003CD3E0(v5);
      operator delete();
    }
    *(_BYTE *)(v4 + 40) = 3;
    v12 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(id *)(v5 + 8);
      *(_DWORD *)buf = 138543362;
      v20 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Warning: removeAccessoryLoggingSession: Disconnected from %{public}@ while actively logging", buf, 0xCu);

    }
    v14 = sub_1003C1470(a1, v5);
  }
  sub_100034234((uint64_t)v18);
  return v14;
}

void sub_1003C3478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003C3494(uint64_t a1, uint64_t a2)
{
  if (sub_10044936C(a2))
    return 1;
  else
    return sub_1003C0650();
}

uint64_t sub_1003C34BC(uint64_t a1, unsigned int *a2, int a3, unsigned int a4, int *a5)
{
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v32;
  _QWORD v33[2];
  uint8_t buf[4];
  id v35;
  __int16 v36;
  int v37;
  __int16 v38;
  unsigned int v39;
  __int16 v40;
  int v41;

  v33[0] = 0;
  v33[1] = 0;
  sub_10003415C((uint64_t)v33, a1 + 64);
  v10 = sub_1003C0344(a1, (uint64_t)a2);
  v11 = qword_1009997D8;
  if (v10)
  {
    v12 = v10;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(id *)(v12 + 8);
      v14 = *(unsigned __int8 *)(v12 + 40);
      *(_DWORD *)buf = 138544130;
      v35 = v13;
      v36 = 1024;
      v37 = a3;
      v38 = 1024;
      v39 = a4;
      v40 = 1024;
      v41 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "recvLoggingHandler: %{public}@, type: %u, len: %u, status: %d", buf, 0x1Eu);

    }
    if (a3 > 31)
    {
      if (a3 == 32)
      {
        v15 = sub_1003C3DAC(a1, (uint64_t)a2, a4, a5);
        goto LABEL_22;
      }
      if (a3 != 128)
      {
        if (a3 == 1024)
        {
          v15 = sub_1003C52B0(a1, a2, a4, (unsigned __int8 *)a5);
LABEL_22:
          v24 = v15;
          goto LABEL_27;
        }
        goto LABEL_24;
      }
      v27 = sub_100027F68();
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      if ((_DWORD)v28)
      {
        v15 = sub_1003C395C(v28, v29, 0, (uint64_t)a5);
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    if (a3 == 2)
    {
      v30 = sub_100027F68();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30))
      {
        v15 = sub_1003C37A0(a1, (uint64_t)a2, a4, a5);
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    if (a3 != 4)
    {
LABEL_24:
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006E902C();
      v24 = 3;
      goto LABEL_27;
    }
    v25 = sub_100027F68();
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25))
    {
LABEL_23:
      v24 = 2;
      goto LABEL_27;
    }
    v26 = *(unsigned __int8 *)(v12 + 40);
    if ((v26 - 7) < 2)
    {
      v15 = sub_1003C491C(a1, (uint64_t)a2, a4, (unsigned __int8 *)a5);
      goto LABEL_22;
    }
    if (v26 == 6)
    {
      v15 = sub_1003C4644(a1, (unsigned __int8 *)a2, 0, (unsigned __int8 *)a5);
      goto LABEL_22;
    }
    v32 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E90A4(v12, v32);
    v24 = 1;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    {
      v23 = sub_10025304C((uint64_t)a2, v16, v17, v18, v19, v20, v21, v22);
      sub_1006E8FF4(v23, (uint64_t)buf);
    }
    v24 = 8;
  }
LABEL_27:
  sub_100034234((uint64_t)v33);
  return v24;
}

void sub_1003C3780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003C37A0(uint64_t a1, uint64_t a2, __int16 a3, const void *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  FILE *v19;
  FILE *v20;
  NSObject *v21;
  __darwin_suseconds_t tv_usec;
  int __ptr;
  timeval v24;
  size_t __nitems;

  LOWORD(__nitems) = a3;
  v24.tv_sec = 0;
  *(_QWORD *)&v24.tv_usec = 0;
  gettimeofday(&v24, 0);
  tv_usec = v24.tv_usec;
  __ptr = v24.tv_sec;
  v7 = sub_1003C0344(a1, a2);
  if (v7)
  {
    v8 = v7;
    v9 = *(_DWORD *)(v7 + 24);
    if (v9 == 8194)
    {
      v10 = (const char *)&unk_100992400;
LABEL_9:
      v19 = fopen(v10, "ab");
      if (v19)
      {
        v20 = v19;
        fwrite((const void *)(a1 + 422), 1uLL, 1uLL, v19);
        fwrite(&__ptr, 1uLL, 4uLL, v20);
        fwrite(&tv_usec, 1uLL, 4uLL, v20);
        fwrite(&__nitems, 1uLL, 2uLL, v20);
        fwrite(a4, 1uLL, (unsigned __int16)__nitems, v20);
        fclose(v20);
        return 0;
      }
      else
      {
        v21 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
          sub_1006E9204(v21);
        return 1;
      }
    }
    if (v9 == 8201)
    {
      v10 = (const char *)&unk_100992500;
      goto LABEL_9;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E9188(v8);
    return 2;
  }
  else
  {
    v11 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E9120(a2, v11, v12, v13, v14, v15, v16, v17);
    return 8;
  }
}

uint64_t sub_1003C395C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  FILE *v5;
  FILE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t j;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t k;
  uint64_t m;
  uint64_t v22;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  NSObject *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v34;

  v5 = fopen(aPrivateVarMobi_15, "w");
  if (v5)
  {
    v6 = v5;
    v7 = 0;
    v8 = a4 + 20;
    v9 = a4 + 28;
    v34 = a4;
    v10 = a4 + 21;
    v11 = v8;
    do
    {
      if (*(_BYTE *)(v8 + 40 * v7))
      {
LABEL_4:
        fwrite("Source Device : Addr -> ", 0x18uLL, 1uLL, v6);
        for (i = 0; i != 6; ++i)
          fprintf(v6, "%02x", *(unsigned __int8 *)(v11 + i));
        fwrite(", Link Key -> ", 0xEuLL, 1uLL, v6);
        for (j = 0; j != 16; ++j)
          fprintf(v6, "%02x", *(unsigned __int8 *)(v9 + j));
        fputc(10, v6);
      }
      else
      {
        v14 = 0;
        while (v14 != 5)
        {
          if (*(unsigned __int8 *)(v10 + v14++))
          {
            if ((unint64_t)(v14 - 1) <= 4)
              goto LABEL_4;
            break;
          }
        }
      }
      ++v7;
      v10 += 40;
      v11 += 40;
      v9 += 40;
    }
    while (v7 != 15);
    v16 = 0;
    v17 = v34 + 636;
    v18 = v34 + 621;
    v19 = v34 + 620;
    do
    {
      if (*(_BYTE *)(v34 + 620 + 36 * v16))
      {
LABEL_17:
        fwrite("Magic Device : Hint -> ", 0x17uLL, 1uLL, v6);
        for (k = 0; k != 16; ++k)
          fprintf(v6, "%02x", *(unsigned __int8 *)(v19 + k));
        fwrite(", Key -> ", 9uLL, 1uLL, v6);
        for (m = 0; m != 16; ++m)
          fprintf(v6, "%02x", *(unsigned __int8 *)(v17 + m));
        fprintf(v6, ", Ratchet -> %d", *(_DWORD *)(v34 + 652 + 36 * v16));
        fputc(10, v6);
      }
      else
      {
        v22 = 0;
        while (v22 != 15)
        {
          if (*(unsigned __int8 *)(v18 + v22++))
          {
            if ((unint64_t)(v22 - 1) <= 0xE)
              goto LABEL_17;
            break;
          }
        }
      }
      ++v16;
      v18 += 36;
      v19 += 36;
      v17 += 36;
    }
    while (v16 != 5);
    if (*(_BYTE *)(v34 + 800))
    {
LABEL_30:
      fwrite("Magic IRK -> ", 0xDuLL, 1uLL, v6);
      for (n = 0; n != 16; ++n)
        fprintf(v6, "%02x", *(unsigned __int8 *)(v34 + 800 + n));
      fwrite(", Magic Key -> ", 0xFuLL, 1uLL, v6);
      for (ii = 0; ii != 16; ++ii)
        fprintf(v6, "%02x", *(unsigned __int8 *)(v34 + 816 + ii));
      fputc(10, v6);
    }
    else
    {
      v30 = 0;
      while (v30 != 15)
      {
        if (*(unsigned __int8 *)(v34 + 801 + v30++))
        {
          if ((unint64_t)(v30 - 1) <= 0xE)
            goto LABEL_30;
          break;
        }
      }
    }
    if (*(_BYTE *)(v34 + 832))
    {
LABEL_36:
      fwrite("Couple Addr -> ", 0xFuLL, 1uLL, v6);
      for (jj = 0; jj != 6; ++jj)
        fprintf(v6, "%02x", *(unsigned __int8 *)(v34 + 832 + jj));
      fwrite(", Link Key -> ", 0xEuLL, 1uLL, v6);
      for (kk = 0; kk != 16; ++kk)
        fprintf(v6, "%02x", *(unsigned __int8 *)(v34 + 840 + kk));
      fputc(10, v6);
    }
    else
    {
      v32 = 0;
      while (v32 != 5)
      {
        if (*(unsigned __int8 *)(v34 + 833 + v32++))
        {
          if ((unint64_t)(v32 - 1) <= 4)
            goto LABEL_36;
          break;
        }
      }
    }
    fclose(v6);
    return 0;
  }
  else
  {
    v29 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E927C(v29);
    return 1;
  }
}

uint64_t sub_1003C3DAC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  id v22;
  NSObject *v23;
  size_t v25;
  FILE *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  int v40;
  uint64_t v41;
  const char *v42;
  NSObject *v43;
  NSObject *v44;
  id v45;
  char v46;
  uint64_t v47;
  int v48;
  char *v49;
  int v50;
  int v51;
  unsigned int v52;
  NSObject *v53;
  id v54;
  int v55;
  uint8_t v56;
  uint8_t v57;
  uint64_t v58;
  int v59;
  __int16 v60;
  char v61;
  char v62;
  uint64_t v63;
  NSObject *v64;
  id v65;
  int v66;
  id v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[2];
  _DWORD *v72;
  uint64_t v73;
  _BYTE v74[31];
  uint64_t v75;
  int v76;
  __int16 v77;
  char v78;
  char v79;
  uint64_t v80;
  char v81;
  _DWORD v82[2];
  _BYTE v83[31];
  uint64_t v84;
  int v85;
  __int16 v86;
  char v87;
  char v88;
  uint64_t v89;
  char v90;
  __int16 v91;
  char v92;
  uint64_t v93;
  int v94;
  uint8_t v95[24];
  __int16 v96;
  unsigned int v97;
  _DWORD v98[3];
  __int16 v99;
  const char *v100;
  __int16 v101;
  uint8_t buf[391];
  __int16 v103;
  int v104;
  uint64_t v105;
  char v106;
  _OWORD v107[2];

  memset(v107, 0, 31);
  v93 = 0;
  v94 = 0;
  v91 = 0;
  v92 = 0;
  v105 = 0;
  v106 = 0;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092C750);
  *(_DWORD *)buf = *(_DWORD *)a2;
  *(_WORD *)&buf[4] = *(_WORD *)(a2 + 4);
  v70 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v8 = sub_1003C0344(a1, a2);
  if (!v8)
  {
    v13 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E92F4(a2, v13, v14, v15, v16, v17, v18, v19);
    return 8;
  }
  v9 = v8;
  if (!a4)
  {
LABEL_22:
    v23 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    {
      v67 = *(id *)(v9 + 8);
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)&buf[4] = v67;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a4;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = a3;
      _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "recvW1AppDiagnosticsHandler: %{public}@ sent invalid APP Diag data : data->%p, len->%d", buf, 0x1Cu);

    }
    return 3;
  }
  if (a3 > 453)
  {
    if (a3 != 454)
    {
      if (a3 == 904)
      {
        v11 = 0;
        v12 = 2;
        v10 = 1;
        v69 = 1;
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    v69 = 0;
    v11 = 0;
    v10 = 1;
LABEL_17:
    v12 = 1;
    goto LABEL_19;
  }
  if (a3 == 64)
  {
    v10 = 0;
    v11 = 0;
    v69 = 0x100000000;
    goto LABEL_17;
  }
  if (a3 == 128)
  {
    v10 = 0;
    v11 = 0;
    v12 = 2;
    v69 = 0x100000001;
    goto LABEL_19;
  }
LABEL_18:
  v10 = 0;
  v12 = 0;
  v69 = 0x100000000;
  v11 = 1;
LABEL_19:
  v68 = *(unsigned __int16 *)(v70 + 978);
  v21 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    v22 = *(id *)(v9 + 8);
    *(_DWORD *)buf = 138543874;
    *(_QWORD *)&buf[4] = v22;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v12;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v10;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "recvW1AppDiagnosticsHandler: DiagInfo received from %{public}@ %d bud, AWD = %d", buf, 0x18u);

  }
  if (v11)
    goto LABEL_22;
  v25 = (unint64_t)v12 << 6;
  memcpy((void *)(a1 + 150), a4, v25);
  *(_BYTE *)(a1 + 406) = (_BYTE)v12 << 6;
  v26 = fopen(aPrivateVarMobi_14, "w");
  if (!v26)
  {
    v43 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E9364(v43);
    v20 = 1;
    goto LABEL_44;
  }
  v27 = *a4;
  v28 = a4[1];
  v107[0] = *(_OWORD *)(a4 + 2);
  *(_OWORD *)((char *)v107 + 15) = *(_OWORD *)((char *)a4 + 23);
  v93 = *(_QWORD *)((char *)a4 + 39);
  v94 = *(int *)((char *)a4 + 47);
  v91 = *(_WORD *)((char *)a4 + 51);
  v92 = *((_BYTE *)a4 + 53);
  v29 = *((unsigned __int8 *)a4 + 54);
  v30 = *(_QWORD *)((char *)a4 + 55);
  v106 = *((_BYTE *)a4 + 63);
  v105 = v30;
  fwrite("App Diagnostics Info Collected from Accessory Device\n\n", 0x36uLL, 1uLL, v26);
  sub_10043F6EC(v70, (uint64_t)buf);
  if ((buf[23] & 0x80u) == 0)
    v31 = buf;
  else
    v31 = *(uint8_t **)buf;
  fprintf(v26, "DeviceName : %s\n", (const char *)v31);
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  v39 = (const char *)sub_10025304C(a2, v32, v33, v34, v35, v36, v37, v38);
  fprintf(v26, "Device Bluetooth Address : %s\n", v39);
  v40 = fwrite("\n======Primary Device======\n", 0x1CuLL, 1uLL, v26);
  v82[0] = v27;
  v82[1] = v28;
  *(_OWORD *)v83 = v107[0];
  *(_OWORD *)&v83[15] = *(_OWORD *)((char *)v107 + 15);
  v84 = v93;
  v85 = v94;
  v86 = v91;
  v87 = v92;
  v88 = v29;
  v90 = v106;
  v89 = v105;
  sub_1003C5C28(v40, v26, (uint64_t)v82);
  memset(buf, 0, 32);
  sub_10047D35C((uint64_t)buf, 1, v70);
  *(_DWORD *)&buf[24] = v27;
  *(_DWORD *)&buf[28] = v28;
  *(_WORD *)&buf[16] = WORD6(v107[1]);
  buf[18] = BYTE14(v107[1]);
  *(_WORD *)&buf[19] = *(_WORD *)((char *)&v94 + 1);
  buf[21] = HIBYTE(v94);
  v41 = sub_100065478();
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v41 + 56))(v41, buf);
  if (v29 == 9)
  {
    v42 = "dev-fused";
LABEL_39:
    v44 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      v45 = *(id *)(v9 + 8);
      v98[0] = 138543618;
      *(_QWORD *)&v98[1] = v45;
      v99 = 2082;
      v100 = v42;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "recvW1AppDiagnosticsHandler: %{public}@ fused status : %{public}s", (uint8_t *)v98, 0x16u);

    }
    goto LABEL_41;
  }
  if (v29 == 1)
  {
    v42 = "prod-fused";
    goto LABEL_39;
  }
LABEL_41:
  if ((_DWORD)v69)
  {
    v107[0] = *(_OWORD *)(a4 + 18);
    *(_OWORD *)((char *)v107 + 15) = *(_OWORD *)((char *)a4 + 87);
    v93 = *(_QWORD *)((char *)a4 + 103);
    v94 = *(int *)((char *)a4 + 111);
    v91 = *(_WORD *)((char *)a4 + 115);
    v92 = *((_BYTE *)a4 + 117);
    v46 = *((_BYTE *)a4 + 118);
    v106 = *((_BYTE *)a4 + 127);
    v105 = *(_QWORD *)((char *)a4 + 119);
    v47 = *((_QWORD *)a4 + 8);
    v48 = fwrite("\n======Secondary Device======\n", 0x1EuLL, 1uLL, v26);
    v73 = v47;
    *(_OWORD *)v74 = v107[0];
    *(_OWORD *)&v74[15] = *(_OWORD *)((char *)v107 + 15);
    v75 = v93;
    v76 = v94;
    v77 = v91;
    v78 = v92;
    v79 = v46;
    v81 = v106;
    v80 = v105;
    sub_1003C5C28(v48, v26, (uint64_t)&v73);
  }
  fclose(v26);
  v20 = 0;
LABEL_44:
  if ((v69 & 0x100000000) != 0)
    return v20;
  v49 = (char *)a4 + v25;
  bzero(buf, 0x29AuLL);
  bzero(v98, 0x29AuLL);
  sub_1003C5E58(v50, (char *)buf, (uint64_t)a4 + v25 + 4);
  v51 = *((unsigned __int8 *)a4 + v25);
  buf[1] = *((_BYTE *)a4 + v25);
  if (v68)
    v104 |= v68;
  v52 = *((unsigned __int16 *)v49 + 1);
  *(_WORD *)&buf[3] = *((_WORD *)v49 + 1);
  v53 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    v54 = *(id *)(v9 + 8);
    v55 = v49[1];
    *(_DWORD *)v95 = 138544130;
    *(_QWORD *)&v95[4] = v54;
    *(_WORD *)&v95[12] = 1024;
    *(_DWORD *)&v95[14] = v51;
    *(_WORD *)&v95[18] = 1024;
    *(_DWORD *)&v95[20] = v55;
    v96 = 1024;
    v97 = v52;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "recvW1AppDiagnosticsHandler: Received %{public}@ AWD: awdVersion=%d, data[1]=%d, awdLength=%d", v95, 0x1Eu);

  }
  if (v52 == 386)
  {
    v56 = v49[1];
    v57 = v56 != 0;
  }
  else
  {
    if (v52 < 0x182 || (v57 = v49[1]) == 0)
    {
      v64 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      {
        v65 = *(id *)(v9 + 8);
        v66 = v49[1];
        *(_DWORD *)v95 = 138543874;
        *(_QWORD *)&v95[4] = v65;
        *(_WORD *)&v95[12] = 1024;
        *(_DWORD *)&v95[14] = v52;
        *(_WORD *)&v95[18] = 1024;
        *(_DWORD *)&v95[20] = v66;
        _os_log_error_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "recvW1AppDiagnosticsHandler: %{public}@ sent invalid AWD header awdLength=%d data[1]=%d", v95, 0x18u);

      }
      return 3;
    }
    v56 = 1;
  }
  buf[0] = v57;
  buf[2] = v56;
  v103 = *(_DWORD *)(v9 + 24);
  memset(v95, 0, sizeof(v95));
  sub_10047D35C((uint64_t)v95, 5, v70);
  *(_QWORD *)&v95[16] = buf;
  v58 = sub_100065478();
  v59 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v58 + 56))(v58, v95);
  v60 = *(_WORD *)&buf[3];
  v61 = v69 ^ 1;
  if (*(unsigned __int16 *)&buf[3] < 0x183u)
    v61 = 1;
  if ((v61 & 1) == 0)
  {
    sub_1003C5E58(v59, (char *)v98, (uint64_t)(v49 + 390));
    if (v68)
      v104 |= v68;
    if (buf[0] == 1)
      v62 = 2;
    else
      v62 = 1;
    LOBYTE(v98[0]) = v62;
    BYTE1(v98[0]) = buf[1];
    BYTE2(v98[0]) = 2;
    *(_WORD *)((char *)v98 + 3) = v60;
    v101 = *(_DWORD *)(v9 + 24);
    v71[0] = 0;
    v71[1] = 0;
    v72 = 0;
    sub_10047D35C((uint64_t)v71, 5, v70);
    v72 = v98;
    v63 = sub_100065478();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v63 + 56))(v63, v71);
  }
  return v20;
}

uint64_t sub_1003C4644(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4)
{
  int v7;
  int v8;
  int v9;
  uint64_t v11;
  FILE *v14;
  FILE *v15;
  const char *v16;
  size_t v17;
  NSObject *v18;
  tm v19;
  time_t v20;

  if (!*(_BYTE *)(a1 + 448))
    return 111;
  v7 = a4[4];
  v8 = a4[1];
  v9 = *a4;
  if (v9 == 1 && v8 == 121 && v7 == 1)
  {
    LOBYTE(dword_10097AF60) = 2;
    LOBYTE(v19.tm_sec) = 0;
    sub_100043758(&v19);
    v11 = sub_1000E2430(a2, 4u, 5u, (unsigned __int8 *)&dword_10097AF60);
    if ((_DWORD)v11 && os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E93E4();
    goto LABEL_21;
  }
  if (v9 == 2 && v8 == 121 && v7 == 1)
  {
    LOBYTE(v19.tm_sec) = 0;
    sub_100043758(&v19);
    v11 = sub_1000E1864(a2, 2, 2 * ((5 * *(_WORD *)(a1 + 146)) & 0x7FFFu));
    if ((_DWORD)v11 && os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E9444();
    goto LABEL_21;
  }
  if (v8 != 85)
    return 0;
  v14 = fopen(aPrivateVarMobi_13, "a");
  if (v14)
  {
    v15 = v14;
    memset(&v19, 0, sizeof(v19));
    v20 = time(0);
    localtime_r(&v20, &v19);
    fprintf(v15, "%02d/%02d/%02d %02d:%02d:%02d : side = ", v19.tm_mon + 1, v19.tm_mday, v19.tm_year + 1900, v19.tm_hour, v19.tm_min, v19.tm_sec);
    if (v9 == 1)
    {
      v16 = "Left, ";
      v17 = 6;
    }
    else
    {
      v16 = "Right, ";
      v17 = 7;
    }
    fwrite(v16, v17, 1uLL, v15);
    fprintf(v15, "voltage = %dmV, current = %dmA, temperature = %dºC, level = %d%%\n", __rev16(*((unsigned __int16 *)a4 + 3)), __rev16(*((unsigned __int16 *)a4 + 4)), a4[10], a4[5]);
    fclose(v15);
    if (v9 == 1)
    {
      LOBYTE(v19.tm_sec) = 0;
      sub_100043758(&v19);
      v11 = sub_1000E2430(a2, 4u, 7u, byte_10097B02D);
      if ((_DWORD)v11 && os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006E951C();
LABEL_21:
      sub_100043728(&v19);
      return v11;
    }
    return 0;
  }
  v18 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006E94A4(v18);
  return 1;
}

void sub_1003C4900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003C491C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  NSObject *v13;
  id v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v30;
  int v31;
  int v32;
  NSObject *v33;
  id v34;
  int v35;
  int v36;
  char v37;
  int v38;
  NSObject *v39;
  id v40;
  NSObject *v41;
  id v42;
  NSObject *v43;
  id v44;
  uint64_t v45;
  int v46;
  __int16 v47;
  int v48;
  id v49;
  int v50;
  uint64_t v51;
  NSObject *v52;
  _BOOL4 v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  void *v59;
  int v60;
  uint64_t v61;
  id v62;
  void *v63;
  NSObject *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  BOOL v70;
  int v71;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint8_t buf[4];
  uint64_t v77;
  __int16 v78;
  _BYTE v79[10];
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;

  v8 = *a4;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092C750);
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v77) = *(_WORD *)(a2 + 4);
  v9 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v10 = sub_1003C0344(a1, a2);
  v75 = 0;
  if (!*(_BYTE *)(a1 + 448))
    return 111;
  v11 = v10;
  if (v10)
  {
    v12 = *(_DWORD *)(v10 + 24) - 8194;
    if (v12 <= 0xE && ((1 << v12) & 0x409B) != 0)
    {
      v74 = v10;
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_10092C770);
      sub_1002835F4((uint64_t)off_100977A80, v9, (int *)&v75 + 1, (int *)&v75);
      v73 = v75;
      v13 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *(id *)(v74 + 8);
        v15 = *(_DWORD *)(v74 + 24);
        *(_DWORD *)buf = 138544386;
        v77 = (uint64_t)v14;
        v78 = 1024;
        *(_DWORD *)v79 = a3;
        *(_WORD *)&v79[4] = 1024;
        *(_DWORD *)&v79[6] = v73 != 3;
        v80 = 1024;
        v81 = v15;
        v82 = 1024;
        v83 = v8;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "recvW1CrashTraceHandler: %{public}@ len = %d, isUTPUp = %d, productId = %d, buddyRspSide = %d", buf, 0x24u);

      }
      v16 = v74;
      if (a3 == 1 && v73 != 3 || a3 == 1 && *(_DWORD *)(v74 + 24) != 8194)
      {
        v17 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        {
          v18 = *(id *)(v74 + 8);
          *(_DWORD *)buf = 138543362;
          v77 = (uint64_t)v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Warning: recvW1CrashTraceHandler: Flash in %{public}@ is busy. Retransmit Buddy command", buf, 0xCu);

        }
        sub_1003C6030(a1, a2);
        return 10;
      }
      if (a3 < 2)
      {
        v31 = 0;
        v32 = 0;
      }
      else
      {
        v30 = a4 + 1;
        v31 = sub_1003C6148(a1, a2, v8, v30, (unsigned __int16)(a3 - 1));
        v32 = *v30;
        v16 = v74;
      }
      v36 = *(unsigned __int8 *)(a1 + 416);
      if (v8 == v36)
      {
        if ((a3 == 1 || v32 == 131 || v31 == 1) && *(_DWORD *)(v16 + 24) == 8194)
        {
          v36 = v8;
          if (v73 != 3)
          {
            *(_DWORD *)(a1 + 418) = 0x10000;
            if (v8 == 1)
              v37 = 2;
            else
              v37 = 1;
            LOBYTE(dword_10097AF60) = v37;
            v38 = *(unsigned __int8 *)(v16 + 40);
            if (v38 == 8)
            {
              v41 = qword_1009997D8;
              if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
              {
                v42 = *(id *)(v16 + 8);
                *(_DWORD *)buf = 138543362;
                v77 = (uint64_t)v42;
                _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "recvW1CrashTraceHandler: Send request to %{public}@ for trace log", buf, 0xCu);

              }
              *(_BYTE *)(a1 + 407) = 0;
            }
            else if (v38 == 7)
            {
              v39 = qword_1009997D8;
              if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
              {
                v40 = *(id *)(v16 + 8);
                *(_DWORD *)buf = 138543362;
                v77 = (uint64_t)v40;
                _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "recvW1CrashTraceHandler: Send request to %{public}@ to check crash log existence", buf, 0xCu);

              }
            }
            v43 = qword_1009997D8;
            if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
            {
              v44 = *(id *)(v74 + 8);
              *(_DWORD *)buf = 138543618;
              v77 = (uint64_t)v44;
              v78 = 1024;
              *(_DWORD *)v79 = dword_10097AF60;
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "recvW1CrashTraceHandler: Send TestEnable command to %{public}@ for the other side, side = %d", buf, 0x12u);

            }
            buf[0] = 0;
            sub_100043758(buf);
            v45 = v9 + 128;
            v46 = sub_1000E2430((unsigned __int8 *)(v9 + 128), 4u, 5u, (unsigned __int8 *)&dword_10097AF60);
            sub_10004339C(buf);
            dword_100992610 = dword_10097AF60;
            byte_100992614 = byte_10097AF64;
            byte_100992619 = 5;
            v47 = *(_WORD *)(v45 + 4);
            *(_DWORD *)(a1 + 409) = *(_DWORD *)v45;
            *(_WORD *)(a1 + 413) = v47;
            *(_BYTE *)(a1 + 415) = 0;
            v16 = v74;
            if (v46 && os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
            {
              sub_1006E957C();
              v16 = v74;
            }
            sub_100043728(buf);
            v36 = *(unsigned __int8 *)(a1 + 416);
          }
        }
        else
        {
          v36 = v8;
        }
      }
      if (v36 == 1)
        v48 = 2;
      else
        v48 = 1;
      if (v48 == v8 || *(_DWORD *)(v16 + 24) != 8194 || v73 == 3)
      {
        if (a3 != 1 && v32 != 131 && v31 != 1)
        {
          if (*(_DWORD *)(v16 + 24) != 8194 || *(_BYTE *)(v16 + 40) != 8)
            return 0;
          v19 = 0;
          if (*(_BYTE *)(a1 + 408) || v32 != 121)
            return v19;
        }
        v49 = objc_msgSend(*(id *)(a1 + 424), "count");
        v50 = *(unsigned __int8 *)(v74 + 40);
        if ((unint64_t)v49 > *(unsigned __int8 *)(a1 + 432))
        {
          if (v50 == 8)
          {
            v51 = *(_QWORD *)(a1 + 24);
            v52 = qword_1009997D8;
            v53 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
            if (v51)
            {
              if (v53)
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "recvW1CrashTraceHandler: TTR or Sysdiagnose - Trace Log Collection Completed", buf, 2u);
              }
              *(_BYTE *)(v74 + 40) = 5;
              return sub_1003C1470(a1, v74);
            }
            if (!v53)
              goto LABEL_80;
            *(_WORD *)buf = 0;
            v54 = "recvW1CrashTraceHandler: Internal Settings - Trace Log Collection Completed";
          }
          else
          {
            v52 = qword_1009997D8;
            if (!os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
              goto LABEL_80;
            *(_WORD *)buf = 0;
            v54 = "recvW1CrashTraceHandler: Found crash in Audio Accessory device";
          }
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, v54, buf, 2u);
LABEL_80:
          v55 = sub_10003BE44();
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 328))(v55) & 1) != 0
            || (v56 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v56 + 384))(v56)))
          {
            v57 = qword_1009997D8;
            if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "recvW1CrashTraceHandler: Triggering Tap-to-Radar popup", buf, 2u);
            }
            v58 = sub_100069D20();
            v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSOrderedSet orderedSetWithOrderedSet:](NSOrderedSet, "orderedSetWithOrderedSet:", *(_QWORD *)(a1 + 424)));
            v60 = *(unsigned __int8 *)(v74 + 40);
            v61 = *(unsigned int *)(v74 + 24);
            v62 = *(id *)v74;
            v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithString:](NSString, "stringWithString:", v62));
            (*(void (**)(uint64_t, void *, BOOL, uint64_t, void *))(*(_QWORD *)v58 + 152))(v58, v59, v60 == 7, v61, v63);

            v19 = 0;
          }
          else
          {
            v64 = qword_1009997D8;
            if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
            {
              v65 = objc_msgSend(*(id *)(a1 + 424), "count");
              *(_DWORD *)buf = 134217984;
              v77 = (uint64_t)v65;
              _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "recvW1CrashTraceHandler: Have %ld logs, but cannot trigger non-iOS pop-up", buf, 0xCu);
            }
            v19 = 2;
          }
          sub_1003C69C4(v74);
          v66 = *(_QWORD *)(a1 + 40);
          v67 = *(_QWORD *)(a1 + 48);
          if (v66 == v67)
            goto LABEL_97;
          v68 = 0;
          do
          {
            v69 = *(unsigned __int8 *)(*(_QWORD *)v66 + 40);
            v70 = v69 > 8;
            v71 = (1 << v69) & 0x182;
            if (!v70 && v71 != 0)
              ++v68;
            v66 += 8;
          }
          while (v66 != v67);
          if (!v68)
LABEL_97:
            sub_1003BF784(a1);
          sub_1003C0FBC(a1);
          return v19;
        }
        if (v50 != 8)
        {
          v19 = 0;
          *(_BYTE *)(v74 + 40) = 0;
          return v19;
        }
      }
      return 0;
    }
    v33 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      v34 = *(id *)(v11 + 8);
      v35 = *(_DWORD *)(v11 + 24);
      *(_DWORD *)buf = 138543618;
      v77 = (uint64_t)v34;
      v78 = 1024;
      *(_DWORD *)v79 = v35;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "recvW1CrashTraceHandler: %{public}@ productId = %d unsupported for legacy crash trace handling", buf, 0x12u);

    }
    return 2;
  }
  else
  {
    v20 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      v28 = sub_10025304C(a2, v21, v22, v23, v24, v25, v26, v27);
      *(_DWORD *)buf = 141558275;
      v77 = 1752392040;
      v78 = 2081;
      *(_QWORD *)v79 = v28;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "recvW1CrashTraceHandler: Invalid address %{private, mask.hash}s", buf, 0x16u);
    }
    return 8;
  }
}

void sub_1003C5278(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1003C52B0(uint64_t a1, unsigned int *a2, unsigned int a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  NSObject *v12;
  id v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  id v26;
  int v27;
  int v28;
  int v29;
  signed __int8 v30;
  int v31;
  int v32;
  int v33;
  NSObject *v34;
  int v35;
  int v36;
  NSObject *v37;
  int v38;
  int v39;
  NSObject *v40;
  NSObject *v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  NSObject *v45;
  id v46;
  int v47;
  int v48;
  int v49;
  int v50;
  tm *v51;
  id v52;
  void *v53;
  NSString *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  char v66;
  tm buf;
  _BYTE v68[12];
  char v69;

  v8 = sub_1003C0344(a1, (uint64_t)a2);
  if (!a3 || !a4)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E9868();
    return 3;
  }
  v9 = v8;
  if (v8)
  {
    v10 = *(void **)(v8 + 32);
    if (!v10)
    {
LABEL_9:
      v11 = *a4;
      switch(*a4)
      {
        case 0xFCu:
          if (a3 < 2)
          {
            if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
              sub_1006E983C();
            return 3;
          }
          if (a4[1] != 1)
          {
            if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
              sub_1006E97D8();
            return 3;
          }
          v66 = 0;
          v15 = sub_100027F68();
          sub_100091AE8(&buf, "AccessoryLogging");
          sub_100091AE8(v68, "AccessoryLogDWRPopupKey");
          (*(void (**)(uint64_t, tm *, _BYTE *, char *))(*(_QWORD *)v15 + 72))(v15, &buf, v68, &v66);
          if (v69 < 0)
            operator delete(*(void **)v68);
          if (SHIBYTE(buf.tm_year) < 0)
            operator delete(*(void **)&buf.tm_sec);
          if (v66)
          {
            v16 = qword_1009997D8;
            if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(buf.tm_sec) = 0;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "recvLogHandler: Skipping DWR popup", (uint8_t *)&buf, 2u);
            }
            result = 17;
          }
          else
          {
            result = sub_1003C7940(a1, a2, 5);
          }
          break;
        case 0xFDu:
          result = sub_1003C76AC(a1, (uint64_t)a2);
          break;
        case 0xFEu:
          result = sub_1003C74C0(a1, (uint64_t)a2, a3, (uint64_t)a4);
          break;
        case 0xFFu:
          result = sub_1003C71F0(a1, (uint64_t)a2);
          break;
        default:
          if (v11 != 6)
            goto LABEL_29;
          result = sub_1003C6AEC(a1, (uint64_t)a2, a3, (uint64_t)a4);
          break;
      }
      return result;
    }
    v11 = *a4;
    if (v11 != 4)
    {
      v12 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(id *)(v9 + 8);
        buf.tm_sec = 138543362;
        *(_QWORD *)&buf.tm_min = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "recvLogHandler: Stopping inactivity timer for %{public}@", (uint8_t *)&buf, 0xCu);

        v10 = *(void **)(v9 + 32);
      }
      objc_msgSend(v10, "invalidate");
      v14 = *(void **)(v9 + 32);
      *(_QWORD *)(v9 + 32) = 0;

      goto LABEL_9;
    }
LABEL_29:
    if (a3 <= 2)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006E965C(v9);
      return 3;
    }
    if (a3 == 3)
    {
      v25 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
      {
        v26 = *(id *)(v9 + 8);
        v27 = *a4;
        v28 = a4[1];
        v29 = a4[2];
        buf.tm_sec = 138544130;
        *(_QWORD *)&buf.tm_min = v26;
        LOWORD(buf.tm_mday) = 1024;
        *(int *)((char *)&buf.tm_mday + 2) = v27;
        HIWORD(buf.tm_mon) = 1024;
        buf.tm_year = v28;
        LOWORD(buf.tm_wday) = 1024;
        *(int *)((char *)&buf.tm_wday + 2) = v29;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Warning: recvLogHandler: Ignoring data for %{public}@ shorter with only header: %02x %02x %02x", (uint8_t *)&buf, 0x1Eu);

      }
      return 3;
    }
    if (v11 == 4)
      return sub_1003C7AD8(a1, (uint64_t)a2, a3, a4);
    v30 = a4[1];
    v31 = v30 & 0x7F;
    v32 = v31;
    if (*(_QWORD *)(v9 + 64))
    {
LABEL_43:
      v33 = *(unsigned __int8 *)(v9 + 72);
      if (v31 != v33)
      {
        v34 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        {
          v61 = *(_QWORD *)(v9 + 48);
          buf.tm_sec = 138412802;
          *(_QWORD *)&buf.tm_min = v61;
          LOWORD(buf.tm_mday) = 1024;
          *(int *)((char *)&buf.tm_mday + 2) = v32;
          HIWORD(buf.tm_mon) = 1024;
          buf.tm_year = v33;
          _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "recvLogHandler: File %@ seq num mismatch rcvd %d expected %d", (uint8_t *)&buf, 0x18u);
          LOBYTE(v33) = *(_BYTE *)(v9 + 72);
        }
        *(_BYTE *)(v9 + 56) = 1;
        LOBYTE(v31) = v33;
      }
      *(_BYTE *)(v9 + 72) = (v31 + 1) & 0x7F;
      v35 = *a4;
      v36 = *(unsigned __int8 *)(v9 + 73);
      if (v35 != v36)
      {
        v37 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        {
          v62 = *(_QWORD *)(v9 + 48);
          buf.tm_sec = 138412802;
          *(_QWORD *)&buf.tm_min = v62;
          LOWORD(buf.tm_mday) = 1024;
          *(int *)((char *)&buf.tm_mday + 2) = v35;
          HIWORD(buf.tm_mon) = 1024;
          buf.tm_year = v36;
          _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "recvLogHandler: File %@ log type mismatch rcvd %d expected %d", (uint8_t *)&buf, 0x18u);
        }
        *(_BYTE *)(v9 + 56) = 1;
      }
      v38 = a4[2];
      v39 = *(unsigned __int8 *)(v9 + 74);
      if (v38 != v39)
      {
        v40 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        {
          v63 = *(_QWORD *)(v9 + 48);
          buf.tm_sec = 138412802;
          *(_QWORD *)&buf.tm_min = v63;
          LOWORD(buf.tm_mday) = 1024;
          *(int *)((char *)&buf.tm_mday + 2) = v38;
          HIWORD(buf.tm_mon) = 1024;
          buf.tm_year = v39;
          _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "recvLogHandler: File %@ log device mismatch rcvd %d expected %d", (uint8_t *)&buf, 0x18u);
        }
        *(_BYTE *)(v9 + 56) = 1;
      }
      fwrite(a4 + 3, 1uLL, a3 - 3, *(FILE **)(v9 + 64));
      if (v30 >= 0)
      {
        v41 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        {
          v42 = *(_QWORD *)(v9 + 48);
          buf.tm_sec = 138412290;
          *(_QWORD *)&buf.tm_min = v42;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "recvLogHandler: Completed writing file %@", (uint8_t *)&buf, 0xCu);
        }
        sub_1003C88B4(v9);
      }
      return 0;
    }
    v43 = *(unsigned __int8 *)(v9 + 40);
    if (v43 > 8 || ((1 << v43) & 0x182) == 0)
    {
      v45 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
      {
        v46 = *(id *)(v9 + 8);
        v47 = *(unsigned __int8 *)(v9 + 40);
        v48 = *a4;
        v49 = a4[1];
        v50 = a4[2];
        buf.tm_sec = 138544386;
        *(_QWORD *)&buf.tm_min = v46;
        LOWORD(buf.tm_mday) = 1024;
        *(int *)((char *)&buf.tm_mday + 2) = v47;
        HIWORD(buf.tm_mon) = 1024;
        buf.tm_year = v48;
        LOWORD(buf.tm_wday) = 1024;
        *(int *)((char *)&buf.tm_wday + 2) = v49;
        HIWORD(buf.tm_yday) = 1024;
        buf.tm_isdst = v50;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Warning: recvLogHandler: Refusing non-AWD log data from %{public}@ (status %d), header %02x %02x %02x", (uint8_t *)&buf, 0x24u);

      }
      return 6;
    }
    if ((v30 & 0x7F) != 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006E9760();
    }
    else
    {
      *(_BYTE *)(v9 + 73) = v11;
      if (v11 == 1)
      {
        *(_BYTE *)(a1 + 34) = 1;
        v44 = 7;
      }
      else
      {
        v44 = 8;
      }
      *(_BYTE *)(v9 + 40) = v44;
      *(_BYTE *)(v9 + 74) = a4[2];
      memset(&buf, 0, sizeof(buf));
      v51 = sub_1003C5FF4(v8, &buf);
      v65 = sub_1003C86E8((uint64_t)v51, *(unsigned __int8 *)(v9 + 73));
      v64 = sub_1003C8764((uint64_t)v65, *(unsigned __int8 *)(v9 + 74));
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_10092C770);
      v52 = sub_100286360((uint64_t)off_100977A80, v9 + 16);
      v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
      v54 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("/private/var/mobile/Library/Logs/Bluetooth/Accessory%s_%s_%@_%04d-%02d-%02d-%02d-%02d-%02d.%s"), v65, v64, v53, (buf.tm_year + 1900), (buf.tm_mon + 1), buf.tm_mday, buf.tm_hour, buf.tm_min, buf.tm_sec, sub_1003C8838((uint64_t)v53, *(unsigned __int8 *)(v9 + 73)));
      v55 = objc_claimAutoreleasedReturnValue(v54);
      v56 = *(void **)(v9 + 48);
      *(_QWORD *)(v9 + 48) = v55;

      *(_QWORD *)(v9 + 64) = fopen((const char *)objc_msgSend(*(id *)(v9 + 48), "UTF8String"), "ab");
      *(_BYTE *)(v9 + 72) = 0;
      v57 = *(_QWORD *)(v9 + 96);
      if (v57)
      {
        objc_msgSend(*(id *)(v9 + 104), "setObject:forKey:", v57, *(_QWORD *)(v9 + 48));
        v58 = *(void **)(v9 + 96);
        *(_QWORD *)(v9 + 96) = 0;

      }
      v59 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
      {
        v60 = *(_QWORD *)(v9 + 48);
        *(_DWORD *)v68 = 138412290;
        *(_QWORD *)&v68[4] = v60;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "recvLogHandler: Opening file %@", v68, 0xCu);
      }
      if (*(_QWORD *)(v9 + 64))
      {
        v32 = 0;
        goto LABEL_43;
      }
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006E96D8();
    }
    return 1;
  }
  v18 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006E95F4((uint64_t)a2, v18, v19, v20, v21, v22, v23, v24);
  return 8;
}

void sub_1003C5BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;

  _Unwind_Resume(a1);
}

uint64_t sub_1003C5C28(int a1, FILE *a2, uint64_t a3)
{
  fprintf(a2, "  Pri A2DP Uptime.. %d\n", *(_DWORD *)(a3 + 8));
  fprintf(a2, "  Sec A2DP Uptime.. %d\n", *(_DWORD *)(a3 + 12));
  fprintf(a2, "  Pri HFP Uptime... %d\n", *(_DWORD *)(a3 + 16));
  fprintf(a2, "  Sec HFP Uptime... %d\n", *(_DWORD *)(a3 + 20));
  fprintf(a2, "  Pri AAC Uptime... %d\n", *(_DWORD *)(a3 + 24));
  fprintf(a2, "  Sec AAC Uptime... %d\n", *(_DWORD *)(a3 + 28));
  fprintf(a2, "  Total Uptime..... %d\n", *(_DWORD *)(a3 + 32));
  fprintf(a2, "  Num C-Swaps...... %d\n", *(_DWORD *)a3);
  fprintf(a2, "  Num UC-Swaps..... %d\n", *(_DWORD *)(a3 + 4));
  fprintf(a2, "  Bud Active FW.... %d.%d.%d\n", *(unsigned __int8 *)(a3 + 36), *(unsigned __int8 *)(a3 + 37), *(unsigned __int8 *)(a3 + 38));
  fprintf(a2, "  Bud Pending FW... %d.%d.%d\n", *(unsigned __int8 *)(a3 + 39), *(unsigned __int8 *)(a3 + 40), *(unsigned __int8 *)(a3 + 41));
  fprintf(a2, "  Bud Previous FW.. %d.%d.%d\n", *(unsigned __int8 *)(a3 + 42), *(unsigned __int8 *)(a3 + 43), *(unsigned __int8 *)(a3 + 44));
  fprintf(a2, "  Bud HW Ver....... %d.%d.%d\n", *(unsigned __int8 *)(a3 + 45), *(unsigned __int8 *)(a3 + 46), *(unsigned __int8 *)(a3 + 47));
  fprintf(a2, "  Case FW Ver...... %d.%d.%d\n", *(unsigned __int8 *)(a3 + 48), *(unsigned __int8 *)(a3 + 49), *(unsigned __int8 *)(a3 + 50));
  fprintf(a2, "  Case HW Ver...... %d.%d.%d\n", *(unsigned __int8 *)(a3 + 54), *(unsigned __int8 *)(a3 + 55), *(unsigned __int8 *)(a3 + 56));
  fprintf(a2, "  Case FWUP Ver.... %d.%d.%d\n", *(unsigned __int8 *)(a3 + 51), *(unsigned __int8 *)(a3 + 52), *(unsigned __int8 *)(a3 + 53));
  return fprintf(a2, "  SCP Ver.......... %d.%d.%d.%d.%d.%d\n", *(unsigned __int8 *)(a3 + 57), *(unsigned __int8 *)(a3 + 58), *(unsigned __int8 *)(a3 + 59), *(unsigned __int8 *)(a3 + 60), *(unsigned __int8 *)(a3 + 61), *(unsigned __int8 *)(a3 + 62));
}

__n128 sub_1003C5E58(int a1, char *a2, uint64_t a3)
{
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __n128 result;

  v5 = a2 + 307;
  bzero(a2, 0x29AuLL);
  *(_WORD *)(a2 + 5) = *(_WORD *)a3;
  *(_WORD *)(a2 + 7) = *(_WORD *)(a3 + 2);
  *(_WORD *)(a2 + 9) = *(_WORD *)(a3 + 4);
  *(_DWORD *)(a2 + 11) = *(_DWORD *)(a3 + 6);
  *(_DWORD *)(a2 + 15) = *(_DWORD *)(a3 + 10);
  *(_DWORD *)(a2 + 19) = *(_DWORD *)(a3 + 14);
  *(_DWORD *)(a2 + 23) = *(_DWORD *)(a3 + 18);
  *(_DWORD *)(a2 + 27) = *(_DWORD *)(a3 + 22);
  *(_DWORD *)(a2 + 31) = *(_DWORD *)(a3 + 26);
  *(_DWORD *)(a2 + 35) = *(_DWORD *)(a3 + 30);
  *(_DWORD *)(a2 + 39) = *(_DWORD *)(a3 + 34);
  *(_DWORD *)(a2 + 43) = *(_DWORD *)(a3 + 38);
  *(_DWORD *)(a2 + 47) = *(_DWORD *)(a3 + 42);
  v6 = *(_OWORD *)(a3 + 46);
  v7 = *(_OWORD *)(a3 + 62);
  v8 = *(_OWORD *)(a3 + 78);
  *(_OWORD *)(a2 + 99) = *(_OWORD *)(a3 + 94);
  *(_OWORD *)(a2 + 83) = v8;
  *(_OWORD *)(a2 + 67) = v7;
  *(_OWORD *)(a2 + 51) = v6;
  v9 = *(_OWORD *)(a3 + 110);
  v10 = *(_OWORD *)(a3 + 126);
  v11 = *(_OWORD *)(a3 + 142);
  *(_OWORD *)(a2 + 163) = *(_OWORD *)(a3 + 158);
  *(_OWORD *)(a2 + 147) = v11;
  *(_OWORD *)(a2 + 131) = v10;
  *(_OWORD *)(a2 + 115) = v9;
  v12 = *(_OWORD *)(a3 + 174);
  v13 = *(_OWORD *)(a3 + 190);
  v14 = *(_OWORD *)(a3 + 206);
  *(_OWORD *)(a2 + 227) = *(_OWORD *)(a3 + 222);
  *(_OWORD *)(a2 + 211) = v14;
  *(_OWORD *)(a2 + 195) = v13;
  *(_OWORD *)(a2 + 179) = v12;
  v15 = *(_OWORD *)(a3 + 238);
  v16 = *(_OWORD *)(a3 + 254);
  v17 = *(_OWORD *)(a3 + 286);
  *(_OWORD *)(a2 + 275) = *(_OWORD *)(a3 + 270);
  *(_OWORD *)(a2 + 291) = v17;
  *(_OWORD *)(a2 + 259) = v16;
  *(_OWORD *)(a2 + 243) = v15;
  *(_QWORD *)v5 = *(_QWORD *)(a3 + 302);
  v18 = *(_QWORD *)(a3 + 310);
  *(_DWORD *)(a2 + 323) = *(_DWORD *)(a3 + 318);
  *(_QWORD *)(a2 + 315) = v18;
  v19 = *(_QWORD *)(a3 + 322);
  *(_DWORD *)(a2 + 335) = *(_DWORD *)(a3 + 330);
  *(_QWORD *)(a2 + 327) = v19;
  v20 = *(_OWORD *)(a3 + 334);
  *(_DWORD *)(a2 + 357) = *(_DWORD *)(a3 + 350);
  *(_OWORD *)(a2 + 341) = v20;
  result = *(__n128 *)(a3 + 354);
  *(_OWORD *)(a2 + 373) = *(_OWORD *)(a3 + 366);
  *(__n128 *)(a2 + 361) = result;
  *((_WORD *)v5 + 16) = *(_WORD *)(a3 + 382);
  *((_WORD *)v5 + 41) = *(_WORD *)(a3 + 384);
  return result;
}

tm *sub_1003C5FF4(uint64_t a1, tm *a2)
{
  time_t v4;

  v4 = time(0);
  return localtime_r(&v4, a2);
}

void sub_1003C6030(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];

  v4 = sub_1003C0344(a1, a2);
  if (*(_BYTE *)(a1 + 448))
  {
    v5 = v4;
    if (v4)
    {
      if (*(unsigned __int8 *)(a1 + 415) < 5u)
      {
        v20 = sub_10006BBEC();
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472;
        v21[2] = sub_1003CC668;
        v21[3] = &unk_100917378;
        v21[4] = a1;
        sub_100475CEC(v20, 10000, v21);
      }
      else
      {
        v6 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
          sub_1006E9928(a1, v6, v7, v8, v9, v10, v11, v12);
        *(_BYTE *)(v5 + 40) = 0;
      }
    }
    else
    {
      v13 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006E98C0(a2, v13, v14, v15, v16, v17, v18, v19);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
  {
    sub_1006E9894();
  }
}

uint64_t sub_1003C6148(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4, unsigned int a5)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  FILE *v36;
  FILE *v37;
  NSObject *v38;
  unsigned int v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  time_t v43[2];
  tm v44;
  tm v45;
  tm v46;
  tm v47;
  tm v48;

  v10 = *a4;
  v11 = a4[3];
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092C750);
  memset(&v48, 0, sizeof(v48));
  LODWORD(v43[0]) = *(_DWORD *)a2;
  WORD2(v43[0]) = *(_WORD *)(a2 + 4);
  v12 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)v43, 1);
  v13 = sub_1003C0344(a1, a2);
  if (v12)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (!v14)
  {
    v23 = v13;
    if (v10 == 133)
    {
      if (*(_BYTE *)(a1 + 407) && *(_BYTE *)(v13 + 40) == 8 && *(unsigned __int8 *)(a1 + 416) != a3)
      {
        result = 0;
        *(_BYTE *)(a1 + 408) = 1;
        return result;
      }
      goto LABEL_15;
    }
    if (v10 == 129)
    {
      v24 = 1;
LABEL_18:
      v43[0] = time(0);
      localtime_r(v43, &v48);
      v47 = v48;
      sub_1003CCC34(a1, (uint64_t)&unk_10099261A, a2, 1);
      v46 = v48;
      sub_1003CCC34(a1, (uint64_t)&unk_10099271A, a2, 2);
      if (*(_BYTE *)(v23 + 40) == 7)
      {
        v45 = v48;
        sub_1003CCC34(a1, (uint64_t)&unk_10099281A, a2, 3);
      }
      if (*(_DWORD *)(v23 + 24) == 8201)
      {
        v44 = v48;
        sub_1003CCC34(a1, (uint64_t)&unk_10099291A, a2, 8);
      }
      if (v11 == 1)
        v25 = v24;
      else
        v25 = 0;
      if (v10 == 133 || (v25 & 1) != 0)
      {
        if (v10 == 133)
        {
          sleep(5u);
          goto LABEL_42;
        }
      }
      else
      {
        result = 1;
        if (v10 != 121 || v11 != 1 || *(_BYTE *)(a1 + 407) || *(_BYTE *)(v23 + 40) != 8)
          return result;
      }
      if (v24)
      {
        v43[0] = 0;
        v43[1] = 0;
        sub_10047D35C((uint64_t)v43, 0, v12);
        v26 = sub_100065478();
        (*(void (**)(uint64_t, time_t *))(*(_QWORD *)v26 + 56))(v26, v43);
      }
LABEL_42:
      v27 = *(unsigned __int16 *)(a1 + 418);
      v28 = *(unsigned __int8 *)(a1 + 420);
LABEL_43:
      sub_1003CC858(a1, a2, 3, a3, v27, 246, v28);
      result = 0;
      v29 = *(_WORD *)(a1 + 418) + 246;
      goto LABEL_44;
    }
    if (v10 == 121 && v11 == 1)
    {
      if (!*(_BYTE *)(a1 + 407) && *(_BYTE *)(v13 + 40) == 8 && *(_BYTE *)(a1 + 408))
      {
LABEL_15:
        v24 = 0;
        goto LABEL_18;
      }
LABEL_47:
      v30 = *(unsigned __int8 *)(v13 + 40);
      if (v30 == 8)
      {
        if (*(_BYTE *)(a1 + 407))
        {
          sub_1003CC858(a1, a2, 5, a3, 0, 0, 0);
          result = 0;
          if (*(_DWORD *)(v23 + 24) != 8194)
            return result;
          sleep(1u);
          if (a3 == 1)
            v34 = 2;
          else
            v34 = 1;
          v31 = a1;
          v32 = a2;
          v33 = 5;
          goto LABEL_71;
        }
      }
      else if (v30 == 7)
      {
        if (*(_BYTE *)(a1 + 141) != 8)
        {
          v31 = a1;
          v32 = a2;
          v33 = 6;
LABEL_70:
          v34 = a3;
LABEL_71:
          sub_1003CC858(v31, v32, v33, v34, 0, 0, 0);
          return 0;
        }
        goto LABEL_67;
      }
      return 0;
    }
    if (v10 == 121)
    {
      if (v11 == 1)
        goto LABEL_47;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006E99B0();
      return 1;
    }
    result = 0;
    if (v10 > 134)
    {
      if (v10 == 139)
      {
LABEL_68:
        v31 = a1;
        v32 = a2;
        v33 = 2;
        goto LABEL_70;
      }
      if (v10 != 135)
        return result;
LABEL_67:
      if (*(_DWORD *)(a1 + 142) != 100000)
      {
        v31 = a1;
        v32 = a2;
        v33 = 7;
        goto LABEL_70;
      }
      goto LABEL_68;
    }
    if (v10 != 123)
    {
      if (v10 != 131)
        return result;
      usleep(0x7A120u);
      return 0;
    }
    if (v11 != 1)
      return 1;
    usleep(0x186A0u);
    v35 = *(unsigned __int16 *)(a1 + 420) - 1;
    if (v35 <= 8
      && ((0x187u >> v35) & 1) != 0
      && (v36 = fopen((const char *)*(&off_10092C7D8 + (__int16)v35), "ab")) != 0)
    {
      v37 = v36;
      fwrite(a4 + 4, 1uLL, a5 - 4, v36);
      fclose(v37);
    }
    else
    {
      v38 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006E99DC(v38);
    }
    v39 = *(unsigned __int16 *)(a1 + 420);
    switch(*(_WORD *)(a1 + 420))
    {
      case 1:
        if (*(_WORD *)(a1 + 418) == 0x2000)
        {
          LOWORD(v39) = 2;
          goto LABEL_87;
        }
        v39 = 1;
        goto LABEL_111;
      case 2:
        if (*(_WORD *)(a1 + 418) != 4096)
        {
          LOBYTE(v39) = 2;
          goto LABEL_117;
        }
        sub_1003CCE90(a1, (uint64_t)&unk_10099261A);
        sub_1003CCE90(a1, (uint64_t)&unk_10099271A);
        if (*(_BYTE *)(v23 + 40) == 7)
        {
          LOWORD(v39) = 3;
LABEL_87:
          v27 = 0;
          *(_WORD *)(a1 + 420) = v39;
          *(_WORD *)(a1 + 418) = 0;
          goto LABEL_118;
        }
        if (*(_DWORD *)(v23 + 24) != 8201)
          goto LABEL_107;
        goto LABEL_105;
      case 3:
        if (*(_WORD *)(a1 + 418) != 4096)
        {
          LOBYTE(v39) = 3;
          goto LABEL_117;
        }
        sub_1003CCE90(a1, (uint64_t)&unk_10099281A);
        if (*(_DWORD *)(v23 + 24) != 8201)
          goto LABEL_107;
        v40 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v43[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Start logging for MCU1", (uint8_t *)v43, 2u);
        }
LABEL_105:
        *(_DWORD *)(a1 + 418) = 0x80000;
LABEL_106:
        v39 = 8;
        goto LABEL_111;
      case 8:
        if (*(_WORD *)(a1 + 418) != 0x2000)
          goto LABEL_106;
        sub_1003CCE90(a1, (uint64_t)&unk_10099291A);
        if (*(_DWORD *)(v23 + 24) != 8201)
          goto LABEL_108;
        v41 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v43[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Log collection for MCU1 is completed.", (uint8_t *)v43, 2u);
        }
        goto LABEL_107;
      case 9:
        if (*(_WORD *)(a1 + 418) == 0x2000)
        {
          v42 = qword_1009997D8;
          if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v43[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Log collection for MCU1 and MCU2 are completed.", (uint8_t *)v43, 2u);
          }
          sub_1003CCE90(a1, (uint64_t)&unk_100992A1A);
LABEL_107:
          sub_1003CC858(a1, a2, 4, a3, 0, 0, 0);
LABEL_108:
          v39 = *(unsigned __int16 *)(a1 + 420);
LABEL_109:
          if (v39 > 9 || ((1 << v39) & 0x302) == 0)
          {
LABEL_112:
            if (v39 <= 9 && ((1 << v39) & 0x302) != 0 && *(_WORD *)(a1 + 418) == 8118)
            {
              sub_1003CC858(a1, a2, 3, a3, 8118, 74, v39);
              result = 0;
              v29 = *(_WORD *)(a1 + 418) + 74;
              goto LABEL_44;
            }
            if ((v39 & 0xFFFE) != 2)
              return 0;
LABEL_117:
            v27 = *(unsigned __int16 *)(a1 + 418);
            if (v27 > 0xF5F)
            {
              if (v27 == 3936)
              {
                sub_1003CC858(a1, a2, 3, a3, 3936, 160, v39);
                result = 0;
                v29 = *(_WORD *)(a1 + 418) + 160;
LABEL_44:
                *(_WORD *)(a1 + 418) = v29;
                return result;
              }
              return 0;
            }
LABEL_118:
            v28 = v39;
            goto LABEL_43;
          }
        }
        else
        {
          v39 = 9;
        }
LABEL_111:
        v27 = *(unsigned __int16 *)(a1 + 418);
        if (v27 >> 1 <= 0xFDA)
          goto LABEL_118;
        goto LABEL_112;
      default:
        goto LABEL_109;
    }
  }
  v15 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006E9A54(a2, v15, v16, v17, v18, v19, v20, v21);
  return 8;
}

id sub_1003C69C4(uint64_t a1)
{
  void *v2;
  void *v3;
  FILE *v4;
  void *v5;
  unsigned int v6;
  id result;
  void *v8;
  id v9;
  void *v10;

  objc_msgSend(*(id *)(a1 + 32), "invalidate");
  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  *(_BYTE *)(a1 + 40) = 0;
  v3 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;

  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  v4 = *(FILE **)(a1 + 64);
  if (v4)
    fclose(v4);
  *(_QWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 72) = -256;
  *(_BYTE *)(a1 + 74) = -1;
  objc_msgSend(*(id *)(a1 + 80), "removeAllObjects");
  v5 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;

  objc_msgSend(*(id *)(a1 + 104), "removeAllObjects");
  v6 = *(_DWORD *)(a1 + 24) - 8194;
  if (v6 > 0xE || ((1 << v6) & 0x409B) == 0)
  {
    v8 = *(void **)(a1 + 80);
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10092C770);
    v9 = sub_1002865F8((uint64_t)off_100977A80, a1 + 16);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    objc_msgSend(v8, "addObject:", v10);

  }
  result = objc_msgSend(*(id *)(a1 + 80), "count");
  *(_BYTE *)(a1 + 88) = (_BYTE)result;
  return result;
}

void sub_1003C6ADC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003C6AEC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  void **v12;
  void *v13;
  void *v14;
  id v15;
  unsigned int v16;
  NSObject *v17;
  id v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  NSObject *v39;
  NSObject *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  void *v49;
  NSObject *v50;
  id v51;
  _BYTE *v52;
  void *v53;
  uint64_t v54;
  NSObject *v55;
  int v57;
  __int16 v58;
  void *__p[2];
  char v60;
  char v61;
  int v62;
  __int16 v63;
  _BYTE buf[14];
  int v65;
  __int16 v66;
  int v67;

  v7 = atomic_load((unsigned __int8 *)&qword_100992608);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_100992608))
  {
    qword_100992600 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", 315572400.0));
    __cxa_guard_release(&qword_100992608);
  }
  v8 = sub_1003C0344(a1, a2);
  v62 = *(_DWORD *)a2;
  v63 = *(_WORD *)(a2 + 4);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092C750);
  v9 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v62, 0);
  v61 = 0;
  v10 = sub_100027F68();
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(__p, "AccessoryLogCrashPopupKey");
  (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v10 + 72))(v10, buf, __p, &v61);
  if (v60 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v67) < 0)
    operator delete(*(void **)buf);
  sub_10043F6EC(v9, (uint64_t)buf);
  if (v67 >= 0)
    v11 = buf;
  else
    v11 = *(_BYTE **)buf;
  v57 = *(_DWORD *)a2;
  v58 = *(_WORD *)(a2 + 4);
  sub_10046E9BC((unsigned __int8 *)&v57, __p);
  if (v60 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Accessory %s %@ crashed before this connection, it might appear as a timeout or remote terminated connection"), v11, v13));

  if (v60 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v67) < 0)
    operator delete(*(void **)buf);
  v15 = objc_retainAutorelease(v14);
  sub_10011D44C((const char *)objc_msgSend(v15, "UTF8String"));
  if (v8)
  {
    if (*(_BYTE *)(a1 + 32) || (v16 = *(unsigned __int8 *)(v8 + 40), v16 <= 8) && ((1 << v16) & 0x182) != 0)
    {
      v17 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
      {
        v18 = *(id *)(v8 + 8);
        v19 = *(unsigned __int8 *)(a1 + 32);
        v20 = *(unsigned __int8 *)(v8 + 40);
        *(_DWORD *)buf = 138543874;
        *(_QWORD *)&buf[4] = v18;
        *(_WORD *)&buf[12] = 1024;
        v65 = v19;
        v66 = 1024;
        v67 = v20;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Warning: recvCrashAvailableHandler: Refusing crash log available from %{public}@ (busy %d) (status %d)", buf, 0x18u);

      }
      v21 = 10;
      goto LABEL_28;
    }
    v31 = sub_100027F68();
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    if (v61)
      v33 = 0;
    else
      v33 = v32;
    if (v33 != 1 || !sub_10044936C(v9) && (sub_1003C0650() & 1) == 0)
    {
      v40 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
      {
        v41 = sub_100027F68();
        v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
        if (sub_10044936C(v9))
          v43 = 1;
        else
          v43 = sub_1003C0650();
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v42;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v43;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "recvCrashAvailableHandler: Dismissing; internal build %d, AACP stored logging possible %d",
          buf,
          0xEu);
      }
      goto LABEL_56;
    }
    v34 = sub_10003BE44();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 328))(v34) & 1) == 0)
    {
      v35 = sub_10003BE44();
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 384))(v35) & 1) == 0)
      {
        v36 = sub_10003BE44();
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 424))(v36) & 1) == 0)
        {
          v55 = qword_1009997D8;
          if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            v21 = 2;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "recvCrashAvailableHandler: Ignoring available crash (unsupported platform)", buf, 2u);
          }
          else
          {
            v21 = 2;
          }
          goto LABEL_28;
        }
      }
    }
    objc_msgSend((id)qword_100992600, "timeIntervalSinceNow");
    v38 = v37;
    if (v37 < 0.0 && v37 > -60.0)
    {
      v39 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = -v38;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "recvCrashAvailableHandler: Suppressing crash notification (%f seconds elapsed)", buf, 0xCu);
      }
LABEL_56:
      v21 = sub_1003C0728(a1, a2, 6, 1u);
      goto LABEL_28;
    }
    v44 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v45 = (void *)qword_100992600;
    qword_100992600 = v44;

    v47 = sub_1003C8AC0(v46, a3, a4);
    v48 = objc_claimAutoreleasedReturnValue(v47);
    v49 = *(void **)(v8 + 96);
    *(_QWORD *)(v8 + 96) = v48;

    v50 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      v51 = *(id *)(v8 + 8);
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v51;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "recvCrashAvailableHandler: Crash log from %{public}@ available, informing user", buf, 0xCu);

    }
    sub_1004491B4(v9, 0xAu, buf);
    if (v67 >= 0)
      v52 = buf;
    else
      v52 = *(_BYTE **)buf;
    v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v52));
    if (SHIBYTE(v67) < 0)
      operator delete(*(void **)buf);
    v54 = sub_100069D20();
    (*(void (**)(uint64_t, unint64_t, _QWORD, _QWORD, void *))(*(_QWORD *)v54 + 144))(v54, *(unsigned int *)(v8 + 16) | ((unint64_t)*(unsigned __int16 *)(v8 + 20) << 32), *(unsigned int *)(v8 + 24), *(_QWORD *)v8, v53);

    v21 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    {
      v29 = sub_10025304C(a2, v22, v23, v24, v25, v26, v27, v28);
      sub_1006E9ABC(v29, (uint64_t)buf);
    }
    v21 = 8;
  }
LABEL_28:

  return v21;
}

void sub_1003C7148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  __cxa_guard_abort(&qword_100992608);
  _Unwind_Resume(a1);
}

uint64_t sub_1003C71F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  id v22;
  id v23;
  NSObject *v24;
  void *v25;
  int v26;
  id v27;
  void *v29;
  int v30;
  id v31;
  int v32;
  id v33;
  __int16 v34;
  id v35;

  v4 = sub_1003C0344(a1, a2);
  if (v4)
  {
    v5 = v4;
    v6 = *(unsigned __int8 *)(v4 + 40);
    v7 = v6 > 8;
    v8 = (1 << v6) & 0x182;
    if (v7 || v8 == 0)
    {
      v24 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
      {
        v25 = *(void **)(v5 + 8);
        v26 = *(unsigned __int8 *)(v5 + 40);
        v32 = 138543618;
        v33 = v25;
        v34 = 1024;
        LODWORD(v35) = v26;
        v27 = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Warning: recvLogCompleteHandler: Refusing log complete from %{public}@ (status %d)", (uint8_t *)&v32, 0x12u);

      }
      return 6;
    }
    else
    {
      if (*(_QWORD *)(v4 + 64))
      {
        v10 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        {
          v11 = *(void **)(v5 + 48);
          v32 = 138412290;
          v33 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Warning: recvLogCompleteHandler: Received log complete while %@ still open; still sending possibly corrupted file",
            (uint8_t *)&v32,
            0xCu);
        }
        *(_BYTE *)(v5 + 56) = 1;
        sub_1003C88B4(v5);
        v12 = 1;
      }
      else
      {
        v12 = 0;
      }
      v20 = objc_msgSend(*(id *)(v5 + 80), "count");
      v21 = qword_1009997D8;
      if ((unint64_t)v20 <= *(unsigned __int8 *)(v5 + 88))
      {
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        {
          v29 = *(void **)(v5 + 8);
          v30 = *(unsigned __int8 *)(v5 + 40);
          v32 = 138543618;
          v33 = v29;
          v34 = 1024;
          LODWORD(v35) = v30;
          v31 = v29;
          _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "recvLogCompleteHandler: %{public}@ reports no log file to send (status %d)", (uint8_t *)&v32, 0x12u);

          v21 = qword_1009997D8;
        }
        v12 = 12;
      }
      *(_BYTE *)(v5 + 40) = 5;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        v22 = *(id *)(v5 + 8);
        v23 = objc_msgSend(*(id *)(v5 + 80), "count");
        v32 = 138543618;
        v33 = v22;
        v34 = 2048;
        v35 = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "recvLogCompleteHandler: %{public}@ session complete, file count %lu", (uint8_t *)&v32, 0x16u);

      }
      sub_1003C1470(a1, v5);
    }
  }
  else
  {
    v13 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E9AF4(a2, v13, v14, v15, v16, v17, v18, v19);
    return 8;
  }
  return v12;
}

void sub_1003C74A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003C74C0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  NSObject *v14;
  id v15;
  int v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  id v30;
  int v31;
  id v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  v8 = sub_1003C0344(a1, a2);
  if (v8)
  {
    v9 = v8;
    if (!*(_BYTE *)(a1 + 32)
      && ((v10 = *(unsigned __int8 *)(v8 + 40), v11 = v10 >= 8, v13 = v10 == 8, v12 = (1 << v10) & 0x182, v13 || !v11)
        ? (v13 = v12 == 0)
        : (v13 = 1),
          v13))
    {
      v26 = sub_1003C8AC0(v8, a3, a4);
      v27 = objc_claimAutoreleasedReturnValue(v26);
      v28 = *(void **)(v9 + 96);
      *(_QWORD *)(v9 + 96) = v27;

      v29 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
      {
        v30 = *(id *)(v9 + 8);
        v31 = 138543362;
        v32 = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "recvLogForceSendHandler: Device %{public}@ initiating forced logging session", (uint8_t *)&v31, 0xCu);

      }
      *(_BYTE *)(a1 + 33) = 1;
      sub_1003C1234(a1, v9);
      return 0;
    }
    else
    {
      v14 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
      {
        v15 = *(id *)(v9 + 8);
        v16 = *(unsigned __int8 *)(a1 + 32);
        v17 = *(unsigned __int8 *)(v9 + 40);
        v31 = 138543874;
        v32 = v15;
        v33 = 1024;
        v34 = v16;
        v35 = 1024;
        v36 = v17;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Warning: recvLogForceSendHandler: Refusing log force send from %{public}@ (busy %d) (status %d)", (uint8_t *)&v31, 0x18u);

      }
      return 2;
    }
  }
  else
  {
    v19 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E9B5C(a2, v19, v20, v21, v22, v23, v24, v25);
    return 8;
  }
}

uint64_t sub_1003C76AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  id v9;
  int v10;
  int v11;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  char v19;
  char v20;
  _BYTE buf[12];
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  v3 = sub_1003C0344(a1, a2);
  v4 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4))
    return 2;
  v5 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 328))(v5))
    return 2;
  v6 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 424))(v6))
    return 2;
  if (*(_BYTE *)(a1 + 32) || (v7 = *(unsigned __int8 *)(v3 + 40), v7 <= 8) && ((1 << v7) & 0x182) != 0)
  {
    v8 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(id *)(v3 + 8);
      v10 = *(unsigned __int8 *)(a1 + 32);
      v11 = *(unsigned __int8 *)(v3 + 40);
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)&buf[4] = v9;
      v22 = 1024;
      v23 = v10;
      v24 = 1024;
      v25 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: recvStoredLogAvailableHandler: Refusing stored log available from %{public}@ (busy %d) (status %d)", buf, 0x18u);

    }
    return 10;
  }
  else
  {
    v20 = 0;
    v13 = sub_100027F68();
    sub_100091AE8(buf, "AccessoryLogging");
    sub_100091AE8(__p, "SuppressAllPopups");
    v14 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v13 + 72))(v13, buf, __p, &v20);
    if (v20)
      v15 = v14;
    else
      v15 = 0;
    if (v19 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v25) < 0)
      operator delete(*(void **)buf);
    if (v15)
    {
      v16 = sub_100027F68();
      sub_100091AE8(buf, "AccessoryLogging");
      sub_100091AE8(__p, "StoredLogAvailable");
      (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v16 + 80))(v16, buf, __p, 1);
      if (v19 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v25) < 0)
        operator delete(*(void **)buf);
    }
    else
    {
      v17 = sub_100069D20();
      (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v17 + 168))(v17, 0, 3, *(unsigned int *)(v3 + 24));
    }
    return 0;
  }
}

void sub_1003C78FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003C7940(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t v19[8];
  int v20;
  __int16 v21;

  v5 = sub_1003C0344(a1, (uint64_t)a2);
  v20 = *a2;
  v21 = *((_WORD *)a2 + 2);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092C750);
  v6 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v20, 0);
  v7 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 328))(v7) & 1) != 0)
  {
    if (sub_10044936C(v6) || (sub_1003C0650() & 1) != 0)
    {
      if (v5)
      {
        v8 = sub_100069D20();
        (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 160))(v8, *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32), a3, *(unsigned int *)(v5 + 24));
        return 0;
      }
      else
      {
        v11 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
          sub_1006E9BC4((uint64_t)a2, v11, v12, v13, v14, v15, v16, v17);
        return 8;
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006E9C2C();
      return 11;
    }
  }
  else
  {
    v10 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v19 = 0;
      v9 = 2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Warning: recvFileRadarRequestHandler: Only supported on iOS", v19, 2u);
    }
    else
    {
      return 2;
    }
  }
  return v9;
}

uint64_t sub_1003C7AD8(uint64_t a1, uint64_t a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  _BOOL8 v16;
  const char *v17;
  const void *v18;
  size_t v19;
  NSObject *v20;
  _BOOL8 v21;
  const char *v22;
  size_t v23;
  int v24;
  size_t v25;
  size_t v26;
  size_t v27;
  size_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  uint64_t v32;
  size_t v33;
  int v34;
  size_t v35;
  size_t v36;
  size_t v37;
  size_t v38;
  size_t v39;
  size_t v40;
  size_t v41;
  size_t v42;
  size_t v43;
  size_t v44;
  size_t v45;
  size_t v46;
  size_t v47;
  size_t v48;
  size_t v49;
  size_t v50;
  size_t v51;
  size_t v52;
  size_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  uint8_t buf[4];
  int v59;
  __int16 v60;
  const char *v61;
  __int16 v62;
  _BYTE v63[10];
  __int16 v64;
  int v65;
  int v66;
  int v67;
  int v68;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092C750);
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v59) = *(_WORD *)(a2 + 4);
  v7 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v8 = a3 - 4;
  if (a3 <= 4)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E9C58();
    return 3;
  }
  v9 = a4[3] & 0x3F;
  if (v9 >= 0x20)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E9CB8();
    return 2;
  }
  v11 = a4[5];
  if ((v11 - 1) > 0xA)
  {
    v12 = 0;
LABEL_21:
    v20 = qword_1009997D8;
    v21 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR);
    if (v21)
    {
      v22 = sub_1003C8CCC(v21, v9);
      *(_DWORD *)buf = 67110146;
      v59 = v9;
      v60 = 2080;
      v61 = v22;
      v62 = 1024;
      *(_DWORD *)v63 = v11;
      *(_WORD *)&v63[4] = 1024;
      *(_DWORD *)&v63[6] = v12;
      v64 = 1024;
      v65 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "recvAwdHandler: Unexpected AWD data length for awdDataType: %u (%s), awdVersion %u: expected len %u actual %u", buf, 0x24u);
    }
    return 3;
  }
  v12 = *(unsigned __int16 *)&algn_10073FE55[64 * v11 + 1 + 2 * v9];
  if (v12 != v8)
    goto LABEL_21;
  v13 = v7;
  v14 = *(unsigned __int16 *)(v7 + 978);
  v15 = qword_1009997D8;
  v16 = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT);
  if (v16)
  {
    v17 = sub_1003C8CCC(v16, v9);
    *(_DWORD *)buf = 67109634;
    v59 = v9;
    v60 = 2080;
    v61 = v17;
    v62 = 1024;
    *(_DWORD *)v63 = v11;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "recvAwdHandler: awdDataType = %u (%s), awdVersion = %u", buf, 0x18u);
  }
  result = 0;
  v18 = a4 + 4;
  switch((int)v9)
  {
    case 0:
      if (v8 <= 0x299u)
        v19 = 666 - v8;
      else
        v19 = 0;
      bzero(&buf[v8], v19);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      sub_10047D35C((uint64_t)&v55, 5, v13);
      v57 = buf;
      if (v14)
        v68 |= v14;
      goto LABEL_61;
    case 1:
      if (v8 <= 0x312u)
        v23 = 787 - v8;
      else
        v23 = 0;
      bzero(&buf[v8], v23);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v24 = 6;
      goto LABEL_60;
    case 2:
      if (v8 <= 0x9Fu)
        v25 = 160 - v8;
      else
        v25 = 0;
      bzero(&buf[v8], v25);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      sub_10047D35C((uint64_t)&v55, 7, v13);
      v57 = buf;
      if (v14)
        v67 |= v14;
      goto LABEL_61;
    case 3:
      if (v8 <= 0x3Eu)
        v26 = 63 - v8;
      else
        v26 = 0;
      bzero(&buf[v8], v26);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      sub_10047D35C((uint64_t)&v55, 8, v13);
      v57 = buf;
      if (v14)
        v66 |= v14;
      goto LABEL_61;
    case 4:
      if (v8 <= 0x36u)
        v27 = 55 - v8;
      else
        v27 = 0;
      bzero(&buf[v8], v27);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v24 = 9;
      goto LABEL_60;
    case 5:
      if (v8 <= 0x161u)
        v28 = 354 - v8;
      else
        v28 = 0;
      bzero(&buf[v8], v28);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      sub_10047D35C((uint64_t)&v55, 10, v13);
      v57 = buf;
      if (v14)
        *(_DWORD *)&v63[3] |= v14;
      goto LABEL_61;
    case 6:
      if (v8 <= 0xB8u)
        v29 = 185 - v8;
      else
        v29 = 0;
      bzero(&buf[v8], v29);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      sub_10047D35C((uint64_t)&v55, 11, v13);
      v57 = buf;
      if (v14)
        *(_DWORD *)v63 |= v14;
      goto LABEL_61;
    case 7:
      if (v8 <= 0xB0u)
        v30 = 177 - v8;
      else
        v30 = 0;
      bzero(&buf[v8], v30);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v24 = 12;
      goto LABEL_60;
    case 8:
      if (v8 <= 0xF9u)
        v31 = 250 - v8;
      else
        v31 = 0;
      bzero(&buf[v8], v31);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v24 = 13;
LABEL_60:
      sub_10047D35C((uint64_t)&v55, v24, v13);
      v57 = buf;
LABEL_61:
      v32 = sub_100065478();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v32 + 56))(v32, &v55);
      goto LABEL_144;
    case 9:
      if (v8 <= 0x3ADu)
        v33 = 942 - v8;
      else
        v33 = 0;
      bzero(&buf[v8], v33);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v34 = 14;
      goto LABEL_143;
    case 10:
      if (v8 <= 0x224u)
        v35 = 549 - v8;
      else
        v35 = 0;
      bzero(&buf[v8], v35);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v34 = 15;
      goto LABEL_143;
    case 11:
      if (v8 <= 0x5Du)
        v36 = 94 - v8;
      else
        v36 = 0;
      bzero(&buf[v8], v36);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v34 = 16;
      goto LABEL_143;
    case 13:
      if (v8 <= 0x6Fu)
        v37 = 112 - v8;
      else
        v37 = 0;
      bzero(&buf[v8], v37);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v34 = 18;
      goto LABEL_143;
    case 14:
      if (v8 <= 0x8Au)
        v38 = 139 - v8;
      else
        v38 = 0;
      bzero(&buf[v8], v38);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v34 = 19;
      goto LABEL_143;
    case 15:
      if (v8 <= 0x3Bu)
        v39 = 60 - v8;
      else
        v39 = 0;
      bzero(&buf[v8], v39);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v34 = 20;
      goto LABEL_143;
    case 16:
      if (v8 <= 0x2Du)
        v40 = 46 - v8;
      else
        v40 = 0;
      bzero(&buf[v8], v40);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v34 = 21;
      goto LABEL_143;
    case 17:
      if (v8 <= 0x21Eu)
        v41 = 543 - v8;
      else
        v41 = 0;
      bzero(&buf[v8], v41);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      sub_10047D35C((uint64_t)&v55, 22, v13);
      v57 = buf;
      if (v14)
        *(_DWORD *)&v63[3] |= v14;
      goto LABEL_144;
    case 18:
      if (v8 <= 0x2A8u)
        v42 = 681 - v8;
      else
        v42 = 0;
      bzero(&buf[v8], v42);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v34 = 23;
      goto LABEL_143;
    case 19:
      if (v8 <= 0x2Du)
        v43 = 46 - v8;
      else
        v43 = 0;
      bzero(&buf[v8], v43);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v34 = 24;
      goto LABEL_143;
    case 20:
      if (v8 <= 0x3Au)
        v44 = 59 - v8;
      else
        v44 = 0;
      bzero(&buf[v8], v44);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v34 = 25;
      goto LABEL_143;
    case 23:
      if (v8 <= 0x351u)
        v45 = 850 - v8;
      else
        v45 = 0;
      bzero(&buf[v8], v45);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v34 = 28;
      goto LABEL_143;
    case 24:
      if (v8 <= 0x31u)
        v46 = 50 - v8;
      else
        v46 = 0;
      bzero(&buf[v8], v46);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v34 = 29;
      goto LABEL_143;
    case 25:
      if (v8 <= 0x28u)
        v47 = 41 - v8;
      else
        v47 = 0;
      bzero(&buf[v8], v47);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v34 = 30;
      goto LABEL_143;
    case 26:
      if (v8 <= 0x2DCu)
        v48 = 733 - v8;
      else
        v48 = 0;
      bzero(&buf[v8], v48);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v34 = 31;
      goto LABEL_143;
    case 27:
      if (v8 <= 0x79u)
        v49 = 122 - v8;
      else
        v49 = 0;
      bzero(&buf[v8], v49);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v34 = 32;
      goto LABEL_143;
    case 28:
      if (v8 <= 0x68u)
        v50 = 105 - v8;
      else
        v50 = 0;
      bzero(&buf[v8], v50);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v34 = 33;
      goto LABEL_143;
    case 29:
      if (v8 <= 0x65u)
        v51 = 102 - v8;
      else
        v51 = 0;
      bzero(&buf[v8], v51);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v34 = 34;
      goto LABEL_143;
    case 30:
      if (v8 <= 0x68u)
        v52 = 105 - v8;
      else
        v52 = 0;
      bzero(&buf[v8], v52);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v34 = 35;
      goto LABEL_143;
    case 31:
      if (v8 <= 0x3Eu)
        v53 = 63 - v8;
      else
        v53 = 0;
      bzero(&buf[v8], v53);
      memcpy(buf, v18, v8);
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v34 = 36;
LABEL_143:
      sub_10047D35C((uint64_t)&v55, v34, v13);
      v57 = buf;
LABEL_144:
      v54 = sub_100065478();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v54 + 48))(v54, &v55);
      result = 0;
      break;
    default:
      return result;
  }
  return result;
}

const char *sub_1003C86E8(uint64_t a1, int a2)
{
  char v2;

  v2 = a2 - 1;
  if ((a2 - 1) < 0xA && ((0x357u >> v2) & 1) != 0)
    return (&off_10092C820)[v2];
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006E9D18();
  return "UnknownType";
}

const char *sub_1003C8764(uint64_t a1, int a2)
{
  const char *result;
  int v3;
  const char *v4;
  const char *v5;

  if (a2 == 255)
    return "All";
  result = "Single";
  switch(a2 & 0x7F)
  {
    case 0:
      return result;
    case 1:
      v3 = (char)a2;
      v4 = "LeftPrimary";
      v5 = "LeftSecondary";
      goto LABEL_6;
    case 2:
      v3 = (char)a2;
      v4 = "RightPrimary";
      v5 = "RightSecondary";
LABEL_6:
      if (v3 < 0)
        result = v4;
      else
        result = v5;
      break;
    case 4:
      result = "Case";
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006E9D78();
      result = "UnknownDevice";
      break;
  }
  return result;
}

const char *sub_1003C8838(uint64_t a1, int a2)
{
  char v2;

  v2 = a2 - 1;
  if ((a2 - 1) < 0xA && ((0x357u >> v2) & 1) != 0)
    return (&off_10092C870)[v2];
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006E9D18();
  return "UnknownExt";
}

void sub_1003C88B4(uint64_t a1)
{
  unsigned __int8 v2;
  FILE *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  id v8;
  NSObject *v9;
  void *v10;
  id v11;
  uint8_t buf[4];
  void *v13;

  v2 = atomic_load((unsigned __int8 *)&qword_100992B38);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_100992B38))
  {
    qword_100992B30 = (uint64_t)objc_msgSend(CFSTR("/private/var/mobile/Library/Logs/Bluetooth/Accessory"), "length");
    __cxa_guard_release(&qword_100992B38);
  }
  v3 = *(FILE **)(a1 + 64);
  if (v3)
  {
    fclose(v3);
    *(_QWORD *)(a1 + 64) = 0;
    if (*(_BYTE *)(a1 + 56))
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithString:](NSMutableString, "stringWithString:", *(_QWORD *)(a1 + 48)));
      objc_msgSend(v4, "insertString:atIndex:", CFSTR("Corrupt"), qword_100992B30);
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
      v6 = *(_QWORD *)(a1 + 48);
      v11 = 0;
      v7 = objc_msgSend(v5, "moveItemAtPath:toPath:error:", v6, v4, &v11);
      v8 = v11;

      v9 = qword_1009997D8;
      if (v7)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v13 = v4;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "closeCurrentLogFile: Renaming potentially corrupt file to %@", buf, 0xCu);
        }
        objc_storeStrong((id *)(a1 + 48), v4);
      }
      else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      {
        sub_1006E9DD8((uint64_t *)(a1 + 48), (uint64_t)v8, v9);
      }

    }
    objc_msgSend(*(id *)(a1 + 80), "addObject:", *(_QWORD *)(a1 + 48));
    v10 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;

    *(_BYTE *)(a1 + 56) = 0;
  }
}

void sub_1003C8A84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_100992B38);
  _Unwind_Resume(a1);
}

id sub_1003C8AC0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  void *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  id v11;
  NSObject *v13;
  uint64_t v14;

  if (a2 <= 3)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E9E54();
LABEL_19:
    v11 = 0;
    return v11;
  }
  if (((8 * *(unsigned __int8 *)(a3 + 3)) | 4) != a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E9F9C();
    goto LABEL_19;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", *(unsigned __int8 *)(a3 + 3)));
  if (*(_BYTE *)(a3 + 3))
  {
    v5 = 0;
    v6 = a3 + 4;
LABEL_7:
    v7 = 0;
    while (1)
    {
      v8 = *(unsigned __int8 *)(v6 + v7);
      if (*(_BYTE *)(v6 + v7))
      {
        if (!((v8 & 0x80) != 0 ? __maskrune(v8, 0x40000uLL) : _DefaultRuneLocale.__runetype[v8] & 0x40000))
          break;
      }
      if (++v7 == 4)
      {
        if (*(_DWORD *)(a3 + 8 * v5 + 8))
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a3 + 8 * v5 + 4, 8));
          objc_msgSend(v4, "setObject:atIndexedSubscript:", v10, v5);

          ++v5;
          v6 += 8;
          if (v5 < *(unsigned __int8 *)(a3 + 3))
            goto LABEL_7;
          goto LABEL_16;
        }
        v13 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
          sub_1006E9EB8(v5, v13, v14);
LABEL_22:
        v11 = 0;
        goto LABEL_23;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006E9F2C();
    goto LABEL_22;
  }
LABEL_16:
  v11 = v4;
LABEL_23:

  return v11;
}

void sub_1003C8CAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const char *sub_1003C8CCC(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x1F)
    return "Unknown";
  else
    return (&off_10092C8C0)[(char)a2];
}

NSMutableOrderedSet *sub_1003C8CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  const __CFString *v14;
  const __CFString *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  int v19;
  int v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  NSObject *v29;
  uint32_t v30;
  double v31;
  NSObject *v32;
  void *v33;
  void *v34;
  id v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  unsigned __int8 v39;
  const __CFString *v40;
  unsigned __int8 v41;
  NSObject *v42;
  id v43;
  NSObject *v44;
  void *v46;
  NSMutableOrderedSet *v47;
  uint64_t v48;
  __CFString *v49;
  __CFString *v50;
  int v52;
  void *v53;
  id obj;
  _QWORD v56[4];
  id v57;
  id v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  void *__p[2];
  char v64;
  unsigned __int8 v65;
  uint64_t v66;
  const __CFString *v67;
  const __CFString *v68;
  const __CFString *v69;
  _QWORD v70[2];
  uint8_t v71[128];
  _BYTE buf[12];
  char v73;

  v47 = objc_opt_new(NSMutableOrderedSet);
  v65 = 0;
  v2 = sub_100027F68();
  sub_100091AE8(buf, "AccessoryLogging");
  sub_100091AE8(__p, "CrashAnalyticsTestMode");
  v3 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v2 + 72))(v2, buf, __p, &v65);
  if (v65)
    v4 = v3;
  else
    v4 = 0;
  if (v64 < 0)
    operator delete(__p[0]);
  if ((v73 & 0x80000000) == 0)
  {
    if (!v4)
      goto LABEL_16;
LABEL_10:
    v5 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "dispatchCrashLogsToAnalytics: Test mode flag is set", buf, 2u);
    }
    v6 = sub_100027F68();
    sub_100091AE8(buf, "AccessoryLogging");
    sub_100091AE8(__p, "CrashAnalyticsTestMode");
    (*(void (**)(uint64_t, _BYTE *, void **, _QWORD))(*(_QWORD *)v6 + 80))(v6, buf, __p, 0);
    if (v64 < 0)
      operator delete(__p[0]);
    if (v73 < 0)
      operator delete(*(void **)buf);
    goto LABEL_16;
  }
  operator delete(*(void **)buf);
  if (v4)
    goto LABEL_10;
LABEL_16:
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  obj = *(id *)(a2 + 80);
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v71, 16);
  if (!v7)
  {
    v52 = 0;
    goto LABEL_84;
  }
  v52 = 0;
  v8 = *(_QWORD *)v60;
  v48 = kOSALogOptionOverrideFilePrefix;
  do
  {
    v9 = 0;
    do
    {
      if (*(_QWORD *)v60 != v8)
        objc_enumerationMutation(obj);
      v10 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * (_QWORD)v9);
      if ((objc_msgSend(v10, "hasPrefix:", CFSTR("/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash")) & 1) != 0)
      {
        if ((objc_msgSend(v10, "hasSuffix:", CFSTR(".bin")) & 1) != 0)
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a2 + 104), "objectForKey:", v10));
          if (!v11)
          {
            v18 = qword_1009997D8;
            if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v10;
              _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "dispatchCrashLogsToAnalytics: No metadata for %@", buf, 0xCu);
            }
            goto LABEL_69;
          }
          v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:](NSData, "dataWithContentsOfFile:", v10));
          v13 = v12;
          if (!v12 || !objc_msgSend(v12, "length"))
          {
            v17 = qword_1009997D8;
            if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v10;
              _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "dispatchCrashLogsToAnalytics: Could not read %@", buf, 0xCu);
            }
            goto LABEL_68;
          }
          if ((objc_msgSend(v10, "hasPrefix:", CFSTR("/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash_RightPrimary")) & 1) != 0)
          {
            v14 = CFSTR("primary");
LABEL_28:
            v15 = CFSTR("right");
LABEL_38:
            v19 = 0;
            v20 = 0;
            v70[0] = v14;
            v68 = CFSTR("role");
            v69 = CFSTR("side");
LABEL_39:
            v70[1] = v15;
            v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v70, &v68, 2));
            if (v20)

            if (v19)
            v21 = sub_1003C97CC(a1, v13, v10, v11, v53, *(unsigned int *)(a2 + 24), v65);
            v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
            if (v22)
            {
              v23 = sub_10003BE44();
              if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 328))(v23) & 1) != 0
                || (v24 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 384))(v24) & 1) != 0)
                || (v25 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 424))(v25)))
              {
                v26 = sub_100027F68();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26))
                {
                  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "stringByDeletingPathExtension"));
                  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "stringByAppendingPathExtension:", CFSTR("json")));

                  if (objc_msgSend(v22, "writeToFile:atomically:", v28, 0))
                  {
                    -[NSMutableOrderedSet addObject:](v47, "addObject:", v28);
                  }
                  else
                  {
                    v29 = qword_1009997D8;
                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      *(_QWORD *)&buf[4] = v28;
                      _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "dispatchCrashLogsToAnalytics: Failed to write analytics file: %@", buf, 0xCu);
                    }
                  }

                }
              }
              v30 = arc4random_uniform(0xF4241u);
              v31 = *(double *)(a1 + 440);
              if ((double)v30 / 1000000.0 <= v31)
              {
                v66 = v48;
                v67 = CFSTR("AccessoryCrash");
                v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v67, &v66, 1));
                v58 = 0;
                v56[0] = _NSConcreteStackBlock;
                v56[1] = 3221225472;
                v56[2] = sub_1003C9FA0;
                v56[3] = &unk_10092C6B0;
                v57 = v22;
                v34 = (void *)objc_claimAutoreleasedReturnValue(+[OSALog createForSubmission:metadata:options:error:writing:](OSALog, "createForSubmission:metadata:options:error:writing:", CFSTR("305"), 0, v33, &v58, v56));
                v35 = v58;

                v36 = qword_1009997D8;
                if (!v34 || v35)
                {
                  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 138412290;
                    *(_QWORD *)&buf[4] = v35;
                    _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "dispatchCrashLogsToAnalytics: Could not submit processed crash log to analytics, error %@", buf, 0xCu);
                  }
                }
                else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
                {
                  v37 = objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "filepath"));
                  *(_DWORD *)buf = 138412290;
                  *(_QWORD *)&buf[4] = v37;
                  v46 = (void *)v37;
                  _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "dispatchCrashLogsToAnalytics: Submitted to analytics: %@", buf, 0xCu);

                }
              }
              else
              {
                v32 = qword_1009997D8;
                if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 134217984;
                  *(double *)&buf[4] = v31;
                  _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "dispatchCrashLogsToAnalytics: Skipping analytics submission due to %f sampling rate", buf, 0xCu);
                }
              }
            }
            v38 = qword_1009997D8;
            if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v10;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "dispatchCrashLogsToAnalytics: Processed %@", buf, 0xCu);
            }

            ++v52;
LABEL_68:

LABEL_69:
            goto LABEL_70;
          }
          if ((objc_msgSend(v10, "hasPrefix:", CFSTR("/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash_LeftPrimary")) & 1) != 0)
          {
            v14 = CFSTR("primary");
          }
          else
          {
            if ((objc_msgSend(v10, "hasPrefix:", CFSTR("/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash_RightSecondary")) & 1) != 0)
            {
              v14 = CFSTR("secondary");
              goto LABEL_28;
            }
            if ((objc_msgSend(v10, "hasPrefix:", CFSTR("/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash_LeftSecondary")) & 1) == 0)
            {
              v39 = objc_msgSend(v10, "hasPrefix:", CFSTR("/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash_Single"));
              v40 = CFSTR("single");
              if ((v39 & 1) != 0
                || (v41 = objc_msgSend(v10, "hasPrefix:", CFSTR("/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash_Case")), v40 = CFSTR("case"), (v41 & 1) != 0))
              {
                v19 = 0;
                v68 = CFSTR("role");
              }
              else
              {
                v42 = qword_1009997D8;
                if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  *(_QWORD *)&buf[4] = v10;
                  _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "dispatchCrashLogsToAnalytics: Could not determine role for %@", buf, 0xCu);
                }
                v68 = CFSTR("role");
                v40 = (const __CFString *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
                v19 = 1;
                v49 = (__CFString *)v40;
              }
              v69 = CFSTR("side");
              v70[0] = v40;
              v20 = 1;
              v50 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
              v15 = v50;
              goto LABEL_39;
            }
            v14 = CFSTR("secondary");
          }
          v15 = CFSTR("left");
          goto LABEL_38;
        }
        v16 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v10;
          _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "dispatchCrashLogsToAnalytics: File %@ lacks .bin extension", buf, 0xCu);
        }
      }
LABEL_70:
      v9 = (char *)v9 + 1;
    }
    while (v7 != v9);
    v43 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v59, v71, 16);
    v7 = v43;
  }
  while (v43);
LABEL_84:

  v44 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v52;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "dispatchCrashLogsToAnalytics: Processed %d crash logs", buf, 8u);
  }
  return v47;
}

void sub_1003C969C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  if (a44 < 0)
    operator delete(__p);
  if (*(char *)(v44 - 137) < 0)
    operator delete(*(void **)(v44 - 160));

  _Unwind_Resume(a1);
}

id sub_1003C97CC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  unint64_t v22;
  int v23;
  id v24;
  _DWORD *v25;
  unint64_t v26;
  id v27;
  void *v28;
  void *v29;
  NSMutableDictionary *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  NSObject *v35;
  int v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  NSObject *v41;
  NSObject *v42;
  int v44;
  id v45;
  void *v46;
  void *v47;
  NSMutableArray *v48;
  void *v49;
  id v50;
  NSMutableDictionary *v51;
  id v52;
  id v53;
  uint8_t v54;
  _BYTE v55[15];
  _QWORD v56[2];
  _QWORD v57[2];
  uint8_t buf[4];
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  id v65;
  _QWORD v66[17];
  _QWORD v67[5];
  uint64_t v68;
  void *v69;
  NSMutableArray *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;

  v52 = a2;
  v50 = a3;
  v12 = a4;
  v45 = a5;
  v51 = objc_opt_new(NSMutableDictionary);
  v66[0] = CFSTR("bug_type");
  v66[1] = CFSTR("UI_country_code");
  v67[0] = CFSTR("305");
  v67[1] = CFSTR("US");
  v66[2] = CFSTR("log-version");
  v66[3] = CFSTR("accessory_type");
  v67[2] = CFSTR("1.0");
  v67[3] = CFSTR("audio");
  v67[4] = v45;
  v66[4] = CFSTR("application-info");
  v66[5] = CFSTR("accessory_pid");
  v68 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a6));
  v66[6] = CFSTR("analytics_test_mode");
  v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a7));
  v69 = v49;
  v66[7] = CFSTR("crashlogs");
  v48 = objc_opt_new(NSMutableArray);
  v70 = v48;
  v66[8] = CFSTR("accessory_crashreporter_key");
  v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v71 = v47;
  v66[9] = CFSTR("accessory_os_version");
  v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v72 = v46;
  v66[10] = CFSTR("accessory_os_train");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v73 = v13;
  v66[11] = CFSTR("accessory_machine_config");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v74 = v14;
  v66[12] = CFSTR("accessory_release_type");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v75 = v15;
  v66[13] = CFSTR("usage_since_last_crash");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v76 = v16;
  v66[14] = CFSTR("usage_since_last_crash_user_facing");
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v77 = v17;
  v66[15] = CFSTR("usage_since_last_crash_in_ear");
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v78 = v18;
  v66[16] = CFSTR("accessory_fusing");
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v79 = v19;
  v20 = (void *)v68;
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v67, v66, 17));
  -[NSMutableDictionary setDictionary:](v51, "setDictionary:", v21);

  v22 = 0;
  v23 = 0;
  do
  {
    if ((unint64_t)objc_msgSend(v12, "count") <= v22)
    {
      v41 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006EA12C(v22, (uint64_t)v50, v41);
      goto LABEL_21;
    }
    v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectAtIndexedSubscript:", v22)));
    v25 = objc_msgSend(v24, "bytes");

    v26 = v25[1];
    if ((char *)objc_msgSend(v52, "length") - v23 < (char *)v26)
    {
      v42 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      {
        v44 = v25[1];
        *(_DWORD *)buf = 67109890;
        v59 = v22;
        v60 = 1024;
        v61 = v44;
        v62 = 1024;
        v63 = v23;
        v64 = 2112;
        v65 = v50;
        _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "processCrashInstanceForAnalytics: Chunk %d of size %d at offset %d of %@ extends past the end of the file", buf, 0x1Eu);
      }
LABEL_21:
      v40 = 0;
      goto LABEL_26;
    }
    LOBYTE(v59) = 0;
    *(_DWORD *)buf = 0;
    *(_DWORD *)buf = *v25;
    LOBYTE(v59) = 0;
    v27 = objc_retainAutorelease(v52);
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytesNoCopy:length:freeWhenDone:](NSData, "dataWithBytesNoCopy:length:freeWhenDone:", (char *)objc_msgSend(v27, "bytes") + v23, v25[1], 0));
    if (v28)
    {
      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@, %s core"), v50, buf));
      v30 = sub_1003C9FAC((uint64_t)v29, v28, v29, v51);
      v31 = (void *)objc_claimAutoreleasedReturnValue(v30);

      if (v31)
      {
        v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v51, "objectForKeyedSubscript:", CFSTR("crashlogs")));
        v56[0] = CFSTR("core");
        v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", buf, 4));
        v56[1] = CFSTR("crashlog");
        v57[0] = v33;
        v57[1] = v31;
        v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v57, v56, 2));
        objc_msgSend(v32, "addObject:", v34);

      }
    }
    else
    {
      v35 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006EA0F0(&v54, v55, v35);
    }
    v36 = v25[1];

    ++v22;
    v23 += v36;
  }
  while ((unint64_t)objc_msgSend(v27, "length") > v23);
  if (objc_msgSend(v12, "count") != (id)v22
    && os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
  {
    sub_1006EA084();
  }
  v53 = 0;
  v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v51, 1, &v53));
  v38 = v53;
  v39 = v38;
  if (!v37 || v38)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006EA010();
    v40 = 0;
  }
  else
  {
    v40 = v37;
  }

LABEL_26:
  return v40;
}

void sub_1003C9E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

id sub_1003C9FA0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "writeData:", *(_QWORD *)(a1 + 32));
}

NSMutableDictionary *sub_1003C9FAC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6;
  const __CFDictionary *v7;
  NSObject *v8;
  NSMutableArray *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  const void *Value;
  const void *v20;
  CFTypeID v21;
  const void *v22;
  const void *v23;
  CFTypeID v24;
  const void *v25;
  const void *v26;
  CFTypeID v27;
  const __CFArray *v28;
  const __CFArray *v29;
  CFTypeID v30;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v33;
  CFTypeID v34;
  const __CFString *v35;
  const __CFString *v36;
  CFTypeID v37;
  const char *CStringPtr;
  const __CFString *v39;
  const __CFString *v40;
  CFTypeID v41;
  const char *v42;
  const __CFNumber *v43;
  const __CFNumber *v44;
  CFTypeID v45;
  const __CFNumber *v46;
  const __CFNumber *v47;
  CFTypeID v48;
  int v49;
  int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void *v55;
  void *v56;
  int v57;
  int v58;
  NSObject *v59;
  uint64_t v60;
  NSObject *v61;
  const char *v62;
  uint64_t v63;
  uint32_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const void *v68;
  const void *v69;
  CFTypeID v70;
  const __CFNumber *v71;
  const __CFNumber *v72;
  CFTypeID v73;
  const __CFNumber *v74;
  const __CFNumber *v75;
  CFTypeID v76;
  int v77;
  int v78;
  char *v79;
  int v80;
  uint64_t v81;
  void *v82;
  void *v83;
  void *v84;
  CFTypeID v85;
  NSObject *v86;
  void *v87;
  void *v88;
  CFTypeID v89;
  NSObject *v90;
  void *v91;
  void *v92;
  void *v93;
  const void *v94;
  const void *v95;
  CFTypeID v96;
  uint64_t v97;
  void *v98;
  CFTypeID v99;
  NSObject *v100;
  void *v101;
  void *v102;
  CFTypeID v103;
  NSObject *v104;
  void *v105;
  void *v106;
  CFTypeID v107;
  NSObject *v108;
  void *v109;
  void *v110;
  CFTypeID v111;
  NSObject *v112;
  void *v113;
  CFTypeRef v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  uint64_t v119;
  const void *v120;
  const void *v121;
  CFTypeID v122;
  uint64_t v123;
  const void *v124;
  const void *v125;
  CFTypeID v126;
  void *v127;
  void *v128;
  CFTypeID v129;
  id v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  NSObject *v134;
  const void *v135;
  const void *v136;
  CFTypeID v137;
  NSObject *v138;
  void *v139;
  void *v140;
  CFTypeID v141;
  id v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  NSObject *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  void *v159;
  unsigned int v160;
  const char *v161;
  void *v162;
  void *v163;
  void *v164;
  char *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  NSObject *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  NSObject *v183;
  void *v184;
  uint64_t v185;
  void *v186;
  uint64_t j;
  void *v188;
  void *v189;
  void *v190;
  const char *v191;
  unint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  NSObject *v196;
  NSObject *v197;
  NSMutableDictionary *v198;
  void *v199;
  void *v200;
  void *v201;
  void *v202;
  NSMutableDictionary *v204;
  NSMutableArray *v205;
  char *v206;
  uint64_t v207;
  NSMutableArray *v208;
  void *v209;
  void *v210;
  void *v211;
  void *v212;
  void *v213;
  void *v214;
  char *cf;
  CFTypeRef cfa;
  id v217;
  id v218;
  id v219;
  NSMutableDictionary *v220;
  const __CFDictionary *theDict;
  uint64_t v222;
  uint64_t valuePtr;
  uint8_t buf[32];
  uint8_t v225[4];
  int v226;
  _QWORD v227[4];
  _QWORD v228[4];
  _QWORD v229[2];
  _QWORD v230[2];
  _QWORD v231[9];
  _QWORD v232[9];

  v6 = a2;
  v219 = a3;
  v217 = v6;
  v218 = a4;
  v7 = (const __CFDictionary *)RTBuddyCrashlogDecode(v6);
  if (v7)
  {
    theDict = v7;
    if (!CFDictionaryGetCount(v7))
    {
      v8 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v219;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: processCrashLogForAnalytics: Empty dictionary returned for %@", buf, 0xCu);
      }
    }
    v220 = objc_opt_new(NSMutableDictionary);
    v231[0] = CFSTR("mailboxes");
    v9 = objc_opt_new(NSMutableArray);
    v232[0] = v9;
    v231[1] = CFSTR("panic");
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v232[1] = v10;
    v231[2] = CFSTR("crashlog-version");
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v232[2] = v11;
    v231[3] = CFSTR("exception");
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v232[3] = v12;
    v231[4] = CFSTR("uuid");
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v232[4] = v13;
    v231[5] = CFSTR("call-stack");
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v232[5] = v14;
    v231[6] = CFSTR("tasks");
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v232[6] = v15;
    v231[7] = CFSTR("registers");
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v232[7] = v16;
    v231[8] = CFSTR("scenario");
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
    v232[8] = v17;
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v232, v231, 9));
    -[NSMutableDictionary setDictionary:](v220, "setDictionary:", v18);

    Value = CFDictionaryGetValue(theDict, CFSTR("panic"));
    v20 = Value;
    if (Value)
    {
      v21 = CFGetTypeID(Value);
      if (v21 == CFStringGetTypeID())
        -[NSMutableDictionary setObject:forKey:](v220, "setObject:forKey:", v20, CFSTR("panic"));
    }
    v22 = CFDictionaryGetValue(theDict, CFSTR("crashlog-version"));
    v23 = v22;
    if (v22)
    {
      v24 = CFGetTypeID(v22);
      if (v24 == CFStringGetTypeID())
        -[NSMutableDictionary setObject:forKey:](v220, "setObject:forKey:", v23, CFSTR("crashlog-version"));
    }
    v25 = CFDictionaryGetValue(theDict, CFSTR("exception"));
    v26 = v25;
    if (v25)
    {
      v27 = CFGetTypeID(v25);
      if (v27 == CFStringGetTypeID())
        -[NSMutableDictionary setObject:forKey:](v220, "setObject:forKey:", v26, CFSTR("exception"));
    }
    v28 = (const __CFArray *)CFDictionaryGetValue(theDict, CFSTR("sections"));
    v29 = v28;
    if (v28)
    {
      v30 = CFGetTypeID(v28);
      if (v30 == CFArrayGetTypeID())
      {
        for (i = 0; ; ++i)
        {
          if (i >= CFArrayGetCount(v29))
            goto LABEL_251;
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v29, i);
          v33 = ValueAtIndex;
          if (!ValueAtIndex || (v34 = CFGetTypeID(ValueAtIndex), v34 != CFDictionaryGetTypeID()))
          {
            v60 = qword_1009997D8;
            if (!os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
              continue;
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v219;
            v61 = v60;
            v62 = "processCrashLogForAnalytics: Invalid crash log section in %@";
            goto LABEL_63;
          }
          v35 = (const __CFString *)CFDictionaryGetValue(v33, CFSTR("section-name"));
          v36 = v35;
          if (!v35 || (v37 = CFGetTypeID(v35), v37 != CFStringGetTypeID()))
          {
            v63 = qword_1009997D8;
            if (!os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
              continue;
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v219;
            v61 = v63;
            v62 = "processCrashLogForAnalytics: Invalid crash log section name in %@";
LABEL_63:
            v64 = 12;
            goto LABEL_64;
          }
          CStringPtr = CFStringGetCStringPtr(v36, 0x8000100u);
          if (CStringPtr)
          {
            v39 = (const __CFString *)CFDictionaryGetValue(v33, CFSTR("section-signature"));
            v40 = v39;
            if (v39 && (v41 = CFGetTypeID(v39), v41 == CFStringGetTypeID()))
            {
              v42 = CFStringGetCStringPtr(v40, 0x8000100u);
              if (v42)
              {
                if (!strcmp(CStringPtr, "Version Section") && !strcmp(v42, "Cver"))
                {
                  v68 = CFDictionaryGetValue(v33, CFSTR("uuid"));
                  v69 = v68;
                  if (v68 && (v70 = CFGetTypeID(v68), v70 == CFStringGetTypeID()))
                  {
                    -[NSMutableDictionary setObject:forKey:](v220, "setObject:forKey:", v69, CFSTR("uuid"));
                  }
                  else
                  {
                    v97 = qword_1009997D8;
                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      *(_QWORD *)&buf[4] = v219;
                      v61 = v97;
                      v62 = "processCrashLogForAnalytics: Invalid UUID in %@";
                      goto LABEL_63;
                    }
                  }
                }
                else if (!strcmp(CStringPtr, "Callstack Section") && !strcmp(v42, "Ccst"))
                {
                  v82 = (void *)CFDictionaryGetValue(v33, CFSTR("stack"));
                  v83 = v214;
                  v84 = v82;
                  if (!v82 || (v85 = CFGetTypeID(v82), v85 != CFArrayGetTypeID()))
                  {
                    v86 = qword_1009997D8;
                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      *(_QWORD *)&buf[4] = v219;
                      _os_log_error_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Invalid stack in %@", buf, 0xCu);
                    }
                    v84 = 0;
                  }
                  v87 = (void *)CFDictionaryGetValue(v33, CFSTR("stack-description"));
                  v88 = v87;
                  if (!v87 || (v89 = CFGetTypeID(v87), v89 != CFStringGetTypeID()))
                  {
                    v90 = qword_1009997D8;
                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      *(_QWORD *)&buf[4] = v219;
                      _os_log_error_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Invalid stack description in %@", buf, 0xCu);
                    }
                    v88 = 0;
                  }
                  v229[0] = CFSTR("stack");
                  v91 = v84;
                  if (!v84)
                  {
                    v212 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
                    v91 = v212;
                  }
                  v230[0] = v91;
                  v229[1] = CFSTR("stack-description");
                  v92 = v88;
                  if (!v88)
                  {
                    v83 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
                    v92 = v83;
                  }
                  v230[1] = v92;
                  v214 = v83;
                  v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v230, v229, 2));
                  -[NSMutableDictionary setObject:forKey:](v220, "setObject:forKey:", v93, CFSTR("call-stack"));

                  if (!v88)
                  if (!v84)

                }
                else if (!strcmp(CStringPtr, "Task List Section") && !strcmp(v42, "Crtk"))
                {
                  v94 = CFDictionaryGetValue(v33, CFSTR("tasks"));
                  v95 = v94;
                  if (v94 && (v96 = CFGetTypeID(v94), v96 == CFArrayGetTypeID()))
                  {
                    -[NSMutableDictionary setObject:forKey:](v220, "setObject:forKey:", v95, CFSTR("tasks"));
                  }
                  else
                  {
                    v123 = qword_1009997D8;
                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      *(_QWORD *)&buf[4] = v219;
                      v61 = v123;
                      v62 = "processCrashLogForAnalytics: Invalid tasks in %@";
                      goto LABEL_63;
                    }
                  }
                }
                else if (!strcmp(CStringPtr, "Mailbox Section") && !strcmp(v42, "Cmbx"))
                {
                  cfa = CFDictionaryGetValue(v33, CFSTR("registers"));
                  v98 = v213;
                  if (!cfa || (v99 = CFGetTypeID(cfa), v99 != CFDictionaryGetTypeID()))
                  {
                    v100 = qword_1009997D8;
                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      *(_QWORD *)&buf[4] = v219;
                      _os_log_error_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Invalid mailbox registers in %@", buf, 0xCu);
                    }
                    cfa = 0;
                  }
                  v101 = (void *)CFDictionaryGetValue(v33, CFSTR("mailbox-error"));
                  v102 = v101;
                  if (!v101 || (v103 = CFGetTypeID(v101), v103 != CFStringGetTypeID()))
                  {
                    v104 = qword_1009997D8;
                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      *(_QWORD *)&buf[4] = v219;
                      _os_log_error_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Invalid mailbox error in %@", buf, 0xCu);
                    }
                    v102 = 0;
                  }
                  v105 = (void *)CFDictionaryGetValue(v33, CFSTR("route-number"));
                  v106 = v105;
                  if (!v105 || (v107 = CFGetTypeID(v105), v107 != CFStringGetTypeID()))
                  {
                    v108 = qword_1009997D8;
                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      *(_QWORD *)&buf[4] = v219;
                      _os_log_error_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Invalid route number in %@", buf, 0xCu);
                    }
                    v106 = 0;
                  }
                  v109 = (void *)CFDictionaryGetValue(v33, CFSTR("log"));
                  v110 = v109;
                  if (!v109 || (v111 = CFGetTypeID(v109), v111 != CFStringGetTypeID()))
                  {
                    v112 = qword_1009997D8;
                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      *(_QWORD *)&buf[4] = v219;
                      _os_log_error_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Invalid log in %@", buf, 0xCu);
                    }
                    v110 = 0;
                  }
                  v113 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v220, "objectForKey:", CFSTR("mailboxes")));
                  v227[0] = CFSTR("registers");
                  v114 = cfa;
                  if (!cfa)
                  {
                    v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
                    v114 = v98;
                  }
                  v228[0] = v114;
                  v227[1] = CFSTR("mailbox-error");
                  v115 = v102;
                  v213 = v98;
                  if (!v102)
                  {
                    v211 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
                    v115 = v211;
                  }
                  v228[1] = v115;
                  v227[2] = CFSTR("route-number");
                  v116 = v106;
                  if (!v106)
                  {
                    v210 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
                    v116 = v210;
                  }
                  v228[2] = v116;
                  v227[3] = CFSTR("log");
                  v117 = v110;
                  if (!v110)
                  {
                    v209 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
                    v117 = v209;
                  }
                  v228[3] = v117;
                  v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v228, v227, 4));
                  objc_msgSend(v113, "addObject:", v118);

                  if (!v110)
                  if (!v106)

                  if (!v102)
                  if (!cfa)

                }
                else if (!strcmp(CStringPtr, "Register Frame Section") && !strcmp(v42, "CrgM"))
                {
                  v120 = CFDictionaryGetValue(v33, CFSTR("registers"));
                  v121 = v120;
                  if (v120 && (v122 = CFGetTypeID(v120), v122 == CFStringGetTypeID()))
                  {
                    -[NSMutableDictionary setObject:forKey:](v220, "setObject:forKey:", v121, CFSTR("registers"));
                  }
                  else
                  {
                    v133 = qword_1009997D8;
                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      *(_QWORD *)&buf[4] = v219;
                      v61 = v133;
                      v62 = "processCrashLogForAnalytics: Invalid registers in %@";
                      goto LABEL_63;
                    }
                  }
                }
                else if (!strcmp(CStringPtr, "Product Version Section") && !strcmp(v42, "CPvr"))
                {
                  v124 = CFDictionaryGetValue(v33, CFSTR("Machine"));
                  v125 = v124;
                  if (v124 && (v126 = CFGetTypeID(v124), v126 == CFStringGetTypeID()))
                  {
                    objc_msgSend(v218, "setObject:forKey:", v125, CFSTR("accessory_machine_config"));
                  }
                  else
                  {
                    v134 = qword_1009997D8;
                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      *(_QWORD *)&buf[4] = v219;
                      _os_log_error_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Invalid Machine in %@", buf, 0xCu);
                    }
                  }
                  v135 = CFDictionaryGetValue(v33, CFSTR("Build"));
                  v136 = v135;
                  if (v135 && (v137 = CFGetTypeID(v135), v137 == CFStringGetTypeID()))
                  {
                    objc_msgSend(v218, "setObject:forKey:", v136, CFSTR("accessory_release_type"));
                  }
                  else
                  {
                    v138 = qword_1009997D8;
                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      *(_QWORD *)&buf[4] = v219;
                      _os_log_error_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Invalid Build in %@", buf, 0xCu);
                    }
                  }
                  v139 = (void *)CFDictionaryGetValue(v33, CFSTR("OS version"));
                  v140 = v139;
                  if (v139 && (v141 = CFGetTypeID(v139), v141 == CFStringGetTypeID()))
                  {
                    v142 = v140;
                    objc_msgSend(v218, "setObject:forKey:", v142, CFSTR("accessory_os_version"));
                    v143 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v142, "componentsSeparatedByString:", CFSTR(".")));
                    v144 = v143;
                    if (v143 && objc_msgSend(v143, "count"))
                    {
                      v145 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v144, "objectAtIndexedSubscript:", 0));
                      v146 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("RTKitOS "), "stringByAppendingString:", v145));
                      objc_msgSend(v218, "setObject:forKey:", v146, CFSTR("accessory_os_train"));

                    }
                    else
                    {
                      v151 = qword_1009997D8;
                      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 138412546;
                        *(_QWORD *)&buf[4] = v142;
                        *(_WORD *)&buf[12] = 2112;
                        *(_QWORD *)&buf[14] = v219;
                        _os_log_error_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Could not determine OS train for version '%@' for %@", buf, 0x16u);
                      }
                    }

                  }
                  else
                  {
                    v147 = qword_1009997D8;
                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      *(_QWORD *)&buf[4] = v219;
                      v61 = v147;
                      v62 = "processCrashLogForAnalytics: Invalid OS version in %@";
                      goto LABEL_63;
                    }
                  }
                }
                else if (!strcmp(CStringPtr, "String Section") && !strcmp(v42, "Cstr"))
                {
                  v127 = (void *)CFDictionaryGetValue(v33, CFSTR("contents"));
                  v128 = v127;
                  if (v127 && (v129 = CFGetTypeID(v127), v129 == CFStringGetTypeID()))
                  {
                    v130 = v128;
                    if (objc_msgSend(v130, "hasPrefix:", CFSTR("CrashReporterKey:")))
                    {
                      v131 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v130, "substringFromIndex:", objc_msgSend(CFSTR("CrashReporterKey:"), "length")));
                      objc_msgSend(v218, "setObject:forKey:", v131, CFSTR("accessory_crashreporter_key"));

                    }
                  }
                  else
                  {
                    v148 = qword_1009997D8;
                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      *(_QWORD *)&buf[4] = v219;
                      v61 = v148;
                      v62 = "processCrashLogForAnalytics: Invalid string section contents in %@";
                      goto LABEL_63;
                    }
                  }
                }
                else if (!strcmp(v42, "MTBF"))
                {
                  LODWORD(v222) = 0;
                  *(_DWORD *)v225 = 0;
                  v71 = (const __CFNumber *)CFDictionaryGetValue(v33, CFSTR("section-offset"));
                  v72 = v71;
                  if (v71 && (v73 = CFGetTypeID(v71), v73 == CFNumberGetTypeID()))
                  {
                    if (CFNumberGetValue(v72, kCFNumberIntType, &v222))
                    {
                      v74 = (const __CFNumber *)CFDictionaryGetValue(v33, CFSTR("section-size"));
                      v75 = v74;
                      if (v74 && (v76 = CFGetTypeID(v74), v76 == CFNumberGetTypeID()))
                      {
                        if (CFNumberGetValue(v75, kCFNumberIntType, v225))
                        {
                          v77 = *(_DWORD *)v225;
                          if (*(int *)v225 < 1
                            || (v78 = v222, (v222 & 0x80000000) != 0)
                            || (unint64_t)objc_msgSend(v217, "length") <= (v78 + v77))
                          {
                            v154 = qword_1009997D8;
                            if (!os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                              continue;
                            *(_DWORD *)buf = 67109634;
                            *(_DWORD *)&buf[4] = v222;
                            *(_WORD *)&buf[8] = 1024;
                            *(_DWORD *)&buf[10] = *(_DWORD *)v225;
                            *(_WORD *)&buf[14] = 2112;
                            *(_QWORD *)&buf[16] = v219;
                            v61 = v154;
                            v62 = "processCrashLogForAnalytics: Invalid mtbf section offset (%d) and size (%d) in %@";
LABEL_199:
                            v64 = 24;
LABEL_64:
                            _os_log_error_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, v62, buf, v64);
                            continue;
                          }
                          v79 = (char *)objc_msgSend(objc_retainAutorelease(v217), "bytes");
                          v80 = *(_DWORD *)v225;
                          if (*(_DWORD *)v225 <= 0x1Bu)
                          {
                            v81 = qword_1009997D8;
                            if (!os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                              continue;
                            *(_DWORD *)buf = 67109634;
                            *(_DWORD *)&buf[4] = v80;
                            *(_WORD *)&buf[8] = 2048;
                            *(_QWORD *)&buf[10] = 28;
                            *(_WORD *)&buf[18] = 2112;
                            *(_QWORD *)&buf[20] = v219;
                            v61 = v81;
                            v62 = "processCrashLogForAnalytics: mtbf section size too small (%d < %zu) in %@";
                            v64 = 28;
                            goto LABEL_64;
                          }
                          v158 = &v79[(int)v222];
                          v159 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v158 + 6)));
                          objc_msgSend(v218, "setObject:forKey:", v159, CFSTR("usage_since_last_crash"));

                          if (*(_DWORD *)v225 >= 0x25u)
                          {
                            v160 = v158[36] - 1;
                            v161 = "unknown";
                            if (v160 <= 2)
                              v161 = (&off_10092C9C0)[(char)v160];
                            v162 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v161, 4));
                            objc_msgSend(v218, "setObject:forKey:", v162, CFSTR("accessory_fusing"));

                            if (*((_DWORD *)v158 + 7) != -1)
                            {
                              v163 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:"));
                              objc_msgSend(v218, "setObject:forKey:", v163, CFSTR("usage_since_last_crash_user_facing"));

                            }
                            if (*((_DWORD *)v158 + 8) != -1)
                            {
                              v164 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:"));
                              objc_msgSend(v218, "setObject:forKey:", v164, CFSTR("usage_since_last_crash_in_ear"));

                            }
                          }
                        }
                        else
                        {
                          v155 = qword_1009997D8;
                          if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 138412290;
                            *(_QWORD *)&buf[4] = v219;
                            v61 = v155;
                            v62 = "processCrashLogForAnalytics: Unable to convert mtbf section size in %@";
                            goto LABEL_63;
                          }
                        }
                      }
                      else
                      {
                        v149 = qword_1009997D8;
                        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 138412290;
                          *(_QWORD *)&buf[4] = v219;
                          v61 = v149;
                          v62 = "processCrashLogForAnalytics: Invalid mtbf section size in %@";
                          goto LABEL_63;
                        }
                      }
                    }
                    else
                    {
                      v150 = qword_1009997D8;
                      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 138412290;
                        *(_QWORD *)&buf[4] = v219;
                        v61 = v150;
                        v62 = "processCrashLogForAnalytics: Unable to convert mtbf section offset in %@";
                        goto LABEL_63;
                      }
                    }
                  }
                  else
                  {
                    v119 = qword_1009997D8;
                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      *(_QWORD *)&buf[4] = v219;
                      v61 = v119;
                      v62 = "processCrashLogForAnalytics: Invalid mtbf section offset in %@";
                      goto LABEL_63;
                    }
                  }
                }
                else
                {
                  if (strcmp(v42, "Csif"))
                    continue;
                  valuePtr = 0;
                  v43 = (const __CFNumber *)CFDictionaryGetValue(v33, CFSTR("section-offset"));
                  v44 = v43;
                  if (v43 && (v45 = CFGetTypeID(v43), v45 == CFNumberGetTypeID()))
                  {
                    if (CFNumberGetValue(v44, kCFNumberIntType, (char *)&valuePtr + 4))
                    {
                      v46 = (const __CFNumber *)CFDictionaryGetValue(v33, CFSTR("section-size"));
                      v47 = v46;
                      if (v46 && (v48 = CFGetTypeID(v46), v48 == CFNumberGetTypeID()))
                      {
                        if (CFNumberGetValue(v47, kCFNumberIntType, &valuePtr))
                        {
                          v49 = valuePtr;
                          if (valuePtr >= 0x1C)
                          {
                            v50 = HIDWORD(valuePtr);
                            if ((valuePtr & 0x8000000000000000) == 0
                              && (unint64_t)objc_msgSend(v217, "length") > v50 + v49)
                            {
                              v204 = objc_opt_new(NSMutableDictionary);
                              v51 = (char *)objc_msgSend(objc_retainAutorelease(v217), "bytes");
                              cf = &v51[SHIDWORD(valuePtr)];
                              v52 = *((_QWORD *)cf + 2);
                              v208 = objc_opt_new(NSMutableArray);
                              v53 = 0;
                              v54 = cf;
                              do
                              {
                                if ((*(_QWORD *)v54 & (1 << v53)) != 0)
                                {
                                  v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_10097AE90[v53]));
                                  -[NSMutableArray addObject:](v208, "addObject:", v55);

                                  v54 = cf;
                                }
                                ++v53;
                              }
                              while (v53 != 25);
                              -[NSMutableDictionary setValue:forKey:](v204, "setValue:forKey:", v208, CFSTR("active_scenarios"));
                              v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v52));
                              -[NSMutableDictionary setValue:forKey:](v204, "setValue:forKey:", v56, CFSTR("time_since_last_transition"));

                              v57 = valuePtr;
                              v58 = *((_DWORD *)cf + 6);
                              if (valuePtr < 4 * (v58 & 0x3FFu) + 28)
                              {
                                v59 = qword_1009997D8;
                                if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                                {
                                  *(_DWORD *)buf = 67109634;
                                  *(_DWORD *)&buf[4] = v58 & 0x3FF;
                                  *(_WORD *)&buf[8] = 1024;
                                  *(_DWORD *)&buf[10] = v57;
                                  *(_WORD *)&buf[14] = 2112;
                                  *(_QWORD *)&buf[16] = v219;
                                  _os_log_error_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Scenario information range (%u) too large for section size (%d) in %@", buf, 0x18u);
                                }
                                v205 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
                                -[NSMutableDictionary setValue:forKey:](v204, "setValue:forKey:", v205, CFSTR("event_history"));
                                goto LABEL_248;
                              }
                              v205 = objc_opt_new(NSMutableArray);
                              v165 = cf + 28;
                              v166 = *((unsigned int *)cf + 6);
                              v167 = (v166 >> 20) & 0x3FF;
                              v168 = (v166 >> 10) & 0x3FF;
                              if ((_DWORD)v167 == (_DWORD)v168)
                              {
LABEL_210:
                                -[NSMutableDictionary setValue:forKey:](v204, "setValue:forKey:", v205, CFSTR("event_history"));
                                v169 = *((_DWORD *)cf + 6);
                                if (v169 < 0)
                                {
                                  v170 = v169 & 0x3FF;
                                  v171 = valuePtr;
                                  v172 = 4 * (*((_DWORD *)cf + 6) & 0x3FFu) + 28;
                                  if ((v172 | 2uLL) > (int)valuePtr)
                                  {
                                    v173 = qword_1009997D8;
                                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                                    {
                                      *(_DWORD *)buf = 67109634;
                                      *(_DWORD *)&buf[4] = v170;
                                      *(_WORD *)&buf[8] = 1024;
                                      *(_DWORD *)&buf[10] = v171;
                                      *(_WORD *)&buf[14] = 2112;
                                      *(_QWORD *)&buf[16] = v219;
                                      _os_log_error_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Scenario information with range (%u) indicates trailer present but not enough space in section size (%d) in %@", buf, 0x18u);
                                    }
                                    goto LABEL_243;
                                  }
                                  v194 = &v165[4 * v170];
                                  v195 = *(unsigned __int16 *)v194;
                                  if (v195 + v172 > (unint64_t)(int)valuePtr)
                                  {
                                    v196 = qword_1009997D8;
                                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                                    {
                                      *(_DWORD *)buf = 67109890;
                                      *(_DWORD *)&buf[4] = v170;
                                      *(_WORD *)&buf[8] = 1024;
                                      *(_DWORD *)&buf[10] = v195;
                                      *(_WORD *)&buf[14] = 1024;
                                      *(_DWORD *)&buf[16] = v171;
                                      *(_WORD *)&buf[20] = 2112;
                                      *(_QWORD *)&buf[22] = v219;
                                      _os_log_error_impl((void *)&_mh_execute_header, v196, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Scenario information range (%u) and trailer length (%u) too large for section size (%d) in %@", buf, 0x1Eu);
                                    }
                                    goto LABEL_243;
                                  }
                                  if (v195 > 9)
                                  {
                                    v198 = objc_opt_new(NSMutableDictionary);
                                    v199 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *((_WORD *)v194 + 1) & 1));
                                    -[NSMutableDictionary setObject:forKey:](v198, "setObject:forKey:", v199, CFSTR("connected"));

                                    if ((*((_WORD *)v194 + 1) & 1) != 0)
                                    {
                                      v200 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *((unsigned __int16 *)v194 + 2)));
                                      -[NSMutableDictionary setObject:forKey:](v198, "setObject:forKey:", v200, CFSTR("vid"));

                                      v201 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *((unsigned __int16 *)v194 + 3)));
                                      -[NSMutableDictionary setObject:forKey:](v198, "setObject:forKey:", v201, CFSTR("pid"));

                                      v202 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *((unsigned __int16 *)v194 + 4)));
                                      -[NSMutableDictionary setObject:forKey:](v198, "setObject:forKey:", v202, CFSTR("sw_ver"));

                                    }
                                    -[NSMutableDictionary setObject:forKey:](v204, "setObject:forKey:", v198, CFSTR("routed_to_source"));
                                  }
                                  else
                                  {
                                    v197 = qword_1009997D8;
                                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                                    {
                                      *(_DWORD *)buf = 67109634;
                                      *(_DWORD *)&buf[4] = v195;
                                      *(_WORD *)&buf[8] = 2048;
                                      *(_QWORD *)&buf[10] = 10;
                                      *(_WORD *)&buf[18] = 2112;
                                      *(_QWORD *)&buf[20] = v219;
                                      _os_log_error_impl((void *)&_mh_execute_header, v197, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Scenario information trailer length too small (%u < %zu) in %@", buf, 0x1Cu);
                                    }
LABEL_243:
                                    v198 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
                                    -[NSMutableDictionary setObject:forKey:](v204, "setObject:forKey:", v198, CFSTR("routed_to_source"));
                                  }

                                }
LABEL_248:

                                -[NSMutableDictionary setObject:forKey:](v220, "setObject:forKey:", v204, CFSTR("scenario"));
                                continue;
                              }
                              v174 = &v165[4 * v167];
                              v175 = v166 & 0x3FF;
                              v176 = v174;
                              do
                              {
                                v177 = *(unsigned int *)v174;
                                v178 = ((&v174[4 * ((v177 >> 24) & 7)] - v165 + 8) >> 2) % v175;
                                v174 = &v165[4 * v178];
                                v52 += v177 & 0xFFFFFF;
                              }
                              while (v178 != v168);
                              v207 = v52;
                              v179 = (uint64_t)cf;
                              while (2)
                              {
                                v180 = v207 - (*(_DWORD *)v176 & 0xFFFFFF);
                                v222 = 0;
                                memset(buf, 0, 28);
                                sub_1003CC378(v179, (uint64_t)v176, (uint64_t)&v222, (uint64_t)buf);
                                v181 = v222 >> 27;
                                v206 = v176;
                                v207 = v180;
                                if ((_DWORD)v181)
                                {
                                  v185 = sub_100027F68();
                                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185))
                                  {
                                    v186 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithFormat:](NSMutableString, "stringWithFormat:", CFSTR("%04x "), HIWORD(v222)));
                                    for (j = 0; j != 28; j += 4)
                                      objc_msgSend(v186, "appendFormat:", CFSTR("%02x%02x%02x%02x"), *(_DWORD *)&buf[j], BYTE1(*(_DWORD *)&buf[j]), BYTE2(*(_DWORD *)&buf[j]), HIBYTE(*(_DWORD *)&buf[j]));
                                    v188 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v180));
                                    v189 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v181));
                                    v190 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE4(v222)));
                                    v184 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", v188, CFSTR("timestamp"), v189, CFSTR("source"), v190, CFSTR("event_number"), v186, CFSTR("data"), 0));

                                    goto LABEL_231;
                                  }
                                  v184 = 0;
                                }
                                else
                                {
                                  v182 = BYTE4(v222);
                                  if (BYTE4(v222) >= 0x19u)
                                  {
                                    v183 = qword_1009997D8;
                                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                                    {
                                      *(_DWORD *)v225 = 67109120;
                                      v226 = v182;
                                      _os_log_error_impl((void *)&_mh_execute_header, v183, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Invalid scenarioType %d", v225, 8u);
                                    }
                                    v184 = 0;
LABEL_234:

                                    v179 = (uint64_t)cf;
                                    v192 = *((unsigned int *)cf + 6);
                                    v193 = ((&v206[4 * (v206[3] & 7)] - v165 + 8) >> 2) % (int64_t)(v192 & 0x3FF);
                                    v176 = &v165[4 * v193];
                                    if (v193 == ((v192 >> 10) & 0x3FF))
                                      goto LABEL_210;
                                    continue;
                                  }
                                  v186 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v180));
                                  v188 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", off_10097AE90[v182]));
                                  if ((v222 & 0x1000000000000) != 0)
                                    v191 = "ON";
                                  else
                                    v191 = "OFF";
                                  v189 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v191));
                                  v184 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", v186, CFSTR("timestamp"), v188, CFSTR("scenario"), v189, CFSTR("state"), 0));
LABEL_231:

                                }
                                break;
                              }
                              -[NSMutableArray addObject:](v205, "addObject:", v184);
                              goto LABEL_234;
                            }
                          }
                          v156 = qword_1009997D8;
                          if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 67109634;
                            *(_DWORD *)&buf[4] = HIDWORD(valuePtr);
                            *(_WORD *)&buf[8] = 1024;
                            *(_DWORD *)&buf[10] = valuePtr;
                            *(_WORD *)&buf[14] = 2112;
                            *(_QWORD *)&buf[16] = v219;
                            v61 = v156;
                            v62 = "processCrashLogForAnalytics: Invalid scenario information section offset (%d) and size (%d) in %@";
                            goto LABEL_199;
                          }
                        }
                        else
                        {
                          v157 = qword_1009997D8;
                          if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 138412290;
                            *(_QWORD *)&buf[4] = v219;
                            v61 = v157;
                            v62 = "processCrashLogForAnalytics: Unable to convert scenario information section size in %@";
                            goto LABEL_63;
                          }
                        }
                      }
                      else
                      {
                        v152 = qword_1009997D8;
                        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)buf = 138412290;
                          *(_QWORD *)&buf[4] = v219;
                          v61 = v152;
                          v62 = "processCrashLogForAnalytics: Invalid scenario information section size in %@";
                          goto LABEL_63;
                        }
                      }
                    }
                    else
                    {
                      v153 = qword_1009997D8;
                      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 138412290;
                        *(_QWORD *)&buf[4] = v219;
                        v61 = v153;
                        v62 = "processCrashLogForAnalytics: Unable to convert scenario information section offset in %@";
                        goto LABEL_63;
                      }
                    }
                  }
                  else
                  {
                    v132 = qword_1009997D8;
                    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      *(_QWORD *)&buf[4] = v219;
                      v61 = v132;
                      v62 = "processCrashLogForAnalytics: Invalid scenario information section offset in %@";
                      goto LABEL_63;
                    }
                  }
                }
              }
              else
              {
                v67 = qword_1009997D8;
                if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  *(_QWORD *)&buf[4] = v219;
                  v61 = v67;
                  v62 = "processCrashLogForAnalytics: Could not convert crash log section signature in %@";
                  goto LABEL_63;
                }
              }
            }
            else
            {
              v65 = qword_1009997D8;
              if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                *(_QWORD *)&buf[4] = v219;
                v61 = v65;
                v62 = "processCrashLogForAnalytics: Invalid crash log section signature in %@";
                goto LABEL_63;
              }
            }
          }
          else
          {
            v66 = qword_1009997D8;
            if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v219;
              v61 = v66;
              v62 = "processCrashLogForAnalytics: Could not convert crash log section name in %@";
              goto LABEL_63;
            }
          }
        }
      }
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006EA208();
LABEL_251:
    CFRelease(theDict);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006EA1A4();
    v220 = 0;
  }

  return v220;
}

void sub_1003CC000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,void *a41,void *a42,void *a43,_Unwind_Exception *exception_object)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1003CC378(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  unint64_t v10;

  v4 = 0;
  v5 = *(_DWORD *)(result + 24) & 0x3FF;
  v6 = result + 28;
  v7 = (a2 - (result + 28)) >> 2;
  v8 = 1;
  do
  {
    *(_DWORD *)(a3 + 4 * v4) = *(_DWORD *)(v6 + 4 * v7);
    v9 = v8;
    v7 = (v7 + 1) % v5;
    v4 = 1;
    v8 = 0;
  }
  while ((v9 & 1) != 0);
  if ((*(_BYTE *)(a2 + 3) & 7) != 0)
  {
    v10 = 0;
    do
    {
      *(_DWORD *)(a4 + 4 * v10) = *(_DWORD *)(v6 + 4 * v7);
      v7 = (v7 + 1) % v5;
      ++v10;
    }
    while (v10 < (*(_BYTE *)(a2 + 3) & 7u));
  }
  return result;
}

void sub_1003CC3F4(id a1)
{
  if (qword_100978180 != -1)
    dispatch_once(&qword_100978180, &stru_10092C730);
  sub_1003CC434(qword_100978178);
}

uint64_t sub_1003CC434(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  _QWORD v14[2];
  uint8_t buf[4];
  id v16;

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 64);
  v2 = *(_QWORD *)(a1 + 48);
  while (v2 != *(_QWORD *)(a1 + 40))
  {
    v4 = *(_QWORD *)(v2 - 8);
    v2 -= 8;
    v3 = v4;
    v5 = *(_DWORD *)(v4 + 24) - 8194;
    v6 = v5 > 0xE;
    v7 = (1 << v5) & 0x409B;
    if (!v6 && v7 != 0)
      goto LABEL_7;
  }
  v3 = 0;
LABEL_7:
  v9 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9)
    && (v10 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 328))(v10) & 1) != 0))
  {
    if (*(_BYTE *)(a1 + 448))
    {
      v11 = qword_1009997D8;
      if (v3)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        {
          v12 = *(id *)(v3 + 8);
          *(_DWORD *)buf = 138543362;
          v16 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "triggerW1AWDDiagnosticsEvent: Requesting AWD metrics from device %{public}@", buf, 0xCu);

        }
        buf[0] = 0;
        sub_100043758(buf);
        if (sub_1000E2430((unsigned __int8 *)(v3 + 16), 0x20u, 0, 0)
          && os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        {
          sub_1006EA2C4();
        }
        sub_10004339C(buf);
        sub_100043728(buf);
      }
      else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      {
        sub_1006EA298();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    {
      sub_1006EA26C();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
  {
    sub_1006EA324();
  }
  return sub_100034234((uint64_t)v14);
}

void sub_1003CC638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003CC668(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  _QWORD v21[2];
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;

  v1 = *(_QWORD *)(a1 + 32);
  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, v1 + 64);
  v2 = *(_QWORD *)(v1 + 48);
  while (v2 != *(_QWORD *)(v1 + 40))
  {
    v3 = *(_QWORD *)(v2 - 8);
    v2 -= 8;
    v4 = *(_DWORD *)(v3 + 24) - 8194;
    v5 = v4 > 0xE;
    v6 = (1 << v4) & 0x409B;
    if (!v5 && v6 != 0)
    {
      v8 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
      {
        v16 = BYTE1(dword_100992610);
        v17 = *(unsigned __int8 *)(v1 + 415);
        v18 = sub_10025304C(v1 + 409, v9, v10, v11, v12, v13, v14, v15);
        *(_DWORD *)buf = 67109634;
        v23 = v16;
        v24 = 1024;
        v25 = v17;
        v26 = 2080;
        v27 = v18;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "retransBuddyCMD: Buddy CMD type -> %d, numOfBuddyRetrans -> %d, Remote addr -> addr \"%s\" ", buf, 0x18u);
      }
      buf[0] = 0;
      sub_100043758(buf);
      v19 = sub_1000E2430((unsigned __int8 *)(v1 + 409), 4u, byte_100992619, (unsigned __int8 *)&dword_100992610);
      sub_10004339C(buf);
      if (v19 && os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006EA37C();
      ++*(_BYTE *)(v1 + 415);
      sub_100043728(buf);
      return sub_100034234((uint64_t)v21);
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006EA350();
  return sub_100034234((uint64_t)v21);
}

void sub_1003CC828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1003CC858(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v14;
  NSObject *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  __int16 v19;
  int v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t __src;
  char v31;

  v31 = 0;
  __src = 0;
  if (*(_BYTE *)(a1 + 448))
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092C750);
    v20 = *(_DWORD *)a2;
    LOWORD(v21) = *(_WORD *)(a2 + 4);
    v14 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v20, 1);
    v15 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 67110144;
      v21 = a3;
      v22 = 1024;
      v23 = a4;
      v24 = 1024;
      v25 = a5;
      v26 = 1024;
      v27 = a6;
      v28 = 1024;
      v29 = a7;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "syncCrashLogWithBuddyComamnd, Command Type %d, side %d , offset %d , len %d, logType %d", (uint8_t *)&v20, 0x20u);
    }
    if (sub_10043FC5C(v14))
    {
      v16 = sub_1003CCAB8(a1, (uint64_t)&__src, a3, a4, a5, a6, a7);
      if (!v16)
        goto LABEL_16;
      v17 = v16;
      LOBYTE(v20) = 0;
      sub_100043758(&v20);
      v18 = sub_1000E2430((unsigned __int8 *)a2, 4u, v17, (unsigned __int8 *)&__src);
      memcpy(&dword_100992610, &__src, v17);
      byte_100992619 = v17;
      v19 = *(_WORD *)(a2 + 4);
      *(_DWORD *)(a1 + 409) = *(_DWORD *)a2;
      *(_WORD *)(a1 + 413) = v19;
      *(_BYTE *)(a1 + 415) = 0;
      sub_10004339C(&v20);
      sub_100043728(&v20);
      if (v18)
      {
LABEL_16:
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
          sub_1006E93E4();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    {
      sub_1006EA3DC();
    }
  }
}

void sub_1003CCA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_100043728(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003CCAB8(uint64_t a1, uint64_t a2, int a3, char a4, __int16 a5, __int16 a6, char a7)
{
  int v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  int v13;

  switch(a3)
  {
    case 0:
      v9 = dword_10097AF60;
      *(_BYTE *)(a2 + 4) = byte_10097AF64;
      *(_DWORD *)a2 = v9;
      goto LABEL_6;
    case 1:
      *(_BYTE *)(a2 + 4) = 0;
      *(_DWORD *)a2 = 67139584;
LABEL_6:
      result = 5;
      break;
    case 2:
      v11 = 50364416;
      goto LABEL_11;
    case 3:
      byte_10097B038 = a7;
      byte_10097B039 = HIBYTE(a5);
      byte_10097B03A = a5;
      byte_10097B03B = HIBYTE(a6);
      byte_10097B03C = a6;
      v12 = unk_10097B034;
      *(_BYTE *)(a2 + 8) = a6;
      *(_QWORD *)a2 = v12;
      result = 9;
      break;
    case 4:
      v11 = 50364928;
      goto LABEL_11;
    case 5:
      v11 = 50365440;
LABEL_11:
      *(_DWORD *)a2 = v11;
      result = 4;
      break;
    case 6:
      word_10097B041 = bswap32(*(unsigned __int16 *)(a1 + 139)) >> 16;
      byte_10097B043 = *(_BYTE *)(a1 + 141);
      v13 = dword_10097B03D;
      *(_DWORD *)(a2 + 3) = *(int *)((char *)&dword_10097B03D + 3);
      *(_DWORD *)a2 = v13;
      result = 7;
      break;
    case 7:
      dword_10097B04C = bswap32(*(_DWORD *)(a1 + 142));
      *(_QWORD *)a2 = unk_10097B048;
      result = 8;
      break;
    default:
      result = os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        sub_1006EA408();
        result = 0;
      }
      break;
  }
  *(_BYTE *)a2 = a4;
  return result;
}

void sub_1003CCC34(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  void *v9;
  id v10;
  uint64_t v11;
  const char *v12;
  int v13;
  void *v14;
  void *v15;
  id v16;

  v6 = sub_1003C0344(a1, a3);
  if (v6)
  {
    v7 = v6;
    v8 = atomic_load((unsigned __int8 *)&qword_100992B28);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_100992B28))
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet alphanumericCharacterSet](NSCharacterSet, "alphanumericCharacterSet"));
      qword_100992B20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "invertedSet"));

      __cxa_guard_release(&qword_100992B28);
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)v7, "componentsSeparatedByCharactersInSet:", qword_100992B20));
    v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "componentsJoinedByString:", &stru_100941758));

    v10 = objc_msgSend(v16, "length");
    if ((unint64_t)v10 >= 0x101)
    {
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "substringToIndex:", 256));

      v16 = (id)v11;
    }
    v12 = sub_1003CCF08((uint64_t)v10, a4);
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    v13 = *(unsigned __int8 *)(v7 + 40);
    if (v13 == 8)
    {
      sprintf((char *)a2, "/private/var/mobile/Library/Logs/Bluetooth/Accessory_Trace_%s_%s_%c_%d_%d_%d_%d_%d_%d.bin", objc_msgSend(objc_retainAutorelease(v16), "UTF8String"), v12);
    }
    else
    {
      v14 = v16;
      if (v13 != 7)
      {
LABEL_11:

        return;
      }
      sprintf((char *)a2, "/private/var/mobile/Library/Logs/Bluetooth/Accessory_Crash_%s_%s_%c_%d_%d_%d_%d_%d_%d.bin", objc_msgSend(objc_retainAutorelease(v16), "UTF8String"), v12);
    }
    v14 = v16;
    goto LABEL_11;
  }
}

void sub_1003CCE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  void *v18;

  __cxa_guard_abort(&qword_100992B28);
  _Unwind_Resume(a1);
}

void sub_1003CCE90(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  if (a2)
  {
    v2 = *(void **)(a1 + 424);
    v3 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", a2, 4));
    objc_msgSend(v2, "addObject:");

  }
}

void sub_1003CCEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

const char *sub_1003CCF08(uint64_t a1, int a2)
{
  int v2;

  v2 = a2 - 1;
  if ((a2 - 1) < 9 && ((0x187u >> v2) & 1) != 0)
    return (&off_10092C9D8)[v2];
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006EA468();
  return "Unknown";
}

void sub_1003CCF80(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  id v7;
  char *v8;
  NSObject *v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  id v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *__p;
  void *v20;
  uint64_t v21;
  _BYTE buf[12];
  _BYTE v23[128];

  v14 = a2;
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092C770);
  v2 = sub_100285C20((uint64_t)off_100977A80);
  if (*(_QWORD *)(a1 + 24))
  {
    v12 = v2;
    __p = 0;
    v20 = 0;
    v21 = 0;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v3 = v14;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v16;
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v16 != v5)
            objc_enumerationMutation(v3);
          v7 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i));
          v8 = (char *)objc_msgSend(v7, "UTF8String");
          v9 = qword_1009997D8;
          if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v8;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "sendLogCompleteCallback: Sending filename %s", buf, 0xCu);
          }
          v10 = strlen(v8);
          *(_QWORD *)buf = &__p;
          if (v8 != &v8[v10 + 1])
          {
            v11 = v10 + 1;
            do
            {
              sub_1003CD684((unint64_t **)buf, v8++);
              --v11;
            }
            while (v11);
          }

        }
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v15, v23, 16);
      }
      while (v4);
    }

    sub_10028E798(v12, *(_QWORD *)(a1 + 24), 64);
    *(_QWORD *)(a1 + 24) = 0;
    if (__p)
    {
      v20 = __p;
      operator delete(__p);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
  {
    sub_1006EA4C8();
  }

}

void sub_1003CD1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1003CD23C(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  void **v6;
  uint64_t v7;
  void *v8;
  void **v9;
  uint64_t v10;
  void *v11;
  NSMutableOrderedSet *v12;
  void *v13;
  NSMutableDictionary *v14;
  void *v15;
  void *__p[2];
  char v18;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = *(_DWORD *)(a2 + 128);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 132);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  sub_10043F6EC(a2, (uint64_t)__p);
  if (v18 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  v7 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v7;

  if (v18 < 0)
    operator delete(__p[0]);
  sub_10043E5F8(a2, __p);
  if (v18 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  v10 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));
  v11 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v10;

  if (v18 < 0)
    operator delete(__p[0]);
  v12 = objc_opt_new(NSMutableOrderedSet);
  v13 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;

  v14 = objc_opt_new(NSMutableDictionary);
  v15 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v14;

  sub_1003C69C4(a1);
  return a1;
}

void sub_1003CD378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  id *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_1003CD3E0(uint64_t a1)
{
  FILE *v2;

  objc_msgSend(*(id *)(a1 + 32), "invalidate");
  v2 = *(FILE **)(a1 + 64);
  if (v2)
    fclose(v2);

  return a1;
}

void sub_1003CD44C(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

void sub_1003CD490(id a1)
{
  operator new();
}

void sub_1003CD4D0()
{
  operator delete();
}

void sub_1003CD4F4(id a1)
{
  operator new();
}

void sub_1003CD534()
{
  operator delete();
}

void sub_1003CD558(id a1)
{
  operator new();
}

void sub_1003CD598()
{
  operator delete();
}

void sub_1003CD5BC(id a1)
{
  operator new();
}

void sub_1003CD5FC()
{
  operator delete();
}

void sub_1003CD620(id a1)
{
  operator new();
}

void sub_1003CD660()
{
  operator delete();
}

unint64_t **sub_1003CD684(unint64_t **a1, _BYTE *a2)
{
  unint64_t *v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  char v16;

  v4 = *a1;
  v6 = (_BYTE *)(*a1)[1];
  v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = *v4;
    v9 = &v6[-*v4];
    v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0)
      abort();
    v11 = v5 - v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (unint64_t)operator new(v12);
    else
      v13 = 0;
    v14 = (char *)(v13 + v12);
    v9[v13] = *a2;
    v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (_BYTE *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      v15 = &v6[~v8];
      do
      {
        v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (_BYTE *)v8);
      v6 = (_BYTE *)*v4;
    }
    *v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6)
      operator delete(v6);
  }
  else
  {
    *v6 = *a2;
    v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  return a1;
}

id sub_1003CD7A4(uint64_t a1)
{
  return *(id *)(a1 + 8);
}

uint64_t sub_1003CD7B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10025304C(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1003CD7B8(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(_QWORD *)(a2 + 4) = 1752392040;
  *(_WORD *)(a2 + 12) = 2081;
  *(_QWORD *)(a2 + 14) = result;
  return result;
}

int *sub_1003CD7E4()
{
  return __error();
}

uint64_t sub_1003CD804()
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  const __CFString *Value;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  SInt32 IntValue;
  int v7;
  uint64_t v8;

  v0 = (const __CFDictionary *)_CFCopySystemVersionDictionary();
  if (!v0)
    return 288;
  v1 = v0;
  Value = (const __CFString *)CFDictionaryGetValue(v0, _kCFSystemVersionProductVersionKey);
  if (Value)
  {
    v3 = Value;
    v4 = (const __CFString *)CFDictionaryGetValue(v1, _kCFSystemVersionProductVersionExtraKey);
    if (v4)
      v5 = v4;
    else
      v5 = CFSTR("0");
    IntValue = CFStringGetIntValue(v3);
    v7 = (int)(CFStringGetDoubleValue(v3) * 10.0) % 10;
    v8 = CFStringGetIntValue(v5) | (IntValue << 8) | (16 * v7);
  }
  else
  {
    v8 = 288;
  }
  CFRelease(v1);
  return v8;
}

uint64_t sub_1003CD8D8()
{
  return 76;
}

uint64_t sub_1003CD8E0()
{
  return dword_100740ACC[sub_10005F864()];
}

void sub_1003CD900(uint64_t a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_100992B58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_100992B58))
  {
    xmmword_100992B40 = 0uLL;
    unk_100992B50 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100992B40, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100992B58);
  }
  if (qword_100992B60 != -1)
    dispatch_once(&qword_100992B60, &stru_10092CA20);
  if (byte_100992B57 < 0)
  {
    sub_10003430C((_BYTE *)a1, (void *)xmmword_100992B40, *((unint64_t *)&xmmword_100992B40 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_100992B40;
    *(_QWORD *)(a1 + 16) = unk_100992B50;
  }
}

void sub_1003CD9D8(id a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  __int128 v11;
  _OWORD v12[4];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[144];
  uint64_t v17;

  v9 = 0uLL;
  v10 = 0;
  v11 = xmmword_100740A7C;
  LODWORD(v12[0]) = 1899561076;
  if (MGIsDeviceOfType(&v11))
  {
    v10 = 1899561076;
    v9 = xmmword_100740A7C;
  }
  LODWORD(v12[0]) = 1425254930;
  v11 = xmmword_100740A90;
  if (MGIsDeviceOfType(&v11))
  {
    v10 = 1425254930;
    v9 = xmmword_100740A90;
  }
  LODWORD(v12[0]) = -584398440;
  v11 = xmmword_100740AA4;
  if (MGIsDeviceOfType(&v11))
  {
    v10 = -584398440;
    v9 = xmmword_100740AA4;
  }
  LODWORD(v12[0]) = -879476163;
  v11 = xmmword_100740AB8;
  if (MGIsDeviceOfType(&v11))
  {
    v10 = -879476163;
    v9 = xmmword_100740AB8;
  }
  v17 = 0;
  v15 = 0u;
  memset(v16, 0, sizeof(v16));
  v13 = 0u;
  v14 = 0u;
  memset(v12, 0, sizeof(v12));
  v11 = 0u;
  sub_1002613AC((uint64_t)&v11);
  v1 = 0;
  v2 = 1;
  do
  {
    v3 = *(_QWORD *)&v12[0];
    *(_DWORD *)((char *)v12 + *(_QWORD *)(*(_QWORD *)&v12[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v12
                                                                                      + *(_QWORD *)(*(_QWORD *)&v12[0]
                                                                                                  - 24)
                                                                                      + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v12 + *(_QWORD *)(v3 - 24) + 8) |= 0x4000u;
    LOBYTE(v7) = 48;
    v4 = sub_1003CDCD4(v12, (unsigned __int8 *)&v7);
    *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 24) = 2;
    v5 = *((unsigned __int8 *)&v9 + v1);
    std::ostream::operator<<(v4, *((unsigned __int8 *)&v9 + v1));
    v2 &= v5 == 0;
    ++v1;
  }
  while (v1 != 20);
  if ((v2 & 1) == 0)
  {
    std::stringbuf::str((char *)v12 + 8);
    if (byte_100992B57 < 0)
      operator delete((void *)xmmword_100992B40);
    xmmword_100992B40 = v7;
    unk_100992B50 = v8;
  }
  *(_QWORD *)((char *)&v12[-1]
  *(_QWORD *)&v12[0] = v6;
  if (SHIBYTE(v14) < 0)
    operator delete(*((void **)&v13 + 1));
  std::streambuf::~streambuf((char *)v12 + 8);
  std::ios::~ios(v16);
}

void sub_1003CDCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1006CC5C8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003CDCD4(_QWORD *a1, unsigned __int8 *a2)
{
  char *v3;
  int v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_1003CDD60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void sub_1003CDDF0(id a1)
{
  BTVCLinkAgent *v1;
  void *v2;

  v1 = objc_alloc_init(BTVCLinkAgent);
  v2 = (void *)qword_1009994B8;
  qword_1009994B8 = (uint64_t)v1;

}

void sub_1003CDEA0(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("com.apple.bluetoothd.BTVCLinkAgent", v4);
  v3 = (void *)qword_100992B70;
  qword_100992B70 = (uint64_t)v2;

}

void sub_1003CDFAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_BYTE *sub_1003CE014(uint64_t a1)
{
  _BYTE *result;

  result = *(_BYTE **)(a1 + 32);
  if (!result[8])
    return objc_msgSend(result, "_activate");
  return result;
}

void sub_1003CE158(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1003CE1C0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

void sub_1003CE6D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1003CE7FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1003CE920(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1003CEBBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1003CEDF0(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  if (v2)
  {
    v3 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: [BTVCLinkAgent] ### Start BTVCLink advertiser failed: %@\n", (uint8_t *)&v4, 0xCu);
    }
  }

}

void sub_1003CF078(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1003CF0A0(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  id WeakRetained;
  void *v14;
  int v15;
  id v16;
  __int16 v17;
  id v18;

  v9 = a3;
  v10 = a4;
  v11 = a5;
  v12 = qword_100999980;
  if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
  {
    v15 = 138412546;
    v16 = v9;
    v17 = 2112;
    v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[BTVCLinkAgent] Receive ADV data %@ from %@\n", (uint8_t *)&v15, 0x16u);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v14 = WeakRetained;
  if (WeakRetained)
    objc_msgSend(WeakRetained, "_receivedAdvReport:withData:fromPeer:peerInfo:", a2, v9, v10, v11);

}

void sub_1003CF1B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1003CF1DC(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;
  int v4;
  NSError *v5;

  v2 = a2;
  if (v2)
  {
    v3 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
    {
      v4 = 138412290;
      v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: #[BTVCLinkAgent] ## Start BTVCLink scanner failed: %@\n", (uint8_t *)&v4, 0xCu);
    }
  }

}

void sub_1003CFE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

id sub_1003CFFC8(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 64) = 1;
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

id sub_1003D0034(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 64) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_update");
}

double sub_1003D00BC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10092CAF8;
  *(_WORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 10) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  return result;
}

void sub_1003D0100(uint64_t a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10092CB38);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1);
}

void sub_1003D0154(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[5];
  uint8_t buf[16];

  v2 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stack did start", buf, 2u);
  }
  v3 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003D023C;
  v5[3] = &unk_100917378;
  v5[4] = a1;
  sub_100023D84(v3, v5);
  v4 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Initialized L2CAPChannel.", buf, 2u);
  }
}

_BYTE *sub_1003D023C(_BYTE *result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  void **v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  void *__p[2];
  char v20;
  char v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  void **v25;
  __int16 v26;
  int v27;

  v1 = *((_QWORD *)result + 4);
  *(_BYTE *)(v1 + 8) = 1;
  v2 = *(_QWORD **)(v1 + 16);
  v3 = (_QWORD *)(v1 + 24);
  if (v2 != (_QWORD *)(v1 + 24))
  {
    do
    {
      v4 = v2[5];
      v5 = *(uint64_t **)(v4 + 8);
      while (v5 != *(uint64_t **)(v4 + 16))
      {
        v6 = *v5;
        if (*(_BYTE *)(*v5 + 4))
        {
          ++v5;
        }
        else
        {
          v21 = 0;
          sub_100043758(&v21);
          v7 = *(unsigned __int8 *)(v6 + 56);
          if (v7 == 1)
          {
            if (!sub_100225224())
              return sub_100043728(&v21);
            v7 = *(unsigned __int8 *)(v6 + 56);
          }
          v8 = *(unsigned __int16 *)(v6 + 2);
          if (v7)
            v9 = sub_1001E39CC(v8, (uint64_t)sub_1003D058C);
          else
            v9 = sub_1001E3870(v8, (uint64_t)sub_1003D048C);
          v10 = v9;
          if (v9)
          {
            v11 = qword_100999880;
            if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
            {
              v14 = *(unsigned __int16 *)(v6 + 2);
              sub_1000340DC(v2[4], (uint64_t)__p);
              v15 = __p;
              if (v20 < 0)
                v15 = (void **)__p[0];
              *(_DWORD *)buf = 67109634;
              v23 = v14;
              v24 = 2082;
              v25 = v15;
              v26 = 1024;
              v27 = v10;
              _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to re-register endpoint with psm 0x%04x after power cycle, for session \"%{public}s\" with result %{bluetooth:OI_STATUS}u", buf, 0x18u);
              if (v20 < 0)
                operator delete(__p[0]);
            }
            v12 = *(uint64_t **)(v4 + 16);
            v13 = (char *)v12 - (char *)(v5 + 1);
            if (v12 != v5 + 1)
              memmove(v5, v5 + 1, (char *)v12 - (char *)(v5 + 1));
            *(_QWORD *)(v4 + 16) = (char *)v5 + v13;
          }
          else
          {
            ++v5;
          }
          result = sub_100043728(&v21);
        }
      }
      v16 = (_QWORD *)v2[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v2[2];
          v18 = *v17 == (_QWORD)v2;
          v2 = v17;
        }
        while (!v18);
      }
      v2 = v17;
    }
    while (v17 != v3);
  }
  return result;
}

void sub_1003D0468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_100043728(&a17);
  _Unwind_Resume(a1);
}

void sub_1003D048C(int a1, uint64_t a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  _QWORD v8[5];
  __int16 v9;
  __int16 v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  int v14;

  v6 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v12 = a1;
    v13 = 1024;
    v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "l2capConnectInd for PSM: 0x%0x, CID: 0x%x", buf, 0xEu);
  }
  v7 = sub_1000419F4();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1003D54C4;
  v8[3] = &unk_1009173C0;
  v9 = a1;
  v8[4] = a2;
  v10 = a3;
  sub_100041A34(v7, v8);
}

void sub_1003D058C(__int16 a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  _QWORD v13[6];
  __int16 v14;
  __int16 v15;
  char v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;

  v10 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    v11 = "";
    if (a4)
      v11 = ", wakeUpEvent";
    *(_DWORD *)buf = 67109378;
    v18 = a3;
    v19 = 2080;
    v20 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Queueing initial data on channel 0x%04x as the L2CAP Channel hasn't finished registration%s", buf, 0x12u);
  }
  v12 = sub_1000419F4();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1003D3CD4;
  v13[3] = &unk_1009226D0;
  v14 = a1;
  v15 = a3;
  v16 = a4;
  v13[4] = a2;
  v13[5] = a5;
  sub_100041A34(v12, v13);
}

void sub_1003D06B8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[5];
  uint8_t buf[16];

  v2 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "L2CAPChannelManager::stackWillStop enter", buf, 2u);
  }
  v3 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003D07A0;
  v5[3] = &unk_100917378;
  v5[4] = a1;
  sub_100023D84(v3, v5);
  v4 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "L2CAPChannelManager::stackWillStop exit", buf, 2u);
  }
}

_BYTE *sub_1003D07A0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  __int16 *v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  void **v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  void *__p[2];
  char v23;
  char v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  void **v28;

  v1 = *(_QWORD *)(a1 + 32);
  v24 = 0;
  sub_100043758(&v24);
  v2 = *(_QWORD **)(v1 + 16);
  *(_BYTE *)(v1 + 8) = 0;
  v3 = (_QWORD *)(v1 + 24);
  if (v2 != (_QWORD *)(v1 + 24))
  {
    do
    {
      v4 = v2[5];
      for (i = *(uint64_t **)(v4 + 8); i != *(uint64_t **)(v4 + 16); ++i)
      {
        v6 = *i;
        v7 = *(__int16 **)(*i + 120);
        if (v7 != *(__int16 **)(*i + 128))
        {
          do
          {
            v8 = sub_1002B5578();
            sub_1002B888C(v8, *v7);
            v7 += 13;
          }
          while (v7 != *(__int16 **)(v6 + 128));
          v7 = *(__int16 **)(v6 + 120);
        }
        *(_QWORD *)(v6 + 128) = v7;
        if (*(_BYTE *)(v6 + 4))
        {
          v9 = qword_100999880;
          if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
          {
            v10 = *(unsigned __int16 *)(v6 + 2);
            sub_1000340DC(v2[4], (uint64_t)__p);
            v11 = __p;
            if (v23 < 0)
              v11 = (void **)__p[0];
            *(_DWORD *)buf = 67109378;
            v26 = v10;
            v27 = 2082;
            v28 = v11;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Clearing out outgoing connections to PSM 0x%04x for session %{public}s", buf, 0x12u);
            if (v23 < 0)
              operator delete(__p[0]);
          }
          v12 = *(uint64_t **)(v4 + 16);
          v13 = (char *)v12 - (char *)(i + 1);
          if (v12 != i + 1)
            memmove(i, i + 1, (char *)v12 - (char *)(i + 1));
          *(_QWORD *)(v4 + 16) = (char *)i + v13;
          v14 = *(void **)(v6 + 120);
          if (v14)
          {
            *(_QWORD *)(v6 + 128) = v14;
            operator delete(v14);
          }
          operator delete();
        }
      }
      v15 = (_QWORD *)v2[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v2[2];
          v17 = *v16 == (_QWORD)v2;
          v2 = v16;
        }
        while (!v17);
      }
      v2 = v16;
    }
    while (v16 != (_QWORD *)(v1 + 24));
    v2 = *(_QWORD **)(v1 + 16);
    v3 = (_QWORD *)(v1 + 24);
  }
  if (v2 != v3)
  {
    do
    {
      v18 = v2[5];
      if (*(_BYTE *)(v18 + 32))
      {
        sub_1003D7824(v18);
        operator delete();
      }
      v19 = (_QWORD *)v2[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v2[2];
          v17 = *v20 == (_QWORD)v2;
          v2 = v20;
        }
        while (!v17);
      }
      v2 = v20;
    }
    while (v20 != v3);
  }
  *(_QWORD *)(v1 + 48) = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 72) = *(_QWORD *)(v1 + 64);
  return sub_100043728(&v24);
}

void sub_1003D0AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(exception_object);
}

void sub_1003D0ADC(uint64_t a1, unint64_t a2, uint64_t a3, int a4, unsigned __int16 a5, char a6, int a7, int a8, unsigned __int16 a9, unsigned __int16 a10, unsigned __int8 a11, int a12)
{
  int v18;
  __int16 v19;
  int v20;
  int v21;
  NSObject *v22;
  int v23;
  void **v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t *v28;
  _QWORD *v29;
  unint64_t v30;
  BOOL v31;
  _QWORD *v32;
  uint64_t *v33;
  unint64_t v34;
  BOOL v35;
  _QWORD *v36;
  NSObject *v37;
  uint8_t *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _BYTE *v44;
  NSObject *v45;
  int v46;
  uint8_t *v47;
  int v48;
  NSObject *v49;
  void **v50;
  int v51;
  int v52;
  NSObject *v53;
  uint64_t v54;
  int v55;
  NSObject *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t i;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint8_t *v65;
  NSObject *v66;
  NSObject *v67;
  NSObject *v68;
  uint8_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  int v80;
  void **v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  __int128 v86;
  __int128 v87;
  NSObject *v88;
  int v89;
  void **v90;
  uint8_t *v91;
  uint8_t *v92;
  unsigned __int16 v93;
  int v94;
  int v95;
  int v96;
  char v97;
  unsigned __int16 v98;
  unint64_t v99;
  uint8_t buf[8];
  __int16 v101;
  _BYTE v102[10];
  _BYTE v103[6];
  _BYTE v104[6];
  __int16 v105;
  int v106;
  __int16 v107;
  void **v108;
  void *__p;
  __int16 v110;
  uint8_t *v111;
  char v112;

  v99 = a2;
  v98 = a5;
  if (!a2 && os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_FAULT))
    sub_1006EA6FC();
  if (!a3 && os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_FAULT))
    sub_1006EA6D0();
  if (!a4 && os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_FAULT))
    sub_1006EA6A4();
  if (!*(_BYTE *)(a1 + 8))
  {
    v49 = qword_100999880;
    if (!os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
      goto LABEL_76;
    sub_1000340DC(v99, (uint64_t)&__p);
    v50 = v112 >= 0 ? &__p : (void **)__p;
    v51 = *(unsigned __int8 *)(a1 + 8);
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = v98;
    v101 = 2082;
    *(_QWORD *)v102 = v50;
    *(_WORD *)&v102[8] = 1024;
    *(_DWORD *)v103 = v51;
    *(_WORD *)&v103[4] = 1024;
    *(_DWORD *)v104 = a12;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Registering L2CAP Channel with PSM 0x%04x for session \"%{public}s\" failed , fStarted=%d priority:%d", buf, 0x1Eu);
    if (v112 < 0)
    {
      operator delete(__p);
      if (!a3)
        return;
    }
    else
    {
LABEL_76:
      if (!a3)
        return;
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a3 + 16))(a3, v98, 111);
    return;
  }
  if (v98)
  {
LABEL_12:
    v18 = a10;
    v19 = a9;
    if (a7)
      v20 = a7;
    else
      v20 = 1024;
    if (a8)
      v21 = a8;
    else
      v21 = 1024;
    v95 = v20;
    v96 = v21;
    if (!(a10 | a9))
    {
      v18 = 30000;
      v19 = -1;
    }
    if (!v18)
      v18 = 30000;
    v93 = v19;
    v94 = v18;
    v22 = qword_100999880;
    if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
    {
      v23 = v98;
      sub_1000340DC(v99, (uint64_t)&__p);
      v24 = v112 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v23;
      v101 = 1024;
      *(_DWORD *)v102 = v95;
      *(_WORD *)&v102[4] = 1024;
      *(_DWORD *)&v102[6] = v96;
      *(_WORD *)v103 = 1024;
      *(_DWORD *)&v103[2] = v93;
      *(_WORD *)v104 = 1024;
      *(_DWORD *)&v104[2] = v94;
      v105 = 1024;
      v106 = a12;
      v107 = 2082;
      v108 = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "trying to publish psm:%d inMTU:%d inMPS:%d initialCredits:%d creditAckDelta:%d priority:%d for session session \"%{public}s\"", buf, 0x30u);
      if (v112 < 0)
        operator delete(__p);
    }
    v26 = (uint64_t *)(a1 + 24);
    v25 = *(_QWORD **)(a1 + 24);
    v27 = (uint64_t **)(a1 + 16);
    if (!v25)
      goto LABEL_39;
    v28 = (uint64_t *)(a1 + 24);
    v29 = *(_QWORD **)(a1 + 24);
    do
    {
      v30 = v29[4];
      v31 = v30 >= v99;
      if (v30 >= v99)
        v32 = v29;
      else
        v32 = v29 + 1;
      if (v31)
        v28 = v29;
      v29 = (_QWORD *)*v32;
    }
    while (*v32);
    if (v28 == v26 || v99 < v28[4])
LABEL_39:
      v28 = (uint64_t *)(a1 + 24);
    if (!v25)
      goto LABEL_51;
    v33 = (uint64_t *)(a1 + 24);
    do
    {
      v34 = v25[4];
      v35 = v34 >= v99;
      if (v34 >= v99)
        v36 = v25;
      else
        v36 = v25 + 1;
      if (v35)
        v33 = v25;
      v25 = (_QWORD *)*v36;
    }
    while (*v36);
    if (v33 == v26 || v99 < v33[4])
    {
LABEL_51:
      v37 = qword_100999880;
      if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000340DC(v99, (uint64_t)buf);
        if (v103[3] >= 0)
          v38 = buf;
        else
          v38 = *(uint8_t **)buf;
        LODWORD(__p) = 67109378;
        HIDWORD(__p) = a11;
        v110 = 2082;
        v111 = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Creating a new session %d for \"%{public}s\"", (uint8_t *)&__p, 0x12u);
        if ((v103[3] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      operator new();
    }
    v39 = a6;
    v40 = v28[5];
    v41 = *(_QWORD *)(v40 + 8);
    v42 = *(_QWORD *)(v40 + 16);
    if (v41 == v42)
    {
LABEL_63:
      v45 = qword_100999880;
      if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
      {
        v46 = v98;
        sub_1000340DC(v99, (uint64_t)buf);
        v47 = v103[3] >= 0 ? buf : *(uint8_t **)buf;
        LODWORD(__p) = 67109378;
        HIDWORD(__p) = v46;
        v110 = 2082;
        v111 = v47;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Registering L2CAP Channel with PSM 0x%04x for session \"%{public}s\"", (uint8_t *)&__p, 0x12u);
        if ((v103[3] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      v97 = 0;
      sub_100043758(&v97);
      if (a11)
        v48 = sub_1001E39CC(v98, (uint64_t)sub_1003D058C);
      else
        v48 = sub_1001E3870(v98, (uint64_t)sub_1003D048C);
      v55 = v48;
      sub_10004339C(&v97);
      if (!v55)
      {
        v58 = (_QWORD *)*v26;
        if (*v26)
        {
          do
          {
            if (v58[4] >= v99)
              v59 = v58;
            else
              v59 = v58 + 1;
            v58 = (_QWORD *)*v59;
          }
          while (*v59);
        }
        operator new();
      }
      v56 = qword_100999880;
      if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
      {
        v80 = v98;
        sub_1000340DC(v99, (uint64_t)&__p);
        v81 = v112 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v80;
        v101 = 2082;
        *(_QWORD *)v102 = v81;
        *(_WORD *)&v102[8] = 1024;
        *(_DWORD *)v103 = v55;
        _os_log_error_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "Failed to register L2CAP Channel with PSM 0x%04x for session \"%{public}s\" with result %{bluetooth:OI_STATUS}u", buf, 0x18u);
        if (v112 < 0)
          operator delete(__p);
      }
      switch(v55)
      {
        case 104:
          v57 = 1802;
          break;
        case 482:
          v57 = 1800;
          break;
        case 402:
          v57 = 1801;
          break;
        default:
          v57 = 1;
          break;
      }
      v63 = v28[5];
      if (v63)
      {
        sub_1003D7824(v63);
        operator delete();
      }
      sub_1000040CC(v27, v28);
      operator delete(v28);
      sub_100043728(&v97);
LABEL_127:
      if (a3)
        (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a3 + 16))(a3, v98, v57);
      return;
    }
    v43 = v98;
    while (1)
    {
      v44 = *(_BYTE **)v41;
      if (*(unsigned __int16 *)(*(_QWORD *)v41 + 2) == v98 && !v44[4])
        break;
      v41 += 8;
      if (v41 == v42)
        goto LABEL_63;
    }
    if (*v44)
    {
      for (i = *(_QWORD *)(a1 + 40); i != *(_QWORD *)(a1 + 48); i += 48)
      {
        if (v98 == *(unsigned __int16 *)(i + 8))
        {
          v67 = qword_100999880;
          if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
          {
            sub_1000340DC(*(_QWORD *)i, (uint64_t)buf);
            if (v103[3] >= 0)
              v92 = buf;
            else
              v92 = *(uint8_t **)buf;
            LODWORD(__p) = 67109378;
            HIDWORD(__p) = v43;
            v110 = 2082;
            v111 = v92;
            _os_log_error_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "Failed to register L2CAP Channel PSM 0x%04x as it is already pending registration by session \"%{public}s\"", (uint8_t *)&__p, 0x12u);
            if ((v103[3] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            v43 = v98;
          }
          break;
        }
      }
      v68 = qword_100999880;
      if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_INFO))
      {
        sub_1000340DC(v28[4], (uint64_t)buf);
        if (v103[3] >= 0)
          v69 = buf;
        else
          v69 = *(uint8_t **)buf;
        LODWORD(__p) = 67109378;
        HIDWORD(__p) = v43;
        v110 = 2082;
        v111 = v69;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_INFO, "Delaying registration of L2CAP PSM 0x%04x as it is currently being unregistered by session \"%{public}s\"", (uint8_t *)&__p, 0x12u);
        if ((v103[3] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        LOWORD(v43) = v98;
      }
      v70 = v99;
      v71 = *(_QWORD *)(a1 + 56);
      v72 = *(_QWORD *)(a1 + 48);
      if (v72 >= v71)
      {
        v74 = *(_QWORD *)(a1 + 40);
        v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - v74) >> 4);
        v76 = v75 + 1;
        if (v75 + 1 > 0x555555555555555)
          abort();
        v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - v74) >> 4);
        if (2 * v77 > v76)
          v76 = 2 * v77;
        if (v77 >= 0x2AAAAAAAAAAAAAALL)
          v78 = 0x555555555555555;
        else
          v78 = v76;
        if (v78)
          v79 = (char *)sub_1002B50E8(a1 + 56, v78);
        else
          v79 = 0;
        v82 = &v79[48 * v75];
        *(_QWORD *)v82 = v70;
        v83 = &v79[48 * v78];
        *((_WORD *)v82 + 4) = v43;
        *((_QWORD *)v82 + 2) = a3;
        v82[24] = v39;
        *((_DWORD *)v82 + 7) = a4;
        *((_WORD *)v82 + 16) = v95;
        *((_WORD *)v82 + 17) = v96;
        *((_WORD *)v82 + 18) = v93;
        *((_WORD *)v82 + 19) = v94;
        v82[40] = a11;
        *((_DWORD *)v82 + 11) = a12;
        v73 = v82 + 48;
        v85 = *(char **)(a1 + 40);
        v84 = *(char **)(a1 + 48);
        if (v84 != v85)
        {
          do
          {
            v86 = *((_OWORD *)v84 - 3);
            v87 = *((_OWORD *)v84 - 1);
            *((_OWORD *)v82 - 2) = *((_OWORD *)v84 - 2);
            *((_OWORD *)v82 - 1) = v87;
            *((_OWORD *)v82 - 3) = v86;
            v82 -= 48;
            v84 -= 48;
          }
          while (v84 != v85);
          v84 = *(char **)(a1 + 40);
        }
        *(_QWORD *)(a1 + 40) = v82;
        *(_QWORD *)(a1 + 48) = v73;
        *(_QWORD *)(a1 + 56) = v83;
        if (v84)
          operator delete(v84);
      }
      else
      {
        *(_QWORD *)v72 = v99;
        *(_WORD *)(v72 + 8) = v43;
        *(_QWORD *)(v72 + 16) = a3;
        *(_BYTE *)(v72 + 24) = v39;
        *(_DWORD *)(v72 + 28) = a4;
        *(_WORD *)(v72 + 32) = v95;
        *(_WORD *)(v72 + 34) = v96;
        *(_WORD *)(v72 + 36) = v93;
        *(_WORD *)(v72 + 38) = v94;
        *(_BYTE *)(v72 + 40) = a11;
        v73 = (char *)(v72 + 48);
        *(_DWORD *)(v72 + 44) = a12;
      }
      *(_QWORD *)(a1 + 48) = v73;
      v57 = 10;
      goto LABEL_164;
    }
    v66 = qword_100999880;
    if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
    {
      sub_1000340DC(v28[4], (uint64_t)buf);
      if (v103[3] >= 0)
        v91 = buf;
      else
        v91 = *(uint8_t **)buf;
      LODWORD(__p) = 67109378;
      HIDWORD(__p) = v43;
      v110 = 2082;
      v111 = v91;
      _os_log_error_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "Failed to register L2CAP Channel with PSM 0x%04x as it is already registered by session \"%{public}s\"", (uint8_t *)&__p, 0x12u);
      if ((v103[3] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v40 = v28[5];
      if (v40)
      {
LABEL_125:
        sub_1003D7824(v40);
        operator delete();
      }
    }
    else if (v40)
    {
      goto LABEL_125;
    }
    sub_1000040CC(v27, v28);
    operator delete(v28);
    v57 = 103;
LABEL_164:
    v88 = qword_100999880;
    if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
    {
      v89 = v98;
      sub_1000340DC(v99, (uint64_t)&__p);
      v90 = v112 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v89;
      v101 = 2082;
      *(_QWORD *)v102 = v90;
      *(_WORD *)&v102[8] = 1024;
      *(_DWORD *)v103 = v57;
      _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "Registering L2CAP Channel with PSM 0x%04x for session \"%{public}s\" failed with error %d", buf, 0x18u);
      if (v112 < 0)
        operator delete(__p);
    }
    goto LABEL_127;
  }
  if (a11)
  {
    v52 = sub_1001E3794(&v98);
    v53 = qword_100999880;
    if (!v52)
    {
      if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
      {
        v64 = v98;
        sub_1000340DC(v99, (uint64_t)buf);
        v65 = v103[3] >= 0 ? buf : *(uint8_t **)buf;
        LODWORD(__p) = 67109378;
        HIDWORD(__p) = v64;
        v110 = 2082;
        v111 = v65;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Automatically selected psm:%d for session session \"%{public}s\"", (uint8_t *)&__p, 0x12u);
        if ((v103[3] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      goto LABEL_12;
    }
    if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
      sub_1006EA644();
    if (a3)
    {
      switch(v52)
      {
        case 104:
          v54 = 1802;
          break;
        case 482:
          v54 = 1800;
          break;
        case 402:
          v54 = 1801;
          break;
        default:
          v54 = 1;
          break;
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a3 + 16))(a3, v98, v54);
    }
  }
  else if (a3)
  {
    v61 = qword_100999880;
    if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "Invalid Classic PSM: %d", buf, 8u);
      v62 = v98;
    }
    else
    {
      v62 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v62, 1800);
  }
}

void sub_1003D18C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14, char a15)
{
  sub_100043728(&a15);
  _Unwind_Resume(a1);
}

void sub_1003D18EC(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  NSObject *v6;
  void **v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  void **v23;
  NSObject *v24;
  void **v25;
  char *v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *__p[2];
  char v33;
  uint8_t buf[4];
  int v35;
  __int16 v36;
  void **v37;

  v6 = qword_100999880;
  if (!a2 && os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Session cannot be NULL", (uint8_t *)__p, 2u);
    v6 = qword_100999880;
    if ((_DWORD)a3)
      goto LABEL_6;
  }
  else if ((_DWORD)a3)
  {
    goto LABEL_6;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "psm cannot be 0", (uint8_t *)__p, 2u);
    v6 = qword_100999880;
  }
LABEL_6:
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000340DC(a2, (uint64_t)__p);
    v7 = v33 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    v35 = a3;
    v36 = 2082;
    v37 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "trying to unpublish psm:%d for session \"%{public}s\"", buf, 0x12u);
    if (v33 < 0)
      operator delete(__p[0]);
  }
  v8 = (_QWORD *)a1[3];
  if (v8)
  {
    v9 = a1 + 3;
    do
    {
      v10 = v8[4];
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = v8;
      else
        v12 = v8 + 1;
      if (v11)
        v9 = v8;
      v8 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 != a1 + 3 && v9[4] <= a2)
    {
      v13 = (_QWORD *)v9[5];
      v14 = (char *)a1[5];
      v15 = (char *)a1[6];
      if (v14 != v15)
      {
        v16 = 0;
        while (*(_QWORD *)&v14[v16] != a2 || *(unsigned __int16 *)&v14[v16 + 8] != (_DWORD)a3)
        {
          v16 += 48;
          if (&v14[v16] == v15)
            goto LABEL_28;
        }
        v24 = qword_100999880;
        if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000340DC(a2, (uint64_t)__p);
          if (v33 >= 0)
            v25 = __p;
          else
            v25 = (void **)__p[0];
          *(_DWORD *)buf = 67109378;
          v35 = a3;
          v36 = 2082;
          v37 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Unregistering pending L2CAP Channel 0x%04x for session \"%{public}s\"", buf, 0x12u);
          if (v33 < 0)
            operator delete(__p[0]);
          v15 = (char *)a1[6];
        }
        v26 = &v14[v16 + 48];
        v27 = v15 - v26;
        if (v15 != v26)
          memmove(&v14[v16], v26, v15 - v26);
        v21 = 0;
        a1[6] = &v14[v16 + v27];
        goto LABEL_50;
      }
LABEL_28:
      v17 = (uint64_t *)v13[1];
      v18 = (uint64_t *)v13[2];
      if (v17 == v18)
      {
LABEL_32:
        v21 = 0;
      }
      else
      {
        v19 = -(uint64_t)v17;
        while (1)
        {
          v20 = *v17;
          if (*(unsigned __int16 *)(*v17 + 2) == (_DWORD)a3)
            break;
          ++v17;
          v19 -= 8;
          if (v17 == v18)
            goto LABEL_32;
        }
        if (*(_BYTE *)v20)
        {
          v22 = qword_100999880;
          if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
          {
            sub_1000340DC(a2, (uint64_t)__p);
            if (v33 >= 0)
              v23 = __p;
            else
              v23 = (void **)__p[0];
            *(_DWORD *)buf = 67109378;
            v35 = a3;
            v36 = 2082;
            v37 = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "L2CAP Channel 0x%04x for session \"%{public}s\" is already being unregistered", buf, 0x12u);
            if (v33 < 0)
              operator delete(__p[0]);
          }
          return;
        }
        v28 = sub_1003D1CFC((uint64_t)a1, v20);
        if ((_DWORD)v28 == 10)
          return;
        v21 = v28;
        if (!(_DWORD)v28)
        {
          v29 = v13[2];
          v30 = v29 - (8 - v19);
          if (v29 != 8 - v19)
            memmove((void *)-v19, (const void *)(8 - v19), v29 - (8 - v19));
          v13[2] = v30 - v19;
          v31 = *(void **)(v20 + 120);
          if (v31)
          {
            *(_QWORD *)(v20 + 128) = v31;
            operator delete(v31);
          }
          operator delete();
        }
      }
LABEL_50:
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v13 + 24))(*v13, a3, v21);
    }
  }
}

uint64_t sub_1003D1CFC(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned __int16 *v4;
  unsigned int v5;
  int v6;
  int v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  uint64_t result;
  int v12;
  int v13;
  int v14;
  NSObject *v15;
  int v16;
  char v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;

  v3 = *(unsigned __int8 *)(a2 + 56);
  if (!*(_BYTE *)(a1 + 8))
  {
    if (*(_QWORD *)(a2 + 120) != *(_QWORD *)(a2 + 128))
    {
      result = os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_FAULT);
      if (!(_DWORD)result)
        return result;
      sub_1006EA728();
    }
    return 0;
  }
  *(_BYTE *)a2 = 1;
  v4 = *(unsigned __int16 **)(a2 + 120);
  if (v4 == *(unsigned __int16 **)(a2 + 128))
    goto LABEL_14;
  do
  {
    v17 = 0;
    sub_100043758(&v17);
    v5 = *v4;
    if (v3)
      v6 = sub_1001DEE88(v5);
    else
      v6 = sub_1001DEB7C(v5, 436);
    v7 = v6;
    sub_10004339C(&v17);
    if (v7)
    {
      v8 = qword_100999880;
      if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
      {
        v9 = *v4;
        *(_DWORD *)buf = 67109632;
        v19 = v9;
        v20 = 1024;
        v21 = v3;
        v22 = 1024;
        v23 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to disconnect channel %x for session type %d status=%d", buf, 0x14u);
      }
    }
    sub_100043728(&v17);
    v4 += 13;
  }
  while (v4 != *(unsigned __int16 **)(a2 + 128));
  if (v4 == *(unsigned __int16 **)(a2 + 120))
  {
LABEL_14:
    v17 = 0;
    sub_100043758(&v17);
    v12 = *(unsigned __int16 *)(a2 + 2);
    if (v3)
      v13 = sub_1001E3B60(v12);
    else
      v13 = sub_1001E3A38(v12);
    v14 = v13;
    sub_10004339C(&v17);
    if (v14)
    {
      v15 = qword_100999880;
      if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_FAULT))
      {
        v16 = *(unsigned __int16 *)(a2 + 2);
        *(_DWORD *)buf = 67109632;
        v19 = v3;
        v20 = 1024;
        v21 = v16;
        v22 = 1024;
        v23 = v14;
        _os_log_fault_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Couldn't unregister valid L2CAP Channel 0x%04x for session type %d with result %{bluetooth:OI_STATUS}u", buf, 0x14u);
      }
    }
    sub_100043728(&v17);
    return 0;
  }
  v10 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "We are still waiting for some channels to disconnect, we'll complete the unpublishing when disconnection complete.", buf, 2u);
  }
  return 10;
}

void sub_1003D1F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_100043728(&a15);
  _Unwind_Resume(a1);
}

void sub_1003D1FB4(uint64_t a1, unint64_t a2, void (***a3)(_QWORD, void *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD), int a4, uint64_t a5, int a6, int a7, int a8, unsigned __int16 a9, unsigned __int8 *uu, char a11, int a12)
{
  int is_null;
  NSObject *v20;
  int v21;
  int v22;
  int v23;
  unsigned __int16 v24;
  int v25;
  void **v26;
  void **v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  BOOL v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  BOOL v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *i;
  uint64_t v47;
  NSObject *v48;
  char *v49;
  id v50;
  void *v51;
  NSObject *v52;
  char *v53;
  id v54;
  void *v55;
  uint64_t j;
  unsigned int v57;
  NSObject *v58;
  void **v59;
  int v60;
  int v61;
  int v62;
  void (***v63)(_QWORD, void *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  id v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  NSObject *v70;
  void **v71;
  int v72;
  id v73;
  void *v74;
  unsigned int v75;
  unsigned int v76;
  NSObject *v77;
  void (***v78)(_QWORD, void *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  id v79;
  void *v80;
  NSObject *v81;
  id v82;
  void *v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  int v87;
  char v88;
  uint64_t v89;
  void *__p[2];
  char v91;
  unint64_t v92;
  void *v93[4];
  _BYTE buf[40];
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  uuid_string_t out;

  v92 = a2;
  if (!a2 && os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_FAULT))
    sub_1006EA6FC();
  if (!a3 && os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_FAULT))
    sub_1006EA6D0();
  if (!(_DWORD)a5 && os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_FAULT))
    sub_1006EA8F8();
  if (!a4 && os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_FAULT))
    sub_1006EA6A4();
  is_null = uuid_is_null(uu);
  v20 = qword_100999880;
  if (is_null && os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "device cannot be empty", buf, 2u);
    v20 = qword_100999880;
  }
  if (a6)
    v21 = a6;
  else
    v21 = 1024;
  v87 = v21;
  if (a7)
    v22 = a7;
  else
    v22 = 1024;
  v86 = v22;
  if (a9 | a8)
    v23 = a9;
  else
    v23 = 30000;
  if (a9 | a8)
    v24 = a8;
  else
    v24 = -1;
  if (v23)
    v25 = v23;
  else
    v25 = 30000;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    v26 = v93;
    sub_1000340DC(v92, (uint64_t)v93);
    if (SHIBYTE(v93[2]) < 0)
      v26 = (void **)v93[0];
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(uu, out);
    sub_100091AE8(__p, out);
    if (v91 >= 0)
      v27 = __p;
    else
      v27 = (void **)__p[0];
    *(_DWORD *)buf = 136448002;
    *(_QWORD *)&buf[4] = v26;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v27;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = a5;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v87;
    *(_WORD *)&buf[34] = 1024;
    *(_DWORD *)&buf[36] = v86;
    v95 = 1024;
    v96 = v24;
    v97 = 1024;
    v98 = v25;
    v99 = 1024;
    v100 = a12;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" trying to connect to device %{public}s on PSM:0x%04x inMTU:%d inMPS:%d initialCredits:%d creditAckDelta:%d priority:%d", buf, 0x3Au);
    if (v91 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v93[2]) < 0)
      operator delete(v93[0]);
  }
  v89 = 0;
  if (a11)
  {
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10092CBB8);
    if (!sub_100623C54((uint64_t)off_1009778A0, uu, &v89))
    {
      v48 = qword_100999880;
      if (!os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
        goto LABEL_87;
      memset(buf, 0, 37);
      uuid_unparse_upper(uu, buf);
      sub_100091AE8(out, buf);
      v49 = out[23] >= 0 ? out : *(char **)out;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v49;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a5;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "could not connect to device %{public}s on PSM:0x%04x", buf, 0x12u);
      if (out[23] < 0)
      {
        operator delete(*(void **)out);
        if (!a3)
          return;
      }
      else
      {
LABEL_87:
        if (!a3)
          return;
      }
      v50 = sub_100030DF4(uu);
      v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
      (**a3)(a3, v51, 1804, a5, 0, 0, 0);

      return;
    }
    v85 = 0;
    v28 = 0;
LABEL_52:
    v35 = *(_QWORD **)(a1 + 24);
    v34 = (_QWORD *)(a1 + 24);
    v33 = v35;
    if (!v35)
      goto LABEL_63;
    v36 = v34;
    v37 = v33;
    do
    {
      v38 = v37[4];
      v39 = v38 >= v92;
      if (v38 >= v92)
        v40 = v37;
      else
        v40 = v37 + 1;
      if (v39)
        v36 = v37;
      v37 = (_QWORD *)*v40;
    }
    while (*v40);
    if (v36 == v34 || v92 < v36[4])
LABEL_63:
      v36 = v34;
    if (!v33)
      goto LABEL_75;
    v41 = v34;
    do
    {
      v42 = v33[4];
      v43 = v42 >= v92;
      if (v42 >= v92)
        v44 = v33;
      else
        v44 = v33 + 1;
      if (v43)
        v41 = v33;
      v33 = (_QWORD *)*v44;
    }
    while (*v44);
    if (v41 == v34 || v92 < v41[4])
LABEL_75:
      operator new();
    v45 = v36[5];
    for (i = *(uint64_t **)(v45 + 8); ; ++i)
    {
      if (i == *(uint64_t **)(v45 + 16))
        operator new();
      v47 = *i;
      if (*(unsigned __int16 *)(*i + 2) == (_DWORD)a5 && *(_BYTE *)(v47 + 4) == 1)
        break;
    }
    for (j = *(_QWORD *)(v47 + 120); j != *(_QWORD *)(v47 + 128); j += 26)
    {
      if (!uuid_compare((const unsigned __int8 *)(j + 2), uu))
      {
        v77 = qword_100999880;
        if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
          sub_1006EA84C(uu, v77);
        v78 = *(void (****)(_QWORD, void *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))v45;
        v79 = sub_100030DF4(uu);
        v80 = (void *)objc_claimAutoreleasedReturnValue(v79);
        (**v78)(v78, v80, 1803, a5, 0, 0, 0);

        return;
      }
    }
    memset(v93, 0, 26);
    uuid_copy((unsigned __int8 *)v93 + 2, uu);
    BYTE2(v93[2]) = 0;
    HIDWORD(v93[2]) = 0;
    LOBYTE(v93[3]) = 0;
    v88 = 0;
    sub_100043758(&v88);
    if (a11 == 1)
    {
      v57 = sub_1003D2E24(v89);
      *(_WORD *)(v47 + 8) = v57 + v57 * (0x400 / v57);
      *(_WORD *)(v47 + 10) = v57 + v57 * (0x400 / v57);
      goto LABEL_104;
    }
    if (a11)
    {
LABEL_104:
      v58 = qword_100999880;
      if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(uu, buf);
        sub_100091AE8(__p, buf);
        v59 = v91 >= 0 ? __p : (void **)__p[0];
        v60 = *(unsigned __int16 *)(v47 + 8);
        v61 = *(unsigned __int16 *)(v47 + 10);
        *(_DWORD *)out = 67109890;
        *(_DWORD *)&out[4] = a5;
        *(_WORD *)&out[8] = 2082;
        *(_QWORD *)&out[10] = v59;
        *(_WORD *)&out[18] = 1024;
        *(_DWORD *)&out[20] = v60;
        *(_WORD *)&out[24] = 1024;
        *(_DWORD *)&out[26] = v61;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Connecting LE PSM:0x%04x device %{public}s inMTU=%d inMPS=%d", (uint8_t *)out, 0x1Eu);
        if (v91 < 0)
          operator delete(__p[0]);
      }
      v62 = sub_1001DD90C((uint64_t)sub_1003D33A0, (uint64_t)sub_1003D34A0, (uint64_t)sub_1003D3508, a5, v89, (__int16 *)(v47 + 8), v93);
      goto LABEL_111;
    }
    v70 = qword_100999880;
    if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
    {
      memset(buf, 0, 37);
      uuid_unparse_upper(uu, buf);
      sub_100091AE8(__p, buf);
      v71 = v91 >= 0 ? __p : (void **)__p[0];
      v72 = *(unsigned __int16 *)(v47 + 24);
      *(_DWORD *)out = 67109634;
      *(_DWORD *)&out[4] = a5;
      *(_WORD *)&out[8] = 2082;
      *(_QWORD *)&out[10] = v71;
      *(_WORD *)&out[18] = 1024;
      *(_DWORD *)&out[20] = v72;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "Connecting Classic PSM:0x%04x device %{public}s inMTU=%d", (uint8_t *)out, 0x18u);
      if (v91 < 0)
        operator delete(__p[0]);
    }
    if (!v28)
    {
      v81 = qword_100999880;
      if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
      {
        v82 = sub_100030DF4(uu);
        v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
        sub_1006EA7A0(v83, (uint64_t)buf, v81);
      }
      v62 = 105;
      goto LABEL_111;
    }
    v73 = sub_1004534D8(v28, a5);
    v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
    if (!v74)
    {
      *(_WORD *)buf = -1;
      v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", buf, 2));
      if (!v74)
      {
        if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
          sub_1006EA7EC();
        v62 = 482;
        goto LABEL_111;
      }
    }
    if (objc_msgSend(v74, "length") == (id)2)
    {
      v75 = *(unsigned __int16 *)objc_msgSend(objc_retainAutorelease(v74), "bytes");
      *(_BYTE *)(v47 + 64) = 3;
      *(_WORD *)(v47 + 66) = 2;
      v76 = bswap32(v75) >> 16;
    }
    else
    {
      if (objc_msgSend(v74, "length") != (id)4)
      {
        *(_BYTE *)(v47 + 64) = 3;
        *(_WORD *)(v47 + 66) = 16;
        *(_QWORD *)(v47 + 72) = objc_msgSend(objc_retainAutorelease(v74), "bytes");
        goto LABEL_149;
      }
      v84 = *(_DWORD *)objc_msgSend(objc_retainAutorelease(v74), "bytes");
      *(_BYTE *)(v47 + 64) = 3;
      *(_WORD *)(v47 + 66) = 4;
      v76 = bswap32(v84);
    }
    *(_DWORD *)(v47 + 72) = v76;
LABEL_149:
    buf[0] = BYTE5(v85);
    buf[1] = BYTE4(v85);
    buf[2] = BYTE3(v85);
    buf[3] = BYTE2(v85);
    buf[4] = BYTE1(v85);
    buf[5] = v85;
    v62 = sub_1001DD1A8((uint64_t)sub_1003D3024, (uint64_t)sub_1003D3178, (uint64_t)sub_1003D3270, a5, (uint64_t)buf, v47 + 24, v93, v47 + 64);

LABEL_111:
    sub_10004339C(&v88);
    if (v62)
    {
      v63 = *(void (****)(_QWORD, void *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))v45;
      v64 = sub_100030DF4(uu);
      v65 = (void *)objc_claimAutoreleasedReturnValue(v64);
      switch(v62)
      {
        case 104:
          v66 = 1802;
          break;
        case 482:
          v66 = 1800;
          break;
        case 402:
          v66 = 1801;
          break;
        default:
          v66 = 1;
          break;
      }
      (**v63)(v63, v65, v66, a5, 0, 0, 0);

    }
    else
    {
      v67 = *(_QWORD *)(v47 + 128);
      if (v67 >= *(_QWORD *)(v47 + 136))
      {
        v69 = sub_1003D7C1C((uint64_t *)(v47 + 120), (uint64_t)v93);
      }
      else
      {
        *(_WORD *)v67 = v93[0];
        uuid_copy((unsigned __int8 *)(v67 + 2), (const unsigned __int8 *)v93 + 2);
        v68 = *(_DWORD *)((char *)&v93[2] + 2);
        *(_DWORD *)(v67 + 21) = *(_DWORD *)((char *)&v93[2] + 5);
        *(_DWORD *)(v67 + 18) = v68;
        v69 = v67 + 26;
        *(_QWORD *)(v47 + 128) = v67 + 26;
      }
      *(_QWORD *)(v47 + 128) = v69;
    }
    sub_100043728(&v88);
    return;
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092CB78);
  v29 = off_1009778C0;
  v30 = sub_100030DF4(uu);
  v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
  v85 = sub_1000589DC((uint64_t)v29, v31, 0);

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092CB98);
  v32 = sub_10006D488((uint64_t)off_1009778E0, v85, 0);
  v28 = v32;
  if (v32 && *(_BYTE *)(v32 + 1324))
    goto LABEL_52;
  v52 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    memset(buf, 0, 37);
    uuid_unparse_upper(uu, buf);
    sub_100091AE8(out, buf);
    v53 = out[23] >= 0 ? out : *(char **)out;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v53;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a5;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "could not connect to device %{public}s on PSM:0x%04x", buf, 0x12u);
    if (out[23] < 0)
      operator delete(*(void **)out);
  }
  if (a3)
  {
    v54 = sub_100030DF4(uu);
    v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
    (**a3)(a3, v55, 1804, a5, 0, 0, 0);

  }
}

void sub_1003D2CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  sub_100043728(&a16);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003D2DB4@<X0>(const unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  _BYTE v4[37];

  memset(v4, 0, sizeof(v4));
  uuid_unparse_upper(a1, v4);
  return sub_100091AE8(a2, v4);
}

uint64_t sub_1003D2E24(uint64_t a1)
{
  unsigned __int16 v2;
  unsigned __int16 v3;
  uint64_t v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  __int16 v8;
  const char *v9;
  NSObject *v10;
  NSObject *v12;
  uint8_t buf[4];
  void *v14;

  if (sub_10019AC00(a1))
  {
    if (*(_WORD *)(a1 + 86))
      v2 = 625 * *(_WORD *)(a1 + 86);
    else
      v2 = 7500;
    if (!*(_BYTE *)(a1 + 70))
    {
      v8 = sub_10021597C(*(unsigned __int16 *)(a1 + 108), *(unsigned __int16 *)(a1 + 104), v2, *(_DWORD *)(a1 + 144), *(_DWORD *)(a1 + 148));
      if (v8)
      {
        v3 = v8 - 4;
        goto LABEL_11;
      }
      if (sub_10005549C())
      {
        sub_100054530("Calculated MTU is zero for rx %d, tx %d, and CE %d us, probe %d", *(unsigned __int16 *)(a1 + 108), *(unsigned __int16 *)(a1 + 104), v2, *(_DWORD *)(a1 + 136));
        v12 = sub_1000544A0(0x5Cu);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          sub_1006EA924(v12);
      }
    }
    v3 = 1024;
LABEL_11:
    if (sub_10005549C())
    {
      v9 = "peripheral";
      if (!*(_BYTE *)(a1 + 70))
        v9 = "central";
      sub_100054530("L2CAP %s MTU %d: for rx %d bytes, tx %d bytes, ce %d us, probestate %d", v9, v3, *(unsigned __int16 *)(a1 + 108), *(unsigned __int16 *)(a1 + 104), v2, *(_DWORD *)(a1 + 136));
      v10 = sub_1000544A0(0x5Cu);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        v14 = sub_100054494();
        v5 = " %{public}s";
        v6 = v10;
        v7 = 12;
        goto LABEL_16;
      }
    }
    return v3;
  }
  v4 = qword_100999880;
  v3 = 672;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v14) = 672;
    v5 = "Default MTU %d for classic Handle";
    v6 = v4;
    v7 = 8;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
  }
  return v3;
}

void sub_1003D3024(int a1, int a2, int a3, int a4)
{
  NSObject *v8;
  uint64_t v9;
  _QWORD v10[4];
  int v11;
  __int16 v12;
  __int16 v13;
  __int16 v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  v8 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109888;
    v16 = a1;
    v17 = 1024;
    v18 = a2;
    v19 = 1024;
    v20 = a3;
    v21 = 1024;
    v22 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "l2capConnected for CID: 0x%0x, inMTU: 0x%x, outMTU: 0x%x, result: 0x%x", buf, 0x1Au);
  }
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_10092CBD8);
  sub_1003D42C0((_QWORD *)qword_10097AA58, a1);
  v9 = sub_1000419F4();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1003D5A54;
  v10[3] = &unk_100920960;
  v12 = a1;
  v13 = a2;
  v14 = a3;
  v11 = a4;
  sub_100041A34(v9, v10);
}

void sub_1003D3178(int a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD v6[4];
  int v7;
  __int16 v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  int v12;

  v4 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v10 = a1;
    v11 = 1024;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "l2capDisconnected for CID: 0x%0x, reson: 0x%x", buf, 0xEu);
  }
  v5 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1003D6084;
  v6[3] = &unk_1009186B0;
  v8 = a1;
  v7 = a2;
  sub_100041A34(v5, v6);
}

void sub_1003D3270(int a1, const void *a2, unsigned int a3, int a4)
{
  NSObject *v8;
  const char *v9;
  _DWORD v10[2];
  __int16 v11;
  unsigned int v12;
  __int16 v13;
  const char *v14;

  v8 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    v9 = "No";
    v10[0] = 67109634;
    v10[1] = a1;
    if (a4)
      v9 = "Yes";
    v11 = 1024;
    v12 = a3;
    v13 = 2082;
    v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "l2capDataInd for CID: 0x%0x, len: 0x%x wakeUpEvent: %{public}s", (uint8_t *)v10, 0x18u);
  }
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_10092CBD8);
  sub_1003D65B8((_QWORD *)qword_10097AA58, a1, a2, a3, a4);
}

void sub_1003D33A0(unsigned int a1, __int16 a2, unsigned int a3, int a4)
{
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  _QWORD v11[4];
  int v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  int *v16;

  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_10092CBD8);
  v16 = 0;
  sub_1003D42C0((_QWORD *)qword_10097AA58, a1);
  if (!a4 && (!sub_1001DB044(a1, (uint64_t *)&v16) || !sub_1001E3CCC(v16)))
  {
    v9 = (uint64_t *)sub_1001E3CCC(v16);
    v10 = sub_1003D2E24(*v9);
    if (v10 < a3)
      a3 = a3 / v10 * v10;
  }
  v8 = sub_1000419F4();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1003D4420;
  v11[3] = &unk_100920960;
  v13 = a1;
  v14 = a2;
  v15 = a3;
  v12 = a4;
  sub_100041A34(v8, v11);
}

void sub_1003D34A0(__int16 a1, int a2)
{
  uint64_t v4;
  _QWORD v5[4];
  int v6;
  __int16 v7;

  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003D4A5C;
  v5[3] = &unk_1009186B0;
  v7 = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_1003D3508(int a1, const void *a2, unsigned int a3, int a4)
{
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_10092CBD8);
  sub_1003D4F90((_QWORD *)qword_10097AA58, a1, a2, a3, a4);
}

void sub_1003D3578(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 *uu)
{
  int is_null;
  NSObject *v9;
  void **v10;
  void **v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned __int16 *v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *__p[2];
  char v31;
  void *v32[2];
  char v33;
  uint8_t buf[4];
  void **v35;
  __int16 v36;
  void **v37;
  __int16 v38;
  int v39;
  uint8_t out[40];

  if (!a2 && os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_FAULT))
    sub_1006EA6FC();
  if (!(_DWORD)a3 && os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_FAULT))
    sub_1006EA8F8();
  is_null = uuid_is_null(uu);
  v9 = qword_100999880;
  if (is_null && os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)out = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "device cannot be empty", out, 2u);
    v9 = qword_100999880;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = v32;
    sub_1000340DC(a2, (uint64_t)v32);
    if (v33 < 0)
      v10 = (void **)v32[0];
    memset(out, 0, 37);
    uuid_unparse_upper(uu, (char *)out);
    sub_100091AE8(__p, (char *)out);
    if (v31 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    *(_DWORD *)buf = 136446722;
    v35 = v10;
    v36 = 2082;
    v37 = v11;
    v38 = 1024;
    v39 = a3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" trying to disconnect device %{public}s on PSM:0x%04x", buf, 0x1Cu);
    if (v31 < 0)
      operator delete(__p[0]);
    if (v33 < 0)
      operator delete(v32[0]);
  }
  v14 = *(_QWORD **)(a1 + 24);
  v13 = (_QWORD *)(a1 + 24);
  v12 = v14;
  if (v14)
  {
    v15 = v13;
    do
    {
      v16 = v12[4];
      v17 = v16 >= a2;
      if (v16 >= a2)
        v18 = v12;
      else
        v18 = v12 + 1;
      if (v17)
        v15 = v12;
      v12 = (_QWORD *)*v18;
    }
    while (*v18);
    if (v15 != v13 && v15[4] <= a2)
    {
      v19 = (uint64_t *)v15[5];
      v21 = (uint64_t *)v19[1];
      v20 = (uint64_t *)v19[2];
      while (1)
      {
        if (v21 == v20)
        {
          v27 = *v19;
          v28 = sub_100030DF4(uu);
          v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
          (*(void (**)(uint64_t, void *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v27 + 8))(v27, v29, 1804, a3, 0);

          return;
        }
        v22 = *v21;
        v23 = *(unsigned __int16 **)(*v21 + 120);
        if (v23 != *(unsigned __int16 **)(*v21 + 128))
          break;
LABEL_42:
        ++v21;
      }
      while (1)
      {
        if (*((_BYTE *)v23 + 18) == 1 && !uuid_compare((const unsigned __int8 *)v23 + 2, uu))
        {
          out[0] = 0;
          sub_100043758(out);
          v24 = *v23;
          v25 = *(_BYTE *)(v22 + 56) ? sub_1001DEE88(v24) : sub_1001DEB7C(v24, 1818);
          v26 = v25;
          sub_10004339C(out);
          sub_100043728(out);
          if (!v26)
            break;
        }
        v23 += 13;
        if (v23 == *(unsigned __int16 **)(v22 + 128))
        {
          v20 = (uint64_t *)v19[2];
          goto LABEL_42;
        }
      }
    }
  }
}

void sub_1003D3864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

id sub_1003D38A4(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  void *v15;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v3 = *(_QWORD **)(a1 + 16);
  v4 = (_QWORD *)(a1 + 24);
  if (v3 != (_QWORD *)(a1 + 24))
  {
    do
    {
      v5 = v3[5];
      if (*(_BYTE *)(v5 + 40) == 1)
      {
        v7 = *(uint64_t **)(v5 + 8);
        v6 = *(uint64_t **)(v5 + 16);
        while (v7 != v6)
        {
          v8 = *v7;
          v9 = *(_QWORD *)(*v7 + 120);
          if (v9 != *(_QWORD *)(*v7 + 128))
          {
            do
            {
              v10 = sub_100030DF4((const unsigned __int8 *)(v9 + 2));
              v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
              objc_msgSend(v2, "addObject:", v11);

              v9 += 26;
            }
            while (v9 != *(_QWORD *)(v8 + 128));
            v6 = *(uint64_t **)(v5 + 16);
          }
          ++v7;
        }
      }
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
    }
    while (v13 != v4);
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allObjects"));

  return v15;
}

void sub_1003D39B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003D39D4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  char v5;
  unsigned __int16 v6;
  unsigned __int8 v7;
  size_t v8;
  unint64_t v9;
  int v10;
  void **v11;
  uint64_t v12;
  void **p_s1;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  void *__p[2];
  unsigned __int8 v31;
  void *__s1;
  size_t __n;
  unsigned __int8 v34;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = (_QWORD *)(a1 + 24);
  if (v2 != (_QWORD *)(a1 + 24))
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      sub_1000340DC(v2[4], (uint64_t)&__s1);
      sub_1000340DC(a2, (uint64_t)__p);
      v7 = v34;
      if ((v34 & 0x80u) == 0)
        v8 = v34;
      else
        v8 = __n;
      v9 = v31;
      v10 = (char)v31;
      if ((v31 & 0x80u) != 0)
        v9 = (unint64_t)__p[1];
      if (v8 != v9)
      {
        v20 = 0;
        if (((char)v31 & 0x80000000) == 0)
          goto LABEL_25;
        goto LABEL_29;
      }
      v11 = (v31 & 0x80u) == 0 ? __p : (void **)__p[0];
      if ((char)v34 < 0)
        break;
      if (v34)
      {
        v12 = v34 - 1;
        p_s1 = &__s1;
        do
        {
          v15 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          v14 = v15;
          v17 = *(unsigned __int8 *)v11;
          v11 = (void **)((char *)v11 + 1);
          v16 = v17;
          v19 = v12-- != 0;
          v20 = v14 == v16;
        }
        while (v14 == v16 && v19);
LABEL_24:
        if ((v10 & 0x80000000) == 0)
          goto LABEL_25;
        goto LABEL_29;
      }
      v20 = 1;
      if (((char)v31 & 0x80000000) == 0)
      {
LABEL_25:
        if ((v7 & 0x80) == 0)
          goto LABEL_26;
        goto LABEL_30;
      }
LABEL_29:
      operator delete(__p[0]);
      if ((v34 & 0x80) == 0)
      {
LABEL_26:
        if (v20)
          goto LABEL_31;
        goto LABEL_39;
      }
LABEL_30:
      operator delete(__s1);
      if (v20)
      {
LABEL_31:
        v21 = v2[5];
        if (*(_BYTE *)(v21 + 40) == 1)
        {
          v22 = *(_QWORD *)(v21 + 8);
          v23 = *(_QWORD *)(v21 + 16);
          while (v22 != v23)
          {
            v25 = *(_QWORD *)(*(_QWORD *)v22 + 120);
            v24 = *(_QWORD *)(*(_QWORD *)v22 + 128);
            if (v25 != v24)
            {
              if (v5 || (v6 = *(_WORD *)(*(_QWORD *)v22 + 2), v5 = 1, v25 + 26 != v24))
                ++v5;
            }
            v22 += 8;
          }
        }
      }
LABEL_39:
      v26 = (_QWORD *)v2[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v2[2];
          v28 = *v27 == (_QWORD)v2;
          v2 = v27;
        }
        while (!v28);
      }
      v2 = v27;
      if (v27 == v3)
        return v6;
    }
    v20 = memcmp(__s1, v11, __n) == 0;
    goto LABEL_24;
  }
  return 0;
}

void sub_1003D3BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1003D3BC0(uint64_t a1, unint64_t a2, unsigned __int8 *uu2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD **)(a1 + 16);
  v4 = (_QWORD *)(a1 + 24);
  if (v3 != (_QWORD *)(a1 + 24))
  {
    do
    {
      v8 = v3[5];
      if (!*(_BYTE *)(v8 + 40))
      {
        v13 = *(uint64_t **)(v8 + 8);
        v12 = *(uint64_t **)(v8 + 16);
        while (v13 != v12)
        {
          v14 = *v13;
          v15 = *(_QWORD *)(*v13 + 120);
          if (v15 != *(_QWORD *)(*v13 + 128))
          {
            while (uuid_compare((const unsigned __int8 *)(v15 + 2), uu2))
            {
              v15 += 26;
              if (v15 == *(_QWORD *)(v14 + 128))
              {
                v12 = *(uint64_t **)(v8 + 16);
                goto LABEL_16;
              }
            }
            sub_1003D3578(a1, a2, *(unsigned __int16 *)(v14 + 2), (unsigned __int8 *)(v15 + 2));
            return;
          }
LABEL_16:
          ++v13;
        }
      }
      v9 = (_QWORD *)v3[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v3[2];
          v11 = *v10 == (_QWORD)v3;
          v3 = v10;
        }
        while (!v11);
      }
      v3 = v10;
    }
    while (v10 != v4);
  }
}

void sub_1003D3CD4(uint64_t a1)
{
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_10092CBD8);
  sub_1003D3D30(qword_10097AA58, *(unsigned __int16 *)(a1 + 48), *(_DWORD **)(a1 + 32), *(unsigned __int16 *)(a1 + 50), *(unsigned __int8 *)(a1 + 52));
}

void sub_1003D3D30(uint64_t a1, int a2, _DWORD *a3, unsigned int a4, int a5)
{
  NSObject *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t v20;
  NSObject *v21;
  unsigned int v22;
  unsigned __int16 v23;
  _BOOL4 v24;
  NSObject *v25;
  const char *v26;
  int v27;
  _BOOL4 v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  NSObject *v33;
  uint64_t v34;
  int v35;
  _BYTE *v36;
  id v37;
  void *v38;
  _BYTE *v39;
  int v40;
  uint64_t (**v42)();
  unsigned int *v43;
  char v44;
  uint8_t v45[4];
  unsigned int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  _BYTE buf[26];
  char *v52;
  __int16 v53;
  unsigned int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  uuid_t uu;

  v9 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 1040;
    *(_DWORD *)&buf[10] = 6;
    *(_WORD *)&buf[14] = 2096;
    *(_QWORD *)&buf[16] = (char *)a3 + 1;
    *(_WORD *)&buf[24] = 1024;
    LODWORD(v52) = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Connection Indication PSM:0x%04x Address: %{bluetooth:BD_ADDR}.6P) cid:%d", buf, 0x1Eu);
  }
  v10 = *(_QWORD **)(a1 + 16);
  if (v10 == (_QWORD *)(a1 + 24))
  {
LABEL_15:
    if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
      sub_1006EA99C();
  }
  else
  {
    while (1)
    {
      v11 = v10[5];
      v12 = sub_1003D39D4(a1, v10[4]);
      v13 = *(uint64_t **)(v11 + 8);
      v14 = *(uint64_t **)(v11 + 16);
      if (v13 != v14)
        break;
LABEL_9:
      v17 = (_QWORD *)v10[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v10[2];
          v19 = *v18 == (_QWORD)v10;
          v10 = v18;
        }
        while (!v19);
      }
      v10 = v18;
      if (v18 == (_QWORD *)(a1 + 24))
        goto LABEL_15;
    }
    v15 = v12;
    while (1)
    {
      v16 = *v13;
      if (*(unsigned __int16 *)(*v13 + 2) == a2 && !*(_BYTE *)(v16 + 4))
        break;
      if (++v13 == v14)
        goto LABEL_9;
    }
    memset(uu, 0, sizeof(uu));
    uuid_clear(uu);
    v20 = sub_10019AFA0(a3);
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10092CBB8);
    if (sub_10061E090((uint64_t)off_1009778A0, v20, uu) && !uuid_is_null(uu))
    {
      v44 = 0;
      sub_100043758(&v44);
      v22 = sub_1003D2E24(v20);
      v23 = v22 + v22 * (0x400 / v22);
      *(_WORD *)(v16 + 8) = v23;
      *(_WORD *)(v16 + 10) = v23;
      if (v15)
        v24 = *(unsigned __int16 *)(v16 + 2) == v15;
      else
        v24 = 0;
      v25 = qword_100999880;
      if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
      {
        v26 = "Rejecting";
        v27 = *(unsigned __int16 *)(v16 + 2);
        *(_DWORD *)buf = 136316674;
        if (v24)
          v26 = "Accepting";
        *(_QWORD *)&buf[4] = v26;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v27;
        *(_WORD *)&buf[18] = 1040;
        *(_DWORD *)&buf[20] = 6;
        *(_WORD *)&buf[24] = 2096;
        v52 = (char *)a3 + 1;
        v53 = 1024;
        v54 = a4;
        v55 = 1024;
        v56 = v23;
        v57 = 1024;
        v58 = v23;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%s connection for PSM:0x%04x Address: %{bluetooth:BD_ADDR}.6P) cid:%d inMTU=%d inMPS=%d", buf, 0x34u);
      }
      if (v15)
        v28 = *(unsigned __int16 *)(v16 + 2) == v15;
      else
        v28 = 1;
      if (sub_1001DE5D8((uint64_t)sub_1003D33A0, (uint64_t)sub_1003D34A0, (uint64_t)sub_1003D3508, a4, v16 + 8, v28))
      {
        if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
          sub_1006EAA04();
      }
      else
      {
        memset(&buf[2], 0, 24);
        *(_WORD *)buf = a4;
        uuid_copy(&buf[2], uu);
        buf[18] = 0;
        *(_DWORD *)&buf[20] = 0;
        buf[24] = 0;
        v29 = *(_QWORD *)(v16 + 128);
        if (v29 >= *(_QWORD *)(v16 + 136))
        {
          v31 = sub_1003D7C1C((uint64_t *)(v16 + 120), (uint64_t)buf);
        }
        else
        {
          *(_WORD *)v29 = *(_WORD *)buf;
          uuid_copy((unsigned __int8 *)(v29 + 2), &buf[2]);
          v30 = *(_DWORD *)&buf[18];
          *(_DWORD *)(v29 + 21) = *(_DWORD *)&buf[21];
          *(_DWORD *)(v29 + 18) = v30;
          v31 = v29 + 26;
          *(_QWORD *)(v16 + 128) = v29 + 26;
        }
        *(_QWORD *)(v16 + 128) = v31;
        if (!*(_WORD *)(v16 + 16))
        {
          v32 = sub_1001D85EC(a4, *(unsigned __int16 *)(v16 + 14));
          if (v32)
          {
            v33 = qword_100999880;
            if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
            {
              v40 = *(unsigned __int16 *)(v16 + 14);
              *(_DWORD *)v45 = 67109632;
              v46 = a4;
              v47 = 1024;
              v48 = v40;
              v49 = 1024;
              v50 = v32;
              _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "LE_L2CAP_SendChannelCredits cid=%d credits=%d failed with status %d", v45, 0x14u);
            }
          }
        }
      }
      if (a5)
      {
        memset(buf, 0, 24);
        sub_10050945C(v10[4], (std::string *)buf);
        v34 = sub_10005D5A4();
        v35 = buf[23];
        v36 = *(_BYTE **)buf;
        v37 = sub_100030DF4(uu);
        v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
        if (v35 >= 0)
          v39 = buf;
        else
          v39 = v36;
        v42 = &off_100918258;
        v43 = 0;
        (*(void (**)(uint64_t, uint64_t, _BYTE *, void *, uint64_t (***)()))(*(_QWORD *)v34 + 40))(v34, 3, v39, v38, &v42);
        v42 = &off_100918258;
        if (v43)
          sub_100056AAC(v43);

        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      sub_100043728(&v44);
    }
    else
    {
      v21 = qword_100999880;
      if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
        sub_1006EAA64(a3, v21);
    }
  }
}

void sub_1003D4258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)(v26 + 128) = v25;
  sub_100043728(&a15);
  _Unwind_Resume(a1);
}

void sub_1003D42C0(_QWORD *a1, int a2)
{
  NSObject *v4;
  unint64_t v5;
  char *v6;
  _WORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;
  _DWORD v18[2];

  v4 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    v18[0] = 67109120;
    v18[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "cid:0x%04x", (uint8_t *)v18, 8u);
  }
  v5 = a1[10];
  v6 = (char *)a1[9];
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)a1[8];
    v9 = v6 - v8;
    if (v6 - v8 <= -3)
      abort();
    v10 = v9 >> 1;
    v11 = v5 - (_QWORD)v8;
    if (v11 <= (v9 >> 1) + 1)
      v12 = v10 + 1;
    else
      v12 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      v14 = (char *)sub_1002B54AC((uint64_t)(a1 + 10), v13);
      v8 = (char *)a1[8];
      v6 = (char *)a1[9];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v10];
    v16 = &v14[2 * v13];
    *(_WORD *)v15 = a2;
    v7 = v15 + 2;
    while (v6 != v8)
    {
      v17 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v15 - 1) = v17;
      v15 -= 2;
    }
    a1[8] = v15;
    a1[9] = v7;
    a1[10] = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_WORD *)v6 = a2;
    v7 = v6 + 2;
  }
  a1[9] = v7;
}

void sub_1003D4420(uint64_t a1)
{
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_10092CBD8);
  sub_1003D447C(qword_10097AA58, *(unsigned __int16 *)(a1 + 36), *(unsigned __int16 *)(a1 + 38), *(unsigned __int16 *)(a1 + 40), *(unsigned int *)(a1 + 32));
}

void sub_1003D447C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *i;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _BOOL4 v21;
  NSObject *v22;
  int v23;
  int v24;
  uint64_t v25;
  NSObject *v26;
  int v27;
  NSObject *v28;
  void (***v29)(_QWORD, void *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD);
  id v30;
  void *v31;
  uint64_t v32;
  void **v33;
  void **v34;
  int v35;
  void *__p[2];
  char v37;
  uint64_t v38;
  unsigned int v39;
  uuid_t dst;
  uint8_t buf[40];

  v10 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = a4;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&buf[22] = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "connectedCB cid:0x%04x inMTU:%d outMTU:%d result:%d", buf, 0x1Au);
  }
  v39 = -1;
  v38 = 0;
  v11 = *(_QWORD **)(a1 + 16);
  if (v11 != (_QWORD *)(a1 + 24))
  {
    do
    {
      v12 = v11[5];
      for (i = *(uint64_t **)(v12 + 8); i != *(uint64_t **)(v12 + 16); ++i)
      {
        v14 = *i;
        v16 = *(_QWORD *)(*i + 120);
        v15 = *(unsigned __int16 **)(*i + 128);
        if ((unsigned __int16 *)v16 != v15)
        {
          v17 = -v16;
          while (*(unsigned __int16 *)v16 != (_DWORD)a2)
          {
            v16 += 26;
            v17 -= 26;
            if ((unsigned __int16 *)v16 == v15)
              goto LABEL_10;
          }
          memset(dst, 0, sizeof(dst));
          uuid_copy(dst, (const unsigned __int8 *)(v16 + 2));
          if ((_DWORD)a5)
          {
            if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
              sub_1006EAB40();
            sub_1003D6A54(a1, a2);
            v21 = 1;
          }
          else
          {
            *(_WORD *)(v16 + 20) = a3;
            *(_WORD *)(v16 + 22) = a4;
            *(_BYTE *)(v16 + 18) = 1;
            if (qword_1009778A8 != -1)
              dispatch_once(&qword_1009778A8, &stru_10092CBB8);
            v21 = sub_100623C54((uint64_t)off_1009778A0, (unsigned __int8 *)(v16 + 2), &v38);
            v22 = qword_100999880;
            if (v21)
            {
              if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
              {
                v23 = *(unsigned __int16 *)(v16 + 20);
                v24 = *(unsigned __int16 *)(v16 + 22);
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&buf[4] = a2;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v23;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&buf[16] = v24;
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Registering pipe cid:0x%04x inMTU:%d outMTU:%d", buf, 0x14u);
              }
              v25 = sub_1002B5578();
              if (!sub_1002B6778(v25, v38, a2, *(_DWORD *)(v12 + 36), a4, (int *)&v39, *(_DWORD *)(v14 + 112)))
              {
                buf[0] = 0;
                sub_100043758(buf);
                sub_1001F37D8(v38);
                sub_100043728(buf);
                sub_1003D6A54(a1, a2);
                if (!*(_WORD *)(v14 + 16))
                {
                  LOBYTE(__p[0]) = 0;
                  sub_100043758(__p);
                  v27 = sub_1001D85EC(a2, *(unsigned __int16 *)(v14 + 14));
                  sub_10004339C(__p);
                  if (v27)
                  {
                    v28 = qword_100999880;
                    if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
                    {
                      v35 = *(unsigned __int16 *)(v14 + 14);
                      *(_DWORD *)buf = 67109632;
                      *(_DWORD *)&buf[4] = a2;
                      *(_WORD *)&buf[8] = 1024;
                      *(_DWORD *)&buf[10] = v35;
                      *(_WORD *)&buf[14] = 1024;
                      *(_DWORD *)&buf[16] = v27;
                      _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "LE_L2CAP_SendChannelCredits cid=%d credits=%d failed with status %d", buf, 0x14u);
                    }
                  }
                  sub_100043728(__p);
                }
                a5 = 0;
                v21 = 0;
                goto LABEL_44;
              }
              v26 = qword_100999880;
              if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
              {
                memset(buf, 0, 37);
                uuid_unparse_upper(dst, (char *)buf);
                sub_100091AE8(__p, (char *)buf);
                v34 = v37 >= 0 ? __p : (void **)__p[0];
                *(_DWORD *)buf = 67109378;
                *(_DWORD *)&buf[4] = a2;
                *(_WORD *)&buf[8] = 2082;
                *(_QWORD *)&buf[10] = v34;
                _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Failed to register a socket for channel 0x%04x on device \"%{public}s\"", buf, 0x12u);
                if (v37 < 0)
                  operator delete(__p[0]);
              }
              buf[0] = 0;
              sub_100043758(buf);
              if (*(_BYTE *)(v14 + 56))
                sub_1001DEE88(a2);
              else
                sub_1001DEB7C(a2, 436);
              sub_100043728(buf);
              a5 = 1805;
            }
            else
            {
              if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
              {
                memset(buf, 0, 37);
                uuid_unparse_upper((const unsigned __int8 *)(v16 + 2), (char *)buf);
                sub_100091AE8(__p, (char *)buf);
                v33 = v37 >= 0 ? __p : (void **)__p[0];
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = v33;
                _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Connection manager wasn't tracking \"%{public}s\" !", buf, 0xCu);
                if (v37 < 0)
                  operator delete(__p[0]);
              }
              a5 = 1804;
            }
            sub_1003D6A54(a1, a2);
          }
LABEL_44:
          v29 = *(void (****)(_QWORD, void *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))v12;
          v30 = sub_100030DF4(dst);
          v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
          (**v29)(v29, v31, a5, *(unsigned __int16 *)(v14 + 2), a2, 0, v39);

          if (v21)
          {
            sub_1003D7F4C(26 - v17, *(_QWORD *)(v14 + 128), -v17);
            *(_QWORD *)(v14 + 128) = v32;
          }
          return;
        }
LABEL_10:
        ;
      }
      v18 = (_QWORD *)v11[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v11[2];
          v20 = *v19 == (_QWORD)v11;
          v11 = v19;
        }
        while (!v20);
      }
      v11 = v19;
    }
    while (v19 != (_QWORD *)(a1 + 24));
  }
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
    sub_1006EAAE0();
  sub_1003D6A54(a1, a2);
}

void sub_1003D4A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

void sub_1003D4A5C(uint64_t a1)
{
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_10092CBD8);
  sub_1003D4AB0(qword_10097AA58, *(unsigned __int16 *)(a1 + 36), *(_DWORD *)(a1 + 32));
}

void sub_1003D4AB0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  NSObject *v14;
  void **v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t *v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  void *v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  void *__p[2];
  char v44;
  uuid_t dst;
  uint8_t buf[48];

  v6 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "disconnectedCB cid:%d reason:%d", buf, 0xEu);
  }
  v39 = a3;
  v41 = a1;
  v7 = a1 + 16;
  v8 = *(_QWORD **)(a1 + 16);
  v40 = (_QWORD *)(v7 + 8);
  if (v8 != (_QWORD *)(v7 + 8))
  {
    while (2)
    {
      v42 = (_QWORD *)v8[5];
      v10 = (uint64_t *)v42[1];
      v9 = (uint64_t *)v42[2];
      while (v10 != v9)
      {
        v11 = *v10;
        v12 = *(unsigned __int16 **)(*v10 + 120);
        if (v12 != *(unsigned __int16 **)(*v10 + 128))
        {
          v13 = -(uint64_t)v12;
          while (1)
          {
            memset(dst, 0, sizeof(dst));
            uuid_copy(dst, (const unsigned __int8 *)v12 + 2);
            v14 = qword_100999880;
            if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_INFO))
            {
              memset(buf, 0, 37);
              uuid_unparse_upper(dst, (char *)buf);
              sub_100091AE8(__p, (char *)buf);
              v15 = __p;
              if (v44 < 0)
                v15 = (void **)__p[0];
              v16 = *v12;
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = v15;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v16;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "device=%{public}s cid=%x", buf, 0x12u);
              if (v44 < 0)
                operator delete(__p[0]);
            }
            if (*v12 == (_DWORD)a2)
              break;
            v12 += 13;
            v13 -= 26;
            if (v12 == *(unsigned __int16 **)(v11 + 128))
            {
              v9 = (uint64_t *)v42[2];
              goto LABEL_16;
            }
          }
          v25 = sub_1002B5578();
          sub_1002B888C(v25, *v12);
          if (!*((_BYTE *)v42 + 32))
          {
            v26 = *v42;
            v27 = sub_100030DF4(dst);
            v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
            (*(void (**)(uint64_t, void *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v26 + 8))(v26, v28, v39, *(unsigned __int16 *)(v11 + 2), a2);

          }
          sub_1003D7F4C(26 - v13, *(_QWORD *)(v11 + 128), -v13);
          *(_QWORD *)(v11 + 128) = v29;
          if (*(_BYTE *)v11)
          {
            if (!*(_BYTE *)(v11 + 4) && v29 == *(_QWORD *)(v11 + 120))
            {
              v30 = sub_1003D1CFC(v41, v11);
              if ((_DWORD)v30 != 10 && !*((_BYTE *)v42 + 32))
                (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*v42 + 24))(*v42, *(unsigned __int16 *)(v11 + 2), v30);
            }
            v31 = *(void **)(v11 + 128);
            if (v31 == *(void **)(v11 + 120))
            {
              v32 = (uint64_t *)v42[2];
              v33 = (char *)v32 - (char *)(v10 + 1);
              if (v32 != v10 + 1)
              {
                memmove(v10, v10 + 1, (char *)v32 - (char *)(v10 + 1));
                v31 = *(void **)(v11 + 120);
              }
              v42[2] = (char *)v10 + v33;
              if (v31)
              {
                *(_QWORD *)(v11 + 128) = v31;
                operator delete(v31);
              }
              operator delete();
            }
            if (*((_BYTE *)v42 + 32) && v42[2] == v42[1])
            {
              sub_1003D7824((uint64_t)v42);
              operator delete();
            }
          }
          return;
        }
LABEL_16:
        ++v10;
      }
      v17 = (_QWORD *)v8[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v8[2];
          v19 = *v18 == (_QWORD)v8;
          v8 = v18;
        }
        while (!v19);
      }
      v8 = v18;
      if (v18 != v40)
        continue;
      break;
    }
  }
  v21 = *(uint64_t **)(v41 + 88);
  v20 = *(uint64_t **)(v41 + 96);
  while (v21 != v20)
  {
    v22 = *v21;
    v23 = *(unsigned __int16 **)(*v21 + 120);
    if (v23 != *(unsigned __int16 **)(*v21 + 128))
    {
      v24 = -(uint64_t)v23;
      while (1)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        uuid_copy(buf, (const unsigned __int8 *)v23 + 2);
        if (*v23 == (_DWORD)a2)
          break;
        v23 += 13;
        v24 -= 26;
        if (v23 == *(unsigned __int16 **)(v22 + 128))
        {
          v20 = *(uint64_t **)(v41 + 96);
          goto LABEL_30;
        }
      }
      v34 = sub_1002B5578();
      sub_1002B888C(v34, *v23);
      sub_1003D7F4C(26 - v24, *(_QWORD *)(v22 + 128), -v24);
      *(_QWORD *)(v22 + 128) = v35;
      if (v35 == *(_QWORD *)(v22 + 120))
      {
        if (!*(_BYTE *)(v22 + 4))
          sub_1003D1CFC(v41, v22);
        v36 = *(uint64_t **)(v41 + 96);
        v37 = (char *)v36 - (char *)(v21 + 1);
        if (v36 != v21 + 1)
          memmove(v21, v21 + 1, (char *)v36 - (char *)(v21 + 1));
        *(_QWORD *)(v41 + 96) = (char *)v21 + v37;
        v38 = *(void **)(v22 + 120);
        if (v38)
        {
          *(_QWORD *)(v22 + 128) = v38;
          operator delete(v38);
        }
        operator delete();
      }
      return;
    }
LABEL_30:
    ++v21;
  }
}

void sub_1003D4F78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1003D4F90(_QWORD *a1, int a2, const void *a3, unsigned int a4, int a5)
{
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const unsigned __int8 *i;
  id v21;
  uint64_t v22;
  std::string *p_p;
  std::string::size_type size;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  std::string *v30;
  uint64_t v31;
  uint64_t (**v32)();
  unsigned int *v33;
  uint64_t (**v34)();
  unsigned int *v35;
  std::string __p;
  uint8_t buf[16];
  _QWORD v38[8];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[144];
  uint64_t v43;

  v11 = (unsigned __int16 *)a1[8];
  v10 = (unsigned __int16 *)a1[9];
  if (v11 != v10)
  {
    while (*v11 != a2)
    {
      if (++v11 == v10)
      {
        v11 = (unsigned __int16 *)a1[9];
        break;
      }
    }
  }
  if (v11 != v10)
  {
    v12 = qword_100999880;
    if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Queueing initial data on channel 0x%04x as the L2CAP Channel hasn't finished registration", buf, 8u);
    }
    operator new();
  }
  v13 = sub_1002B5578();
  sub_1002B8ED4(v13, a2, a3, a4, 1, a5);
  if (a5)
  {
    v43 = 0;
    v41 = 0u;
    memset(v42, 0, sizeof(v42));
    v39 = 0u;
    v40 = 0u;
    *(_OWORD *)buf = 0u;
    memset(v38, 0, sizeof(v38));
    sub_1002613AC((uint64_t)buf);
    v14 = (_QWORD *)a1[2];
    v15 = a1 + 3;
    if (v14 == a1 + 3)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = v14[5];
        v18 = *(_QWORD *)(v17 + 8);
        v19 = *(_QWORD *)(v17 + 16);
LABEL_13:
        if (v18 == v19)
        {
          v25 = 0;
        }
        else
        {
          for (i = *(const unsigned __int8 **)(*(_QWORD *)v18 + 120); ; i += 26)
          {
            if (i == *(const unsigned __int8 **)(*(_QWORD *)v18 + 128))
            {
              v18 += 8;
              goto LABEL_13;
            }
            if (*(unsigned __int16 *)i == a2)
              break;
          }
          v21 = sub_100030DF4(i + 2);
          v22 = objc_claimAutoreleasedReturnValue(v21);

          sub_10050945C(v14[4], &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          sub_1002614D8(v38, (uint64_t)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v25 = 1;
          v16 = (void *)v22;
        }
        v26 = (_QWORD *)v14[1];
        if (v26)
        {
          do
          {
            v27 = v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v27 = (_QWORD *)v14[2];
            v28 = *v27 == (_QWORD)v14;
            v14 = v27;
          }
          while (!v28);
        }
        if (v27 == v15)
          v25 = 1;
        v14 = v27;
      }
      while ((v25 & 1) == 0);
    }
    v34 = 0;
    v35 = 0;
    sub_10003994C(&v34, a3, a4);
    v29 = sub_10005D5A4();
    v30 = &__p;
    std::stringbuf::str(&v38[1]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v32 = &off_100918258;
    v33 = v35;
    if (v35)
      sub_10003C37C((uint64_t)v35);
    (*(void (**)(uint64_t, uint64_t, std::string *, void *, uint64_t (***)()))(*(_QWORD *)v29 + 40))(v29, 4, v30, v16, &v32);
    v32 = &off_100918258;
    if (v33)
      sub_100056AAC(v33);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v34 = &off_100918258;
    if (v35)
      sub_100056AAC(v35);

    v38[0] = v31;
    if (SHIBYTE(v40) < 0)
      operator delete(*((void **)&v39 + 1));
    std::streambuf::~streambuf(&v38[1]);
    std::ios::~ios(v42);
  }
}

void sub_1003D5364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;

  if (a19 < 0)
    operator delete(__p);
  if (a13)
    sub_100056AAC(a13);

  sub_1006CC5C8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_1003D5420(uint64_t a1)
{
  uint64_t v2;
  int v3;
  const void *v4;
  size_t v5;
  _QWORD *v6;
  unsigned int *v7;

  v2 = sub_1002B5578();
  v3 = *(unsigned __int16 *)(a1 + 40);
  v4 = (const void *)sub_10003EB18(*(_QWORD *)(a1 + 32));
  v5 = sub_10003F8C4(*(_QWORD *)(a1 + 32));
  sub_1002B8ED4(v2, v3, v4, v5, 1, *(_BYTE *)(a1 + 42));
  v6 = *(_QWORD **)(a1 + 32);
  if (v6)
  {
    *v6 = &off_100918258;
    v7 = (unsigned int *)v6[1];
    if (v7)
      sub_100056AAC(v7);
    operator delete();
  }
}

void sub_1003D54C4(uint64_t a1)
{
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_10092CBD8);
  sub_1003D551C(qword_10097AA58, *(unsigned __int16 *)(a1 + 40), *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 42));
}

void sub_1003D551C(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 *v18;
  NSObject *v19;
  int v20;
  id v21;
  void *v22;
  void *v23;
  unsigned int v24;
  unsigned int v25;
  NSObject *v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  char v32;
  unsigned __int8 src[8];
  uint64_t v34;
  _BYTE buf[10];
  __int128 v36;
  unsigned int v37;
  __int16 v38;
  int v39;

  v8 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 1040;
    LODWORD(v36) = 6;
    WORD2(v36) = 2096;
    *(_QWORD *)((char *)&v36 + 6) = a3;
    HIWORD(v36) = 1024;
    v37 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "l2capConnectIndCb PSM:0x%04x Address: %{bluetooth:BD_ADDR}.6P) cid:%d", buf, 0x1Eu);
  }
  v9 = *(_QWORD **)(a1 + 16);
  if (v9 != (_QWORD *)(a1 + 24))
  {
    while (2)
    {
      v10 = v9[5];
      v11 = *(uint64_t **)(v10 + 8);
      v12 = *(uint64_t **)(v10 + 16);
      while (v11 != v12)
      {
        v13 = *v11;
        if (*(unsigned __int16 *)(*v11 + 2) == a2 && !*(_BYTE *)(v13 + 4))
        {
          if (qword_1009778E8 != -1)
            dispatch_once(&qword_1009778E8, &stru_10092CB98);
          *(_DWORD *)buf = *(_DWORD *)a3;
          *(_WORD *)&buf[4] = *(_WORD *)(a3 + 4);
          v17 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
          v18 = (unsigned __int8 *)v17;
          if (v17 && *(_BYTE *)(v17 + 1324))
          {
            v19 = qword_100999880;
            if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
            {
              v20 = *(unsigned __int16 *)(v13 + 24);
              *(_DWORD *)buf = 67110146;
              *(_DWORD *)&buf[4] = a2;
              *(_WORD *)&buf[8] = 1040;
              LODWORD(v36) = 6;
              WORD2(v36) = 2096;
              *(_QWORD *)((char *)&v36 + 6) = a3;
              HIWORD(v36) = 1024;
              v37 = a4;
              v38 = 1024;
              v39 = v20;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Accepting connection for PSM:0x%04x Address: %{bluetooth:BD_ADDR}.6P) cid:%d inMTU=%d", buf, 0x24u);
            }
            v21 = sub_1004534D8((uint64_t)v18, a2);
            v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
            v23 = v22;
            if (v22)
            {
              if (objc_msgSend(v22, "length") == (id)2)
              {
                v24 = *(unsigned __int16 *)objc_msgSend(objc_retainAutorelease(v23), "bytes");
                *(_BYTE *)(v13 + 64) = 3;
                *(_WORD *)(v13 + 66) = 2;
                v25 = bswap32(v24) >> 16;
                goto LABEL_32;
              }
              if (objc_msgSend(v23, "length") == (id)4)
              {
                v27 = *(_DWORD *)objc_msgSend(objc_retainAutorelease(v23), "bytes");
                *(_BYTE *)(v13 + 64) = 3;
                *(_WORD *)(v13 + 66) = 4;
                v25 = bswap32(v27);
LABEL_32:
                *(_DWORD *)(v13 + 72) = v25;
              }
              else
              {
                *(_BYTE *)(v13 + 64) = 3;
                *(_WORD *)(v13 + 66) = 16;
                *(_QWORD *)(v13 + 72) = objc_msgSend(objc_retainAutorelease(v23), "bytes");
              }
              v32 = 0;
              sub_100043758(&v32);
              v28 = sub_1001DDCAC((uint64_t)sub_1003D3024, (uint64_t)sub_1003D3178, (uint64_t)sub_1003D3270, a4, v13 + 24, 1, v13 + 64);
              sub_10004339C(&v32);
              if (v28)
              {
                if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
                  sub_1006EAA04();
              }
              else
              {
                *(_QWORD *)src = 0;
                v34 = 0;
                if (qword_1009778C8 != -1)
                  dispatch_once(&qword_1009778C8, &stru_10092CB78);
                sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)v18[128] << 40) | ((unint64_t)v18[129] << 32) | ((unint64_t)v18[130] << 24) | ((unint64_t)v18[131] << 16) | ((unint64_t)v18[132] << 8) | v18[133], 1u, 0, 0, 0, src);
                v36 = 0uLL;
                *(_QWORD *)&buf[2] = 0;
                *(_WORD *)buf = a4;
                uuid_copy(&buf[2], src);
                BYTE8(v36) = 0;
                *(_DWORD *)((char *)&v36 + 10) = 0;
                BYTE14(v36) = 1;
                v29 = *(_QWORD *)(v13 + 128);
                if (v29 >= *(_QWORD *)(v13 + 136))
                {
                  v31 = sub_1003D7C1C((uint64_t *)(v13 + 120), (uint64_t)buf);
                }
                else
                {
                  *(_WORD *)v29 = *(_WORD *)buf;
                  uuid_copy((unsigned __int8 *)(v29 + 2), &buf[2]);
                  v30 = DWORD2(v36);
                  *(_DWORD *)(v29 + 21) = *(_DWORD *)((char *)&v36 + 11);
                  *(_DWORD *)(v29 + 18) = v30;
                  v31 = v29 + 26;
                  *(_QWORD *)(v13 + 128) = v29 + 26;
                }
                *(_QWORD *)(v13 + 128) = v31;
              }
              sub_100043728(&v32);
            }
            else if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
            {
              sub_1006EABA0();
            }

            return;
          }
          v26 = qword_100999880;
          if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "l2capConnectIndCb - Device is not connected", buf, 2u);
          }
          return;
        }
        ++v11;
      }
      v14 = (_QWORD *)v9[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v9[2];
          v16 = *v15 == (_QWORD)v9;
          v9 = v15;
        }
        while (!v16);
      }
      v9 = v15;
      if (v15 != (_QWORD *)(a1 + 24))
        continue;
      break;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
    sub_1006EA99C();
}

void sub_1003D5A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void *v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v15 + 128) = v14;
  sub_100043728(&a13);

  _Unwind_Resume(a1);
}

void sub_1003D5A54(uint64_t a1)
{
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_10092CBD8);
  sub_1003D5AB0(qword_10097AA58, *(unsigned __int16 *)(a1 + 36), *(unsigned __int16 *)(a1 + 38), *(unsigned __int16 *)(a1 + 40), *(unsigned int *)(a1 + 32));
}

void sub_1003D5AB0(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  NSObject *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *i;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _BOOL4 v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  NSObject *v34;
  NSObject *v35;
  void (***v36)(_QWORD, void *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD);
  id v37;
  void *v38;
  uint64_t v39;
  void **v40;
  void **v41;
  _BYTE v42[6];
  void *__p[2];
  char v44;
  unsigned int v45;
  uuid_t dst;
  uint8_t buf[40];

  v10 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = a4;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&buf[22] = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "connectedCB cid:0x%04x inMTU:%d outMTU:%d result:%d", buf, 0x1Au);
  }
  v45 = -1;
  v11 = *(_QWORD **)(a1 + 16);
  if (v11 != (_QWORD *)(a1 + 24))
  {
    while (2)
    {
      v12 = v11[5];
      for (i = *(uint64_t **)(v12 + 8); i != *(uint64_t **)(v12 + 16); ++i)
      {
        v14 = *i;
        v16 = *(_QWORD *)(*i + 120);
        v15 = *(unsigned __int16 **)(*i + 128);
        if ((unsigned __int16 *)v16 != v15)
        {
          v17 = -v16;
          while (*(unsigned __int16 *)v16 != (_DWORD)a2)
          {
            v16 += 26;
            v17 -= 26;
            if ((unsigned __int16 *)v16 == v15)
              goto LABEL_10;
          }
          memset(dst, 0, sizeof(dst));
          uuid_copy(dst, (const unsigned __int8 *)(v16 + 2));
          if ((_DWORD)a5)
          {
            if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
              sub_1006EAB40();
            v21 = 1;
          }
          else
          {
            *(_WORD *)(v16 + 20) = a3;
            *(_WORD *)(v16 + 22) = a4;
            *(_BYTE *)(v16 + 18) = 1;
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10092CB78);
            v22 = off_1009778C0;
            v23 = sub_100030DF4((const unsigned __int8 *)(v16 + 2));
            v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
            v25 = sub_1000589DC((uint64_t)v22, v24, 0);

            if (qword_1009778E8 != -1)
              dispatch_once(&qword_1009778E8, &stru_10092CB98);
            v26 = sub_10006D488((uint64_t)off_1009778E0, v25, 0);
            if (v26 && *(_BYTE *)(v26 + 1324))
            {
              v27 = qword_100999880;
              if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
              {
                v28 = *(unsigned __int16 *)(v16 + 20);
                v29 = *(unsigned __int16 *)(v16 + 22);
                v30 = *(_DWORD *)(v14 + 112);
                *(_DWORD *)buf = 67109888;
                *(_DWORD *)&buf[4] = a2;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v28;
                *(_WORD *)&buf[14] = 1024;
                *(_DWORD *)&buf[16] = v29;
                *(_WORD *)&buf[20] = 1024;
                *(_DWORD *)&buf[22] = v30;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Registering pipe cid:0x%04x inMTU:%d outMTU:%d priority:%d", buf, 0x1Au);
              }
              v42[0] = BYTE5(v25);
              v42[1] = BYTE4(v25);
              v42[2] = BYTE3(v25);
              v42[3] = BYTE2(v25);
              v42[4] = BYTE1(v25);
              v42[5] = v25;
              v31 = sub_10019AEA4((uint64_t)v42);
              v32 = sub_1002B5578();
              v33 = sub_1002B6778(v32, v31, a2, *(_DWORD *)(v12 + 36), a4, (int *)&v45, *(_DWORD *)(v14 + 112));
              v21 = v33 != 0;
              if (v33)
              {
                v34 = qword_100999880;
                if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
                {
                  memset(buf, 0, 37);
                  uuid_unparse_upper(dst, (char *)buf);
                  sub_100091AE8(__p, (char *)buf);
                  v41 = v44 >= 0 ? __p : (void **)__p[0];
                  *(_DWORD *)buf = 67109378;
                  *(_DWORD *)&buf[4] = a2;
                  *(_WORD *)&buf[8] = 2082;
                  *(_QWORD *)&buf[10] = v41;
                  _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "Failed to register a socket for channel 0x%04x on device \"%{public}s\"", buf, 0x12u);
                  if (v44 < 0)
                    operator delete(__p[0]);
                }
                buf[0] = 0;
                sub_100043758(buf);
                if (*(_BYTE *)(v14 + 56))
                  sub_1001DEE88(a2);
                else
                  sub_1001DEB7C(a2, 436);
                sub_100043728(buf);
                a5 = 1805;
              }
              else
              {
                buf[0] = 0;
                sub_100043758(buf);
                sub_1001F37D8(v31);
                sub_100043728(buf);
                a5 = 0;
              }
            }
            else
            {
              v35 = qword_100999880;
              if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
              {
                memset(buf, 0, 37);
                uuid_unparse_upper((const unsigned __int8 *)(v16 + 2), (char *)buf);
                sub_100091AE8(__p, (char *)buf);
                v40 = v44 >= 0 ? __p : (void **)__p[0];
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = v40;
                _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "Device is not connected \"%{public}s\" !", buf, 0xCu);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              v21 = 0;
              a5 = 1804;
            }
          }
          sub_1003D6A54(a1, a2);
          v36 = *(void (****)(_QWORD, void *, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))v12;
          v37 = sub_100030DF4(dst);
          v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
          (**v36)(v36, v38, a5, *(unsigned __int16 *)(v14 + 2), a2, *(unsigned __int8 *)(v16 + 24), v45);

          if (v21)
          {
            sub_1003D7F4C(26 - v17, *(_QWORD *)(v14 + 128), -v17);
            *(_QWORD *)(v14 + 128) = v39;
          }
          return;
        }
LABEL_10:
        ;
      }
      v18 = (_QWORD *)v11[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v11[2];
          v20 = *v19 == (_QWORD)v11;
          v11 = v19;
        }
        while (!v20);
      }
      v11 = v19;
      if (v19 != (_QWORD *)(a1 + 24))
        continue;
      break;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_ERROR))
    sub_1006EAAE0();
  sub_1003D6A54(a1, a2);
}

void sub_1003D604C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

void sub_1003D6084(uint64_t a1)
{
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_10092CBD8);
  sub_1003D60D8(qword_10097AA58, *(unsigned __int16 *)(a1 + 36), *(_DWORD *)(a1 + 32));
}

void sub_1003D60D8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  NSObject *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  uint64_t v13;
  NSObject *v14;
  void **v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t *v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  void *v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  void *__p[2];
  char v44;
  uuid_t dst;
  uint8_t buf[48];

  v6 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "disconnectedCB cid:%d reason:%d", buf, 0xEu);
  }
  v39 = a3;
  v41 = a1;
  v7 = a1 + 16;
  v8 = *(_QWORD **)(a1 + 16);
  v40 = (_QWORD *)(v7 + 8);
  if (v8 != (_QWORD *)(v7 + 8))
  {
    while (2)
    {
      v42 = (_QWORD *)v8[5];
      v10 = (uint64_t *)v42[1];
      v9 = (uint64_t *)v42[2];
      while (v10 != v9)
      {
        v11 = *v10;
        v12 = *(unsigned __int16 **)(*v10 + 120);
        if (v12 != *(unsigned __int16 **)(*v10 + 128))
        {
          v13 = -(uint64_t)v12;
          while (1)
          {
            memset(dst, 0, sizeof(dst));
            uuid_copy(dst, (const unsigned __int8 *)v12 + 2);
            v14 = qword_100999880;
            if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_INFO))
            {
              memset(buf, 0, 37);
              uuid_unparse_upper(dst, (char *)buf);
              sub_100091AE8(__p, (char *)buf);
              v15 = __p;
              if (v44 < 0)
                v15 = (void **)__p[0];
              v16 = *v12;
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = v15;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v16;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "device=%{public}s cid=%x", buf, 0x12u);
              if (v44 < 0)
                operator delete(__p[0]);
            }
            if (*v12 == (_DWORD)a2)
              break;
            v12 += 13;
            v13 -= 26;
            if (v12 == *(unsigned __int16 **)(v11 + 128))
            {
              v9 = (uint64_t *)v42[2];
              goto LABEL_16;
            }
          }
          v25 = sub_1002B5578();
          sub_1002B888C(v25, *v12);
          if (!*((_BYTE *)v42 + 32))
          {
            v26 = *v42;
            v27 = sub_100030DF4(dst);
            v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
            (*(void (**)(uint64_t, void *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v26 + 8))(v26, v28, v39, *(unsigned __int16 *)(v11 + 2), a2);

          }
          sub_1003D7F4C(26 - v13, *(_QWORD *)(v11 + 128), -v13);
          *(_QWORD *)(v11 + 128) = v29;
          if (*(_BYTE *)v11)
          {
            if (!*(_BYTE *)(v11 + 4) && v29 == *(_QWORD *)(v11 + 120))
            {
              v30 = sub_1003D1CFC(v41, v11);
              if ((_DWORD)v30 != 10 && !*((_BYTE *)v42 + 32))
                (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)*v42 + 24))(*v42, *(unsigned __int16 *)(v11 + 2), v30);
            }
            v31 = *(void **)(v11 + 128);
            if (v31 == *(void **)(v11 + 120))
            {
              v32 = (uint64_t *)v42[2];
              v33 = (char *)v32 - (char *)(v10 + 1);
              if (v32 != v10 + 1)
              {
                memmove(v10, v10 + 1, (char *)v32 - (char *)(v10 + 1));
                v31 = *(void **)(v11 + 120);
              }
              v42[2] = (char *)v10 + v33;
              if (v31)
              {
                *(_QWORD *)(v11 + 128) = v31;
                operator delete(v31);
              }
              operator delete();
            }
            if (*((_BYTE *)v42 + 32) && v42[2] == v42[1])
            {
              sub_1003D7824((uint64_t)v42);
              operator delete();
            }
          }
          return;
        }
LABEL_16:
        ++v10;
      }
      v17 = (_QWORD *)v8[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v8[2];
          v19 = *v18 == (_QWORD)v8;
          v8 = v18;
        }
        while (!v19);
      }
      v8 = v18;
      if (v18 != v40)
        continue;
      break;
    }
  }
  v21 = *(uint64_t **)(v41 + 88);
  v20 = *(uint64_t **)(v41 + 96);
  while (v21 != v20)
  {
    v22 = *v21;
    v23 = *(unsigned __int16 **)(*v21 + 120);
    if (v23 != *(unsigned __int16 **)(*v21 + 128))
    {
      v24 = -(uint64_t)v23;
      while (1)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        uuid_copy(buf, (const unsigned __int8 *)v23 + 2);
        if (*v23 == (_DWORD)a2)
          break;
        v23 += 13;
        v24 -= 26;
        if (v23 == *(unsigned __int16 **)(v22 + 128))
        {
          v20 = *(uint64_t **)(v41 + 96);
          goto LABEL_30;
        }
      }
      v34 = sub_1002B5578();
      sub_1002B888C(v34, *v23);
      sub_1003D7F4C(26 - v24, *(_QWORD *)(v22 + 128), -v24);
      *(_QWORD *)(v22 + 128) = v35;
      if (v35 == *(_QWORD *)(v22 + 120))
      {
        if (!*(_BYTE *)(v22 + 4))
          sub_1003D1CFC(v41, v22);
        v36 = *(uint64_t **)(v41 + 96);
        v37 = (char *)v36 - (char *)(v21 + 1);
        if (v36 != v21 + 1)
          memmove(v21, v21 + 1, (char *)v36 - (char *)(v21 + 1));
        *(_QWORD *)(v41 + 96) = (char *)v21 + v37;
        v38 = *(void **)(v22 + 120);
        if (v38)
        {
          *(_QWORD *)(v22 + 128) = v38;
          operator delete(v38);
        }
        operator delete();
      }
      return;
    }
LABEL_30:
    ++v21;
  }
}

void sub_1003D65A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1003D65B8(_QWORD *a1, int a2, const void *a3, unsigned int a4, int a5)
{
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const unsigned __int8 *i;
  id v21;
  uint64_t v22;
  std::string *p_p;
  std::string::size_type size;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  std::string *v30;
  uint64_t v31;
  uint64_t (**v32)();
  unsigned int *v33;
  uint64_t (**v34)();
  unsigned int *v35;
  std::string __p;
  uint8_t buf[16];
  _QWORD v38[8];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[144];
  uint64_t v43;

  v11 = (unsigned __int16 *)a1[8];
  v10 = (unsigned __int16 *)a1[9];
  if (v11 != v10)
  {
    while (*v11 != a2)
    {
      if (++v11 == v10)
      {
        v11 = (unsigned __int16 *)a1[9];
        break;
      }
    }
  }
  if (v11 != v10)
  {
    v12 = qword_100999880;
    if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = a2;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = a4;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "l2capDataIndCb for CID: 0x%x, Len: 0x%x", buf, 0xEu);
    }
    operator new();
  }
  v13 = sub_1002B5578();
  sub_1002B8ED4(v13, a2, a3, a4, 1, a5);
  if (a5)
  {
    v43 = 0;
    v41 = 0u;
    memset(v42, 0, sizeof(v42));
    v39 = 0u;
    v40 = 0u;
    *(_OWORD *)buf = 0u;
    memset(v38, 0, sizeof(v38));
    sub_1002613AC((uint64_t)buf);
    v14 = (_QWORD *)a1[2];
    v15 = a1 + 3;
    if (v14 == a1 + 3)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = v14[5];
        v18 = *(_QWORD *)(v17 + 8);
        v19 = *(_QWORD *)(v17 + 16);
LABEL_13:
        if (v18 == v19)
        {
          v25 = 0;
        }
        else
        {
          for (i = *(const unsigned __int8 **)(*(_QWORD *)v18 + 120); ; i += 26)
          {
            if (i == *(const unsigned __int8 **)(*(_QWORD *)v18 + 128))
            {
              v18 += 8;
              goto LABEL_13;
            }
            if (*(unsigned __int16 *)i == a2)
              break;
          }
          v21 = sub_100030DF4(i + 2);
          v22 = objc_claimAutoreleasedReturnValue(v21);

          sub_10050945C(v14[4], &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          sub_1002614D8(v38, (uint64_t)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v25 = 1;
          v16 = (void *)v22;
        }
        v26 = (_QWORD *)v14[1];
        if (v26)
        {
          do
          {
            v27 = v26;
            v26 = (_QWORD *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            v27 = (_QWORD *)v14[2];
            v28 = *v27 == (_QWORD)v14;
            v14 = v27;
          }
          while (!v28);
        }
        if (v27 == v15)
          v25 = 1;
        v14 = v27;
      }
      while ((v25 & 1) == 0);
    }
    v34 = 0;
    v35 = 0;
    sub_10003994C(&v34, a3, a4);
    v29 = sub_10005D5A4();
    v30 = &__p;
    std::stringbuf::str(&v38[1]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v32 = &off_100918258;
    v33 = v35;
    if (v35)
      sub_10003C37C((uint64_t)v35);
    (*(void (**)(uint64_t, uint64_t, std::string *, void *, uint64_t (***)()))(*(_QWORD *)v29 + 40))(v29, 4, v30, v16, &v32);
    v32 = &off_100918258;
    if (v33)
      sub_100056AAC(v33);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v34 = &off_100918258;
    if (v35)
      sub_100056AAC(v35);

    v38[0] = v31;
    if (SHIBYTE(v40) < 0)
      operator delete(*((void **)&v39 + 1));
    std::streambuf::~streambuf(&v38[1]);
    std::ios::~ios(v42);
  }
}

void sub_1003D6998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;

  if (a19 < 0)
    operator delete(__p);
  if (a13)
    sub_100056AAC(a13);

  sub_1006CC5C8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

_BYTE *sub_1003D6A54(uint64_t a1, int a2)
{
  NSObject *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int64_t v10;
  _DWORD v12[2];

  v4 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109120;
    v12[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "cid:0x%04x", (uint8_t *)v12, 8u);
  }
  LOBYTE(v12[0]) = 0;
  sub_100043758(v12);
  v6 = *(char **)(a1 + 64);
  v5 = *(char **)(a1 + 72);
  if (v6 != v5)
  {
    v7 = 0;
    while (*(unsigned __int16 *)&v6[v7] != a2)
    {
      v7 += 2;
      if (&v6[v7] == v5)
        return sub_100043728(v12);
    }
    v8 = &v6[v7];
    v9 = &v6[v7 + 2];
    v10 = v5 - v9;
    if (v5 != v9)
      memmove(&v6[v7], v9, v5 - v9);
    *(_QWORD *)(a1 + 72) = &v8[v10];
  }
  return sub_100043728(v12);
}

void sub_1003D6B6C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  const void *v4;
  size_t v5;
  _QWORD *v6;
  unsigned int *v7;

  v2 = sub_1002B5578();
  v3 = *(unsigned __int16 *)(a1 + 40);
  v4 = (const void *)sub_10003EB18(*(_QWORD *)(a1 + 32));
  v5 = sub_10003F8C4(*(_QWORD *)(a1 + 32));
  sub_1002B8ED4(v2, v3, v4, v5, 1, *(_BYTE *)(a1 + 42));
  v6 = *(_QWORD **)(a1 + 32);
  if (v6)
  {
    *v6 = &off_100918258;
    v7 = (unsigned int *)v6[1];
    if (v7)
      sub_100056AAC(v7);
    operator delete();
  }
}

uint64_t sub_1003D6C10(_QWORD *a1)
{
  NSObject *v1;
  _QWORD *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  const char *v8;
  uint64_t *i;
  uint64_t *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  const char *v14;
  int v15;
  const char *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  const unsigned __int8 *v22;
  unsigned __int16 *v23;
  NSObject *v24;
  _BYTE *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  _BYTE *v34;
  int v35;
  const char *v36;
  int v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  NSObject *v42;
  uint64_t *j;
  uint64_t v44;
  NSObject *v45;
  const char *v46;
  const char *v47;
  int v48;
  const char *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  const unsigned __int8 *v55;
  unsigned __int16 *v56;
  NSObject *v57;
  _BYTE *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v66;
  uint64_t v68;
  _BYTE v69[12];
  __int16 v70;
  int v71;
  char v72;
  uint8_t buf[48];

  v1 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ LE L2CAP Channels -------------------", buf, 2u);
    v1 = qword_100999880;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: Registered Sessions:", buf, 2u);
  }
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 3)
  {
    do
    {
      v66 = v2;
      v3 = v2[5];
      v4 = qword_100999880;
      if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
      {
        v5 = "LE";
        if (!*(_BYTE *)(v3 + 40))
          v5 = "Classic";
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: --------- Session: %{public}s ---------", buf, 0xCu);
        v4 = qword_100999880;
      }
      v68 = v3;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000340DC(v66[4], (uint64_t)buf);
        v6 = buf;
        if ((buf[23] & 0x80u) != 0)
          v6 = *(uint8_t **)buf;
        v7 = *(_DWORD *)(v66[5] + 36);
        *(_DWORD *)v69 = 136446466;
        *(_QWORD *)&v69[4] = v6;
        v70 = 1024;
        v71 = v7;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: \"%{public}s\" pid:%d", v69, 0x12u);
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
        v4 = qword_100999880;
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v8 = "Yes";
        if (!*(_BYTE *)(v3 + 32))
          v8 = "No";
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:    Zombied: %{public}s", buf, 0xCu);
        v4 = qword_100999880;
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:    Endpoints:", buf, 2u);
      }
      v10 = *(uint64_t **)(v3 + 8);
      for (i = *(uint64_t **)(v3 + 16); v10 != i; i = *(uint64_t **)(v68 + 16))
      {
        v11 = *v10;
        v12 = qword_100999880;
        if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
        {
          v13 = "LE";
          if (!*(_BYTE *)(v11 + 56))
            v13 = "Classic";
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump: --------- Endpoint type: %{public}s ---------", buf, 0xCu);
          v12 = qword_100999880;
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          v14 = "Client for";
          if (!*(_BYTE *)(v11 + 4))
            v14 = "Listener for";
          v15 = *(unsigned __int16 *)(v11 + 2);
          v16 = "Yes";
          if (!*(_BYTE *)v11)
            v16 = "No";
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = v14;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v15;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v16;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:          %{public}s PSM:0x%04x Zombied:%{public}s", buf, 0x1Cu);
          v12 = qword_100999880;
        }
        if (*(_BYTE *)(v11 + 56) == 1)
        {
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:          Params:", buf, 2u);
            v12 = qword_100999880;
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            v17 = *(unsigned __int16 *)(v11 + 14);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v17;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:              creditSignalDelta:%d", buf, 8u);
            v12 = qword_100999880;
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            v18 = *(unsigned __int16 *)(v11 + 16);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v18;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:              initialCredits:%d", buf, 8u);
            v12 = qword_100999880;
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            v19 = *(unsigned __int16 *)(v11 + 10);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v19;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:              inMPS:%d", buf, 8u);
            v12 = qword_100999880;
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            v20 = *(unsigned __int16 *)(v11 + 8);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v20;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:              inMTU:%d", buf, 8u);
            v12 = qword_100999880;
          }
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            v21 = *(unsigned __int8 *)(v11 + 12);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v21;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:              requiresAuth:%d", buf, 8u);
            v12 = qword_100999880;
          }
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:          Connected devices:", buf, 2u);
        }
        v22 = *(const unsigned __int8 **)(v11 + 120);
        v23 = *(unsigned __int16 **)(v11 + 128);
        while (v22 != (const unsigned __int8 *)v23)
        {
          v24 = qword_100999880;
          if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
          {
            memset(buf, 0, 37);
            uuid_unparse_upper(v22 + 2, (char *)buf);
            sub_100091AE8(v69, (char *)buf);
            if (v72 >= 0)
              v25 = v69;
            else
              v25 = *(_BYTE **)v69;
            v26 = *(unsigned __int16 *)v22;
            v27 = *((unsigned __int16 *)v22 + 10);
            v28 = *((unsigned __int16 *)v22 + 11);
            v29 = v22[18];
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = v25;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v26;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v28;
            *(_WORD *)&buf[30] = 1024;
            *(_DWORD *)&buf[32] = v29;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump:             %{public}s (0x%04x) intMTU:%d outMTU:%d state:%d", buf, 0x24u);
            if (v72 < 0)
              operator delete(*(void **)v69);
            v23 = *(unsigned __int16 **)(v11 + 128);
          }
          v22 += 26;
        }
        ++v10;
      }
      v30 = qword_100999880;
      if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "statedump: Registered Sessions:", buf, 2u);
      }
      v31 = a1[5];
      v32 = a1[6];
      while (v31 != v32)
      {
        v33 = qword_100999880;
        if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000340DC(*(_QWORD *)v31, (uint64_t)v69);
          if (v72 >= 0)
            v34 = v69;
          else
            v34 = *(_BYTE **)v69;
          v35 = *(unsigned __int16 *)(v31 + 8);
          v36 = "YES";
          if (!*(_BYTE *)(v31 + 24))
            v36 = "NO";
          v37 = *(_DWORD *)(v31 + 28);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = v34;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v35;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v36;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v37;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "statedump: \"%{public}s\" psm:0z%0x requiresEncryption:%{public}s pid:%d", buf, 0x22u);
          if (v72 < 0)
            operator delete(*(void **)v69);
          v32 = a1[6];
        }
        v31 += 48;
      }
      v38 = v66;
      v39 = (_QWORD *)v66[1];
      if (v39)
      {
        do
        {
          v40 = v39;
          v39 = (_QWORD *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v40 = (_QWORD *)v38[2];
          v41 = *v40 == (_QWORD)v38;
          v38 = v40;
        }
        while (!v41);
      }
      v2 = v40;
    }
    while (v40 != a1 + 3);
  }
  v42 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: Zombied listeners", buf, 2u);
  }
  for (j = (uint64_t *)a1[11]; j != (uint64_t *)a1[12]; ++j)
  {
    v44 = *j;
    v45 = qword_100999880;
    if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
    {
      v46 = "LE";
      if (!*(_BYTE *)(v44 + 56))
        v46 = "Classic";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v46;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump: --------- Endpoint type: %{public}s ---------", buf, 0xCu);
      v45 = qword_100999880;
    }
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      v47 = "Client for";
      if (!*(_BYTE *)(v44 + 4))
        v47 = "Listener for";
      v48 = *(unsigned __int16 *)(v44 + 2);
      v49 = "Yes";
      if (!*(_BYTE *)v44)
        v49 = "No";
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v47;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v48;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v49;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump:          %{public}s PSM:0x%04x Zombied:%{public}s", buf, 0x1Cu);
      v45 = qword_100999880;
    }
    if (*(_BYTE *)(v44 + 56) == 1)
    {
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump:          Params:", buf, 2u);
        v45 = qword_100999880;
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        v50 = *(unsigned __int16 *)(v44 + 14);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v50;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump:              creditSignalDelta:%d", buf, 8u);
        v45 = qword_100999880;
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        v51 = *(unsigned __int16 *)(v44 + 16);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v51;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump:              initialCredits:%d", buf, 8u);
        v45 = qword_100999880;
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        v52 = *(unsigned __int16 *)(v44 + 10);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v52;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump:              inMPS:%d", buf, 8u);
        v45 = qword_100999880;
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        v53 = *(unsigned __int16 *)(v44 + 8);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v53;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump:              inMTU:%d", buf, 8u);
        v45 = qword_100999880;
      }
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        v54 = *(unsigned __int8 *)(v44 + 12);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v54;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump:              requiresAuth:%d", buf, 8u);
        v45 = qword_100999880;
      }
    }
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "statedump:          Connected devices:", buf, 2u);
    }
    v55 = *(const unsigned __int8 **)(v44 + 120);
    v56 = *(unsigned __int16 **)(v44 + 128);
    while (v55 != (const unsigned __int8 *)v56)
    {
      v57 = qword_100999880;
      if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v55 + 2, (char *)buf);
        sub_100091AE8(v69, (char *)buf);
        if (v72 >= 0)
          v58 = v69;
        else
          v58 = *(_BYTE **)v69;
        v59 = *(unsigned __int16 *)v55;
        v60 = *((unsigned __int16 *)v55 + 10);
        v61 = *((unsigned __int16 *)v55 + 11);
        v62 = v55[18];
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = v58;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v59;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v60;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v61;
        *(_WORD *)&buf[30] = 1024;
        *(_DWORD *)&buf[32] = v62;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "statedump:             %{public}s (0x%04x) intMTU:%d outMTU:%d state:%d", buf, 0x24u);
        if (v72 < 0)
          operator delete(*(void **)v69);
        v56 = *(unsigned __int16 **)(v44 + 128);
      }
      v55 += 26;
    }
  }
  v63 = sub_1002B5578();
  return nullsub_90(v63, v64);
}

uint64_t sub_1003D7824(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;

  v3 = *(uint64_t **)(a1 + 8);
  v2 = *(uint64_t **)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        v5 = *(void **)(v4 + 120);
        if (v5)
        {
          *(_QWORD *)(v4 + 128) = v5;
          operator delete(v5);
        }
        operator delete();
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 8);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_1003D78AC(uint64_t a1, __int16 a2, char a3, int a4, int a5, int a6, int a7, int a8, char a9, int a10)
{
  NSObject *v16;
  _DWORD v18[2];
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;

  *(_BYTE *)a1 = 0;
  *(_WORD *)(a1 + 2) = a2;
  *(_BYTE *)(a1 + 4) = a3;
  *(_BYTE *)(a1 + 56) = a9;
  *(_DWORD *)(a1 + 112) = a10;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 8) = a5;
  *(_WORD *)(a1 + 10) = a6;
  *(_BYTE *)(a1 + 12) = a4;
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = a8;
  *(_WORD *)(a1 + 16) = a7;
  *(_DWORD *)(a1 + 20) = -1;
  v16 = qword_100999880;
  if (os_log_type_enabled((os_log_t)qword_100999880, OS_LOG_TYPE_DEFAULT))
  {
    v18[0] = 67110656;
    v18[1] = a5;
    v19 = 1024;
    v20 = a6;
    v21 = 1024;
    v22 = a4;
    v23 = 1024;
    v24 = a8;
    v25 = 1024;
    v26 = a7;
    v27 = 1024;
    v28 = -1;
    v29 = 1024;
    v30 = a10;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "New Endpoint created inMTU=%d inMPS=%d requiresAuth=%d creditSignalDelta=%d initialCredits=%d maxLatencyinMS=%d priority:%d", (uint8_t *)v18, 0x2Cu);
  }
  *(_DWORD *)(a1 + 24) = -64512;
  *(_WORD *)(a1 + 28) = 5000;
  *(_WORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (!a9)
  {
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_BYTE *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
  }
  return a1;
}

void sub_1003D7A28(id a1)
{
  operator new();
}

void sub_1003D7A68()
{
  operator delete();
}

void sub_1003D7A8C(id a1)
{
  operator new();
}

void sub_1003D7ACC()
{
  operator delete();
}

void sub_1003D7AF0(id a1)
{
  operator new();
}

void sub_1003D7B30()
{
  operator delete();
}

void sub_1003D7B54(id a1)
{
  operator new();
}

void sub_1003D7B94()
{
  operator delete();
}

void sub_1003D7BB8(id a1)
{
  operator new();
}

void sub_1003D7BF8()
{
  operator delete();
}

uint64_t sub_1003D7C1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unsigned __int8 *v12;
  char *v13;
  int v14;
  uint64_t v15;
  void *__p;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  char *v20;
  uint64_t v21;

  v2 = *a1;
  v3 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 1);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x9D89D89D89D89D8)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0x4EC4EC4EC4EC4EC5 * ((v8 - v2) >> 1);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x4EC4EC4EC4EC4ECLL)
    v10 = 0x9D89D89D89D89D8;
  else
    v10 = v4;
  v21 = v7;
  if (v10)
    v11 = (char *)sub_1003D7E94(v7, v10);
  else
    v11 = 0;
  v12 = (unsigned __int8 *)&v11[26 * v3];
  __p = v11;
  v18 = v12;
  v19 = v12;
  v20 = &v11[26 * v10];
  *(_WORD *)v12 = *(_WORD *)a2;
  uuid_copy(v12 + 2, (const unsigned __int8 *)(a2 + 2));
  v13 = &v11[26 * v3];
  v14 = *(_DWORD *)(a2 + 18);
  *(_DWORD *)(v13 + 21) = *(_DWORD *)(a2 + 21);
  *(_DWORD *)(v13 + 18) = v14;
  v19 += 26;
  sub_1003D7DD0(a1, &__p);
  v15 = a1[1];
  if (v19 != v18)
    v19 = &v18[(v19 - v18 - 26) % 0x1AuLL];
  if (__p)
    operator delete(__p);
  return v15;
}

void sub_1003D7D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1003D7DD0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  if (v4 != *a1)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      *(_WORD *)(v6 + v7 - 26) = *(_WORD *)(v4 + v7 - 26);
      uuid_copy((unsigned __int8 *)(v6 + v7 - 24), (const unsigned __int8 *)(v4 + v7 - 24));
      v9 = *(_DWORD *)(v4 + v7 - 8);
      *(_DWORD *)(v8 - 5) = *(_DWORD *)(v4 + v7 - 5);
      *(_DWORD *)(v8 - 8) = v9;
      v7 -= 26;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v10 = *a1;
  *a1 = v6;
  a2[1] = v10;
  v11 = a1[1];
  a1[1] = a2[2];
  a2[2] = v11;
  v12 = a1[2];
  a1[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
}

void *sub_1003D7E94(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x9D89D89D89D89D9)
    sub_10007ABD4();
  return operator new(26 * a2);
}

void sub_1003D7EDC(id a1)
{
  operator new();
}

uint64_t sub_1003D7F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    *(_WORD *)a3 = *(_WORD *)v4;
    uuid_copy((unsigned __int8 *)(a3 + 2), (const unsigned __int8 *)(v4 + 2));
    v6 = *(_DWORD *)(v4 + 18);
    *(_DWORD *)(a3 + 21) = *(_DWORD *)(v4 + 21);
    *(_DWORD *)(a3 + 18) = v6;
    a3 += 26;
    v4 += 26;
  }
  while (v4 != v5);
  return v5;
}

uint64_t sub_1003D7FEC(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)sub_100278350(a1, 9);
  *v2 = off_10092CC08;
  v2[32] = off_10092CD40;
  v2[33] = off_10092CE10;
  v2[34] = off_10092CE38;
  sub_1004169C4((uint64_t)(v2 + 35));
  *(_DWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_QWORD *)(a1 + 504) = a1 + 512;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = a1 + 536;
  sub_1000160D0(a1 + 552);
  sub_1000160D0(a1 + 632);
  sub_1002A90C4((pthread_cond_t *)(a1 + 696));
  *(_BYTE *)(a1 + 616) = 0;
  mach_timebase_info((mach_timebase_info_t)(a1 + 620));
  atomic_store(0, (unint64_t *)(a1 + 744));
  atomic_store(0, (unint64_t *)(a1 + 752));
  atomic_store(0, (unint64_t *)(a1 + 760));
  *(_QWORD *)(a1 + 768) = mach_absolute_time();
  return a1;
}

void sub_1003D80E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v6;
  void *v7;
  void *v8;

  sub_100069BDC(v4);
  sub_100069BDC(v3);
  v6 = (void **)(v1 + 440);
  sub_10001A82C(v1 + 528, *(_QWORD **)(v1 + 536));
  sub_10001A82C(v1 + 504, *(_QWORD **)(v1 + 512));

  v7 = *(void **)(v1 + 472);
  if (v7)
  {
    *(_QWORD *)(v1 + 480) = v7;
    operator delete(v7);
  }
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 448) = v8;
    operator delete(v8);
  }
  sub_100416AAC(v2);
  sub_100278464(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D8184(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_10092CC08;
  *(_QWORD *)(a1 + 256) = off_10092CD40;
  *(_QWORD *)(a1 + 264) = off_10092CE10;
  *(_QWORD *)(a1 + 272) = off_10092CE38;
  sub_1002A912C(a1 + 696);
  sub_100069BDC(a1 + 632);
  sub_100069BDC(a1 + 552);
  sub_10001A82C(a1 + 528, *(_QWORD **)(a1 + 536));
  sub_10001A82C(a1 + 504, *(_QWORD **)(a1 + 512));

  v2 = *(void **)(a1 + 472);
  if (v2)
  {
    *(_QWORD *)(a1 + 480) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 440);
  if (v3)
  {
    *(_QWORD *)(a1 + 448) = v3;
    operator delete(v3);
  }
  sub_100416AAC(a1 + 280);
  return sub_100278464(a1);
}

uint64_t sub_1003D8228(uint64_t a1)
{
  return sub_1003D8184(a1 - 264);
}

void sub_1003D8230(uint64_t a1)
{
  sub_1003D8184(a1);
  operator delete();
}

void sub_1003D8254(uint64_t a1)
{
  sub_1003D8184(a1 - 264);
  operator delete();
}

uint64_t sub_1003D827C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092D5D8);
  sub_10007A76C((uint64_t)off_1009778E0 + 240, a1 + 272);
  *(_BYTE *)(a1 + 780) = 0;
  v2 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2))
  {
    v3 = sub_100027F68();
    sub_100091AE8(v7, "BTAudioHALPlugin");
    sub_100091AE8(__p, "BTAudioHALEnableAudioLogging");
    (*(void (**)(uint64_t, void **, void **, uint64_t))(*(_QWORD *)v3 + 72))(v3, v7, __p, a1 + 780);
    if (v6 < 0)
      operator delete(__p[0]);
    if (v8 < 0)
      operator delete(v7[0]);
  }
  return 0;
}

void sub_1003D835C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D8390(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  char v7;
  const char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *__p[2];
  char v14;
  int v15;
  uint8_t buf[8];
  char v17;

  v1 = a1 + 280;
  sub_100416AB0(a1 + 280);
  v15 = 0;
  v2 = sub_100027F68();
  sub_100091AE8(buf, "A2DP");
  sub_100091AE8(__p, "mediaFlushTimeoutMs");
  v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v2 + 88))(v2, buf, __p, &v15);
  if (v14 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3)
      goto LABEL_10;
  }
  else if (!v3)
  {
    goto LABEL_10;
  }
  v4 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Warning: Setting user defined media flush timeout to %d ms", buf, 8u);
  }
  word_10097B05A = v15;
LABEL_10:
  v5 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 712))(v5))
  {
    v6 = qword_1009997C8;
    v7 = 10;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 10;
      v8 = "Warning: Legacy iPad overwritting SW Queue to %d";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 8u);
    }
  }
  else
  {
    v9 = sub_10003BE44();
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 720))(v9))
      goto LABEL_18;
    v6 = qword_1009997C8;
    v7 = 20;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 20;
      v8 = "Warning: Legacy HW that does not support EPA/Stats overwritting SW Queue to %d";
      goto LABEL_16;
    }
  }
  byte_10097B05E = v7;
LABEL_18:
  buf[0] = 0;
  sub_100043758(buf);
  v10 = sub_10013B7B8(off_10092CE58, 0, xmmword_100740F38, (uint64_t)&unk_10097B058);
  sub_10004339C(buf);
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EAC00();
    v11 = 1;
  }
  else
  {
    sub_100417180(v1);
    v11 = 0;
  }
  sub_100043728(buf);
  return v11;
}

void sub_1003D8614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D8660(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;

  v1 = a1 + 280;
  sub_10041729C(a1 + 280);
  v4 = 0;
  sub_100043758(&v4);
  if (sub_10013C188())
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EAC60();
    v2 = 1;
  }
  else
  {
    sub_100416A40(v1);
    v2 = 0;
  }
  sub_100043728(&v4);
  return v2;
}

void sub_1003D86F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D8704(uint64_t a1)
{
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092D5D8);
  sub_100069060((uint64_t)off_1009778E0 + 240, a1 + 272);
  return 0;
}

void sub_1003D8760(os_unfair_lock_s *a1, _BYTE *a2, int a3, __int16 a4)
{
  unsigned int v8;
  __int16 v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  BOOL v13;
  _QWORD v14[7];
  __int16 v15;
  __int16 v16;
  char v17;
  BOOL v18;

  v8 = sub_1005D9068((uint64_t)a2);
  v9 = v8;
  v10 = sub_1003D8844((uint64_t)a1, v8);
  if (a3)
    v11 = 2;
  else
    v11 = 0;
  sub_1002D4E6C((uint64_t)a2, v11);
  v12 = 0;
  if (a2[723])
    v13 = 1;
  else
    v13 = a2[704] == 0;
  if (!v13)
    v12 = a2[706] == 0;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1003D89B0;
  v14[3] = &unk_10092CF40;
  v14[4] = a1;
  v14[5] = v10;
  v15 = v9;
  v17 = a3;
  v18 = v12;
  v16 = a4;
  v14[6] = a2;
  sub_1003D88F4(a1 + 108, v14);
}

uint64_t sub_1003D8844(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  unsigned __int16 v11;

  v11 = a2;
  v2 = *(_QWORD *)(a1 + 512);
  if (v2)
  {
    v4 = a1 + 504;
    v5 = a1 + 512;
    v6 = a1 + 512;
    do
    {
      v7 = *(unsigned __int16 *)(v2 + 32);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t *)v2;
      else
        v9 = (uint64_t *)(v2 + 8);
      if (v8)
        v6 = v2;
      v2 = *v9;
    }
    while (*v9);
    if (v6 != v5 && *(unsigned __int16 *)(v6 + 32) <= a2)
      return *sub_1003D9E10(v4, &v11);
  }
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    sub_1006EACC0();
  return 0;
}

void sub_1003D88F4(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1003D8988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1003D89B0(uint64_t a1, void (***a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  __int16 v5;
  _QWORD v6[4];
  __int16 v7;
  char v8;

  v3 = *(os_unfair_lock_s **)(a1 + 32);
  (**a2)(a2, *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 56), *(unsigned __int8 *)(a1 + 60), *(unsigned __int8 *)(a1 + 61), *(unsigned __int16 *)(a1 + 58), *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 708));
  if (*(_BYTE *)(a1 + 61))
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (*(_BYTE *)(a1 + 60))
    {
      sub_1005D98B8(*(_QWORD *)(a1 + 48), 1000 * *(unsigned __int16 *)(v4 + 708));
    }
    else
    {
      if (*(_BYTE *)(v4 + 705))
      {
        *(_BYTE *)(v4 + 705) = 0;
        sub_1003D8AAC(v3, v4, 0);
        v4 = *(_QWORD *)(a1 + 48);
      }
      if (*(_BYTE *)(v4 + 710))
      {
        *(_BYTE *)(v4 + 710) = 0;
        v5 = *(_WORD *)(a1 + 56);
        v6[0] = _NSConcreteStackBlock;
        v6[1] = 3221225472;
        v6[2] = sub_1003D9068;
        v6[3] = &unk_10092CFA0;
        v7 = v5;
        v8 = 1;
        sub_1003D88F4(v3 + 108, v6);
      }
    }
  }
}

void sub_1003D8AAC(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  _QWORD v6[4];
  __int16 v7;
  char v8;

  if (a2)
  {
    if (*(_BYTE *)(a2 + 704))
      sub_1005D98B8(a2, 1000 * *(unsigned __int16 *)(a2 + 708));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1003D9084;
    v6[3] = &unk_10092CFA0;
    v7 = sub_1005D9068(a2);
    v8 = a3;
    sub_1003D88F4(a1 + 108, v6);
  }
}

void sub_1003D8B4C(os_unfair_lock_s *a1, uint64_t a2, __int16 a3)
{
  int v6;
  unsigned int v7;
  _QWORD v8[5];
  int v9;
  __int16 v10;

  if (*(_BYTE *)(a2 + 711))
  {
    v6 = sub_100412EDC(a2 + 400);
    v7 = sub_1005D9068(a2);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1003D8BF0;
    v8[3] = &unk_10092CF60;
    v8[4] = sub_1003D8844((uint64_t)a1, v7);
    v10 = a3;
    v9 = v6;
    sub_1003D88F4(a1 + 108, v8);
  }
}

uint64_t sub_1003D8BF0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 8))(a2, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 44), *(unsigned int *)(a1 + 40));
}

void sub_1003D8C10(os_unfair_lock_s *a1, uint64_t a2)
{
  unsigned int v3;
  _QWORD v4[5];

  if (*(_BYTE *)(a2 + 711))
  {
    v3 = sub_1005D9068(a2);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1003D8C90;
    v4[3] = &unk_10092CF80;
    v4[4] = sub_1003D8844((uint64_t)a1, v3);
    sub_1003D88F4(a1 + 108, v4);
  }
}

uint64_t sub_1003D8C90(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 32));
}

void sub_1003D8CA8(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  _QWORD v5[4];
  __int16 v6;
  char v7;

  if (*(_BYTE *)(a2 + 704))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1003D8D24;
    v5[3] = &unk_10092CFA0;
    v6 = sub_1005D9068(a2);
    v7 = a3;
    sub_1003D88F4(a1 + 108, v5);
  }
}

uint64_t sub_1003D8D24(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 32))(a2, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

void sub_1003D8D40(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  _QWORD v5[4];
  __int16 v6;
  char v7;

  if (*(_BYTE *)(a2 + 704))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1003D8DBC;
    v5[3] = &unk_10092CFA0;
    v6 = sub_1005D9068(a2);
    v7 = a3;
    sub_1003D88F4(a1 + 108, v5);
  }
}

uint64_t sub_1003D8DBC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

void sub_1003D8DD8(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  __int16 v6;
  _QWORD v7[4];
  __int16 v8;
  char v9;

  v6 = sub_1005D9068(a2);
  *(_BYTE *)(a2 + 706) = a3;
  if (*(_BYTE *)(a2 + 704))
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1003D8E64;
    v7[3] = &unk_10092CFA0;
    v8 = v6;
    v9 = a3;
    sub_1003D88F4(a1 + 108, v7);
  }
}

uint64_t sub_1003D8E64(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

void sub_1003D8E80(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  _QWORD v5[4];
  __int16 v6;
  char v7;

  if (*(_BYTE *)(a2 + 704))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1003D8EFC;
    v5[3] = &unk_10092CFA0;
    v6 = sub_1005D9068(a2);
    v7 = a3;
    sub_1003D88F4(a1 + 108, v5);
  }
}

uint64_t sub_1003D8EFC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 40))(a2, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

void sub_1003D8F18(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  _QWORD v5[4];
  __int16 v6;
  char v7;

  if (*(_BYTE *)(a2 + 704))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1003D8F94;
    v5[3] = &unk_10092CFA0;
    v6 = sub_1005D9068(a2);
    v7 = a3;
    sub_1003D88F4(a1 + 108, v5);
  }
}

uint64_t sub_1003D8F94(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 56))(a2, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

void sub_1003D8FB0(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  _QWORD v5[4];
  __int16 v6;
  char v7;

  if (*(_BYTE *)(a2 + 704))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1003D902C;
    v5[3] = &unk_10092CFA0;
    v6 = sub_1005D9068(a2);
    v7 = a3;
    sub_1003D88F4(a1 + 108, v5);
  }
}

uint64_t sub_1003D902C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 64))(a2, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

uint64_t sub_1003D9048(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 104))(a2, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42));
}

uint64_t sub_1003D9068(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 96))(a2, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

uint64_t sub_1003D9084(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 80))(a2, *(unsigned __int16 *)(a1 + 32), *(unsigned __int8 *)(a1 + 34));
}

uint64_t sub_1003D90A0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 88))(a2, *(unsigned __int16 *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1003D90BC(os_unfair_lock_s *a1, uint64_t a2, char a3)
{
  __int16 v6;
  uint64_t v7;
  _QWORD v8[5];
  __int16 v9;
  char v10;

  v6 = sub_1005D9068(a2);
  v7 = *(_QWORD *)(a2 + 608);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1003D9144;
  v8[3] = &unk_10092CFC0;
  v8[4] = v7;
  v9 = v6;
  v10 = a3;
  sub_1003D88F4(a1 + 108, v8);
}

uint64_t sub_1003D9144(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 112))(a2, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40), *(unsigned __int8 *)(a1 + 42));
}

void sub_1003D9164(id a1, A2DPClientListener *a2)
{
  (*((void (**)(A2DPClientListener *))a2->var0 + 15))(a2);
}

void sub_1003D9174(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1003D9208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1003D9230(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32));
}

uint64_t sub_1003D9248(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 8))(a2, *(_QWORD *)(a1 + 32));
}

uint64_t sub_1003D9260(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 32));
}

uint64_t sub_1003D9278(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  char v6;
  __int128 v7;

  v7 = xmmword_100740F90;
  *(_BYTE *)(a1 + 616) = 1;
  if (sub_100442444(a2, &v7, 4u))
  {
    v6 = 0;
    sub_100043758(&v6);
    v3 = sub_10013D0A4((int *)(a2 + 128));
    if ((_DWORD)v3)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        sub_1006EAD20();
      v3 = 1;
    }
    sub_100043728(&v6);
  }
  else
  {
    v4 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EAD80(a2, v4);
    return 305;
  }
  return v3;
}

void sub_1003D9354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D9368(_QWORD *a1, uint64_t a2)
{
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[6];
  __int16 v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  v3 = sub_1003D9424(a1, a2);
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  v4 = sub_1004759E0();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1003D958C;
  v7[3] = &unk_10092D068;
  v7[4] = &v9;
  v7[5] = a1;
  v8 = v3;
  sub_100023D84(v4, v7);
  v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1003D940C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D9424(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t result;
  NSObject *v12;
  void **v13;
  uint64_t v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  uint64_t v20;

  v4 = (_QWORD *)a1[63];
  if (v4 == a1 + 64)
    goto LABEL_14;
  while (1)
  {
    v5 = v4[5];
    v6 = *(_DWORD *)(v5 + 128);
    v7 = *(unsigned __int16 *)(v5 + 132);
    v8 = v6 == *(_DWORD *)(a2 + 128) && v7 == *(unsigned __int16 *)(a2 + 132);
    if (v8)
      break;
    v9 = (_QWORD *)v4[1];
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (_QWORD *)v4[2];
        v8 = *v10 == (_QWORD)v4;
        v4 = v10;
      }
      while (!v8);
    }
    v4 = v10;
    if (v10 == a1 + 64)
      goto LABEL_14;
  }
  result = *((unsigned __int16 *)v4 + 16);
  if (!*((_WORD *)v4 + 16))
  {
LABEL_14:
    v12 = qword_1009997C8;
    result = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEBUG);
    if ((_DWORD)result)
    {
      sub_10043E5F8(a2, __p);
      if (v16 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      v14 = a1[65];
      *(_DWORD *)buf = 136446466;
      v18 = v13;
      v19 = 2048;
      v20 = v14;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "No corresponding device for %{public}s found in fA2dpHandleToDeviceMap (%lu devices)", buf, 0x16u);
      if (v16 < 0)
        operator delete(__p[0]);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1003D958C(uint64_t a1)
{
  uint64_t result;

  result = sub_1003D95C0(*(os_unfair_lock_s **)(a1 + 40), *(unsigned __int16 *)(a1 + 48));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_1003D95C0(os_unfair_lock_s *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  _QWORD v13[3];
  char v14;
  _QWORD v15[2];
  uint8_t buf[32];

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, (uint64_t)&a1[138]);
  v4 = sub_1003D9B54((uint64_t)a1, a2);
  v5 = sub_1003D8844((uint64_t)a1, a2);
  if (v5)
  {
    v6 = sub_100412814(v4 + 400);
    if (v6)
    {
      if ((*(_DWORD *)(v4 + 728) - 4) <= 2)
        sub_1003DA810((uint64_t)a1, a2);
      *(_DWORD *)(v4 + 728) = 7;
      v7 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Closing media channel for handle %d", buf, 8u);
      }
      if (*(_BYTE *)(v4 + 723))
      {
        if (*(_BYTE *)(v5 + 952))
          *(_DWORD *)(v5 + 972) = 1;
        sub_10044EC48(v5, 0);
        sub_1003DDAC8(a1);
      }
      LOBYTE(v13[0]) = 0;
      sub_100043758(v13);
      v8 = sub_10013EAAC(v6, 0);
      sub_10004339C(v13);
      if (v8 && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(v5, buf);
        sub_1006EAEA0();
      }
      sub_100043728(v13);
    }
    else
    {
      v10 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Disconnecting A2DP when no AVDTP stream has been established yet", buf, 2u);
      }
    }
    v14 = 0;
    sub_100043758(&v14);
    v11 = sub_10013D600(a2);
    sub_10004339C(&v14);
    v9 = 0;
    if (v11 && v11 != 122)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(v5, v13);
        sub_1006EAE58();
      }
      v9 = 1;
      sub_10048257C((uint64_t)a1, v5, 1);
    }
    sub_100043728(&v14);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EAE2C();
    v9 = 0;
  }
  sub_100034234((uint64_t)v15);
  return v9;
}

void sub_1003D9888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100043728(&a15);
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1003D98DC()
{
  return 3;
}

void sub_1003D98E4(_QWORD *a1, uint64_t a2)
{
  int v4;
  __int16 v5;
  uint64_t v6;
  _QWORD v7[6];
  __int16 v8;

  v4 = sub_1003D9424(a1, a2);
  if (v4)
  {
    v5 = v4;
    v6 = sub_1004759E0();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1003D9960;
    v7[3] = &unk_1009186D0;
    v8 = v5;
    v7[4] = a1;
    v7[5] = a2;
    sub_100041A34(v6, v7);
  }
}

void sub_1003D9960(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  void **v6;
  void **v7;
  void **v8;
  char *v9;
  int v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  _BYTE buf[12];
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void **v19;

  v2 = sub_1003D9B54(*(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 48));
  if (v2)
  {
    v3 = v2;
    v4 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10046E9BC((unsigned __int8 *)(*(_QWORD *)(a1 + 40) + 128), v13);
      v5 = v14;
      v6 = (void **)v13[0];
      sub_10043F6EC(*(_QWORD *)(a1 + 40), (uint64_t)__p);
      v7 = v13;
      if (v5 < 0)
        v7 = v6;
      if (v12 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      *(_DWORD *)buf = 136446723;
      *(_QWORD *)&buf[4] = v7;
      v16 = 2160;
      v17 = 1752392040;
      v18 = 2081;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device %{public}s name changed to %{private, mask.hash}s", buf, 0x20u);
      if (v12 < 0)
        operator delete(__p[0]);
      if (v14 < 0)
        operator delete(v13[0]);
    }
    sub_10043F6EC(*(_QWORD *)(a1 + 40), (uint64_t)v13);
    if (v14 >= 0)
      v9 = (char *)v13;
    else
      v9 = (char *)v13[0];
    sub_100091AE8(buf, v9);
    sub_1002D4448(v3, (uint64_t)buf);
    if (SHIBYTE(v18) < 0)
      operator delete(*(void **)buf);
    if (v14 < 0)
      operator delete(v13[0]);
    v10 = sub_100412BA4(v3 + 400);
    sub_10057CE64(v3, v10);
  }
}

void sub_1003D9B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D9B54(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  unsigned __int16 v11;

  v11 = a2;
  v2 = *(_QWORD *)(a1 + 536);
  if (v2)
  {
    v4 = a1 + 528;
    v5 = a1 + 536;
    v6 = a1 + 536;
    do
    {
      v7 = *(unsigned __int16 *)(v2 + 32);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t *)v2;
      else
        v9 = (uint64_t *)(v2 + 8);
      if (v8)
        v6 = v2;
      v2 = *v9;
    }
    while (*v9);
    if (v6 != v5 && *(unsigned __int16 *)(v6 + 32) <= a2)
      return *sub_1003D9E10(v4, &v11);
  }
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    sub_1006EAEE8();
  return 0;
}

void sub_1003D9C04(uint64_t a1, uint64_t a2)
{
  sub_1003D98E4((_QWORD *)(a1 - 272), a2);
}

uint64_t sub_1003D9C0C(uint64_t a1, uint64_t a2, _WORD *a3)
{
  _QWORD *v4;
  _OWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  __int128 v12;
  void *__p;
  _QWORD *v14;
  uint64_t v15;
  __int128 v16;

  v16 = xmmword_100740F90;
  __p = 0;
  v14 = 0;
  v15 = 0;
  if ((sub_1004442A0(a2, (uint64_t)&v16, 4u, &__p) & 1) != 0)
  {
    v5 = __p;
    v4 = v14;
    if (__p == v14)
    {
      v10 = 0;
      if (!__p)
        return v10;
      goto LABEL_19;
    }
    v6 = __p;
    do
    {
      v7 = *((unsigned __int16 *)v6 + 1);
      if ((v7 & 1) == 0 && *((_WORD *)v6 + 1))
      {
        v8 = 0;
        v9 = (_DWORD *)(v6[1] + 24);
        do
        {
          if (*(v9 - 4) == 25)
            *a3 = *v9;
          v9 += 8;
          v8 += 2;
        }
        while (v8 < v7);
      }
      v6 += 2;
    }
    while (v6 != v4);
    while (v5 != (_OWORD *)v4)
    {
      v12 = *v5;
      sub_1002C3FB4(&v12);
      ++v5;
      v4 = v14;
    }
    v10 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EAF48();
    v10 = 305;
  }
  v5 = __p;
  if (__p)
  {
LABEL_19:
    v14 = v5;
    operator delete(v5);
  }
  return v10;
}

void sub_1003D9D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D9D54(uint64_t a1, int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 528);
  v4 = (_QWORD *)(a1 + 536);
  if (v3 == (_QWORD *)(a1 + 536))
    goto LABEL_11;
  while (!sub_100412830(v3[5] + 400, a2))
  {
    v5 = (_QWORD *)v3[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (_QWORD *)v3[2];
        v7 = *v6 == (_QWORD)v3;
        v3 = v6;
      }
      while (!v7);
    }
    v3 = v6;
    if (v6 == v4)
      goto LABEL_11;
  }
  result = *((unsigned __int16 *)v3 + 16);
  if (!*((_WORD *)v3 + 16))
  {
LABEL_11:
    result = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      sub_1006EAF74();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1003D9E10(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t **v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *(uint64_t ***)(a1 + 8);
  if (!v2)
LABEL_8:
    abort();
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((unsigned __int16 *)v2 + 16);
      if (v3 >= v4)
        break;
      v2 = (uint64_t **)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return (uint64_t *)(v2 + 5);
    v2 = (uint64_t **)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

uint64_t sub_1003D9E5C(_QWORD *a1, int a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  NSObject *v16;
  uint8_t *v17;
  NSObject *v18;
  int v19;
  int v20;
  char v21;
  _BYTE __p[12];
  __int16 v23;
  uint8_t *v24;
  char v25;
  uint8_t buf[8];
  char v27;

  v21 = 0;
  v4 = sub_100027F68();
  sub_100091AE8(buf, "A2DP");
  sub_100091AE8(__p, "WirelessSplitter");
  (*(void (**)(uint64_t, uint8_t *, _BYTE *, char *))(*(_QWORD *)v4 + 72))(v4, buf, __p, &v21);
  if (v25 < 0)
    operator delete(*(void **)__p);
  if (v27 < 0)
    operator delete(*(void **)buf);
  v5 = (_QWORD *)a1[63];
  if (v5 == a1 + 64)
    return 0;
  v6 = 0;
  while (1)
  {
    v7 = *((unsigned __int16 *)v5 + 16);
    v8 = v5[5];
    v9 = sub_100442118(v8, 27);
    ++v6;
    v10 = (_DWORD)v7 == a2 ? 0 : v9;
    if (v10 != 1)
      break;
    v11 = a1[65];
    v12 = v11 < 2 || v11 == v6;
    if (v12 || !sub_10044F614(v8))
      return v7;
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_10092D5F8);
    if (!off_1009778D0)
      return v7;
    v19 = 0;
    v20 = 0;
    sub_100422B04((uint64_t)off_1009778D0, v8, &v20, &v19);
    if (!v20 || !v19)
    {
      v16 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043F6EC(v8, (uint64_t)buf);
        if (v27 >= 0)
          v17 = buf;
        else
          v17 = *(uint8_t **)buf;
        *(_DWORD *)__p = 141558275;
        *(_QWORD *)&__p[4] = 1752392040;
        v23 = 2081;
        v24 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Wireless Splitter: Found another device which is in-ear %{private, mask.hash}s", __p, 0x16u);
        if (v27 < 0)
          operator delete(*(void **)buf);
      }
      return v7;
    }
LABEL_24:
    v13 = (_QWORD *)v5[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = (_QWORD *)v5[2];
        v12 = *v14 == (_QWORD)v5;
        v5 = v14;
      }
      while (!v12);
    }
    v5 = v14;
    if (v14 == a1 + 64)
      return 0;
  }
  if (!v21 || (sub_100442118(v8, 12) & ((_DWORD)v7 != a2)) != 1)
    goto LABEL_24;
  v18 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Wireless Splitter enabled using defaults writes with device with handle=%d", buf, 8u);
  }
  return v7;
}

void sub_1003DA148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DA184(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, (uint64_t)(a1 + 69));
  v4 = sub_1003D9424(a1, a2);
  v5 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEBUG);
  if (!v4)
  {
    if (v5)
      sub_1006EAFD4();
    goto LABEL_9;
  }
  if (v5)
    sub_1006EB070();
  v6 = sub_1003D9B54((uint64_t)a1, v4);
  if (!v6)
  {
LABEL_9:
    v7 = 0;
    goto LABEL_10;
  }
  v7 = sub_1005D9850(v6);
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEBUG))
    sub_1006EB000();
LABEL_10:
  sub_100034234((uint64_t)v9);
  return v7;
}

void sub_1003DA25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DA274(os_unfair_lock_s *a1, unsigned int a2)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void **v9;
  int v10;
  int v11;
  int v12;
  NSObject *v14;
  NSObject *v15;
  void **v16;
  void *__p[2];
  char v18;
  uint8_t buf[23];

  v4 = sub_1003D9B54((uint64_t)a1, a2);
  v5 = sub_100412814(v4 + 400);
  v6 = sub_1003D8844((uint64_t)a1, a2);
  *(_WORD *)(v4 + 720) = 0;
  if (v5)
  {
    v7 = v6;
    v8 = qword_1009997C8;
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v7, __p);
        v9 = v18 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Starting A2DP audio streaming to device %{public}s", buf, 0xCu);
        if (v18 < 0)
          operator delete(__p[0]);
      }
      *(_DWORD *)(v4 + 728) = 5;
      sub_1002D4AE4(v4);
      v10 = sub_100412EDC(v4 + 400);
      v11 = v10;
      v12 = *(_DWORD *)(v4 + 656);
      if (*(_BYTE *)(v4 + 723))
      {
        if (v10 == 2)
        {
          LOWORD(v12) = 244;
        }
        else if (v10 == 33023)
        {
          LOWORD(v12) = 174;
        }
      }
      if (qword_100977B40 != -1)
        dispatch_once(&qword_100977B40, &stru_10092D618);
      sub_1004B9FBC((os_unfair_lock_s *)off_100977B38, 1, ((unint64_t)*(unsigned __int8 *)(v7 + 128) << 40) | ((unint64_t)*(unsigned __int8 *)(v7 + 129) << 32) | ((unint64_t)*(unsigned __int8 *)(v7 + 130) << 24) | ((unint64_t)*(unsigned __int8 *)(v7 + 131) << 16) | ((unint64_t)*(unsigned __int8 *)(v7 + 132) << 8) | *(unsigned __int8 *)(v7 + 133));
      sub_1003D8760(a1, (_BYTE *)v4, 1, v12);
      *(_DWORD *)(v7 + 1312) |= 0x10u;
      if (v11 == 33023 || v11 == 2)
      {
        sub_1000438A4();
        if (sub_100331480())
        {
          *(_BYTE *)(v4 + 711) = 1;
          sub_1003D8B4C(a1, v4, v12);
        }
      }
      if (*(_BYTE *)(v4 + 723) && sub_100442118(v7, 27))
      {
        v14 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Wireless Splitter sending BT_ACCESSORY_WS_SESSION_START", (uint8_t *)__p, 2u);
        }
        if (qword_100977A88 != -1)
          dispatch_once(&qword_100977A88, &stru_10092D638);
        sub_10027C1AC((uint64_t)off_100977A80, v7, 1, 1);
        *(_BYTE *)(v4 + 724) = 1;
      }
      v15 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO))
      {
        sub_10043E5F8(v7, __p);
        if (v18 >= 0)
          v16 = __p;
        else
          v16 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Reporting A2DP audio is connected and streaming for %{public}s", buf, 0xCu);
        if (v18 < 0)
          operator delete(__p[0]);
      }
      sub_1004827CC();
    }
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EB0C8();
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
  {
    sub_1006EB09C();
  }
  return 1;
}

void sub_1003DA7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DA810(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  NSObject *v15;
  void **v16;
  _QWORD v18[2];
  uint64_t v19;
  void *__p[2];
  char v21;
  uint8_t buf[4];
  void **v23;

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 552);
  v4 = sub_1003D9B54(a1, a2);
  v5 = (unsigned __int16)sub_100412814(v4 + 400);
  if (!v5)
  {
    v9 = qword_1009997C8;
    v10 = 0;
    if (!os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_30;
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = a2;
    v11 = "Stop streaming issued when there is no active stream handle for a2dp handle %d";
    v12 = v9;
    v13 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_21;
  }
  v6 = sub_1003D8844(a1, a2);
  if (!v6)
  {
    v14 = qword_1009997C8;
    if (!os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO))
    {
LABEL_22:
      v10 = 0;
      goto LABEL_30;
    }
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v5;
    v11 = "Unable to find device for handle %d";
    v12 = v14;
    v13 = OS_LOG_TYPE_INFO;
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, (uint8_t *)__p, 8u);
    goto LABEL_22;
  }
  if ((*(_DWORD *)(v4 + 728) - 4) <= 2)
  {
    if (*(_DWORD *)(v4 + 732) == 1)
      *(_DWORD *)(v4 + 732) = 0;
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_10092D658);
    if ((sub_1005278B0() & 1) == 0)
    {
      LODWORD(__p[0]) = 0;
      *(_DWORD *)buf = 0;
      v19 = 0;
      sub_100444BF0(v6, __p, buf, (_DWORD *)&v19 + 1, &v19);
      *(_WORD *)(v4 + 708) = 150;
    }
    v7 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v6, __p);
      if (v21 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v23 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Reporting media channel has closed for device %{public}s", buf, 0xCu);
      if (v21 < 0)
        operator delete(__p[0]);
    }
    sub_1004827CC();
  }
  v15 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v6, __p);
    v16 = v21 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v23 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Device %{public}s was not streaming and there is no sendthread to stop", buf, 0xCu);
    if (v21 < 0)
      operator delete(__p[0]);
  }
  v10 = 1;
LABEL_30:
  sub_100034234((uint64_t)v18);
  return v10;
}

void sub_1003DACE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DAD2C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  sub_100444BF0(a2, (_DWORD *)&v6 + 1, &v6, (_DWORD *)&v5 + 1, &v5);
  if ((a3 - 1) > 9)
    return 150;
  else
    return word_100740F5A[a3 - 1];
}

uint64_t sub_1003DAD8C(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _BYTE buf[24];

  result = sub_1003D8844(a1, a2);
  if (result)
  {
    v5 = result;
    v6 = sub_10003BE44();
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
    if ((result & 1) == 0)
    {
      if (a3)
        v7 = -4580;
      else
        v7 = -13288;
      v8 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = "Unlimited";
        if (a3)
          v9 = "Limited to 2Mbps";
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Dynamic Packet Type Supported EDR packet types: %{public}s", buf, 0xCu);
      }
      *(_QWORD *)buf = 0;
      v16 = 0;
      sub_100043758(&v16);
      if (!sub_100182588(v5 + 128, (uint64_t *)buf)
        && *(_QWORD *)buf
        && !*(_BYTE *)(*(_QWORD *)buf + 278))
      {
        sub_10019284C(*(uint64_t *)buf, v7, v10, v11, v12, v13, v14, v15);
      }
      sub_10004339C(&v16);
      return (uint64_t)sub_100043728(&v16);
    }
  }
  return result;
}

void sub_1003DAEC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  _Unwind_Resume(exception_object);
}

float sub_1003DAEE0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  NSObject *v8;
  float v9;
  float v10;
  _QWORD v12[3];

  v8 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v12[0]) = 67109120;
    HIDWORD(v12[0]) = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Initiate Audio Delivery Speed Change Latency change target=%d", (uint8_t *)v12, 8u);
  }
  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 552);
  v9 = 1.1;
  if (a3 != 1)
    v9 = 1.0;
  if (a3 == 2)
    v10 = *(float *)"fff?";
  else
    v10 = v9;
  if (a2)
  {
    sub_1005D9938(a2, a4, v10);
    if (!a4)
      *(float *)(a2 + 716) = v10;
  }
  sub_100034234((uint64_t)v12);
  return v10;
}

void sub_1003DB000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DB01C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void **v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  NSObject *v13;
  _BOOL4 v14;
  int v15;
  _QWORD v16[5];
  __int16 v17;
  void *__p;
  __int16 v19;
  int v20;
  char v21;
  uint8_t buf[4];
  void **v23;

  v4 = sub_1003D9B54(a1, a2);
  v5 = sub_1003D8844(a1, a2);
  if (!v5)
    return 1;
  v6 = v5;
  v7 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v6, &__p);
    v8 = v21 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 136446210;
    v23 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Suspending A2DP audio stream to device %{public}s", buf, 0xCu);
    if (v21 < 0)
      operator delete(__p);
  }
  sub_1003DA810(a1, a2);
  *(_WORD *)buf = sub_100412814(v4 + 400);
  if (!*(_WORD *)buf)
    return 1;
  v9 = *(_DWORD *)(v4 + 728);
  if (v9 == 5)
  {
    LOBYTE(__p) = 0;
    sub_100043758(&__p);
    v10 = sub_10013F354((__int16 *)buf, 1u, 0);
    sub_10004339C(&__p);
    if (v10)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        sub_1006EB160();
      v11 = sub_1004759E0();
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_1003DB284;
      v16[3] = &unk_100920960;
      v16[4] = a1;
      v17 = a2;
      sub_100475CEC(v11, 2000, v16);
    }
    else
    {
      *(_DWORD *)(v4 + 728) = 6;
    }
    sub_100043728(&__p);
  }
  else
  {
    v13 = qword_1009997C8;
    v14 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v14)
      return result;
    v15 = *(_DWORD *)(v4 + 732);
    LODWORD(__p) = 67109376;
    HIDWORD(__p) = v9;
    v19 = 1024;
    v20 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Could not suspend, stream state is %d and pending request is %d", (uint8_t *)&__p, 0xEu);
  }
  return 0;
}

void sub_1003DB264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DB284(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;

  result = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(result + 536);
  if (v3)
  {
    v4 = *(unsigned __int16 *)(a1 + 40);
    v5 = result + 536;
    do
    {
      v6 = *(unsigned __int16 *)(v3 + 32);
      v7 = v6 >= v4;
      if (v6 >= v4)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 != result + 536 && *(unsigned __int16 *)(v5 + 32) <= v4)
      return sub_1003DB2D8(result, v4);
  }
  return result;
}

uint64_t sub_1003DB2D8(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  uint8_t v11[14];
  __int16 v12;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 552);
  v4 = sub_1003D9B54(a1, a2);
  v5 = v4;
  if (v4)
  {
    v6 = *(_DWORD *)(v4 + 728);
    v12 = sub_100412814(v4 + 400);
    if (v6 == 5)
    {
      v7 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Device is in streaming state, checking if we should suspend the stream", v11, 2u);
      }
      if ((sub_1005D9850(v5) & 1) == 0)
      {
        v8 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v11 = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "There is no audio device or HAL is not streaming to us, suspend the stream!", v11, 2u);
        }
        sub_1003DA810(a1, a2);
        v11[0] = 0;
        sub_100043758(v11);
        v9 = sub_10013F354(&v12, 1u, 0);
        sub_10004339C(v11);
        if (v9 && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
          sub_1006EB1CC();
        *(_DWORD *)(v5 + 728) = 6;
        sub_100043728(v11);
      }
    }
  }
  return sub_100034234((uint64_t)v13);
}

void sub_1003DB44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DB478(os_unfair_lock_s *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void **v7;
  _QWORD v9[4];
  __int16 v10;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  const char *v14;

  v4 = sub_1003D9B54((uint64_t)a1, a2);
  v5 = sub_1003D8844((uint64_t)a1, a2);
  v6 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    if (!v5)
    {
      *(_DWORD *)buf = 136446210;
      v14 = "NULL";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Resetting A2DP audio stream to device %{public}s", buf, 0xCu);
      return 1;
    }
    sub_10043E5F8(v5, __p);
    if (v12 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v14 = (const char *)v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Resetting A2DP audio stream to device %{public}s", buf, 0xCu);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  if (!v5)
    return 1;
  if (*(_BYTE *)(v4 + 704))
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1003DB60C;
    v9[3] = &unk_10092D088;
    v10 = a2;
    sub_1003D88F4(a1 + 108, v9);
  }
  return 0;
}

uint64_t sub_1003DB60C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, *(unsigned __int16 *)(a1 + 32));
}

BOOL sub_1003DB624(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  _BYTE *v10;
  int v11;
  _BOOL8 result;
  NSObject *v13;
  _BYTE *v14;
  int v16;
  int v17;
  int v18;
  _BYTE __p[12];
  char v20;
  _BYTE buf[12];
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  v4 = sub_1003D8844(a1, a2);
  v5 = sub_1003D9B54(a1, a2);
  if (!v4)
    return 1;
  v6 = v5;
  v7 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ConnectMediaStream for a2dpHandle %d", buf, 8u);
  }
  v18 = sub_100412814(v6 + 400);
  v8 = *(_DWORD *)(v6 + 728);
  v9 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v4, __p);
    v10 = v20 >= 0 ? __p : *(_BYTE **)__p;
    v11 = *(_DWORD *)(v6 + 732);
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v10;
    v22 = 1024;
    v23 = v8;
    v24 = 1024;
    v25 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Starting Media connection to device %{public}s. Current stream state is %d and pending stream request is %d ", buf, 0x18u);
    if (v20 < 0)
      operator delete(*(void **)__p);
  }
  result = 0;
  switch(v8)
  {
    case 0:
      sub_1003DB9A0((os_unfair_lock_s *)a1, a2);
      goto LABEL_35;
    case 3:
      v13 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v4, buf);
        v14 = v25 >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)__p = 136446210;
        *(_QWORD *)&__p[4] = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Attempting to start streaming to device %{public}s", __p, 0xCu);
        if (SHIBYTE(v25) < 0)
          operator delete(*(void **)buf);
      }
      if (!atomic_load((unint64_t *)(a1 + 752)))
      {
        buf[0] = 0;
        sub_100043758(buf);
        v16 = sub_1001929C8((uint64_t (*)())sub_1003DBD9C, v4 + 128);
        atomic_store(mach_absolute_time(), (unint64_t *)(a1 + 744));
        sub_10004339C(buf);
        if (v16 && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
          sub_1006EB28C();
        sub_100043728(buf);
      }
      buf[0] = 0;
      sub_100043758(buf);
      sub_100187584(v4 + 128);
      v17 = sub_10013E5AC(&v18, 1u, 0);
      sub_10004339C(buf);
      if (v17)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
          sub_1006EB22C();
        if (v17 == 408)
          *(_DWORD *)(v6 + 732) = 1;
        sub_100043728(buf);
        return 1;
      }
      *(_DWORD *)(v6 + 728) = 4;
      sub_100043728(buf);
LABEL_35:
      result = 0;
      break;
    case 4:
      result = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      sub_1006EB2EC();
      goto LABEL_35;
    case 5:
      sub_1003DA274((os_unfair_lock_s *)a1, a2);
      goto LABEL_35;
    case 6:
      result = 0;
      *(_DWORD *)(v6 + 732) = 1;
      return result;
    default:
      return result;
  }
  return result;
}

void sub_1003DB980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DB9A0(os_unfair_lock_s *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  NSObject *v20;
  void *p_p;
  int v22;
  char v23;
  int v24;
  NSObject *v25;
  int v26;
  uint8_t *v27;
  uint64_t v29;
  char v30;
  int v31;
  _QWORD v32[2];
  void *__p;
  __int16 v34;
  uint8_t *v35;
  char v36;
  uint8_t buf[8];
  __int16 v38;
  int v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;

  v32[0] = 0;
  v32[1] = 0;
  sub_10003415C((uint64_t)v32, (uint64_t)&a1[138]);
  v4 = sub_1003D9B54((uint64_t)a1, a2);
  v5 = v4 + 400;
  v6 = *(_DWORD *)(v4 + 728);
  v7 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SelectStreamConfig for a2dpHandle %d", buf, 8u);
  }
  v8 = sub_100413FC4(v5);
  v9 = sub_1004173A0((uint64_t)&a1[70], v8);
  v10 = sub_100414E0C(v5, v9);
  v11 = sub_1003D8844((uint64_t)a1, a2);
  if (v6 < 2)
  {
    v14 = v11;
    if (v10)
    {
      v31 = 0;
      v15 = *(_DWORD *)(v4 + 556);
      v16 = *(_DWORD *)(v4 + 552);
      v17 = sub_1004129D8(v5);
      v29 = *(_QWORD *)(v17 + 32);
      v18 = sub_100412A80(v5);
      v19 = *(unsigned __int8 *)(v4 + 592);
      v20 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v14, &__p);
        p_p = &__p;
        if (v36 < 0)
          p_p = __p;
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v16;
        v38 = 1024;
        v39 = v15;
        v40 = 2082;
        v41 = p_p;
        v42 = 1024;
        v43 = v18;
        v44 = 1024;
        v45 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Setting stream configuration for local SEID %u and remote SEID %u on device %{public}s, remote delay reporting %d, local delay reporting %d", buf, 0x24u);
        if (v36 < 0)
          operator delete(__p);
      }
      v22 = *(_DWORD *)(v17 + 44);
      v30 = 0;
      sub_100043758(&v30);
      v23 = v18 ^ 1;
      if (!v19)
        v23 = 0;
      v24 = sub_10013DC6C(a2, v15, v16, v29, (v22 - v23), 0, &v31);
      sub_10004339C(&v30);
      v25 = qword_1009997C8;
      if (v24)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
          sub_1006EB364();
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        {
          v26 = v31;
          sub_10043E5F8(v14, buf);
          v27 = SHIBYTE(v41) >= 0 ? buf : *(uint8_t **)buf;
          LODWORD(__p) = 67109378;
          HIDWORD(__p) = v26;
          v34 = 2082;
          v35 = v27;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "SelectStreamConfig setting a2dp stream handle to %d for device %{public}s", (uint8_t *)&__p, 0x12u);
          if (SHIBYTE(v41) < 0)
            operator delete(*(void **)buf);
        }
        sub_100412864(v5, v31);
      }
      sub_100043728(&v30);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(v14, buf);
        sub_1006EB318();
      }
      sub_1003D95C0(a1, a2);
    }
    v13 = 0;
  }
  else
  {
    v12 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Invalid stream state %d, cannot select stream config unless in CONNECTING or INVALID state", buf, 8u);
    }
    v13 = 1;
  }
  sub_100034234((uint64_t)v32);
  return v13;
}

void sub_1003DBD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12, int a13, char a14)
{
  sub_100043728(&a12);
  sub_100034234((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1003DBD94()
{
  JUMPOUT(0x1003DBD8CLL);
}

void sub_1003DBD9C(int a1, uint64_t a2, int a3, __int16 a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[6];
  int v11;
  int v12;
  __int16 v13;

  v8 = mach_absolute_time();
  v9 = sub_1004759E0();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1003ECFC4;
  v10[3] = &unk_10092A3B8;
  v11 = a1;
  v12 = a3;
  v13 = a4;
  v10[4] = a2;
  v10[5] = v8;
  sub_100041A34(v9, v10);
}

uint64_t sub_1003DBE28(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned __int8 *a5)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void **v12;
  int v13;
  NSObject *v14;
  int v15;
  void *__p[2];
  char v18;
  _QWORD v19[2];
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 552);
  v9 = sub_1003D9B54(a1, a3);
  v10 = v9 + 400;
  sub_100415A08(v9 + 400, a4);
  v11 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8((uint64_t)a5, __p);
    v12 = v18 >= 0 ? __p : (void **)__p[0];
    v13 = *(_DWORD *)(v9 + 648);
    *(_DWORD *)buf = 136446722;
    v21 = v12;
    v22 = 1024;
    v23 = a4;
    v24 = 1024;
    v25 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Configuring A2DP audio device %{public}s MTU=%u, RTP_len=%u", buf, 0x18u);
    if (v18 < 0)
      operator delete(__p[0]);
  }
  sub_100416660(v10);
  if (sub_1003DC07C(a1, a3, a5) == 311)
  {
    v14 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "A2DP audio device already exists, since mtu size changed, need to reconfigure the audio device", buf, 2u);
    }
    sub_1005D9AA8(v9, (int)*(double *)(v9 + 680));
    sub_1005D9A78(v9, *(_DWORD *)(v9 + 664));
    sub_1005D9A88(v9, *(_DWORD *)(v9 + 660));
    sub_1005D9A98(v9, *(_DWORD *)(v9 + 652));
    sub_1005D98F8(v9, 1);
    sub_1005D98C8(v9, *(unsigned __int8 *)(v9 + 712));
    sub_1005D9938(v9, 0, 1.0);
    sub_1005D9898(v9, *(unsigned __int8 *)(v9 + 704));
    if (*(_BYTE *)(v9 + 704))
    {
      v15 = sub_100415628(v10);
      sub_1005D98B8(v9, v15);
      *(_BYTE *)(v9 + 706) = 0;
    }
  }
  sub_100034234((uint64_t)v19);
  return 0;
}

void sub_1003DC05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DC07C(uint64_t a1, unsigned int a2, unsigned __int8 *a3)
{
  NSObject *v6;
  __int128 *v7;
  uint64_t v8;
  unint64_t *v9;
  NSObject *v10;
  __int128 *p_p;
  int v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  int v20;
  int v21;
  int v22;
  NSObject *v23;
  int v24;
  int v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  int v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  int v33;
  _BOOL8 v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned __int8 v40;
  int v41;
  unsigned __int8 v42;
  int v43;
  unsigned __int8 v44;
  NSObject *v45;
  __int128 *v46;
  NSObject *v47;
  __int128 *v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _BOOL4 v55;
  id v56;
  void *v57;
  int v58;
  id v59;
  void *v60;
  float v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  NSObject *v68;
  id v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  NSObject *v74;
  int v75;
  int v76;
  int v77;
  const char *v78;
  const char *v79;
  const char *v80;
  NSObject *v81;
  __int128 *v82;
  int v83;
  NSObject *v84;
  const char *v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  char v92;
  char v93;
  char v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  NSObject *v99;
  const char *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  _BOOL4 v105;
  int v106;
  int v107;
  _QWORD v108[6];
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  float v113;
  uint8_t v114[4];
  __int128 *v115;
  __int128 __p;
  __int128 v117;
  void *v118;
  __int16 v119;
  const char *v120;
  __int16 v121;
  int v122;
  _BYTE buf[18];
  char v124;

  v6 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8((uint64_t)a3, &__p);
    v7 = (SBYTE7(v117) & 0x80u) == 0 ? &__p : (__int128 *)__p;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Publishing audio device %{public}s on a2dpHandle %d", buf, 0x12u);
    if (SBYTE7(v117) < 0)
      operator delete((void *)__p);
  }
  v8 = sub_1003D9B54(a1, a2);
  v9 = (unint64_t *)v8;
  if (*(_BYTE *)(v8 + 24))
  {
    v10 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8((uint64_t)a3, &__p);
      if ((SBYTE7(v117) & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = (__int128 *)__p;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = p_p;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Audio device %{public}s on a2dpHandle %d is already published", buf, 0x12u);
      if (SBYTE7(v117) < 0)
        operator delete((void *)__p);
    }
    return 311;
  }
  v13 = sub_100412EDC(v8 + 400);
  sub_10046E9BC(a3 + 128, buf);
  if (v124 >= 0)
    v14 = buf;
  else
    v14 = *(char **)buf;
  sub_100091AE8(&__p, v14);
  sub_1002D42C0((uint64_t)v9, (const void **)&__p);
  if (SBYTE7(v117) < 0)
    operator delete((void *)__p);
  if (v124 < 0)
    operator delete(*(void **)buf);
  sub_10043F6EC((uint64_t)a3, (uint64_t)buf);
  if (v124 >= 0)
    v15 = buf;
  else
    v15 = *(char **)buf;
  sub_100091AE8(&__p, v15);
  sub_1002D4448((uint64_t)v9, (uint64_t)&__p);
  if (SBYTE7(v117) < 0)
    operator delete((void *)__p);
  if (v124 < 0)
    operator delete(*(void **)buf);
  sub_10046E9BC(a3 + 128, buf);
  if (v124 >= 0)
    v16 = buf;
  else
    v16 = *(char **)buf;
  sub_100091AE8(&__p, v16);
  sub_1002D4248((uint64_t)v9, (uint64_t)&__p);
  if (SBYTE7(v117) < 0)
    operator delete((void *)__p);
  if (v124 < 0)
    operator delete(*(void **)buf);
  sub_1002D4440((uint64_t)v9, (uint64_t)a3);
  sub_1005D9A5C((uint64_t)v9, v13);
  v113 = 0.0;
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_10092D6F8);
  v17 = sub_10059C6BC((uint64_t)off_10097ABF8, (unint64_t)a3, &v113);
  if (v17)
  {
    v18 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p) = 134217984;
      *(double *)((char *)&__p + 4) = v113;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Setting audio device volume to %f", (uint8_t *)&__p, 0xCu);
    }
    sub_1002D4114((uint64_t)v9, v113);
  }
  sub_100415940((uint64_t)(v9 + 50), v17);
  sub_1002D4B4C((uint64_t)v9, v17);
  v19 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v20 = sub_100442118((uint64_t)a3, 32);
    LODWORD(__p) = 67109120;
    DWORD1(__p) = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "A2DPClient setSupportsTipi %d", (uint8_t *)&__p, 8u);
  }
  v21 = sub_100442118((uint64_t)a3, 32);
  sub_1002D4B94((uint64_t)v9, v21);
  sub_1005D9A78((uint64_t)v9, *((_DWORD *)v9 + 166));
  sub_1005D9A6C((uint64_t)v9, *((double *)v9 + 84));
  sub_1005D9A88((uint64_t)v9, *((_DWORD *)v9 + 165));
  sub_1005D9A98((uint64_t)v9, *((_DWORD *)v9 + 163));
  sub_1005D9AA8((uint64_t)v9, (int)*((double *)v9 + 85));
  v22 = sub_100415628((uint64_t)(v9 + 50));
  sub_1002D4D3C((uint64_t)v9, v22);
  v23 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v24 = sub_100415628((uint64_t)(v9 + 50));
    LODWORD(__p) = 67109120;
    DWORD1(__p) = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Setting audio device latency to %d", (uint8_t *)&__p, 8u);
  }
  v25 = sub_100412BA4((uint64_t)(v9 + 50));
  sub_10057CE64((uint64_t)v9, v25);
  sub_1005D98F8((uint64_t)v9, 1);
  sub_1005D98C8((uint64_t)v9, *((unsigned __int8 *)v9 + 712));
  sub_1005D9938((uint64_t)v9, 0, 1.0);
  sub_1005D9898((uint64_t)v9, *((unsigned __int8 *)v9 + 704));
  v26 = sub_10043F998((uint64_t)a3);
  sub_1002D52C4((uint64_t)v9, v26);
  v27 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v28 = sub_10003BE44();
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 240))(v28);
    v30 = sub_100442118((uint64_t)a3, 49);
    v31 = sub_10044D860((uint64_t)a3);
    LODWORD(__p) = 67109632;
    DWORD1(__p) = v29;
    WORD4(__p) = 1024;
    *(_DWORD *)((char *)&__p + 10) = v30;
    HIWORD(__p) = 1024;
    LODWORD(v117) = v31;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Local and remote low latency game support, local: %d remote: %d Bandswitch Support %d", (uint8_t *)&__p, 0x14u);
  }
  if (sub_100442118((uint64_t)a3, 49))
  {
    v32 = sub_10003BE44();
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 240))(v32);
  }
  else
  {
    v33 = 0;
  }
  sub_1005D9A34((uint64_t)v9, v33);
  if ((sub_100442118((uint64_t)a3, 12) & 1) == 0)
  {
    v34 = sub_1004420E0((uint64_t)a3);
    if (!v34)
    {
      v35 = sub_1003E52A4(v34, (uint64_t)a3);
      sub_10057D0B4((uint64_t)v9, v35);
    }
  }
  if (*((_BYTE *)v9 + 704))
  {
    v36 = sub_100415628((uint64_t)(v9 + 50));
    sub_1005D98B8((uint64_t)v9, v36);
    *((_BYTE *)v9 + 706) = 0;
  }
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092D638);
  v37 = sub_1002806C8((uint64_t)off_100977A80, (uint64_t)a3);
  sub_1002D4DDC((uint64_t)v9, v37);
  v38 = sub_100442118((uint64_t)a3, 12);
  sub_1002D4DB4((uint64_t)v9, v38);
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092D638);
  if (sub_1002806C8((uint64_t)off_100977A80, (uint64_t)a3))
  {
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10092D638);
    v39 = sub_1002834CC((uint64_t)off_100977A80, (uint64_t)a3);
    sub_1002D4E04((uint64_t)v9, v39);
    LODWORD(__p) = 0;
    *(_DWORD *)buf = 0;
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10092D638);
    sub_1002835F4((uint64_t)off_100977A80, (uint64_t)a3, (int *)&__p, (int *)buf);
    sub_1002D4E2C((uint64_t)v9, __p, buf[0]);
    *(_DWORD *)v114 = 3;
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10092D638);
    sub_100283884((uint64_t)off_100977A80, (uint64_t)a3, (int *)v114);
    sub_1002D4E3C((uint64_t)v9, v114[0]);
    v40 = sub_10044F5D0((uint64_t)a3);
    sub_1002D4E4C((uint64_t)v9, v40);
  }
  v41 = sub_100442118((uint64_t)a3, 36);
  sub_1005D9928((uint64_t)v9, v41);
  if ((sub_100442118((uint64_t)a3, 12) & 1) != 0 || sub_1004420E0((uint64_t)a3))
  {
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10092D638);
    v42 = sub_10027FE1C((uint64_t)off_100977A80, (uint64_t)a3);
    sub_1002D4E5C((uint64_t)v9, v42);
  }
  v112 = 0;
  if (sub_10044FE34((uint64_t)a3, 176))
    v43 = 4;
  else
    v43 = 0;
  v112 = v43;
  sub_1003E4D58((_QWORD *)a1, (uint64_t)a3, &v112);
  if (sub_1004483F0((uint64_t)a3))
  {
    v44 = sub_10044F708((uint64_t)a3);
    sub_1002D4E7C((uint64_t)v9, v44);
  }
  if (sub_10044F790((uint64_t)a3))
  {
    v45 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8((uint64_t)a3, &__p);
      v46 = (SBYTE7(v117) & 0x80u) == 0 ? &__p : (__int128 *)__p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v46;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Applying DontAutoRoute: %{public}s", buf, 0xCu);
      if (SBYTE7(v117) < 0)
        operator delete((void *)__p);
    }
    sub_10044E03C((uint64_t)a3, 0);
    sub_1002D57FC((uint64_t)v9, 0);
  }
  if (sub_10044F7D4((uint64_t)a3))
  {
    v47 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8((uint64_t)a3, &__p);
      v48 = (SBYTE7(v117) & 0x80u) == 0 ? &__p : (__int128 *)__p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v48;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Applying AudioRouteHidden: %{public}s", buf, 0xCu);
      if (SBYTE7(v117) < 0)
        operator delete((void *)__p);
    }
    sub_10044E080((uint64_t)a3, 0);
    sub_1002D585C((uint64_t)v9, 1);
  }
  v110 = 0;
  v111 = 0;
  sub_100444BF0((uint64_t)a3, (_DWORD *)&v111 + 1, &v111, (_DWORD *)&v110 + 1, &v110);
  v49 = sub_10044FE34((uint64_t)a3, 32);
  sub_1002D5774((uint64_t)v9, v49);
  if (sub_10044FE34((uint64_t)a3, 64))
  {
    v50 = sub_10003BE44();
    v51 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 792))(v50, 1);
  }
  else
  {
    v51 = 0;
  }
  sub_1002D5500((uint64_t)v9, v51);
  v52 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 792))(v52, 3)
    && (sub_10044FE34((uint64_t)a3, 64) & 1) != 0)
  {
    v53 = sub_10003BE44();
    v54 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 792))(v53, 1);
    sub_1002D5674((uint64_t)v9, v54);
    if (v54)
    {
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_10092D658);
      v55 = sub_100527AD4((uint64_t)off_100977A90, (uint64_t)a3);
      sub_1005D9908((uint64_t)v9, v55);
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_10092D658);
      v56 = sub_100527864((uint64_t)off_100977A90);
      v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
      sub_1002D5550((uint64_t)v9, v57);

      v58 = 1;
      goto LABEL_107;
    }
  }
  else
  {
    sub_1002D5674((uint64_t)v9, 0);
  }
  v58 = 0;
LABEL_107:
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092D718);
  sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)a3[128] << 40) | ((unint64_t)a3[129] << 32) | ((unint64_t)a3[130] << 24) | ((unint64_t)a3[131] << 16) | ((unint64_t)a3[132] << 8) | a3[133], 1u, 1u, 0, 0, (unsigned __int8 *)&__p);
  v59 = sub_100030DF4((const unsigned __int8 *)&__p);
  v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
  objc_msgSend(v60, "getUUIDBytes:", buf);

  sub_1002D51E8((uint64_t)v9, (CFUUIDBytes *)buf);
  sub_1002D51F8((uint64_t)v9, SHIDWORD(v110));
  sub_1002D5208((uint64_t)v9, v110);
  sub_1002D5218((uint64_t)v9, v111);
  v61 = sub_1004513A4((uint64_t)a3);
  sub_1002D5250((uint64_t)v9, v61);
  sub_1002D70C0(&__p, (uint64_t)(a3 + 1120));
  sub_1002D52D4((uint64_t)v9, (int **)&__p);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  v62 = sub_100451434((uint64_t)a3);
  sub_1002D5428((uint64_t)v9, v62);
  v63 = sub_10044F96C((uint64_t)a3);
  sub_1002D518C((uint64_t)v9, v63);
  if ((sub_10044FE34((uint64_t)a3, 64) & 1) != 0)
  {
    v64 = sub_10003BE44();
    v65 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 792))(v64, 1);
    v66 = 0;
    v109 = 0;
    if (v65)
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10092D5D8);
      sub_10047134C((uint64_t)off_1009778E0, (uint64_t)a3, &v109);
      LOBYTE(__p) = 1;
      v67 = sub_100038E50();
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v67 + 240))(v67, &__p);
      v68 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEBUG))
        sub_1006EB3C4(&__p, v68);
      sub_1002D4ED8((uint64_t)v9, __p);
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_10092D658);
      v69 = sub_100527108((uint64_t)off_100977A90);
      (*(void (**)(unint64_t *, id))(*v9 + 128))(v9, v69);
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10092D5D8);
      sub_10047134C((uint64_t)off_1009778E0, (uint64_t)a3, &v109);
      v70 = v109;
      if (!v109)
      {
        if (qword_1009778E8 != -1)
          dispatch_once(&qword_1009778E8, &stru_10092D5D8);
        v70 = 1;
        sub_100471494((uint64_t)off_1009778E0, (uint64_t)a3, 1);
        v109 = 1;
      }
      sub_1002D4EB0((uint64_t)v9, v70 == 1);
      v71 = sub_100027F68();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71))
      {
        v72 = sub_100027F68();
        v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v72 + 584))(v72);
        sub_1005D9918((uint64_t)v9, v73);
      }
      v66 = 1;
    }
  }
  else
  {
    v66 = 0;
    v109 = 0;
  }
  v74 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10092D638);
    v75 = sub_1002806C8((uint64_t)off_100977A80, (uint64_t)a3);
    v76 = sub_100442118((uint64_t)a3, 12);
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10092D638);
    v77 = sub_1002834CC((uint64_t)off_100977A80, (uint64_t)a3);
    v78 = " NO ";
    if (v66)
      v79 = "YES ";
    else
      v79 = " NO ";
    LODWORD(__p) = 67110658;
    if (v109 == 1)
      v78 = "YES ";
    DWORD1(__p) = v75;
    WORD4(__p) = 1024;
    v80 = "NO";
    *(_DWORD *)((char *)&__p + 10) = v76;
    HIWORD(__p) = 1024;
    if (v58)
      v80 = "YES";
    LODWORD(v117) = v77;
    WORD2(v117) = 2082;
    *(_QWORD *)((char *)&v117 + 6) = v79;
    HIWORD(v117) = 2082;
    v118 = (void *)v78;
    v119 = 2082;
    v120 = v80;
    v121 = 1024;
    v122 = v112;
    _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "AudioDevice. SupportsInEarDetection %d, isAppleAudioDevice %d, InEarDetectionEnabled %d SpatialSupport  %{public}s SpatialAllowed %{public}s Spatial Profile %{public}s supportedListeningModes %u", (uint8_t *)&__p, 0x38u);
  }
  if (a3[968])
  {
    v81 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8((uint64_t)a3, &__p);
      v82 = (SBYTE7(v117) & 0x80u) == 0 ? &__p : (__int128 *)__p;
      *(_DWORD *)v114 = 136446210;
      v115 = v82;
      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "Wireless Splitter guest not in contacts %{public}s doAP is not supported", v114, 0xCu);
      if (SBYTE7(v117) < 0)
        operator delete((void *)__p);
    }
  }
  else
  {
    v83 = sub_100442118((uint64_t)a3, 22);
    sub_1002D51B0((uint64_t)v9, v83);
    if (sub_100442118((uint64_t)a3, 22))
      sub_1002D51D8((uint64_t)v9, (CFUUIDBytes *)buf);
  }
  sub_1002D5438((uint64_t)v9, *((unsigned __int8 *)v9 + 722));
  sub_1002D5460((uint64_t)v9, *((unsigned __int8 *)v9 + 723));
  sub_1002D5488((uint64_t)v9, a3[952]);
  sub_1002D54B0((uint64_t)v9, a3[968]);
  v84 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    if (a3[952])
      v85 = "guest device";
    else
      v85 = "owner device";
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v85;
    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "Wireless Splitter this is %s", (uint8_t *)&__p, 0xCu);
    v84 = qword_1009997C8;
  }
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
  {
    v86 = sub_100442118((uint64_t)a3, 26);
    LODWORD(__p) = 67109120;
    DWORD1(__p) = v86;
    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "AudioDevice. SupportsSoftwareVol %d", (uint8_t *)&__p, 8u);
  }
  *((_BYTE *)v9 + 726) = 0;
  if (sub_100442118((uint64_t)a3, 26))
  {
    v87 = sub_100027F68();
    v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v87 + 768))(v87) ^ 1;
  }
  else
  {
    v88 = 0;
  }
  sub_1002D54D8((uint64_t)v9, v88);
  *(_DWORD *)v114 = 0;
  if (sub_1002D4CAC((uint64_t)v9, v114))
  {
    if (sub_100442118((uint64_t)a3, 26)
      && ((*(_DWORD *)v114 - 8202) < 4 || sub_10044FE34((uint64_t)a3, 10)))
    {
      v89 = sub_100027F68();
      v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 776))(v89) ^ 1;
    }
    else
    {
      v90 = 0;
    }
    sub_1002D4C40((uint64_t)v9, v90);
    *((_BYTE *)v9 + 727) = v90;
    if (sub_100442118((uint64_t)a3, 26))
    {
      v91 = sub_100027F68();
      v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v91 + 768))(v91);
      v93 = *(_DWORD *)v114 == 8202 ? 1 : v92;
      if ((v93 & 1) == 0)
      {
        v94 = sub_10044FE34((uint64_t)a3, 32);
        v95 = *((_BYTE *)v9 + 723) ? 1 : v94;
        if ((v95 & 1) == 0)
        {
          v96 = sub_1004759E0();
          v108[0] = _NSConcreteStackBlock;
          v108[1] = 3221225472;
          v108[2] = sub_1003E56C4;
          v108[3] = &unk_100918090;
          v108[4] = a1;
          v108[5] = a3;
          sub_100041A34(v96, v108);
        }
      }
    }
  }
  if (sub_10044FE34((uint64_t)a3, 144))
  {
    v97 = sub_1000438A4();
    v98 = sub_1003312CC(v97, 0);
  }
  else
  {
    v98 = 0;
  }
  v99 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v100 = "not supported";
    if (v98)
      v100 = "supported";
    LODWORD(__p) = 136315138;
    *(_QWORD *)((char *)&__p + 4) = v100;
    _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "Adaptive Volume: setAdaptiveVolumeSupport %s", (uint8_t *)&__p, 0xCu);
  }
  sub_1002D569C((uint64_t)v9, v98);
  if (sub_10044FE34((uint64_t)a3, 80))
  {
    v101 = sub_1000438A4();
    v102 = sub_1003312CC(v101, 1u);
  }
  else
  {
    v102 = 0;
  }
  sub_1002D56D4((uint64_t)v9, v102);
  if (sub_10044FE34((uint64_t)a3, 160))
  {
    v103 = sub_1000438A4();
    v104 = sub_1003312CC(v103, 2u);
  }
  else
  {
    v104 = 0;
  }
  sub_1002D56FC((uint64_t)v9, v104);
  v105 = (sub_100447C64((uint64_t)a3) & 2) == 0;
  sub_1002D6590((uint64_t)v9, v105);
  v106 = sub_10044FE34((uint64_t)a3, 20);
  sub_1002D5724((uint64_t)v9, v106);
  if (sub_10044FE34((uint64_t)a3, 20))
  {
    sub_1000438A4();
    v107 = sub_100331654() ^ 1;
  }
  else
  {
    v107 = 1;
  }
  sub_1002D574C((uint64_t)v9, v107);
  *(_QWORD *)&__p = _NSConcreteStackBlock;
  *((_QWORD *)&__p + 1) = 3221225472;
  *(_QWORD *)&v117 = sub_1003D9048;
  *((_QWORD *)&v117 + 1) = &unk_10092CFC0;
  v118 = a3;
  v119 = a2;
  LOBYTE(v120) = 1;
  sub_1003D88F4((os_unfair_lock_s *)(a1 + 432), &__p);
  sub_1002D3904(v9);
  return 0;
}

void sub_1003DD420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

uint64_t sub_1003DD498(uint64_t a1, uint64_t a2, uint64_t a3, uint8_t a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  __int16 v38;
  uint64_t v39;
  char v40;
  uint8_t buf[40];

  if (!a3)
    return 0;
  v10 = sub_1003D9B54(a1, a5);
  v11 = sub_1003D8844(a1, a5);
  v12 = 120;
  if (v10 && v11)
  {
    v39 = v11;
    v38 = sub_100412814(v10 + 400);
    v13 = *(_WORD *)(v10 + 720) + 1;
    *(_WORD *)(v10 + 720) = v13;
    if ((unsigned __int16)(12157 * v13) <= 0x8Bu)
    {
      buf[0] = 0;
      sub_100043758(buf);
      sub_1001929C8((uint64_t (*)())sub_1003DBD9C, v39 + 128);
      sub_10004339C(buf);
      atomic_store(mach_absolute_time(), (unint64_t *)(a1 + 744));
      sub_100043728(buf);
    }
    v14 = (unint64_t *)(a1 + 760);
    v15 = atomic_load((unint64_t *)(a1 + 760));
    v16 = v15 == 0;
    v17 = mach_absolute_time();
    if (v16)
    {
      v20 = atomic_load((unint64_t *)(a1 + 744));
      v18 = (v17 - v20) * *(unsigned int *)(a1 + 620) / *(unsigned int *)(a1 + 624) / 0x3E8;
      *(_QWORD *)(a1 + 768) = mach_absolute_time();
      v21 = atomic_load((unint64_t *)(a1 + 752));
      atomic_store(v21 + v18, (unint64_t *)(a1 + 760));
    }
    else
    {
      v18 = (v17 - *(_QWORD *)(a1 + 768)) * *(unsigned int *)(a1 + 620) / *(unsigned int *)(a1 + 624) / 0x3E8;
      do
        v19 = __ldaxr(v14);
      while (__stlxr(v19 + v18, v14));
      *(_QWORD *)(a1 + 768) = mach_absolute_time();
    }
    v22 = v13;
    if (*(_BYTE *)(a1 + 780))
    {
      v23 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        v24 = *(_QWORD *)(a1 + 768);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v22;
        *(_WORD *)&buf[8] = 2048;
        *(_QWORD *)&buf[10] = v18;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "A2DP Send[%d]: delta time %llu us current time %llu", buf, 0x1Cu);
      }
    }
    memset(buf, 0, 32);
    *(_WORD *)buf = 24704;
    buf[2] = BYTE1(v22);
    buf[3] = v22;
    v25 = atomic_load(v14);
    buf[7] = v25 / 0x3E8;
    v26 = atomic_load(v14);
    buf[6] = v26 / 0x3E800;
    v27 = atomic_load(v14);
    buf[5] = v27 / 0x3E80000;
    v28 = atomic_load(v14);
    buf[4] = v28 / 0x3E8000000;
    *(_DWORD *)&buf[8] = 0;
    buf[12] = a4;
    *(_QWORD *)&buf[16] = a3;
    *(_QWORD *)&buf[24] = a2;
    kdebug_trace(730021956, v22, 0, 0, 0);
    v40 = 0;
    sub_100043758(&v40);
    v29 = v38;
    v30 = sub_100140518(v38, (uint64_t)buf);
    v31 = v39;
    v32 = v30;
    v12 = v30;
    if ((_DWORD)v30 != 410)
      goto LABEL_28;
    v33 = atomic_load(v14);
    kdebug_trace(730021960, v22, v33 / 0x3E8, 0, 0);
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    {
      sub_1006EB510();
      v29 = v38;
    }
    v12 = sub_10014066C(v29);
    if ((_DWORD)v12)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      {
        sub_1006EB4B0();
        v29 = v38;
      }
      v31 = v39;
      if ((_DWORD)v12 != 485)
        goto LABEL_28;
      sub_100140634(v29);
      v12 = 485;
    }
    else
    {
      v34 = sub_100140518(v29, (uint64_t)buf);
      v12 = v34;
      v31 = v39;
      if (!(_DWORD)v34 || (_DWORD)v34 == 412 || !os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        goto LABEL_28;
      sub_1006EB450();
    }
    v31 = v39;
LABEL_28:
    sub_10004339C(&v40);
    if (v22 >= 0x33 && v32 == 410)
    {
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_10092D658);
      v35 = off_100977A90;
      v36 = atomic_load(v14);
      sub_10051D8FC((uint64_t)v35, v31, v36);
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_10092D658);
      sub_10051FF10((uint64_t)off_100977A90, v31, 0, 0, 1);
    }
    else if (v22 >= 0x33 && v32 != 410)
    {
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_10092D658);
      atomic_load(v14);
      sub_10051F3DC((uint64_t)off_100977A90);
    }
    sub_100043728(&v40);
  }
  return v12;
}

void sub_1003DD9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DD9E8(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  char v7;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 552);
  v4 = sub_1003D9B54(a1, a2);
  if (v4 && *(_DWORD *)(v4 + 728) == 1)
  {
    v7 = 0;
    sub_100043758(&v7);
    v5 = sub_10013D6EC(a2, 0);
    sub_10004339C(&v7);
    if (v5 && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EB57C();
    sub_100043728(&v7);
  }
  return sub_100034234((uint64_t)v8);
}

void sub_1003DDAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003DDAC8(os_unfair_lock_s *a1)
{
  char *v2;
  char *v3;
  int v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  std::string __p;
  char *v9;
  char *v10;
  uint64_t v11;
  std::string buf;

  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10092D658);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  sub_100525998((uint64_t)off_100977A90, &v9);
  sub_1003D88F4(a1 + 108, &stru_10092D020);
  v2 = v9;
  v3 = v10;
  if (v9 != v10)
  {
    do
    {
      v4 = *(unsigned __int16 *)v2;
      if (*(_WORD *)v2)
      {
        v5 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v4;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Wireless Splitter guest device is gone, destroy aggregate with handle %hu", (uint8_t *)&buf, 8u);
        }
        memset(&buf, 0, sizeof(buf));
        v6 = sub_100091AE8(&buf, "WS_ERROR_DISCONNECTION_GUEST_GONE");
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          v6 = sub_10003430C(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        else
          __p = buf;
        sub_1003EA368((uint64_t)v6, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v7 = sub_1003D9B54((uint64_t)a1, *(unsigned __int16 *)v2);
        if (v7)
        {
          (*(void (**)(os_unfair_lock_s *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)&a1->_os_unfair_lock_opaque
                                                                              + 192))(a1, v7, 0, 0);
          sub_1002D5460(v7, 0);
          *(_BYTE *)(v7 + 723) = 0;
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
      v2 += 2;
    }
    while (v2 != v3);
    v2 = v9;
  }
  if (v2)
  {
    v10 = v2;
    operator delete(v2);
  }
}

void sub_1003DDCC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1003DDD24(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int v7;
  int v8;
  _QWORD v9[3];
  _QWORD v10[3];
  unsigned __int16 v11;
  char v12;

  v12 = 0;
  sub_100043758(&v12);
  v11 = 0;
  if ((sub_10013B47C(a2 + 128, &v11) || !v11)
    && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, v10);
    sub_1006EB684();
  }
  sub_10004339C(&v12);
  if (a3)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a2, v9);
      sub_1006EB63C();
    }
    sub_10006D81C(&v12);
    sub_10013D1F8(v11, 0);
  }
  else
  {
    v7 = sub_100481EC8((uint64_t)a1, a2);
    sub_10006D81C(&v12);
    v8 = sub_10013D1F8(v11, v7);
    sub_10004339C(&v12);
    if (v8)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        sub_1006EB5DC();
    }
    else if (v7)
    {
      sub_1004816DC(a1, a2);
    }
  }
  return sub_100043728(&v12);
}

void sub_1003DDEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_100043728(&a19);
  _Unwind_Resume(a1);
}

_BYTE *sub_1003DDEEC(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1003DDD24((_QWORD *)(a1 - 264), a2, a3);
}

uint64_t sub_1003DDEF4(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  void **v8;
  unsigned int v9;
  NSObject *v10;
  const char *v11;
  void **v12;
  uint64_t v13;
  NSObject *v14;
  void **v15;
  void *__p[2];
  char v18;
  _QWORD v19[2];
  uint8_t buf[4];
  void *v21;
  __int16 v22;
  void **v23;

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, (uint64_t)(a1 + 69));
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092D5D8);
  v6 = sub_10006D488((uint64_t)off_1009778E0, a2, 1);
  v7 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v6, __p);
    v8 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v21 = v8;
    v22 = 1024;
    LODWORD(v23) = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ConnectInd from device %{public}s on a2dpHandle %d", buf, 0x12u);
    if (v18 < 0)
      operator delete(__p[0]);
  }
  if (!sub_100444790(v6))
  {
    v14 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v6, __p);
      v15 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v21 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Delaying incoming connection attempt for device %{public}s as SDP is missing", buf, 0xCu);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    if (qword_10097B080 != -1)
      dispatch_once(&qword_10097B080, &stru_10092D678);
    sub_10048BB30(qword_10097B078, v6);
  }
  v9 = sub_100481EC8((uint64_t)a1, v6);
  v10 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v6, __p);
    v11 = "Rejecting";
    if (v9)
      v11 = "Accepting";
    if (v18 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v21 = (void *)v11;
    v22 = 2082;
    v23 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}s incoming connection attempt from device %{public}s", buf, 0x16u);
    if (v18 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v13 = sub_10013D1F8(a3, v9);
  sub_10004339C(__p);
  if ((_DWORD)v13)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EB5DC();
  }
  else if (v9)
  {
    sub_1004816DC(a1, v6);
  }
  sub_100043728(__p);
  sub_100034234((uint64_t)v19);
  return v13;
}

void sub_1003DE234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003DE278(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  _QWORD v9[2];
  __int16 v10;
  void *__p;

  v10 = a3;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 552);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092D5D8);
  v7 = sub_10006D488((uint64_t)off_1009778E0, a2, 1);
  if ((_DWORD)a4)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(v7, &__p);
      sub_1006EB7AC();
    }
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_10092D698);
    v8 = sub_1004A35C0((uint64_t)off_100977A50, a4, 20000);
    sub_10048183C(a1, v7, v8);
  }
  sub_10048183C(a1, v7, 0);
}

void sub_1003DE9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  sub_100043728(&a18);
  sub_100034234((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DEA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  void *v15[2];
  char v16;
  char v17;
  void *__p[2];
  char v19;
  int v20;
  uint8_t buf[16];
  __int128 v22;
  __int128 v23;
  void *v24[2];
  __int128 v25;
  void *v26[2];
  _OWORD v27[3];
  __int128 v28;
  uint64_t v29;

  v20 = 0;
  v3 = sub_100027F68();
  sub_100091AE8(buf, "A2DP");
  sub_100091AE8(__p, "SampleRate");
  v4 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v3 + 128))(v3, buf, __p, &v20);
  if (v19 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v22) < 0)
  {
    operator delete(*(void **)buf);
    if (!v4)
      goto LABEL_16;
  }
  else if (!v4)
  {
    goto LABEL_16;
  }
  if (v20 == 48000)
  {
    v7 = qword_1009997C8;
    v6 = 0;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 48000;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Warning: Bad48KHzCodecs: Setting user defined A2DP Sample Rate for our endpoints to %d Hz", buf, 8u);
      return 0;
    }
  }
  else
  {
    if (v20 != 44100)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        sub_1006EB7F4();
LABEL_16:
      v29 = 0;
      v28 = 0u;
      memset(v27, 0, sizeof(v27));
      v25 = 0u;
      *(_OWORD *)v26 = 0u;
      v23 = 0u;
      *(_OWORD *)v24 = 0u;
      *(_OWORD *)buf = 0u;
      v22 = 0u;
      sub_1005BCCCC((uint64_t)&buf[1]);
      BYTE2(v22) = 0;
      BYTE4(v22) = 0;
      BYTE2(v24[0]) = 0;
      BYTE4(v24[0]) = 0;
      DWORD1(v27[1]) = 0;
      v23 = 0uLL;
      *((_QWORD *)&v22 + 1) = 0;
      LOBYTE(v24[0]) = 0;
      v25 = 0uLL;
      v24[1] = 0;
      LOBYTE(v26[0]) = 0;
      memset(v27, 0, 19);
      v26[1] = 0;
      BYTE8(v27[1]) = 1;
      BYTE2(v29) = 0;
      *(_QWORD *)((char *)&v27[1] + 14) = 0;
      *(_QWORD *)((char *)&v27[1] + 9) = 0;
      v28 = 0uLL;
      *((_QWORD *)&v27[2] + 1) = 0;
      LOBYTE(v29) = 0;
      sub_1004419F4(a2, (uint64_t)buf);
      v17 = 0;
      v8 = sub_100027F68();
      sub_100091AE8(__p, "A2DP");
      sub_100091AE8(v15, "Default48KHz");
      (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v8 + 72))(v8, __p, v15, &v17);
      if (v16 < 0)
        operator delete(v15[0]);
      if (v19 < 0)
        operator delete(__p[0]);
      if (v17)
      {
        v9 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Warning: Bad48KHzCodecs: Defaulting to 48 KHz based on defaults write - using denylist instead of allowlist", (uint8_t *)__p, 2u);
        }
        if (BYTE8(v28))
        {
          v11 = qword_1009997C8;
          if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            v6 = 2;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Bad48KHzCodecs: Disabling 48 KHz - Device is in 48 KHz AAC denylist", (uint8_t *)__p, 2u);
          }
          else
          {
            v6 = 2;
          }
          goto LABEL_35;
        }
      }
      else
      {
        if (!BYTE9(v28) && !sub_1004420E0(a2))
        {
          v13 = qword_1009997C8;
          if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Bad48KHzCodecs: Disabling 48 KHz - Device is NOT in 48 KHz AAC allowlist", (uint8_t *)__p, 2u);
          }
          v6 = 0xFFFFFFFFLL;
          goto LABEL_35;
        }
        v12 = qword_1009997C8;
        v6 = 0;
        if (!os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        {
LABEL_35:
          if (SHIBYTE(v27[0]) < 0)
            operator delete(v26[1]);
          if (SHIBYTE(v25) < 0)
            operator delete(v24[1]);
          if (SHIBYTE(v23) < 0)
            operator delete(*((void **)&v22 + 1));
          nullsub_90(&buf[1], v10);
          return v6;
        }
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Bad48KHzCodecs: Device is in 48 KHz AAC allowlist", (uint8_t *)__p, 2u);
      }
      v6 = 0;
      goto LABEL_35;
    }
    v5 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 44100;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Warning: Bad48KHzCodecs: Setting user defined A2DP Sample Rate for our endpoints to %d Hz", buf, 8u);
    }
    return 0xFFFFFFFFLL;
  }
  return v6;
}

void sub_1003DEEA0(_Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  sub_10026B73C((uint64_t)&a23, a2);
  _Unwind_Resume(a1);
}

_BYTE *sub_1003DEF24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *result;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint8_t buf[16];

  v3 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3) & 1) != 0
    || (v4 = sub_100027F68(),
        result = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 312))(v4),
        (_DWORD)result))
  {
    v6 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "3EDR packet types are disabled on this platform", buf, 2u);
    }
    v14 = 0;
    v13 = 0;
    sub_100043758(&v13);
    if (!sub_100182588(a2 + 128, &v14) && v14 && !*(_BYTE *)(v14 + 278))
      sub_10019284C(v14, 60956, v7, v8, v9, v10, v11, v12);
    sub_10004339C(&v13);
    return sub_100043728(&v13);
  }
  return result;
}

void sub_1003DEFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_100043728(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DF014(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;

  result = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(result + 536);
  if (v3)
  {
    v4 = *(unsigned __int16 *)(a1 + 40);
    v5 = result + 536;
    do
    {
      v6 = *(unsigned __int16 *)(v3 + 32);
      v7 = v6 >= v4;
      if (v6 >= v4)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 != result + 536 && *(unsigned __int16 *)(v5 + 32) <= v4)
      return sub_1003DD9E8(result, v4);
  }
  return result;
}

uint64_t sub_1003DF068(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  __int128 v6;
  void *v7[2];
  __int128 v8;
  void *v9[2];
  __int128 v10;
  void *__p[2];
  _OWORD v12[3];
  __int128 v13;
  uint64_t v14;

  v14 = 0;
  v13 = 0u;
  memset(v12, 0, sizeof(v12));
  v10 = 0u;
  *(_OWORD *)__p = 0u;
  v8 = 0u;
  *(_OWORD *)v9 = 0u;
  v6 = 0u;
  *(_OWORD *)v7 = 0u;
  sub_1005BCCCC((uint64_t)&v6 + 1);
  BYTE2(v7[0]) = 0;
  BYTE4(v7[0]) = 0;
  BYTE2(v9[0]) = 0;
  BYTE4(v9[0]) = 0;
  DWORD1(v12[1]) = 0;
  v8 = 0uLL;
  v7[1] = 0;
  LOBYTE(v9[0]) = 0;
  v10 = 0uLL;
  v9[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v12, 0, 19);
  __p[1] = 0;
  BYTE8(v12[1]) = 1;
  BYTE2(v14) = 0;
  *(_QWORD *)((char *)&v12[1] + 14) = 0;
  *(_QWORD *)((char *)&v12[1] + 9) = 0;
  v13 = 0uLL;
  *((_QWORD *)&v12[2] + 1) = 0;
  LOBYTE(v14) = 0;
  LODWORD(a2) = sub_1004419F4(a2, (uint64_t)&v6);
  v4 = BYTE14(v12[2]);
  if (SHIBYTE(v12[0]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[1]);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[1]);
  if (v4)
    a2 = a2;
  else
    a2 = 0;
  nullsub_90((char *)&v6 + 1, v2);
  return a2;
}

void sub_1003DF19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10026B73C((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DF1B8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  NSObject *v22;
  __int128 *p_buf;
  _QWORD v24[2];
  unsigned __int16 v25;
  uint8_t v26[4];
  __int128 *v27;
  __int128 buf;
  uint64_t (*v29)(uint64_t, uint64_t);
  void *v30;
  uint64_t v31;
  __int16 v32;
  char v33;

  v25 = a3;
  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, a1 + 552);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092D5D8);
  v6 = sub_10006D488((uint64_t)off_1009778E0, a2, 1);
  v7 = *(_QWORD *)(a1 + 536);
  if (!v7)
    goto LABEL_14;
  v8 = a1 + 536;
  do
  {
    v9 = *(unsigned __int16 *)(v7 + 32);
    v10 = v9 >= a3;
    if (v9 >= a3)
      v11 = (uint64_t *)v7;
    else
      v11 = (uint64_t *)(v7 + 8);
    if (v10)
      v8 = v7;
    v7 = *v11;
  }
  while (*v11);
  if (v8 == a1 + 536 || *(unsigned __int16 *)(v8 + 32) > a3)
    goto LABEL_14;
  sub_1003DA810(a1, a3);
  v13 = *(_QWORD *)(v8 + 40);
  if (*(_BYTE *)(v13 + 723))
  {
    if (*(_BYTE *)(v6 + 952))
      *(_DWORD *)(v6 + 972) = 1;
    sub_10044EC48(v6, 0);
    sub_1003DDAC8((os_unfair_lock_s *)a1);
  }
  sub_1002D4120(v13);
  *(_QWORD *)&buf = _NSConcreteStackBlock;
  *((_QWORD *)&buf + 1) = 3221225472;
  v29 = sub_1003D9048;
  v30 = &unk_10092CFC0;
  v31 = v6;
  v32 = a3;
  v33 = 0;
  sub_1003D88F4((os_unfair_lock_s *)(a1 + 432), &buf);
  sub_100394984(a1 + 528, &v25);
  v14 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_QWORD *)(a1 + 544);
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Current number of A2DP devices: %lu", (uint8_t *)&buf, 0xCu);
  }
  v16 = *(_QWORD *)(a1 + 512);
  if (!v16)
    goto LABEL_47;
  v17 = a1 + 512;
  do
  {
    v18 = *(unsigned __int16 *)(v16 + 32);
    v19 = v18 >= v25;
    if (v18 >= v25)
      v20 = (uint64_t *)v16;
    else
      v20 = (uint64_t *)(v16 + 8);
    if (v19)
      v17 = v16;
    v16 = *v20;
  }
  while (*v20);
  if (v17 == a1 + 512 || v25 < *(unsigned __int16 *)(v17 + 32))
  {
LABEL_47:
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_FAULT))
      sub_1006EB854();
  }
  v21 = sub_100394984(a1 + 504, &v25);
  if (sub_1003DF068(v21, v6))
  {
    v22 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v6, &buf);
      if (SHIBYTE(v29) >= 0)
        p_buf = &buf;
      else
        p_buf = (__int128 *)buf;
      *(_DWORD *)v26 = 136446210;
      v27 = p_buf;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Device %{public}s that requires a workaround for AVDTP start disconnected", v26, 0xCu);
      if (SHIBYTE(v29) < 0)
        operator delete((void *)buf);
    }
    *(_QWORD *)&buf = _NSConcreteStackBlock;
    *((_QWORD *)&buf + 1) = 3221225472;
    v29 = sub_1003D9248;
    v30 = &unk_10092D040;
    v31 = v6;
    sub_1003D9174((os_unfair_lock_s *)(a1 + 464), &buf);
  }
  if (v6)
LABEL_14:
    sub_10048257C(a1, v6, 0);
  sub_100034234((uint64_t)v24);
  return 0;
}

void sub_1003DF504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DF52C(os_unfair_lock_s *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint8_t *v14;
  uint64_t v15;
  NSObject *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  NSObject *v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint8_t v30[8];
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  uint8_t buf[4];
  unsigned int v40;
  __int16 v41;
  uint8_t *v42;

  v29[0] = 0;
  v29[1] = 0;
  sub_10003415C((uint64_t)v29, (uint64_t)&a1[138]);
  v11 = sub_1003D9B54((uint64_t)a1, a3);
  v12 = sub_1003D8844((uint64_t)a1, a3);
  v13 = qword_1009997C8;
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT)
      && ((sub_10043E5F8(v12, v30), (v36 & 0x8000) == 0) ? (v14 = v30) : (v14 = *(uint8_t **)v30),
          *(_DWORD *)buf = 67109378,
          v40 = a5,
          v41 = 2082,
          v42 = v14,
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Endpoint discovery succeeded - found %d stream endpoint(s) for device %{public}s", buf, 0x12u), SBYTE1(v36) < 0))
    {
      operator delete(*(void **)v30);
      if (!a5)
        goto LABEL_38;
    }
    else if (!a5)
    {
      goto LABEL_38;
    }
    v27 = v12;
    v28 = v11;
    v15 = 0;
    v16 = qword_1009997C8;
    v17 = (unsigned __int8 *)(a4 + 3);
    do
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v18 = *(v17 - 3);
        v19 = *(v17 - 2);
        v20 = *(v17 - 1);
        v21 = *v17;
        *(_DWORD *)v30 = 67110144;
        *(_DWORD *)&v30[4] = v15;
        v31 = 1024;
        v32 = v18;
        v33 = 1024;
        v34 = v19;
        v35 = 1024;
        v36 = v20;
        v37 = 1024;
        v38 = v21;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Endpoint[%d]: mediaType = %d, endpointType = %d, seid = %d, inUse = %d", v30, 0x20u);
        v16 = qword_1009997C8;
      }
      ++v15;
      v17 += 4;
    }
    while (a5 != v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v30 = 67109120;
      *(_DWORD *)&v30[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Saving discovered peer endpoints for a2dp handle %d", v30, 8u);
    }
    sub_100414B04(v28 + 400, a4, a5);
    v22 = sub_10041550C(v28 + 400);
    v23 = qword_1009997C8;
    if (v22 == 255)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(v27, v30);
        sub_1006EB88C();
      }
      goto LABEL_21;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v27, v30);
      v25 = (v36 & 0x8000) == 0 ? v30 : *(uint8_t **)v30;
      *(_DWORD *)buf = 67109378;
      v40 = v22;
      v41 = 2082;
      v42 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Querying stream capabilities of endpoint %u on device %{public}s", buf, 0x12u);
      if (SBYTE1(v36) < 0)
        operator delete(*(void **)v30);
    }
    v30[0] = 0;
    sub_100043758(v30);
    if (sub_100412B9C(v28 + 400) < 0x103)
    {
      if (sub_10013D978(a3, v22, 0)
        && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      {
        sub_1006EB938();
      }
    }
    else if (sub_10013DAB4(a3, v22, 0)
           && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    {
      sub_1006EB8D8();
    }
    sub_100043728(v30);
LABEL_38:
    v24 = 0;
    goto LABEL_39;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
  {
    if (v12)
    {
      sub_10043E5F8(v12, v30);
      sub_1006EB9DC();
    }
    else
    {
      sub_1006EB998((uint64_t)buf, a6);
    }
  }
LABEL_21:
  sub_1003D95C0(a1, a3);
  v24 = 1;
LABEL_39:
  sub_100034234((uint64_t)v29);
  return v24;
}

void sub_1003DF94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DF994(os_unfair_lock_s *a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, unsigned int a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  unsigned int v17;
  int v18;
  NSObject *v19;
  int v20;
  _QWORD v22[2];
  uint8_t buf[4];
  int v24;
  __int16 v25;
  unsigned int v26;
  __int16 v27;
  unsigned int v28;

  v22[0] = 0;
  v22[1] = 0;
  sub_10003415C((uint64_t)v22, (uint64_t)&a1[138]);
  v13 = sub_1003D9B54((uint64_t)a1, a3);
  v14 = v13;
  if (a7)
  {
    v15 = qword_1009997C8;
    if (*(int *)(v13 + 728) < 3)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109632;
        v24 = a7;
        v25 = 1024;
        v26 = a4;
        v27 = 1024;
        v28 = a3;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Received get capability failure with error %d for stream endpoint ID %u on a2dp handle %d - disconnecting", buf, 0x14u);
      }
      sub_1003D95C0(a1, a3);
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109632;
      v24 = a7;
      v25 = 1024;
      v26 = a4;
      v27 = 1024;
      v28 = a3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "GetCaps rejected with error %d, but already in >= open state for stream endpoint ID %u on a2dp handle %d", buf, 0x14u);
    }
  }
  else
  {
    v16 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(_DWORD *)(v14 + 728);
      *(_DWORD *)buf = 67109632;
      v24 = a4;
      v25 = 1024;
      v26 = a3;
      v27 = 1024;
      v28 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "GetCapsCfm: Successfully retrieved capabilities for stream endpoint %u on a2dp handle %d, stream state 0x%d", buf, 0x14u);
    }
    if (*(_DWORD *)(v14 + 728) == 1)
    {
      sub_100413174(v14 + 400, a6, a5, a4);
      v18 = sub_10041550C(v14 + 400);
      if (v18 == 255)
      {
        sub_1003DB9A0(a1, a3);
      }
      else
      {
        v19 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          v24 = v18;
          v25 = 1024;
          v26 = a3;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Querying stream capabilities of endpoint %u on a2dpHandle %d", buf, 0xEu);
        }
        buf[0] = 0;
        sub_100043758(buf);
        v20 = sub_10013D978(a3, v18, 0);
        sub_10004339C(buf);
        if (v20 && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
          sub_1006EB938();
        sub_100043728(buf);
      }
    }
  }
  sub_100034234((uint64_t)v22);
  return 0;
}

void sub_1003DFC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DFCA8(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8)
{
  NSObject *v16;
  uint64_t v17;
  int v18;
  uint8_t *v19;
  int v20;
  int v21;
  int v22;
  NSObject *v23;
  void **v24;
  uint64_t v26;
  uint64_t v27;
  void *__p[2];
  char v29;
  char v30;
  _QWORD v31[2];
  uint8_t buf[4];
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  _BYTE v37[10];
  int v38;
  __int16 v39;
  int v40;

  v31[0] = 0;
  v31[1] = 0;
  sub_10003415C((uint64_t)v31, a1 + 552);
  v27 = sub_1003D9B54(a1, a3);
  v26 = sub_1003D8844(a1, a3);
  v16 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109888;
    v33 = a4;
    v34 = 1024;
    v35 = a5;
    v36 = 1024;
    *(_DWORD *)v37 = a3;
    *(_WORD *)&v37[4] = 1024;
    *(_DWORD *)&v37[6] = a6;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Received set stream configuration request for local SEID %u and remote SEID %u from a2dpHandle %d, stream handle %d", buf, 0x1Au);
  }
  v17 = sub_1004173DC(a1 + 280, a4);
  if (sub_100413540(v27 + 400, a4, a5, a6, a7, a8, v17))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EBAE4();
    buf[0] = 0;
    sub_100043758(buf);
    v18 = sub_10013FE70(a6, a2, 0, 41);
    sub_10004339C(buf);
    if (v18 && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EBA84();
    v19 = buf;
  }
  else
  {
    v30 = 0;
    sub_100043758(&v30);
    v20 = sub_10013FE70(a6, a2, 0, 0);
    sub_10004339C(&v30);
    if (v20)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        sub_1006EBA24();
    }
    else
    {
      v21 = sub_100412A80(v27 + 400);
      v22 = *(unsigned __int8 *)(v27 + 592);
      v23 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v26, __p);
        v24 = v29 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 67110146;
        v33 = a4;
        v34 = 1024;
        v35 = a5;
        v36 = 2082;
        *(_QWORD *)v37 = v24;
        *(_WORD *)&v37[8] = 1024;
        v38 = v21;
        v39 = 1024;
        v40 = v22;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Approved and configured incoming stream configuration for local SEID %d and remote SEID %d on device %{public}s, remote delay reporting %d, local delay reporting %d", buf, 0x24u);
        if (v29 < 0)
          operator delete(__p[0]);
      }
      *(_DWORD *)(v27 + 728) = 2;
    }
    v19 = (uint8_t *)&v30;
  }
  sub_100043728(v19);
  sub_100034234((uint64_t)v31);
  return 0;
}

void sub_1003DFFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_100043728(&a17);
  sub_100034234((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1003DFFF4()
{
  JUMPOUT(0x1003DFFECLL);
}

uint64_t sub_1003DFFFC(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, uint64_t a7, unsigned int a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  NSObject *v21;
  void **v22;
  uint64_t v23;
  void **v24;
  NSObject *v25;
  void **v26;
  NSObject *log;
  uint64_t v29;
  void *__p[2];
  char v32;
  _QWORD v33[2];
  uint8_t buf[4];
  _QWORD v35[2];

  v33[0] = 0;
  v33[1] = 0;
  sub_10003415C((uint64_t)v33, a1 + 552);
  v15 = sub_1003D9B54(a1, a3);
  v16 = sub_1003D8844(a1, a3);
  if (!v16)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EBB44();
    goto LABEL_14;
  }
  v17 = v15 + 400;
  v29 = a7;
  v18 = a2;
  v19 = (unsigned __int16)sub_100412814(v15 + 400);
  if (v19)
  {
    v20 = *(_DWORD *)(v15 + 728);
    if (v20 <= 6 && ((1 << v20) & 0x68) != 0)
      goto LABEL_5;
    log = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10046E9BC((unsigned __int8 *)(v16 + 128), __p);
      v24 = __p;
      if (v32 < 0)
        v24 = (void **)__p[0];
      *(_DWORD *)buf = 67109378;
      LODWORD(v35[0]) = v19;
      WORD2(v35[0]) = 2082;
      *(_QWORD *)((char *)v35 + 6) = v24;
      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "SetConfigInd, there already exists stream handle %d for device %{public}s, but accepting since we are not in streaming state", buf, 0x12u);
      if (v32 < 0)
        operator delete(__p[0]);
    }
    if (v20 == 3)
    {
LABEL_5:
      v21 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10046E9BC((unsigned __int8 *)(v16 + 128), __p);
        if (v32 >= 0)
          v22 = __p;
        else
          v22 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v35[0] = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Rejecting incoming set config from device %{public}s", buf, 0xCu);
        if (v32 < 0)
          operator delete(__p[0]);
      }
      LOBYTE(__p[0]) = 0;
      sub_100043758(__p);
      sub_10013FE70(a6, v18, 0, 19);
      sub_10004339C(__p);
      sub_100043728(__p);
LABEL_14:
      v23 = 1;
      goto LABEL_28;
    }
  }
  v25 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10046E9BC((unsigned __int8 *)(v16 + 128), __p);
    v26 = v32 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    LODWORD(v35[0]) = a6;
    WORD2(v35[0]) = 2082;
    *(_QWORD *)((char *)v35 + 6) = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "SetConfigInd setting a2dp stream handle to %d for device %{public}s", buf, 0x12u);
    if (v32 < 0)
      operator delete(__p[0]);
  }
  sub_100412864(v17, a6);
  sub_1003DFCA8(a1, v18, a3, a4, a5, a6, v29, a8);
  v23 = 0;
LABEL_28:
  sub_100034234((uint64_t)v33);
  return v23;
}

void sub_1003E032C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E0370(os_unfair_lock_s *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  unsigned int v8;
  uint64_t v9;
  NSObject *v10;
  void **v11;
  uint64_t v12;
  NSObject *v13;
  _BOOL4 v14;
  void **v15;
  int v16;
  _QWORD v18[2];
  void *__p[2];
  char v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, (uint64_t)&a1[138]);
  v8 = sub_1003D9D54((uint64_t)a1, a3);
  v9 = sub_1003D8844((uint64_t)a1, v8);
  v10 = qword_1009997C8;
  if (a5)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    {
      if (v9)
      {
        sub_10043E5F8(v9, __p);
        sub_1006EBC14();
      }
      else
      {
        sub_1006EBBD0((uint64_t)buf, a5);
      }
    }
    sub_1003D95C0(a1, v8);
LABEL_14:
    v12 = 1;
    goto LABEL_31;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    if (v9)
    {
      sub_10043E5F8(v9, __p);
      if (v20 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v22 = (const char *)v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received set stream configuration success from device %{public}s", buf, 0xCu);
      if (v20 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)buf = 136446210;
      v22 = "null";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received set stream configuration success from device %{public}s", buf, 0xCu);
    }
  }
  v13 = qword_1009997C8;
  v14 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT);
  if (!v8)
  {
    if (v14)
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = a3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Set stream configuration returned an unknown stream handle %d, stream handle was likely reconfigured. Not moving to open AVDTP", (uint8_t *)__p, 8u);
    }
    goto LABEL_14;
  }
  if (v14)
  {
    if (v9)
    {
      sub_10043E5F8(v9, __p);
      if (v20 >= 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v22 = (const char *)v15;
      v23 = 1024;
      v24 = a3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Attempting to open streaming channel to device %{public}s on handle %d", buf, 0x12u);
      if (v20 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)buf = 136446466;
      v22 = "null";
      v23 = 1024;
      v24 = a3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Attempting to open streaming channel to device %{public}s on handle %d", buf, 0x12u);
    }
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v16 = sub_10013E27C(a3, 0);
  sub_10004339C(__p);
  if (v16 && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    sub_1006EBB70();
  sub_100043728(__p);
  v12 = 0;
LABEL_31:
  sub_100034234((uint64_t)v18);
  return v12;
}

void sub_1003E06A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E06E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v9;
  uint64_t v10;
  NSObject *v11;
  void **v12;
  uint64_t v13;
  NSObject *v14;
  void **v15;
  int v16;
  void *__p[2];
  char v19;
  _QWORD v20[2];
  uint8_t buf[4];
  const char *v22;

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 552);
  v9 = sub_1003D9D54(a1, a3);
  v10 = sub_1003D8844(a1, v9);
  v11 = qword_1009997C8;
  if (a6)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    {
      if (v10)
      {
        sub_10043E5F8(v10, __p);
        sub_1006EBCA0();
      }
      else
      {
        sub_1006EBC5C((uint64_t)buf, a6);
      }
    }
    sub_1003D95C0((os_unfair_lock_s *)a1, v9);
    v13 = 1;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      if (v10)
      {
        sub_10043E5F8(v10, __p);
        if (v19 >= 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v22 = (const char *)v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received get stream configuration success from device %{public}s", buf, 0xCu);
        if (v19 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_DWORD *)buf = 136446210;
        v22 = "null";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received get stream configuration success from device %{public}s", buf, 0xCu);
      }
    }
    if (*(_BYTE *)(a1 + 616))
    {
      v14 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        if (v10)
        {
          sub_10043E5F8(v10, __p);
          if (v19 >= 0)
            v15 = __p;
          else
            v15 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v22 = (const char *)v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Attempting to open streaming channel to device %{public}s", buf, 0xCu);
          if (v19 < 0)
            operator delete(__p[0]);
        }
        else
        {
          *(_DWORD *)buf = 136446210;
          v22 = "null";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Attempting to open streaming channel to device %{public}s", buf, 0xCu);
        }
      }
      LOBYTE(__p[0]) = 0;
      sub_100043758(__p);
      v16 = sub_10013E27C(a3, 0);
      sub_10004339C(__p);
      if (v16 && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        sub_1006EBB70();
      sub_100043728(__p);
    }
    v13 = 0;
  }
  sub_100034234((uint64_t)v20);
  return v13;
}

void sub_1003E09C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E0A08(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void **v10;
  int v11;
  void *__p[2];
  char v14;
  _QWORD v15[2];
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 552);
  v6 = sub_1003D9D54(a1, a3);
  v7 = sub_1003D9B54(a1, v6);
  v8 = sub_1003D8844(a1, v6);
  v9 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    if (v8)
    {
      sub_10043E5F8(v8, __p);
      if (v14 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v17 = (const char *)v10;
      v18 = 1024;
      v19 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received open streaming channel request from device %{public}s on stream handle %d", buf, 0x12u);
      if (v14 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)buf = 136446466;
      v17 = "null";
      v18 = 1024;
      v19 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received open streaming channel request from device %{public}s on stream handle %d", buf, 0x12u);
    }
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v11 = sub_10013E454(a2, a3, 0);
  sub_10004339C(__p);
  if (v11 && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    sub_1006EBCE8();
  *(_DWORD *)(v7 + 728) = 3;
  sub_100043728(__p);
  sub_100034234((uint64_t)v15);
  return 0;
}

void sub_1003E0BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E0C38(os_unfair_lock_s *a1, uint64_t a2, int a3, int a4, int a5)
{
  unsigned int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  char v16;
  NSObject *v17;
  const char *v18;
  int v19;
  uint64_t v20;
  _QWORD v22[2];
  _BYTE __p[12];
  char v24;
  uint8_t buf[4];
  _BYTE *v26;
  __int16 v27;
  int v28;

  v22[0] = 0;
  v22[1] = 0;
  sub_10003415C((uint64_t)v22, (uint64_t)&a1[138]);
  v9 = sub_1003D9D54((uint64_t)a1, a3);
  v10 = (unsigned __int8 *)sub_1003D8844((uint64_t)a1, v9);
  v11 = sub_1003D9B54((uint64_t)a1, v9);
  v12 = qword_1009997C8;
  if (a5 || !v10)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    {
      if (v10)
      {
        sub_10043E5F8((uint64_t)v10, __p);
        sub_1006EBD94();
      }
      else
      {
        sub_1006EBDDC((uint64_t)buf, a5);
      }
    }
    goto LABEL_32;
  }
  v13 = v11;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8((uint64_t)v10, __p);
    v14 = v24 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136446466;
    v26 = v14;
    v27 = 1024;
    v28 = a3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Successfully opened streaming channel to device %{public}s on stream handle %d", buf, 0x12u);
    if (v24 < 0)
      operator delete(*(void **)__p);
  }
  if (*(_DWORD *)(v13 + 728) == 7)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8((uint64_t)v10, __p);
      sub_1006EBD48();
    }
LABEL_32:
    sub_1003D95C0(a1, v9);
    goto LABEL_33;
  }
  *(_DWORD *)(v13 + 728) = 3;
  if (sub_100442118((uint64_t)v10, 13)
    && (v15 = sub_10003BE44(), (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 792))(v15, 0))
    && sub_100412EDC(v13 + 400) == 33023)
  {
    v16 = 1;
    *(_BYTE *)(v13 + 704) = 1;
    *(_BYTE *)(v13 + 706) = 0;
  }
  else
  {
    v16 = 0;
  }
  v17 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(v13 + 704))
      v18 = "supported";
    else
      v18 = "not supported";
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Dynamic Latency is %s", __p, 0xCu);
  }
  if (*(_BYTE *)(v13 + 704))
  {
    v19 = sub_100415628(v13 + 400);
    sub_1005D98B8(v13, v19);
  }
  if ((v16 & 1) != 0
    || (v20 = sub_100027F68(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 528))(v20) & 1) == 0))
  {
    *(_BYTE *)(v13 + 712) = 1;
  }
  sub_1003E0F84(a1, (uint64_t)v10);
  sub_1003DBE28((uint64_t)a1, 0, v9, a4, v10);
LABEL_33:
  sub_100034234((uint64_t)v22);
  return 0;
}

void sub_1003E0F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1003E0F84(os_unfair_lock_s *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  _BYTE *v19;
  int v20;
  _BYTE *v21;
  const char *v22;
  int v23;
  const char *v24;
  void **v25;
  void *v26;
  NSObject *v27;
  const char *v28;
  std::string *p_buf;
  std::string v30;
  void *v31[2];
  char v32;
  char v33;
  std::string buf;
  void **v35;
  __int16 v36;
  const char *v37;
  _BYTE __p[12];
  __int16 v39;
  std::string *v40;
  char v41;

  v4 = sub_1003D9424(a1, a2);
  v5 = sub_1003D9B54((uint64_t)a1, v4);
  if (a2 && (v6 = v5) != 0)
  {
    v33 = 0;
    v7 = sub_100027F68();
    sub_100091AE8(&buf, "A2DP");
    sub_100091AE8(__p, "WirelessSplitter");
    (*(void (**)(uint64_t, std::string *, _BYTE *, char *))(*(_QWORD *)v7 + 72))(v7, &buf, __p, &v33);
    if (v41 < 0)
      operator delete(*(void **)__p);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (v33)
    {
      v8 = sub_100442118(a2, 12);
      v33 = v8;
      if (v8)
      {
        v9 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Wireless Splitter is enabled via defaults writes", (uint8_t *)&buf, 2u);
        }
      }
    }
    v10 = sub_100442118(a2, 27);
    if (v33)
      v11 = 1;
    else
      v11 = v10;
    if (v11 == 1)
    {
      v12 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 472))(v12))
      {
        *(_BYTE *)(v6 + 722) = 1;
        v13 = sub_1005D9068(v6);
        v14 = sub_1003D9E5C(a1, v13);
        if (v14)
        {
          v15 = sub_1003D8844((uint64_t)a1, v14);
          v16 = sub_1003D9B54((uint64_t)a1, v14);
          if (v16 && v15)
          {
            if (v33 || *(_BYTE *)(a2 + 952) || *(_BYTE *)(v15 + 952) || *(_BYTE *)(a2 + 977))
            {
              v17 = qword_1009997C8;
              if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
              {
                sub_10043E5F8(a2, __p);
                v18 = v41;
                v19 = *(_BYTE **)__p;
                v20 = *(unsigned __int8 *)(a2 + 952);
                sub_10043E5F8(v15, v31);
                v21 = __p;
                if (v18 < 0)
                  v21 = v19;
                v22 = "guest";
                v23 = *(unsigned __int8 *)(v15 + 952);
                if (v20)
                  v24 = "guest";
                else
                  v24 = "owner";
                LODWORD(buf.__r_.__value_.__l.__data_) = 136446978;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
                if (v32 >= 0)
                  v25 = v31;
                else
                  v25 = (void **)v31[0];
                WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
                if (!v23)
                  v22 = "owner";
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v24;
                HIWORD(buf.__r_.__value_.__r.__words[2]) = 2082;
                v35 = v25;
                v36 = 2082;
                v37 = v22;
                _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Wireless Splitter is enabled on device %{public}s which is %{public}s and device %{public}s which is %{public}s", (uint8_t *)&buf, 0x2Au);
                if (v32 < 0)
                  operator delete(v31[0]);
                if (v41 < 0)
                  operator delete(*(void **)__p);
              }
              sub_1002D5460(v16, 1);
              sub_1002D5460(v6, 1);
              (*(void (**)(os_unfair_lock_s *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)&a1->_os_unfair_lock_opaque
                                                                                   + 192))(a1, v6, 1, 0);
              (*(void (**)(os_unfair_lock_s *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)&a1->_os_unfair_lock_opaque
                                                                                   + 192))(a1, v16, 1, 0);
              sub_1003D90BC(a1, v6, 1);
              sub_1003D90BC(a1, v16, 1);
            }
          }
          else
          {
            memset(&buf, 0, sizeof(buf));
            v26 = sub_100091AE8(&buf, "WS_ERROR_START_FAILED_TO_FIND_LAST_CONNECTED");
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              v26 = sub_10003430C(&v30, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
            else
              v30 = buf;
            sub_1003EA368((uint64_t)v26, &v30);
            if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v30.__r_.__value_.__l.__data_);
            if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
              sub_1006EBE20();
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    v27 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(v6 + 722))
        v28 = "supported";
      else
        v28 = "not supported";
      sub_10043E5F8(a2, &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      *(_DWORD *)__p = 136446466;
      *(_QWORD *)&__p[4] = v28;
      v39 = 2082;
      v40 = p_buf;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Wireless Splitter is %{public}s on device %{public}s", __p, 0x16u);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
  {
    sub_1006EBE4C();
  }
}

void sub_1003E1440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003E14A8(uint64_t a1, unsigned int a2, __int16 a3, const void *a4, unsigned int a5)
{
  int v9;
  char v11;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 552);
  v11 = 0;
  sub_100043758(&v11);
  v9 = sub_1001402C8(a3, a2, a4, a5, 0);
  sub_10004339C(&v11);
  if (v9 && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    sub_1006EBE78();
  sub_100043728(&v11);
  sub_100034234((uint64_t)v12);
  return 0;
}

void sub_1003E1564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E1588(uint64_t a1, uint64_t a2, __int16 a3)
{
  int v4;
  char v6;
  _QWORD v7[2];
  __int16 v8;

  v8 = a3;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 552);
  if (*(_BYTE *)(a1 + 616))
  {
    v6 = 0;
    sub_100043758(&v6);
    v4 = sub_10013E5AC(&v8, 1u, 0);
    sub_10004339C(&v6);
    if (v4 && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EB22C();
    sub_100043728(&v6);
  }
  sub_100034234((uint64_t)v7);
  return 0;
}

void sub_1003E1634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E1658(uint64_t a1, unsigned int a2, __int16 *a3, unsigned int a4)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  _BOOL8 v13;
  void **v14;
  NSObject *v15;
  void **v16;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD v23[5];
  __int16 v24;
  _QWORD v25[2];
  void *__p[2];
  uint64_t (*v27)(uint64_t, uint64_t);
  void *v28;
  uint64_t v29;
  uint8_t buf[4];
  void **v31;

  v25[0] = 0;
  v25[1] = 0;
  sub_10003415C((uint64_t)v25, a1 + 552);
  if (a3)
  {
    v8 = (unsigned __int16)*a3;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EBF38();
    v8 = 0;
  }
  v9 = sub_1003D9D54(a1, v8);
  v10 = sub_1003D9B54(a1, v9);
  v11 = sub_1003D8844(a1, v9);
  if (v11)
  {
    v12 = qword_1009997C8;
    v13 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT);
    if (v13)
    {
      sub_10043E5F8(v11, __p);
      v14 = SHIBYTE(v27) >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v31 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received start streaming command from device %{public}s", buf, 0xCu);
      if (SHIBYTE(v27) < 0)
        operator delete(__p[0]);
    }
    if (sub_1003DF068(v13, v11))
    {
      v15 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v11, __p);
        v16 = SHIBYTE(v27) >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v31 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "StartInd, forwarding play command to RemoteClient for device %{public}s", buf, 0xCu);
        if (SHIBYTE(v27) < 0)
          operator delete(__p[0]);
      }
      __p[0] = _NSConcreteStackBlock;
      __p[1] = (void *)3221225472;
      v27 = sub_1003D9260;
      v28 = &unk_10092D040;
      v29 = v11;
      sub_1003D9174((os_unfair_lock_s *)(a1 + 464), __p);
    }
    LOBYTE(__p[0]) = 0;
    sub_100043758(__p);
    if (!atomic_load((unint64_t *)(a1 + 752)))
    {
      v20 = sub_1001929C8((uint64_t (*)())sub_1003DBD9C, v11 + 128);
      atomic_store(mach_absolute_time(), (unint64_t *)(a1 + 744));
      if (v20)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
          sub_1006EB28C();
      }
    }
    sub_100187584(v11 + 128);
    v18 = sub_10013E830(a2, a3, a4, 0, 0);
    sub_10004339C(__p);
    if (v18)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        sub_1006EBED8();
    }
    else
    {
      *(_DWORD *)(v10 + 728) = 5;
      if ((sub_1005D9850(v10) & 1) == 0)
      {
        v21 = sub_1004759E0();
        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472;
        v23[2] = sub_1003E19FC;
        v23[3] = &unk_100920960;
        v23[4] = a1;
        v24 = v9;
        sub_100475CEC(v21, 12000, v23);
      }
    }
    sub_100043728(__p);
    v19 = 0;
  }
  else
  {
    v19 = 1;
  }
  sub_100034234((uint64_t)v25);
  return v19;
}

void sub_1003E19B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E19FC(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;

  result = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(result + 536);
  if (v3)
  {
    v4 = *(unsigned __int16 *)(a1 + 40);
    v5 = result + 536;
    do
    {
      v6 = *(unsigned __int16 *)(v3 + 32);
      v7 = v6 >= v4;
      if (v6 >= v4)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 != result + 536 && *(unsigned __int16 *)(v5 + 32) <= v4)
      return sub_1003DB2D8(result, v4);
  }
  return result;
}

uint64_t sub_1003E1A50(os_unfair_lock_s *a1, uint64_t a2, unsigned __int16 *a3, int a4, uint64_t a5, int a6)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void **v14;
  uint64_t v15;
  NSObject *v16;
  void **v17;
  void *__p[2];
  char v20;
  _QWORD v21[2];
  uint8_t buf[4];
  void **v23;

  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, (uint64_t)&a1[138]);
  if (a3 && a4)
  {
    v10 = sub_1003D9D54((uint64_t)a1, *a3);
    v11 = sub_1003D9B54((uint64_t)a1, v10);
    v12 = sub_1003D8844((uint64_t)a1, v10);
    if (v12)
    {
      v13 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT)
        && ((sub_10043E5F8(v12, __p), v20 >= 0) ? (v14 = __p) : (v14 = (void **)__p[0]),
            *(_DWORD *)buf = 136446210,
            v23 = v14,
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Received confirm from %{public}s to start streaming", buf, 0xCu), v20 < 0))
      {
        operator delete(__p[0]);
        if (a6)
        {
LABEL_10:
          if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
          {
            sub_10043E5F8(v12, __p);
            sub_1006EBF64();
          }
          sub_1004827CC();
        }
      }
      else if (a6)
      {
        goto LABEL_10;
      }
      if (*(_DWORD *)(v11 + 728) == 5)
      {
        v16 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(v12, __p);
          v17 = v20 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v23 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Device %{public}s was already in streaming state", buf, 0xCu);
          if (v20 < 0)
            operator delete(__p[0]);
        }
      }
      *(_DWORD *)(v11 + 728) = 5;
      sub_1003DA274(a1, v10);
      v15 = 0;
    }
    else
    {
      v15 = 1;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EBFAC();
    v15 = 7;
  }
  sub_100034234((uint64_t)v21);
  return v15;
}

void sub_1003E1DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E1E1C(uint64_t a1, unsigned int a2, __int16 *a3, unsigned int a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void **v12;
  uint64_t v13;
  NSObject *v14;
  void *__p[2];
  char v17;
  _QWORD v18[2];
  uint8_t buf[4];
  const char *v20;

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 552);
  if (a3 && a4)
  {
    v8 = sub_1003D9D54(a1, (unsigned __int16)*a3);
    v9 = sub_1003D8844(a1, v8);
    v10 = sub_1003D9B54(a1, v8);
    v11 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      if (v9)
      {
        sub_10043E5F8(v9, __p);
        if (v17 >= 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v20 = (const char *)v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received suspend streaming request from device %{public}s", buf, 0xCu);
        if (v17 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_DWORD *)buf = 136446210;
        v20 = "null";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received suspend streaming request from device %{public}s", buf, 0xCu);
      }
    }
    if (!sub_1003DA810(a1, v8) || *(_DWORD *)(v10 + 728) != 3)
    {
      *(_DWORD *)(v10 + 728) = 3;
      LOBYTE(__p[0]) = 0;
      sub_100043758(__p);
      sub_10013F668(a2, a3, a4, 0, 0);
      sub_10004339C(__p);
      sub_100043728(__p);
      goto LABEL_19;
    }
    v14 = qword_1009997C8;
    v13 = 0;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "streaming already suspended, racing transaction", (uint8_t *)__p, 2u);
LABEL_19:
      v13 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EBF38();
    v13 = 7;
  }
  sub_100034234((uint64_t)v18);
  return v13;
}

void sub_1003E207C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E20BC(os_unfair_lock_s *a1, uint64_t a2, unsigned __int16 *a3, int a4, uint64_t a5, int a6)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  void **v21;
  NSObject *v22;
  NSObject *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  void *__p[2];
  char v29;
  _QWORD v30[2];
  uint8_t buf[4];
  _QWORD v32[2];

  v30[0] = 0;
  v30[1] = 0;
  sub_10003415C((uint64_t)v30, (uint64_t)&a1[138]);
  if (a3 && a4)
  {
    v10 = sub_1003D9D54((uint64_t)a1, *a3);
    v11 = sub_1003D9B54((uint64_t)a1, v10);
    v12 = sub_1003D8844((uint64_t)a1, v10);
    v13 = v12;
    if (!a6)
    {
      v18 = *(unsigned __int16 *)(v12 + 132);
      v19 = *(unsigned int *)(v12 + 128);
      v20 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v13, __p);
        v21 = v29 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v32[0] = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Successfully suspended stream to device %{public}s", buf, 0xCu);
        if (v29 < 0)
          operator delete(__p[0]);
      }
      *(_DWORD *)(v11 + 728) = 3;
      if (*(_DWORD *)(v11 + 732) != 1)
        goto LABEL_35;
      *(_DWORD *)(v11 + 732) = 0;
      v22 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Checking if HAL still thinks we are streaming, if so, start up A2DP stream if not done so already", (uint8_t *)__p, 2u);
      }
      if (!sub_1005D9850(v11))
      {
LABEL_35:
        v25 = sub_1000438A4();
        v26 = sub_10043F854(v13);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v25 + 80))(v25, (v19 | (v18 << 32)) & 0xFFFFFFFFFFFFLL, v26, 2, 0, 1, 1, 0);
        v16 = 0;
        goto LABEL_36;
      }
      v23 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v13, __p);
        v24 = v29 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v32[0] = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Pending start stream, connecting media stream for %{public}s", buf, 0xCu);
        if (v29 < 0)
          operator delete(__p[0]);
      }
      sub_1003DB624((uint64_t)a1, v10);
      goto LABEL_34;
    }
    v14 = *(_DWORD *)(v11 + 728);
    v15 = qword_1009997C8;
    if (v14 != 3)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(v13, __p);
        sub_1006EC010();
      }
      sub_1003D95C0(a1, v10);
      goto LABEL_34;
    }
    v16 = 0;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v13, __p);
      if (v29 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      *(_DWORD *)buf = 67109378;
      LODWORD(v32[0]) = a6;
      WORD2(v32[0]) = 2082;
      *(_QWORD *)((char *)v32 + 6) = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Stream is already in open state, ignoring with suspend error %u on device %{public}s", buf, 0x12u);
      if (v29 < 0)
        operator delete(__p[0]);
LABEL_34:
      v16 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EBF38();
    v16 = 7;
  }
LABEL_36:
  sub_100034234((uint64_t)v30);
  return v16;
}

void sub_1003E2450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E248C(os_unfair_lock_s *a1, uint64_t a2, unsigned __int16 *a3, int a4, uint64_t a5, int a6)
{
  unsigned int v10;
  uint64_t v11;
  NSObject *v12;
  void **v13;
  uint64_t v14;
  void *__p[2];
  char v17;
  _QWORD v18[2];
  uint8_t buf[4];
  const char *v20;

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, (uint64_t)&a1[138]);
  if (a4)
  {
    v10 = sub_1003D9D54((uint64_t)a1, *a3);
    v11 = sub_1003D8844((uint64_t)a1, v10);
    v12 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      if (v11)
      {
        sub_10043E5F8(v11, __p);
        if (v17 >= 0)
          v13 = __p;
        else
          v13 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v20 = (const char *)v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received transition confirm from device %{public}s", buf, 0xCu);
        if (v17 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_DWORD *)buf = 136446210;
        v20 = "null";
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received transition confirm from device %{public}s", buf, 0xCu);
      }
    }
    v14 = sub_1003E20BC(a1, 0, a3, a4, 0, a6);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EC058();
    v14 = 7;
  }
  sub_100034234((uint64_t)v18);
  return v14;
}

void sub_1003E264C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E2670(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  void **v9;
  int v10;
  void *__p[2];
  char v13;
  _QWORD v14[2];
  uint8_t buf[4];
  const char *v16;

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 552);
  v6 = sub_1003D9D54(a1, a3);
  v7 = sub_1003D8844(a1, v6);
  v8 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    if (v7)
    {
      sub_10043E5F8(v7, __p);
      if (v13 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v16 = (const char *)v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received reconfigure stream request from device %{public}s", buf, 0xCu);
      if (v13 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)buf = 136446210;
      v16 = "null";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received reconfigure stream request from device %{public}s", buf, 0xCu);
    }
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v10 = sub_100140188(a3, a2, 1, 25);
  sub_10004339C(__p);
  if (v10 && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    sub_1006EC084();
  sub_100043728(__p);
  sub_100034234((uint64_t)v14);
  return 0;
}

void sub_1003E282C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E2864(uint64_t a1, uint64_t a2, __int16 a3)
{
  int v4;
  char v6;
  _QWORD v7[2];
  __int16 v8;

  v8 = a3;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 552);
  if (*(_BYTE *)(a1 + 616))
  {
    v6 = 0;
    sub_100043758(&v6);
    v4 = sub_10013E5AC(&v8, 1u, 0);
    sub_10004339C(&v6);
    if (v4 && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EB22C();
    sub_100043728(&v6);
  }
  sub_100034234((uint64_t)v7);
  return 0;
}

void sub_1003E2910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E2934(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void **v10;
  void *__p[2];
  char v13;
  _QWORD v14[2];
  uint8_t buf[4];
  const char *v16;

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 552);
  v6 = sub_1003D9D54(a1, a3);
  v7 = sub_1003D9B54(a1, v6);
  v8 = sub_1003D8844(a1, v6);
  v9 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    if (v8)
    {
      sub_10043E5F8(v8, __p);
      if (v13 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v16 = (const char *)v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received close stream request from device %{public}s", buf, 0xCu);
      if (v13 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)buf = 136446210;
      v16 = "null";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received close stream request from device %{public}s", buf, 0xCu);
    }
  }
  sub_1003DA810(a1, v6);
  *(_QWORD *)(v7 + 728) = 0;
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  sub_10013EC3C(a2, a3, 0);
  sub_10004339C(__p);
  sub_100043728(__p);
  sub_100034234((uint64_t)v14);
  return 0;
}

void sub_1003E2AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E2B2C(uint64_t a1)
{
  NSObject *v1;
  uint8_t v3[16];
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 552);
  v1 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Successfully closed stream", v3, 2u);
  }
  sub_100034234((uint64_t)v4);
  return 0;
}

uint64_t sub_1003E2BAC(os_unfair_lock_s *a1, unsigned int a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void **v10;
  uint64_t v11;
  void *__p[2];
  char v14;
  _QWORD v15[2];
  uint8_t buf[4];
  void **v17;

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, (uint64_t)&a1[138]);
  v6 = sub_1003D9D54((uint64_t)a1, a3);
  v7 = sub_1003D9B54((uint64_t)a1, v6);
  v8 = sub_1003D8844((uint64_t)a1, v6);
  v9 = qword_1009997C8;
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v8, __p);
      if (v14 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received abort stream request from device %{public}s", buf, 0xCu);
      if (v14 < 0)
        operator delete(__p[0]);
    }
    *(_DWORD *)(v7 + 728) = 7;
    LOBYTE(__p[0]) = 0;
    sub_100043758(__p);
    sub_10013ED8C(a2, a3);
    sub_10004339C(__p);
    sub_1003DA810((uint64_t)a1, v6);
    sub_1003D95C0(a1, v6);
    sub_100043728(__p);
    v11 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EC0E4();
    v11 = 1;
  }
  sub_100034234((uint64_t)v15);
  return v11;
}

void sub_1003E2D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E2D90(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD v9[2];
  uint8_t buf[4];
  int v11;

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 552);
  v5 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Stream aborted on handle %d.", buf, 8u);
  }
  v6 = sub_1003D9D54(a1, a3);
  v7 = sub_1003D9B54(a1, v6);
  if (v7)
  {
    sub_1003DA810(a1, v6);
    *(_DWORD *)(v7 + 728) = 0;
  }
  sub_100034234((uint64_t)v9);
  return 0;
}

void sub_1003E2E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E2EAC(os_unfair_lock_s *a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, unsigned int a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  void *__p[2];
  char v23;
  _QWORD v24[2];
  uint8_t buf[8];
  __int16 v26;
  unsigned int v27;
  __int16 v28;
  unsigned int v29;
  char v30;

  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, (uint64_t)&a1[138]);
  v13 = sub_1003D9B54((uint64_t)a1, a3);
  v14 = v13;
  if (a7)
  {
    v15 = qword_1009997C8;
    if (*(int *)(v13 + 728) < 3)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = a7;
        v26 = 1024;
        v27 = a4;
        v28 = 1024;
        v29 = a3;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Received get all capability failure with error %d for stream endpoint ID %u on a2dp handle %d - disconnecting", buf, 0x14u);
      }
      sub_1003D95C0(a1, a3);
      if (qword_10097AA70 != -1)
        dispatch_once(&qword_10097AA70, &stru_10092D6D8);
      v18 = qword_10097AA68;
      sub_100091AE8(buf, "A2DPClient::GetAllCapsCfm");
      sub_100091AE8(__p, "A2DP Get All Capabilities Error");
      sub_10047C59C(0.0, v18, (uint64_t *)buf, (uint64_t *)__p);
      if (v23 < 0)
        operator delete(__p[0]);
      if (v30 < 0)
        operator delete(*(void **)buf);
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = a7;
      v26 = 1024;
      v27 = a4;
      v28 = 1024;
      v29 = a3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "GetAllCaps rejected with error %d, but already in >= open state for stream endpoint ID %u on a2dp handle %d", buf, 0x14u);
    }
  }
  else
  {
    v16 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = a4;
      v26 = 1024;
      v27 = a3;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "GetAllCapsCfm: Successfully retrieved capabilities for stream endpoint %u on a2dp handle %d", buf, 0xEu);
    }
    sub_100413174(v14 + 400, a6, a5, a4);
    v17 = sub_10041550C(v14 + 400);
    if (v17 == 255)
    {
      sub_1003DB9A0(a1, a3);
    }
    else
    {
      v19 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v17;
        v26 = 1024;
        v27 = a3;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Querying stream capabilities of endpoint %u on a2dp handle %d", buf, 0xEu);
      }
      buf[0] = 0;
      sub_100043758(buf);
      v20 = sub_10013DAB4(a3, v17, 0);
      sub_10004339C(buf);
      if (v20 && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        sub_1006EB938();
      sub_100043728(buf);
    }
  }
  sub_100034234((uint64_t)v24);
  return 0;
}

void sub_1003E31F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E3260(uint64_t a1, int a2, unsigned int a3, int a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  void **v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  char v19;
  _QWORD v20[2];
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 552);
  v8 = sub_1003D9D54(a1, a2);
  v9 = sub_1003D8844(a1, v8);
  v10 = sub_1003D9B54(a1, v8);
  if (v10)
  {
    v11 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 720))(v11))
      v12 = 5000;
    else
      v12 = a4;
    v13 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      if (v9)
      {
        sub_10043E5F8(v9, __p);
        if (v19 >= 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        *(_DWORD *)buf = 136446466;
        v22 = (const char *)v14;
        v23 = 1024;
        v24 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Received delay report stream request from device %{public}s, delay in 1/10th of milliseconds %d", buf, 0x12u);
        if (v19 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_DWORD *)buf = 136446466;
        v22 = "null";
        v23 = 1024;
        v24 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Received delay report stream request from device %{public}s, delay in 1/10th of milliseconds %d", buf, 0x12u);
      }
    }
    if (*(_DWORD *)(v10 + 728) == 5 && *(_BYTE *)(v10 + 705))
    {
      dispatch_block_cancel(*(dispatch_block_t *)(a1 + 496));
      sub_1005D98B8(v10, 100 * v12);
      sub_1003E3540((os_unfair_lock_s *)a1, v10, v9);
      sub_1003E3920(a1, v10, (52429 * v12) >> 19);
    }
    else
    {
      sub_100415890(v10 + 400, 100 * v12);
      v16 = sub_100415628(v10 + 400);
      sub_1002D4D3C(v10, v16);
    }
    LOBYTE(__p[0]) = 0;
    sub_100043758(__p);
    sub_10014035C(a2, a3, 1, 0);
    sub_10004339C(__p);
    sub_100043728(__p);
    v15 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EC110();
    v15 = 1;
  }
  sub_100034234((uint64_t)v20);
  return v15;
}

void sub_1003E3500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003E3540(os_unfair_lock_s *a1, uint64_t a2, unint64_t a3)
{
  NSObject *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  int v22;
  unsigned int v23;

  v6 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int16 *)(a2 + 708);
    v22 = 67109120;
    v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Current Dynamic latency JBL: %d", (uint8_t *)&v22, 8u);
  }
  v8 = *(unsigned __int16 *)(a2 + 708);
  if (v8 > 0x77)
  {
    if (*(unsigned __int16 *)(a2 + 708) > 0x95u)
    {
      if (v8 == 150)
      {
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_10092D658);
        if (sub_10051FF08((uint64_t)off_100977A90, 1))
        {
          if (qword_100977A98 != -1)
            dispatch_once(&qword_100977A98, &stru_10092D658);
          if (sub_10051C8EC((uint64_t)off_100977A90, a3))
          {
            v11 = qword_1009997C8;
            if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v22) = 0;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Adaptive Latency prevent disable LLM, set flush to 200ms", (uint8_t *)&v22, 2u);
            }
            LOBYTE(v22) = 0;
            sub_100043758(&v22);
            v12 = sub_1001829DC(a3 + 128);
            sub_10004339C(&v22);
            if (v12 && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
              sub_1006EC1FC();
            goto LABEL_44;
          }
        }
        v9 = 0;
        v8 = 200;
      }
      else
      {
        if (v8 != 300)
          goto LABEL_30;
        v9 = 0;
      }
      v10 = 1;
      goto LABEL_35;
    }
    if (v8 == 120 || v8 == 140)
      goto LABEL_14;
  }
  else
  {
    if (*(unsigned __int16 *)(a2 + 708) <= 0x4Fu)
    {
      if (v8 == 30)
      {
        v8 = 60;
        v9 = 1;
        v10 = 3;
        goto LABEL_35;
      }
      if (v8 != 60)
        goto LABEL_30;
LABEL_14:
      v9 = 1;
      v10 = 2;
LABEL_35:
      sub_1005D98A8(a2, v10);
      sub_1003DAD8C((uint64_t)a1, *(unsigned __int16 *)(a2 + 600), v9);
      v13 = v9 ^ 1;
      if (*(_DWORD *)(a2 + 728) == 5)
        v13 = 1;
      if ((v13 & 1) == 0)
      {
        v14 = sub_1000438A4();
        v15 = *(unsigned __int16 *)(a3 + 132);
        v16 = *(unsigned int *)(a3 + 128);
        v17 = sub_10043F854(a3);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v14 + 80))(v14, (v16 | (v15 << 32)) & 0xFFFFFFFFFFFFLL, v17, 2, 1, 1, 1, 0);
        v18 = sub_1000438A4();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 960))(v18, 1, 1);
      }
      v19 = sub_1000438A4();
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v19 + 104))(v19, a3, v9);
      v20 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        v22 = 67109120;
        v23 = v8;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Dynamic Latency settting flush timeout to %d ms", (uint8_t *)&v22, 8u);
      }
      LOBYTE(v22) = 0;
      sub_100043758(&v22);
      v21 = sub_1001829DC(a3 + 128);
      sub_10004339C(&v22);
      if (v21 && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        sub_1006EC19C();
LABEL_44:
      sub_100043728(&v22);
      return;
    }
    if (v8 == 80 || v8 == 100)
      goto LABEL_14;
  }
LABEL_30:
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    sub_1006EC170();
  *(_BYTE *)(a2 + 705) = 0;
  sub_1003D8AAC(a1, a2, 0);
}

void sub_1003E3900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_100043728(&a9);
  _Unwind_Resume(a1);
}

void sub_1003E3920(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned __int16 v10;
  NSObject *v11;
  const char *v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;

  v6 = *(unsigned __int16 *)(a2 + 708);
  v7 = (int)fabs((double)(int)(a3 - v6));
  if (a3 >= v6)
    v8 = 1;
  else
    v8 = 2;
  if (v7 <= 0xA || v6 == 150)
    v10 = v7;
  else
    v10 = v7 - 10;
  v11 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v12 = "Down";
    if (v6 > a3)
      v12 = "Up";
    v13 = 136315394;
    v14 = v12;
    v15 = 1024;
    v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Dynamic Latency: Request JBL  %s by %dMsec", (uint8_t *)&v13, 0x12u);
  }
  if (v10)
    sub_1003DAEE0(a1, a2, v8, v10);
  else
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 224))(a1, a2, 1);
}

uint64_t sub_1003E3A6C(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int a5, unint64_t a6)
{
  float v12;
  unint64_t v13;
  NSObject *v14;
  int v15;
  _QWORD v16[2];
  uint8_t buf[4];
  int v18;
  __int16 v19;
  unsigned int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 552);
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EC25C();
  }
  else
  {
    atomic_store(0, (unint64_t *)(a1 + 760));
    v12 = (float)a4 * 312.5;
    v13 = atomic_load((unint64_t *)(a1 + 744));
    atomic_store((unint64_t)v12 + (a6 - v13) * *(unsigned int *)(a1 + 620) / *(unsigned int *)(a1 + 624) / 0x3E8, (unint64_t *)(a1 + 752));
    atomic_store(a6, (unint64_t *)(a1 + 744));
    *(_DWORD *)(a1 + 776) = a4;
    if (*(_BYTE *)(a1 + 780))
    {
      v14 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO))
      {
        v15 = atomic_load((unint64_t *)(a1 + 752));
        *(_DWORD *)buf = 67109888;
        v18 = 0;
        v19 = 1024;
        v20 = v12;
        v21 = 1024;
        v22 = a5;
        v23 = 1024;
        v24 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "status %d, clock %uus, accuracy %u, adjusted clock %uus", buf, 0x1Au);
      }
    }
  }
  return sub_100034234((uint64_t)v16);
}

void sub_1003E3C10(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned __int16 *v4;
  unsigned int v5;

  v3 = atomic_load((unint64_t *)(a1 + 760));
  v4 = (unsigned __int16 *)(sub_1003D9B54(a1, a2) + 720);
  kdebug_trace(730021964, *v4, v3 / 0x3E8, 0, 0);
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    sub_1006EC2BC();
  v5 = *v4;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10092D658);
  sub_1005283B4((uint64_t)off_100977A90, a2, v5, v3);
}

uint64_t sub_1003E3CF8(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, (uint64_t)(a1 + 69));
  v6 = sub_1003D9424(a1, a2);
  v7 = sub_1003D9B54((uint64_t)a1, v6);
  v8 = v7;
  if (v7)
  {
    sub_100415940(v7 + 400, a3);
    sub_1002D4B4C(v8, a3);
  }
  sub_100034234((uint64_t)v10);
  return 0;
}

void sub_1003E3D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1003E3D98(float a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  _BOOL8 v9;
  NSObject *v10;
  const char *v11;
  int v13;
  double v14;
  __int16 v15;
  const char *v16;

  v9 = (sub_100442118(a3, 12) & 1) == 0
    && (v7 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 384))(v7) & 1) == 0)
    && !sub_100442118(a3, 26)
    || a4 != 9 && a4 != 15;
  v10 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v11 = "No";
    if (v9)
      v11 = "Yes";
    v13 = 134218242;
    v14 = (float)(a1 * 100.0);
    v15 = 2082;
    v16 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "REMOTE DEVICE Volume : Should send volume %f to driver = %{public}s", (uint8_t *)&v13, 0x16u);
  }
  return v9;
}

uint64_t sub_1003E3EC8(_QWORD *a1, uint64_t a2, int a3, float a4)
{
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  double v14;

  v8 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v13 = 134217984;
    v14 = (float)(a4 * 100.0);
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "AVRCP REMOTE DEVICE: Volume changed to %f", (uint8_t *)&v13, 0xCu);
  }
  v9 = sub_1003D9424(a1, a2);
  v10 = sub_1003D9B54((uint64_t)a1, v9);
  if (v10)
  {
    v11 = v10;
    if (sub_1003E3D98(a4, v10, a2, a3))
      sub_1002D4114(v11, a4);
  }
  return 0;
}

uint64_t sub_1003E3FD8(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  int v10;
  uint64_t v11;

  v4 = sub_1003D9424(a1, a2);
  v5 = sub_1003D9B54((uint64_t)a1, v4);
  if (!v5)
    return 312;
  v6 = v5;
  v11 = 0;
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092D638);
  v7 = sub_1002835F4((uint64_t)off_100977A80, a2, (int *)&v11 + 1, (int *)&v11);
  sub_1002D4E2C(v6, BYTE4(v11), v11);
  v10 = 3;
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092D638);
  sub_100283884((uint64_t)off_100977A80, a2, &v10);
  sub_1002D4E3C(v6, v10);
  v8 = sub_10044F5D0(a2);
  sub_1002D4E4C(v6, v8);
  return v7;
}

uint64_t sub_1003E40E8(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v4 = sub_1003D9424(a1, a2);
  v5 = sub_1003D9B54((uint64_t)a1, v4);
  if (v5)
  {
    v6 = v5;
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10092D638);
    v7 = sub_1002834CC((uint64_t)off_100977A80, a2);
    sub_1002D4E04(v6, v7);
  }
  return 0;
}

uint64_t sub_1003E4168(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int v5;
  uint64_t v6;

  v5 = sub_1003D9424(a1, a2);
  v6 = sub_1003D9B54((uint64_t)a1, v5);
  if (v6)
    sub_1002D4E5C(v6, a3);
  return 0;
}

uint64_t sub_1003E41A8(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v4 = sub_1003D9424(a1, a2);
  v5 = sub_1003D9B54((uint64_t)a1, v4);
  if (v5)
  {
    v6 = v5;
    v7 = sub_10044F708(a2);
    sub_1002D4E7C(v6, v7);
  }
  return 0;
}

uint64_t sub_1003E41F8(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v4 = sub_1003D9424(a1, a2);
  v5 = sub_1003D9B54((uint64_t)a1, v4);
  if (v5)
  {
    v6 = v5;
    v7 = sub_100451434(a2);
    sub_1002D5428(v6, v7);
  }
  return 0;
}

uint64_t sub_1003E4248(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v4 = sub_1003D9424(a1, a2);
  v5 = sub_1003D9B54((uint64_t)a1, v4);
  if (v5)
  {
    v6 = v5;
    v7 = sub_10044F96C(a2);
    sub_1002D518C(v6, v7);
  }
  return 0;
}

uint64_t sub_1003E4298(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint8_t buf[4];
  id v14;
  __int16 v15;
  unsigned int v16;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 528);
  if (v4 != (_QWORD *)(a1 + 536))
  {
    do
    {
      v5 = *((unsigned __int16 *)v4 + 16);
      v6 = sub_1003D9B54(a1, v5);
      if (v6)
      {
        v7 = sub_1003D8844(a1, v5);
        if (v7)
        {
          if (sub_10044FE34(v7, 64))
          {
            v8 = qword_1009997C8;
            if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412546;
              v14 = v3;
              v15 = 1024;
              v16 = v5;
              _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Notify Foreground App Chanbed to BTHAL: %@, a2dpHandle:%u", buf, 0x12u);
            }
            sub_1002D4F00(v6, v3);
          }
        }
      }
      v9 = (_QWORD *)v4[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v4[2];
          v11 = *v10 == (_QWORD)v4;
          v4 = v10;
        }
        while (!v11);
      }
      v4 = v10;
    }
    while (v10 != (_QWORD *)(a1 + 536));
  }

  return 0;
}

void sub_1003E4414(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003E4430(_QWORD *a1, uint64_t a2, void *a3)
{
  id v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = a3;
  v6 = sub_1003D9424(a1, a2);
  v7 = sub_1003D9B54((uint64_t)a1, v6);
  if (v7)
  {
    (*(void (**)(uint64_t, id))(*(_QWORD *)v7 + 136))(v7, v5);
    v8 = 0;
  }
  else
  {
    v8 = 7;
  }

  return v8;
}

void sub_1003E44A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003E44B4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;

  v5 = sub_1003D9424(a1, a2);
  v6 = sub_1003D9B54((uint64_t)a1, v5);
  if (!v6)
    return 7;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 144))(v6, a3);
  return 0;
}

uint64_t sub_1003E4504(uint64_t a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  const char *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  const char *v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  unsigned int v21;

  v2 = *(_QWORD **)(a1 + 528);
  v3 = (_QWORD *)(a1 + 536);
  if (v2 != (_QWORD *)(a1 + 536))
  {
    v6 = "Off";
    if (a2)
      v6 = "On";
    v17 = v6;
    do
    {
      v7 = *((unsigned __int16 *)v2 + 16);
      v8 = sub_1003D9B54(a1, v7);
      if (v8)
      {
        v9 = v8;
        v10 = sub_1003D8844(a1, v7);
        if (v10)
        {
          v11 = v10;
          if (sub_10044FE34(v10, 64))
          {
            v12 = qword_1009997C8;
            if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              v19 = v17;
              v20 = 1024;
              v21 = v7;
              _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Notify AccessHeadTrack Change to BTHAL: %s, a2dpHandle:%u", buf, 0x12u);
            }
            sub_1002D4ED8(v9, a2);
            if (qword_1009778D8 != -1)
              dispatch_once(&qword_1009778D8, &stru_10092D5F8);
            sub_10042069C((uint64_t)off_1009778D0, v11);
          }
        }
      }
      v13 = (_QWORD *)v2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v2[2];
          v15 = *v14 == (_QWORD)v2;
          v2 = v14;
        }
        while (!v15);
      }
      v2 = v14;
    }
    while (v14 != v3);
  }
  return 0;
}

uint64_t sub_1003E46CC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  id v10;
  void *v11;
  _BOOL4 v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;

  v1 = *(_QWORD **)(a1 + 528);
  v2 = (_QWORD *)(a1 + 536);
  if (v1 != (_QWORD *)(a1 + 536))
  {
    do
    {
      v4 = *((unsigned __int16 *)v1 + 16);
      v5 = sub_1003D9B54(a1, v4);
      if (v5)
      {
        v6 = v5;
        v7 = sub_1003D8844(a1, v4);
        if (sub_10044FE34(v7, 64))
        {
          v8 = sub_10003BE44();
          v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 792))(v8, 3);
          if (v7)
          {
            if (v9)
            {
              if (qword_100977A98 != -1)
                dispatch_once(&qword_100977A98, &stru_10092D658);
              v10 = sub_100527864((uint64_t)off_100977A90);
              v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
              sub_1002D5550(v6, v11);

              if (qword_100977A98 != -1)
                dispatch_once(&qword_100977A98, &stru_10092D658);
              v12 = sub_100527AD4((uint64_t)off_100977A90, v7);
              sub_1005D9908(v6, v12);
            }
          }
        }
      }
      v13 = (_QWORD *)v1[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v1[2];
          v15 = *v14 == (_QWORD)v1;
          v1 = v14;
        }
        while (!v15);
      }
      v1 = v14;
    }
    while (v14 != v2);
  }
  return 0;
}

void sub_1003E4830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003E4840(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;

  v4 = sub_1003D9424(a1, a2);
  v5 = sub_1003D9B54((uint64_t)a1, v4);
  if (v5)
  {
    v6 = v5;
    v9 = 0;
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092D5D8);
    sub_10047134C((uint64_t)off_1009778E0, a2, &v9);
    v7 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 800))(v7) != 1)
    {
      sub_1002D4EB0(v6, v9 == 1);
      if (qword_1009778D8 != -1)
        dispatch_once(&qword_1009778D8, &stru_10092D5F8);
      sub_100422400((uint64_t)off_1009778D0, a2);
    }
  }
  return 0;
}

uint64_t sub_1003E4928(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  int v13;
  const char *v14;

  v6 = sub_1003D9424(a1, a2);
  v7 = sub_1003D9B54((uint64_t)a1, v6);
  if (v7)
  {
    v8 = v7;
    if (sub_10044FE34(a2, 64))
    {
      v9 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 792))(v9, 3))
      {
        v10 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        {
          v11 = "NO";
          if (a3)
            v11 = "YES";
          v13 = 136315138;
          v14 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Spatial Profile: Personalized HRTF enhanced Tuning %s", (uint8_t *)&v13, 0xCu);
        }
        sub_1005D9918(v8, a3);
      }
    }
  }
  return 0;
}

uint64_t sub_1003E4A40(_QWORD *a1, uint64_t a2, void *a3, int a4, int a5)
{
  id v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  int v22;

  v9 = a3;
  v10 = sub_1003D9424(a1, a2);
  v11 = sub_1003D9B54((uint64_t)a1, v10);
  v22 = 0;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092D5D8);
  sub_10047134C((uint64_t)off_1009778E0, a2, &v22);
  v12 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 800))(v12) == 1)
  {
    v13 = (_QWORD *)a1[66];
    if (v13 != a1 + 67)
    {
      do
      {
        v14 = *((unsigned __int16 *)v13 + 16);
        v15 = sub_1003D9B54((uint64_t)a1, v14);
        if (v15)
        {
          v16 = sub_1003D8844((uint64_t)a1, v14);
          v17 = v16;
          if (v16)
          {
            if (sub_10044FE34(v16, 64))
            {
              if (v9)
                sub_1002D4FC8(v15, a4, v9, a5);
              if (qword_1009778D8 != -1)
                dispatch_once(&qword_1009778D8, &stru_10092D5F8);
              sub_100422400((uint64_t)off_1009778D0, v17);
            }
          }
        }
        v18 = (_QWORD *)v13[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v13[2];
            v20 = *v19 == (_QWORD)v13;
            v13 = v19;
          }
          while (!v20);
        }
        v13 = v19;
      }
      while (v19 != a1 + 67);
    }
  }
  else if (v9 && v11)
  {
    sub_1002D4FC8(v11, a4, v9, a5);
  }

  return 0;
}

void sub_1003E4C08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003E4C28(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = sub_1003D9424(a1, a2);
  v7 = sub_1003D9B54((uint64_t)a1, v6);
  if (!v7)
    return 7;
  v8 = v7;
  result = sub_100442118(a2, 26);
  if ((_DWORD)result)
  {
    v10 = sub_100027F68();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 776))(v10) & 1) == 0)
      sub_1002D4C40(v8, a3);
    return 0;
  }
  return result;
}

uint64_t sub_1003E4CA8(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int v5;
  uint64_t v6;

  v5 = sub_1003D9424(a1, a2);
  v6 = sub_1003D9B54((uint64_t)a1, v5);
  if (!v6)
    return 7;
  sub_1002D5774(v6, a3);
  return 0;
}

uint64_t sub_1003E4CF0(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v5 = sub_1003D9424(a1, a2);
  v6 = sub_1003D9B54((uint64_t)a1, v5);
  if (!v6)
    return 7;
  v7 = v6;
  if (a3)
  {
    v8 = sub_1000438A4();
    v9 = sub_1003312CC(v8, 2u);
  }
  else
  {
    v9 = 0;
  }
  sub_1002D56FC(v7, v9);
  return 0;
}

uint64_t sub_1003E4D58(_QWORD *a1, uint64_t a2, int *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  v6 = sub_1003D9424(a1, a2);
  v7 = sub_1003D9B54((uint64_t)a1, v6);
  if (a3)
  {
    v8 = v7;
    if (v7)
    {
      if (sub_100442118(a2, 16))
        *a3 |= 1u;
      v9 = sub_100442118(a2, 17);
      v10 = *a3;
      if (v9)
      {
        v10 |= 2u;
        *a3 = v10;
      }
      sub_1004483AC(a2, v10);
      sub_1002D4EA0(v8, *(unsigned __int8 *)a3);
      return 0;
    }
    else
    {
      return 7;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EC334();
    return 3;
  }
}

uint64_t sub_1003E4E28(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v12;

  v6 = sub_1003D9424(a1, a2);
  v7 = sub_1003D9B54((uint64_t)a1, v6);
  if (!v7)
    return 7;
  v8 = v7;
  if (a3)
  {
    v9 = sub_1000438A4();
    v10 = sub_1003312CC(v9, 0);
  }
  else
  {
    v10 = 0;
  }
  sub_1002D569C(v8, v10);
  v12 = sub_10044FB48(a2);
  sub_1003E4EB4(a1, a2, v12);
  return 0;
}

uint64_t sub_1003E4EB4(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int v5;
  uint64_t v6;

  v5 = sub_1003D9424(a1, a2);
  v6 = sub_1003D9B54((uint64_t)a1, v5);
  if (!v6)
    return 7;
  sub_1002D56C4(v6, a3);
  return 0;
}

uint64_t sub_1003E4EFC(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v5 = sub_1003D9424(a1, a2);
  v6 = sub_1003D9B54((uint64_t)a1, v5);
  if (!v6)
    return 7;
  v7 = v6;
  if (a3)
  {
    v8 = sub_1000438A4();
    v9 = sub_1003312CC(v8, 1u);
  }
  else
  {
    v9 = 0;
  }
  sub_1002D56D4(v7, v9);
  return 0;
}

uint64_t sub_1003E4F64(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  id v13;
  void *v14;
  _BOOL4 v15;
  int v16;
  id v17;
  NSObject *v18;
  const char *v19;
  _BOOL4 v20;
  const char *v21;
  int v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;

  v6 = sub_1003D9424(a1, a2);
  v7 = sub_1003D9B54((uint64_t)a1, v6);
  if (!v7)
    return 7;
  v8 = v7;
  if (a3)
  {
    v9 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 792))(v9, 1))
    {
      v10 = sub_10003BE44();
      a3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 792))(v10, 3);
      v11 = 1;
    }
    else
    {
      v11 = 0;
      a3 = 0;
    }
  }
  else
  {
    v11 = 0;
  }
  v22 = 0;
  sub_1002D5500(v8, v11);
  sub_1002D5674(v8, a3);
  if (v11)
  {
    if (a3)
    {
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_10092D658);
      v13 = sub_100527864((uint64_t)off_100977A90);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      sub_1002D5550(v8, v14);

      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_10092D658);
      v15 = sub_100527AD4((uint64_t)off_100977A90, a2);
      sub_1005D9908(v8, v15);
    }
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092D5D8);
    sub_10047134C((uint64_t)off_1009778E0, a2, &v22);
    v16 = v22;
    if (!v22)
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10092D5D8);
      v16 = 1;
      sub_100471494((uint64_t)off_1009778E0, a2, 1);
      v22 = 1;
    }
    sub_1002D4EB0(v8, v16 == 1);
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_10092D658);
    v17 = sub_100527108((uint64_t)off_100977A90);
    (*(void (**)(uint64_t, id))(*(_QWORD *)v8 + 128))(v8, v17);
    v18 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      if (a3)
        v19 = "YES";
      else
        v19 = "NO";
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_10092D658);
      v20 = sub_100527AD4((uint64_t)off_100977A90, a2);
      v21 = " NO ";
      *(_DWORD *)buf = 136446722;
      v24 = "YES ";
      v25 = 2082;
      v26 = v19;
      if (v20)
        v21 = " YES ";
      v27 = 2082;
      v28 = v21;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "AudioDevice. Spatial Audio :  SpatialSupport  %{public}s Custom HRTF Support %{public}s Custom HRTF Allowed %{public}s", buf, 0x20u);
    }
  }
  return 0;
}

void sub_1003E528C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003E52A4(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t result;
  void **v6;
  const char *v7;
  _BOOL4 v8;
  void **v9;
  NSObject *v10;
  void **v11;
  NSObject *v12;
  void **v13;
  NSObject *v14;
  void **v15;
  NSObject *v16;
  void **v17;
  NSObject *v18;
  void **v19;
  void *__p[2];
  char v21;
  uint8_t buf[4];
  void **v23;

  switch(sub_10043FC18(a2))
  {
    case 0u:
      v3 = qword_1009997C8;
      v4 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v4)
      {
        sub_10043E5F8(a2, __p);
        if (v21 >= 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v23 = v6;
        v7 = "User selected device type is unknown. Returning user selected device type as kBluetoothAudioDeviceCategoryU"
             "nknown for device %{public}s.";
        goto LABEL_12;
      }
      break;
    case 1u:
      v10 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v11 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v23 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Returning user selected device type as kBluetoothAudioDeviceCategoryCarkit for device %{public}s.", buf, 0xCu);
        if (v21 < 0)
          operator delete(__p[0]);
      }
      result = 2;
      break;
    case 2u:
      v12 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v13 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v23 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Returning user selected device type as kBluetoothAudioDeviceCategoryHeadphone for device %{public}s.", buf, 0xCu);
        if (v21 < 0)
          operator delete(__p[0]);
      }
      result = 1;
      break;
    case 3u:
      v14 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v15 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v23 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "User selected device type is hearing aid. Returning user selected device type as kBluetoothAudioDeviceCategoryHearingAid for device %{public}s.", buf, 0xCu);
        if (v21 < 0)
          operator delete(__p[0]);
      }
      result = 4;
      break;
    case 4u:
      v16 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v17 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v23 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Returning user selected device type as kBluetoothAudioDeviceCategorySpeaker for device %{public}s.", buf, 0xCu);
        if (v21 < 0)
          operator delete(__p[0]);
      }
      result = 3;
      break;
    case 5u:
      v18 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v19 = v21 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v23 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "User selected device type is other. Returning user selected device type as kBluetoothAudioDeviceCategoryOther for device %{public}s.", buf, 0xCu);
        if (v21 < 0)
          operator delete(__p[0]);
      }
      result = 5;
      break;
    default:
      v3 = qword_1009997C8;
      v8 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v8)
      {
        sub_10043E5F8(a2, __p);
        if (v21 >= 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v23 = v9;
        v7 = "Returning user selected device type as kBluetoothAudioDeviceCategoryUnknown for device %{public}s.";
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v7, buf, 0xCu);
        if (v21 < 0)
          operator delete(__p[0]);
        result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_1003E56C4(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];
  _QWORD v6[2];

  v2 = *(_QWORD *)(a1 + 32);
  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, v2 + 552);
  v3 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Software Volume: Initialize software volume enabled", v5, 2u);
  }
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092D638);
  if (sub_10027C1AC((uint64_t)off_100977A80, *(_QWORD *)(a1 + 40), 2, 1)
    && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
  {
    sub_1006EC360();
  }
  return sub_100034234((uint64_t)v6);
}

void sub_1003E57BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003E57D0(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v7[5];
  __int16 v8;
  uint8_t buf[16];

  if ((sub_1002D5A20(a2) & 1) != 0)
  {
    v4 = sub_1005D9068(a2);
    v5 = sub_1004759E0();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1003E5898;
    v7[3] = &unk_100920960;
    v7[4] = a1;
    v8 = v4;
    sub_100041A34(v5, v7);
  }
  else
  {
    v6 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling streamWillStart", buf, 2u);
    }
  }
}

uint64_t sub_1003E5898(uint64_t a1)
{
  unint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v18;
  int v19;
  uint64_t v20;
  _QWORD v21[2];
  uint8_t buf[4];
  int v23;

  v2 = *(unint64_t **)(a1 + 32);
  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, (uint64_t)(v2 + 69));
  v3 = sub_1003D8844((uint64_t)v2, *(unsigned __int16 *)(a1 + 40));
  v4 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int16 *)(a1 + 40);
    *(_DWORD *)buf = 67109120;
    v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received system 'audio started' notification from HAL on a2dpHandle %d", buf, 8u);
  }
  atomic_store(0, v2 + 93);
  atomic_store(0, v2 + 94);
  atomic_store(0, v2 + 95);
  if (v3)
  {
    *(_DWORD *)buf = 0;
    v20 = 0;
    v19 = 0;
    sub_100444BF0(v3, buf, (_DWORD *)&v20 + 1, &v20, &v19);
    v6 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 720))(v6)
      && (v20 - 8202) <= 0x15
      && ((1 << (v20 - 10)) & 0x20033F) != 0)
    {
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_10092D638);
      v7 = sub_100279E6C((uint64_t)off_100977A80, v3, 11, 500, 1u);
      if (v7)
      {
        v8 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
          sub_1006EC3C0(v7, v8, v9);
      }
    }
    sub_1003DB624((uint64_t)v2, *(unsigned __int16 *)(a1 + 40));
    v10 = *(unsigned int *)(v3 + 128);
    v11 = *(unsigned __int16 *)(v3 + 132);
    v12 = sub_1000438A4();
    v13 = sub_10043F854(v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v12 + 80))(v12, (v10 | (v11 << 32)) & 0xFFFFFFFFFFFFLL, v13, 2, 1, 1, 1, 0);
    v14 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 960))(v14, 1, 1);
    v18 = 0;
    sub_100043758(&v18);
    v15 = sub_1001404BC(v3 + 128);
    sub_10004339C(&v18);
    if (!v15)
    {
      v16 = sub_1000438A4();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 312))(v16, v3, 1, 1);
    }
    sub_100043728(&v18);
  }
  return sub_100034234((uint64_t)v21);
}

void sub_1003E5B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003E5B58(uint64_t a1, uint64_t a2)
{
  sub_1003E57D0(a1 - 256, a2);
}

uint64_t sub_1003E5B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t result;
  unsigned int v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  unsigned int v15;
  __int16 v16;
  int v17;

  result = sub_1005D9068(a2);
  if ((_DWORD)result)
  {
    v10 = result;
    if (*(_BYTE *)(a1 + 780))
    {
      v11 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEBUG))
      {
        v12 = 134218496;
        v13 = a4;
        v14 = 1024;
        v15 = v10;
        v16 = 1024;
        v17 = a5;
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Sending data of length %lu to a2dpHandle %d with frameCount %d", (uint8_t *)&v12, 0x18u);
      }
    }
    return sub_1003DD498(a1, a3, a4, a5, v10);
  }
  return result;
}

uint64_t sub_1003E5C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1003E5B68(a1 - 256, a2, a3, a4, a5);
}

void sub_1003E5C74(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v7[5];
  __int16 v8;
  uint8_t buf[16];

  if ((sub_1002D5A20(a2) & 1) != 0)
  {
    v4 = sub_1005D9068(a2);
    v5 = sub_1004759E0();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1003E5D3C;
    v7[3] = &unk_100920960;
    v7[4] = a1;
    v8 = v4;
    sub_100041A34(v5, v7);
  }
  else
  {
    v6 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling streamDidStop", buf, 2u);
    }
  }
}

uint64_t sub_1003E5D3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _QWORD v10[2];
  uint8_t buf[4];
  int v12;

  v2 = *(_QWORD *)(a1 + 32);
  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, v2 + 552);
  v3 = sub_1003D8844(v2, *(unsigned __int16 *)(a1 + 40));
  v4 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int16 *)(a1 + 40);
    *(_DWORD *)buf = 67109120;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received system 'audio stop' notification from HAL on a2dpHandle %d", buf, 8u);
  }
  if (v3)
  {
    sub_1003DB01C(v2, *(unsigned __int16 *)(a1 + 40));
    v6 = sub_1000438A4();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 960))(v6, 0, 1);
    buf[0] = 0;
    sub_100043758(buf);
    v7 = sub_1001404BC(v3 + 128);
    sub_10004339C(buf);
    if (!v7)
    {
      v8 = sub_1000438A4();
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 312))(v8, v3, 0, 1);
    }
    sub_100043728(buf);
  }
  return sub_100034234((uint64_t)v10);
}

void sub_1003E5E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1003E5EB4(uint64_t a1, uint64_t a2)
{
  sub_1003E5C74(a1 - 256, a2);
}

void sub_1003E5EBC(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v7[5];
  __int16 v8;
  uint8_t buf[16];

  if ((sub_1002D5A20(a2) & 1) != 0)
  {
    v4 = sub_1005D9068(a2);
    v5 = sub_1004759E0();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1003E5F84;
    v7[3] = &unk_100920960;
    v7[4] = a1;
    v8 = v4;
    sub_100041A34(v5, v7);
  }
  else
  {
    v6 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling streamDidReset", buf, 2u);
    }
  }
}

uint64_t sub_1003E5F84(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t result;

  v2 = *(os_unfair_lock_s **)(a1 + 32);
  result = sub_1003D8844((uint64_t)v2, *(unsigned __int16 *)(a1 + 40));
  if (result)
  {
    sub_1003DB01C((uint64_t)v2, *(unsigned __int16 *)(a1 + 40));
    return sub_1003DB478(v2, *(unsigned __int16 *)(a1 + 40));
  }
  return result;
}

void sub_1003E5FD4(uint64_t a1, uint64_t a2)
{
  sub_1003E5EBC(a1 - 256, a2);
}

void sub_1003E5FDC(uint64_t a1, uint64_t a2, float a3)
{
  __int16 v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD v9[5];
  float v10;
  __int16 v11;
  uint8_t buf[16];

  if ((sub_1002D5A20(a2) & 1) != 0)
  {
    v6 = sub_1005D9068(a2);
    v7 = sub_1004759E0();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1003E60B4;
    v9[3] = &unk_10092D0A8;
    v9[4] = a1;
    v11 = v6;
    v10 = a3;
    sub_100041A34(v7, v9);
  }
  else
  {
    v8 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling volumeDidUpdate", buf, 2u);
    }
  }
}

uint64_t sub_1003E60B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  _QWORD v7[2];
  uint8_t buf[4];
  int v9;

  v2 = *(_QWORD *)(a1 + 32);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, v2 + 552);
  v3 = sub_1003D8844(v2, *(unsigned __int16 *)(a1 + 44));
  if (v3)
  {
    v4 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO))
    {
      v5 = (int)(float)(*(float *)(a1 + 40) * 100.0);
      *(_DWORD *)buf = 67109120;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending volume %d", buf, 8u);
    }
    if (qword_10097AC00 != -1)
      dispatch_once(&qword_10097AC00, &stru_10092D6F8);
    sub_1005A4CA0(*(float *)(a1 + 40), (uint64_t)off_10097ABF8, v3);
  }
  return sub_100034234((uint64_t)v7);
}

void sub_1003E61DC(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1003E61F8(uint64_t a1, uint64_t a2, float a3)
{
  sub_1003E5FDC(a1 - 256, a2, a3);
}

uint64_t sub_1003E6200(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void **v10;
  const char *v11;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;

  v6 = sub_1003D9424(a1, a2);
  if (!v6)
    return 1;
  v7 = sub_1003D9B54((uint64_t)a1, v6);
  v8 = qword_1009997C8;
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EC438();
    return 1;
  }
  v9 = v7;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v10 = (void **)__p[0];
    v11 = "No";
    if (v14 >= 0)
      v10 = __p;
    if (a3)
      v11 = "Yes";
    *(_DWORD *)buf = 136446466;
    v16 = v10;
    v17 = 2082;
    v18 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "setAllowsAutoRoute: %{public}s, allows %{public}s", buf, 0x16u);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  sub_1002D57FC(v9, a3);
  return 0;
}

uint64_t sub_1003E6364(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void **v10;
  const char *v11;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;

  v6 = sub_1003D9424(a1, a2);
  if (!v6)
    return 1;
  v7 = sub_1003D9B54((uint64_t)a1, v6);
  v8 = qword_1009997C8;
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EC498();
    return 1;
  }
  v9 = v7;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v10 = (void **)__p[0];
    v11 = "No";
    if (v14 >= 0)
      v10 = __p;
    if (a3)
      v11 = "Yes";
    *(_DWORD *)buf = 136446466;
    v16 = v10;
    v17 = 2082;
    v18 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "setAudioRouteHidden: %{public}s, %{public}s", buf, 0x16u);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  sub_1002D585C(v9, a3);
  return 0;
}

uint64_t sub_1003E64C8(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int v5;
  uint64_t v6;

  v5 = sub_1003D9424(a1, a2);
  if (v5)
  {
    v6 = sub_1003D9B54((uint64_t)a1, v5);
    if (v6)
    {
      sub_1002D579C(v6, a3);
      return 0;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EC4F8();
  }
  return 1;
}

uint64_t sub_1003E654C(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  int v13;
  const char *v14;

  v6 = sub_1003D9424(a1, a2);
  if (!v6)
  {
LABEL_10:
    v11 = 1;
    goto LABEL_11;
  }
  v7 = sub_1003D9B54((uint64_t)a1, v6);
  v8 = qword_1009997C8;
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EC558();
    goto LABEL_10;
  }
  v9 = v7;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v10 = "No";
    if (a3)
      v10 = "Yes";
    v13 = 136315138;
    v14 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Smart Route: [A2DP] Tipi Connection status : %s", (uint8_t *)&v13, 0xCu);
  }
  sub_1002D4AEC(v9, a3);
  v11 = 0;
LABEL_11:
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10092D658);
  sub_100528690((uint64_t)off_100977A90, a2, a3);
  return v11;
}

void sub_1003E66B4(_QWORD *a1, uint64_t a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  void **v11;
  int v12;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  void **v20;

  v6 = sub_1003D9424(a1, a2);
  if (v6)
  {
    v7 = sub_1003D9B54((uint64_t)a1, v6);
    if (v7)
    {
      v8 = v7;
      if ((a3 - 1) > 4)
        v9 = 0;
      else
        v9 = dword_100740F70[a3 - 1];
      v10 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        if (v14 >= 0)
          v11 = __p;
        else
          v11 = (void **)__p[0];
        *(_DWORD *)buf = 67109634;
        v16 = a3;
        v17 = 1024;
        v18 = v9;
        v19 = 2082;
        v20 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "User selected device type is %d. Setting category as %d for device %{public}s.", buf, 0x18u);
        if (v14 < 0)
          operator delete(__p[0]);
      }
      sub_10057D0B4(v8, v9);
      v12 = sub_100412BA4(v8 + 400);
      sub_10057CE64(v8, v12);
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    {
      sub_1006EC5B8();
    }
  }
}

uint64_t sub_1003E6840(os_unfair_lock_s *a1, unsigned int a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[4];
  __int16 v13;
  char v14;

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, (uint64_t)&a1[138]);
  v8 = sub_1003D9B54((uint64_t)a1, a2);
  if (!v8)
    goto LABEL_5;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10092D658);
  if ((sub_10051C588((uint64_t)off_100977A90, a2) & 1) == 0)
  {
    sub_1003DAEE0((uint64_t)a1, v8, a3, a4);
    v9 = 0;
    if (a4)
      *(_BYTE *)(v8 + 710) = 1;
  }
  else
  {
LABEL_5:
    if (a4)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        sub_1006EC618();
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1003D9068;
      v12[3] = &unk_10092CFA0;
      v13 = a2;
      v14 = 0;
      sub_1003D88F4(a1 + 108, v12);
    }
    v9 = 1;
  }
  sub_100034234((uint64_t)v11);
  return v9;
}

void sub_1003E6988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003E69A4(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  NSObject *v6;
  _DWORD v7[2];

  v6 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Latency ExpanseStateChanged to: %d", (uint8_t *)v7, 8u);
  }
  sub_1003D8CA8(a1, a2, a3);
}

void sub_1003E6A64(uint64_t a1, uint64_t a2, int a3)
{
  sub_1003E69A4((os_unfair_lock_s *)(a1 - 256), a2, a3);
}

void sub_1003E6A6C(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  NSObject *v6;
  NSObject *v7;
  _DWORD v8[2];

  v6 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Latency gameStateChanged to: %d", (uint8_t *)v8, 8u);
  }
  sub_1003D8D40(a1, a2, a3);
  if ((a3 & 1) == 0)
  {
    v7 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Dynamic Latency ExpanseState disabled", (uint8_t *)v8, 2u);
    }
    sub_1003D8CA8(a1, a2, 0);
  }
}

void sub_1003E6B84(uint64_t a1, uint64_t a2, int a3)
{
  sub_1003E6A6C((os_unfair_lock_s *)(a1 - 256), a2, a3);
}

void sub_1003E6B8C(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  NSObject *v6;
  _DWORD v7[2];

  v6 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Latency aggregationStateChanged to: %d", (uint8_t *)v7, 8u);
  }
  sub_1003D8DD8(a1, a2, a3);
}

void sub_1003E6C4C(uint64_t a1, uint64_t a2, int a3)
{
  sub_1003E6B8C((os_unfair_lock_s *)(a1 - 256), a2, a3);
}

void sub_1003E6C54(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  NSObject *v6;
  _DWORD v7[2];

  v6 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Latency voiceOverChanged to: %d", (uint8_t *)v7, 8u);
  }
  sub_1003D8E80(a1, a2, a3);
}

void sub_1003E6D14(uint64_t a1, uint64_t a2, int a3)
{
  sub_1003E6C54((os_unfair_lock_s *)(a1 - 256), a2, a3);
}

void sub_1003E6D1C(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  NSObject *v6;
  _DWORD v7[2];

  v6 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Latency MUSIC spatial changed to: %d", (uint8_t *)v7, 8u);
  }
  sub_1003D8F18(a1, a2, a3);
}

void sub_1003E6DDC(uint64_t a1, uint64_t a2, int a3)
{
  sub_1003E6D1C((os_unfair_lock_s *)(a1 - 256), a2, a3);
}

void sub_1003E6DE4(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  NSObject *v6;
  _DWORD v7[2];

  v6 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Latency VIDEO spatial changed to: %d", (uint8_t *)v7, 8u);
  }
  sub_1003D8FB0(a1, a2, a3);
}

void sub_1003E6EA4(uint64_t a1, uint64_t a2, int a3)
{
  sub_1003E6DE4((os_unfair_lock_s *)(a1 - 256), a2, a3);
}

void sub_1003E6EAC(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4, unsigned __int8 a5)
{
  id v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12[4];

  v9 = a4;
  v10 = sub_1005D9068(a2);
  v11 = sub_1003D8844(a1, v10);
  if (v11)
  {
    v12[0] = 2;
    v12[1] = a3;
    v12[2] = sub_1002D44AC(a2, v9);
    v12[3] = a5;
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10092D638);
    if (sub_100286DFC((uint64_t)off_100977A80, v11, 4u, v12)
      && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    {
      sub_1006EC6A8();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
  {
    sub_1006EC67C();
  }

}

void sub_1003E6FD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1003E6FEC(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4, unsigned __int8 a5)
{
  sub_1003E6EAC(a1 - 256, a2, a3, a4, a5);
}

void sub_1003E6FF4(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4, unsigned __int8 a5, unsigned __int8 a6)
{
  id v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 v14[5];

  v11 = a4;
  v12 = sub_1005D9068(a2);
  v13 = sub_1003D8844(a1, v12);
  if (v13)
  {
    v14[0] = 3;
    v14[1] = sub_1002D44AC(a2, v11);
    v14[2] = a3;
    v14[3] = a5;
    v14[4] = a6;
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10092D638);
    if (sub_100286DFC((uint64_t)off_100977A80, v13, 5u, v14)
      && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    {
      sub_1006EC734();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
  {
    sub_1006EC708();
  }

}

void sub_1003E7120(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1003E713C(uint64_t a1, uint64_t a2, unsigned __int8 a3, void *a4, unsigned __int8 a5, unsigned __int8 a6)
{
  sub_1003E6FF4(a1 - 256, a2, a3, a4, a5, a6);
}

void sub_1003E7144(os_unfair_lock_s *a1, uint64_t a2, int a3, int a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  void **v13;
  uint64_t v14;
  NSObject *v15;
  void **v16;
  void *__p[2];
  char v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void **v22;

  if ((*(_BYTE *)(a2 + 723) != 0) != a3)
  {
    *(_BYTE *)(a2 + 723) = a3;
    v8 = sub_1005D9068(a2);
    v9 = sub_1003D8844((uint64_t)a1, v8);
    if (v9)
    {
      v10 = v9;
      v11 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        v12 = a3 ? "enabled" : "disabled";
        sub_10046E9BC((unsigned __int8 *)(v10 + 128), __p);
        v13 = v18 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446466;
        v20 = v12;
        v21 = 2082;
        v22 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Wireless Splitter: %{public}s for device %{public}s", buf, 0x16u);
        if (v18 < 0)
          operator delete(__p[0]);
      }
      if (sub_100442118(v10, 13) && sub_100412EDC(a2 + 400) == 33023)
      {
        *(_BYTE *)(a2 + 704) = a3 ^ 1;
        sub_1005D9898(a2, a3 ^ 1);
      }
      if (a3)
      {
        if (sub_100442118(v10, 26))
        {
          v14 = sub_100027F68();
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 768))(v14) & 1) == 0)
          {
            v15 = qword_1009997C8;
            if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
            {
              sub_10046E9BC((unsigned __int8 *)(v10 + 128), __p);
              v16 = v18 >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)buf = 136446210;
              v20 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Wireless Splitter: Disable Software volume for %{public}s", buf, 0xCu);
              if (v18 < 0)
                operator delete(__p[0]);
            }
            if (qword_100977A88 != -1)
              dispatch_once(&qword_100977A88, &stru_10092D638);
            if (sub_10027C1AC((uint64_t)off_100977A80, v10, 2, 2))
            {
              if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
                sub_1006EC360();
            }
          }
        }
        sub_1003D90BC(a1, a2, 1);
      }
      else
      {
        sub_1003D90BC(a1, a2, 0);
        if (a4 && *(_BYTE *)(v10 + 952))
        {
          *(_DWORD *)(v10 + 972) = 3;
          if (qword_100978150 != -1)
            dispatch_once(&qword_100978150, &stru_10092D738);
          sub_1005B8744((uint64_t)off_100978148, (unsigned __int8 *)v10);
        }
      }
    }
  }
}

void sub_1003E7448(uint64_t a1, uint64_t a2, int a3, int a4)
{
  sub_1003E7144((os_unfair_lock_s *)(a1 - 256), a2, a3, a4);
}

uint64_t sub_1003E7450(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  NSObject *v8;
  void **v9;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  void **v15;

  v5 = sub_1005D9068(a2);
  result = sub_1003D8844(a1, v5);
  if (result)
  {
    v7 = result;
    v8 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10046E9BC((unsigned __int8 *)(v7 + 128), __p);
      v9 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109378;
      v13 = a3;
      v14 = 2082;
      v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Spatial Audio Active(via BTHAL) is : %d for device %{public}s", buf, 0x12u);
      if (v11 < 0)
        operator delete(__p[0]);
    }
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_10092D5F8);
    return sub_1004226AC((uint64_t)off_1009778D0, v7, a3);
  }
  return result;
}

uint64_t sub_1003E7590(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1003E7450(a1 - 256, a2, a3);
}

void sub_1003E7598(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  __CFString *v9;
  unsigned int v10;
  uint64_t v11;
  NSObject *v12;
  const __CFString *v13;
  void **v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  const __CFString *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  void **v22;

  v9 = a3;
  v10 = sub_1005D9068(a2);
  v11 = sub_1003D8844(a1, v10);
  v12 = qword_1009997C8;
  if (v11)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10046E9BC((unsigned __int8 *)(v11 + 128), __p);
      v13 = CFSTR("None");
      if (v9)
        v13 = v9;
      if (v16 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      *(_DWORD *)buf = 138412802;
      v18 = v13;
      v19 = 1024;
      v20 = a4;
      v21 = 2082;
      v22 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Spatial Audio: Spatial Audio mode for App: %@ From User(via BTHAL) is : %d for device %{public}s", buf, 0x1Cu);
      if (v16 < 0)
        operator delete(__p[0]);
    }
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_10092D5F8);
    sub_1004227D4((uint64_t)off_1009778D0, v11, v9, a4, a5);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
  {
    sub_1006EC794();
  }

}

void sub_1003E7730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1003E7750(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  sub_1003E7598(a1 - 256, a2, a3, a4, a5);
}

void sub_1003E7758(uint64_t a1, uint64_t a2, char a3)
{
  __int16 v5;
  uint64_t v6;
  _QWORD v7[5];
  __int16 v8;
  char v9;

  v5 = sub_1005D9068(a2);
  v6 = sub_1004759E0();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1003E77D8;
  v7[3] = &unk_10092CB18;
  v7[4] = a1;
  v8 = v5;
  v9 = a3;
  sub_100041A34(v6, v7);
}

uint64_t sub_1003E77D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t v6;
  _QWORD v8[2];
  uint8_t buf[4];
  const char *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, v2 + 552);
  v3 = sub_1003D8844(v2, *(unsigned __int16 *)(a1 + 40));
  if (v3)
  {
    v4 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(a1 + 42))
        v5 = "enabled";
      else
        v5 = "disabled";
      *(_DWORD *)buf = 136315138;
      v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PME On Buds: %s", buf, 0xCu);
    }
    *(_WORD *)buf = 1;
    if (*(_BYTE *)(a1 + 42))
      v6 = 1;
    else
      v6 = 2;
    buf[1] = v6;
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10092D638);
    if (sub_10028702C((uint64_t)off_100977A80, v3, 2u, buf)
      && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    {
      sub_1006EC7C0();
    }
  }
  return sub_100034234((uint64_t)v8);
}

void sub_1003E794C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1003E796C(uint64_t a1, uint64_t a2, char a3)
{
  sub_1003E7758(a1 - 256, a2, a3);
}

void sub_1003E7974(uint64_t a1, uint64_t a2, char a3)
{
  __int16 v6;
  uint64_t v7;
  _QWORD v8[6];
  __int16 v9;
  char v10;

  v6 = sub_1005D9068(a2);
  v7 = sub_1004759E0();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1003E79F8;
  v8[3] = &unk_100922690;
  v9 = v6;
  v10 = a3;
  v8[4] = a1;
  v8[5] = a2;
  sub_100041A34(v7, v8);
}

uint64_t sub_1003E79F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  int v6;
  int v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  _QWORD v12[2];
  uint8_t buf[4];
  const char *v14;

  v2 = *(_QWORD *)(a1 + 32);
  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, v2 + 552);
  v3 = sub_1003D8844(v2, *(unsigned __int16 *)(a1 + 48));
  if (v3)
  {
    v4 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(a1 + 50))
        v5 = "enabled";
      else
        v5 = "disabled";
      *(_DWORD *)buf = 136315138;
      v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Software Volume: %s", buf, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 40) + 726) = *(_BYTE *)(a1 + 50);
    v6 = sub_10044FE34(v3, 32);
    if (*(_BYTE *)(a1 + 50))
    {
      v7 = 0;
    }
    else if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 723))
    {
      v7 = 0;
    }
    else
    {
      v7 = v6 ^ 1;
    }
    v8 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = "No";
      if (v7)
        v9 = "Yes";
      *(_DWORD *)buf = 136315138;
      v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Software Volume: Drop software volume enabled command : %s", buf, 0xCu);
    }
    if ((v7 & 1) == 0)
    {
      if (*(_BYTE *)(a1 + 50))
        v10 = 1;
      else
        v10 = 2;
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_10092D638);
      if (sub_10027C1AC((uint64_t)off_100977A80, v3, 2, v10)
        && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      {
        sub_1006EC360();
      }
    }
  }
  return sub_100034234((uint64_t)v12);
}

void sub_1003E7C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1003E7C30(uint64_t a1, uint64_t a2, char a3)
{
  sub_1003E7974(a1 - 256, a2, a3);
}

void sub_1003E7C38(uint64_t a1, uint64_t a2, unsigned int a3)
{
  NSObject *v5;
  _DWORD v6[2];

  if (a3 <= 3 && *(_BYTE *)(a2 + 704))
  {
    v5 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      v6[0] = 67109120;
      v6[1] = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "AAC-ELD frame count update notification from BTHALPlugIn received: %d", (uint8_t *)v6, 8u);
    }
    *(_DWORD *)(a2 + 660) = a3;
  }
}

void sub_1003E7CFC(os_unfair_lock_s *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  NSObject *v9;
  __int16 v10;
  _BYTE v11[24];
  void *v12;
  unint64_t v13;
  __int16 v14;

  if (sub_100412EDC(a2 + 400) == 33023)
  {
    v6 = sub_100027F68();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 440))(v6) & 1) == 0)
    {
      v7 = a3 / (10 * *(_DWORD *)(a2 + 660));
      v8 = *(_WORD *)(a2 + 720) + v7;
      *(_WORD *)(a2 + 720) = v8;
      v9 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v11 = 134218240;
        *(_QWORD *)&v11[4] = v7;
        *(_WORD *)&v11[12] = 1024;
        *(_DWORD *)&v11[14] = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "AudioSkywalkReadLoop Skip A2DP sequence number Skipped = %llu, current seq Num = %d", v11, 0x12u);
      }
    }
  }
  v10 = sub_1005D9068(a2);
  *(_QWORD *)v11 = _NSConcreteStackBlock;
  *(_QWORD *)&v11[8] = 3221225472;
  *(_QWORD *)&v11[16] = sub_1003D90A0;
  v12 = &unk_10092CFE0;
  v14 = v10;
  v13 = a3;
  sub_1003D88F4(a1 + 108, v11);
}

void sub_1003E7E54(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_1003E7CFC((os_unfair_lock_s *)(a1 - 256), a2, a3);
}

uint64_t sub_1003E7E5C(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD v10[2];
  uint8_t buf[8];
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void *v14;
  __int16 v15;
  char v16;

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, (uint64_t)&a1[138]);
  v6 = sub_1005D9068(a2);
  v7 = sub_1003D9B54((uint64_t)a1, v6);
  v8 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v6;
    LOWORD(v12) = 1024;
    *(_DWORD *)((char *)&v12 + 2) = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Dynamic Latency received system 'audio speed change complete' notification from HAL on a2dpHandle %d, status %d", buf, 0xEu);
  }
  if (v7)
  {
    if (*(_BYTE *)(v7 + 705))
    {
      sub_1003DAEE0((uint64_t)a1, v7, 0, 0);
      *(_BYTE *)(v7 + 705) = 0;
      sub_1003D8AAC(a1, a2, 1);
    }
    else if (*(_BYTE *)(v7 + 710))
    {
      *(_BYTE *)(v7 + 710) = 0;
      *(_QWORD *)buf = _NSConcreteStackBlock;
      v12 = 3221225472;
      v13 = sub_1003D9068;
      v14 = &unk_10092CFA0;
      v15 = v6;
      v16 = 1;
      sub_1003D88F4(a1 + 108, buf);
    }
    else
    {
      sub_1003DAEE0((uint64_t)a1, v7, 0, 0);
    }
  }
  return sub_100034234((uint64_t)v10);
}

void sub_1003E7FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E8014(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1003E7E5C((os_unfair_lock_s *)(a1 - 256), a2, a3);
}

void sub_1003E801C(uint64_t a1, uint64_t a2)
{
  __int16 v3;
  uint64_t v4;
  _QWORD v5[5];
  __int16 v6;

  v3 = sub_1005D9068(a2);
  v4 = sub_1004759E0();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003E808C;
  v5[3] = &unk_100920960;
  v5[4] = a1;
  v6 = v3;
  sub_100041A34(v4, v5);
}

uint64_t sub_1003E808C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  int v5;
  NSObject *v6;
  char v8;
  _QWORD v9[3];
  _QWORD v10[2];
  uint8_t buf[4];
  int v12;

  v2 = *(_QWORD *)(a1 + 32);
  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, v2 + 552);
  v3 = sub_1003D8844(v2, *(unsigned __int16 *)(a1 + 40));
  v4 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    if (v4)
    {
      sub_10043E5F8(v3, v9);
      sub_1006EC84C();
    }
    v8 = 0;
    sub_100043758(&v8);
    v5 = sub_100180494(v3 + 128, 0x14u);
    v6 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Forced disconnect with return status %{bluetooth:OI_STATUS}u", buf, 8u);
    }
    sub_100043728(&v8);
  }
  else if (v4)
  {
    sub_1006EC820();
  }
  return sub_100034234((uint64_t)v10);
}

void sub_1003E81C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003E81FC(uint64_t a1, uint64_t a2)
{
  sub_1003E801C(a1 - 256, a2);
}

void sub_1003E8204(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v7[6];
  __int16 v8;
  uint8_t buf[16];

  if ((sub_1002D5A20(a2) & 1) != 0)
  {
    v4 = sub_1005D9068(a2);
    v5 = sub_1004759E0();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1003E82D4;
    v7[3] = &unk_1009186D0;
    v8 = v4;
    v7[4] = a1;
    v7[5] = a2;
    sub_100041A34(v5, v7);
  }
  else
  {
    v6 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio device is not valid, not handling uni to bi transition", buf, 2u);
    }
  }
}

uint64_t sub_1003E82D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v10;
  _QWORD v11[2];
  uint8_t buf[4];
  int v13;

  v2 = *(_QWORD *)(a1 + 32);
  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, v2 + 552);
  v3 = sub_1003D8844(v2, *(unsigned __int16 *)(a1 + 48));
  v4 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int16 *)(a1 + 48);
    *(_DWORD *)buf = 67109120;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received system 'uni to bi' notification from HAL on a2dpHandle %d", buf, 8u);
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 728) == 5)
  {
    sub_1003DA810(v2, *(unsigned __int16 *)(a1 + 48));
    v6 = sub_1000438A4();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 960))(v6, 0, 1);
    v10 = 0;
    sub_100043758(&v10);
    v7 = sub_1001404BC(v3 + 128);
    *(_WORD *)buf = sub_100412814(*(_QWORD *)(a1 + 40) + 400);
    sub_10013F93C((__int16 *)buf, 1u, 0);
    sub_10004339C(&v10);
    if (!v7)
    {
      v8 = sub_1000438A4();
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 312))(v8, v3, 0, 1);
    }
    sub_100043728(&v10);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
  {
    sub_1006EC898();
  }
  return sub_100034234((uint64_t)v11);
}

void sub_1003E8474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
  sub_100043728(&a13);
  sub_100034234((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_1003E84A8(uint64_t a1, uint64_t a2)
{
  sub_1003E8204(a1 - 256, a2);
}

uint64_t sub_1003E84B0(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  int v12;
  int v13;
  dispatch_block_t v14;
  void *v15;
  uint64_t v16;
  _QWORD block[6];
  __int16 v19;
  _QWORD v20[2];
  uint8_t buf[4];
  int v22;
  __int16 v23;
  int v24;

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 552);
  v6 = sub_1003D9B54(a1, a2);
  v7 = sub_1003D8844(a1, a2);
  if (v6 && (v8 = v7) != 0)
  {
    if (!*(_BYTE *)(v6 + 705))
    {
      *(_BYTE *)(v6 + 705) = 1;
      v10 = sub_1003DAD2C(v7, v7, a3);
      *(_WORD *)(v6 + 708) = v10;
      v11 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_DWORD *)(v6 + 728);
        *(_DWORD *)buf = 67109376;
        v22 = v10;
        v23 = 1024;
        v24 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Dynamic Latency trying to set jitter buffer to %d Current Stream state %d", buf, 0xEu);
      }
      sub_100034264((uint64_t)v20);
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_10092D638);
      v13 = sub_100279E6C((uint64_t)off_100977A80, v8, 11, *(unsigned __int16 *)(v6 + 708), 1u);
      sub_100034188((uint64_t)v20);
      if (v13)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
          sub_1006EC8F8();
      }
      else
      {
        if (*(_DWORD *)(v6 + 728) == 5)
        {
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1003E87B8;
          block[3] = &unk_1009186D0;
          v19 = a2;
          block[4] = a1;
          block[5] = v6;
          v14 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, block);
          v15 = *(void **)(a1 + 496);
          *(_QWORD *)(a1 + 496) = v14;

          v16 = sub_1004759E0();
          sub_100475CEC(v16, 2000, *(void **)(a1 + 496));
          return sub_100034234((uint64_t)v20);
        }
        sub_1003E3540((os_unfair_lock_s *)a1, v6, v8);
      }
      *(_BYTE *)(v6 + 705) = 0;
      sub_1003D8AAC((os_unfair_lock_s *)a1, v6, 0);
      return sub_100034234((uint64_t)v20);
    }
    v9 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Dynamic Latency change already in progress", buf, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
  {
    sub_1006EC970();
  }
  sub_1003D8AAC((os_unfair_lock_s *)a1, v6, 0);
  return sub_100034234((uint64_t)v20);
}

void sub_1003E8790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E87B8(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  NSObject *v7;
  uint8_t v9[16];
  _QWORD v10[2];

  v2 = *(os_unfair_lock_s **)(a1 + 32);
  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, (uint64_t)&v2[138]);
  v3 = sub_1003D9B54((uint64_t)v2, *(unsigned __int16 *)(a1 + 48));
  v4 = sub_1003D8844((uint64_t)v2, *(unsigned __int16 *)(a1 + 48));
  v5 = v4;
  if (v3)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6 && *(_DWORD *)(v3 + 728) == 5)
  {
    v7 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Dynamic Latency did not receive Delay Report from accessory assuming audio modification is not needed", v9, 2u);
    }
    *(_BYTE *)(v3 + 705) = 0;
    sub_1003E3540(v2, v3, v5);
    sub_1003D8AAC(v2, *(_QWORD *)(a1 + 40), 0);
  }
  return sub_100034234((uint64_t)v10);
}

void sub_1003E88A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003E88C0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  unsigned int v18;

  v6 = sub_1003D9B54(a1, a2);
  v7 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_DWORD *)(v6 + 728);
    v9 = *(unsigned __int8 *)(v6 + 705);
    v10 = *(unsigned __int16 *)(v6 + 708);
    v12[0] = 67109888;
    v12[1] = v8;
    v13 = 1024;
    v14 = v9;
    v15 = 1024;
    v16 = v10;
    v17 = 1024;
    v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Adaptive Latency speed modify stream:%d, inprogress:%d, curr:%d, delay:%d", (uint8_t *)v12, 0x1Au);
  }
  if (*(_DWORD *)(v6 + 728) == 5 && !*(_BYTE *)(v6 + 705))
  {
    v11 = sub_1003D9B54(a1, a2);
    if (v11)
    {
      *(_BYTE *)(v11 + 705) = 1;
      sub_1003E3920(a1, v11, a3);
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    {
      sub_1006EC9D0();
    }
  }
}

uint64_t sub_1003E8A04(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  result = sub_1003D9B54(a1, a2);
  if (result)
    return *(unsigned __int16 *)(result + 720);
  return result;
}

double sub_1003E8A20(_QWORD *a1, uint64_t a2)
{
  unsigned int v3;

  v3 = sub_1003D9424(a1, a2);
  return *(double *)(sub_1003D9B54((uint64_t)a1, v3) + 672);
}

void sub_1003E8A50(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4;

  v4 = sub_1003D9B54(a1, a2);
  if (v4)
    sub_1005D98D8(v4, a3);
}

void sub_1003E8A84(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4;

  v4 = sub_1003D9B54(a1, a2);
  if (v4)
    sub_1005D98E8(v4, a3);
}

uint64_t sub_1003E8AB8(uint64_t a1, int *a2, unsigned __int16 *a3, _WORD *a4)
{
  uint64_t v4;

  v4 = sub_100145D80(a2, xmmword_100740F38, &unk_10097B058, a3, a4);
  if ((_DWORD)v4 && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    sub_1006EC9FC();
  return v4;
}

uint64_t sub_1003E8B24(uint64_t a1, uint64_t a2, __int16 *a3, __int16 *a4)
{
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  __int16 v13;
  char v14;
  __int16 v15;
  void *__src;
  uint64_t v17;

  sub_1004806E0(a2, 3);
  sub_1004806E0(a2, 2);
  sub_10048071C(a2, 102);
  sub_1004806E0(a2, 16);
  sub_1004806E0(a2, 2);
  sub_10048071C(a2, 103);
  v7 = sub_100052DC0(0x1F4uLL);
  if (v7)
  {
    v8 = v7;
    __src = v7;
    v17 = 0x2000001F401F4;
    v9 = sub_100146958((uint64_t)&__src);
    v10 = v9;
    v11 = WORD2(v17);
    if (BYTE6(v17) == 2)
      WORD1(v17) = WORD2(v17);
    BYTE6(v17) = 15;
    if ((_DWORD)v9)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        sub_1006ECAAC();
    }
    else
    {
      if (!__src || !(_WORD)v17)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/a2dp/A2DPClient.cpp");
      BYTE6(v17) = 1;
      *(_DWORD *)((char *)&v17 + 2) = (unsigned __int16)v17;
      if (v11 < 0x100)
      {
        sub_1004806E0(a2, 17);
        sub_1004806E0(a2, v11);
      }
      else
      {
        sub_1004806E0(a2, 145);
        sub_10048071C(a2, v11);
      }
      sub_1004806C4(a2, (char *)__src, v11);
      v15 = 0;
      v14 = 0;
      v13 = 0;
      if (sub_1001DCC5C((unsigned __int16)*a3, &v13, &v15, &v14))
      {
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
          sub_1006ECA80();
      }
      else
      {
        sub_1004806E0(a2, 1);
        sub_1004806E0(a2, 7);
        sub_10048071C(a2, *a3);
        sub_10048071C(a2, v13);
        sub_10048071C(a2, v15);
        sub_1004806E0(a2, v14);
      }
      v10 = sub_1001DCC5C((unsigned __int16)*a4, &v13, &v15, &v14);
      if ((_DWORD)v10)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
          sub_1006ECA54();
      }
      else
      {
        sub_1004806E0(a2, 19);
        sub_1004806E0(a2, 7);
        sub_10048071C(a2, *a4);
        sub_10048071C(a2, v13);
        sub_10048071C(a2, v15);
        sub_1004806E0(a2, v14);
      }
    }
    sub_100053298(v8);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006ECA28();
    return 106;
  }
  return v10;
}

uint64_t sub_1003E8DF8(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5, _WORD *a6)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  int v33;
  int v34;
  char v40;
  char v41[15];
  char v42;
  char v43[15];
  uint64_t v44;
  _QWORD v45[2];
  unsigned __int16 v46;
  uint8_t buf[8];
  char v48;
  uint8_t v49[4];
  const char *v50;
  __int16 v51;
  int v52;

  v46 = a4;
  v45[0] = 0;
  v45[1] = 0;
  sub_10003415C((uint64_t)v45, a1 + 552);
  v44 = 0;
  v8 = sub_10003F8C4(a2 + 8) - *(_DWORD *)(a2 + 24);
  v9 = v8 << 16;
  if ((int)(v8 << 16) < 1)
    goto LABEL_59;
  while (2)
  {
    v10 = (char)sub_100480558(a2);
    if (v10 < 0)
    {
      v11 = sub_1004805A4(a2);
      v12 = HIWORD(v9) - 3;
    }
    else
    {
      v11 = sub_100480558(a2);
      LOWORD(v12) = v8 - 2;
    }
    v13 = v10 & 0x7F;
    switch(v13)
    {
      case 16:
        if (v11 == 2)
          goto LABEL_7;
        v27 = qword_1009997C8;
        if (!os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
          goto LABEL_38;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v11;
        v25 = v27;
        v26 = "parseA2DPDescriptor Error FC_A2DP_AVDTP_VERSION size wrong %d";
        goto LABEL_37;
      case 17:
        sub_1003E9448(a1, a2, a3, &v46, a6);
        goto LABEL_48;
      case 18:
        v14 = sub_1004805A4(a2);
        v15 = v44;
        if (v44)
        {
          v16 = v14;
          v17 = sub_10003BE44();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 720))(v17))
            v18 = 5000;
          else
            v18 = v16;
          v19 = qword_1009997C8;
          if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEBUG))
          {
            if (a3)
            {
              sub_10043E5F8((uint64_t)a3, buf);
              v31 = buf;
              if (v48 < 0)
                v31 = *(uint8_t **)buf;
              *(_DWORD *)v49 = 136446466;
              v50 = (const char *)v31;
              v51 = 1024;
              v52 = v18;
              _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Fast Connect: Received delay report stream request from device %{public}s, delay in 1/10th of milliseconds %d", v49, 0x12u);
              if (v48 < 0)
                operator delete(*(void **)buf);
            }
            else
            {
              *(_DWORD *)v49 = 136446466;
              v50 = "null";
              v51 = 1024;
              v52 = v18;
              _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Fast Connect: Received delay report stream request from device %{public}s, delay in 1/10th of milliseconds %d", v49, 0x12u);
            }
          }
          sub_100415890(v15 + 400, 100 * v18);
        }
        goto LABEL_48;
      case 19:
        if (v11 < 7)
        {
          v29 = qword_1009997C8;
          if (!os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
            goto LABEL_38;
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v11;
          v25 = v29;
          v26 = "parseA2DPDescriptor Error FC_A2DP_L2CAP_MEDIA size wrong %d";
          goto LABEL_37;
        }
        v20 = sub_1004805A4(a2);
        sub_1004805A4(a2);
        v21 = sub_1004805A4(a2);
        sub_100480558(a2);
        *(_QWORD *)buf = 0;
        v49[0] = 0;
        sub_100043758(v49);
        if (sub_1001DB044(a5, (uint64_t *)buf) || !sub_1001E3CCC(*(int **)buf))
        {
          if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
            sub_1006ECAD8(&v40, v41);
        }
        else
        {
          *(_WORD *)(sub_1001E3CCC(*(int **)buf) + 8) = v20;
          *(_WORD *)(sub_1001E3CCC(*(int **)buf) + 32) = v21;
        }
        sub_10004339C(v49);
        if (v11 < 8)
          goto LABEL_47;
        goto LABEL_46;
      default:
        if (v13 != 1)
        {
          if (v13 == 3)
          {
            if (v11 == 2)
            {
LABEL_7:
              sub_1004805A4(a2);
              goto LABEL_48;
            }
            v28 = qword_1009997C8;
            if (!os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
              goto LABEL_38;
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v11;
            v25 = v28;
            v26 = "parseA2DPDescriptor Error FC_COMMON_VERSION size wrong %d";
            goto LABEL_37;
          }
          v24 = qword_1009997C8;
          if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v13;
            v25 = v24;
            v26 = "parseA2DPDescriptor Key not recognized %d";
LABEL_37:
            _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, v26, buf, 8u);
            goto LABEL_38;
          }
          goto LABEL_38;
        }
        if (v11 < 7)
        {
          v30 = qword_1009997C8;
          if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v11;
            v25 = v30;
            v26 = "parseA2DPDescriptor Error FC_COMMON_L2CAP_CONFIG size wrong %d";
            goto LABEL_37;
          }
LABEL_38:
          sub_100480664(a2, v11);
          goto LABEL_48;
        }
        v22 = sub_1004805A4(a2);
        sub_1004805A4(a2);
        v23 = sub_1004805A4(a2);
        sub_100480558(a2);
        *(_QWORD *)buf = 0;
        v49[0] = 0;
        sub_100043758(v49);
        if (sub_1001DB044(a4, (uint64_t *)buf) || !sub_1001E3CCC(*(int **)buf))
        {
          if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
            sub_1006ECAD8(&v42, v43);
        }
        else
        {
          *(_WORD *)(sub_1001E3CCC(*(int **)buf) + 8) = v22;
          *(_WORD *)(sub_1001E3CCC(*(int **)buf) + 32) = v23;
        }
        sub_10004339C(v49);
        if (v11 >= 8)
LABEL_46:
          sub_100480664(a2, v11 - 7);
LABEL_47:
        sub_100043728(v49);
LABEL_48:
        v8 = (__int16)v12 - v11;
        v9 = v8 << 16;
        if ((int)(v8 << 16) > 0)
          continue;
        v32 = v44;
        if (v44)
        {
          v33 = sub_100415628(v44 + 400);
          sub_1002D4D3C(v32, v33);
          if (*(_BYTE *)(v32 + 704))
          {
            v34 = sub_100415628(v32 + 400);
            sub_1005D98B8(v32, v34);
          }
        }
LABEL_59:
        sub_100034234((uint64_t)v45);
        return 0;
    }
  }
}

void sub_1003E93E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E9448(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int16 *a4, _WORD *a5)
{
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *__p;
  char v26;

  v9 = sub_100480558(a2);
  if (v9)
  {
    if (sub_100052DC0(4 * v9))
    {
      *a5 = 0;
      v26 = 0;
      sub_100043758(&v26);
      if (!sub_10013B3A8(*a4, a5))
      {
        v10 = *(_QWORD *)(a1 + 512);
        if (v10)
        {
          v11 = (unsigned __int16)*a5;
          v12 = a1 + 512;
          do
          {
            v13 = *(unsigned __int16 *)(v10 + 32);
            v14 = v13 >= v11;
            if (v13 >= v11)
              v15 = (uint64_t *)v10;
            else
              v15 = (uint64_t *)(v10 + 8);
            if (v14)
              v12 = v10;
            v10 = *v15;
          }
          while (*v15);
          if (v12 != a1 + 512 && v11 >= *(unsigned __int16 *)(v12 + 32))
          {
            v16 = qword_1009997C8;
            if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_FAULT))
              sub_1006EB73C(v16, v17, v18, v19, v20, v21, v22, v23);
          }
        }
        __p = a5;
        sub_1002BB704((uint64_t **)(a1 + 504), a5, (uint64_t)&unk_100740F58, (_WORD **)&__p)[5] = a3;
        operator new();
      }
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        sub_1006ECBE8();
      sub_100043728(&v26);
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    {
      sub_1006ECB30();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
  {
    sub_1006ECB04();
  }
  return 129;
}

void sub_1003E9A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_100043728(&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E9A8C(uint64_t a1, unsigned int a2, _BYTE *a3, _BYTE *a4, unsigned __int16 *a5, unsigned int a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  int v24;
  int v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t v30;
  unsigned int v31;
  _QWORD v32[3];
  _QWORD v33[2];

  v33[0] = 0;
  v33[1] = 0;
  sub_10003415C((uint64_t)v33, a1 + 552);
  v12 = sub_1003D9B54(a1, a2);
  v13 = v12 + 400;
  v14 = *(_DWORD *)(v12 + 728);
  v15 = sub_100413FC4(v12 + 400);
  v16 = sub_1004173A0(a1 + 280, v15);
  v17 = sub_100414E0C(v12 + 400, v16);
  v18 = sub_1003D8844(a1, a2);
  *a5 = 0;
  if (v14 < 2)
  {
    if (v17)
    {
      v31 = a6;
      v20 = *(_DWORD *)(v12 + 556);
      v21 = *(_DWORD *)(v12 + 552);
      v22 = sub_1004129D8(v13);
      v30 = *(_QWORD *)(v22 + 32);
      v23 = sub_100412A80(v13);
      v24 = *(unsigned __int8 *)(v12 + 592);
      *a3 = v21;
      *a4 = v20;
      v25 = *(_DWORD *)(v22 + 44);
      LOBYTE(v32[0]) = 0;
      sub_100043758(v32);
      v26 = v23 ^ 1;
      if (!v24)
        v26 = 0;
      v27 = sub_100146C54(a2, v20, v21, v30, (v25 - v26), a5, v31);
      sub_10004339C(v32);
      if (v27)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
          sub_1006ECCF8();
      }
      else
      {
        sub_100412864(v13, *a5);
      }
      sub_100043728(v32);
    }
    else
    {
      v28 = v18;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(v28, v32);
        sub_1006ECCAC();
      }
    }
    v19 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006ECC4C();
    v19 = 1;
  }
  sub_100034234((uint64_t)v33);
  return v19;
}

void sub_1003E9CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003E9D08()
{
  JUMPOUT(0x1003E9D00);
}

void sub_1003E9D10(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;

  v4 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    if (v7 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fast Connect A2DP Report Connection attempt for %{public}s", buf, 0xCu);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  sub_1004816DC(a1, a2);
}

void sub_1003E9E08(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  NSObject *v9;
  int v10;
  _QWORD v11[2];
  uint8_t buf[4];
  uint64_t v13;

  v9 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v13) = a5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Fast Connect A2DP Setup Complete result %d", buf, 8u);
  }
  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 552);
  sub_1003D9B54(a1, a3);
  if ((_DWORD)a5)
  {
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_10092D698);
    v10 = sub_1004A35C0((uint64_t)off_100977A50, a5, 20000);
    sub_10048183C(a1, a2, v10);
  }
  sub_10048183C(a1, a2, 0);
}

void sub_1003EA13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003EA164(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4, unsigned int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v23;
  _QWORD v24[2];
  unsigned __int16 v25;
  _QWORD v26[5];
  unsigned __int16 v27;
  char v28;

  v25 = a5;
  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, a1 + 552);
  if (a5)
  {
    sub_1003DA810(a1, a5);
    v12 = *(_QWORD *)(a1 + 512);
    if (v12)
    {
      v13 = a1 + 512;
      do
      {
        v14 = *(unsigned __int16 *)(v12 + 32);
        v15 = v14 >= a5;
        if (v14 >= a5)
          v16 = (uint64_t *)v12;
        else
          v16 = (uint64_t *)(v12 + 8);
        if (v15)
          v13 = v12;
        v12 = *v16;
      }
      while (*v16);
      if (v13 != a1 + 512 && *(unsigned __int16 *)(v13 + 32) <= a5)
        sub_100394984(a1 + 504, &v25);
    }
    v17 = *(_QWORD *)(a1 + 536);
    if (!v17)
      goto LABEL_32;
    v18 = a1 + 536;
    do
    {
      v19 = *(unsigned __int16 *)(v17 + 32);
      v20 = v19 >= v25;
      if (v19 >= v25)
        v21 = (uint64_t *)v17;
      else
        v21 = (uint64_t *)(v17 + 8);
      if (v20)
        v18 = v17;
      v17 = *v21;
    }
    while (*v21);
    if (v18 != a1 + 536 && v25 >= *(unsigned __int16 *)(v18 + 32))
    {
      v23 = *sub_1003D9E10(a1 + 528, &v25);
      if (v23)
      {
        sub_100394984(a1 + 528, &v25);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472;
        v26[2] = sub_1003D9048;
        v26[3] = &unk_10092CFC0;
        v26[4] = a2;
        v27 = v25;
        v28 = 0;
        sub_1003D88F4((os_unfair_lock_s *)(a1 + 432), v26);
        sub_1002D4120(v23);
      }
    }
    else
    {
LABEL_32:
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        sub_1006ECDE4();
    }
  }
  LOBYTE(v26[0]) = 0;
  sub_100043758(v26);
  sub_100146740(a2 + 128, a3, a4, a6);
  sub_100043728(v26);
  return sub_100034234((uint64_t)v24);
}

void sub_1003EA33C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003EA368(uint64_t a1, const std::string *a2)
{
  NSObject *v3;
  void **v4;
  uint64_t v5;
  _OWORD v6[5];
  void *v7[2];
  void *v8[2];
  __int128 v9;
  void *v10[2];
  void *__p[2];
  __int128 v12;
  uint8_t buf[4];
  void **v14;

  *(_OWORD *)__p = 0u;
  v12 = 0u;
  v9 = 0u;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)v8 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_1003ED09C((uint64_t)v6);
  std::string::operator=((std::string *)&__p[1], a2);
  v3 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    if (v12 >= 0)
      v4 = &__p[1];
    else
      v4 = (void **)__p[1];
    *(_DWORD *)buf = 136315138;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Wireless Splitter submitting following error metric: fErrorCode %s", buf, 0xCu);
  }
  v5 = sub_100065478();
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v5 + 168))(v5, v6);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[1]);
  if (SHIBYTE(v8[0]) < 0)
    operator delete(v7[0]);
}

void sub_1003EA4A4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003EA4C0(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  return a1;
}

void sub_1003EA520(unsigned __int8 *a1, __int16 a2)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[5];
  __int16 v6;

  v3 = ((unint64_t)*a1 << 40) | ((unint64_t)a1[1] << 32) | ((unint64_t)a1[2] << 24) | ((unint64_t)a1[3] << 16) | ((unint64_t)a1[4] << 8) | a1[5];
  v4 = sub_1004759E0();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003EB43C;
  v5[3] = &unk_100920960;
  v5[4] = v3;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_1003EA5B4(unsigned __int8 *a1, __int16 a2, int a3)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  int v8;
  __int16 v9;

  v5 = ((unint64_t)*a1 << 40) | ((unint64_t)a1[1] << 32) | ((unint64_t)a1[2] << 24) | ((unint64_t)a1[3] << 16) | ((unint64_t)a1[4] << 8) | a1[5];
  v6 = sub_1004759E0();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1003EB4F4;
  v7[3] = &unk_10092D0A8;
  v7[4] = v5;
  v9 = a2;
  v8 = a3;
  sub_100041A34(v6, v7);
}

void sub_1003EA658(unsigned __int8 *a1, __int16 a2, int a3)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  int v8;
  __int16 v9;

  v5 = ((unint64_t)*a1 << 40) | ((unint64_t)a1[1] << 32) | ((unint64_t)a1[2] << 24) | ((unint64_t)a1[3] << 16) | ((unint64_t)a1[4] << 8) | a1[5];
  v6 = sub_1004759E0();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1003EB54C;
  v7[3] = &unk_10092D0A8;
  v7[4] = v5;
  v9 = a2;
  v8 = a3;
  sub_100041A34(v6, v7);
}

void sub_1003EA6FC()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EA784()
{
  operator delete();
}

void sub_1003EA7A8()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EA838()
{
  operator delete();
}

void sub_1003EA85C()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EA8FC()
{
  operator delete();
}

void sub_1003EA920()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EA9A4()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EAA2C()
{
  operator delete();
}

void sub_1003EAA50()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EAAD4()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EAB40()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EABAC()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EAC20()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EAC90()
{
  operator delete();
}

void sub_1003EACB4()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EAD3C()
{
  operator delete();
}

void sub_1003EAD60()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EADD0()
{
  operator delete();
}

void sub_1003EADF4()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EAE7C()
{
  operator delete();
}

void sub_1003EAEA0()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EAF28()
{
  operator delete();
}

void sub_1003EAF4C()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EAFC4()
{
  operator delete();
}

void sub_1003EAFE8()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EB06C()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EB0E4()
{
  operator delete();
}

void sub_1003EB108()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EB190()
{
  operator delete();
}

void sub_1003EB1B4()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EB220()
{
  sub_1004759E0();
  operator new();
}

uint64_t sub_1003EB298(unsigned int a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  return kdebug_trace(730021968, a1, a3, a4, 0);
}

void sub_1003EB2B4()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EB344()
{
  operator delete();
}

void sub_1003EB368()
{
  sub_1004759E0();
  operator new();
}

void sub_1003EB3DC(__int16 a1)
{
  uint64_t v2;
  _QWORD v3[4];
  __int16 v4;

  v2 = sub_1004759E0();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1003ECF74;
  v3[3] = &unk_10092D5B8;
  v4 = a1;
  sub_100041A34(v2, v3);
}

uint64_t sub_1003EB43C(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003DDEF4((_QWORD *)qword_100977DF8, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

void sub_1003EB490(id a1)
{
  operator new();
}

void sub_1003EB4D0()
{
  operator delete();
}

void sub_1003EB4F4(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  sub_1003DE278(qword_100977DF8, *(_QWORD *)(a1 + 32), *(_WORD *)(a1 + 44), *(unsigned int *)(a1 + 40));
}

uint64_t sub_1003EB54C(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003DF1B8(qword_100977DF8, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 44));
}

uint64_t sub_1003EB5A4(uint64_t a1, char a2, __int16 a3, const void *a4, unsigned int a5, char a6)
{
  void *v10;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_10092D0F8;
  *(_BYTE *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 25) = a6;
  if (a4)
  {
    v10 = malloc_type_malloc(4 * a5, 0x100004052888210uLL);
    *(_QWORD *)(a1 + 16) = v10;
    memcpy(v10, a4, 4 * a5);
  }
  *(_BYTE *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 25) = a6;
  return a1;
}

_QWORD *sub_1003EB640(_QWORD *a1)
{
  void *v2;

  *a1 = off_10092D0F8;
  v2 = (void *)a1[2];
  if (v2)
    free(v2);
  return a1;
}

void sub_1003EB678(_QWORD *a1)
{
  void *v1;

  *a1 = off_10092D0F8;
  v1 = (void *)a1[2];
  if (v1)
    free(v1);
  operator delete();
}

uint64_t sub_1003EB6C0(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003DF52C((os_unfair_lock_s *)qword_100977DF8, 0, *(unsigned __int16 *)(a1 + 12), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(unsigned __int8 *)(a1 + 25));
}

uint64_t sub_1003EB720(uint64_t a1, char a2, __int16 a3, char a4, unsigned __int8 *a5, unsigned int a6, char a7)
{
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const void **v16;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_10092D130;
  *(_BYTE *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(_BYTE *)(a1 + 14) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = a6;
  *(_BYTE *)(a1 + 25) = a7;
  if (a5)
  {
    v10 = 16 * a6;
    v11 = malloc_type_malloc(v10, 0x105204037B82EA9uLL);
    *(_QWORD *)(a1 + 16) = v11;
    memcpy(v11, a5, v10);
    if (a6)
    {
      v12 = 0;
      v13 = 16 * a6;
      do
      {
        v14 = a5[v12];
        if (v14 == 7 || v14 == 4)
        {
          v16 = (const void **)&a5[v12];
          if (*(_QWORD *)&a5[v12 + 8])
          {
            if (*((_BYTE *)v16 + 3))
            {
              *(_QWORD *)(*(_QWORD *)(a1 + 16) + v12 + 8) = malloc_type_malloc(*((unsigned __int8 *)v16 + 3), 0x100004077774924uLL);
              memcpy(*(void **)(*(_QWORD *)(a1 + 16) + v12 + 8), v16[1], *((unsigned __int8 *)v16 + 3));
            }
          }
        }
        v12 += 16;
      }
      while (v13 != v12);
    }
  }
  return a1;
}

void sub_1003EB830(uint64_t a1)
{
  sub_1003EB8B8(a1);
  operator delete();
}

uint64_t sub_1003EB854(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003DF994((os_unfair_lock_s *)qword_100977DF8, 0, *(unsigned __int16 *)(a1 + 12), *(unsigned __int8 *)(a1 + 14), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(unsigned __int8 *)(a1 + 25));
}

uint64_t sub_1003EB8B8(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  void *v10;

  *(_QWORD *)a1 = off_10092D130;
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(a1 + 24);
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(unsigned __int8 *)(v6 + v4);
        if (v7 == 7 || v7 == 4)
        {
          v9 = v6 + v4;
          v10 = *(void **)(v9 + 8);
          if (v10)
          {
            if (*(_BYTE *)(v9 + 3))
            {
              free(v10);
              v3 = *(unsigned __int8 *)(a1 + 24);
            }
          }
        }
        ++v5;
        v4 += 16;
      }
      while (v5 < v3);
      v2 = *(void **)(a1 + 16);
    }
    free(v2);
  }
  return a1;
}

uint64_t sub_1003EB94C(uint64_t a1, char a2, __int16 a3, char a4, char a5, __int16 a6, unsigned __int8 *a7, unsigned int a8)
{
  size_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void **v17;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_10092D168;
  *(_BYTE *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(_BYTE *)(a1 + 14) = a4;
  *(_BYTE *)(a1 + 15) = a5;
  *(_WORD *)(a1 + 16) = a6;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = a8;
  if (a7)
  {
    v11 = 16 * a8;
    v12 = malloc_type_malloc(v11, 0x105204037B82EA9uLL);
    *(_QWORD *)(a1 + 24) = v12;
    memcpy(v12, a7, v11);
    if (a8)
    {
      v13 = 0;
      v14 = 16 * a8;
      do
      {
        v15 = a7[v13];
        if (v15 == 7 || v15 == 4)
        {
          v17 = (const void **)&a7[v13];
          if (*(_QWORD *)&a7[v13 + 8])
          {
            if (*((_BYTE *)v17 + 3))
            {
              *(_QWORD *)(*(_QWORD *)(a1 + 24) + v13 + 8) = malloc_type_malloc(*((unsigned __int8 *)v17 + 3), 0x100004077774924uLL);
              memcpy(*(void **)(*(_QWORD *)(a1 + 24) + v13 + 8), v17[1], *((unsigned __int8 *)v17 + 3));
            }
          }
        }
        v13 += 16;
      }
      while (v14 != v13);
    }
  }
  return a1;
}

void sub_1003EBA60(uint64_t a1)
{
  sub_1003EBAEC(a1);
  operator delete();
}

uint64_t sub_1003EBA84(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003DFFFC(qword_100977DF8, *(unsigned __int8 *)(a1 + 10), *(unsigned __int16 *)(a1 + 12), *(unsigned __int8 *)(a1 + 14), *(unsigned __int8 *)(a1 + 15), *(unsigned __int16 *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_1003EBAEC(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  void *v10;

  *(_QWORD *)a1 = off_10092D168;
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(a1 + 32);
    if (*(_BYTE *)(a1 + 32))
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v6 = *(_QWORD *)(a1 + 24);
        v7 = *(unsigned __int8 *)(v6 + v4);
        if (v7 == 7 || v7 == 4)
        {
          v9 = v6 + v4;
          v10 = *(void **)(v9 + 8);
          if (v10)
          {
            if (*(_BYTE *)(v9 + 3))
            {
              free(v10);
              v3 = *(unsigned __int8 *)(a1 + 32);
            }
          }
        }
        ++v5;
        v4 += 16;
      }
      while (v5 < v3);
      v2 = *(void **)(a1 + 24);
    }
    free(v2);
  }
  return a1;
}

void sub_1003EBB84()
{
  operator delete();
}

uint64_t sub_1003EBB98(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003E0370((os_unfair_lock_s *)qword_100977DF8, 0, *(unsigned __int16 *)(a1 + 12), 0, *(unsigned __int8 *)(a1 + 15));
}

uint64_t sub_1003EBBF4(uint64_t a1, char a2, __int16 a3, unsigned __int8 *a4, unsigned int a5, char a6)
{
  size_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v15;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_10092D1D8;
  *(_BYTE *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = a5;
  *(_BYTE *)(a1 + 25) = a6;
  if (a4)
  {
    v9 = 16 * a5;
    v10 = malloc_type_malloc(v9, 0x105204037B82EA9uLL);
    *(_QWORD *)(a1 + 16) = v10;
    memcpy(v10, a4, v9);
    if (a5)
    {
      v11 = 0;
      v12 = 16 * a5;
      do
      {
        v13 = a4[v11];
        if (v13 == 7 || v13 == 4)
        {
          v15 = (const void **)&a4[v11];
          if (*(_QWORD *)&a4[v11 + 8])
          {
            if (*((_BYTE *)v15 + 3))
            {
              *(_QWORD *)(*(_QWORD *)(a1 + 16) + v11 + 8) = malloc_type_malloc(*((unsigned __int8 *)v15 + 3), 0x100004077774924uLL);
              memcpy(*(void **)(*(_QWORD *)(a1 + 16) + v11 + 8), v15[1], *((unsigned __int8 *)v15 + 3));
            }
          }
        }
        v11 += 16;
      }
      while (v12 != v11);
    }
  }
  return a1;
}

void sub_1003EBD00(uint64_t a1)
{
  sub_1003EBD80(a1);
  operator delete();
}

uint64_t sub_1003EBD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003E06E4(qword_100977DF8, 0, *(unsigned __int16 *)(a1 + 12), a4, 0, *(unsigned __int8 *)(a1 + 25));
}

uint64_t sub_1003EBD80(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  void *v10;

  *(_QWORD *)a1 = off_10092D1D8;
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(a1 + 24);
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(unsigned __int8 *)(v6 + v4);
        if (v7 == 7 || v7 == 4)
        {
          v9 = v6 + v4;
          v10 = *(void **)(v9 + 8);
          if (v10)
          {
            if (*(_BYTE *)(v9 + 3))
            {
              free(v10);
              v3 = *(unsigned __int8 *)(a1 + 24);
            }
          }
        }
        ++v5;
        v4 += 16;
      }
      while (v5 < v3);
      v2 = *(void **)(a1 + 16);
    }
    free(v2);
  }
  return a1;
}

void sub_1003EBE18()
{
  operator delete();
}

uint64_t sub_1003EBE2C(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003E0C38((os_unfair_lock_s *)qword_100977DF8, 0, *(unsigned __int16 *)(a1 + 12), *(unsigned __int16 *)(a1 + 14), *(unsigned __int8 *)(a1 + 16));
}

void sub_1003EBE8C()
{
  operator delete();
}

uint64_t sub_1003EBEA0(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003E0A08(qword_100977DF8, *(unsigned __int8 *)(a1 + 10), *(unsigned __int16 *)(a1 + 12));
}

void sub_1003EBEF8()
{
  operator delete();
}

uint64_t sub_1003EBF0C(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003E2934(qword_100977DF8, *(unsigned __int8 *)(a1 + 10), *(unsigned __int16 *)(a1 + 12));
}

void sub_1003EBF64()
{
  operator delete();
}

uint64_t sub_1003EBF78()
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003E2B2C(qword_100977DF8);
}

uint64_t sub_1003EBFC4(uint64_t a1, char a2, const void *a3, unsigned int a4)
{
  size_t v6;
  void *v7;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_10092D2F0;
  *(_BYTE *)(a1 + 10) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = a4;
  if (a3 && a4)
  {
    v6 = 2 * a4;
    v7 = malloc_type_malloc(v6, 0x1000040BDFB0063uLL);
    *(_QWORD *)(a1 + 16) = v7;
    memcpy(v7, a3, v6);
  }
  return a1;
}

_QWORD *sub_1003EC044(_QWORD *a1)
{
  void *v2;

  *a1 = off_10092D2F0;
  v2 = (void *)a1[2];
  if (v2)
    free(v2);
  return a1;
}

void sub_1003EC07C(_QWORD *a1)
{
  void *v1;

  *a1 = off_10092D2F0;
  v1 = (void *)a1[2];
  if (v1)
    free(v1);
  operator delete();
}

uint64_t sub_1003EC0C4(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003E1658(qword_100977DF8, *(unsigned __int8 *)(a1 + 10), *(__int16 **)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
}

uint64_t sub_1003EC11C(uint64_t a1, char a2, const void *a3, unsigned int a4, __int16 a5, char a6)
{
  size_t v8;
  void *v9;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_10092D328;
  *(_BYTE *)(a1 + 10) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = a5;
  *(_BYTE *)(a1 + 28) = a6;
  if (a3 && a4)
  {
    v8 = 2 * a4;
    v9 = malloc_type_malloc(v8, 0x1000040BDFB0063uLL);
    *(_QWORD *)(a1 + 16) = v9;
    memcpy(v9, a3, v8);
  }
  return a1;
}

_QWORD *sub_1003EC1A4(_QWORD *a1)
{
  void *v2;

  *a1 = off_10092D328;
  v2 = (void *)a1[2];
  if (v2)
    free(v2);
  return a1;
}

void sub_1003EC1DC(_QWORD *a1)
{
  void *v1;

  *a1 = off_10092D328;
  v1 = (void *)a1[2];
  if (v1)
    free(v1);
  operator delete();
}

uint64_t sub_1003EC224(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003E1A50((os_unfair_lock_s *)qword_100977DF8, 0, *(unsigned __int16 **)(a1 + 16), *(unsigned __int8 *)(a1 + 24), 0, *(unsigned __int8 *)(a1 + 28));
}

uint64_t sub_1003EC284(uint64_t a1, char a2, const void *a3, unsigned int a4)
{
  size_t v6;
  void *v7;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_10092D360;
  *(_BYTE *)(a1 + 10) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = a4;
  if (a3 && a4)
  {
    v6 = 2 * a4;
    v7 = malloc_type_malloc(v6, 0x1000040BDFB0063uLL);
    *(_QWORD *)(a1 + 16) = v7;
    memcpy(v7, a3, v6);
  }
  return a1;
}

_QWORD *sub_1003EC304(_QWORD *a1)
{
  void *v2;

  *a1 = off_10092D360;
  v2 = (void *)a1[2];
  if (v2)
    free(v2);
  return a1;
}

void sub_1003EC33C(_QWORD *a1)
{
  void *v1;

  *a1 = off_10092D360;
  v1 = (void *)a1[2];
  if (v1)
    free(v1);
  operator delete();
}

uint64_t sub_1003EC384(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003E1E1C(qword_100977DF8, *(unsigned __int8 *)(a1 + 10), *(__int16 **)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
}

uint64_t sub_1003EC3DC(uint64_t a1, char a2, const void *a3, unsigned int a4, __int16 a5, char a6)
{
  size_t v8;
  void *v9;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_10092D398;
  *(_BYTE *)(a1 + 10) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = a5;
  *(_BYTE *)(a1 + 28) = a6;
  if (a3 && a4)
  {
    v8 = 2 * a4;
    v9 = malloc_type_malloc(v8, 0x1000040BDFB0063uLL);
    *(_QWORD *)(a1 + 16) = v9;
    memcpy(v9, a3, v8);
  }
  return a1;
}

_QWORD *sub_1003EC464(_QWORD *a1)
{
  void *v2;

  *a1 = off_10092D398;
  v2 = (void *)a1[2];
  if (v2)
    free(v2);
  return a1;
}

void sub_1003EC49C(_QWORD *a1)
{
  void *v1;

  *a1 = off_10092D398;
  v1 = (void *)a1[2];
  if (v1)
    free(v1);
  operator delete();
}

uint64_t sub_1003EC4E4(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003E20BC((os_unfair_lock_s *)qword_100977DF8, 0, *(unsigned __int16 **)(a1 + 16), *(unsigned __int8 *)(a1 + 24), 0, *(unsigned __int8 *)(a1 + 28));
}

uint64_t sub_1003EC544(uint64_t a1, char a2, const void *a3, unsigned int a4, __int16 a5, char a6)
{
  size_t v8;
  void *v9;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_10092D3D0;
  *(_BYTE *)(a1 + 10) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = a5;
  *(_BYTE *)(a1 + 28) = a6;
  if (a3 && a4)
  {
    v8 = 2 * a4;
    v9 = malloc_type_malloc(v8, 0x1000040BDFB0063uLL);
    *(_QWORD *)(a1 + 16) = v9;
    memcpy(v9, a3, v8);
  }
  return a1;
}

_QWORD *sub_1003EC5CC(_QWORD *a1)
{
  void *v2;

  *a1 = off_10092D3D0;
  v2 = (void *)a1[2];
  if (v2)
    free(v2);
  return a1;
}

void sub_1003EC604(_QWORD *a1)
{
  void *v1;

  *a1 = off_10092D3D0;
  v1 = (void *)a1[2];
  if (v1)
    free(v1);
  operator delete();
}

uint64_t sub_1003EC64C(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003E248C((os_unfair_lock_s *)qword_100977DF8, 0, *(unsigned __int16 **)(a1 + 16), *(unsigned __int8 *)(a1 + 24), 0, *(unsigned __int8 *)(a1 + 28));
}

uint64_t sub_1003EC6AC(uint64_t a1, char a2, __int16 a3, unsigned __int8 *a4, unsigned int a5)
{
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v14;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_10092D408;
  *(_BYTE *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = a5;
  if (a4)
  {
    v8 = 16 * a5;
    v9 = malloc_type_malloc(v8, 0x105204037B82EA9uLL);
    *(_QWORD *)(a1 + 16) = v9;
    memcpy(v9, a4, v8);
    if (a5)
    {
      v10 = 0;
      v11 = 16 * a5;
      do
      {
        v12 = a4[v10];
        if (v12 == 7 || v12 == 4)
        {
          v14 = (const void **)&a4[v10];
          if (*(_QWORD *)&a4[v10 + 8])
          {
            if (*((_BYTE *)v14 + 3))
            {
              *(_QWORD *)(*(_QWORD *)(a1 + 16) + v10 + 8) = malloc_type_malloc(*((unsigned __int8 *)v14 + 3), 0x100004077774924uLL);
              memcpy(*(void **)(*(_QWORD *)(a1 + 16) + v10 + 8), v14[1], *((unsigned __int8 *)v14 + 3));
            }
          }
        }
        v10 += 16;
      }
      while (v11 != v10);
    }
  }
  return a1;
}

void sub_1003EC7B4(uint64_t a1)
{
  sub_1003EC830(a1);
  operator delete();
}

uint64_t sub_1003EC7D8(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003E2670(qword_100977DF8, *(unsigned __int8 *)(a1 + 10), *(unsigned __int16 *)(a1 + 12));
}

uint64_t sub_1003EC830(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  void *v10;

  *(_QWORD *)a1 = off_10092D408;
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(a1 + 24);
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(unsigned __int8 *)(v6 + v4);
        if (v7 == 7 || v7 == 4)
        {
          v9 = v6 + v4;
          v10 = *(void **)(v9 + 8);
          if (v10)
          {
            if (*(_BYTE *)(v9 + 3))
            {
              free(v10);
              v3 = *(unsigned __int8 *)(a1 + 24);
            }
          }
        }
        ++v5;
        v4 += 16;
      }
      while (v5 < v3);
      v2 = *(void **)(a1 + 16);
    }
    free(v2);
  }
  return a1;
}

void sub_1003EC8C8()
{
  operator delete();
}

uint64_t sub_1003EC8DC(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003E2864(qword_100977DF8, 0, *(_WORD *)(a1 + 12));
}

uint64_t sub_1003EC938(uint64_t a1, char a2, __int16 a3, const void *a4, size_t size)
{
  size_t v7;
  void *v8;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_10092D478;
  *(_BYTE *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = size;
  if (a4 && (_DWORD)size)
  {
    v7 = size;
    v8 = malloc_type_malloc(size, 0x100004077774924uLL);
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v8, a4, v7);
  }
  return a1;
}

_QWORD *sub_1003EC9BC(_QWORD *a1)
{
  void *v2;

  *a1 = off_10092D478;
  v2 = (void *)a1[2];
  if (v2)
    free(v2);
  return a1;
}

void sub_1003EC9F4(_QWORD *a1)
{
  void *v1;

  *a1 = off_10092D478;
  v1 = (void *)a1[2];
  if (v1)
    free(v1);
  operator delete();
}

uint64_t sub_1003ECA3C(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003E14A8(qword_100977DF8, *(unsigned __int8 *)(a1 + 10), *(_WORD *)(a1 + 12), *(const void **)(a1 + 16), *(unsigned __int16 *)(a1 + 24));
}

uint64_t sub_1003ECA98(uint64_t a1, char a2, __int16 a3, const void *a4, size_t size, char a6)
{
  size_t v8;
  void *v9;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_10092D4B0;
  *(_BYTE *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = size;
  *(_BYTE *)(a1 + 26) = a6;
  if (a4 && (_DWORD)size)
  {
    v8 = size;
    v9 = malloc_type_malloc(size, 0x100004077774924uLL);
    *(_QWORD *)(a1 + 16) = v9;
    memcpy(v9, a4, v8);
  }
  return a1;
}

_QWORD *sub_1003ECB20(_QWORD *a1)
{
  void *v2;

  *a1 = off_10092D4B0;
  v2 = (void *)a1[2];
  if (v2)
    free(v2);
  return a1;
}

void sub_1003ECB58(_QWORD *a1)
{
  void *v1;

  *a1 = off_10092D4B0;
  v1 = (void *)a1[2];
  if (v1)
    free(v1);
  operator delete();
}

uint64_t sub_1003ECBA0(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003E1588(qword_100977DF8, 0, *(_WORD *)(a1 + 12));
}

void sub_1003ECC00()
{
  operator delete();
}

uint64_t sub_1003ECC14(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003E2BAC((os_unfair_lock_s *)qword_100977DF8, *(unsigned __int8 *)(a1 + 10), *(unsigned __int16 *)(a1 + 12));
}

void sub_1003ECC6C()
{
  operator delete();
}

uint64_t sub_1003ECC80(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003E2D90(qword_100977DF8, 0, *(unsigned __int16 *)(a1 + 12));
}

uint64_t sub_1003ECCD8(uint64_t a1, char a2, __int16 a3, char a4, unsigned __int8 *a5, unsigned int a6, char a7)
{
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const void **v16;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_10092D558;
  *(_BYTE *)(a1 + 10) = a2;
  *(_WORD *)(a1 + 12) = a3;
  *(_BYTE *)(a1 + 14) = a4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = a6;
  *(_BYTE *)(a1 + 25) = a7;
  if (a5)
  {
    v10 = 16 * a6;
    v11 = malloc_type_malloc(v10, 0x105204037B82EA9uLL);
    *(_QWORD *)(a1 + 16) = v11;
    memcpy(v11, a5, v10);
    if (a6)
    {
      v12 = 0;
      v13 = 16 * a6;
      do
      {
        v14 = a5[v12];
        if (v14 == 7 || v14 == 4)
        {
          v16 = (const void **)&a5[v12];
          if (*(_QWORD *)&a5[v12 + 8])
          {
            if (*((_BYTE *)v16 + 3))
            {
              *(_QWORD *)(*(_QWORD *)(a1 + 16) + v12 + 8) = malloc_type_malloc(*((unsigned __int8 *)v16 + 3), 0x100004077774924uLL);
              memcpy(*(void **)(*(_QWORD *)(a1 + 16) + v12 + 8), v16[1], *((unsigned __int8 *)v16 + 3));
            }
          }
        }
        v12 += 16;
      }
      while (v13 != v12);
    }
  }
  return a1;
}

void sub_1003ECDE8(uint64_t a1)
{
  sub_1003ECE70(a1);
  operator delete();
}

uint64_t sub_1003ECE0C(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003E2EAC((os_unfair_lock_s *)qword_100977DF8, 0, *(unsigned __int16 *)(a1 + 12), *(unsigned __int8 *)(a1 + 14), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(unsigned __int8 *)(a1 + 25));
}

uint64_t sub_1003ECE70(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  void *v10;

  *(_QWORD *)a1 = off_10092D558;
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(a1 + 24);
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(unsigned __int8 *)(v6 + v4);
        if (v7 == 7 || v7 == 4)
        {
          v9 = v6 + v4;
          v10 = *(void **)(v9 + 8);
          if (v10)
          {
            if (*(_BYTE *)(v9 + 3))
            {
              free(v10);
              v3 = *(unsigned __int8 *)(a1 + 24);
            }
          }
        }
        ++v5;
        v4 += 16;
      }
      while (v5 < v3);
      v2 = *(void **)(a1 + 16);
    }
    free(v2);
  }
  return a1;
}

void sub_1003ECF08()
{
  operator delete();
}

uint64_t sub_1003ECF1C(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  return sub_1003E3260(qword_100977DF8, *(unsigned __int16 *)(a1 + 12), *(unsigned __int8 *)(a1 + 10), *(unsigned __int16 *)(a1 + 14));
}

void sub_1003ECF74(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092D0C8);
  sub_1003E3C10(qword_100977DF8, *(unsigned __int16 *)(a1 + 32));
}

_BYTE *sub_1003ECFC4(uint64_t a1)
{
  int v2;
  uint64_t v3;
  char v5;
  int v6;
  __int16 v7;

  v7 = 0;
  v6 = 0;
  v5 = 0;
  sub_100043758(&v5);
  v2 = sub_100182620(*(_QWORD *)(a1 + 32), (uint64_t)&v6);
  sub_10004339C(&v5);
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006ECE48();
  }
  else
  {
    if (qword_100977E00 != -1)
      dispatch_once(&qword_100977E00, &stru_10092D0C8);
    sub_1003E3A6C(qword_100977DF8, *(_DWORD *)(a1 + 48), v3, *(_DWORD *)(a1 + 52), *(unsigned __int16 *)(a1 + 56), *(_QWORD *)(a1 + 40));
  }
  return sub_100043728(&v5);
}

void sub_1003ED088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_100043728(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1003ED09C(uint64_t a1)
{
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  sub_100091AE8((_QWORD *)(a1 + 80), "");
  sub_100091AE8((_QWORD *)(a1 + 104), "");
  sub_100091AE8((_QWORD *)(a1 + 128), "");
  sub_100091AE8((_QWORD *)(a1 + 152), "");
  return a1;
}

void sub_1003ED124(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[151] < 0)
    operator delete(*v4);
  if (v2[127] < 0)
    operator delete(*v3);
  if (v2[103] < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void sub_1003ED170(id a1)
{
  operator new();
}

void sub_1003ED1B0()
{
  operator delete();
}

void sub_1003ED1D4(id a1)
{
  operator new();
}

void sub_1003ED214()
{
  operator delete();
}

void sub_1003ED238(id a1)
{
  operator new();
}

void sub_1003ED350()
{
  operator delete();
}

void sub_1003ED374(id a1)
{
  operator new();
}

void sub_1003ED3B4()
{
  operator delete();
}

void sub_1003ED3D8(id a1)
{
  operator new();
}

void sub_1003ED418()
{
  operator delete();
}

void sub_1003ED43C(id a1)
{
  operator new();
}

void sub_1003ED47C()
{
  operator delete();
}

void sub_1003ED4A0(id a1)
{
  operator new();
}

void sub_1003ED4E0()
{
  operator delete();
}

void sub_1003ED504(id a1)
{
  operator new();
}

void sub_1003ED544()
{
  operator delete();
}

void sub_1003ED568(id a1)
{
  operator new();
}

void sub_1003ED5A8(id a1)
{
  operator new();
}

void sub_1003ED5E8()
{
  operator delete();
}

void sub_1003ED60C(id a1)
{
  operator new();
}

void sub_1003ED64C()
{
  operator delete();
}

void sub_1003ED670(id a1)
{
  operator new();
}

void sub_1003ED6B0()
{
  operator delete();
}

uint64_t sub_1003ED6D4(uint64_t result, int a2, float a3)
{
  *(float *)result = a3;
  *(_DWORD *)(result + 4) = a2;
  *(_WORD *)(result + 8) = 2082;
  return result;
}

void sub_1003ED6E8(float a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  int v4;
  int v5;
  _QWORD *v6;

  if (v5 >= 0)
    v6 = a3;
  else
    v6 = (_QWORD *)*a3;
  *(float *)a4 = a1;
  *(_DWORD *)(a4 + 4) = v4;
  *(_WORD *)(a4 + 8) = 2082;
  *(_QWORD *)(a4 + 10) = v6;
}

uint64_t sub_1003ED738(uint64_t a1)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  __int128 v14;
  int v15;
  __int128 v16;
  int v17;
  __int128 v18;
  int v19;
  __n128 v20;
  __int128 v21;
  int v22;
  __int128 v23;
  int v24;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;
  __int128 v29;
  int v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;
  __int128 v35;
  int v36;
  __int128 v37;
  int v38;
  __int128 v39;
  int v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;
  __int128 v45;
  int v46;
  __int128 v47;
  int v48;
  __int128 v49;
  int v50;
  __int128 v51;
  int v52;
  __int128 v53;
  int v54;
  __int128 v55;
  int v56;
  __int128 v57;
  int v58;
  __int128 v59;
  int v60;
  __int128 v61;
  int v62;
  __n128 v63;

  *(_QWORD *)(a1 + 24) = off_10092D818;
  v2 = a1 + 24;
  *(_QWORD *)a1 = off_10092D768;
  *(_QWORD *)(a1 + 8) = off_10092D7C0;
  *(_QWORD *)(a1 + 16) = off_10092D7E8;
  *(_BYTE *)(a1 + 32) = 0;
  sub_1000160D0(a1 + 40);
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  *(_QWORD *)(a1 + 232) = a1 + 240;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 280) = a1 + 288;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 384) = a1 + 392;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = a1 + 416;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_BYTE *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = a1 + 520;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 536) = a1 + 544;
  v62 = 0;
  v61 = xmmword_10073B38C;
  sub_100042F44(&v63, (__n128 *)&v61);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v59 = xmmword_10073B314;
  v60 = 0;
  sub_100042F44(&v63, (__n128 *)&v59);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v57 = xmmword_10073B328;
  v58 = 0;
  sub_100042F44(&v63, (__n128 *)&v57);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v55 = xmmword_10073B4A4;
  v56 = 0;
  sub_100042F44(&v63, (__n128 *)&v55);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v53 = xmmword_10073B490;
  v54 = 0;
  sub_100042F44(&v63, (__n128 *)&v53);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v51 = xmmword_10073B468;
  v52 = 0;
  sub_100042F44(&v63, (__n128 *)&v51);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v49 = xmmword_10073B4CC;
  v50 = 0;
  sub_100042F44(&v63, (__n128 *)&v49);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v47 = xmmword_10073B4E0;
  v48 = -805294830;
  sub_100042F44(&v63, (__n128 *)&v47);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v45 = xmmword_10073B4F4;
  v46 = -587704915;
  sub_100042F44(&v63, (__n128 *)&v45);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v43 = xmmword_10073B508;
  v44 = -1765695659;
  sub_100042F44(&v63, (__n128 *)&v43);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v41 = xmmword_10073B51C;
  v42 = -601477452;
  sub_100042F44(&v63, (__n128 *)&v41);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v39 = xmmword_10073B5FC;
  v40 = 1880579407;
  sub_100042F44(&v63, (__n128 *)&v39);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v37 = xmmword_10073B530;
  v38 = -1171415960;
  sub_100042F44(&v63, (__n128 *)&v37);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v35 = xmmword_10073B638;
  v36 = -815610143;
  sub_100042F44(&v63, (__n128 *)&v35);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v33 = xmmword_10073B64C;
  v34 = 1323364242;
  sub_100042F44(&v63, (__n128 *)&v33);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v31 = xmmword_10073B660;
  v32 = 0;
  sub_100042F44(&v63, (__n128 *)&v31);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v29 = xmmword_10073B4B8;
  v30 = 0;
  sub_100042F44(&v63, (__n128 *)&v29);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v27 = xmmword_10073B594;
  v28 = 0;
  sub_100042F44(&v63, (__n128 *)&v27);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v25 = xmmword_10073B5A8;
  v26 = 1729713604;
  sub_100042F44(&v63, (__n128 *)&v25);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v23 = xmmword_10073B688;
  v24 = 0;
  sub_100042F44(&v63, (__n128 *)&v23);
  sub_10000BED0((uint64_t **)(a1 + 232), (unsigned __int8 *)&v63, (uint64_t)&v63);
  v21 = xmmword_10073B580;
  v22 = 0;
  sub_100042F44(&v63, (__n128 *)&v21);
  v20.n128_u64[0] = (unint64_t)&v63;
  v3 = (uint64_t **)sub_1003FA88C((uint64_t **)(a1 + 280), (unsigned __int8 *)&v63, (uint64_t)&unk_100740F58, &v20);
  v18 = xmmword_10073B610;
  v19 = 295542594;
  sub_100042F44(&v20, (__n128 *)&v18);
  sub_10000BED0(v3 + 7, (unsigned __int8 *)&v20, (uint64_t)&v20);
  v16 = xmmword_10073B580;
  v17 = 0;
  sub_100042F44(&v63, (__n128 *)&v16);
  v20.n128_u64[0] = (unint64_t)&v63;
  v4 = (uint64_t **)sub_1003FA88C((uint64_t **)(a1 + 280), (unsigned __int8 *)&v63, (uint64_t)&unk_100740F58, &v20);
  v14 = xmmword_10073B624;
  v15 = 312319810;
  sub_100042F44(&v20, (__n128 *)&v14);
  sub_10000BED0(v4 + 7, (unsigned __int8 *)&v20, (uint64_t)&v20);
  v5 = sub_100038E50();
  sub_1003F93A0(v5 + 208, v2);
  v6 = sub_100038E50();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a1 + 304);
  v7 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v8 = *(void **)(a1 + 488);
  *(_QWORD *)(a1 + 488) = v7;

  v9 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v10 = *(void **)(a1 + 496);
  *(_QWORD *)(a1 + 496) = v9;

  v11 = objc_msgSend(objc_alloc((Class)NSMapTable), "initWithKeyOptions:valueOptions:capacity:", 0x10000, 256, 0);
  v12 = *(void **)(a1 + 504);
  *(_QWORD *)(a1 + 504) = v11;

  return a1;
}

void sub_1003EDE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  _QWORD **v17;
  void **v19;
  void *v20;
  void *v21;

  sub_10001A82C(v16 + 296, *(_QWORD **)(v11 + 544));
  sub_1003FA834(v16 + 272, *(char **)(v11 + 520));

  v19 = (void **)(v16 + 96);
  sub_1003FA7A0((_QWORD *)(v16 + 192));
  sub_1003FA750(v16 + 168, *(_QWORD **)(v11 + 416));
  sub_10001A82C(v16 + 144, *(_QWORD **)(v11 + 392));
  v20 = *(void **)(v11 + 360);
  if (v20)
  {
    *(_QWORD *)(v11 + 368) = v20;
    operator delete(v20);
  }
  v21 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v11 + 344) = v21;
    operator delete(v21);
  }
  if (*(char *)(v11 + 327) < 0)
    operator delete(*v15);
  sub_1003FA704(v14, *v12);
  sub_10001A82C(a10, *v17);
  sub_10001A82C(v13, *(_QWORD **)v16);
  sub_100069BDC(a11);
  _Unwind_Resume(a1);
}

void sub_1003EDF48()
{
  uint64_t v0;
  int v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  void (***v5)(_QWORD, uint8_t *);
  void *__p;
  char v7;
  uint8_t buf[8];
  uint64_t v9;
  uint64_t v10;
  char v11;

  v11 = 0;
  v0 = sub_100027F68();
  sub_100091AE8(buf, "GATT");
  sub_100091AE8(&__p, "DUMMY_DIS");
  v1 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v0 + 72))(v0, buf, &__p, &v11);
  if (v11)
    v2 = v1;
  else
    v2 = 0;
  if (v7 < 0)
    operator delete(__p);
  if (SHIBYTE(v10) < 0)
    operator delete(*(void **)buf);
  v3 = qword_100999820;
  v4 = os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: Creating Dumy DIS entry, with dummy data", buf, 2u);
    }
    operator new();
  }
  if (v4)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Creating real DIS entry", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v9 = 0;
  v10 = 0;
  v5 = (void (***)(_QWORD, uint8_t *))sub_10003BE44();
  (**v5)(v5, buf);
  operator new();
}

void sub_1003EF1A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  operator delete();
}

void sub_1003EF428(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[19];
  v4 = (uint64_t)(a1 + 19);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[17];
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v11 = v5 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)sub_10007ABA0(v4, v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v8 = v15 + 8;
    v18 = (char *)a1[17];
    v17 = (char *)a1[18];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)a1[17];
    }
    a1[17] = v15;
    a1[18] = v8;
    a1[19] = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  a1[18] = v8;
}

void sub_1003EF4F8(void **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)sub_10007ABA0(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

void sub_1003EF5D0(uint64_t a1)
{
  if (qword_10097AC28 != -1)
    dispatch_once(&qword_10097AC28, &stru_10092DB00);
  sub_100484B48(qword_10097AC20, a1);
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10092DB20);
  sub_100695F80((_QWORD *)qword_1009778B0, a1 + 8);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10092DB40);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 16);
  operator new();
}

void sub_1003EFD70()
{
  operator delete();
}

void sub_1003EFE2C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[15];
  v4 = (uint64_t)(a1 + 15);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[13];
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v11 = v5 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)sub_10007ABA0(v4, v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v8 = v15 + 8;
    v18 = (char *)a1[13];
    v17 = (char *)a1[14];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)a1[13];
    }
    a1[13] = v15;
    a1[14] = v8;
    a1[15] = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  a1[14] = v8;
}

_BYTE *sub_1003EFEFC(uint64_t a1)
{
  uint64_t *v2;
  unsigned __int16 v3;
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  std::string::size_type size;
  uint64_t *i;
  unsigned __int8 *v22;
  NSObject *v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  id v27;
  __int128 *v28;
  __int128 *v29;
  NSObject *v30;
  uint64_t v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  void *__p;
  uint64_t *v39;
  uint64_t v40;
  _QWORD v41[2];
  _OWORD v42[3];
  void (*v43)();
  char v44;
  uint8_t v45[4];
  __int128 *v46;
  unsigned __int8 uu[8];
  uint64_t v48;
  _BYTE v49[128];
  __int128 buf;
  int v51;
  char v52;
  std::string src;

  v44 = 0;
  sub_100043758(&v44);
  if (sub_100225224())
  {
    if (sub_10022AF50())
    {
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        sub_1006ED15C();
    }
    else
    {
      v42[0] = *(_OWORD *)off_10092D820;
      v42[1] = *(_OWORD *)off_10092D830;
      v42[2] = *(_OWORD *)off_10092D840;
      v43 = sub_1003F0A24;
      sub_10020E1CC((uint64_t)v42);
      sub_10004339C(&v44);
      v41[0] = 0;
      v41[1] = 0;
      sub_10003415C((uint64_t)v41, a1 + 40);
      __p = 0;
      v39 = 0;
      v40 = 0;
      sub_10001FE6C(&__p, a1 + 360);
      *(_QWORD *)(a1 + 368) = *(_QWORD *)(a1 + 360);
      *(_BYTE *)(a1 + 32) = 1;
      v2 = (uint64_t *)__p;
      if (__p != v39)
      {
        v3 = 0;
        v4 = 0;
        while (1)
        {
          v5 = *v2;
          if (sub_1003F0A90(a1, *v2, 0))
          {
            v6 = *(_QWORD *)(a1 + 112);
            if (v5 == v6 || v5 == *(_QWORD *)(a1 + 128))
            {
              v30 = qword_100999820;
              if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
                sub_1006ED0DC(v5 == v6, v30, v31);
              *(_BYTE *)(a1 + 32) = 0;
              goto LABEL_74;
            }
            v7 = qword_100999820;
            if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
            {
              sub_1005BAE8C((_QWORD *)v5, &src);
              v8 = (src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? &src
                 : (std::string *)src.__r_.__value_.__r.__words[0];
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v8;
              _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to publish service %{public}s!", (uint8_t *)&buf, 0xCu);
              if (SHIBYTE(src.__r_.__value_.__r.__words[2]) < 0)
                operator delete(src.__r_.__value_.__l.__data_);
            }
          }
          else if (v2 == __p)
          {
            v3 = **(_WORD **)(v5 + 8);
          }
          else
          {
            v4 = *(_WORD *)(v5 + 48);
          }
          if (++v2 == v39)
            goto LABEL_22;
        }
      }
      v4 = 0;
      v3 = 0;
LABEL_22:
      v37 = 0;
      v9 = sub_100027F68();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9))
      {
        v10 = sub_100027F68();
        sub_100091AE8(&src, "CATT");
        sub_100091AE8(&buf, "DisableSdp");
        (*(void (**)(uint64_t, std::string *, __int128 *, char *))(*(_QWORD *)v10 + 72))(v10, &src, &buf, &v37);
        if (v52 < 0)
          operator delete((void *)buf);
        if (SHIBYTE(src.__r_.__value_.__r.__words[2]) < 0)
          operator delete(src.__r_.__value_.__l.__data_);
      }
      if (!v37)
      {
        sub_10006D81C(&v44);
        sub_1001157D8(v3, v4);
        sub_10004339C(&v44);
      }
      if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 128) + 48) <= *(unsigned __int16 *)(*(_QWORD *)(a1 + 112) + 48)
        && os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
      {
        sub_1006ED0B0();
      }
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      if (qword_1009778B8 != -1)
        dispatch_once(&qword_1009778B8, &stru_10092DB20);
      v11 = sub_10006A768(qword_1009778B0);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v33, v49, 16);
      if (v13)
      {
        v14 = *(_QWORD *)v34;
        do
        {
          v15 = 0;
          do
          {
            if (*(_QWORD *)v34 != v14)
              objc_enumerationMutation(v12);
            v16 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)v15);
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10092DB60);
            if (sub_100657488((uint64_t)off_1009778C0, v16))
            {
              memset(&src, 0, 20);
              sub_100030BCC(&src, v16);
              LOWORD(src.__r_.__value_.__r.__words[2]) = *(_WORD *)(*(_QWORD *)(a1 + 128) + 48) + 1;
              WORD1(src.__r_.__value_.__r.__words[2]) = -1;
              v17 = *(_QWORD *)(a1 + 344);
              if (v17 >= *(_QWORD *)(a1 + 352))
              {
                v18 = sub_1003FAABC((uint64_t *)(a1 + 336), (uint64_t)&src);
              }
              else
              {
                uuid_copy(*(unsigned __int8 **)(a1 + 344), (const unsigned __int8 *)&src);
                *(_DWORD *)(v17 + 16) = src.__r_.__value_.__r.__words[2];
                v18 = v17 + 20;
                *(_QWORD *)(a1 + 344) = v17 + 20;
              }
              *(_QWORD *)(a1 + 344) = v18;
              v19 = qword_100999820;
              if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(buf) = 138543362;
                *(_QWORD *)((char *)&buf + 4) = v16;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Queueing services changed notification for LE device %{public}@", (uint8_t *)&buf, 0xCu);
              }
            }
            v15 = (char *)v15 + 1;
          }
          while (v13 != v15);
          v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v33, v49, 16);
        }
        while (v13);
      }

      memset(&src, 0, sizeof(src));
      if (qword_100978150 != -1)
        dispatch_once(&qword_100978150, &stru_10092DB80);
      sub_10006CA88((uint64_t)off_100978148, (uint64_t **)&src);
      size = src.__r_.__value_.__l.__size_;
      for (i = (uint64_t *)src.__r_.__value_.__r.__words[0]; i != (uint64_t *)size; ++i)
      {
        v22 = (unsigned __int8 *)*i;
        if (sub_100441AE4(*i))
        {
          *(_QWORD *)uu = 0;
          v48 = 0;
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10092DB60);
          sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)v22[128] << 40) | ((unint64_t)v22[129] << 32) | ((unint64_t)v22[130] << 24) | ((unint64_t)v22[131] << 16) | ((unint64_t)v22[132] << 8) | v22[133], 1u, 0, 0, 0, uu);
          if (uuid_is_null(uu))
          {
            v23 = qword_100999820;
            if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
            {
              sub_10043E5F8((uint64_t)v22, &buf);
              v29 = v52 >= 0 ? &buf : (__int128 *)buf;
              *(_DWORD *)v45 = 136446210;
              v46 = v29;
              _os_log_fault_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "Failed to start tracking tracking a UUID for device %{public}s", v45, 0xCu);
              if (v52 < 0)
                operator delete((void *)buf);
            }
          }
          buf = 0uLL;
          v51 = 0;
          uuid_copy((unsigned __int8 *)&buf, uu);
          LOWORD(v51) = *(_WORD *)(*(_QWORD *)(a1 + 128) + 48) + 1;
          HIWORD(v51) = -1;
          v24 = *(_QWORD *)(a1 + 344);
          if (v24 >= *(_QWORD *)(a1 + 352))
          {
            v25 = sub_1003FAABC((uint64_t *)(a1 + 336), (uint64_t)&buf);
          }
          else
          {
            uuid_copy(*(unsigned __int8 **)(a1 + 344), (const unsigned __int8 *)&buf);
            *(_DWORD *)(v24 + 16) = v51;
            v25 = v24 + 20;
            *(_QWORD *)(a1 + 344) = v24 + 20;
          }
          *(_QWORD *)(a1 + 344) = v25;
          v26 = qword_100999820;
          if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
          {
            v27 = sub_100030DF4(uu);
            v28 = (__int128 *)objc_claimAutoreleasedReturnValue(v27);
            *(_DWORD *)v45 = 138543362;
            v46 = v28;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Queueing services changed notification for Classic device %{public}@", v45, 0xCu);

          }
        }
      }
      sub_1003F1BA0(a1);
      if (src.__r_.__value_.__r.__words[0])
      {
        src.__r_.__value_.__l.__size_ = src.__r_.__value_.__r.__words[0];
        operator delete(src.__r_.__value_.__l.__data_);
      }
LABEL_74:
      if (__p)
      {
        v39 = (uint64_t *)__p;
        operator delete(__p);
      }
      sub_100034234((uint64_t)v41);
    }
  }
  return sub_100043728(&v44);
}

void sub_1003F0680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (*(char *)(v37 - 137) < 0)
    operator delete(*(void **)(v37 - 160));
  if (*(char *)(v37 - 105) < 0)
    operator delete(*(void **)(v37 - 128));
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a25);
  sub_100043728(&a37);
  _Unwind_Resume(a1);
}

BOOL sub_1003F0764(__n128 *a1)
{
  unsigned __int8 *v1;
  __int128 v3;
  int v4;
  __int128 v5;
  int v6;
  __n128 v7;
  unsigned __int32 v8;
  __n128 v9;
  int v10;

  v9 = 0uLL;
  v10 = 0;
  v7 = *a1;
  v8 = a1[1].n128_u32[0];
  sub_100042F44(&v9, &v7);
  v5 = xmmword_10073B24C;
  v6 = 0;
  if (sub_100072DF0(v1, (unsigned __int8 *)&v5))
    return 1;
  v3 = xmmword_10073B260;
  v4 = 0;
  return sub_100072DF0((unsigned __int8 *)&v9, (unsigned __int8 *)&v3);
}

void sub_1003F081C()
{
  sub_1000419F4();
  operator new();
}

void sub_1003F0878()
{
  sub_1000419F4();
  operator new();
}

void sub_1003F08D4()
{
  sub_1000419F4();
  operator new();
}

void sub_1003F0930()
{
  sub_1000419F4();
  operator new();
}

void sub_1003F09BC()
{
  sub_1000419F4();
  operator new();
}

void sub_1003F0A24()
{
  sub_1000419F4();
  operator new();
}

uint64_t sub_1003F0A90(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  char *i;
  __n128 v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  NSObject *v18;
  const char *v19;
  char *j;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  __n128 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  int v39;
  unsigned __int8 *v40;
  char v41;
  uint64_t v42;
  int v43;
  unsigned __int8 *v44;
  BOOL v45;
  uint64_t v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int v50;
  unsigned __int8 *v51;
  char *v52;
  unsigned int v53;
  unsigned __int16 *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned __int8 *v60;
  uint64_t v61;
  int v62;
  unsigned __int8 *v63;
  void (*v64)();
  void (*v65)();
  uint64_t v66;
  unsigned int v67;
  char v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  NSObject *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char v105;
  char v106;
  _QWORD v107[2];
  void *__p;
  char *v109;
  uint64_t v110;
  void *v111;
  char *v112;
  uint64_t v113;
  __n128 v114;
  int v115;
  __int128 v116;
  int v117;
  __int128 v118;
  int v119;
  __n128 v120;
  int v121;
  __int128 v122;
  int v123;
  __int128 v124;
  int v125;
  __int128 v126;
  int v127;
  __int128 v128;
  int v129;
  __int128 v130;
  int v131;
  __int128 v132;
  int v133;
  __n128 v134;
  __int128 v135;
  int v136;
  __n128 v137;
  __int128 v138;
  int v139;
  __n128 v140;
  __int128 v141;
  int v142;
  __n128 v143;
  __int128 v144;
  int v145;
  __n128 v146;
  __int128 v147;
  int v148;
  __n128 v149;
  __int128 v150;
  int v151;
  __n128 v152;
  __int128 v153;
  int v154;
  __int128 v155;
  int v156;
  __int128 v157;
  int v158;
  __n128 v159;
  int v160;
  __int128 v161;
  int v162;
  __n128 v163;
  __n128 v164;
  int v165;
  char v166;
  __n128 buf;
  int v168;
  char v169;
  __n128 v170;
  int v171;

  v111 = 0;
  v112 = 0;
  v113 = 0;
  sub_10001FE6C(&v111, a2 + 104);
  __p = 0;
  v109 = 0;
  v110 = 0;
  sub_10001FE6C(&__p, a2 + 136);
  v6 = (v112 - (_BYTE *)v111) >> 3;
  for (i = (char *)__p; i != v109; i += 8)
  {
    sub_10001FE6C(&buf, *(_QWORD *)i + 104);
    v8 = buf;
    if (buf.n128_u64[0])
    {
      buf.n128_u64[1] = buf.n128_u64[0];
      operator delete((void *)buf.n128_u64[0]);
    }
    v6 = ((uint64_t)(v8.n128_u64[1] - v8.n128_u64[0]) >> 3) + (unsigned __int16)v6 + 2;
  }
  v107[0] = 0;
  v107[1] = 0;
  sub_10003415C((uint64_t)v107, a1 + 40);
  v106 = 0;
  v9 = sub_100027F68();
  sub_100091AE8(&buf, "GATT");
  sub_100091AE8(&v164, "DUMMY_DIS");
  v10 = (*(uint64_t (**)(uint64_t, __n128 *, __n128 *, char *))(*(_QWORD *)v9 + 72))(v9, &buf, &v164, &v106);
  if (v106)
    v11 = 0;
  else
    v11 = v10;
  if (v11 == 1)
  {
    v170 = *(__n128 *)(a2 + 72);
    v171 = *(_DWORD *)(a2 + 88);
    sub_100042F44(&v163, &v170);
    v161 = xmmword_10073B38C;
    v162 = 0;
    v13 = sub_100072DF0(v12, (unsigned __int8 *)&v161);
    if (v166 < 0)
      operator delete((void *)v164.n128_u64[0]);
    if (v169 < 0)
    {
      operator delete((void *)buf.n128_u64[0]);
      if (!v13)
        goto LABEL_23;
    }
    else if (!v13)
    {
      goto LABEL_23;
    }
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_1006ED188();
    v14 = 905;
    goto LABEL_132;
  }
  if (v166 < 0)
    operator delete((void *)v164.n128_u64[0]);
  if (v169 < 0)
    operator delete((void *)buf.n128_u64[0]);
LABEL_23:
  if (!*(_BYTE *)(a1 + 32))
  {
    v18 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      v19 = "publish";
      if (a3)
        v19 = "republish";
      buf.n128_u32[0] = 136446210;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = (unint64_t)v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Stack not started during attempt to %{public}s LE service", (uint8_t *)&buf, 0xCu);
    }
    if ((a3 & 1) != 0)
    {
      v14 = 111;
    }
    else
    {
      v23 = *(_QWORD **)(a1 + 368);
      v22 = *(_QWORD *)(a1 + 376);
      if ((unint64_t)v23 >= v22)
      {
        v70 = *(_QWORD *)(a1 + 360);
        v71 = ((uint64_t)v23 - v70) >> 3;
        if ((unint64_t)(v71 + 1) >> 61)
          abort();
        v72 = v22 - v70;
        v73 = v72 >> 2;
        if (v72 >> 2 <= (unint64_t)(v71 + 1))
          v73 = v71 + 1;
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
          v74 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v74 = v73;
        if (v74)
          v75 = (char *)sub_10007ABA0(a1 + 376, v74);
        else
          v75 = 0;
        v79 = &v75[8 * v71];
        v80 = &v75[8 * v74];
        *(_QWORD *)v79 = a2;
        v24 = v79 + 8;
        v82 = *(char **)(a1 + 360);
        v81 = *(char **)(a1 + 368);
        if (v81 != v82)
        {
          do
          {
            v83 = *((_QWORD *)v81 - 1);
            v81 -= 8;
            *((_QWORD *)v79 - 1) = v83;
            v79 -= 8;
          }
          while (v81 != v82);
          v81 = *(char **)(a1 + 360);
        }
        *(_QWORD *)(a1 + 360) = v79;
        *(_QWORD *)(a1 + 368) = v24;
        *(_QWORD *)(a1 + 376) = v80;
        if (v81)
          operator delete(v81);
      }
      else
      {
        *v23 = a2;
        v24 = v23 + 1;
      }
      v14 = 0;
      *(_QWORD *)(a1 + 368) = v24;
    }
LABEL_132:
    sub_100034234((uint64_t)v107);
    goto LABEL_133;
  }
  v105 = 0;
  sub_100043758(&v105);
  v15 = *(_QWORD *)(a2 + 8);
  v16 = *(unsigned __int8 *)(a2 + 96);
  buf = *(__n128 *)(a2 + 72);
  v168 = *(_DWORD *)(a2 + 88);
  sub_100042F44(&v164, &buf);
  v159 = v164;
  v160 = v165;
  if (sub_10022AFC8(v15, v16 != 0, (unsigned __int8 *)&v159, (unsigned __int16)v6))
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_1006ED4D4();
    v17 = 0;
LABEL_28:
    v14 = 1;
    goto LABEL_29;
  }
  for (j = (char *)v111; j != v112; j += 8)
  {
    v21 = sub_1003F2458(a1, *(_DWORD *)(*(_QWORD *)j + 104));
    if (!v21)
    {
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        sub_1006ED448();
      v14 = 904;
LABEL_124:
      sub_10022B12C(*(unsigned __int16 **)(a2 + 8));
      v17 = 0;
LABEL_29:
      sub_100043728(&v105);
      goto LABEL_30;
    }
    if (sub_10022B140(*(_QWORD *)(*(_QWORD *)j + 8), **(unsigned __int16 **)(a2 + 8), *(_QWORD *)(v21 + 8)))
    {
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        sub_1006ED474();
      v14 = 1;
      goto LABEL_124;
    }
    if (*(unsigned __int16 *)(*(_QWORD *)j + 72) == **(unsigned __int16 **)(v21 + 8))
      *(_QWORD *)(*(_QWORD *)j + 96) = v21;
  }
  v25 = (char *)__p;
  if (__p == v109)
  {
    v26 = 0;
    goto LABEL_115;
  }
  v26 = 0;
  while (2)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v25 + 96);
    v104 = *(_QWORD *)v25;
    sub_10001FE6C(&buf, *(_QWORD *)v25 + 104);
    if (v26)
      operator delete(v26);
    v28 = buf.n128_u64[1];
    v17 = (char *)buf.n128_u64[0];
    buf = *(__n128 *)(v104 + 76);
    v168 = *(_DWORD *)(v104 + 92);
    v101 = v25;
    v102 = v17;
    sub_100042F44(&v164, &buf);
    v157 = xmmword_10073B24C;
    v158 = 0;
    v30 = (__n128 *)(v104 + 76);
    if (sub_100072DF0(v29, (unsigned __int8 *)&v157))
      goto LABEL_187;
    buf = *v30;
    v168 = *(_DWORD *)(v104 + 92);
    sub_100042F44(&v170, &buf);
    v155 = xmmword_10073B260;
    v156 = 0;
    if (sub_100072DF0(v31, (unsigned __int8 *)&v155))
      goto LABEL_187;
    buf = *v30;
    v168 = *(_DWORD *)(v104 + 92);
    sub_100042F44(&v163, &buf);
    v153 = xmmword_10073B274;
    v154 = 0;
    if (sub_100072DF0(v32, (unsigned __int8 *)&v153))
      goto LABEL_187;
    buf = *v30;
    v168 = *(_DWORD *)(v104 + 92);
    sub_100042F44(&v152, &buf);
    v150 = xmmword_10073B288;
    v151 = 0;
    if (sub_100072DF0((unsigned __int8 *)&v152, (unsigned __int8 *)&v150))
      goto LABEL_187;
    buf = *v30;
    v168 = *(_DWORD *)(v104 + 92);
    sub_100042F44(&v149, &buf);
    v147 = xmmword_10073B29C;
    v148 = 0;
    if (sub_100072DF0((unsigned __int8 *)&v149, (unsigned __int8 *)&v147))
      goto LABEL_187;
    buf = *v30;
    v168 = *(_DWORD *)(v104 + 92);
    sub_100042F44(&v146, &buf);
    v144 = xmmword_10073B2B0;
    v145 = 0;
    if (sub_100072DF0((unsigned __int8 *)&v146, (unsigned __int8 *)&v144))
      goto LABEL_187;
    buf = *v30;
    v168 = *(_DWORD *)(v104 + 92);
    sub_100042F44(&v143, &buf);
    v141 = xmmword_10073B2C4;
    v142 = 0;
    if (sub_100072DF0((unsigned __int8 *)&v143, (unsigned __int8 *)&v141))
      goto LABEL_187;
    buf = *v30;
    v168 = *(_DWORD *)(v104 + 92);
    sub_100042F44(&v140, &buf);
    v138 = xmmword_10073B2D8;
    v139 = 0;
    if (sub_100072DF0((unsigned __int8 *)&v140, (unsigned __int8 *)&v138))
      goto LABEL_187;
    buf = *v30;
    v168 = *(_DWORD *)(v104 + 92);
    sub_100042F44(&v137, &buf);
    v135 = xmmword_10073B2EC;
    v136 = 0;
    if (sub_100072DF0((unsigned __int8 *)&v137, (unsigned __int8 *)&v135)
      || (buf = *v30,
          v168 = *(_DWORD *)(v104 + 92),
          sub_100042F44(&v134, &buf),
          v132 = xmmword_10073B300,
          v133 = 0,
          sub_100072DF0((unsigned __int8 *)&v134, (unsigned __int8 *)&v132)))
    {
LABEL_187:
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      {
        buf = *v30;
        v168 = *(_DWORD *)(v104 + 92);
        sub_100042F44(&v164, &buf);
        sub_10006887C(v85, &buf);
        sub_1006ED1B4();
      }
      sub_10022B12C(*(unsigned __int16 **)(a2 + 8));
      v14 = 905;
      goto LABEL_29;
    }
    if (!sub_1000452EC(v27 + 72))
    {
      if (*(_BYTE *)(v104 + 72) != 2)
      {
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
          sub_1006ED41C();
        sub_10022B12C(*(unsigned __int16 **)(a2 + 8));
        v14 = 910;
        goto LABEL_29;
      }
      if ((*(_BYTE *)(*(_QWORD *)(v27 + 8) + 26) & 0x2A) != 0)
      {
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
          sub_1006ED3F0();
        sub_10022B12C(*(unsigned __int16 **)(a2 + 8));
        v14 = 911;
        goto LABEL_29;
      }
    }
    if (v17 == (char *)v28)
    {
      v41 = *(_BYTE *)(v104 + 72);
      if (v41 < 0)
        goto LABEL_83;
      if ((*(_BYTE *)(v104 + 72) & 1) == 0)
      {
        if ((*(_BYTE *)(v104 + 72) & 0x30) != 0)
          goto LABEL_95;
        goto LABEL_96;
      }
LABEL_89:
      v45 = v17 == (char *)v28;
      v17 = v102;
      if (!v45)
        goto LABEL_90;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        sub_1006ED340();
      sub_10022B12C(*(unsigned __int16 **)(a2 + 8));
      v14 = 908;
      goto LABEL_29;
    }
    v33 = 0;
    v34 = 0;
    do
    {
      v35 = *(_QWORD *)(*(_QWORD *)v17 + 8);
      v36 = *(_DWORD *)(v35 + 20);
      buf = *(__n128 *)(v35 + 4);
      v168 = v36;
      sub_100042F44(&v164, &buf);
      v130 = xmmword_10073B2B0;
      v131 = 0;
      if (sub_100072DF0(v37, (unsigned __int8 *)&v130))
      {
        if (!v34)
        {
          v34 = *(_QWORD *)v17;
          goto LABEL_72;
        }
        v17 = v102;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
          sub_1006ED398();
LABEL_156:
        sub_10022B12C(*(unsigned __int16 **)(a2 + 8));
        v14 = 906;
        goto LABEL_29;
      }
      v38 = *(_QWORD *)(*(_QWORD *)v17 + 8);
      v39 = *(_DWORD *)(v38 + 20);
      buf = *(__n128 *)(v38 + 4);
      v168 = v39;
      sub_100042F44(&v164, &buf);
      v128 = xmmword_10073B2EC;
      v129 = 0;
      if (sub_100072DF0(v40, (unsigned __int8 *)&v128))
      {
        if (v33)
        {
          v17 = v102;
          if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
            sub_1006ED3C4();
          goto LABEL_156;
        }
        v33 = *(_QWORD *)v17;
      }
LABEL_72:
      v17 += 8;
    }
    while (v17 != (char *)v28);
    v41 = *(_BYTE *)(v104 + 72);
    if ((v41 & 0x80000000) == 0)
    {
      v17 = v102;
      goto LABEL_84;
    }
    v17 = v102;
    if (v102 != (char *)v28)
    {
      while (1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)v17 + 8);
        v43 = *(_DWORD *)(v42 + 20);
        buf = *(__n128 *)(v42 + 4);
        v168 = v43;
        sub_100042F44(&v164, &buf);
        v126 = xmmword_10073B29C;
        v127 = 0;
        if (sub_100072DF0(v44, (unsigned __int8 *)&v126))
          break;
        v17 += 8;
        if (v17 == (char *)v28)
        {
          v17 = (char *)v28;
          break;
        }
      }
    }
LABEL_83:
    v45 = v17 == (char *)v28;
    v17 = v102;
    if (v45)
    {
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        sub_1006ED36C();
      sub_10022B12C(*(unsigned __int16 **)(a2 + 8));
      v14 = 907;
      goto LABEL_29;
    }
LABEL_84:
    if ((v41 & 1) != 0)
    {
      if (v17 != (char *)v28)
      {
        while (1)
        {
          v46 = *(_QWORD *)(*(_QWORD *)v17 + 8);
          v47 = *(_DWORD *)(v46 + 20);
          buf = *(__n128 *)(v46 + 4);
          v168 = v47;
          sub_100042F44(&v164, &buf);
          v124 = xmmword_10073B2D8;
          v125 = 0;
          if (sub_100072DF0(v48, (unsigned __int8 *)&v124))
            break;
          v17 += 8;
          if (v17 == (char *)v28)
          {
            v17 = (char *)v28;
            goto LABEL_89;
          }
        }
      }
      goto LABEL_89;
    }
LABEL_90:
    if ((v41 & 0x30) != 0)
    {
      if (v17 != (char *)v28)
      {
        while (1)
        {
          v49 = *(_QWORD *)(*(_QWORD *)v17 + 8);
          v50 = *(_DWORD *)(v49 + 20);
          buf = *(__n128 *)(v49 + 4);
          v168 = v50;
          sub_100042F44(&v164, &buf);
          v122 = xmmword_10073B2C4;
          v123 = 0;
          if (sub_100072DF0(v51, (unsigned __int8 *)&v122))
            break;
          v17 += 8;
          if (v17 == (char *)v28)
          {
            v17 = (char *)v28;
            break;
          }
        }
      }
LABEL_95:
      v45 = v17 == (char *)v28;
      v17 = v102;
      if (v45)
      {
        v97 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
          sub_1006ED2C0(v41, v97, v98);
        sub_10022B12C(*(unsigned __int16 **)(a2 + 8));
        v14 = 909;
        goto LABEL_29;
      }
    }
LABEL_96:
    v99 = a1;
    v52 = (char *)v28;
    v100 = a3;
    v53 = **(unsigned __int16 **)(a2 + 8);
    v54 = *(unsigned __int16 **)(v104 + 8);
    v55 = *(_BYTE *)(v104 + 72);
    v56 = *(_QWORD *)(*(_QWORD *)(v104 + 96) + 8);
    buf = *v30;
    v168 = *(_DWORD *)(v104 + 92);
    sub_100042F44(&v164, &buf);
    v120 = v164;
    v121 = v165;
    if (sub_10022B268(v53, v54, v55, (unsigned __int16)((((_DWORD)v52 - (_DWORD)v17) >> 3) + 1), v56, (unsigned __int8 *)&v120, (uint64_t)sub_1003F24C4, (uint64_t)sub_1003F2568))
    {
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        sub_1006ED260();
LABEL_143:
      sub_10022B12C(*(unsigned __int16 **)(a2 + 8));
      goto LABEL_28;
    }
    while (v17 != v52)
    {
      v57 = *(_QWORD *)v17;
      v58 = *(_QWORD *)(*(_QWORD *)v17 + 8);
      v59 = *(_DWORD *)(v58 + 20);
      buf = *(__n128 *)(v58 + 4);
      v168 = v59;
      sub_100042F44(&v164, &buf);
      v118 = xmmword_10073B2C4;
      v119 = 0;
      if (sub_100072DF0(v60, (unsigned __int8 *)&v118)
        || (v61 = *(_QWORD *)(v57 + 8),
            v62 = *(_DWORD *)(v61 + 20),
            buf = *(__n128 *)(v61 + 4),
            v168 = v62,
            sub_100042F44(&v170, &buf),
            v116 = xmmword_10073B2D8,
            v117 = 0,
            sub_100072DF0(v63, (unsigned __int8 *)&v116)))
      {
        v64 = sub_1003F26B8;
        v65 = sub_1003F275C;
      }
      else
      {
        v64 = sub_1003F24C4;
        v65 = sub_1003F2568;
      }
      v66 = *(_QWORD *)(v57 + 8);
      v67 = **(unsigned __int16 **)(v104 + 8);
      v68 = *(_BYTE *)(v66 + 26);
      v69 = *(__n128 *)(v66 + 4);
      v168 = *(_DWORD *)(v66 + 20);
      buf = v69;
      sub_100042F44(&v164, &buf);
      v114 = v164;
      v115 = v165;
      if (sub_10022B4C4(v66, v67, v68, (unsigned __int8 *)&v114, (uint64_t (*)(uint64_t, unsigned int, void *, signed int, _WORD *))v64, (uint64_t)v65))
      {
        v17 = v102;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
          sub_1006ED200();
        goto LABEL_143;
      }
      v17 += 8;
    }
    v26 = v102;
    v25 = v101 + 8;
    a3 = v100;
    a1 = v99;
    if (v101 + 8 != v109)
      continue;
    break;
  }
LABEL_115:
  v103 = v26;
  sub_10004339C(&v105);
  if ((a3 & 1) == 0)
  {
    v77 = *(_QWORD **)(a1 + 368);
    v76 = *(_QWORD *)(a1 + 376);
    if ((unint64_t)v77 >= v76)
    {
      v86 = *(_QWORD *)(a1 + 360);
      v87 = ((uint64_t)v77 - v86) >> 3;
      if ((unint64_t)(v87 + 1) >> 61)
        abort();
      v88 = v76 - v86;
      v89 = v88 >> 2;
      if (v88 >> 2 <= (unint64_t)(v87 + 1))
        v89 = v87 + 1;
      if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
        v90 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v90 = v89;
      if (v90)
        v91 = (char *)sub_10007ABA0(a1 + 376, v90);
      else
        v91 = 0;
      v92 = &v91[8 * v87];
      v93 = &v91[8 * v90];
      *(_QWORD *)v92 = a2;
      v78 = v92 + 8;
      v95 = *(char **)(a1 + 360);
      v94 = *(char **)(a1 + 368);
      if (v94 != v95)
      {
        do
        {
          v96 = *((_QWORD *)v94 - 1);
          v94 -= 8;
          *((_QWORD *)v92 - 1) = v96;
          v92 -= 8;
        }
        while (v94 != v95);
        v94 = *(char **)(a1 + 360);
      }
      *(_QWORD *)(a1 + 360) = v92;
      *(_QWORD *)(a1 + 368) = v78;
      *(_QWORD *)(a1 + 376) = v93;
      if (v94)
        operator delete(v94);
    }
    else
    {
      *v77 = a2;
      v78 = v77 + 1;
    }
    *(_QWORD *)(a1 + 368) = v78;
  }
  sub_1003F28AC(a1, 0, **(unsigned __int16 **)(a2 + 8), *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + 24));
  sub_100043728(&v105);
  v14 = 0;
  v17 = v103;
LABEL_30:
  sub_100034234((uint64_t)v107);
  if (v17)
    operator delete(v17);
LABEL_133:
  if (__p)
  {
    v109 = (char *)__p;
    operator delete(__p);
  }
  if (v111)
  {
    v112 = (char *)v111;
    operator delete(v111);
  }
  return v14;
}

void sub_1003F1A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  sub_100043728(&a16);
  sub_100034234((uint64_t)&a18);
  if (__p)
    operator delete(__p);
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003F1B34(uint64_t *a1, unsigned __int8 *src)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= a1[2])
  {
    result = sub_1003FAABC(a1, (uint64_t)src);
  }
  else
  {
    uuid_copy((unsigned __int8 *)a1[1], src);
    *(_DWORD *)(v4 + 16) = *((_DWORD *)src + 4);
    result = v4 + 20;
    a1[1] = v4 + 20;
  }
  a1[1] = result;
  return result;
}

void sub_1003F1B98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1003F1BA0(uint64_t a1)
{
  NSObject *v1;
  _QWORD **i;
  NSObject *v3;
  std::string *p_buf;
  _QWORD **j;
  std::string::size_type size;
  NSObject *v7;
  std::string *v8;
  _QWORD **v9;
  NSObject *v10;
  std::string *v11;
  std::string *v12;
  std::string::size_type v13;
  _QWORD **v14;
  NSObject *v15;
  std::string *v16;
  std::string buf;
  _QWORD v20[2];
  std::string v21;
  uint8_t v22[4];
  std::string *v23;
  std::string v24;
  std::string v25;

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 40);
  v1 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: Local database:", (uint8_t *)&buf, 2u);
  }
  for (i = *(_QWORD ***)(a1 + 360); i != *(_QWORD ***)(a1 + 368); ++i)
  {
    v3 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      sub_1005BAE8C(*i, &buf);
      p_buf = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v25.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", (uint8_t *)&v25, 0xCu);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
    memset(&buf, 0, sizeof(buf));
    sub_10001FE6C(&buf, (uint64_t)(*i + 13));
    size = buf.__r_.__value_.__l.__size_;
    for (j = (_QWORD **)buf.__r_.__value_.__r.__words[0]; j != (_QWORD **)size; ++j)
    {
      v7 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
      {
        sub_1005BAE8C(*j, &v25);
        v8 = &v25;
        if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v8 = (std::string *)v25.__r_.__value_.__r.__words[0];
        LODWORD(v24.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", (uint8_t *)&v24, 0xCu);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v25.__r_.__value_.__l.__data_);
        size = buf.__r_.__value_.__l.__size_;
      }
    }
    memset(&v25, 0, sizeof(v25));
    sub_10001FE6C(&v25, (uint64_t)(*i + 17));
    v9 = (_QWORD **)v25.__r_.__value_.__r.__words[0];
    if (v25.__r_.__value_.__r.__words[0] != v25.__r_.__value_.__l.__size_)
    {
      do
      {
        v10 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
        {
          sub_1005BAE8C(*v9, &v24);
          if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v11 = &v24;
          else
            v11 = (std::string *)v24.__r_.__value_.__r.__words[0];
          LODWORD(v21.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v21.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", (uint8_t *)&v21, 0xCu);
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v24.__r_.__value_.__l.__data_);
          v10 = qword_100999820;
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          sub_1005BAE8C((_QWORD *)(*v9)[12], &v24);
          v12 = (v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v24
              : (std::string *)v24.__r_.__value_.__r.__words[0];
          LODWORD(v21.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v21.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", (uint8_t *)&v21, 0xCu);
          if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v24.__r_.__value_.__l.__data_);
        }
        memset(&v24, 0, sizeof(v24));
        sub_10001FE6C(&v24, (uint64_t)(*v9 + 13));
        v13 = v24.__r_.__value_.__l.__size_;
        v14 = (_QWORD **)v24.__r_.__value_.__r.__words[0];
        if (v24.__r_.__value_.__r.__words[0] != v24.__r_.__value_.__l.__size_)
        {
          do
          {
            v15 = qword_100999820;
            if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
            {
              sub_1005BAE8C(*v14, &v21);
              if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v16 = &v21;
              else
                v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
              *(_DWORD *)v22 = 136446210;
              v23 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", v22, 0xCu);
              if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v21.__r_.__value_.__l.__data_);
              v13 = v24.__r_.__value_.__l.__size_;
            }
            ++v14;
          }
          while (v14 != (_QWORD **)v13);
          v14 = (_QWORD **)v24.__r_.__value_.__r.__words[0];
        }
        if (v14)
        {
          v24.__r_.__value_.__l.__size_ = (std::string::size_type)v14;
          operator delete(v14);
        }
        ++v9;
      }
      while (v9 != (_QWORD **)v25.__r_.__value_.__l.__size_);
      v9 = (_QWORD **)v25.__r_.__value_.__r.__words[0];
    }
    if (v9)
    {
      v25.__r_.__value_.__l.__size_ = (std::string::size_type)v9;
      operator delete(v9);
    }
    if (buf.__r_.__value_.__r.__words[0])
    {
      buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  return sub_100034234((uint64_t)v20);
}

void sub_1003F1FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1003F201C(uint64_t a1)
{
  return sub_1003EFEFC(a1 - 16);
}

_BYTE *sub_1003F2024(uint64_t a1)
{
  NSObject *v2;
  unint64_t v3;
  void **v4;
  void **v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint8_t v18[16];
  uint8_t buf[8];
  uint64_t v20;
  char v21;

  v2 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "GattServer::stackWillStop enter", buf, 2u);
  }
  v21 = 0;
  sub_100043758(&v21);
  if (sub_100225224())
  {
    sub_10022AFC4();
    sub_10004339C(&v21);
    *(_QWORD *)buf = 0;
    v20 = 0;
    sub_10003415C((uint64_t)buf, a1 + 40);
    *(_BYTE *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 344) = *(_QWORD *)(a1 + 336);
    sub_10001A82C(a1 + 384, *(_QWORD **)(a1 + 392));
    *(_QWORD *)(a1 + 392) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 384) = a1 + 392;
    sub_1003FA750(a1 + 408, *(_QWORD **)(a1 + 416));
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 408) = a1 + 416;
    v3 = *(_QWORD *)(a1 + 464);
    v4 = *(void ***)(a1 + 440);
    v5 = *(void ***)(a1 + 448);
    v6 = &v4[v3 >> 8];
    if (v5 == v4)
      v7 = 0;
    else
      v7 = (uint64_t)*v6 + 16 * v3;
    while (1)
    {
      v8 = (char *)v5 - (char *)v4;
      if (v8)
      {
        v9 = *(_QWORD *)(a1 + 472) + *(_QWORD *)(a1 + 464);
        v10 = *(uint64_t *)((char *)v4 + ((v9 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v9;
      }
      else
      {
        v10 = 0;
      }
      if (v7 == v10)
        break;
      v11 = *(_QWORD *)(v7 + 8);
      if (v11)
      {
        *(_QWORD *)(v11 + 24) = &off_100918258;
        v12 = *(unsigned int **)(v11 + 32);
        if (v12)
          sub_100056AAC(v12);

        operator delete();
      }
      v7 += 16;
      if (v7 - (_QWORD)*v6 == 4096)
      {
        v13 = (uint64_t)v6[1];
        ++v6;
        v7 = v13;
      }
      v4 = *(void ***)(a1 + 440);
      v5 = *(void ***)(a1 + 448);
    }
    *(_QWORD *)(a1 + 472) = 0;
    if (v8 >= 0x11)
    {
      do
      {
        operator delete(*v4);
        v14 = *(_QWORD *)(a1 + 448);
        v4 = (void **)(*(_QWORD *)(a1 + 440) + 8);
        *(_QWORD *)(a1 + 440) = v4;
        v8 = v14 - (_QWORD)v4;
      }
      while (v8 > 0x10);
    }
    if (v8 >> 3 == 1)
    {
      v15 = 128;
    }
    else
    {
      if (v8 >> 3 != 2)
      {
LABEL_25:
        *(_BYTE *)(a1 + 480) = 0;
        objc_msgSend(*(id *)(a1 + 488), "removeAllObjects");
        objc_msgSend(*(id *)(a1 + 496), "removeAllObjects");
        objc_msgSend(*(id *)(a1 + 504), "removeAllObjects");
        sub_1003FA834(a1 + 512, *(char **)(a1 + 520));
        *(_QWORD *)(a1 + 512) = a1 + 520;
        *(_QWORD *)(a1 + 528) = 0;
        *(_QWORD *)(a1 + 520) = 0;
        sub_10001A82C(a1 + 536, *(_QWORD **)(a1 + 544));
        *(_QWORD *)(a1 + 536) = a1 + 544;
        *(_QWORD *)(a1 + 552) = 0;
        *(_QWORD *)(a1 + 544) = 0;
        v16 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v18 = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "GattServer::stackWillStop exit", v18, 2u);
        }
        sub_100034234((uint64_t)buf);
        return sub_100043728(&v21);
      }
      v15 = 256;
    }
    *(_QWORD *)(a1 + 464) = v15;
    goto LABEL_25;
  }
  return sub_100043728(&v21);
}

void sub_1003F22B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_100043728(&a17);
  _Unwind_Resume(a1);
}

_BYTE *sub_1003F22D8(uint64_t a1)
{
  return sub_1003F2024(a1 - 16);
}

uint64_t sub_1003F22E0(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 40);
  *(_QWORD *)(a1 + 104) = a2;
  return sub_100034234((uint64_t)v5);
}

void sub_1003F2324(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  _QWORD v4[5];
  __int128 __p;
  uint64_t v6;
  __int128 __dst;
  uint64_t v8;

  __dst = 0uLL;
  v8 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __dst = *a2;
    v8 = *((_QWORD *)a2 + 2);
  }
  v3 = sub_1000419F4();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3321888768;
  v4[2] = sub_1003F2440;
  v4[3] = &unk_10092D858;
  v4[4] = a1;
  if (SHIBYTE(v8) < 0)
  {
    sub_10003430C(&__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    __p = __dst;
    v6 = v8;
  }
  sub_100041A34(v3, v4);
  if (SHIBYTE(v6) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v8) < 0)
    operator delete((void *)__dst);
}

void sub_1003F240C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v19 - 25) < 0)
    operator delete(*(void **)(v19 - 48));
  _Unwind_Resume(exception_object);
}

std::string *sub_1003F2440(uint64_t a1)
{
  return std::string::operator=((std::string *)(*(_QWORD *)(a1 + 32) + 304), (const std::string *)(a1 + 40));
}

void sub_1003F2450(uint64_t a1, __int128 *a2)
{
  sub_1003F2324(a1 - 24, a2);
}

uint64_t sub_1003F2458(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 40);
  v4 = *(uint64_t **)(a1 + 360);
  v5 = *(uint64_t **)(a1 + 368);
  while (v4 != v5)
  {
    v6 = *v4;
    if (*(_DWORD *)(*v4 + 16) == a2)
      goto LABEL_6;
    ++v4;
  }
  v6 = 0;
LABEL_6:
  sub_100034234((uint64_t)v8);
  return v6;
}

void sub_1003F24C4()
{
  sub_1000419F4();
  operator new();
}

void sub_1003F2568()
{
  sub_1000419F4();
  operator new();
}

void sub_1003F2670()
{
  operator delete();
}

void sub_1003F26B8()
{
  sub_1000419F4();
  operator new();
}

void sub_1003F275C()
{
  sub_1000419F4();
  operator new();
}

void sub_1003F2864()
{
  operator delete();
}

void sub_1003F28AC(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  id v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *__p[2];
  __int128 v24;
  _QWORD v25[2];
  void *v26;
  uuid_t dst;
  unsigned int v28;

  v7 = a2;
  v25[0] = 0;
  v25[1] = 0;
  sub_10003415C((uint64_t)v25, a1 + 40);
  v8 = *(_QWORD *)(a1 + 336);
  v9 = *(_QWORD *)(a1 + 344);
  if (v8 != v9)
  {
    while (1)
    {
      memset(dst, 0, sizeof(dst));
      v28 = 0;
      uuid_copy(dst, (const unsigned __int8 *)v8);
      v10 = *(_DWORD *)(v8 + 16);
      v28 = v10;
      if (!v7)
        break;
      v11 = sub_100030DF4(dst);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v13 = objc_msgSend(v7, "isEqual:", v12);

      if (v13)
      {
        LOWORD(v10) = v28;
        v14 = HIWORD(v28);
LABEL_6:
        v15 = v10;
        if ((unsigned __int16)v10 >= a3)
          v15 = a3;
        if ((_WORD)v10)
          v16 = v15;
        else
          v16 = a3;
        LOWORD(v28) = v16;
        if (v14 <= a4)
          v17 = a4;
        else
          v17 = v14;
        HIWORD(v28) = v17;
        if (*(_BYTE *)(a1 + 32))
        {
          if (qword_10097AC28 != -1)
            dispatch_once(&qword_10097AC28, &stru_10092DB00);
          v18 = qword_10097AC20;
          v19 = sub_100030DF4(dst);
          v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
          LODWORD(v18) = sub_10000671C(v18, v20);

          if ((_DWORD)v18)
          {
            *(_OWORD *)__p = 0u;
            v24 = 0u;
            sub_1004806B4((uint64_t)__p, 0);
            sub_10048071C((uint64_t)__p, a3);
            sub_10048071C((uint64_t)__p, a4);
            v21 = sub_100030DF4(dst);
            v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
            v26 = v22;
            objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v26, 1));

            operator new();
          }
        }
      }
      v8 += 20;
      if (v8 == v9)
        goto LABEL_20;
    }
    v14 = HIWORD(v10);
    goto LABEL_6;
  }
LABEL_20:
  sub_100034234((uint64_t)v25);

}

void sub_1003F2B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t sub_1003F2BF4(uint64_t a1, int *a2)
{
  uint64_t v3;
  _QWORD *i;
  char *v5;
  char *v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  void (*v14)(uint64_t, uint64_t, _QWORD);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  BOOL v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  BOOL v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int64_t v54;
  std::string *v56;
  uint64_t v57;
  std::string v59;
  void *__p;
  char *v61;
  uint64_t v62;
  _QWORD v63[2];
  __int128 v64;
  int v65;
  __n128 v66;
  uint8_t buf[16];
  int v68;

  v63[0] = 0;
  v63[1] = 0;
  sub_10003415C((uint64_t)v63, a1 + 40);
  v3 = sub_1003F2458(a1, *a2);
  if (v3)
  {
    for (i = *(_QWORD **)(a1 + 360); i != *(_QWORD **)(a1 + 368); ++i)
    {
      __p = 0;
      v61 = 0;
      v62 = 0;
      sub_10001FE6C(&__p, *i + 104);
      v5 = (char *)__p;
      v6 = (char *)__p;
      if (__p != v61)
      {
        while (*(_QWORD *)(*(_QWORD *)v6 + 96) != v3)
        {
          v6 += 8;
          if (v6 == v61)
            goto LABEL_7;
        }
        v9 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        {
          sub_1005BAE8C((_QWORD *)v3, &v59);
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v56 = &v59;
          else
            v56 = (std::string *)v59.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v56;
          _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Unable to unpublish service (%{public}s) as it is included by another service!", buf, 0xCu);
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v59.__r_.__value_.__l.__data_);
          v5 = (char *)__p;
          if (__p)
          {
LABEL_15:
            v61 = v5;
            operator delete(v5);
          }
        }
        else if (v5)
        {
          goto LABEL_15;
        }
        v8 = 904;
        goto LABEL_111;
      }
LABEL_7:
      if (__p)
      {
        v61 = (char *)__p;
        operator delete(__p);
      }
    }
    v10 = *(_QWORD **)(a1 + 384);
    if (v10 != (_QWORD *)(a1 + 392))
    {
      do
      {
        __p = 0;
        if (sub_1003F3318(a1, *((_DWORD *)v10 + 10), (uint64_t *)&__p))
          v11 = __p == (void *)v3;
        else
          v11 = 0;
        if (v11)
        {
          if (*(_BYTE *)(a1 + 32))
          {
            v59.__r_.__value_.__s.__data_[0] = 0;
            sub_100043758(&v59);
            v14 = (void (*)(uint64_t, uint64_t, _QWORD))v10[6];
            v15 = *((unsigned int *)v10 + 8);
            if (*((_BYTE *)v10 + 44))
              v14(v15, 242, 0);
            else
              ((void (*)(uint64_t, uint64_t, _QWORD, _QWORD))v14)(v15, 242, 0, 0);
            sub_100043728(&v59);
          }
          v16 = (_QWORD *)v10[1];
          v17 = v10;
          if (v16)
          {
            do
            {
              v13 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v13 = (_QWORD *)v17[2];
              v11 = *v13 == (_QWORD)v17;
              v17 = v13;
            }
            while (!v11);
          }
          sub_1000040CC((uint64_t **)(a1 + 384), v10);
          operator delete(v10);
        }
        else
        {
          v12 = (_QWORD *)v10[1];
          if (v12)
          {
            do
            {
              v13 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = (_QWORD *)v10[2];
              v11 = *v13 == (_QWORD)v10;
              v10 = v13;
            }
            while (!v11);
          }
        }
        v10 = v13;
      }
      while (v13 != (_QWORD *)(a1 + 392));
    }
    v18 = *(_QWORD **)(a1 + 512);
    if (v18 != (_QWORD *)(a1 + 520))
    {
      do
      {
        v19 = v18[5];
        if (v19 != v18[6])
        {
          v20 = *(_DWORD *)v19;
          v21 = *(unsigned int **)(v19 + 16);
          if (v21)
            sub_10003C37C(*(_QWORD *)(v19 + 16));
          __p = 0;
          if (sub_1003F3318(a1, v20, (uint64_t *)&__p))
            v22 = __p == (void *)v3;
          else
            v22 = 0;
          if (v22)
          {
            sub_1003FAD50((uint64_t **)(a1 + 512), (uint64_t)v18);
            if (v21)
              sub_100056AAC(v21);
            break;
          }
          if (v21)
            sub_100056AAC(v21);
        }
        v23 = (_QWORD *)v18[1];
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (_QWORD *)v18[2];
            v11 = *v24 == (_QWORD)v18;
            v18 = v24;
          }
          while (!v11);
        }
        v18 = v24;
      }
      while (v24 != (_QWORD *)(a1 + 520));
    }
    sub_1003F28AC(a1, 0, **(unsigned __int16 **)(v3 + 8), *(unsigned __int16 *)(*(_QWORD *)(v3 + 8) + 24));
    if (*(_BYTE *)(a1 + 32))
    {
      LOBYTE(__p) = 0;
      sub_100043758(&__p);
      sub_10022B12C(*(unsigned __int16 **)(v3 + 8));
      sub_100043728(&__p);
    }
    __p = 0;
    v61 = 0;
    v57 = v3;
    v62 = 0;
    sub_10001FE6C(&__p, v3 + 136);
    v25 = (char *)__p;
    if (__p != v61)
    {
      v26 = (uint64_t *)(a1 + 416);
      do
      {
        v27 = *(_QWORD *)v25;
        memset(&v59, 0, sizeof(v59));
        sub_10001FE6C(&v59, v27 + 104);
        v28 = (char *)v59.__r_.__value_.__r.__words[0];
        if (v59.__r_.__value_.__r.__words[0] != v59.__r_.__value_.__l.__size_)
        {
          do
          {
            v29 = *(_QWORD *)(*(_QWORD *)v28 + 8);
            v30 = *(_DWORD *)(v29 + 20);
            *(_OWORD *)buf = *(_OWORD *)(v29 + 4);
            v68 = v30;
            sub_100042F44(&v66, (__n128 *)buf);
            v64 = xmmword_10073B2C4;
            v65 = 0;
            if (sub_100072DF0((unsigned __int8 *)&v66, (unsigned __int8 *)&v64))
            {
              v31 = (_QWORD *)*v26;
              if (*v26)
              {
                v32 = *(_QWORD *)v28;
                v33 = (uint64_t *)(a1 + 416);
                do
                {
                  v34 = v31[4];
                  v35 = v34 >= v32;
                  if (v34 >= v32)
                    v36 = v31;
                  else
                    v36 = v31 + 1;
                  if (v35)
                    v33 = v31;
                  v31 = (_QWORD *)*v36;
                }
                while (*v36);
                if (v33 != v26 && v32 >= v33[4])
                {
                  sub_1003FAD98((uint64_t **)(a1 + 408), v33);
                  v37 = *(_QWORD *)(a1 + 464);
                  v38 = *(_QWORD *)(a1 + 440);
                  v39 = *(_QWORD *)(a1 + 448);
                  v40 = (_QWORD *)(v38 + 8 * (v37 >> 8));
                  if (v39 == v38)
                    v41 = 0;
                  else
                    v41 = *v40 + 16 * v37;
                  v42 = (_QWORD *)(v38 + 8 * (v37 >> 8));
LABEL_80:
                  v43 = v41;
                  while (1)
                  {
                    v44 = v39 == v38
                        ? 0
                        : *(_QWORD *)(v38 + (((*(_QWORD *)(a1 + 472) + v37) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * (*(_BYTE *)(a1 + 472) + v37);
                    if (v43 == v44)
                      break;
                    v45 = *(_QWORD *)(v43 + 8);
                    if (v32 == *(_QWORD *)(v45 + 16))
                    {
                      if (v39 == v38)
                        v47 = 0;
                      else
                        v47 = *v40 + 16 * v37;
                      if (v43 != v47)
                      {
                        *(_QWORD *)(v45 + 24) = &off_100918258;
                        v48 = *(unsigned int **)(v45 + 32);
                        if (v48)
                          sub_100056AAC(v48);

                        operator delete();
                      }
                      break;
                    }
                    v43 += 16;
                    v41 += 16;
                    if (*v42 + 4096 == v41)
                    {
                      v46 = v42[1];
                      ++v42;
                      v41 = v46;
                      goto LABEL_80;
                    }
                  }
                }
              }
            }
            v28 += 8;
          }
          while (v28 != (char *)v59.__r_.__value_.__l.__size_);
          v28 = (char *)v59.__r_.__value_.__r.__words[0];
        }
        if (v28)
        {
          v59.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
          operator delete(v28);
        }
        v25 += 8;
      }
      while (v25 != v61);
    }
    v50 = *(char **)(a1 + 360);
    v49 = *(char **)(a1 + 368);
    if (v50 != v49)
    {
      v51 = 0;
      while (*(_DWORD *)(*(_QWORD *)&v50[v51] + 16) != *a2)
      {
        v51 += 8;
        if (&v50[v51] == v49)
          goto LABEL_108;
      }
      v52 = &v50[v51];
      v53 = &v50[v51 + 8];
      v54 = v49 - v53;
      if (v49 != v53)
        memmove(&v50[v51], v53, v49 - v53);
      *(_QWORD *)(a1 + 368) = &v52[v54];
    }
LABEL_108:
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    if (__p)
    {
      v61 = (char *)__p;
      operator delete(__p);
    }
    v8 = 0;
  }
  else
  {
    v7 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
      sub_1006ED534(a2, v7);
    v8 = 1010;
  }
LABEL_111:
  sub_100034234((uint64_t)v63);
  return v8;
}

void sub_1003F3274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  unsigned int *v19;

  if (v19)
    sub_100056AAC(v19);
  sub_100034234((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F3318(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t *i;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  int v14;
  BOOL v15;
  int v16;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void *__p;
  char *v25;
  uint64_t v26;
  _QWORD v27[2];

  v27[0] = 0;
  v27[1] = 0;
  sub_10003415C((uint64_t)v27, a1 + 40);
  for (i = *(uint64_t **)(a1 + 360); i != *(uint64_t **)(a1 + 368); ++i)
  {
    if (a3)
      *a3 = *i;
    v8 = *i;
    if (*(_DWORD *)(*i + 16) == a2)
    {
      v3 = *i;
      goto LABEL_39;
    }
    __p = 0;
    v25 = 0;
    v26 = 0;
    sub_10001FE6C(&__p, v8 + 104);
    v9 = (char *)__p;
    v10 = (char *)__p;
    if (__p != v25)
    {
      while (*(_DWORD *)(*(_QWORD *)v10 + 16) != a2)
      {
        v10 += 8;
        if (v10 == v25)
          goto LABEL_8;
      }
      v16 = 1;
      v3 = *(_QWORD *)v10;
      if (!__p)
        goto LABEL_32;
LABEL_31:
      v25 = v9;
      operator delete(v9);
      goto LABEL_32;
    }
LABEL_8:
    v21 = 0;
    v22 = 0;
    v23 = 0;
    sub_10001FE6C(&v21, *i + 136);
    v11 = v21;
    if (v21 == v22)
    {
      v16 = 0;
      if (v21)
        goto LABEL_29;
    }
    else
    {
      while (1)
      {
        v12 = *(_QWORD *)v11;
        if (*(_DWORD *)(*(_QWORD *)v11 + 16) == a2)
          break;
        v12 = *(_QWORD *)(v12 + 96);
        if (*(_DWORD *)(v12 + 16) == a2)
          break;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        sub_10001FE6C(&v18, *(_QWORD *)v11 + 104);
        v13 = v18;
        if (v18 == v19)
        {
          v16 = 0;
          v15 = 1;
          if (v18)
          {
LABEL_17:
            v19 = v18;
            operator delete(v18);
          }
        }
        else
        {
          while (1)
          {
            v14 = *(_DWORD *)(*(_QWORD *)v13 + 16);
            v15 = v14 != a2;
            if (v14 == a2)
              break;
            v13 += 8;
            if (v13 == v19)
            {
              v16 = 0;
              if (v18)
                goto LABEL_17;
              goto LABEL_18;
            }
          }
          v16 = 1;
          v3 = *(_QWORD *)v13;
          if (v18)
            goto LABEL_17;
        }
LABEL_18:
        if (!v15)
          goto LABEL_28;
        v11 += 8;
        if (v11 == v22)
        {
          v16 = 0;
          goto LABEL_28;
        }
      }
      v16 = 1;
      v3 = v12;
LABEL_28:
      v11 = v21;
      if (v21)
      {
LABEL_29:
        v22 = v11;
        operator delete(v11);
      }
    }
    v9 = (char *)__p;
    if (__p)
      goto LABEL_31;
LABEL_32:
    if (v16)
      goto LABEL_39;
  }
  if (a3 && *a3)
  {
    v3 = 0;
    *a3 = 0;
  }
  else
  {
    v3 = 0;
  }
LABEL_39:
  sub_100034234((uint64_t)v27);
  return v3;
}

void sub_1003F353C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a19);
  _Unwind_Resume(a1);
}

_QWORD *sub_1003F3580(int64x2_t *a1, char *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char **v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char **v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v35;
  uint64_t v36;
  __n128 v37;

  v4 = a1[2].u64[0];
  v5 = a1->i64[1];
  v6 = (uint64_t *)(v5 + 8 * (v4 >> 8));
  if (a1[1].i64[0] == v5)
    v7 = 0;
  else
    v7 = *v6 + 16 * v4;
  v35 = v6;
  v36 = v7;
  if (v7 == a3)
    v8 = 0;
  else
    v8 = ((a3 - *(_QWORD *)a2) >> 4) + 32 * (a2 - (char *)v6) - ((v7 - *v6) >> 4);
  v9 = sub_1003FADD8((uint64_t)&v35, v8);
  v11 = (unint64_t)v9;
  v12 = v10;
  v13 = a1[2].i64[1];
  if (v8 <= (unint64_t)(v13 - 1) >> 1)
  {
    v19 = v10 - *v9;
    v20 = v19 >> 4;
    if (v19 < -15)
    {
      v29 = 254 - v20;
      v22 = &v9[-(v29 >> 8)];
      v23 = *v22 + 16 * ~(_BYTE)v29;
    }
    else
    {
      v21 = v20 + 1;
      v22 = &v9[v21 >> 8];
      v23 = *v22 + 16 * v21;
    }
    memset(&v37, 0, 32);
    sub_1003FAEFC(v35, v36, v9, v10, v22, v23, &v37);
    a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_10073D4C0);
    sub_1003FAE34((uint64_t)a1, 1);
  }
  else
  {
    v14 = v10 - *v9;
    v15 = v14 >> 4;
    if (v14 < -15)
    {
      v24 = 254 - v15;
      v17 = (char **)&v9[-(v24 >> 8)];
      v18 = &(*v17)[16 * ~(_BYTE)v24];
    }
    else
    {
      v16 = v15 + 1;
      v17 = (char **)&v9[v16 >> 8];
      v18 = &(*v17)[16 * v16];
    }
    v25 = a1[2].i64[0] + v13;
    v26 = a1->i64[1];
    v27 = (char **)(v26 + 8 * (v25 >> 8));
    if (a1[1].i64[0] == v26)
      v28 = 0;
    else
      v28 = &(*v27)[16 * v25];
    v37.n128_u64[0] = v11;
    v37.n128_u64[1] = v12;
    sub_1003FB074(v17, v18, v27, v28, (uint64_t)&v37);
    --a1[2].i64[1];
    sub_1003FAE90(a1, 1);
  }
  v30 = a1[2].u64[0];
  v31 = a1->i64[1];
  v32 = (_QWORD *)(v31 + 8 * (v30 >> 8));
  if (a1[1].i64[0] == v31)
    v33 = 0;
  else
    v33 = *v32 + 16 * v30;
  v37.n128_u64[0] = (unint64_t)v32;
  v37.n128_u64[1] = v33;
  return sub_1003FADD8((uint64_t)&v37, v8);
}

uint64_t sub_1003F377C(uint64_t a1, int *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD v31[2];
  __int128 v32;
  int v33;
  __n128 v34;
  uuid_t dst;
  int v36;

  v31[0] = 0;
  v31[1] = 0;
  sub_10003415C((uint64_t)v31, a1 + 40);
  v6 = sub_1003F2458(a1, *a2);
  v7 = v6;
  if (v6)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    sub_10001FE6C(&v28, v6 + 136);
    v8 = v28;
    if (v28 != v29)
    {
      v9 = (_QWORD *)(a1 + 416);
      do
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        sub_10001FE6C(&v25, *(_QWORD *)v8 + 104);
        v10 = v25;
        if (v25 != v26)
        {
          do
          {
            v11 = *(_QWORD *)(*(_QWORD *)v10 + 8);
            v12 = *(_DWORD *)(v11 + 20);
            *(_OWORD *)dst = *(_OWORD *)(v11 + 4);
            v36 = v12;
            sub_100042F44(&v34, (__n128 *)dst);
            v33 = 0;
            v32 = xmmword_100740FC8;
            if (sub_100072DF0((unsigned __int8 *)&v34, (unsigned __int8 *)&v32))
            {
              v13 = (_QWORD *)*v9;
              if (*v9)
              {
                v14 = *(_QWORD *)v10;
                v15 = v9;
                do
                {
                  v16 = v13[4];
                  v17 = v16 >= v14;
                  if (v16 >= v14)
                    v18 = v13;
                  else
                    v18 = v13 + 1;
                  if (v17)
                    v15 = v13;
                  v13 = (_QWORD *)*v18;
                }
                while (*v18);
                if (v15 != v9 && v14 >= v15[4])
                {
                  v20 = v15[5];
                  v19 = v15[6];
                  while (v20 != v19)
                  {
                    if (*(_WORD *)(v20 + 16))
                    {
                      v21 = *(_DWORD *)(*(_QWORD *)v8 + 16);
                      uuid_copy(dst, (const unsigned __int8 *)v20);
                      v36 = v21;
                      v22 = a3[1];
                      if (v22 >= a3[2])
                      {
                        v23 = sub_1003FB1A4(a3, (uint64_t)dst);
                      }
                      else
                      {
                        uuid_copy((unsigned __int8 *)a3[1], dst);
                        *(_DWORD *)(v22 + 16) = v36;
                        v23 = v22 + 20;
                        a3[1] = v22 + 20;
                      }
                      a3[1] = v23;
                      v19 = v15[6];
                    }
                    v20 += 18;
                  }
                }
              }
            }
            v10 += 8;
          }
          while (v10 != v26);
          v10 = v25;
        }
        if (v10)
        {
          v26 = v10;
          operator delete(v10);
        }
        v8 += 8;
      }
      while (v8 != v29);
      v8 = v28;
    }
    if (v8)
    {
      v29 = v8;
      operator delete(v8);
    }
  }
  sub_100034234((uint64_t)v31);
  return v7;
}

void sub_1003F39B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F3A14(uint64_t a1)
{
  NSObject *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  int v9;
  NSObject *v10;
  std::string v12;
  char v13;
  _QWORD v14[2];
  _BYTE v15[24];

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    if (qword_10097AC28 != -1)
      dispatch_once(&qword_10097AC28, &stru_10092DB00);
    if (!sub_10048472C(qword_10097AC20))
    {
      v13 = 0;
      sub_100043758(&v13);
      if (sub_10020EE18())
      {
        v2 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_INFO))
        {
          LOWORD(v12.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Compacting database!", (uint8_t *)&v12, 2u);
        }
        v4 = *(uint64_t **)(a1 + 360);
        v3 = *(uint64_t **)(a1 + 368);
        while (v4 != v3)
        {
          v5 = *v4;
          if (*v4 != *(_QWORD *)(a1 + 112) && v5 != *(_QWORD *)(a1 + 128))
          {
            sub_10022B12C(*(unsigned __int16 **)(v5 + 8));
            v3 = *(uint64_t **)(a1 + 368);
          }
          ++v4;
        }
        sub_10020E6CC();
        sub_10004339C(&v13);
        sub_1003F28AC(a1, 0, (unsigned __int16)(*(_WORD *)(*(_QWORD *)(a1 + 128) + 48) + 1), 0xFFFFu);
        sub_1003FA750(a1 + 408, *(_QWORD **)(a1 + 416));
        *(_QWORD *)(a1 + 416) = 0;
        *(_QWORD *)(a1 + 424) = 0;
        *(_QWORD *)(a1 + 408) = a1 + 416;
        v7 = *(uint64_t **)(a1 + 360);
        v6 = *(uint64_t **)(a1 + 368);
        while (v7 != v6)
        {
          v8 = (_QWORD *)*v7;
          if (*v7 != *(_QWORD *)(a1 + 112) && v8 != *(_QWORD **)(a1 + 128))
          {
            v9 = sub_1003F0A90(a1, *v7, 1);
            if (v9)
            {
              v10 = qword_100999820;
              if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
              {
                sub_1005BAE8C(v8, &v12);
                sub_1006ED5A8((uint64_t *)&v12, (uint64_t)v15, v9, v10);
              }
              break;
            }
            v6 = *(uint64_t **)(a1 + 368);
          }
          ++v7;
        }
      }
      sub_100043728(&v13);
    }
  }
  return sub_100034234((uint64_t)v14);
}

void sub_1003F3C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100043728(&a15);
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F3C68(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  unsigned int v9;

  v6 = sub_100068488(a1 + 232, a2);
  v7 = sub_100068488(a1 + 256, a2);
  v8 = a1 + 240 == v6;
  if (a1 + 240 == v6)
    v9 = 0;
  else
    v9 = a3;
  if (a1 + 264 != v7)
    v8 = 0;
  return v8 | v9;
}

uint64_t sub_1003F3CD4(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v10;
  uint64_t **v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 v36;
  char v38;
  _QWORD v39[2];

  v39[0] = 0;
  v39[1] = 0;
  sub_10003415C((uint64_t)v39, a1 + 40);
  if (!*(_BYTE *)(a1 + 32))
    return sub_100034234((uint64_t)v39);
  v10 = *(_QWORD *)(a1 + 392);
  if (v10)
  {
    v11 = (uint64_t **)(a1 + 384);
    v12 = *a2;
    v13 = a1 + 392;
    do
    {
      v14 = *(_DWORD *)(v10 + 32);
      v15 = v14 >= v12;
      if (v14 >= v12)
        v16 = (uint64_t *)v10;
      else
        v16 = (uint64_t *)(v10 + 8);
      if (v15)
        v13 = v10;
      v10 = *v16;
    }
    while (*v16);
    if (v13 != a1 + 392 && v12 >= *(_DWORD *)(v13 + 32))
    {
      if (!*(_BYTE *)(v13 + 44))
      {
        v38 = 0;
        sub_100043758(&v38);
        v33 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v13 + 48);
        v34 = *a2;
        v35 = sub_10003EB18(a4);
        v36 = sub_10003F8C4(a4);
        v33(v34, a3, v35, v36);
LABEL_26:
        sub_100043728(&v38);
        sub_1000040CC(v11, (uint64_t *)v13);
        operator delete((void *)v13);
        return sub_100034234((uint64_t)v39);
      }
      if ((_DWORD)a3)
      {
        v24 = sub_1003F3318(a1, *a5, 0);
        if (v24)
        {
LABEL_21:
          v38 = 0;
          sub_100043758(&v38);
          if (v24)
            v32 = *(_QWORD *)(v24 + 8);
          else
            v32 = 0;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(v13 + 48))(*a2, a3, v32);
          goto LABEL_26;
        }
        v25 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
          sub_1006ED67C((uint64_t)a5, v25, v26, v27, v28, v29, v30, v31);
      }
      v24 = 0;
      goto LABEL_21;
    }
  }
  v17 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    sub_1006ED614((uint64_t)a2, v17, v18, v19, v20, v21, v22, v23);
  return sub_100034234((uint64_t)v39);
}

void sub_1003F3E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003F3EC0(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  void *v20;
  std::string::size_type size;
  std::string::size_type v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  BOOL v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  _QWORD v40[6];
  _QWORD v41[2];
  __int128 v42;
  int v43;
  __int128 v44;
  int v45;
  __n128 v46[2];
  std::string v47;

  v7 = a3;
  v41[0] = 0;
  v41[1] = 0;
  sub_10003415C((uint64_t)v41, a1 + 40);
  if (*(_BYTE *)(a1 + 32))
  {
    v8 = *(_QWORD *)(a1 + 464);
    v9 = *(_QWORD *)(a1 + 440);
    v10 = *(_QWORD *)(a1 + 448);
    v11 = (_QWORD *)(v9 + 8 * (v8 >> 8));
    if (v10 == v9)
      v12 = 0;
    else
      v12 = (_QWORD *)(*v11 + 16 * v8);
LABEL_5:
    v13 = v12 - 512;
    while (1)
    {
      v14 = v10 == v9
          ? 0
          : *(_QWORD *)(v9 + (((*(_QWORD *)(a1 + 472) + v8) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (*(_BYTE *)(a1 + 472) + v8);
      if (v12 == (_QWORD *)v14)
        break;
      if (*v12 == a2)
      {
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        {
          sub_1000340DC(a2, (uint64_t)&v47);
          sub_1006ED7DC();
        }
        goto LABEL_22;
      }
      v12 += 2;
      v13 += 2;
      if ((_QWORD *)*v11 == v13)
      {
        v15 = (_QWORD *)v11[1];
        ++v11;
        v12 = v15;
        goto LABEL_5;
      }
    }
    v16 = sub_1003F3318(a1, a4, 0);
    v17 = (_QWORD *)v16;
    if (v16
      && (v18 = *(_QWORD *)(v16 + 8),
          v19 = *(_DWORD *)(v18 + 20),
          *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)(v18 + 4),
          LODWORD(v47.__r_.__value_.__r.__words[2]) = v19,
          sub_100042F44(v46, (__n128 *)&v47),
          v45 = 0,
          v44 = xmmword_100740FDC,
          sub_100072DF0((unsigned __int8 *)v46, (unsigned __int8 *)&v44)))
    {
      sub_10001FE6C(&v47, (uint64_t)(v17 + 13));
      size = v47.__r_.__value_.__l.__size_;
      v20 = (void *)v47.__r_.__value_.__r.__words[0];
      if (v47.__r_.__value_.__r.__words[0] == v47.__r_.__value_.__l.__size_)
        goto LABEL_34;
      v22 = v47.__r_.__value_.__r.__words[0];
      while (1)
      {
        v23 = *(_QWORD *)(*(_QWORD *)v22 + 8);
        v24 = *(_DWORD *)(v23 + 20);
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)(v23 + 4);
        LODWORD(v47.__r_.__value_.__r.__words[2]) = v24;
        sub_100042F44(v46, (__n128 *)&v47);
        v43 = 0;
        v42 = xmmword_100740FC8;
        if (sub_100072DF0((unsigned __int8 *)v46, (unsigned __int8 *)&v42))
          break;
        v22 += 8;
        if (v22 == size)
          goto LABEL_34;
      }
      v26 = *(_QWORD *)v22;
      if (!*(_QWORD *)v22)
      {
LABEL_34:
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        {
          sub_1005BAE8C(v17, &v47);
          sub_1006ED744();
        }
      }
      else
      {
        if (objc_msgSend(v7, "count"))
          operator new();
        v37 = v26;
        v27 = (_QWORD *)(a1 + 416);
        v28 = *(_QWORD **)(a1 + 416);
        if (!v28)
          goto LABEL_47;
        v29 = (_QWORD *)(a1 + 416);
        do
        {
          v30 = v28[4];
          v31 = v30 >= v37;
          if (v30 >= v37)
            v32 = v28;
          else
            v32 = v28 + 1;
          if (v31)
            v29 = v28;
          v28 = (_QWORD *)*v32;
        }
        while (*v32);
        if (v29 == v27 || v37 < v29[4])
LABEL_47:
          v29 = (_QWORD *)(a1 + 416);
        v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array", v37));
        if (v29 != v27)
        {
          v34 = v29[5];
          v33 = v29[6];
          while (v34 != v33)
          {
            if (*(_WORD *)(v34 + 16))
            {
              v35 = sub_100030DF4((const unsigned __int8 *)v34);
              v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
              objc_msgSend(v39, "addObject:", v36);

              v33 = v29[6];
            }
            v34 += 18;
          }
        }
        if (objc_msgSend(v39, "count"))
          operator new();
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        {
          sub_1005BAE8C(v38, &v47);
          sub_1006ED790();
        }

      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        sub_1006ED6E4();
      v20 = 0;
    }
    if (*(_QWORD *)(a1 + 104))
    {
      v25 = sub_1000419F4();
      v40[0] = _NSConcreteStackBlock;
      v40[1] = 3221225472;
      v40[2] = sub_1003F50B4;
      v40[3] = &unk_100918090;
      v40[4] = a1;
      v40[5] = a2;
      sub_100041A34(v25, v40);
    }
    sub_100034234((uint64_t)v41);
    if (v20)
      operator delete(v20);
  }
  else
  {
LABEL_22:
    sub_100034234((uint64_t)v41);
  }

}

void sub_1003F435C(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  sub_100034234((uint64_t)va);
  if (v10)
    operator delete(v10);

  _Unwind_Resume(a1);
}

__n128 sub_1003F441C(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1003FB320(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_1003F44A4(uint64_t a1, __n128 a2)
{
  NSObject *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  NSObject *v17;
  uint64_t *v18;
  unsigned int *v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  const char *v28;
  NSObject *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  BOOL v35;
  _QWORD *v36;
  uint64_t i;
  id v38;
  void *v39;
  unsigned __int8 v40;
  const unsigned __int8 *j;
  id v42;
  void *v43;
  unsigned __int8 v44;
  NSObject *v45;
  void *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  NSObject *v50;
  const char *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  const void *v54;
  unsigned __int16 v55;
  int v56;
  NSObject *v57;
  void *v58;
  BOOL v59;
  NSObject *v60;
  NSObject *v61;
  NSObject *v62;
  NSObject *v63;
  id v64;
  id v65;
  id v66;
  unsigned int *v67;
  NSObject *v68;
  id v69;
  id v70;
  __n128 v71;
  int64x2_t *v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  id obj;
  char v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _QWORD v90[6];
  uint8_t v91;
  char v92[15];
  uint8_t buf[4];
  const char *v94;
  __int16 v95;
  char *v96;
  _BYTE v97[128];

  if (*(_BYTE *)(a1 + 480))
  {
    v2 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Not sending updates as TX queue is full", buf, 2u);
    }
    return;
  }
  v72 = (int64x2_t *)(a1 + 432);
  v4 = *(_QWORD *)(a1 + 464);
  v5 = *(_QWORD *)(a1 + 440);
  v6 = *(_QWORD *)(a1 + 448);
  v7 = (char *)(v5 + 8 * (v4 >> 8));
  if (v6 == v5)
    v8 = 0;
  else
    v8 = (uint64_t *)(*(_QWORD *)v7 + 16 * v4);
  v83 = (_QWORD *)(a1 + 416);
  v77 = a1 + 544;
  v78 = a1 + 536;
  a2.n128_u64[0] = 138543618;
  v71 = a2;
  while (1)
  {
    if (v6 == v5)
    {
      v10 = 0;
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 472) + *(_QWORD *)(a1 + 464);
      v10 = *(_QWORD *)(v5 + ((v9 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v9;
    }
    if (v8 == (uint64_t *)v10)
      return;
    v11 = v8[1];
    v75 = *v8;
    v81 = *(_QWORD *)(a1 + 328);
    v82 = *(_QWORD *)(v11 + 16);
    v80 = v11;
    if (v82 != v81)
    {
      v12 = (_QWORD *)*v83;
      if (!*v83)
        goto LABEL_24;
      v13 = v83;
      do
      {
        v14 = v12[4];
        v15 = v14 >= v82;
        if (v14 >= v82)
          v16 = v12;
        else
          v16 = v12 + 1;
        if (v15)
          v13 = v12;
        v12 = (_QWORD *)*v16;
      }
      while (*v16);
      if (v13 == v83 || v82 < v13[4])
      {
LABEL_24:
        v17 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
          sub_1006ED828(&v91, v92, v17);
        v76 = (char *)sub_1003F3580(v72, v7, (uint64_t)v8);
        v8 = v18;
        if (v80)
        {
          *(_QWORD *)(v80 + 24) = &off_100918258;
          v19 = *(unsigned int **)(v80 + 32);
          if (v19)
            sub_100056AAC(v19);

          operator delete();
        }
        if (*(_QWORD *)(a1 + 104))
        {
          v20 = sub_1000419F4();
          v90[0] = _NSConcreteStackBlock;
          v90[1] = 3221225472;
          v90[2] = sub_1003F7CBC;
          v90[3] = &unk_100918090;
          v90[4] = a1;
          v90[5] = v75;
          sub_100041A34(v20, v90);
        }
        goto LABEL_123;
      }
    }
    v73 = (uint64_t)v8;
    v76 = v7;
    v74 = objc_msgSend(*(id *)v11, "mutableCopy", *(_OWORD *)&v71);
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    obj = v74;
    v22 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v86, v97, 16);
    if (v22)
      break;
LABEL_115:

    objc_msgSend(obj, "removeObjectsInArray:", v21);
    if (!objc_msgSend(obj, "count"))
    {
      sub_1003F3580(v72, v76, v73);
      *(_QWORD *)(v80 + 24) = &off_100918258;
      v67 = *(unsigned int **)(v80 + 32);
      if (v67)
        sub_100056AAC(v67);

      operator delete();
    }
    v65 = objc_msgSend(obj, "copy");
    v66 = *(id *)v80;
    *(_QWORD *)v80 = v65;

    if (v73 + 16 - *(_QWORD *)v76 == 4096)
    {
      v8 = (uint64_t *)*((_QWORD *)v76 + 1);
      v76 += 8;
    }
    else
    {
      v8 = (uint64_t *)(v73 + 16);
    }

LABEL_123:
    v5 = *(_QWORD *)(a1 + 440);
    v6 = *(_QWORD *)(a1 + 448);
    v7 = v76;
  }
  v23 = *(_QWORD *)v87;
  v79 = v80 + 24;
LABEL_34:
  v24 = 0;
  while (1)
  {
    if (*(_QWORD *)v87 != v23)
      objc_enumerationMutation(obj);
    v25 = *(char **)(*((_QWORD *)&v86 + 1) + 8 * v24);
    if (qword_10097AC28 != -1)
      dispatch_once(&qword_10097AC28, &stru_10092DB00);
    if (!sub_10000671C(qword_10097AC20, v25))
    {
      v29 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        v94 = v25;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Dropping update of device \"%{public}@\" as it is no longer connected", buf, 0xCu);
      }
      goto LABEL_72;
    }
    if (!objc_msgSend(*(id *)(a1 + 488), "containsObject:", v25))
      break;
    v26 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v94 = v25;
      v27 = v26;
      v28 = "Skipping update of device \"%{public}@\" as it is being stalled";
LABEL_43:
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, v28, buf, 0xCu);
    }
LABEL_73:
    if ((id)++v24 == v22)
    {
      v64 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v86, v97, 16);
      v22 = v64;
      if (v64)
        goto LABEL_34;
      goto LABEL_115;
    }
  }
  if (v82 != v81)
  {
    v30 = v83;
    v31 = (_QWORD *)*v83;
    if (!*v83)
      goto LABEL_59;
    v32 = *(_QWORD *)(v80 + 16);
    v33 = v83;
    do
    {
      v34 = v31[4];
      v35 = v34 >= v32;
      if (v34 >= v32)
        v36 = v31;
      else
        v36 = v31 + 1;
      if (v35)
        v33 = v31;
      v31 = (_QWORD *)*v36;
    }
    while (*v36);
    v30 = v83;
    if (v33 == v83 || v32 < v33[4])
LABEL_59:
      v33 = v30;
    for (i = v33[5]; i != v33[6]; i += 18)
    {
      v38 = sub_100030DF4((const unsigned __int8 *)i);
      v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
      v40 = objc_msgSend(v39, "isEqual:", v25);

      if ((v40 & 1) != 0)
      {
        if (*(_WORD *)(i + 16) == 2)
          goto LABEL_75;
        if (*(_WORD *)(i + 16))
        {
          v48 = 1;
          goto LABEL_82;
        }
        break;
      }
    }
LABEL_70:
    v45 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v94 = v25;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Dropping update of device \"%{public}@\" as it is no longer subscribed", buf, 0xCu);
    }
    goto LABEL_72;
  }
  for (j = *(const unsigned __int8 **)(a1 + 336); ; j += 20)
  {
    if (j == *(const unsigned __int8 **)(a1 + 344))
      goto LABEL_70;
    v42 = sub_100030DF4(j);
    v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
    v44 = objc_msgSend(v43, "isEqual:", v25);

    if ((v44 & 1) != 0)
      break;
  }
LABEL_75:
  v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 504), "objectForKey:", v25));
  if (v46)
  {

LABEL_78:
    v47 = qword_100999820;
    if (!os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
      goto LABEL_73;
    *(_DWORD *)buf = 138543362;
    v94 = v25;
    v27 = v47;
    v28 = "Skipping update of device \"%{public}@\" as we're still waiting on an indication response";
    goto LABEL_43;
  }
  if (objc_msgSend(*(id *)(a1 + 496), "containsObject:", v25))
    goto LABEL_78;
  v48 = 0;
LABEL_82:
  sub_100030BCC(buf, v25);
  v49 = sub_10000C5B8(v78, buf);
  v50 = qword_100999820;
  if (v77 == v49)
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v94 = v25;
      _os_log_error_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "Dropping update of device \"%{public}@\" as we have no ATT session", buf, 0xCu);
    }
LABEL_72:
    objc_msgSend(v21, "addObject:", v25);
    goto LABEL_73;
  }
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v51 = "indication";
    if (v48)
      v51 = "notification";
    v94 = v51;
    v95 = 2114;
    v96 = v25;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Sending %{public}s to device \"%{public}@\"", buf, 0x16u);
  }
  v85 = 0;
  sub_100043758(&v85);
  v52 = *(_QWORD *)(v49 + 48);
  v53 = *(unsigned __int8 **)(*(_QWORD *)(v80 + 8) + 8);
  v54 = (const void *)sub_10003EB18(v79);
  v55 = sub_10003F8C4(v79);
  v56 = sub_10022B704(v52, v53, v48, v54, v55);
  sub_10004339C(&v85);
  if (!v56)
  {
    if ((v48 & 1) == 0)
    {
      if (v75)
      {
        v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 504), "objectForKey:", v25));
        v59 = v58 == 0;

        if (!v59)
        {
          v60 = qword_100999820;
          if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 138543362;
            v94 = v25;
            _os_log_fault_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_FAULT, "Already tracking indication for device \"%{public}@\"", buf, 0xCu);
          }
        }
        objc_msgSend(*(id *)(a1 + 504), "setObject:forKey:", v75, v25);
      }
      else
      {
        if (objc_msgSend(*(id *)(a1 + 496), "containsObject:", v25))
        {
          v63 = qword_100999820;
          if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 138543362;
            v94 = v25;
            _os_log_fault_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_FAULT, "Already tracking services changed for device \"%{public}@\"", buf, 0xCu);
          }
        }
        objc_msgSend(*(id *)(a1 + 496), "addObject:", v25);
      }
    }
LABEL_112:
    objc_msgSend(v21, "addObject:", v25);
LABEL_113:
    sub_100043728(&v85);
    goto LABEL_73;
  }
  if (v56 == 146)
  {
    v61 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v94 = v25;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "Stalling updates to device \"%{public}@\" as it is performing an MTU exchange", buf, 0xCu);
    }
    if (objc_msgSend(*(id *)(a1 + 488), "containsObject:", v25))
    {
      v62 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138543362;
        v94 = v25;
        _os_log_fault_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_FAULT, "Already stalling device \"%{public}@\"", buf, 0xCu);
      }
    }
    objc_msgSend(*(id *)(a1 + 488), "addObject:", v25);
    goto LABEL_113;
  }
  if (v56 != 410)
  {
    v57 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = v71.n128_u32[0];
      v94 = v25;
      v95 = 1024;
      LODWORD(v96) = v56;
      _os_log_error_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "Failed to send update to device \"%{public}@\" with result %{bluetooth:OI_STATUS}u", buf, 0x12u);
    }
    goto LABEL_112;
  }
  v68 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "TX queue is full - stalling all updates", buf, 2u);
  }
  *(_BYTE *)(a1 + 480) = 1;
  objc_msgSend(obj, "removeObjectsInArray:", v21);
  v69 = objc_msgSend(obj, "copy");
  v70 = *(id *)v80;
  *(_QWORD *)v80 = v69;

  sub_100043728(&v85);
}

void sub_1003F5024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;

  sub_100043728(&a39);

  _Unwind_Resume(a1);
}

uint64_t sub_1003F50B4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 104) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 104), *(_QWORD *)(a1 + 40));
}

id sub_1003F50C8(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  void *v12;
  _QWORD v14[2];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 40);
  v3 = *(_QWORD **)(a1 + 408);
  v4 = (_QWORD *)(a1 + 416);
  if (v3 != (_QWORD *)(a1 + 416))
  {
    do
    {
      v6 = v3[5];
      v5 = v3[6];
      while (v6 != v5)
      {
        if (*(_WORD *)(v6 + 16))
        {
          v7 = sub_100030DF4((const unsigned __int8 *)v6);
          v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
          objc_msgSend(v2, "addObject:", v8);

          v5 = v3[6];
        }
        v6 += 18;
      }
      v9 = (_QWORD *)v3[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v3[2];
          v11 = *v10 == (_QWORD)v3;
          v3 = v10;
        }
        while (!v11);
      }
      v3 = v10;
    }
    while (v10 != v4);
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allObjects"));
  sub_100034234((uint64_t)v14);

  return v12;
}

void sub_1003F51C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1003F51F8(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 40);
  v4 = *(_QWORD *)(a1 + 392);
  if (!v4)
    goto LABEL_20;
  v5 = (uint64_t **)(a1 + 384);
  v6 = a1 + 392;
  v7 = a1 + 392;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 != v6 && *(_DWORD *)(v7 + 32) <= a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_1006ED8C4();
    sub_1000040CC(v5, (uint64_t *)v7);
    operator delete((void *)v7);
  }
  else
  {
LABEL_20:
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_1006ED864();
  }
  return sub_100034234((uint64_t)v12);
}

uint64_t sub_1003F52F0(uint64_t a1, uint64_t a2, int a3)
{
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  __int16 v14;
  _QWORD v15[2];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  void *v19;

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 40);
  v6 = sub_1003F5478(a1, a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v7)
  {
    v8 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      v17 = a3;
      v18 = 2114;
      v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "MTU is now %u for device \"%{public}@\"", buf, 0x12u);
    }
    if (*(_QWORD *)(a1 + 104))
    {
      v9 = sub_1000419F4();
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1003F5520;
      v11[3] = &unk_10092A3E0;
      v13 = a1;
      v12 = v7;
      v14 = a3;
      sub_100041A34(v9, v11);

    }
  }

  return sub_100034234((uint64_t)v15);
}

void sub_1003F5440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1003F5478(uint64_t a1, uint64_t a2)
{
  const unsigned __int8 *v2;
  unsigned __int8 *v3;
  const unsigned __int8 **v4;
  BOOL v5;
  void *v6;
  id v7;

  v2 = *(const unsigned __int8 **)(a1 + 536);
  if (v2 == (const unsigned __int8 *)(a1 + 544))
  {
LABEL_9:
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_1006ED924();
    v6 = 0;
  }
  else
  {
    while (*((_QWORD *)v2 + 6) != a2)
    {
      v3 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
      if (v3)
      {
        do
        {
          v4 = (const unsigned __int8 **)v3;
          v3 = *(unsigned __int8 **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (const unsigned __int8 **)*((_QWORD *)v2 + 2);
          v5 = *v4 == v2;
          v2 = (const unsigned __int8 *)v4;
        }
        while (!v5);
      }
      v2 = (const unsigned __int8 *)v4;
      if (v4 == (const unsigned __int8 **)(a1 + 544))
        goto LABEL_9;
    }
    v7 = sub_100030DF4(v2 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v7);
  }
  return v6;
}

uint64_t sub_1003F5520(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 104) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 104), *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 48));
}

uint64_t sub_1003F553C(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  NSObject *v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  NSObject *v13;
  id v14;
  uint64_t v15;
  _QWORD v17[6];
  _QWORD v18[2];
  uint8_t buf[24];

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 40);
  v4 = sub_1003F5478(a1, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (v5)
  {
    if (objc_msgSend(*(id *)(a1 + 496), "containsObject:", v5))
    {
      v6 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "indicationConfirmed";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s - Server Indication - Device:%{public}@", buf, 0x16u);
      }
      objc_msgSend(*(id *)(a1 + 496), "removeObject:", v5);
      v8 = *(_QWORD *)(a1 + 336);
      v9 = *(_QWORD *)(a1 + 344);
      while (v8 != v9)
      {
        memset(buf, 0, 20);
        uuid_copy(buf, (const unsigned __int8 *)v8);
        *(_DWORD *)&buf[16] = *(_DWORD *)(v8 + 16);
        v10 = sub_100030DF4(buf);
        v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        objc_msgSend(v5, "isEqual:", v11);

        v8 += 20;
      }
    }
    else
    {
      v12 = objc_msgSend(*(id *)(a1 + 504), "objectForKey:", v5);
      v13 = qword_100999820;
      if (v12)
      {
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "indicationConfirmed";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v5;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%s - App Indication - Device:%{public}@", buf, 0x16u);
        }
        v14 = objc_msgSend(*(id *)(a1 + 504), "objectForKey:", v5);
        objc_msgSend(*(id *)(a1 + 504), "removeObjectForKey:", v5);
        if (*(_QWORD *)(a1 + 104))
        {
          v15 = sub_1000419F4();
          v17[0] = _NSConcreteStackBlock;
          v17[1] = 3221225472;
          v17[2] = sub_1003F57DC;
          v17[3] = &unk_100918090;
          v17[4] = a1;
          v17[5] = v14;
          sub_100041A34(v15, v17);
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      {
        sub_1006ED950((uint64_t)v5, v13);
      }
    }
    sub_1003F44A4(a1, v7);
  }

  return sub_100034234((uint64_t)v18);
}

void sub_1003F57A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F57DC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 104) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 104), *(_QWORD *)(a1 + 40));
}

uint64_t sub_1003F57F0(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  NSObject *v6;
  __n128 v7;
  NSObject *v8;
  __n128 v9;
  _QWORD v11[2];
  uint8_t buf[4];
  void *v13;

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 40);
  if (a2)
  {
    v4 = sub_1003F5478(a1, a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    if (v5)
    {
      v6 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        v13 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received device \"%{public}@\" ready event from stack", buf, 0xCu);
      }
      if (objc_msgSend(*(id *)(a1 + 488), "containsObject:", v5))
      {
        objc_msgSend(*(id *)(a1 + 488), "removeObject:", v5);
        sub_1003F44A4(a1, v7);
      }

    }
  }
  else
  {
    v8 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received update queue ready event from stack", buf, 2u);
    }
    *(_BYTE *)(a1 + 480) = 0;
    sub_1003F44A4(a1, v9);
  }
  return sub_100034234((uint64_t)v11);
}

void sub_1003F594C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F5978(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  id v17;
  void *v18;
  uint64_t **v19;
  uint64_t v21;
  _QWORD v23[2];
  unsigned int v24;
  unsigned int *v25;

  v24 = a2;
  v23[0] = 0;
  v23[1] = 0;
  sub_10003415C((uint64_t)v23, a1 + 40);
  v10 = a1 + 520;
  v11 = *(_QWORD **)(a1 + 520);
  if (!v11)
    goto LABEL_12;
  v12 = a1 + 520;
  do
  {
    v13 = v11[4];
    v14 = v13 >= a3;
    if (v13 >= a3)
      v15 = v11;
    else
      v15 = v11 + 1;
    if (v14)
      v12 = (uint64_t)v11;
    v11 = (_QWORD *)*v15;
  }
  while (*v15);
  if (v12 == v10 || *(_QWORD *)(v12 + 32) > a3)
LABEL_12:
    v12 = a1 + 520;
  if (v12 != v10 || a4 == 0)
  {
    if (a4)
    {
      v17 = sub_1003F5478(a1, a3);
      v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      if (v18)
      {
        if (*(_QWORD *)(a1 + 104))
        {
          v25 = &v24;
          v19 = sub_10033ED08((uint64_t **)(a1 + 384), &v24, (uint64_t)&unk_100740F58, &v25);
          *((_DWORD *)v19 + 10) = 0;
          *((_BYTE *)v19 + 44) = 1;
          *(_WORD *)((char *)v19 + 45) = 0;
          *((_BYTE *)v19 + 47) = 0;
          v19[6] = a5;
          sub_1000419F4();
          operator new();
        }
        v21 = 242;
      }
      else
      {
        v21 = 14;
      }

    }
    else
    {
      v21 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_1006ED9D4();
    v21 = 14;
  }
  if (v12 != v10)
    sub_1003FAD50((uint64_t **)(a1 + 512), v12);
  if (a5)
  {
    LOBYTE(v25) = 0;
    sub_100043758(&v25);
    ((void (*)(uint64_t, uint64_t, _QWORD))a5)(a2, v21, 0);
    sub_100043728(&v25);
  }
  return sub_100034234((uint64_t)v23);
}

void sub_1003F5B80()
{
  operator delete();
}

uint64_t sub_1003F5BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  int v8;
  uint64_t v9;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  int v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 40);
  if (*(_QWORD *)(a1 + 104) && sub_1003F5D00(a1, a2, &v16, &v17) && v16)
  {
    v6 = sub_1003F5478(a1, a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    if (v7)
    {
      v8 = *(_DWORD *)(v17 + 16);
      v9 = sub_1000419F4();
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1003F5FD8;
      v11[3] = &unk_100919818;
      v13 = a1;
      v12 = v7;
      v14 = v8;
      sub_100041A34(v9, v11);

    }
  }
  return sub_100034234((uint64_t)v15);
}

void sub_1003F5CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F5D00(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  int v18;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *__p;
  char *v27;
  uint64_t v28;
  _QWORD v29[2];

  v29[0] = 0;
  v29[1] = 0;
  sub_10003415C((uint64_t)v29, a1 + 40);
  v9 = *(uint64_t **)(a1 + 360);
  if (v9 == *(uint64_t **)(a1 + 368))
  {
LABEL_45:
    if (a3)
      *a3 = 0;
    v4 = 0;
    if (a4)
      *a4 = 0;
    goto LABEL_53;
  }
LABEL_2:
  if (a4)
    *a4 = *v9;
  v10 = *v9;
  if (*(_QWORD *)(*v9 + 8) != a2)
  {
    __p = 0;
    v27 = 0;
    v28 = 0;
    sub_10001FE6C(&__p, v10 + 104);
    v11 = (char *)__p;
    v12 = (char *)__p;
    if (__p != v27)
    {
      do
      {
        if (*(_QWORD *)(*(_QWORD *)v12 + 8) == a2)
        {
          if (a3)
          {
            *a3 = *v9;
            v4 = *(_QWORD *)v12;
            v17 = 1;
          }
          else
          {
            v17 = 1;
            v4 = *(_QWORD *)v12;
          }
          goto LABEL_39;
        }
        v12 += 8;
      }
      while (v12 != v27);
    }
    v23 = 0;
    v24 = 0;
    v25 = 0;
    sub_10001FE6C(&v23, *v9 + 136);
    v13 = v23;
    if (v23 == v24)
    {
      v17 = 0;
      if (v23)
        goto LABEL_37;
      goto LABEL_38;
    }
    while (1)
    {
      v14 = *(_QWORD *)v13;
      if (*(_QWORD *)(*(_QWORD *)v13 + 8) == a2)
      {
        if (a3)
        {
          *a3 = *v9;
          goto LABEL_33;
        }
LABEL_34:
        v17 = 1;
        goto LABEL_36;
      }
      if (*(_QWORD *)(*(_QWORD *)(v14 + 96) + 8) == a2)
      {
        if (!a3)
        {
          v17 = 1;
          v14 = *(_QWORD *)(v14 + 96);
          goto LABEL_36;
        }
        *a3 = v14;
        v13 = (char *)(*(_QWORD *)v13 + 96);
LABEL_33:
        v14 = *(_QWORD *)v13;
        goto LABEL_34;
      }
      v20 = 0;
      v21 = 0;
      v22 = 0;
      sub_10001FE6C(&v20, *(_QWORD *)v13 + 104);
      v15 = v20;
      v16 = v20;
      if (v20 == v21)
        break;
      while (*(_QWORD *)(*(_QWORD *)v16 + 8) != a2)
      {
        v16 += 8;
        if (v16 == v21)
          goto LABEL_14;
      }
      v18 = 0;
      if (!a3)
      {
        v17 = 1;
        v4 = *(_QWORD *)v16;
        if (!v20)
          goto LABEL_19;
LABEL_18:
        v21 = v15;
        operator delete(v15);
        goto LABEL_19;
      }
      *a3 = *(_QWORD *)v13;
      v4 = *(_QWORD *)v16;
      v17 = 1;
      if (v15)
        goto LABEL_18;
LABEL_19:
      if (!v18)
        goto LABEL_35;
      v13 += 8;
      if (v13 == v24)
      {
        v17 = 0;
LABEL_35:
        v14 = v4;
LABEL_36:
        v13 = v23;
        v4 = v14;
        if (v23)
        {
LABEL_37:
          v24 = v13;
          operator delete(v13);
        }
LABEL_38:
        v11 = (char *)__p;
LABEL_39:
        if (v11)
        {
          v27 = v11;
          operator delete(v11);
        }
        if (v17)
          goto LABEL_53;
        if (++v9 == *(uint64_t **)(a1 + 368))
          goto LABEL_45;
        goto LABEL_2;
      }
    }
LABEL_14:
    v17 = 0;
    v18 = 1;
    if (!v20)
      goto LABEL_19;
    goto LABEL_18;
  }
  if (a3)
    *a3 = 0;
  v4 = *v9;
LABEL_53:
  sub_100034234((uint64_t)v29);
  return v4;
}

void sub_1003F5F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F5FD8(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 104), *(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 48));
}

void sub_1003F5FF4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  int v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  std::string *v22;
  std::string::size_type size;
  char v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  uint64_t v28;
  std::string v29;
  std::string __p;
  std::string v31;
  char v32;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  __int16 v37;
  uint64_t v38;
  unsigned int *v39;
  char v40;

  v37 = a3;
  v36 = a4;
  v34 = 0;
  v35 = 0;
  v33[0] = 0;
  v33[1] = 0;
  sub_10003415C((uint64_t)v33, a1 + 40);
  v32 = 0;
  v12 = sub_1003F5D00(a1, a2, &v35, &v34);
  if (v12 && v35)
  {
    if ((*(_BYTE *)(v35 + 72) & 2) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        sub_1006EDA00();
      v13 = 0;
      v14 = 2;
      goto LABEL_10;
    }
    v15 = sub_1003F5478(a1, a5);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v15);
    if (!v13)
    {
      v14 = 14;
      goto LABEL_10;
    }
    if (v34 != *(_QWORD *)(a1 + 112) && v34 != *(_QWORD *)(a1 + 128) && v34 != *(_QWORD *)(a1 + 144))
    {
      if (*(_QWORD *)(a1 + 104))
      {
        v16 = *(_DWORD *)(v12 + 16);
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
        v17 = sub_10033ED08((uint64_t **)(a1 + 384), &v36, (uint64_t)&unk_100740F58, &v31);
        *((_DWORD *)v17 + 10) = v16;
        *((_DWORD *)v17 + 11) = 0;
        v17[6] = a6;
        sub_1000419F4();
        operator new();
      }
      v14 = 242;
      goto LABEL_10;
    }
    v18 = sub_100027F68();
    sub_100091AE8(&v31, "GATT");
    sub_100091AE8(&__p, "DUMMY_DIS");
    (*(void (**)(uint64_t, std::string *, std::string *, char *))(*(_QWORD *)v18 + 72))(v18, &v31, &__p, &v32);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    memset(&v31, 0, sizeof(v31));
    sub_100091AE8(&v31, "Dummy Apple DIS");
    memset(&__p, 0, sizeof(__p));
    v19 = sub_100027F68();
    sub_100091AE8(&v29, "GATT");
    sub_100091AE8(&v38, "DUMMY_DIS_NAME");
    v20 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t *, std::string *))(*(_QWORD *)v19 + 56))(v19, &v29, &v38, &__p);
    if (v40 < 0)
      operator delete((void *)v38);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v29.__r_.__value_.__l.__data_);
      if (!v20)
        goto LABEL_29;
    }
    else if (!v20)
    {
LABEL_29:
      if (v12 != *(_QWORD *)(a1 + 120))
      {
        if (v12 == *(_QWORD *)(a1 + 152))
        {
          if (v32)
          {
            memset(&v29, 0, sizeof(v29));
            sub_1003F6A4C(" MFGR Name", (const void **)&v31.__r_.__value_.__l.__data_, &v29);
            v21 = *(_QWORD *)(a1 + 152);
            if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v22 = &v29;
            else
              v22 = (std::string *)v29.__r_.__value_.__r.__words[0];
            if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
            else
              size = v29.__r_.__value_.__l.__size_;
            goto LABEL_68;
          }
        }
        else if (v12 == *(_QWORD *)(a1 + 160))
        {
          if (v32)
          {
            memset(&v29, 0, sizeof(v29));
            sub_1003F6A4C(" Model Number", (const void **)&v31.__r_.__value_.__l.__data_, &v29);
            v21 = *(_QWORD *)(a1 + 160);
            if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v22 = &v29;
            else
              v22 = (std::string *)v29.__r_.__value_.__r.__words[0];
            if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
            else
              size = v29.__r_.__value_.__l.__size_;
            goto LABEL_68;
          }
        }
        else
        {
          if (v12 == *(_QWORD *)(a1 + 168) && v32)
          {
            memset(&v29, 0, sizeof(v29));
            sub_1003F6A4C(" Serial Number", (const void **)&v31.__r_.__value_.__l.__data_, &v29);
            v21 = *(_QWORD *)(a1 + 168);
            if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v22 = &v29;
            else
              v22 = (std::string *)v29.__r_.__value_.__r.__words[0];
            if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
            else
              size = v29.__r_.__value_.__l.__size_;
LABEL_68:
            sub_10003994C(&v38, v22, size);
            sub_100041698(v21 + 72, (uint64_t)&v38);
            v38 = (uint64_t)&off_100918258;
            if (v39)
              sub_100056AAC(v39);
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v29.__r_.__value_.__l.__data_);
            goto LABEL_72;
          }
          if (v12 == *(_QWORD *)(a1 + 176) && v32)
          {
            memset(&v29, 0, sizeof(v29));
            sub_1003F6A4C(" HW Revision", (const void **)&v31.__r_.__value_.__l.__data_, &v29);
            v21 = *(_QWORD *)(a1 + 176);
            if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v22 = &v29;
            else
              v22 = (std::string *)v29.__r_.__value_.__r.__words[0];
            if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
            else
              size = v29.__r_.__value_.__l.__size_;
            goto LABEL_68;
          }
          if (v12 == *(_QWORD *)(a1 + 184) && v32)
          {
            memset(&v29, 0, sizeof(v29));
            sub_1003F6A4C(" FW Revision", (const void **)&v31.__r_.__value_.__l.__data_, &v29);
            v21 = *(_QWORD *)(a1 + 184);
            if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v22 = &v29;
            else
              v22 = (std::string *)v29.__r_.__value_.__r.__words[0];
            if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
            else
              size = v29.__r_.__value_.__l.__size_;
            goto LABEL_68;
          }
          if (v12 == *(_QWORD *)(a1 + 192) && v32)
          {
            memset(&v29, 0, sizeof(v29));
            sub_1003F6A4C(" SW Revision", (const void **)&v31.__r_.__value_.__l.__data_, &v29);
            v21 = *(_QWORD *)(a1 + 192);
            if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v22 = &v29;
            else
              v22 = (std::string *)v29.__r_.__value_.__r.__words[0];
            if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
            else
              size = v29.__r_.__value_.__l.__size_;
            goto LABEL_68;
          }
          if (v12 == *(_QWORD *)(a1 + 200) && v32)
          {
            BYTE2(v38) = 26;
            LOWORD(v38) = 6682;
            sub_10003994C(&v29, &v38, 3uLL);
            sub_100041698(v12 + 72, (uint64_t)&v29);
            goto LABEL_128;
          }
          if (v12 == *(_QWORD *)(a1 + 208) && v32)
          {
            BYTE2(v38) = 27;
            LOWORD(v38) = 6939;
            sub_10003994C(&v29, &v38, 3uLL);
            sub_100041698(v12 + 72, (uint64_t)&v29);
            goto LABEL_128;
          }
          if (v12 == *(_QWORD *)(a1 + 216) && v32)
          {
            BYTE2(v38) = 28;
            LOWORD(v38) = 7196;
            sub_10003994C(&v29, &v38, 3uLL);
            sub_100041698(v12 + 72, (uint64_t)&v29);
            goto LABEL_128;
          }
          if (v12 == *(_QWORD *)(a1 + 224) && v32)
          {
            v38 = 0x3837363534333231;
            sub_10003994C(&v29, &v38, 8uLL);
            sub_100041698(v12 + 72, (uint64_t)&v29);
LABEL_128:
            v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_100918258;
            if (v29.__r_.__value_.__l.__size_)
              sub_100056AAC((unsigned int *)v29.__r_.__value_.__l.__size_);
          }
        }
LABEL_72:
        v28 = v12 + 72;
        if (!sub_10003EB18(v12 + 72) && os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
          sub_1006EDA2C();
        if (sub_10003F8C4(v28) >= (unint64_t)a3)
        {
          if ((unsigned __int16)sub_10003F8C4(v28) != (_WORD)a3)
            operator new[]();
          v14 = 0;
        }
        else
        {
          v14 = 7;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
        goto LABEL_10;
      }
      memset(&v29, 0, sizeof(v29));
      if (v32)
        v24 = v20;
      else
        v24 = 0;
      if ((v24 & 1) != 0)
      {
        v25 = &v31;
      }
      else
      {
        if (qword_10097AC28 != -1)
          dispatch_once(&qword_10097AC28, &stru_10092DB00);
        if (!sub_1004845D8(qword_10097AC20, v13))
          goto LABEL_57;
        v25 = (std::string *)(a1 + 304);
      }
      std::string::operator=(&v29, v25);
LABEL_57:
      v26 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v26 = v29.__r_.__value_.__l.__size_;
      if (!v26)
      {
        v27 = sub_10003BE44();
        if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v27 + 16))(v27, &v29))
          std::string::assign(&v29, "iDevice");
      }
      v21 = *(_QWORD *)(a1 + 120);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v29;
      else
        v22 = (std::string *)v29.__r_.__value_.__r.__words[0];
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      else
        size = v29.__r_.__value_.__l.__size_;
      goto LABEL_68;
    }
    std::string::operator=(&v31, &__p);
    goto LABEL_29;
  }
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
    sub_1006EDA58();
  v13 = 0;
  v14 = 10;
LABEL_10:
  v31.__r_.__value_.__s.__data_[0] = 0;
  sub_100043758(&v31);
  ((void (*)(uint64_t, uint64_t, _QWORD, _QWORD))a6)(a4, v14, 0, 0);
  sub_100043728(&v31);
  sub_100034234((uint64_t)v33);

}

void sub_1003F68D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, unsigned int *a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29)
{
  void *v29;

  if (a11)
    sub_100056AAC(a11);
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  sub_100034234((uint64_t)&a29);

  _Unwind_Resume(a1);
}

uint64_t sub_1003F6A4C@<X0>(char *__s@<X1>, const void **a2@<X0>, _QWORD *a3@<X8>)
{
  size_t v6;
  size_t v7;
  uint64_t result;
  const void *v9;
  char *v10;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = strlen(__s);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = sub_1002D6774((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0)
    a3 = (_QWORD *)*a3;
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(a3, v9, v6);
  }
  v10 = (char *)a3 + v6;
  if (v7)
    result = (uint64_t)memmove(v10, __s, v7);
  v10[v7] = 0;
  return result;
}

uint64_t sub_1003F6B0C(uint64_t a1, uint64_t a2, int a3, unsigned __int16 a4, uint64_t a5, unsigned int a6, unint64_t a7, uint64_t *a8)
{
  uint64_t v15;
  uint64_t v16;
  char *v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  id v22;
  void *v23;
  uint64_t v24;
  int v25;
  uint64_t **v26;
  char *v27;
  unsigned __int32 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  _QWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  NSObject *v39;
  uint64_t v40;
  void *__p;
  char *v42;
  unint64_t v43;
  _QWORD v44[2];
  unsigned int *v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int *v49;
  __n128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  __n128 v54;

  v48 = a6;
  v46 = 0;
  v47 = a7;
  v44[1] = 0;
  v45 = 0;
  v44[0] = 0;
  sub_10003415C((uint64_t)v44, a1 + 40);
  v15 = sub_1003F5D00(a1, a2, &v46, (uint64_t *)&v45);
  if (v15)
  {
    if (!v46)
    {
LABEL_5:
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        sub_1006EDA84();
      v16 = 3;
      goto LABEL_11;
    }
    if (a8)
    {
      if ((*(_BYTE *)(v46 + 72) & 8) == 0)
        goto LABEL_5;
    }
    else if ((*(_BYTE *)(v46 + 72) & 4) == 0)
    {
      goto LABEL_5;
    }
    if (a3)
    {
      __p = 0;
      v42 = 0;
      v43 = 0;
      sub_10001FE6C(&__p, v46 + 104);
      v18 = (char *)__p;
      if (__p == v42)
        goto LABEL_31;
      while (1)
      {
        v19 = *(_QWORD *)(*(_QWORD *)v18 + 8);
        v20 = *(_DWORD *)(v19 + 20);
        v50 = *(__n128 *)(v19 + 4);
        LODWORD(v51) = v20;
        sub_100042F44(&v54, &v50);
        v52 = xmmword_10073B29C;
        v53 = 0;
        if (sub_100072DF0(v21, (unsigned __int8 *)&v52))
          break;
        v18 += 8;
        if (v18 == v42)
          goto LABEL_31;
      }
      if ((*(_WORD *)(*(_QWORD *)v18 + 72) & 1) == 0)
      {
LABEL_31:
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
          sub_1006EDAB0();
        v16 = 3;
LABEL_34:
        if (__p)
        {
          v42 = (char *)__p;
          operator delete(__p);
        }
        goto LABEL_11;
      }
      v50 = 0u;
      v51 = 0u;
      v50.n128_u32[0] = *(_DWORD *)(v15 + 16);
      v50.n128_u16[2] = a4;
      v30 = *(_QWORD *)(a5 + 8);
      v50.n128_u64[1] = (unint64_t)&off_100918258;
      *(_QWORD *)&v51 = v30;
      if (v30)
        sub_10003C37C(v30);
      BYTE8(v51) = 0;
      v31 = *(_QWORD **)(a1 + 520);
      if (v31)
      {
        v32 = a1 + 520;
        do
        {
          v33 = v31[4];
          v34 = v33 >= a7;
          if (v33 >= a7)
            v35 = v31;
          else
            v35 = v31 + 1;
          if (v34)
            v32 = (uint64_t)v31;
          v31 = (_QWORD *)*v35;
        }
        while (*v35);
        if (v32 != a1 + 520 && *(_QWORD *)(v32 + 32) <= a7)
        {
          v49 = 0;
          v37 = *(_QWORD *)(v32 + 40);
          if (v37 == *(_QWORD *)(v32 + 48))
          {
            v38 = 0;
          }
          else
          {
            v38 = 0;
            do
            {
              v38 += sub_10003F8C4(v37 + 8);
              v37 += 32;
            }
            while (v37 != *(_QWORD *)(v32 + 48));
          }
          if (sub_10003F8C4(a5) + (unint64_t)v38 >= 0x201)
          {
            v39 = qword_100999820;
            if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
            {
              v40 = sub_10003F8C4(a5);
              sub_1006EDADC(v38, v40, (uint64_t)&v54, v39);
            }
            v16 = 9;
            goto LABEL_55;
          }
          sub_1003F3318(a1, **(_DWORD **)(v32 + 40), (uint64_t *)&v49);
          if (v49 != v45)
          {
            if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
              sub_1006EDB30();
            v16 = 244;
            goto LABEL_55;
          }
        }
      }
      v54.n128_u64[0] = (unint64_t)&v47;
      v36 = sub_1003FB634((uint64_t **)(a1 + 512), &v47, (uint64_t)&unk_100740F58, (uint64_t **)&v54);
      sub_1003F7120(v36 + 5, (int *)&v50);
      v16 = 0;
LABEL_55:
      v50.n128_u64[1] = (unint64_t)&off_100918258;
      if ((_QWORD)v51)
        sub_100056AAC((unsigned int *)v51);
      goto LABEL_34;
    }
    v22 = sub_1003F5478(a1, a7);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    if (v23)
    {
      v50 = 0u;
      v51 = 0u;
      v50.n128_u32[0] = *(_DWORD *)(v15 + 16);
      v50.n128_u16[2] = a4;
      v24 = *(_QWORD *)(a5 + 8);
      v50.n128_u64[1] = (unint64_t)&off_100918258;
      *(_QWORD *)&v51 = v24;
      if (v24)
        sub_10003C37C(v24);
      BYTE8(v51) = a8 == 0;
      __p = 0;
      v42 = 0;
      v43 = 0;
      if (*(_QWORD *)(a1 + 104))
      {
        if (a8
          && (v25 = *(_DWORD *)(v15 + 16),
              v49 = &v48,
              v26 = sub_10033ED08((uint64_t **)(a1 + 384), &v48, (uint64_t)&unk_100740F58, &v49),
              *((_DWORD *)v26 + 10) = v25,
              *((_DWORD *)v26 + 11) = 0,
              v26[6] = a8,
              v27 = v42,
              (unint64_t)v42 < v43))
        {
          v28 = v50.n128_u32[0];
          *((_WORD *)v42 + 2) = v50.n128_u16[2];
          *(_DWORD *)v27 = v28;
          *((_QWORD *)v27 + 1) = &off_100918258;
          *((_QWORD *)v27 + 2) = v24;
          if (v24)
            sub_10003C37C(v24);
          v27[24] = a8 == 0;
          v29 = (uint64_t)(v27 + 32);
          v42 = v27 + 32;
        }
        else
        {
          v29 = sub_1003FB760((uint64_t *)&__p, (int *)&v50);
        }
        v42 = (char *)v29;
        sub_1000419F4();
        operator new();
      }
      v16 = 242;
      v54.n128_u64[0] = (unint64_t)&__p;
      sub_1003FA66C((void ***)&v54);
      v50.n128_u64[1] = (unint64_t)&off_100918258;
      if ((_QWORD)v51)
        sub_100056AAC((unsigned int *)v51);

    }
    else
    {
      v16 = 14;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_1006EDA58();
    v16 = 10;
  }
LABEL_11:
  if (a8)
  {
    v50.n128_u8[0] = 0;
    sub_100043758(&v50);
    ((void (*)(_QWORD, uint64_t, _QWORD, _QWORD))a8)(v48, v16, 0, 0);
    sub_100043728(&v50);
  }
  return sub_100034234((uint64_t)v44);
}

void sub_1003F7040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,unsigned int *a21)
{
  if (a21)
    sub_100056AAC(a21);
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F7120(uint64_t *a1, int *a2)
{
  unint64_t v3;
  uint64_t result;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    result = sub_1003FB760(a1, a2);
  }
  else
  {
    sub_1003FB6F4((uint64_t)a1, a2);
    result = v3 + 32;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_1003F715C(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, __int16 *, _QWORD))
{
  id v12;
  void *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  BOOL v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int16 v22;
  uint64_t v23;
  const unsigned __int8 *i;
  uint64_t j;
  _QWORD v27[2];
  __int16 v28;
  unsigned __int8 uu2[16];

  v28 = 0;
  v27[0] = 0;
  v27[1] = 0;
  sub_10003415C((uint64_t)v27, (uint64_t)(a1 + 5));
  v12 = sub_1003F5478((uint64_t)a1, a5);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  if (!v13)
  {
    v22 = 0;
    v23 = 14;
    goto LABEL_33;
  }
  if (*(_QWORD *)(a1[41] + 8) == a2)
  {
    for (i = (const unsigned __int8 *)a1[42]; i != (const unsigned __int8 *)a1[43]; i += 20)
    {
      sub_100030BCC(uu2, v13);
      if (!uuid_compare(i, uu2))
      {
        LOBYTE(v20) = 0;
        LOBYTE(v15) = 2;
        goto LABEL_17;
      }
    }
    goto LABEL_15;
  }
  v14 = sub_1003F5D00((uint64_t)a1, a2, 0, 0);
  if (!v14)
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_1006EDA58();
    v22 = 0;
    v23 = 10;
    goto LABEL_33;
  }
  v15 = (_QWORD *)a1[52];
  if (v15)
  {
    v16 = a1 + 52;
    do
    {
      v17 = v15[4];
      v18 = v17 >= v14;
      if (v17 >= v14)
        v19 = v15;
      else
        v19 = v15 + 1;
      if (v18)
        v16 = v15;
      v15 = (_QWORD *)*v19;
    }
    while (*v19);
    if (v16 != a1 + 52 && v14 >= v16[4])
    {
      for (j = v16[5]; j != v16[6]; j += 18)
      {
        sub_100030BCC(uu2, v13);
        if (!uuid_compare((const unsigned __int8 *)j, uu2))
        {
          LODWORD(v15) = *(unsigned __int16 *)(j + 16);
          v20 = v15 >> 8;
          goto LABEL_17;
        }
      }
    }
LABEL_15:
    LOBYTE(v15) = 0;
  }
  LOBYTE(v20) = 0;
LABEL_17:
  if (a3 != 2)
  {
    if (a3 == 1)
    {
      v21 = 0;
    }
    else
    {
      if (a3)
      {
        v22 = 0;
        v23 = 7;
        goto LABEL_33;
      }
      LOBYTE(v28) = (_BYTE)v15;
      v21 = 1;
    }
    *(_BYTE *)((unint64_t)&v28 | v21) = v20;
  }
  v23 = 0;
  v22 = 2 - a3;
LABEL_33:
  uu2[0] = 0;
  sub_100043758(uu2);
  a6(a4, v23, &v28, v22);
  sub_100043728(uu2);

  return sub_100034234((uint64_t)v27);
}

void sub_1003F73A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1003F73E8(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  void *v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  id v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[4];
  id v39;
  uint64_t v40;
  int v41;
  __int16 v42;
  BOOL v43;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 uu2[16];
  unsigned __int8 src[8];
  uint64_t v49;
  int v50;

  v45 = 0;
  v46 = 0;
  v44[0] = 0;
  v44[1] = 0;
  sub_10003415C((uint64_t)v44, a1 + 40);
  if (a3)
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_1006EDB5C();
    v16 = 0;
    v17 = 244;
    goto LABEL_15;
  }
  if (a4 || sub_10003F8C4(a5) != 2)
  {
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_1006EDBF0();
    v16 = 0;
    if (a4)
      v17 = 7;
    else
      v17 = 13;
    goto LABEL_15;
  }
  v18 = sub_1005F55FC(a5, 0);
  v19 = sub_1005F55FC(a5, 1uLL);
  v20 = *(_QWORD *)(a1 + 328);
  if (*(_QWORD *)(v20 + 8) == a2)
  {
    v21 = *(_QWORD *)(a1 + 136);
    v45 = v21;
    v46 = v20;
    if (!v20)
    {
LABEL_25:
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
        sub_1006EDA58();
      v16 = 0;
      v17 = 10;
      goto LABEL_15;
    }
  }
  else
  {
    v46 = sub_1003F5D00(a1, a2, &v45, 0);
    v21 = v45;
    if (!v46)
      goto LABEL_25;
  }
  if (!v21)
    goto LABEL_25;
  v22 = v18 | (v19 << 8);
  if (v22)
  {
    if (v22 == 2)
    {
      if ((*(_BYTE *)(v21 + 72) & 0x20) == 0)
      {
        v23 = "indicate";
        goto LABEL_39;
      }
    }
    else
    {
      if (v22 != 1)
      {
        v23 = "unknown";
        goto LABEL_39;
      }
      if ((*(_BYTE *)(v21 + 72) & 0x10) == 0)
      {
        v23 = "notify";
LABEL_39:
        v28 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
          sub_1006EDB88((uint64_t)v23, v28, v29);
        v16 = 0;
        v17 = 245;
        goto LABEL_15;
      }
    }
  }
  v24 = sub_1003F5478(a1, a7);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v24);
  if (!v16)
  {
    v17 = 14;
    goto LABEL_15;
  }
  if (v46 != *(_QWORD *)(a1 + 328))
  {
    *(_QWORD *)src = &v46;
    v25 = sub_1003FB634((uint64_t **)(a1 + 408), (unint64_t *)&v46, (uint64_t)&unk_100740F58, (uint64_t **)src);
    v26 = v25[5];
    *(_QWORD *)src = 0;
    v49 = 0;
    LOWORD(v50) = 0;
    sub_100030BCC(src, v16);
    LOWORD(v50) = v22;
    if (v26 == v25[6])
      goto LABEL_50;
    v27 = -v26;
    while (1)
    {
      sub_100030BCC(uu2, v16);
      if (!uuid_compare((const unsigned __int8 *)v26, uu2))
        break;
      v26 += 18;
      v27 -= 18;
      if (v26 == v25[6])
        goto LABEL_50;
    }
    v32 = (unsigned __int8 *)v25[6];
    if ((unsigned __int8 *)v26 == v32)
    {
LABEL_50:
      if (v22)
        sub_1003F79F8(v25 + 5, src);
    }
    else
    {
      if (v22)
      {
        uuid_copy((unsigned __int8 *)v26, src);
        *(_WORD *)(v26 + 16) = v50;
LABEL_69:
        v17 = 0;
        goto LABEL_15;
      }
      sub_1003FBA84((unsigned __int8 *)(18 - v27), v32, (unsigned __int8 *)-v27);
      v25[6] = v37;
    }
    if (*(_QWORD *)(a1 + 104))
    {
      v33 = *(_DWORD *)(v46 + 16);
      v34 = sub_1000419F4();
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472;
      v38[2] = sub_1003F7A64;
      v38[3] = &unk_10092D890;
      v40 = a1;
      v42 = v22;
      v41 = v33;
      v39 = v16;
      v43 = v22 == 1;
      sub_100041A34(v34, v38);

    }
    goto LABEL_69;
  }
  v30 = *(unsigned __int8 **)(a1 + 336);
  if (v30 == *(unsigned __int8 **)(a1 + 344))
    goto LABEL_62;
  v31 = -(uint64_t)v30;
  while (1)
  {
    sub_100030BCC(src, v16);
    if (!uuid_compare(v30, src))
      break;
    v30 += 20;
    v31 -= 20;
    if (v30 == *(unsigned __int8 **)(a1 + 344))
      goto LABEL_62;
  }
  v35 = *(unsigned __int8 **)(a1 + 344);
  if (v30 == v35)
  {
LABEL_62:
    if (v22)
    {
      *(_QWORD *)src = 0;
      v49 = 0;
      v50 = 0;
      sub_100030BCC(src, v16);
      v50 = 0;
      sub_1003F1B34((uint64_t *)(a1 + 336), src);
      if (qword_10097AC28 != -1)
        dispatch_once(&qword_10097AC28, &stru_10092DB00);
      if (sub_1004845D8(qword_10097AC20, v16))
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10092DB60);
        sub_10065CD60((uint64_t)off_1009778C0, v16, 1);
      }
    }
    goto LABEL_69;
  }
  if (v22)
    goto LABEL_69;
  sub_1003FBA1C((unsigned __int8 *)(20 - v31), v35, (unsigned __int8 *)-v31);
  *(_QWORD *)(a1 + 344) = v36;
  if (qword_10097AC28 != -1)
    dispatch_once(&qword_10097AC28, &stru_10092DB00);
  if (!sub_1004845D8(qword_10097AC20, v16))
    goto LABEL_69;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DB60);
  v17 = 0;
  sub_10065CD60((uint64_t)off_1009778C0, v16, 0);
LABEL_15:
  if (a8)
  {
    src[0] = 0;
    sub_100043758(src);
    a8(a6, v17, 0, 0);
    sub_100043728(src);
  }
  sub_100034234((uint64_t)v44);

}

void sub_1003F7968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F79F8(uint64_t *a1, unsigned __int8 *src)
{
  unint64_t v4;
  uint64_t result;

  v4 = a1[1];
  if (v4 >= a1[2])
  {
    result = sub_1003FBAEC(a1, (uint64_t)src);
  }
  else
  {
    uuid_copy((unsigned __int8 *)a1[1], src);
    *(_WORD *)(v4 + 16) = *((_WORD *)src + 8);
    result = v4 + 18;
    a1[1] = v4 + 18;
  }
  a1[1] = result;
  return result;
}

void sub_1003F7A5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1003F7A64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 104);
  v3 = a1 + 48;
  if (*(_WORD *)(a1 + 52))
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 104), v3, v1, *(unsigned __int8 *)(a1 + 54));
  else
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 104), v3, v1);
}

void sub_1003F7A9C(uint64_t a1, void *a2)
{
  id v3;
  const unsigned __int8 *v4;
  uint64_t v5;
  id v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  const unsigned __int8 *v12;
  uint64_t v13;
  id v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD v21[2];

  v3 = a2;
  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 40);
  objc_msgSend(*(id *)(a1 + 496), "removeObject:", v3);
  objc_msgSend(*(id *)(a1 + 504), "removeObjectForKey:", v3);
  objc_msgSend(*(id *)(a1 + 488), "removeObject:", v3);
  if (qword_10097AC28 != -1)
    dispatch_once(&qword_10097AC28, &stru_10092DB00);
  if ((sub_1004845D8(qword_10097AC20, v3) & 1) == 0)
  {
    v4 = *(const unsigned __int8 **)(a1 + 336);
    if (v4 != *(const unsigned __int8 **)(a1 + 344))
    {
      v5 = -(uint64_t)v4;
      while (1)
      {
        v6 = sub_100030DF4(v4);
        v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
        v8 = objc_msgSend(v3, "isEqual:", v7);

        if (v8)
          break;
        v4 += 20;
        v5 -= 20;
        if (v4 == *(const unsigned __int8 **)(a1 + 344))
          goto LABEL_10;
      }
      sub_1003FBA1C((unsigned __int8 *)(20 - v5), *(unsigned __int8 **)(a1 + 344), (unsigned __int8 *)-v5);
      *(_QWORD *)(a1 + 344) = v9;
    }
  }
LABEL_10:
  v10 = *(_QWORD **)(a1 + 408);
  v11 = (_QWORD *)(a1 + 416);
  if (v10 != (_QWORD *)(a1 + 416))
  {
    do
    {
      v12 = (const unsigned __int8 *)v10[5];
      if (v12 != (const unsigned __int8 *)v10[6])
      {
        v13 = -(uint64_t)v12;
        while (1)
        {
          v14 = sub_100030DF4(v12);
          v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
          v16 = objc_msgSend(v3, "isEqual:", v15);

          if (v16)
            break;
          v12 += 18;
          v13 -= 18;
          if (v12 == (const unsigned __int8 *)v10[6])
            goto LABEL_17;
        }
        sub_1003FBA84((unsigned __int8 *)(18 - v13), (unsigned __int8 *)v10[6], (unsigned __int8 *)-v13);
        v10[6] = v17;
      }
LABEL_17:
      v18 = (_QWORD *)v10[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v10[2];
          v20 = *v19 == (_QWORD)v10;
          v10 = v19;
        }
        while (!v20);
      }
      v10 = v19;
    }
    while (v19 != v11);
  }
  sub_100034234((uint64_t)v21);

}

void sub_1003F7C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1003F7CBC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 104) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 104), *(_QWORD *)(a1 + 40));
}

uint64_t sub_1003F7CD0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 104) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 104), *(_QWORD *)(a1 + 40));
}

void sub_1003F7CE4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6;
  NSObject *v7;
  NSObject *v8;
  unsigned __int8 *v9;
  unsigned __int8 uu1[16];
  _BYTE buf[22];

  v6 = a2;
  v7 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v6;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "GattServer device \"%{public}@\" connected for session %p", buf, 0x16u);
  }
  sub_100030BCC(buf, v6);
  if (a1 + 544 != sub_10000C5B8(a1 + 536, buf))
  {
    v8 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_FAULT))
      sub_1006EDC48(v8);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  sub_10003415C((uint64_t)buf, a1 + 40);
  if (a4)
  {
    sub_100030BCC(uu1, v6);
    v9 = uu1;
    sub_1003FBC90((uint64_t **)(a1 + 536), uu1, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v9)[6] = a4;
  }
  else if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
  {
    sub_1006EDC1C();
  }
  sub_100034264((uint64_t)buf);
  if (qword_10097AC28 != -1)
    dispatch_once(&qword_10097AC28, &stru_10092DB00);
  if (sub_1004845D8(qword_10097AC20, v6))
  {
    sub_100034188((uint64_t)buf);
    sub_1003F28AC(a1, v6, (unsigned __int16)(*(_WORD *)(*(_QWORD *)(a1 + 128) + 48) + 1), 0xFFFFu);
  }
  sub_100034234((uint64_t)buf);

}

void sub_1003F7ED0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1003F7F00(uint64_t a1, void *a2)
{
  id v3;
  uint64_t *v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t i;
  id v9;
  void *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  int v20;
  _QWORD v21[2];
  unsigned __int8 uu2[16];

  v3 = a2;
  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 40);
  sub_100030BCC(uu2, v3);
  v4 = (uint64_t *)sub_10000C5B8(a1 + 536, uu2);
  if ((uint64_t *)(a1 + 544) == v4)
  {
    v5 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_ERROR))
      sub_1006EDCC4((uint64_t)v3, v5, v6);
  }
  else
  {
    sub_1000040CC((uint64_t **)(a1 + 536), v4);
    operator delete(v4);
  }
  v7 = *(_QWORD **)(a1 + 408);
  if (v7 != (_QWORD *)(a1 + 416))
  {
    do
    {
      for (i = v7[5]; i != v7[6]; i += 18)
      {
        v9 = sub_100030DF4((const unsigned __int8 *)i);
        v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        v11 = objc_msgSend(v3, "isEqual:", v10);

        if (v11)
        {
          if (*(_WORD *)(i + 16))
          {
            v12 = *(_DWORD *)(v7[4] + 16);
            v13 = sub_1000419F4();
            v17[0] = _NSConcreteStackBlock;
            v17[1] = 3221225472;
            v17[2] = sub_1003F815C;
            v17[3] = &unk_100919818;
            v19 = a1;
            v20 = v12;
            v18 = v3;
            sub_100041A34(v13, v17);

          }
          break;
        }
      }
      v14 = (_QWORD *)v7[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v7[2];
          v16 = *v15 == (_QWORD)v7;
          v7 = v15;
        }
        while (!v16);
      }
      v7 = v15;
    }
    while (v15 != (_QWORD *)(a1 + 416));
  }
  sub_1003F7A9C(a1, v3);
  sub_1003F3A14(a1);
  sub_100034234((uint64_t)v21);

}

void sub_1003F810C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1003F815C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 104) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 104), a1 + 48, *(_QWORD *)(a1 + 32));
}

void sub_1003F8178(uint64_t a1, void *a2, int a3)
{
  id v5;
  const unsigned __int8 *i;
  _QWORD v7[2];
  unsigned __int8 uu2[16];

  v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 40);
  if (!a3)
  {
    for (i = *(const unsigned __int8 **)(a1 + 336); i != *(const unsigned __int8 **)(a1 + 344); i += 20)
    {
      sub_100030BCC(uu2, v5);
      if (!uuid_compare(i, uu2))
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10092DB60);
        sub_10065CD60((uint64_t)off_1009778C0, v5, 1);
        break;
      }
    }
  }
  sub_100034234((uint64_t)v7);

}

void sub_1003F8270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1003F829C(uint64_t a1, void *a2, int a3)
{
  sub_1003F8178(a1 - 8, a2, a3);
}

void sub_1003F82A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD v5[2];
  unsigned __int8 v6[16];

  v3 = a2;
  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 40);
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DBA0);
  v4 = off_1009778A0;
  sub_100030BCC(v6, v3);
  if (!sub_100069F08((uint64_t)v4, v6))
    sub_1003F7A9C(a1, v3);
  sub_100034234((uint64_t)v5);

}

void sub_1003F8378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1003F83A4(uint64_t a1, void *a2)
{
  sub_1003F82A4(a1 - 8, a2);
}

uint64_t sub_1003F83AC(uint64_t a1)
{
  NSObject *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t i;
  NSObject *v5;
  _BYTE *v6;
  int v7;
  int v8;
  NSObject *v9;
  _QWORD *v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint8_t *v16;
  const char *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  NSObject *v21;
  _QWORD *v22;
  int v23;
  int v24;
  const char *v25;
  _QWORD *v26;
  _QWORD *v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint8_t *v38;
  int v39;
  uint8_t *v40;
  uint64_t *v41;
  NSObject *v42;
  id v43;
  id v44;
  uint64_t v45;
  void *j;
  NSObject *v47;
  uint64_t v48;
  NSObject *v49;
  id v50;
  id v51;
  uint64_t v52;
  void *k;
  uint64_t v54;
  id v55;
  NSObject *v56;
  uint8_t *v57;
  NSObject *v58;
  id v59;
  id v60;
  uint64_t v61;
  void *m;
  NSObject *v63;
  uint64_t v64;
  NSObject *v65;
  _QWORD *v66;
  const unsigned __int8 *v67;
  const unsigned __int8 *v68;
  const unsigned __int8 *v69;
  const unsigned __int8 *v70;
  NSObject *v71;
  uint8_t *v72;
  int *v73;
  int *v74;
  NSObject *v75;
  int v76;
  int v77;
  _BYTE *v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v82;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _QWORD v96[2];
  _BYTE v97[128];
  _BYTE v98[128];
  uint8_t v99[128];
  _BYTE v100[24];
  uint8_t v101[32];
  uint8_t buf[16];
  _QWORD v103[3];

  v96[0] = 0;
  v96[1] = 0;
  sub_10003415C((uint64_t)v96, a1 + 40);
  v1 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: -------------------- GATT Server ---------------------", buf, 2u);
  }
  sub_1003F1BA0(a1);
  v2 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Client Config Descriptors:", buf, 2u);
    v2 = qword_100999820;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:    GATT 'Service Changed':", buf, 2u);
  }
  v3 = *(_QWORD *)(a1 + 336);
  for (i = *(_QWORD *)(a1 + 344); v3 != i; v3 += 20)
  {
    v5 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      *(_OWORD *)buf = 0u;
      memset(v103, 0, 21);
      uuid_unparse_upper((const unsigned __int8 *)v3, (char *)buf);
      sub_100091AE8(v100, (char *)buf);
      if (v100[23] >= 0)
        v6 = v100;
      else
        v6 = *(_BYTE **)v100;
      v7 = *(unsigned __int16 *)(v3 + 16);
      v8 = *(unsigned __int16 *)(v3 + 18);
      *(_DWORD *)v101 = 136446722;
      *(_QWORD *)&v101[4] = v6;
      *(_WORD *)&v101[12] = 1024;
      *(_DWORD *)&v101[14] = v7;
      *(_WORD *)&v101[18] = 1024;
      *(_DWORD *)&v101[20] = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:       %{public}s - [0x%04x, 0x%04x]", v101, 0x18u);
      if ((v100[23] & 0x80000000) != 0)
        operator delete(*(void **)v100);
      i = *(_QWORD *)(a1 + 344);
    }
  }
  v9 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:    User-specified:", buf, 2u);
  }
  v10 = *(_QWORD **)(a1 + 408);
  if (v10 != (_QWORD *)(a1 + 416))
  {
    v82 = 67109120;
    do
    {
      v11 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
      {
        v12 = **(unsigned __int16 **)(v10[4] + 8);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:       0x%04x", buf, 8u);
      }
      v13 = v10[5];
      v14 = v10[6];
      while (v13 != v14)
      {
        v15 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
        {
          *(_OWORD *)buf = 0u;
          memset(v103, 0, 21);
          uuid_unparse_upper((const unsigned __int8 *)v13, (char *)buf);
          sub_100091AE8(v101, (char *)buf);
          if ((v101[23] & 0x80u) == 0)
            v16 = v101;
          else
            v16 = *(uint8_t **)v101;
          v17 = "Indicate";
          if (*(_WORD *)(v13 + 16) == 1)
            v17 = "Notify";
          *(_DWORD *)v100 = 136446466;
          *(_QWORD *)&v100[4] = v16;
          *(_WORD *)&v100[12] = 2082;
          *(_QWORD *)&v100[14] = v17;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump:          %{public}s (%{public}s)", v100, 0x16u);
          if ((char)v101[23] < 0)
            operator delete(*(void **)v101);
          v14 = v10[6];
        }
        v13 += 18;
      }
      v18 = (_QWORD *)v10[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v10[2];
          v20 = *v19 == (_QWORD)v10;
          v10 = v19;
        }
        while (!v20);
      }
      v10 = v19;
    }
    while (v19 != (_QWORD *)(a1 + 416));
  }
  v21 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump: Pending transactions:", buf, 2u);
    v21 = qword_100999820;
  }
  v22 = *(_QWORD **)(a1 + 384);
  if (v22 != (_QWORD *)(a1 + 392))
  {
    do
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        v23 = *((_DWORD *)v22 + 8);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump:    Transaction #%d", buf, 8u);
        v21 = qword_100999820;
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        v24 = *((_DWORD *)v22 + 10);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v24;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump:       Attribute ID: 0x%0x", buf, 8u);
        v21 = qword_100999820;
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        if (*((_BYTE *)v22 + 44))
          v25 = "Execute Write";
        else
          v25 = "Read/Write";
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v25;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump:       Type: %{public}s", buf, 0xCu);
        v21 = qword_100999820;
      }
      v26 = (_QWORD *)v22[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v22[2];
          v20 = *v27 == (_QWORD)v22;
          v22 = v27;
        }
        while (!v20);
      }
      v22 = v27;
    }
    while (v27 != (_QWORD *)(a1 + 392));
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump: Update Queue:", buf, 2u);
    v21 = qword_100999820;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 480))
      v28 = "yes";
    else
      v28 = "no";
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v28;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump:    TX full: %{public}s", buf, 0xCu);
    v21 = qword_100999820;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump:    Updates:", buf, 2u);
  }
  v29 = *(_QWORD *)(a1 + 464);
  v30 = *(_QWORD *)(a1 + 440);
  v31 = *(_QWORD *)(a1 + 448);
  v32 = (_QWORD *)(v30 + 8 * (v29 >> 8));
  if (v31 == v30)
    v33 = 0;
  else
    v33 = (uint64_t *)(*v32 + 16 * v29);
  while (1)
  {
    if (v31 == v30)
    {
      v35 = 0;
    }
    else
    {
      v34 = *(_QWORD *)(a1 + 472) + *(_QWORD *)(a1 + 464);
      v35 = *(_QWORD *)(v30 + ((v34 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v34;
    }
    if (v33 == (uint64_t *)v35)
      break;
    v36 = v33[1];
    v37 = qword_100999820;
    if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
    {
      if (*v33)
      {
        sub_1000340DC(*v33, (uint64_t)buf);
        if (v103[0] >= 0)
          v38 = buf;
        else
          v38 = *(uint8_t **)buf;
        *(_DWORD *)v101 = 136446210;
        *(_QWORD *)&v101[4] = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "statedump:       \"%{public}s\"", v101, 0xCu);
        if (SHIBYTE(v103[0]) < 0)
          operator delete(*(void **)buf);
      }
      else
      {
        *(_DWORD *)v101 = 136446210;
        *(_QWORD *)&v101[4] = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "statedump:       \"%{public}s\"", v101, 0xCu);
      }
      v37 = qword_100999820;
    }
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      v39 = **(unsigned __int16 **)(*(_QWORD *)(v36 + 8) + 8);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v39;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "statedump:          Characteristic handle: 0x%04x", buf, 8u);
      v37 = qword_100999820;
    }
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000453F0(v36 + 24, buf);
      v40 = v103[0] >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v101 = 136446210;
      *(_QWORD *)&v101[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "statedump:          Value: %{public}s", v101, 0xCu);
      if (SHIBYTE(v103[0]) < 0)
        operator delete(*(void **)buf);
    }
    v33 += 2;
    if ((uint64_t *)((char *)v33 - *v32) == (uint64_t *)4096)
    {
      v41 = (uint64_t *)v32[1];
      ++v32;
      v33 = v41;
    }
    v30 = *(_QWORD *)(a1 + 440);
    v31 = *(_QWORD *)(a1 + 448);
  }
  v42 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump:    Stalled devices:", buf, 2u);
  }
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v43 = *(id *)(a1 + 488);
  v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v92, v99, 16);
  if (v44)
  {
    v45 = *(_QWORD *)v93;
    do
    {
      for (j = 0; j != v44; j = (char *)j + 1)
      {
        if (*(_QWORD *)v93 != v45)
          objc_enumerationMutation(v43);
        v47 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
        {
          v48 = *(_QWORD *)(*((_QWORD *)&v92 + 1) + 8 * (_QWORD)j);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v48;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "statedump:       %{public}@", buf, 0xCu);
        }
      }
      v44 = objc_msgSend(v43, "countByEnumeratingWithState:objects:count:", &v92, v99, 16);
    }
    while (v44);
  }

  v49 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "statedump:    Outstanding App Indications:", buf, 2u);
  }
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v50 = *(id *)(a1 + 504);
  v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v88, v98, 16);
  if (v51)
  {
    v52 = *(_QWORD *)v89;
    do
    {
      for (k = 0; k != v51; k = (char *)k + 1)
      {
        if (*(_QWORD *)v89 != v52)
          objc_enumerationMutation(v50);
        v54 = *(_QWORD *)(*((_QWORD *)&v88 + 1) + 8 * (_QWORD)k);
        v55 = objc_msgSend(*(id *)(a1 + 504), "objectForKey:", v54, v82);
        v56 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
        {
          if (v55)
          {
            sub_1000340DC((uint64_t)v55, (uint64_t)buf);
            v57 = buf;
            if (v103[0] < 0)
              v57 = *(uint8_t **)buf;
            *(_DWORD *)v101 = 136446466;
            *(_QWORD *)&v101[4] = v57;
            *(_WORD *)&v101[12] = 2114;
            *(_QWORD *)&v101[14] = v54;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "statedump:       \"%{public}s\" - %{public}@", v101, 0x16u);
            if (SHIBYTE(v103[0]) < 0)
              operator delete(*(void **)buf);
          }
          else
          {
            *(_DWORD *)v101 = 136446466;
            *(_QWORD *)&v101[4] = 0;
            *(_WORD *)&v101[12] = 2114;
            *(_QWORD *)&v101[14] = v54;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "statedump:       \"%{public}s\" - %{public}@", v101, 0x16u);
          }
        }
      }
      v51 = objc_msgSend(v50, "countByEnumeratingWithState:objects:count:", &v88, v98, 16);
    }
    while (v51);
  }

  v58 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "statedump:    Outstanding Server Indications:", buf, 2u);
  }
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v59 = *(id *)(a1 + 496);
  v60 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v84, v97, 16);
  if (v60)
  {
    v61 = *(_QWORD *)v85;
    do
    {
      for (m = 0; m != v60; m = (char *)m + 1)
      {
        if (*(_QWORD *)v85 != v61)
          objc_enumerationMutation(v59);
        v63 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
        {
          v64 = *(_QWORD *)(*((_QWORD *)&v84 + 1) + 8 * (_QWORD)m);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v64;
          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "statedump:       \"%{public}@\"", buf, 0xCu);
        }
      }
      v60 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v84, v97, 16);
    }
    while (v60);
  }

  v65 = qword_100999820;
  if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "statedump: Prepared writes:", buf, 2u);
  }
  v66 = *(_QWORD **)(a1 + 512);
  if (v66 != (_QWORD *)(a1 + 520))
  {
    v67 = (const unsigned __int8 *)(a1 + 544);
    do
    {
      memset(v101, 0, 24);
      sub_100091AE8(v101, "Unknown");
      v68 = *(const unsigned __int8 **)(a1 + 536);
      if (v68 != v67)
      {
        while (*((_QWORD *)v68 + 6) != v66[4])
        {
          v69 = (const unsigned __int8 *)*((_QWORD *)v68 + 1);
          if (v69)
          {
            do
            {
              v70 = v69;
              v69 = *(const unsigned __int8 **)v69;
            }
            while (v69);
          }
          else
          {
            do
            {
              v70 = (const unsigned __int8 *)*((_QWORD *)v68 + 2);
              v20 = *(_QWORD *)v70 == (_QWORD)v68;
              v68 = v70;
            }
            while (!v20);
          }
          v68 = v70;
          if (v70 == v67)
            goto LABEL_148;
        }
        *(_OWORD *)buf = 0u;
        memset(v103, 0, 21);
        uuid_unparse_upper(v68 + 32, (char *)buf);
        sub_100091AE8(v100, (char *)buf);
        if ((char)v101[23] < 0)
          operator delete(*(void **)v101);
        *(_OWORD *)v101 = *(_OWORD *)v100;
        *(_QWORD *)&v101[16] = *(_QWORD *)&v100[16];
      }
LABEL_148:
      v71 = qword_100999820;
      if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
      {
        v72 = v101;
        if ((v101[23] & 0x80u) != 0)
          v72 = *(uint8_t **)v101;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v72;
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "statedump:    \"%{public}s\"", buf, 0xCu);
      }
      v73 = (int *)v66[5];
      v74 = (int *)v66[6];
      while (v73 != v74)
      {
        v75 = qword_100999820;
        if (os_log_type_enabled((os_log_t)qword_100999820, OS_LOG_TYPE_DEFAULT))
        {
          v76 = *v73;
          v77 = *((unsigned __int16 *)v73 + 2);
          sub_1000453F0((uint64_t)(v73 + 2), v100);
          v78 = v100;
          if (v100[23] < 0)
            v78 = *(_BYTE **)v100;
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v76;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v77;
          *(_WORD *)&buf[14] = 2082;
          v103[0] = v78;
          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "statedump:       0x%0x @ %d [ %{public}s ]", buf, 0x18u);
          if ((v100[23] & 0x80000000) != 0)
            operator delete(*(void **)v100);
          v74 = (int *)v66[6];
        }
        v73 += 8;
      }
      if ((char)v101[23] < 0)
        operator delete(*(void **)v101);
      v79 = (_QWORD *)v66[1];
      if (v79)
      {
        do
        {
          v80 = v79;
          v79 = (_QWORD *)*v79;
        }
        while (v79);
      }
      else
      {
        do
        {
          v80 = (_QWORD *)v66[2];
          v20 = *v80 == (_QWORD)v66;
          v66 = v80;
        }
        while (!v20);
      }
      v66 = v80;
    }
    while (v80 != (_QWORD *)(a1 + 520));
  }
  return sub_100034234((uint64_t)v96);
}

void sub_1003F9304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;

  sub_100034234((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_1003F93A0(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_1003F9454(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1003F9454(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1003F9658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003F9690(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v5;

  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_10093B200;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v5 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 72) = &off_100918258;
  *(_QWORD *)(a1 + 80) = v5;
  if (v5)
    sub_10003C37C(v5);
  *(_WORD *)(a1 + 24) = a2;
  *(_WORD *)(a1 + 26) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_OWORD *)(a1 + 28) = xmmword_100740FA0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

uint64_t sub_1003F9708(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char v6;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)a1 = off_10093B290;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_OWORD *)(a2 + 40);
  v4 = *(_OWORD *)(a2 + 56);
  v5 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 40) = v3;
  v6 = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  if (*(_QWORD *)(a2 + 104) != *(_QWORD *)(a2 + 112))
    operator new();
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  if (*(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
    operator new();
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  if (a1 != a2)
    sub_1000B56F0((_QWORD *)(a1 + 168), *(__int128 **)(a2 + 168), *(__int128 **)(a2 + 176), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 2));
  return a1;
}

void sub_1003F9A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  _QWORD *v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;

  v14 = *a10;
  if (*a10)
  {
    v10[22] = v14;
    operator delete(v14);
  }
  v15 = *v12;
  if (*v12)
  {
    v10[18] = v15;
    operator delete(v15);
  }
  v16 = *v11;
  if (*v11)
  {
    v10[14] = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003F9AC0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)a1 = off_10093B230;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 40);
  v5 = *(_OWORD *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 72);
  v7 = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 112) = 0u;
  if (*(_QWORD *)(a2 + 96))
    operator new();
  for (i = *(_QWORD **)(a2 + 104); i != *(_QWORD **)(a2 + 112); ++i)
  {
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*i + 16))(*i);
    v10 = v9;
    v12 = *(uint64_t **)(a1 + 112);
    v11 = *(_QWORD *)(a1 + 120);
    if ((unint64_t)v12 >= v11)
    {
      v14 = *(_QWORD *)(a1 + 104);
      v15 = ((uint64_t)v12 - v14) >> 3;
      if ((unint64_t)(v15 + 1) >> 61)
        abort();
      v16 = v11 - v14;
      v17 = v16 >> 2;
      if (v16 >> 2 <= (unint64_t)(v15 + 1))
        v17 = v15 + 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v19 = (char *)sub_10007ABA0(a1 + 120, v18);
      else
        v19 = 0;
      v20 = (uint64_t *)&v19[8 * v15];
      *v20 = v10;
      v13 = v20 + 1;
      v22 = *(char **)(a1 + 104);
      v21 = *(char **)(a1 + 112);
      if (v21 != v22)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *--v20 = v23;
        }
        while (v21 != v22);
        v21 = *(char **)(a1 + 104);
      }
      *(_QWORD *)(a1 + 104) = v20;
      *(_QWORD *)(a1 + 112) = v13;
      *(_QWORD *)(a1 + 120) = &v19[8 * v18];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v12 = v9;
      v13 = v12 + 1;
    }
    *(_QWORD *)(a1 + 112) = v13;
  }
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  return a1;
}

void sub_1003F9CB4()
{
  operator delete();
}

_QWORD *sub_1003F9CF8(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9;
  uint64_t v10;

  v9 = a4;
  *a1 = v9;
  a1[1] = a2;
  a1[2] = a3;
  a1[3] = &off_100918258;
  v10 = *(_QWORD *)(a5 + 8);
  a1[4] = v10;
  if (v10)
    sub_10003C37C(v10);

  return a1;
}

void sub_1003F9D64(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1003F9D80()
{
  operator delete();
}

uint64_t sub_1003F9D94(uint64_t a1)
{
  if (qword_10097AC18 != -1)
    dispatch_once(&qword_10097AC18, &stru_10092D8E8);
  return sub_1003F51F8(qword_10097AC10, *(_DWORD *)(a1 + 12));
}

void sub_1003F9DE4(id a1)
{
  operator new();
}

void sub_1003F9E24()
{
  operator delete();
}

void sub_1003F9E4C()
{
  operator delete();
}

uint64_t sub_1003F9E60(uint64_t a1)
{
  if (qword_10097AC18 != -1)
    dispatch_once(&qword_10097AC18, &stru_10092D8E8);
  return sub_1003F52F0(qword_10097AC10, *(_QWORD *)(a1 + 16), *(unsigned __int16 *)(a1 + 24));
}

void sub_1003F9EB8()
{
  operator delete();
}

uint64_t sub_1003F9ECC(uint64_t a1)
{
  if (qword_10097AC18 != -1)
    dispatch_once(&qword_10097AC18, &stru_10092D8E8);
  return sub_1003F553C(qword_10097AC10, *(_QWORD *)(a1 + 16));
}

void sub_1003F9F20()
{
  operator delete();
}

uint64_t sub_1003F9F34(uint64_t a1)
{
  if (qword_10097AC18 != -1)
    dispatch_once(&qword_10097AC18, &stru_10092D8E8);
  return sub_1003F57F0(qword_10097AC10, *(_QWORD *)(a1 + 16));
}

uint64_t sub_1003F9F84(uint64_t a1, uint64_t a2, void *a3, int **a4, _DWORD *a5, char a6)
{
  id v11;
  id v12;

  v11 = a3;
  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_10092D9C0;
  *(_QWORD *)(a1 + 16) = a2;
  v12 = v11;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_1003FA0FC((_QWORD *)(a1 + 32), *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 5);
  *(_DWORD *)(a1 + 56) = *a5;
  *(_BYTE *)(a1 + 60) = a6;

  return a1;
}

void sub_1003FA018(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1003FA030(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_10092D9C0;
  v3 = (void **)(a1 + 32);
  sub_1003FA66C(&v3);

  return a1;
}

void sub_1003FA07C(uint64_t a1)
{
  void **v2;

  *(_QWORD *)a1 = off_10092D9C0;
  v2 = (void **)(a1 + 32);
  sub_1003FA66C(&v2);

  operator delete();
}

uint64_t sub_1003FA0DC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a1 + 32, a1 + 56, *(unsigned __int8 *)(a1 + 60));
}

_QWORD *sub_1003FA0FC(_QWORD *result, int *a2, int *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_1002A7614(result, a4);
    result = (_QWORD *)sub_1003FA158((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1003FA150(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1003FA158(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  int *v6;
  int v7;
  uint64_t v8;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      *(_WORD *)(a4 + 4) = *((_WORD *)v6 + 2);
      *(_DWORD *)a4 = v7;
      v8 = *((_QWORD *)v6 + 2);
      *(_QWORD *)(a4 + 8) = &off_100918258;
      *(_QWORD *)(a4 + 16) = v8;
      if (v8)
        sub_10003C37C(v8);
      *(_BYTE *)(a4 + 24) = *((_BYTE *)v6 + 24);
      a4 += 32;
      v6 += 8;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_1003FA1D4()
{
  operator delete();
}

uint64_t sub_1003FA1E8(uint64_t a1)
{
  if (qword_10097AC18 != -1)
    dispatch_once(&qword_10097AC18, &stru_10092D8E8);
  return sub_1003F5978(qword_10097AC10, *(unsigned int *)(a1 + 12), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(uint64_t **)(a1 + 32));
}

void sub_1003FA24C()
{
  operator delete();
}

uint64_t sub_1003FA260(uint64_t a1)
{
  if (qword_10097AC18 != -1)
    dispatch_once(&qword_10097AC18, &stru_10092D8E8);
  return sub_1003F5BD8(qword_10097AC10, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_1003FA2B0(uint64_t a1, uint64_t a2, void *a3, _DWORD *a4, _WORD *a5, uint64_t a6, _DWORD *a7, char a8)
{
  id v15;
  id v16;
  uint64_t v17;

  v15 = a3;
  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_10092DA68;
  *(_QWORD *)(a1 + 16) = a2;
  v16 = v15;
  *(_QWORD *)(a1 + 24) = v16;
  *(_DWORD *)(a1 + 32) = *a4;
  *(_WORD *)(a1 + 36) = *a5;
  v17 = *(_QWORD *)(a6 + 8);
  *(_QWORD *)(a1 + 40) = &off_100918258;
  *(_QWORD *)(a1 + 48) = v17;
  if (v17)
    sub_10003C37C(v17);
  *(_DWORD *)(a1 + 56) = *a7;
  *(_BYTE *)(a1 + 60) = a8;

  return a1;
}

void sub_1003FA360(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1003FA378(uint64_t a1)
{
  unsigned int *v2;

  *(_QWORD *)a1 = off_10092DA68;
  *(_QWORD *)(a1 + 40) = &off_100918258;
  v2 = *(unsigned int **)(a1 + 48);
  if (v2)
    sub_100056AAC(v2);

  return a1;
}

void sub_1003FA3C4(uint64_t a1)
{
  unsigned int *v2;

  *(_QWORD *)a1 = off_10092DA68;
  *(_QWORD *)(a1 + 40) = &off_100918258;
  v2 = *(unsigned int **)(a1 + 48);
  if (v2)
    sub_100056AAC(v2);

  operator delete();
}

uint64_t sub_1003FA420(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 16)
                                                                                               + 24))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a1 + 32, a1 + 36, a1 + 40, a1 + 56, *(unsigned __int8 *)(a1 + 60));
}

void sub_1003FA44C()
{
  operator delete();
}

void sub_1003FA460(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 10))
  {
    if (qword_10097AC18 != -1)
      dispatch_once(&qword_10097AC18, &stru_10092D8E8);
    sub_1003F715C((_QWORD *)qword_10097AC10, *(_QWORD *)(a1 + 16), *(unsigned __int16 *)(a1 + 24), *(unsigned int *)(a1 + 28), *(_QWORD *)(a1 + 32), *(void (**)(uint64_t, uint64_t, __int16 *, _QWORD))(a1 + 40));
  }
  else
  {
    if (qword_10097AC18 != -1)
      dispatch_once(&qword_10097AC18, &stru_10092D8E8);
    sub_1003F5FF4(qword_10097AC10, *(_QWORD *)(a1 + 16), *(unsigned __int16 *)(a1 + 24), *(unsigned int *)(a1 + 28), *(_QWORD *)(a1 + 32), *(uint64_t **)(a1 + 40));
  }
}

_QWORD *sub_1003FA50C(_QWORD *a1)
{
  unsigned int *v2;

  *a1 = &off_10092DAD8;
  a1[4] = &off_100918258;
  v2 = (unsigned int *)a1[5];
  if (v2)
    sub_100056AAC(v2);
  return a1;
}

void sub_1003FA550(_QWORD *a1)
{
  unsigned int *v1;

  *a1 = &off_10092DAD8;
  a1[4] = &off_100918258;
  v1 = (unsigned int *)a1[5];
  if (v1)
    sub_100056AAC(v1);
  operator delete();
}

void sub_1003FA5A4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 10))
  {
    if (qword_10097AC18 != -1)
      dispatch_once(&qword_10097AC18, &stru_10092D8E8);
    sub_1003F73E8(qword_10097AC10, *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(unsigned __int16 *)(a1 + 26), a1 + 32, *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 56), *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 64));
  }
  else
  {
    if (qword_10097AC18 != -1)
      dispatch_once(&qword_10097AC18, &stru_10092D8E8);
    sub_1003F6B0C(qword_10097AC10, *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(_WORD *)(a1 + 26), a1 + 32, *(_DWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(uint64_t **)(a1 + 64));
  }
}

void sub_1003FA66C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1003FA6AC((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1003FA6AC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;

  v2 = *a1;
  v3 = a1[1];
  if (v3 != *a1)
  {
    do
    {
      *(_QWORD *)(v3 - 24) = &off_100918258;
      v4 = *(unsigned int **)(v3 - 16);
      if (v4)
        sub_100056AAC(v4);
      v3 -= 32;
    }
    while (v3 != v2);
  }
  a1[1] = v2;
}

void sub_1003FA704(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1003FA704(a1, *a2);
    sub_1003FA704(a1, a2[1]);
    sub_10001A82C((uint64_t)(a2 + 7), (_QWORD *)a2[8]);
    operator delete(a2);
  }
}

void sub_1003FA750(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    sub_1003FA750(a1, *a2);
    sub_1003FA750(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t sub_1003FA7A0(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_1002A4304((uint64_t)a1);
}

void sub_1003FA834(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    sub_1003FA834(a1, *(_QWORD *)a2);
    sub_1003FA834(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 40);
    sub_1003FA66C(&v4);
    operator delete(a2);
  }
}

_OWORD *sub_1003FA88C(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  int v9;
  uint64_t v11;

  v11 = 0;
  v6 = (void **)sub_10009C49C((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v9 = *((_DWORD *)*a4 + 4);
    v7[2] = **a4;
    *((_DWORD *)v7 + 12) = v9;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 7) = v7 + 4;
    sub_100004078(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_1003FA92C(id a1)
{
  operator new();
}

void sub_1003FA96C()
{
  operator delete();
}

void sub_1003FA990(id a1)
{
  operator new();
}

void sub_1003FA9D0()
{
  operator delete();
}

void sub_1003FA9F4(id a1)
{
  operator new();
}

void sub_1003FAA34()
{
  operator delete();
}

void sub_1003FAA58(id a1)
{
  operator new();
}

void sub_1003FAA98()
{
  operator delete();
}

uint64_t sub_1003FAABC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *__p;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15;
  unsigned __int8 *v16;
  char *v17;
  uint64_t v18;

  v2 = *a1;
  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2);
  v4 = v3 + 1;
  if (v3 + 1 > 0xCCCCCCCCCCCCCCCLL)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v2) >> 2);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x666666666666666)
    v10 = 0xCCCCCCCCCCCCCCCLL;
  else
    v10 = v4;
  v18 = v7;
  if (v10)
    v11 = (char *)sub_1000B58EC(v7, v10);
  else
    v11 = 0;
  __p = v11;
  v15 = (unsigned __int8 *)&v11[20 * v3];
  v16 = v15;
  v17 = &v11[20 * v10];
  uuid_copy(v15, (const unsigned __int8 *)a2);
  *((_DWORD *)v15 + 4) = *(_DWORD *)(a2 + 16);
  v16 += 20;
  sub_1003FAC38(a1, &__p);
  v12 = a1[1];
  if (v16 != v15)
    v16 = &v15[(v16 - v15 - 20) % 0x14uLL];
  if (__p)
    operator delete(__p);
  return v12;
}

void sub_1003FABEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1003FAC38(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v5 == *a1)
  {
    v7 = a2[1];
  }
  else
  {
    do
    {
      v7 = v6 - 20;
      uuid_copy((unsigned __int8 *)(v6 - 20), (const unsigned __int8 *)(v5 - 20));
      *(_DWORD *)(v6 - 4) = *(_DWORD *)(v5 - 4);
      v5 -= 20;
      v6 -= 20;
    }
    while (v5 != v4);
  }
  a2[1] = v7;
  v8 = *a1;
  *a1 = v7;
  a2[1] = v8;
  v9 = a1[1];
  a1[1] = a2[2];
  a2[2] = v9;
  v10 = a1[2];
  a1[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
}

void sub_1003FACEC(id a1)
{
  operator new();
}

void sub_1003FAD2C()
{
  operator delete();
}

uint64_t *sub_1003FAD50(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  void **v5;

  v3 = sub_1000040CC(a1, (uint64_t *)a2);
  v5 = (void **)(a2 + 40);
  sub_1003FA66C(&v5);
  operator delete((void *)a2);
  return v3;
}

uint64_t *sub_1003FAD98(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  void *v4;

  v3 = sub_1000040CC(a1, a2);
  v4 = (void *)a2[5];
  if (v4)
  {
    a2[6] = (uint64_t)v4;
    operator delete(v4);
  }
  operator delete(a2);
  return v3;
}

_QWORD *sub_1003FADD8(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 4);
    if (v4 < 1)
      result -= (unint64_t)(255 - v4) >> 8;
    else
      result += (unint64_t)v4 >> 8;
  }
  return result;
}

uint64_t sub_1003FAE34(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x100)
    a2 = 1;
  if (v2 < 0x200)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

uint64_t sub_1003FAE90(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 32 * (v2 - v3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x100)
    a2 = 1;
  if (v5 < 0x200)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_1003FAEFC@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v21 = 0;
    v22 = 0uLL;
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v21 = 0;
    v22 = 0uLL;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_1003FAFE8(v12, v14, v15, v16, &v21);
      v16 = v22.n128_i64[1];
      v15 = (uint64_t *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4096;
      v21 = 0;
      v22 = 0uLL;
    }
    v18 = *a1 + 4096;
    v21 = 0;
    v22 = 0uLL;
    v19 = a2;
  }
  sub_1003FAFE8(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

void sub_1003FAFE8(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 == a2)
  {
    a2 = a1;
  }
  else
  {
    v5 = *a3;
    v6 = a2;
    while (1)
    {
      v7 = a4 - v5;
      if ((v6 - a1) >> 4 >= v7 >> 4)
        v8 = v7 >> 4;
      else
        v8 = (v6 - a1) >> 4;
      if (v8)
      {
        v9 = (uint64_t *)(v6 - 8);
        v10 = -16 * v8;
        do
        {
          *(_QWORD *)(a4 - 16) = *(v9 - 1);
          a4 -= 16;
          v11 = *v9;
          v9 -= 2;
          *(_QWORD *)(a4 + 8) = v11;
          v10 += 16;
        }
        while (v10);
      }
      v6 -= 16 * v8;
      if (v6 == a1)
        break;
      v12 = *--a3;
      v5 = v12;
      a4 = v12 + 4096;
    }
    if (*a3 + 4096 == a4)
    {
      v13 = a3[1];
      ++a3;
      a4 = v13;
    }
  }
  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
}

double sub_1003FB074(char **a1, char *a2, char **a3, char *a4, uint64_t a5)
{
  char **v7;
  char *v8;
  char **v10;
  char *i;
  char *v12;
  double result;
  char *v14;
  __int128 v15;

  v7 = *(char ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = *a1 + 4096; ; i = v12 + 4096)
    {
      v14 = 0;
      v15 = 0uLL;
      sub_1003FB114(a2, i, v7, v8, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (char **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  v14 = 0;
  v15 = 0uLL;
  sub_1003FB114(a2, a4, v7, v8, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_1003FB114(char *a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, char **a5@<X8>)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;

  if (a1 == a2)
  {
    a2 = a1;
  }
  else
  {
    v5 = *a3;
    while (1)
    {
      v6 = v5 - a4 + 4096;
      if ((a2 - a1) >> 4 >= v6 >> 4)
        v7 = v6 >> 4;
      else
        v7 = (a2 - a1) >> 4;
      if (v7)
      {
        v8 = &a1[16 * v7];
        do
        {
          *(_QWORD *)a4 = *(_QWORD *)a1;
          *((_QWORD *)a4 + 1) = *((_QWORD *)a1 + 1);
          a4 += 16;
          a1 += 16;
        }
        while (a1 != v8);
        a1 = v8;
      }
      if (a1 == a2)
        break;
      v9 = a3[1];
      ++a3;
      v5 = v9;
      a4 = v9;
    }
    if (*a3 + 4096 == a4)
    {
      v10 = a3[1];
      ++a3;
      a4 = v10;
    }
  }
  *a5 = a2;
  a5[1] = (char *)a3;
  a5[2] = a4;
}

uint64_t sub_1003FB1A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *__p;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15;
  unsigned __int8 *v16;
  char *v17;
  uint64_t v18;

  v2 = *a1;
  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 2);
  v4 = v3 + 1;
  if (v3 + 1 > 0xCCCCCCCCCCCCCCCLL)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v2) >> 2);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x666666666666666)
    v10 = 0xCCCCCCCCCCCCCCCLL;
  else
    v10 = v4;
  v18 = v7;
  if (v10)
    v11 = (char *)sub_1000B58EC(v7, v10);
  else
    v11 = 0;
  __p = v11;
  v15 = (unsigned __int8 *)&v11[20 * v3];
  v16 = v15;
  v17 = &v11[20 * v10];
  uuid_copy(v15, (const unsigned __int8 *)a2);
  *((_DWORD *)v15 + 4) = *(_DWORD *)(a2 + 16);
  v16 += 20;
  sub_1003FAC38(a1, &__p);
  v12 = a1[1];
  if (v16 != v15)
    v16 = &v15[(v16 - v15 - 20) % 0x14uLL];
  if (__p)
    operator delete(__p);
  return v12;
}

void sub_1003FB2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1003FB320(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10007ABA0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1002A61DC(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_1002A62F0((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10007ABA0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10007ABA0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_1002A640C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002A6520((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1003FB5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_1003FB634(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    sub_100004078(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_1003FB6F4(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  *(_WORD *)(v4 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)v4 = v5;
  v6 = *((_QWORD *)a2 + 2);
  *(_QWORD *)(v4 + 8) = &off_100918258;
  *(_QWORD *)(v4 + 16) = v6;
  if (v6)
    sub_10003C37C(v6);
  *(_BYTE *)(v4 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 8) = v4 + 32;
}

void sub_1003FB758(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1003FB760(uint64_t *a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD v18[2];
  char *v19;
  char *v20;
  uint64_t v21;

  v2 = *a1;
  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = v8 - v2;
  if (v9 >> 4 > v4)
    v4 = v9 >> 4;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
    v10 = 0x7FFFFFFFFFFFFFFLL;
  else
    v10 = v4;
  v21 = v7;
  if (v10)
    v11 = (char *)sub_1002A7408(v7, v10);
  else
    v11 = 0;
  v12 = &v11[32 * v3];
  v18[0] = v11;
  v18[1] = v12;
  v19 = v12;
  v20 = &v11[32 * v10];
  v13 = *a2;
  *((_WORD *)v12 + 2) = *((_WORD *)a2 + 2);
  *(_DWORD *)v12 = v13;
  *((_QWORD *)v12 + 1) = &off_100918258;
  v14 = *((_QWORD *)a2 + 2);
  *((_QWORD *)v12 + 2) = v14;
  if (v14)
  {
    sub_10003C37C(v14);
    v15 = v19;
  }
  else
  {
    v15 = v12;
  }
  v12[24] = *((_BYTE *)a2 + 24);
  v19 = v15 + 32;
  sub_1003FB86C(a1, v18);
  v16 = a1[1];
  sub_1003FB980((uint64_t)v18);
  return v16;
}

void sub_1003FB858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1003FB980((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003FB86C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1003FB8E0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1003FB8E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v7 = a7;
  if (a3 != a5)
  {
    v10 = a3;
    v11 = a7 - 16;
    v12 = a3;
    do
    {
      v13 = *(_DWORD *)(v12 - 32);
      v12 -= 32;
      *(_WORD *)(v11 - 12) = *(_WORD *)(v12 + 4);
      *(_DWORD *)(v11 - 16) = v13;
      *(_QWORD *)(v11 - 8) = &off_100918258;
      v14 = *(_QWORD *)(v12 + 16);
      *(_QWORD *)v11 = v14;
      if (v14)
        sub_10003C37C(v14);
      *(_BYTE *)(v11 + 8) = *(_BYTE *)(v10 - 8);
      v11 -= 32;
      v7 -= 32;
      v10 = v12;
    }
    while (v12 != a5);
  }
  return a6;
}

uint64_t sub_1003FB980(uint64_t a1)
{
  sub_1003FB9B4(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1003FB9B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 32;
    *(_QWORD *)(v2 - 24) = &off_100918258;
    v5 = *(unsigned int **)(v2 - 16);
    if (v5)
    {
      sub_100056AAC(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

unsigned __int8 *sub_1003FBA1C(unsigned __int8 *src, unsigned __int8 *a2, uuid_t dst)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;

  v4 = src;
  if (src == a2)
    return src;
  v5 = a2;
  do
  {
    uuid_copy(dst, v4);
    *((_DWORD *)dst + 4) = *((_DWORD *)v4 + 4);
    dst += 20;
    v4 += 20;
  }
  while (v4 != v5);
  return v5;
}

unsigned __int8 *sub_1003FBA84(unsigned __int8 *src, unsigned __int8 *a2, uuid_t dst)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;

  v4 = src;
  if (src == a2)
    return src;
  v5 = a2;
  do
  {
    uuid_copy(dst, v4);
    *((_WORD *)dst + 8) = *((_WORD *)v4 + 8);
    dst += 18;
    v4 += 18;
  }
  while (v4 != v5);
  return v5;
}

uint64_t sub_1003FBAEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  void *__p;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15;
  unsigned __int8 *v16;
  char *v17;
  uint64_t v18;

  v2 = *a1;
  v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 1);
  v4 = v3 + 1;
  if (v3 + 1 > 0xE38E38E38E38E38)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0x8E38E38E38E38E39 * ((v8 - v2) >> 1);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x71C71C71C71C71CLL)
    v10 = 0xE38E38E38E38E38;
  else
    v10 = v4;
  v18 = v7;
  if (v10)
    v11 = (char *)sub_1002F6478(v7, v10);
  else
    v11 = 0;
  __p = v11;
  v15 = (unsigned __int8 *)&v11[18 * v3];
  v16 = v15;
  v17 = &v11[18 * v10];
  uuid_copy(v15, (const unsigned __int8 *)a2);
  *((_WORD *)v15 + 8) = *(_WORD *)(a2 + 16);
  v16 += 18;
  sub_1002F707C(a1, &__p);
  v12 = a1[1];
  if (v16 != v15)
    v16 = &v15[(v16 - v15 - 18) % 0x12uLL];
  if (__p)
    operator delete(__p);
  return v12;
}

void sub_1003FBC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1003FBC90(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t **v6;
  uint64_t *result;
  unsigned __int8 *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_10000DC28((uint64_t)a1, &v9, uu1);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1003FBD30((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_1003FBD30(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (unsigned __int8 *)operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((_QWORD *)v6 + 6) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1003FBD90(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1003FBDA8(id a1)
{
  operator new();
}

void sub_1003FBDE8()
{
  operator delete();
}

void sub_1003FBE90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1003FBEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1003FBF8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1003FC0DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1003FC3B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1003FC474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1003FC564(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1003FC964(uint64_t a1, void *a2)
{
  id v4;
  id obj;

  obj = *(id *)(a1 + 112);
  v4 = a2;
  objc_sync_enter(obj);
  objc_msgSend(*(id *)(a1 + 112), "addObject:", v4);

  objc_sync_exit(obj);
}

void sub_1003FC9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  void *v10;

  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1003FC9E4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[2];
  _QWORD v10[2];

  v5 = a2;
  v9[0] = CFSTR("kCBMsgArgDeviceUUID");
  v9[1] = CFSTR("kCBMsgArgAncsAuthorization");
  v10[0] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a3));
  v10[1] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 2));

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v8 = 110;
    goto LABEL_5;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) == 1)
  {
    v8 = 61;
LABEL_5:
    sub_10005DC70(a1, v8, v7);
  }

}

void sub_1003FCAEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1003FCB1C(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  const __CFString *v5;
  void *v6;

  v5 = CFSTR("kCBMsgArgRequiresTCC");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2));
  v6 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));

  sub_10005DC70(a1, 3, v4);
}

void sub_1003FCBD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1003FCBF8(uint64_t a1)
{
  id v2;
  const char *v3;
  int v4;
  void **v5;
  const char *v6;
  int v7;
  const char *v8;
  const char *v9;
  unsigned int v10;
  const char *v11;
  void *__p[2];
  char v14;

  v2 = objc_alloc_init((Class)NSMutableString);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) == 1)
    {
      v3 = "Peripheral";
    }
    else
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v3 = "Unknown";
      if (v4 == 3)
        v3 = "Classic";
    }
  }
  else
  {
    v3 = "Central";
  }
  objc_msgSend(v2, "appendFormat:", CFSTR("Type: %s\n"), v3);
  sub_1003FCE28((_QWORD *)(a1 + 8), __p);
  if (v14 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  objc_msgSend(v2, "appendFormat:", CFSTR("Last foreground time: %s\n"), v5);
  if (v14 < 0)
    operator delete(__p[0]);
  if (*(_BYTE *)(a1 + 24))
    v6 = "Yes";
  else
    v6 = "No";
  objc_msgSend(v2, "appendFormat:", CFSTR("Supports backgrounding: %s\n"), v6);
  v7 = *(_DWORD *)(a1 + 32);
  if (v7)
  {
    v8 = "Unknown";
    if (v7 == 1)
      v8 = "Listener";
    if (v7 == 2)
      v9 = "Programmatic";
    else
      v9 = v8;
    objc_msgSend(v2, "appendFormat:", CFSTR("Pairing agent: %s\n"), v9);
  }
  v10 = *(unsigned __int8 *)(a1 + 129);
  if (v10 <= 7)
  {
    if (v10 == 2)
    {
      v11 = "terminated";
      goto LABEL_34;
    }
    if (v10 == 4)
    {
      v11 = "suspended";
      goto LABEL_34;
    }
LABEL_33:
    v11 = "unknown";
    goto LABEL_34;
  }
  if (v10 == 8)
  {
    v11 = "background-running";
    goto LABEL_34;
  }
  if (v10 == 16)
  {
    v11 = "foreground-running";
    goto LABEL_34;
  }
  if (v10 != 32)
    goto LABEL_33;
  v11 = "daemon";
LABEL_34:
  objc_msgSend(v2, "appendFormat:", CFSTR("Execution state: %s\n"), v11);
  return v2;
}

void sub_1003FCDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *sub_1003FCE28@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  char __str[16];
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v6 = 0u;
  v7 = 0u;
  *(_OWORD *)__str = 0u;
  v5 = 0u;
  snprintf(__str, 0x3FuLL, "%0llu.%0llu", *a1, a1[1]);
  return sub_100091AE8(a2, __str);
}

BOOL sub_1003FCEAC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 120);
  return v1 && *(_DWORD *)(v1 - 64) > 0;
}

void sub_1003FCECC(uint64_t a1)
{
  const char **v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[5];

  if (*(_QWORD *)(a1 + 496))
  {
    v2 = (const char **)sub_1000419F4();
    if (sub_100475DDC(v2))
    {
      objc_msgSend(*(id *)(a1 + 496), "setEventHandler:", 0);
      objc_msgSend(*(id *)(a1 + 496), "invalidate");
      v3 = *(void **)(a1 + 496);
      *(_QWORD *)(a1 + 496) = 0;

    }
    else
    {
      v4 = sub_1000419F4();
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      v5[2] = sub_100409238;
      v5[3] = &unk_100917378;
      v5[4] = a1;
      sub_100023D84(v4, v5);
    }
  }
}

uint64_t sub_1003FCF70(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1003FCFC0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_10092DEC8);
  return sub_100678AFC((uint64_t)off_100977FA8, a2, a3);
}

void sub_1003FD018(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  _BOOL4 v10;
  _BOOL4 v11;
  void *v12;
  uint64_t v13;
  __int128 *v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  xpc_object_t v26;
  id v27;
  __int128 *v28;
  unsigned __int8 uuid[8];
  uint64_t v30;
  uint64_t v31[3];
  _BYTE v32[24];

  v7 = a3;
  v8 = a4;
  v28 = 0;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  v9 = off_1009778A0;
  sub_100030BCC(v31, v7);
  v10 = sub_100623C54((uint64_t)v9, (unsigned __int8 *)v31, &v28);
  if (v28)
    v11 = v10;
  else
    v11 = 0;
  if (v11)
  {
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10092DF08);
    v12 = off_1009778A0;
    sub_100030BCC(v31, v7);
    if (!sub_100623D58((uint64_t)v12, (unsigned __int8 *)v31)
      && os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
    {
      sub_1006EDEB0();
    }
    v13 = sub_1002B5578();
    v14 = v28;
    v15 = objc_retainAutorelease(v8);
    v16 = sub_1002B896C(v13, v14, objc_msgSend(v15, "bytes"), objc_msgSend(v15, "length"));
    if ((_DWORD)v16)
    {
      v17 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
        sub_1006EDE4C(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }
  else
  {
    v24 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
    {
      sub_1000340DC(a2, (uint64_t)v31);
      sub_1006EDF10(v31, (uint64_t)v7, (uint64_t)v32, v24);
    }
    LODWORD(v16) = 312;
  }
  v25 = *(_QWORD *)(a1 + 120);
  v26 = xpc_dictionary_create(0, 0, 0);
  *(_QWORD *)uuid = 0;
  v30 = 0;
  objc_msgSend(v7, "getUUIDBytes:", uuid);
  xpc_dictionary_set_uuid(v26, "kCBMsgArgDeviceUUID", uuid);
  xpc_dictionary_set_int64(v26, "kCBMsgArgResult", (int)v16);
  if ((_DWORD)v16)
    v27 = 0;
  else
    v27 = objc_msgSend(v8, "length");
  xpc_dictionary_set_int64(v26, "kCBMsgArgBytesSent", (int64_t)v27);
  if (v25)
    sub_10005E138(v25 - 144, 138, v26, 1);
  else
    xpc_release(v26);
  if (*(_DWORD *)(a1 + 376))
  {
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10092DE88);
    sub_1002E51D0((uint64_t)off_100978168, *(void **)(a1 + 88), 1);
  }

}

void sub_1003FD300(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_1003FD330(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 120);
  return v1 && *(_BYTE *)(v1 + 28) != 0;
}

void sub_1003FD350(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  xpc_object_t v9;
  id v10;
  _QWORD v11[3];

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 120);
  if (v7 && *(_BYTE *)(v7 + 28))
  {
    v8 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "sending data to upper layer", (uint8_t *)v11, 2u);
    }
    v9 = xpc_dictionary_create(0, 0, 0);
    v11[0] = 0;
    v11[1] = 0;
    objc_msgSend(v5, "getUUIDBytes:", v11);
    xpc_dictionary_set_uuid(v9, "kCBMsgArgDeviceUUID", (const unsigned __int8 *)v11);
    v10 = objc_retainAutorelease(v6);
    xpc_dictionary_set_data(v9, "kCBMsgArgObjectDiscoveryData", objc_msgSend(v10, "bytes"), (size_t)objc_msgSend(v10, "length"));
    sub_10005E138(v7 - 144, 139, v9, 1);
  }

}

void sub_1003FD4A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1003FD4C0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD *v7;
  dispatch_time_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD handler[5];
  uint8_t buf[16];

  if (*(_QWORD *)(a1 + 432))
  {
    v2 = *(NSObject **)(a1 + 440);
    if (v2)
    {
      dispatch_suspend(v2);
    }
    else
    {
      v5 = sub_1000419F4();
      v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v5 + 8));
      *(_QWORD *)(a1 + 440) = v6;
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1003FD628;
      handler[3] = &unk_100917378;
      handler[4] = a1;
      dispatch_source_set_event_handler(v6, handler);
    }
    v7 = *(_QWORD **)(a1 + 416);
    v8 = -1;
    if (v7 != (_QWORD *)(a1 + 424))
    {
      do
      {
        if (v8 >= v7[5])
          v8 = v7[5];
        v9 = (_QWORD *)v7[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_QWORD *)v7[2];
            v11 = *v10 == (_QWORD)v7;
            v7 = v10;
          }
          while (!v11);
        }
        v7 = v10;
      }
      while (v10 != (_QWORD *)(a1 + 424));
    }
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 440), v8, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    dispatch_resume(*(dispatch_object_t *)(a1 + 440));
  }
  else
  {
    v3 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "No delayed connection", buf, 2u);
    }
    v4 = *(NSObject **)(a1 + 440);
    if (v4)
    {
      dispatch_source_cancel(v4);
      dispatch_release(*(dispatch_object_t *)(a1 + 440));
      *(_QWORD *)(a1 + 440) = 0;
    }
  }
}

void sub_1003FD628(uint64_t a1)
{
  sub_1003FD630(*(_QWORD *)(a1 + 32));
}

void sub_1003FD630(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD *v3;
  dispatch_time_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  id v8;
  id v9;
  void **v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t *v14;
  unint64_t *v15;
  void *__p[2];
  char v17;
  id v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _BYTE buf[12];
  __int16 v23;
  id v24;
  __int16 v25;
  void **v26;

  v2 = dispatch_time(0, 0);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v3 = *(_QWORD **)(a1 + 416);
  if (v3 != (_QWORD *)(a1 + 424))
  {
    v4 = v2;
    do
    {
      if (v3[5] <= v4)
      {
        v18 = 0;
        v18 = (id)v3[4];
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 408), "objectForKeyedSubscript:", v18));
        v6 = v3[6];
        v7 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          v8 = objc_msgSend(v5, "delay");
          v9 = v18;
          sub_1000340DC(v6, (uint64_t)__p);
          v10 = __p;
          if (v17 < 0)
            v10 = (void **)__p[0];
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)&buf[4] = v8;
          v23 = 2114;
          v24 = v9;
          v25 = 2082;
          v26 = v10;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "delayed connection (%ld seconds) passed, connecting to device %{public}@ session \"%{public}s\" now", buf, 0x20u);
          if (v17 < 0)
            operator delete(__p[0]);
        }
        objc_msgSend(v5, "setDelay:", 0);
        sub_1003FD8BC(a1, v6, v18, v5);
        sub_1003FFF24(&v19, &v18);

      }
      v11 = (_QWORD *)v3[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v3[2];
          v13 = *v12 == (_QWORD)v3;
          v3 = v12;
        }
        while (!v13);
      }
      v3 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 424));
    v14 = (unint64_t *)v19;
    v15 = (unint64_t *)v20;
    if (v19 != v20)
    {
      do
      {
        sub_10040F4B4(a1 + 416, v14);
        objc_msgSend(*(id *)(a1 + 408), "removeObjectForKey:", *v14++);
      }
      while (v14 != v15);
    }
  }
  sub_1003FD4C0(a1);
  *(_QWORD *)buf = &v19;
  sub_10040F448((void ***)buf);
}

void sub_1003FD870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a18;
  sub_10040F448(&a21);
  _Unwind_Resume(a1);
}

void sub_1003FD8BC(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  BOOL v14;
  void *v15;
  void *v16;
  int v17;
  int v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;
  id v22;
  void *v23;
  BOOL v24;
  void *v25;
  _BOOL4 v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  _QWORD *v32;
  id v33;
  void *v34;
  _BOOL4 v35;
  NSObject *v36;
  id v37;
  unsigned int v38;
  unsigned int v39;
  NSObject *v40;
  void *v41;
  id v42;
  dispatch_time_t v43;
  uint64_t *v44;
  _BOOL4 v45;
  NSObject *v46;
  std::string::size_type v47;
  uint8_t *v48;
  NSObject *v49;
  unsigned __int16 v50;
  id v51;
  id v52;
  uint64_t v53;
  void *i;
  void *v55;
  int v56;
  NSObject *v57;
  unsigned __int16 v58;
  NSObject *v59;
  NSObject *v60;
  id v61;
  uint64_t *v62;
  void *v63;
  void *v64;
  int v65;
  uint8_t *v66;
  NSStringEncoding v67;
  uint8_t *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  NSObject *v72;
  signed __int8 v73;
  NSObject *v74;
  uint64_t v75;
  int v76;
  NSObject *v77;
  const char *v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  void *v82;
  void *v83;
  double Current;
  NSObject *v85;
  void *v86;
  std::string *v87;
  id v88;
  id v89;
  NSObject *v90;
  void *v91;
  _QWORD *v92;
  unint64_t v93;
  NSObject *v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  std::string::size_type size;
  _BOOL4 v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  BOOL v106;
  NSObject *v107;
  void *v108;
  uint64_t v109;
  int v110;
  int v111;
  void *v112;
  void *v113;
  void *v114;
  int v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t v118;
  NSObject *v119;
  void *v120;
  unsigned __int8 v121;
  uint64_t v122;
  id v123;
  unsigned __int8 *v124;
  void *v125;
  void *v126;
  void *v127;
  BOOL v128;
  NSObject *v129;
  void *v130;
  unint64_t v131;
  unint64_t v132;
  void *v133;
  id v134;
  id v135;
  NSObject *v136;
  NSObject *v137;
  void *v138;
  std::string *v139;
  uint64_t v140;
  id v141;
  id v142;
  _BOOL4 v143;
  uint64_t v144;
  id v145;
  __CFString *v146;
  void *v147;
  NSObject *v148;
  std::string::size_type v149;
  uint8_t *v150;
  NSObject *v151;
  void *v152;
  void (***v153)(_QWORD, std::string *, uint64_t, void *);
  std::string *v154;
  NSObject *v155;
  uint64_t v156;
  void *v157;
  BOOL v158;
  void *v159;
  void *v162[2];
  char v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  void *v168[2];
  char v169;
  void *__p[2];
  char v171;
  int v172;
  void *v173;
  uint8_t buf[48];
  std::string v175;
  _BYTE v176[128];
  unsigned __int8 v177[16];

  v5 = a3;
  v173 = v5;
  v6 = a4;
  v172 = 0xFFFF;
  if (qword_10097AC28 != -1)
    dispatch_once(&qword_10097AC28, &stru_10092DF68);
  v7 = qword_10097AC20;
  sub_100030BCC(v177, v5);
  sub_100484478(v7, v177, &v172);
  if (v172 == 0xFFFF || v172 == 2)
  {
    if (!*(_BYTE *)(a1 + 128))
    {
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
        sub_1006EE11C();
      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_10092DE88);
      sub_1002E41CC((uint64_t)off_100978168, a2, a1, v173, 341, 0);
      goto LABEL_351;
    }
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEBUG))
      sub_1006EE1DC();
    v8 = *(_QWORD *)(a1 + 120);
    if (v8 && *(int *)(v8 - 64) >= 1)
    {
      if (qword_10097AC58 != -1)
        dispatch_once(&qword_10097AC58, &stru_10092DEA8);
      if (sub_100005E48(qword_10097AC50, 1uLL, *(void **)(a1 + 88)))
      {
        v9 = objc_msgSend(v6, "connectionUseCase");
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "useCaseList"));
        v11 = v10;
        v12 = v9;
        if (v10 && objc_msgSend(v10, "count"))
        {
          if (objc_msgSend(v11, "count") == (id)1)
          {
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectAtIndexedSubscript:", 0));
            v14 = objc_msgSend(v13, "longLongValue") != 0;

            if (!v14 && v12 == 0)
              goto LABEL_17;
          }
        }
        else if (!v9)
        {
LABEL_17:
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
            sub_1006EE17C();
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_10092DE88);
          sub_1002E41CC((uint64_t)off_100978168, a2, a1, v173, 348, 0);

          goto LABEL_351;
        }

      }
    }
  }
  objc_msgSend(*(id *)(a1 + 336), "addObject:", v173);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  v15 = off_1009778C0;
  v16 = v173;
  sub_100091AE8(__p, "_FORCE_GATT_SERVICES_DISCOVERY_");
  v17 = sub_10000628C((uint64_t)v15, v16, (uint64_t)__p);
  v18 = v17;
  if (v171 < 0)
  {
    operator delete(__p[0]);
    if (!v18)
      goto LABEL_42;
  }
  else if (!v17)
  {
    goto LABEL_42;
  }
  v19 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Forcing GATT rediscovery later on, deleting cache database", buf, 2u);
  }
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_10092DF88);
  sub_1005DCD50(qword_1009778F0, v173);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  sub_100653B18((uint64_t)off_1009778C0, v173, CFSTR("_FORCE_GATT_SERVICES_DISCOVERY_"));
LABEL_42:
  if (*(_BYTE *)(a1 + 44))
  {
    if (qword_10097AC58 != -1)
      dispatch_once(&qword_10097AC58, &stru_10092DEA8);
    sub_1006C08BC(qword_10097AC50, a2, v173, v6);
  }
  if (objc_msgSend(v6, "resetDisconnectionHistory"))
  {
    v20 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v173;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Trigger resetDisconnectionHistory \"%{public}@\" ", buf, 0xCu);
    }
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10092DF08);
    v21 = off_1009778A0;
    v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v173, "UUIDString")));
    sub_100091AE8(v168, (char *)objc_msgSend(v22, "UTF8String"));
    sub_10063D398((uint64_t)v21, (const void **)v168);
    if (v169 < 0)
      operator delete(v168[0]);

  }
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 248), "objectForKey:", v173));
  v24 = v23 == 0;

  if (v24)
  {
    v27 = *(_QWORD **)(a1 + 320);
    if (v27)
    {
      v28 = v173;
      v29 = a1 + 320;
      do
      {
        v30 = v27[4];
        v31 = v30 >= (unint64_t)v173;
        if (v30 >= (unint64_t)v173)
          v32 = v27;
        else
          v32 = v27 + 1;
        if (v31)
          v29 = (uint64_t)v27;
        v27 = (_QWORD *)*v32;
      }
      while (*v32);
      if (v29 != a1 + 320 && (unint64_t)v173 >= *(_QWORD *)(v29 + 32))
      {
        v59 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v28;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "FindMy Device %{public}@ already parked until new keys become available", buf, 0xCu);
        }
        goto LABEL_351;
      }
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    v33 = sub_1000067B8((uint64_t)off_1009778C0, v173);
    v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
    if (v34)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10092DF28);
      sub_100660428((uint64_t)off_1009778C0, v173, 2u, (uint64_t)buf);
      v35 = *(_QWORD *)&buf[16] == 0;
      sub_10001A82C((uint64_t)buf, *(_QWORD **)&buf[8]);

      if (v35)
      {
        v60 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v173;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Device %{public}@ is FindMy but has no valid addresses/keys", buf, 0xCu);
        }
        v61 = v6;
        *(_QWORD *)buf = &v173;
        v62 = sub_10040F684((uint64_t **)(a1 + 312), (unint64_t *)&v173, (uint64_t)&unk_100740F58, (id **)buf);
        objc_storeStrong((id *)v62 + 5, a4);
        v62[6] = a2;
        objc_msgSend(*(id *)(a1 + 248), "setObject:forKey:", v61, v173);

        goto LABEL_351;
      }
    }
    if (objc_msgSend(v6, "isLatencyCritical"))
    {
      v36 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v173;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Latency Critical Action: LE Connection for device %{public}@", buf, 0xCu);
      }
      sub_100400040(a1);
    }
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10092DF08);
    v37 = sub_100069E14((uint64_t)off_1009778A0);
    v159 = (void *)objc_claimAutoreleasedReturnValue(v37);
    if (qword_10097AC58 != -1)
      dispatch_once(&qword_10097AC58, &stru_10092DEA8);
    v38 = sub_1006C02B8(qword_10097AC50, (int)objc_msgSend(v6, "connectionUseCase"));
    if (qword_10097AC58 != -1)
      dispatch_once(&qword_10097AC58, &stru_10092DEA8);
    v39 = sub_1006C00E8(qword_10097AC50, objc_msgSend(v6, "connectionUseCase"));
    if (v38 >= v39)
    {
      v49 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        v50 = (unsigned __int16)objc_msgSend(v6, "connectionUseCase");
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v50;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v38;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Exceeded max connection limit for use case:%d for counter: %d", buf, 0xEu);
      }
      v166 = 0u;
      v167 = 0u;
      v164 = 0u;
      v165 = 0u;
      v51 = v159;
      v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v164, v176, 16);
      if (v52)
      {
        v53 = *(_QWORD *)v165;
        do
        {
          for (i = 0; i != v52; i = (char *)i + 1)
          {
            if (*(_QWORD *)v165 != v53)
              objc_enumerationMutation(v51);
            v55 = *(void **)(*((_QWORD *)&v164 + 1) + 8 * (_QWORD)i);
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10092DF28);
            v56 = sub_1006589A8((uint64_t)off_1009778C0, v55);
            if (v56 == objc_msgSend(v6, "connectionUseCase"))
            {
              if (qword_10097AC58 != -1)
                dispatch_once(&qword_10097AC58, &stru_10092DEA8);
              if (sub_1006C02B8(qword_10097AC50, (int)objc_msgSend(v6, "connectionUseCase")) >= v39)
              {
                v57 = qword_100999898;
                if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
                {
                  v58 = (unsigned __int16)objc_msgSend(v6, "connectionUseCase");
                  *(_DWORD *)buf = 138543618;
                  *(_QWORD *)&buf[4] = v55;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v58;
                  _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Exceeded max connection :device %{public}@ for use case:%d", buf, 0x12u);
                }
              }
            }
          }
          v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v164, v176, 16);
        }
        while (v52);
      }

      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_10092DE88);
      sub_1002E41CC((uint64_t)off_100978168, a2, a1, v173, 336, 0);
      goto LABEL_350;
    }
    if ((uint64_t)objc_msgSend(v6, "delay") >= 1)
    {
      v40 = qword_100999898;
      if (*(_BYTE *)(a1 + 24))
      {
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          v41 = v173;
          v42 = objc_msgSend(v6, "delay");
          *(_DWORD *)buf = 138543618;
          *(_QWORD *)&buf[4] = v41;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v42;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Add delayed connection to device %{public}@ with %ld seconds delay.", buf, 0x16u);
        }
        v43 = dispatch_time(0, 1000000000 * (_QWORD)objc_msgSend(v6, "delay"));
        *(_QWORD *)buf = &v173;
        v44 = sub_10040F684((uint64_t **)(a1 + 416), (unint64_t *)&v173, (uint64_t)&unk_100740F58, (id **)buf);
        v44[5] = v43;
        v44[6] = a2;
        objc_msgSend(*(id *)(a1 + 408), "setObject:forKey:", v6, v173);
        sub_1003FD4C0(a1);
        goto LABEL_350;
      }
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
        sub_1006EE0F0();
    }
    sub_100400334(a1, v173, v6);
    sub_100400868(a1, v173, v6);
    sub_100400A4C(a1, a2, v173, v6);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    v63 = off_1009778C0;
    v64 = v173;
    sub_1000340DC(a2, (uint64_t)buf);
    v65 = (char)buf[23];
    v66 = *(uint8_t **)buf;
    v67 = +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding");
    if (v65 >= 0)
      v68 = buf;
    else
      v68 = v66;
    v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v68, v67));
    v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "clientBundleID"));
    sub_10065C2D8((uint64_t)v63, v64, v69, v70);

    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    sub_100400FD4(v71, v173, v6);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    sub_100659FE4((uint64_t)off_1009778C0, v173, (char)objc_msgSend(v6, "minRSSILevelForConnection"));
    v72 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v73 = objc_msgSend(v6, "minRSSILevelForConnection");
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v73;
      *(_WORD *)&buf[8] = 2114;
      *(_QWORD *)&buf[10] = v173;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "Setting minimum RSSI level for connection to %d for device %{public}@", buf, 0x12u);
    }
    v74 = qword_1009998C8;
    if (os_log_type_enabled((os_log_t)qword_1009998C8, OS_LOG_TYPE_DEFAULT))
    {
      v75 = *(_QWORD *)(a1 + 88);
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v173;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v75;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "App connecting - {cbuuid: %{public}@, bundle: %{public}@}", buf, 0x16u);
    }
    v76 = objc_msgSend(v6, "connectionUseCase");
    v77 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v78 = sub_100034AC8(v76);
      v79 = *(_QWORD *)(a1 + 88);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v78;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v173;
      *(_WORD *)&buf[22] = 2114;
      *(_QWORD *)&buf[24] = v79;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "BLE Connecting %{public}s %{public}@ for %{public}@", buf, 0x20u);
      v77 = qword_100999898;
    }
    if (os_signpost_enabled(v77))
    {
      v80 = sub_100034AC8(v76);
      v81 = *(_QWORD *)(a1 + 88);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v80;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v173;
      *(_WORD *)&buf[22] = 2114;
      *(_QWORD *)&buf[24] = v81;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v77, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "BLE Connecting %{public}s %{public}@ for %{public}@", buf, 0x20u);
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    v82 = off_1009778C0;
    v83 = v173;
    Current = CFAbsoluteTimeGetCurrent();
    sub_100656E88((uint64_t)v82, v83, Current);
    v85 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v86 = v173;
      sub_1000340DC(a2, (uint64_t)&v175);
      v87 = (v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v175
          : (std::string *)v175.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)&buf[4] = v86;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v87;
      *(_WORD *)&buf[22] = 2114;
      *(_QWORD *)&buf[24] = v6;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "Connecting device \"%{public}@\" for session \"%{public}s\" with options %{public}@", buf, 0x20u);
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v175.__r_.__value_.__l.__data_);
    }
    v88 = objc_msgSend(v6, "ctkdChosenTransport");
    v89 = v88;
    if (v172 == 1 && v88 != (id)1)
    {
      v90 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v173;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1;
        _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "Device \"%{public}@\" is connected to CATT transport=%d", buf, 0x12u);
      }
      objc_msgSend(*(id *)(a1 + 248), "setObject:forKey:", v6, v173);
      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_10092DE88);
      sub_1002E41CC((uint64_t)off_100978168, a2, a1, v173, 0, 0);
      goto LABEL_350;
    }
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10092DF08);
    v91 = off_1009778A0;
    sub_100030BCC(buf, v173);
    if (sub_100069F08((uint64_t)v91, buf))
      goto LABEL_174;
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10092DF08);
    v92 = off_1009778A0;
    sub_100030BCC(&v175, v173);
    if ((sub_10061CDB8(v92, (unsigned __int8 *)&v175) & 1) != 0)
    {
LABEL_174:
      if ((objc_msgSend(v6, "disableLeGATT") & 1) == 0)
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10092DF28);
        if (sub_10065DB1C((uint64_t)off_1009778C0, v173))
        {
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
            sub_1006EE090();
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_10092DE88);
          sub_1002E41CC((uint64_t)off_100978168, a2, a1, v173, 117, 0);
        }
      }
    }
    v93 = (unint64_t)objc_msgSend(v6, "connectionUseCase") & 0xFFFF0000;
    v94 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEBUG))
      sub_1006EE01C(v93 == 589824, v94);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    sub_10065DBAC((uint64_t)off_1009778C0, v173, v93 == 589824);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    v95 = sub_1000589DC((uint64_t)off_1009778C0, v173, 0);
    v96 = 0;
    if ((v95 & 0xFF000000000000) == 0 && (v95 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10092DFA8);
      v97 = sub_10006D488((uint64_t)off_1009778E0, v95, 0);
      v98 = v97;
      if (v97 && sub_10043FC5C(v97))
      {
        v99 = sub_100441AE4(v98);
        if (v89 == (id)1)
          v96 = 0;
        else
          v96 = v99;
      }
      else
      {
        v96 = 0;
      }
    }
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10092DE88);
    if ((sub_1002F21F8((uint64_t)off_100978168, v173) | v96) == 1)
    {
      sub_10040111C(a1, v173);
      goto LABEL_222;
    }
    sub_1000340DC(a2, (uint64_t)buf);
    if (sub_100333154((uint64_t *)buf, "com.apple.bluetoothd", 0) == -1)
    {
      v101 = 0;
    }
    else
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10092DF28);
      sub_1006594CC((uint64_t)off_1009778C0, v173, (uint64_t)&v175);
      size = v175.__r_.__value_.__l.__size_;
      if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v175.__r_.__value_.__r.__words[2]);
      v101 = size != 0;
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v175.__r_.__value_.__l.__data_);
    }
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    if (v101)
    {
      if (qword_1009778A8 != -1)
        dispatch_once(&qword_1009778A8, &stru_10092DF08);
      v102 = off_1009778A0;
      sub_100030BCC(buf, v173);
      sub_100623DC8((uint64_t)v102, buf);
    }
    if (objc_msgSend(v6, "requiresLowLatency"))
    {
      if (qword_1009778A8 != -1)
        dispatch_once(&qword_1009778A8, &stru_10092DF08);
      v103 = off_1009778A0;
      sub_100030BCC(buf, v173);
      sub_100623DC8((uint64_t)v103, buf);
    }
    if ((objc_msgSend(v6, "opportunistic") & 1) != 0)
      goto LABEL_222;
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10092DF08);
    v110 = sub_10061F8DC((uint64_t)off_1009778A0, v173);
    v111 = v110;
    if (v110 <= 201)
    {
      if (!v110)
      {
LABEL_222:
        v104 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "temporaryLTK"));
        if (!v104)
          goto LABEL_271;
        v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "temporaryLTK"));
        v106 = objc_msgSend(v105, "length") == 0;

        if (v106)
          goto LABEL_271;
        v107 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v173;
          _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "setting up temporary LTK for device %{public}@", buf, 0xCu);
        }
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10092DF28);
        if (sub_100656AC0((uint64_t)off_1009778C0, v173))
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10092DF28);
          v108 = off_1009778C0;
          sub_100030BCC(buf, v173);
          v109 = sub_10065AE04((uint64_t)v108, buf);
        }
        else
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10092DF28);
          v109 = sub_1000589DC((uint64_t)off_1009778C0, v173, 0);
        }
        v116 = v109;
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10092DF28);
        sub_100660428((uint64_t)off_1009778C0, v173, 2u, (uint64_t)buf);
        if (!*(_QWORD *)&buf[8])
        {
LABEL_262:
          sub_10001A82C((uint64_t)buf, *(_QWORD **)&buf[8]);
          v119 = qword_100999898;
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v173;
            _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEFAULT, "setting up temporary LTK for device %@", buf, 0xCu);
          }
          buf[0] = 0;
          v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "temporaryLTK"));
          v121 = objc_msgSend(v120, "length");

          buf[0] = v121;
          v175.__r_.__value_.__s.__data_[0] = 2;
          if (qword_1009778B8 != -1)
            dispatch_once(&qword_1009778B8, &stru_10092DFC8);
          v122 = qword_1009778B0;
          v123 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "temporaryLTK")));
          v124 = (unsigned __int8 *)objc_msgSend(v123, "bytes");
          v125 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "temporaryLTK"));
          sub_10069DC9C(v122, v116, 5, v124, objc_msgSend(v125, "length"));

          if (qword_1009778B8 != -1)
            dispatch_once(&qword_1009778B8, &stru_10092DFC8);
          sub_10069DC9C(qword_1009778B0, v116, 6, buf, 1u);
          if (qword_1009778B8 != -1)
            dispatch_once(&qword_1009778B8, &stru_10092DFC8);
          sub_10069DC9C(qword_1009778B0, v116, 7, (unsigned __int8 *)&v175, 1u);
          goto LABEL_271;
        }
        v117 = *(_QWORD **)&buf[8];
        while (1)
        {
          v118 = v117[4];
          if (v116 >= v118)
          {
            if (v118 >= v116)
            {
              sub_10001A82C((uint64_t)buf, *(_QWORD **)&buf[8]);
              v148 = qword_100999898;
              if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
              {
                v149 = (std::string::size_type)v173;
                sub_1000217F4(v116);
                v150 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
                LODWORD(v175.__r_.__value_.__l.__data_) = 138412546;
                *(std::string::size_type *)((char *)v175.__r_.__value_.__r.__words + 4) = v149;
                WORD2(v175.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v175.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v150;
                _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_DEFAULT, "Ignoring temporary LTK for device %@ with address %s as we already have extra addresses and LTK's set up", (uint8_t *)&v175, 0x16u);
                if ((char)buf[23] < 0)
                  operator delete(*(void **)buf);
              }
LABEL_271:
              v126 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "temporaryIRK"));
              if (v126)
              {
                v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "temporaryIdentityAddress"));
                v128 = v127 == 0;

                if (!v128)
                {
                  v129 = qword_100999898;
                  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138543362;
                    *(_QWORD *)&buf[4] = v173;
                    _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEFAULT, "setting up temporary IRK for device %{public}@", buf, 0xCu);
                  }
                  *(_DWORD *)((char *)v175.__r_.__value_.__r.__words + 3) = 0;
                  LODWORD(v175.__r_.__value_.__l.__data_) = 0;
                  v130 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "temporaryIdentityAddress"));
                  v131 = sub_100649C7C(v130);

                  v175.__r_.__value_.__s.__data_[0] = 0;
                  v132 = sub_100225368(v131);
                  *(_DWORD *)((char *)&v175.__r_.__value_.__l.__data_ + 1) = v132;
                  *(_WORD *)((char *)v175.__r_.__value_.__r.__words + 5) = WORD2(v132);
                  v133 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "temporaryIRK"));
                  v134 = objc_msgSend(v133, "length");

                  if (v134 == (id)16)
                  {
                    *(_QWORD *)buf = 0;
                    *(_QWORD *)&buf[8] = 0;
                    v135 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "temporaryIRK")));
                    *(_OWORD *)buf = *(_OWORD *)objc_msgSend(v135, "bytes");

                    if (qword_1009778B8 != -1)
                      dispatch_once(&qword_1009778B8, &stru_10092DFC8);
                    sub_1006A0F3C(qword_1009778B0, (uint64_t)&v175, (uint64_t)buf, v173);
                    goto LABEL_279;
                  }
                  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
                    sub_1006EDF80();
LABEL_350:

                  goto LABEL_351;
                }
              }
LABEL_279:
              if (objc_msgSend(v6, "connectionUseCase") == (id)21
                || objc_msgSend(v6, "connectionUseCase") == (id)20
                || objc_msgSend(v6, "connectionUseCase") == (id)655360)
              {
                if (qword_1009778B8 != -1)
                  dispatch_once(&qword_1009778B8, &stru_10092DFC8);
                if (!sub_1006A0BE8(qword_1009778B0, v173))
                {
                  v136 = qword_100999898;
                  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138543362;
                    *(_QWORD *)&buf[4] = v173;
                    _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_DEFAULT, "fast IRK Resolution for device successful %{public}@", buf, 0xCu);
                  }
                }
              }
              if (qword_1009778C8 != -1)
                dispatch_once(&qword_1009778C8, &stru_10092DF28);
              sub_10065DA94((uint64_t)off_1009778C0, v173, (char)objc_msgSend(v6, "disableLeGATT"));
LABEL_290:
              v137 = qword_1009998D0;
              if (os_log_type_enabled((os_log_t)qword_1009998D0, OS_LOG_TYPE_DEFAULT))
              {
                v138 = v173;
                if (qword_1009778C8 != -1)
                  dispatch_once(&qword_1009778C8, &stru_10092DF28);
                v139 = &v175;
                sub_10000602C((uint64_t)off_1009778C0, v173, (uint64_t)&v175);
                if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v139 = (std::string *)v175.__r_.__value_.__r.__words[0];
                if (qword_1009778C8 != -1)
                  dispatch_once(&qword_1009778C8, &stru_10092DF28);
                v140 = sub_1000589DC((uint64_t)off_1009778C0, v173, 1);
                v141 = sub_1006498DC(v140);
                v142 = (id)objc_claimAutoreleasedReturnValue(v141);
                if (qword_1009778C8 != -1)
                  dispatch_once(&qword_1009778C8, &stru_10092DF28);
                v143 = sub_100656AC0((uint64_t)off_1009778C0, v173);
                if (v143)
                {
                  if (qword_1009778C8 != -1)
                    dispatch_once(&qword_1009778C8, &stru_10092DF28);
                  v144 = sub_1000589DC((uint64_t)off_1009778C0, v173, 0);
                  v145 = sub_1006498DC(v144);
                  v146 = (__CFString *)objc_claimAutoreleasedReturnValue(v145);
                }
                else
                {
                  v146 = &stru_100941758;
                }
                *(_DWORD *)buf = 138544386;
                *(_QWORD *)&buf[4] = v138;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = v139;
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = 0;
                *(_WORD *)&buf[28] = 2114;
                *(_QWORD *)&buf[30] = v142;
                *(_WORD *)&buf[38] = 2114;
                *(_QWORD *)&buf[40] = v146;
                _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_DEFAULT, "Device connecting - {cbuuid: %{public}@, devicename: %s, result: %d, adv-addr: %{public}@, resolved-addr: %{public}@}", buf, 0x30u);
                if (v143)

                if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v175.__r_.__value_.__l.__data_);

              }
              objc_msgSend(*(id *)(a1 + 248), "setObject:forKey:", v6, v173);
              if (objc_msgSend(v6, "opportunistic"))
              {
                if (qword_1009778A8 != -1)
                  dispatch_once(&qword_1009778A8, &stru_10092DF08);
                v147 = off_1009778A0;
                sub_100030BCC(buf, v173);
                if (sub_100623A78((uint64_t)v147, buf))
                {
                  if (qword_100978170 != -1)
                    dispatch_once(&qword_100978170, &stru_10092DE88);
                  sub_1002E41CC((uint64_t)off_100978168, a2, a1, v173, 0, 0);
                }
              }
LABEL_340:
              memset(buf, 0, sizeof(buf));
              sub_100091AE8(&v175, (char *)objc_msgSend(*(id *)(a1 + 88), "UTF8String"));
              sub_10047D52C((uint64_t)buf, (__int128 *)&v175, *(_BYTE *)(a1 + 129), v173);
              if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v175.__r_.__value_.__l.__data_);
              if (qword_10097AC48 != -1)
                dispatch_once(&qword_10097AC48, &stru_10092DEE8);
              sub_10006544C(qword_10097AC40, (uint64_t)buf);
              v153 = (void (***)(_QWORD, std::string *, uint64_t, void *))sub_10005D5A4();
              sub_10050945C(a2, &v175);
              if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v154 = &v175;
              else
                v154 = (std::string *)v175.__r_.__value_.__r.__words[0];
              (**v153)(v153, v154, 1, v173);
              if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v175.__r_.__value_.__l.__data_);
              sub_1002E4420((uint64_t)buf);
              goto LABEL_350;
            }
            ++v117;
          }
          v117 = (_QWORD *)*v117;
          if (!v117)
            goto LABEL_262;
        }
      }
      if (v110 == 8)
      {
        if (qword_10097AC28 != -1)
          dispatch_once(&qword_10097AC28, &stru_10092DF68);
        if (sub_10000671C(qword_10097AC20, v173))
          goto LABEL_290;
      }
    }
    else
    {
      switch(v110)
      {
        case 202:
          objc_msgSend(*(id *)(a1 + 336), "removeObject:", v173);
          break;
        case 310:
          v155 = qword_100999898;
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
          {
            v156 = (uint64_t)v173;
            sub_1000340DC(a2, (uint64_t)buf);
            sub_1006EDFAC(v156, (uint64_t *)buf, (uint64_t)&v175, v155);
          }
          v157 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 256), "objectForKey:", v173));
          v158 = v157 == 0;

          if (v158)
            objc_msgSend(*(id *)(a1 + 256), "setObject:forKey:", v6, v173);
          goto LABEL_350;
        case 311:
          if (qword_1009778A8 != -1)
            dispatch_once(&qword_1009778A8, &stru_10092DF08);
          v112 = off_1009778A0;
          sub_100030BCC(buf, v173);
          if (sub_100623A78((uint64_t)v112, buf))
          {
            if (qword_100978170 != -1)
              dispatch_once(&qword_100978170, &stru_10092DE88);
            sub_1002E41CC((uint64_t)off_100978168, a2, a1, v173, 0, 0);
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10092DF28);
            v113 = off_1009778C0;
            v114 = v173;
            sub_100091AE8(v162, "_CTKD_");
            v115 = sub_10000628C((uint64_t)v113, v114, (uint64_t)v162);
            if (v163 < 0)
              operator delete(v162[0]);
            if (v115)
            {
              if (qword_100978170 != -1)
                dispatch_once(&qword_100978170, &stru_10092DE88);
              sub_1002E8534((uint64_t)off_100978168, v173, 1, 0);
            }
          }
          goto LABEL_290;
      }
    }
    if (objc_msgSend(v6, "isLatencyCritical"))
    {
      v151 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v173;
        _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEFAULT, "Latency Critical Action: Disable LE Connection for connect failure to device %{public}@", buf, 0xCu);
      }
      sub_10040022C(a1);
    }
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10092DF08);
    v152 = off_1009778A0;
    sub_100030BCC(buf, v173);
    sub_100623F24((uint64_t)v152, buf);
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10092DE88);
    sub_1002E41CC((uint64_t)off_100978168, a2, a1, v173, v111, 0);
    goto LABEL_340;
  }
  if (v172 == 1)
  {
    if (qword_10097AC28 != -1)
      dispatch_once(&qword_10097AC28, &stru_10092DF68);
    v26 = sub_10000671C(qword_10097AC20, v173);
    goto LABEL_96;
  }
  if (v172 == 2)
  {
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10092DF08);
    v25 = off_1009778A0;
    sub_100030BCC(buf, v173);
    v26 = sub_100623A78((uint64_t)v25, buf);
LABEL_96:
    v45 = v26;
    goto LABEL_98;
  }
  v45 = 0;
LABEL_98:
  v46 = qword_100999898;
  if (!os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
    goto LABEL_103;
  v47 = (std::string::size_type)v173;
  sub_1000340DC(a2, (uint64_t)buf);
  v48 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
  LODWORD(v175.__r_.__value_.__l.__data_) = 138543618;
  *(std::string::size_type *)((char *)v175.__r_.__value_.__r.__words + 4) = v47;
  WORD2(v175.__r_.__value_.__r.__words[1]) = 2082;
  *(std::string::size_type *)((char *)&v175.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v48;
  _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "Attempting to add device \"%{public}@\" more than once for session \"%{public}s\"", (uint8_t *)&v175, 0x16u);
  if ((char)buf[23] < 0)
  {
    operator delete(*(void **)buf);
    if (!v45)
      goto LABEL_351;
  }
  else
  {
LABEL_103:
    if (!v45)
      goto LABEL_351;
  }
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_10092DE88);
  sub_1002E41CC((uint64_t)off_100978168, a2, a1, v173, 0, 0);
LABEL_351:

}

void sub_1003FFCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  void *v58;

  _Unwind_Resume(a1);
}

id sub_1003FFF24(char **a1, id *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  id result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v11 = v5 - (_QWORD)*a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v25 = v4;
    if (v13)
      v14 = (char *)sub_10007ABA0(v4, v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    v24 = v16;
    *(_QWORD *)v15 = *a2;
    v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v9 = (char *)v23.i64[1];
      v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v16;
    v24 = v21;
    v22 = v20.i64[0];
    result = (id)sub_100262224((uint64_t)&v22);
  }
  else
  {
    result = *a2;
    *(_QWORD *)v7 = result;
    v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void sub_100400040(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  dispatch_time_t v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD handler[5];
  uint8_t buf[4];
  uint64_t v10;

  if (!*(_QWORD *)(a1 + 480))
  {
    *(_BYTE *)(a1 + 472) = 1;
    if (qword_100977FB0 != -1)
      dispatch_once(&qword_100977FB0, &stru_10092DEC8);
    sub_10068115C((uint64_t)off_100977FA8, CFSTR("com.apple.bluetooth.LatencyCriticalAction"));
    v2 = sub_1000419F4();
    v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v2 + 8));
    *(_QWORD *)(a1 + 480) = v3;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1004001BC;
    handler[3] = &unk_100917378;
    handler[4] = a1;
    dispatch_source_set_event_handler(v3, handler);
    v4 = *(NSObject **)(a1 + 480);
    v5 = dispatch_time(0, 7500000000);
    dispatch_source_set_timer(v4, v5, 0xFFFFFFFFFFFFFFFFLL, 0);
    v6 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 480);
      *(_DWORD *)buf = 138412290;
      v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Latency Critical Action: Timer Start - %@", buf, 0xCu);
    }
    dispatch_activate(*(dispatch_object_t *)(a1 + 480));
  }
}

uint64_t sub_1004001BC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Latency Critical Action: Timer expired!", v4, 2u);
  }
  return sub_10040022C(v1);
}

uint64_t sub_10040022C(uint64_t result)
{
  NSObject *v1;
  uint64_t v2;
  NSObject *v3;
  int v4;
  NSObject *v5;

  v1 = *(NSObject **)(result + 480);
  if (v1)
  {
    v2 = result;
    v3 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v4 = 138412290;
      v5 = v1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Latency Critical Action: Cancel timer: %@", (uint8_t *)&v4, 0xCu);
      v1 = *(NSObject **)(v2 + 480);
    }
    dispatch_source_cancel(v1);
    dispatch_release(*(dispatch_object_t *)(v2 + 480));
    *(_QWORD *)(v2 + 480) = 0;
    *(_BYTE *)(v2 + 472) = 0;
    if (qword_100977FB0 != -1)
      dispatch_once(&qword_100977FB0, &stru_10092DEC8);
    return sub_100681414((uint64_t)off_100977FA8, CFSTR("com.apple.bluetooth.LatencyCriticalAction"));
  }
  return result;
}

void sub_100400334(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  int v8;
  NSObject *v9;
  char v10;
  NSObject *v11;
  int v12;
  void *v13;
  void *v14;
  char v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  void *__p[2];
  char v29;
  uint8_t buf[4];
  id v31;
  __int16 v32;
  int v33;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  v8 = *(_DWORD *)(a1 + 488);
  if (v8 != -1)
  {
    v9 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543618;
      v31 = v5;
      v32 = 1024;
      v33 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Overriding device %{public}@ coexConnectionPriority to %d", buf, 0x12u);
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    sub_10065FF6C((uint64_t)off_1009778C0, v5, *(_BYTE *)(a1 + 488));
    goto LABEL_16;
  }
  if (objc_msgSend(v6, "connectionUseCase") != (id)21
    && objc_msgSend(v7, "connectionUseCase") != (id)20
    && objc_msgSend(v7, "connectionUseCase") != (id)655360)
  {
    v10 = 0;
    v12 = *(unsigned __int8 *)(a1 + 129);
    if (v12 == 4 || v12 == 8)
      goto LABEL_11;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    if ((sub_100658AD4((uint64_t)off_1009778C0, v5) & 1) == 0)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10092DF28);
      v13 = off_1009778C0;
      sub_100091AE8(__p, "A1603");
      if ((sub_10000628C((uint64_t)v13, v5, (uint64_t)__p) & 1) != 0)
      {
        if (v29 < 0)
          operator delete(__p[0]);
      }
      else
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10092DF28);
        v14 = off_1009778C0;
        sub_100091AE8(v26, "A2051");
        if ((sub_10000628C((uint64_t)v14, v5, (uint64_t)v26) & 1) != 0)
        {
          v15 = 1;
        }
        else
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10092DF28);
          v16 = off_1009778C0;
          sub_100091AE8(v24, "A3085");
          if ((sub_10000628C((uint64_t)v16, v5, (uint64_t)v24) & 1) != 0)
          {
            v15 = 1;
          }
          else
          {
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10092DF28);
            v17 = off_1009778C0;
            sub_100091AE8(v22, "A2538");
            v15 = sub_10000628C((uint64_t)v17, v5, (uint64_t)v22);
            if (v23 < 0)
              operator delete(v22[0]);
          }
          if (v25 < 0)
            operator delete(v24[0]);
        }
        if (v27 < 0)
          operator delete(v26[0]);
        if (v29 < 0)
          operator delete(__p[0]);
        if ((v15 & 1) == 0)
        {
          if (objc_msgSend(v7, "connectionUseCase") == (id)19
            || objc_msgSend(v7, "connectionUseCase") == (id)196608
            || *(_BYTE *)(a1 + 129) == 32)
          {
            goto LABEL_54;
          }
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10092DF28);
          v18 = off_1009778C0;
          sub_100091AE8(v20, "_HID_DEVICE_");
          v19 = sub_10000628C((uint64_t)v18, v5, (uint64_t)v20);
          if (v21 < 0)
            operator delete(v20[0]);
          if ((v19 & 1) != 0)
          {
LABEL_54:
            v10 = 1;
            goto LABEL_11;
          }
          if (*(_BYTE *)(a1 + 129) == 16)
          {
            v10 = 2;
            goto LABEL_11;
          }
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
            sub_1006EE23C();
        }
      }
    }
  }
  v10 = 0;
LABEL_11:
  v11 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v31 = v5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Device %{public}@ overriding wifi coex policy", buf, 0xCu);
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  sub_10065FF6C((uint64_t)off_1009778C0, v5, v10);
LABEL_16:

}

void sub_1004007D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  void *v40;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100400868(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  int v8;
  id v9;

  v5 = a2;
  v6 = a3;
  if ((objc_msgSend(*(id *)(a1 + 88), "isEqualToString:", CFSTR("com.teslamotors.TeslaApp")) & 1) != 0
    || (objc_msgSend(*(id *)(a1 + 88), "isEqualToString:", CFSTR("com.teslamotors.enterpriseapp")) & 1) != 0
    || objc_msgSend(v6, "connectionUseCase") == (id)3
    || objc_msgSend(v6, "connectionUseCase") == (id)4)
  {
    goto LABEL_9;
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  if ((sub_100658AD4((uint64_t)off_1009778C0, v5) & 1) != 0 || objc_msgSend(v6, "waitForConnectionPoll"))
  {
LABEL_9:
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    sub_10065A06C((uint64_t)off_1009778C0, v5, 1);
    v7 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 138543362;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Enabling Poll/Null check for device %{public}@", (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    sub_10065A06C((uint64_t)off_1009778C0, v5, 0);
  }

}

void sub_100400A30(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_100400A4C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  int v14;
  void **v15;
  NSStringEncoding v16;
  void **v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  void *v27[2];
  char v28;
  void *__p[2];
  char v30;
  void *v31[2];
  char v32;

  v7 = a3;
  v8 = a4;
  if (objc_msgSend(v8, "connectionUseCase"))
  {
    v9 = objc_msgSend(v8, "connectionUseCase");
    v10 = (uint64_t)v9;
    if ((_DWORD)v9 != 23 && (_DWORD)v9)
      goto LABEL_29;
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if ((objc_msgSend(*(id *)(a1 + 88), "isEqualToString:", CFSTR("com.teslamotors.TeslaApp")) & 1) != 0
    || (objc_msgSend(*(id *)(a1 + 88), "isEqualToString:", CFSTR("com.teslamotors.enterpriseapp")) & 1) != 0
    || objc_msgSend(*(id *)(a1 + 88), "hasPrefix:", CFSTR("com.rivian.ios.consumer")))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    if (sub_100658AD4((uint64_t)off_1009778C0, v7))
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10092DF28);
      sub_100653B18((uint64_t)off_1009778C0, v7, CFSTR("HasTS"));
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10092DF28);
      if ((sub_100659E3C((uint64_t)off_1009778C0, v7) & 1) == 0)
      {
        if (qword_10097AA70 != -1)
          dispatch_once(&qword_10097AA70, &stru_10092DF48);
        v11 = qword_10097AA68;
        sub_100091AE8(v31, "HasTS");
        sub_100091AE8(__p, "Tesla Tagged HasTS UnsetTag");
        sub_10047C59C(60.0, v11, (uint64_t *)v31, (uint64_t *)__p);
        if (v30 < 0)
          operator delete(__p[0]);
        if (v32 < 0)
          operator delete(v31[0]);
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
          sub_1006EE268();
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10092DF28);
        sub_100659ED4((uint64_t)off_1009778C0, v7, 1);
      }
    }
    v10 = 16;
  }
  else
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    if ((sub_100658AD4((uint64_t)off_1009778C0, v7) & 1) != 0)
    {
      v10 = 11;
    }
    else
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10092DF28);
      v25 = off_1009778C0;
      sub_100091AE8(v27, "ANCSAuthorized");
      v26 = sub_10000628C((uint64_t)v25, v7, (uint64_t)v27);
      if (v28 < 0)
        operator delete(v27[0]);
      if (v26)
        v10 = 23;
      else
        v10 = v10;
    }
  }
LABEL_29:
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  sub_10065C02C((uint64_t)off_1009778C0, v7, v10);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  v12 = off_1009778C0;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "useCaseList"));
  sub_10065C0B4((uint64_t)v12, v7, v13);

  sub_1000340DC(a2, (uint64_t)v31);
  v14 = v32;
  v15 = (void **)v31[0];
  v16 = +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding");
  if (v14 >= 0)
    v17 = v31;
  else
    v17 = v15;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v17, v16));
  if (v32 < 0)
    operator delete(v31[0]);
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "useCaseList"));
  if (v19
    && (v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "useCaseList")),
        v21 = objc_msgSend(v20, "count"),
        v20,
        v19,
        v21))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    v22 = off_1009778C0;
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "useCaseList"));
    sub_10065C4D4((uint64_t)v22, v7, v18, v23);
  }
  else
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v10));
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v24, 0));

    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    sub_10065C4D4((uint64_t)off_1009778C0, v7, v18, v23);
  }

}

void sub_100400F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100400FD4(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  _DWORD v7[2];
  __int16 v8;
  id v9;

  v4 = a2;
  v5 = a3;
  if (objc_msgSend(v5, "minRSSILevelForConnection"))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    sub_100659FE4((uint64_t)off_1009778C0, v4, (char)objc_msgSend(v5, "minRSSILevelForConnection"));
    v6 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 67109378;
      v7[1] = (char)objc_msgSend(v5, "minRSSILevelForConnection");
      v8 = 2114;
      v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting minimum RSSI level for connection to %d for device %{public}@ requested in connectOptions", (uint8_t *)v7, 0x12u);
    }
  }

}

void sub_1004010FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10040111C(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  v3 = *(_QWORD *)(a1 + 400);
  if (!v3)
    operator new();
  sub_10034A530(v3, v4);

}

void sub_100401198(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  operator delete();
}

void sub_1004011CC(uint64_t a1, uint64_t a2, void *a3, int a4, int a5, unsigned int a6)
{
  id v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  void *v19;
  NSObject *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  NSObject *v25;
  uint8_t *v26;
  void *v27;
  void *v28;
  NSObject *v29;
  void (***v30)(_QWORD, std::string *, _QWORD, id);
  std::string *v31;
  NSObject *v32;
  std::string *v33;
  int64_t size;
  char v35;
  std::string *v36;
  _BOOL4 v37;
  char *v38;
  std::string *v39;
  char *v40;
  BOOL v41;
  void *v43;
  void *v44;
  NSObject *v45;
  std::string::size_type v46;
  NSObject *v47;
  void *v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  id v52;
  _BYTE v53[22];
  unsigned __int8 v54;
  std::string v55;
  uint8_t buf[16];
  __int128 v57;
  __int128 v58;

  v11 = a3;
  v52 = v11;
  if (*(_BYTE *)(a1 + 44) && (a4 & 1) == 0)
  {
    if (qword_10097AC58 != -1)
      dispatch_once(&qword_10097AC58, &stru_10092DEA8);
    v12 = qword_10097AC50;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 248), "objectForKeyedSubscript:", v11));
    sub_1006C0E84(v12, a2, v11, v13);

  }
  objc_msgSend(*(id *)(a1 + 80), "removeObjectForKey:", v11);
  v14 = *(_QWORD **)(a1 + 320);
  if (v14)
  {
    v15 = a1 + 320;
    do
    {
      v16 = v14[4];
      v17 = v16 >= (unint64_t)v11;
      if (v16 >= (unint64_t)v11)
        v18 = v14;
      else
        v18 = v14 + 1;
      if (v17)
        v15 = (uint64_t)v14;
      v14 = (_QWORD *)*v18;
    }
    while (*v18);
    if (v15 != a1 + 320 && *(_QWORD *)(v15 + 32) <= (unint64_t)v11)
    {
      sub_10040F810(a1 + 312, (unint64_t *)&v52);
      objc_msgSend(*(id *)(a1 + 248), "removeObjectForKey:", v52);
      v11 = v52;
      goto LABEL_111;
    }
  }
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 408), "objectForKey:", v11));

  if (!v19)
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 256), "objectForKey:", v11));
    if (v24)
    {
      v25 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000340DC(a2, (uint64_t)buf);
        v26 = (SBYTE7(v57) & 0x80u) == 0 ? buf : *(uint8_t **)buf;
        LODWORD(v55.__r_.__value_.__l.__data_) = 138543618;
        *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
        WORD2(v55.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v55.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Device \"%{public}@\" for session \"%{public}s\" is already disconnecting, removing it from the pending devices list", (uint8_t *)&v55, 0x16u);
        if (SBYTE7(v57) < 0)
          operator delete(*(void **)buf);
      }
      objc_msgSend(*(id *)(a1 + 256), "removeObjectForKey:", v11);
    }
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 248), "objectForKeyedSubscript:", v11));

    v28 = v27;
    if (!v27)
      goto LABEL_110;
    if (objc_msgSend(v27, "isLatencyCritical"))
    {
      v29 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)&buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Latency Critical Action: Device %{public}@ disconnecting cancel timer", buf, 0xCu);
      }
      sub_10040022C(a1);
    }
    v57 = 0u;
    v58 = 0u;
    *(_OWORD *)buf = 0u;
    sub_100091AE8(&v55, (char *)objc_msgSend(*(id *)(a1 + 88), "UTF8String"));
    sub_10047D578((uint64_t)buf, (__int128 *)&v55, *(_BYTE *)(a1 + 129), v11);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    v50 = a5;
    if (qword_10097AC48 != -1)
      dispatch_once(&qword_10097AC48, &stru_10092DEE8);
    sub_10006544C(qword_10097AC40, (uint64_t)buf);
    v30 = (void (***)(_QWORD, std::string *, _QWORD, id))sub_10005D5A4();
    sub_10050945C(a2, &v55);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v55;
    else
      v31 = (std::string *)v55.__r_.__value_.__r.__words[0];
    (**v30)(v30, v31, 0, v11);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    v32 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(a2, (uint64_t)&v55);
      v33 = (v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v55
          : (std::string *)v55.__r_.__value_.__r.__words[0];
      *(_DWORD *)v53 = 138543618;
      *(_QWORD *)&v53[4] = v11;
      *(_WORD *)&v53[12] = 2082;
      *(_QWORD *)&v53[14] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Disconnecting device \"%{public}@\" for session \"%{public}s\"", v53, 0x16u);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
    }
    objc_msgSend(*(id *)(a1 + 248), "removeObjectForKey:", v11);
    sub_1000340DC(a2, (uint64_t)&v55);
    v51 = a6;
    size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    v35 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v36 = &v55;
    }
    else
    {
      size = v55.__r_.__value_.__l.__size_;
      v36 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    if (size >= 20)
    {
      v38 = (char *)v36 + size;
      v39 = v36;
      while (1)
      {
        v40 = (char *)memchr(v39, 99, size - 19);
        if (!v40)
        {
LABEL_77:
          v37 = 0;
          goto LABEL_78;
        }
        v41 = *(_QWORD *)v40 == 0x6C7070612E6D6F63 && *((_QWORD *)v40 + 1) == 0x6F7465756C622E65;
        if (v41 && *((_DWORD *)v40 + 4) == 1684567151)
          break;
        v39 = (std::string *)(v40 + 1);
        size = v38 - (char *)v39;
        if (v38 - (char *)v39 < 20)
          goto LABEL_77;
      }
      v37 = 0;
      if (v40 != v38 && v40 - (char *)v36 != -1)
      {
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10092DF28);
        sub_1006594CC((uint64_t)off_1009778C0, v11, (uint64_t)v53);
        v49 = *(_QWORD *)&v53[8];
        if ((v54 & 0x80u) == 0)
          v49 = v54;
        v37 = v49 != 0;
        if ((char)v54 < 0)
          operator delete(*(void **)v53);
        v35 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
    }
    else
    {
      v37 = 0;
    }
LABEL_78:
    if (v35 < 0)
    {
      operator delete(v55.__r_.__value_.__l.__data_);
      if (!v37)
      {
LABEL_85:
        if (objc_msgSend(v28, "requiresLowLatency"))
        {
          if (qword_1009778A8 != -1)
            dispatch_once(&qword_1009778A8, &stru_10092DF08);
          v44 = off_1009778A0;
          sub_100030BCC(&v55, v11);
          sub_100623F24((uint64_t)v44, (const unsigned __int8 *)&v55);
        }
        v45 = qword_1009998C8;
        if (os_log_type_enabled((os_log_t)qword_1009998C8, OS_LOG_TYPE_DEFAULT))
        {
          v46 = *(_QWORD *)(a1 + 88);
          LODWORD(v55.__r_.__value_.__l.__data_) = 138543618;
          *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
          WORD2(v55.__r_.__value_.__r.__words[1]) = 2114;
          *(std::string::size_type *)((char *)&v55.__r_.__value_.__r.__words[1] + 6) = v46;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "App disconnecting - {cbuuid: %{public}@, bundle: %{public}@}", (uint8_t *)&v55, 0x16u);
        }
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_10092DE88);
        sub_1002E86F0((uint64_t)off_100978168, a2, a1, v11, v51, 0);
        if (a4)
        {
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
            sub_1006EE294();
          if (v50)
          {
            v47 = qword_100999898;
            if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(v55.__r_.__value_.__l.__data_) = 138543362;
              *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
              _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Disconnecting Do Not Autoconnect device \"%{public}@\" if with builtInServices", (uint8_t *)&v55, 0xCu);
            }
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10092DF28);
            sub_10065D964((uint64_t)off_1009778C0, v11);
          }
          if (qword_1009778A8 != -1)
            dispatch_once(&qword_1009778A8, &stru_10092DF08);
          v48 = off_1009778A0;
          sub_100030BCC(&v55, v11);
          sub_100622358((uint64_t)v48, (unsigned __int8 *)&v55, 2u);
        }
        else
        {
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_10092DE88);
          sub_1002DD240((uint64_t)off_100978168);
        }

        if (SHIBYTE(v57) < 0)
          operator delete(*(void **)&buf[8]);
LABEL_110:
        objc_msgSend(*(id *)(a1 + 336), "removeObject:", v11);

        goto LABEL_111;
      }
    }
    else if (!v37)
    {
      goto LABEL_85;
    }
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10092DF08);
    v43 = off_1009778A0;
    sub_100030BCC(&v55, v11);
    sub_100623F24((uint64_t)v43, (const unsigned __int8 *)&v55);
    goto LABEL_85;
  }
  v20 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Removing delayed connection to device %{public}@", buf, 0xCu);
  }
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_10092DE88);
  sub_1002E86F0((uint64_t)off_100978168, a2, a1, v11, 0, 0);
  v21 = *(_QWORD **)(a1 + 416);
  if (v21 != (_QWORD *)(a1 + 424))
  {
    while (objc_msgSend(v11, "compare:", v21[4]))
    {
      v22 = (_QWORD *)v21[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v21[2];
          v41 = *v23 == (_QWORD)v21;
          v21 = v23;
        }
        while (!v41);
      }
      v21 = v23;
      if (v23 == (_QWORD *)(a1 + 424))
        goto LABEL_66;
    }
    sub_10040F4B4(a1 + 416, v21 + 4);
    v11 = v52;
  }
LABEL_66:
  objc_msgSend(*(id *)(a1 + 408), "removeObjectForKey:", v11);
  sub_1003FD4C0(a1);
LABEL_111:

}

void sub_100401B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a22 < 0)
    operator delete(__p);
  sub_1002E4420((uint64_t)&a24);

  _Unwind_Resume(a1);
}

uint64_t sub_100401BB8(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD *v5;
  id v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  void *v26;
  void *__p;
  char *v28;
  char *v29;
  __int128 v30;
  int v31;

  v3 = a2;
  v4 = v3;
  if (a1[36])
  {
    v26 = v3;
    __p = 0;
    v28 = 0;
    v29 = 0;
    v5 = (_QWORD *)a1[34];
    if (v5 != a1 + 35)
    {
      do
      {
        v30 = *((_OWORD *)v5 + 2);
        v31 = *((_DWORD *)v5 + 12);
        v6 = (id)v5[7];
        v7 = v28;
        if (v28 >= v29)
        {
          v9 = 0xCCCCCCCCCCCCCCCDLL * ((v28 - (_BYTE *)__p) >> 2);
          v10 = v9 + 1;
          if (v9 + 1 > 0xCCCCCCCCCCCCCCCLL)
            abort();
          if (0x999999999999999ALL * ((v29 - (_BYTE *)__p) >> 2) > v10)
            v10 = 0x999999999999999ALL * ((v29 - (_BYTE *)__p) >> 2);
          if (0xCCCCCCCCCCCCCCCDLL * ((v29 - (_BYTE *)__p) >> 2) >= 0x666666666666666)
            v11 = 0xCCCCCCCCCCCCCCCLL;
          else
            v11 = v10;
          if (v11)
            v12 = (char *)sub_1000B58EC((uint64_t)&v29, v11);
          else
            v12 = 0;
          v13 = &v12[4 * ((v28 - (_BYTE *)__p) >> 2)];
          *(_OWORD *)v13 = v30;
          *((_DWORD *)v13 + 4) = v31;
          v15 = (char *)__p;
          v14 = v28;
          v16 = &v12[20 * v9];
          if (v28 != __p)
          {
            do
            {
              v17 = *(_OWORD *)(v14 - 20);
              *((_DWORD *)v16 - 1) = *((_DWORD *)v14 - 1);
              *(_OWORD *)(v16 - 20) = v17;
              v16 -= 20;
              v14 -= 20;
            }
            while (v14 != v15);
            v14 = (char *)__p;
          }
          v8 = v13 + 20;
          __p = v16;
          v28 = v13 + 20;
          v29 = &v12[20 * v11];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_OWORD *)v28 = v30;
          *((_DWORD *)v7 + 4) = v31;
          v8 = v7 + 20;
        }
        v28 = v8;

        v18 = (_QWORD *)v5[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v5[2];
            v20 = *v19 == (_QWORD)v5;
            v5 = v19;
          }
          while (!v20);
        }
        v5 = v19;
      }
      while (v19 != a1 + 35);
    }
    v21 = a1[15];
    if (qword_1009778F8 != -1)
      dispatch_once(&qword_1009778F8, &stru_10092DF88);
    v4 = v26;
    if (v21)
    {
      v22 = *(_BYTE *)(v21 + 39) != 0;
      v23 = *(unsigned int *)(v21 + 52);
    }
    else
    {
      v22 = 0;
      v23 = 0;
    }
    v24 = sub_1005E0AD8(qword_1009778F0, v26, (__int128 **)&__p, v22, v23, 1);
    if (__p)
    {
      v28 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
    v24 = 0;
  }

  return v24;
}

void sub_100401E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100401E7C(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 **a4, char a5)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  _BYTE *v11;
  void *v12;
  void *v13;
  int v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  NSObject *v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  NSObject *v32;
  void *v33;
  int v34;
  int v35;
  NSObject *v36;
  void *v37;
  void *v38;
  NSObject *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned int v42;
  __int128 v43;
  NSObject *v44;
  _BYTE *v45;
  uint64_t v46;
  _OWORD *v47;
  void *v48;
  NSObject *v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  void *v54;
  void *v55;
  NSObject *v56;
  id v57;
  id v58;
  void *v60;
  void *v61;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void *__p[2];
  char v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _QWORD v77[4];
  id v78;
  uint8_t v79[128];
  uint8_t v80[4];
  _BYTE *v81;
  __int128 v82;
  int v83;
  _BYTE v84[128];
  uint8_t v85[128];
  _BYTE buf[12];
  char v87;

  v58 = a3;
  objc_msgSend(*(id *)(a1 + 264), "removeAllObjects");
  sub_100067F18(a1 + 272, *(_QWORD **)(a1 + 280));
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  objc_msgSend(*(id *)(a1 + 296), "removeAllObjects");
  *(_BYTE *)(a1 + 305) = a5;
  v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](NSMutableString, "string"));
  v7 = *a4;
  v8 = a4[1];
  if (*a4 == v8)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    do
    {
      sub_10006887C((uint64_t)v7, buf);
      if (v87 >= 0)
        v11 = buf;
      else
        v11 = *(_BYTE **)buf;
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11));
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ "), v12));
      objc_msgSend(v61, "appendString:", v13);

      if (v87 < 0)
        operator delete(*(void **)buf);
      v15 = *v7;
      v7 += 20;
      v14 = v15;
      if (v15 == 16)
        ++v9;
      if (v14 == 2)
        ++v10;
    }
    while (v7 != v8);
  }
  objc_msgSend(v60, "setObject:forKeyedSubscript:", v61, CFSTR("ServiceUUID"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v10));
  objc_msgSend(v60, "setObject:forKeyedSubscript:", v16, CFSTR("NumberOf16bitUUID"));

  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v9));
  objc_msgSend(v60, "setObject:forKeyedSubscript:", v17, CFSTR("NumberOf128bitUUID"));

  objc_msgSend(v60, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 88), CFSTR("BundleID"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a4[1] != *a4));
  objc_msgSend(v60, "setObject:forKeyedSubscript:", v18, CFSTR("registerForSpecificGATTServices"));

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(v58, "count") != 0));
  objc_msgSend(v60, "setObject:forKeyedSubscript:", v19, CFSTR("registerForSpecificDevices"));

  v20 = sub_1000419F4();
  v77[0] = _NSConcreteStackBlock;
  v77[1] = 3221225472;
  v77[2] = sub_100402A20;
  v77[3] = &unk_1009172A0;
  v57 = v60;
  v78 = v57;
  sub_100041A34(v20, v77);
  if (!*(_BYTE *)(a1 + 305))
  {
    v71 = 0uLL;
    v72 = 0uLL;
    v69 = 0uLL;
    v70 = 0uLL;
    v22 = v58;
    v28 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v69, v84, 16);
    if (!v28)
      goto LABEL_58;
    v29 = *(_QWORD *)v70;
    while (1)
    {
      v30 = 0;
      do
      {
        if (*(_QWORD *)v70 != v29)
          objc_enumerationMutation(v22);
        v31 = *(void **)(*((_QWORD *)&v69 + 1) + 8 * (_QWORD)v30);
        v32 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v31;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Parsing %{public}@", buf, 0xCu);
        }
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10092DF28);
        v33 = off_1009778C0;
        sub_100091AE8(__p, "IsAppleWatch");
        v34 = sub_10000628C((uint64_t)v33, v31, (uint64_t)__p);
        v35 = v34;
        if (v68 < 0)
        {
          operator delete(__p[0]);
          if (v35)
          {
LABEL_45:
            v36 = qword_100999898;
            if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Not adding watch to connection options", buf, 2u);
            }
            goto LABEL_56;
          }
        }
        else if (v34)
        {
          goto LABEL_45;
        }
        v37 = *(void **)(a1 + 264);
        v38 = (void *)objc_claimAutoreleasedReturnValue(+[ConnectOptions alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:](ConnectOptions, "alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:", 1, 0, 0, 0, 0));
        objc_msgSend(v37, "setObject:forKey:", v38, v31);

        if (qword_10097AC28 != -1)
          dispatch_once(&qword_10097AC28, &stru_10092DF68);
        if (sub_10000671C(qword_10097AC20, v31))
        {
          v39 = qword_100999898;
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v31;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "%{public}@ is already connected ! firing event now", buf, 0xCu);
          }
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_10092DE88);
          sub_1002EAD70((uint64_t)off_100978168, a2, a1, v31, 1u);
        }
LABEL_56:
        v30 = (char *)v30 + 1;
      }
      while (v28 != v30);
      v28 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v69, v84, 16);
      if (!v28)
        goto LABEL_58;
    }
  }
  v75 = 0uLL;
  v76 = 0uLL;
  v73 = 0uLL;
  v74 = 0uLL;
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_10092DF88);
  v21 = sub_1005E12B4(qword_1009778F0);
  v22 = (id)objc_claimAutoreleasedReturnValue(v21);
  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v73, v85, 16);
  if (v23)
  {
    v24 = *(_QWORD *)v74;
    do
    {
      v25 = 0;
      do
      {
        if (*(_QWORD *)v74 != v24)
          objc_enumerationMutation(v22);
        v26 = *(void **)(*((_QWORD *)&v73 + 1) + 8 * (_QWORD)v25);
        if (qword_10097AC28 != -1)
          dispatch_once(&qword_10097AC28, &stru_10092DF68);
        if (sub_10000671C(qword_10097AC20, v26))
        {
          v27 = qword_100999898;
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v26;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "registerForConnectionEventsWithOptionsforApp - notifyConnectionEventDidOccur - Device:%{public}@", buf, 0xCu);
          }
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_10092DE88);
          sub_1002EAD70((uint64_t)off_100978168, a2, a1, v26, 1u);
        }
        v25 = (char *)v25 + 1;
      }
      while (v23 != v25);
      v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v73, v85, 16);
    }
    while (v23);
  }
LABEL_58:

  v40 = *a4;
  v41 = a4[1];
  if (*a4 != v41)
  {
    v42 = 0;
    while (1)
    {
      v43 = *(_OWORD *)v40;
      v83 = *((_DWORD *)v40 + 4);
      v82 = v43;
      v44 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        sub_10006887C((uint64_t)&v82, buf);
        v45 = buf;
        if (v87 < 0)
          v45 = *(_BYTE **)buf;
        *(_DWORD *)v80 = 136446210;
        v81 = v45;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Parsing %{public}s", v80, 0xCu);
        if (v87 < 0)
          operator delete(*(void **)buf);
      }
      if (v42 > 3)
        break;
      v46 = objc_claimAutoreleasedReturnValue(+[ConnectOptions alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:](ConnectOptions, "alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:", 1, 0, 0, 0, 0));
      *(_QWORD *)buf = &v82;
      v47 = sub_10040F8B4((uint64_t **)(a1 + 272), (unsigned __int8 *)&v82, (uint64_t)&unk_100740F58, (_OWORD **)buf);
      v48 = (void *)*((_QWORD *)v47 + 7);
      *((_QWORD *)v47 + 7) = v46;

      ++v42;
      v40 += 20;
      if (v40 == v41)
        goto LABEL_70;
    }
    v49 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 4;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Exceeded the number of allowed services (%d)", buf, 8u);
    }
  }
LABEL_70:
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_10092DF88);
  v50 = sub_1005E1128(qword_1009778F0, a4);
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v51 = (id)objc_claimAutoreleasedReturnValue(v50);
  v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v63, v79, 16);
  if (v52)
  {
    v53 = *(_QWORD *)v64;
    do
    {
      v54 = 0;
      do
      {
        if (*(_QWORD *)v64 != v53)
          objc_enumerationMutation(v51);
        v55 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * (_QWORD)v54);
        if (qword_10097AC28 != -1)
          dispatch_once(&qword_10097AC28, &stru_10092DF68);
        if (sub_10000671C(qword_10097AC20, v55) && sub_100401BB8((_QWORD *)a1, v55))
        {
          v56 = qword_100999898;
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v55;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "%{public}@ is already connected and has an existing service, firing event now", buf, 0xCu);
          }
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_10092DE88);
          sub_1002EAD70((uint64_t)off_100978168, a2, a1, v55, 1u);
        }
        v54 = (char *)v54 + 1;
      }
      while (v52 != v54);
      v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v63, v79, 16);
    }
    while (v52);
  }

}

void sub_1004028EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  void *v57;

  _Unwind_Resume(a1);
}

uint64_t sub_100402A20(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100065478();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 352))(v2, *(_QWORD *)(a1 + 32));
}

uint64_t sub_100402A4C(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v11;
  unsigned __int8 v12[16];
  unsigned __int8 v13[16];

  v6 = a3;
  if (qword_10097AC28 != -1)
    dispatch_once(&qword_10097AC28, &stru_10092DF68);
  v11 = 0;
  v7 = qword_10097AC20;
  sub_100030BCC(v13, v6);
  if (sub_100484478(v7, v13, &v11) || v11 != 1)
  {
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10092DF08);
    v9 = off_1009778A0;
    sub_100030BCC(v12, v6);
    v8 = sub_100623AE8((uint64_t)v9, a2, v12, a4);
  }
  else
  {
    v8 = 11;
  }

  return v8;
}

void sub_100402B74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100402B90(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  __int128 v10;
  uint64_t v11;
  _OWORD v13[2];
  int v14;

  v8 = a3;
  v9 = a5;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  v10 = *(_OWORD *)(a4 + 16);
  v13[0] = *(_OWORD *)a4;
  v13[1] = v10;
  v14 = *(_DWORD *)(a4 + 32);
  v11 = sub_100624E3C((uint64_t)off_1009778A0, a2, v8, (unsigned __int8 *)v13, v9);

  return v11;
}

void sub_100402C38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100402C4C(uint64_t a1, uint64_t a2, int a3, void *a4, int a5, uint64_t a6)
{
  id v10;
  uint64_t v11;

  v10 = a4;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  v11 = sub_1006259E4((uint64_t)off_1009778A0, a2, a3, v10, a5, a6);

  return v11;
}

void sub_100402CE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100402CF0(uint64_t a1, unint64_t a2, int a3, void *a4, uint64_t a5, __int128 *a6, uint64_t a7, void *a8)
{
  id v14;
  id v15;
  __int128 v16;
  uint64_t v17;
  __int128 v19[2];

  v14 = a4;
  v15 = a8;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  v16 = a6[1];
  v19[0] = *a6;
  v19[1] = v16;
  v17 = sub_100625EFC((uint64_t)off_1009778A0, a2, a3, v14, a5, v19, a7, v15);

  return v17;
}

void sub_100402DB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100402DCC()
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  return sub_100626754();
}

uint64_t sub_100402E1C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;

  v4 = a3;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  v5 = sub_1006268F8(off_1009778A0, a2, (uint64_t)v4);

  return v5;
}

void sub_100402E88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100402E98(uint64_t a1, unint64_t a2, void *a3, __int128 *a4)
{
  id v6;
  __int128 v7;
  uint64_t v8;
  __int128 v10;
  _OWORD v11[2];

  v6 = a3;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  v7 = a4[1];
  v10 = *a4;
  v11[0] = v7;
  *(_OWORD *)((char *)v11 + 10) = *(__int128 *)((char *)a4 + 26);
  v8 = sub_100626A78(off_1009778A0, a2, (uint64_t)v6, &v10);

  return v8;
}

void sub_100402F2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100402F3C(uint64_t a1, unint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;

  v4 = a3;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  v5 = sub_100626D50(off_1009778A0, a2, (uint64_t)v4);

  return v5;
}

void sub_100402FA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100402FB8(uint64_t a1, unint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;

  v4 = a3;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  v5 = sub_100626E94(off_1009778A0, a2, (uint64_t)v4);

  return v5;
}

void sub_100403024(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100403034(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v10[3];
  int v11;

  v6 = a3;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  v7 = *(_OWORD *)(a4 + 16);
  v10[0] = *(_OWORD *)a4;
  v10[1] = v7;
  v10[2] = *(_OWORD *)(a4 + 32);
  v11 = *(_DWORD *)(a4 + 48);
  v8 = sub_100626FD8(off_1009778A0, a2, (uint64_t)v6, (unsigned __int16 *)v10);

  return v8;
}

void sub_1004030D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1004030E0(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  uint64_t v7;

  v6 = a3;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  v7 = sub_10062721C(off_1009778A0, a2, v6, a4);

  return v7;
}

void sub_10040315C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10040316C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8;
  uint64_t v9;

  v8 = a3;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  v9 = sub_1006274F4(off_1009778A0, a2, v8, a4, a5);

  return v9;
}

void sub_1004031F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100403200(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  uint64_t v7;
  __int128 v9;
  uint64_t v10;

  v6 = a3;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  v9 = *(_OWORD *)a4;
  v10 = *(_QWORD *)(a4 + 16);
  v7 = sub_1006277D4(off_1009778A0, a2, v6, &v9);

  return v7;
}

void sub_100403294(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1004032A4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  return sub_100627ABC((uint64_t)off_1009778A0, a2, a3);
}

uint64_t sub_1004032FC(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10;
  uint64_t v11;

  v10 = a3;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  v11 = sub_100627C20(off_1009778A0, a2, (uint64_t)v10, a4, a5, a6);

  return v11;
}

void sub_100403390(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1004033A0(uint64_t a1, unint64_t a2)
{
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  return sub_100627E28((uint64_t)off_1009778A0, a2);
}

uint64_t sub_1004033F0(uint64_t a1, unint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;

  v4 = a3;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  v5 = sub_100627F7C(off_1009778A0, a2, (uint64_t)v4);

  return v5;
}

void sub_10040345C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10040346C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  uint64_t v7;

  v6 = a3;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  v7 = sub_100628430(off_1009778A0, a2, v6, a4);

  return v7;
}

void sub_1004034E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1004034F8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 344), "count") || objc_msgSend(*(id *)(a1 + 336), "count") != 0;
}

void sub_100403538(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, unsigned int a5, uint64_t a6, void *a7)
{
  id v13;
  id v14;
  _BYTE *v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  __int128 *v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  char *v30;
  char *v31;
  char *v32;
  __int128 v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  _BOOL4 v41;
  int v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  xpc_object_t v46;
  int v47;
  int v48;
  BOOL v49;
  xpc_object_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  void *v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  uint64_t *v59;
  uint64_t v60;
  unsigned int v61;
  id v62;
  NSObject *log;
  int v64;
  char v65;
  uint64_t v66;
  void *__p[2];
  uint64_t v68;
  uint8_t __dst[16];
  uint64_t v70;
  uint8_t buf[24];
  id v72;

  v13 = a2;
  v14 = a7;
  v15 = *(_BYTE **)(a1 + 120);
  if (v15)
  {
    v16 = *((_DWORD *)v15 - 16);
    v17 = v15[26] != 0;
    LOBYTE(v66) = v15[29] != 0;
    HIDWORD(v66) = v15[27] != 0;
    v65 = v15[30] != 0;
    if (v13)
      goto LABEL_3;
LABEL_40:
    v64 = v17;
    if (*(_BYTE *)(*(_QWORD *)(a3 + 8) + 304))
      goto LABEL_41;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      sub_1006EE2F4();
    goto LABEL_63;
  }
  v66 = 0;
  v17 = 0;
  v16 = 0;
  v65 = 0;
  if (!v13)
    goto LABEL_40;
LABEL_3:
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  if ((sub_10000AEE4((uint64_t)off_1009778C0, v13, *(void **)(a1 + 88), *(void **)(a1 + 104)) & 1) != 0)
  {
    if ((sub_100005134(a1, v13) & 1) != 0)
    {
      if ((sub_10006AA94(a1, (uint64_t *)(*(_QWORD *)(a3 + 8) + 64)) & 1) != 0)
      {
        if ((sub_10006AA94(a1, a4) & 1) != 0)
        {
          v64 = v17;
          v59 = a4;
          v60 = a6;
          v61 = a5;
          v62 = v14;
          v18 = *(_QWORD *)(a3 + 8);
          memset(buf, 0, sizeof(buf));
          v19 = *(_QWORD **)(v18 + 112);
          v20 = (_QWORD *)(v18 + 120);
          if (v19 != (_QWORD *)(v18 + 120))
          {
            v21 = 0;
            do
            {
              v22 = (__int128 *)(v19 + 4);
              if ((unint64_t)v21 >= *(_QWORD *)&buf[16])
              {
                v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v21[-*(_QWORD *)buf] >> 2);
                v25 = v24 + 1;
                if (v24 + 1 > 0xCCCCCCCCCCCCCCCLL)
                  abort();
                if (0x999999999999999ALL * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 2) > v25)
                  v25 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 2);
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 2) >= 0x666666666666666)
                  v26 = 0xCCCCCCCCCCCCCCCLL;
                else
                  v26 = v25;
                if (v26)
                  v27 = (char *)sub_1000B58EC((uint64_t)&buf[16], v26);
                else
                  v27 = 0;
                v28 = &v27[20 * v24];
                v29 = *v22;
                *((_DWORD *)v28 + 4) = *((_DWORD *)v19 + 12);
                *(_OWORD *)v28 = v29;
                v31 = *(char **)buf;
                v30 = *(char **)&buf[8];
                v32 = v28;
                if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
                {
                  do
                  {
                    v33 = *(_OWORD *)(v30 - 20);
                    *((_DWORD *)v32 - 1) = *((_DWORD *)v30 - 1);
                    *(_OWORD *)(v32 - 20) = v33;
                    v32 -= 20;
                    v30 -= 20;
                  }
                  while (v30 != v31);
                  v30 = *(char **)buf;
                }
                v21 = v28 + 20;
                *(_QWORD *)buf = v32;
                *(_QWORD *)&buf[8] = v28 + 20;
                *(_QWORD *)&buf[16] = &v27[20 * v26];
                if (v30)
                  operator delete(v30);
              }
              else
              {
                v23 = *v22;
                *((_DWORD *)v21 + 4) = *((_DWORD *)v19 + 12);
                *(_OWORD *)v21 = v23;
                v21 += 20;
              }
              *(_QWORD *)&buf[8] = v21;
              v34 = (_QWORD *)v19[1];
              if (v34)
              {
                do
                {
                  v35 = v34;
                  v34 = (_QWORD *)*v34;
                }
                while (v34);
              }
              else
              {
                do
                {
                  v35 = (_QWORD *)v19[2];
                  v49 = *v35 == (_QWORD)v19;
                  v19 = v35;
                }
                while (!v49);
              }
              v19 = v35;
            }
            while (v35 != v20);
          }
          v14 = v62;
          a5 = v61;
          a4 = v59;
          a6 = v60;
          if ((sub_10006AA94(a1, (uint64_t *)buf) & 1) == 0)
          {
            if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
              sub_1006EE40C();
            goto LABEL_86;
          }
          v36 = sub_100403EBC(*(_QWORD *)(a3 + 8));
          v37 = sub_100403D40(a1, v36);
          v38 = *(_QWORD *)(a3 + 8);
          if ((v37 & 1) == 0)
          {
            if ((*(_BYTE *)(v38 + 168) & 4) == 0)
            {
              if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
                sub_1006EE3AC();
              goto LABEL_86;
            }
            log = qword_100999898;
            if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)__dst = 138412290;
              *(_QWORD *)&__dst[4] = v13;
              _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_INFO, "Session can access device %@ with iBeacon", __dst, 0xCu);
              v38 = *(_QWORD *)(a3 + 8);
            }
          }
          v39 = sub_100403F10(*(unsigned __int8 **)(v38 + 64), *(unsigned __int8 **)(v38 + 72), &xmmword_10073B47C);
          v40 = *(_QWORD *)(a3 + 8);
          if (!*(_BYTE *)(v40 + 12) || *(unsigned __int8 **)(v38 + 72) == v39)
            goto LABEL_87;
          if (*(char *)(v40 + 39) < 0)
          {
            sub_10003430C(__dst, *(void **)(v40 + 16), *(_QWORD *)(v40 + 24));
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)(v40 + 16);
            v70 = *(_QWORD *)(v40 + 32);
          }
          if (sub_100403FAC(__dst, "Powerbeats HR"))
          {
            v56 = 1;
          }
          else
          {
            v57 = *(_QWORD *)(a3 + 8);
            if (*(char *)(v57 + 39) < 0)
            {
              sub_10003430C(__p, *(void **)(v57 + 16), *(_QWORD *)(v57 + 24));
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)(v57 + 16);
              v68 = *(_QWORD *)(v57 + 32);
            }
            v56 = sub_100403FAC(__p, "Generic Tracker");
            if (SHIBYTE(v68) < 0)
              operator delete(__p[0]);
          }
          if (SHIBYTE(v70) < 0)
            operator delete(*(void **)__dst);
          if (!v56)
          {
LABEL_87:
            v58 = 1;
LABEL_88:
            if (*(_QWORD *)buf)
            {
              *(_QWORD *)&buf[8] = *(_QWORD *)buf;
              operator delete(*(void **)buf);
            }
            if ((v58 & 1) == 0)
              goto LABEL_63;
LABEL_41:
            if (v15)
            {
              v41 = v15[24] != 0;
              v42 = *((_DWORD *)v15 - 16);
            }
            else
            {
              v41 = 0;
              v42 = 0;
            }
            v46 = sub_100013ABC(v13, v41, v42);
            if (v16 == 2)
            {
              v47 = 1;
            }
            else
            {
              v48 = HIWORD(*(_DWORD *)(a1 + 384));
              v49 = v48 == 1 || v48 == 10;
              v47 = v49;
            }
            v50 = sub_10001CD58(v13, *(void **)(a1 + 88), a3, (uint64_t)a4, a6, v47, v64, SHIDWORD(v66), v66, v65, v16 > 0);
            xpc_dictionary_set_value(v46, "kCBMsgArgAdvertisementData", v50);
            xpc_release(v50);
            v52 = *(_QWORD *)(a3 + 8);
            v51 = a3 + 8;
            xpc_dictionary_set_int64(v46, "kCBMsgArgRssi", *(char *)(v52 + 216));
            xpc_dictionary_set_int64(v46, "kCBMsgArgAdvertisingMoreAvailable", a5);
            v53 = qword_100999898;
            if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEBUG))
              sub_1006EE320(a5, v51, v53);
            xpc_dictionary_set_int64(v46, "kCBMsgArgAdvertisingIsFromADVBuff", *(unsigned __int8 *)(*(_QWORD *)v51 + 304));
            if (v16 >= 1)
            {
              xpc_dictionary_set_uint64(v46, "kCBScanOptionFilterIdentifier", (uint64_t)objc_msgSend(v14, "longLongValue"));
              xpc_dictionary_set_string(v46, "kCBScanOptionFilterIdentifierString", (const char *)objc_msgSend(objc_retainAutorelease(v14), "UTF8String"));
            }
            v54 = sub_100070698(v46);
            v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
            sub_10005DC70((_QWORD *)a1, 84, v55);

            xpc_release(v46);
            goto LABEL_63;
          }
LABEL_86:
          v58 = 0;
          goto LABEL_88;
        }
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
          sub_1006EE46C();
      }
      else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      {
        sub_1006EE4CC();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
    {
      sub_1006EE52C();
    }
  }
  else
  {
    v43 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
    {
      v44 = *(_QWORD *)(a1 + 88);
      v45 = *(_QWORD *)(a1 + 104);
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = v44;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v45;
      *(_WORD *)&buf[22] = 2112;
      v72 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
    }
  }
LABEL_63:

}

void sub_100403CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29)
{
  void *v29;

  if (a26 < 0)
    operator delete(__p);
  if (a28)
    operator delete(a28);

  _Unwind_Resume(a1);
}

uint64_t sub_100403D40(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  int v13;

  if ((*(_BYTE *)(a1 + 506)
     || _os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit") && *(_QWORD *)(a1 + 496))
    && !_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit")
    || !*(_QWORD *)(a1 + 232))
  {
    return 1;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", a2));
  if ((_DWORD)a2)
    v5 = (uint64_t)objc_msgSend(*(id *)(a1 + 232), "containsObject:", v4);
  else
    v5 = 1;
  v6 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
  {
    v8 = *(_QWORD *)(a1 + 232);
    v9[0] = 67109634;
    v9[1] = a2;
    v10 = 2112;
    v11 = v8;
    v12 = 1024;
    v13 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "canSessionScanForMFGRData %d %@ there:%d", (uint8_t *)v9, 0x18u);
  }

  return v5;
}

void sub_100403EA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100403EBC(uint64_t a1)
{
  uint64_t v1;
  __int16 v2;

  v1 = a1 + 48;
  if ((unint64_t)sub_10003F8C4(a1 + 48) < 2)
  {
    return 0;
  }
  else
  {
    v2 = *(unsigned __int8 *)sub_10003EB18(v1);
    return (unsigned __int16)(v2 | (*(unsigned __int8 *)(sub_10003EB18(v1) + 1) << 8));
  }
}

unsigned __int8 *sub_100403F10(unsigned __int8 *a1, unsigned __int8 *a2, __int128 *a3)
{
  unsigned __int8 *v3;
  __int128 v7;
  int v8;

  v3 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      v7 = *a3;
      v8 = *((_DWORD *)a3 + 4);
      if (sub_100072DF0(v3, (unsigned __int8 *)&v7))
        break;
      v3 += 20;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

BOOL sub_100403FAC(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      abort();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void sub_100404030(_QWORD *a1, void *a2, int a3)
{
  id v5;
  NSObject *v6;
  xpc_object_t v7;
  _BOOL4 v8;
  uint64_t v9;
  void *v10;
  _BYTE v11[18];

  v5 = a2;
  v6 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v11 = 138543618;
    *(_QWORD *)&v11[4] = v5;
    *(_WORD *)&v11[12] = 1024;
    *(_DWORD *)&v11[14] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Device %{public}@ CL Ready with result %d", v11, 0x12u);
  }
  v7 = xpc_dictionary_create(0, 0, 0);
  *(_QWORD *)v11 = 0;
  *(_QWORD *)&v11[8] = 0;
  objc_msgSend(v5, "getUUIDBytes:", v11);
  xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", v11);
  xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a3);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  v8 = sub_1000060F0((uint64_t)off_1009778C0, v5);
  xpc_dictionary_set_int64(v7, "kCBMsgArgVisibleInSettings", !v8);
  v9 = sub_100070698(v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  sub_10005DC70(a1, 86, v10);

  xpc_release(v7);
}

void sub_1004041B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1004041E0(uint64_t a1, void *a2, int a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _BOOL4 v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  unsigned int v16;
  int64_t v17;
  void *v18;
  char v19;
  _BOOL4 v20;
  uint64_t v21;
  void *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  NSObject *v26;
  const char *v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  double Current;
  id v37;
  void *v38;
  _BOOL4 v40;
  NSObject *v41;
  uint64_t v42;
  id v43;
  uint64_t *v44;
  void *v45;
  id v46;
  uint64_t v47;
  void *v48;
  unsigned int v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  _BOOL4 v59;
  uint64_t v60;
  void *v61;
  void *v62;
  _BOOL4 v63;
  xpc_object_t xdict;
  unsigned __int16 v65;
  int v66;
  uint64_t v67;
  _QWORD v68[2];
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  void *v72;
  uint8_t v73[2];
  uint8_t buf[32];
  __int128 v75;
  uint64_t v76;
  _QWORD uuid[2];

  v5 = a2;
  v72 = v5;
  v6 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Device %{public}@ connected with result %d", buf, 0x12u);
  }
  if (v5)
  {
    v7 = *(_QWORD *)(a1 + 120);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    if ((sub_10000AEE4((uint64_t)off_1009778C0, v5, *(void **)(a1 + 88), *(void **)(a1 + 104)) & 1) != 0)
    {
      if ((sub_100005134(a1, v5) & 1) != 0)
      {
        xdict = xpc_dictionary_create(0, 0, 0);
        if (qword_1009778A8 != -1)
          dispatch_once(&qword_1009778A8, &stru_10092DF08);
        v8 = off_1009778A0;
        sub_100030BCC(buf, v5);
        v63 = sub_100069F08((uint64_t)v8, buf);
        uuid[0] = 0;
        uuid[1] = 0;
        objc_msgSend(v5, "getUUIDBytes:", uuid);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 248), "objectForKeyedSubscript:", v5));
        xpc_dictionary_set_uuid(xdict, "kCBMsgArgDeviceUUID", (const unsigned __int8 *)uuid);
        xpc_dictionary_set_int64(xdict, "kCBMsgArgResult", a3);
        if (!a3)
        {
          v61 = v9;
          if (v7)
            v10 = *(_BYTE *)(v7 + 24) != 0;
          else
            v10 = 0;
          if (qword_1009778A8 != -1)
            dispatch_once(&qword_1009778A8, &stru_10092DF08);
          v14 = off_1009778A0;
          sub_100030BCC(buf, v5);
          v15 = sub_100069F78((uint64_t)v14, buf);
          xpc_dictionary_set_int64(xdict, "kCBMsgArgConnectionRole", v15);
          if (qword_10097AC18 != -1)
            dispatch_once(&qword_10097AC18, &stru_10092DFE8);
          v16 = sub_100006180(qword_10097AC10, v5);
          xpc_dictionary_set_int64(xdict, "kCBMsgArgATTMTU", v16);
          if (v63)
            v17 = 2;
          else
            v17 = 1;
          xpc_dictionary_set_int64(xdict, "kCBMsgArgConnectionTransport", v17);
          if (v10)
          {
            if (qword_1009778A8 != -1)
              dispatch_once(&qword_1009778A8, &stru_10092DF08);
            v18 = off_1009778A0;
            sub_100030BCC(buf, v5);
            v19 = sub_100069D64((uint64_t)v18, buf);
            xpc_dictionary_set_BOOL(xdict, "kCBMsgArgIsLinkEncrypted", v19);
          }
          if (v7 && *(int *)(v7 - 64) >= 1)
          {
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10092DF28);
            v20 = sub_1000060F0((uint64_t)off_1009778C0, v5);
            xpc_dictionary_set_int64(xdict, "kCBMsgArgVisibleInSettings", !v20);
          }
          v9 = v61;
          if (v63)
          {
            v76 = 0;
            v75 = 0u;
            memset(buf, 0, sizeof(buf));
            if (qword_1009778A8 != -1)
              dispatch_once(&qword_1009778A8, &stru_10092DF08);
            sub_1006167B8((uint64_t)off_1009778A0, v5, (uint64_t)buf);
            if (*(_QWORD *)buf)
            {
              v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "connectingClients"));
              v22 = *(void **)&buf[8];
              *(_QWORD *)&buf[8] = v21;

              if (*(_QWORD *)(a1 + 496))
                HIDWORD(v76) = 1;
              if (*(_BYTE *)(a1 + 505))
                HIDWORD(v76) = 2;
              if (*(_BYTE *)(a1 + 506))
                HIDWORD(v76) = 4;
              if (qword_1009778A8 != -1)
                dispatch_once(&qword_1009778A8, &stru_10092DF08);
              v23 = off_1009778A0;
              v68[0] = *(id *)buf;
              v68[1] = *(id *)&buf[8];
              v69 = *(_OWORD *)&buf[16];
              v70 = v75;
              v71 = v76;
              sub_1006168D8((uint64_t)v23, v5, (uint64_t)v68);
            }
            if (*(_BYTE *)(a1 + 505) || *(_BYTE *)(a1 + 506))
            {
              v24 = qword_100999898;
              if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)v73 = 0;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Disabling pairing with BT device for DA extenstions", v73, 2u);
              }
              v67 = 0;
              if (qword_1009778A8 != -1)
                dispatch_once(&qword_1009778A8, &stru_10092DF08);
              v25 = off_1009778A0;
              sub_100030BCC(v73, v5);
              if (sub_100623C54((uint64_t)v25, v73, &v67))
              {
                v73[0] = 0;
                sub_100043758(v73);
                sub_10022BE3C(v67, 0);
                sub_100043728(v73);
              }
            }

          }
          ++*(_DWORD *)(a1 + 376);
        }
        v26 = qword_1009998C8;
        if (os_log_type_enabled((os_log_t)qword_1009998C8, OS_LOG_TYPE_DEFAULT))
        {
          v27 = "classic";
          v28 = *(_QWORD *)(a1 + 88);
          *(_DWORD *)buf = 138544130;
          if (v63)
            v27 = "le";
          *(_QWORD *)&buf[4] = v5;
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v28;
          *(_WORD *)&buf[22] = 2082;
          *(_QWORD *)&buf[24] = v27;
          LOWORD(v75) = 1024;
          *(_DWORD *)((char *)&v75 + 2) = a3;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "App ready - {cbuuid: %{public}@, bundle: %{public}@, transport: %{public}s, result: %d}", buf, 0x26u);
        }
        if (a3 != 341 && a3 != 348)
        {
          v29 = objc_msgSend(v9, "connectionUseCase");
          v30 = qword_100999898;
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
          {
            v31 = sub_100034AC8(v29);
            v32 = *(_QWORD *)(a1 + 88);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = v31;
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v5;
            *(_WORD *)&buf[22] = 2114;
            *(_QWORD *)&buf[24] = v32;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "BLE Connection Ready %{public}s %{public}@ for %{public}@", buf, 0x20u);
            v30 = qword_100999898;
          }
          if (os_signpost_enabled(v30))
          {
            v33 = sub_100034AC8(v29);
            v34 = *(_QWORD *)(a1 + 88);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = v33;
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v5;
            *(_WORD *)&buf[22] = 2114;
            *(_QWORD *)&buf[24] = v34;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "BLE Connection Ready %{public}s %{public}@ for %{public}@", buf, 0x20u);
          }
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10092DF28);
          v35 = off_1009778C0;
          Current = CFAbsoluteTimeGetCurrent();
          sub_100657030((uint64_t)v35, v5, Current);
        }
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_10092DF28);
        v37 = sub_1000067B8((uint64_t)off_1009778C0, v5);
        v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
        v40 = a3 == 315 && v38 != 0;

        if (v40)
        {
          v41 = qword_100999898;
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v5;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Device %{public}@ is FindMy but has no valid addresses/keys, parking connection attempt until we get an update", buf, 0xCu);
          }
          if (!v9)
            goto LABEL_97;
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_10092DE88);
          v42 = sub_1002F14B4((uint64_t)off_100978168, a1);
          if (!v42)
            goto LABEL_97;
          v43 = v9;
          *(_QWORD *)buf = &v72;
          v44 = sub_10040F684((uint64_t **)(a1 + 312), (unint64_t *)&v72, (uint64_t)&unk_100740F58, (id **)buf);
          v45 = (void *)v44[5];
          v44[5] = (uint64_t)v43;
          v46 = v43;

          v44[6] = v42;
        }
        else
        {
          v47 = sub_100070698(xdict);
          v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
          sub_10005DC70((_QWORD *)a1, 85, v48);

          v49 = objc_msgSend(v9, "connectionUseCase");
          v50 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "UUIDString")));
          sub_100091AE8(buf, (char *)objc_msgSend(v50, "UTF8String"));
          v51 = sub_10001F2AC(a1 + 448, (const void **)buf);
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);

          if (v49 != 655360 && v49 != 21 || a3 || a1 + 456 == v51)
            goto LABEL_97;
          v62 = v9;
          v52 = *(unsigned __int16 *)(v51 + 56);
          HIDWORD(v60) = *(unsigned __int16 *)(v51 + 58);
          v54 = *(unsigned int *)(v51 + 60);
          v53 = *(unsigned int *)(v51 + 64);
          v55 = *(_DWORD *)(v51 + 68);
          v56 = *(_QWORD *)(v51 + 72);
          v46 = *(id *)(v51 + 80);
          LODWORD(v60) = v55;
          (*(void (**)(_QWORD, _QWORD, id, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 120) + 80))(*(_QWORD *)(a1 + 120), 0, v46, v52, v56, v54, HIDWORD(v60), v53, v60);
          sub_100404DE4((uint64_t **)(a1 + 448), (uint64_t *)v51);
          v9 = v62;
        }

LABEL_97:
        if (*(int *)(a1 + 376) >= 1)
        {
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_10092DE88);
          sub_1002E51D0((uint64_t)off_100978168, *(void **)(a1 + 88), 1);
        }
        sub_100404E1C(a1, v72);
        xpc_release(xdict);
        if (!a3)
        {
          *(_WORD *)v73 = 0;
          LOWORD(v67) = 0;
          v66 = 0;
          v65 = 0;
          if (qword_1009778A8 != -1)
            dispatch_once(&qword_1009778A8, &stru_10092DF08);
          v57 = off_1009778A0;
          sub_100030BCC(buf, v72);
          if (!sub_10063B1EC((uint64_t)v57, buf, v73, &v67, (_WORD *)&v66 + 1, &v66, &v65))
          {
            v58 = *(_QWORD *)(a1 + 120);
            v59 = v63;
            if (!v58)
              v59 = 0;
            if (v59)
              (*(void (**)(uint64_t, _QWORD, void *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v58 + 216))(v58, 0, v72, *(unsigned __int16 *)v73, (unsigned __int16)v67, v65);
          }
        }

        v5 = v72;
        goto LABEL_110;
      }
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
        sub_1006EE52C();
    }
    else
    {
      v11 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      {
        v12 = *(_QWORD *)(a1 + 88);
        v13 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)buf = 138412802;
        *(_QWORD *)&buf[4] = v12;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v13;
        *(_WORD *)&buf[22] = 2112;
        *(_QWORD *)&buf[24] = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      sub_1006EE2F4();
    v5 = 0;
  }
LABEL_110:

}

void sub_100404D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;

  _Unwind_Resume(a1);
}

uint64_t *sub_100404DE4(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;

  v3 = sub_1000040CC(a1, a2);
  sub_10040F2B4((uint64_t)(a2 + 4));
  operator delete(a2);
  return v3;
}

void sub_100404E1C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 400);
  if (v4)
  {
    v7 = v3;
    sub_10034ADF8(v4, v3);
    v5 = sub_10034AB84(*(_QWORD *)(a1 + 400));
    v3 = v7;
    if (!v5)
    {
      v6 = *(_QWORD *)(a1 + 400);
      if (v6)
      {
        (*(void (**)(uint64_t, id))(*(_QWORD *)v6 + 8))(v6, v7);
        v3 = v7;
      }
      *(_QWORD *)(a1 + 400) = 0;
    }
  }

}

void sub_100404E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100404E98(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  xpc_object_t v7;
  uint64_t v8;
  void *v9;

  if (*(_BYTE *)(a1 + 380))
  {
    v7 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a3);
    xpc_dictionary_set_uint64(v7, "kCBScanOptionTotalRXTimeMS", a4);
    v8 = sub_100070698(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    sub_10005DC70((_QWORD *)a1, 133, v9);

    xpc_release(v7);
    *(_BYTE *)(a1 + 380) = 0;
  }
}

void sub_100404F34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_100404F44(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  void **v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  _BOOL4 v10;
  void *v11;
  uint64_t *v12;
  id v13;
  unint64_t v14;
  void *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  NSObject *v20;
  NSMutableDictionary *v21;
  NSMutableArray *v22;
  id v23;
  id v24;
  uint64_t v25;
  void *i;
  xpc_object_t v27;
  uint64_t v28;
  void *v29;
  id v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t *v37;
  _QWORD *v38[2];
  uint8_t v39[128];
  __int128 buf;
  uint64_t v41;

  v31 = a2;
  v32 = a1;
  v37 = 0;
  v38[0] = 0;
  v3 = a1 + 312;
  v38[1] = 0;
  sub_10040F9AC((uint64_t *)&v37, a1 + 312);
  v4 = v37;
  if (v37 != (uint64_t *)v38)
  {
    do
    {
      v5 = (void **)(v4 + 4);
      v6 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
      {
        v7 = *v5;
        LODWORD(buf) = 138543362;
        *(_QWORD *)((char *)&buf + 4) = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "notifyFindMyDevicesUpdated checking device %{public}@", (uint8_t *)&buf, 0xCu);
      }
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10092DF28);
      sub_100660428((uint64_t)off_1009778C0, *v5, 2u, (uint64_t)&buf);
      v8 = v41;
      sub_10001A82C((uint64_t)&buf, *((_QWORD **)&buf + 1));
      v9 = qword_100999898;
      v10 = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO);
      if (v8)
      {
        if (v10)
        {
          v11 = *v5;
          LODWORD(buf) = 138543362;
          *(_QWORD *)((char *)&buf + 4) = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "notifyFindMyDevicesUpdated Device %{public}@ is FindMy and now has valid keys, trying to connect again", (uint8_t *)&buf, 0xCu);
        }
        *(_QWORD *)&buf = v4 + 4;
        v12 = sub_10040F684(&v37, (unint64_t *)v4 + 4, (uint64_t)&unk_100740F58, (id **)&buf);
        v13 = (id)v12[5];
        v14 = v12[6];
        sub_10040F810(v3, (unint64_t *)v4 + 4);
        sub_1003FD8BC(v32, v14, *v5, v13);

      }
      else if (v10)
      {
        v15 = *v5;
        LODWORD(buf) = 138543362;
        *(_QWORD *)((char *)&buf + 4) = v15;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "notifyFindMyDevicesUpdated Device %{public}@ is FindMy and still doesnt have valid keys", (uint8_t *)&buf, 0xCu);
      }
      v16 = (uint64_t *)v4[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (uint64_t *)v4[2];
          v18 = *v17 == (_QWORD)v4;
          v4 = v17;
        }
        while (!v18);
      }
      v4 = v17;
    }
    while (v17 != (uint64_t *)v38);
  }
  v19 = *(unsigned __int8 *)(v32 + 382);
  if (*(_BYTE *)(v32 + 382))
  {
    v20 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "notifyFindMyDevicesUpdated", (uint8_t *)&buf, 2u);
    }
    v21 = objc_opt_new(NSMutableDictionary);
    v22 = objc_opt_new(NSMutableArray);
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v23 = v31;
    v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v33, v39, 16);
    if (v24)
    {
      v25 = *(_QWORD *)v34;
      do
      {
        for (i = 0; i != v24; i = (char *)i + 1)
        {
          if (*(_QWORD *)v34 != v25)
            objc_enumerationMutation(v23);
          v27 = sub_100013ABC(*(void **)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)i), 0, 1);
          v28 = sub_100070698(v27);
          v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
          -[NSMutableArray addObject:](v22, "addObject:", v29);

          xpc_release(v27);
        }
        v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v33, v39, 16);
      }
      while (v24);
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:](v21, "setObject:forKeyedSubscript:", v22, CFSTR("kCBMsgArgDevices"));
    sub_10005DC70((_QWORD *)v32, 135, v21);

  }
  sub_100012148((uint64_t)&v37, v38[0]);

  return v19 != 0;
}

void sub_100405330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,_QWORD *a22)
{
  void *v22;
  void *v23;
  void *v24;

  sub_100012148((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

void sub_1004053B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;

  v7 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(_QWORD *)(a1 + 88);
    v10 = 138543874;
    v11 = v8;
    v12 = 1024;
    v13 = a3;
    v14 = 2048;
    v15 = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Scan ended for bundle %{public}@ result:%d totalRXTimeMS:%llu", (uint8_t *)&v10, 0x1Cu);
  }
  *(_BYTE *)(a1 + 304) = 0;
  objc_msgSend(*(id *)(a1 + 344), "removeAllObjects");
  sub_100404E98(a1, v9, a3, a4);
}

BOOL sub_100405498(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _BOOL8 v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  id v15;

  v3 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  if ((sub_10000AEE4((uint64_t)off_1009778C0, v3, *(void **)(a1 + 88), *(void **)(a1 + 104)) & 1) == 0)
  {
    v6 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_QWORD *)(a1 + 88);
      v8 = *(_QWORD *)(a1 + 104);
      v10 = 138412802;
      v11 = v7;
      v12 = 2112;
      v13 = v8;
      v14 = 2112;
      v15 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", (uint8_t *)&v10, 0x20u);
    }
    goto LABEL_11;
  }
  if ((sub_100005134(a1, v3) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      sub_1006EE52C();
LABEL_11:
    v5 = 0;
    goto LABEL_14;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 264), "objectForKeyedSubscript:", v3));
  if (v4)
    v5 = 1;
  else
    v5 = *(_BYTE *)(a1 + 305) != 0;

LABEL_14:
  return v5;
}

void sub_100405620(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10040563C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 296), "containsObject:", a2);
}

void sub_100405648(uint64_t a1, void *a2, unsigned int a3)
{
  id v5;
  void *v6;
  xpc_object_t v7;
  uint64_t v8;
  void *v9;
  _BOOL4 v10;
  const char *v11;
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  void *v19;
  unsigned int v20;
  unsigned int v21;
  int64_t v22;
  _BOOL4 v23;
  int v24;
  int64_t value;
  _BYTE v26[6];
  void *v27[2];
  char v28;
  _BYTE __p[12];
  char v30;
  unsigned __int8 uuid[8];
  uint64_t v32;

  v5 = a2;
  v6 = *(void **)(a1 + 296);
  if ((a3 & 1) != 0)
    objc_msgSend(v6, "addObject:", v5);
  else
    objc_msgSend(v6, "removeObject:", v5);
  v7 = xpc_dictionary_create(0, 0, 0);
  *(_QWORD *)uuid = 0;
  v32 = 0;
  objc_msgSend(v5, "getUUIDBytes:", uuid);
  v8 = *(_QWORD *)(a1 + 120);
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  v9 = off_1009778A0;
  sub_100030BCC(__p, v5);
  v10 = sub_100069F08((uint64_t)v9, __p);
  xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", uuid);
  if (v10)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    sub_10000602C((uint64_t)off_1009778C0, v5, (uint64_t)__p);
    if (v30 >= 0)
      v11 = __p;
    else
      v11 = *(const char **)__p;
    xpc_dictionary_set_string(v7, "kCBMsgArgName", v11);
    if (v30 < 0)
      operator delete(*(void **)__p);
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    v12 = off_1009778C0;
    sub_100091AE8(v27, "ANCSAuthorized");
    v13 = sub_10000628C((uint64_t)v12, v5, (uint64_t)v27);
    xpc_dictionary_set_BOOL(v7, "kCBMsgArgAncsAuthorization", v13);
    if (v28 < 0)
      operator delete(v27[0]);
  }
  else
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    v14 = sub_1000589DC((uint64_t)off_1009778C0, v5, 0);
    if (!v14 || (v14 & 0xFF000000000000) != 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
        sub_1006EE58C();
    }
    else
    {
      v26[0] = BYTE5(v14);
      v26[1] = BYTE4(v14);
      v26[2] = BYTE3(v14);
      v26[3] = BYTE2(v14);
      v26[4] = BYTE1(v14);
      v26[5] = v14;
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_10092DFA8);
      v15 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)v26, 0);
      v16 = v15;
      if (v15)
      {
        sub_10043F78C(v15, (uint64_t)__p);
        if (v30 >= 0)
          v17 = __p;
        else
          v17 = *(const char **)__p;
        xpc_dictionary_set_string(v7, "kCBMsgArgName", v17);
        if (v30 < 0)
          operator delete(*(void **)__p);
        *(_DWORD *)__p = 0;
        value = 0;
        v24 = 0;
        if (sub_100444BF0(v16, __p, (_DWORD *)&value + 1, &value, &v24))
        {
          xpc_dictionary_set_int64(v7, "kCBMsgArgPID", value);
          xpc_dictionary_set_int64(v7, "kCBMsgArgVID", HIDWORD(value));
        }
      }
      else
      {
        v18 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__p = 138543362;
          *(_QWORD *)&__p[4] = v5;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Could not find a classic device object for %{public}@", __p, 0xCu);
        }
      }
    }
  }
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  v19 = off_1009778A0;
  sub_100030BCC(__p, v5);
  v20 = sub_100069F78((uint64_t)v19, __p);
  xpc_dictionary_set_int64(v7, "kCBMsgArgConnectionRole", v20);
  if (qword_10097AC18 != -1)
    dispatch_once(&qword_10097AC18, &stru_10092DFE8);
  v21 = sub_100006180(qword_10097AC10, v5);
  xpc_dictionary_set_int64(v7, "kCBMsgArgATTMTU", v21);
  if (a3)
  {
    if (v10)
      v22 = 2;
    else
      v22 = 1;
    xpc_dictionary_set_int64(v7, "kCBMsgArgConnectionTransport", v22);
  }
  xpc_dictionary_set_int64(v7, "kCBMsgArgConnectionEvent", a3);
  if (v8)
  {
    if (*(int *)(v8 - 64) >= 1)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_10092DF28);
      v23 = sub_1000060F0((uint64_t)off_1009778C0, v5);
      xpc_dictionary_set_int64(v7, "kCBMsgArgVisibleInSettings", !v23);
    }
    sub_10005E138(v8 - 144, 94, v7, 1);
  }
  else
  {
    xpc_release(v7);
  }
  if (*(_DWORD *)(a1 + 376))
  {
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10092DE88);
    sub_1002E51D0((uint64_t)off_100978168, *(void **)(a1 + 88), 1);
  }

}

void sub_100405BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  if (a23 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100405C1C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  double v11;
  double Current;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[5];
  _QWORD v20[5];

  v7 = a2;
  --*(_DWORD *)(a1 + 376);
  v8 = *(_QWORD *)(a1 + 120);
  if (v8 && *(int *)(v8 - 64) >= 1)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    v9 = !sub_1000060F0((uint64_t)off_1009778C0, v7);
  }
  else
  {
    if ((_DWORD)a3 == 182)
      a3 = 1;
    else
      a3 = a3;
    v9 = 1;
  }
  v18 = 0;
  sub_10011344C((_DWORD *)&v18 + 1, (__darwin_suseconds_t *)&v18);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  v10 = sub_100656C60((uint64_t)off_1009778C0, v7);
  if (v10)
    v11 = (double)((1000 * HIDWORD(v18) - (int)v10 + (int)v18 / 1000) / 0x3E8u);
  else
    v11 = 0.0;
  Current = CFAbsoluteTimeGetCurrent();
  v20[0] = v7;
  v19[0] = CFSTR("kCBMsgArgDeviceUUID");
  v19[1] = CFSTR("kCBMsgArgResult");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
  v20[1] = v13;
  v19[2] = CFSTR("kCBMsgArgVisibleInSettings");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v9));
  v20[2] = v14;
  v19[3] = CFSTR("kCBDisconnectInfoTimestamp");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", Current - v11));
  v20[3] = v15;
  v19[4] = CFSTR("kCBDisconnectInfoIsReconnecting");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a4));
  v20[4] = v16;
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 5));

  if (sub_10005DC70((_QWORD *)a1, 87, v17))
    (*(void (**)(_QWORD, _QWORD, id, uint64_t))(**(_QWORD **)(a1 + 120) + 16))(*(_QWORD *)(a1 + 120), 0, v7, a3);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  sub_10065DA94((uint64_t)off_1009778C0, v7, 0);
  if (!*(_DWORD *)(a1 + 376))
  {
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10092DE88);
    sub_1002E51D0((uint64_t)off_100978168, *(void **)(a1 + 88), 0);
  }
  sub_100404E1C(a1, v7);

}

void sub_100405F2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100405F90(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  void *v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE buf[22];
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  id v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  const char *v33;
  _BYTE v34[128];

  if (!*(_BYTE *)(a1 + 24)
    || !*(_QWORD *)(a1 + 96)
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    return 0;
  }
  v2 = objc_msgSend(objc_alloc((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(v2, "encodeObject:forKey:", *(_QWORD *)(a1 + 88), CFSTR("bundleIdentifier"));
  objc_msgSend(v2, "encodeObject:forKey:", *(_QWORD *)(a1 + 96), CFSTR("restoreIdentifier"));
  objc_msgSend(v2, "encodeObject:forKey:", *(_QWORD *)(a1 + 344), CFSTR("servicesToScan"));
  objc_msgSend(v2, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 304), CFSTR("isScanning"));
  objc_msgSend(v2, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 306), CFSTR("isContactTracingScan"));
  v3 = objc_alloc_init((Class)NSMutableSet);
  v4 = objc_msgSend(*(id *)(a1 + 336), "copy");
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v5 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v34, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v20;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        objc_msgSend(v9, "getUUIDBytes:", buf, (_QWORD)v19);
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", buf, 16));
        objc_msgSend(v3, "addObject:", v10);

      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v19, v34, 16);
    }
    while (v6);
  }

  objc_msgSend(v2, "encodeObject:forKey:", v3, CFSTR("peripherals"));
  v11 = qword_1009998F0;
  if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_QWORD *)(a1 + 88);
    v13 = *(_QWORD *)(a1 + 96);
    v14 = *(_QWORD *)(a1 + 344);
    v15 = "True";
    if (!*(_BYTE *)(a1 + 304))
      v15 = "False";
    if (*(_BYTE *)(a1 + 306))
      v16 = "YES";
    else
      v16 = "NO";
    *(_DWORD *)buf = 138413826;
    *(_QWORD *)&buf[4] = v2;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v12;
    v24 = 2114;
    v25 = v13;
    v26 = 2114;
    v27 = v14;
    v28 = 2114;
    v29 = v3;
    v30 = 2082;
    v31 = v15;
    v32 = 2082;
    v33 = v16;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Saving Central restoration data: %@ - bundleId %{public}@, restorationId: %{public}@, servicesToScan: %{public}@, peripherals: %{public}@, isScanning: %{public}s, fIsContactTracingScanning:%{public}s", buf, 0x48u);
  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "encodedData", (_QWORD)v19));

  return v17;
}

void sub_100406274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1004062D0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  void *i;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  NSMutableSet *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  id v39;
  unsigned int v40;
  _BOOL4 v41;
  void *v42;
  int v43;
  NSObject *v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  void *v48;
  NSObject *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  const char *v54;
  void *v56;
  void *v57;
  id v58;
  void *v59;
  void *v60;
  void *__p[2];
  char v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  id v71;
  uint8_t buf[4];
  id v73;
  __int16 v74;
  _BYTE v75[10];
  uint64_t v76;
  __int16 v77;
  id v78;
  __int16 v79;
  const char *v80;
  __int16 v81;
  const char *v82;
  _BYTE v83[128];
  _QWORD v84[2];
  _BYTE v85[128];
  _QWORD v86[2];

  v3 = a2;
  v60 = v3;
  if (v3)
  {
    v71 = 0;
    v4 = objc_msgSend(objc_alloc((Class)NSKeyedUnarchiver), "initForReadingFromData:error:", v3, &v71);
    v58 = v71;
    v5 = qword_1009998F0;
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v73 = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Restoring Central restoration data: %@", buf, 0xCu);
      }
      v59 = v4;
      v6 = objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(NSString), CFSTR("bundleIdentifier"));
      v7 = objc_claimAutoreleasedReturnValue(v6);
      v8 = *(void **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v7;

      v9 = objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(NSString), CFSTR("restoreIdentifier"));
      v10 = objc_claimAutoreleasedReturnValue(v9);
      v11 = *(void **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = v10;

      if (*(_QWORD *)(a1 + 88) && *(_QWORD *)(a1 + 96))
      {
        v86[0] = objc_opt_class(NSSet);
        v86[1] = objc_opt_class(NSData);
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v86, 2));
        v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v12));
        v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "decodeObjectOfClasses:forKey:", v13, CFSTR("servicesToScan")));

        v14 = v56;
        if (v56)
        {
          v15 = objc_opt_class(NSSet);
          if ((objc_opt_isKindOfClass(v56, v15) & 1) != 0)
          {
            v14 = v56;
          }
          else
          {
            if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_ERROR))
              sub_1006EE728();

            v14 = 0;
          }
        }
        v70 = 0u;
        v68 = 0u;
        v69 = 0u;
        v67 = 0u;
        v17 = v14;
        v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v67, v85, 16);
        v57 = v17;
        if (v18)
        {
          v19 = *(_QWORD *)v68;
          while (2)
          {
            for (i = 0; i != v18; i = (char *)i + 1)
            {
              if (*(_QWORD *)v68 != v19)
                objc_enumerationMutation(v17);
              v21 = *(_QWORD *)(*((_QWORD *)&v67 + 1) + 8 * (_QWORD)i);
              v22 = objc_opt_class(NSData);
              if ((objc_opt_isKindOfClass(v21, v22) & 1) == 0)
              {
                if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_ERROR))
                  sub_1006EE6FC();

                v57 = 0;
                goto LABEL_32;
              }
            }
            v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v67, v85, 16);
            if (v18)
              continue;
            break;
          }
          v57 = v17;
        }
LABEL_32:

        v23 = objc_msgSend(v57, "mutableCopy");
        v24 = v23;
        if (v23)
          v25 = v23;
        else
          v25 = objc_alloc_init((Class)NSMutableSet);
        v26 = *(void **)(a1 + 344);
        *(_QWORD *)(a1 + 344) = v25;

        *(_BYTE *)(a1 + 304) = objc_msgSend(v59, "decodeBoolForKey:", CFSTR("isScanning"));
        if (objc_msgSend(*(id *)(a1 + 344), "count") && !*(_BYTE *)(a1 + 304))
        {
          if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_ERROR))
            sub_1006EE6D0();
          v16 = 0;
        }
        else
        {
          *(_BYTE *)(a1 + 306) = objc_msgSend(v59, "decodeBoolForKey:", CFSTR("isContactTracingScan"));
          v27 = objc_opt_new(NSMutableSet);
          v28 = *(void **)(a1 + 336);
          *(_QWORD *)(a1 + 336) = v27;

          sub_100012148(a1 + 312, *(_QWORD **)(a1 + 320));
          *(_QWORD *)(a1 + 320) = 0;
          *(_QWORD *)(a1 + 328) = 0;
          *(_QWORD *)(a1 + 312) = a1 + 320;
          v84[0] = objc_opt_class(NSSet);
          v84[1] = objc_opt_class(NSData);
          v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v84, 2));
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v29));
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "decodeObjectOfClasses:forKey:", v30, CFSTR("peripherals")));

          sub_100012198(a1 + 448, *(_QWORD **)(a1 + 456));
          *(_QWORD *)(a1 + 456) = 0;
          *(_QWORD *)(a1 + 464) = 0;
          *(_QWORD *)(a1 + 448) = a1 + 456;
          if (v31)
          {
            v32 = objc_opt_class(NSSet);
            if ((objc_opt_isKindOfClass(v31, v32) & 1) == 0)
            {
              if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_ERROR))
                sub_1006EE6A4();

              v31 = 0;
            }
          }
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v33 = v31;
          v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v63, v83, 16);
          if (v34)
          {
            v35 = *(_QWORD *)v64;
            while (2)
            {
              v36 = 0;
              do
              {
                if (*(_QWORD *)v64 != v35)
                  objc_enumerationMutation(v33);
                v37 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * (_QWORD)v36);
                v38 = objc_opt_class(NSData);
                if ((objc_opt_isKindOfClass(v37, v38) & 1) == 0)
                {
                  if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_ERROR))
                    sub_1006EE678();
                  goto LABEL_71;
                }
                if (objc_msgSend(v37, "length") == (id)16)
                {
                  v39 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", objc_msgSend(objc_retainAutorelease(v37), "bytes"));
                  if (qword_100978170 != -1)
                    dispatch_once(&qword_100978170, &stru_10092DE88);
                  v40 = sub_1002E0C24((uint64_t)off_100978168, *(_QWORD *)(a1 + 88));
                  if (qword_1009778B8 != -1)
                    dispatch_once(&qword_1009778B8, &stru_10092DFC8);
                  v41 = sub_100030864(qword_1009778B0, v39);
                  if (qword_1009778C8 != -1)
                    dispatch_once(&qword_1009778C8, &stru_10092DF28);
                  v42 = off_1009778C0;
                  sub_100091AE8(__p, "DA_ASK_RETAIN_DEVICE");
                  v43 = sub_10000628C((uint64_t)v42, v39, (uint64_t)__p);
                  if (v62 < 0)
                    operator delete(__p[0]);
                  v44 = qword_1009998F0;
                  if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
                  {
                    v45 = *(void **)(a1 + 88);
                    *(_DWORD *)buf = 138544130;
                    v73 = v45;
                    v74 = 1024;
                    *(_DWORD *)v75 = v40;
                    *(_WORD *)&v75[4] = 1024;
                    *(_DWORD *)&v75[6] = v41;
                    LOWORD(v76) = 1024;
                    *(_DWORD *)((char *)&v76 + 2) = v43;
                    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Restoring data for app %{public}@ isAppAuthorized: %d, isLeDevicePaired %d isDeviceForDA %d", buf, 0x1Eu);
                  }
                  if ((v40 | v41 | v43) == 1)
                  {
                    objc_msgSend(*(id *)(a1 + 336), "addObject:", v39);
                  }
                  else
                  {
                    if (qword_1009778C8 != -1)
                      dispatch_once(&qword_1009778C8, &stru_10092DF28);
                    v46 = sub_1000589DC((uint64_t)off_1009778C0, v39, 0);
                    v47 = qword_1009998F0;
                    if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_INFO))
                    {
                      v48 = *(void **)(a1 + 88);
                      *(_DWORD *)buf = 138543618;
                      v73 = v48;
                      v74 = 2048;
                      *(_QWORD *)v75 = v46;
                      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "Not adding app %{public}@ peripheral device %llu ", buf, 0x16u);
                    }
                  }

                }
                v36 = (char *)v36 + 1;
              }
              while (v34 != v36);
              v34 = objc_msgSend(v33, "countByEnumeratingWithState:objects:count:", &v63, v83, 16);
              if (v34)
                continue;
              break;
            }
          }
LABEL_71:

          v49 = qword_1009998F0;
          if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_INFO))
          {
            v50 = *(void **)(a1 + 88);
            v51 = *(_QWORD *)(a1 + 96);
            v52 = *(_QWORD *)(a1 + 344);
            if (*(_BYTE *)(a1 + 304))
              v53 = "True";
            else
              v53 = "False";
            if (*(_BYTE *)(a1 + 306))
              v54 = "YES";
            else
              v54 = "NO";
            *(_DWORD *)buf = 138544642;
            v73 = v50;
            v74 = 2114;
            *(_QWORD *)v75 = v51;
            *(_WORD *)&v75[8] = 2114;
            v76 = v52;
            v77 = 2114;
            v78 = v33;
            v79 = 2082;
            v80 = v53;
            v81 = 2082;
            v82 = v54;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "Central Restoring - bundleId %{public}@, restorationId: %{public}@, servicesToScan: %{public}@, peripherals: %{public}@, isScanning: %{public}s, fIsContactTracingScanning:%{public}s", buf, 0x3Eu);
          }
          *(_BYTE *)(a1 + 209) = 1;

          v16 = 1;
        }

      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_ERROR))
          sub_1006EE64C();
        v16 = 0;
      }
      v4 = v59;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_ERROR))
        sub_1006EE5EC();
      v16 = 0;
    }

  }
  else
  {
    v16 = 0;
  }

  return v16;
}

void sub_100406C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{

  _Unwind_Resume(a1);
}

void sub_100406CF8(uint64_t a1, unint64_t a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t v20[132];
  int buf;
  uint8_t buf_4[8];
  __int16 v23;
  uint64_t v24;

  if (*(_BYTE *)(a1 + 209))
  {
    *(_BYTE *)(a1 + 209) = 0;
    if (objc_msgSend(*(id *)(a1 + 344), "count"))
      operator new();
    v3 = objc_msgSend(*(id *)(a1 + 336), "copy", v14);
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v4 = v3;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v17;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v17 != v6)
            objc_enumerationMutation(v4);
          v8 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v7);
          if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit")
            && (v9 = *(void **)(a1 + 216)) != 0
            && (objc_msgSend(v9, "containsObject:", v8) & 1) == 0)
          {
            v11 = qword_100999898;
            if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
            {
              v12 = *(_QWORD *)(a1 + 88);
              buf = 138412546;
              *(_QWORD *)buf_4 = v8;
              v23 = 2112;
              v24 = v12;
              _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%@ is not allowed for %@, removing from connect list", (uint8_t *)&buf, 0x16u);
            }
            objc_msgSend(*(id *)(a1 + 336), "removeObject:", v8);
          }
          else
          {
            v10 = (void *)objc_claimAutoreleasedReturnValue(+[ConnectOptions alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:](ConnectOptions, "alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:", 1, 1, 1, 0, 0));
            sub_1003FD8BC(a1, a2, v8, v10);

          }
          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        v13 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
        v5 = v13;
      }
      while (v13);
    }

  }
  else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
  {
    sub_1006EE754();
  }
}

void sub_1004071B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;
  void *v27;

  if (__p)
    operator delete(__p);
  v27 = *(void **)(v25 - 128);
  if (v27)
  {
    *(_QWORD *)(v25 - 120) = v27;
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

id sub_100407254(uint64_t a1, unint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  id v6;
  __int128 v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unsigned int v13;
  void (***v14)(_QWORD, _BYTE *, _QWORD, void *);
  _BYTE *v15;
  uint64_t v16;
  unsigned __int8 v17;
  _BYTE *v18;
  _BOOL4 v19;
  unint64_t v20;
  _BYTE *v21;
  void *v22;
  _QWORD *v23;
  BOOL v24;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  NSObject *v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  __int128 v35;
  id obj;
  uint64_t v37;
  void *v38[2];
  unsigned __int8 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE __p[22];
  unsigned __int8 v45;
  uint8_t buf[16];
  __int128 v47;
  __int128 v48;
  _BYTE v49[128];

  v4 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 88);
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Clear all state for session \"%{public}@\"", buf, 0xCu);
  }
  sub_10040022C(a1);
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  obj = *(id *)(a1 + 248);
  v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v49, 16);
  if (v6)
  {
    v37 = *(_QWORD *)v41;
    *(_QWORD *)&v7 = 138543618;
    v35 = v7;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v41 != v37)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)v8);
        if (*(_BYTE *)(a1 + 44))
        {
          if (qword_10097AC58 != -1)
            dispatch_once(&qword_10097AC58, &stru_10092DEA8);
          v10 = qword_10097AC50;
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 248), "objectForKeyedSubscript:", v9, v35));
          sub_1006C0E84(v10, a2, v9, v11);

        }
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 248), "objectForKeyedSubscript:", v9, v35));
        v13 = objc_msgSend(v12, "isLatencyCritical");

        if (v13)
          sub_10040022C(a1);
        v47 = 0u;
        v48 = 0u;
        *(_OWORD *)buf = 0u;
        sub_100091AE8(__p, (char *)objc_msgSend(*(id *)(a1 + 88), "UTF8String"));
        sub_10047D578((uint64_t)buf, (__int128 *)__p, *(_BYTE *)(a1 + 129), v9);
        if ((char)v45 < 0)
          operator delete(*(void **)__p);
        if (qword_10097AC48 != -1)
          dispatch_once(&qword_10097AC48, &stru_10092DEE8);
        sub_10006544C(qword_10097AC40, (uint64_t)buf);
        v14 = (void (***)(_QWORD, _BYTE *, _QWORD, void *))sub_10005D5A4();
        sub_1000340DC(a2, (uint64_t)__p);
        if ((v45 & 0x80u) == 0)
          v15 = __p;
        else
          v15 = *(_BYTE **)__p;
        (**v14)(v14, v15, 0, v9);
        if ((char)v45 < 0)
          operator delete(*(void **)__p);
        sub_1000340DC(a2, (uint64_t)__p);
        v16 = v45;
        v17 = v45;
        if ((v45 & 0x80u) == 0)
        {
          v18 = __p;
        }
        else
        {
          v16 = *(_QWORD *)&__p[8];
          v18 = *(_BYTE **)__p;
        }
        if (v16 < 20)
        {
          v19 = 0;
          goto LABEL_40;
        }
        v20 = a2;
        v21 = &v18[v16];
        v22 = v18;
        while (1)
        {
          v23 = memchr(v22, 99, v16 - 19);
          if (!v23)
          {
LABEL_38:
            v19 = 0;
LABEL_39:
            a2 = v20;
            goto LABEL_40;
          }
          v24 = *v23 == 0x6C7070612E6D6F63 && v23[1] == 0x6F7465756C622E65;
          if (v24 && *((_DWORD *)v23 + 4) == 1684567151)
            break;
          v22 = (char *)v23 + 1;
          v16 = v21 - (_BYTE *)v22;
          if (v21 - (_BYTE *)v22 < 20)
            goto LABEL_38;
        }
        v19 = 0;
        if (v23 == (_QWORD *)v21)
          goto LABEL_39;
        a2 = v20;
        if ((char *)v23 - v18 != -1)
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10092DF28);
          sub_1006594CC((uint64_t)off_1009778C0, v9, (uint64_t)v38);
          v32 = (unint64_t)v38[1];
          if ((v39 & 0x80u) == 0)
            v32 = v39;
          v19 = v32 != 0;
          if ((char)v39 < 0)
            operator delete(v38[0]);
          v17 = v45;
        }
LABEL_40:
        if ((v17 & 0x80) != 0)
        {
          operator delete(*(void **)__p);
          if (v19)
            goto LABEL_44;
        }
        else
        {
          if (!v19)
            goto LABEL_47;
LABEL_44:
          if (qword_1009778A8 != -1)
            dispatch_once(&qword_1009778A8, &stru_10092DF08);
          v26 = off_1009778A0;
          sub_100030BCC(__p, v9);
          sub_100623F24((uint64_t)v26, __p);
        }
LABEL_47:
        v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 248), "objectForKeyedSubscript:", v9));
        v28 = v27;
        if (v27 && objc_msgSend(v27, "requiresLowLatency"))
        {
          if (qword_1009778A8 != -1)
            dispatch_once(&qword_1009778A8, &stru_10092DF08);
          v29 = off_1009778A0;
          sub_100030BCC(__p, v9);
          sub_100623F24((uint64_t)v29, __p);
        }
        v30 = qword_1009998C8;
        if (os_log_type_enabled((os_log_t)qword_1009998C8, OS_LOG_TYPE_DEFAULT))
        {
          v31 = *(_QWORD *)(a1 + 88);
          *(_DWORD *)__p = v35;
          *(_QWORD *)&__p[4] = v9;
          *(_WORD *)&__p[12] = 2114;
          *(_QWORD *)&__p[14] = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "App disconnecting - {cbuuid: %{public}@, bundle: %{public}@}", __p, 0x16u);
        }

        if (SHIBYTE(v47) < 0)
          operator delete(*(void **)&buf[8]);
        v8 = (char *)v8 + 1;
      }
      while (v8 != v6);
      v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v40, v49, 16);
      v6 = v33;
    }
    while (v33);
  }

  objc_msgSend(*(id *)(a1 + 248), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 256), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 80), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 408), "removeAllObjects");
  sub_1003FD4C0(a1);
  sub_100010D8C(a1 + 416, *(_QWORD **)(a1 + 424));
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 416) = a1 + 424;
  objc_msgSend(*(id *)(a1 + 336), "removeAllObjects");
  sub_100012148(a1 + 312, *(_QWORD **)(a1 + 320));
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 312) = a1 + 320;
  sub_100012198(a1 + 448, *(_QWORD **)(a1 + 456));
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 448) = a1 + 456;
  return sub_10006AA24(a1, a2);
}

void sub_10040782C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{

  _Unwind_Resume(a1);
}

id sub_1004078D0(uint64_t a1, unint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 buf;
  unsigned __int8 v19;
  unsigned __int8 v20[16];
  _BYTE v21[128];

  v3 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 88);
    LODWORD(buf) = 138543362;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Clear for system sleep for central session \"%{public}@\"", (uint8_t *)&buf, 0xCu);
  }
  sub_10040022C(a1);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 248), "allKeys"));
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v21, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v15;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v15 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v8);
        if (qword_1009778A8 != -1)
          dispatch_once(&qword_1009778A8, &stru_10092DF08);
        v10 = off_1009778A0;
        sub_100030BCC(v20, v9);
        if (sub_100069F08((uint64_t)v10, v20))
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10092DF28);
          sub_1006594CC((uint64_t)off_1009778C0, v9, (uint64_t)&buf);
          if ((v19 & 0x80u) == 0)
            v11 = v19;
          else
            v11 = *((_QWORD *)&buf + 1);
          if ((char)v19 < 0)
          {
            operator delete((void *)buf);
            if (!v11)
              goto LABEL_21;
LABEL_20:
            objc_msgSend(*(id *)(a1 + 248), "removeObjectForKey:", v9);
            goto LABEL_21;
          }
          if (v11)
            goto LABEL_20;
        }
LABEL_21:
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v21, 16);
    }
    while (v6);
  }

  objc_msgSend(*(id *)(a1 + 256), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 80), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 336), "removeAllObjects");
  sub_100012148(a1 + 312, *(_QWORD **)(a1 + 320));
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 312) = a1 + 320;
  sub_100012198(a1 + 448, *(_QWORD **)(a1 + 456));
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 448) = a1 + 456;
  return sub_10006AA24(a1, a2);
}

void sub_100407B44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100407B6C(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v11[3];
  _QWORD v12[3];

  v7 = a2;
  v12[0] = v7;
  v11[0] = CFSTR("kCBMsgArgDeviceUUID");
  v11[1] = CFSTR("kCBMsgArgServiceStartHandle");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", a3));
  v12[1] = v8;
  v11[2] = CFSTR("kCBMsgArgServiceEndHandle");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", a4));
  v12[2] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v12, v11, 3));

  sub_10005DC70(a1, 179, v10);
}

void sub_100407C74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100407CB0(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11;
  uint64_t v12;
  NSData *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD v19[5];
  _QWORD v20[5];

  v11 = a2;
  v12 = sub_10003EB18(a4);
  v13 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v12, sub_10003F8C4(a4));
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  v19[0] = CFSTR("kCBMsgArgResult");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a6));
  v20[0] = v15;
  v20[1] = v11;
  v19[1] = CFSTR("kCBMsgArgDeviceUUID");
  v19[2] = CFSTR("kCBMsgArgCharacteristicHandle");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", a3));
  v20[2] = v16;
  v20[3] = v14;
  v19[3] = CFSTR("kCBMsgArgData");
  v19[4] = CFSTR("kCBMsgArgTimestamp");
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", a5));
  v20[4] = v17;
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v20, v19, 5));

  sub_10005DC70(a1, 196, v18);
}

void sub_100407E2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_100407E80(uint64_t result, char a2)
{
  *(_BYTE *)(result + 129) = a2;
  return result;
}

uint64_t sub_100407E88(uint64_t result, char a2)
{
  *(_BYTE *)(result + 186) = a2;
  return result;
}

uint64_t sub_100407E90(uint64_t result, char a2)
{
  *(_BYTE *)(result + 186) = a2;
  return result;
}

id sub_100407E98(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;

  v2 = objc_alloc_init((Class)NSMutableString);
  v3 = sub_1003FCBF8(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(v2, "appendString:", v4);

  v5 = *(_QWORD *)(a1 + 400);
  if (v5)
  {
    v6 = sub_10034AEE0(v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    objc_msgSend(v2, "appendFormat:", CFSTR("Pending Catt Connections: %@\n"), v7);

  }
  return v2;
}

void sub_100407F24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_100407F50(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  id v7;
  void *v8;
  void *v9;
  int v10;
  int v11;
  id v12;
  __int16 v13;
  int v14;

  v5 = a3;
  if ((_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit") & 1) != 0)
  {
    v6 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138412546;
      v12 = v5;
      v13 = 1024;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "configureDeviceAccessSessionWithLimits devices:%@ sessionStarted:%d", (uint8_t *)&v11, 0x12u);
    }
    if (a2)
      v7 = v5;
    else
      v7 = (id)objc_claimAutoreleasedReturnValue(+[NSArray array](NSArray, "array"));
    v8 = *(void **)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v7;

    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10092DE88);
    v9 = off_100978168;
    if (a2)
    {
      if (qword_100978130 != -1)
        dispatch_once(&qword_100978130, &stru_10092E008);
      v10 = sub_10002527C((uint64_t)off_100978128);
    }
    else
    {
      v10 = 0;
    }
    sub_1002DCFF0((uint64_t)v9, a1, v10);
    *(_BYTE *)(a1 + 504) = a2;
  }

}

void sub_1004080DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1004080F4(uint64_t a1, int a2, void *a3, void *a4, void *a5, void *a6)
{
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  int v27;
  id v28;
  __int16 v29;
  int v30;

  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  if ((_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit") & 1) != 0)
  {
    v16 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v27 = 138412546;
      v28 = v12;
      v29 = 1024;
      v30 = a2;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "configureDeviceAccessSessionWithLimits devices:%@ sessionStarted:%d", (uint8_t *)&v27, 0x12u);
    }
    if (a2)
    {
      objc_storeStrong((id *)(a1 + 216), a3);
      objc_storeStrong((id *)(a1 + 224), a4);
      objc_storeStrong((id *)(a1 + 232), a5);
      v17 = v15;
    }
    else
    {
      v18 = objc_claimAutoreleasedReturnValue(+[NSArray array](NSArray, "array"));
      v19 = *(void **)(a1 + 216);
      *(_QWORD *)(a1 + 216) = v18;

      v20 = objc_claimAutoreleasedReturnValue(+[NSArray array](NSArray, "array"));
      v21 = *(void **)(a1 + 224);
      *(_QWORD *)(a1 + 224) = v20;

      v22 = objc_claimAutoreleasedReturnValue(+[NSArray array](NSArray, "array"));
      v23 = *(void **)(a1 + 232);
      *(_QWORD *)(a1 + 232) = v22;

      v17 = (id)objc_claimAutoreleasedReturnValue(+[NSArray array](NSArray, "array"));
    }
    v24 = *(void **)(a1 + 240);
    *(_QWORD *)(a1 + 240) = v17;

    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10092DE88);
    v25 = off_100978168;
    if (a2)
    {
      if (qword_100978130 != -1)
        dispatch_once(&qword_100978130, &stru_10092E008);
      v26 = sub_10002527C((uint64_t)off_100978128);
    }
    else
    {
      v26 = 0;
    }
    sub_1002DCFF0((uint64_t)v25, a1, v26);
    *(_BYTE *)(a1 + 504) = a2;
  }

}

void sub_100408338(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_10040835C(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  void *v17[2];
  char v18;

  if ((*(_BYTE *)(a1 + 506)
     || _os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit") && *(_QWORD *)(a1 + 496))
    && !_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
  {
    return 1;
  }
  if (!*(_QWORD *)(a1 + 224))
    return 1;
  sub_100069AFC(v17);
  if (!LOBYTE(v17[0]))
    return 1;
  sub_10006887C(a2, v17);
  if (v18 >= 0)
    v4 = v17;
  else
    v4 = (void **)v17[0];
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4));
  if (v18 < 0)
    operator delete(v17[0]);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v6 = *(id *)(a1 + 224);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v13;
    while (2)
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v6);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v9), "isEqualToString:", v5, (_QWORD)v12) & 1) != 0)
        {

          v10 = 1;
          goto LABEL_26;
        }
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v7)
        continue;
      break;
    }
  }

  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
    sub_1006EE7B4();
  v10 = 0;
LABEL_26:

  return v10;
}

void sub_10040854C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100408588(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v3 = a2;
  if ((*(_BYTE *)(a1 + 506)
     || _os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit") && *(_QWORD *)(a1 + 496))
    && (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit") & 1) == 0
    || !*(_QWORD *)(a1 + 224)
    || !objc_msgSend(v3, "length"))
  {
LABEL_20:
    v8 = 1;
  }
  else
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v4 = *(id *)(a1 + 224);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v11;
      while (2)
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v11 != v6)
            objc_enumerationMutation(v4);
          if ((objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v7), "isEqualToString:", v3, (_QWORD)v10) & 1) != 0)
          {

            goto LABEL_20;
          }
          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
        if (v5)
          continue;
        break;
      }
    }

    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      sub_1006EE7B4();
    v8 = 0;
  }

  return v8;
}

void sub_100408728(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100408754(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD v10[5];
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  v2 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 88);
    v4 = *(_QWORD *)(a1 + 496);
    *(_DWORD *)buf = 138412546;
    v12 = v3;
    v13 = 2112;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "registerForDeviceAccessForMedia:%@ fDeviceAccessSession:%@", buf, 0x16u);
  }
  if (*(_QWORD *)(a1 + 496))
  {
    v5 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Already registered", buf, 2u);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 504) = 0;
    v6 = objc_alloc_init((Class)DASession);
    v7 = *(void **)(a1 + 496);
    *(_QWORD *)(a1 + 496) = v6;

    objc_msgSend(*(id *)(a1 + 496), "setBundleID:", *(_QWORD *)(a1 + 88));
    objc_msgSend(*(id *)(a1 + 496), "setDispatchQueue:", *(_QWORD *)(sub_1000419F4() + 8));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100408920;
    v10[3] = &unk_10092DD10;
    v10[4] = a1;
    objc_msgSend(*(id *)(a1 + 496), "setEventHandler:", v10);
    v8 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 88);
      *(_DWORD *)buf = 138412290;
      v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Session now registering for deviceAccess with bundle ID %@", buf, 0xCu);
    }
    objc_msgSend(*(id *)(a1 + 496), "activate");
  }
}

void sub_100408920(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  _BOOL4 v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  BOOL v26;
  void *v27;
  BOOL v28;
  uint64_t v29;
  NSObject *v30;
  _QWORD v31[5];
  _QWORD v32[5];
  uint8_t buf[4];
  uint64_t v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  _BOOL4 v38;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (uint64_t)objc_msgSend(v3, "eventType");
  if (v5 <= 29)
  {
    if (v5 == 10)
    {
      v16 = qword_100999898;
      if (!os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        goto LABEL_22;
      v21 = *(_QWORD *)(v4 + 88);
      *(_DWORD *)buf = 138412290;
      v34 = v21;
      v18 = "DAEventTypeActivated for bundleID %@";
    }
    else
    {
      if (v5 != 20)
        goto LABEL_22;
      v16 = qword_100999898;
      if (!os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        goto LABEL_22;
      v17 = *(_QWORD *)(v4 + 88);
      *(_DWORD *)buf = 138412290;
      v34 = v17;
      v18 = "DAEventTypeInvalidated for bundleID %@";
    }
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v18, buf, 0xCu);
    goto LABEL_22;
  }
  switch(v5)
  {
    case 30:
      v16 = qword_100999898;
      if (!os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        break;
      v19 = *(_QWORD *)(v4 + 88);
      *(_DWORD *)buf = 138412290;
      v34 = v19;
      v18 = "DAEventTypeSessionStarted for bundleID %@";
      goto LABEL_21;
    case 31:
      v16 = qword_100999898;
      if (!os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        break;
      v20 = *(_QWORD *)(v4 + 88);
      *(_DWORD *)buf = 138412290;
      v34 = v20;
      v18 = "DAEventTypeSessionEnded for bundleID %@";
      goto LABEL_21;
    case 42:
      v6 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_QWORD *)(v4 + 88);
        *(_DWORD *)buf = 138412290;
        v34 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "DAEventTypeDeviceChanged for bundleID %@", buf, 0xCu);
      }
      v8 = objc_opt_class(DAEventDevice);
      if ((objc_opt_isKindOfClass(v3, v8) & 1) != 0)
      {
        v9 = v3;
        v10 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          v11 = *(_QWORD *)(v4 + 88);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "device"));
          v13 = DADeviceStateToString(objc_msgSend(v12, "state"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
            v15 = *(_BYTE *)(v4 + 504) != 0;
          else
            v15 = 0;
          *(_DWORD *)buf = 138412802;
          v34 = v11;
          v35 = 2112;
          v36 = v14;
          v37 = 1024;
          v38 = v15;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "DAEventTypeDeviceChanged for bundleID %@ eventDevice.device.state:%@ isDeviceAccessSessionActive:%d", buf, 0x1Cu);

        }
        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "device"));
        if (objc_msgSend(v22, "state") != (id)10)
        {
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "device"));
          if (objc_msgSend(v23, "state") != (id)20)
          {
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "device"));
            v26 = objc_msgSend(v25, "state") == (id)25;

            if (!v26)
            {
              v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "device"));
              if (objc_msgSend(v27, "state")
                || !_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
              {

              }
              else
              {
                v28 = *(_BYTE *)(v4 + 504) == 0;

                if (!v28)
                {
                  v29 = sub_1000419F4();
                  v31[0] = _NSConcreteStackBlock;
                  v31[1] = 3221225472;
                  v31[2] = sub_10040921C;
                  v31[3] = &unk_100917378;
                  v31[4] = v4;
                  sub_100041A34(v29, v31);
                  goto LABEL_30;
                }
              }
              v30 = qword_100999898;
              if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Ignoring event", buf, 2u);
              }
              goto LABEL_30;
            }
LABEL_29:
            v24 = *(void **)(v4 + 496);
            v32[0] = _NSConcreteStackBlock;
            v32[1] = 3221225472;
            v32[2] = sub_100408E48;
            v32[3] = &unk_10092DCF0;
            v32[4] = v4;
            objc_msgSend(v24, "getBluetoothAccessInfoWithCompletionHandler:", v32);
LABEL_30:

            break;
          }

        }
        goto LABEL_29;
      }
      break;
  }
LABEL_22:

}

void sub_100408D94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_100408E08(uint64_t a1)
{
  uint64_t result;

  result = _os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit");
  if ((_DWORD)result)
    return *(_BYTE *)(a1 + 504) != 0;
  return result;
}

void sub_100408E48(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  id v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint8_t buf[4];
  id v35;
  __int16 v36;
  id v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  void *v43;
  _BYTE v44[128];

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "bluetoothDevices"));
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v30, v44, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v31;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v31 != v11)
          objc_enumerationMutation(v9);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)v12), "identifier"));
        objc_msgSend(v8, "addObject:", v13);

        v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v30, v44, 16);
    }
    while (v10);
  }

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v8));
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", *(_QWORD *)(v7 + 216)));
  v16 = objc_msgSend(v14, "isEqualToSet:", v15);

  v17 = v16 ^ 1;
  v18 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v19 = CUPrintNSObjectOneLine(v5);
    v20 = (id)objc_claimAutoreleasedReturnValue(v19);
    if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
      v21 = *(unsigned __int8 *)(v7 + 504);
    else
      v21 = 0;
    v22 = CUPrintNSObjectOneLine(*(_QWORD *)(v7 + 216));
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    *(_DWORD *)buf = 138413314;
    v35 = v20;
    v36 = 2112;
    v37 = v6;
    v38 = 1024;
    v39 = v17;
    v40 = 1024;
    v41 = v21;
    v42 = 2112;
    v43 = v23;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "getBluetoothAccessInfoWithCompletionHandler accessInfo:%@ error:%@ devicesChanged:%d previousPoweredOn:%d previousAllowed:%@", buf, 0x2Cu);

  }
  v24 = sub_1000419F4();
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_100409194;
  v26[3] = &unk_10092B468;
  v28 = v7;
  v29 = v17;
  v25 = v8;
  v27 = v25;
  sub_100041A34(v24, v26);

}

void sub_10040910C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_100409194(uint64_t a1)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
    {
      if (*(_BYTE *)(v2 + 504))
        sub_1004080F4(v2, 0, 0, 0, 0, 0);
    }
    sub_1004080F4(v2, 1, *(void **)(a1 + 32), 0, 0, 0);
  }
}

void sub_10040921C(uint64_t a1)
{
  sub_1004080F4(*(_QWORD *)(a1 + 32), 0, 0, 0, 0, 0);
}

void sub_100409238(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  objc_msgSend(*(id *)(v1 + 496), "setEventHandler:", 0);
  objc_msgSend(*(id *)(v1 + 496), "invalidate");
  v2 = *(void **)(v1 + 496);
  *(_QWORD *)(v1 + 496) = 0;

}

void sub_100409270(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  uint64_t v12;
  id v13;
  _QWORD v14[4];
  id v15;
  uint64_t v16;
  char v17;
  _QWORD v18[4];
  id v19;
  id v20;
  uint8_t buf[4];
  void *v22;

  if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
  {
    v2 = *(void **)(a1 + 496);
    if (v2)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "availableDevices"));
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 496), "bundleID"));
      v6 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v22 = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "refreshAllowedDevicesForApp Allowed Devices %@", buf, 0xCu);
      }
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_1004094F4;
      v18[3] = &unk_10092DD38;
      v7 = v5;
      v19 = v7;
      v8 = v4;
      v20 = v8;
      objc_msgSend(v3, "enumerateObjectsUsingBlock:", v18);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v8));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", *(_QWORD *)(a1 + 216)));
      v11 = objc_msgSend(v9, "isEqualToSet:", v10);

      v12 = sub_1000419F4();
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_100409634;
      v14[3] = &unk_10092B468;
      v16 = a1;
      v17 = v11 ^ 1;
      v13 = v8;
      v15 = v13;
      sub_100041A34(v12, v14);

    }
  }
}

void sub_100409488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1004094F4(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  unsigned __int8 v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "appAccessInfoMap"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
  v5 = objc_msgSend(v4, "state");

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "appAccessInfoMap"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
  v8 = objc_msgSend(v7, "accessoryOptions");

  if ((objc_msgSend(v12, "flags") & 8) != 0 && (v8 & 1) != 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "bluetoothIdentifier"));
    if (v9)
    {

      if (v5 == (id)25 || v5 == (id)20)
      {
        v10 = *(void **)(a1 + 40);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "bluetoothIdentifier"));
        objc_msgSend(v10, "addObject:", v11);

      }
    }
  }

}

void sub_1004095E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100409634(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  id v10;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD *)(a1 + 40);
    v3 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
        v4 = *(unsigned __int8 *)(v2 + 504);
      else
        v4 = 0;
      v5 = objc_msgSend(*(id *)(a1 + 32), "count");
      v8[0] = 67109376;
      v8[1] = v4;
      v9 = 2048;
      v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "refreshAllowedDevicesForApp isDeviceAccessSessionActive:%d allowedDevices.count:%ld", (uint8_t *)v8, 0x12u);
    }
    if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
    {
      if (*(_BYTE *)(v2 + 504))
      {
        sub_100407F50(v2, 0, 0);
        if (!*(_QWORD *)(v2 + 120) && !*(_BYTE *)(v2 + 209))
        {
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_10092DE88);
          v6 = sub_1002F14B4((uint64_t)off_100978168, v2);
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_10092DE88);
          sub_100019A7C((uint64_t)off_100978168, v6, 0);
        }
      }
    }
    if (objc_msgSend(*(id *)(a1 + 32), "count"))
    {
      sub_100407F50(v2, 1, *(void **)(a1 + 32));
      if (*(_BYTE *)(v2 + 209))
      {
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_10092DE88);
        v7 = sub_1002F14B4((uint64_t)off_100978168, v2);
        if (v7)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 64))(v2, v7);
      }
    }
  }
}

void sub_10040984C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  _QWORD v10[5];
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  uint64_t v14;

  if (_os_feature_enabled_impl("DeviceAccess", "AccessorySetupKit"))
  {
    v2 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_QWORD *)(a1 + 88);
      v4 = *(_QWORD *)(a1 + 496);
      *(_DWORD *)buf = 138412546;
      v12 = v3;
      v13 = 2112;
      v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "registerForDeviceAccessPerAccessory:%@ fDeviceAccessSession:%@", buf, 0x16u);
    }
    if (*(_QWORD *)(a1 + 496))
    {
      v5 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Already registered", buf, 2u);
      }
    }
    else
    {
      *(_BYTE *)(a1 + 504) = 0;
      v6 = objc_alloc_init((Class)DASession);
      v7 = *(void **)(a1 + 496);
      *(_QWORD *)(a1 + 496) = v6;

      objc_msgSend(*(id *)(a1 + 496), "setBundleID:", *(_QWORD *)(a1 + 88));
      objc_msgSend(*(id *)(a1 + 496), "setDispatchQueue:", *(_QWORD *)(sub_1000419F4() + 8));
      objc_msgSend(*(id *)(a1 + 496), "setDeviceFlags:", 8);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100409A3C;
      v10[3] = &unk_10092DD10;
      v10[4] = a1;
      objc_msgSend(*(id *)(a1 + 496), "setEventHandler:", v10);
      v8 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_QWORD *)(a1 + 88);
        *(_DWORD *)buf = 138412290;
        v12 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Session now registering for deviceAccess with bundle ID %@", buf, 0xCu);
      }
      objc_msgSend(*(id *)(a1 + 496), "activate");
    }
  }
}

void sub_100409A3C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _BOOL4 v13;
  int v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void *v19;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (unint64_t)objc_msgSend(v3, "eventType");
  if (v5 <= 0x2A && ((1 << v5) & 0x600C0100400) != 0)
  {
    v7 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v8 = DAEventTypeToString(objc_msgSend(v3, "eventType"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = *(_QWORD *)(v4 + 88);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "error"));
      v14 = 138412802;
      v15 = v9;
      v16 = 2112;
      v17 = v10;
      v18 = 2112;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%@ for bundleID %@ error %@", (uint8_t *)&v14, 0x20u);

    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "error"));
    v13 = v12 == 0;

    if (v13)
      sub_100409270(v4);
  }

}

void sub_100409B8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100409BB4(uint64_t a1, int a2, _OWORD *a3)
{
  NSObject *v6;
  uint64_t v7;
  __int128 v8;
  unsigned int v9;
  id v10;
  id v11;
  _OWORD v12[2];
  uint8_t buf[4];
  uint64_t v14;

  v6 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 88);
    *(_DWORD *)buf = 138412290;
    v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CBCentralSession::setupDAExtensionSession %@", buf, 0xCu);
  }
  v8 = a3[1];
  v12[0] = *a3;
  v12[1] = v8;
  v11 = 0;
  v9 = +[DASession processAllowedWithAuditToken:error:](DASession, "processAllowedWithAuditToken:error:", v12, &v11);
  v10 = v11;
  if (a2)
  {
    if (a2 == 1 && v9)
      *(_BYTE *)(a1 + 505) = 1;
  }
  else if (v9)
  {
    *(_BYTE *)(a1 + 506) = 1;
  }

}

void sub_100409CC4(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v4 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 88);
    v6 = 138412290;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CBCentralSession::setupDAAppSession %@", (uint8_t *)&v6, 0xCu);
  }
  if (a2)
  {
    if (a2 == 1)
      sub_100408754(a1);
  }
  else
  {
    sub_10040984C(a1);
  }
}

void sub_100409D94(uint64_t a1, void *a2, __int16 a3, uint64_t a4, int a5, __int16 a6, int a7, int a8)
{
  id v15;
  id v16;
  _OWORD *v17;
  void *__p[2];
  char v20;
  void **v21;

  v15 = a2;
  v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "UUIDString")));
  sub_100091AE8(__p, (char *)objc_msgSend(v16, "UTF8String"));
  v21 = __p;
  v17 = sub_10040FBDC((uint64_t **)(a1 + 448), (const void **)__p, (uint64_t)&unk_100740F58, (_OWORD **)&v21);
  *((_WORD *)v17 + 28) = a3;
  *((_WORD *)v17 + 29) = a6;
  *((_DWORD *)v17 + 15) = a5;
  *((_DWORD *)v17 + 16) = a7;
  *((_DWORD *)v17 + 17) = a8;
  *((_QWORD *)v17 + 9) = a4;
  objc_storeStrong((id *)v17 + 10, a2);
  if (v20 < 0)
    operator delete(__p[0]);

}

void sub_100409E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_100409EC0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8;
  uint64_t v9;

  v8 = a3;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  v9 = sub_1006281F0((uint64_t)off_1009778A0, a2, v8, a4, a5);

  return v9;
}

void sub_100409F44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100409F54(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  id v24;
  _BYTE *v25;
  int v26;
  NSMutableArray *v27;
  void *v28;
  void *v29;
  void *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;

  v7 = a2;
  v8 = a4;
  v9 = sub_1000438A4();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 2752))(v9))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    v10 = sub_100662248((uint64_t)off_1009778C0, v7);
    v11 = *(void **)(a1 + 392);
    if (a3)
    {
      if ((objc_msgSend(v11, "containsObject:", v7) & 1) != 0)
      {
        v12 = 17;
        goto LABEL_23;
      }
      if (v10)
      {
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
          sub_1006EE948();
LABEL_22:
        v12 = 12;
        goto LABEL_23;
      }
      if ((unint64_t)objc_msgSend(v8, "length") < 2)
      {
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
          sub_1006EE91C();
      }
      else
      {
        v24 = objc_retainAutorelease(v8);
        v25 = objc_msgSend(v24, "bytes");
        v26 = *v25;
        if (*v25)
        {
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_10092DF28);
          v27 = sub_1006620C4((uint64_t)off_1009778C0, 3);
          v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
          if ((unint64_t)objc_msgSend(v28, "count") > 1)
          {
            v38 = qword_100999898;
            if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
              sub_1006EE8B0(v38, v39, v40, v41, v42, v43, v44, v45);
            v12 = 126;
          }
          else
          {
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10092DF28);
            v29 = off_1009778C0;
            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "subdataWithRange:", 1, (char *)objc_msgSend(v24, "length") - 1));
            v12 = sub_100661FF0((uint64_t)v29, v7, v26, v30, 3);

            if ((_DWORD)v12)
            {
              v31 = qword_100999898;
              if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
                sub_1006EE84C(v12, v31, v32, v33, v34, v35, v36, v37);
            }
            else
            {
              objc_msgSend(*(id *)(a1 + 392), "addObject:", v7);
              v12 = 0;
            }
          }

          goto LABEL_23;
        }
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
          sub_1006EE820();
      }
      v12 = 3;
      goto LABEL_23;
    }
    if (!objc_msgSend(v11, "containsObject:", v7))
    {
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
        sub_1006EE9D8();
      goto LABEL_22;
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10092DF28);
    v12 = sub_100661FF0((uint64_t)off_1009778C0, v7, 0, 0, 0);
    if ((_DWORD)v12)
    {
      v13 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
        sub_1006EE974(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    objc_msgSend(*(id *)(a1 + 392), "removeObject:", v7);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      sub_1006EEA04();
    v12 = 11;
  }
LABEL_23:
  v20 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v21 = *(_QWORD *)(a1 + 88);
    v22 = *(_QWORD *)(a1 + 392);
    v46 = 138412546;
    v47 = v21;
    v48 = 2112;
    v49 = v22;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "FastLEConnection:CBCentralSession::enableFastLeConnectionWithDataToDevice session:%@ Fast LE Connection devices:%@", (uint8_t *)&v46, 0x16u);
  }

  return v12;
}

void sub_10040A31C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10040A35C(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  const __CFString *v6;
  id v7;

  v3 = a2;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEBUG))
    sub_1006EEA30();
  if (v3)
  {
    v4 = a1[15];
    if (v4)
    {
      if (*(int *)(v4 - 64) >= 1)
      {
        v6 = CFSTR("kCBMsgArgDeviceUUID");
        v7 = v3;
        v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1));
        sub_10005DC70(a1, 136, v5);

      }
    }
  }

}

void sub_10040A444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_10040A468(_QWORD *a1)
{
  uint64_t v2;
  void **v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;

  v2 = sub_100010C28((uint64_t)a1);
  *(_QWORD *)v2 = off_10092DD68;
  *(_QWORD *)(v2 + 216) = 0;
  *(_WORD *)(v2 + 224) = 0;
  *(_BYTE *)(v2 + 226) = 0;
  *(_OWORD *)(v2 + 232) = 0u;
  v3 = (void **)(v2 + 232);
  *(_OWORD *)(v2 + 248) = 0u;
  *(_BYTE *)(v2 + 264) = 0;
  v4 = objc_alloc_init((Class)NSMutableSet);
  v5 = (void *)a1[30];
  a1[30] = v4;

  v6 = objc_alloc_init((Class)NSMutableSet);
  v7 = *v3;
  *v3 = v6;

  v8 = objc_alloc_init((Class)NSMutableDictionary);
  v9 = (void *)a1[27];
  a1[27] = v8;

  v10 = objc_alloc_init((Class)NSMutableSet);
  v11 = (void *)a1[32];
  a1[32] = v10;

  v12 = objc_alloc_init((Class)NSMutableSet);
  v13 = (void *)a1[31];
  a1[31] = v12;

  return a1;
}

void sub_10040A52C(_Unwind_Exception *a1)
{
  id *v1;

  sub_100010B94((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10040A56C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = off_10092DD68;
  v2 = *(void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;

  v3 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;

  v4 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;

  v5 = *(void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;

  v6 = *(void **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;

  return sub_100010B94(a1);
}

void sub_10040A600(uint64_t a1)
{
  sub_10040A56C(a1);
  operator delete();
}

uint64_t sub_10040A624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  NSObject *v24;
  void **v25;
  NSObject *v26;
  void **v27;
  void *v28;
  void *v29;
  void *v30;
  void *v32;
  void *__p;
  uint64_t *v34;
  char v35;
  void *v36;
  uint64_t *v37;
  uint64_t v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  void **v42;
  uint8_t v43[8];
  __int128 v44;

  v6 = *(unsigned __int16 *)(a3 + 16);
  v7 = *(unsigned __int16 *)(a1 + 224);
  *(_WORD *)(a3 + 18) = v7;
  v8 = *(void **)(a1 + 216);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v6));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v9));

  if (v10)
  {
    v11 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
    {
      sub_1000340DC(a2, (uint64_t)&v36);
      if (v38 >= 0)
        v32 = &v36;
      else
        v32 = v36;
      *(_DWORD *)v43 = 67109378;
      *(_DWORD *)&v43[4] = v6;
      LOWORD(v44) = 2082;
      *(_QWORD *)((char *)&v44 + 2) = v32;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Already published service ID 0x%x for session \"%{public}s\"", v43, 0x12u);
      if (SHIBYTE(v38) < 0)
        operator delete(v36);
    }
    return 1;
  }
  else
  {
    v36 = 0;
    v37 = 0;
    v38 = 0;
    sub_10001FE6C(&v36, a3 + 104);
    v13 = v7 << 16;
    v14 = (uint64_t *)v36;
    v15 = v37;
    while (v14 != v15)
    {
      v16 = *v14++;
      *(_DWORD *)(v16 + 104) = *(unsigned __int16 *)(v16 + 104) | v13;
    }
    *(_QWORD *)v43 = 0;
    v44 = 0uLL;
    sub_10001FE6C(v43, a3 + 136);
    v17 = *(char **)v43;
    if (*(_QWORD *)v43 == (_QWORD)v44)
    {
      v18 = 0;
    }
    else
    {
      v18 = 0;
      do
      {
        v19 = *(_QWORD *)v17;
        v20 = *(unsigned __int16 *)(*(_QWORD *)v17 + 16) | v13;
        *(_DWORD *)(v19 + 16) = v20;
        *(_DWORD *)(*(_QWORD *)(v19 + 96) + 16) = v20;
        sub_10001FE6C(&__p, v19 + 104);
        if (v18)
          operator delete(v18);
        v18 = __p;
        v21 = v34;
        v22 = (uint64_t *)__p;
        if (__p != v34)
        {
          do
          {
            v23 = *v22++;
            *(_DWORD *)(v23 + 16) = *(unsigned __int16 *)(v23 + 16) | v13;
          }
          while (v22 != v21);
        }
        v17 += 8;
      }
      while (v17 != (char *)v44);
    }
    v24 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
    {
      sub_1000340DC(a2, (uint64_t)&__p);
      v25 = v35 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 67109378;
      v40 = v6;
      v41 = 2082;
      v42 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Adding service ID 0x%x for session \"%{public}s\"", buf, 0x12u);
      if (v35 < 0)
        operator delete(__p);
    }
    if (qword_10097AC18 != -1)
      dispatch_once(&qword_10097AC18, &stru_10092DFE8);
    v12 = sub_1003F0A90(qword_10097AC10, a3, 0);
    if (!(_DWORD)v12)
    {
      v26 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
      {
        sub_1000340DC(a2, (uint64_t)&__p);
        v27 = v35 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 67109378;
        v40 = v6;
        v41 = 2082;
        v42 = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Successfully added service ID 0x%x for session \"%{public}s\"", buf, 0x12u);
        if (v35 < 0)
          operator delete(__p);
      }
      if (qword_10097AC18 != -1)
        dispatch_once(&qword_10097AC18, &stru_10092DFE8);
      sub_1003F1BA0(qword_10097AC10);
      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      v29 = *(void **)(a1 + 216);
      v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v6));
      objc_msgSend(v29, "setObject:forKeyedSubscript:", v28, v30);

    }
    if (v18)
      operator delete(v18);
    if (*(_QWORD *)v43)
    {
      *(_QWORD *)&v44 = *(_QWORD *)v43;
      operator delete(*(void **)v43);
    }
    if (v36)
    {
      v37 = (uint64_t *)v36;
      operator delete(v36);
    }
  }
  return v12;
}

void sub_10040AA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  void *v20;

  if (v20)
    operator delete(v20);
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10040AAB4(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void **v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  void **v14;
  void *v15;
  void *v16;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  int v21;
  __int16 v22;
  void **v23;

  v6 = *(void **)(a1 + 216);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", a3));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v7));

  v9 = qword_100999898;
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
    {
      sub_1000340DC(a2, (uint64_t)__p);
      v10 = v19 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109378;
      v21 = a3;
      v22 = 2082;
      v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Removing service ID 0x%x for session \"%{public}s\"", buf, 0x12u);
      if (v19 < 0)
        operator delete(__p[0]);
    }
    v11 = *(unsigned __int16 *)(a1 + 224) << 16;
    if (qword_10097AC18 != -1)
      dispatch_once(&qword_10097AC18, &stru_10092DFE8);
    LODWORD(__p[0]) = v11 | a3;
    v12 = sub_1003F2BF4(qword_10097AC10, (int *)__p);
    if (!(_DWORD)v12)
    {
      v13 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
      {
        sub_1000340DC(a2, (uint64_t)__p);
        v14 = v19 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 67109378;
        v21 = a3;
        v22 = 2082;
        v23 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Successfully removed service ID 0x%x for session \"%{public}s\"", buf, 0x12u);
        if (v19 < 0)
          operator delete(__p[0]);
      }
      if (qword_10097AC18 != -1)
        dispatch_once(&qword_10097AC18, &stru_10092DFE8);
      sub_1003F3A14(qword_10097AC10);
      if (qword_10097AC18 != -1)
        dispatch_once(&qword_10097AC18, &stru_10092DFE8);
      sub_1003F1BA0(qword_10097AC10);
      v15 = *(void **)(a1 + 216);
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", a3));
      objc_msgSend(v15, "removeObjectForKey:", v16);

      v12 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
    {
      sub_1000340DC(a2, (uint64_t)__p);
      sub_1006EEAAC(a3, (uint64_t *)__p, buf, v9);
    }
    v12 = 1010;
  }

  return v12;
}

void sub_10040AD8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10040ADCC(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  void **v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  void **v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  void *__p[2];
  char v24;
  uint8_t v25[128];
  uint8_t buf[4];
  void **v27;

  if (objc_msgSend(*(id *)(a1 + 216), "count"))
  {
    v4 = *(unsigned __int16 *)(a1 + 224);
    v5 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
    {
      sub_1000340DC(a2, (uint64_t)__p);
      v6 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v27 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Removing all services for session \"%{public}s\"", buf, 0xCu);
      if (v24 < 0)
        operator delete(__p[0]);
    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 216), "allKeys"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "sortedArrayUsingSelector:", "compare:"));

    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "reverseObjectEnumerator"));
    v17 = a2;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
    if (v9)
    {
      v10 = v4 << 16;
      v11 = *(_QWORD *)v20;
      do
      {
        v12 = 0;
        do
        {
          if (*(_QWORD *)v20 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)v12);
          if (qword_10097AC18 != -1)
            dispatch_once(&qword_10097AC18, &stru_10092DFE8);
          v14 = qword_10097AC10;
          LODWORD(__p[0]) = v10 | objc_msgSend(v13, "unsignedShortValue");
          sub_1003F2BF4(v14, (int *)__p);
          v12 = (char *)v12 + 1;
        }
        while (v9 != v12);
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
      }
      while (v9);
    }

    objc_msgSend(*(id *)(a1 + 216), "removeAllObjects");
    v15 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
    {
      sub_1000340DC(v17, (uint64_t)__p);
      v16 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Successfully removed all services for session \"%{public}s\"", buf, 0xCu);
      if (v24 < 0)
        operator delete(__p[0]);
    }
    if (qword_10097AC18 != -1)
      dispatch_once(&qword_10097AC18, &stru_10092DFE8);
    sub_1003F3A14(qword_10097AC10);
    if (qword_10097AC18 != -1)
      dispatch_once(&qword_10097AC18, &stru_10092DFE8);
    sub_1003F1BA0(qword_10097AC10);

  }
}

void sub_10040B0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_10040B118(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  BTUUID *v13;
  void *v14;
  _QWORD *v15;
  __int128 *v16;
  __int128 *v17;
  __int128 v18;
  unsigned int v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  NSData *v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  BOOL v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  char v41;
  char v42;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  void *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  void *v52[2];
  _OWORD v53[2];
  __int128 v54;
  void *__p[2];
  uint64_t v56;
  __int128 v57;
  uint64_t v58;

  if (*(_BYTE *)(a1 + 128))
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEBUG))
      sub_1006EEC9C();
    v7 = *(_QWORD *)(a1 + 120);
    if (!v7 || *(int *)(v7 - 64) < 1)
      goto LABEL_89;
    if (qword_10097AC58 != -1)
      dispatch_once(&qword_10097AC58, &stru_10092DEA8);
    if (sub_100005E48(qword_10097AC50, 2uLL, *(void **)(a1 + 88))
      && !*(_DWORD *)(*(_QWORD *)(a3 + 8) + 440))
    {
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
        sub_1006EEC3C();
      return 348;
    }
    else
    {
LABEL_89:
      if (*(_BYTE *)(a1 + 226))
      {
        v8 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
          sub_1006EEB88(a2, v8);
        return 122;
      }
      else
      {
        objc_msgSend(*(id *)(a1 + 232), "removeAllObjects");
        v10 = *(_QWORD *)(a3 + 8);
        v50 = 0;
        v51 = 0;
        v49 = 0;
        sub_1000B61B8((char *)&v49, *(__int128 **)(v10 + 88), *(__int128 **)(v10 + 96), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v10 + 96) - *(_QWORD *)(v10 + 88)) >> 2));
        v12 = (unsigned __int8 *)v49;
        v11 = v50;
        if (v49 != v50)
        {
          do
          {
            v52[0] = 0;
            v52[1] = 0;
            v13 = +[BTUUID UUIDWithBytes:length:](BTUUID, "UUIDWithBytes:length:", v52, sub_1000689E4(v12, v52));
            v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
            if (v14)
              objc_msgSend(*(id *)(a1 + 232), "addObject:", v14);

            v12 += 20;
          }
          while (v12 != v11);
        }
        if (qword_100977C30 != -1)
          dispatch_once(&qword_100977C30, &stru_10092E028);
        v9 = sub_1005FC670((uint64_t)off_100977C28, a2, a3, a4);
        if (!(_DWORD)v9)
        {
          v15 = *(_QWORD **)(a3 + 8);
          v16 = (__int128 *)v15[8];
          v17 = (__int128 *)v15[9];
          if (v16 != v17)
          {
            do
            {
              v52[0] = 0;
              v52[1] = 0;
              LODWORD(v53[0]) = 0;
              v18 = *v16;
              LODWORD(v53[0]) = *((_DWORD *)v16 + 4);
              *(_OWORD *)v52 = v18;
              v57 = 0uLL;
              v19 = sub_1000689E4((unsigned __int8 *)v52, &v57);
              if (v19 == 16 || v19 == 2)
              {
                v20 = *(void **)(a1 + 240);
                v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v57, v19));
                objc_msgSend(v20, "addObject:", v21);

              }
              v16 = (__int128 *)((char *)v16 + 20);
            }
            while (v16 != v17);
            v15 = *(_QWORD **)(a3 + 8);
          }
          v22 = (_QWORD *)v15[14];
          v23 = v15 + 15;
          if (v22 != v15 + 15)
          {
            do
            {
              memset((char *)v53 + 4, 0, 20);
              LODWORD(v53[0]) = *((_DWORD *)v22 + 12);
              *(_OWORD *)v52 = *((_OWORD *)v22 + 2);
              v24 = v22[8];
              *((_QWORD *)&v53[0] + 1) = &off_100918258;
              *(_QWORD *)&v53[1] = v24;
              if (v24)
                sub_10003C37C(v24);
              v57 = 0uLL;
              v25 = sub_1000689E4((unsigned __int8 *)v52, &v57);
              v26 = sub_10003EB18((uint64_t)v53 + 8);
              v27 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v26, sub_10003F8C4((uint64_t)v53 + 8));
              v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
              if (v25 == 2)
              {
                v29 = *(void **)(a1 + 248);
                v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v57, 2));
                objc_msgSend(v29, "addObject:", v30);

                objc_msgSend(*(id *)(a1 + 248), "addObject:", v28);
              }

              *((_QWORD *)&v53[0] + 1) = &off_100918258;
              if (*(_QWORD *)&v53[1])
                sub_100056AAC(*(unsigned int **)&v53[1]);
              v31 = (_QWORD *)v22[1];
              if (v31)
              {
                do
                {
                  v32 = v31;
                  v31 = (_QWORD *)*v31;
                }
                while (v31);
              }
              else
              {
                do
                {
                  v32 = (_QWORD *)v22[2];
                  v33 = *v32 == (_QWORD)v22;
                  v22 = v32;
                }
                while (!v33);
              }
              v22 = v32;
            }
            while (v32 != v23);
          }
          *(_BYTE *)(a1 + 226) = 1;
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_10092DE88);
          if (sub_10006F648((uint64_t)off_100978168, a2))
          {
            if (qword_100978170 != -1)
              dispatch_once(&qword_100978170, &stru_10092DE88);
            v34 = sub_1002DE254((uint64_t)off_100978168, a2);
            v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
            v36 = v35;
            v57 = 0uLL;
            v58 = 0;
            if (v35)
              sub_100091AE8(&v57, (char *)objc_msgSend(objc_retainAutorelease(v35), "UTF8String"));
            else
              sub_100091AE8(&v57, "");
            if (qword_100978170 != -1)
              dispatch_once(&qword_100978170, &stru_10092DE88);
            v37 = sub_1002DE2B8((uint64_t)off_100978168, a2);
            v38 = (void *)objc_claimAutoreleasedReturnValue(v37);

            v47 = 0uLL;
            v48 = 0;
            if (v38)
              sub_100091AE8(&v47, (char *)objc_msgSend(objc_retainAutorelease(v38), "UTF8String"));
            else
              sub_100091AE8(&v47, "");
            if (qword_100978170 != -1)
              dispatch_once(&qword_100978170, &stru_10092DE88);
            v39 = sub_1002DE31C((uint64_t)off_100978168, a2);
            v40 = (void *)objc_claimAutoreleasedReturnValue(v39);

            v45 = 0uLL;
            v46 = 0;
            if (v40)
              sub_100091AE8(&v45, (char *)objc_msgSend(objc_retainAutorelease(v40), "UTF8String"));
            else
              sub_100091AE8(&v45, "");
            if (qword_100978170 != -1)
              dispatch_once(&qword_100978170, &stru_10092DE88);
            v41 = sub_1002F240C((uint64_t)off_100978168, a2);
            if (qword_100978170 != -1)
              dispatch_once(&qword_100978170, &stru_10092DE88);
            v42 = sub_10006F6A4((uint64_t)off_100978168, a2);
            v56 = 0;
            v54 = 0u;
            *(_OWORD *)__p = 0u;
            memset(v53, 0, sizeof(v53));
            *(_OWORD *)v52 = 0u;
            sub_10047D520((uint64_t)v52, &v45, v42, 0, 0, v41, 2, &v47, &v57);
            if (qword_10097AC48 != -1)
              dispatch_once(&qword_10097AC48, &stru_10092DEE8);
            sub_10006544C(qword_10097AC40, (uint64_t)v52);
            if (SHIBYTE(v56) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v54) < 0)
              operator delete(*((void **)&v53[1] + 1));
            if (SHIBYTE(v53[0]) < 0)
              operator delete(v52[1]);
            if (SHIBYTE(v46) < 0)
              operator delete((void *)v45);
            if (SHIBYTE(v48) < 0)
              operator delete((void *)v47);
            if (SHIBYTE(v58) < 0)
              operator delete((void *)v57);

          }
          v9 = 0;
        }
        if (v49)
        {
          v50 = (unsigned __int8 *)v49;
          operator delete(v49);
        }
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      sub_1006EEB28();
    return 341;
  }
  return v9;
}

void sub_10040B81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;
  uint64_t v32;

  sub_1003FCF70((uint64_t)&a27);
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v32 - 97) < 0)
    operator delete(*(void **)(v32 - 120));

  if (a24)
    operator delete(a24);
  _Unwind_Resume(a1);
}

uint64_t sub_10040B928(uint64_t result, unint64_t a2)
{
  uint64_t v3;

  if (*(_BYTE *)(result + 226))
  {
    v3 = result;
    objc_msgSend(*(id *)(result + 232), "removeAllObjects");
    objc_msgSend(*(id *)(v3 + 240), "removeAllObjects");
    objc_msgSend(*(id *)(v3 + 248), "removeAllObjects");
    if (qword_100977C30 != -1)
      dispatch_once(&qword_100977C30, &stru_10092E028);
    result = sub_1005FEF50((uint64_t)off_100977C28, a2);
    *(_BYTE *)(v3 + 226) = 0;
  }
  return result;
}

BOOL sub_10040B9A4(uint64_t a1)
{
  return *(_BYTE *)(a1 + 226) || objc_msgSend(*(id *)(a1 + 216), "count") != 0;
}

void sub_10040B9D4(_QWORD *a1, uint64_t a2, void *a3, unsigned int *a4, unsigned __int16 *a5, unsigned int *a6)
{
  id v10;
  NSNumber *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[5];
  _QWORD v18[5];

  v10 = a3;
  v18[0] = v10;
  v17[0] = CFSTR("kCBMsgArgDeviceUUID");
  v17[1] = CFSTR("kCBMsgArgATTMTU");
  if (qword_10097AC18 != -1)
    dispatch_once(&qword_10097AC18, &stru_10092DFE8);
  v11 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", sub_100006180(qword_10097AC10, v10));
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v18[1] = v12;
  v17[2] = CFSTR("kCBMsgArgAttributeID");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *a4));
  v18[2] = v13;
  v17[3] = CFSTR("kCBMsgArgOffset");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *a5));
  v18[3] = v14;
  v17[4] = CFSTR("kCBMsgArgTransactionID");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *a6));
  v18[4] = v15;
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 5));

  sub_10005DC70(a1, 52, v16);
}

void sub_10040BB74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10040BBC8(_QWORD *a1, uint64_t a2, void *a3, unsigned int **a4, unsigned int *a5)
{
  id v8;
  NSNumber *v9;
  void *v10;
  void *v11;
  id v12;
  unsigned int *i;
  id v14;
  uint64_t v15;
  NSData *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  id v22;

  v22 = a3;
  v8 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(v8, "setObject:forKey:", v22, CFSTR("kCBMsgArgDeviceUUID"));
  if (qword_10097AC18 != -1)
    dispatch_once(&qword_10097AC18, &stru_10092DFE8);
  v9 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", sub_100006180(qword_10097AC10, v22));
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  objc_msgSend(v8, "setObject:forKey:", v10, CFSTR("kCBMsgArgATTMTU"));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *a5));
  objc_msgSend(v8, "setObject:forKey:", v11, CFSTR("kCBMsgArgTransactionID"));
  v21 = a1;

  v12 = objc_alloc_init((Class)NSMutableArray);
  for (i = *a4; i != a4[1]; i += 8)
  {
    v14 = objc_alloc_init((Class)NSMutableDictionary);
    v15 = sub_10003EB18((uint64_t)(i + 2));
    v16 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v15, sub_10003F8C4((uint64_t)(i + 2)));
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *i));
    objc_msgSend(v14, "setObject:forKey:", v18, CFSTR("kCBMsgArgAttributeID"));

    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *((unsigned __int16 *)i + 2)));
    objc_msgSend(v14, "setObject:forKey:", v19, CFSTR("kCBMsgArgOffset"));

    objc_msgSend(v14, "setObject:forKey:", v17, CFSTR("kCBMsgArgData"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", *((unsigned __int8 *)i + 24)));
    objc_msgSend(v14, "setObject:forKey:", v20, CFSTR("kCBMsgArgIgnoreResponse"));

    objc_msgSend(v12, "addObject:", v14);
  }
  objc_msgSend(v8, "setObject:forKey:", v12, CFSTR("kCBMsgArgATTWrites"));
  sub_10005DC70(v21, 53, v8);

}

void sub_10040BE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_10040BEB8(_QWORD *a1, uint64_t a2, unsigned int *a3, void *a4, int a5)
{
  id v8;
  NSNumber *v9;
  void *v10;
  void *v11;
  const __CFString *v12;
  id v13;

  v13 = a4;
  v8 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(v8, "setObject:forKey:", v13, CFSTR("kCBMsgArgDeviceUUID"));
  if (qword_10097AC18 != -1)
    dispatch_once(&qword_10097AC18, &stru_10092DFE8);
  v9 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", sub_100006180(qword_10097AC10, v13));
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  objc_msgSend(v8, "setObject:forKey:", v10, CFSTR("kCBMsgArgATTMTU"));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *a3));
  objc_msgSend(v8, "setObject:forKey:", v11, CFSTR("kCBMsgArgAttributeID"));

  if (a5)
    v12 = CFSTR("Notify");
  else
    v12 = CFSTR("Indicate");
  objc_msgSend(v8, "setObject:forKey:", v12, CFSTR("kCBMsgArgType"));
  sub_10005DC70(a1, 54, v8);

}

void sub_10040BFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_10040C02C(_QWORD *a1, uint64_t a2, unsigned int *a3, void *a4)
{
  id v6;
  NSNumber *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a4;
  v6 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(v6, "setObject:forKey:", v10, CFSTR("kCBMsgArgDeviceUUID"));
  if (qword_10097AC18 != -1)
    dispatch_once(&qword_10097AC18, &stru_10092DFE8);
  v7 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", sub_100006180(qword_10097AC10, v10));
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  objc_msgSend(v6, "setObject:forKey:", v8, CFSTR("kCBMsgArgATTMTU"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *a3));
  objc_msgSend(v6, "setObject:forKey:", v9, CFSTR("kCBMsgArgAttributeID"));

  sub_10005DC70(a1, 55, v6);
}

void sub_10040C13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_10040C174(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  id v9;
  void *v10;
  int v11;
  NSObject *v12;
  const char *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  id v23;
  __int16 v24;
  void **v25;

  v9 = a3;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a4));
  objc_msgSend(*(id *)(a1 + 80), "setObject:forKeyedSubscript:", v10, v9);

  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_10092DE88);
  v11 = sub_1002E0FA0((uint64_t)off_100978168, v9);
  v12 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
  {
    v13 = sub_1002F04A8(v11);
    sub_1000340DC(a2, (uint64_t)__p);
    v14 = v19 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446722;
    v21 = v13;
    v22 = 2114;
    v23 = v9;
    v24 = 2082;
    v25 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Requesting \"%{public}s\" connection latency to device \"%{public}@\" for session \"%{public}s\"", buf, 0x20u);
    if (v19 < 0)
      operator delete(__p[0]);
  }
  if (v11 == (_DWORD)a4)
  {
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10092DF08);
    v15 = sub_10061E160((uint64_t)off_1009778A0, v9, a4, a5);
    v16 = v15;
    if ((_DWORD)v15 && (_DWORD)v15 != 914)
      objc_msgSend(*(id *)(a1 + 80), "removeObjectForKey:", v9);
  }
  else
  {
    v16 = 915;
  }

  return v16;
}

void sub_10040C378(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10040C3A8(uint64_t a1)
{
  double Current;
  double v3;
  uint64_t v4;
  double v5;
  _QWORD *v6;
  _QWORD **v7;
  BOOL v8;
  id *v9;
  double v10;
  id *v11;
  id **v12;
  id *v13;
  _QWORD *v14[2];
  _QWORD **v15;
  _QWORD *v16[2];
  id *v17;

  Current = CFAbsoluteTimeGetCurrent();
  if (Current <= 86400.0)
    v3 = 0.0;
  else
    v3 = Current + -86400.0;
  v16[0] = 0;
  v16[1] = 0;
  v15 = v16;
  sub_10040C5BC((uint64_t *)&v15, *(_QWORD **)(a1 + 136), (_QWORD *)(a1 + 144));
  sub_100010D8C(a1 + 136, *(_QWORD **)(a1 + 144));
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  v4 = (uint64_t)v15;
  if (v15 != v16)
  {
    do
    {
      v5 = *(double *)(v4 + 40);
      if (v5 > v3)
      {
        v13 = (id *)(v4 + 32);
        *((double *)sub_10040FDE8((uint64_t **)(a1 + 136), (unint64_t *)(v4 + 32), (uint64_t)&unk_100740F58, &v13)
        + 5) = v5;
      }
      v6 = *(_QWORD **)(v4 + 8);
      if (v6)
      {
        do
        {
          v7 = (_QWORD **)v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = *(_QWORD ***)(v4 + 16);
          v8 = *v7 == (_QWORD *)v4;
          v4 = (uint64_t)v7;
        }
        while (!v8);
      }
      v4 = (uint64_t)v7;
    }
    while (v7 != v16);
  }
  v14[0] = 0;
  v14[1] = 0;
  v13 = (id *)v14;
  sub_10040C5BC((uint64_t *)&v13, *(_QWORD **)(a1 + 160), (_QWORD *)(a1 + 168));
  sub_100010D8C(a1 + 160, *(_QWORD **)(a1 + 168));
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  v9 = v13;
  if (v13 != (id *)v14)
  {
    do
    {
      v10 = *((double *)v9 + 5);
      if (v10 > v3)
      {
        v17 = v9 + 4;
        *((double *)sub_10040FDE8((uint64_t **)(a1 + 160), (unint64_t *)v9 + 4, (uint64_t)&unk_100740F58, &v17) + 5) = v10;
      }
      v11 = (id *)v9[1];
      if (v11)
      {
        do
        {
          v12 = (id **)v11;
          v11 = (id *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (id **)v9[2];
          v8 = *v12 == v9;
          v9 = (id *)v12;
        }
        while (!v8);
      }
      v9 = (id *)v12;
    }
    while (v12 != v14);
  }
  sub_100010D8C((uint64_t)&v13, v14[0]);
  sub_100010D8C((uint64_t)&v15, v16[0]);
}

void sub_10040C588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_100010D8C((uint64_t)&a9, a10);
  sub_100010D8C((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t *sub_10040C5BC(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_10040FD54(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_10040C640(uint64_t **a1, void *a2)
{
  id v3;
  CFAbsoluteTime Current;
  id v6;
  id *v7;

  v3 = a2;
  v6 = v3;
  sub_10040C3A8((uint64_t)a1);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  if (sub_1006589A8((uint64_t)off_1009778C0, v3) == 23)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v7 = &v6;
    *((CFAbsoluteTime *)sub_10040FDE8(a1 + 17, (unint64_t *)&v6, (uint64_t)&unk_100740F58, &v7) + 5) = Current;
    ((void (*)(uint64_t **))(*a1)[15])(a1);
    v3 = v6;
  }

  return 1;
}

void sub_10040C70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_10040C720(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  NSObject *v4;
  id v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint8_t buf[4];
  CFAbsoluteTime Current;
  __int16 v13;
  uint64_t v14;

  v2 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    Current = CFAbsoluteTimeGetCurrent();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump:         fGattWakeHistoryMap: %f", buf, 0xCu);
  }
  v3 = *(_QWORD **)(a1 + 136);
  if (v3 != (_QWORD *)(a1 + 144))
  {
    v4 = qword_100999898;
    do
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v3[4], "UUIDString")));
        v6 = objc_msgSend(v5, "UTF8String");
        v7 = v3[5];
        *(_DWORD *)buf = 136446466;
        Current = *(double *)&v6;
        v13 = 2048;
        v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:         %{public}s: %f", buf, 0x16u);

        v4 = qword_100999898;
      }
      v8 = (_QWORD *)v3[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v3[2];
          v10 = *v9 == (_QWORD)v3;
          v3 = v9;
        }
        while (!v10);
      }
      v3 = v9;
    }
    while (v9 != (_QWORD *)(a1 + 144));
  }
}

void sub_10040C8AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10040C8C4(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  NSObject *v4;
  uint64_t v5;
  _DWORD v7[2];
  __int16 v8;
  uint64_t v9;

  v2 = sub_1000438A4();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 2416))(v2))
    return 1;
  sub_10040C3A8(a1);
  v3 = *(_DWORD *)(a1 + 152);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_10092DE88);
  if (v3 > *((unsigned __int16 *)off_100978168 + 184))
  {
    v4 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 88);
      v7[0] = 67109378;
      v7[1] = v3;
      v8 = 2114;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "We are over GATT AP Wake limit count %d for session %{public}@ ", (uint8_t *)v7, 0x12u);
    }
    return 1;
  }
  return 0;
}

uint64_t sub_10040C9E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  NSObject *v6;
  uint64_t v7;
  _DWORD v8[2];
  __int16 v9;
  unsigned int v10;
  __int16 v11;
  uint64_t v12;

  v2 = sub_1000438A4();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 2416))(v2);
  if ((_DWORD)result)
  {
    v4 = *(_DWORD *)(a1 + 152);
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10092DE88);
    v5 = *((unsigned __int16 *)off_100978168 + 185);
    if (v4 <= v5)
    {
      return 0;
    }
    else
    {
      v6 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_QWORD *)(a1 + 88);
        v8[0] = 67109634;
        v8[1] = v4;
        v9 = 1024;
        v10 = v5;
        v11 = 2114;
        v12 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "We are near the max GATT AP Wake limit count %d : NearLimit %d for session %{public}@ ", (uint8_t *)v8, 0x18u);
      }
      return 1;
    }
  }
  return result;
}

BOOL sub_10040CB08(uint64_t a1, void *a2)
{
  id v3;
  CFAbsoluteTime Current;
  double v5;
  BOOL v6;
  double v7;
  CFAbsoluteTime v8;
  NSObject *v9;
  uint64_t v10;
  CFAbsoluteTime v11;
  int v12;
  int v13;
  uint64_t v14;
  _BOOL8 v15;
  id v17;
  _BYTE buf[12];
  __int16 v19;
  CFAbsoluteTime v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  uint64_t v28;

  v3 = a2;
  v17 = v3;
  if (!*(_BYTE *)(a1 + 28))
    goto LABEL_11;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  if (sub_1006589A8((uint64_t)off_1009778C0, v3) == 23)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v5 = Current - (double)0xAu;
    v6 = Current <= (double)0xAu;
    v7 = 0.0;
    if (!v6)
      v7 = v5;
    if (*(double *)(a1 + 48) > v7)
    {
      v8 = CFAbsoluteTimeGetCurrent();
      *(_QWORD *)buf = &v17;
      *((CFAbsoluteTime *)sub_10040FDE8((uint64_t **)(a1 + 160), (unint64_t *)&v17, (uint64_t)&unk_100740F58, (id **)buf)+ 5) = v8;
      v9 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *(_QWORD *)(a1 + 48);
        v11 = CFAbsoluteTimeGetCurrent();
        v12 = *(unsigned __int16 *)(a1 + 152);
        v13 = *(unsigned __int16 *)(a1 + 176);
        v14 = *(_QWORD *)(a1 + 88);
        *(_DWORD *)buf = 134219266;
        *(_QWORD *)&buf[4] = v10;
        v19 = 2048;
        v20 = v11;
        v21 = 1024;
        v22 = v12;
        v23 = 1024;
        v24 = v13;
        v25 = 2114;
        v26 = (unint64_t)v17;
        v27 = 2114;
        v28 = v14;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "App is over assertion limit (%f:%f) while in background. Count %d:%d : this to count \"%{public}@\" on suspended session \"%{public}@\" ", buf, 0x36u);
      }
    }
    v15 = *(_QWORD *)(a1 + 176) > 0xC8uLL;
    v3 = v17;
  }
  else
  {
LABEL_11:
    v15 = 0;
  }

  return v15;
}

void sub_10040CCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void sub_10040CD00(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  const __CFString *v5;
  void *v6;

  v5 = CFSTR("kCBMsgArgReason");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a2));
  v6 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v6, &v5, 1));

  sub_10005DC70(a1, 62, v4);
}

void sub_10040CDB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10040CDDC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6)
{
  int v8;
  int v9;
  int v11;
  unsigned int v12;

  v12 = a3;
  v8 = *(unsigned __int16 *)(a1 + 224);
  v9 = *a6;
  if (qword_10097AC18 != -1)
    dispatch_once(&qword_10097AC18, &stru_10092DFE8);
  v11 = v9 | (v8 << 16);
  return sub_1003F3CD4(qword_10097AC10, &v12, a4, a5, &v11);
}

void sub_10040CE64(uint64_t a1, uint64_t a2, void *a3, unsigned __int16 a4)
{
  id v7;
  int v8;
  void *v9;
  id v10;

  v7 = a3;
  v8 = *(unsigned __int16 *)(a1 + 224) << 16;
  v10 = v7;
  if (qword_10097AC18 == -1)
  {
    v9 = v7;
  }
  else
  {
    dispatch_once(&qword_10097AC18, &stru_10092DFE8);
    v9 = v10;
  }
  sub_1003F3EC0(qword_10097AC10, a2, v9, v8 | a4);

}

void sub_10040CEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_10040CF10(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  int v11;
  id v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  const char *v22;

  if (!*(_BYTE *)(a1 + 24)
    || !*(_QWORD *)(a1 + 96)
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    return 0;
  }
  v2 = objc_msgSend(objc_alloc((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(v2, "encodeObject:forKey:", *(_QWORD *)(a1 + 88), CFSTR("bundleIdentifier"));
  objc_msgSend(v2, "encodeObject:forKey:", *(_QWORD *)(a1 + 96), CFSTR("restoreIdentifier"));
  objc_msgSend(v2, "encodeObject:forKey:", *(_QWORD *)(a1 + 240), CFSTR("advertisedServices"));
  objc_msgSend(v2, "encodeObject:forKey:", *(_QWORD *)(a1 + 248), CFSTR("advertisedServiceData"));
  objc_msgSend(v2, "encodeBool:forKey:", *(unsigned __int8 *)(a1 + 226), CFSTR("isAdvertising"));
  v3 = qword_1009998F0;
  if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 88);
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 240);
    v7 = *(_QWORD *)(a1 + 248);
    if (*(_BYTE *)(a1 + 226))
      v8 = "True";
    else
      v8 = "False";
    v11 = 138413570;
    v12 = v2;
    v13 = 2114;
    v14 = v4;
    v15 = 2114;
    v16 = v5;
    v17 = 2114;
    v18 = v6;
    v19 = 2114;
    v20 = v7;
    v21 = 2082;
    v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Saving Peripheral - restoration data: %@ bundleId: %{public}@, restorationId: %{public}@, advertisingServices: %{public}@, advertisingServiceData: %{public}@, isAdvertising: %{public}s", (uint8_t *)&v11, 0x3Eu);
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "encodedData"));

  return v9;
}

void sub_10040D0C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10040D0E0(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v21;
  uint8_t buf[4];
  id v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  const char *v29;

  v3 = a2;
  if (v3)
  {
    v21 = 0;
    v4 = objc_msgSend(objc_alloc((Class)NSKeyedUnarchiver), "initForReadingFromData:error:", v3, &v21);
    v5 = v21;
    v6 = qword_1009998F0;
    if (v4)
    {
      if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v23 = v4;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Restoring Peripheral restoration data: %@", buf, 0xCu);
      }
      v7 = objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(NSString), CFSTR("bundleIdentifier"));
      v8 = objc_claimAutoreleasedReturnValue(v7);
      v9 = *(void **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v8;

      v10 = objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(NSString), CFSTR("restoreIdentifier"));
      v11 = objc_claimAutoreleasedReturnValue(v10);
      v12 = *(void **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = v11;

      if (*(_QWORD *)(a1 + 88) && *(_QWORD *)(a1 + 96))
      {
        v13 = objc_alloc_init((Class)NSMutableSet);
        v14 = *(void **)(a1 + 240);
        *(_QWORD *)(a1 + 240) = v13;

        objc_msgSend(v4, "decodeBoolForKey:", CFSTR("isAdvertisingContactTracing"));
        *(_BYTE *)(a1 + 226) = 0;
        v15 = qword_1009998F0;
        v16 = 1;
        if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_INFO))
        {
          v17 = *(void **)(a1 + 88);
          v18 = *(_QWORD *)(a1 + 96);
          v19 = *(_QWORD *)(a1 + 240);
          *(_DWORD *)buf = 138544130;
          v23 = v17;
          v24 = 2114;
          v25 = v18;
          v26 = 2114;
          v27 = v19;
          v28 = 2082;
          v29 = "False";
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Peripheral Restoring - bundleId: %{public}@, restorationId: %{public}@, advertisingServices: %{public}@, isAdvertising: %{public}s ", buf, 0x2Au);
        }
        *(_BYTE *)(a1 + 209) = 1;
        goto LABEL_14;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_ERROR))
    {
      sub_1006EECFC();
    }
    v16 = 0;
LABEL_14:

    goto LABEL_15;
  }
  v16 = 0;
LABEL_15:

  return v16;
}

void sub_10040D31C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10040D344(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = qword_1009998F0;
  if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 88);
    v4 = 138543362;
    v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Continuing after restore: %{public}@", (uint8_t *)&v4, 0xCu);
  }
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_10092DE88);
  sub_1002EF308((uint64_t)off_100978168, *(void **)(a1 + 88));
}

uint64_t sub_10040D420(uint64_t a1, unint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t v16[128];
  uint8_t buf[4];
  uint64_t v18;

  v4 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 88);
    *(_DWORD *)buf = 138543362;
    v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Clear all state for peripheral session \"%{public}@\"", buf, 0xCu);
  }
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v6 = *(id *)(a1 + 216);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v13;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v13 != v8)
          objc_enumerationMutation(v6);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 216), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v9), (_QWORD)v12));
        objc_msgSend(v10, "removeAllObjects");

        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v7);
  }

  objc_msgSend(*(id *)(a1 + 80), "removeAllObjects");
  return sub_10040B928(a1, a2);
}

void sub_10040D594(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10040D5C0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

void sub_10040D5CC(uint64_t a1)
{
  void *v2;
  void *v3;
  const __CFString *v4;
  void *v5;

  v4 = CFSTR("kCBMsgArgResult");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:"));
  v5 = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1));

  *(_BYTE *)(a1 + 226) = 0;
  objc_msgSend(*(id *)(a1 + 232), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 240), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 248), "removeAllObjects");
  sub_10005DC70((_QWORD *)a1, 48, v3);

}

void sub_10040D69C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10040D6C0(uint64_t a1, void *a2, int a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v5 = a2;
  v6 = *(void **)(a1 + 256);
  if (!a3)
  {
    if (objc_msgSend(v6, "containsObject:", v5))
    {
      objc_msgSend(*(id *)(a1 + 256), "removeObject:", v5);
      goto LABEL_6;
    }
LABEL_11:
    v10 = 17;
    goto LABEL_17;
  }
  if ((objc_msgSend(v6, "containsObject:", v5) & 1) != 0)
    goto LABEL_11;
  objc_msgSend(*(id *)(a1 + 256), "addObject:", v5);
LABEL_6:
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092DF08);
  sub_1006167B8((uint64_t)off_1009778A0, v5, (uint64_t)&v17);
  if ((_QWORD)v17)
  {
    v7 = objc_msgSend(*((id *)&v17 + 1), "mutableCopy");
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 88);
    if (a3)
      objc_msgSend(v7, "addObject:", v9);
    else
      objc_msgSend(v7, "removeObject:", v9);
    objc_storeStrong((id *)&v17 + 1, v8);
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10092DF08);
    v11 = off_1009778A0;
    v13[0] = (id)v17;
    v13[1] = *((id *)&v17 + 1);
    v14 = v18;
    v15 = v19;
    v16 = v20;
    sub_1006168D8((uint64_t)v11, v5, (uint64_t)v13);

  }
  v10 = 0;
LABEL_17:

  return v10;
}

void sub_10040D854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

id sub_10040D88C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 256), "containsObject:", a2);
}

uint64_t sub_10040D898(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;

  v2 = sub_100010C28(a1);
  *(_QWORD *)v2 = &off_10092DE00;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_DWORD *)(v2 + 248) = 0;
  v3 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v4 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v3;

  v5 = objc_alloc_init((Class)NSMutableSet);
  v6 = *(void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v5;

  return a1;
}

void sub_10040D90C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100010B94(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10040D934(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &off_10092DE00;
  v2 = *(void **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;

  v3 = *(void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;

  return sub_100010B94(a1);
}

void sub_10040D98C(uint64_t a1)
{
  sub_10040D934(a1);
  operator delete();
}

BOOL sub_10040D9B0(uint64_t a1, int64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  BTQueuedMessage *v7;

  v5 = a3;
  v6 = *(_QWORD *)(a1 + 216);
  if (v6)
  {
    sub_10005DF3C(v6 - 144, a2, v5);
  }
  else
  {
    v7 = -[BTQueuedMessage initWithMsg:arguments:]([BTQueuedMessage alloc], "initWithMsg:arguments:", a2, v5);
    sub_1003FC964(a1, v7);
    if (sub_10005DEDC(a1) == (id)1)
    {
      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_10092DE88);
      sub_1002EF308((uint64_t)off_100978168, *(void **)(a1 + 88));
    }

  }
  return v6 != 0;
}

void sub_10040DA80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_10040DAA0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 240), "count") != 0;
}

uint64_t sub_10040DAC0()
{
  return 0;
}

uint64_t sub_10040DAC8()
{
  return 0;
}

id sub_10040DAD4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v5;
  uint64_t v6;

  v2 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 88);
    v5 = 138543362;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Clear all state for classic session \"%{public}@\"", (uint8_t *)&v5, 0xCu);
  }
  objc_msgSend(*(id *)(a1 + 232), "removeAllObjects");
  return objc_msgSend(*(id *)(a1 + 240), "removeAllObjects");
}

uint64_t sub_10040DB88(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

void sub_10040DB94(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _BOOL4 v12;
  NSObject *v13;
  void **v14;
  unsigned int *v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  void **v19;
  int v20;
  int64x2_t *v21;
  uint64_t v22;
  void *__p[2];
  char v24;
  _BYTE buf[32];

  v7 = a3;
  v8 = a4;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  v9 = sub_1000589DC((uint64_t)off_1009778C0, v7, 0);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092DFA8);
  v10 = sub_10006D488((uint64_t)off_1009778E0, v9, 1);
  if (!v10)
  {
    sub_10040E00C(a1, v7, 3, 0);
    goto LABEL_39;
  }
  objc_msgSend(*(id *)(a1 + 240), "addObject:", v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 232), "objectForKey:", v7));

  if (v11)
  {
    v12 = sub_10043FC5C(v10);
    v13 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(a2, (uint64_t)__p);
      v14 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)&buf[8] = 2114;
      *(_QWORD *)&buf[10] = v7;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Attempting to add device (%d) \"%{public}@\" more than once for session \"%{public}s\"", buf, 0x1Cu);
      if (v24 < 0)
      {
        operator delete(__p[0]);
        if (!v12)
          goto LABEL_39;
        goto LABEL_13;
      }
    }
    if (v12)
    {
LABEL_13:
      v15 = sub_10043FE04(v10);
      sub_10040E00C(a1, v7, 0, (uint64_t)v15);
    }
  }
  else
  {
    v16 = qword_1009998C8;
    if (os_log_type_enabled((os_log_t)qword_1009998C8, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(_QWORD *)(a1 + 88);
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "App connecting - {cbuuid: %{public}@, bundle: %{public}@}", buf, 0x16u);
    }
    v18 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(a2, (uint64_t)__p);
      v19 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)&buf[4] = v7;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v19;
      *(_WORD *)&buf[22] = 2114;
      *(_QWORD *)&buf[24] = v8;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Connecting device \"%{public}@\" for session \"%{public}s\" with options %{public}@", buf, 0x20u);
      if (v24 < 0)
        operator delete(__p[0]);
    }
    sub_10044E080(v10, 0);
    if (*(_BYTE *)(v10 + 1324))
    {
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_10092E048);
      sub_1002A1AA4((uint64_t)off_100977A80, v10, 0);
      sub_10040E00C(a1, v7, 0, 2);
    }
    else
    {
      if (objc_msgSend(v8, "connectingToPANServices"))
        v20 = -10305;
      else
        v20 = -14657;
      if (qword_100977A78 != -1)
        dispatch_once(&qword_100977A78, &stru_10092E068);
      v21 = (int64x2_t *)off_100977A70;
      sub_1000340DC(a2, (uint64_t)buf);
      v22 = sub_100495A98(v21, v10, v20, (const std::string *)buf, 2);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if ((_DWORD)v22)
        sub_10040E00C(a1, v7, v22, 0);
      else
        objc_msgSend(*(id *)(a1 + 232), "setObject:forKey:", v8, v7);
    }
  }
LABEL_39:

}

void sub_10040DFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_10040E00C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  void **v9;
  _BOOL8 v10;
  NSObject *v11;
  void **v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  BOOL v21;
  id v22;
  void *v23;
  id v24;
  void *__p[2];
  char v27;
  _QWORD v28[4];
  _QWORD v29[4];
  uint8_t buf[4];
  void **v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  _BOOL4 v37;

  v24 = a2;
  if (!(_DWORD)a3)
    ++*(_DWORD *)(a1 + 248);
  if ((_DWORD)a4 != 2)
    objc_msgSend(*(id *)(a1 + 232), "removeObjectForKey:", v24);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  v6 = sub_1000589DC((uint64_t)off_1009778C0, v24, 0);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092DFA8);
  v7 = sub_10006D488((uint64_t)off_1009778E0, v6, 0);
  v8 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(v7, (uint64_t)__p);
    v9 = v27 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446722;
    v31 = v9;
    v32 = 1024;
    v33 = a3;
    v34 = 1024;
    v35 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CBClassicSession::deviceConnected for device %{public}s with result: %d and internalState %d", buf, 0x18u);
    if (v27 < 0)
      operator delete(__p[0]);
  }
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_10092E0A8);
  if (sub_1004391E8((uint64_t)off_100978188, v7))
    v10 = *(_BYTE *)(v7 + 1325) != 0;
  else
    v10 = 1;
  v11 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(v7, (uint64_t)__p);
    v12 = v27 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315906;
    v31 = v12;
    v32 = 1024;
    v33 = a3;
    v34 = 1024;
    v35 = a4;
    v36 = 1024;
    v37 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CBClassicSession::deviceConnected for device %s with result: %d and internalState %d and isIncoming %d", buf, 0x1Eu);
    if (v27 < 0)
      operator delete(__p[0]);
  }
  v29[0] = v24;
  v28[0] = CFSTR("kCBMsgArgDeviceUUID");
  v28[1] = CFSTR("kCBMsgArgResult");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
  v29[1] = v13;
  v28[2] = CFSTR("kCBMsgArgInternalState");
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a4));
  v29[2] = v14;
  v28[3] = CFSTR("kCBMsgArgIsIncoming");
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v10));
  v29[3] = v15;
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v29, v28, 4));
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v16));

  if (v10)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a4));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", v18, CFSTR("kCBMsgArgState"));

  }
  if (v7)
  {
    v19 = sub_100453478(v7);
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    v21 = objc_msgSend(v20, "count") == 0;

    if (!v21)
    {
      v22 = sub_100453478(v7);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      objc_msgSend(v17, "setObject:forKeyedSubscript:", v23, CFSTR("kCBMsgArgServices"));

    }
  }
  sub_10040D9B0(a1, 51, v17);
  sub_10040D9B0(a1, 49, v17);
  if (*(int *)(a1 + 248) >= 1)
  {
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10092DE88);
    sub_1002E51D0((uint64_t)off_100978168, *(void **)(a1 + 88), 1);
  }

}

void sub_10040E474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_10040E508(uint64_t a1, unint64_t a2, void *a3, int a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uuid_t dst;
  unsigned __int8 src[8];
  uint64_t v17;

  v7 = a3;
  objc_msgSend(*(id *)(a1 + 232), "removeObjectForKey:", v7);
  if (!a4)
  {
    sub_10040E7D0(a1, v7, 0, 0);
    goto LABEL_21;
  }
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
    sub_1006EE294();
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  v8 = sub_1000589DC((uint64_t)off_1009778C0, v7, 0);
  if (!v8)
  {
    sub_10040E7D0(a1, v7, 3, 0);
    goto LABEL_21;
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092DFA8);
  v9 = sub_10006D488((uint64_t)off_1009778E0, v8, 0);
  v10 = v9;
  if (!v9)
  {
    v13 = 3;
LABEL_20:
    sub_10040E7D0(a1, v7, v13, 0);
    goto LABEL_21;
  }
  if (!*(_BYTE *)(v9 + 1324))
  {
    v13 = 0;
    goto LABEL_20;
  }
  if (sub_1004497F4(v9))
  {
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_10092E068);
    v11 = sub_100499FC8((uint64_t)off_100977A70, v10, -1);
    if ((_DWORD)v11)
    {
      v12 = sub_10043FE04(v10);
      sub_10040E7D0(a1, v7, v11, (uint64_t)v12);
    }
  }
  else
  {
    *(_QWORD *)src = 0;
    v17 = 0;
    sub_100030BCC(src, v7);
    if (qword_10097AA60 != -1)
      dispatch_once(&qword_10097AA60, &stru_10092E088);
    v14 = qword_10097AA58;
    uuid_copy(dst, src);
    sub_1003D3BC0(v14, a2, dst);
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_10092E068);
    sub_100495A3C((uint64_t)off_100977A70, v10, 1);
  }
LABEL_21:
  objc_msgSend(*(id *)(a1 + 240), "removeObject:", v7);

}

void sub_10040E7A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10040E7D0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  _QWORD v15[3];
  _QWORD v16[3];

  v7 = a2;
  objc_msgSend(*(id *)(a1 + 232), "removeObjectForKey:", v7);
  v16[0] = v7;
  v15[0] = CFSTR("kCBMsgArgDeviceUUID");
  v15[1] = CFSTR("kCBMsgArgResult");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a3));
  v16[1] = v8;
  v15[2] = CFSTR("kCBMsgArgInternalState");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a4));
  v16[2] = v9;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v16, v15, 3));

  v11 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109376;
    v12[1] = a3;
    v13 = 1024;
    v14 = a4;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CBClassicSession::deviceDisconnected with result: %d and internalState %d", (uint8_t *)v12, 0xEu);
  }
  --*(_DWORD *)(a1 + 248);
  sub_10040D9B0(a1, 51, v10);
  sub_10040D9B0(a1, 50, v10);
  if (!*(_DWORD *)(a1 + 248))
  {
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_10092DE88);
    sub_1002E51D0((uint64_t)off_100978168, *(void **)(a1 + 88), 0);
  }

}

void sub_10040E9A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_10040E9E8(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  id v5;
  void *v6;
  void *v7;
  const __CFString *v8;
  void *v9;
  _QWORD v10[2];

  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  v10[0] = 0;
  v10[1] = 0;
  sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)a3[128] << 40) | ((unint64_t)a3[129] << 32) | ((unint64_t)a3[130] << 24) | ((unint64_t)a3[131] << 16) | ((unint64_t)a3[132] << 8) | a3[133], 1u, 0, 0, 0, (unsigned __int8 *)v10);
  v8 = CFSTR("kCBMsgArgDeviceUUID");
  v5 = sub_100030DF4((const unsigned __int8 *)v10);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v9 = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));
  sub_10040D9B0(a1, 16, v7);

}

void sub_10040EB18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10040EB3C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  xpc_object_t v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  unsigned __int8 uuid[8];
  uint64_t v12;

  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  *(_QWORD *)uuid = 0;
  v12 = 0;
  sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)a3[128] << 40) | ((unint64_t)a3[129] << 32) | ((unint64_t)a3[130] << 24) | ((unint64_t)a3[131] << 16) | ((unint64_t)a3[132] << 8) | a3[133], 1u, 0, 0, 0, uuid);
  v7 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_uuid(v7, "kCBMsgArgDeviceUUID", uuid);
  xpc_dictionary_set_int64(v7, "kCBMsgArgResult", a4);
  v8 = sub_10043E93C(a3);
  xpc_dictionary_set_int64(v7, "kCBMsgArgPairingState", v8);
  v9 = sub_100070698(v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  sub_10040D9B0(a1, 17, v10);

  xpc_release(v7);
}

void sub_10040EC98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10040ECB0(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  id v5;
  void *v6;
  void *v7;
  const __CFString *v8;
  void *v9;
  _QWORD v10[2];

  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  v10[0] = 0;
  v10[1] = 0;
  sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)a3[128] << 40) | ((unint64_t)a3[129] << 32) | ((unint64_t)a3[130] << 24) | ((unint64_t)a3[131] << 16) | ((unint64_t)a3[132] << 8) | a3[133], 1u, 0, 0, 0, (unsigned __int8 *)v10);
  v8 = CFSTR("kCBMsgArgDeviceUUID");
  v5 = sub_100030DF4((const unsigned __int8 *)v10);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v9 = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1));
  sub_10040D9B0(a1, 18, v7);

}

void sub_10040EDE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10040EE04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  NSNumber *v7;
  void *v8;
  NSNumber *v9;
  void *v10;
  NSNumber *v11;
  void *v12;
  NSNumber *v13;
  void *v14;
  NSNumber *v15;
  void *v16;
  void *v17;
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[2];

  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  v20[0] = 0;
  v20[1] = 0;
  sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)*(unsigned __int8 *)(a3 + 128) << 40) | ((unint64_t)*(unsigned __int8 *)(a3 + 129) << 32) | ((unint64_t)*(unsigned __int8 *)(a3 + 130) << 24) | ((unint64_t)*(unsigned __int8 *)(a3 + 131) << 16) | ((unint64_t)*(unsigned __int8 *)(a3 + 132) << 8) | *(unsigned __int8 *)(a3 + 133), 1u, 0, 0, 0, (unsigned __int8 *)v20);
  v18[0] = CFSTR("kCBMsgArgDeviceUUID");
  v5 = sub_100030DF4((const unsigned __int8 *)v20);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v19[0] = v6;
  v18[1] = CFSTR("kCBMsgArgBatteryPercentRight");
  v7 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100447694((unsigned int *)a3, 2));
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v19[1] = v8;
  v18[2] = CFSTR("kCBMsgArgBatteryPercentLeft");
  v9 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100447694((unsigned int *)a3, 4));
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v19[2] = v10;
  v18[3] = CFSTR("kCBMsgArgBatteryPercentCase");
  v11 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100447694((unsigned int *)a3, 8));
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v19[3] = v12;
  v18[4] = CFSTR("kCBMsgArgBatteryPercent");
  v13 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100447694((unsigned int *)a3, 1));
  v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  v19[4] = v14;
  v18[5] = CFSTR("kCBMsgArgBatteryPercentCombined");
  v15 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_100447694((unsigned int *)a3, 16));
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  v19[5] = v16;
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v19, v18, 6));
  sub_10040D9B0(a1, 45, v17);

}

void sub_10040F060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_10040F0C0(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[2];

  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092DF28);
  v11[0] = 0;
  v11[1] = 0;
  sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)a3[128] << 40) | ((unint64_t)a3[129] << 32) | ((unint64_t)a3[130] << 24) | ((unint64_t)a3[131] << 16) | ((unint64_t)a3[132] << 8) | a3[133], 1u, 0, 0, 0, (unsigned __int8 *)v11);
  v9[0] = CFSTR("kCBMsgArgDeviceUUID");
  v5 = sub_100030DF4((const unsigned __int8 *)v11);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v9[1] = CFSTR("kCBMsgArgIsConnectedOverUSB");
  v10[0] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a3[1288]));
  v10[1] = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 2));
  sub_10040D9B0(a1, 45, v8);

}

void sub_10040F218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_10040F248()
{
  return 3;
}

void sub_10040F250(id a1)
{
  operator new();
}

void sub_10040F290()
{
  operator delete();
}

void sub_10040F2B4(uint64_t a1)
{

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_10040F2F0(id a1)
{
  operator new();
}

void sub_10040F330()
{
  operator delete();
}

void sub_10040F354(id a1)
{
  operator new();
}

void sub_10040F394()
{
  operator delete();
}

void sub_10040F3B8(id a1)
{
  operator new();
}

void sub_10040F3E4(id a1)
{
  operator new();
}

void sub_10040F424()
{
  operator delete();
}

void sub_10040F448(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10040F4B4(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = (uint64_t)v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_QWORD *)(v4 + 32))
    return 0;
  sub_1002F6C4C((uint64_t **)a1, v4);
  return 1;
}

void sub_10040F518(id a1)
{
  operator new();
}

void sub_10040F558()
{
  operator delete();
}

void sub_10040F57C(id a1)
{
  operator new();
}

void sub_10040F5BC(id a1)
{
  operator new();
}

void sub_10040F5FC()
{
  operator delete();
}

void sub_10040F620(id a1)
{
  operator new();
}

void sub_10040F660()
{
  operator delete();
}

uint64_t *sub_10040F684(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  id v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x38uLL);
    v12 = **a4;
    v11[5] = 0;
    v11[6] = 0;
    v11[4] = (uint64_t)v12;
    sub_100004078(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_10040F748(id a1)
{
  operator new();
}

void sub_10040F788()
{
  operator delete();
}

void sub_10040F7AC(id a1)
{
  operator new();
}

void sub_10040F7EC()
{
  operator delete();
}

uint64_t sub_10040F810(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = (uint64_t)v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_QWORD *)(v4 + 32))
    return 0;
  sub_10040F874((uint64_t **)a1, v4);
  return 1;
}

uint64_t *sub_10040F874(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = sub_1000040CC(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

_OWORD *sub_10040F8B4(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  int v9;
  uint64_t v11;

  v11 = 0;
  v6 = (void **)sub_10009C49C((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *((_DWORD *)*a4 + 4);
    v7[2] = **a4;
    *((_DWORD *)v7 + 12) = v9;
    *((_QWORD *)v7 + 7) = 0;
    sub_100004078(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_10040F948(id a1)
{
  operator new();
}

void sub_10040F988()
{
  operator delete();
}

uint64_t *sub_10040F9AC(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10040FA00(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_10040F9E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100012148(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10040FA00(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_10040FA84(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_10040FA84(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  v6 = (uint64_t **)sub_1002CCF34(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_10040FB10((uint64_t)a1, a4, v8);
    sub_100004078(a1, v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

id sub_10040FB10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  id result;
  uint64_t v8;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  v6[4] = *(id *)a2;
  result = *(id *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v6[5] = result;
  v6[6] = v8;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_10040FB78(id a1)
{
  operator new();
}

void sub_10040FBB8()
{
  operator delete();
}

_OWORD *sub_10040FBDC(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  v6 = (void **)sub_10001F574((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v13 = 0;
    v7 = operator new(0x58uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *(_OWORD *)((char *)v7 + 56) = 0u;
    *(_OWORD *)((char *)v7 + 72) = 0u;
    LOBYTE(v13) = 1;
    sub_100004078(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_10040FCAC((uint64_t)v12, 0);
  }
  return v7;
}

void sub_10040FCAC(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_10040F2B4((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_10040FCF0(id a1)
{
  operator new();
}

void sub_10040FD30()
{
  operator delete();
}

uint64_t *sub_10040FD54(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v6 = (uint64_t **)sub_1002CCF34(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v7[4] = (uint64_t)*(id *)a4;
    v7[5] = *(_QWORD *)(a4 + 8);
    sub_100004078(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_10040FDE8(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = (uint64_t)**a4;
    v11[5] = 0;
    sub_100004078(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_10040FEA8(id a1)
{
  operator new();
}

void sub_10040FEE8()
{
  operator delete();
}

void sub_10040FF0C(id a1)
{
  operator new();
}

void sub_10040FF4C()
{
  operator delete();
}

void sub_10040FF70(id a1)
{
  operator new();
}

void sub_10040FFB0()
{
  operator delete();
}

void sub_10040FFD4(id a1)
{
  operator new();
}

void sub_100410014()
{
  operator delete();
}

void sub_100410044(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_100410050(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

uint64_t sub_10041005C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)sub_10048D2F0(a1, "A2DPService", 16);
  *v2 = off_10092E0D8;
  sub_1000160D0(v2 + 41);
  *(_QWORD *)(a1 + 400) = 0;
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_10092E1C8);
  v3 = qword_100977DF8;
  *(_QWORD *)(a1 + 400) = qword_100977DF8;
  sub_10048D5B0(a1, v3);
  return a1;
}

void sub_1004100EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100069BDC(v2);
  sub_10048D3E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100410114(_QWORD *a1)
{
  *a1 = off_10092E0D8;
  sub_100069BDC(a1 + 41);
  return sub_10048D3E0((uint64_t)a1);
}

void sub_100410148(_QWORD *a1)
{
  *a1 = off_10092E0D8;
  sub_100069BDC(a1 + 41);
  sub_10048D3E0((uint64_t)a1);
  operator delete();
}

uint64_t sub_100410198(uint64_t a1, uint64_t a2)
{
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;
  unsigned int v7;
  __int128 v9;
  int v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v14[15];

  v12 = xmmword_100740F90;
  memset(v14, 0, sizeof(v14));
  v11 = 0;
  v10 = 0;
  if (sub_100444790(a2))
  {
    if (sub_100442444(a2, &v12, 4u))
      v4 = 4;
    else
      v4 = 1;
  }
  else
  {
    v5 = sub_100452168(a2, v14, &v11);
    if (v11)
      v6 = v5;
    else
      v6 = 0;
    if (v6)
      v4 = 4 * (sub_10018F848((unsigned __int8 *)v14, 4363, &v10) == 0);
    else
      v4 = 0;
  }
  v7 = *(_DWORD *)(a1 + 32);
  v13 = 0;
  sub_10004AD30((uint64_t)&v13);
  *(_QWORD *)&v9 = (int)v13;
  *((_QWORD *)&v9 + 1) = SWORD2(v13);
  return sub_1004415B0(a2, v7, v4, &v9, 0);
}

uint64_t sub_1004102E0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;
  int v6;
  char v7;
  int v8;
  __int128 v9;
  _OWORD v10[15];

  v8 = 0;
  v9 = xmmword_100740F90;
  memset(v10, 0, sizeof(v10));
  v7 = 0;
  v6 = 0;
  *a3 = 0;
  if (sub_100444790(a2))
  {
    result = sub_100442444(a2, &v9, 4u);
    if ((result & 1) == 0)
      return result;
LABEL_13:
    *a3 = 1;
    return result;
  }
  if (sub_100452168(a2, v10, &v7))
  {
    if (v7)
    {
      result = sub_10018F848((unsigned __int8 *)v10, 4363, &v6);
      if (!(_DWORD)result)
        goto LABEL_13;
    }
  }
  result = sub_10043FA40(a2, &v8);
  if ((~v8 & 0x240000) == 0
    && ((v8 & 0x1F00) == 0x400
     || (v8 & 0x1FFC) == 0x118
     || (v8 & 0x1F00) == 0x700 && ((v8 & 0xF4) == 4 || (v8 & 0xF8) == 0x10)))
  {
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_100410434(uint64_t a1, uint64_t a2, const char *a3, const char *a4)
{
  size_t v6;
  size_t v7;
  size_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  const char *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v22;
  char v23;
  int __dst;
  char v25;
  uint64_t v26;
  __int16 v27;

  if (a3 && a4)
  {
    v6 = strlen(aBtKeyHandsfree);
    if (!strncmp(a3, aBtKeyHandsfree, v6))
    {
      v7 = strlen(a4);
      v27 = 0;
      v26 = 0;
      v25 = 0;
      __dst = 0;
      if (v7)
      {
        v8 = v7;
        v9 = 0;
        v10 = 0;
        if (v7 >= 4)
          v11 = 4;
        else
          v11 = v7;
        do
        {
          v12 = 0;
          v13 = &a4[v10];
          while (v13[v12] != 58)
          {
            if (v11 == ++v12)
            {
              v12 = v11;
              break;
            }
          }
          memcpy(&__dst, v13, v12);
          *((_BYTE *)&__dst + v12) = 0;
          *((_BYTE *)&v26 + v9) = atoi((const char *)&__dst);
          v10 += v12 + 1;
          if (v10 >= v8)
            break;
        }
        while (v9++ < 9);
      }
      v23 = 0;
      sub_100043758(&v23);
      sub_100192970((uint64_t (*)())sub_1004105E0, (uint64_t)&v26, v15, v16, v17, v18, v19, v20);
      sub_10004339C(&v23);
      sub_100043728(&v23);
    }
    return 0;
  }
  else
  {
    v22 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EED5C(v22);
    return 1;
  }
}

void sub_1004105C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_1004105E0()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Set AFH enabled\n\n", v1, 2u);
  }
}

void sub_100410644(id a1)
{
  operator new();
}

void sub_100410684()
{
  operator delete();
}

uint64_t sub_1004106A8(uint64_t a1, int *a2, int *a3, uint64_t a4, void *a5)
{
  id v9;
  int v10;
  int v11;
  void *v12;

  v9 = a5;
  *(_QWORD *)a1 = 0;
  sub_1000160D0(a1 + 8);
  *(_WORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 79) = 0;
  *(_WORD *)(a1 + 83) = 0;
  v10 = *a2;
  *(_WORD *)(a1 + 76) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 78) = 0;
  v11 = *a3;
  *(_WORD *)(a1 + 83) = *((_WORD *)a3 + 2);
  *(_DWORD *)(a1 + 79) = v11;
  *(_BYTE *)(a1 + 85) = 0;
  *(_BYTE *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 88) = a4;
  *(_DWORD *)(a1 + 96) = 256;
  v12 = *(void **)a1;
  *(_QWORD *)a1 = v9;

  *(_WORD *)(a1 + 102) = 0;
  return a1;
}

void sub_100410750(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id *sub_10041076C(id *a1)
{
  sub_100069BDC(a1 + 1);

  return a1;
}

BOOL sub_10041079C(_QWORD *a1)
{
  NSObject *v2;
  void (***v3)(_QWORD, uint64_t, uint64_t, _QWORD);
  NSObject *v4;
  _BOOL4 v5;
  void (***v6)(_QWORD, uint64_t, uint64_t, _QWORD);
  int v7;
  uint8_t *v8;
  uint8_t *v9;
  void **v10;
  NSObject *v11;
  int v12;
  uint8_t *v13;
  uint8_t *v14;
  void **v15;
  void *__p[2];
  char v18;
  uint8_t buf[8];
  char v20;
  uint8_t v21[4];
  uint8_t *v22;
  __int16 v23;
  void **v24;

  v2 = qword_1009999A0;
  if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting LEA easy pairing agent", buf, 2u);
  }
  *((_BYTE *)a1 + 96) = 0;
  v3 = (void (***)(_QWORD, uint64_t, uint64_t, _QWORD))a1[11];
  if (v3)
  {
    v4 = qword_1009999A0;
    v5 = os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT);
    v6 = v3;
    if (v5)
    {
      sub_10046E9BC((unsigned __int8 *)a1 + 72, buf);
      v7 = v20;
      v8 = *(uint8_t **)buf;
      sub_10046E9BC((unsigned __int8 *)a1 + 79, __p);
      v9 = buf;
      if (v7 < 0)
        v9 = v8;
      if (v18 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)v21 = 136315394;
      v22 = v9;
      v23 = 2080;
      v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending pair status request to \"%s\" for device \"%s\" ", v21, 0x16u);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v20 < 0)
        operator delete(*(void **)buf);
      v6 = (void (***)(_QWORD, uint64_t, uint64_t, _QWORD))a1[11];
    }
    (**v6)(v6, (uint64_t)(a1 + 9), (uint64_t)a1 + 79, *a1);
    v11 = qword_1009999A0;
    if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10046E9BC((unsigned __int8 *)a1 + 79, buf);
      v12 = v20;
      v13 = *(uint8_t **)buf;
      sub_10046E9BC((unsigned __int8 *)a1 + 72, __p);
      v14 = buf;
      if (v12 < 0)
        v14 = v13;
      if (v18 >= 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      *(_DWORD *)v21 = 136315394;
      v22 = v14;
      v23 = 2080;
      v24 = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending pair status request to \"%s\"  for device \"%s\" ", v21, 0x16u);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v20 < 0)
        operator delete(*(void **)buf);
    }
    (**(void (***)(_QWORD, uint64_t, uint64_t, _QWORD))a1[11])(a1[11], (uint64_t)a1 + 79, (uint64_t)(a1 + 9), *a1);
    *((_BYTE *)a1 + 96) += 2;
  }
  return v3 != 0;
}

void sub_100410A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100410A40(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  NSObject *v8;
  char *v9;
  void **v10;
  char v13;
  int v15;
  NSObject *v16;
  _BOOL4 v17;
  int v18;
  void **v19;
  void **v20;
  _BYTE *v21;
  int v22;
  void **v23;
  void **v24;
  _BYTE *v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  __int16 v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  unint64_t v47;
  id v48;
  void *v49;
  void *v50;
  unint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  char v58;
  int __buf;
  _QWORD v60[2];
  _QWORD v61[2];
  _QWORD v62[2];
  uint64_t v63;
  _BYTE buf[22];
  char v65;
  _BYTE v66[22];
  void *v67[2];
  char v68;

  v8 = qword_1009999A0;
  if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
  {
    v9 = a4 == 2 ? "Paired" : "Not paired";
    sub_10046E9BC((unsigned __int8 *)a2, v67);
    v10 = v68 >= 0 ? v67 : (void **)v67[0];
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received pair status response \"%{public}s\" from device \"%s\"", buf, 0x16u);
    if (v68 < 0)
      operator delete(v67[0]);
  }
  v60[0] = 0;
  v60[1] = 0;
  sub_10003415C((uint64_t)v60, (uint64_t)(a1 + 1));
  if (*(_DWORD *)a2 == *((_DWORD *)a1 + 18) && *(unsigned __int16 *)(a2 + 4) == *((unsigned __int16 *)a1 + 38))
  {
    *((_BYTE *)a1 + 78) = a4;
    --*((_BYTE *)a1 + 96);
  }
  if (*(_DWORD *)a2 == *(_DWORD *)((char *)a1 + 79)
    && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)((char *)a1 + 83))
  {
    *((_BYTE *)a1 + 85) = a4;
    v13 = *((_BYTE *)a1 + 96) - 1;
    *((_BYTE *)a1 + 96) = v13;
  }
  else
  {
    v13 = *((_BYTE *)a1 + 96);
  }
  if (!v13)
  {
    v15 = (*((_BYTE *)a1 + 85) & *((_BYTE *)a1 + 78));
    v16 = qword_1009999A0;
    v17 = os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT);
    if (v15 == 2)
    {
      if (v17)
      {
        sub_10046E9BC((unsigned __int8 *)a2, v67);
        v18 = v68;
        v19 = (void **)v67[0];
        sub_10046E9BC(a3, buf);
        v20 = v67;
        if (v18 < 0)
          v20 = v19;
        if (v65 >= 0)
          v21 = buf;
        else
          v21 = *(_BYTE **)buf;
        *(_DWORD *)v66 = 136315394;
        *(_QWORD *)&v66[4] = v20;
        *(_WORD *)&v66[12] = 2080;
        *(_QWORD *)&v66[14] = v21;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Devices \"%s\" and \"%s\" are already paired", v66, 0x16u);
        if (v65 < 0)
          operator delete(*(void **)buf);
        if (v68 < 0)
          operator delete(v67[0]);
      }
    }
    else
    {
      if (v17)
      {
        sub_10046E9BC((unsigned __int8 *)a2, v67);
        v22 = v68;
        v23 = (void **)v67[0];
        sub_10046E9BC(a3, buf);
        v24 = v67;
        if (v22 < 0)
          v24 = v23;
        if (v65 >= 0)
          v25 = buf;
        else
          v25 = *(_BYTE **)buf;
        *(_DWORD *)v66 = 136315394;
        *(_QWORD *)&v66[4] = v24;
        *(_WORD *)&v66[12] = 2080;
        *(_QWORD *)&v66[14] = v25;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Generate bonding info to pair between \"%s\" and \"%s\"", v66, 0x16u);
        if (v65 < 0)
          operator delete(*(void **)buf);
        if (v68 < 0)
          operator delete(v67[0]);
      }
      __buf = 0;
      v63 = 0;
      *(_QWORD *)buf = 0;
      v67[0] = 0;
      v67[1] = 0;
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)v66 = 0;
      *(_QWORD *)&v66[8] = 0;
      if (qword_1009778B8 != -1)
        dispatch_once(&qword_1009778B8, &stru_10092E1E8);
      *(_OWORD *)buf = *(_OWORD *)(qword_1009778B0 + 168);
      v26 = sub_100184E88((__int128 *)(qword_1009778B0 + 136), 3, 0, v66);
      if (v26)
      {
        v27 = qword_1009999A0;
        if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_FAULT))
          sub_1006EEE64(v26, v27);
      }
      else
      {
        arc4random_buf((char *)&__buf + 2, 2uLL);
        arc4random_buf(&v63, 8uLL);
        v28 = sub_1001847A4((__int128 *)v66, &v63, &__buf);
        if ((_DWORD)v28)
        {
          v29 = qword_1009999A0;
          if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
            sub_1006EEE00(v28, v29, v30, v31, v32, v33, v34, v35);
        }
        else
        {
          v36 = __buf;
          v37 = HIWORD(__buf);
          v38 = sub_100184E88((__int128 *)buf, SHIWORD(__buf), 0, v67);
          if ((_DWORD)v38)
          {
            v39 = qword_1009999A0;
            if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_ERROR))
              sub_1006EED9C(v38, v39, v40, v41, v42, v43, v44, v45);
          }
          else
          {
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10092E208);
            v46 = off_1009778C0;
            v47 = sub_1004110AC((unsigned __int8 *)a2);
            sub_10003F924((uint64_t)v46, v47, 0, 0, 0, 0, (unsigned __int8 *)v62);
            v48 = sub_100030DF4((const unsigned __int8 *)v62);
            v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
            v62[0] = 0;
            v62[1] = 0;
            v58 = 16;
            v57 = 0;
            if (qword_1009778B8 != -1)
              dispatch_once(&qword_1009778B8, &stru_10092E1E8);
            sub_1006A1508(qword_1009778B0, v49, v62, &v58, &v57);
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_10092E208);
            v50 = off_1009778C0;
            v51 = sub_1004110AC(a3);
            sub_10003F924((uint64_t)v50, v51, 0, 0, 0, 0, (unsigned __int8 *)v61);
            v52 = sub_100030DF4((const unsigned __int8 *)v61);
            v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
            v61[0] = 0;
            v61[1] = 0;
            v56 = 16;
            v55 = 0;
            if (qword_1009778B8 != -1)
              dispatch_once(&qword_1009778B8, &stru_10092E1E8);
            sub_1006A1508(qword_1009778B0, v53, v61, &v56, &v55);
            v54 = (unsigned __int16)(v37 ^ v36);
            (*(void (**)(_QWORD, uint64_t, unsigned __int8 *, uint64_t, uint64_t *, void **, _QWORD *, _QWORD))(*(_QWORD *)a1[11] + 8))(a1[11], a2, a3, v54, &v63, v67, v61, *a1);
            (*(void (**)(_QWORD, unsigned __int8 *, uint64_t, uint64_t, uint64_t *, void **, _QWORD *, _QWORD))(*(_QWORD *)a1[11] + 8))(a1[11], a3, a2, v54, &v63, v67, v62, *a1);

          }
        }
      }
    }
  }
  return sub_100034234((uint64_t)v60);
}

void sub_10041104C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1004110AC(unsigned __int8 *a1)
{
  return ((unint64_t)*a1 << 40) | ((unint64_t)a1[1] << 32) | ((unint64_t)a1[2] << 24) | ((unint64_t)a1[3] << 16) | ((unint64_t)a1[4] << 8) | a1[5];
}

uint64_t sub_1004110E0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  const char *v9;
  void **v10;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  void **v17;

  v8 = qword_1009999A0;
  if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
  {
    if (a4)
      v9 = "Fail";
    else
      v9 = "Success";
    sub_10046E9BC(a2, __p);
    if (v13 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v15 = v9;
    v16 = 2080;
    v17 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received bonding info store result \"%{public}s\" from device \"%s\" ", buf, 0x16u);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return (*(uint64_t (**)(_QWORD, unsigned __int8 *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88), a2, a3, 2 * (a4 != 0));
}

uint64_t sub_10041121C(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  unsigned __int8 *v5;
  NSObject *v6;
  int v7;
  void **v8;
  void **v9;
  void **v10;
  NSObject *v11;
  int v12;
  void **v13;
  void **v14;
  void **v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  void **v23;

  v3 = *(_QWORD *)(result + 88);
  if (v3)
  {
    v5 = (unsigned __int8 *)result;
    if (a2)
    {
      v6 = qword_1009999A0;
      if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10046E9BC(v5 + 72, v18);
        v7 = v19;
        v8 = (void **)v18[0];
        sub_10046E9BC(v5 + 79, __p);
        v9 = v18;
        if (v7 < 0)
          v9 = v8;
        if (v17 >= 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v21 = v9;
        v22 = 2080;
        v23 = v10;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending easy unpair request to \"%s\" for device \"%s\" ", buf, 0x16u);
        if (v17 < 0)
          operator delete(__p[0]);
        if (v19 < 0)
          operator delete(v18[0]);
        v3 = *((_QWORD *)v5 + 11);
      }
      result = (*(uint64_t (**)(uint64_t, _QWORD *, unsigned __int8 *, _QWORD))(*(_QWORD *)v3 + 24))(v3, (_QWORD *)v5 + 9, v5 + 79, *(_QWORD *)v5);
    }
    if (a3)
    {
      v11 = qword_1009999A0;
      if (os_log_type_enabled((os_log_t)qword_1009999A0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10046E9BC(v5 + 79, v18);
        v12 = v19;
        v13 = (void **)v18[0];
        sub_10046E9BC(v5 + 72, __p);
        v14 = v18;
        if (v12 < 0)
          v14 = v13;
        if (v17 >= 0)
          v15 = __p;
        else
          v15 = (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v21 = v14;
        v22 = 2080;
        v23 = v15;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending easy unpair request to \"%s\"  for device \"%s\" ", buf, 0x16u);
        if (v17 < 0)
          operator delete(__p[0]);
        if (v19 < 0)
          operator delete(v18[0]);
      }
      return (*(uint64_t (**)(_QWORD, unsigned __int8 *, _QWORD *, _QWORD))(**((_QWORD **)v5 + 11) + 24))(*((_QWORD *)v5 + 11), v5 + 79, (_QWORD *)v5 + 9, *(_QWORD *)v5);
    }
  }
  return result;
}

void sub_100411444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10041146C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 97) = a2;
  return result;
}

uint64_t sub_100411474(uint64_t result, char a2)
{
  *(_BYTE *)(result + 98) = a2;
  return result;
}

uint64_t sub_10041147C(uint64_t result)
{
  *(_BYTE *)(result + 99) = 1;
  return result;
}

uint64_t sub_100411488(uint64_t result)
{
  *(_BYTE *)(result + 99) = 0;
  return result;
}

uint64_t sub_100411490(uint64_t result)
{
  *(_BYTE *)(result + 100) = 1;
  return result;
}

uint64_t sub_10041149C(uint64_t result)
{
  *(_BYTE *)(result + 100) = 0;
  return result;
}

uint64_t sub_1004114A4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 97);
}

uint64_t sub_1004114AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 98);
}

uint64_t sub_1004114B4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 99);
}

id sub_1004114BC(id *a1)
{
  return *a1;
}

uint64_t sub_1004114C4(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 102);
}

uint64_t sub_1004114CC(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 102) = a2;
  return result;
}

void sub_1004114D4(id a1)
{
  operator new();
}

void sub_100411514()
{
  operator delete();
}

void sub_100411538(id a1)
{
  operator new();
}

void sub_100411578()
{
  operator delete();
}

uint64_t sub_10041159C(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void sub_1004115B0(id *a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD v9[5];
  uint8_t buf[4];
  const char *v11;

  v2 = qword_100999980;
  if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v11 = "activate";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  v3 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3))
  {
    if ((_os_feature_enabled_impl("BluetoothFeatures", "BTVCLinkController") & 1) != 0)
    {
      if ((sub_1004F97F8() & 1) != 0)
      {
        if (!*a1)
        {
          v4 = qword_100999980;
          if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            v11 = "activate";
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s: init", buf, 0xCu);
          }
          v5 = objc_claimAutoreleasedReturnValue(+[BTVCLinkAgent sharedBTVCLinkAgent](BTVCLinkAgent, "sharedBTVCLinkAgent"));
          v6 = *a1;
          *a1 = (id)v5;

          objc_msgSend(*a1, "activate");
          v9[0] = _NSConcreteStackBlock;
          v9[1] = 3221225472;
          v9[2] = sub_1004117C4;
          v9[3] = &unk_10092E228;
          v9[4] = a1;
          objc_msgSend(*a1, "setAdvReportReceiveHandler:", v9);
        }
      }
      else
      {
        v8 = qword_100999980;
        if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_ERROR))
          sub_1006EEED4(v8);
      }
    }
    else
    {
      v7 = qword_100999980;
      if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v11 = "activate";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%s: Bluetooth virtual link controller is disabled", buf, 0xCu);
      }
    }
  }
}

void sub_1004117C4(uint64_t a1, int a2, int a3, uint64_t (*a4)(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char, _QWORD, char, _QWORD)), int a5, int a6, int a7, int a8, unsigned __int8 a9, unsigned __int16 a10, unsigned __int8 a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  os_unfair_lock_s *v18;
  NSObject *v19;
  uint8_t buf[8];
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t (***)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char, _QWORD, char, _QWORD));
  void *v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  int v35;

  v18 = *(os_unfair_lock_s **)(a1 + 32);
  v19 = qword_100999980;
  if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67111936;
    *(_DWORD *)&buf[4] = a2;
    LOWORD(v24) = 1024;
    *(_DWORD *)((char *)&v24 + 2) = a3;
    HIWORD(v24) = 2048;
    v25 = a4;
    LOWORD(v26) = 1024;
    *(_DWORD *)((char *)&v26 + 2) = a5;
    HIWORD(v26) = 1024;
    LODWORD(v27) = a6;
    WORD2(v27) = 1024;
    *(_DWORD *)((char *)&v27 + 6) = a7;
    WORD5(v27) = 1024;
    HIDWORD(v27) = a8;
    LOWORD(v28) = 1024;
    *(_DWORD *)((char *)&v28 + 2) = a9;
    HIWORD(v28) = 1024;
    v29 = a10;
    v30 = 1024;
    v31 = a11;
    v32 = 2048;
    v33 = a12;
    v34 = 1024;
    v35 = a13;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[BTVCLinkController] Receive ADV report: \n\tEventType:0x%04X, \n\tAddressType:0x%02X, \n\tPeerAddress:%llX, \n\tprimaryPHY:0x%02X, \n\tsecondaryPHY:0x%02X, \n\tadvertisingSID:0x%02X, \n\ttxPower:0x%02X, \n\trssi:0x%02X, \n\tperiodicAdvInterval:0x%02X, \n\tdirectAddressType:0x%02X, \n\tdirectAddress:0x%llX, \n\tDataLength:%d\n", buf, 0x52u);
  }
  *(_QWORD *)buf = _NSConcreteStackBlock;
  v24 = 3221225472;
  v25 = sub_10041238C;
  v26 = &unk_10092E248;
  LOWORD(v29) = a2;
  LOBYTE(v30) = a3;
  HIBYTE(v30) = a5;
  LOBYTE(v31) = a6;
  BYTE1(v31) = a7;
  BYTE2(v31) = a8;
  HIBYTE(v31) = a9;
  HIWORD(v29) = a10;
  LOBYTE(v32) = a11;
  *(_QWORD *)&v27 = a4;
  *((_QWORD *)&v27 + 1) = a12;
  HIBYTE(v32) = a13;
  v28 = a14;
  sub_1004122D0(v18 + 2, buf);
}

void sub_1004119AC(id *a1)
{
  NSObject *v2;
  id v3;
  int v4;
  const char *v5;

  v2 = qword_100999980;
  if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315138;
    v5 = "invalidate";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v4, 0xCu);
  }
  if (*a1)
  {
    objc_msgSend(*a1, "invalidate");
    v3 = *a1;
    *a1 = 0;

  }
}

void sub_100411A6C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  int v3;
  const char *v4;

  sub_100411B18(a1 + 8, a2);
  v2 = qword_100999980;
  if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 136315138;
    v4 = "void BT::BTVCLinkController::addEventListener(BTVCLinkControllerListener *)";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v3, 0xCu);
  }
}

void sub_100411B18(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_100412400(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_100411BA0(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  int v3;
  const char *v4;

  sub_100069060(a1 + 8, a2);
  v2 = qword_100999980;
  if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 136315138;
    v4 = "void BT::BTVCLinkController::removeEventListener(BTVCLinkControllerListener *)";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v3, 0xCu);
  }
}

uint64_t sub_100411C4C(id *a1)
{
  NSObject *v2;
  int v4;
  const char *v5;

  v2 = qword_100999980;
  if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315138;
    v5 = "uint8_t BT::BTVCLinkController::hciReset()";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v4, 0xCu);
  }
  if (*a1)
    objc_msgSend(*a1, "reset");
  return 0;
}

uint64_t sub_100411D04(id *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  int v9;
  __int16 v10;

  v9 = a3;
  v10 = WORD2(a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v9, 6));
  if (a2 <= 5)
  {
    objc_msgSend(v5, "setObject:forKeyedSubscript:", &off_100960748, CFSTR("at"));
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v6, CFSTR("pa"));
    if (*a1)
      objc_msgSend(*a1, "leSetAdvertisingSetRandomAddress:address:", a2, v5);
    v7 = 0;
  }
  else
  {
    v7 = 18;
  }

  return v7;
}

void sub_100411DD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100411DEC(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, unsigned __int8 a11, unsigned __int8 a12, char a13, unsigned __int8 a14, unsigned __int8 a15)
{
  void *v18;
  void *v19;
  void *v20;
  _UNKNOWN **v21;
  void *v22;
  void *v23;
  NSNumber *v24;
  void *v25;
  uint64_t v26;

  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", a3));
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a12));
  v21 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a14));
  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a15));
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a11));
  v24 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", sub_100412040());
  v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  if (a2 <= 5)
  {

    objc_msgSend(v18, "setObject:forKeyedSubscript:", v19, CFSTR("et"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v20, CFSTR("pPHY"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", &off_100960748, CFSTR("sPHY"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v22, CFSTR("aSID"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v23, CFSTR("tp"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v25, CFSTR("rssi"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", &off_100960748, CFSTR("pai"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", &off_100960748, CFSTR("dat"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", &off_100960748, CFSTR("da"));
    if (*a1)
      objc_msgSend(*a1, "leSetExtendedAdvertisingParameters:advertisingParameters:", a2, v18);
    v26 = 0;
    v21 = &off_100960748;
  }
  else
  {
    v26 = 18;
  }

  return v26;
}

void sub_100411FE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t sub_100412040()
{
  void *v0;
  uint64_t v1;
  signed __int8 v2;

  v0 = (void *)CFPreferencesCopyValue(CFSTR("btvcDefaultAdvRSSI"), CFSTR("com.apple.bluetooth"), kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
  if (v0)
  {
    v1 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v0, v1) & 1) != 0)
      v2 = objc_msgSend(v0, "intValue");
    else
      v2 = -60;
  }
  else
  {
    v2 = -60;
  }

  return v2;
}

void sub_1004120CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1004120DC(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", a5));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a6, a5));
  if (a2 <= 5)
  {
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v11, CFSTR("dtl"));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v12, CFSTR("data"));
    if (*a1)
      objc_msgSend(*a1, "leSetExtendedAdvertisingData:advertisingData:", a2, v10);
    v13 = 0;
  }
  else
  {
    v13 = 18;
  }

  return v13;
}

void sub_1004121BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1004121E4(id *a1, int a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a3 > 5)
    return 18;
  v20 = v9;
  v21 = v8;
  v22 = v7;
  v23 = v6;
  v24 = v5;
  v25 = v4;
  v26 = v10;
  v27 = v11;
  result = (uint64_t)*a1;
  if (result)
  {
    if (a2 && (_DWORD)a3)
    {
      v17 = a3;
      v18 = a4;
      while (1)
      {
        v19 = *v18++;
        if ((objc_msgSend(*a1, "isAdvertisingEnabled:", v19, v20, v21, v22, v23, v24, v25, v26, v27) & 1) != 0)
          return 12;
        if (!--v17)
        {
          result = (uint64_t)*a1;
          goto LABEL_10;
        }
      }
    }
    else
    {
LABEL_10:
      objc_msgSend((id)result, "leSetExtendedAdvertisingEnable:numSets:advertisingHandles:", a2 != 0, a3, a4);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100412280(id *a1, int a2)
{
  uint64_t result;

  result = (uint64_t)*a1;
  if (result)
  {
    if (objc_msgSend((id)result, "isScanningEnabled") == a2)
    {
      return 12;
    }
    else
    {
      objc_msgSend(*a1, "leSetExtendedScanEnable:", a2 != 0);
      return 0;
    }
  }
  return result;
}

void sub_1004122D0(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_100412364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_10041238C(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char, _QWORD, char, _QWORD))
{
  char v3;
  __int16 v4;
  char v5;
  char v6;

  v6 = *(_BYTE *)(a1 + 67);
  v5 = *(_BYTE *)(a1 + 66);
  v4 = *(_WORD *)(a1 + 58);
  v3 = *(_BYTE *)(a1 + 65);
  return (**a2)(a2, *(unsigned __int16 *)(a1 + 56), *(unsigned __int8 *)(a1 + 60), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 61), *(unsigned __int8 *)(a1 + 62), *(unsigned __int8 *)(a1 + 63), *(unsigned __int8 *)(a1 + 64), v3, *(_QWORD *)(a1 + 40), v6, *(_QWORD *)(a1 + 48));
}

char *sub_100412400(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_100412604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10041263C(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  void **v8;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  void **v13;

  sub_1004169C4(a1);
  *(_OWORD *)(v6 + 224) = 0u;
  *(_BYTE *)(v6 + 216) = 0;
  *(_QWORD *)(v6 + 280) = 0;
  *(_QWORD *)(v6 + 328) = 0;
  *(_DWORD *)(v6 + 302) = 0;
  *(_DWORD *)(v6 + 292) = 0;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 252) = 0u;
  *(_WORD *)(v6 + 200) = a2;
  *(_QWORD *)(v6 + 208) = a3;
  *(_BYTE *)(v6 + 300) = 0;
  *(_BYTE *)(v6 + 312) = 0;
  *(_DWORD *)(v6 + 316) = 1065353216;
  *(_DWORD *)(v6 + 308) = 150;
  *(_WORD *)(v6 + 322) = 0;
  *(_BYTE *)(v6 + 324) = 0;
  v7 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO))
  {
    sub_10043E5F8(a3, __p);
    if (v11 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Created new stream config for device %{public}s", buf, 0xCu);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return a1;
}

void sub_100412794(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 232) = v4;
    operator delete(v4);
  }
  sub_100416A0C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004127BC(uint64_t a1)
{
  void *v2;

  sub_100414D74(a1);
  *(_BYTE *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  sub_1004142C0(a1);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(_QWORD *)(a1 + 232) = v2;
    operator delete(v2);
  }
  return sub_100416A0C(a1);
}

uint64_t sub_100412814(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 232);
  if (*(_QWORD *)(a1 + 224) == v1)
    return 0;
  else
    return *(unsigned int *)(v1 - 4);
}

BOOL sub_100412830(uint64_t a1, int a2)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = *(_DWORD **)(a1 + 224);
  v3 = *(_DWORD **)(a1 + 232);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        v2 = *(_DWORD **)(a1 + 232);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

void sub_100412864(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  unint64_t v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  _DWORD v18[2];
  __int16 v19;
  int v20;

  v4 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int16 *)(a1 + 200);
    v18[0] = 67109376;
    v18[1] = a2;
    v19 = 1024;
    v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Set stream handle %d for a2dpHandle %d", (uint8_t *)v18, 0xEu);
  }
  v6 = *(_QWORD *)(a1 + 240);
  v7 = *(char **)(a1 + 232);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *(char **)(a1 + 224);
    v10 = (v7 - v9) >> 2;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62)
      abort();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      v14 = (char *)sub_1002B46E0(a1 + 240, v13);
      v9 = *(char **)(a1 + 224);
      v7 = *(char **)(a1 + 232);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v10];
    v16 = &v14[4 * v13];
    *(_DWORD *)v15 = a2;
    v8 = v15 + 4;
    while (v7 != v9)
    {
      v17 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v17;
      v15 -= 4;
    }
    *(_QWORD *)(a1 + 224) = v15;
    *(_QWORD *)(a1 + 232) = v8;
    *(_QWORD *)(a1 + 240) = v16;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v7 = a2;
    v8 = v7 + 4;
  }
  *(_QWORD *)(a1 + 232) = v8;
}

uint64_t sub_1004129D8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v5[2];

  v2 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int16 *)(a1 + 200);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Getting current channel info for a2dpHandle %d", (uint8_t *)v5, 8u);
  }
  return a1 + 152;
}

uint64_t sub_100412A80(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  int *v8;
  int v9;
  _DWORD v11[2];

  v2 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a1 + 156);
    v11[0] = 67109120;
    v11[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Getting supports delay reporting for remote seid %d", (uint8_t *)v11, 8u);
  }
  v5 = *(unsigned int *)(a1 + 344);
  if ((_DWORD)v5)
  {
    v3 = *(_QWORD *)(a1 + 360);
    v6 = *(_DWORD *)(a1 + 156);
    if (*(_DWORD *)(v3 + 4) == v6)
    {
      v7 = 0;
      LODWORD(v5) = 1;
LABEL_10:
      LODWORD(v3) = *(unsigned __int8 *)(v3 + 32 * v7 + 24) != 0;
    }
    else
    {
      v7 = 0;
      v8 = (int *)(v3 + 36);
      while (v5 - 1 != v7)
      {
        v9 = *v8;
        v8 += 8;
        ++v7;
        if (v9 == v6)
        {
          LODWORD(v5) = v7 < v5;
          goto LABEL_10;
        }
      }
      LODWORD(v5) = 0;
    }
  }
  return v5 & v3;
}

uint64_t sub_100412B94(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 302) = a2;
  return result;
}

uint64_t sub_100412B9C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 302);
}

uint64_t sub_100412BA4(uint64_t a1)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  NSObject *v5;
  NSObject *v6;
  void **v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  uint8_t *v13;
  void *__p;
  __int16 v16;
  uint8_t *v17;
  char v18;
  uint8_t buf[8];
  __int16 v20;
  int v21;
  __int16 v22;
  void **v23;

  v2 = sub_10043FC18(*(_QWORD *)(a1 + 208));
  v3 = 1;
  switch(v2)
  {
    case 0:
      v4 = sub_10043F854(*(_QWORD *)(a1 + 208));
      if (v4 > 0x17)
        goto LABEL_26;
      if (((1 << v4) & 0x150000) != 0)
      {
        v9 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device type is headset", buf, 2u);
        }
        v3 = 1;
      }
      else if (((1 << v4) & 0xA80000) != 0)
      {
        v5 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Device type is speaker", buf, 2u);
        }
        v3 = 3;
      }
      else if (((1 << v4) & 0x420000) != 0)
      {
        v10 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v3 = 2;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device type is carkit", buf, 2u);
        }
        else
        {
          v3 = 2;
        }
      }
      else
      {
LABEL_26:
        v11 = qword_1009997C8;
        v3 = 0;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Device type is unknown", buf, 2u);
          v3 = 0;
        }
      }
      v12 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(*(_QWORD *)(a1 + 208), buf);
        v13 = SHIBYTE(v23) >= 0 ? buf : *(uint8_t **)buf;
        LODWORD(__p) = 67109378;
        HIDWORD(__p) = v3;
        v16 = 2082;
        v17 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "User selected device type is unknown. Returning device type as %d for device %{public}s.", (uint8_t *)&__p, 0x12u);
        if (SHIBYTE(v23) < 0)
        {
          v8 = *(void **)buf;
          goto LABEL_19;
        }
      }
      break;
    case 1:
      v3 = 2;
      goto LABEL_13;
    case 2:
      goto LABEL_13;
    case 3:
      v3 = 4;
      goto LABEL_13;
    case 4:
      v3 = 3;
      goto LABEL_13;
    case 5:
      v3 = 5;
      goto LABEL_13;
    default:
      v3 = 0;
LABEL_13:
      v6 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(*(_QWORD *)(a1 + 208), &__p);
        v7 = v18 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v2;
        v20 = 1024;
        v21 = v3;
        v22 = 2082;
        v23 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "User selected device type is %d. Returning device type as %d for device %{public}s.", buf, 0x18u);
        if (v18 < 0)
        {
          v8 = __p;
LABEL_19:
          operator delete(v8);
        }
      }
      break;
  }
  return v3;
}

uint64_t sub_100412EDC(uint64_t a1)
{
  uint64_t v2;

  if (*(_DWORD *)(a1 + 176) == 255 && (v2 = sub_100412F2C(a1, 255)) != 0 && sub_100412FC0(v2, *(_QWORD *)(v2 + 16)))
    return 33023;
  else
    return *(unsigned int *)(a1 + 176);
}

uint64_t sub_100412F2C(uint64_t a1, int a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *(unsigned int *)(a1 + 344);
  if (!(_DWORD)v2)
    return 0;
  v4 = a1;
  v5 = 0;
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD *)(v4 + 360);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + v5 + 16);
      if (v8)
      {
        v9 = *(unsigned __int8 *)(v8 + 2);
        if (v9 == a2)
          return v7 + v5;
        if (v9 == 255)
          break;
      }
    }
LABEL_9:
    ++v6;
    v5 += 32;
    if (v6 >= v2)
      return 0;
  }
  LOBYTE(a1) = sub_100412FC0(a1, v8);
  if ((a1 & 1) == 0)
  {
    v2 = *(unsigned int *)(v4 + 344);
    goto LABEL_9;
  }
  return *(_QWORD *)(v4 + 360) + v5;
}

BOOL sub_100412FC0(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BOOL8 result;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 && *(unsigned __int8 *)(a2 + 3) > 0xDu)
  {
    v2 = *(_BYTE **)(a2 + 8);
    if (*v2 == 76
      && !v2[1]
      && !v2[2]
      && !v2[3]
      && v2[4] == 1
      && v2[5] == 128
      && (char)v2[7] < 0
      && (~v2[9] & 0x84) == 0)
    {
      return 1;
    }
  }
  else
  {
    v4 = qword_1009997C8;
    result = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_1006EEF54(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  return 0;
}

uint64_t sub_100413070(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v5;
  int v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;

  v5 = result;
  v6 = *(unsigned __int8 *)(a2 + 2);
  if (v6 == 255)
  {
    result = sub_100412FC0(result, a2);
    if (!(_DWORD)result)
      goto LABEL_6;
    v7 = -1;
  }
  else
  {
    v7 = *(_BYTE *)(result + 352) | v6;
  }
  *(_BYTE *)(v5 + 352) = v7;
LABEL_6:
  v8 = *(unsigned int *)(v5 + 344);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = 16;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)(v5 + 360) + v10 - 12) == a3)
      {
        v11 = malloc_type_calloc(1uLL, 0x10uLL, 0x105204037B82EA9uLL);
        *(_QWORD *)(*(_QWORD *)(v5 + 360) + v10) = v11;
        *v11 = *(_OWORD *)a2;
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 360) + v10) + 8) = malloc_type_calloc(*(unsigned __int8 *)(a2 + 3), 1uLL, 0x100004077774924uLL);
        result = (uint64_t)memcpy(*(void **)(*(_QWORD *)(*(_QWORD *)(v5 + 360) + v10) + 8), *(const void **)(a2 + 8), *(unsigned __int8 *)(a2 + 3));
        v8 = *(unsigned int *)(v5 + 344);
      }
      ++v9;
      v10 += 32;
    }
    while (v9 < v8);
  }
  return result;
}

uint64_t sub_100413174(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  unsigned int v17;
  const std::string::value_type *v18;
  NSObject *v19;
  std::string *p_buf;
  NSObject *v21;
  uint64_t v23;
  uint8_t v25[4];
  std::string *v26;
  __int16 v27;
  int v28;
  std::string buf;

  v7 = qword_1009997C8;
  v8 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO);
  if ((_DWORD)v8)
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Parsing Audio Codec ID and information for seid %d", (uint8_t *)&buf, 8u);
  }
  if (a2)
  {
    v9 = 0;
    v23 = a2;
    do
    {
      v10 = (unsigned __int8 *)(a3 + 16 * v9);
      v11 = *v10;
      if (v11 == 7)
      {
        if (!v10[1])
        {
          memset(&buf, 0, sizeof(buf));
          sub_100091AE8(&buf, "Unknown");
          v17 = v10[2];
          if (v17 > 1)
          {
            if (v17 == 2)
            {
              sub_100413070(a1, (uint64_t)v10, a4);
              v18 = "MPEG-2,4 AAC";
            }
            else
            {
              if (v17 != 255)
                goto LABEL_34;
              sub_100413070(a1, (uint64_t)v10, a4);
              v18 = "VENDOR-SPECIFIC";
            }
          }
          else
          {
            if (v10[2])
            {
              if (v17 == 1)
              {
                sub_100413070(a1, (uint64_t)v10, a4);
                v18 = "MPEG-1,2";
                goto LABEL_25;
              }
LABEL_34:
              v21 = qword_1009997C8;
              if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v25 = 67109120;
                LODWORD(v26) = v17;
                _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Found unknown Audio Codec ID %d", v25, 8u);
              }
LABEL_26:
              v19 = qword_1009997C8;
              v8 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v8)
              {
                p_buf = &buf;
                if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
                *(_DWORD *)v25 = 136446466;
                v26 = p_buf;
                v27 = 1024;
                v28 = a4;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Audio Codec ID %{public}s for remote SEID %d", v25, 0x12u);
              }
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
              goto LABEL_32;
            }
            sub_100413070(a1, (uint64_t)v10, a4);
            v18 = "SBC";
          }
LABEL_25:
          std::string::assign(&buf, v18);
          goto LABEL_26;
        }
      }
      else if (v11 == 8)
      {
        v12 = *(unsigned int *)(a1 + 344);
        if ((_DWORD)v12)
        {
          v13 = 0;
          v14 = 0;
          v15 = *(_QWORD *)(a1 + 360);
          do
          {
            if (*(_DWORD *)(v15 + v13 + 4) == a4)
            {
              v16 = qword_1009997C8;
              v8 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v8)
              {
                LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
                HIDWORD(buf.__r_.__value_.__r.__words[0]) = a4;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Remote endpoint supports delay reporting (SEID %d)", (uint8_t *)&buf, 8u);
                v15 = *(_QWORD *)(a1 + 360);
                v12 = *(unsigned int *)(a1 + 344);
              }
              *(_BYTE *)(v15 + v13 + 24) = 1;
            }
            ++v14;
            v13 += 32;
          }
          while (v14 < v12);
        }
      }
LABEL_32:
      v8 = (uint64_t)sub_1004134E4(v8, (uint64_t)v10);
      ++v9;
    }
    while (v9 != v23);
  }
  return 0;
}

void sub_1004134C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1004134E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v5;

  v5 = 0;
  sub_100043758(&v5);
  nullsub_90(a2, v3);
  sub_10004339C(&v5);
  return sub_100043728(&v5);
}

void sub_10041352C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100413540(uint64_t a1, int a2, int a3, int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  void *v14;
  unsigned int v15;
  _DWORD *v16;
  int v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  char v23;
  int v24;
  double v25;
  uint64_t result;
  double v27;
  NSObject *v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  int v32;
  NSObject *v33;
  int v34;
  double v35;
  double v36;
  NSObject *v37;
  _BOOL8 v38;
  _BOOL4 v39;
  NSObject *v40;
  int v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  unsigned int v58;
  NSObject *v59;
  NSObject *v60;
  unsigned int v61;
  NSObject *v62;
  NSObject *v63;
  _BOOL4 v64;
  int v65;
  double v66;
  char v67;
  NSObject *v68;
  double v69;
  int v70;
  void *__p[2];
  char v72;
  int v73;
  uint8_t buf[8];
  __int16 v75;
  _BYTE v76[14];

  *(_DWORD *)(a1 + 348) = a6;
  *(_DWORD *)(a1 + 344) = a6;
  *(_BYTE *)(a1 + 352) = 0;
  v14 = *(void **)(a1 + 360);
  if (v14)
  {
    free(v14);
    v15 = *(_DWORD *)(a1 + 344);
  }
  else
  {
    v15 = a6;
  }
  v16 = malloc_type_calloc(v15, 0x20uLL, 0x1020040C75495F1uLL);
  *(_QWORD *)(a1 + 360) = v16;
  v16[1] = a3;
  *((_QWORD *)v16 + 1) = 1;
  *(_BYTE *)v16 = 1;
  sub_100413174(a1, a6, a5, a3);
  v17 = sub_100413FC4(a1);
  *(_DWORD *)(a1 + 176) = v17;
  v18 = (int *)(a1 + 176);
  v19 = sub_100412F2C(a1, v17);
  if (!v19)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EEF84();
    return 1;
  }
  if (!a7)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EF034();
    return 1;
  }
  v20 = v19;
  if (*v18)
    goto LABEL_7;
  if ((**(_BYTE **)(*(_QWORD *)(v19 + 16) + 8) & 0xF0 & **(_BYTE **)(*(_QWORD *)(a7 + 16) + 24) & 0xF0) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EF0E4();
    return 3;
  }
  if ((**(_BYTE **)(*(_QWORD *)(v19 + 16) + 8) & 0xF & **(_BYTE **)(*(_QWORD *)(a7 + 16) + 24) & 0xF) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EF14C();
    return 3;
  }
LABEL_7:
  sub_1004142C0(a1);
  *(_DWORD *)(a1 + 196) = 3;
  v21 = malloc_type_calloc(3uLL, 0x10uLL, 0x105204037B82EA9uLL);
  *(_QWORD *)(a1 + 184) = v21;
  *v21 = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 184) + 16) = 7;
  *(_BYTE *)(*(_QWORD *)(a1 + 184) + 17) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 184) + 18) = *(_DWORD *)(a1 + 176);
  *(_BYTE *)(*(_QWORD *)(a1 + 184) + 19) = *(_BYTE *)(*(_QWORD *)(a7 + 16) + 19);
  *(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) = malloc_type_calloc(*(unsigned __int8 *)(*(_QWORD *)(a7 + 16) + 19), 1uLL, 0x100004077774924uLL);
  *(_BYTE *)(*(_QWORD *)(a1 + 184) + 32) = 8;
  *(_BYTE *)(a1 + 192) = 1;
  memcpy(*(void **)(*(_QWORD *)(a1 + 184) + 24), *(const void **)(*(_QWORD *)(a7 + 16) + 24), *(unsigned __int8 *)(*(_QWORD *)(a7 + 16) + 19));
  sub_100412864(a1, a4);
  *(_DWORD *)(a1 + 152) = a2;
  *(_DWORD *)(a1 + 156) = a3;
  v22 = *(_DWORD *)(a1 + 176);
  if (v22 == 33023)
  {
    v27 = sub_100414314(a1, 33023);
    *(double *)(a1 + 272) = v27;
    v28 = qword_1009997C8;
    v29 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT);
    if (v29)
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = a3;
      v75 = 2048;
      *(double *)v76 = v27 / 1000.0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Accepting remote Vendor-Specific Apple AAC-ELD SEID %u config with sample rate of %2.1f KHz", buf, 0x12u);
    }
    goto LABEL_89;
  }
  if (v22 == 2)
  {
    v30 = *(_QWORD *)(*(_QWORD *)(v20 + 16) + 8);
    v31 = *(_BYTE *)(v30 + 1);
    v32 = *(char *)(v30 + 2);
    if ((v31 & 1) != 0)
    {
      if (v32 < 0)
        v35 = sub_100414314(a1, 2);
      else
        v35 = 44100.0;
    }
    else if (v32 < 0)
    {
      v35 = 48000.0;
    }
    else
    {
      v33 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "AAC-LC set config received without any acceptable sample rate. Using default sample rate instead of rejecting", buf, 2u);
        v34 = *v18;
      }
      else
      {
        v34 = 2;
      }
      v35 = sub_100414314(a1, v34);
    }
    *(double *)(a1 + 272) = v35;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) + 1) = v35 == 44100.0;
    if (*(double *)(a1 + 272) == 44100.0)
      v67 = 4;
    else
      v67 = -124;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) + 2) = v67;
    if (sub_100414A58(a1, *(_QWORD *)(*(_QWORD *)(v20 + 16) + 8)))
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) + 3) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 8)
                                                                             + 3);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) + 4) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 8)
                                                                             + 4);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) + 5) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 8)
                                                                             + 5);
    }
    v68 = qword_1009997C8;
    v29 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT);
    if (v29)
    {
      v69 = *(double *)(a1 + 272) / 1000.0;
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = a3;
      v75 = 2048;
      *(double *)v76 = v69;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Accepting remote AAC-LC SEID %u config with sample rate of %2.1f KHz\n", buf, 0x12u);
    }
LABEL_89:
    sub_1004134E4(v29, *(_QWORD *)(a1 + 184) + 16);
    return 0;
  }
  if (v22)
  {
    v36 = sub_100414314(a1, v22);
    *(double *)(a1 + 272) = v36;
    v37 = qword_1009997C8;
    v38 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR);
    if (v38)
    {
      v70 = *v18;
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v70;
      v75 = 1024;
      *(_DWORD *)v76 = a3;
      *(_WORD *)&v76[4] = 2048;
      *(double *)&v76[6] = v36 / 1000.0;
      _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Accepting remote UNKNOWN A2DP codec %x SEID %u config with sample rate of %2.1f KHz", buf, 0x18u);
    }
    sub_1004134E4(v38, *(_QWORD *)(a1 + 184) + 16);
    result = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_FAULT);
    if ((_DWORD)result)
    {
      sub_1006EF1B4();
      return 0;
    }
  }
  else
  {
    v23 = **(_BYTE **)(*(_QWORD *)(v20 + 16) + 8);
    v24 = v23 & 0x30;
    if (v24 == 48)
    {
      v25 = sub_100414314(a1, 0);
    }
    else
    {
      v39 = (v23 & 0x20) == 0;
      if (v24)
      {
        v25 = dbl_1007410E0[v39];
      }
      else
      {
        v40 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "SBC set config received without any acceptable sample rate. Using default sample rate instead of rejecting", buf, 2u);
          v41 = *v18;
        }
        else
        {
          v41 = 0;
        }
        v25 = sub_100414314(a1, v41);
      }
    }
    *(double *)(a1 + 272) = v25;
    if (v25 == 44100.0)
      v42 = 33;
    else
      v42 = 17;
    **(_BYTE **)(*(_QWORD *)(a1 + 184) + 24) = v42;
    if (*(double *)(a1 + 272) == 44100.0)
      v43 = 53;
    else
      v43 = 48;
    *(_DWORD *)(a1 + 264) = v43;
    v73 = 0;
    v44 = sub_100027F68();
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(__p, "SBCBitpool");
    v45 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v44 + 128))(v44, buf, __p, &v73);
    if (v72 < 0)
      operator delete(__p[0]);
    if ((v76[13] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v45)
    {
      v46 = v73;
      v47 = qword_1009997C8;
      if ((v73 - 251) > 0xFFFFFF06)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v46;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Warning: Setting user defined SBC Bitpool value to %d", buf, 8u);
          v46 = v73;
        }
        *(_DWORD *)(a1 + 264) = v46;
      }
      else if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      {
        sub_1006EF288(v47, v48, v49, v50, v51, v52, v53, v54);
      }
    }
    else
    {
      v55 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v55 + 384))(v55))
      {
        v56 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "Adjusting bitpool if needed - we are Peripheral", buf, 2u);
        }
        sub_100414788(a1);
      }
    }
    sub_100414904(a1);
    v57 = *(_QWORD *)(v20 + 16);
    v58 = *(unsigned __int8 *)(*(_QWORD *)(v57 + 8) + 2);
    if (v43 >= v58)
    {
      if (*(_DWORD *)(a1 + 264) < v58)
      {
        v60 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v58;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Warning: Increasing SBC Bitpool to %d based on sink's Minimum Bitpool Value", buf, 8u);
          v57 = *(_QWORD *)(v20 + 16);
          v58 = *(unsigned __int8 *)(*(_QWORD *)(v57 + 8) + 2);
        }
        *(_DWORD *)(a1 + 264) = v58;
      }
    }
    else
    {
      v59 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v58;
        _os_log_error_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "Ignoring sink's SBC Minimum Bitpool Value of %d because it is too high", buf, 8u);
        v57 = *(_QWORD *)(v20 + 16);
      }
    }
    v61 = *(unsigned __int8 *)(*(_QWORD *)(v57 + 8) + 3);
    if (v61 > 1)
    {
      if (*(_DWORD *)(a1 + 264) > v61)
      {
        v62 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v61;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Warning: Reducing SBC Bitpool to %d based on sink's Maximum Bitpool Value", buf, 8u);
          v61 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v20 + 16) + 8) + 3);
        }
        *(_DWORD *)(a1 + 264) = v61;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    {
      sub_1006EF224();
    }
    v63 = qword_1009997C8;
    v64 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v64)
    {
      v65 = *(_DWORD *)(a1 + 264);
      v66 = *(double *)(a1 + 272);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = a3;
      v75 = 1024;
      *(_DWORD *)v76 = v65;
      *(_WORD *)&v76[4] = 2048;
      *(double *)&v76[6] = v66 / 1000.0;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Accepting remote SBC SEID %u config with bitpool %d and sample rate of %2.1f KHz", buf, 0x18u);
      return 0;
    }
  }
  return result;
}

void sub_100413F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100413FC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  int v13;
  unsigned __int8 v15;
  void *__p[2];
  char v17;
  char v18;
  _BYTE buf[12];
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;

  v18 = 0;
  v2 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2))
    goto LABEL_8;
  v3 = sub_100027F68();
  sub_100091AE8(buf, "A2DP");
  sub_100091AE8(__p, "DisableAAC");
  (*(void (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v3 + 72))(v3, buf, __p, &v18);
  if (v17 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23) < 0)
    operator delete(*(void **)buf);
  if (v18)
  {
    v4 = 0;
    v18 = 1;
  }
  else
  {
LABEL_8:
    v5 = sub_10003BE44();
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 784))(v5);
    if ((v18 & 1) != 0)
      v4 = 0;
    else
      v4 = *(_BYTE *)(a1 + 352) & 2;
  }
  v15 = 0;
  v6 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 344))(v6))
  {
    v7 = 1;
    v15 = 1;
  }
  else
  {
    v7 = 0;
  }
  v8 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8))
  {
    v9 = sub_100027F68();
    sub_100091AE8(buf, "A2DP");
    sub_100091AE8(__p, "DisableAACELD");
    (*(void (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v9 + 72))(v9, buf, __p, &v15);
    if (v17 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v23) < 0)
      operator delete(*(void **)buf);
    v7 = v15;
  }
  if (!v7)
  {
    if (*(_BYTE *)(a1 + 352))
    {
      v12 = sub_100412F2C(a1, 255);
      if (v12)
      {
        if (sub_100412FC0(v12, *(_QWORD *)(v12 + 16)))
          v4 = 33023;
        else
          v4 = v4;
      }
    }
  }
  v10 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    if ((int)v4 > 254)
    {
      if ((_DWORD)v4 == 255)
      {
        v11 = "Unknown AVDTP_CODEC_VENDOR_SPECIFIC";
        goto LABEL_37;
      }
      if ((_DWORD)v4 == 33023)
      {
        v11 = "AVDTP_CODEC_APPLE_AACELD";
        goto LABEL_37;
      }
    }
    else
    {
      if (!(_DWORD)v4)
      {
        v11 = "AVDTP_CODEC_SBC";
        goto LABEL_37;
      }
      if ((_DWORD)v4 == 2)
      {
        v11 = "AVDTP_CODEC_MPEG_AAC";
LABEL_37:
        v13 = *(_DWORD *)(a1 + 348);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v11;
        v20 = 1024;
        v21 = v4;
        v22 = 1024;
        v23 = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Selected preferred codec %s (0x%0x) out of %d available endpoints", buf, 0x18u);
        return v4;
      }
    }
    v11 = "Unknown AVDTP codec";
    goto LABEL_37;
  }
  return v4;
}

void sub_10041427C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_1004142C0(uint64_t a1)
{
  void **v2;

  v2 = *(void ***)(a1 + 184);
  if (v2)
  {
    if (v2[1])
    {
      free(v2[1]);
      v2 = *(void ***)(a1 + 184);
    }
    if (v2[3])
    {
      free(v2[3]);
      v2 = *(void ***)(a1 + 184);
    }
    free(v2);
    *(_QWORD *)(a1 + 184) = 0;
  }
}

double sub_100414314(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  void *v22[2];
  char v23;
  char v24;
  void *__p[2];
  char v26;
  unsigned int v27;
  uint8_t buf[16];
  __int128 v29;
  __int128 v30;
  void *v31[2];
  __int128 v32;
  void *v33[2];
  _OWORD v34[3];
  __int128 v35;
  uint64_t v36;

  v27 = 0;
  v4 = sub_100027F68();
  sub_100091AE8(buf, "A2DP");
  sub_100091AE8(__p, "SampleRate");
  v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned int *))(*(_QWORD *)v4 + 128))(v4, buf, __p, &v27);
  if (v26 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v29) < 0)
  {
    operator delete(*(void **)buf);
    if (!v5)
      goto LABEL_14;
  }
  else if (!v5)
  {
    goto LABEL_14;
  }
  v6 = v27;
  if (v27 != 48000 && v27 != 44100)
  {
    v9 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EF2B8(v6, v9, v10, v11, v12, v13, v14, v15);
LABEL_14:
    v36 = 0;
    v35 = 0u;
    memset(v34, 0, sizeof(v34));
    v32 = 0u;
    *(_OWORD *)v33 = 0u;
    v30 = 0u;
    *(_OWORD *)v31 = 0u;
    *(_OWORD *)buf = 0u;
    v29 = 0u;
    sub_1005BCCCC((uint64_t)&buf[1]);
    BYTE2(v29) = 0;
    BYTE4(v29) = 0;
    BYTE2(v31[0]) = 0;
    BYTE4(v31[0]) = 0;
    DWORD1(v34[1]) = 0;
    v30 = 0uLL;
    *((_QWORD *)&v29 + 1) = 0;
    LOBYTE(v31[0]) = 0;
    v32 = 0uLL;
    v31[1] = 0;
    LOBYTE(v33[0]) = 0;
    memset(v34, 0, 19);
    v33[1] = 0;
    BYTE8(v34[1]) = 1;
    BYTE2(v36) = 0;
    *(_QWORD *)((char *)&v34[1] + 14) = 0;
    *(_QWORD *)((char *)&v34[1] + 9) = 0;
    v35 = 0uLL;
    *((_QWORD *)&v34[2] + 1) = 0;
    LOBYTE(v36) = 0;
    sub_1004419F4(*(_QWORD *)(a1 + 208), (uint64_t)buf);
    v24 = 0;
    v16 = sub_100027F68();
    sub_100091AE8(__p, "A2DP");
    sub_100091AE8(v22, "Default48KHz");
    (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v16 + 72))(v16, __p, v22, &v24);
    if (v23 < 0)
      operator delete(v22[0]);
    if (v26 < 0)
      operator delete(__p[0]);
    if (v24)
    {
      v17 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Warning: GetPreferredSampleRate: Defaulting to 48 KHz based on defaults write - using denylist instead of allowlist", (uint8_t *)__p, 2u);
      }
      v8 = 48000.0;
      if (a2 != 2)
        goto LABEL_30;
      if (!BYTE8(v35))
        goto LABEL_30;
      v19 = qword_1009997C8;
      v8 = 44100.0;
      if (!os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_30;
      LOWORD(__p[0]) = 0;
      v20 = "GetPreferredSampleRate: Reducing sample rate - Device is in 48 KHz denylist";
    }
    else if (BYTE9(v35) || sub_1004420E0(*(_QWORD *)(a1 + 208)))
    {
      v19 = qword_1009997C8;
      v8 = 48000.0;
      if (!os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
LABEL_30:
        if (SHIBYTE(v34[0]) < 0)
          operator delete(v33[1]);
        if (SHIBYTE(v32) < 0)
          operator delete(v31[1]);
        if (SHIBYTE(v30) < 0)
          operator delete(*((void **)&v29 + 1));
        nullsub_90(&buf[1], v18);
        return v8;
      }
      LOWORD(__p[0]) = 0;
      v20 = "GetPreferredSampleRate: Device is in 48 KHz allowlist";
    }
    else
    {
      v19 = qword_1009997C8;
      v8 = 44100.0;
      if (!os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_30;
      LOWORD(__p[0]) = 0;
      v20 = "GetPreferredSampleRate: Reducing sample rate - Device is NOT in 48 KHz allowlist";
    }
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)__p, 2u);
    goto LABEL_30;
  }
  v7 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Warning: GetPreferredSampleRate: Setting user defined A2DP Sample Rate to %d Hz", buf, 8u);
    LODWORD(v6) = v27;
  }
  return (double)v6;
}

void sub_100414704(_Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  sub_10026B73C((uint64_t)&a23, a2);
  _Unwind_Resume(a1);
}

void sub_100414788(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[4];
  int v10;
  char v11;
  __int16 v12;
  __int16 v13;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092E268);
  v2 = sub_1004725FC((uint64_t)off_1009778E0);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_10092E288);
  v13 = 0;
  v3 = sub_10066189C((uint64_t)off_1009778C0) + v2;
  v12 = 0;
  v11 = 0;
  v10 = 0;
  v4 = sub_100038E50();
  (*(void (**)(uint64_t, char *, __int16 *, char *, __int16 *, char *, int *))(*(_QWORD *)v4 + 48))(v4, (char *)&v13 + 1, &v13, (char *)&v12 + 1, &v12, &v11, &v10);
  if (v3 > 2 || v3 == 2 && HIBYTE(v13))
  {
    v5 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Adjusting SBC bitpool to to 37 either due to > 2 Hid's or wifi state is 2.4 Ghz with >1 Hid", buf, 2u);
    }
    v6 = 37;
LABEL_11:
    *(_DWORD *)(a1 + 264) = v6;
    return;
  }
  if (HIBYTE(v13))
  {
    v7 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Adjusting SBC bitpool to 42, wifi state is 2.4 Ghz", v8, 2u);
    }
    v6 = 42;
    goto LABEL_11;
  }
}

uint64_t sub_100414904(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  __int128 v6;
  void *v7[2];
  __int128 v8;
  void *v9[2];
  __int128 v10;
  void *__p[2];
  _OWORD v12[3];
  __int128 v13;
  uint64_t v14;

  v14 = 0;
  v13 = 0u;
  memset(v12, 0, sizeof(v12));
  v10 = 0u;
  *(_OWORD *)__p = 0u;
  v8 = 0u;
  *(_OWORD *)v9 = 0u;
  v6 = 0u;
  *(_OWORD *)v7 = 0u;
  sub_1005BCCCC((uint64_t)&v6 + 1);
  BYTE2(v7[0]) = 0;
  BYTE4(v7[0]) = 0;
  BYTE2(v9[0]) = 0;
  BYTE4(v9[0]) = 0;
  DWORD1(v12[1]) = 0;
  v8 = 0uLL;
  v7[1] = 0;
  LOBYTE(v9[0]) = 0;
  v10 = 0uLL;
  v9[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v12, 0, 19);
  __p[1] = 0;
  BYTE8(v12[1]) = 1;
  BYTE2(v14) = 0;
  *(_QWORD *)((char *)&v12[1] + 14) = 0;
  *(_QWORD *)((char *)&v12[1] + 9) = 0;
  v13 = 0uLL;
  *((_QWORD *)&v12[2] + 1) = 0;
  LOBYTE(v14) = 0;
  v3 = *(_QWORD *)(a1 + 208);
  if (v3)
  {
    if (sub_1004419F4(v3, (uint64_t)&v6))
    {
      v4 = BYTE12(v12[1]);
      if (HIDWORD(v12[1]))
      {
        *(_DWORD *)(a1 + 264) = HIDWORD(v12[1]);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) + 3) = v4;
      }
    }
  }
  if (SHIBYTE(v12[0]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[1]);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[1]);
  return nullsub_90((char *)&v6 + 1, v2);
}

void sub_100414A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10026B73C((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_100414A58(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  _QWORD v6[2];
  unint64_t v7;

  v6[0] = 0;
  v6[1] = 0;
  v7 = 0;
  sub_1004164F4(a1, a2, (uint64_t)v6);
  v2 = sub_100415CCC();
  v3 = v7 >> 8 <= 0x176 || v7 / 0x3E8 > v2;
  v4 = !v3;
  if (v3 && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    sub_1006EF31C();
  return v4;
}

uint64_t sub_100414B04(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  void *v8;
  NSObject *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  *(_DWORD *)(a1 + 348) = a3;
  *(_DWORD *)(a1 + 344) = 0;
  v5 = 0;
  if (a3)
  {
    v6 = a3;
    v7 = (_BYTE *)(a2 + 3);
    do
    {
      if (*(v7 - 1) != 255 && !*(v7 - 3) && *(v7 - 2) == 1 && !*v7)
        *(_DWORD *)(a1 + 344) = ++v5;
      v7 += 4;
      --v6;
    }
    while (v6);
  }
  *(_BYTE *)(a1 + 352) = 0;
  v8 = *(void **)(a1 + 360);
  if (v8)
  {
    free(v8);
    v5 = *(_DWORD *)(a1 + 344);
  }
  *(_QWORD *)(a1 + 360) = malloc_type_calloc(v5, 0x20uLL, 0x1020040C75495F1uLL);
  v9 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO))
  {
    v10 = *(_DWORD *)(a1 + 344);
    *(_DWORD *)buf = 67109120;
    v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Available endpoints: %d", buf, 8u);
  }
  v11 = *(unsigned int *)(a1 + 348);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 0;
    v14 = (_BYTE *)(a2 + 3);
    do
    {
      v15 = *(v14 - 1);
      if (v15 != 255 && !*(v14 - 3) && *(v14 - 2) == 1 && !*v14)
      {
        v16 = *(_QWORD *)(a1 + 360) + 32 * v13;
        *(_DWORD *)(v16 + 4) = v15;
        *(_QWORD *)(v16 + 8) = 1;
        *(_BYTE *)v16 = 0;
        v17 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67111168;
          v20 = v12;
          v21 = 1024;
          v22 = v15;
          v23 = 1024;
          v24 = 0;
          v25 = 1024;
          v26 = 1;
          v27 = 1024;
          v28 = v13;
          v29 = 1024;
          v30 = v15;
          v31 = 1024;
          v32 = 0;
          v33 = 1024;
          v34 = 1;
          v35 = 1024;
          v36 = 0;
          _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "SaveDiscoveredPeerEndpoints Current Record = %d, seid = %d, inUse = %d, endpointType = %d, Endpoint saved: streamEndpointInfo = %d, seid = %d, inUse = %d, endpointType = %d, queryDone = %d", buf, 0x38u);
          v11 = *(unsigned int *)(a1 + 348);
        }
        ++v13;
      }
      ++v12;
      v14 += 4;
    }
    while (v12 < v11);
  }
  return 0;
}

void sub_100414D74(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = *(unsigned int *)(a1 + 344);
  v3 = *(char **)(a1 + 360);
  if ((_DWORD)v2)
  {
    v4 = 0;
    v5 = 16;
    v6 = v3;
    do
    {
      if (v6)
      {
        v7 = *(_QWORD *)&v6[v5];
        if (v7)
        {
          if (*(_QWORD *)(v7 + 8))
          {
            free(*(void **)(v7 + 8));
            v3 = *(char **)(a1 + 360);
          }
          free(*(void **)&v3[v5]);
          v3 = *(char **)(a1 + 360);
          *(_QWORD *)&v3[v5] = 0;
          v2 = *(unsigned int *)(a1 + 344);
          v6 = v3;
        }
      }
      ++v4;
      v5 += 32;
    }
    while (v4 < v2);
  }
  v8 = (_QWORD *)(a1 + 344);
  if (v3)
    free(v3);
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
}

uint64_t sub_100414E0C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  double v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _BOOL8 v24;
  int v25;
  const char *v26;
  char v27;
  int v28;
  NSObject *v29;
  uint32_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  unsigned int v34;
  NSObject *v35;
  NSObject *v36;
  unsigned int v37;
  NSObject *v38;
  NSObject *v39;
  uint64_t v40;
  unsigned int v41;
  char v42;
  uint64_t v43;
  int v44;
  int v45;
  void *__p[2];
  char v47;
  int v48;
  uint8_t buf[8];
  __int16 v50;
  int v51;
  char v52;

  v4 = sub_100413FC4(a1);
  *(_DWORD *)(a1 + 176) = v4;
  v5 = sub_100412F2C(a1, v4);
  if (!v5)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EF37C();
    return 0;
  }
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EF3E0();
    return 0;
  }
  v6 = v5;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(v5 + 4);
  sub_1004142C0(a1);
  *(_DWORD *)(a1 + 196) = 3;
  v7 = malloc_type_calloc(3uLL, 0x10uLL, 0x105204037B82EA9uLL);
  *(_QWORD *)(a1 + 184) = v7;
  *v7 = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 184) + 16) = 7;
  *(_BYTE *)(*(_QWORD *)(a1 + 184) + 17) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 184) + 18) = *(_DWORD *)(a1 + 176);
  *(_BYTE *)(*(_QWORD *)(a1 + 184) + 19) = *(_BYTE *)(*(_QWORD *)(a2 + 16) + 19);
  *(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) = malloc_type_calloc(*(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 19), 1uLL, 0x100004077774924uLL);
  *(_BYTE *)(*(_QWORD *)(a1 + 184) + 32) = 8;
  *(_BYTE *)(a1 + 192) = 1;
  memcpy(*(void **)(*(_QWORD *)(a1 + 184) + 24), *(const void **)(*(_QWORD *)(a2 + 16) + 24), *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 19));
  v8 = sub_100414314(a1, *(_DWORD *)(a1 + 176));
  *(double *)(a1 + 272) = v8;
  v9 = *(_DWORD *)(a1 + 176);
  switch(v9)
  {
    case 255:
      v23 = qword_1009997C8;
      v24 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT);
      if (!v24)
      {
LABEL_61:
        sub_1004134E4(v24, *(_QWORD *)(a1 + 184) + 16);
        return *(_QWORD *)(a1 + 184);
      }
      v25 = *(_DWORD *)(a1 + 156);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v25;
      v26 = "Selecting remote Vendor-Specific A2DP SEID %u";
      goto LABEL_31;
    case 2:
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) + 1) = v8 == 44100.0;
      if (*(double *)(a1 + 272) == 44100.0)
        v27 = 4;
      else
        v27 = -124;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) + 2) = v27;
      if (sub_100414A58(a1, *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8)))
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) + 3) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 8)
                                                                               + 3);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) + 4) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 8)
                                                                               + 4);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 24) + 5) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 16) + 8)
                                                                               + 5);
      }
      v23 = qword_1009997C8;
      v24 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT);
      if (!v24)
        goto LABEL_61;
      v28 = *(_DWORD *)(a1 + 156);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v28;
      v26 = "Selecting remote AAC SEID %u";
LABEL_31:
      v29 = v23;
      v30 = 8;
LABEL_60:
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v26, buf, v30);
      goto LABEL_61;
    case 0:
      if (v8 == 44100.0)
        v10 = 53;
      else
        v10 = 48;
      *(_DWORD *)(a1 + 264) = v10;
      v48 = 0;
      v11 = sub_100027F68();
      sub_100091AE8(buf, "A2DP");
      sub_100091AE8(__p, "SBCBitpool");
      v12 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v11 + 128))(v11, buf, __p, &v48);
      if (v47 < 0)
        operator delete(__p[0]);
      if (v52 < 0)
        operator delete(*(void **)buf);
      if (v12)
      {
        v13 = v48;
        v14 = qword_1009997C8;
        if ((v48 - 251) > 0xFFFFFF06)
        {
          if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v13;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Warning: Setting user defined SBC Bitpool value to %d", buf, 8u);
            v13 = v48;
          }
          *(_DWORD *)(a1 + 264) = v13;
        }
        else if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        {
          sub_1006EF288(v14, v15, v16, v17, v18, v19, v20, v21);
        }
      }
      else
      {
        v31 = sub_10003BE44();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 384))(v31))
        {
          v32 = qword_1009997C8;
          if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Adjusting bitpool if needed - we are Central", buf, 2u);
          }
          sub_100414788(a1);
        }
      }
      v33 = *(_QWORD *)(v6 + 16);
      v34 = *(unsigned __int8 *)(*(_QWORD *)(v33 + 8) + 2);
      if (v10 >= v34)
      {
        if (*(_DWORD *)(a1 + 264) < v34)
        {
          v36 = qword_1009997C8;
          if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v34;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Warning: Increasing SBC Bitpool to %d based on sink's Minimum Bitpool Value", buf, 8u);
            v33 = *(_QWORD *)(v6 + 16);
            v34 = *(unsigned __int8 *)(*(_QWORD *)(v33 + 8) + 2);
          }
          *(_DWORD *)(a1 + 264) = v34;
        }
      }
      else
      {
        v35 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v34;
          _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "Ignoring sink's SBC Minimum Bitpool Value of %d because it is too high", buf, 8u);
          v33 = *(_QWORD *)(v6 + 16);
        }
      }
      v37 = *(unsigned __int8 *)(*(_QWORD *)(v33 + 8) + 3);
      if (v37 > 1)
      {
        if (*(_DWORD *)(a1 + 264) > v37)
        {
          v39 = qword_1009997C8;
          if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v37;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Warning: Reducing SBC Bitpool to %d based on sink's Maximum Bitpool Value", buf, 8u);
            v33 = *(_QWORD *)(v6 + 16);
            v37 = *(unsigned __int8 *)(*(_QWORD *)(v33 + 8) + 3);
          }
          *(_DWORD *)(a1 + 264) = v37;
        }
      }
      else
      {
        v38 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v37;
          _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Ignoring sink's SBC Maximum Bitpool Value of %d because it is too low", buf, 8u);
          v33 = *(_QWORD *)(v6 + 16);
        }
      }
      v40 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 24);
      v41 = *(unsigned __int8 *)(*(_QWORD *)(v33 + 8) + 2);
      if (*(unsigned __int8 *)(v40 + 2) < v41)
      {
        *(_BYTE *)(v40 + 2) = v41;
        v40 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 24);
      }
      *(_BYTE *)(v40 + 3) = *(_DWORD *)(a1 + 264);
      if (*(double *)(a1 + 272) == 44100.0)
        v42 = 33;
      else
        v42 = 17;
      **(_BYTE **)(*(_QWORD *)(a1 + 184) + 24) = v42;
      v43 = qword_1009997C8;
      v24 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT);
      if (!v24)
        goto LABEL_61;
      v44 = *(_DWORD *)(a1 + 156);
      v45 = *(_DWORD *)(a1 + 264);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v44;
      v50 = 1024;
      v51 = v45;
      v26 = "Selecting remote SBC SEID %u with bitpool %d";
      v29 = v43;
      v30 = 14;
      goto LABEL_60;
  }
  return *(_QWORD *)(a1 + 184);
}

void sub_1004154D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10041550C(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v8;
  int v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;

  v1 = *(unsigned int *)(a1 + 344);
  if (!(_DWORD)v1)
    return 255;
  v3 = 0;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 360);
  v6 = 32 * v1;
  while (*(_BYTE *)(v5 + v4))
  {
    v4 += 32;
    ++v3;
    if (v6 == v4)
      return 255;
  }
  *(_BYTE *)(v5 + v4) = 1;
  v8 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(_DWORD *)(v5 + v4 + 4);
    v10[0] = 67109632;
    v10[1] = v3;
    v11 = 1024;
    v12 = v9;
    v13 = 1024;
    v14 = 1;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "getNextSeidForGetCapQuery Position: %d seid: %d queryDone %d", (uint8_t *)v10, 0x14u);
    v5 = *(_QWORD *)(a1 + 360);
  }
  return *(unsigned int *)(v5 + v4 + 4);
}

uint64_t sub_100415628(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  _BOOL4 v8;
  NSObject *v9;
  unsigned int v10;
  unsigned int v11;
  int v13;
  unsigned int v14;
  __int16 v15;
  unsigned int v16;
  __int16 v17;
  unsigned int v18;

  v2 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 792))(v2, 5))
  {
    v3 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 67109120;
      v14 = 60;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "A2DP Latency = %d ms for constant low latency", (uint8_t *)&v13, 8u);
    }
    return 60000;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 208);
    if (v5
      && sub_100442118(v5, 12)
      && (sub_100442118(*(_QWORD *)(a1 + 208), 13) & 1) == 0
      && !*(_DWORD *)(a1 + 292))
    {
      *(_DWORD *)(a1 + 292) = 150000;
    }
    v4 = *(unsigned int *)(a1 + 292);
    if ((_DWORD)v4)
    {
      v6 = *(unsigned __int8 *)(a1 + 304);
      v7 = qword_1009997C8;
      v8 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT);
      if (v6)
      {
        if (v8)
        {
          v13 = 67109120;
          v14 = v4;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "A2DP Latency = %d ms (DelayReport from accessory)", (uint8_t *)&v13, 8u);
          return *(unsigned int *)(a1 + 292);
        }
      }
      else
      {
        if (v8)
        {
          v11 = *(double *)(a1 + 280);
          v13 = 67109632;
          v14 = (v4 + v11) / 0x3E8;
          v15 = 1024;
          v16 = v4 / 0x3E8;
          v17 = 1024;
          v18 = v11 / 0x3E8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "A2DP Latency = %d ms (%d ms DelayReport from accessory + %d ms RTP blocking)", (uint8_t *)&v13, 0x14u);
          LODWORD(v4) = *(_DWORD *)(a1 + 292);
        }
        return (*(double *)(a1 + 280) + (double)v4);
      }
    }
    else
    {
      v9 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *(_DWORD *)(a1 + 288) / 0x3E8u;
        v13 = 67109120;
        v14 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "A2DP Latency = %d ms (estimate) calculated based on RTP packet interval", (uint8_t *)&v13, 8u);
      }
      return *(unsigned int *)(a1 + 288);
    }
  }
  return v4;
}

void sub_100415890(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  v4 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Setting stream config delay report latency for %d", (uint8_t *)v5, 8u);
  }
  *(_DWORD *)(a1 + 292) = a2;
}

void sub_100415940(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;

  v4 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO))
  {
    v5 = "not supported";
    if (a2)
      v5 = "supported";
    v6 = 136315138;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Setting absolute volume support to %s", (uint8_t *)&v6, 0xCu);
  }
  *(_BYTE *)(a1 + 300) = a2;
}

void sub_100415A08(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  int v8;
  int v9;

  v4 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO))
  {
    v8 = 67109120;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Reported MTU = %d", (uint8_t *)&v8, 8u);
  }
  if (a2 >= 1004)
    a2 = 1004;
  if (a2 >= 680)
  {
    v5 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5))
      a2 = 679;
  }
  v6 = a2 - 16;
  *(_DWORD *)(a1 + 248) = v6;
  v7 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO))
  {
    v8 = 67109120;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Setting RTP frame length to %d", (uint8_t *)&v8, 8u);
  }
}

void sub_100415B38(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  double v4;
  unsigned int v5;
  unsigned int v6;
  double v7;
  NSObject *v8;
  int v9;
  double v10;
  __int16 v11;
  int v12;
  __int16 v13;
  unsigned int v14;
  __int16 v15;
  unsigned int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  double v24;

  v2 = *(_DWORD *)(a1 + 264);
  *(_BYTE *)(a2 + 2) = v2;
  v3 = 2 * v2 + 13;
  v4 = *(double *)(a1 + 272);
  *(_DWORD *)(a1 + 252) = v3;
  *(_DWORD *)(a1 + 256) = (v4 * (double)(8 * v3) * 0.0078125 / 1000.0);
  v5 = *(_DWORD *)(a1 + 248);
  if (v5 / v3 >= 0xC)
    v6 = 12;
  else
    v6 = v5 / v3;
  *(_DWORD *)(a1 + 260) = v6;
  v7 = (float)((float)((float)v6 * 1000000.0) * 128.0) / v4;
  *(double *)(a1 + 280) = v7;
  *(_DWORD *)(a1 + 288) = (v7 * 5.0);
  v8 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 134219776;
    v10 = v4 / 1000.0;
    v11 = 1024;
    v12 = v2;
    v13 = 1024;
    v14 = (v4 * (double)(8 * v3) * 0.0078125 / 1000.0);
    v15 = 1024;
    v16 = v6;
    v17 = 1024;
    v18 = 2 * v2 + 13;
    v19 = 1024;
    v20 = v6 * v3;
    v21 = 1024;
    v22 = v5;
    v23 = 2048;
    v24 = v7 / 1000.0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "A2DP configured at %2.1f KHz. Codec: SBC, Bitpool: %d (%d kbps). %d frames * %d bytes = %d per RTP (max=%d) every %.2f ms", (uint8_t *)&v9, 0x3Au);
  }
}

uint64_t sub_100415CCC()
{
  uint64_t v1;

  sub_1000438A4();
  if (sub_100331480())
    return 256;
  v1 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 720))(v1))
    return 192;
  else
    return 244;
}

void sub_100415D10(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int *v5;
  NSObject *v6;
  unint64_t v7;
  unint64_t v8;
  NSObject *v10;
  uint64_t v12;
  int v13;
  int v14;
  NSObject *v15;
  unsigned int v16;
  double v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  float v21;
  double v22;
  NSObject *v23;
  unsigned int v24;
  void *__p[2];
  char v26;
  int v27;
  _BYTE buf[12];
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  _BOOL4 v32;
  __int16 v33;
  int v34;
  __int16 v35;
  unsigned int v36;
  __int16 v37;
  unsigned int v38;
  __int16 v39;
  unsigned int v40;
  __int16 v41;
  double v42;

  v4 = sub_100415CCC();
  v5 = (int *)(a1 + 256);
  *(_DWORD *)(a1 + 256) = v4;
  v6 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "For this platform, the default AAC-LC bitrate is %d", buf, 8u);
    v4 = *v5;
  }
  v7 = *(_QWORD *)(a2 + 16);
  v8 = v7 / 0x3E8;
  if (v7 >> 8 < 0x177 || v8 > v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EF4A8();
  }
  else
  {
    *v5 = v8;
    v10 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Setting AAC-LC max bitrate to sink requested bitrate of %d", buf, 8u);
    }
  }
  v27 = *v5;
  v12 = sub_100027F68();
  sub_100091AE8(buf, "A2DP");
  sub_100091AE8(__p, "AACBitrate");
  v13 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v12 + 88))(v12, buf, __p, &v27);
  if (v26 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v32) < 0)
  {
    operator delete(*(void **)buf);
    if (!v13)
      goto LABEL_23;
  }
  else if (!v13)
  {
    goto LABEL_23;
  }
  v14 = v27;
  if (v27 < 96)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EF444();
  }
  else
  {
    *v5 = v27;
    v15 = qword_1009997C8;
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Warning: Setting user defined AAC-LC bitrate: %d kbps", buf, 8u);
    }
  }
LABEL_23:
  v16 = *(_DWORD *)(a1 + 256);
  v17 = *(double *)(a1 + 272);
  v18 = vcvtpd_u64_f64((double)(1000 * v16) * 1024.0 / v17 * 0.125);
  *(_DWORD *)(a1 + 252) = v18;
  v19 = *(_DWORD *)(a1 + 248);
  v20 = v19 - 12;
  if (v19 - 12 < v18)
  {
    v16 = vcvtmd_u64_f64(v17 * (double)(8 * v20) * 0.0009765625 / 1000.0);
    *(_DWORD *)(a1 + 252) = v20;
    *(_DWORD *)(a1 + 256) = v16;
    v18 = v19 - 12;
  }
  *(_DWORD *)(a1 + 260) = v18 + 12 <= v19;
  v21 = 0.0;
  if (v18 + 12 <= v19)
    v21 = 1.0;
  v22 = (float)((float)(v21 * 1000000.0) * 1024.0) / v17;
  *(double *)(a1 + 280) = v22;
  *(_DWORD *)(a1 + 288) = (v22 * 6.0);
  v23 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134219776;
    if (v18 + 12 > v19)
      v24 = 0;
    else
      v24 = v18 + 12;
    *(double *)&buf[4] = v17 / 1000.0;
    v29 = 1024;
    v30 = v16;
    v31 = 1024;
    v32 = v18 + 12 <= v19;
    v33 = 1024;
    v34 = 12;
    v35 = 1024;
    v36 = v18;
    v37 = 1024;
    v38 = v24;
    v39 = 1024;
    v40 = v19;
    v41 = 2048;
    v42 = v22 / 1000.0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "A2DP configured at %2.1f KHz. Codec: AAC-LC, VBR max: %d kbps. %d frames * (%d+%d) bytes = %d per RTP (max=%d) every %.2f ms", buf, 0x3Au);
  }
}

void sub_1004160E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100416124(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  unsigned int v9;
  double v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  double v15;
  NSObject *v16;
  void *__p[2];
  char v18;
  int v19;
  _BYTE buf[12];
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  unsigned int v32;
  __int16 v33;
  double v34;

  v2 = (int *)(a1 + 256);
  *(_DWORD *)(a1 + 256) = 256;
  v3 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 720))(v3))
    *v2 = 174;
  v19 = 256;
  v4 = sub_100027F68();
  sub_100091AE8(buf, "A2DP");
  sub_100091AE8(__p, "AACELDBitrate");
  v5 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, int *))(*(_QWORD *)v4 + 88))(v4, buf, __p, &v19);
  if (v18 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v24) < 0)
    operator delete(*(void **)buf);
  if (v5)
  {
    v6 = v19;
    if (v19 < 96)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        sub_1006EF508();
    }
    else
    {
      *v2 = v19;
      v7 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Setting user defined AAC-ELD bitrate: %d kbps", buf, 8u);
      }
    }
  }
  v8 = *(_DWORD *)(a1 + 248);
  v9 = *(_DWORD *)(a1 + 256);
  v10 = *(double *)(a1 + 272);
  v11 = vcvtpd_u64_f64((double)(480000 * v9) / v10 * 0.125);
  v12 = v8 - 2;
  *(_DWORD *)(a1 + 248) = v8 - 2;
  *(_DWORD *)(a1 + 252) = v11;
  v13 = v8 - 4;
  if (v13 < v11)
  {
    v9 = vcvtmd_u64_f64(v10 * (double)(8 * v13) / 480.0 / 1000.0);
    *(_DWORD *)(a1 + 252) = v13;
    *(_DWORD *)(a1 + 256) = v9;
    v11 = v13;
  }
  if (v12 / v11 >= 3)
    v14 = 3;
  else
    v14 = v12 / v11;
  *(_DWORD *)(a1 + 260) = v14;
  v15 = (float)((float)v14 * 1000000.0) * 480.0 / v10;
  *(double *)(a1 + 280) = v15;
  *(_DWORD *)(a1 + 288) = (v15 * 5.0);
  v16 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134219776;
    *(double *)&buf[4] = v10 / 1000.0;
    v21 = 1024;
    v22 = v9;
    v23 = 1024;
    v24 = v14;
    v25 = 1024;
    v26 = 2;
    v27 = 1024;
    v28 = v11;
    v29 = 1024;
    v30 = v14 * (v11 + 2);
    v31 = 1024;
    v32 = v12;
    v33 = 2048;
    v34 = v15 / 1000.0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "A2DP configured at %2.1f KHz. Codec: AAC-ELD, VBR max: %d kbps. %d frames * (%d+%d) bytes = %d per RTP (max=%d) every %.2f ms", buf, 0x3Au);
  }
}

void sub_100416408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100416444(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  NSObject *v3;
  uint8_t v4[16];

  a3[4] = *a2 >> 4;
  a3[5] = *a2 & 0xF;
  *a3 = a2[1] >> 4;
  a3[1] = (a2[1] >> 2) & 3;
  a3[6] = a2[1] & 3;
  a3[3] = a2[2];
  a3[2] = a2[3];
  v3 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Extracted SBC configuration data", v4, 2u);
  }
}

void sub_1004164F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint8_t v4[16];

  *(_BYTE *)a3 = *(_BYTE *)a2;
  *(_DWORD *)(a3 + 4) = bswap32(*(unsigned __int16 *)(a2 + 1)) >> 20;
  *(_BYTE *)(a3 + 8) = (*(_BYTE *)(a2 + 2) >> 2) & 3;
  *(_BYTE *)(a3 + 9) = *(_BYTE *)(a2 + 3) >> 7;
  *(_QWORD *)(a3 + 16) = (unsigned __int16)(*(unsigned __int8 *)(a2 + 4) << 8) | ((unint64_t)(*(_BYTE *)(a2 + 3) & 0x7F) << 16) | *(unsigned __int8 *)(a2 + 5);
  v3 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Extracted AAC-LC configuration data", v4, 2u);
  }
}

void sub_1004165A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint8_t v4[16];

  *(_DWORD *)a3 = __rev16(*(unsigned __int16 *)(a2 + 6));
  *(_DWORD *)(a3 + 4) = (*(unsigned __int8 *)(a2 + 9) >> 4) | (16 * *(unsigned __int8 *)(a2 + 8));
  *(_DWORD *)(a3 + 8) = *(unsigned __int8 *)(a2 + 10) | ((*(_BYTE *)(a2 + 9) & 0xF) << 8);
  *(_BYTE *)(a3 + 12) = *(_BYTE *)(a2 + 11) >> 7;
  *(_QWORD *)(a3 + 16) = (unsigned __int16)(*(unsigned __int8 *)(a2 + 12) << 8) | ((unint64_t)(*(_BYTE *)(a2 + 11) & 0x7F) << 16) | *(unsigned __int8 *)(a2 + 13);
  v3 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Extracted AAC-ELD configuration data", v4, 2u);
  }
}

void sub_100416660(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL8 v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t v11;
  _BYTE *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];

  v2 = *(unsigned int *)(a1 + 176);
  if ((int)v2 > 254)
  {
    if ((_DWORD)v2 == 255)
    {
      v13 = qword_1009997C8;
      if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
        sub_1006EF5D0(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    else
    {
      if ((_DWORD)v2 != 33023)
      {
LABEL_21:
        v21 = qword_1009997C8;
        if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
          sub_1006EF56C(v2, v21, v22, v23, v24, v25, v26, v27);
        return;
      }
      v7 = qword_1009997C8;
      v8 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO);
      if (v8)
      {
        v28[0] = 0x80FF04000100;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Found AVDTP_CODEC_APPLE_AACELD codec type 0x%x", (uint8_t *)v28, 8u);
      }
      sub_1004165A4(v8, *(_QWORD *)(*(_QWORD *)(a1 + 184) + 24), (uint64_t)v28);
      sub_100416124(a1);
    }
  }
  else
  {
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == 2)
      {
        v3 = qword_1009997C8;
        v4 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO);
        if (v4)
        {
          v28[0] = 0x204000100;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Found AVDTP_CODEC_MPEG_AAC codec type 0x%x", (uint8_t *)v28, 8u);
        }
        v5 = *(_QWORD *)(a1 + 184);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 24);
          if (v6)
          {
            memset(v28, 0, sizeof(v28));
            sub_1004164F4(v4, v6, (uint64_t)v28);
            sub_100415D10(a1, (uint64_t)v28);
          }
        }
        return;
      }
      goto LABEL_21;
    }
    v9 = qword_1009997C8;
    v10 = os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_INFO);
    if (v10)
    {
      v28[0] = 67109120;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Found AVDTP_CODEC_SBC codec type 0x%x", (uint8_t *)v28, 8u);
    }
    v11 = *(_QWORD *)(a1 + 184);
    if (v11)
    {
      v12 = *(_BYTE **)(v11 + 24);
      if (v12)
      {
        sub_100416444(v10, v12, v28);
        sub_100415B38(a1, (uint64_t)v28);
      }
    }
  }
}

void sub_10041689C(id a1)
{
  operator new();
}

void sub_1004168DC()
{
  operator delete();
}

void sub_100416900(id a1)
{
  operator new();
}

void sub_100416940()
{
  operator delete();
}

void sub_100416988(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x18u);
}

void sub_1004169B8(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

double sub_1004169C4(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 24) = *(_OWORD *)off_10092E2C0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)off_10092E2D0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)off_10092E2E0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)off_10092E2F0;
  *(_QWORD *)(a1 + 88) = "None";
  *(_QWORD *)(a1 + 96) = "StartPending";
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

uint64_t sub_100416A0C(uint64_t a1)
{
  void *v2;

  sub_100416A40(a1);
  v2 = *(void **)(a1 + 128);
  if (v2)
  {
    *(_QWORD *)(a1 + 136) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_100416A40(uint64_t a1)
{
  void *v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(void **)(a1 + 120);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 104))
    {
      v3 = 0;
      v4 = 16;
      do
      {
        free(*(void **)(*(_QWORD *)(a1 + 120) + v4));
        ++v3;
        v4 += 32;
      }
      while (v3 < *(unsigned int *)(a1 + 104));
      v2 = *(void **)(a1 + 120);
    }
    free(v2);
    *(_QWORD *)(a1 + 120) = 0;
  }
  return 0;
}

uint64_t sub_100416AB0(uint64_t a1)
{
  char *v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  NSObject *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v28;
  void *__p[2];
  char v30;
  uint8_t buf[8];
  char v32;
  char v33;

  *(_DWORD *)a1 = -100526831;
  *(_BYTE *)(a1 + 112) = 0;
  v2 = (char *)malloc_type_calloc(6uLL, 0x20uLL, 0x1020040C75495F1uLL);
  *(_QWORD *)(a1 + 120) = v2;
  *((_DWORD *)v2 + 3) = 0;
  *(_QWORD *)(v2 + 4) = 1;
  *((_DWORD *)v2 + 7) = 3;
  v3 = malloc_type_calloc(3uLL, 0x10uLL, 0x105204037B82EA9uLL);
  *(_QWORD *)(*(_QWORD *)(a1 + 120) + 16) = v3;
  *v3 = 1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 16) + 16) = 7;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 16) + 17) = 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 16) + 18) = 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 16) + 19) = 4;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 16) + 24) = a1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 16) + 32) = 8;
  v4 = *(_QWORD *)(a1 + 120);
  *(_BYTE *)(v4 + 24) = 1;
  *(_DWORD *)(v4 + 44) = 0;
  *(_QWORD *)(v4 + 36) = 2;
  *(_DWORD *)(v4 + 60) = 3;
  v5 = malloc_type_calloc(3uLL, 0x10uLL, 0x105204037B82EA9uLL);
  *(_QWORD *)(*(_QWORD *)(a1 + 120) + 48) = v5;
  *v5 = 1;
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 48) + 16) = 7;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 48) + 18) = 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 48) + 19) = 4;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 48) + 24) = a1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 48) + 32) = 8;
  *(_BYTE *)(*(_QWORD *)(a1 + 120) + 56) = 1;
  v33 = 0;
  v6 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6))
    goto LABEL_8;
  v7 = sub_100027F68();
  sub_100091AE8(buf, "A2DP");
  sub_100091AE8(__p, "DisableAAC");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v7 + 72))(v7, buf, __p, &v33);
  if (v30 < 0)
    operator delete(__p[0]);
  if (v32 < 0)
    operator delete(*(void **)buf);
  if (v33)
  {
    v33 = 1;
    v8 = 2;
  }
  else
  {
LABEL_8:
    v9 = sub_10003BE44();
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 784))(v9);
    v8 = 2;
    if ((v33 & 1) == 0)
    {
      *(_DWORD *)(a1 + 4) = -2088501120;
      *(_WORD *)(a1 + 8) = 232;
      v10 = *(_QWORD *)(a1 + 120);
      *(_DWORD *)(v10 + 76) = 0;
      *(_QWORD *)(v10 + 68) = 3;
      *(_DWORD *)(v10 + 92) = 3;
      v11 = malloc_type_calloc(3uLL, 0x10uLL, 0x105204037B82EA9uLL);
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 80) = v11;
      *v11 = 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 80) + 16) = 7;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 80) + 17) = 0;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 80) + 18) = 2;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 80) + 19) = 6;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 80) + 24) = a1 + 4;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 80) + 32) = 8;
      v12 = *(_QWORD *)(a1 + 120);
      *(_BYTE *)(v12 + 88) = 1;
      *(_DWORD *)(v12 + 108) = 0;
      *(_QWORD *)(v12 + 100) = 4;
      *(_DWORD *)(v12 + 124) = 3;
      v13 = malloc_type_calloc(3uLL, 0x10uLL, 0x105204037B82EA9uLL);
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) = v13;
      *v13 = 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) + 16) = 7;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) + 17) = 0;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) + 18) = 2;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) + 19) = 6;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) + 24) = a1 + 4;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 112) + 32) = 8;
      *(_BYTE *)(*(_QWORD *)(a1 + 120) + 120) = 1;
      v8 = 4;
    }
  }
  v28 = 0;
  v14 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14))
    goto LABEL_17;
  v15 = sub_100027F68();
  sub_100091AE8(buf, "A2DP");
  sub_100091AE8(__p, "DisableAACELD");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v15 + 72))(v15, buf, __p, &v28);
  if (v30 < 0)
    operator delete(__p[0]);
  if (v32 < 0)
    operator delete(*(void **)buf);
  if (v28)
  {
    v28 = 1;
  }
  else
  {
LABEL_17:
    v16 = sub_10003BE44();
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 344))(v16);
    if ((v28 & 1) == 0)
    {
      *(_QWORD *)(a1 + 10) = 0x800080010000004CLL;
      *(_DWORD *)(a1 + 18) = -2080340992;
      *(_WORD *)(a1 + 22) = 226;
      v17 = *(_QWORD *)(a1 + 120) + 32 * v8;
      *(_DWORD *)(v17 + 12) = 0;
      *(_QWORD *)(v17 + 4) = 5;
      *(_DWORD *)(v17 + 28) = 3;
      v18 = malloc_type_calloc(3uLL, 0x10uLL, 0x105204037B82EA9uLL);
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 32 * v8 + 16) = v18;
      *v18 = 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 32 * v8 + 16) + 16) = 7;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 32 * v8 + 16) + 17) = 0;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 32 * v8 + 16) + 18) = -1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 32 * v8 + 16) + 19) = 14;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 32 * v8 + 16) + 24) = a1 + 10;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 32 * v8 + 16) + 32) = 8;
      v19 = *(_QWORD *)(a1 + 120);
      *(_BYTE *)(v19 + 32 * v8 + 24) = 1;
      v20 = v8 | 1;
      v21 = v19 + 32 * v20;
      *(_DWORD *)(v21 + 12) = 0;
      *(_QWORD *)(v21 + 4) = 6;
      *(_DWORD *)(v21 + 28) = 3;
      v22 = malloc_type_calloc(3uLL, 0x10uLL, 0x105204037B82EA9uLL);
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 32 * v20 + 16) = v22;
      *v22 = 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 32 * v20 + 16) + 16) = 7;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 32 * v20 + 16) + 17) = 0;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 32 * v20 + 16) + 18) = -1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 32 * v20 + 16) + 19) = 14;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 32 * v20 + 16) + 24) = a1 + 10;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 32 * v20 + 16) + 32) = 8;
      *(_BYTE *)(*(_QWORD *)(a1 + 120) + 32 * v20 + 24) = 1;
      v8 += 2;
    }
  }
  *(_DWORD *)(a1 + 104) = v8;
  *(_DWORD *)(a1 + 108) = v8;
  v23 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Local A2DP stream endpoints:", buf, 2u);
  }
  buf[0] = 0;
  sub_100043758(buf);
  if (*(_DWORD *)(a1 + 104))
  {
    v25 = 0;
    v26 = 16;
    do
    {
      nullsub_90(*(_QWORD *)(*(_QWORD *)(a1 + 120) + v26) + 16, v24);
      ++v25;
      v26 += 32;
    }
    while (v25 < *(unsigned int *)(a1 + 104));
  }
  sub_100043728(buf);
  return 0;
}

void sub_100417134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100417180(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v6 = 0;
  sub_100043758(&v6);
  if (*(_DWORD *)(a1 + 104))
  {
    v2 = 0;
    v3 = 16;
    while (!sub_10013C2A0(0, 0, *(_QWORD *)(*(_QWORD *)(a1 + 120) + v3), 3, 1, (_BYTE *)(*(_QWORD *)(a1 + 120) + v3 - 12)))
    {
      ++v2;
      v3 += 32;
      if (v2 >= *(unsigned int *)(a1 + 104))
        goto LABEL_5;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EF69C();
    goto LABEL_10;
  }
LABEL_5:
  v4 = sub_100138890(1, (uint64_t *)&off_10097B168);
  if ((_DWORD)v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EF63C();
LABEL_10:
    v4 = 1;
  }
  sub_100043728(&v6);
  return v4;
}

void sub_100417284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10041729C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v6 = 0;
  sub_100043758(&v6);
  if (sub_1001389CC() && os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
    sub_1006EF75C();
  if (*(_DWORD *)(a1 + 104))
  {
    v2 = 0;
    v3 = 4;
    while (!sub_10013C4D0(*(unsigned __int8 *)(*(_QWORD *)(a1 + 120) + v3)))
    {
      ++v2;
      v3 += 32;
      if (v2 >= *(unsigned int *)(a1 + 104))
        goto LABEL_8;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_ERROR))
      sub_1006EF6FC();
    v4 = 1;
  }
  else
  {
LABEL_8:
    v4 = 0;
  }
  sub_100043728(&v6);
  return v4;
}

void sub_100417388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1004173A0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  v2 = *(unsigned int *)(a1 + 104);
  if (!(_DWORD)v2)
    return 0;
  result = 0;
  v5 = *(_QWORD *)(a1 + 120);
  do
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(v5 + 16) + 18) == a2)
      result = v5;
    v5 += 32;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t sub_1004173DC(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _DWORD v8[2];

  v4 = qword_1009997C8;
  if (os_log_type_enabled((os_log_t)qword_1009997C8, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Getting local stream config for local seid %d", (uint8_t *)v8, 8u);
  }
  v5 = *(unsigned int *)(a1 + 104);
  if (!(_DWORD)v5)
    return 0;
  result = 0;
  v7 = *(_QWORD *)(a1 + 120);
  do
  {
    if (*(_DWORD *)(v7 + 4) == a2)
      result = v7;
    v7 += 32;
    --v5;
  }
  while (v5);
  return result;
}

_QWORD *sub_1004174B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  __tag_iconv_t *v9;
  __tag_iconv_t *v10;
  size_t v11;
  char *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  char *v34;
  size_t v35;
  char *v36;

  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = (char *)a1;
  else
    v5 = *(char **)a1;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  v35 = v6 + 1;
  v36 = v5;
  __chkstk_darwin();
  v8 = (char *)&v32 - v7;
  bzero((char *)&v32 - v7, v6 + 1);
  v33 = v6 + 1;
  v34 = v8;
  v9 = iconv_open("UTF-8//IGNORE", "UTF-8");
  if (v9 == (__tag_iconv_t *)-1)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
      sub_1006EF7BC();
  }
  else
  {
    v10 = v9;
    v11 = iconv(v9, &v36, &v35, &v34, &v33);
    if (iconv_close(v10))
    {
      if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
        sub_1006EF904();
    }
    else
    {
      if (v11 != -1)
        return sub_100091AE8(a2, v8);
      if (*__error() == 92 || *__error() == 22)
      {
        v13 = (char *)(v36 - v5);
        if (v36 - v5 >= 0 && (unint64_t)v13 <= v6)
        {
          std::string::copy((const std::string *)a1, v8, v36 - v5, 0);
          v13[(_QWORD)v8] = 0;
          return sub_100091AE8(a2, v8);
        }
        v14 = qword_1009997E8;
        if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR))
          sub_1006EF82C(v14, v15, v16, v17, v18, v19, v20, v21);
      }
      else
      {
        v22 = *__error();
        v23 = qword_1009997E8;
        v24 = os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_ERROR);
        if (v22 == 7)
        {
          if (v24)
            sub_1006EF860(v23, v25, v26, v27, v28, v29, v30, v31);
        }
        else if (v24)
        {
          sub_1006EF894();
        }
      }
    }
  }
  v8 = "";
  return sub_100091AE8(a2, v8);
}

void sub_1004176F0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  int v3;
  std::string::size_type size;
  std::string::size_type v5;
  unsigned int v6;
  uint64_t *v7;
  std::string::size_type v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  std::string::size_type v12;
  std::string *v13;
  int v14;
  const std::string::value_type *v15;
  std::string *v16;
  std::string::size_type v17;
  std::string::size_type v18;
  int v19;
  BOOL v20;
  std::string v21;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_10003430C(a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  v3 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v3 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  if (!size)
    return;
  v5 = 0;
  v6 = v3 >> 31;
  v7 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
  if (v3 >= 0)
    v8 = (std::string::size_type)a2;
  else
    v8 = a2->__r_.__value_.__r.__words[0];
  while (2)
  {
    v9 = (unsigned __int8 *)(v8 + v5);
    v10 = (unsigned __int8 *)(v8 + size);
LABEL_12:
    v11 = 0;
    while (*v9 != asc_10081FE22[v11])
    {
      if (++v11 == 5)
      {
        if (++v9 != v10)
          goto LABEL_12;
        return;
      }
    }
    if (v9 == v10)
      return;
    v12 = (std::string::size_type)&v9[-v8];
    if (&v9[-v8] == (unsigned __int8 *)-1)
      return;
    if ((v6 & 1) != 0)
      v13 = (std::string *)v7;
    else
      v13 = a2;
    memset(&v21, 0, sizeof(v21));
    v14 = v13->__r_.__value_.__s.__data_[v12];
    if (v14 <= 38)
    {
      if (v14 == 34)
      {
        v15 = "&quot;";
      }
      else
      {
        if (v14 != 38)
          goto LABEL_33;
        v15 = "&amp;";
      }
    }
    else if (v14 == 39)
    {
      v15 = "&apos;";
    }
    else
    {
      v15 = "&gt;";
      if (v14 != 62)
      {
        if (v14 != 60)
          goto LABEL_33;
        v15 = "&lt;";
      }
    }
    std::string::assign(&v21, v15);
LABEL_33:
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v21;
    else
      v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    else
      v17 = v21.__r_.__value_.__l.__size_;
    std::string::replace(a2, v12, 1uLL, (const std::string::value_type *)v16, v17);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    {
      v18 = v21.__r_.__value_.__l.__size_;
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    else
    {
      v18 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    }
    v5 = v18 + v12;
    v19 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    v20 = v19 < 0;
    LOBYTE(v6) = v19 < 0;
    v7 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
    size = a2->__r_.__value_.__l.__size_;
    if (v19 >= 0)
      v8 = (std::string::size_type)a2;
    else
      v8 = a2->__r_.__value_.__r.__words[0];
    if (!v20)
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (size > v5)
      continue;
    break;
  }
}

void sub_1004178E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

unint64_t sub_100417910(uint64_t a1)
{
  int v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v12;

  v2 = *(char *)(a1 + 23);
  if (v2 >= 0)
    v3 = (uint64_t *)a1;
  else
    v3 = *(uint64_t **)a1;
  if (v2 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 23);
  else
    v4 = *(_QWORD *)(a1 + 8);
  v5 = sub_10039B518((uint64_t)&v9, v3, v4);
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a1 + 23) >= 0)
      v7 = a1;
    else
      v7 = *(_QWORD *)a1;
    v9 = 136446466;
    v10 = v7;
    v11 = 2048;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Hashing \"%{public}s\" as %zu", (uint8_t *)&v9, 0x16u);
  }
  return v5;
}

void sub_1004179FC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v12;
  id v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  NSData *v21;
  NSData *v22;
  uint64_t v23;
  double v24;
  int v25;
  int v26;
  double v27;
  uint64_t v28;
  NSObject *v29;
  os_unfair_lock_s *v30;
  id v31;
  id v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  NSObject *v43;
  const void *v44;
  size_t v45;
  uint64_t **v46;
  uint64_t *v47;
  uint64_t v48;
  NSObject *v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  double v57;
  _OWORD *v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  CFTimeInterval v63;
  CFTimeInterval v64;
  void *v65;
  void *v66;
  void *v67;
  _QWORD v68[4];
  id v69;
  id v70;
  double v71;
  __int16 v72;
  __int16 v73;
  char v74;
  char v75;
  uint64_t (**v76)();
  unsigned int *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _OWORD *v81;
  _QWORD __dst[2];
  int v83;
  _BYTE buf[24];
  _BYTE v85[20];
  _BYTE v86[10];
  __int16 v87;
  _BYTE v88[10];
  _BYTE v89[10];
  _BYTE v90[10];
  __int128 v91;
  int v92;

  v12 = a3;
  v13 = a8;
  if (a2 && *(_QWORD *)(a1 + 80) == a2)
  {
    v78 = 0;
    v79 = 0;
    v80 = 0;
    sub_1000B6B08(&v78, *(_QWORD *)(a4 + 8) + 112);
    if (v80)
    {
      v76 = 0;
      v77 = 0;
      v91 = xmmword_10073B558;
      v92 = 0;
      sub_100042F44((__n128 *)buf, (__n128 *)&v91);
      v14 = *(unsigned int **)(sub_1004180EC((uint64_t)&v78, buf) + 8);
      v76 = &off_100918258;
      v77 = v14;
      if (v14)
        sub_10003C37C((uint64_t)v14);
      if (sub_10003F8C4((uint64_t)&v76) == 20)
      {
        v15 = *(_QWORD *)(a4 + 8);
        if (*(_BYTE *)(v15 + 370))
        {
          v16 = sub_100027F68();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 176))(v16)
            && os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEBUG))
          {
            sub_1006EF974();
          }
          v17 = *(_QWORD *)(a4 + 8);
          v18 = *(char *)(v17 + 396);
          v19 = *(char *)(v17 + 397);
          v20 = *(char *)(a1 + 208);
          if (v18 > v20)
            LOBYTE(v20) = v18;
          *(_BYTE *)(a1 + 208) = v20;
          v21 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", sub_10003EB18((uint64_t)&v76), 16);
          v67 = (void *)objc_claimAutoreleasedReturnValue(v21);
          v22 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", sub_10003EB18((uint64_t)&v76) + 16, 4);
          v66 = (void *)objc_claimAutoreleasedReturnValue(v22);
          v23 = *(_QWORD *)(a4 + 8);
          v24 = *(double *)(v23 + 384) - *(double *)(v23 + 376);
          if ((int)v24 <= 0x3C)
            v25 = 60;
          else
            v25 = (int)v24;
          v26 = sub_1005F5FB0(v23, *(uint8x8_t *)&v24);
          v27 = *(double *)(*(_QWORD *)(a4 + 8) + 384);
          v28 = sub_100027F68();
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 176))(v28))
          {
            v29 = qword_100999938;
            if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEBUG))
            {
              v60 = sub_100021770(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 200));
              v61 = objc_claimAutoreleasedReturnValue(v60);
              v62 = *(_QWORD *)(a4 + 8);
              v63 = kCFAbsoluteTimeIntervalSince1970 + *(double *)(v62 + 376);
              v64 = kCFAbsoluteTimeIntervalSince1970 + *(double *)(v62 + 384);
              *(_DWORD *)buf = 138414594;
              *(_QWORD *)&buf[4] = v12;
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v61;
              *(_WORD *)&buf[22] = 2112;
              *(_QWORD *)v85 = v67;
              *(_WORD *)&v85[8] = 2112;
              *(_QWORD *)&v85[10] = v66;
              *(_WORD *)&v85[18] = 1024;
              *(_DWORD *)v86 = v19;
              *(_WORD *)&v86[4] = 1024;
              *(_DWORD *)&v86[6] = v18;
              v87 = 2048;
              *(CFTimeInterval *)v88 = v63;
              *(_WORD *)&v88[8] = 2048;
              *(CFTimeInterval *)v89 = v64;
              *(_WORD *)&v89[8] = 1024;
              *(_DWORD *)v90 = v25;
              *(_WORD *)&v90[4] = 1024;
              *(_DWORD *)&v90[6] = v26;
              v65 = (void *)v61;
              _os_log_debug_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "cached device %@ address:%@ rpi:%@ aem:%@ avgRSSI:%d maxRSSI:%d firstTimestamp:%f lastTimestamp:%f deltaSinceLastStop:%d sec reports:%hu", buf, 0x56u);

            }
          }
          v30 = (os_unfair_lock_s *)(a1 + 176);
          v68[0] = _NSConcreteStackBlock;
          v68[1] = 3221225472;
          v68[2] = sub_1004181E0;
          v68[3] = &unk_10092E308;
          v31 = v67;
          v69 = v31;
          v32 = v66;
          v70 = v32;
          v74 = v19;
          v75 = v18;
          v72 = v26;
          v71 = v27 + kCFAbsoluteTimeIntervalSince1970;
          v73 = v25;
          sub_100418124(v30, v68);

        }
        else
        {
          v40 = *(char *)(v15 + 216);
          if (v40 < 1)
          {
            __dst[0] = 0;
            __dst[1] = 0;
            v83 = 0;
            v44 = (const void *)sub_10003EB18((uint64_t)&v76);
            v45 = sub_10003F8C4((uint64_t)&v76);
            memcpy(__dst, v44, v45);
            v46 = (uint64_t **)(a1 + 48);
            *(_QWORD *)buf = __dst;
            v47 = (uint64_t *)sub_10041D540((uint64_t **)(a1 + 48), (uint64_t)__dst, (uint64_t)&unk_100740F58, (_OWORD **)buf);
            sub_10041820C(v47 + 7, a4);
            v48 = sub_100027F68();
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v48 + 184))(v48))
            {
              v49 = qword_100999938;
              if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_INFO))
              {
                v50 = sub_100021770(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 200));
                v51 = (id)objc_claimAutoreleasedReturnValue(v50);
                v52 = sub_10003EB18((uint64_t)&v76);
                v53 = sub_10003EB18((uint64_t)&v76);
                v54 = *(_QWORD *)(a4 + 8);
                v55 = *(char *)(v54 + 216);
                v56 = *(unsigned __int8 *)(v54 + 217);
                v57 = *(double *)(v54 + 240);
                v81 = __dst;
                v58 = sub_10041D540(v46, (uint64_t)__dst, (uint64_t)&unk_100740F58, &v81);
                v59 = (uint64_t)(*((_QWORD *)v58 + 8) - *((_QWORD *)v58 + 7)) >> 4;
                *(_DWORD *)buf = 138414594;
                *(_QWORD *)&buf[4] = v12;
                *(_WORD *)&buf[12] = 2112;
                *(_QWORD *)&buf[14] = v51;
                *(_WORD *)&buf[22] = 1040;
                *(_DWORD *)v85 = 16;
                *(_WORD *)&v85[4] = 2096;
                *(_QWORD *)&v85[6] = v52;
                *(_WORD *)&v85[14] = 1040;
                *(_DWORD *)&v85[16] = 4;
                *(_WORD *)v86 = 2096;
                *(_QWORD *)&v86[2] = v53 + 16;
                v87 = 1024;
                *(_DWORD *)v88 = v55;
                *(_WORD *)&v88[4] = 1024;
                *(_DWORD *)&v88[6] = v56;
                *(_WORD *)v89 = 2048;
                *(double *)&v89[2] = v57 + kCFAbsoluteTimeIntervalSince1970;
                *(_WORD *)v90 = 2048;
                *(_QWORD *)&v90[2] = v59;
                _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "device %@ address:%@ rpi:%.16P aem:%.4P rssi:%d saturated:%d timestamp:%f totalReports:%lu", buf, 0x56u);

              }
            }
          }
          else
          {
            v41 = *(unsigned __int16 *)(a1 + 274);
            v42 = 0xFFFF;
            if (v41 != 0xFFFF)
            {
              v42 = v41 + 1;
              *(_WORD *)(a1 + 274) = v41 + 1;
            }
            v43 = qword_100999928;
            if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109634;
              *(_DWORD *)&buf[4] = v40;
              *(_WORD *)&buf[8] = 2112;
              *(_QWORD *)&buf[10] = v12;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v42;
              _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Ignoring invalid RSSI level (%d) received from device %@ (fInvalidRSSIReportCounter:%d)", buf, 0x18u);
            }
          }
        }
      }
      else
      {
        v33 = qword_100999928;
        if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
          sub_1006EF9A0((uint64_t)v12, v33, v34, v35, v36, v37, v38, v39);
      }
      v76 = &off_100918258;
      if (v77)
        sub_100056AAC(v77);
    }
    sub_100056B54((uint64_t)&v78, v79);
  }

}

void sub_100418038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned int *a20,char a21,_QWORD *a22)
{
  void *v22;
  void *v23;

  if (a20)
    sub_100056AAC(a20);
  sub_100056B54((uint64_t)&a21, a22);

  _Unwind_Resume(a1);
}

uint64_t sub_1004180EC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  v2 = *sub_10009C49C(a1, &v4, a2);
  if (!v2)
    abort();
  return v2 + 56;
}

void sub_100418124(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1004181B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1004181E0(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 60), *(unsigned __int8 *)(a1 + 56), 0, *(unsigned __int16 *)(a1 + 58), *(double *)(a1 + 48));
}

uint64_t sub_10041820C(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v3 = (_QWORD *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    result = sub_10041D664(a1, a2);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 8);
    *v3 = &off_100918298;
    v3[1] = v4;
    if (v4)
      sub_10003C37C(v4);
    result = (uint64_t)(v3 + 2);
    a1[1] = (uint64_t)(v3 + 2);
  }
  a1[1] = result;
  return result;
}

void sub_100418264(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10041826C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  sub_1004179FC(a1 - 8, a2, a3, a4, a5, 0, a7, a8);
}

uint64_t sub_100418278(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint8_t v5[16];

  v2 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "stackDidStart", v5, 2u);
  }
  *(_BYTE *)(a1 + 72) = 1;
  v3 = sub_100038E50();
  sub_100260C8C(v3 + 368, a1 + 32);
  sub_100418310(a1);
  return sub_100418418(a1);
}

void sub_100418310(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned __int16 v5;
  NSObject *v6;
  uint8_t v7[16];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar autoupdatingCurrentCalendar](NSCalendar, "autoupdatingCurrentCalendar"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "components:fromDate:", 16, v3));
  v5 = (unsigned __int16)objc_msgSend(v4, "day");

  if (*(unsigned __int8 *)(a1 + 248) != v5)
  {
    *(_DWORD *)(a1 + 232) = 0;
    *(_BYTE *)(a1 + 248) = v5;
    v6 = qword_100999938;
    if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "resetting daily counters (fCurrentShortAPWakeTimeInSeconds, fDayOfMonth, fEstimatedAPWakeCount)", v7, 2u);
    }
  }
}

void sub_1004183F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_100418418(uint64_t a1)
{
  void *__p;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 80) && *(_BYTE *)(a1 + 72))
  {
    __p = 0;
    v3 = 0;
    v4 = 0;
    operator new();
  }
  return 12;
}

void sub_1004186C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100418734(uint64_t a1)
{
  return sub_100418278(a1 - 16);
}

void sub_10041873C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  v2 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "ContactTracingManager::stackWillStop enter", buf, 2u);
  }
  *(_BYTE *)(a1 + 72) = 0;
  objc_msgSend(*(id *)(a1 + 288), "stopActivityUpdates");
  v3 = *(void **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;

  v4 = sub_100038E50();
  sub_1002B43D4(v4 + 368, a1 + 32);
  v5 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "ContactTracingManager::stackWillStop exit", v6, 2u);
  }
}

void sub_100418810(uint64_t a1)
{
  sub_10041873C(a1 - 16);
}

_BYTE *sub_100418818()
{
  char v1;

  v1 = 0;
  sub_100043758(&v1);
  if (sub_100221860((uint64_t)sub_1004188E0))
  {
    if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
      sub_1006EFA64();
  }
  else if (sub_1002219E0((uint64_t)sub_100418944)
         && os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
  {
    sub_1006EFA04();
  }
  return sub_100043728(&v1);
}

void sub_1004188CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_1004188E0()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "ExposureNotification::leAddressChangedCallback", v1, 2u);
  }
}

void sub_100418944()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "ExposureNotification::leAddressWillChangeCallback", v1, 2u);
  }
}

void sub_1004189AC(uint64_t a1, int a2, int a3)
{
  NSObject *v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;

  v5 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109376;
    v6[1] = a3;
    v7 = 1024;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "New PowerState:%d module:%d", (uint8_t *)v6, 0xEu);
  }
}

void sub_100418A64(uint64_t a1, int a2)
{
  NSObject *v3;
  const char *v4;
  int v5;
  const char *v6;

  v3 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_INFO))
  {
    v4 = "NO";
    if (a2)
      v4 = "YES";
    v5 = 136315138;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "ExposureNotification::leAdvertisingStateChanged advertising:%s", (uint8_t *)&v5, 0xCu);
  }
}

void sub_100418B20(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[16];

  v2 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "ExposureNotification::advertisingStoppedForSession", v4, 2u);
  }
  if (*(_QWORD *)(a1 + 80))
  {
    v3 = sub_1000419F4();
    sub_100041A34(v3, &stru_10092E328);
  }
}

void sub_100418BA0(id a1)
{
  if (qword_10097B180 != -1)
    dispatch_once(&qword_10097B180, &stru_10092E500);
  sub_100418BE0((uint64_t)off_10097B178);
}

uint64_t sub_100418BE0(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 80))
    operator new();
  return 12;
}

void sub_100418D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14)
    sub_100056AAC(a14);
  _Unwind_Resume(exception_object);
}

void sub_100418E04(uint64_t a1)
{
  sub_100418B20(a1 - 24);
}

id sub_100418E0C(uint64_t a1)
{
  uint64_t v2;
  id result;

  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEBUG))
    sub_1006EFAC4();
  v2 = sub_10003BE44();
  result = (id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 352))(v2);
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 288), "stopActivityUpdates");
  return result;
}

id sub_100418E6C(uint64_t a1)
{
  return sub_100418E0C(a1 - 32);
}

void sub_100418E74(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "ContactTracingManager Power : system woke up", v3, 2u);
  }
  sub_100418310(a1);
}

void sub_100418EE4(uint64_t a1)
{
  sub_100418E74(a1 - 32);
}

void sub_100418EEC(uint64_t a1, unint64_t a2)
{
  BOOL v3;
  uint64_t v4;
  _QWORD v5[5];
  BOOL v6;

  v3 = HIDWORD(a2) == 1;
  v4 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100418F5C;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = v3;
  sub_100041A34(v4, v5);
}

void sub_100418F5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  _DWORD v6[2];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 176))(v3))
  {
    v4 = qword_100999938;
    if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(unsigned __int8 *)(a1 + 40);
      v6[0] = 67109120;
      v6[1] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WifiStateChanged wiFiAssociatedToBand2GHz=%d", (uint8_t *)v6, 8u);
    }
  }
  *(_BYTE *)(v2 + 250) = *(_BYTE *)(a1 + 40);
}

void sub_100419028(uint64_t a1, unint64_t a2)
{
  sub_100418EEC(a1 - 40, a2);
}

double sub_100419030(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10092E358;
  *(_QWORD *)(a1 + 8) = off_10092E3E8;
  *(_QWORD *)(a1 + 16) = off_10092E448;
  *(_QWORD *)(a1 + 24) = &off_10092E478;
  *(_QWORD *)(a1 + 32) = off_10092E4A0;
  *(_QWORD *)(a1 + 40) = &off_10092E4D0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = CFSTR("unknown");
  *(_QWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 210) = xmmword_100741160;
  *(_WORD *)(a1 + 226) = 1800;
  *(_DWORD *)(a1 + 228) = 28800;
  *(_WORD *)(a1 + 234) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_WORD *)(a1 + 248) = 256;
  *(_BYTE *)(a1 + 250) = 0;
  *(_DWORD *)(a1 + 252) = 4;
  *(_WORD *)(a1 + 256) = 5;
  *(_QWORD *)(a1 + 260) = 150;
  *(_QWORD *)&result = 0xAF000050030;
  *(_QWORD *)(a1 + 268) = 0xAF000050030;
  *(_BYTE *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  return result;
}

uint64_t sub_10041910C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[5];
  uint8_t buf[16];

  v2 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "restarting advertising", buf, 2u);
  }
  sub_1004191BC(a1);
  v3 = sub_1000419F4();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1004192AC;
  v5[3] = &unk_100917378;
  v5[4] = a1;
  sub_100041A34(v3, v5);
  return 0;
}

uint64_t sub_1004191BC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _DWORD v5[2];

  if (!*(_QWORD *)(a1 + 80))
    return 12;
  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_10092E520);
  v2 = sub_1005FEF50((uint64_t)off_100977C28, *(_QWORD *)(a1 + 80));
  v3 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "stopAdvertising returning %d", (uint8_t *)v5, 8u);
  }
  return v2;
}

uint64_t sub_1004192AC(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(v1 + 80))
  {
    v2 = qword_100999938;
    if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "restarting advertising as we have a valid session", v3, 2u);
    }
    return sub_100418BE0(v1);
  }
  return result;
}

uint64_t sub_100419324(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = a1[5];
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_10092E540);
  result = sub_10001ABD0((uint64_t)off_100977FA8, *(_QWORD *)(v2 + 80), a1[6]);
  *(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = result;
  return result;
}

uint64_t sub_10041938C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  uint64_t v5;
  _QWORD v7[6];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint8_t buf[4];
  int v13;

  if (!*(_QWORD *)(a1 + 80))
    return 12;
  v8 = 0;
  v9 = &v8;
  v10 = 0x2020000000;
  v11 = 0;
  v2 = sub_1000419F4();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1004194C8;
  v7[3] = &unk_100919528;
  v7[4] = &v8;
  v7[5] = a1;
  sub_100023D84(v2, v7);
  v3 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_INFO))
  {
    v4 = *((_DWORD *)v9 + 6);
    *(_DWORD *)buf = 67109120;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "stopScanning returning %d", buf, 8u);
  }
  v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1004194B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004194C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_10092E540);
  result = sub_100012EF4((uint64_t)off_100977FA8, *(_QWORD *)(v2 + 80), 1, 1, 0);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_100419538(uint64_t a1, uint64_t a2)
{
  NSObject *global_queue;
  _QWORD block[5];

  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004195A0;
  block[3] = &unk_100917378;
  block[4] = a2;
  dispatch_async(global_queue, block);
}

void sub_1004195A0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  double Current;
  unint64_t v5;
  double v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  double v13;
  _QWORD v14[2];
  _QWORD v15[2];
  uint8_t buf[2312];

  v2 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 176))(v2))
  {
    v3 = qword_100999938;
    if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Benchmark: RPI generation", buf, 2u);
    }
  }
  Current = CFAbsoluteTimeGetCurrent();
  bzero(buf, 0x900uLL);
  v15[0] = 0;
  v15[1] = 0;
  v14[0] = 0;
  v14[1] = 0;
  ENRPIKDerive(v14, v15);
  if (*(_QWORD *)(a1 + 32))
  {
    v5 = 0;
    do
    {
      ENRPIDeriveBatch(buf, v14, 0, 144);
      v5 += 144;
    }
    while (v5 < *(_QWORD *)(a1 + 32));
  }
  v6 = CFAbsoluteTimeGetCurrent();
  v7 = sub_100027F68();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7) & 1) != 0)
  {
    v8 = qword_100999938;
    if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 134218240;
      v11 = v9;
      v12 = 2048;
      v13 = v6 - Current;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Benchmark: created %llu RPI's in %f seconds", (uint8_t *)&v10, 0x16u);
    }
  }
}

_QWORD *sub_100419728@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_10003994C(a2, (const void *)(a1 + 146), 0x14uLL);
}

uint64_t sub_100419738(uint64_t a1, void *a2, int a3, uint64_t *a4)
{
  int v7;
  _QWORD *v8;
  BOOL v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  char v23;
  char v24;
  id v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  NSNumber *v35;
  void *v36;
  NSNumber *v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  NSObject *v46;
  const char *v47;
  int v48;
  int v49;
  unint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  _BYTE buf[24];
  _BYTE v56[6];
  _BYTE v57[10];
  _BYTE v58[6];
  _QWORD v59[2];
  __int128 v60;
  _QWORD v61[2];
  __int128 v62;

  if (a2 && a3 == 20)
  {
    v62 = 0uLL;
    v54 = 0;
    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_10092E560);
    v7 = sub_1006A4BE0(qword_1009778B0, &v62, 16, &v54);
    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_10092E560);
    v8 = (_QWORD *)(a1 + 146);
    sub_1006A345C(qword_1009778B0, a1 + 146, 16);
    if (!v7 && (*v8 == (_QWORD)v62 ? (v9 = *(_QWORD *)(a1 + 154) == *((_QWORD *)&v62 + 1)) : (v9 = 0), v9))
    {
      v13 = qword_100999938;
      if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "using the same payload as before", buf, 2u);
      }
      *a4 = v54;
    }
    else
    {
      v10 = qword_100999938;
      if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Storing new payload and address", buf, 2u);
      }
      *(_WORD *)&buf[5] = 0;
      *(_DWORD *)&buf[1] = 0;
      buf[0] = 1;
      if (CCRandomGenerateBytes(&buf[1], 6uLL))
      {
        if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
          sub_1006EFC10();
        return 1;
      }
      buf[1] &= 0x3Fu;
      *a4 = ((unint64_t)buf[1] << 40) | ((unint64_t)buf[2] << 32) | ((unint64_t)buf[3] << 24) | ((unint64_t)buf[4] << 16) | ((unint64_t)buf[5] << 8) | buf[6] | ((unint64_t)buf[0] << 48);
      if (qword_1009778B8 != -1)
        dispatch_once(&qword_1009778B8, &stru_10092E560);
      sub_1006A4CF0(qword_1009778B0, a1 + 146, 16);
    }
    v14 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 184))(v14))
    {
      v15 = qword_100999938;
      if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
      {
        v16 = sub_100021770(v54);
        v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        v18 = sub_100021770(*a4);
        v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        *(_DWORD *)buf = 138479107;
        *(_QWORD *)&buf[4] = v17;
        *(_WORD *)&buf[12] = 2113;
        *(_QWORD *)&buf[14] = v19;
        *(_WORD *)&buf[22] = 1041;
        *(_DWORD *)v56 = 16;
        *(_WORD *)&v56[4] = 2097;
        *(_QWORD *)v57 = &v62;
        *(_WORD *)&v57[8] = 1041;
        *(_DWORD *)v58 = 16;
        *(_WORD *)&v58[4] = 2097;
        v59[0] = a1 + 146;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "previousAddress:%{private}@ newAddress:%{private}@ previousPayload:%{private}.16P fCurrentAdvertisingPayload:%{private}.16P", buf, 0x36u);

      }
    }
    v61[0] = 0;
    v61[1] = 0;
    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_10092E560);
    v11 = sub_1006A34D8(qword_1009778B0, (uint64_t)v61, 0x10uLL, 0);
    if ((_DWORD)v11)
    {
      if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
        sub_1006EFBB0();
    }
    else
    {
      v53 = 257;
      v20 = sub_10003BE44();
      BYTE2(v53) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 808))(v20);
      HIBYTE(v53) = 3;
      v60 = *(_OWORD *)v8;
      v52 = 0;
      if (qword_1009778B8 != -1)
        dispatch_once(&qword_1009778B8, &stru_10092E560);
      v11 = sub_1006A4804(qword_1009778B0, (uint64_t)v61, (uint64_t)&v53, (uint64_t)&v60, (uint64_t)&v52);
      if ((_DWORD)v11)
      {
        if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
          sub_1006EFB50();
      }
      else
      {
        *(_DWORD *)(a1 + 162) = v52;
        v21 = sub_100027F68();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 184))(v21))
        {
          v22 = qword_100999938;
          if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
          {
            v51 = SBYTE2(v53);
            v49 = v53;
            v23 = BYTE1(v53);
            v24 = HIBYTE(v53);
            v25 = sub_100021770(*a4);
            v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
            *(_DWORD *)&buf[4] = 20;
            *(_DWORD *)buf = 68224771;
            *(_WORD *)&buf[8] = 2097;
            *(_QWORD *)&buf[10] = a1 + 146;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v51;
            *(_WORD *)v56 = 1024;
            *(_DWORD *)&v56[2] = (16 * (v23 & 3)) | (v49 << 6) | (4 * (v24 & 3));
            *(_WORD *)v57 = 2113;
            *(_QWORD *)&v57[2] = v26;
            *(_WORD *)v58 = 1040;
            *(_DWORD *)&v58[2] = 4;
            LOWORD(v59[0]) = 2096;
            *(_QWORD *)((char *)v59 + 2) = &v52;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Payload is now %{private}.20P TXPower:%d version:0x%x address:%{private}@ aem:%.4P", buf, 0x38u);

          }
        }
        v27 = sub_100027F68();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27))
        {
          v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
          v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSLocale currentLocale](NSLocale, "currentLocale"));
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "descriptionWithLocale:", v29));
          objc_msgSend(v28, "setObject:forKeyedSubscript:", v31, CFSTR("RPIHistoryTime"));

          v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a1 + 146, 20));
          objc_msgSend(v28, "setObject:forKeyedSubscript:", v32, CFSTR("RPIHistoryOTAPayload"));

          v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", v52));
          objc_msgSend(v28, "setObject:forKeyedSubscript:", v33, CFSTR("RPIHistoryAEMVersion"));

          v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", BYTE1(v52)));
          objc_msgSend(v28, "setObject:forKeyedSubscript:", v34, CFSTR("RPIHistoryAEMTxPower"));

          v35 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent() + kCFAbsoluteTimeIntervalSince1970);
          v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
          objc_msgSend(v28, "setObject:forKeyedSubscript:", v36, CFSTR("RPIHistorySecondsSince1970"));

          if (qword_1009778B8 != -1)
            dispatch_once(&qword_1009778B8, &stru_10092E560);
          v37 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", sub_1006A440C(0.0));
          v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
          objc_msgSend(v28, "setObject:forKeyedSubscript:", v38, CFSTR("RPIHistoryENIntervalNumber"));

          v39 = *(void **)(a1 + 168);
          v40 = objc_msgSend(v28, "copy");
          objc_msgSend(v39, "insertObject:atIndex:", v40, 0);

          while ((unint64_t)objc_msgSend(*(id *)(a1 + 168), "count") >= 0x191)
            objc_msgSend(*(id *)(a1 + 168), "removeLastObject");

        }
        if (*(_BYTE *)(a1 + 113))
        {
          v41 = *(_QWORD *)(a1 + 120);
          v42 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 128) - v41) >> 3);
          if (*(_QWORD *)(a1 + 128) != v41)
          {
            v50 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 128) - v41) >> 3);
            v43 = 146;
            do
            {
              v44 = (const char *)v41;
              if (*(char *)(v41 + 23) < 0)
                v44 = *(const char **)v41;
              *(_BYTE *)(a1 + v43) = atoi(v44);
              v45 = sub_100027F68();
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 184))(v45))
              {
                v46 = qword_100999938;
                if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
                {
                  v47 = (const char *)v41;
                  if (*(char *)(v41 + 23) < 0)
                    v47 = *(const char **)v41;
                  v48 = atoi(v47);
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)&buf[4] = v43 - 145;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v48;
                  _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Force Payload fCurrentAdvertisingPayload[%d] = %d", buf, 0xEu);
                }
              }
              v41 += 24;
              ++v43;
            }
            while (v41 != *(_QWORD *)(a1 + 128));
            LOBYTE(v42) = v50;
          }
        }
        else
        {
          LOBYTE(v42) = 20;
        }
        memcpy(a2, (const void *)(a1 + 146), v42);
        return 0;
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
      sub_1006EFAF0();
    return 3;
  }
  return v11;
}

void sub_100419FB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_10041A04C(uint64_t a1, void *a2, double a3)
{
  id v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  int v18;
  int v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  _QWORD v32[6];
  void *__p;
  void **p_p;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint8_t buf[4];
  double v39;
  __int16 v40;
  uint64_t v41;

  v5 = a2;
  v6 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 352))(v6) & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 80))
    {
      v7 = qword_100999928;
      if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
        sub_1006EFDC0(a1, v7, v8, v9, v10, v11, v12, v13);
LABEL_16:
      v14 = 12;
      goto LABEL_17;
    }
    if (v5)
    {
      v15 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-ENClient"), v5));
      v16 = *(void **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = v15;

    }
    v37 = 0;
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_10092E580);
    v17 = qword_100977B48;
    sub_100091AE8(&__p, (char *)objc_msgSend(*(id *)(a1 + 96), "UTF8String"));
    v18 = sub_10000A378(v17, (uint64_t)&__p);
    v19 = v18;
    if (SHIBYTE(v35) < 0)
    {
      operator delete(__p);
      if (v19)
      {
LABEL_14:
        v20 = qword_100999928;
        if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
          sub_1006EFD5C((uint64_t)v5, v20, v21, v22, v23, v24, v25, v26);
        goto LABEL_16;
      }
    }
    else if (v18)
    {
      goto LABEL_14;
    }
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_10092E580);
    v28 = sub_1000229D8((_QWORD *)qword_100977B48, v37);
    *(_QWORD *)(a1 + 80) = v28;
    if (!v28)
    {
      if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
        sub_1006EFC70();
      goto LABEL_16;
    }
    if (*(_BYTE *)(a1 + 72) && (v14 = sub_100418418(a1), (_DWORD)v14))
    {
      if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
        sub_1006EFCFC();
    }
    else
    {
      __p = 0;
      p_p = &__p;
      v35 = 0x2020000000;
      v36 = 0;
      v29 = sub_1000419F4();
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472;
      v32[2] = sub_10041A414;
      v32[3] = &unk_100919528;
      v32[4] = &__p;
      v32[5] = a1;
      sub_100023D84(v29, v32);
      if (*((_DWORD *)p_p + 6))
      {
        if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
          sub_1006EFC9C();
        sub_10041938C(a1);
        v14 = *((unsigned int *)p_p + 6);
      }
      else
      {
        *(double *)(a1 + 104) = a3;
        v30 = qword_100999938;
        if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_INFO))
        {
          v31 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)buf = 134218242;
          v39 = a3;
          v40 = 2112;
          v41 = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "started at %f with %@", buf, 0x16u);
        }
        v14 = 0;
      }
      _Block_object_dispose(&__p, 8);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
      sub_1006EFE28();
    v14 = 11;
  }
LABEL_17:

  return v14;
}

void sub_10041A3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

uint64_t sub_10041A414(uint64_t a1)
{
  uint64_t result;

  result = sub_100418BE0(*(_QWORD *)(a1 + 40));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_10041A444(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;

  v2 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 352))(v2) & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 80))
    {
      if (*(_BYTE *)(a1 + 72)
        && sub_10041938C(a1)
        && os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
      {
        sub_1006EFF48();
      }
      if (sub_1004191BC(a1) && os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
        sub_1006EFEE8();
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10092E580);
      v3 = qword_100977B48;
      v4 = sub_100022AE4(*(_QWORD *)(a1 + 80));
      if (sub_10000B174(v3, v4))
      {
        v5 = qword_100999928;
        if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
          sub_1006EFE80(a1, v5, v6, v7, v8, v9, v10, v11);
      }
      *(_QWORD *)(a1 + 80) = 0;
      v12 = *(void **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = CFSTR("unknown");

      objc_msgSend(*(id *)(a1 + 288), "stopActivityUpdates");
      v13 = *(void **)(a1 + 280);
      *(_QWORD *)(a1 + 280) = 0;

      return 0;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
        sub_1006EFE54();
      return 12;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
      sub_1006EFE28();
    return 11;
  }
}

void sub_10041A608(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  int v24;
  NSObject *v25;
  uint64_t v26;
  int v27;
  int v28;
  NSObject *v29;
  uint64_t v30;
  int v31;
  int v32;
  NSObject *v33;
  uint64_t v34;
  int v35;
  int v36;
  NSObject *v37;
  uint64_t v38;
  int v39;
  int v40;
  NSObject *v41;
  uint64_t v42;
  int v43;
  int v44;
  NSObject *v45;
  uint64_t v46;
  int v47;
  int v48;
  NSObject *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  NSObject *v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  NSObject *v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  NSObject *v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  NSObject *v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  NSObject *v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  NSObject *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  CMMotionActivityManager *v92;
  void *v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unsigned __int8 v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  void *__p[2];
  char v112;
  unsigned __int8 v113;
  uint8_t buf[8];
  char v115;

  v113 = 0;
  v2 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ENScanWithDuplicateEnable");
  v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(_QWORD *)v2 + 72))(v2, buf, __p, &v113);
  if (v112 < 0)
    operator delete(__p[0]);
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3)
      goto LABEL_9;
  }
  else if (!v3)
  {
    goto LABEL_9;
  }
  v4 = v113;
  *(_BYTE *)(a1 + 112) = v113;
  v5 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Overriding contactTracingEnableScanDuplicateFilters = %d ", buf, 8u);
  }
LABEL_9:
  v6 = sub_100027F68();
  sub_100091AE8(buf, "ENForceCustomPayloadData");
  v7 = (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v6 + 120))(v6, buf, a1 + 120);
  v8 = v7;
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v8)
      goto LABEL_15;
  }
  else if (!v7)
  {
    goto LABEL_15;
  }
  *(_BYTE *)(a1 + 113) = 1;
  v9 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buf = 67109120;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Overriding ENForceCustomPayload = %d ", buf, 8u);
  }
LABEL_15:
  *(_WORD *)(a1 + 144) = 432;
  v110 = 0;
  v10 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ENForceCustomAdvInterval");
  v11 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v10 + 88))(v10, buf, __p, &v110);
  if (v112 < 0)
    operator delete(__p[0]);
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v11)
      goto LABEL_23;
  }
  else if (!v11)
  {
    goto LABEL_23;
  }
  v12 = v110;
  *(_WORD *)(a1 + 144) = v110;
  v13 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Overriding ENForceCustomAdvInterval = %d ", buf, 8u);
  }
LABEL_23:
  v109 = 0;
  v14 = sub_100027F68();
  sub_100091AE8(buf, "ENScanOverrides");
  sub_100091AE8(__p, "ENOverrideScanWithDuplicatesDurationInMS");
  v15 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v14 + 88))(v14, buf, __p, &v109);
  if (v112 < 0)
    operator delete(__p[0]);
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v15)
      goto LABEL_31;
  }
  else if (!v15)
  {
    goto LABEL_31;
  }
  v16 = v109;
  *(_WORD *)(a1 + 214) = v109;
  v17 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Overriding fNextScanWithDuplicatesDurationInMs = %d ", buf, 8u);
  }
LABEL_31:
  v108 = 0;
  v18 = sub_100027F68();
  sub_100091AE8(buf, "ENScanOverrides");
  sub_100091AE8(__p, "ENOverrideExtraScanTimeInMs");
  v19 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v18 + 88))(v18, buf, __p, &v108);
  if (v112 < 0)
    operator delete(__p[0]);
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v19)
      goto LABEL_39;
  }
  else if (!v19)
  {
    goto LABEL_39;
  }
  v20 = v108;
  *(_WORD *)(a1 + 216) = v108;
  v21 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v20;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Overriding fExtraScanTimeInMs = %d ", buf, 8u);
  }
LABEL_39:
  v107 = 0;
  v22 = sub_100027F68();
  sub_100091AE8(buf, "ENScanOverrides");
  sub_100091AE8(__p, "ENOverrideNumOfSightingsHighThreshold");
  v23 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v22 + 88))(v22, buf, __p, &v107);
  if (v112 < 0)
    operator delete(__p[0]);
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v23)
      goto LABEL_47;
  }
  else if (!v23)
  {
    goto LABEL_47;
  }
  v24 = v107;
  *(_WORD *)(a1 + 218) = v107;
  v25 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Overriding fNumOfSightingsHighThreshold = %d ", buf, 8u);
  }
LABEL_47:
  v106 = 0;
  v26 = sub_100027F68();
  sub_100091AE8(buf, "ENScanOverrides");
  sub_100091AE8(__p, "ENOverrideRSSIHighThreshold");
  v27 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v26 + 88))(v26, buf, __p, &v106);
  if (v112 < 0)
    operator delete(__p[0]);
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v27)
      goto LABEL_55;
  }
  else if (!v27)
  {
    goto LABEL_55;
  }
  v28 = v106;
  *(_WORD *)(a1 + 220) = v106;
  v29 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v28;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Overriding fHighRSSIThreshold = %d ", buf, 8u);
  }
LABEL_55:
  v105 = 0;
  v30 = sub_100027F68();
  sub_100091AE8(buf, "ENScanOverrides");
  sub_100091AE8(__p, "ENOverrideShortAPWakeDeltaInSeconds");
  v31 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v30 + 88))(v30, buf, __p, &v105);
  if (v112 < 0)
    operator delete(__p[0]);
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v31)
      goto LABEL_63;
  }
  else if (!v31)
  {
    goto LABEL_63;
  }
  v32 = v105;
  *(_WORD *)(a1 + 222) = v105;
  v33 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v32;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Overriding fAPWakeDeltaDurationNormalSeconds = %d ", buf, 8u);
  }
LABEL_63:
  v104 = 0;
  v34 = sub_100027F68();
  sub_100091AE8(buf, "ENScanOverrides");
  sub_100091AE8(__p, "ENOverrideNormalAPWakeDeltaInSeconds");
  v35 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v34 + 88))(v34, buf, __p, &v104);
  if (v112 < 0)
    operator delete(__p[0]);
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v35)
      goto LABEL_71;
  }
  else if (!v35)
  {
    goto LABEL_71;
  }
  v36 = v104;
  *(_WORD *)(a1 + 224) = v104;
  v37 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v36;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Overriding fAPWakeDeltaDurationShortSeconds = %d ", buf, 8u);
  }
LABEL_71:
  v103 = 0;
  v38 = sub_100027F68();
  sub_100091AE8(buf, "ENScanOverrides");
  sub_100091AE8(__p, "ENOverrideStationaryDurationInSeconds");
  v39 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v38 + 88))(v38, buf, __p, &v103);
  if (v112 < 0)
    operator delete(__p[0]);
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v39)
      goto LABEL_79;
  }
  else if (!v39)
  {
    goto LABEL_79;
  }
  v40 = v103;
  *(_WORD *)(a1 + 226) = v103;
  v41 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v40;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Overriding fStationaryDurationSeconds = %d ", buf, 8u);
  }
LABEL_79:
  v102 = 0;
  v42 = sub_100027F68();
  sub_100091AE8(buf, "ENScanOverrides");
  sub_100091AE8(__p, "ENOverrideMaxDailyShortAPWakes");
  v43 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v42 + 88))(v42, buf, __p, &v102);
  if (v112 < 0)
    operator delete(__p[0]);
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v43)
      goto LABEL_87;
  }
  else if (!v43)
  {
    goto LABEL_87;
  }
  v44 = v102;
  *(_DWORD *)(a1 + 228) = (unsigned __int16)v102;
  v45 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v44;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Overriding fMaxDailyShortAPWakeAllowanceInSeconds = %d ", buf, 8u);
  }
LABEL_87:
  v101 = 0;
  v46 = sub_100027F68();
  sub_100091AE8(buf, "ENScanOverrides");
  sub_100091AE8(__p, "ENEnableAdaptiveAPWakeScheduling");
  v47 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(_QWORD *)v46 + 72))(v46, buf, __p, &v101);
  if (v112 < 0)
    operator delete(__p[0]);
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v47)
      goto LABEL_95;
  }
  else if (!v47)
  {
    goto LABEL_95;
  }
  v48 = v101;
  *(_BYTE *)(a1 + 249) = v101;
  v49 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v48;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Overriding fEnableAdaptiveAPWakeScheduling = %d ", buf, 8u);
  }
LABEL_95:
  v100 = 0;
  v50 = sub_100027F68();
  sub_100091AE8(buf, "LeObserver");
  sub_100091AE8(__p, "OverrideContactTracingScanDurationSeconds");
  v51 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v50 + 88))(v50, buf, __p, &v100);
  if (v100)
    v52 = v51;
  else
    v52 = 0;
  if (v112 < 0)
    operator delete(__p[0]);
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v52)
      goto LABEL_107;
  }
  else if (!v52)
  {
    goto LABEL_107;
  }
  *(_DWORD *)(a1 + 252) = v100;
  v53 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v53 + 176))(v53))
  {
    v54 = qword_100999938;
    if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
    {
      v55 = *(_DWORD *)(a1 + 252);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v55;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Overriding fContactTracingScanDuration with %d seconds", buf, 8u);
    }
  }
LABEL_107:
  v99 = 0;
  v56 = sub_100027F68();
  sub_100091AE8(buf, "LeObserver");
  sub_100091AE8(__p, "OverrideContactTracingScanDeltaSeconds");
  v57 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v56 + 88))(v56, buf, __p, &v99);
  if (v112 < 0)
    operator delete(__p[0]);
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v57)
      goto LABEL_116;
  }
  else if (!v57)
  {
    goto LABEL_116;
  }
  *(_DWORD *)(a1 + 260) = v99;
  v58 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v58 + 176))(v58))
  {
    v59 = qword_100999938;
    if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
    {
      v60 = *(_DWORD *)(a1 + 260);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v60;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Overriding fContactTracingScanDelta with %d seconds", buf, 8u);
    }
  }
LABEL_116:
  v98 = 0;
  v61 = sub_100027F68();
  sub_100091AE8(buf, "LeObserver");
  sub_100091AE8(__p, "OverrideContactTracingLowDutyScanDurationSeconds");
  v62 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v61 + 88))(v61, buf, __p, &v98);
  if (v98)
    v63 = v62;
  else
    v63 = 0;
  if (v112 < 0)
    operator delete(__p[0]);
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v63)
      goto LABEL_128;
  }
  else if (!v63)
  {
    goto LABEL_128;
  }
  *(_WORD *)(a1 + 256) = v98;
  v64 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v64 + 176))(v64))
  {
    v65 = qword_100999938;
    if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
    {
      v66 = *(unsigned __int16 *)(a1 + 256);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v66;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "Overriding fLowDutyCycleScanDurationWhileContactTracing with %d seconds", buf, 8u);
    }
  }
LABEL_128:
  v97 = 0;
  v67 = sub_100027F68();
  sub_100091AE8(buf, "LeObserver");
  sub_100091AE8(__p, "OverrideContactTracingLowDutyScanIntervalSeconds");
  v68 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v67 + 88))(v67, buf, __p, &v97);
  if (v97)
    v69 = v68;
  else
    v69 = 0;
  if (v112 < 0)
    operator delete(__p[0]);
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v69)
      goto LABEL_140;
  }
  else if (!v69)
  {
    goto LABEL_140;
  }
  *(_WORD *)(a1 + 268) = v97;
  v70 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 176))(v70))
  {
    v71 = qword_100999938;
    if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
    {
      v72 = *(unsigned __int16 *)(a1 + 268);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v72;
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "Overriding fLowDutyCycleScanIntervalWhileContactTracing with %d seconds", buf, 8u);
    }
  }
LABEL_140:
  v96 = 0;
  v73 = sub_100027F68();
  sub_100091AE8(buf, "LeObserver");
  sub_100091AE8(__p, "OverrideContactTracingScanDurationA2DPWifi2GSeconds");
  v74 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v73 + 88))(v73, buf, __p, &v96);
  if (v96)
    v75 = v74;
  else
    v75 = 0;
  if (v112 < 0)
    operator delete(__p[0]);
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v75)
      goto LABEL_152;
  }
  else if (!v75)
  {
    goto LABEL_152;
  }
  *(_WORD *)(a1 + 270) = v96;
  v76 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v76 + 176))(v76))
  {
    v77 = qword_100999938;
    if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
    {
      v78 = *(unsigned __int16 *)(a1 + 270);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v78;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "Overriding fContactTracingScanDurationWhileA2DPWifi2G with %d seconds", buf, 8u);
    }
  }
LABEL_152:
  v95 = 0;
  v79 = sub_100027F68();
  sub_100091AE8(buf, "ENScanOverrides");
  sub_100091AE8(__p, "ENOverrideScanWithDuplicatesDurationA2DPWifi2GInMS");
  v80 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v79 + 88))(v79, buf, __p, &v95);
  if (v112 < 0)
    operator delete(__p[0]);
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v80)
      goto LABEL_161;
  }
  else if (!v80)
  {
    goto LABEL_161;
  }
  *(_WORD *)(a1 + 272) = v95;
  v81 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v81 + 176))(v81))
  {
    v82 = qword_100999938;
    if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v95;
      _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "Overriding fNextScanWithDuplicatesDurationA2DPWifi2GInMs = %d ", buf, 8u);
    }
  }
LABEL_161:
  v94 = 0;
  v83 = sub_100027F68();
  sub_100091AE8(buf, "ENScanOverrides");
  sub_100091AE8(__p, "ENOverrideMaxAllowedRSSILevel");
  v84 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v83 + 88))(v83, buf, __p, &v94);
  if (v112 < 0)
    operator delete(__p[0]);
  if (v115 < 0)
  {
    operator delete(*(void **)buf);
    if (!v84)
      goto LABEL_170;
  }
  else if (!v84)
  {
    goto LABEL_170;
  }
  *(_BYTE *)(a1 + 296) = v94;
  v85 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v85 + 176))(v85))
  {
    v86 = qword_100999938;
    if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
    {
      v87 = *(char *)(a1 + 296);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v87;
      _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "Overriding fMaxAllowedRSSILevel = %d ", buf, 8u);
    }
  }
LABEL_170:
  v88 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v88 + 352))(v88))
  {
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_10092E5A0);
    sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 16);
    if (qword_100977C30 != -1)
      dispatch_once(&qword_100977C30, &stru_10092E520);
    sub_1005FC26C((uint64_t)off_100977C28, a1 + 24);
    if (qword_100978130 != -1)
      dispatch_once(&qword_100978130, &stru_10092E5C0);
    sub_1002B4110((uint64_t)off_100978128 + 80, a1);
    if (qword_100977FB0 != -1)
      dispatch_once(&qword_100977FB0, &stru_10092E540);
    sub_1000B5218((uint64_t)off_100977FA8 + 1872, a1 + 8);
    v89 = sub_100038E50();
    sub_100260F7C(v89 + 288, a1 + 40);
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_10092E5A0);
    *(_BYTE *)(a1 + 88) = sub_1000261DC((uint64_t)off_100977A50);
    v90 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v91 = *(void **)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v90;

    v92 = objc_opt_new(CMMotionActivityManager);
    v93 = *(void **)(a1 + 288);
    *(_QWORD *)(a1 + 288) = v92;

  }
}

void sub_10041B7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  if (*(char *)(v24 - 41) < 0)
    operator delete(*(void **)(v24 - 64));
  _Unwind_Resume(exception_object);
}

void sub_10041B8B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned __int8 *a7)
{
  int v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  NSObject *v20;
  int v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;

  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_10092E560);
  v13 = sub_1006A48B4(qword_1009778B0, a2, a3, a4, a7);
  v14 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 184))(v14)
    && (v15 = qword_100999938, os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEBUG)))
  {
    v17 = (char)a7[2];
    v18 = a7[3];
    v21 = 67111171;
    v22 = v17;
    v23 = 1024;
    v24 = a5;
    v25 = 1024;
    v26 = v18;
    v27 = 1024;
    v28 = a6;
    v29 = 1041;
    v30 = 16;
    v31 = 2097;
    v32 = a2;
    v33 = 1041;
    v34 = 16;
    v35 = 2097;
    v36 = a3;
    v37 = 1024;
    v38 = v13;
    _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "decryptAEM Decrypted payload TXPower:%d rssi:%d calibratioConfidence:%d saturated:%d tek:%{private}.16P rpi:%{private}.16P result:%d", (uint8_t *)&v21, 0x40u);
    if (v13)
      goto LABEL_6;
  }
  else if (v13)
  {
LABEL_6:
    if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
      sub_1006EFFA8();
    LOBYTE(v16) = -1;
    goto LABEL_16;
  }
  v19 = (char)a7[2];
  if (((a5 == 127) & a6) != 0)
    v16 = 0;
  else
    v16 = (v19 - a5) & ~((v19 - a5) >> 31);
  if (!v16)
  {
    v20 = qword_100999928;
    if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
    {
      v21 = 67109888;
      v22 = v19;
      v23 = 1024;
      v24 = a5;
      v25 = 1024;
      v26 = a6;
      v27 = 1024;
      v28 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "decryptAEM returning 0 txPower:%d rssi:%d saturated:%d attn:%d", (uint8_t *)&v21, 0x1Au);
    }
  }
LABEL_16:
  a7[4] = v16;
}

void sub_10041BB04()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[16];

  v0 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v0 + 176))(v0))
  {
    v1 = qword_100999938;
    if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "scanDurationStarted", v2, 2u);
    }
  }
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_10092E5E0);
  sub_10061D4E0((uint64_t)off_1009778A0);
}

void sub_10041BBB0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  __int16 v16;
  uint64_t v17;
  double v18;
  char v19;
  char v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  BOOL v24;
  uint64_t v25;
  NSObject *v26;
  int v27;
  int v28;
  int v29;
  __int16 v30;
  unsigned int *v31;
  NSData *v32;
  void *v33;
  NSData *v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  id v39;
  id v40;
  _QWORD *v41;
  _QWORD *v42;
  BOOL v43;
  uint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD v48[4];
  id v49;
  id v50;
  double v51;
  unsigned int v52;
  char v53;
  char v54;
  char v55;
  char v56;
  uint64_t (**v57)();
  unsigned int *v58;
  uint8_t v59;
  char v60[7];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE buf[14];
  void *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  double v73;
  __int16 v74;
  unsigned int v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  int v79;
  __int128 v80;
  int v81;

  v2 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "scanDurationDone, report the results for %lu total devices found", buf, 0xCu);
  }
  v44 = a1;
  objc_msgSend(*(id *)(a1 + 288), "stopActivityUpdates");
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_10092E540);
  v4 = a1;
  v5 = *((double *)off_100977FA8 + 285);
  *(_BYTE *)(a1 + 208) = -127;
  if (v5 == 0.0)
  {
    v6 = 150;
  }
  else
  {
    v6 = (CFAbsoluteTimeGetCurrent() - v5);
    v4 = a1;
    if (v6 > 2 * *(unsigned __int16 *)(a1 + 222))
      v6 = *(unsigned __int16 *)(a1 + 222);
  }
  v45 = v6;
  v7 = *(_DWORD *)(v4 + 64);
  *(_WORD *)(v4 + 212) = v7 - *(_WORD *)(v4 + 210);
  v8 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 176))(v8))
  {
    v9 = qword_100999938;
    if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(unsigned __int16 *)(v44 + 210);
      v11 = *(__int16 *)(v44 + 212);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = (unsigned __int16)v7;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v10;
      LOWORD(v65) = 1024;
      *(_DWORD *)((char *)&v65 + 2) = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "newNumOfSightings:%d lastNumOfSightings:%d delta:%d", buf, 0x14u);
    }
  }
  *(_WORD *)(v44 + 210) = v7;
  v12 = *(_QWORD **)(v44 + 48);
  v46 = (_QWORD *)(v44 + 56);
  if (v12 != (_QWORD *)(v44 + 56))
  {
    do
    {
      v61 = 0;
      v62 = 0;
      v63 = 0;
      sub_10041DB24(&v61, v12[7], v12[8], (uint64_t)(v12[8] - v12[7]) >> 4);
      v14 = v61;
      v13 = v62;
      if (v62 != v61)
      {
        v15 = 0;
        v16 = 0;
        v17 = *(_QWORD *)(v61 + 8);
        v47 = v17 + 112;
        v18 = *(double *)(v17 + 240) + kCFAbsoluteTimeIntervalSince1970;
        v19 = -127;
        v20 = 1;
        do
        {
          v21 = *(_QWORD *)(v14 + 8);
          v22 = *(char *)(v21 + 216);
          if (v22 == 127)
          {
            v23 = qword_100999928;
            if (os_log_type_enabled((os_log_t)qword_100999928, OS_LOG_TYPE_ERROR))
              sub_1006F0008(&v59, v60, v23);
          }
          else
          {
            v24 = *(_BYTE *)(v21 + 217) != 0;
            if (v19 <= v22)
              v19 = *(_BYTE *)(v21 + 216);
            v25 = sub_100027F68();
            v20 &= v24;
            ++v15;
            v16 += v22;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 184))(v25))
            {
              v26 = qword_100999938;
              if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEBUG))
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 8) + 217);
                *(_DWORD *)buf = 67109632;
                *(_DWORD *)&buf[4] = v15;
                *(_WORD *)&buf[8] = 1024;
                *(_DWORD *)&buf[10] = v22;
                LOWORD(v65) = 1024;
                *(_DWORD *)((char *)&v65 + 2) = v27;
                _os_log_debug_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "%d) rssi:%d saturated:%d", buf, 0x14u);
              }
            }
          }
          v14 += 16;
        }
        while (v14 != v13);
        v28 = v15;
        if (v15)
        {
          v29 = *(char *)(v44 + 208);
          if (v19 > v29)
            LOBYTE(v29) = v19;
          *(_BYTE *)(v44 + 208) = v29;
          v30 = v16 / v15;
        }
        else
        {
          v20 = 1;
          LOBYTE(v30) = 127;
          v19 = 127;
        }
        v57 = 0;
        v58 = 0;
        v80 = xmmword_10073B558;
        v81 = 0;
        sub_100042F44((__n128 *)buf, (__n128 *)&v80);
        v31 = *(unsigned int **)(sub_1004180EC(v47, buf) + 8);
        v57 = &off_100918258;
        v58 = v31;
        if (v31)
          sub_10003C37C((uint64_t)v31);
        v32 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", sub_10003EB18((uint64_t)&v57), 16);
        v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
        v34 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", sub_10003EB18((uint64_t)&v57) + 16, 4);
        v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
        v36 = sub_100027F68();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 184))(v36))
        {
          v37 = qword_100999938;
          if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138414338;
            *(_QWORD *)&buf[4] = v33;
            *(_WORD *)&buf[12] = 2112;
            v65 = v35;
            v66 = 1024;
            v67 = (char)v30;
            v68 = 1024;
            v69 = v19;
            v70 = 1024;
            v71 = v20 & 1;
            v72 = 2048;
            v73 = v18;
            v74 = 1024;
            v75 = v45;
            v76 = 2048;
            v77 = (v62 - v61) >> 4;
            v78 = 1024;
            v79 = v28;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "rpi:%@ aem:%@ avgRSSI:%d maxRSSI:%d saturated:%d timestamp:%f deltaSinceLastStop:%d reports:%lu validReports:%d", buf, 0x48u);
          }
        }
        if ((unint64_t)((v62 - v61) >> 4) >= 0xFF)
          LOBYTE(v38) = -1;
        else
          v38 = (v62 - v61) >> 4;
        v48[0] = _NSConcreteStackBlock;
        v48[1] = 3221225472;
        v48[2] = sub_10041C274;
        v48[3] = &unk_10092E4E0;
        v39 = v33;
        v49 = v39;
        v40 = v35;
        v50 = v40;
        v53 = v30;
        v54 = v19;
        v55 = v38;
        v56 = v20 & 1;
        v51 = v18;
        v52 = v45;
        sub_100418124((os_unfair_lock_s *)(v44 + 176), v48);

        v57 = &off_100918258;
        if (v58)
          sub_100056AAC(v58);
      }
      *(_QWORD *)buf = &v61;
      sub_10041DBF8((void ***)buf);
      v41 = (_QWORD *)v12[1];
      if (v41)
      {
        do
        {
          v42 = v41;
          v41 = (_QWORD *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v42 = (_QWORD *)v12[2];
          v43 = *v42 == (_QWORD)v12;
          v12 = v42;
        }
        while (!v43);
      }
      v12 = v42;
    }
    while (v42 != v46);
  }
  sub_10041D4E8(v44 + 48, *(char **)(v44 + 56));
  *(_QWORD *)(v44 + 56) = 0;
  *(_QWORD *)(v44 + 64) = 0;
  *(_QWORD *)(v44 + 48) = v46;
}

void sub_10041C1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,unsigned int *a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void **a33)
{
  void *v33;
  void *v34;

  if (a28)
    sub_100056AAC(a28);
  a33 = (void **)&a30;
  sub_10041DBF8(&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_10041C26C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 222);
}

uint64_t sub_10041C274(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 60), *(unsigned __int8 *)(a1 + 62), *(unsigned __int8 *)(a1 + 63), *(unsigned __int16 *)(a1 + 56), *(double *)(a1 + 48));
}

void sub_10041C2A0(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v5[2];

  v4 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "setting aggressive scan delta to %u seconds", (uint8_t *)v5, 8u);
  }
  *(_DWORD *)(a1 + 264) = a2;
}

uint64_t sub_10041C350(uint64_t a1)
{
  int v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  int v7;
  uint64_t v8;

  v1 = *(_DWORD *)(a1 + 264);
  if (v1)
  {
    v2 = 1000 * v1;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 260);
    if (v3)
      v2 = 1000 * v3;
    else
      v2 = 5;
  }
  v4 = v2;
  v5 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 134217984;
    v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "nextScanDelta=%llu ms", (uint8_t *)&v7, 0xCu);
  }
  return v4;
}

uint64_t sub_10041C420(uint64_t a1)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  int v8;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;

  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10092E600);
  if (sub_1000468F8(off_100977B38))
    v2 = *(_DWORD *)(a1 + 252);
  else
    v2 = *(unsigned __int16 *)(a1 + 256);
  v3 = 1000 * v2;
  if (qword_10097B180 != -1)
    dispatch_once(&qword_10097B180, &stru_10092E500);
  v4 = v3 + sub_10041C5B8((uint64_t)off_10097B178);
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10092E600);
  if (*((_BYTE *)off_100977B38 + 197) && *(_BYTE *)(a1 + 250))
    v4 = 1000 * *(unsigned __int16 *)(a1 + 270);
  v5 = v4;
  v6 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *((unsigned __int8 *)off_100977B38 + 197);
    v8 = *(unsigned __int8 *)(a1 + 250);
    v10 = 134218496;
    v11 = v5;
    v12 = 1024;
    v13 = v7;
    v14 = 1024;
    v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "getNextTotalScanDurationInMs=%llu seconds A2DP:%d wifi2G:%d", (uint8_t *)&v10, 0x18u);
  }
  return v5;
}

uint64_t sub_10041C5B8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v5[2];

  v2 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int16 *)(a1 + 216);
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "getExtraScanDurationInMs %d", (uint8_t *)v5, 8u);
  }
  return *(unsigned __int16 *)(a1 + 216);
}

uint64_t sub_10041C660(uint64_t a1)
{
  unsigned int v2;
  NSObject *v3;
  int v4;
  int v5;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;

  v2 = *(unsigned __int16 *)(a1 + 214);
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10092E600);
  if (*((_BYTE *)off_100977B38 + 197) && *(_BYTE *)(a1 + 250))
    v2 = *(unsigned __int16 *)(a1 + 272);
  v3 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *((unsigned __int8 *)off_100977B38 + 197);
    v5 = *(unsigned __int8 *)(a1 + 250);
    v7 = 134218496;
    v8 = v2;
    v9 = 1024;
    v10 = v4;
    v11 = 1024;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "getNextScanWithDupsDurationInSeconds %llu A2DP:%d wifi2G:%d", (uint8_t *)&v7, 0x18u);
  }
  return v2;
}

uint64_t sub_10041C778(uint64_t a1)
{
  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_10092E600);
  if (sub_1000468F8(off_100977B38))
    return 48;
  else
    return *(unsigned __int16 *)(a1 + 268);
}

uint64_t sub_10041C7D8(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  NSObject *v14;
  _BOOL4 v15;
  int v16;
  int v17;
  NSObject *v18;
  int v19;
  const char *v20;
  uint64_t v21;
  int v22;
  NSObject *v24;
  int v25;
  int v26;
  int v28;
  __int16 v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  _BOOL4 v39;
  __int16 v40;
  int v41;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  objc_msgSend(v2, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 240));

  if (!*(_BYTE *)(a1 + 249))
  {
    v21 = sub_100027F68();
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 176))(v21))
      return *(unsigned __int16 *)(a1 + 222);
    v18 = qword_100999938;
    if (!os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
      return *(unsigned __int16 *)(a1 + 222);
    v22 = *(unsigned __int16 *)(a1 + 222);
    *(_DWORD *)buf = 67109120;
    v31 = v22;
    v20 = "getNextScanAPWakeDelta adaptive AP Wake scheduling disabled, returning fAPWakeDeltaDurationNormalSeconds:%d";
    goto LABEL_17;
  }
  v3 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int16 *)(a1 + 210);
    v5 = *(char *)(a1 + 208);
    v6 = *(_DWORD *)(a1 + 228);
    v7 = *(unsigned __int16 *)(a1 + 232);
    v8 = *(__int16 *)(a1 + 220);
    v9 = *(unsigned __int16 *)(a1 + 218);
    *(_DWORD *)buf = 67110400;
    v31 = v4;
    v32 = 1024;
    v33 = v5;
    v34 = 1024;
    v35 = v6;
    v36 = 1024;
    v37 = v7;
    v38 = 1024;
    v39 = v8;
    v40 = 1024;
    v41 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "getNextScanAPWakeDelta fLastScanNumOfIndividualSightings:%d fLastScanMaxRSSI:%d fMaxDailyShortAPWakeAllowanceInSeconds:%dseconds fCurrentShortAPWakeTimeInSeconds:%dseconds fHighRSSIThreshold:%d fNumOfSightingsHighThreshold:%d", buf, 0x26u);
  }
  if (*(unsigned __int16 *)(a1 + 210) <= *(unsigned __int16 *)(a1 + 218)
    && *(__int16 *)(a1 + 220) > *(char *)(a1 + 208)
    || *(_DWORD *)(a1 + 228) <= *(unsigned __int16 *)(a1 + 232))
  {
    v18 = qword_100999938;
    if (!os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
      return *(unsigned __int16 *)(a1 + 222);
    v19 = *(unsigned __int16 *)(a1 + 222);
    *(_DWORD *)buf = 67109120;
    v31 = v19;
    v20 = "getNextScanAPWakeDelta returning fAPWakeDeltaDurationNormalSeconds:%d";
LABEL_17:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v20, buf, 8u);
    return *(unsigned __int16 *)(a1 + 222);
  }
  v29 = 0;
  v10 = sub_100038E50();
  (*(void (**)(uint64_t, char *, __int16 *))(*(_QWORD *)v10 + 96))(v10, (char *)&v29 + 1, &v29);
  v28 = 0;
  v11 = sub_100038E50();
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v11 + 120))(v11, &v28);
  v12 = v28;
  v13 = HIBYTE(v29);
  v14 = qword_100999938;
  v15 = os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT);
  if (v13 || v12)
  {
    if (v15)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Connected to power, not changing fCurrentShortAPWakeTimeInSeconds", buf, 2u);
    }
  }
  else
  {
    if (v15)
    {
      v16 = *(unsigned __int16 *)(a1 + 232);
      v17 = *(unsigned __int16 *)(a1 + 224);
      *(_DWORD *)buf = 67109376;
      v31 = v16;
      v32 = 1024;
      v33 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "fCurrentShortAPWakeTimeInSeconds:%d adding %d", buf, 0xEu);
    }
    *(_WORD *)(a1 + 232) += *(_WORD *)(a1 + 224);
  }
  v24 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    v25 = *(unsigned __int16 *)(a1 + 224);
    v26 = *(unsigned __int16 *)(a1 + 232);
    *(_DWORD *)buf = 67110144;
    v31 = v25;
    v32 = 1024;
    v33 = v26;
    v34 = 1024;
    v35 = HIBYTE(v29);
    v36 = 1024;
    v37 = v29;
    v38 = 1024;
    v39 = v12 != 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "getNextScanAPWakeDelta returning fAPWakeDeltaDurationShortSeconds:%d fCurrentShortAPWakeTimeInSeconds:%d battCharging:%d battCapacity:%d powerAdapterConnected:%d", buf, 0x20u);
  }
  return *(unsigned __int16 *)(a1 + 224);
}

void sub_10041CB3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10041CB54(uint64_t a1, uint64_t a2)
{
  char v2;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v2 = BYTE4(a2);
  *(_WORD *)(a1 + 218) = WORD1(a2);
  *(_BYTE *)(a1 + 249) = a2 & 1;
  *(_WORD *)(a1 + 224) = HIWORD(a2);
  *(_WORD *)(a1 + 220) = a2 << 24 >> 56;
  v4 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 67109120;
    v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setServerConfigParams fHighRSSIThreshold = %d ", (uint8_t *)&v8, 8u);
    v4 = qword_100999938;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 249);
    v8 = 67109120;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setServerConfigParams fEnableAdaptiveAPWakeScheduling = %d ", (uint8_t *)&v8, 8u);
    v4 = qword_100999938;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(unsigned __int16 *)(a1 + 224);
    v8 = 67109120;
    v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setServerConfigParams fAPWakeDeltaDurationShortSeconds = %d ", (uint8_t *)&v8, 8u);
    v4 = qword_100999938;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int16 *)(a1 + 218);
    v8 = 67109120;
    v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setServerConfigParams fNumOfSightingsHighThreshold = %d ", (uint8_t *)&v8, 8u);
  }
}

void sub_10041CD08(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _BYTE v24[10];
  uint64_t v25;

  v2 = qword_100999938;
  if (os_log_type_enabled((os_log_t)qword_100999938, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v23) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ---------------- ContactTracing Manager ----------------", (uint8_t *)&v23, 2u);
    v2 = qword_100999938;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 80);
    v4 = *(unsigned __int8 *)(a1 + 72);
    v23 = 134218240;
    *(_QWORD *)v24 = v3;
    *(_WORD *)&v24[8] = 1024;
    LODWORD(v25) = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fSession:%llx fStarted:%d", (uint8_t *)&v23, 0x12u);
    v2 = qword_100999938;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 104);
    v23 = 138412546;
    *(_QWORD *)v24 = v5;
    *(_WORD *)&v24[8] = 2048;
    v25 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fSessionOwner:%@ fStartTime:%f", (uint8_t *)&v23, 0x16u);
    v2 = qword_100999938;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(char *)(a1 + 208);
    v8 = *(unsigned __int16 *)(a1 + 210);
    v9 = *(__int16 *)(a1 + 212);
    v23 = 67109632;
    *(_DWORD *)v24 = v7;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = v8;
    LOWORD(v25) = 1024;
    *(_DWORD *)((char *)&v25 + 2) = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fLastScanMaxRSSI:%d fLastScanNumOfIndividualSightings:%d fLastSightingDelta:%d", (uint8_t *)&v23, 0x14u);
    v2 = qword_100999938;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(unsigned __int16 *)(a1 + 214);
    v11 = *(unsigned __int16 *)(a1 + 216);
    v23 = 67109376;
    *(_DWORD *)v24 = v10;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = v11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fNextScanWithDuplicatesDurationInMs:%d fExtraScanTimeInMs:%d", (uint8_t *)&v23, 0xEu);
    v2 = qword_100999938;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(unsigned __int16 *)(a1 + 218);
    v13 = *(__int16 *)(a1 + 220);
    v23 = 67109376;
    *(_DWORD *)v24 = v12;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = v13;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fNumOfSightingsHighThreshold:%d fHighRSSIThreshold:%d", (uint8_t *)&v23, 0xEu);
    v2 = qword_100999938;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(unsigned __int16 *)(a1 + 222);
    v15 = *(unsigned __int16 *)(a1 + 224);
    v23 = 67109376;
    *(_DWORD *)v24 = v14;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = v15;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fAPWakeDeltaDurationNormalSeconds:%d fAPWakeDeltaDurationShortSeconds:%d", (uint8_t *)&v23, 0xEu);
    v2 = qword_100999938;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(unsigned __int16 *)(a1 + 232);
    v17 = *(_DWORD *)(a1 + 228);
    v18 = *(unsigned __int8 *)(a1 + 248);
    v23 = 67109632;
    *(_DWORD *)v24 = v16;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = v17;
    LOWORD(v25) = 1024;
    *(_DWORD *)((char *)&v25 + 2) = v18;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fCurrentShortAPWakeTimeInSeconds:%d fMaxDailyShortAPWakeAllowanceInSeconds:%d fDayOfMonth:%d", (uint8_t *)&v23, 0x14u);
    v2 = qword_100999938;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v19 = *(unsigned __int16 *)(a1 + 234);
    v20 = *(unsigned __int8 *)(a1 + 249);
    v23 = 67109376;
    *(_DWORD *)v24 = v19;
    *(_WORD *)&v24[4] = 1024;
    *(_DWORD *)&v24[6] = v20;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fEstimatedAPWakeCount:%d fEnableAdaptiveAPWakeScheduling:%d", (uint8_t *)&v23, 0xEu);
    v2 = qword_100999938;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v21 = *(char *)(a1 + 296);
    v23 = 67109120;
    *(_DWORD *)v24 = v21;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fMaxAllowedRSSILevel:%d", (uint8_t *)&v23, 8u);
    v2 = qword_100999938;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v22 = *(unsigned __int16 *)(a1 + 274);
    v23 = 67109120;
    *(_DWORD *)v24 = v22;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: fInvalidRSSIReportCounter:%d", (uint8_t *)&v23, 8u);
  }
}

uint64_t sub_10041D12C()
{
  return 1;
}

void sub_10041D138(uint64_t a1)
{
  sub_10041D444(a1);
  operator delete();
}

uint64_t sub_10041D168()
{
  return 1;
}

uint64_t **sub_10041D170(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = sub_10001FD34((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          v18 = 0;
          v10 = (uint64_t **)sub_10041D2F4((uint64_t)v5, &v18, v17 + 4);
          sub_100004078(v5, v18, v10, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = sub_10001FD34((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)sub_10041D36C((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_10041D3C0(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_10041D2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10041D36C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_10041D2F4(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if (!sub_100091A80(v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t sub_10041D36C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_100056BAC(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_100056BAC(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *sub_10041D3C0(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t v5;
  uint64_t *v6[3];

  memset(v6, 0, sizeof(v6));
  sub_1002F62A8((uint64_t)a1, a2, v6);
  v5 = 0;
  v3 = (uint64_t **)sub_10041D2F4((uint64_t)a1, &v5, (const void **)v6[0] + 4);
  sub_100004078(a1, v5, v3, v6[0]);
  return v6[0];
}

void sub_10041D420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_1002A4BA0((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10041D444(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = off_10092E358;
  *(_QWORD *)(a1 + 8) = off_10092E3E8;
  *(_QWORD *)(a1 + 16) = off_10092E448;
  *(_QWORD *)(a1 + 24) = &off_10092E478;
  *(_QWORD *)(a1 + 32) = off_10092E4A0;
  *(_QWORD *)(a1 + 40) = &off_10092E4D0;

  v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v2);
  }

  v4 = (void **)(a1 + 120);
  sub_100091BF8(&v4);

  sub_10041D4E8(a1 + 48, *(char **)(a1 + 56));
  return a1;
}

void sub_10041D4E8(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    sub_10041D4E8(a1, *(_QWORD *)a2);
    sub_10041D4E8(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 56);
    sub_10041DBF8(&v4);
    operator delete(a2);
  }
}

_OWORD *sub_10041D540(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  int v9;
  uint64_t v11;

  v11 = 0;
  v6 = (void **)sub_10041D5D8((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v9 = *((_DWORD *)*a4 + 4);
    v7[2] = **a4;
    *((_DWORD *)v7 + 12) = v9;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    sub_100004078(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sub_10041D5D8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
LABEL_2:
    while (2)
    {
      v6 = 0;
      v7 = v4;
      do
      {
        v8 = *(unsigned __int8 *)(a3 + v6);
        v9 = *((unsigned __int8 *)v7 + v6 + 32);
        if (v8 < v9)
        {
          v4 = (_QWORD *)*v7;
          result = v7;
          if (*v7)
            goto LABEL_2;
          goto LABEL_22;
        }
      }
      while (v9 >= v8 && v6++ != 19);
      v11 = 0;
      while (1)
      {
        v12 = *((unsigned __int8 *)v7 + v11 + 32);
        v13 = *(unsigned __int8 *)(a3 + v11);
        if (v12 < v13)
          break;
        if (v13 < v12 || v11++ == 19)
          goto LABEL_22;
      }
      result = v7 + 1;
      v4 = (_QWORD *)v7[1];
      if (v4)
        continue;
      break;
    }
  }
  else
  {
    v7 = result;
  }
LABEL_22:
  *a2 = v7;
  return result;
}

uint64_t sub_10041D664(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = *a1;
  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = v8 - v2;
  if (v9 >> 3 > v4)
    v4 = v9 >> 3;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v4;
  v20 = v7;
  v11 = (char *)sub_10034957C(v7, v10);
  v12 = &v11[16 * v3];
  v17[0] = v11;
  v17[1] = v12;
  v18 = v12;
  v19 = &v11[16 * v13];
  *(_QWORD *)v12 = &off_100918298;
  v14 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)v12 + 1) = v14;
  if (v14)
  {
    sub_10003C37C(v14);
    v12 = v18;
  }
  v18 = v12 + 16;
  sub_10041D744(a1, v17);
  v15 = a1[1];
  sub_10041D7E4((uint64_t)v17);
  return v15;
}

void sub_10041D730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10041D7E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10041D744(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  if (v4 != *a1)
  {
    do
    {
      *(_QWORD *)(v6 - 16) = &off_100918298;
      v6 -= 16;
      v7 = *(_QWORD *)(v4 - 8);
      *(_QWORD *)(v6 + 8) = v7;
      if (v7)
        sub_10003C37C(v7);
      v4 -= 16;
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v8 = *a1;
  *a1 = v6;
  a2[1] = v8;
  v9 = a1[1];
  a1[1] = a2[2];
  a2[2] = v9;
  v10 = a1[2];
  a1[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
}

uint64_t sub_10041D7E4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 16);
    *(_QWORD *)(a1 + 16) = i - 16;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10041D834(id a1)
{
  operator new();
}

void sub_10041D868(id a1)
{
  operator new();
}

void sub_10041D8A8()
{
  operator delete();
}

void sub_10041D8CC(id a1)
{
  operator new();
}

void sub_10041D90C()
{
  operator delete();
}

void sub_10041D930(id a1)
{
  operator new();
}

void sub_10041D970()
{
  operator delete();
}

void sub_10041D994(id a1)
{
  operator new();
}

void sub_10041D9D4()
{
  operator delete();
}

void sub_10041D9F8(id a1)
{
  operator new();
}

void sub_10041DA38()
{
  operator delete();
}

void sub_10041DA5C(id a1)
{
  operator new();
}

void sub_10041DA9C()
{
  operator delete();
}

void sub_10041DAC0(id a1)
{
  operator new();
}

void sub_10041DB00()
{
  operator delete();
}

void sub_10041DB24(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    sub_100349540(a1, a4);
    sub_10041DB74((uint64_t)a1, a2, a3);
  }
}

void sub_10041DB74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(a1 + 8);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(a2 + v7 + 8);
      v9 = (_QWORD *)(v4 + v7);
      *v9 = &off_100918298;
      v9[1] = v8;
      if (v8)
        sub_10003C37C(v8);
      v7 += 16;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(_QWORD *)(a1 + 8) = v4;
}

void sub_10041DBF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10041DBF8(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 16;
      v7 = v4 - 16;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 16;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10041DC84(id a1)
{
  operator new();
}

void sub_10041DD9C()
{
  operator delete();
}

uint64_t sub_10041DDC0(uint64_t a1)
{
  *(_QWORD *)a1 = off_10092E630;
  *(_QWORD *)(a1 + 8) = off_10092E6C0;
  *(_QWORD *)(a1 + 16) = off_10092E6E0;
  *(_QWORD *)(a1 + 24) = off_10092E708;
  *(_QWORD *)(a1 + 32) = &off_10092E748;
  *(_QWORD *)(a1 + 40) = &off_10092E760;
  *(_QWORD *)(a1 + 48) = &off_10092E778;
  sub_1000160D0(a1 + 56);
  *(_WORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 0;
  return a1;
}

void sub_10041DE38(uint64_t a1)
{
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092E880);
  sub_10042381C(qword_100977B48 + 8, a1 + 8);
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_10092E8A0);
  sub_1000D96F8((uint64_t)off_100978188 + 24, a1 + 16);
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10092E8C0);
  sub_1005B40C8(off_100978148, a1 + 24);
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_10092E8E0);
  sub_100494088(off_100977A70, a1 + 32);
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_10092E900);
  sub_1002B4110((uint64_t)off_100978128 + 80, a1 + 40);
  *(_WORD *)(a1 + 120) = 0;
}

void sub_10041DF7C(uint64_t a1)
{
  unint64_t *v2;
  unint64_t v3;

  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_10092E900);
  sub_100069060((uint64_t)off_100978128 + 80, a1 + 40);
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_10092E8E0);
  sub_100494190((uint64_t)off_100977A70, a1 + 32);
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10092E8C0);
  sub_1005B4200((uint64_t)off_100978148, a1 + 24);
  if (qword_100978190 != -1)
    dispatch_once(&qword_100978190, &stru_10092E8A0);
  sub_100069060((uint64_t)off_100978188 + 24, a1 + 16);
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092E880);
  sub_100069060(qword_100977B48 + 8, a1 + 8);
  v2 = *(unint64_t **)(a1 + 232);
  if (v2 != *(unint64_t **)(a1 + 240))
  {
    do
    {
      v3 = *v2;
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10092E880);
      sub_10050ABD0(qword_100977B48, v3);
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10092E880);
      sub_10050AC6C(qword_100977B48, v3);
      ++v2;
    }
    while (v2 != *(unint64_t **)(a1 + 240));
    v2 = *(unint64_t **)(a1 + 232);
  }
  *(_QWORD *)(a1 + 240) = v2;
}

uint64_t sub_10041E160(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD v20[2];

  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, (uint64_t)(a1 + 7));
  v4 = (_QWORD *)a1[26];
  v5 = (_QWORD *)a1[27];
  v6 = v4;
  if (v4 != v5)
  {
    while (*v6 != a2)
    {
      if (++v6 == v5)
      {
        v6 = (_QWORD *)a1[27];
        break;
      }
    }
  }
  if (v6 == v5)
  {
    v7 = a1[28];
    if ((unint64_t)v5 >= v7)
    {
      v9 = v5 - v4;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v10 = v7 - (_QWORD)v4;
      v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)sub_10007ABA0((uint64_t)(a1 + 28), v12);
      else
        v13 = 0;
      v14 = &v13[8 * v9];
      v15 = &v13[8 * v12];
      *(_QWORD *)v14 = a2;
      v8 = v14 + 8;
      v17 = (char *)a1[26];
      v16 = (char *)a1[27];
      if (v16 != v17)
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *((_QWORD *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        v16 = (char *)a1[26];
      }
      a1[26] = v14;
      a1[27] = v8;
      a1[28] = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v5 = a2;
      v8 = v5 + 1;
    }
    a1[27] = v8;
  }
  return sub_100034234((uint64_t)v20);
}

void sub_10041E284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10041E298(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  int64_t v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 56);
  v5 = *(char **)(a1 + 208);
  v4 = *(char **)(a1 + 216);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 216);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8)
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    *(_QWORD *)(a1 + 216) = &v5[v6];
  }
  return sub_100034234((uint64_t)v8);
}

uint64_t sub_10041E330(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  _QWORD *v6;
  void *__p[2];
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[2];
  uint8_t buf[4];
  void **v15;

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 56);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_10001FE6C(&v10, a1 + 208);
  sub_100034264((uint64_t)v13);
  v4 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device %{public}s was plugged in", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  v6 = v10;
  if (v10 != v11)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, a2);
      ++v6;
    }
    while (v6 != v11);
    v6 = v10;
  }
  if (v6)
  {
    v11 = v6;
    operator delete(v6);
  }
  return sub_100034234((uint64_t)v13);
}

void sub_10041E484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10041E4C0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  _QWORD *v6;
  void *__p[2];
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[2];
  uint8_t buf[4];
  void **v15;

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 56);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_10001FE6C(&v10, a1 + 208);
  sub_100034264((uint64_t)v13);
  v4 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device %{public}s was unplugged", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  v6 = v10;
  if (v10 != v11)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 24))(*v6, a2);
      ++v6;
    }
    while (v6 != v11);
    v6 = v10;
  }
  if (v6)
  {
    v11 = v6;
    operator delete(v6);
  }
  return sub_100034234((uint64_t)v13);
}

void sub_10041E614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10041E650(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  _QWORD *v6;
  void *__p[2];
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[2];
  uint8_t buf[4];
  void **v15;

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 56);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_10001FE6C(&v10, a1 + 208);
  sub_100034264((uint64_t)v13);
  v4 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device %{public}s was registered as a new accessory", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  v6 = v10;
  if (v10 != v11)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 32))(*v6, a2);
      ++v6;
    }
    while (v6 != v11);
    v6 = v10;
  }
  if (v6)
  {
    v11 = v6;
    operator delete(v6);
  }
  return sub_100034234((uint64_t)v13);
}

void sub_10041E7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10041E7E0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  _QWORD *v6;
  void *__p[2];
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[2];
  uint8_t buf[4];
  void **v15;

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 56);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  sub_10001FE6C(&v10, a1 + 208);
  sub_100034264((uint64_t)v13);
  v4 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_INFO))
  {
    sub_10043E5F8(a2, __p);
    v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Device %{public}s reported a battery level change", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  v6 = v10;
  if (v10 != v11)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 40))(*v6, a2);
      ++v6;
    }
    while (v6 != v11);
    v6 = v10;
  }
  if (v6)
  {
    v11 = v6;
    operator delete(v6);
  }
  return sub_100034234((uint64_t)v13);
}

void sub_10041E934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10041E970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  void **v11;
  _QWORD *v12;
  void *__p[2];
  char v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[2];
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 56);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  sub_10001FE6C(&v16, a1 + 208);
  sub_100034264((uint64_t)v19);
  v10 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_INFO))
  {
    sub_10043E5F8(a2, __p);
    v11 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446978;
    v21 = v11;
    v22 = 1024;
    v23 = a3;
    v24 = 1024;
    v25 = a4;
    v26 = 1024;
    v27 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Device %{public}s reported command status: type %d, result %u, reason %u", buf, 0x1Eu);
    if (v15 < 0)
      operator delete(__p[0]);
  }
  v12 = v16;
  if (v16 != v17)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v12 + 48))(*v12, a2, a3, a4, a5);
      ++v12;
    }
    while (v12 != v17);
    v12 = v16;
  }
  if (v12)
  {
    v17 = v12;
    operator delete(v12);
  }
  return sub_100034234((uint64_t)v19);
}

void sub_10041EB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10041EB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  void **v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[2];
  uint8_t buf[4];
  void **v19;
  __int16 v20;
  int v21;

  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 56);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  sub_10001FE6C(&v14, a1 + 208);
  sub_100034264((uint64_t)v17);
  v8 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_INFO))
  {
    sub_10043E5F8(a2, __p);
    v9 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v19 = v9;
    v20 = 1024;
    v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Device %{public}s Conversation Detect msg received, len: %d", buf, 0x12u);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  v10 = v14;
  if (v14 != v15)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v10 + 64))(*v10, a2, a3, a4);
      ++v10;
    }
    while (v10 != v15);
    v10 = v14;
  }
  if (v10)
  {
    v15 = v10;
    operator delete(v10);
  }
  return sub_100034234((uint64_t)v17);
}

void sub_10041ECB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10041ECF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  void **v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[2];
  uint8_t buf[4];
  void **v19;
  __int16 v20;
  int v21;

  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 56);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  sub_10001FE6C(&v14, a1 + 208);
  sub_100034264((uint64_t)v17);
  v8 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_INFO))
  {
    sub_10043E5F8(a2, __p);
    v9 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v19 = v9;
    v20 = 1024;
    v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Device %{public}s PME config msg received, len: %d", buf, 0x12u);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  v10 = v14;
  if (v14 != v15)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v10 + 72))(*v10, a2, a3, a4);
      ++v10;
    }
    while (v10 != v15);
    v10 = v14;
  }
  if (v10)
  {
    v15 = v10;
    operator delete(v10);
  }
  return sub_100034234((uint64_t)v17);
}

void sub_10041EE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10041EEA4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  _QWORD *i;
  void **v7;
  void *v8;
  void **v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  unsigned int v20;
  void *__p[2];
  char v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD v26[2];
  _QWORD v27[4];
  _QWORD v28[4];
  uint8_t buf[4];
  void **v30;

  v26[0] = 0;
  v26[1] = 0;
  sub_10003415C((uint64_t)v26, a1 + 56);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  sub_10001FE6C(&v23, a1 + 208);
  sub_100034264((uint64_t)v26);
  v4 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_INFO))
  {
    sub_10043E5F8(a2, __p);
    v5 = v22 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v30 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Device %{public}s reported in ear state change", buf, 0xCu);
    if (v22 < 0)
      operator delete(__p[0]);
  }
  for (i = v23; i != v24; ++i)
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*i + 80))(*i, a2);
  if (sub_1004F93B4())
  {
    *(_DWORD *)buf = 0;
    v20 = 0;
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10092E920);
    sub_1002835F4((uint64_t)off_100977A80, a2, (int *)buf, (int *)&v20);
    sub_10043F6EC(a2, (uint64_t)__p);
    if (v22 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7));
    if (v22 < 0)
      operator delete(__p[0]);
    sub_10046E9BC((unsigned __int8 *)(a2 + 128), __p);
    if (v22 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9));
    if (v22 < 0)
      operator delete(__p[0]);
    v27[0] = CFSTR("primaryInEarStatus");
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)buf));
    v28[0] = v11;
    v27[1] = CFSTR("secondaryInEarStatus");
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v20));
    v28[1] = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[_CDContextQueries bluetoothNameKey](_CDContextQueries, "bluetoothNameKey"));
    v27[2] = v13;
    v28[2] = v8;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[_CDContextQueries bluetoothAddressKey](_CDContextQueries, "bluetoothAddressKey"));
    v27[3] = v14;
    v28[3] = v10;
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v28, v27, 4));

    v16 = (void *)objc_claimAutoreleasedReturnValue(+[_CDContextualKeyPath keyPathWithKey:](_CDContextualKeyPath, "keyPathWithKey:", CFSTR("/bluetooth/inEarStatus")));
    v17 = objc_msgSend(v15, "copy");
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[_CDClientContext userContext](_CDClientContext, "userContext"));
    objc_msgSend(v18, "setObject:forKeyedSubscript:", v17, v16);

  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
  {
    sub_1006F0044();
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  return sub_100034234((uint64_t)v26);
}

void sub_10041F210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_10041F300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  void *__p[2];
  char v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[2];
  uint8_t buf[4];
  void **v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;

  v22[0] = 0;
  v22[1] = 0;
  sub_10003415C((uint64_t)v22, a1 + 56);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  sub_10001FE6C(&v19, a1 + 208);
  sub_100034264((uint64_t)v22);
  v12 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_INFO))
  {
    sub_10043E5F8(a2, __p);
    v13 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136448258;
    v24 = v13;
    v25 = 1024;
    v26 = a3;
    v27 = 1024;
    v28 = BYTE1(a3);
    v29 = 1024;
    v30 = BYTE2(a3);
    v31 = 1024;
    v32 = BYTE3(a3);
    v33 = 1024;
    v34 = BYTE4(a3);
    v35 = 1024;
    v36 = BYTE5(a3);
    v37 = 1024;
    v38 = a4;
    v39 = 1024;
    v40 = a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Device %{public}s relay msg received: srcAddr %02X:%02X:%02X:%02X:%02X:%02X, type %d, len %d", buf, 0x3Cu);
    if (v18 < 0)
      operator delete(__p[0]);
  }
  v14 = v19;
  if (v19 != v20)
  {
    v15 = a3 & 0xFFFFFFFFFFFFLL;
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v14 + 88))(*v14, a2, v15, a4, a5, a6);
      ++v14;
    }
    while (v14 != v20);
    v14 = v19;
  }
  if (v14)
  {
    v20 = v14;
    operator delete(v14);
  }
  return sub_100034234((uint64_t)v22);
}

void sub_10041F4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10041F528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  void **v7;
  _QWORD *v8;
  void *__p[2];
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[2];
  uint8_t buf[4];
  void **v17;
  __int16 v18;
  int v19;

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 56);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  sub_10001FE6C(&v12, a1 + 208);
  sub_100034264((uint64_t)v15);
  v6 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_INFO))
  {
    sub_10043E5F8(a2, __p);
    v7 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v17 = v7;
    v18 = 1024;
    v19 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Device %{public}s stream state changed: %u", buf, 0x12u);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  v8 = v12;
  if (v12 != v13)
  {
    do
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v8 + 96))(*v8, a2, a3);
      ++v8;
    }
    while (v8 != v13);
    v8 = v12;
  }
  if (v8)
  {
    v13 = v8;
    operator delete(v8);
  }
  return sub_100034234((uint64_t)v15);
}

void sub_10041F690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10041F6CC(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  uint8_t buf[8];
  unint64_t *v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 56);
  v4 = *(unint64_t **)(a1 + 256);
  if (v4 == *(unint64_t **)(a1 + 264))
  {
    v11 = 106;
  }
  else
  {
    do
    {
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10092E880);
      if (sub_100021398(qword_100977B48, *v4))
      {
        v4 += 7;
        v5 = *(_QWORD *)(a1 + 264);
      }
      else
      {
        v6 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: AccessoryManager, Invalid BTAccessoryManager handle - removing associated callbacks", buf, 2u);
        }
        sub_100423DF0((uint64_t)(v4 + 7), *(_QWORD *)(a1 + 264), (uint64_t)v4);
        v5 = v7;
        *(_QWORD *)(a1 + 264) = v7;
      }
    }
    while (v4 != (unint64_t *)v5);
    v8 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)buf = 0;
    v14 = 0;
    v15 = 0;
    sub_100423E44((char *)buf, v8, v5, 0x6DB6DB6DB6DB6DB7 * ((v5 - v8) >> 3));
    sub_100034264((uint64_t)v16);
    v9 = *(unint64_t **)buf;
    v10 = v14;
    if (*(unint64_t **)buf != v14)
    {
      do
      {
        if (qword_100977B50 != -1)
          dispatch_once(&qword_100977B50, &stru_10092E880);
        sub_100021398(qword_100977B48, *v9);
        if (qword_1009778E8 != -1)
          dispatch_once(&qword_1009778E8, &stru_10092E940);
        sub_10046F750((uint64_t)off_1009778E0, *v9, a2);
        if (v9[1])
        {
          if (qword_10097AB48 != -1)
            dispatch_once(&qword_10097AB48, &stru_10092E960);
          operator new();
        }
        v9 += 7;
      }
      while (v9 != v10);
      v9 = *(unint64_t **)buf;
    }
    if (v9)
    {
      v14 = v9;
      operator delete(v9);
    }
    v11 = 0;
  }
  sub_100034234((uint64_t)v16);
  return v11;
}

void sub_10041F978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10041F9B4(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  uint8_t buf[8];
  unint64_t *v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 56);
  v4 = *(unint64_t **)(a1 + 256);
  if (v4 == *(unint64_t **)(a1 + 264))
  {
    v11 = 106;
  }
  else
  {
    do
    {
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10092E880);
      if (sub_100021398(qword_100977B48, *v4))
      {
        v4 += 7;
        v5 = *(_QWORD *)(a1 + 264);
      }
      else
      {
        v6 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: AccessoryManager, Invalid BTAccessoryManager handle - removing associated callbacks", buf, 2u);
        }
        sub_100423DF0((uint64_t)(v4 + 7), *(_QWORD *)(a1 + 264), (uint64_t)v4);
        v5 = v7;
        *(_QWORD *)(a1 + 264) = v7;
      }
    }
    while (v4 != (unint64_t *)v5);
    v8 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)buf = 0;
    v14 = 0;
    v15 = 0;
    sub_100423E44((char *)buf, v8, v5, 0x6DB6DB6DB6DB6DB7 * ((v5 - v8) >> 3));
    sub_100034264((uint64_t)v16);
    v10 = *(unint64_t **)buf;
    v9 = v14;
    if (*(unint64_t **)buf != v14)
    {
      do
      {
        if (qword_100977B50 != -1)
          dispatch_once(&qword_100977B50, &stru_10092E880);
        sub_100021398(qword_100977B48, *v10);
        if (qword_1009778E8 != -1)
          dispatch_once(&qword_1009778E8, &stru_10092E940);
        sub_10046F750((uint64_t)off_1009778E0, *v10, a2);
        if (v10[2])
        {
          if (qword_10097AB48 != -1)
            dispatch_once(&qword_10097AB48, &stru_10092E960);
          operator new();
        }
        v10 += 7;
      }
      while (v10 != v9);
      v10 = *(unint64_t **)buf;
    }
    if (v10)
    {
      v14 = v10;
      operator delete(v10);
    }
    v11 = 0;
  }
  sub_100034234((uint64_t)v16);
  return v11;
}

void sub_10041FCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_10041FCFC(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint8_t buf[8];
  unint64_t *v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 56);
  v3 = *(unint64_t **)(a1 + 256);
  if (v3 == *(unint64_t **)(a1 + 264))
  {
    v10 = 106;
  }
  else
  {
    do
    {
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10092E880);
      if (sub_100021398(qword_100977B48, *v3))
      {
        v3 += 7;
        v4 = *(_QWORD *)(a1 + 264);
      }
      else
      {
        v5 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Warning: AccessoryManager, Invalid BTAccessoryManager handle - removing associated callbacks", buf, 2u);
        }
        sub_100423DF0((uint64_t)(v3 + 7), *(_QWORD *)(a1 + 264), (uint64_t)v3);
        v4 = v6;
        *(_QWORD *)(a1 + 264) = v6;
      }
    }
    while (v3 != (unint64_t *)v4);
    v7 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)buf = 0;
    v14 = 0;
    v15 = 0;
    sub_100423E44((char *)buf, v7, v4, 0x6DB6DB6DB6DB6DB7 * ((v4 - v7) >> 3));
    sub_100034264((uint64_t)v16);
    v9 = *(unint64_t **)buf;
    v8 = v14;
    if (*(unint64_t **)buf != v14)
    {
      do
      {
        if (qword_100977B50 != -1)
          dispatch_once(&qword_100977B50, &stru_10092E880);
        sub_100021398(qword_100977B48, *v9);
        if (qword_1009778E8 != -1)
          dispatch_once(&qword_1009778E8, &stru_10092E940);
        sub_10046F750((uint64_t)off_1009778E0, *v9, a2);
        if (v9[3])
        {
          if (qword_10097AB48 != -1)
            dispatch_once(&qword_10097AB48, &stru_10092E960);
          operator new();
        }
        v9 += 7;
      }
      while (v9 != v8);
      v9 = *(unint64_t **)buf;
    }
    if (v9)
    {
      v14 = v9;
      operator delete(v9);
    }
    v10 = 0;
  }
  sub_100034234((uint64_t)v16);
  return v10;
}

void sub_10041FFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100420058(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  uint64_t v11;
  uint8_t buf[8];
  unint64_t *v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 56);
  v4 = *(unint64_t **)(a1 + 256);
  if (v4 == *(unint64_t **)(a1 + 264))
  {
    v11 = 106;
  }
  else
  {
    do
    {
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_10092E880);
      if (sub_100021398(qword_100977B48, *v4))
      {
        v4 += 7;
        v5 = *(_QWORD *)(a1 + 264);
      }
      else
      {
        v6 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: AccessoryManager, Invalid BTAccessoryManager handle - removing associated callbacks", buf, 2u);
        }
        sub_100423DF0((uint64_t)(v4 + 7), *(_QWORD *)(a1 + 264), (uint64_t)v4);
        v5 = v7;
        *(_QWORD *)(a1 + 264) = v7;
      }
    }
    while (v4 != (unint64_t *)v5);
    v8 = *(_QWORD *)(a1 + 256);
    *(_QWORD *)buf = 0;
    v14 = 0;
    v15 = 0;
    sub_100423E44((char *)buf, v8, v5, 0x6DB6DB6DB6DB6DB7 * ((v5 - v8) >> 3));
    sub_100034264((uint64_t)v16);
    v9 = *(unint64_t **)buf;
    v10 = v14;
    if (*(unint64_t **)buf != v14)
    {
      do
      {
        if (qword_100977B50 != -1)
          dispatch_once(&qword_100977B50, &stru_10092E880);
        sub_100021398(qword_100977B48, *v9);
        if (qword_1009778E8 != -1)
          dispatch_once(&qword_1009778E8, &stru_10092E940);
        sub_10046F750((uint64_t)off_1009778E0, *v9, a2);
        if (v9[4])
        {
          if (qword_10097AB48 != -1)
            dispatch_once(&qword_10097AB48, &stru_10092E960);
          operator new();
        }
        v9 += 7;
      }
      while (v9 != v10);
      v9 = *(unint64_t **)buf;
    }
    if (v9)
    {
      v14 = v9;
      operator delete(v9);
    }
    v11 = 0;
  }
  sub_100034234((uint64_t)v16);
  return v11;
}

void sub_100420314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100420350(uint64_t a1)
{
  unsigned __int8 **v2;
  unsigned __int8 **v3;
  int v4;
  NSObject *v5;
  const char *v6;
  unsigned __int8 *v8;
  int64_t v9;
  int v10;
  _QWORD v11[2];
  std::string buf;

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 56);
  v3 = *(unsigned __int8 ***)(a1 + 160);
  v2 = *(unsigned __int8 ***)(a1 + 168);
  if (v3 != v2)
  {
    v4 = *(unsigned __int8 *)(a1 + 120);
    if (*(_BYTE *)(a1 + 120) || *(_BYTE *)(a1 + 121))
    {
      v5 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
      {
        v6 = "(someone is connecting)";
        if (!v4)
          v6 = "(someone is pairing)";
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Auto pairing is not allowed at the moment %{public}s, trying again later", (uint8_t *)&buf, 0xCu);
      }
    }
    else
    {
      v8 = *v3;
      v9 = (char *)v2 - (char *)(v3 + 1);
      if (v2 != v3 + 1)
        memmove(*(void **)(a1 + 160), v3 + 1, (char *)v2 - (char *)(v3 + 1));
      *(_QWORD *)(a1 + 168) = (char *)v3 + v9;
      sub_100034264((uint64_t)v11);
      sub_10041E330(a1, (uint64_t)v8);
      if ((sub_10043E93C(v8) & 1) == 0)
      {
        if (qword_100977A78 != -1)
          dispatch_once(&qword_100977A78, &stru_10092E8E0);
        memset(&buf, 0, sizeof(buf));
        v10 = sub_100495A98((int64x2_t *)off_100977A70, (uint64_t)v8, -1, &buf, 2);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        if (!v10)
        {
          sub_100034188((uint64_t)v11);
          *(_QWORD *)(a1 + 128) = v8;
          sub_100034264((uint64_t)v11);
        }
      }
    }
  }
  return sub_100034234((uint64_t)v11);
}

void sub_100420504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100420540(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  const char *v12;
  int v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;

  if (a2)
  {
    v8 = result;
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_10092E940);
    result = sub_10006D488((uint64_t)off_1009778E0, a2, 0);
    if (result)
    {
      v9 = result;
      if (a3)
        v10 = 7;
      else
        v10 = 8;
      v11 = qword_1009997D8;
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
      {
        v12 = "Not Ready";
        v13 = 136446722;
        if (a3)
          v12 = "Ready";
        v14 = v12;
        v15 = 2048;
        v16 = a5;
        v17 = 1024;
        v18 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Remote Timesync: Timesync Notification %{public}s : %llx [%d]", (uint8_t *)&v13, 0x1Cu);
      }
      return sub_10041F6CC(v8, v9);
    }
  }
  return result;
}

uint64_t sub_100420694(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return sub_100420540(a1 - 48, a2, a3, a4, a5);
}

void sub_10042069C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint8_t v5[16];

  v2 = qword_1009997D8;
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Notify clients of head track change", v5, 2u);
    }
    sub_10041F6CC(a1, a2);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
  {
    sub_1006F0070();
  }
}

uint64_t sub_100420748(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[2];

  if (a2 == 1)
  {
    v3 = result;
    if (a3)
    {
      if (a3 == 1)
        return sub_100420350(result);
    }
    else
    {
      v19[0] = 0;
      v19[1] = 0;
      sub_10003415C((uint64_t)v19, result + 56);
      *(_WORD *)(v3 + 120) = 0;
      v4 = *(_QWORD *)(v3 + 128);
      if (v4)
      {
        sub_100034264((uint64_t)v19);
        v5 = *(_QWORD *)(v3 + 176);
        v6 = *(_QWORD **)(v3 + 168);
        if ((unint64_t)v6 >= v5)
        {
          v8 = *(_QWORD *)(v3 + 160);
          v9 = ((uint64_t)v6 - v8) >> 3;
          if ((unint64_t)(v9 + 1) >> 61)
            abort();
          v10 = v5 - v8;
          v11 = v10 >> 2;
          if (v10 >> 2 <= (unint64_t)(v9 + 1))
            v11 = v9 + 1;
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
            v13 = (char *)sub_10007ABA0(v3 + 176, v12);
          else
            v13 = 0;
          v14 = &v13[8 * v9];
          v15 = &v13[8 * v12];
          *(_QWORD *)v14 = v4;
          v7 = v14 + 8;
          v17 = *(char **)(v3 + 160);
          v16 = *(char **)(v3 + 168);
          if (v16 != v17)
          {
            do
            {
              v18 = *((_QWORD *)v16 - 1);
              v16 -= 8;
              *((_QWORD *)v14 - 1) = v18;
              v14 -= 8;
            }
            while (v16 != v17);
            v16 = *(char **)(v3 + 160);
          }
          *(_QWORD *)(v3 + 160) = v14;
          *(_QWORD *)(v3 + 168) = v7;
          *(_QWORD *)(v3 + 176) = v15;
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v6 = v4;
          v7 = v6 + 1;
        }
        *(_QWORD *)(v3 + 168) = v7;
      }
      return sub_100034234((uint64_t)v19);
    }
  }
  return result;
}

void sub_10042087C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100420890(uint64_t a1, int a2, int a3)
{
  return sub_100420748(a1 - 40, a2, a3);
}

uint64_t sub_100420898(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 56);
  *(_BYTE *)(a1 + 120) = 0;
  if (*(_QWORD *)(a1 + 128) == a2)
    *(_QWORD *)(a1 + 128) = 0;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_1004208EC(uint64_t a1, uint64_t a2)
{
  return sub_100420898(a1 - 16, a2);
}

uint64_t sub_1004208F4(uint64_t a1, char a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 56);
  *(_BYTE *)(a1 + 120) = a2;
  if ((a2 & 1) == 0)
  {
    sub_100034264((uint64_t)v5);
    sub_100420350(a1);
  }
  return sub_100034234((uint64_t)v5);
}

void sub_10042094C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100420960(uint64_t a1, char a2)
{
  return sub_1004208F4(a1 - 16, a2);
}

uint64_t sub_100420968(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 56);
  *(_BYTE *)(a1 + 120) = 0;
  return sub_100034234((uint64_t)v3);
}

uint64_t sub_1004209A8(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 40);
  *(_BYTE *)(a1 + 104) = 0;
  return sub_100034234((uint64_t)v3);
}

uint64_t sub_1004209E8(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 56);
  *(_BYTE *)(a1 + 121) = 1;
  return sub_100034234((uint64_t)v3);
}

uint64_t sub_100420A2C(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 32);
  *(_BYTE *)(a1 + 97) = 1;
  return sub_100034234((uint64_t)v3);
}

uint64_t sub_100420A70(uint64_t a1)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_10003415C((uint64_t)v3, a1 + 56);
  *(_BYTE *)(a1 + 121) = 0;
  sub_100034264((uint64_t)v3);
  sub_100420350(a1);
  return sub_100034234((uint64_t)v3);
}

void sub_100420AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100420AD4(uint64_t a1)
{
  return sub_100420A70(a1 - 24);
}

uint64_t sub_100420ADC(uint64_t a1, uint64_t a2)
{
  char **v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 56);
  v4 = (char **)(a1 + 136);
  if (sub_10046EA5C((uint64_t)v4, a2))
    sub_10046EA90(v4, a2);
  return sub_100034234((uint64_t)v6);
}

void sub_100420B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100420B50(uint64_t a1, uint64_t a2)
{
  return sub_100420ADC(a1 - 24, a2);
}

void sub_100420B58(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  char *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];
  uint64_t v11;
  uint8_t buf[8];

  if (a4 <= 200)
  {
    if (a4 == 101)
    {
      byte_100992B80 = 1;
      return;
    }
    if (a4 != 102)
      return;
    v5 = &byte_100992B80;
  }
  else
  {
    if (a4 == 201)
    {
      byte_100992B81 = 1;
      return;
    }
    if (a4 != 202)
    {
      if (a4 == 902)
      {
        if (qword_100977A88 != -1)
          dispatch_once(&qword_100977A88, &stru_10092E920);
        sub_10027EFE4((uint64_t)off_100977A80, a2);
      }
      return;
    }
    v5 = &byte_100992B81;
  }
  *v5 = 0;
  if (byte_100992B82 == 1)
  {
    v6 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)&buf[4] = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "AWD - Request is in queue already", &buf[4], 2u);
    }
  }
  else
  {
    *(_QWORD *)buf = 0;
    v11 = 0;
    sub_100444BF0(a2, &buf[4], buf, (_DWORD *)&v11 + 1, &v11);
    v7 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7))
    {
      v8 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 328))(v8))
      {
        if (qword_100977A78 != -1)
          dispatch_once(&qword_100977A78, &stru_10092E8E0);
        if ((sub_100496DBC((uint64_t)off_100977A70, a2) & 0x80000) != 0
          && (HIDWORD(v11) - 8194) <= 0xE
          && ((1 << (BYTE4(v11) - 2)) & 0x409B) != 0)
        {
          byte_100992B82 = 1;
          v9 = sub_10006BBEC();
          v10[0] = _NSConcreteStackBlock;
          v10[1] = 3221225472;
          v10[2] = sub_100420D70;
          v10[3] = &unk_100917378;
          v10[4] = a2;
          sub_100475CEC(v9, 250, v10);
        }
      }
    }
  }
}

void sub_100420D70(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[16];
  uint8_t buf[16];

  if ((byte_100992B80 & 1) != 0 || (byte_100992B81 & 1) != 0)
    goto LABEL_9;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10092E980);
  if (!*((_BYTE *)off_100977A50 + 60))
    goto LABEL_9;
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_10092E8E0);
  if ((sub_100496DBC((uint64_t)off_100977A70, *(_QWORD *)(a1 + 32)) & 0x80000) != 0)
  {
    v3 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "AWD - Send request to collect diagnose", buf, 2u);
    }
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_10092E920);
    sub_10027958C((uint64_t)off_100977A80, *(_QWORD *)(a1 + 32), 32, 0, 0);
  }
  else
  {
LABEL_9:
    v2 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "AWD - Can't send request to collect diagnose", v4, 2u);
    }
  }
  byte_100992B82 = 0;
}

BOOL sub_100420EFC(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 56);
  v4 = sub_10046EA5C(a1 + 136, a2);
  sub_100034234((uint64_t)v6);
  return v4;
}

void sub_100420F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100420F64(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 56);
  v6 = a3[1];
  v13 = *a3;
  v14 = v6;
  v7 = *(_QWORD *)(a1 + 256);
  v8 = *(_QWORD *)(a1 + 264);
  v12 = a2;
  v9 = sub_1004242BC(v7, v8, &v12);
  sub_100423F88(a1 + 256, v9, *(_QWORD *)(a1 + 264));
  sub_100034234((uint64_t)v11);
  return 0;
}

void sub_100420FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100420FF0(_QWORD *a1, uint64_t a2)
{
  char **v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void *__p[2];
  char v23;
  _QWORD v24[2];
  uint8_t buf[4];
  void **v26;

  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, (uint64_t)(a1 + 7));
  v4 = (char **)(a1 + 17);
  if (sub_10046EA5C((uint64_t)(a1 + 17), a2))
  {
    v5 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_INFO))
    {
      sub_10043E5F8(a2, __p);
      if (v23 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Device %{public}s has already been registered", buf, 0xCu);
      if (v23 < 0)
        operator delete(__p[0]);
    }
    v7 = 601;
  }
  else
  {
    v8 = a1[19];
    v9 = (uint64_t *)a1[18];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        abort();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)sub_10007ABA0((uint64_t)(a1 + 19), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = a2;
      v10 = v16 + 1;
      v19 = (char *)a1[17];
      v18 = (char *)a1[18];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[17] = v16;
      a1[18] = v10;
      a1[19] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = a2;
      v10 = v9 + 1;
    }
    a1[18] = v10;
    sub_100034264((uint64_t)v24);
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_10092E8E0);
    sub_10049B904((uint64_t)off_100977A70, a2);
    sub_10041E650((uint64_t)a1, a2);
    v7 = sub_10041F6CC((uint64_t)a1, a2);
  }
  sub_100034234((uint64_t)v24);
  return v7;
}

void sub_100421218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100421238(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v5;
  int v6;
  NSObject *v7;
  const char *v8;
  std::string *p_p;
  unint64_t v10;
  unsigned __int8 **v11;
  _QWORD *v12;
  NSObject *v13;
  std::string *v14;
  unint64_t v15;
  unsigned __int8 **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  unsigned __int8 **v30;
  char *v31;
  char *v32;
  char *v33;
  unsigned __int8 *v34;
  int v35;
  unsigned __int8 **v36;
  char *v37;
  char *v38;
  char *v39;
  unsigned __int8 *v40;
  int v41;
  _QWORD v42[2];
  std::string __p;
  int v44;
  uint8_t buf[4];
  std::string *v46;
  __int16 v47;
  std::string *v48;

  v44 = 0;
  if (sub_100420EFC(a1, (uint64_t)a2))
  {
    sub_100448848((uint64_t)a2, &v44);
    if (v44 == 1)
      return 603;
    sub_100448804((uint64_t)a2, 1);
    sub_10041F6CC(a1, (uint64_t)a2);
    if (qword_100978130 != -1)
      dispatch_once(&qword_100978130, &stru_10092E900);
    if (sub_10002527C((uint64_t)off_100978128))
    {
      v42[0] = 0;
      v42[1] = 0;
      sub_10003415C((uint64_t)v42, a1 + 56);
      v6 = *(unsigned __int8 *)(a1 + 120);
      if (*(_BYTE *)(a1 + 120) || *(_BYTE *)(a1 + 121))
      {
        v7 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8((uint64_t)a2, &__p);
          v8 = "(someone is connecting)";
          if (!v6)
            v8 = "(someone is pairing)";
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136446466;
          v46 = (std::string *)v8;
          v47 = 2082;
          v48 = p_p;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Auto pairing is not allowed at the moment %{public}s, queuing up device %{public}s for later", buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        v10 = *(_QWORD *)(a1 + 176);
        v11 = *(unsigned __int8 ***)(a1 + 168);
        if ((unint64_t)v11 >= v10)
        {
          v18 = *(_QWORD *)(a1 + 160);
          v19 = ((uint64_t)v11 - v18) >> 3;
          if ((unint64_t)(v19 + 1) >> 61)
            abort();
          v20 = v10 - v18;
          v21 = v20 >> 2;
          if (v20 >> 2 <= (unint64_t)(v19 + 1))
            v21 = v19 + 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
            v23 = (char *)sub_10007ABA0(a1 + 176, v22);
          else
            v23 = 0;
          v30 = (unsigned __int8 **)&v23[8 * v19];
          v31 = &v23[8 * v22];
          *v30 = a2;
          v12 = v30 + 1;
          v33 = *(char **)(a1 + 160);
          v32 = *(char **)(a1 + 168);
          if (v32 != v33)
          {
            do
            {
              v34 = (unsigned __int8 *)*((_QWORD *)v32 - 1);
              v32 -= 8;
              *--v30 = v34;
            }
            while (v32 != v33);
            v32 = *(char **)(a1 + 160);
          }
          *(_QWORD *)(a1 + 160) = v30;
          *(_QWORD *)(a1 + 168) = v12;
          *(_QWORD *)(a1 + 176) = v31;
          if (v32)
            operator delete(v32);
        }
        else
        {
          *v11 = a2;
          v12 = v11 + 1;
        }
        *(_QWORD *)(a1 + 168) = v12;
      }
      else
      {
        sub_100034264((uint64_t)v42);
        sub_10041E330(a1, (uint64_t)a2);
        if ((sub_10043E93C(a2) & 1) != 0)
          goto LABEL_54;
        if (qword_100977A78 != -1)
          dispatch_once(&qword_100977A78, &stru_10092E8E0);
        memset(&__p, 0, sizeof(__p));
        v35 = sub_100495A98((int64x2_t *)off_100977A70, (uint64_t)a2, -1, &__p, 2);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v35)
          goto LABEL_54;
        sub_100034188((uint64_t)v42);
        *(_QWORD *)(a1 + 128) = a2;
      }
      sub_100034264((uint64_t)v42);
LABEL_54:
      sub_100034234((uint64_t)v42);
      return 0;
    }
    v13 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8((uint64_t)a2, &__p);
      v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      v46 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Queuing up device %{public}s for after power on", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    sub_10003415C((uint64_t)&__p, a1 + 56);
    v15 = *(_QWORD *)(a1 + 176);
    v16 = *(unsigned __int8 ***)(a1 + 168);
    if ((unint64_t)v16 >= v15)
    {
      v24 = *(_QWORD *)(a1 + 160);
      v25 = ((uint64_t)v16 - v24) >> 3;
      if ((unint64_t)(v25 + 1) >> 61)
        abort();
      v26 = v15 - v24;
      v27 = v26 >> 2;
      if (v26 >> 2 <= (unint64_t)(v25 + 1))
        v27 = v25 + 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
        v29 = (char *)sub_10007ABA0(a1 + 176, v28);
      else
        v29 = 0;
      v36 = (unsigned __int8 **)&v29[8 * v25];
      v37 = &v29[8 * v28];
      *v36 = a2;
      v17 = v36 + 1;
      v39 = *(char **)(a1 + 160);
      v38 = *(char **)(a1 + 168);
      if (v38 != v39)
      {
        do
        {
          v40 = (unsigned __int8 *)*((_QWORD *)v38 - 1);
          v38 -= 8;
          *--v36 = v40;
        }
        while (v38 != v39);
        v38 = *(char **)(a1 + 160);
      }
      *(_QWORD *)(a1 + 160) = v36;
      *(_QWORD *)(a1 + 168) = v17;
      *(_QWORD *)(a1 + 176) = v37;
      if (v38)
        operator delete(v38);
    }
    else
    {
      *v16 = a2;
      v17 = v16 + 1;
    }
    *(_QWORD *)(a1 + 168) = v17;
    sub_100034264((uint64_t)&__p);
    if (qword_100978130 != -1)
      dispatch_once(&qword_100978130, &stru_10092E900);
    v41 = sub_10047DB74((uint64_t)off_100978128);
    sub_100034234((uint64_t)&__p);
    if (!v41)
      return 0;
    return 200;
  }
  else
  {
    v5 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0144((uint64_t)a2, v5);
    return 600;
  }
}

void sub_1004216F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10042173C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  v8 = 0;
  if (sub_100420EFC(a1, a2))
  {
    sub_100448848(a2, &v8);
    if (v8 == 2)
    {
      return 604;
    }
    else
    {
      sub_100448804(a2, 2);
      v7[0] = 0;
      v7[1] = 0;
      sub_10003415C((uint64_t)v7, a1 + 56);
      sub_10046EA90((char **)(a1 + 160), a2);
      sub_100034264((uint64_t)v7);
      sub_10041E4C0(a1, a2);
      v4 = sub_10041F6CC(a1, a2);
      sub_100034234((uint64_t)v7);
    }
  }
  else
  {
    v5 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F01C8(a2, v5);
    return 600;
  }
  return v4;
}

void sub_100421824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100421838(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  int v7;

  v7 = 0;
  if (sub_100420EFC(a1, a2))
  {
    sub_100448848(a2, &v7);
    result = 0;
    *a3 = v7;
  }
  else
  {
    v6 = qword_1009997D8;
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F024C(a2, v6);
    return 600;
  }
  return result;
}

uint64_t sub_1004218B8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;
  int v5;

  v5 = 0;
  result = sub_100447218(a2, (uint64_t)&v5);
  if (!(_DWORD)result)
    *a3 = v5;
  return result;
}

uint64_t sub_1004218F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100447948(a2, a3);
}

uint64_t sub_100421904(uint64_t a1, char *a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 56);
  if ((char *)(a1 + 136) != a2)
    sub_1002A7150(a2, *(char **)(a1 + 136), *(_QWORD *)(a1 + 144), (uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 3);
  sub_100034234((uint64_t)v5);
  return 0;
}

void sub_100421968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10042197C(uint64_t a1, uint64_t a2)
{
  sub_10041E7E0(a1, a2);
  return sub_10041F6CC(a1, a2);
}

uint64_t sub_1004219B0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  v4 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_INFO))
  {
    sub_10043F6EC(a2, (uint64_t)__p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending BT_ACCESSORY_NAME_CHANGED for %s", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return sub_10041F6CC(a1, a2);
}

uint64_t sub_100421AA0(uint64_t a1, uint64_t a2)
{
  sub_10041EEA4(a1, a2);
  return sub_10041F6CC(a1, a2);
}

uint64_t sub_100421AD4(uint64_t a1, uint64_t a2)
{
  return sub_10041F6CC(a1, a2);
}

uint64_t sub_100421AE4(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_10041F300(a1, a2, *a3 | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 32), a4, a5, a6);
  return sub_10041FCFC(a1, a2);
}

void sub_100421B58(uint64_t a1, uint64_t a2)
{
  int v2;
  NSObject *v3;

  v2 = sub_10041F6CC(a1, a2);
  v3 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEBUG))
    sub_1006F02CC(v2, v3);
}

uint64_t sub_100421BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10041E970(a1, a2, a3, a4, a5);
  return sub_100420058(a1, a2);
}

uint64_t sub_100421C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v9;

  v3 = a3;
  sub_10041F528(a1, a2, a3);
  switch(v3)
  {
    case 2:
      v6 = a1;
      v7 = a2;
      return sub_10041F6CC(v6, v7);
    case 1:
      v6 = a1;
      v7 = a2;
      return sub_10041F6CC(v6, v7);
    case 0:
      v6 = a1;
      v7 = a2;
      return sub_10041F6CC(v6, v7);
  }
  v9 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
    sub_1006F033C(v3, v9);
  return 1;
}

uint64_t sub_100421CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092E920);
  return sub_100284E30((uint64_t)off_100977A80, a2, a3, 2u);
}

uint64_t sub_100421D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092E920);
  return sub_100284EF8((uint64_t)off_100977A80, a2, a3);
}

uint64_t sub_100421D68(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092E920);
  return sub_100285094((uint64_t)off_100977A80, a2, a3, a4, 2);
}

uint64_t sub_100421DD4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, char a4, int a5)
{
  BOOL v10;
  NSObject *v11;
  int v12;
  const char *v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;

  if (a2)
  {
    v16 = 0;
    v17 = 0;
    sub_100444BF0((uint64_t)a2, (_DWORD *)&v17 + 1, &v17, (_DWORD *)&v16 + 1, &v16);
    v10 = sub_1004420E0((uint64_t)a2);
    v11 = qword_1009997D8;
    if (!v10)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006F0404();
      return 11;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = sub_100442118((uint64_t)a2, 20);
      v13 = "No";
      if (v12)
        v13 = "Yes";
      *(_DWORD *)buf = 136315138;
      v19 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Sensor data support: %s", buf, 0xCu);
    }
    v14 = (HIDWORD(v16) - 8202) > 9 || ((1 << (BYTE4(v16) - 10)) & 0x311) == 0;
    if (v14 && (sub_100442118((uint64_t)a2, 20) & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
        sub_1006F03D8();
      return 11;
    }
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_10092E9A0);
    return sub_10051E4E8((uint64_t)off_100977A90, ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133], a3, a4, a1 + 48, a5);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F03AC();
    return 1;
  }
}

uint64_t sub_10042200C(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v5;
  NSObject *v6;
  int v8;
  uint64_t v9;

  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10092E9A0);
  v5 = sub_10051ED5C((uint64_t)off_100977A90, a2);
  *a3 = v5;
  v6 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 134217984;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Reference Timestamp ID: %llx ", (uint8_t *)&v8, 0xCu);
  }
  return 0;
}

uint64_t sub_1004220F4(uint64_t a1, uint64_t a2, int *a3)
{
  NSObject *v5;
  int v6;
  void **v7;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  void **v14;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092E940);
  sub_10047134C((uint64_t)off_1009778E0, a2, a3);
  v5 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *a3;
    sub_10043F6EC(a2, (uint64_t)__p);
    if (v10 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    v12 = v6;
    v13 = 2080;
    v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "getSpatialAudioAllowSpatial: Allowed = %d For  \"%s\"", buf, 0x12u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

uint64_t sub_100422220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  void **v7;
  uint64_t v8;
  _QWORD v10[5];
  void *__p[2];
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  void **v16;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092E940);
  sub_100471494((uint64_t)off_1009778E0, a2, a3);
  v6 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(a2, (uint64_t)__p);
    if (v12 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    v14 = a3;
    v15 = 2080;
    v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "notifySpatialAudioAllowSpatialChanged to %d  \"%s\"", buf, 0x12u);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  v8 = sub_1004759E0();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10042239C;
  v10[3] = &unk_100917378;
  v10[4] = a2;
  sub_100041A34(v8, v10);
  sub_100422400(a1, a2);
  return 0;
}

uint64_t sub_10042239C(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 32))
  {
    v1 = result;
    if (qword_100977E00 != -1)
      dispatch_once(&qword_100977E00, &stru_10092E9C0);
    return sub_1003E4840((_QWORD *)qword_100977DF8, *(_QWORD *)(v1 + 32));
  }
  return result;
}

uint64_t sub_100422400(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  v4 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_INFO))
  {
    sub_10043F6EC(a2, (uint64_t)__p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending BT_ACCESSORY_SETTINGS_CHANGED for %s", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return sub_10041F6CC(a1, a2);
}

uint64_t sub_1004224F0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, _DWORD *a5)
{
  void *v8;
  NSObject *v9;
  void **v10;
  int v11;
  const char *v12;
  void *__p[2];
  char v15;
  char v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  const char *v24;

  v16 = 1;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:"));
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092E940);
  sub_100471864((uint64_t)off_1009778E0, a2, v8, a4, &v16);
  *a5 = -v16;
  v9 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(a2, (uint64_t)__p);
    if (v15 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    v11 = *a4;
    v12 = "Off";
    if (*a5 == -1)
      v12 = "On";
    *(_DWORD *)buf = 136315906;
    v18 = v10;
    v19 = 2112;
    v20 = v8;
    v21 = 1024;
    v22 = v11;
    v23 = 2080;
    v24 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Get Spatial Audio Mode for device \"%s\" :[%@] Mode= %u Head Tracking %s", buf, 0x26u);
    if (v15 < 0)
      operator delete(__p[0]);
  }

  return 0;
}

void sub_100422690(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1004226AC(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v5;
  void **v6;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  void **v13;

  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10092E9A0);
  sub_100527484((uint64_t)off_100977A90, a2, a3);
  v5 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(a2, (uint64_t)__p);
    if (v9 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 67109378;
    v11 = a3;
    v12 = 2080;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "updateSpatialAudioSpatialActiveChanged to %d  \"%s\"", buf, 0x12u);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  return 0;
}

uint64_t sub_1004227D4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  __CFString *v9;
  BOOL v10;
  NSObject *v11;
  void **v12;
  const __CFString *v13;
  const char *v14;
  id v15;
  uint64_t v16;
  id v17;
  _QWORD v19[4];
  id v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  void *__p[2];
  char v25;
  uint8_t buf[4];
  void **v27;
  __int16 v28;
  int v29;
  __int16 v30;
  const __CFString *v31;
  __int16 v32;
  const char *v33;

  v9 = a3;
  v10 = a5 == -1;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10092E940);
  sub_1004715C8((uint64_t)off_1009778E0, a2, v9, a4, a5 == -1);
  v11 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(a2, (uint64_t)__p);
    if (v25 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    v13 = CFSTR("None");
    *(_DWORD *)buf = 136315906;
    v27 = v12;
    v14 = "YES";
    if (v9)
      v13 = v9;
    v28 = 1024;
    v29 = a4;
    if (a5 != -1)
      v14 = "NO";
    v30 = 2112;
    v31 = v13;
    v32 = 2082;
    v33 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Notify Spatial Audio Mode changed for device \"%s\" to %d for App %@ Head Tracking %{public}s", buf, 0x26u);
    if (v25 < 0)
      operator delete(__p[0]);
  }
  v15 = -[__CFString copy](v9, "copy");
  v16 = sub_1004759E0();
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100422A3C;
  v19[3] = &unk_1009197C8;
  v21 = a2;
  v17 = v15;
  v20 = v17;
  v22 = a4;
  v23 = v10;
  sub_100041A34(v16, v19);
  sub_100422400(a1, a2);

  return 0;
}

void sub_1004229F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100422A3C(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 40))
  {
    v1 = result;
    if (qword_100977E00 != -1)
      dispatch_once(&qword_100977E00, &stru_10092E9C0);
    return sub_1003E4A40((_QWORD *)qword_100977DF8, *(_QWORD *)(v1 + 40), *(void **)(v1 + 32), *(_DWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 52));
  }
  return result;
}

uint64_t sub_100422AA8(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092E920);
  return sub_100285264((uint64_t)off_100977A80, a2, a3, 2u);
}

uint64_t sub_100422B04(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092E920);
  return sub_1002835F4((uint64_t)off_100977A80, a2, a3, a4);
}

uint64_t sub_100422B6C(uint64_t a1, uint64_t a2, int *a3)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_10092E920);
  return sub_100283884((uint64_t)off_100977A80, a2, a3);
}

uint64_t sub_100422BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  void **v8;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  void **v15;

  v7 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_INFO))
  {
    sub_10043E5F8(a2, __p);
    if (v11 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v13 = a4;
    v14 = 2082;
    v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Sending %{public}s changed for %{public}s", buf, 0x16u);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  return sub_10041F6CC(a1, a2);
}

uint64_t sub_100422CD0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  void **v10;

  v4 = qword_1009997D8;
  if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_INFO))
  {
    sub_10043E5F8(a2, __p);
    if (v8 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending AACP capabilities received for %{public}s", buf, 0xCu);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return sub_10041F6CC(a1, a2);
}

uint64_t sub_100422DC0(_QWORD *a1, char *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  float v8;
  _BOOL4 v9;
  NSObject *v10;
  char v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void **v24;
  const char *v25;
  const char *v26;
  void *__p[2];
  char v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];
  void *v33;
  void *v34;
  uint64_t v35;
  uint8_t buf[4];
  void **v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  const char *v45;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_10092E8C0);
  v4 = sub_10006CA88((uint64_t)off_100978148, (uint64_t **)&v33);
  if ((_DWORD)v4)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
      sub_1006F0430();
  }
  else
  {
    v32[0] = 0;
    v32[1] = 0;
    sub_10003415C((uint64_t)v32, (uint64_t)(a1 + 7));
    v5 = (char *)(a1 + 23);
    a1[24] = a1[23];
    v6 = (uint64_t *)v33;
    if (v33 != v34)
    {
      do
      {
        v7 = *v6;
        v8 = sub_1004513A4(*v6);
        v9 = sub_1004420E0(v7);
        v30 = 0;
        v31 = 0;
        sub_100444BF0(v7, (_DWORD *)&v31 + 1, &v31, (_DWORD *)&v30 + 1, &v30);
        v10 = qword_1009997D8;
        if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_DEBUG))
        {
          sub_10043F6EC(v7, (uint64_t)__p);
          v24 = __p;
          if (v29 < 0)
            v24 = (void **)__p[0];
          v25 = "False";
          if (v9)
            v26 = "True";
          else
            v26 = "False";
          if (v8 != -1.0)
            v25 = "True";
          *(_DWORD *)buf = 136316162;
          v37 = v24;
          v38 = 1024;
          v39 = HIDWORD(v30);
          v40 = 1024;
          v41 = v31;
          v42 = 2080;
          v43 = v26;
          v44 = 2080;
          v45 = v25;
          _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "deviceName = %s, pid=0x%x, vid=0x%x, isAppleBT=%s, isHAESupported=%s", buf, 0x2Cu);
          if (v29 < 0)
            operator delete(__p[0]);
        }
        v11 = v8 == -1.0 || v9;
        if ((v11 & 1) == 0)
        {
          v13 = (uint64_t *)a1[24];
          v12 = a1[25];
          if ((unint64_t)v13 >= v12)
          {
            v15 = ((uint64_t)v13 - *(_QWORD *)v5) >> 3;
            if ((unint64_t)(v15 + 1) >> 61)
              abort();
            v16 = v12 - *(_QWORD *)v5;
            v17 = v16 >> 2;
            if (v16 >> 2 <= (unint64_t)(v15 + 1))
              v17 = v15 + 1;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
              v18 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v18 = v17;
            if (v18)
              v19 = (char *)sub_10007ABA0((uint64_t)(a1 + 25), v18);
            else
              v19 = 0;
            v20 = (uint64_t *)&v19[8 * v15];
            *v20 = v7;
            v14 = v20 + 1;
            v22 = (char *)a1[23];
            v21 = (char *)a1[24];
            if (v21 != v22)
            {
              do
              {
                v23 = *((_QWORD *)v21 - 1);
                v21 -= 8;
                *--v20 = v23;
              }
              while (v21 != v22);
              v21 = *(char **)v5;
            }
            a1[23] = v20;
            a1[24] = v14;
            a1[25] = &v19[8 * v18];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *v13 = v7;
            v14 = v13 + 1;
          }
          a1[24] = v14;
        }
        ++v6;
      }
      while (v6 != v34);
    }
    if (v5 != a2)
      sub_1002A7150(a2, (char *)a1[23], a1[24], (uint64_t)(a1[24] - a1[23]) >> 3);
    sub_100034234((uint64_t)v32);
    v4 = 0;
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  return v4;
}

void sub_1004230F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  sub_100034234((uint64_t)&a16);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

const char *sub_100423144(_DWORD *a1)
{
  const char *v1;

  v1 = "Unknown";
  if (*a1 == 2)
    v1 = "Unplugged";
  if (*a1 == 1)
    return "Plugged in";
  else
    return v1;
}

_QWORD *sub_100423174(_QWORD *result)
{
  *result = off_10092E790;
  return result;
}

void sub_100423184(_QWORD *a1)
{
  *a1 = off_10092E790;
  operator delete();
}

void sub_1004231A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  _QWORD *v8;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092E9E0);
  v8 = off_1009778D0;
  if (sub_100423284(a1, *(_QWORD *)(a1 + 40)) && sub_100423284(a1, *(_QWORD *)(a1 + 56)) && v8[32] != v8[33])
  {
    sub_100424504(a2, a3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), *(_QWORD *)(a1 + 56), *(unsigned int *)(a1 + 64), a4);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
  {
    sub_1006F045C();
  }
}

BOOL sub_100423284(uint64_t a1, unint64_t a2)
{
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_10092E880);
  return sub_10050AB38(qword_100977B48, a2);
}

uint64_t sub_1004232D4(uint64_t a1)
{
  *(_QWORD *)a1 = off_10092E7D0;
  free(*(void **)(a1 + 64));
  return a1;
}

void sub_100423308(uint64_t a1)
{
  *(_QWORD *)a1 = off_10092E7D0;
  free(*(void **)(a1 + 64));
  operator delete();
}

void sub_10042334C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  _QWORD *v8;

  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_10092E9E0);
  v8 = off_1009778D0;
  if (sub_100423284(a1, *(_QWORD *)(a1 + 40)) && sub_100423284(a1, *(_QWORD *)(a1 + 48)) && v8[32] != v8[33])
  {
    sub_100424520(a2, a3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56), *(unsigned __int8 *)(a1 + 60), *(unsigned __int16 *)(a1 + 62), *(_QWORD *)(a1 + 64), a4);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D8, OS_LOG_TYPE_ERROR))
  {
    sub_1006F045C();
  }
}

