uint64_t sub_10025A290(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _WORD *v5;
  NSObject *v6;
  uint8_t buf[4];
  void *v8;

  if (sub_10005549C())
  {
    sub_100054530("HandsfreeAoS_Connect - addr:%:", a1);
    v2 = sub_1000544A0(0x5Au);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v8 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (sub_10025A3FC(a1))
    return 126;
  v5 = (_WORD *)(sub_10025A448(a1) + 128);
  v3 = sub_1001DD1A8((uint64_t)sub_10025A4D4, (uint64_t)sub_10025A5C4, (uint64_t)sub_10025A6CC, 0x1003u, a1, (uint64_t)&xmmword_10073CB28, v5, (uint64_t)&unk_10091FC28);
  if ((_DWORD)v3)
  {
    sub_10025A700((unsigned __int16)*v5);
    if (sub_10005549C())
    {
      sub_100054530("L2CAP connection attempt failed %!", v3);
      v6 = sub_1000544A0(0x5Au);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  return v3;
}

uint64_t sub_10025A3FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  v1 = 0;
  while (1)
  {
    v2 = *(_QWORD *)(qword_100991A18 + v1);
    if (v2)
    {
      v3 = *(int **)(v2 + 8);
      v4 = *v3;
      v5 = *((unsigned __int16 *)v3 + 2);
      if (v4 == *(_DWORD *)a1 && v5 == *(unsigned __int16 *)(a1 + 4))
        break;
    }
    v1 += 8;
    if (v1 == 128)
      return 0;
  }
  return v2;
}

uint64_t sub_10025A448(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = 0;
  while (*(_QWORD *)(qword_100991A18 + v2))
  {
    v2 += 8;
    if (v2 == 128)
      return 0;
  }
  v4 = malloc_type_calloc(1uLL, 0x88uLL, 0x10F20406ED7B6AEuLL);
  *(_QWORD *)(qword_100991A18 + v2) = v4;
  v4[1] = a1;
  v5 = sub_10019AEA4(a1);
  v6 = qword_100991A18;
  **(_QWORD **)(qword_100991A18 + v2) = v5;
  return *(_QWORD *)(v6 + v2);
}

void sub_10025A4D4(unsigned int a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  NSObject *v8;
  uint8_t buf[4];
  void *v10;

  if (sub_10005549C())
  {
    sub_100054530("L2CAPConnectCB - cid:%d inMTU:%d outMTU:%d result:%!", a1, a2, a3, a4);
    v8 = sub_1000544A0(0x5Au);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v10 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if ((_DWORD)a4)
    sub_10025A700(a1);
}

void sub_10025A5C4(unsigned int a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t i;
  uint64_t v6;
  int v7;
  uint8_t buf[4];
  void *v9;

  if (sub_10005549C())
  {
    sub_100054530("L2CAPDisconnectCB - cid:%d reason:%!", a1, a2);
    v4 = sub_1000544A0(0x5Au);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v9 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  for (i = 0; ; i += 8)
  {
    v6 = *(_QWORD *)(qword_100991A18 + i);
    if (v6)
    {
      if (*(unsigned __int16 *)(v6 + 128) == a1)
        break;
    }
  }
  v7 = sub_10015C5CC(*(_QWORD *)v6);
  sub_10015C0E4(v7, 0);
  sub_10025A700(a1);
}

uint64_t sub_10025A6CC(int a1)
{
  uint64_t i;
  uint64_t v2;

  for (i = 0; ; i += 8)
  {
    v2 = *(_QWORD *)(qword_100991A18 + i);
    if (v2)
    {
      if (*(unsigned __int16 *)(v2 + 128) == a1)
        break;
    }
  }
  return (*(uint64_t (**)(_QWORD))(qword_100991A18 + 128))(*(_QWORD *)(v2 + 8));
}

void sub_10025A700(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = 0;
  v2 = qword_100991A18;
  while (1)
  {
    v3 = *(_QWORD *)(qword_100991A18 + v1);
    if (v3)
    {
      if (*(unsigned __int16 *)(v3 + 128) == a1)
        break;
    }
    v1 += 8;
    if (v1 == 128)
      return;
  }
  free(*(void **)(qword_100991A18 + v1));
  *(_QWORD *)(v2 + v1) = 0;
}

void sub_10025A754(uint64_t a1, char *a2, size_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;

  v6 = sub_10025A3FC(a1);
  if (v6)
  {
    v7 = v6;
    v8 = (unsigned __int8 *)(v6 + 16);
    v9 = sub_1000532A8(v6 + 16, 1u);
    if ((_DWORD)v9)
    {
      v10 = v9;
      if (sub_10005549C())
      {
        sub_100054530("Failed to initialize mbuf - result:%!", v10);
        v11 = sub_1000544A0(0x5Au);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
    v12 = sub_10005336C(v8, a2, a3, 2u);
    if ((_DWORD)v12)
    {
      v13 = v12;
      if (sub_10005549C())
      {
        sub_100054530("Failed to append mbuf - result:%!", v13);
        v14 = sub_1000544A0(0x5Au);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          sub_1006CE7A4();
      }
    }
    v15 = sub_1001DBC18(0, *(unsigned __int16 *)(v7 + 128), 0, (uint64_t)v8, 0);
    if ((_DWORD)v15)
    {
      v16 = v15;
      if ((_DWORD)v15 != 412)
      {
        if (sub_10005549C())
        {
          sub_100054530("Failed to send HandsfreeAoS data - result:%!", v16);
          v17 = sub_1000544A0(0x5Au);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            goto LABEL_17;
        }
      }
    }
  }
  else if (sub_10005549C())
  {
    sub_100054530("Trying to send audio data to nonexistent connection - addr:%: length:%d", a1, a3);
    v18 = sub_1000544A0(0x5Au);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
LABEL_17:
      sub_1006CE7A4();
  }
}

uint64_t sub_10025A90C(uint64_t a1)
{
  return *(unsigned __int16 *)(sub_10025A3FC(a1) + 128);
}

uint64_t sub_10025A924(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint8_t buf[4];
  void *v8;

  if (sub_10005549C())
  {
    sub_100054530("HandsfreeAoS_Disconnect - addr:%:", a1);
    v2 = sub_1000544A0(0x5Au);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v8 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v3 = sub_10025A3FC(a1);
  v4 = sub_1001DEB7C(*(unsigned __int16 *)(v3 + 128), 436);
  if ((_DWORD)v4)
  {
    if (sub_10005549C())
    {
      sub_100054530("HandsfreeAoS failed to disconnect, reason %!", v4);
      v5 = sub_1000544A0(0x5Au);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
  }
  return v4;
}

uint64_t sub_10025AA48()
{
  NSObject *v0;
  uint64_t result;
  uint64_t v2;
  int v4;
  void *v5;

  if (sub_10005549C())
  {
    sub_100054530("HandsfreeAoS_Deregister");
    v0 = sub_1000544A0(0x5Au);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      v4 = 136446210;
      v5 = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, " %{public}s", (uint8_t *)&v4, 0xCu);
    }
  }
  if (*(_QWORD *)qword_100991A18)
    return 126;
  v2 = 1;
  while (v2 != 16)
  {
    if (*(_QWORD *)(qword_100991A18 + 8 * v2++))
    {
      if ((unint64_t)(v2 - 2) < 0xF)
        return 126;
      break;
    }
  }
  free((void *)qword_100991A18);
  result = 0;
  qword_100991A18 = 0;
  return result;
}

uint64_t sub_10025AB48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  if (!qword_100991A18)
    return 0;
  v1 = 0;
  while (1)
  {
    v2 = *(_QWORD *)(qword_100991A18 + v1);
    if (v2)
    {
      v3 = *(int **)(v2 + 8);
      v4 = *v3;
      v5 = *((unsigned __int16 *)v3 + 2);
      if (v4 == *(_DWORD *)a1 && v5 == *(unsigned __int16 *)(a1 + 4))
        break;
    }
    v1 += 8;
    if (v1 == 128)
      return 0;
  }
  return *(unsigned __int16 *)(v2 + 128);
}

uint64_t sub_10025AB9C(uint64_t a1, _WORD *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t buf[16];
  __int128 v9;

  if (sub_10005549C())
  {
    sub_100054530("HandsfreeAoS_FastConnect_CreateChannel - addr:%:", a1);
    v4 = sub_1000544A0(0x5Au);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (sub_10025A3FC(a1))
    return 126;
  *(_OWORD *)buf = xmmword_10073CB28;
  v9 = unk_10073CB38;
  v5 = sub_1001DC9B8(4099, (uint64_t)buf, a1, (uint64_t)sub_10025A4D4, (uint64_t)sub_10025A5C4, (uint64_t)sub_10025A6CC, a2, (uint64_t)&unk_10091FC28);
  if ((_DWORD)v5)
  {
    if (sub_10005549C())
    {
      sub_100054530("HandsfreeAoS_FastConnect_CreateChannel error creating L2CAP channel, reason %!", v5);
      v6 = sub_1000544A0(0x5Au);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_1006CE7A4();
    }
    sub_100253460();
  }
  *(_WORD *)(sub_10025A448(a1) + 128) = *a2;
  return v5;
}

void sub_10025AD24(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  _BYTE buf[24];

  if (sub_10005549C())
  {
    sub_100054530("HandsfreeAoS_FastConnect_DestroyChannel");
    v4 = sub_1000544A0(0x5Au);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = sub_100054494();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  v5 = sub_10025A3FC(a1);
  if (v5)
  {
    sub_10025A700(*(unsigned __int16 *)(v5 + 128));
  }
  else if (sub_10005549C())
  {
    sub_100054530("HandsfreeAoS_FastConnect_DestroyChannel no connection exists for addr:%:", a1);
    v6 = sub_1000544A0(0x5Au);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1006CE7A4();
  }
  *(_QWORD *)buf = 0;
  if (sub_1001DB044(a2, (uint64_t *)buf) || !*(_QWORD *)buf)
  {
    if (sub_10005549C())
    {
      sub_100054530("HandsfreeAoS_FastConnect_DestroyChannel failed to get channel, cid:%d", a2);
      v8 = sub_1000544A0(0x5Au);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
LABEL_18:
        sub_1006CE7A4();
    }
  }
  else
  {
    sub_1001DC658(*(uint64_t *)buf);
    v7 = sub_10019AEA4(a1);
    if (v7)
    {
      sub_100186150(v7);
      return;
    }
    if (sub_10005549C())
    {
      sub_100054530("HandsfreeAoS_FastConnect_DestroyChannel NULL Handle");
      v9 = sub_1000544A0(0x5Au);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_18;
    }
  }
}

void sub_10025AF04(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void *v4;
  id v5;
  _QWORD v6[8];
  uint8_t buf[16];
  _QWORD v8[3];
  char v9;
  _QWORD v10[5];
  id v11;

  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x3032000000;
  v10[3] = sub_10006252C;
  v10[4] = sub_100062350;
  v11 = 0;
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2020000000;
  v9 = 0;
  v2 = dispatch_semaphore_create(0);
  v3 = qword_1009999D8;
  if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Set LPM flags for White Glove Tests", buf, 2u);
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NFHardwareManager sharedHardwareManager](NFHardwareManager, "sharedHardwareManager"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10025B08C;
  v6[3] = &unk_10091FC60;
  v6[6] = a1;
  v6[7] = v2;
  v6[4] = v10;
  v6[5] = v8;
  v5 = objc_msgSend(v4, "startLPEMConfigSession:", v6);

  dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v10, 8);

}

void sub_10025B054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  uint64_t v12;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v12 - 80), 8);

  _Unwind_Resume(a1);
}

void sub_10025B08C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  const std::string *v8;
  NSObject *v9;
  uint64_t v10;
  unsigned __int8 v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  unsigned __int8 v22;
  NSObject *v23;
  uint64_t v24;
  unsigned __int8 v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  unsigned __int8 v36;
  NSObject *v37;
  uint64_t v38;
  unsigned __int8 v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id obj;
  id v49;
  id v50;
  id v51;
  id v52;
  uint8_t buf[4];
  id v54;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a3);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
    v7 = qword_1009999D8;
    if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v54 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Start session error (error=%@)", buf, 0xCu);
    }
  }
  else
  {
    v8 = (const std::string *)(*(_QWORD *)(a1 + 48) + 72);
    if (!std::string::compare(v8, "Alisha"))
    {
      v20 = qword_1009999D8;
      if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Set lpm1 flag", buf, 2u);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v52 = *(id *)(v21 + 40);
      v22 = objc_msgSend(v5, "enableLPEMFeature:error:", 2, &v52);
      objc_storeStrong((id *)(v21 + 40), v52);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v22;
      v23 = qword_1009999D8;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)
        && os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v54 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Failed to set lpm1 flag with error %@", buf, 0xCu);
        v23 = qword_1009999D8;
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Clear lpm2 flag", buf, 2u);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v51 = *(id *)(v24 + 40);
      v25 = objc_msgSend(v5, "disableLPEMFeature:error:", 4, &v51);
      objc_storeStrong((id *)(v24 + 40), v51);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v25;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      {
        v26 = qword_1009999D8;
        if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
          sub_1006D3D60(v26, v27, v28, v29, v30, v31, v32, v33);
      }
    }
    else if (!std::string::compare(v8, "FindMy"))
    {
      v34 = qword_1009999D8;
      if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Set lpm2 flags", buf, 2u);
      }
      v35 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v50 = *(id *)(v35 + 40);
      v36 = objc_msgSend(v5, "enableLPEMFeature:error:", 4, &v50);
      objc_storeStrong((id *)(v35 + 40), v50);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v36;
      v37 = qword_1009999D8;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)
        && os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        v54 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Failed to set lpm2 flag with error %@", buf, 0xCu);
        v37 = qword_1009999D8;
      }
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Clear lpm1 flag", buf, 2u);
      }
      v38 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v49 = *(id *)(v38 + 40);
      v39 = objc_msgSend(v5, "disableLPEMFeature:error:", 2, &v49);
      objc_storeStrong((id *)(v38 + 40), v49);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v39;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      {
        v40 = qword_1009999D8;
        if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
          sub_1006D3DC8(v40, v41, v42, v43, v44, v45, v46, v47);
      }
    }
    else if (!std::string::compare(v8, "All"))
    {
      v9 = qword_1009999D8;
      if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Set All flags", buf, 2u);
      }
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      obj = *(id *)(v10 + 40);
      v11 = objc_msgSend(v5, "enableLPEMFeature:error:", 31, &obj);
      objc_storeStrong((id *)(v10 + 40), obj);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v11;
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      {
        v12 = qword_1009999D8;
        if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
          sub_1006D3E30(v12, v13, v14, v15, v16, v17, v18, v19);
      }
    }
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
    objc_msgSend(v5, "endSessionWithCompletion:", 0);
  }

}

void sub_10025B588(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10025B5A0(const std::string *a1)
{
  void *v1;
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  if (!std::string::compare(a1 + 4, "All"))
  {
    v2 = qword_1009999D8;
    if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Set All flags", v4, 2u);
    }
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NFHardwareManager sharedHardwareManager](NFHardwareManager, "sharedHardwareManager"));
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "enableLPEMFeature:", 31));

    if (v1 && os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
      sub_1006D3E98();
  }
  else
  {
    v1 = 0;
  }

}

void sub_10025B67C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10025B68C(uint64_t result)
{
  if (!*(_QWORD *)(result + 224))
    sub_10034FFF8();
  return result;
}

void sub_10025B764(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 224);
  if (v1)
  {
    v3 = qword_1009998D8;
    if (!os_log_type_enabled((os_log_t)qword_1009998D8, OS_LOG_TYPE_DEFAULT)
      || (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1),
          v5 = 136446210,
          v6 = v4,
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Destroying %{public}s", (uint8_t *)&v5, 0xCu), (v1 = *(_QWORD *)(a1 + 224)) != 0))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    }
    *(_QWORD *)(a1 + 224) = 0;
  }
}

double sub_10025B840(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10091FC90;
  *(_QWORD *)(a1 + 8) = off_10091FCF8;
  *(_QWORD *)(a1 + 16) = &off_10091FD28;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 25) = 0;
  *(_WORD *)(a1 + 33) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)&result = 33;
  *(_OWORD *)(a1 + 144) = xmmword_10073CB80;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 216) = -1;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 96;
  return result;
}

void sub_10025B8C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  void *__p[2];
  char v26;
  _BYTE buf[14];
  __int16 v28;
  int v29;
  char v30;

  v2 = sub_100027F68();
  sub_100091AE8(buf, "LPM");
  sub_100091AE8(__p, "Enable");
  (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v2 + 72))(v2, buf, __p, a1 + 24);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v30 < 0)
    operator delete(*(void **)buf);
  v3 = sub_100027F68();
  sub_100091AE8(buf, "LPM");
  sub_100091AE8(__p, "EnableHCI");
  (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v3 + 72))(v3, buf, __p, a1 + 26);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v30 < 0)
    operator delete(*(void **)buf);
  sub_1000438A4();
  *(_BYTE *)(a1 + 25) = sub_100331F8C();
  v4 = sub_100027F68();
  sub_100091AE8(buf, "LPM");
  sub_100091AE8(__p, "ConfigFlag");
  (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v4 + 128))(v4, buf, __p, a1 + 144);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v30 < 0)
    operator delete(*(void **)buf);
  v5 = sub_100027F68();
  sub_100091AE8(buf, "LPM");
  sub_100091AE8(__p, "ScanWindow");
  (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v5 + 128))(v5, buf, __p, a1 + 152);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v30 < 0)
    operator delete(*(void **)buf);
  v6 = sub_100027F68();
  sub_100091AE8(buf, "LPM");
  sub_100091AE8(__p, "ScanInterval");
  (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v6 + 128))(v6, buf, __p, a1 + 156);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v30 < 0)
    operator delete(*(void **)buf);
  v7 = sub_100027F68();
  sub_100091AE8(buf, "LPM");
  sub_100091AE8(__p, "LoggingMode");
  (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v7 + 128))(v7, buf, __p, a1 + 148);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v30 < 0)
    operator delete(*(void **)buf);
  v8 = sub_100027F68();
  sub_100091AE8(buf, "LPM");
  sub_100091AE8(__p, "ConfigFlagAdv");
  (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v8 + 128))(v8, buf, __p, a1 + 184);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v30 < 0)
    operator delete(*(void **)buf);
  v9 = sub_100027F68();
  sub_100091AE8(buf, "LPM");
  sub_100091AE8(__p, "WhiteGloveMode");
  v10 = (_QWORD *)(a1 + 72);
  (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v9 + 56))(v9, buf, __p, a1 + 72);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v30 < 0)
    operator delete(*(void **)buf);
  v11 = sub_100027F68();
  sub_100091AE8(buf, "LPM");
  sub_100091AE8(__p, "FactoryMode");
  v12 = (_QWORD *)(a1 + 96);
  (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v11 + 56))(v11, buf, __p, a1 + 96);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v30 < 0)
    operator delete(*(void **)buf);
  v13 = sub_100027F68();
  sub_100091AE8(buf, "LPM");
  sub_100091AE8(__p, "LocalBDAddr");
  (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v13 + 56))(v13, buf, __p, a1 + 120);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v30 < 0)
    operator delete(*(void **)buf);
  v14 = sub_100027F68();
  sub_100091AE8(buf, "LPM");
  sub_100091AE8(__p, "HowManyKeys");
  (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v14 + 128))(v14, buf, __p, a1 + 232);
  if (v26 < 0)
    operator delete(__p[0]);
  if (v30 < 0)
    operator delete(*(void **)buf);
  *(_QWORD *)(a1 + 208) = 0;
  if (!*(_BYTE *)(a1 + 24) || !*(_BYTE *)(a1 + 25))
    goto LABEL_71;
  v15 = qword_1009999D8;
  if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "LPM mode is supported and enabled.", buf, 2u);
    v15 = qword_1009999D8;
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    v16 = *(_DWORD *)(a1 + 144);
    v17 = *(_DWORD *)(a1 + 152);
    v18 = *(_DWORD *)(a1 + 156);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v16;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v17;
    v28 = 1024;
    v29 = v18;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "LPM ConfigFlag: %d ScanWindow: %d ScanInterval:%d", buf, 0x14u);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_10091FD78);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1);
  v19 = sub_100038E50();
  sub_100260C8C(v19 + 368, a1 + 8);
  v20 = sub_10034D3CC();
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 32))(v20, a1 + 29);
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 95))
      goto LABEL_62;
LABEL_57:
    v21 = IsAppleInternalBuild(v21);
    if ((_DWORD)v21)
    {
      *(_DWORD *)(a1 + 144) |= 0x10u;
      *(_BYTE *)(a1 + 27) = 1;
      v22 = qword_1009999D8;
      v21 = os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v21)
      {
        if (*(char *)(a1 + 95) < 0)
          v10 = (_QWORD *)*v10;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v10;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "LPM White Glove mode: %s is enabled.", buf, 0xCu);
      }
    }
    goto LABEL_62;
  }
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_57;
LABEL_62:
  if (*(char *)(a1 + 119) < 0)
  {
    if (!*(_QWORD *)(a1 + 104))
      goto LABEL_71;
  }
  else if (!*(_BYTE *)(a1 + 119))
  {
    goto LABEL_71;
  }
  if (IsAppleInternalBuild(v21))
  {
    *(_BYTE *)(a1 + 28) = 1;
    v23 = qword_1009999D8;
    if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 119) < 0)
        v12 = (_QWORD *)*v12;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "LPM Factory Test mode: %s is enabled.", buf, 0xCu);
    }
  }
LABEL_71:
  if (notify_register_check("com.apple.bluetooth.low-power-mode", (int *)(a1 + 216))
    && os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
  {
    sub_1006D3EF8();
  }
  v24 = sub_100038E50();
  sub_100260F7C(v24 + 288, a1 + 16);
}

void sub_10025C008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10025C094(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  io_registry_entry_t v5;
  io_object_t v6;
  CFTypeRef v7;
  const void *v8;
  CFTypeID v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v18;
  NSObject *v19;
  id v20;
  unsigned __int8 *v21;
  NSObject *v22;
  void *v23;
  unsigned int v24;
  void *v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  dispatch_time_t v29;
  NSObject *v30;
  int v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double Current;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  unsigned __int16 v44;
  unsigned __int16 v45;
  double v46;
  uint64_t v47;
  double v48;
  unint64_t v49;
  NSObject *v50;
  NSObject *v51;
  NSObject *v52;
  unsigned int v53;
  NSObject *v54;
  NSObject *v55;
  int v56;
  NSObject *v57;
  char v58;
  __int16 v59;
  __int16 v60;
  BOOL v61;
  BOOL v62;
  const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) p_valuePtr;
  int valuePtr;
  unsigned int v65;
  __int16 v66;
  int v67;
  _BYTE buf[40];
  uint64_t v69;

  if (!*(_BYTE *)(a1 + 24) || !*(_BYTE *)(a1 + 25))
  {
    if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
      sub_1006D3F24();
    return 11;
  }
  v4 = qword_1009999D8;
  if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Triggering LPM", buf, 2u);
  }
  v5 = sub_10026126C();
  v6 = v5;
  if (!v5)
    goto LABEL_21;
  v7 = IORegistryEntrySearchCFProperty(v5, "IOService", CFSTR("IOPMUBootLPMFWOK"), kCFAllocatorDefault, 1u);
  v8 = v7;
  if (!v7)
  {
LABEL_20:
    IOObjectRelease(v6);
LABEL_21:
    v18 = qword_1009999D8;
    if (!os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_INFO))
      goto LABEL_24;
    *(_WORD *)buf = 0;
    v13 = "Failed to get IOPMUBootLPMFWOK flag";
    v14 = v18;
    v15 = OS_LOG_TYPE_INFO;
    goto LABEL_23;
  }
  valuePtr = 0;
  v9 = CFGetTypeID(v7);
  if (v9 != CFNumberGetTypeID() || !CFNumberGetValue((CFNumberRef)v8, kCFNumberSInt32Type, &valuePtr))
  {
    CFRelease(v8);
    goto LABEL_20;
  }
  v10 = valuePtr;
  v11 = qword_1009999D8;
  if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v10 != 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Get IOPMUBootLPMFWOK: %d", buf, 8u);
  }
  CFRelease(v8);
  IOObjectRelease(v6);
  if (v10)
  {
    if (!sub_10025CF94(0))
    {
      v12 = qword_1009999D8;
      if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v13 = "BT_FW_OK flag is cleared.";
        v14 = v12;
        v15 = OS_LOG_TYPE_DEFAULT;
LABEL_23:
        _os_log_impl((void *)&_mh_execute_header, v14, v15, v13, buf, 2u);
      }
    }
  }
LABEL_24:
  if (*(_BYTE *)(a1 + 27))
  {
    sub_10025AF04(a1);
    if (!std::string::compare((const std::string *)(a1 + 72), "Alisha")
      || !std::string::compare((const std::string *)(a1 + 72), "All"))
    {
      v19 = qword_1009999D8;
      if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Fake alisha device", buf, 2u);
      }
      v20 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", CFSTR("4DA4C51F-95BF-4550-82B7-F1CC159E0DB7"));
      v69 = 0;
      memset(&buf[8], 0, 32);
      *(_QWORD *)buf = (((unint64_t)*(unsigned __int8 *)(a1 + 29) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 30) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 31) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 32) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 33) << 8) | *(unsigned __int8 *)(a1 + 34))
                     + 1;
      if (qword_1009778B8 != -1)
        dispatch_once(&qword_1009778B8, &stru_10091FD98);
      sub_10003994C(&buf[8], (const void *)(qword_1009778B0 + 184), 0x10uLL);
      if (qword_1009778B8 != -1)
        dispatch_once(&qword_1009778B8, &stru_10091FD98);
      sub_10003994C(&buf[24], (const void *)(qword_1009778B0 + 184), 0x10uLL);
      LODWORD(v69) = 0;
      BYTE4(v69) = 1;
      sub_100030BCC(&valuePtr, v20);
      p_valuePtr = (const unsigned __int8 *)&valuePtr;
      v21 = sub_100261B0C((uint64_t **)(a1 + 160), (unsigned __int8 *)&valuePtr, (uint64_t)&unk_100740F58, &p_valuePtr);
      *((_QWORD *)v21 + 6) = *(_QWORD *)buf;
      sub_100041698((uint64_t)(v21 + 56), (uint64_t)&buf[8]);
      sub_100041698((uint64_t)(v21 + 72), (uint64_t)&buf[24]);
      *((_DWORD *)v21 + 22) = v69;
      v21[92] = BYTE4(v69);
      *(_QWORD *)&buf[24] = &off_100918258;
      if (*(_QWORD *)&buf[32])
        sub_100056AAC(*(unsigned int **)&buf[32]);
      *(_QWORD *)&buf[8] = &off_100918258;
      if (*(_QWORD *)&buf[16])
        sub_100056AAC(*(unsigned int **)&buf[16]);

    }
    if (!std::string::compare((const std::string *)(a1 + 72), "FindMy")
      || !std::string::compare((const std::string *)(a1 + 72), "All"))
    {
      v22 = qword_1009999D8;
      if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Fake FindMy keys", buf, 2u);
      }
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      if (*(_DWORD *)(a1 + 232))
      {
        v24 = 0;
        do
        {
          memset(buf, 0, 37);
          arc4random_buf(buf, 0x25uLL);
          v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", buf, 36));
          objc_msgSend(v23, "addObject:", v25);

          ++v24;
        }
        while (v24 < *(_DWORD *)(a1 + 232));
      }
      objc_storeStrong((id *)(a1 + 192), v23);
      *(_DWORD *)(a1 + 208) = 15;

    }
  }
  if (*(_BYTE *)(a1 + 28))
  {
    v26 = qword_1009999D8;
    if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "LPM Factory Test mode: set flags.", buf, 2u);
    }
    sub_10025B5A0((const std::string *)a1);
  }
  v27 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v27 + 2912))(v27, 20, 0, 1);
  v62 = 0;
  sub_10025D168(1, &v62);
  v61 = 0;
  sub_10025D168(0, &v61);
  if (a2 != 1 || !v62)
  {
    if (!v61)
    {
      if (!v62)
      {
        if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
          sub_1006D42E4();
        return 1400;
      }
      goto LABEL_62;
    }
    goto LABEL_55;
  }
  *(_BYTE *)(a1 + 64) |= 1u;
  if (v61)
  {
LABEL_55:
    if (_os_feature_enabled_impl("FindMy", "BA_LPEM"))
      *(_BYTE *)(a1 + 64) |= 2u;
    if ((_os_feature_enabled_impl("FindMy", "BA_LPEM") & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
        sub_1006D42B8();
      return 1405;
    }
  }
LABEL_62:
  if (*(_BYTE *)(a1 + 64))
  {
    if ((*(_BYTE *)(a1 + 64) & 1) != 0 && !*(_QWORD *)(a1 + 176) && (*(_BYTE *)(a1 + 144) & 0x10) != 0)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
        sub_1006D428C();
      return 1401;
    }
    else
    {
      v28 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, 0);
      v29 = dispatch_time(0, 4000000000);
      dispatch_source_set_timer(v28, v29, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
      dispatch_source_set_event_handler(v28, &stru_10091FD30);
      dispatch_resume(v28);
      if (qword_100978130 != -1)
        dispatch_once(&qword_100978130, &stru_10091FDB8);
      v16 = sub_10047E460((uint64_t)off_100978128);
      dispatch_source_cancel(v28);
      dispatch_release(v28);
      if ((_DWORD)v16)
      {
        v30 = qword_1009999D8;
        if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v16;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "PowerManager::getInstance()->powerHostlessMode failed with error %d", buf, 8u);
        }
        byte_1009992D8 = 0;
        return v16;
      }
      v31 = *(_DWORD *)(a1 + 216);
      v32 = qword_1009999D8;
      if (v31 == -1)
      {
        if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
          sub_1006D4144(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = "com.apple.bluetooth.low-power-mode";
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Notifying %s", buf, 0xCu);
          v31 = *(_DWORD *)(a1 + 216);
        }
        if (notify_set_state(v31, a2))
        {
          if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
            sub_1006D4220();
        }
        else if (notify_post("com.apple.bluetooth.low-power-mode")
               && os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
        {
          sub_1006D41B4();
        }
      }
      Current = CFAbsoluteTimeGetCurrent();
      if ((*(_BYTE *)(a1 + 64) & 2) != 0)
      {
        v41 = qword_1009999D8;
        if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Waiting for offline ADV data", buf, 2u);
        }
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        sub_10003415C((uint64_t)buf, (uint64_t)&unk_100999298);
        if (byte_1009992D8 && !*(_BYTE *)(a1 + 27) && !*(_BYTE *)(a1 + 28))
        {
          v42 = qword_1009999D8;
          if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(valuePtr) = 0;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "fOfflineADVDataPending = true", (uint8_t *)&valuePtr, 2u);
          }
          if (!sub_100043714(&stru_100999268, (pthread_mutex_t **)buf, 0x1F40uLL))
          {
            if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
              sub_1006D4118();
            sub_100034234((uint64_t)buf);
            return 1403;
          }
        }
        sub_100034264((uint64_t)buf);
        v43 = qword_1009999D8;
        if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
        {
          v44 = (unsigned __int16)objc_msgSend(*(id *)(a1 + 192), "count");
          v45 = (unsigned __int16)objc_msgSend(*(id *)(a1 + 200), "count");
          valuePtr = 67109376;
          v65 = v44;
          v66 = 1024;
          v67 = v45;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Done waiting, count set1Data:%d, count set2Data:%d", (uint8_t *)&valuePtr, 0xEu);
        }
        sub_100034234((uint64_t)buf);
      }
      v46 = CFAbsoluteTimeGetCurrent();
      v60 = 0;
      v59 = 0;
      v58 = 0;
      LODWORD(p_valuePtr) = 0;
      v47 = sub_100038E50();
      (*(void (**)(uint64_t, char *, __int16 *, char *, __int16 *, char *, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *))(*(_QWORD *)v47 + 48))(v47, (char *)&v60 + 1, &v60, (char *)&v59 + 1, &v59, &v58, &p_valuePtr);
      v48 = (v46 - Current) * 1000.0;
      if (v48 < 8000.0)
      {
        v49 = 8000 - v48;
        v50 = qword_1009999D8;
        if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v59;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v49;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "wifiIsOn:%d duration:%u", buf, 0xEu);
        }
        if ((_BYTE)v59)
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = 0;
          sub_10003415C((uint64_t)buf, (uint64_t)&unk_100999310);
          byte_100999350 = 1;
          v51 = qword_1009999D8;
          if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(valuePtr) = 0;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "fWaitForWifiOffPending = true", (uint8_t *)&valuePtr, 2u);
          }
          if (!sub_100043714(&stru_1009992E0, (pthread_mutex_t **)buf, v49)
            && os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
          {
            sub_1006D40EC();
          }
          sub_100034234((uint64_t)buf);
        }
      }
      if (*(_BYTE *)(a1 + 28))
      {
        sub_10025D320((_BYTE *)a1);
LABEL_116:
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        sub_10003415C((uint64_t)buf, (uint64_t)&unk_100999358);
        v52 = qword_1009999D8;
        if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
        {
          valuePtr = 67109120;
          v65 = byte_100999351;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "fIsSystemSleep = %d", (uint8_t *)&valuePtr, 8u);
        }
        if (byte_100999351)
        {
          v53 = 1000 * (CFAbsoluteTimeGetCurrent() - Current);
          v54 = qword_1009999D8;
          if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
          {
            valuePtr = 67109120;
            v65 = v53;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "fIsSystemSleep = true, lpmEntryTimeUsedMs=%u", (uint8_t *)&valuePtr, 8u);
          }
          if (v53 >> 6 <= 0x7C
            && !sub_100043714(&stru_100999398, (pthread_mutex_t **)buf, 8000 - v53)
            && os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
          {
            sub_1006D4060();
          }
        }
        sub_100034264((uint64_t)buf);
        v16 = sub_10025D6E0(a1);
        if ((_DWORD)v16)
        {
          if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
            sub_1006D4000();
        }
        else
        {
          if (*(_BYTE *)(a1 + 26) && ((*(_BYTE *)(a1 + 144) & 1) == 0 || (*(_BYTE *)(a1 + 184) & 8) != 0))
          {
            v55 = qword_1009999D8;
            if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_INFO))
            {
              LOWORD(valuePtr) = 0;
              _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "Enable sniff mode only", (uint8_t *)&valuePtr, 2u);
            }
            if (!sub_10016F834() && os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
              sub_1006D3FD4();
            if ((sub_10011CBB8() & 1) == 0 && os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
              sub_1006D3FA8();
          }
          v56 = sub_10025CF94(1);
          v57 = qword_1009999D8;
          if (v56)
          {
            if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
              sub_1006D3F7C();
            v16 = 1;
          }
          else
          {
            if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(valuePtr) = 0;
              _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "BT_FW_OK flag is set. Entering LPM...", (uint8_t *)&valuePtr, 2u);
            }
            if (*(_BYTE *)(a1 + 27))
              sub_10025AF04(a1);
            if (*(_BYTE *)(a1 + 28))
              sub_10025B5A0((const std::string *)a1);
            v16 = 0;
          }
        }
        sub_100034234((uint64_t)buf);
        return v16;
      }
      v16 = sub_10025D468(a1);
      if (!(_DWORD)v16)
        goto LABEL_116;
      if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
        sub_1006D408C();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
      sub_1006D3F50();
    return 1402;
  }
  return v16;
}

void sub_10025CF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10025CF94(int a1)
{
  io_object_t v2;
  io_object_t v3;
  CFNumberRef v4;
  CFNumberRef v5;
  kern_return_t v6;
  NSObject *v8;
  int valuePtr;
  uint8_t buf[4];
  int v11;

  v2 = sub_10026126C();
  if (!v2)
  {
LABEL_5:
    if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
      sub_1006D4310();
    return 1;
  }
  v3 = v2;
  valuePtr = a1;
  v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  if (!v4 || (v5 = v4, v6 = IORegistryEntrySetCFProperty(v3, CFSTR("IOPMUBootLPMFWOK"), v4), CFRelease(v5), v6))
  {
    IOObjectRelease(v3);
    goto LABEL_5;
  }
  v8 = qword_1009999D8;
  if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    v11 = a1;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Set IOPMUBootLPMFWOK to %d", buf, 8u);
  }
  IOObjectRelease(v3);
  return 0;
}

uint64_t sub_10025D0D4(uint64_t a1, uint64_t a2)
{
  char v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_100041698(a1 + 8, a2 + 8);
  sub_100041698(a1 + 24, a2 + 24);
  v4 = *(_BYTE *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 44) = v4;
  return a1;
}

_QWORD *sub_10025D120(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;

  a1[3] = &off_100918258;
  v2 = (unsigned int *)a1[4];
  if (v2)
    sub_100056AAC(v2);
  a1[1] = &off_100918258;
  v3 = (unsigned int *)a1[2];
  if (v3)
    sub_100056AAC(v3);
  return a1;
}

void sub_10025D168(uint64_t a1, BOOL *a2)
{
  io_registry_entry_t v4;
  io_object_t v5;
  const __CFDictionary *v6;
  const __CFDictionary *v7;
  CFTypeID v8;
  __CFString *v9;
  const __CFNumber *Value;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int valuePtr;

  valuePtr = 0;
  v4 = sub_10026126C();
  if (v4)
  {
    v5 = v4;
    v6 = (const __CFDictionary *)IORegistryEntrySearchCFProperty(v4, "IOService", CFSTR("IOPMUBootLPMCtrl"), kCFAllocatorDefault, 1u);
    if (v6)
    {
      v7 = v6;
      v8 = CFGetTypeID(v6);
      if (v8 == CFDictionaryGetTypeID())
      {
        v9 = (_DWORD)a1 ? CFSTR("lpm1") : CFSTR("lpm2");
        Value = (const __CFNumber *)CFDictionaryGetValue(v7, v9);
        if (Value)
        {
          CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
          *a2 = valuePtr != 0;
          CFRelease(v7);
          IOObjectRelease(v5);
          return;
        }
      }
      CFRelease(v7);
    }
    IOObjectRelease(v5);
  }
  v11 = qword_1009999D8;
  if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
    sub_1006D433C(a1, v11, v12, v13, v14, v15, v16, v17);
}

void sub_10025D280(id a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v11;

  v1 = qword_1009999D8;
  if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
    sub_1006D43B8(v1, v2, v3, v4, v5, v6, v7, v8);
  v9 = sub_100027F68();
  sub_100091AE8(__p, "LPM stack shutdown stuck");
  sub_100576534(v9, (uint64_t *)__p, 3172327085);
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_10025D304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10025D320(_BYTE *a1)
{
  int v2;
  int v3;

  sub_10025E5DC((uint64_t)a1, 1);
  sub_10025E5DC((uint64_t)a1, 0);
  v2 = *(_DWORD *)(sub_1000438A4() + 712) - 20;
  if (v2 > 4)
    v3 = 2;
  else
    v3 = dword_10073CBE0[v2];
  sub_10025E5DC((uint64_t)a1, v3);
  sub_10025E5DC((uint64_t)a1, 4);
  sub_10025E5DC((uint64_t)a1, 5);
  sub_10025E5DC((uint64_t)a1, 6);
  sub_10025E5DC((uint64_t)a1, 7);
  sub_10025E5DC((uint64_t)a1, 16);
  sub_10025E5DC((uint64_t)a1, 18);
  sub_10025E5DC((uint64_t)a1, 19);
  sub_10025E5DC((uint64_t)a1, 20);
  sub_10025E5DC((uint64_t)a1, 21);
  sub_10025E5DC((uint64_t)a1, 14);
  sub_10025E5DC((uint64_t)a1, 22);
  if (a1[26] && ((a1[144] & 1) == 0 || (a1[184] & 8) != 0))
    sub_10025E5DC((uint64_t)a1, 15);
  return 0;
}

uint64_t sub_10025D468(uint64_t a1)
{
  unsigned int v2;
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  unint64_t v8;
  char *v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  sub_10025E5DC(a1, 1);
  sub_10025E5DC(a1, 0);
  v2 = *(_DWORD *)(sub_1000438A4() + 712) - 20;
  if (v2 > 4)
    v3 = 2;
  else
    v3 = dword_10073CBE0[v2];
  sub_10025E5DC(a1, v3);
  sub_10025E5DC(a1, 4);
  sub_10025E5DC(a1, 5);
  sub_10025E5DC(a1, 6);
  sub_10025E5DC(a1, 7);
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    sub_10025E5DC(a1, 8);
    v4 = *(_QWORD **)(a1 + 160);
    if (v4 != (_QWORD *)(a1 + 168))
    {
      do
      {
        v13 = 0u;
        v14 = 0u;
        v11 = 0u;
        v12 = 0u;
        sub_1002617F4((uint64_t)&v11, (uint64_t)(v4 + 4));
        sub_10025E5DC(a1, 9);
        *((_QWORD *)&v13 + 1) = &off_100918258;
        if ((_QWORD)v14)
          sub_100056AAC((unsigned int *)v14);
        *((_QWORD *)&v12 + 1) = &off_100918258;
        if ((_QWORD)v13)
          sub_100056AAC((unsigned int *)v13);
        v5 = (_QWORD *)v4[1];
        if (v5)
        {
          do
          {
            v6 = v5;
            v5 = (_QWORD *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v6 = (_QWORD *)v4[2];
            v7 = *v6 == (_QWORD)v4;
            v4 = v6;
          }
          while (!v7);
        }
        v4 = v6;
      }
      while (v6 != (_QWORD *)(a1 + 168));
    }
  }
  if ((*(_BYTE *)(a1 + 64) & 2) != 0)
  {
    sub_10025E5DC(a1, 11);
    while (1)
    {
      v8 = (unsigned __int16)word_1009992DA;
      v9 = (char *)objc_msgSend(*(id *)(a1 + 192), "count");
      if (&v9[(_QWORD)objc_msgSend(*(id *)(a1 + 200), "count")] <= (char *)v8)
        break;
      result = sub_10025E5DC(a1, 12);
      if ((_DWORD)result)
        return result;
    }
    sub_10025E5DC(a1, 13);
  }
  sub_10025E5DC(a1, 14);
  sub_10025E5DC(a1, 10);
  if (*(_BYTE *)(a1 + 26) && ((*(_BYTE *)(a1 + 144) & 1) == 0 || (*(_BYTE *)(a1 + 184) & 8) != 0))
    sub_10025E5DC(a1, 15);
  return 0;
}

void sub_10025D6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10025EFB8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10025D6E0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  void *v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  char v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char v26;
  BOOL v27;
  char *v28;
  uint64_t v29;
  char v30;
  char v32;
  char v33[7];
  void *__p;
  char *v35;
  char *v36;
  void *v37[4];
  uint64_t (*v38)(void **);
  char v39;
  char v40[14];
  char v41;
  char v42;
  char v43[15];
  uint8_t buf[2048];

  v3 = qword_1009999D8;
  if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Initialization for hostless mode", buf, 2u);
  }
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  if (v4 != v5)
  {
    while (1)
    {
      v38 = 0;
      memset(v37, 0, sizeof(v37));
      LODWORD(v37[0]) = *(_DWORD *)v4;
      if (*(char *)(v4 + 31) < 0)
      {
        sub_10003430C(&v37[1], *(void **)(v4 + 8), *(_QWORD *)(v4 + 16));
      }
      else
      {
        v6 = *(_OWORD *)(v4 + 8);
        v37[3] = *(void **)(v4 + 24);
        *(_OWORD *)&v37[1] = v6;
      }
      v38 = *(uint64_t (**)(void **))(v4 + 32);
      v7 = (void *)HIBYTE(v37[3]);
      if (SHIBYTE(v37[3]) < 0)
        v7 = v37[2];
      if (!v7)
      {
LABEL_52:
        v11 = 1;
        goto LABEL_53;
      }
      bzero(buf, 0x800uLL);
      v8 = sub_10034D3CC();
      if (SHIBYTE(v37[3]) >= 0)
        v9 = &v37[1];
      else
        v9 = (void **)v37[1];
      v10 = (*(uint64_t (**)(uint64_t, void **, uint8_t *, uint64_t))(*(_QWORD *)v8 + 128))(v8, v9, buf, 2048);
      if ((_DWORD)v10)
      {
        v11 = 0;
        v1 = v10;
        goto LABEL_53;
      }
      __p = 0;
      v35 = 0;
      v36 = 0;
      v12 = strlen((const char *)buf);
      v13 = v12;
      if (v12)
      {
        if (v12 <= 2048)
        {
          if (v12 >= 4)
          {
            v14 = 0;
            while (1)
            {
              v41 = 0;
              if (!sscanf((const char *)&buf[v14], "0x%hhx", &v41))
                break;
              v15 = v35;
              if (v35 >= v36)
              {
                v17 = (unint64_t)__p;
                v18 = v35 - (_BYTE *)__p;
                v19 = v35 - (_BYTE *)__p + 1;
                if (v19 < 0)
                  abort();
                v20 = v36 - (_BYTE *)__p;
                if (2 * (v36 - (_BYTE *)__p) > (unint64_t)v19)
                  v19 = 2 * v20;
                if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
                  v21 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v21 = v19;
                if (v21)
                  v22 = (char *)operator new(v21);
                else
                  v22 = 0;
                v23 = &v22[v18];
                v24 = &v22[v18];
                *v24 = v41;
                v16 = v24 + 1;
                if (v15 != (char *)v17)
                {
                  v25 = &v15[~v17];
                  do
                  {
                    v26 = *--v15;
                    (v25--)[(_QWORD)v22] = v26;
                  }
                  while (v15 != (char *)v17);
                  v15 = (char *)__p;
                  v23 = v22;
                }
                __p = v23;
                v35 = v16;
                v36 = &v22[v21];
                if (v15)
                  operator delete(v15);
              }
              else
              {
                *v35 = v41;
                v16 = v15 + 1;
              }
              v35 = v16;
              v14 += 5;
              v27 = v13 <= 8;
              v13 -= 5;
              if (v27)
                goto LABEL_44;
            }
            if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
              sub_1006D447C(&v39, v40);
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
        {
          sub_1006D4450(&v42, v43);
        }
      }
LABEL_44:
      if (!v38)
        goto LABEL_48;
      v28 = (char *)__p;
      if (v35 != __p)
        break;
      if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
      {
        sub_1006D4424(&v32, v33);
        v30 = 0;
        v1 = 112;
        goto LABEL_49;
      }
      v30 = 0;
      v1 = 112;
      if (v28)
        goto LABEL_50;
LABEL_51:
      if ((v30 & 1) != 0)
        goto LABEL_52;
      v11 = 0;
LABEL_53:
      if (SHIBYTE(v37[3]) < 0)
        operator delete(v37[1]);
      if ((v11 & 1) == 0)
        return v1;
      v4 += 40;
      if (v4 == v5)
        return 0;
    }
    v29 = v38(&__p);
    if ((_DWORD)v29)
    {
      v30 = 0;
      v1 = v29;
    }
    else
    {
LABEL_48:
      v30 = 1;
    }
LABEL_49:
    v28 = (char *)__p;
    if (!__p)
      goto LABEL_51;
LABEL_50:
    v35 = v28;
    operator delete(v28);
    goto LABEL_51;
  }
  return 0;
}

void sub_10025DAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (__p)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10025DB04()
{
  NSObject *v0;
  _QWORD v2[2];

  v0 = qword_1009999D8;
  if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v2[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "LPMManager::powerManagementEventSystemWillSleep", (uint8_t *)v2, 2u);
  }
  v2[0] = 0;
  v2[1] = 0;
  sub_10003415C((uint64_t)v2, (uint64_t)&unk_100999358);
  byte_100999351 = 1;
  return sub_100034234((uint64_t)v2);
}

uint64_t sub_10025DB94()
{
  NSObject *v0;
  _QWORD v2[2];

  v0 = qword_1009999D8;
  if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v2[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "LPMManager::powerManagementEventSystemWokeUp", (uint8_t *)v2, 2u);
  }
  v2[0] = 0;
  v2[1] = 0;
  sub_10003415C((uint64_t)v2, (uint64_t)&unk_100999358);
  byte_100999351 = 0;
  sub_1000445E0(&stru_100999398);
  return sub_100034234((uint64_t)v2);
}

void sub_10025DC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10025DC40(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t v5[16];
  uint8_t buf[16];

  v2 = qword_1009999D8;
  if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LPMManager::powerManagementEventSystemWillShutDown", buf, 2u);
  }
  if (*(_BYTE *)(a1 + 24) && *(_BYTE *)(a1 + 25))
  {
    v3 = qword_1009999D8;
    if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "LPMManager::powerManagementEventSystemWillShutDown fOfflineADVDataPending = true", v5, 2u);
    }
    byte_1009992D8 = 1;
  }
  return 1;
}

uint64_t sub_10025DD0C(uint64_t a1)
{
  sub_10025DC40(a1 - 8);
  return 1;
}

uint64_t sub_10025DD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  void **v4;
  BOOL v5;
  NSObject *v6;
  void *__p[2];
  char v9;
  _QWORD v10[2];
  uint8_t buf[4];
  void **v12;

  v10[0] = a2;
  v10[1] = a3;
  v3 = qword_1009999D8;
  if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100021AE4((uint64_t)v10);
    v4 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "wifiStateChanged:%s", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  __p[0] = 0;
  __p[1] = 0;
  sub_10003415C((uint64_t)__p, (uint64_t)&unk_100999310);
  if (byte_100999350)
    v5 = LOBYTE(v10[0]) == 0;
  else
    v5 = 0;
  if (v5)
  {
    v6 = qword_1009999D8;
    if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "wifiStateChanged and wifi power is off", buf, 2u);
    }
    byte_100999350 = 0;
    sub_1000445E0(&stru_1009992E0);
  }
  return sub_100034234((uint64_t)__p);
}

void sub_10025DE80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10025DEA0()
{
  NSObject *v0;
  void *v1;
  id v2;
  _QWORD v3[6];
  uint8_t buf[8];
  uint8_t *v5;
  uint64_t v6;
  __n128 (*v7)(__n128 *, __n128 *);
  uint64_t (*v8)();
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD v13[5];
  id v14;

  v0 = qword_1009999D8;
  if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "LPMManager::getLPEMBluetoothLog", buf, 2u);
  }
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x3032000000;
  v13[3] = sub_10006252C;
  v13[4] = sub_100062350;
  v14 = 0;
  *(_QWORD *)buf = 0;
  v5 = buf;
  v6 = 0x4812000000;
  v7 = sub_10025E024;
  v8 = nullsub_107;
  v10 = 0;
  v11 = 0;
  v9 = &unk_10083E079;
  v12 = 0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NFHardwareManager sharedHardwareManager](NFHardwareManager, "sharedHardwareManager"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10025E03C;
  v3[3] = &unk_10091FD58;
  v3[4] = v13;
  v3[5] = buf;
  v2 = objc_msgSend(v1, "startLPEMConfigSession:", v3);

  _Block_object_dispose(buf, 8);
  _Block_object_dispose(v13, 8);

}

void sub_10025DFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  uint64_t v8;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v8 - 80), 8);

  _Unwind_Resume(a1);
}

__n128 sub_10025E024(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u32[0] = a2[4].n128_u32[0];
  a1[3] = result;
  return result;
}

void sub_10025E03C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  CFTypeID TypeID;
  uint64_t TypedValue;
  void *v14;
  CFTypeID v15;
  uint64_t v16;
  void *v17;
  int v18;
  NSObject *v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  void *v23;
  NSObject *v24;
  id obj;
  uint8_t buf[4];
  id v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  _OWORD __dst[2];

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = (id *)(v7 + 40);
  if (v6)
  {
    objc_storeStrong((id *)(v7 + 40), a3);
    v9 = qword_1009999D8;
    if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v27 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Start session error (error=%@)", buf, 0xCu);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)+ 40), "code");
    v10 = sub_100065478();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 664))(v10, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48);
  }
  else
  {
    obj = *v8;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "getAndClearLPEMBluetoothLogWithError:", &obj));
    objc_storeStrong(v8, obj);
    if (v11)
    {
      TypeID = CFDictionaryGetTypeID();
      TypedValue = CFDictionaryGetTypedValue(v11, CFSTR("A000000704E000010002"), TypeID, 0);
      v14 = (void *)objc_claimAutoreleasedReturnValue(TypedValue);
      if (v14)
      {
        v15 = CFDataGetTypeID();
        v16 = CFDictionaryGetTypedValue(v14, CFSTR("FixedBuffer"), v15, 0);
        v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        v18 = objc_msgSend(v17, "length");
        if (v17 && v18 >= 1 && v18 <= 32)
        {
          memset(__dst, 0, sizeof(__dst));
          memcpy(__dst, objc_msgSend(objc_retainAutorelease(v17), "bytes"), v18);
          v19 = qword_1009999D8;
          if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
          {
            v20 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
            *(_DWORD *)buf = 138416386;
            v27 = v20;
            v28 = 1024;
            v29 = LOBYTE(__dst[0]);
            v30 = 1024;
            v31 = BYTE1(__dst[0]);
            v32 = 1024;
            v33 = BYTE2(__dst[0]);
            v34 = 1024;
            v35 = BYTE3(__dst[0]);
            v36 = 1024;
            v37 = BYTE4(__dst[0]);
            v38 = 1024;
            v39 = BYTE5(__dst[0]);
            v40 = 1024;
            v41 = BYTE6(__dst[0]);
            v42 = 1024;
            v43 = BYTE7(__dst[0]);
            v44 = 1024;
            v45 = BYTE8(__dst[0]);
            v46 = 1024;
            v47 = BYTE9(__dst[0]);
            v48 = 1024;
            v49 = BYTE10(__dst[0]);
            v50 = 1024;
            v51 = BYTE11(__dst[0]);
            v52 = 1024;
            v53 = BYTE12(__dst[0]);
            v54 = 1024;
            v55 = BYTE13(__dst[0]);
            v56 = 1024;
            v57 = BYTE14(__dst[0]);
            v58 = 1024;
            v59 = HIBYTE(__dst[0]);
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Get LPM Bluetooth log succeed (error=%@)\nlog: BT connection counter = 0x%02x, BT connection time = 0x%02x%02x%02x%02x, \nSEP2 Ranging setup counter = 0x%02x, SEP2 Clock info = 0x%02x%02x%02x%02x, \nSEP2 based unlock counter = 0x%02x, SEP2 based lock counter = 0x%02x, \nBT SE reset counter = 0x%02x,RPA rollover counter = 0x%02x, \nBT entry counter = 0x%02x, BT Exit counter = 0x%02x\n", buf, 0x6Cu);
          }
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = 0;
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 52) = LOBYTE(__dst[0]);
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 56) = bswap32(*(unsigned int *)((char *)__dst + 1));
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 60) = BYTE14(__dst[0]);
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 64) = HIBYTE(__dst[0]);
          v21 = sub_100065478();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 664))(v21, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48);
        }

      }
      else
      {
        v24 = qword_1009999D8;
        if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Get LPM Bluetooth log no FixBuf", buf, 2u);
        }
      }

    }
    else
    {
      v22 = qword_1009999D8;
      if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
      {
        v23 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        v27 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Get LPM Bluetooth log failed (error=%@)", buf, 0xCu);
      }
    }
    objc_msgSend(v5, "endSessionWithCompletion:", 0);

  }
}

void sub_10025E46C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_10025E4B8(uint64_t a1)
{
  NSObject *v2;
  _QWORD block[5];
  uint8_t buf[16];

  v2 = qword_1009999D8;
  if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LPMManager::stackDidStart", buf, 2u);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10025E574;
  block[3] = &unk_100917378;
  block[4] = a1;
  if (qword_100991A20 != -1)
    dispatch_once(&qword_100991A20, block);
}

void sub_10025E578()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_1009999D8;
  if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "LPMManager::stackWillStop", v1, 2u);
  }
}

uint64_t sub_10025E5DC(uint64_t a1, int a2)
{
  const char *v4;
  const char *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  std::string::value_type *v8;
  std::string::value_type v9;
  const char *v10;
  NSObject *v11;
  std::string v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[24];
  char v18;
  uint64_t (*v19)(uint64_t);
  char __str[2048];

  bzero(__str, 0x800uLL);
  v13.__r_.__value_.__r.__words[2] = 0;
  v14 = 0;
  v15 = 0;
  sub_100091AE8(&v13.__r_.__value_.__r.__words[2], "");
  switch(a2)
  {
    case 0:
      *(_DWORD *)buf = 0;
      sub_100091AE8(&v17[4], "device -D");
      v19 = 0;
      sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
      goto LABEL_46;
    case 1:
      *(_DWORD *)buf = 1;
      sub_100091AE8(&v17[4], "power off");
      v19 = 0;
      sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
      goto LABEL_46;
    case 2:
      *(_DWORD *)buf = 2;
      sub_100091AE8(&v17[4], "bcm -W");
      v19 = 0;
      sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
      goto LABEL_46;
    case 3:
      *(_DWORD *)buf = 3;
      sub_100091AE8(&v17[4], "bcm -L");
      v19 = 0;
      sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
      goto LABEL_46;
    case 4:
      *(_DWORD *)buf = 4;
      sub_100091AE8(&v17[4], "bcm -A");
      v19 = 0;
      sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
      goto LABEL_46;
    case 5:
      *(_DWORD *)buf = 5;
      sub_100091AE8(&v17[4], "bcm -Q");
      v19 = 0;
      sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
      goto LABEL_46;
    case 6:
      *(_DWORD *)buf = 6;
      sub_100091AE8(&v17[4], "bcm -x");
      v19 = 0;
      sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
      goto LABEL_46;
    case 7:
      *(_DWORD *)buf = 7;
      sub_100091AE8(&v17[4], "hci reset");
      v19 = sub_10025F148;
      sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
      goto LABEL_46;
    case 8:
      sub_10025F1D0();
    case 9:
      sub_10025F580();
    case 10:
      v13.__r_.__value_.__s.__data_[8] = 4;
      sub_10025F44C((std::string *)&v13.__r_.__value_.__r.__words[1], 1, (std::string *)&v13.__r_.__value_.__r.__words[2]);
      if (v15 >= 0)
        v4 = &v13.__r_.__value_.__s.__data_[16];
      else
        v4 = (const char *)v13.__r_.__value_.__r.__words[2];
      snprintf(__str, 0x800uLL, "hci cmd 0x%04X %s", 65122, v4);
      *(_DWORD *)buf = 10;
      sub_100091AE8(&v17[4], __str);
      v19 = sub_10025F4F8;
      sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
      goto LABEL_46;
    case 11:
      sub_10025F744();
    case 12:
      LODWORD(v13.__r_.__value_.__r.__words[1]) = 0;
      sub_10025F874();
    case 13:
      v13.__r_.__value_.__s.__data_[10] = 1;
      LOWORD(v13.__r_.__value_.__r.__words[1]) = 7;
      sub_10025F44C((std::string *)&v13.__r_.__value_.__r.__words[1], 3, (std::string *)&v13.__r_.__value_.__r.__words[2]);
      if (v15 >= 0)
        v5 = &v13.__r_.__value_.__s.__data_[16];
      else
        v5 = (const char *)v13.__r_.__value_.__r.__words[2];
      snprintf(__str, 0x800uLL, "hci cmd 0x%04X %s", 65122, v5);
      *(_DWORD *)buf = 13;
      sub_100091AE8(&v17[4], __str);
      v19 = sub_10025F4F8;
      sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
      goto LABEL_46;
    case 14:
      *(_DWORD *)buf = 14;
      sub_100091AE8(&v17[4], "bcm -s 0x0f,0x00,0x02,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00");
      v19 = 0;
      sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
      goto LABEL_46;
    case 15:
      *(_DWORD *)buf = 15;
      sub_100091AE8(&v17[4], "quit");
      v19 = 0;
      sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
      goto LABEL_46;
    case 16:
      v6 = (unsigned __int8 *)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
      {
        if (*(_QWORD *)(a1 + 128))
        {
          WORD2(v13.__r_.__value_.__r.__words[1]) = 0;
          LODWORD(v13.__r_.__value_.__r.__words[1]) = 0;
          WORD2(v13.__r_.__value_.__r.__words[0]) = 0;
          LODWORD(v13.__r_.__value_.__l.__data_) = 0;
          v6 = *(unsigned __int8 **)v6;
LABEL_35:
          if (!sub_10007464C(v6, (uint64_t)&v13.__r_.__value_.__l.__size_))
          {
            v7 = 0;
            v8 = &v13.__r_.__value_.__s.__data_[13];
            do
            {
              v9 = *v8--;
              v13.__r_.__value_.__s.__data_[v7++] = v9;
            }
            while (v7 != 6);
            sub_10025F44C(&v13, 6, (std::string *)&v13.__r_.__value_.__r.__words[2]);
            if (v15 >= 0)
              v10 = &v13.__r_.__value_.__s.__data_[16];
            else
              v10 = (const char *)v13.__r_.__value_.__r.__words[2];
            snprintf(__str, 0x800uLL, "hci cmd 0xfc01 %s", v10);
            *(_DWORD *)buf = 16;
            sub_100091AE8(&v17[4], __str);
            v19 = 0;
            sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
            if (v18 < 0)
              operator delete(*(void **)&v17[4]);
            v11 = qword_1009999D8;
            if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)v17 = __str;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "BCM_WRITE_BDADDR:%s", buf, 0xCu);
            }
          }
          goto LABEL_48;
        }
      }
      else if (*(_BYTE *)(a1 + 143))
      {
        WORD2(v13.__r_.__value_.__r.__words[1]) = 0;
        LODWORD(v13.__r_.__value_.__r.__words[1]) = 0;
        WORD2(v13.__r_.__value_.__r.__words[0]) = 0;
        LODWORD(v13.__r_.__value_.__l.__data_) = 0;
        goto LABEL_35;
      }
      *(_DWORD *)buf = 16;
      sub_100091AE8(&v17[4], "hci cmd 0xfc01 0x98 0x98 0x98 0xC2 0x87 0x43");
      v19 = 0;
      sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
LABEL_46:
      if (v18 < 0)
        operator delete(*(void **)&v17[4]);
LABEL_48:
      if (SHIBYTE(v15) < 0)
        operator delete((void *)v13.__r_.__value_.__r.__words[2]);
      return 0;
    case 17:
      *(_DWORD *)buf = 17;
      sub_100091AE8(&v17[4], "hci cmd 0x2011 0x00 0x12 0x12 0x12 0xB0 0x68 0x43");
      v19 = 0;
      sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
      goto LABEL_46;
    case 18:
      *(_DWORD *)buf = 18;
      sub_100091AE8(&v17[4], "hci cmd 0x2006 0x20 0x03 0x20 0x03 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x07 0x00");
      v19 = 0;
      sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
      goto LABEL_46;
    case 19:
      *(_DWORD *)buf = 19;
      sub_100091AE8(&v17[4], "hci cmd 0x2008 0x03 0x31 0x32 0x33");
      v19 = 0;
      sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
      goto LABEL_46;
    case 20:
      *(_DWORD *)buf = 20;
      sub_100091AE8(&v17[4], "hci cmd 0x2024 0xFB 0x00 0x48 0x08");
      v19 = 0;
      sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
      goto LABEL_46;
    case 21:
      *(_DWORD *)buf = 21;
      sub_100091AE8(&v17[4], "hci cmd 0x200A 0x01");
      v19 = 0;
      sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
      goto LABEL_46;
    case 22:
      *(_DWORD *)buf = 22;
      sub_100091AE8(&v17[4], "hci cmd 0xFE45 0x01 0x01");
      v19 = 0;
      sub_10025F000((uint64_t *)(a1 + 40), (uint64_t)buf);
      goto LABEL_46;
    default:
      goto LABEL_48;
  }
}

void sub_10025EEA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10025EFB8(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;

  a1[5] = &off_100918258;
  v2 = (unsigned int *)a1[6];
  if (v2)
    sub_100056AAC(v2);
  a1[3] = &off_100918258;
  v3 = (unsigned int *)a1[4];
  if (v3)
    sub_100056AAC(v3);
  return a1;
}

uint64_t sub_10025F000(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0x666666666666666)
      abort();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    v18[4] = result;
    v14 = (char *)sub_100261D70(result, v13);
    v15 = &v14[40 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[40 * v16];
    *(_DWORD *)v15 = *(_DWORD *)a2;
    v17 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v15 + 3) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v15 + 8) = v17;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *((_QWORD *)v15 + 4) = *(_QWORD *)(a2 + 32);
    v18[2] = v15 + 40;
    sub_100261CF8(a1, v18);
    v9 = a1[1];
    result = sub_100261DB4((uint64_t)v18);
  }
  else
  {
    *(_DWORD *)v7 = *(_DWORD *)a2;
    v8 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v7 + 8) = v8;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(a2 + 32);
    v9 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v9;
  return result;
}

void sub_10025F134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261DB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10025F148(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_BYTE **)a1;
  v1 = *(_QWORD *)(a1 + 8);
  if (v1 - *(_QWORD *)a1 != 6 || *v2 != 14 || v2[1] != 4)
    return 3;
  v3 = *(unsigned __int8 *)(v1 - 1);
  if (!*(_BYTE *)(v1 - 1))
    return 0;
  v4 = qword_1009999D8;
  if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
    sub_1006D44A8(v3, v4, v5, v6, v7, v8, v9, v10);
  return 112;
}

void sub_10025F1D0()
{
  operator new();
}

std::string *sub_10025F44C(std::string *result, int a2, std::string *a3)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char __str[4];
  __int16 v9;

  if (result)
  {
    if (a2 >= 1)
    {
      v4 = result;
      v5 = a2;
      do
      {
        v9 = 0;
        *(_DWORD *)__str = 0;
        v6 = v4->__r_.__value_.__s.__data_[0];
        v4 = (std::string *)((char *)v4 + 1);
        snprintf(__str, 6uLL, "0x%02x ", v6);
        result = std::string::append(a3, __str);
        --v5;
      }
      while (v5);
    }
    if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
    {
      v7 = a3->__r_.__value_.__l.__size_ - 1;
      a3->__r_.__value_.__l.__size_ = v7;
      a3 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    else
    {
      v7 = HIBYTE(a3->__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&a3->__r_.__value_.__s + 23) = v7 & 0x7F;
    }
    a3->__r_.__value_.__s.__data_[v7] = 0;
  }
  return result;
}

uint64_t sub_10025F4F8(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_BYTE **)a1;
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 != 7 || *v1 != 14 || v1[1] != 5)
    return 3;
  v2 = v1[5];
  if (!v1[5])
    return 0;
  v3 = qword_1009999D8;
  if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
    sub_1006D47B0(v2, v3, v4, v5, v6, v7, v8, v9);
  return 112;
}

void sub_10025F580()
{
  operator new();
}

void sub_10025F744()
{
  operator new();
}

void sub_10025F874()
{
  operator new();
}

void sub_10025FA78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10025FA8C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  unsigned __int8 *v8;
  NSObject *v9;
  unsigned __int8 *v10;
  id v11;
  id v12;
  unsigned __int8 *v13;
  void **v14;
  unsigned __int8 *v15;
  void **v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned __int8 *v24;
  unsigned __int8 v25[16];
  unsigned __int8 v26[16];
  unsigned __int8 uu1[16];
  uint8_t buf[4];
  id v29;
  __int16 v30;
  id v31;
  __int16 v32;
  void **v33;
  __int16 v34;
  void **v35;
  unsigned __int8 uu2[16];
  _OWORD v37[4];
  int v38;

  v3 = a2;
  if (*(_BYTE *)(a1 + 24) && *(_BYTE *)(a1 + 25))
  {
    if (*(_QWORD *)(a1 + 176) >= 8uLL)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
        sub_1006D4AE4();
LABEL_26:
      v4 = 1;
      goto LABEL_27;
    }
    sub_100030BCC(uu2, v3);
    v5 = (uint64_t **)(a1 + 160);
    if (a1 + 168 != sub_10000C5B8(a1 + 160, uu2))
    {
      if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
        sub_1006D4C30();
      goto LABEL_26;
    }
    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_10091FD98);
    if (!sub_100030864(qword_1009778B0, v3))
    {
      if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
        sub_1006D4BD0();
      goto LABEL_26;
    }
    v38 = 0;
    memset(v37, 0, sizeof(v37));
    *(_OWORD *)uu2 = 0u;
    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_10091FD98);
    sub_10069CDD4(qword_1009778B0, v3, (uint64_t)uu2);
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_10091FDD8);
    *(_QWORD *)&v21 = sub_1000589DC((uint64_t)off_1009778C0, v3, 0);
    sub_10003994C((_QWORD *)&v21 + 1, (char *)&v37[2] + 8, 0x10uLL);
    sub_10003994C((_QWORD *)&v22 + 1, (char *)v37 + 12, 0x10uLL);
    v6 = *(_QWORD *)(a1 + 176);
    DWORD2(v23) = v6;
    BYTE12(v23) = v6 == 0;
    if ((_QWORD)v21)
    {
      if (!sub_1000452EC((uint64_t)&v21 + 8) && !sub_1000452EC((uint64_t)&v22 + 8))
      {
        sub_100030BCC(buf, v3);
        v19[0] = buf;
        v8 = sub_100261B0C(v5, buf, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)v19);
        sub_10025D0D4((uint64_t)(v8 + 48), (uint64_t)&v21);
        v9 = qword_1009999D8;
        if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEBUG))
        {
          sub_100030BCC(uu1, v3);
          v19[0] = uu1;
          v10 = sub_100261B0C(v5, uu1, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)v19);
          v11 = sub_100021770(*((_QWORD *)v10 + 6));
          v12 = (id)objc_claimAutoreleasedReturnValue(v11);
          sub_100030BCC(v26, v3);
          __p[0] = v26;
          v13 = sub_100261B0C(v5, v26, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)__p);
          v14 = v19;
          sub_1000453F0((uint64_t)(v13 + 56), v19);
          if (v20 < 0)
            v14 = (void **)v19[0];
          sub_100030BCC(v25, v3);
          v24 = v25;
          v15 = sub_100261B0C(v5, v25, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v24);
          sub_1000453F0((uint64_t)(v15 + 72), __p);
          if (v18 >= 0)
            v16 = __p;
          else
            v16 = (void **)__p[0];
          *(_DWORD *)buf = 138413058;
          v29 = v3;
          v30 = 2112;
          v31 = v12;
          v32 = 2080;
          v33 = v14;
          v34 = 2080;
          v35 = v16;
          _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Device %@ is added to the list with address: %@, irk: %s, ltk: %s", buf, 0x2Au);
          if (v18 < 0)
            operator delete(__p[0]);
          if (v20 < 0)
            operator delete(v19[0]);

        }
        v4 = 0;
        goto LABEL_31;
      }
      if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
        sub_1006D4B70();
    }
    else if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
    {
      sub_1006D4B10();
    }
    v4 = 1;
LABEL_31:
    *((_QWORD *)&v22 + 1) = &off_100918258;
    if ((_QWORD)v23)
      sub_100056AAC((unsigned int *)v23);
    *((_QWORD *)&v21 + 1) = &off_100918258;
    if ((_QWORD)v22)
      sub_100056AAC((unsigned int *)v22);
    goto LABEL_27;
  }
  if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
    sub_1006D3F24();
  v4 = 11;
LABEL_27:

  return v4;
}

void sub_10025FF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  void *v21;

  if (a17 < 0)
    operator delete(__p);

  sub_10025D120(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_10025FFF8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned __int8 uu2[16];

  v3 = a2;
  if (*(_BYTE *)(a1 + 24) && *(_BYTE *)(a1 + 25))
  {
    sub_100030BCC(uu2, v3);
    v4 = (uint64_t *)sub_10000C5B8(a1 + 160, uu2);
    if ((uint64_t *)(a1 + 168) == v4)
    {
      if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
        sub_1006D4C90();
      v5 = 1;
    }
    else
    {
      sub_1000040CC((uint64_t **)(a1 + 160), v4);
      sub_10026196C(v4 + 4);
      operator delete(v4);
      v5 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
      sub_1006D3F24();
    v5 = 11;
  }

  return v5;
}

void sub_100260118(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100260130(uint64_t a1, uint64_t **a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  if (*(_BYTE *)(a1 + 24) && *(_BYTE *)(a1 + 25))
  {
    v2 = *(_QWORD **)(a1 + 160);
    v3 = (_QWORD *)(a1 + 168);
    if (v2 != (_QWORD *)(a1 + 168))
    {
      v5 = (uint64_t)(a2 + 2);
      do
      {
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        sub_1002617F4((uint64_t)&v32, (uint64_t)(v2 + 4));
        v6 = sub_100030DF4((const unsigned __int8 *)&v32);
        v7 = objc_claimAutoreleasedReturnValue(v6);
        v8 = v7;
        v10 = a2[1];
        v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          v12 = v10 - *a2;
          if ((unint64_t)(v12 + 1) >> 61)
            abort();
          v13 = v9 - (_QWORD)*a2;
          v14 = v13 >> 2;
          if (v13 >> 2 <= (unint64_t)(v12 + 1))
            v14 = v12 + 1;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          v31 = v5;
          if (v15)
            v16 = (char *)sub_10007ABA0(v5, v15);
          else
            v16 = 0;
          v17 = (uint64_t *)&v16[8 * v12];
          v18 = &v16[8 * v15];
          v30 = v18;
          *v17 = v8;
          v11 = v17 + 1;
          v29.i64[1] = (uint64_t)(v17 + 1);
          v20 = *a2;
          v19 = a2[1];
          if (v19 == *a2)
          {
            v22 = vdupq_n_s64((unint64_t)v19);
          }
          else
          {
            do
            {
              v21 = *--v19;
              *v19 = 0;
              *--v17 = v21;
            }
            while (v19 != v20);
            v22 = *(int64x2_t *)a2;
            v11 = (uint64_t *)v29.i64[1];
            v18 = v30;
          }
          *a2 = v17;
          a2[1] = v11;
          v29 = v22;
          v23 = (char *)a2[2];
          a2[2] = (uint64_t *)v18;
          v30 = v23;
          v28 = v22.i64[0];
          sub_100262224((uint64_t)&v28);
        }
        else
        {
          *v10 = v7;
          v11 = v10 + 1;
        }
        a2[1] = v11;
        *((_QWORD *)&v34 + 1) = &off_100918258;
        if ((_QWORD)v35)
          sub_100056AAC((unsigned int *)v35);
        *((_QWORD *)&v33 + 1) = &off_100918258;
        if ((_QWORD)v34)
          sub_100056AAC((unsigned int *)v34);
        v24 = (_QWORD *)v2[1];
        if (v24)
        {
          do
          {
            v25 = v24;
            v24 = (_QWORD *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v25 = (_QWORD *)v2[2];
            v26 = *v25 == (_QWORD)v2;
            v2 = v25;
          }
          while (!v26);
        }
        v2 = v25;
      }
      while (v25 != v3);
    }
    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
      sub_1006D3F24();
    return 11;
  }
}

void sub_100260354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  sub_10025EFB8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100260380(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  if (*(_BYTE *)(a1 + 24) && *(_BYTE *)(a1 + 25))
  {
    v1 = (_QWORD *)(a1 + 168);
    sub_100261924(a1 + 160, *(_QWORD **)(a1 + 168));
    result = 0;
    *(v1 - 1) = v1;
    *v1 = 0;
    v1[1] = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
      sub_1006D3F24();
    return 11;
  }
  return result;
}

uint64_t sub_1002603F4(uint64_t a1, unsigned int a2, void *a3, int a4)
{
  id v8;
  uint64_t v9;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v8 = a3;
  if (*(_BYTE *)(a1 + 27))
  {
LABEL_2:
    v9 = 0;
    goto LABEL_3;
  }
  if (a2 == 255)
  {
    v12 = qword_1009999D8;
    if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "setOfflineAdvertisingDataAndPayload Done!", (uint8_t *)&v13, 2u);
    }
    v13 = 0;
    v14 = 0;
    sub_10003415C((uint64_t)&v13, (uint64_t)&unk_100999298);
    byte_1009992D8 = 0;
    sub_1000445E0(&stru_100999268);
    sub_100034234((uint64_t)&v13);
    goto LABEL_2;
  }
  v11 = qword_1009999D8;
  if (a2 < 2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v13) = 67109634;
      HIDWORD(v13) = a2;
      LOWORD(v14) = 1024;
      *(_DWORD *)((char *)&v14 + 2) = a4;
      HIWORD(v14) = 2112;
      v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "setOfflineAdvertisingDataAndPayload set:%d interval:%d data:%@", (uint8_t *)&v13, 0x18u);
    }
    objc_storeStrong((id *)(a1 + 8 * a2 + 192), a3);
    v9 = 0;
    *(_DWORD *)(a1 + 4 * a2 + 208) = a4;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
      sub_1006D4CF0();
    v9 = 3;
  }
LABEL_3:

  return v9;
}

void sub_1002605A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1002605D0(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  BOOL v4;
  int v5;
  id v6;
  id v7;
  uint64_t v8;
  void *j;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  id obj;
  int v16;
  uint64_t v17;
  id v18;
  int v19;
  id v20;
  void *v21;
  void *i;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[3];
  _BYTE v33[128];
  _BYTE v34[128];

  v14 = a1;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = a2;
  v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
  if (v18)
  {
    v16 = 0;
    v17 = *(_QWORD *)v29;
    while (2)
    {
      for (i = 0; i != v18; i = (char *)i + 1)
      {
        if (*(_QWORD *)v29 != v17)
          objc_enumerationMutation(obj);
        v20 = *(id *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i);
        v2 = objc_alloc_init((Class)NSMutableArray);
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKey:", CFSTR("kCBMsgArgOfflineAdvertisingData")));
        v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKey:", CFSTR("kCBMsgArgOfflineAdvertisingRotationInterval")));
        v21 = (void *)v3;
        if (v23)
          v4 = v3 == 0;
        else
          v4 = 1;
        v5 = !v4;
        v19 = v5;
        if (!v4)
        {
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v6 = v23;
          v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v33, 16);
          if (v7)
          {
            v8 = *(_QWORD *)v25;
            do
            {
              for (j = 0; j != v7; j = (char *)j + 1)
              {
                if (*(_QWORD *)v25 != v8)
                  objc_enumerationMutation(v6);
                v10 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)j);
                memset(v32, 0, 37);
                objc_msgSend(v10, "getBytes:range:", v32, 0, 6, v14);
                objc_msgSend(v10, "getBytes:range:", (char *)v32 + 13, 6, 22);
                *(_DWORD *)((char *)v32 + 9) = 1643008;
                *(_DWORD *)((char *)v32 + 6) = 5046046;
                BYTE3(v32[2]) = BYTE3(v32[2]) & 0xFC | (LOBYTE(v32[0]) >> 6);
                LOBYTE(v32[0]) |= 0xC0u;
                v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v32, 37));
                objc_msgSend(v2, "addObject:", v11);

              }
              v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v24, v33, 16);
            }
            while (v7);
          }

          sub_1002603F4(v14, v16++, v2, (int)objc_msgSend(v21, "intValue"));
        }

        if (!v19)
        {

          v12 = 3;
          goto LABEL_26;
        }
      }
      v18 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
      if (v18)
        continue;
      break;
    }
  }

  sub_1002603F4(v14, 0xFFu, 0, -1);
  v12 = 0;
LABEL_26:

  return v12;
}

void sub_1002608F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_100260994(uint64_t a1)
{
  sub_100261880(a1);
  operator delete();
}

uint64_t sub_1002609B8()
{
  return 1;
}

uint64_t sub_1002609C0()
{
  return 1;
}

void sub_1002609C8(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_100260A50(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100260A50(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_100260C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100260C8C(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_100260D40(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100260D40(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_100260F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100260F7C(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_100261030(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100261030(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_100261234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10026126C()
{
  const __CFDictionary *v0;
  uint64_t v1;
  io_iterator_t v2;
  uint64_t v3;
  CFTypeRef CFProperty;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  io_iterator_t existing;

  existing = 0;
  v0 = IOServiceNameMatching("AppleDialogSPMIPMU");
  if (IOServiceGetMatchingServices(kIOMainPortDefault, v0, &existing))
  {
    if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
      sub_1006D4E08();
    return 0;
  }
  v2 = existing;
  if (!existing)
  {
    v5 = qword_1009999D8;
    if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
      sub_1006D4D6C(v5, v6, v7, v8, v9, v10, v11, v12);
    return 0;
  }
  do
  {
    if (!IOIteratorIsValid(v2))
      break;
    v3 = IOIteratorNext(existing);
    v1 = v3;
    if (!(_DWORD)v3)
      goto LABEL_16;
    CFProperty = IORegistryEntryCreateCFProperty(v3, CFSTR("IOPMUPrimary"), 0, 0);
    if (CFProperty)
    {
      CFRelease(CFProperty);
      goto LABEL_16;
    }
    IOObjectRelease(v1);
    v2 = existing;
  }
  while (existing);
  if (os_log_type_enabled((os_log_t)qword_1009999D8, OS_LOG_TYPE_ERROR))
    sub_1006D4DDC();
  v1 = 0;
LABEL_16:
  IOObjectRelease(existing);
  return v1;
}

uint64_t sub_1002613AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1 + 16;
  v3 = a1 + 24;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 24));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(v2 + *(_QWORD *)(v7 - 24)) = v8;
  *(_QWORD *)a1 = v9;
  std::streambuf::basic_streambuf(v3);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1002614B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::iostream::~basic_iostream(v2, v3 + 8);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002614D8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _QWORD v13[2];
  std::locale v14;

  v13[0] = 0;
  v13[1] = 0;
  std::ostream::sentry::sentry(v13, a1);
  if (LOBYTE(v13[0]))
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, &std::ctype<char>::id);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_10026160C(v7, a2, v11, a2 + a3, v6, v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  std::ostream::sentry::~sentry(v13);
  return a1;
}

void sub_1002615E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  std::ostream::sentry::~sentry(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_10026160C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      __p[0] = 0;
      __p[1] = 0;
      v18 = 0;
      sub_100261750(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (SHIBYTE(v18) < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_100261734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100261750(_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t sub_1002617F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  uuid_copy((unsigned __int8 *)a1, (const unsigned __int8 *)a2);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = &off_100918258;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    sub_10003C37C(v4);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = &off_100918258;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    sub_10003C37C(v5);
  v6 = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v6;
  return a1;
}

void sub_100261864(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v4;

  *(_QWORD *)(v1 + 24) = v2;
  v4 = *(unsigned int **)(v1 + 32);
  if (v4)
    sub_100056AAC(v4);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100261880(uint64_t a1)
{
  uint64_t i;
  void **v4;

  *(_QWORD *)a1 = off_10091FC90;
  *(_QWORD *)(a1 + 8) = off_10091FCF8;
  *(_QWORD *)(a1 + 16) = &off_10091FD28;
  for (i = 200; i != 184; i -= 8)

  sub_100261924(a1 + 160, *(_QWORD **)(a1 + 168));
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v4 = (void **)(a1 + 40);
  sub_1002619B8(&v4);
  return a1;
}

void sub_100261924(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100261924(a1, *a2);
    sub_100261924(a1, a2[1]);
    sub_10026196C(a2 + 4);
    operator delete(a2);
  }
}

void sub_10026196C(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;

  a1[5] = &off_100918258;
  v2 = (unsigned int *)a1[6];
  if (v2)
    sub_100056AAC(v2);
  a1[3] = &off_100918258;
  v3 = (unsigned int *)a1[4];
  if (v3)
    sub_100056AAC(v3);
}

void sub_1002619B8(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1002619F8((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1002619F8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

void sub_100261A44(id a1)
{
  operator new();
}

void sub_100261A84()
{
  operator delete();
}

void sub_100261AA8(id a1)
{
  operator new();
}

void sub_100261AE8()
{
  operator delete();
}

unsigned __int8 *sub_100261B0C(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  unsigned __int8 **v6;
  unsigned __int8 *v7;
  uint64_t **v8;
  unsigned __int8 *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (unsigned __int8 **)sub_10000DC28((uint64_t)a1, &v11, uu1);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_100261BC0((uint64_t)a1, a4, v10);
    sub_100004078(a1, v11, v8, (uint64_t *)v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100261C50((uint64_t)v10, 0);
  }
  return v7;
}

double sub_100261BC0@<D0>(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  double result;

  v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (unsigned __int8 *)operator new(0x60uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  result = 0.0;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_QWORD *)v6 + 7) = &off_100918258;
  *((_QWORD *)v6 + 9) = &off_100918258;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_100261C38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261C50(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100261C50(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_10026196C(v2 + 4);
    operator delete(v2);
  }
}

void sub_100261C94(id a1)
{
  operator new();
}

void sub_100261CD4()
{
  operator delete();
}

uint64_t *sub_100261CF8(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_DWORD *)(v2 - 40);
    v2 -= 40;
    *(_DWORD *)(v4 - 40) = v5;
    v4 -= 40;
    v6 = *(_OWORD *)(v2 + 8);
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(v2 + 24);
    *(_OWORD *)(v4 + 8) = v6;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(v2 + 32);
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *sub_100261D70(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    sub_10007ABD4();
  return operator new(40 * a2);
}

uint64_t sub_100261DB4(uint64_t a1)
{
  sub_100261DE8(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100261DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 40;
      *(_QWORD *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_100261E3C(id a1)
{
  operator new();
}

void sub_100261E7C()
{
  operator delete();
}

uint64_t *sub_100261EA0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t sub_100262224(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_BYTE *sub_100262274(_BYTE *result, _BYTE *a2)
{
  *result = 0;
  *a2 = 0;
  return result;
}

void sub_100262298()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  sub_1002A90C4(&stru_100999268);
  __cxa_atexit((void (*)(void *))sub_1002A912C, &stru_100999268, (void *)&_mh_execute_header);
  sub_1000160D0(&unk_100999298);
  __cxa_atexit((void (*)(void *))sub_100069BDC, &unk_100999298, (void *)&_mh_execute_header);
  sub_1002A90C4(&stru_1009992E0);
  __cxa_atexit((void (*)(void *))sub_1002A912C, &stru_1009992E0, (void *)&_mh_execute_header);
  sub_1000160D0(&unk_100999310);
  __cxa_atexit((void (*)(void *))sub_100069BDC, &unk_100999310, (void *)&_mh_execute_header);
  sub_1000160D0(&unk_100999358);
  __cxa_atexit((void (*)(void *))sub_100069BDC, &unk_100999358, (void *)&_mh_execute_header);
  sub_1002A90C4(&stru_100999398);
  __cxa_atexit((void (*)(void *))sub_1002A912C, &stru_100999398, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

_QWORD *sub_1002623B0(uint64_t a1, uint64_t a2, __int16 a3)
{
  _QWORD *result;

  result = (_QWORD *)sub_1004AC92C(a1, a2, a3);
  *result = &off_10091FE28;
  return result;
}

void sub_1002623D0(uint64_t a1, const uint8_t *a2, CFIndex a3)
{
  uint64_t v5;
  _QWORD *v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __IOHIDUserDevice *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t v36;
  uint8_t buf[8];
  __int16 v38;
  int v39;

  if (a3)
  {
    v5 = *a2;
    if (*(_QWORD *)(a1 + 216))
    {
      v7 = (_QWORD *)(a1 + 192);
      if (*a2 <= 0x8Fu)
      {
        if (*a2 > 0x13u)
        {
          if ((v5 - 32) >= 3)
          {
            if ((_DWORD)v5 == 20)
            {
              v8 = qword_1009999B0;
              if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
              {
                v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), *(unsigned __int16 *)(a1 + 40));
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&buf[4] = 20;
                v38 = 1024;
                v39 = v9;
                _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received exit suspend input report (ID %u), should undim %d", buf, 0xEu);
              }
LABEL_31:
              v29 = qword_1009999B0;
              if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
                sub_1006D4F60(v5, v29, v30, v31, v32, v33, v34, v35);
              return;
            }
            goto LABEL_25;
          }
LABEL_21:
          v18 = -12;
          goto LABEL_28;
        }
        switch((_DWORD)v5)
        {
          case 1:
            v18 = -15;
            goto LABEL_28;
          case 0x11:
            goto LABEL_21;
          case 0x13:
            v19 = qword_1009999B0;
            if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = 19;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Received power-off notice input report (ID %u)", buf, 8u);
            }
            return;
        }
LABEL_25:
        v20 = qword_1009999B0;
        if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
          sub_1006D4EFC(v5, v20, v21, v22, v23, v24, v25, v26);
        return;
      }
      v17 = (v5 - 144);
      if (v17 <= 0x36)
      {
        if (((1 << (v5 + 112)) & 0x40000000000C01) != 0)
          goto LABEL_15;
        if (v17 == 48)
        {
          v18 = -14;
          goto LABEL_28;
        }
      }
      if ((_DWORD)v5 != 224)
        goto LABEL_25;
LABEL_15:
      v18 = -16;
LABEL_28:
      buf[0] = v18;
      if (sub_100262E78(v7, buf))
      {
        v36 = v18;
        *(_QWORD *)buf = &v36;
        v27 = (__IOHIDUserDevice *)sub_100262F2C((uint64_t)v7, &v36, (uint64_t)&unk_100740F58, (_BYTE **)buf)[3];
        if (v27)
        {
          v28 = mach_absolute_time();
          IOHIDUserDeviceHandleReportWithTimeStamp(v27, v28, a2, a3);
          return;
        }
      }
      goto LABEL_31;
    }
    v10 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006D4E94(v5, v10, v11, v12, v13, v14, v15, v16);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D4E68();
  }
}

uint64_t sub_1002626B4(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  unsigned int v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  int v12;
  int v13;

  sub_1004ACDF8(a1, a2);
  sub_10026287C(a1, a2);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "valueForKey:", CFSTR("ProductID")));
  v6 = objc_msgSend(v5, "intValue");
  v13 = 14;
  if (v6 == *(unsigned __int16 *)sub_1002629E0((uint64_t)&unk_1009995A8, &v13)
    || (v12 = 16, v6 == *(unsigned __int16 *)sub_1002629E0((uint64_t)&unk_1009995A8, &v12)))
  {
    v7 = sub_100262B10();
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    sub_100262A2C(a1, v4, v8);

    sub_100262BAC(a1, v4);
  }
  else
  {
    v13 = 15;
    if (v6 == *(unsigned __int16 *)sub_1002629E0((uint64_t)&unk_1009995A8, &v13))
      v9 = sub_100262B10();
    else
      v9 = sub_100262C98();
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    sub_100262A2C(a1, v4, v10);

  }
  v13 = 12;
  if (v6 == *(unsigned __int16 *)sub_1002629E0((uint64_t)&unk_1009995A8, &v13))
    sub_100262D34(a1, v4);

  return 1;
}

void sub_100262838(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_10026287C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[24];

  v10 = xmmword_10073CC14;
  v11 = unk_10073CC24;
  *(_OWORD *)v12 = xmmword_10073CC34;
  v8 = xmmword_10073CBF4;
  v9 = unk_10073CC04;
  *(_DWORD *)&v12[15] = -1073577627;
  *(_QWORD *)(a1 + 304) = a1;
  *(_BYTE *)(a1 + 312) = -16;
  v3 = objc_msgSend(a2, "mutableCopy", v8, v9, v10, v11, *(_OWORD *)v12, *(_QWORD *)&v12[16]);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("Keyboard"), CFSTR("Accessory Category"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", &off_1009611B8, CFSTR("ExtendedData"));
  v4 = sub_1004ACC64(a1, v3, (uint64_t)&v8, 83, *(unsigned __int8 *)(a1 + 312), 0);
  v5 = v4;
  if (v4)
  {
    v6 = a1 + 304;
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback(v4, sub_100262E20, v6);
    IOHIDUserDeviceRegisterSetReportCallback(v5, sub_100262E38, v6);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D4FC4();
  }

  return v5;
}

void sub_1002629C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *sub_1002629E0(uint64_t a1, int *a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
LABEL_8:
    abort();
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)v2 + 7);
      if (v3 >= v4)
        break;
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 4;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

uint64_t sub_100262A2C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = a3;
  *(_QWORD *)(a1 + 320) = a1;
  *(_BYTE *)(a1 + 328) = -15;
  v6 = objc_retainAutorelease(v5);
  v7 = sub_1004ACC64(a1, a2, (uint64_t)objc_msgSend(v6, "bytes"), (uint64_t)objc_msgSend(v6, "length"), *(unsigned __int8 *)(a1 + 328), 1);
  v8 = v7;
  if (v7)
  {
    v9 = a1 + 320;
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback(v7, sub_100262E20, v9);
    IOHIDUserDeviceRegisterSetReportCallback(v8, sub_100262E38, v9);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D4FF0();
  }

  return v8;
}

void sub_100262B00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100262B10()
{
  _OWORD v1[11];
  _OWORD v2[2];

  v1[10] = xmmword_10073CD2F;
  v2[0] = unk_10073CD3F;
  *(_OWORD *)((char *)v2 + 15) = unk_10073CD4E;
  v1[6] = xmmword_10073CCEF;
  v1[7] = unk_10073CCFF;
  v1[8] = xmmword_10073CD0F;
  v1[9] = unk_10073CD1F;
  v1[2] = xmmword_10073CCAF;
  v1[3] = unk_10073CCBF;
  v1[4] = xmmword_10073CCCF;
  v1[5] = unk_10073CCDF;
  v1[0] = xmmword_10073CC8F;
  v1[1] = unk_10073CC9F;
  return (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v1, 207));
}

uint64_t sub_100262BAC(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  _OWORD v8[2];

  v7 = xmmword_10073CC62;
  v8[0] = unk_10073CC72;
  *(_OWORD *)((char *)v8 + 13) = unk_10073CC7F;
  *(_QWORD *)(a1 + 352) = a1;
  *(_BYTE *)(a1 + 360) = -12;
  v3 = sub_1004ACC64(a1, a2, (uint64_t)&v7, 45, 244, 2);
  v4 = v3;
  if (v3)
  {
    v5 = a1 + 352;
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback(v3, sub_100262E20, v5);
    IOHIDUserDeviceRegisterSetReportCallback(v4, sub_100262E38, v5);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D501C();
  }
  return v4;
}

id sub_100262C98()
{
  _OWORD v1[10];
  _BYTE v2[22];

  v1[8] = xmmword_10073CDDE;
  v1[9] = unk_10073CDEE;
  *(_OWORD *)v2 = xmmword_10073CDFE;
  *(_QWORD *)&v2[14] = 0xC022813F85409508;
  v1[4] = xmmword_10073CD9E;
  v1[5] = unk_10073CDAE;
  v1[6] = xmmword_10073CDBE;
  v1[7] = unk_10073CDCE;
  v1[0] = xmmword_10073CD5E;
  v1[1] = unk_10073CD6E;
  v1[2] = xmmword_10073CD7E;
  v1[3] = unk_10073CD8E;
  return (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v1, 182));
}

uint64_t sub_100262D34(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v7[2];

  v7[0] = xmmword_10073CC47;
  *(_OWORD *)((char *)v7 + 11) = *(__int128 *)((char *)&xmmword_10073CC47 + 11);
  *(_QWORD *)(a1 + 336) = a1;
  *(_BYTE *)(a1 + 344) = -14;
  v3 = sub_1004ACC64(a1, a2, (uint64_t)v7, 27, 242, 2);
  v4 = v3;
  if (v3)
  {
    v5 = a1 + 336;
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback(v3, sub_100262E20, v5);
    IOHIDUserDeviceRegisterSetReportCallback(v4, sub_100262E38, v5);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D5048();
  }
  return v4;
}

uint64_t sub_100262E20(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)a1 + 112))(*(_QWORD *)a1, a2, a3, a4, a5, a1[8]);
}

uint64_t sub_100262E38(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(**(_QWORD **)a1 + 120))(*(_QWORD *)a1, a2, a3, a4, a5, a1[8]);
}

void sub_100262E54(uint64_t a1)
{
  sub_1004AC9E0(a1);
  operator delete();
}

uint64_t **sub_100262E78(_QWORD *a1, unsigned __int8 *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int8 *)result + 16) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_100262F2C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v9 = *a2;
      if (v7 <= v6)
        v9 = v6 % v7;
    }
    else
    {
      v9 = ((_DWORD)v7 - 1) & v6;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v9);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v6)
          {
            if (*((unsigned __int8 *)v11 + 16) == (_DWORD)v6)
              return v11;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= v7)
                v12 %= v7;
            }
            else
            {
              v12 &= v7 - 1;
            }
            if (v12 != v9)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v6;
  *((_BYTE *)v11 + 16) = **a4;
  v11[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_1000B678C(a1, v18);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v9 = v6 % v7;
      else
        v9 = v6;
    }
    else
    {
      v9 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v9) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7)
        v21 %= v7;
    }
    else
    {
      v21 &= v7 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_100263140(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100263154()
{
  _QWORD block[4];
  __int128 v2;
  __int128 v3;
  __int128 v4;
  int v5;

  v5 = 0;
  v4 = 0u;
  v3 = 0u;
  v2 = 0u;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002631D8;
  block[3] = &unk_10091FEA8;
  if (qword_100991A50 != -1)
    dispatch_once(&qword_100991A50, block);
  return qword_1009993C8;
}

void sub_1002631D8()
{
  operator new();
}

uint64_t sub_100263218(uint64_t result)
{
  *(_QWORD *)result = &off_10091FED8;
  *(_BYTE *)(result + 152) = 0;
  return result;
}

void sub_100263230()
{
  operator delete();
}

uint64_t sub_100263244(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*a3 > 3uLL)
  {
    v14 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_1006D5074(v14, v15, v16, v17, v18, v19, v20, a8);
  }
  else
  {
    v10 = a1 + 52 * *a3;
    v11 = *(_OWORD *)a3;
    v12 = *((_OWORD *)a3 + 1);
    v13 = *((_OWORD *)a3 + 2);
    *(_DWORD *)(v10 + 202) = *((_DWORD *)a3 + 12);
    *(_OWORD *)(v10 + 186) = v13;
    *(_OWORD *)(v10 + 170) = v12;
    *(_OWORD *)(v10 + 154) = v11;
  }
  return sub_100196768(0x10Au, (uint64_t)(a3 + 11), a3[21], a3[22], a3[23], a3[24], a3[25], a8, a2);
}

uint64_t sub_100263340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100196768(0x10Bu, a2, a3, a4, a5, a6, a7, a8, a2);
}

uint64_t sub_100263368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100196768(0x10Eu, a2, a3, a4, a5, a6, a7, a8, a2);
}

uint64_t sub_100263398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100196768(0x10Fu, a2, a3, a4, a5, a6, a7, a8, a2);
}

uint64_t sub_1002633BC(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  return sub_100196768(0x105u, a2, a3[20], a3[12], a3[13], a3[14], a3[15], a3[16], a2);
}

uint64_t sub_100263468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10004C9BC(269, (uint64_t (*)())sub_1002634E4, *(unsigned __int8 *)(a3 + 23), *(unsigned __int8 *)(a3 + 22), a5, a6, a7, a8, a2);
}

void sub_1002634E4(int a1)
{
  NSObject *v2;
  _DWORD v3[2];

  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "csSetProcedureParamsCB status=%{bluetooth:OI_STATUS}u", (uint8_t *)v3, 8u);
  }
}

uint64_t sub_100263584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10004C9BC(268, (uint64_t (*)())sub_1002635B0, a3, a4, a5, a6, a7, a8, a2);
}

void sub_1002635B0(int a1)
{
  NSObject *v2;
  _DWORD v3[2];

  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "csSetAfhCB status=%{bluetooth:OI_STATUS}u", (uint8_t *)v3, 8u);
  }
}

uint64_t sub_100263650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10004C9BC(262, (uint64_t (*)())sub_10026368C, a3, a4, a5, a6, a7, a8, a2);
}

void sub_10026368C(int a1)
{
  NSObject *v2;
  _DWORD v3[2];

  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "csSetDefaultSettingsCB status=%{bluetooth:OI_STATUS}u", (uint8_t *)v3, 8u);
  }
}

void sub_10026372C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (sub_10004C9BC(263, (uint64_t (*)())sub_100263780, a3, a4, a5, a6, a7, a8, v16))
  {
    v8 = qword_100999890;
    if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_ERROR))
      sub_1006D50A8(v8, v9, v10, v11, v12, v13, v14, v15);
  }
}

__n128 sub_100263780(int a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  _DWORD v9[2];

  v4 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 67109120;
    v9[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "csLeReadLocalFAETableCB status=%{bluetooth:OI_STATUS}u", (uint8_t *)v9, 8u);
  }
  v5 = sub_100263154();
  *(_OWORD *)(v5 + 80) = *(_OWORD *)a2;
  v7 = *(_OWORD *)(a2 + 32);
  result = *(__n128 *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v5 + 144) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(v5 + 112) = v7;
  *(__n128 *)(v5 + 128) = result;
  *(_OWORD *)(v5 + 96) = v8;
  return result;
}

uint64_t sub_100263850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_100196768(0x108u, a2, a3, a4, a5, a6, a7, a8, a2);
}

uint64_t sub_100263874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10004C9BC(265, (uint64_t (*)())sub_1002638A0, a3, a4, a5, a6, a7, a8, a2);
}

void sub_1002638A0(int a1)
{
  NSObject *v2;
  _DWORD v3[2];

  v2 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "csLeWriteRemoteFAETableCB status=%{bluetooth:OI_STATUS}u", (uint8_t *)v3, 8u);
  }
}

__n128 sub_100263940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  result = *(__n128 *)(a3 + 16);
  v4 = *(_OWORD *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a3 + 64);
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  *(__n128 *)(a1 + 24) = result;
  return result;
}

uint64_t sub_100263968(uint64_t result)
{
  *(_BYTE *)(result + 152) = 1;
  return result;
}

void sub_100263974(uint64_t a1, int a2)
{
  NSObject *v3;
  _DWORD v4[2];

  v3 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "LE_CsProcedureEnableComplete status=%{bluetooth:OI_STATUS}u", (uint8_t *)v4, 8u);
  }
}

void sub_100263A14(uint64_t a1, uint64_t a2, char a3, __int16 a4, char a5, int a6, char a7, char a8, char a9, unsigned __int8 __na, size_t __n, const void *a12, unsigned __int8 *a13, const void *a14)
{
  NSObject *v20;
  int v21;
  unsigned __int8 *v22;
  const void *v23;
  uint64_t v24;
  unsigned __int16 v25;
  __int16 v26;
  size_t v27;
  char v29;
  unsigned __int8 __dst[26092];
  _DWORD buf[2];

  v20 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    buf[0] = 67109120;
    buf[1] = a6;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "LE_CsSubeventResultComplete procedureDoneStatus=%{bluetooth:OI_STATUS}u", (uint8_t *)buf, 8u);
  }
  v21 = a6 & 0xF;
  if (v21 != 14)
  {
    v29 = a8;
    v22 = a13;
    v23 = (const void *)__n;
    v24 = __na;
    if (v21 == 15)
    {
      bzero((void *)(a1 + 372), 0x65E1uLL);
      v23 = (const void *)__n;
    }
    *(_BYTE *)(a1 + 362) = a3;
    *(_WORD *)(a1 + 364) = a4;
    *(_BYTE *)(a1 + 366) = a5;
    *(_BYTE *)(a1 + 367) = a6;
    *(_BYTE *)(a1 + 368) = a7;
    *(_BYTE *)(a1 + 369) = v29;
    *(_BYTE *)(a1 + 370) = a9;
    *(_BYTE *)(a1 + 371) = __na;
    if (v21 == 1)
      *(_BYTE *)(a1 + 26452) += __na;
    memcpy((void *)(a1 + 372), v23, __na);
    memcpy((void *)(a1 + 532), a12, __na);
    memcpy((void *)(a1 + 692), a13, __na);
    if (__na)
    {
      v25 = 0;
      do
      {
        v26 = *v22++;
        v25 += v26;
        --v24;
      }
      while (v24);
      v27 = v25;
    }
    else
    {
      v27 = 0;
    }
    memcpy((void *)(a1 + 852), a14, v27);
    if ((a7 & 0xF) == 0)
    {
      if (qword_1009778A8 != -1)
        dispatch_once(&qword_1009778A8, &stru_10091FEE8);
      memcpy(__dst, (const void *)(a1 + 362), sizeof(__dst));
      sub_10063FBA0(a2, __dst);
    }
  }
}

void sub_100263C48(_BYTE *a1, uint64_t a2, char a3, int a4, char a5, char a6, unsigned int a7, const void *a8, const void *a9, unsigned __int8 *a10, const void *a11)
{
  unsigned __int8 *v18;
  NSObject *v19;
  uint64_t v20;
  unsigned __int16 v21;
  __int16 v22;
  size_t v23;
  unsigned __int8 __dst[26092];
  _DWORD buf[2];

  v18 = a10;
  v19 = qword_100999890;
  if (os_log_type_enabled((os_log_t)qword_100999890, OS_LOG_TYPE_DEFAULT))
  {
    buf[0] = 67109120;
    buf[1] = a4;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "LE_CsSubeventResultComplete status=%{bluetooth:OI_STATUS}u", (uint8_t *)buf, 8u);
  }
  a1[362] = a3;
  a1[367] = a4;
  a1[368] = a5;
  a1[370] = a6;
  v20 = a7;
  a1[371] = a7;
  memcpy(a1 + 372, a8, a7);
  memcpy(a1 + 532, a9, a7);
  memcpy(a1 + 692, a10, a7);
  if (a7)
  {
    v21 = 0;
    do
    {
      v22 = *v18++;
      v21 += v22;
      --v20;
    }
    while (v20);
    v23 = v21;
  }
  else
  {
    v23 = 0;
  }
  memcpy(a1 + 852, a11, v23);
  if ((a5 & 0xF) == 0)
  {
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_10091FEE8);
    memcpy(__dst, a1 + 362, sizeof(__dst));
    sub_10063FBA0(a2, __dst);
  }
}

__n128 sub_100263E18(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  if (*a2 <= 3uLL)
  {
    v2 = a1 + 52 * *a2;
    result = *(__n128 *)a2;
    v4 = *((_OWORD *)a2 + 1);
    v5 = *((_OWORD *)a2 + 2);
    *(_DWORD *)(v2 + 202) = *((_DWORD *)a2 + 12);
    *(_OWORD *)(v2 + 186) = v5;
    *(_OWORD *)(v2 + 170) = v4;
    *(__n128 *)(v2 + 154) = result;
  }
  return result;
}

void sub_100263E4C(id a1)
{
  operator new();
}

void sub_100263E8C()
{
  operator delete();
}

uint64_t sub_100263EB0(uint64_t a1)
{
  std::string *v2;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_WORD *)(a1 + 69) = 0;
  v2 = (std::string *)(a1 + 32);
  *(_DWORD *)(a1 + 65) = 0;
  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::string::assign((std::string *)(a1 + 8), "");
  std::string::assign(v2, "");
  *(_BYTE *)(a1 + 56) = 2;
  *(_DWORD *)(a1 + 60) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 71) = 0;
  return a1;
}

void sub_100263F30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100263F60(uint64_t result, char a2)
{
  *(_BYTE *)(result + 71) = a2;
  return result;
}

void sub_100263F68(uint64_t a1)
{
  uint64_t *v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  uint64_t v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  uint64_t v12;

  if (qword_100977A68 != -1)
    dispatch_once(&qword_100977A68, &stru_10091FF08);
  v2 = (uint64_t *)(a1 + 32);
  sub_1004668F4((uint64_t)off_100977A60, (_BYTE *)(a1 + 64), a1 + 32);
  v3 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 64))
      v4 = "Sign in";
    else
      v4 = "Sign out";
    v5 = a1 + 32;
    if (*(char *)(a1 + 55) < 0)
      v5 = *v2;
    *(_DWORD *)buf = 136315394;
    v10 = v4;
    v11 = 2080;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Sending version info request to magnet device, local cloud sign-in status = \"%s\", local cloud account = \"%s\"", buf, 0x16u);
  }
  v6 = sub_10034FCFC();
  if (*(char *)(a1 + 55) < 0)
  {
    sub_10003430C(__p, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v2;
    v8 = *(_QWORD *)(a1 + 48);
  }
  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v6 + 72))(v6, 1, __p);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  *(_DWORD *)(a1 + 60) = 1;
  *(_BYTE *)(a1 + 56) = 2;
}

void sub_1002640F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100264114(uint64_t a1, int a2, std::string *__str)
{
  std::string *v3;
  void **v6;
  NSObject *v7;
  uint64_t v8;
  std::string *v9;
  const char *v10;
  void *v11;
  uint64_t v12;
  char v13;
  std::string::size_type size;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned __int8 *v18;
  int v19;
  void **p_dst;
  __int128 v21;
  uint64_t v22;
  __int128 __dst;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  std::string *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  void *v34;

  v3 = __str;
  *(_DWORD *)(a1 + 60) = 2;
  *(_BYTE *)a1 = a2;
  std::string::operator=((std::string *)(a1 + 8), __str);
  if (qword_100977A68 != -1)
    dispatch_once(&qword_100977A68, &stru_10091FF08);
  v6 = (void **)(a1 + 32);
  sub_1004668F4((uint64_t)off_100977A60, (_BYTE *)(a1 + 64), a1 + 32);
  v7 = qword_100999870;
  v8 = os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v8)
  {
    v9 = v3;
    if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
      v9 = (std::string *)v3->__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(a1 + 64))
      v10 = "Sign in";
    else
      v10 = "Sign out";
    v11 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v11 = *v6;
    *(_DWORD *)buf = 67109890;
    v28 = a2;
    v29 = 2080;
    v30 = v9;
    v31 = 2080;
    v32 = v10;
    v33 = 2080;
    v34 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received version info request, remote version = %d, remote cloud account = %s, local cloud sign-in status = \"%s\", local cloud account = \"%s\"", buf, 0x26u);
  }
  if (a2)
  {
    v12 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
    {
      if (v3->__r_.__value_.__l.__size_)
      {
LABEL_15:
        if (*(_BYTE *)(a1 + 64))
        {
          v13 = *(_BYTE *)(a1 + 55);
          if (v13 < 0)
          {
            if (*(_QWORD *)(a1 + 40))
            {
LABEL_18:
              if ((v12 & 0x80u) == 0)
                size = HIBYTE(v3->__r_.__value_.__r.__words[2]);
              else
                size = v3->__r_.__value_.__l.__size_;
              v15 = *(_QWORD *)(a1 + 40);
              if (v13 >= 0)
                v16 = *(unsigned __int8 *)(a1 + 55);
              else
                v16 = *(_QWORD *)(a1 + 40);
              if (size == v16)
              {
                v17 = *v6;
                if (v13 >= 0)
                  v18 = (unsigned __int8 *)(a1 + 32);
                else
                  v18 = (unsigned __int8 *)*v6;
                if ((v12 & 0x80) == 0)
                {
                  if (*((_BYTE *)&v3->__r_.__value_.__s + 23))
                  {
                    while (v3->__r_.__value_.__s.__data_[0] == *v18)
                    {
                      v3 = (std::string *)((char *)v3 + 1);
                      ++v18;
                      if (!--v12)
                        goto LABEL_44;
                    }
                    goto LABEL_42;
                  }
                  goto LABEL_44;
                }
                v8 = memcmp(v3->__r_.__value_.__l.__data_, v18, v3->__r_.__value_.__l.__size_);
                if (!(_DWORD)v8)
                {
LABEL_44:
                  if (v13 < 0)
                  {
                    v8 = (uint64_t)sub_10003430C(&v25, v17, v15);
                  }
                  else
                  {
                    v25 = *(_OWORD *)v6;
                    v26 = *(_QWORD *)(a1 + 48);
                  }
                  sub_10026446C(v8, 1, (void **)&v25, 2);
                  if ((SHIBYTE(v26) & 0x80000000) == 0)
                    goto LABEL_53;
                  p_dst = (void **)&v25;
LABEL_52:
                  operator delete(*p_dst);
LABEL_53:
                  v19 = 4;
                  goto LABEL_54;
                }
              }
LABEL_42:
              if (v13 < 0)
              {
                v8 = (uint64_t)sub_10003430C(&__dst, *v6, v15);
              }
              else
              {
                __dst = *(_OWORD *)v6;
                v24 = *(_QWORD *)(a1 + 48);
              }
              sub_10026446C(v8, 1, (void **)&__dst, 1);
              if ((SHIBYTE(v24) & 0x80000000) == 0)
                goto LABEL_53;
              p_dst = (void **)&__dst;
              goto LABEL_52;
            }
          }
          else if (*(_BYTE *)(a1 + 55))
          {
            goto LABEL_18;
          }
        }
        v19 = 3;
LABEL_54:
        *(_DWORD *)(a1 + 60) = v19;
        return;
      }
    }
    else if (*((_BYTE *)&v3->__r_.__value_.__s + 23))
    {
      goto LABEL_15;
    }
    if (*(char *)(a1 + 55) < 0)
    {
      v8 = (uint64_t)sub_10003430C(&v21, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
    }
    else
    {
      v21 = *(_OWORD *)v6;
      v22 = *(_QWORD *)(a1 + 48);
    }
    sub_10026446C(v8, 1, (void **)&v21, 2);
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_53;
    p_dst = (void **)&v21;
    goto LABEL_52;
  }
}

void sub_10026441C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void sub_10026446C(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  NSObject *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *__p[2];
  void *v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  const char *v18;

  v7 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    v8 = a3;
    if (*((char *)a3 + 23) < 0)
      v8 = *a3;
    v9 = "Disallow";
    *(_DWORD *)buf = 67109634;
    v14 = a2;
    v15 = 2080;
    if ((_DWORD)a4 == 2)
      v9 = "Allow";
    v16 = v8;
    v17 = 2080;
    v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending version info response to magnet device, localVersion = %d, localCloudAccount = \"%s\", easyPairingStatus = \"%s\"", buf, 0x1Cu);
  }
  v10 = sub_10034FCFC();
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003430C(__p, *a3, (unint64_t)a3[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v12 = a3[2];
  }
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)v10 + 80))(v10, a2, __p, a4);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
}

void sub_1002645B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_1002645D8(uint64_t a1, int a2, const std::string *a3, int a4)
{
  NSObject *v8;
  const std::string *v9;
  const char *v10;
  _DWORD v12[2];
  __int16 v13;
  const std::string *v14;
  __int16 v15;
  const char *v16;

  v8 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    v9 = a3;
    if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
      v9 = (const std::string *)a3->__r_.__value_.__r.__words[0];
    v10 = "Disallow";
    v12[0] = 67109634;
    v12[1] = a2;
    v13 = 2080;
    if (a4 == 2)
      v10 = "Allow";
    v14 = v9;
    v15 = 2080;
    v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received version info response, remote version = %d, remote cloud account = \"%s\", easyPairingStatus = \"%s\"", (uint8_t *)v12, 0x1Cu);
  }
  *(_BYTE *)(a1 + 56) = a4;
  *(_BYTE *)a1 = a2;
  *(_DWORD *)(a1 + 60) = 5;
  return std::string::operator=((std::string *)(a1 + 8), a3);
}

void sub_1002646EC(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 65) = *(_DWORD *)a2;
  *(_WORD *)(a1 + 69) = v2;
  if (*(_BYTE *)a1 && *(_DWORD *)(a1 + 60) == 3)
  {
    v3 = qword_100999870;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Remote device supports version info query and there is pending cloud sign-in on local device. Delay the response for pairing status request", v4, 2u);
    }
  }
  else
  {
    sub_100264788(a1, (unsigned __int8 *)(a1 + 65));
  }
}

uint64_t sub_100264788(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  const char *v5;
  NSObject *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  const char *v18;
  __n128 v19;
  int v20;

  v19 = 0uLL;
  v20 = 0;
  sub_1005A9714((uint64_t)&v19);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_10091FF28);
  v3 = (unsigned __int8 *)sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)a2, 0);
  if (!v3)
    goto LABEL_7;
  if (qword_100978160 != -1)
    dispatch_once(&qword_100978160, &stru_10091FF48);
  if (!sub_1005BEB64((uint64_t)off_100978158, v3, &v19))
  {
    v4 = 2;
    v5 = "Paired";
  }
  else
  {
LABEL_7:
    v4 = 1;
    v5 = "Not Paired";
  }
  v6 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    sub_10046E9BC(a2, __p);
    v7 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v16 = v7;
    v17 = 2080;
    v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending pair stauts response to magnet device for aacp device \"%s\", pairStatus = \"%s\"", buf, 0x16u);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  v8 = sub_10034FCFC();
  sub_10046E9BC(a2, v11);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v8 + 96))(v8, v11, v4);
  if (v12 < 0)
    operator delete(v11[0]);
  return nullsub_90(&v19, v9);
}

void sub_100264968(_Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  nullsub_90(&a22, a2);
  _Unwind_Resume(a1);
}

BOOL sub_1002649A0(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  const char *v5;
  _DWORD v7[2];
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;

  v2 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 71);
    v4 = *(_DWORD *)(a1 + 60);
    if (*(_BYTE *)(a1 + 56) == 2)
      v5 = "Allow";
    else
      v5 = "Disallow";
    v7[0] = 67109634;
    v7[1] = v3;
    v8 = 1024;
    v9 = v4;
    v10 = 2080;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Current MagnetVersion = %d, VersionInfoState = %d, EasyPairingStatus = \"%s\"", (uint8_t *)v7, 0x18u);
  }
  if (*(unsigned __int8 *)(a1 + 71) < 0xAu)
    return 1;
  if (*(_DWORD *)(a1 + 60) == 5)
    return *(_BYTE *)(a1 + 56) == 2;
  return 0;
}

void sub_100264AB0(uint64_t a1, int a2, std::string *__str)
{
  std::string *v3;
  unsigned __int8 *v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void **p_dst;
  __int128 v20;
  uint64_t v21;
  __int128 __dst;
  uint64_t v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  std::string *v27;

  if (*(unsigned __int8 *)(a1 + 64) != a2)
  {
    v3 = __str;
    *(_BYTE *)(a1 + 64) = a2;
    v6 = (unsigned __int8 *)(a1 + 32);
    std::string::operator=((std::string *)(a1 + 32), __str);
    v7 = qword_100999870;
    v8 = os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v8)
    {
      v9 = "Sign out";
      if (a2)
        v9 = "Sign in";
      if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
        v3 = (std::string *)v3->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      v25 = v9;
      v26 = 2080;
      v27 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Cloud sign-in status changed, status = \"%s\", cloudAccount = \"%s\"", buf, 0x16u);
    }
    if (*(_DWORD *)(a1 + 60) == 3)
    {
      v10 = *(_QWORD *)(a1 + 40);
      if (*(char *)(a1 + 55) >= 0)
        v11 = *(unsigned __int8 *)(a1 + 55);
      else
        v11 = *(_QWORD *)(a1 + 40);
      v12 = *(unsigned __int8 *)(a1 + 31);
      v13 = (char)v12;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a1 + 16);
      if (v11 == v12)
      {
        if (v13 >= 0)
          v14 = (unsigned __int8 *)(a1 + 8);
        else
          v14 = *(unsigned __int8 **)(a1 + 8);
        if ((*(_BYTE *)(a1 + 55) & 0x80) != 0)
        {
          v17 = *(void **)v6;
          if (memcmp(v17, v14, *(_QWORD *)(a1 + 40)))
            goto LABEL_28;
          v8 = (uint64_t)sub_10003430C(&__dst, v17, v10);
        }
        else
        {
          if (*(_BYTE *)(a1 + 55))
          {
            v15 = v6;
            v16 = *(unsigned __int8 *)(a1 + 55);
            while (*v15 == *v14)
            {
              ++v15;
              ++v14;
              if (!--v16)
                goto LABEL_23;
            }
            goto LABEL_24;
          }
LABEL_23:
          __dst = *(_OWORD *)v6;
          v23 = *((_QWORD *)v6 + 2);
        }
        sub_10026446C(v8, 1, (void **)&__dst, 2);
        if (SHIBYTE(v23) < 0)
        {
          p_dst = (void **)&__dst;
          goto LABEL_34;
        }
LABEL_35:
        *(_DWORD *)(a1 + 60) = 4;
        sub_100264788(v18, (unsigned __int8 *)(a1 + 65));
        return;
      }
LABEL_24:
      if ((*(_BYTE *)(a1 + 55) & 0x80) == 0)
      {
        v20 = *(_OWORD *)v6;
        v21 = *((_QWORD *)v6 + 2);
        goto LABEL_29;
      }
      v17 = *(void **)v6;
LABEL_28:
      v8 = (uint64_t)sub_10003430C(&v20, v17, v10);
LABEL_29:
      sub_10026446C(v8, 1, (void **)&v20, 1);
      if (SHIBYTE(v21) < 0)
      {
        p_dst = (void **)&v20;
LABEL_34:
        operator delete(*p_dst);
        goto LABEL_35;
      }
      goto LABEL_35;
    }
  }
}

void sub_100264CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_100264D2C(id a1)
{
  operator new();
}

void sub_100264D6C()
{
  operator delete();
}

void sub_100264D90(id a1)
{
  operator new();
}

void sub_100264DD0()
{
  operator delete();
}

void sub_100264DF4(id a1)
{
  operator new();
}

void sub_100264E34()
{
  operator delete();
}

uint64_t sub_100264E58(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD v12[3];

  v12[2] = a2;
  if (a2)
  {
    v12[0] = 0;
    v12[1] = 0;
    sub_10003415C((uint64_t)v12, a1);
    v6 = *(_QWORD **)(a1 + 72);
    v5 = a1 + 72;
    v4 = v6;
    if (!v6)
      goto LABEL_13;
    v7 = (_QWORD *)v5;
    do
    {
      v8 = v4[4];
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = v4;
      else
        v10 = v4 + 1;
      if (v9)
        v7 = v4;
      v4 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 == (_QWORD *)v5 || v7[4] > a2)
LABEL_13:
      operator new();
    sub_100034234((uint64_t)v12);
    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999910, OS_LOG_TYPE_ERROR))
      sub_1006D50DC();
    return 3;
  }
}

void sub_100264FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100264FF4(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t *v14[3];
  _QWORD v15[2];
  unint64_t v16;

  v16 = a2;
  if (a2)
  {
    v15[0] = 0;
    v15[1] = 0;
    sub_10003415C((uint64_t)v15, a1);
    v6 = *(_QWORD **)(a1 + 72);
    v5 = a1 + 72;
    v4 = v6;
    if (!v6)
      goto LABEL_13;
    v7 = (_QWORD *)v5;
    do
    {
      v8 = v4[4];
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = v4;
      else
        v10 = v4 + 1;
      if (v9)
        v7 = v4;
      v4 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != (_QWORD *)v5 && v7[4] <= a2)
    {
      v14[0] = (uint64_t *)&v16;
      if (sub_10002252C((uint64_t **)(v5 - 8), &v16, (uint64_t)&unk_100740F58, v14)[5])
        operator delete();
      sub_100015ECC(v5 - 8, &v16);
      v12 = 0;
    }
    else
    {
LABEL_13:
      v11 = (id)qword_100999910;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        sub_10043F6EC(a2, (uint64_t)v14);
        sub_1006D5108();
      }

      v12 = 3;
    }
    sub_100034234((uint64_t)v15);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999910, OS_LOG_TYPE_ERROR))
      sub_1006D50DC();
    return 3;
  }
  return v12;
}

void sub_100265178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002651A0(uint64_t a1, unint64_t a2, int a3, int a4)
{
  uint64_t v5;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  NSObject *v16;
  NSObject *v18;
  _QWORD v19[2];
  unint64_t v20;
  uint8_t buf[8];

  v20 = a2;
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100999910, OS_LOG_TYPE_ERROR))
      sub_1006D5154();
    return 3;
  }
  if (a3 >= 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100999910, OS_LOG_TYPE_ERROR))
      sub_1006D5180();
    return 3;
  }
  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1);
  v11 = *(_QWORD **)(a1 + 72);
  v10 = a1 + 72;
  v9 = v11;
  if (!v11)
    goto LABEL_19;
  v12 = (_QWORD *)v10;
  do
  {
    v13 = v9[4];
    v14 = v13 >= a2;
    if (v13 >= a2)
      v15 = v9;
    else
      v15 = v9 + 1;
    if (v14)
      v12 = v9;
    v9 = (_QWORD *)*v15;
  }
  while (*v15);
  if (v12 != (_QWORD *)v10 && v12[4] <= a2)
  {
    if (a3)
    {
      v5 = 0;
    }
    else
    {
      v18 = qword_100999910;
      if (os_log_type_enabled((os_log_t)qword_100999910, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = a4;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "BTLQ set Link Quality Data codec to %u", buf, 8u);
      }
      *(_QWORD *)buf = &v20;
      v5 = 0;
      *(_WORD *)(sub_10002252C((uint64_t **)(v10 - 8), &v20, (uint64_t)&unk_100740F58, (uint64_t **)buf)[5] + 10) = a4;
    }
  }
  else
  {
LABEL_19:
    v16 = (id)qword_100999910;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      sub_10043F6EC(a2, (uint64_t)buf);
      sub_1006D51AC();
    }

    v5 = 7;
  }
  sub_100034234((uint64_t)v19);
  return v5;
}

void sub_1002653A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002653C8(uint64_t a1, _WORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  __int16 v10;
  _QWORD v13[2];

  if (a2)
  {
    v13[0] = 0;
    v13[1] = 0;
    sub_10003415C((uint64_t)v13, a1);
    v4 = *(_QWORD **)(a1 + 64);
    v5 = a1 + 72;
    if (v4 == (_QWORD *)v5)
    {
      v10 = 0;
    }
    else
    {
      v6 = 0;
      do
      {
        memcpy(&a2[134 * v6 + 1], (const void *)v4[5], 0x10CuLL);
        v7 = (_QWORD *)v4[1];
        v8 = v4;
        if (v7)
        {
          do
          {
            v4 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v4 = (_QWORD *)v8[2];
            v9 = *v4 == (_QWORD)v8;
            v8 = v4;
          }
          while (!v9);
        }
        v10 = v6 + 1;
        if (v4 == (_QWORD *)v5)
          break;
      }
      while (v6++ < 2);
    }
    *a2 = v10;
    sub_100034234((uint64_t)v13);
    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999910, OS_LOG_TYPE_ERROR))
      sub_1006D51F8();
    return 3;
  }
}

id sub_1002654D0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  id v4;
  unsigned __int8 *v5;
  id v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  id v16;
  _QWORD v18[2];

  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1);
  v2 = *(_QWORD **)(a1 + 64);
  v3 = (_QWORD *)(a1 + 72);
  if (v2 == (_QWORD *)(a1 + 72))
  {
    v16 = 0;
  }
  else
  {
    v4 = objc_alloc_init((Class)NSMutableArray);
    do
    {
      v5 = (unsigned __int8 *)v2[5];
      v6 = objc_alloc_init((Class)CBAudioLinkQualityInfo);
      objc_msgSend(v6, "setAosState:", *v5);
      objc_msgSend(v6, "setBitRate:", 1000 * *((unsigned __int16 *)v5 + 3));
      v7 = *((unsigned __int16 *)v5 + 5);
      if (v7 == 33023)
        v8 = 30;
      else
        v8 = 0;
      if (v7 == 2)
        v8 = 20;
      if (*((_WORD *)v5 + 5))
        v9 = v8;
      else
        v9 = 10;
      objc_msgSend(v6, "setCodecType:", v9);
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5 + 12));
      objc_msgSend(v6, "setDeviceName:", v10);

      objc_msgSend(v6, "setBtBand:", v5[1]);
      LOWORD(v11) = *((_WORD *)v5 + 4);
      objc_msgSend(v6, "setJitterBufferSeconds:", (double)v11 / 1000.0);
      objc_msgSend(v6, "setNoiseFloor90:", (char)v5[4]);
      LOBYTE(v12) = v5[2];
      objc_msgSend(v6, "setRetransmitRate:", (double)v12 / 100.0);
      objc_msgSend(v6, "setRssiAverage:", (char)v5[3]);
      objc_msgSend(v6, "setSignalToNoiseRatio:", (char)v5[5]);
      objc_msgSend(v4, "addObject:", v6);

      v13 = (_QWORD *)v2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v2[2];
          v15 = *v14 == (_QWORD)v2;
          v2 = v14;
        }
        while (!v15);
      }
      v2 = v14;
    }
    while (v14 != v3);
    v16 = objc_msgSend(v4, "copy");

  }
  sub_100034234((uint64_t)v18);
  return v16;
}

void sub_1002656AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002656F0(uint64_t a1, unint64_t a2, uint64_t a3, __int16 a4, __int16 a5)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t **v13;
  _QWORD *v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  char v26;
  char v27;
  uint64_t *v28[3];
  _QWORD v29[2];
  unint64_t v30;

  v30 = a2;
  if (a2 && a3)
  {
    v29[0] = 0;
    v29[1] = 0;
    sub_10003415C((uint64_t)v29, a1);
    v12 = *(_QWORD **)(a1 + 72);
    v11 = a1 + 72;
    v10 = v12;
    if (!v12)
      goto LABEL_14;
    v13 = (uint64_t **)(v11 - 8);
    v14 = (_QWORD *)v11;
    do
    {
      v15 = v10[4];
      v16 = v15 >= a2;
      if (v15 >= a2)
        v17 = v10;
      else
        v17 = v10 + 1;
      if (v16)
        v14 = v10;
      v10 = (_QWORD *)*v17;
    }
    while (*v17);
    if (v14 != (_QWORD *)v11 && v14[4] <= a2)
    {
      v28[0] = (uint64_t *)&v30;
      v22 = sub_10002252C((uint64_t **)(v11 - 8), &v30, (uint64_t)&unk_100740F58, v28)[5];
      if (v22)
      {
        v23 = *(unsigned __int16 *)(a3 + 16);
        if (*(_WORD *)(a3 + 16))
          v23 = 100 * *(unsigned __int16 *)(a3 + 18) / v23;
        *(_BYTE *)(v22 + 2) = v23;
        *(_BYTE *)v22 = *(_BYTE *)(v30 + 1363);
        v28[0] = (uint64_t *)&v30;
        if (!*(_BYTE *)(sub_10002252C(v13, &v30, (uint64_t)&unk_100740F58, v28)[5] + 1))
        {
          v24 = sub_10019B008(v30 + 128);
          if (v24)
          {
            v25 = *(unsigned __int8 *)(v24 + 289);
            if (v25 <= 1)
              LOBYTE(v25) = 1;
          }
          else
          {
            LOBYTE(v25) = 1;
          }
          *(_BYTE *)(v22 + 1) = v25;
        }
        v19 = 0;
        v26 = *(_BYTE *)(a3 + 6);
        *(_BYTE *)(v22 + 3) = v26;
        v27 = *(_BYTE *)(a3 + 219);
        *(_BYTE *)(v22 + 4) = v27;
        *(_BYTE *)(v22 + 5) = v26 - v27;
        *(_WORD *)(v22 + 6) = a4;
        *(_WORD *)(v22 + 8) = a5;
      }
      else
      {
        v19 = 7;
      }
    }
    else
    {
LABEL_14:
      v18 = (id)qword_100999910;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        sub_10043F6EC(a2, (uint64_t)v28);
        sub_1006D5224();
      }

      v19 = 3;
    }
    sub_100034234((uint64_t)v29);
  }
  else
  {
    v20 = qword_100999910;
    if (os_log_type_enabled((os_log_t)qword_100999910, OS_LOG_TYPE_ERROR))
      sub_1006D5270(a2, v20);
    return 3;
  }
  return v19;
}

void sub_100265918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100265944(uint64_t a1, uint64_t a2, char a3)
{
  NSObject *v6;
  _QWORD block[6];
  char v8;

  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10091FF88);
  v6 = *((_QWORD *)off_100977A90 + 31);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002659E8;
  block[3] = &unk_10091FF68;
  block[4] = a1;
  block[5] = a2;
  v8 = a3;
  dispatch_async(v6, block);
}

void sub_1002659E8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  char v10;
  uint64_t *v11;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10091FF88);
  v3 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
  if (v3)
  {
    v4 = (uint64_t *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = (char *)off_100977A90 + 192;
    do
    {
      v7 = v3[4];
      v8 = v7 >= v5;
      if (v7 >= v5)
        v9 = v3;
      else
        v9 = v3 + 1;
      if (v8)
        v6 = (char *)v3;
      v3 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 != (char *)off_100977A90 + 192 && v5 >= *((_QWORD *)v6 + 4))
    {
      v10 = *(_BYTE *)(a1 + 48);
      v11 = v4;
      *(_BYTE *)sub_10002252C((uint64_t **)(v2 + 64), (unint64_t *)v4, (uint64_t)&unk_100740F58, &v11)[5] = v10;
    }
  }
}

void sub_100265AAC(uint64_t a1, uint64_t a2, char a3)
{
  NSObject *v6;
  _QWORD block[6];
  char v8;

  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10091FF88);
  v6 = *((_QWORD *)off_100977A90 + 31);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100265B50;
  block[3] = &unk_10091FF68;
  block[4] = a1;
  block[5] = a2;
  v8 = a3;
  dispatch_async(v6, block);
}

void sub_100265B50(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  char v10;
  uint64_t *v11;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_10091FF88);
  v3 = (_QWORD *)*((_QWORD *)off_100977A90 + 24);
  if (v3)
  {
    v4 = (uint64_t *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 40);
    v6 = (char *)off_100977A90 + 192;
    do
    {
      v7 = v3[4];
      v8 = v7 >= v5;
      if (v7 >= v5)
        v9 = v3;
      else
        v9 = v3 + 1;
      if (v8)
        v6 = (char *)v3;
      v3 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 != (char *)off_100977A90 + 192 && v5 >= *((_QWORD *)v6 + 4))
    {
      v10 = *(_BYTE *)(a1 + 48);
      v11 = v4;
      *(_BYTE *)(sub_10002252C((uint64_t **)(v2 + 64), (unint64_t *)v4, (uint64_t)&unk_100740F58, &v11)[5] + 1) = v10;
    }
  }
}

void sub_100265C14(id a1)
{
  operator new();
}

void sub_100265C54()
{
  operator delete();
}

void sub_100265C78(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_100265C88()
{
  void **v0;

  operator delete(*v0);
}

void sub_100265D2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100265F6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100265FC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10026601C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002663A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  void *v26;
  void *v27;
  id *v28;
  id *v29;

  objc_destroyWeak(v29);
  objc_destroyWeak(v28);
  _Block_object_dispose(&a21, 8);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100266420(uint64_t a1, int a2, void *a3)
{
  id v6;
  id WeakRetained;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  BOOL v12;
  CFErrorRef v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  BOOL v17;
  void (**v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void *v20;
  int v21;
  id v22;

  v6 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v8 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
    {
      v21 = 67109120;
      LODWORD(v22) = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourService] advertiser state handler with state %d", (uint8_t *)&v21, 8u);
    }
    if (v6)
    {
      v9 = qword_100999980;
      if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
      {
        v21 = 138412290;
        v22 = v6;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourService] advertiser error %@", (uint8_t *)&v21, 0xCu);
      }
    }
    switch(a2)
    {
      case 4:
        v14 = qword_100999980;
        if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v21) = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourService] advertiser cancelled", (uint8_t *)&v21, 2u);
        }
        objc_msgSend(WeakRetained, "setListener:", 0);
        objc_msgSend(WeakRetained, "_cleanupAdvertiser");
        v15 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
        if (v15)
          v13 = nw_error_copy_cf_error(v15);
        else
          v13 = 0;
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "advertisingStateUpdateHandler"));
        v17 = v16 == 0;

        if (!v17)
        {
          v18 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "advertisingStateUpdateHandler"));
          ((void (**)(_QWORD, _QWORD, CFErrorRef))v18)[2](v18, 0, v13);

        }
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v20 = *(void **)(v19 + 40);
        *(_QWORD *)(v19 + 40) = 0;

        goto LABEL_25;
      case 3:
        if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_ERROR))
          sub_1006D5328();
        objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a3);
        v13 = (CFErrorRef)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "listener"));
        nw_listener_cancel((nw_listener_t)v13);
        goto LABEL_25;
      case 2:
        v10 = qword_100999980;
        if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v21) = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourService] advertiser is ready", (uint8_t *)&v21, 2u);
        }
        objc_msgSend(WeakRetained, "setAdvertiserState:", 2);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "advertisingStateUpdateHandler"));
        v12 = v11 == 0;

        if (!v12)
        {
          v13 = (CFErrorRef)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "advertisingStateUpdateHandler"));
          (*((void (**)(CFErrorRef, uint64_t, _QWORD))v13 + 2))(v13, 1, 0);
LABEL_25:

        }
        break;
    }
  }

}

void sub_100266700(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_10026674C(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  NSObject *v6;
  int v7;
  id v8;
  __int16 v9;
  void *v10;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_handleConnection:isAdvToBrowserConnection:", v3, 1));

  v6 = qword_100999980;
  if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 138412546;
    v8 = v3;
    v9 = 2112;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourService] New Adv to browser connection %@ (endpoint %@)", (uint8_t *)&v7, 0x16u);
  }

}

void sub_100266834(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100266988(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  unsigned int v9;
  _BYTE *v10;
  unsigned int v11;
  void *v12;
  int v13;
  uint64_t v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "advertiserAdvs"));
  v3 = objc_msgSend(v2, "containsObject:", *(_QWORD *)(a1 + 40));

  if (v3)
  {
    v4 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 40);
      v13 = 138412290;
      v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourService] Already advertising for advData %@", (uint8_t *)&v13, 0xCu);
    }
  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "advertiserAdvs"));
    objc_msgSend(v6, "addObject:", *(_QWORD *)(a1 + 40));

    v7 = qword_100999980;
    if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 40);
      v13 = 138412290;
      v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourService] Starting advertising with advData %@", (uint8_t *)&v13, 0xCu);
    }
    v9 = objc_msgSend(*(id *)(a1 + 32), "advertiserState");
    v10 = *(_BYTE **)(a1 + 32);
    if (v9 == 3)
    {
      v10[25] = 1;
    }
    else
    {
      v11 = objc_msgSend(v10, "advertiserState");
      v12 = *(void **)(a1 + 32);
      if (v11 == 2)
        objc_msgSend(v12, "_sendAdvMessageWithData:isStart:completionHandler:", *(_QWORD *)(a1 + 40), 1, *(_QWORD *)(a1 + 48));
      else
        objc_msgSend(v12, "_startAdvertiser");
    }
  }
}

void sub_100266B1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100266C38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100266CFC(uint64_t a1)
{
  unsigned __int8 v2;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  id result;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "containsObject:", *(_QWORD *)(a1 + 40));
  v3 = qword_100999980;
  v4 = os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT);
  if ((v2 & 1) != 0)
  {
    if (v4)
    {
      v5 = *(_QWORD *)(a1 + 40);
      v9 = 138412290;
      v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourService] Stop advertising for advData %@", (uint8_t *)&v9, 0xCu);
    }
    if (objc_msgSend(*(id *)(a1 + 32), "advertiserState") == 2)
      objc_msgSend(*(id *)(a1 + 32), "_sendAdvMessageWithData:isStart:completionHandler:", *(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 48));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "removeObject:", *(_QWORD *)(a1 + 40));
    result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "count");
    if (!result)
    {
      v7 = qword_100999980;
      if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v9) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourService] No more advertisements, stopping advertiser completely.", (uint8_t *)&v9, 2u);
      }
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + 25) = 0;
      return objc_msgSend(*(id *)(a1 + 32), "_stopAdvertising");
    }
  }
  else
  {
    if (v4)
    {
      v8 = *(_QWORD *)(a1 + 40);
      v9 = 138412290;
      v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourService] Unable to stop advertising for advData %@", (uint8_t *)&v9, 0xCu);
    }
    result = *(id *)(a1 + 48);
    if (result)
      return (id)(*((uint64_t (**)(id, _QWORD, _QWORD))result + 2))(result, *(_QWORD *)(a1 + 40), 0);
  }
  return result;
}

void sub_100266F40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100266F50(id a1, id a2, BTVCBonjourEndpoint *a3, BOOL *a4)
{
  BTVCBonjourEndpoint *v4;

  v4 = a3;
  if (!-[BTVCBonjourEndpoint isConnected](v4, "isConnected"))
    -[BTVCBonjourEndpoint cancel](v4, "cancel");

}

void sub_100266F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10026702C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

BOOL sub_10026704C(id a1, id a2, BTVCBonjourEndpoint *a3, BOOL *a4)
{
  return !-[BTVCBonjourEndpoint isConnected](a3, "isConnected");
}

void sub_1002672C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  void *v19;
  void *v20;
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_100267324(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  id WeakRetained;
  void *v8;
  NSObject *v9;
  void *v10;
  BOOL v11;
  void (**v12)(_QWORD, _QWORD);
  _DWORD v13[2];
  __int16 v14;
  id v15;

  v5 = a3;
  v6 = qword_100999980;
  if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
  {
    v13[0] = 67109378;
    v13[1] = a2;
    v14 = 2112;
    v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourService] nw_browser_state_t changed:%d error:%@", (uint8_t *)v13, 0x12u);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = WeakRetained;
  if (WeakRetained)
  {
    if ((a2 - 2) >= 2)
    {
      if (a2 == 1)
      {
        objc_msgSend(WeakRetained, "setBrowserState:", 2);
        v9 = qword_100999980;
        if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v13[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourService] BTVCBonjourServiceBrowser successfully started", (uint8_t *)v13, 2u);
        }
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "deviceDidStartScanning"));
        v11 = v10 == 0;

        if (!v11)
        {
          v12 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "deviceDidStartScanning"));
          v12[2](v12, 0);

        }
      }
    }
    else
    {
      objc_msgSend(WeakRetained, "setBrowser:", 0);
      objc_msgSend(v8, "_cleanupBrowser");
    }
  }

}

void sub_1002674B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002674DC(uint64_t a1, void *a2, void *a3, int a4)
{
  NSObject *v7;
  id WeakRetained;
  nw_browse_result_change_t changes;
  BTVCBonjourBrowserResultChanges *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  NSObject *old_result;

  old_result = a2;
  v7 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    changes = nw_browse_result_get_changes(old_result, v7);
    if (changes >= 2)
    {
      v10 = -[BTVCBonjourBrowserResultChanges initWithOldResult:freshResult:change:]([BTVCBonjourBrowserResultChanges alloc], "initWithOldResult:freshResult:change:", old_result, v7, changes);
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "resultChanges"));
      objc_msgSend(v11, "addObject:", v10);

      if (a4)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "resultChanges"));
        v13 = objc_msgSend(v12, "copy");

        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "resultChanges"));
        objc_msgSend(v14, "removeAllObjects");

        objc_msgSend(WeakRetained, "handleBrowseResults:", v13);
      }

    }
  }

}

void sub_1002675E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v15 = v13;

  _Unwind_Resume(a1);
}

_BYTE *sub_1002676A0(uint64_t a1)
{
  unsigned int v2;
  _BYTE *result;
  unsigned int v4;
  void *v5;

  v2 = objc_msgSend(*(id *)(a1 + 32), "browserState");
  result = *(_BYTE **)(a1 + 32);
  if (v2 == 3)
  {
    result[24] = 1;
  }
  else
  {
    v4 = objc_msgSend(result, "browserState");
    v5 = *(void **)(a1 + 32);
    if (v4 == 2)
      return objc_msgSend(v5, "_reportCachedDiscoveryResults");
    else
      return objc_msgSend(v5, "_startBrowser");
  }
  return result;
}

void sub_100267808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_100267878(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_stopBrowser");
}

void sub_100267918(uint64_t a1)
{
  id WeakRetained;
  BOOL v2;
  void *v3;
  id v4;
  _QWORD v5[5];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v4 = WeakRetained;
    v2 = objc_msgSend(WeakRetained, "browserState") == 2;
    WeakRetained = v4;
    if (v2)
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "browserToAdvNwToSFendpoints"));
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      v5[2] = sub_1002679CC;
      v5[3] = &unk_1009200F8;
      v5[4] = v4;
      objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v5);

      WeakRetained = v4;
    }
  }

}

void sub_1002679AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void sub_1002679CC(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;
  void (**v5)(_QWORD, _QWORD, _QWORD);
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceFoundHandler"));

  if (v4)
  {
    v5 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceFoundHandler"));
    v6 = objc_alloc((Class)NSUUID);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "remoteUniqueIDString"));
    v8 = objc_msgSend(v6, "initWithUUIDString:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "remoteAdvDataSet"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "allObjects"));
    ((void (**)(_QWORD, id, void *))v5)[2](v5, v8, v10);

  }
}

void sub_100267AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v15 = v13;

  _Unwind_Resume(a1);
}

void sub_100267BCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100267BE0(id a1, id a2, BTVCBonjourEndpoint *a3, BOOL *a4)
{
  BTVCBonjourEndpoint *v4;

  v4 = a3;
  if (!-[BTVCBonjourEndpoint isConnected](v4, "isConnected"))
    -[BTVCBonjourEndpoint cancel](v4, "cancel");

}

void sub_100267C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100267CFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_100267D18(id a1, id a2, BTVCBonjourEndpoint *a3, BOOL *a4)
{
  return !-[BTVCBonjourEndpoint isConnected](a3, "isConnected");
}

void sub_100268098(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100268400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1002684A0(uint64_t a1)
{
  id WeakRetained;
  id *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (v3 && WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "remoteUniqueIDString"));

    if (v4)
    {
      v5 = (id)qword_100999980;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_1006D54B4((uint64_t)objc_msgSend(WeakRetained, "isAdvToBrowserConnection"), (uint64_t)WeakRetained, (uint64_t)&v10);

      if (*(_BYTE *)(a1 + 48))
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "advToBrowserUuidToSFendpoints"));
      else
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "browserToAdvUuidToSFendpoints"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "remoteUniqueIDString"));
      objc_msgSend(v6, "setObject:forKey:", WeakRetained, v7);

      if (objc_msgSend(WeakRetained, "isAdvToBrowserConnection"))
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[20], "allObjects"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "remoteUniqueIDString"));
        objc_msgSend(v3, "_sendMessage:withType:toDevice:completionCallback:", v8, CFSTR("BTVCBonjourServiceMessageTypeStartAdvertiseData"), v9, &stru_100920180);

      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_ERROR))
    {
      sub_1006D5454();
    }
  }

}

void sub_100268664(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v3;

  _Unwind_Resume(a1);
}

void sub_1002686E4(uint64_t a1)
{
  id WeakRetained;
  id v3;
  void *v4;
  NSObject *v5;
  void *v6;
  BOOL v7;
  void *v8;
  unsigned int v9;
  void (**v10)(_QWORD, _QWORD);
  id v11;
  void *v12;
  id v13;
  void *v14;
  unsigned __int8 v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  BOOL v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  BOOL v26;
  void *v27;
  void *v28;
  uint64_t v29;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = v3;
  if (!WeakRetained || !v3)
    goto LABEL_20;
  v5 = (id)qword_100999980;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    sub_1006D5500((uint64_t)objc_msgSend(v4, "isAdvToBrowserConnection"), (uint64_t)v4, (uint64_t)&v29);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "remoteUniqueIDString"));
  v7 = v6 == 0;

  if (!v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deviceDidDisconnectHandler"));
    if (v8)
    {
      v9 = objc_msgSend(v4, "isConnected");

      if (v9)
      {
        v10 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deviceDidDisconnectHandler"));
        v11 = objc_alloc((Class)NSUUID);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "remoteUniqueIDString"));
        v13 = objc_msgSend(v11, "initWithUUIDString:", v12);
        ((void (**)(_QWORD, id))v10)[2](v10, v13);
LABEL_12:

        goto LABEL_13;
      }
    }
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deviceLostHandler"));
    if (v14)
    {
      v15 = objc_msgSend(v4, "isAdvToBrowserConnection");

      if ((v15 & 1) == 0)
      {
        v10 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deviceLostHandler"));
        v16 = objc_alloc((Class)NSUUID);
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "remoteUniqueIDString"));
        v13 = objc_msgSend(v16, "initWithUUIDString:", v12);
        ((void (*)(void (**)(_QWORD, _QWORD), id, _QWORD))v10[2])(v10, v13, 0);
        goto LABEL_12;
      }
    }
  }
LABEL_13:
  if (objc_msgSend(v4, "isAdvToBrowserConnection"))
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "advToBrowserNwToSFendpoints"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "remoteEndpoint"));
    objc_msgSend(v17, "removeObjectForKey:", v18);

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "remoteUniqueIDString"));
    v20 = v19 == 0;

    if (!v20)
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "advToBrowserUuidToSFendpoints"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "remoteUniqueIDString"));
      objc_msgSend(v21, "removeObjectForKey:", v22);

    }
    objc_msgSend(WeakRetained, "_updateAdvertiserState");
  }
  else
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "browserToAdvNwToSFendpoints"));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "remoteEndpoint"));
    objc_msgSend(v23, "removeObjectForKey:", v24);

    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "remoteUniqueIDString"));
    v26 = v25 == 0;

    if (!v26)
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "browserToAdvUuidToSFendpoints"));
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "remoteUniqueIDString"));
      objc_msgSend(v27, "removeObjectForKey:", v28);

    }
    objc_msgSend(WeakRetained, "_updateBrowserState");
  }
LABEL_20:

}

void sub_1002689F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v3;

  _Unwind_Resume(a1);
}

void sub_100268AE0(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  _BOOL4 v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  BOOL v15;
  void (**v16)(_QWORD, _QWORD, _QWORD);
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  BOOL v25;
  void (**v26)(_QWORD, _QWORD, _QWORD);
  id v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  BOOL v32;
  void (**v33)(_QWORD, _QWORD, _QWORD);
  id v34;
  void *v35;
  id v36;
  void *v37;
  BOOL v38;
  void (**v39)(_QWORD, _QWORD);
  id v40;
  void *v41;
  id v42;
  void *v43;
  BOOL v44;
  void *v45;
  void (**v46)(_QWORD, _QWORD, _QWORD);
  id v47;
  void *v48;
  id v49;
  NSObject *v50;
  uint64_t v51;
  uint8_t buf[4];
  void *v53;
  __int16 v54;
  void *v55;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = objc_loadWeakRetained((id *)(a1 + 40));
  v6 = v5;
  if (WeakRetained && v5)
  {
    v51 = 0;
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", v3, 0, &v51, 0));
    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "remoteUniqueIDString"));
      v9 = v8 == 0;

      v10 = qword_100999980;
      if (v9)
      {
        if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_ERROR))
          sub_1006D55B4();
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          v53 = v7;
          v54 = 2112;
          v55 = v6;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourService] Received browser endpoint message %@ from endpoint %@", buf, 0x16u);
        }
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("BTVCBonjourServiceMessageType")));
        if (objc_msgSend(v11, "isEqualToString:", CFSTR("BTVCBonjourServiceMessageTypeStartAdvertiseData")))
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "remoteAdvDataSet"));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("BTVCBonjourServiceMessageValue")));
          objc_msgSend(v12, "addObjectsFromArray:", v13);

          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deviceFoundHandler"));
          v15 = v14 == 0;

          if (!v15)
          {
            v16 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deviceFoundHandler"));
            v17 = objc_alloc((Class)NSUUID);
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "remoteUniqueIDString"));
            v19 = objc_msgSend(v17, "initWithUUIDString:", v18);
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("BTVCBonjourServiceMessageValue")));
            ((void (**)(_QWORD, id, void *))v16)[2](v16, v19, v20);

          }
        }
        else if (objc_msgSend(v11, "isEqualToString:", CFSTR("BTVCBonjourServiceMessageTypeStopAdvertiseData")))
        {
          v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "remoteAdvDataSet"));
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("BTVCBonjourServiceMessageValue")));
          v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v22));
          objc_msgSend(v21, "minusSet:", v23);

          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deviceLostHandler"));
          v25 = v24 == 0;

          if (!v25)
          {
            v26 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deviceLostHandler"));
            v27 = objc_alloc((Class)NSUUID);
            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "remoteUniqueIDString"));
            v29 = objc_msgSend(v27, "initWithUUIDString:", v28);
            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("BTVCBonjourServiceMessageValue")));
            ((void (**)(_QWORD, id, void *))v26)[2](v26, v29, v30);

          }
        }
        else if (objc_msgSend(v11, "isEqualToString:", CFSTR("BTVCBonjourServiceMessageTypeConnect")))
        {
          objc_msgSend(v6, "setIsConnected:", 1);
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deviceDidConnectHandler"));
          v32 = v31 == 0;

          if (!v32)
          {
            v33 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deviceDidConnectHandler"));
            v34 = objc_alloc((Class)NSUUID);
            v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "remoteUniqueIDString"));
            v36 = objc_msgSend(v34, "initWithUUIDString:", v35);
            ((void (**)(_QWORD, id, _QWORD))v33)[2](v33, v36, 0);

          }
        }
        else if (objc_msgSend(v11, "isEqualToString:", CFSTR("BTVCBonjourServiceMessageTypeDisconnect")))
        {
          objc_msgSend(v6, "setIsConnected:", 0);
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deviceDidDisconnectHandler"));
          v38 = v37 == 0;

          if (!v38)
          {
            v39 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deviceDidDisconnectHandler"));
            v40 = objc_alloc((Class)NSUUID);
            v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "remoteUniqueIDString"));
            v42 = objc_msgSend(v40, "initWithUUIDString:", v41);
            ((void (**)(_QWORD, id))v39)[2](v39, v42);

          }
        }
        else if (objc_msgSend(v11, "isEqualToString:", CFSTR("BTVCBonjourServiceMessageTypeDataPacket")))
        {
          v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deviceDidReceiveDataHandler"));
          v44 = v43 == 0;

          if (!v44)
          {
            v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("BTVCBonjourServiceMessageValue")));
            v46 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "deviceDidReceiveDataHandler"));
            v47 = objc_alloc((Class)NSUUID);
            v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "remoteUniqueIDString"));
            v49 = objc_msgSend(v47, "initWithUUIDString:", v48);
            ((void (**)(_QWORD, id, void *))v46)[2](v46, v49, v45);

          }
        }
        else
        {
          v50 = qword_100999980;
          if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v53 = v11;
            _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "[BTVCBonjourService] BTVCBonjourService unknown message type:%@", buf, 0xCu);
          }
        }

      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_ERROR))
    {
      sub_1006D554C();
    }

  }
}

void sub_1002690C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v10 = v6;

  _Unwind_Resume(a1);
}

void sub_100269470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v7;

  _Unwind_Resume(a1);
}

void sub_1002694DC(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);

}

void sub_100269520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10026965C(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  NSErrorUserInfoKey v7;
  const __CFString *v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v3 = WeakRetained;
  if (WeakRetained)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "_endpointForUniqueID:", *(_QWORD *)(a1 + 32)));
    if (v4 && *(_QWORD *)(a1 + 40) && *(_QWORD *)(a1 + 48))
    {
      objc_msgSend(v3, "_sendMessage:withType:toEndpoint:completionCallback:");
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_ERROR))
        sub_1006D567C();
      if (*(_QWORD *)(a1 + 56))
      {
        v7 = NSLocalizedDescriptionKey;
        v8 = CFSTR("Unable to send message, invalid params");
        v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v8, &v7, 1));
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSOSStatusErrorDomain, -6705, v5));

        (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
      }
    }

  }
}

void sub_1002697C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100269920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_10026997C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  id v9;
  uint64_t v10;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100269AB0;
  v7[3] = &unk_100920270;
  v6 = *(_QWORD *)(a1 + 48);
  v9 = *(id *)(a1 + 56);
  v8 = *(id *)(a1 + 40);
  objc_msgSend(v4, "_sendMessage:withType:toDevice:completionCallback:", v5, v6, v3, v7);

}

void sub_100269A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_100269AB0(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  if (v4)
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (v3)
      (*(void (**)(uint64_t, _QWORD, id))(v3 + 16))(v3, *(_QWORD *)(a1 + 32), v4);
  }

}

void sub_100269AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100269BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_100269BE0(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  id v8;

  v8 = a2;
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "UUIDString"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_endpointForUniqueID:", v4));

  if (!v8)
    objc_msgSend(v5, "setIsConnected:", 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceDidConnectHandler"));

  if (v6)
  {
    v7 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceDidConnectHandler"));
    ((void (**)(_QWORD, _QWORD, id))v7)[2](v7, *(_QWORD *)(a1 + 40), v8);

  }
}

void sub_100269C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_100269D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_100269D9C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void (**v5)(_QWORD, _QWORD);
  void *v6;
  unsigned __int8 v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  id v9;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "UUIDString"));
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_endpointForUniqueID:", v3));

  objc_msgSend(v9, "setIsConnected:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceDidDisconnectHandler"));

  if (v4)
  {
    v5 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceDidDisconnectHandler"));
    v5[2](v5, *(_QWORD *)(a1 + 40));

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceLostHandler"));
  if (v6)
  {
    v7 = objc_msgSend(v9, "isAdvToBrowserConnection");

    if ((v7 & 1) == 0)
    {
      v8 = (void (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deviceLostHandler"));
      v8[2](v8, *(_QWORD *)(a1 + 40), 0);

    }
  }

}

void sub_100269E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100269FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_100269FF8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a2;
  if (v3 && os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_ERROR))
    sub_1006D56EC();
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);

}

void sub_10026A070(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10026A0FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_10026A208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_10026A284(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_stopBrowser");
  return objc_msgSend(*(id *)(a1 + 32), "_stopAdvertising");
}

void sub_10026A55C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

uint64_t sub_10026A568(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t v5;

  if ((result & 1) != 0)
    v4 = v5;
  *(float *)a3 = a4;
  *(_QWORD *)(a3 + 4) = v4;
  *(_WORD *)(a3 + 12) = 2112;
  *(_QWORD *)(a3 + 14) = a2;
  return result;
}

void sub_10026A5A4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x20u);
}

uint64_t sub_10026A5D0(uint64_t a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)(sub_1000160D0(a1) + 64);
  sub_1005C5C20(v2);
  *(_DWORD *)(a1 + 96) = 0;
  sub_100091AE8((_QWORD *)(a1 + 104), "");
  *(_QWORD *)(a1 + 128) = 0;
  sub_1005C5C20((_QWORD *)(a1 + 152));
  sub_1005D3E2C(a1 + 192);
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 275) = 0;
  sub_1005C5C20((_QWORD *)(a1 + 280));
  *(_DWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 308) = 0;
  sub_1000160D0(a1 + 320);
  *(_QWORD *)(a1 + 384) = 0;
  sub_1005C5CFC(v2);
  *(_WORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 90) = 0;
  std::string::assign((std::string *)(a1 + 104), "");
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 138) = 0;
  *(_DWORD *)(a1 + 140) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  sub_1005C5CFC((uint64_t *)(a1 + 152));
  *(_WORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  sub_1005D4514(a1 + 192);
  if (*(char *)(a1 + 271) < 0)
  {
    **(_BYTE **)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 248) = 0;
    *(_BYTE *)(a1 + 271) = 0;
  }
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  sub_1005C5CFC((uint64_t *)(a1 + 280));
  return a1;
}

void sub_10026A708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void **v5;
  va_list va;

  va_start(va, a2);
  sub_10026BD18((void ***)va);
  if (*(char *)(v2 + 271) < 0)
    operator delete(*v5);
  sub_1005D4204(v4);
  sub_10026BD18((void ***)va);

  if (*(char *)(v2 + 127) < 0)
    operator delete(*v3);
  sub_10026BD18((void ***)va);
  sub_100069BDC(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10026A7B4(uint64_t a1)
{
  void **v3;

  sub_10026A8B0(a1);

  sub_100069BDC(a1 + 320);
  v3 = (void **)(a1 + 280);
  sub_10026BD18(&v3);
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  sub_1005D4204(a1 + 192);
  v3 = (void **)(a1 + 152);
  sub_10026BD18(&v3);

  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  v3 = (void **)(a1 + 64);
  sub_10026BD18(&v3);
  return sub_100069BDC(a1);
}

void sub_10026A854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  sub_100069BDC(v10 + 320);
  a10 = (void **)(v10 + 280);
  sub_10026BD18(&a10);
  if (*(char *)(v10 + 271) < 0)
    operator delete(*(void **)(v10 + 248));
  sub_1006D57E4(v10);
  a10 = (void **)(v10 + 64);
  sub_10026BD18(&a10);
  sub_100069BDC(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_10026A8B0(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  uint8_t v7[16];
  uint8_t buf[8];
  uint64_t v9;

  if (*(_QWORD *)(a1 + 312))
  {
    v2 = qword_100999808;
    if (!os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_INFO)
      || (*(_WORD *)buf = 0,
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Deleting pending sco route change", buf, 2u),
          *(_QWORD *)(a1 + 312)))
    {
      operator delete();
    }
    *(_QWORD *)(a1 + 312) = 0;
  }
  *(_QWORD *)buf = 0;
  v9 = 0;
  sub_10003415C((uint64_t)buf, a1 + 320);
  v3 = *(void **)(a1 + 384);
  if (v3)
  {
    v4 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Canceling pending Disconnection timeout dispatch", v7, 2u);
      v3 = *(void **)(a1 + 384);
    }
    dispatch_block_cancel(v3);
    v5 = *(void **)(a1 + 384);
    *(_QWORD *)(a1 + 384) = 0;

  }
  return sub_100034234((uint64_t)buf);
}

_QWORD *sub_10026A9C4@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;

  v4 = *a1;
  if (v4 > 2)
    v5 = "unknown";
  else
    v5 = off_100920328[v4];
  return sub_100091AE8(a2, v5);
}

_QWORD *sub_10026A9F4@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;

  v4 = *a1;
  if (v4 > 3)
    v5 = "unknown";
  else
    v5 = off_100920340[v4];
  return sub_100091AE8(a2, v5);
}

const char *sub_10026AA24(int *a1)
{
  uint64_t v1;

  v1 = *a1;
  if (v1 > 7)
    return "Unknown";
  else
    return off_100920360[v1];
}

uint64_t sub_10026AA4C(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 88) = a2;
  return result;
}

uint64_t sub_10026AA54(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 88);
}

uint64_t sub_10026AA5C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 90) = a2;
  return result;
}

uint64_t sub_10026AA64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 90);
}

char *sub_10026AA6C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[127] < 0)
    return (char *)sub_10003430C((_BYTE *)a2, *((void **)result + 13), *((_QWORD *)result + 14));
  *(_OWORD *)a2 = *(_OWORD *)(result + 104);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 15);
  return result;
}

uint64_t sub_10026AA98(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

std::string *sub_10026AAA0(uint64_t a1, uint64_t a2)
{
  std::string *result;

  result = std::string::operator=((std::string *)(a1 + 104), (const std::string *)(a2 + 8));
  *(_DWORD *)(a1 + 96) = *(_DWORD *)a2;
  return result;
}

id sub_10026AAD4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 128), "service");
}

id sub_10026AADC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 128), "roaming");
}

void sub_10026AAE4(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(a1 + 128), a2);
}

BOOL sub_10026AAEC(uint64_t a1)
{
  return sub_1005C6160((_QWORD *)(a1 + 64));
}

BOOL sub_10026AAF4(uint64_t a1)
{
  return sub_1005C612C((_QWORD *)(a1 + 64));
}

BOOL sub_10026AAFC(uint64_t a1)
{
  return sub_1005C61C8((_QWORD *)(a1 + 64));
}

BOOL sub_10026AB04(uint64_t a1)
{
  return sub_1005C6194((_QWORD *)(a1 + 64));
}

uint64_t sub_10026AB0C(uint64_t a1)
{
  return sub_1005C60C0((uint64_t *)(a1 + 64));
}

uint64_t sub_10026AB14(uint64_t a1)
{
  return sub_1005C60F4((uint64_t *)(a1 + 64));
}

uint64_t sub_10026AB1C(uint64_t a1)
{
  return sub_1005C608C((uint64_t *)(a1 + 64));
}

uint64_t sub_10026AB24(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 138);
}

uint64_t sub_10026AB2C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 138) = a2;
  return result;
}

uint64_t sub_10026AB34@<X0>(int a1@<W8>)
{
  return sub_1005C5CA8(a1);
}

void sub_10026AB40(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = a1 + 152;
  if ((uint64_t *)v2 != a2)
    sub_10026BDD4(v2, *a2, a2[1], 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
}

uint64_t sub_10026AB78(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 176);
}

uint64_t sub_10026AB80(uint64_t result, char a2)
{
  *(_BYTE *)(result + 176) = a2;
  return result;
}

uint64_t sub_10026AB88(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 273);
}

uint64_t sub_10026AB90(uint64_t result, char a2)
{
  *(_BYTE *)(result + 273) = a2;
  return result;
}

uint64_t sub_10026AB98(uint64_t result, char a2)
{
  *(_BYTE *)(result + 274) = a2;
  return result;
}

uint64_t sub_10026ABA0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 274);
}

std::string *sub_10026ABA8(uint64_t a1)
{
  std::string *result;

  *(_DWORD *)(a1 + 180) = 0;
  result = sub_1005D4514(a1 + 192);
  if (*(char *)(a1 + 271) < 0)
  {
    **(_BYTE **)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 248) = 0;
    *(_BYTE *)(a1 + 271) = 0;
  }
  *(_DWORD *)(a1 + 184) = 0;
  return result;
}

std::string *sub_10026ABF4(uint64_t a1, uint64_t a2, const std::string *a3, int a4)
{
  std::string *result;

  sub_1005D4228((std::string *)(a1 + 192), a2);
  result = std::string::operator=((std::string *)(a1 + 248), a3);
  *(_DWORD *)(a1 + 180) = a4;
  return result;
}

BOOL sub_10026AC38(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 180) == a2;
}

uint64_t sub_10026AC48(uint64_t result)
{
  ++*(_DWORD *)(result + 184);
  return result;
}

uint64_t sub_10026AC58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 184) = a2;
  return result;
}

uint64_t sub_10026AC60(uint64_t a1)
{
  return *(unsigned int *)(a1 + 184);
}

std::string *sub_10026AC68@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  return sub_1005D435C(a1 + 192, a2);
}

char *sub_10026AC70@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[271] < 0)
    return (char *)sub_10003430C((_BYTE *)a2, *((void **)result + 31), *((_QWORD *)result + 32));
  *(_OWORD *)a2 = *(_OWORD *)(result + 248);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 33);
  return result;
}

uint64_t sub_10026AC9C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 216);
}

uint64_t sub_10026ACA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 144) = a2;
  return result;
}

uint64_t sub_10026ACAC(uint64_t a1, int a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_DWORD *)(a1 + 140) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_10026ACF0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned int *)(a1 + 140);
  sub_100034234((uint64_t)v4);
  return v2;
}

BOOL sub_10026AD34(uint64_t a1, int a2)
{
  return *(_DWORD *)(a1 + 140) == a2;
}

uint64_t sub_10026AD44(uint64_t result, char a2)
{
  *(_BYTE *)(result + 136) = a2;
  return result;
}

uint64_t sub_10026AD4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 136);
}

uint64_t sub_10026AD54(uint64_t result, char a2)
{
  *(_BYTE *)(result + 137) = a2;
  return result;
}

uint64_t sub_10026AD5C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 137);
}

uint64_t sub_10026AD64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 272);
}

uint64_t sub_10026AD6C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 272) = a2;
  return result;
}

uint64_t sub_10026AD74(uint64_t result, char a2)
{
  *(_BYTE *)(result + 177) = a2;
  return result;
}

uint64_t sub_10026AD7C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 177);
}

uint64_t sub_10026AD84@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  sub_1005C5CA8(a2);
  return sub_100034234((uint64_t)v4);
}

void sub_10026ADD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10026ADE4(uint64_t a1, uint64_t *a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  if ((uint64_t *)(a1 + 64) != a2)
    sub_10026BDD4(a1 + 64, *a2, a2[1], 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  return sub_100034234((uint64_t)v5);
}

void sub_10026AE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_10026AE68(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1);
  v4 = a1 + 64;
  v5 = sub_1005C5FEC((uint64_t *)(a1 + 64), a2);
  v6 = v5;
  if ((uint64_t *)v4 == a2)
    v7 = 1;
  else
    v7 = v5;
  if ((v7 & 1) == 0)
    sub_10026BDD4(v4, *a2, a2[1], 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  sub_100034234((uint64_t)v9);
  return v6;
}

void sub_10026AEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10026AF10(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 12);
}

void sub_10026AF18(uint64_t a1)
{
  NSObject *v2;
  uint8_t buf[16];

  v2 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Set pending sco route change", buf, 2u);
  }
  sub_10026A8B0(a1);
  operator new();
}

uint64_t sub_10026B060(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;

  if (*(_QWORD *)(result + 40))
  {
    v1 = *(_QWORD *)(result + 32);
    result = sub_10026B0C0(v1);
    if (result)
    {
      v2 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_ERROR))
        sub_1006D5838(v2);
      return sub_10026A8B0(v1);
    }
  }
  return result;
}

uint64_t sub_10026B0C0(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  int v5;
  const char *v6;

  v2 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_INFO))
  {
    if (*(_QWORD *)(a1 + 312))
      v3 = "true";
    else
      v3 = "false";
    v5 = 136446210;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Getting pending sco route change %{public}s", (uint8_t *)&v5, 0xCu);
  }
  return *(_QWORD *)(a1 + 312);
}

void sub_10026B180(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  BOOL v9;
  NSObject *v10;
  uint64_t *v11;
  NSObject *v12;
  void **v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  void **v20;

  if (sub_10026B0C0(a1))
  {
    v2 = *(unsigned int **)(a1 + 312);
    v3 = *v2;
    v4 = v2[1];
    v5 = v2[2];
    v6 = *((unsigned __int16 *)v2 + 6);
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_100920308);
    v7 = sub_1004D1420((uint64_t)off_10097AA38, v6);
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_100920308);
    v8 = sub_1004CCD90((uint64_t)off_10097AA38, v6);
    if (v7)
      v9 = v8 == 0;
    else
      v9 = 1;
    if (v9)
    {
      v10 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Audio device has already disconnected, cannot retry route change", (uint8_t *)__p, 2u);
      }
    }
    else
    {
      v11 = v8;
      sub_10026A8B0(a1);
      v12 = qword_100999808;
      if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043F6EC(v7, (uint64_t)__p);
        v14 = v16 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 141558275;
        v18 = 1752392040;
        v19 = 2081;
        v20 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Retrying sco route change to device %{private, mask.hash}s", buf, 0x16u);
        if (v16 < 0)
          operator delete(__p[0]);
      }
      if (qword_10097AA40 != -1)
        dispatch_once(&qword_10097AA40, &stru_100920308);
      (*(void (**)(void *, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)off_10097AA38 + 136))(off_10097AA38, v11, v3, v4, v5);
    }
  }
}

uint64_t sub_10026B3AC(uint64_t a1, char a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  *(_BYTE *)(a1 + 275) = a2;
  return sub_100034234((uint64_t)v5);
}

uint64_t sub_10026B3F0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  v2 = *(unsigned __int8 *)(a1 + 275);
  sub_100034234((uint64_t)v4);
  return v2;
}

uint64_t sub_10026B434@<X0>(uint64_t a1@<X0>, int a2@<W8>)
{
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1);
  sub_1005C5CA8(a2);
  return sub_100034234((uint64_t)v4);
}

void sub_10026B480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10026B494(uint64_t a1, uint64_t *a2)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1);
  if ((uint64_t *)(a1 + 280) != a2)
    sub_10026BDD4(a1 + 280, *a2, a2[1], 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  return sub_100034234((uint64_t)v5);
}

void sub_10026B504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10026B518(uint64_t a1)
{
  return *(unsigned int *)(a1 + 304);
}

uint64_t sub_10026B520(uint64_t result, int a2)
{
  *(_DWORD *)(result + 304) = a2;
  return result;
}

uint64_t sub_10026B528(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 308);
}

uint64_t sub_10026B530(uint64_t result, char a2)
{
  *(_BYTE *)(result + 308) = a2;
  return result;
}

double sub_10026B538(uint64_t a1, uint64_t a2, __int16 a3, int *a4)
{
  double result;
  int v5;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_WORD *)(a1 + 40) = a3;
  *(_WORD *)(a1 + 70) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  *(_BYTE *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 73) = 0;
  *(_BYTE *)(a1 + 81) = 0;
  *(_DWORD *)(a1 + 88) = 1;
  *(_BYTE *)(a1 + 92) = 0;
  *(_QWORD *)&result = 0x100000040;
  *(_OWORD *)(a1 + 108) = xmmword_10073CE30;
  *(_DWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 132) = 0;
  v5 = *a4;
  *(_WORD *)(a1 + 46) = *((_WORD *)a4 + 2);
  *(_DWORD *)(a1 + 42) = v5;
  *(_WORD *)(a1 + 82) = 0;
  *(_BYTE *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 69) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 170) = 0;
  *(_BYTE *)(a1 + 140) = 0;
  *(_DWORD *)(a1 + 100) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  return result;
}

uint64_t sub_10026B5C8(uint64_t a1)
{
  sub_10058DFF8(a1);
  return a1;
}

uint64_t sub_10026B5EC(uint64_t a1)
{
  uint64_t v1;
  int v3;
  __int128 v5;
  void *v6[2];
  __int128 v7;
  void *v8[2];
  __int128 v9;
  void *__p[2];
  _OWORD v11[3];
  __int128 v12;
  uint64_t v13;

  v13 = 0;
  v12 = 0u;
  memset(v11, 0, sizeof(v11));
  v9 = 0u;
  *(_OWORD *)__p = 0u;
  v7 = 0u;
  *(_OWORD *)v8 = 0u;
  v5 = 0u;
  *(_OWORD *)v6 = 0u;
  sub_1005BCCCC((uint64_t)&v5 + 1);
  BYTE2(v6[0]) = 0;
  BYTE4(v6[0]) = 0;
  BYTE2(v8[0]) = 0;
  BYTE4(v8[0]) = 0;
  DWORD1(v11[1]) = 0;
  v7 = 0uLL;
  v6[1] = 0;
  LOBYTE(v8[0]) = 0;
  v9 = 0uLL;
  v8[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v11, 0, 19);
  __p[1] = 0;
  BYTE8(v11[1]) = 1;
  BYTE2(v13) = 0;
  *(_QWORD *)((char *)&v11[1] + 14) = 0;
  *(_QWORD *)((char *)&v11[1] + 9) = 0;
  v12 = 0uLL;
  *((_QWORD *)&v11[2] + 1) = 0;
  LOBYTE(v13) = 0;
  LODWORD(a1) = sub_1004419F4(*(_QWORD *)(a1 + 32), (uint64_t)&v5);
  v3 = BYTE2(v11[1]);
  if (SHIBYTE(v11[0]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[1]);
  if (SHIBYTE(v7) < 0)
    operator delete(v6[1]);
  if (v3)
    a1 = a1;
  else
    a1 = 0;
  nullsub_90((char *)&v5 + 1, v1);
  return a1;
}

void sub_10026B720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10026B73C((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_10026B73C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  nullsub_90(a1 + 1, a2);
  return a1;
}

uint64_t sub_10026B794(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v3;
  unsigned int v4;
  uint64_t v5;
  __int128 v7;
  void *v8[2];
  __int128 v9;
  void *v10[2];
  __int128 v11;
  void *__p[2];
  _OWORD v13[3];
  __int128 v14;
  uint64_t v15;

  v15 = 0;
  v14 = 0u;
  memset(v13, 0, sizeof(v13));
  v11 = 0u;
  *(_OWORD *)__p = 0u;
  v9 = 0u;
  *(_OWORD *)v10 = 0u;
  v7 = 0u;
  *(_OWORD *)v8 = 0u;
  sub_1005BCCCC((uint64_t)&v7 + 1);
  BYTE2(v8[0]) = 0;
  BYTE4(v8[0]) = 0;
  BYTE2(v10[0]) = 0;
  BYTE4(v10[0]) = 0;
  DWORD1(v13[1]) = 0;
  v9 = 0uLL;
  v8[1] = 0;
  LOBYTE(v10[0]) = 0;
  v11 = 0uLL;
  v10[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v13, 0, 19);
  __p[1] = 0;
  BYTE8(v13[1]) = 1;
  BYTE2(v15) = 0;
  *(_QWORD *)((char *)&v13[1] + 14) = 0;
  *(_QWORD *)((char *)&v13[1] + 9) = 0;
  v14 = 0uLL;
  *((_QWORD *)&v13[2] + 1) = 0;
  LOBYTE(v15) = 0;
  v3 = sub_1004419F4(*(_QWORD *)(a1 + 32), (uint64_t)&v7);
  v4 = DWORD1(v13[1]);
  if (SHIBYTE(v13[0]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(v11) < 0)
    operator delete(v10[1]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[1]);
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  nullsub_90((char *)&v7 + 1, v2);
  return v5;
}

void sub_10026B8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10026B73C((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_10026B8E4(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 40);
}

uint64_t sub_10026B8EC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_10026B8F4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = a2;
  return result;
}

uint64_t sub_10026B8FC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

unint64_t sub_10026B904(uint64_t a1)
{
  return *(unsigned int *)(a1 + 42) | ((unint64_t)*(unsigned __int16 *)(a1 + 46) << 32);
}

uint64_t sub_10026B914(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_10026B91C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 56) = a2;
  return result;
}

uint64_t sub_10026B924(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 60);
}

uint64_t sub_10026B92C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 60) = a2;
  return result;
}

uint64_t sub_10026B934(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 61);
}

uint64_t sub_10026B93C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 61) = a2;
  return result;
}

uint64_t sub_10026B944(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 62);
}

uint64_t sub_10026B94C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 62) = a2;
  return result;
}

uint64_t sub_10026B954(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 63);
}

uint64_t sub_10026B95C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 63) = a2;
  return result;
}

uint64_t sub_10026B964(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t sub_10026B96C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 64) = a2;
  return result;
}

uint64_t sub_10026B974(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 65);
}

uint64_t sub_10026B97C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 65) = a2;
  return result;
}

uint64_t sub_10026B984(uint64_t result, char a2)
{
  *(_BYTE *)(result + 66) = a2;
  return result;
}

uint64_t sub_10026B98C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 68);
}

uint64_t sub_10026B994(uint64_t result, char a2)
{
  *(_BYTE *)(result + 68) = a2;
  if ((a2 & 1) == 0)
    *(_BYTE *)(result + 69) = 0;
  return result;
}

uint64_t sub_10026B9A4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 69) = a2;
  return result;
}

uint64_t sub_10026B9AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 69);
}

uint64_t sub_10026B9B4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 67);
}

uint64_t sub_10026B9BC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 67) = a2;
  return result;
}

uint64_t sub_10026B9C4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 72);
}

uint64_t sub_10026B9CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 73);
}

uint64_t sub_10026B9D4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 73) = a2;
  return result;
}

uint64_t sub_10026B9DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 74);
}

uint64_t sub_10026B9E4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 74) = a2;
  return result;
}

uint64_t sub_10026B9EC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 75);
}

uint64_t sub_10026B9F4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 75) = a2;
  return result;
}

uint64_t sub_10026B9FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 76);
}

uint64_t sub_10026BA04(uint64_t result, char a2)
{
  *(_BYTE *)(result + 76) = a2;
  return result;
}

uint64_t sub_10026BA0C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 79);
}

uint64_t sub_10026BA14(uint64_t result, char a2)
{
  *(_BYTE *)(result + 79) = a2;
  return result;
}

uint64_t sub_10026BA1C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t sub_10026BA24(uint64_t result, char a2)
{
  *(_BYTE *)(result + 80) = a2;
  return result;
}

uint64_t sub_10026BA2C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 77);
}

uint64_t sub_10026BA34(uint64_t result, char a2)
{
  *(_BYTE *)(result + 77) = a2;
  return result;
}

uint64_t sub_10026BA3C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 78);
}

uint64_t sub_10026BA44(uint64_t result, char a2)
{
  *(_BYTE *)(result + 78) = a2;
  return result;
}

uint64_t sub_10026BA4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 81);
}

uint64_t sub_10026BA54(uint64_t result, char a2)
{
  *(_BYTE *)(result + 81) = a2;
  return result;
}

uint64_t sub_10026BA5C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 101);
}

uint64_t sub_10026BA64(uint64_t result, char a2)
{
  *(_BYTE *)(result + 101) = a2;
  return result;
}

uint64_t sub_10026BA6C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 102);
}

uint64_t sub_10026BA74(uint64_t result, char a2)
{
  *(_BYTE *)(result + 102) = a2;
  return result;
}

uint64_t sub_10026BA7C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 100);
}

uint64_t sub_10026BA84(uint64_t result, char a2)
{
  *(_BYTE *)(result + 100) = a2;
  return result;
}

uint64_t sub_10026BA8C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 140);
}

uint64_t sub_10026BA94(uint64_t result, char a2)
{
  *(_BYTE *)(result + 140) = a2;
  return result;
}

uint64_t sub_10026BA9C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t sub_10026BAA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 88) = a2;
  return result;
}

uint64_t sub_10026BAAC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 92);
}

uint64_t sub_10026BAB4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 92) = a2;
  return result;
}

uint64_t sub_10026BABC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 70) = a2;
  return result;
}

uint64_t sub_10026BAC4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 70);
}

uint64_t sub_10026BACC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 71);
}

uint64_t sub_10026BAD4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 170) = a2;
  return result;
}

uint64_t sub_10026BADC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 170);
}

uint64_t sub_10026BAE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 96) = a2;
  return result;
}

uint64_t sub_10026BAEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 112) = a2;
  return result;
}

uint64_t sub_10026BAF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 116) = a2;
  return result;
}

uint64_t sub_10026BAFC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 116);
}

uint64_t sub_10026BB04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 120) = a2;
  return result;
}

uint64_t sub_10026BB0C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t sub_10026BB14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 128) = a2;
  return result;
}

uint64_t sub_10026BB1C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

uint64_t sub_10026BB24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 124) = a2;
  return result;
}

uint64_t sub_10026BB2C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 124);
}

uint64_t sub_10026BB34(uint64_t result, char a2)
{
  *(_BYTE *)(result + 132) = a2;
  return result;
}

uint64_t sub_10026BB3C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 132);
}

uint64_t sub_10026BB44(uint64_t result, char a2)
{
  *(_BYTE *)(result + 82) = a2;
  return result;
}

uint64_t sub_10026BB4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 136) = a2;
  return result;
}

uint64_t sub_10026BB54(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t sub_10026BB5C(uint64_t a1)
{
  uint64_t v1;
  int v3;
  __int128 v5;
  void *v6[2];
  __int128 v7;
  void *v8[2];
  __int128 v9;
  void *__p[2];
  _OWORD v11[3];
  __int128 v12;
  uint64_t v13;

  v13 = 0;
  v12 = 0u;
  memset(v11, 0, sizeof(v11));
  v9 = 0u;
  *(_OWORD *)__p = 0u;
  v7 = 0u;
  *(_OWORD *)v8 = 0u;
  v5 = 0u;
  *(_OWORD *)v6 = 0u;
  sub_1005BCCCC((uint64_t)&v5 + 1);
  BYTE2(v6[0]) = 0;
  BYTE4(v6[0]) = 0;
  BYTE2(v8[0]) = 0;
  BYTE4(v8[0]) = 0;
  DWORD1(v11[1]) = 0;
  v7 = 0uLL;
  v6[1] = 0;
  LOBYTE(v8[0]) = 0;
  v9 = 0uLL;
  v8[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v11, 0, 19);
  __p[1] = 0;
  BYTE8(v11[1]) = 1;
  BYTE2(v13) = 0;
  *(_QWORD *)((char *)&v11[1] + 14) = 0;
  *(_QWORD *)((char *)&v11[1] + 9) = 0;
  v12 = 0uLL;
  *((_QWORD *)&v11[2] + 1) = 0;
  LOBYTE(v13) = 0;
  LODWORD(a1) = sub_1004419F4(*(_QWORD *)(a1 + 32), (uint64_t)&v5);
  v3 = BYTE11(v11[1]);
  if (SHIBYTE(v11[0]) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[1]);
  if (SHIBYTE(v7) < 0)
    operator delete(v6[1]);
  if (v3)
    a1 = a1;
  else
    a1 = 0;
  nullsub_90((char *)&v5 + 1, v1);
  return a1;
}

void sub_10026BC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10026B73C((uint64_t)&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t sub_10026BCAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 144);
}

__n128 sub_10026BCB4(uint64_t a1, __n128 *a2)
{
  __n128 result;

  if ((__n128 *)(a1 + 152) != a2)
  {
    result = *a2;
    *(__n128 *)(a1 + 152) = *a2;
  }
  return result;
}

__n128 sub_10026BCCC@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)(a1 + 152);
  *a2 = result;
  return result;
}

uint64_t sub_10026BCD8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 169) = a2;
  return result;
}

uint64_t sub_10026BCE0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 169);
}

uint64_t sub_10026BCE8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 103) = a2;
  return result;
}

uint64_t sub_10026BCF0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 103);
}

uint64_t sub_10026BCF8(uint64_t result)
{
  ++*(_BYTE *)(result + 104);
  return result;
}

uint64_t sub_10026BD08(uint64_t result)
{
  *(_BYTE *)(result + 104) = 0;
  return result;
}

uint64_t sub_10026BD10(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 104);
}

void sub_10026BD18(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        sub_10026BD9C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10026BD9C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 103) < 0)
    operator delete(*(void **)(a2 + 80));
  sub_1005D4204(a2 + 24);

}

void sub_10026BDD4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  id *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  v8 = a1 + 16;
  v9 = *(id **)a1;
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= a4)
  {
    if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) >= a4)
    {
      sub_10026C154((int)&v17, a2, a3, v9);
      v14 = v13;
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 != v13)
      {
        do
        {
          v15 -= 104;
          sub_10026BD9C(v8, v15);
        }
        while (v15 != v14);
      }
      *(_QWORD *)(a1 + 8) = v14;
    }
    else
    {
      v12 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
      sub_10026C154((int)&v16, a2, v12, v9);
      sub_10026BF80(a1, v12, a3);
    }
  }
  else
  {
    sub_10026BFF0((void **)a1);
    if (a4 > 0x276276276276276)
      abort();
    v10 = 0x9D89D89D89D89D8ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x13B13B13B13B13BLL)
      v11 = 0x276276276276276;
    else
      v11 = v10;
    sub_10026C05C((_QWORD *)a1, v11);
    sub_10026BF80(a1, a2, a3);
  }
}

uint64_t sub_10026BF80(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      result = sub_10026C0AC(v4 + v7, a2 + v7);
      v7 += 104;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(_QWORD *)(v3 + 8) = v4;
  return result;
}

void sub_10026BFE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10026BFF0(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 104;
        sub_10026BD9C((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_10026C05C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x276276276276277)
    abort();
  result = (char *)sub_1000B5ED0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[104 * v4];
  return result;
}

uint64_t sub_10026C0AC(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  __int128 v5;

  *(_QWORD *)a1 = *(id *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  sub_1005D4200((void *)(a1 + 24));
  v4 = (_BYTE *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    sub_10003430C(v4, *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)v4 = v5;
  }
  return a1;
}

void sub_10026C130(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  sub_1005D4204(v2);

  _Unwind_Resume(a1);
}

uint64_t sub_10026C154(int a1, uint64_t a2, uint64_t a3, id *location)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    objc_storeStrong(location, *(id *)v5);
    v7 = *(void **)(v5 + 8);
    *((_DWORD *)location + 4) = *(_DWORD *)(v5 + 16);
    location[1] = v7;
    sub_1005D4228((std::string *)location + 1, v5 + 24);
    std::string::operator=((std::string *)(location + 10), (const std::string *)(v5 + 80));
    location += 13;
    v5 += 104;
  }
  while (v5 != v6);
  return v6;
}

void sub_10026C1DC(id a1)
{
  operator new();
}

void sub_10026C21C()
{
  operator delete();
}

xpc_connection_t *sub_10026C240(xpc_connection_t *a1, _xpc_connection_s *a2, _xpc_connection_s *name, _xpc_connection_s *targetq)
{
  _xpc_connection_s *mach_service;
  _QWORD handler[5];

  *a1 = a2;
  a1[1] = name;
  a1[2] = targetq;
  mach_service = xpc_connection_create_mach_service((const char *)name, (dispatch_queue_t)targetq, 0);
  a1[3] = mach_service;
  a1[4] = 0;
  if (a1[2])
  {
    dispatch_retain((dispatch_object_t)a1[2]);
    mach_service = a1[3];
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10026C300;
  handler[3] = &unk_1009203A0;
  handler[4] = a1;
  xpc_connection_set_event_handler(mach_service, handler);
  xpc_connection_set_context(a1[3], a1);
  xpc_connection_set_finalizer_f(a1[3], (xpc_finalizer_t)sub_10026C3CC);
  return a1;
}

void sub_10026C2EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_10026C300(uint64_t a1, void *a2)
{
  sub_10026C308(*(_QWORD **)(a1 + 32), a2);
}

void sub_10026C308(_QWORD *a1, xpc_object_t object)
{
  xpc_type_t type;
  char *v5;
  NSObject *v6;

  type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    sub_10026C794(a1, object);
  }
  else if (type == (xpc_type_t)&_xpc_type_error)
  {
    sub_10026C7F4(a1, object);
  }
  else
  {
    v5 = xpc_copy_description(object);
    v6 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1006D5878((uint64_t)a1, (uint64_t)v5, v6);
    free(v5);
  }
}

uint64_t sub_10026C3D4(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 16);
  if (v2)
    dispatch_release(v2);

  return a1;
}

void sub_10026C40C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = 136315138;
    v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Opening XPC Connection %s", (uint8_t *)&v4, 0xCu);
  }
  xpc_connection_resume(*(xpc_connection_t *)(a1 + 24));
}

void sub_10026C4B8(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = _Block_copy(v6);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;

  xpc_connection_cancel(*(xpc_connection_t *)(a1 + 24));
  xpc_release(*(xpc_object_t *)(a1 + 24));

}

void sub_10026C50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10026C520(uint64_t a1, void *a2, void *a3)
{
  id v5;
  _xpc_connection_s *v6;
  id v7;

  v5 = a3;
  v6 = *(_xpc_connection_s **)(a1 + 24);
  v7 = v5;
  if (v5)
    xpc_connection_send_message_with_reply(v6, a2, *(dispatch_queue_t *)(a1 + 16), v5);
  else
    xpc_connection_send_message(v6, a2);
  xpc_release(a2);

}

void sub_10026C580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10026C594(uint64_t a1, void *a2, void *a3)
{
  xpc_object_t v5;
  void (**v6)(id, xpc_object_t);

  v6 = a3;
  v5 = xpc_connection_send_message_with_reply_sync(*(xpc_connection_t *)(a1 + 24), a2);
  if (v5)
  {
    v6[2](v6, v5);
    xpc_release(v5);
  }
  xpc_release(a2);

}

void sub_10026C5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_10026C614(uint64_t a1, char *a2, void *a3, void *a4)
{
  xpc_object_t v7;
  id v8;

  v8 = a4;
  v7 = sub_10026C684((int)v8, a2, a3);
  sub_10026C520(a1, v7, v8);

}

void sub_10026C670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

xpc_object_t sub_10026C684(int a1, char *string, void *a3)
{
  size_t v4;
  xpc_object_t v5;
  xpc_object_t object[2];
  char *keys[2];

  *(_OWORD *)keys = *(_OWORD *)off_1009203C0;
  object[0] = xpc_string_create(string);
  object[1] = a3;
  if (a3)
    v4 = 2;
  else
    v4 = 1;
  v5 = xpc_dictionary_create((const char *const *)keys, object, v4);
  xpc_release(object[0]);
  if (a3)
    xpc_release(a3);
  return v5;
}

void sub_10026C724(uint64_t a1, char *a2, void *a3, void *a4)
{
  xpc_object_t v7;
  id v8;

  v8 = a4;
  v7 = sub_10026C684((int)v8, a2, a3);
  sub_10026C594(a1, v7, v8);

}

void sub_10026C780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_10026C794(_QWORD *a1, xpc_object_t xdict)
{
  const char *string;
  xpc_object_t value;

  string = xpc_dictionary_get_string(xdict, "kMsgId");
  value = xpc_dictionary_get_value(xdict, "kMsgArgs");
  return (**(uint64_t (***)(_QWORD, const char *, xpc_object_t))*a1)(*a1, string, value);
}

void sub_10026C7F4(_QWORD *a1, void *a2)
{
  NSObject *v4;

  if (a2 == &_xpc_error_connection_interrupted)
  {
    sub_10026C894(a1);
  }
  else if (a2 == &_xpc_error_connection_invalid)
  {
    sub_10026C8EC((uint64_t)a1);
  }
  else
  {
    v4 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1006D58F4((uint64_t)a1, a2, v4);
  }
}

uint64_t sub_10026C894(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_1006D5998((uint64_t)a1, v2, v3, v4, v5, v6, v7, v8);
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
}

uint64_t sub_10026C8EC(uint64_t result)
{
  _QWORD *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!*(_QWORD *)(result + 32))
  {
    v1 = (_QWORD *)result;
    v2 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1006D5A00((uint64_t)v1, v2, v3, v4, v5, v6, v7, v8);
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v1 + 16))(*v1);
  }
  return result;
}

void sub_10026C94C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void (**v4)(_QWORD);
  void *v5;
  int v6;
  uint64_t v7;

  v2 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 8);
    v6 = 136446210;
    v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "XPCServiceConnection (%{public}s) finalized", (uint8_t *)&v6, 0xCu);
  }
  v4 = (void (**)(_QWORD))objc_retainBlock(*(id *)(a1 + 32));
  if (v4)
  {
    v5 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;

    v4[2](v4);
    _Block_release(v4);
  }

}

void sub_10026CA24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10026CA3C(uint64_t a1, uint64_t a2, __int16 a3)
{
  __CFDictionary *Mutable;

  *(_QWORD *)a1 = off_1009203E0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 40) = a3;
  *(_WORD *)(a1 + 42) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_1000160D0(a1 + 64);
  sub_1002A90C4((pthread_cond_t *)(a1 + 128));
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 16) = dispatch_queue_create("com.apple.MobileBluetooth.InputDevice", 0);
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(_QWORD *)(a1 + 56) = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("Transport"), CFSTR("Bluetooth"));
  return a1;
}

void sub_10026CAEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100069BDC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10026CB14(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_1009203E0;
  if (*(_QWORD *)(a1 + 48))
  {
    v2 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_FAULT))
      sub_1006D5A68(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  CFRelease(*(CFTypeRef *)(a1 + 56));
  sub_1002A912C(a1 + 128);
  sub_100069BDC(a1 + 64);
  return a1;
}

void sub_10026CB88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002A912C(v1 + 128);
  sub_100069BDC(v1 + 64);
  _Unwind_Resume(a1);
}

void sub_10026CBA8(uint64_t a1)
{
  sub_10026CB14(a1);
  operator delete();
}

uint64_t sub_10026CBCC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  if (*(_BYTE *)(a1 + 43))
  {
    v4 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_FAULT))
      sub_1006D5AD8(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  result = sub_10026CC3C(a1, a2);
  if ((_DWORD)result)
    *(_BYTE *)(a1 + 43) = 1;
  return result;
}

uint64_t sub_10026CC3C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  NSObject *v13;
  __int128 *v14;
  unint64_t v15;
  CFNumberRef v16;
  const char *p_p;
  CFStringRef v18;
  const char *v19;
  CFStringRef v20;
  CFNumberRef v21;
  const UInt8 *v22;
  CFIndex v23;
  CFDataRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFBooleanRef v29;
  CFNumberRef v30;
  uint64_t v31;
  __int16 v33;
  int v34;
  int v35;
  int valuePtr;
  __int128 __p;
  char v38;
  uint8_t buf[4];
  __int128 *v40;

  if (*(_QWORD *)(a1 + 48))
  {
    v4 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_FAULT))
      sub_1006D5A68(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = sub_100444BD0(a2);
  v13 = qword_1009999B0;
  if (!v12 && os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_FAULT))
  {
    LODWORD(__p) = 136446210;
    *(_QWORD *)((char *)&__p + 4) = "device->hasHIDInfos()";
    _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&__p, 0xCu);
    v13 = qword_1009999B0;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(a2, (uint64_t)&__p);
    v14 = v38 >= 0 ? &__p : (__int128 *)__p;
    *(_DWORD *)buf = 136446210;
    v40 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Creating IOHIDUserDevice for device %{public}s", buf, 0xCu);
    if (v38 < 0)
      operator delete((void *)__p);
  }
  HIDWORD(v15) = *(unsigned __int8 *)(a2 + 131);
  LODWORD(v15) = bswap32(*(unsigned __int16 *)(a2 + 132));
  *(_DWORD *)buf = (v15 >> 16) | ((*(_BYTE *)(a2 + 130) & 0x7F) << 24);
  v16 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, buf);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), CFSTR("LocationID"), v16);
  CFRelease(v16);
  sub_10046E9BC((unsigned __int8 *)(a2 + 128), &__p);
  if (v38 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v18 = CFStringCreateWithCString(kCFAllocatorDefault, p_p, 0x8000100u);
  if (v38 < 0)
    operator delete((void *)__p);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), CFSTR("SerialNumber"), v18);
  CFRelease(v18);
  sub_10043F6EC(a2, (uint64_t)&__p);
  if (v38 >= 0)
    v19 = (const char *)&__p;
  else
    v19 = (const char *)__p;
  v20 = CFStringCreateWithCString(kCFAllocatorDefault, v19, 0x8000100u);
  if (v38 < 0)
    operator delete((void *)__p);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), CFSTR("Product"), v20);
  CFRelease(v20);
  valuePtr = 5000000;
  v21 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), CFSTR("RequestTimeout"), v21);
  CFRelease(v21);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), CFSTR("HIDVirtualDevice"), kCFBooleanFalse);
  *(_QWORD *)&__p = &off_100918258;
  *((_QWORD *)&__p + 1) = 0;
  v34 = 0;
  v35 = 0;
  if (sub_100444B3C((_WORD *)a2, (uint64_t)&__p, (_WORD *)&v35 + 1, &v35, (_WORD *)&v34 + 1, &v34))
  {
    v22 = (const UInt8 *)sub_10003EB18((uint64_t)&__p);
    v23 = sub_10003F8C4((uint64_t)&__p);
    v24 = CFDataCreate(kCFAllocatorDefault, v22, v23);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), CFSTR("ReportDescriptor"), v24);
    CFRelease(v24);
    v25 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, (char *)&v35 + 2);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), CFSTR("VendorID"), v25);
    CFRelease(v25);
    v26 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v35);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), CFSTR("VendorIDSource"), v26);
    CFRelease(v26);
    v27 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, (char *)&v34 + 2);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), CFSTR("ProductID"), v27);
    CFRelease(v27);
    v28 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v34);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), CFSTR("VersionNumber"), v28);
    CFRelease(v28);
  }
  if (sub_1004420E0(a2))
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), CFSTR("Manufacturer"), CFSTR("Apple Inc."));
  v33 = 0;
  if (sub_100444FB4((_BYTE *)a2, (_BYTE *)&v33 + 1, &v33))
  {
    if (HIBYTE(v33))
      v29 = kCFBooleanTrue;
    else
      v29 = kCFBooleanFalse;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), CFSTR("Authenticated"), v29);
    v30 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &v33);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), CFSTR("IAPHIDAccessoryCategory"), v30);
    CFRelease(v30);
  }
  *(_QWORD *)(a1 + 184) = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 56), CFSTR("SerialNumber"));
  v31 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 88))(a1, *(_QWORD *)(a1 + 56));
  *(_QWORD *)&__p = &off_100918258;
  if (*((_QWORD *)&__p + 1))
    sub_100056AAC(*((unsigned int **)&__p + 1));
  return v31;
}

void sub_10026D128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, unsigned int *a12, int a13, __int16 a14, char a15, char a16)
{
  if (a12)
    sub_100056AAC(a12);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10026D188(_BYTE *result, uint64_t a2)
{
  uint64_t v3;

  if (result[43])
  {
    v3 = (uint64_t)result;
    (*(void (**)(_BYTE *))(*(_QWORD *)result + 104))(result);
    sub_10026CC3C(v3, a2);
    return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
  }
  return result;
}

uint64_t sub_10026D1E0(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting input device", v4, 2u);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
}

uint64_t sub_10026D258(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

void sub_10026D264(dispatch_object_t *context)
{
  dispatch_set_context(context[2], context);
  dispatch_set_finalizer_f(context[2], (dispatch_function_t)sub_10026D2A0);
  dispatch_release(context[2]);
}

uint64_t sub_10026D2A0(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_10026D2B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
    sub_1006D5B48(v0, v1, v2, v3, v4, v5, v6, v7);
}

void sub_10026D2F4(uint64_t a1, const uint8_t *a2, CFIndex a3)
{
  uint64_t v6;
  __IOHIDUserDevice *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 48))
  {
    v6 = sub_1002A8C9C();
    v7 = *(__IOHIDUserDevice **)(a1 + 48);
    if (!v6)
      v6 = mach_absolute_time();
    IOHIDUserDeviceHandleReportWithTimeStamp(v7, v6, a2, a3);
  }
  else
  {
    v8 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006D5B78(v8, v9, v10, v11, v12, v13, v14, v15);
  }
}

void sub_10026D384(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5)
{
  _QWORD v5[7];
  char v6;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10026D474;
  v5[3] = &unk_100920450;
  v6 = a2;
  v5[4] = a1;
  v5[5] = a5;
  v5[6] = a4;
  sub_10026D3DC(a1, a2, a3, v5);
}

void sub_10026D3DC(uint64_t a1, char a2, int a3, void *a4)
{
  void (**v7)(_QWORD);
  _QWORD v8[2];

  v7 = a4;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 64);
  *(_BYTE *)(a1 + 176) = a2;
  *(_DWORD *)(a1 + 180) = a3;
  if (v7)
    v7[2](v7);
  sub_1002A9188((pthread_cond_t *)(a1 + 128));
  sub_100034234((uint64_t)v8);

}

void sub_10026D454(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *sub_10026D474(void *result)
{
  uint64_t v1;
  size_t *v2;
  size_t v3;
  size_t v4;

  if (*((_BYTE *)result + 56))
  {
    v1 = *((_QWORD *)result + 4);
    v2 = *(size_t **)(v1 + 32);
    if (v2)
    {
      if (*(_QWORD *)(v1 + 24))
      {
        v3 = *v2;
        if (*((_QWORD *)result + 5) >= v3)
          v4 = v3;
        else
          v4 = *((_QWORD *)result + 5);
        result = memcpy(*(void **)(v1 + 24), *((const void **)result + 6), v4);
        **(_QWORD **)(v1 + 32) = v4;
      }
    }
  }
  return result;
}

void sub_10026D4CC(uint64_t a1, char a2, int a3)
{
  sub_10026D3DC(a1, a2, a3, 0);
}

BOOL sub_10026D4D4(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (*(_QWORD *)(a1 + 48))
  {
    v4 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_FAULT))
      sub_1006D5A68(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  v12 = IOHIDUserDeviceCreateWithOptions(kCFAllocatorDefault, a2, 1);
  v13 = v12;
  *(_QWORD *)(a1 + 48) = v12;
  if (v12)
  {
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback(v12, sub_10026D5A4, a1);
    IOHIDUserDeviceRegisterSetReportCallback(*(_QWORD *)(a1 + 48), sub_10026D5A8, a1);
  }
  else
  {
    v14 = qword_1009999B0;
    if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_ERROR))
      sub_1006D5BA8(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  return v13 != 0;
}

uint64_t sub_10026D5A8(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[7];
  int v7;
  int v8;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10026D9D8;
  v6[3] = &unk_100920470;
  v7 = a2;
  v8 = a3;
  v6[4] = a1;
  v6[5] = a4;
  v6[6] = a5;
  return sub_10026D8F0(a1, v6);
}

void sub_10026D600(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  _DWORD v6[2];

  v1 = *(_QWORD *)(a1 + 48);
  if (!v1)
  {
    v3 = qword_1009999B0;
    if (!os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(v6[0]) = 0;
    v4 = "Could not schedule IOHIDUserDevice";
    goto LABEL_7;
  }
  if (*(_BYTE *)(a1 + 42))
  {
    v3 = qword_1009999B0;
    if (!os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
      return;
    LOWORD(v6[0]) = 0;
    v4 = "IOHIDUserDevice is already scheduled";
LABEL_7:
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v4, (uint8_t *)v6, 2u);
    return;
  }
  *(_BYTE *)(a1 + 42) = 1;
  v5 = qword_1009999B0;
  if (os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = 1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Scheduling IOHIDUserDevice: fIsScheduled %d", (uint8_t *)v6, 8u);
    v1 = *(_QWORD *)(a1 + 48);
  }
  IOHIDUserDeviceScheduleWithDispatchQueue(v1, *(_QWORD *)(a1 + 16));
}

void sub_10026D74C(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  _BOOL4 v4;
  int v5;
  _DWORD v6[2];

  v2 = *(const void **)(a1 + 48);
  v3 = qword_1009999B0;
  v4 = os_log_type_enabled((os_log_t)qword_1009999B0, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      v5 = *(unsigned __int8 *)(a1 + 42);
      v6[0] = 67109120;
      v6[1] = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Releasing IOHIDUserDevice: fIsScheduled %d", (uint8_t *)v6, 8u);
      v2 = *(const void **)(a1 + 48);
    }
    if (*(_BYTE *)(a1 + 42))
    {
      *(_BYTE *)(a1 + 42) = 0;
      IOHIDUserDeviceUnscheduleFromDispatchQueue(v2, *(_QWORD *)(a1 + 16));
      v2 = *(const void **)(a1 + 48);
    }
    CFRelease(v2);
    *(_QWORD *)(a1 + 48) = 0;
    sub_10026D3DC(a1, 0, -536870212, 0);
  }
  else if (v4)
  {
    LOWORD(v6[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Could not release IOHIDUserDevice", (uint8_t *)v6, 2u);
  }
  if (*(_QWORD *)(a1 + 184))
    *(_QWORD *)(a1 + 184) = 0;
}

uint64_t sub_10026D880(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD v7[7];
  int v8;
  int v9;

  v5 = 3758097090;
  if (a4 && a5)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10026D9A4;
    v7[3] = &unk_100920470;
    v7[4] = a1;
    v7[5] = a4;
    v7[6] = a5;
    v8 = a2;
    v9 = a3;
    return sub_10026D8F0(a1, v7);
  }
  return v5;
}

uint64_t sub_10026D8F0(uint64_t a1, void *a2)
{
  unsigned int (**v3)(_QWORD);
  uint64_t v4;
  _QWORD v6[2];

  v3 = a2;
  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 64);
  if (v3[2](v3))
  {
    sub_1002A9130((pthread_cond_t *)(a1 + 128), (pthread_mutex_t *)(a1 + 64));
    if (*(_BYTE *)(a1 + 176))
      v4 = 0;
    else
      v4 = *(unsigned int *)(a1 + 180);
  }
  else
  {
    v4 = 3758097084;
  }
  sub_100034234((uint64_t)v6);

  return v4;
}

void sub_10026D984(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10026D9A4(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[4];
  *(_QWORD *)(v1 + 24) = a1[5];
  *(_QWORD *)(v1 + 32) = a1[6];
  return (***(uint64_t (****)(_QWORD))(v1 + 8))(*(_QWORD *)(v1 + 8));
}

uint64_t sub_10026D9D8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
}

uint64_t sub_10026DA04(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;
  int v10;

  result = sub_1000160D0(a1);
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 73) = 0;
  v10 = *a2;
  *(_WORD *)(result + 68) = *((_WORD *)a2 + 2);
  *(_DWORD *)(result + 64) = v10;
  LOWORD(v10) = *(_WORD *)(a3 + 4);
  *(_DWORD *)(result + 73) = *(_DWORD *)a3;
  *(_WORD *)(result + 77) = v10;
  *(_QWORD *)(result + 88) = a4;
  *(_BYTE *)(result + 72) = a5;
  return result;
}

uint64_t sub_10026DA6C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint64_t result;
  NSObject *v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  void **v9;
  NSObject *v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  void **v14;
  void *__p[2];
  char v16;
  _BYTE buf[12];
  char v18;
  uint8_t v19[4];
  _BYTE *v20;
  __int16 v21;
  void **v22;

  v2 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 71) || *(_BYTE *)(a1 + 80))
      v3 = "Yes";
    else
      v3 = "No";
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "start: already running..? %{public}s", buf, 0xCu);
  }
  if (*(_BYTE *)(a1 + 71) || *(_BYTE *)(a1 + 80) || !*(_QWORD *)(a1 + 88))
    return 0;
  if (qword_10097AA50 != -1)
    dispatch_once(&qword_10097AA50, &stru_100920490);
  sub_100263F60(qword_10097AA48, *(_BYTE *)(a1 + 72));
  if (*(unsigned __int8 *)(a1 + 72) >= 0xAu)
  {
    if (qword_10097AA50 != -1)
      dispatch_once(&qword_10097AA50, &stru_100920490);
    sub_100263F68(qword_10097AA48);
  }
  v5 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_INFO))
  {
    sub_10026DDB8((unsigned __int8 *)(a1 + 64), buf);
    v6 = v18;
    v7 = *(_BYTE **)buf;
    sub_10026DDB8((unsigned __int8 *)(a1 + 73), __p);
    v8 = buf;
    if (v6 < 0)
      v8 = v7;
    if (v16 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    *(_DWORD *)v19 = 136315394;
    v20 = v8;
    v21 = 2080;
    v22 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "sending pair status request to \"%s\" for magnet device \"%s\" ", v19, 0x16u);
    if (v16 < 0)
      operator delete(__p[0]);
    if (v18 < 0)
      operator delete(*(void **)buf);
  }
  (***(void (****)(_QWORD, uint64_t, uint64_t))(a1 + 88))(*(_QWORD *)(a1 + 88), a1 + 64, a1 + 73);
  *(_BYTE *)(a1 + 71) = 1;
  v10 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_INFO))
  {
    sub_10026DDB8((unsigned __int8 *)(a1 + 73), buf);
    v11 = v18;
    v12 = *(_BYTE **)buf;
    sub_10026DDB8((unsigned __int8 *)(a1 + 64), __p);
    v13 = buf;
    if (v11 < 0)
      v13 = v12;
    if (v16 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    *(_DWORD *)v19 = 136315394;
    v20 = v13;
    v21 = 2080;
    v22 = v14;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "sending pair status request to \"%s\"  for aacp device \"%s\" ", v19, 0x16u);
    if (v16 < 0)
      operator delete(__p[0]);
    if (v18 < 0)
      operator delete(*(void **)buf);
  }
  (***(void (****)(_QWORD, uint64_t, uint64_t))(a1 + 88))(*(_QWORD *)(a1 + 88), a1 + 73, a1 + 64);
  result = 1;
  *(_BYTE *)(a1 + 80) = 1;
  *(_BYTE *)(a1 + 96) = 0;
  return result;
}

void sub_10026DD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10026DDB8(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *__p[2];
  unsigned __int8 v8;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_1009204B0);
  v4 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)a1, 1);
  if (v4)
  {
    v5 = v4;
    sub_10043F6EC(v4, (uint64_t)__p);
    if ((v8 & 0x80u) == 0)
      v6 = v8;
    else
      v6 = (unint64_t)__p[1];
    if ((char)v8 < 0)
    {
      operator delete(__p[0]);
      if (v6)
        goto LABEL_9;
    }
    else if (v6)
    {
LABEL_9:
      sub_10043E5F8(v5, a2);
      return;
    }
  }
  sub_10046E9BC(a1, a2);
}

uint64_t sub_10026DE78(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  _BOOL4 v8;
  NSObject *v9;
  const char *v10;
  _BYTE *v11;
  const char *v12;
  _BYTE *v15;
  int v17;
  NSObject *v18;
  _BOOL4 v19;
  int v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  NSObject *v24;
  _BYTE *v25;
  int v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  _QWORD v30[2];
  uint8_t v31[4];
  _BYTE *v32;
  __int16 v33;
  _BYTE *v34;
  _BYTE __p[12];
  char v36;
  _BYTE buf[22];
  __int16 v38;
  const char *v39;

  if (qword_10097AA50 != -1)
    dispatch_once(&qword_10097AA50, &stru_100920490);
  v8 = sub_1002649A0(qword_10097AA48);
  v9 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    if (a4 == 2)
      v10 = "Paired";
    else
      v10 = "Not paired";
    sub_10026DDB8((unsigned __int8 *)a2, __p);
    if (v36 >= 0)
      v11 = __p;
    else
      v11 = *(_BYTE **)__p;
    v12 = "Disallow";
    *(_DWORD *)buf = 136446722;
    if (v8)
      v12 = "Allow";
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v11;
    v38 = 2080;
    v39 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "received pair status response \"%{public}s\" from device \"%s\", isEasyPairingAllowed = \"%s\"", buf, 0x20u);
    if (v36 < 0)
      operator delete(*(void **)__p);
  }
  v30[0] = 0;
  v30[1] = 0;
  sub_10003415C((uint64_t)v30, a1);
  if (*(_DWORD *)a2 == *(_DWORD *)(a1 + 64) && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)(a1 + 68))
  {
    *(_BYTE *)(a1 + 70) = a4;
    v15 = (_BYTE *)(a1 + 71);
    goto LABEL_25;
  }
  if (*(_DWORD *)a2 == *(_DWORD *)(a1 + 73) && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)(a1 + 77))
  {
    *(_BYTE *)(a1 + 79) = a4;
    v15 = (_BYTE *)(a1 + 80);
LABEL_25:
    *v15 = 0;
  }
  if (!*(_BYTE *)(a1 + 71) && !*(_BYTE *)(a1 + 80))
  {
    if (v8)
    {
      v17 = (*(_BYTE *)(a1 + 79) & *(_BYTE *)(a1 + 70));
      v18 = qword_100999870;
      v19 = os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT);
      if (v17 == 2)
      {
        if (v19)
        {
          sub_10026DDB8((unsigned __int8 *)a2, buf);
          v20 = SHIBYTE(v38);
          v21 = *(_BYTE **)buf;
          sub_10026DDB8(a3, __p);
          v22 = buf;
          if (v20 < 0)
            v22 = v21;
          if (v36 >= 0)
            v23 = __p;
          else
            v23 = *(_BYTE **)__p;
          *(_DWORD *)v31 = 136315394;
          v32 = v22;
          v33 = 2080;
          v34 = v23;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Devices \"%s\" and \"%s\" are already paired", v31, 0x16u);
          if (v36 < 0)
            operator delete(*(void **)__p);
          if (SHIBYTE(v38) < 0)
            operator delete(*(void **)buf);
        }
        (*(void (**)(_QWORD, uint64_t, unsigned __int8 *, uint64_t))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88), a2, a3, 1);
      }
      else
      {
        if (v19)
        {
          sub_10026DDB8((unsigned __int8 *)a2, buf);
          v26 = SHIBYTE(v38);
          v27 = *(_BYTE **)buf;
          sub_10026DDB8(a3, __p);
          v28 = buf;
          if (v26 < 0)
            v28 = v27;
          if (v36 >= 0)
            v29 = __p;
          else
            v29 = *(_BYTE **)__p;
          *(_DWORD *)v31 = 136315394;
          v32 = v28;
          v33 = 2080;
          v34 = v29;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Generate linkkey to pair between \"%s\" and \"%s\"", v31, 0x16u);
          if (v36 < 0)
            operator delete(*(void **)__p);
          if (SHIBYTE(v38) < 0)
            operator delete(*(void **)buf);
        }
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        arc4random_buf(buf, 0x10uLL);
        (*(void (**)(_QWORD, uint64_t, uint64_t, _BYTE *, uint64_t))(**(_QWORD **)(a1 + 88) + 8))(*(_QWORD *)(a1 + 88), a1 + 64, a1 + 73, buf, 16);
        (*(void (**)(_QWORD, uint64_t, uint64_t, _BYTE *, uint64_t))(**(_QWORD **)(a1 + 88) + 8))(*(_QWORD *)(a1 + 88), a1 + 73, a1 + 64, buf, 16);
        *(_BYTE *)(a1 + 71) = 1;
        *(_BYTE *)(a1 + 80) = 1;
      }
    }
    else
    {
      v24 = qword_100999870;
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
      {
        sub_10026DDB8((unsigned __int8 *)a2, buf);
        v25 = v38 >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)__p = 136315138;
        *(_QWORD *)&__p[4] = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Easy pairing request is rejected from remote source \"%s\"", __p, 0xCu);
        if (SHIBYTE(v38) < 0)
          operator delete(*(void **)buf);
      }
    }
  }
  return sub_100034234((uint64_t)v30);
}

void sub_10026E2DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10026E324(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  NSObject *v8;
  char *v9;
  void **v10;
  _BYTE *v13;
  int v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  char *v18;
  __int16 v19;
  void **v20;

  v8 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    v9 = a4 ? "Fail" : "Success";
    sub_10026DDB8((unsigned __int8 *)a2, __p);
    v10 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v18 = v9;
    v19 = 2080;
    v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received link key store result \"%{public}s\" from device \"%s\" ", buf, 0x16u);
    if (v16 < 0)
      operator delete(__p[0]);
  }
  if (*(_DWORD *)a2 == *(_DWORD *)(a1 + 64) && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)(a1 + 68))
  {
    v13 = (_BYTE *)(a1 + 71);
  }
  else
  {
    if (*(_DWORD *)a2 != *(_DWORD *)(a1 + 73) || *(unsigned __int16 *)(a2 + 4) != *(unsigned __int16 *)(a1 + 77))
      goto LABEL_22;
    v13 = (_BYTE *)(a1 + 80);
  }
  *v13 = 0;
LABEL_22:
  v14 = *(unsigned __int8 *)(a1 + 96) | a4;
  *(_BYTE *)(a1 + 96) |= a4;
  if (!*(_BYTE *)(a1 + 71) && !*(_BYTE *)(a1 + 80))
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88), a2, a3, 2 * (v14 != 0));
}

void sub_10026E4C4(id a1)
{
  operator new();
}

void sub_10026E504()
{
  operator delete();
}

void sub_10026E528(id a1)
{
  operator new();
}

void sub_10026E568()
{
  operator delete();
}

uint64_t sub_10026E58C(uint64_t a1, uint64_t a2, _xpc_connection_s *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[2];

  v5 = sub_100070614(a1, a2, a3, a4);
  *(_QWORD *)v5 = off_1009206D8;
  *(_QWORD *)(v5 + 144) = off_1009207A8;
  *(_QWORD *)(v5 + 152) = off_1009207F0;
  *(_QWORD *)(v5 + 160) = off_100920820;
  *(_BYTE *)(v5 + 168) = 0;
  *(_QWORD *)(v5 + 176) = 0;
  v6 = v5 + 216;
  *(_QWORD *)(v5 + 184) = 0;
  *(_WORD *)(v5 + 192) = 0;
  *(_QWORD *)(v5 + 204) = 0;
  *(_QWORD *)(v5 + 196) = 0;
  *(_BYTE *)(v5 + 212) = 0;
  sub_1000160D0(v5 + 216);
  *(_QWORD *)(a1 + 280) = 0;
  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, v6);
  v7 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v8 = *(void **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v7;

  sub_100034234((uint64_t)v10);
  return a1;
}

void sub_10026E644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_100034234((uint64_t)&a9);

  sub_100069BDC(v11);
  sub_10009F88C(v10);
  sub_100008708(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_10026E694(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009206D8;
  *(_QWORD *)(a1 + 144) = off_1009207A8;
  *(_QWORD *)(a1 + 152) = off_1009207F0;
  *(_QWORD *)(a1 + 160) = off_100920820;

  sub_100069BDC(a1 + 216);
  sub_10009F88C(a1 + 176);
  return sub_100008708(a1);
}

void sub_10026E6F8(uint64_t a1)
{
  sub_10026E694(a1);
  operator delete();
}

void *sub_10026E71C(uint64_t a1, int a2)
{
  void *result;

  result = sub_10026E930;
  switch(a2)
  {
    case 1:
      return result;
    case 2:
      result = sub_10026EF04;
      break;
    case 7:
      result = sub_10026F0CC;
      break;
    case 8:
      result = sub_10026FEC8;
      break;
    case 9:
      result = sub_10026FF80;
      break;
    case 10:
      result = sub_1002704A8;
      break;
    case 12:
      result = sub_1002701AC;
      break;
    case 13:
      result = sub_10026FFE0;
      break;
    case 25:
      result = sub_100271398;
      break;
    case 26:
      result = sub_100271588;
      break;
    case 27:
      result = sub_10026EF40;
      break;
    case 28:
      result = sub_10026F358;
      break;
    case 29:
      result = sub_10026F420;
      break;
    case 30:
      result = sub_10026FAE4;
      break;
    case 31:
      result = sub_10027172C;
      break;
    case 32:
      result = sub_100271D94;
      break;
    case 33:
      result = sub_1002721EC;
      break;
    case 34:
      result = sub_10026FD88;
      break;
    case 35:
      result = sub_10026FDC8;
      break;
    case 36:
      result = sub_10026FE08;
      break;
    case 37:
      result = sub_10026F4E8;
      break;
    case 38:
      result = sub_10026F604;
      break;
    case 39:
      result = sub_10026F7D4;
      break;
    case 40:
      result = sub_10026F990;
      break;
    case 41:
      result = sub_100270E60;
      break;
    case 42:
      result = sub_100270560;
      break;
    case 44:
      result = sub_10026FE48;
      break;
    case 47:
      result = sub_10026FE88;
      break;
    case 52:
      result = sub_10026FC64;
      break;
    case 53:
      result = sub_100272280;
      break;
    case 54:
      result = sub_100272444;
      break;
    case 55:
      result = sub_10027258C;
      break;
    case 58:
      result = sub_10027278C;
      break;
    case 59:
      result = sub_100272904;
      break;
    case 60:
      result = sub_100272A68;
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006D5BD8();
      result = 0;
      break;
  }
  return result;
}

void sub_10026E930(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  id v22;
  uint64_t v23;
  void *v24;
  id v25;
  NSObject *v26;
  const char *v27;
  size_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  void *v33;
  void **v34;
  NSObject *v35;
  void *v36;
  void *v37;
  NSObject *v38;
  int v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  _QWORD v43[4];
  id v44;
  id v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  _OWORD v52[2];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[3];
  char v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint8_t buf[32];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[144];
  uint64_t v77;

  v66 = 0;
  v67 = 0;
  v65 = 0;
  v61 = 0;
  v62 = &v61;
  v63 = 0x2020000000;
  v64 = 0;
  v59[0] = 0;
  v59[1] = v59;
  v59[2] = 0x2020000000;
  v60 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1000239F0(value, "kCBMsgArgName");
  v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  if (!sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgType") && v5)
  {
    v12 = v67;
    v57 = 0;
    v58 = 0;
    v55 = 0;
    v56 = 0;
    v53 = 0;
    v54 = 1;
    v13 = sub_1000239F0(v65, "kCBInitOptionRestoreIdentifier");
    v14 = objc_claimAutoreleasedReturnValue(v13);
    sub_100023B7C(v65, 0, v15, v16, v17, v18, v19, v20, (uint64_t)"kCBInitOptionShowPowerAlert");
    v21 = sub_1002C3B60(v65, "kCBManagerPrivacySupported");
    memset(v52, 0, sizeof(v52));
    xpc_connection_get_audit_token(*(_QWORD *)(a1 + 16), v52);
    v22 = sub_1000167EC(*(_QWORD *)(a1 + 16));
    v23 = objc_claimAutoreleasedReturnValue(v22);
    v24 = *(void **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v23;

    v25 = *(id *)(a1 + 96);
    v26 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v25;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v21;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Classic kCBManagerAppSDKVersion for app %@ : %d", buf, 0x12u);
    }
    v77 = 0;
    v75 = 0u;
    memset(v76, 0, sizeof(v76));
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    memset(buf, 0, sizeof(buf));
    sub_100272ADC((uint64_t)buf);
    v5 = objc_retainAutorelease(v25);
    v27 = (const char *)objc_msgSend(v5, "UTF8String");
    v28 = strlen(v27);
    v29 = sub_1002614D8(buf, (uint64_t)v27, v28);
    v30 = sub_1002614D8(v29, (uint64_t)"-classic-", 9);
    v31 = (_QWORD *)std::ostream::operator<<(v30, *(unsigned int *)(a1 + 40));
    v32 = sub_1002614D8(v31, (uint64_t)"-", 1);
    std::ostream::operator<<(v32, *(_QWORD *)(a1 + 8));
    std::stringbuf::str(&buf[8]);
    v33 = (void *)v14;
    v34 = (void **)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      operator delete(*v34);
    *(_OWORD *)v34 = v68;
    *(_QWORD *)(a1 + 72) = v69;
    v35 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v36 = (void *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0)
        v36 = *v34;
      LODWORD(v68) = 136446210;
      *(_QWORD *)((char *)&v68 + 4) = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Classic Received XPC check-in from session \"%{public}s\"", (uint8_t *)&v68, 0xCu);
    }
    v37 = v33;
    if (*(_QWORD *)(a1 + 128))
    {
      v38 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006D5CBC((char *)(a1 + 79), (_QWORD *)(a1 + 56), v38);
    }
    else
    {
      v39 = v66;
      if (v66 == 20161219)
      {
        v40 = sub_1000419F4();
        v43[0] = _NSConcreteStackBlock;
        v43[1] = 3221225472;
        v43[2] = sub_100272BC8;
        v43[3] = &unk_100920850;
        v51 = 0;
        v48 = a1;
        v49 = v58;
        v44 = v5;
        v50 = v12;
        v45 = v33;
        v46 = &v61;
        v47 = v59;
        sub_100023D84(v40, v43);

      }
      else
      {
        v41 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_1006D5C38(v39, v41);
      }
    }
    if (SHIBYTE(v74) < 0)
      operator delete(*((void **)&v73 + 1));
    std::streambuf::~streambuf(&buf[8]);
    std::ios::~ios(v76);

  }
  v42 = *(_QWORD *)(a1 + 128);
  if (v42)
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, v42, *((unsigned int *)v62 + 6));
  else
    sub_10007069C(a1, 2u);

  _Block_object_dispose(v59, 8);
  _Block_object_dispose(&v61, 8);
}

void sub_10026EE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  void *v67;

  sub_100272CFC((uint64_t)&a67);
  _Block_object_dispose(&a52, 8);
  _Block_object_dispose(&a56, 8);
  _Unwind_Resume(a1);
}

void sub_10026EF04(uint64_t a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 1);
  sub_10005E138(a1, 5, 0, 0);
}

void sub_10026EF40(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  int v3;
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v3 = sub_1002C3B60(value, "kCBMsgArgBTPowerState");
  if ((+[CBController bluetoothModificationAllowed](CBController, "bluetoothModificationAllowed") & 1) != 0)
  {
    if (v3)
    {
      if (qword_100978130 != -1)
        dispatch_once(&qword_100978130, &stru_100920B28);
      sub_10047DB74((uint64_t)off_100978128);
    }
    else
    {
      if (qword_100978130 != -1)
        dispatch_once(&qword_100978130, &stru_100920B28);
      sub_10047DECC((uint64_t)off_100978128);
    }
  }
  else
  {
    v4 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "on";
      if (v3)
        v5 = "off";
      v6 = 136315138;
      v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Bluetooth Toggling is turned off by managing client,keeping the power state to %s", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_10026F0CC(uint64_t a1, xpc_object_t original)
{
  xpc_object_t reply;
  void *v4;
  std::string *p_p;
  unsigned int v6;
  std::string *v7;
  char v8;
  BOOL v9;
  BOOL value;
  std::string __p;
  int v12;
  __int16 v13;

  reply = xpc_dictionary_create_reply(original);
  if (reply)
  {
    v4 = reply;
    v13 = 0;
    v12 = 0;
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100920AC8);
    sub_1004A3424((uint64_t)off_100977A50, (uint64_t)&v12);
    sub_10046E9BC((unsigned __int8 *)&v12, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    xpc_dictionary_set_string(v4, "kCBMsgArgAddressString", (const char *)p_p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (qword_100978130 != -1)
      dispatch_once(&qword_100978130, &stru_100920B28);
    v6 = sub_10002527C((uint64_t)off_100978128);
    xpc_dictionary_set_int64(v4, "kCBMsgArgBTPowerState", v6);
    memset(&__p, 0, sizeof(__p));
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100920AC8);
    sub_1004A34EC((uint64_t)off_100977A50, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &__p;
    else
      v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
    xpc_dictionary_set_string(v4, "kCBMsgArgName", (const char *)v7);
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_100920B48);
    v8 = sub_10047AB58();
    xpc_dictionary_set_BOOL(v4, "kCBMsgArgInquiryState", v8);
    value = 0;
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100920AC8);
    sub_1004A4164((uint64_t)off_100977A50, &value);
    v9 = 0;
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100920AC8);
    sub_1004A5288((uint64_t)off_100977A50, &v9);
    xpc_dictionary_set_BOOL(v4, "kCBMsgArgDiscoverableState", value);
    xpc_dictionary_set_BOOL(v4, "kCBMsgArgConnectableState", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v4);
    xpc_release(v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_10026F330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10026F358(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1002C3B60(value, "kCBMsgArgConnectableState");
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100920B48);
  v5 = off_100977890;
  v6 = sub_100022AE4(*(_QWORD *)(a1 + 128));
  v7 = sub_100020C54(v5, v6);
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100920B48);
  return sub_100476904(off_100977890, v7, v4);
}

uint64_t sub_10026F420(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1002C3B60(value, "kCBMsgArgDiscoverableState");
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100920B48);
  v5 = off_100977890;
  v6 = sub_100022AE4(*(_QWORD *)(a1 + 128));
  v7 = sub_100020C54(v5, v6);
  if (qword_100977898 != -1)
    dispatch_once(&qword_100977898, &stru_100920B48);
  return sub_100476B34(off_100977890, v7, v4);
}

void sub_10026F4E8(uint64_t a1, void *a2)
{
  xpc_object_t v4;
  xpc_object_t value;
  id v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  uint64_t v10;
  xpc_object_t reply;
  void *v12;
  _QWORD v13[6];
  unsigned __int8 v14;

  v4 = xpc_array_create(0, 0);
  value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  v6 = sub_1002C3AD4(value, "kCBMsgArgConnectionState");
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = v7;
  if (v7)
    v9 = objc_msgSend(v7, "BOOLValue");
  else
    v9 = 0;
  v10 = sub_1000419F4();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100273030;
  v13[3] = &unk_10091FF68;
  v14 = v9;
  v13[4] = a1;
  v13[5] = v4;
  sub_100023D84(v10, v13);
  reply = xpc_dictionary_create_reply(a2);
  v12 = reply;
  if (reply)
  {
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v12);
    xpc_release(v12);
  }
  xpc_release(v4);

}

void sub_10026F5F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10026F604(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  unint64_t v7;
  id v8;
  void *v9;
  xpc_object_t v10;
  NSObject *v11;
  xpc_object_t reply;
  void *v13;
  __int128 v14;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1000239F0(value, "kCBMsgArgAddressString");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = sub_100649C7C(v6);
  if ((v7 & 0xFFFFFFFFFFFFLL) != 0)
  {
    v14 = 0uLL;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100920B88);
    sub_10003F924((uint64_t)off_1009778C0, v7, 1u, 0, 0, 0, (unsigned __int8 *)&v14);
    v8 = sub_100030DF4((const unsigned __int8 *)&v14);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = sub_100273218(v9);

  }
  else
  {
    v11 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v14) = 138412290;
      *(_QWORD *)((char *)&v14 + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Warning: Invalid parameters, cannot retrieve a peer with address \"%@\"", (uint8_t *)&v14, 0xCu);
    }
    v10 = 0;
  }
  reply = xpc_dictionary_create_reply(xdict);
  v13 = reply;
  if (reply)
  {
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v13);
    xpc_release(v13);
  }
  if (v10)
    xpc_release(v10);

}

void sub_10026F7A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_10026F7D4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  uint64_t v23;
  char v24;
  uint64_t v25;

  v25 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v13 = sub_100023B7C(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions");
  v14 = sub_1002C3B60(0, "kCBMsgIdSessionPairingRequest");
  v15 = sub_1002C3B60(0, "kCBMsgArgConnectToPAN");
  if (v13 || !v6)
  {
    sub_1004B1368(a1, 49, xdict, 3);
  }
  else
  {
    v16 = v15;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[ConnectOptions alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:](ConnectOptions, "alertOptionsWithConnectionAlerts:disconnectionAlerts:notificationAlerts:delay:bridgeTransport:", 0, 0, 0, 0, 0));
    objc_msgSend(v17, "setConnectingToPANServices:", v16);
    v18 = sub_1000419F4();
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100273740;
    v20[3] = &unk_1009197F0;
    v23 = a1;
    v21 = v6;
    v19 = v17;
    v22 = v19;
    v24 = v14;
    sub_100023D84(v18, v20);

  }
}

void sub_10026F950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_10026F990(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  v25 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v24 = 0;
  if (sub_100023B7C(value, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgOptions") || !v6)
  {
    sub_1004B1368(a1, 50, xdict, 3);
  }
  else if (!sub_100023B7C(v24, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"kCBCancelConnectOptionForce"))
  {
    v19 = sub_1000419F4();
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100273890;
    v20[3] = &unk_1009183A0;
    v22 = a1;
    v21 = v6;
    v23 = v25;
    sub_100023D84(v19, v20);

  }
}

void sub_10026FAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_10026FAE4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v4;
  int v5;
  int v6;
  id v7;
  void *v8;
  unsigned int v9;
  NSObject *v10;
  uint64_t v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  __int16 v15;
  unsigned int v16;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (value)
  {
    v4 = value;
    v5 = sub_1002C3B60(value, "kCBMsgArgInquiryInfinite");
    v6 = sub_1002C3B60(v4, "kCBMsgArgInquiryReportDuplicates");
    v7 = sub_1002C3AD4(v4, "kCBMsgArgInquiryLength");
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = objc_msgSend(v8, "intValue");

    v10 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v12[0] = 67109632;
      v12[1] = v5;
      v13 = 1024;
      v14 = v6;
      v15 = 1024;
      v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Bluetooth discovery Handle Inquiry Msg: continuous=%d, reportDuplicates=%d , length=%d", (uint8_t *)v12, 0x14u);
    }
    sub_100273E00(a1, v5, v11, 0, 0, v6);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_1006D5D34();
  }
}

void sub_10026FC4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10026FC64(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  __int16 v10[8];
  uint64_t v11;
  std::__shared_weak_count *v12;

  if (qword_100977D80 != -1)
    dispatch_once(&qword_100977D80, &stru_100920BE8);
  v2 = off_100977D78;
  v3 = *(std::__shared_weak_count **)(a1 + 184);
  v11 = *(_QWORD *)(a1 + 176);
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_1004C153C(v2, &v11);
  v6 = v12;
  if (v12)
  {
    v7 = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_WORD *)(a1 + 192) = 0;
  if (*(_BYTE *)(a1 + 212))
  {
    v9 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "startInquiry: Disabling duplicate reporting.", (uint8_t *)v10, 2u);
    }
    sub_1004BDAD8(*(_QWORD *)(a1 + 176));
    *(_BYTE *)(a1 + 212) = 0;
  }
}

void sub_10026FD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10009F88C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10026FD88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_1006D5D60(v0, v1, v2, v3, v4, v5, v6, v7);
}

void sub_10026FDC8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_1006D5DD0(v0, v1, v2, v3, v4, v5, v6, v7);
}

void sub_10026FE08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_1006D5E40(v0, v1, v2, v3, v4, v5, v6, v7);
}

void sub_10026FE48()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_1006D5EB0(v0, v1, v2, v3, v4, v5, v6, v7);
}

void sub_10026FE88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_1006D5F20(v0, v1, v2, v3, v4, v5, v6, v7);
}

void sub_10026FEC8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD v12[5];
  BOOL v13;
  uint64_t v14;

  v14 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (!sub_100023B7C(value, 0, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgProgrammaticPairing"))
  {
    v10 = v14 != 0;
    v11 = sub_1000419F4();
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100274BFC;
    v12[3] = &unk_100918888;
    v12[4] = a1;
    v13 = v10;
    sub_100023D84(v11, v12);
    *(_BYTE *)(a1 + 168) = 1;
  }
}

void sub_10026FF80(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100274CF4;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100023D84(v2, v3);
}

void sub_10026FFE0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  void *v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  _QWORD *v11;
  __int16 v12;
  void *v13;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (v5)
  {
    v6 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v7 = (_QWORD *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0)
        v7 = (_QWORD *)*v7;
      v10 = 136446466;
      v11 = v7;
      v12 = 2112;
      v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to unpair device \"%@\"", (uint8_t *)&v10, 0x16u);
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100920B88);
    v8 = sub_1000589DC((uint64_t)off_1009778C0, v5, 0);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100920BA8);
    v9 = (unsigned __int8 *)sub_10006D488((uint64_t)off_1009778E0, v8, 0);
    if (v9)
    {
      if (qword_100978150 != -1)
        dispatch_once(&qword_100978150, &stru_100920B68);
      sub_1005B8744((uint64_t)off_100978148, v9);
    }
  }

}

void sub_100270190(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002701AC(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  void *v5;
  xpc_object_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  void *v19;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (!sub_100023B7C(v6, 1, v7, v8, v9, v10, v11, v12, (uint64_t)"kCBMsgArgPairingType") && v5)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100920B88);
    v13 = sub_1000589DC((uint64_t)off_1009778C0, v5, 0);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100920BA8);
    v14 = sub_10006D488((uint64_t)off_1009778E0, v13, 0);
    if (v14)
    {
      v15 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218242;
        v17 = 0;
        v18 = 2112;
        v19 = v5;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "handlePairingAgentRespondToPairing: Accepting Pairing Request with Passkey %llu for the device \"%@\"", buf, 0x16u);
      }
      if (qword_100978150 != -1)
        dispatch_once(&qword_100978150, &stru_100920B68);
      sub_1005B7378((uint64_t)off_100978148, v14, 0);
    }
    else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_1006D5FBC();
    }
  }

}

void sub_100270488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002704A8(uint64_t a1, void *a2)
{
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t reply;
  void *v7;
  _QWORD v8[6];

  v4 = xpc_array_create(0, 0);
  v5 = sub_1000419F4();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100274DDC;
  v8[3] = &unk_100918090;
  v8[4] = a1;
  v8[5] = v4;
  sub_100023D84(v5, v8);
  reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    v7 = reply;
    xpc_dictionary_set_value(reply, "kCBMsgArgDevices", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v7);
    xpc_release(v7);
  }
  xpc_release(v4);
}

void sub_100270560(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  unsigned __int16 v16;
  unsigned int v17;
  unsigned int v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *__p[2];
  char v48;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (value)
  {
    v3 = value;
    v4 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    if (v5)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100920B88);
      v6 = sub_1000589DC((uint64_t)off_1009778C0, v5, 0);
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_100920BA8);
      v7 = sub_10006D488((uint64_t)off_1009778E0, v6, 0);
      if (v7)
      {
        v8 = sub_1000239F0(v3, "kCBMsgArgName");
        v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        v38 = v9;
        if (v9)
        {
          sub_100091AE8(__p, (char *)objc_msgSend(objc_retainAutorelease(v9), "UTF8String"));
          sub_100440D9C(v7, (uint64_t)__p, 1);
          if (v48 < 0)
            operator delete(__p[0]);
        }
        v10 = sub_1002C3AD4(v3, "kCBMsgArgSmartRoutingEnabled");
        v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        v37 = v11;
        if (v11)
          sub_10044D524(v7, (uint64_t)objc_msgSend(v11, "charValue", v11, v38));
        sub_10044D88C(v7);
        v12 = sub_1002C3AD4(v3, "kCBMsgArgInEarDetectionEnabled");
        v46 = (void *)objc_claimAutoreleasedReturnValue(v12);
        if (v46)
        {
          if (qword_1009778D8 != -1)
            dispatch_once(&qword_1009778D8, &stru_100920C28);
          sub_100422AA8((uint64_t)off_1009778D0, v7, (int)objc_msgSend(v46, "BOOLValue", v37));
        }
        v13 = sub_1002C3AD4(v3, "kCBMsgArgMicMode");
        v45 = (void *)objc_claimAutoreleasedReturnValue(v13);
        if (v45)
        {
          if (qword_1009778D8 != -1)
            dispatch_once(&qword_1009778D8, &stru_100920C28);
          sub_100421CB4((uint64_t)off_1009778D0, v7, (uint64_t)objc_msgSend(v45, "unsignedIntValue", v37));
        }
        v14 = sub_1002C3AD4(v3, "kCBMsgArgDoubleTapAction");
        v44 = (void *)objc_claimAutoreleasedReturnValue(v14);
        if (v44)
        {
          if (qword_1009778D8 != -1)
            dispatch_once(&qword_1009778D8, &stru_100920C28);
          sub_100421D10((uint64_t)off_1009778D0, v7, (uint64_t)objc_msgSend(v44, "unsignedIntValue", v37));
        }
        v15 = sub_1002C3AD4(v3, "kCBMsgArgDoubleTapActionEx");
        v43 = (void *)objc_claimAutoreleasedReturnValue(v15);
        if (v43)
        {
          v16 = (unsigned __int16)objc_msgSend(v43, "unsignedIntValue");
          v17 = HIBYTE(v16);
          v18 = v16;
          if (qword_1009778D8 != -1)
            dispatch_once(&qword_1009778D8, &stru_100920C28);
          sub_100421D68((uint64_t)off_1009778D0, v7, v17, v18);
        }
        v19 = sub_1002C3AD4(v3, "kCBMsgArgListeningMode");
        v42 = (void *)objc_claimAutoreleasedReturnValue(v19);
        if (v42)
        {
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_100920C48);
          sub_100279E6C((uint64_t)off_100977A80, v7, 13, (uint64_t)objc_msgSend(v42, "unsignedIntValue", v37), 2u);
        }
        v20 = sub_1002C3AD4(v3, "kCBMsgArgListeningConfigs");
        v41 = (void *)objc_claimAutoreleasedReturnValue(v20);
        if (v41)
        {
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_100920C48);
          sub_100279E6C((uint64_t)off_100977A80, v7, 26, (uint64_t)objc_msgSend(v41, "unsignedIntValue", v37), 2u);
        }
        v21 = sub_1002C3AD4(v3, "kCBMsgArgAutoAnswerCalls");
        v40 = (void *)objc_claimAutoreleasedReturnValue(v21);
        if (v40)
        {
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_100920C48);
          v22 = off_100977A80;
          if (objc_msgSend(v40, "BOOLValue", v37))
            v23 = 1;
          else
            v23 = 2;
          sub_100279E6C((uint64_t)v22, v7, 30, v23, 2u);
        }
        v24 = sub_1002C3AD4(v3, "kCBMsgArgCrownRotationDirection");
        v39 = (void *)objc_claimAutoreleasedReturnValue(v24);
        if (v39)
        {
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_100920C48);
          sub_100279E6C((uint64_t)off_100977A80, v7, 28, (uint64_t)objc_msgSend(v39, "unsignedCharValue", v37), 2u);
        }
        v25 = sub_1002C3AD4(v3, "kCBMsgArgSingleClickMode");
        v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        if (v26)
        {
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_100920C48);
          sub_100279E6C((uint64_t)off_100977A80, v7, 20, (uint64_t)objc_msgSend(v26, "unsignedIntValue", v37), 2u);
        }
        v27 = sub_1002C3AD4(v3, "kCBMsgArgDoubleClickMode");
        v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
        if (v28)
        {
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_100920C48);
          sub_100279E6C((uint64_t)off_100977A80, v7, 21, (uint64_t)objc_msgSend(v28, "unsignedIntValue", v37), 2u);
        }
        v29 = sub_1002C3AD4(v3, "kCBMsgArgClickHoldMode");
        v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
        if (v30)
        {
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_100920C48);
          sub_100279E6C((uint64_t)off_100977A80, v7, 22, (uint64_t)objc_msgSend(v30, "unsignedIntValue", v37), 2u);
        }
        v31 = sub_1002C3AD4(v3, "kCBMsgArgDoubleClickInterval");
        v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
        if (v32)
        {
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_100920C48);
          sub_100279E6C((uint64_t)off_100977A80, v7, 23, (uint64_t)objc_msgSend(v32, "unsignedIntValue", v37), 2u);
        }
        v33 = sub_1002C3AD4(v3, "kCBMsgArgClickHoldInterval");
        v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
        if (v34)
        {
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_100920C48);
          sub_100279E6C((uint64_t)off_100977A80, v7, 24, (uint64_t)objc_msgSend(v34, "unsignedIntValue", v37), 2u);
        }
        v35 = sub_1002C3AD4(v3, "kCBMsgArgOneBudANCMode");
        v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
        if (v36)
        {
          if (qword_100977A88 != -1)
            dispatch_once(&qword_100977A88, &stru_100920C48);
          sub_100279E6C((uint64_t)off_100977A80, v7, 27, (uint64_t)objc_msgSend(v36, "unsignedIntValue", v37), 2u);
        }

      }
      else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        sub_1006D6048();
      }
    }

  }
}

void sub_100270D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{

  _Unwind_Resume(a1);
}

void sub_100270E48()
{
  JUMPOUT(0x100270E50);
}

void sub_100270E60(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  char v10;
  unsigned int v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  int64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  const char *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  xpc_object_t reply;
  void *v35;
  int64_t value;
  int v37;

  v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (v4)
  {
    v5 = sub_1002C39FC(v4, "kCBMsgArgDeviceUUID");
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    if (v6)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100920B88);
      v7 = sub_1000589DC((uint64_t)off_1009778C0, v6, 0);
      if (!v7)
        goto LABEL_31;
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_100920BA8);
      v8 = sub_10006D488((uint64_t)off_1009778E0, v7, 0);
      if (v8)
      {
        v9 = sub_100273218(v6);
        v10 = sub_10044D708(v8);
        xpc_dictionary_set_BOOL(v9, "kCBMsgArgSmartRoutingSupported", v10);
        if (sub_10044D708(v8))
        {
          v11 = sub_10044F658(v8);
          xpc_dictionary_set_int64(v9, "kCBMsgArgSmartRoutingEnabled", v11);
        }
        v12 = sub_10044F614(v8);
        xpc_dictionary_set_BOOL(v9, "kCBMsgArgInEarDetectionEnabled", v12);
        v13 = sub_10044F5D0(v8);
        xpc_dictionary_set_int64(v9, "kCBMsgArgMicMode", v13);
        v14 = sub_10044F708(v8);
        xpc_dictionary_set_int64(v9, "kCBMsgArgListeningMode", v14);
        v15 = sub_10044F9F4(v8) == 1;
        xpc_dictionary_set_BOOL(v9, "kCBMsgArgAutoAnswerCalls", v15);
        v16 = sub_10044F9B0(v8);
        xpc_dictionary_set_int64(v9, "kCBMsgArgCrownRotationDirection", v16);
        v37 = 0;
        sub_100447218(v8, (uint64_t)&v37);
        v17 = sub_100447694((unsigned int *)v8, 1);
        if (v37 <= 0)
          v18 = v17;
        else
          v18 = v37;
        xpc_dictionary_set_int64(v9, "kCBMsgArgBatteryPercent", v18);
        v19 = sub_100447694((unsigned int *)v8, 2);
        xpc_dictionary_set_int64(v9, "kCBMsgArgBatteryPercentRight", v19);
        v20 = sub_100447694((unsigned int *)v8, 4);
        xpc_dictionary_set_int64(v9, "kCBMsgArgBatteryPercentLeft", v20);
        v21 = sub_100447694((unsigned int *)v8, 8);
        xpc_dictionary_set_int64(v9, "kCBMsgArgBatteryPercentCase", v21);
        v22 = sub_100447694((unsigned int *)v8, 1);
        xpc_dictionary_set_int64(v9, "kCBMsgArgBatteryPercentSingle", v22);
        v23 = sub_100447694((unsigned int *)v8, 16);
        xpc_dictionary_set_int64(v9, "kCBMsgArgBatteryPercentCombined", v23);
        if (sub_100442118(v8, 14))
        {
          xpc_dictionary_set_int64(v9, "kCBMsgArgDoubleTapCapability", 1);
          v24 = sub_1004459D0(v8);
          v25 = "kCBMsgArgDoubleTapActionEx";
        }
        else
        {
          xpc_dictionary_set_int64(v9, "kCBMsgArgDoubleTapCapability", 0);
          v24 = sub_1004459D0(v8);
          v25 = "kCBMsgArgDoubleTapAction";
        }
        xpc_dictionary_set_int64(v9, v25, v24);
        if (qword_1009778D8 != -1)
          dispatch_once(&qword_1009778D8, &stru_100920C28);
        if (off_1009778D0)
        {
          value = 0;
          sub_100422B04((uint64_t)off_1009778D0, v8, (int *)&value + 1, (int *)&value);
          xpc_dictionary_set_int64(v9, "kCBMsgArgPrimaryInEarStatus", HIDWORD(value));
          xpc_dictionary_set_int64(v9, "kCBMsgArgSecondaryInEarStatus", value);
        }
        else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        {
          sub_1006D6074();
        }
        v26 = sub_10044F74C(v8);
        xpc_dictionary_set_int64(v9, "kCBMsgArgListeningConfigs", v26);
        v27 = sub_10044F818(v8);
        xpc_dictionary_set_int64(v9, "kCBMsgArgSingleClickMode", v27);
        v28 = sub_10044F85C(v8);
        xpc_dictionary_set_int64(v9, "kCBMsgArgDoubleClickMode", v28);
        v29 = sub_10044F8A0(v8);
        xpc_dictionary_set_int64(v9, "kCBMsgArgClickHoldMode", v29);
        v30 = sub_10044F8E4(v8);
        xpc_dictionary_set_int64(v9, "kCBMsgArgDoubleClickInterval", v30);
        v31 = sub_10044F928(v8);
        xpc_dictionary_set_int64(v9, "kCBMsgArgClickHoldInterval", v31);
        v32 = sub_10044F96C(v8);
        xpc_dictionary_set_int64(v9, "kCBMsgArgOneBudANCMode", v32);
        xpc_dictionary_set_BOOL(v9, "kCBMsgArgIsConnectedOverUSB", *(_BYTE *)(v8 + 1288));
        v33 = sub_1004512E8(v8);
        xpc_dictionary_set_int64(v9, "kCBMsgArgColorID", v33);
        reply = xpc_dictionary_create_reply(xdict);
        v35 = reply;
        if (reply)
        {
          xpc_dictionary_set_value(reply, "kCBMsgArgState", v9);
          xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v35);
          xpc_release(v35);
        }
        xpc_release(v9);
      }
      else
      {
LABEL_31:
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_1006D6048();
      }
    }

  }
}

void sub_10027136C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100271398(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint8_t buf[24];

  v25 = 0;
  v26 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (!sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgPSM") && v5)
  {
    v12 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v26;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Classic handleOpenL2CAPChannel psm: %lld", buf, 0xCu);
    }
    *(_QWORD *)buf = 0;
    if (!sub_100023B7C(v25, 0, v13, v14, v15, v16, v17, v18, (uint64_t)"kCBL2CAPChannelInMTU"))
    {
      v19 = sub_1000419F4();
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_100274FAC;
      v20[3] = &unk_100920878;
      v22 = a1;
      v23 = v26;
      v24 = *(_QWORD *)buf;
      v21 = v5;
      sub_100023D84(v19, v20);

    }
  }

}

void sub_10027155C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;

  _Unwind_Resume(a1);
}

void sub_100271588(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;

  v19 = 0;
  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v12 = sub_100023B7C(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgPSM");
  v13 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v21 = v19;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Classic handleCloseL2CAPChannel psm: %lld", buf, 0xCu);
  }
  if (!v12 && v5)
  {
    v14 = sub_1000419F4();
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_1002750A0;
    v15[3] = &unk_1009183A0;
    v17 = a1;
    v18 = v19;
    v16 = v5;
    sub_100023D84(v14, v15);

  }
}

void sub_100271704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_10027172C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  NSObject *v11;
  unsigned int v12;
  xpc_object_t reply;
  void *v14;
  void *v15;
  id v16;
  NSObject *v17;
  int64_t v18;
  _BYTE *v19;
  int v20;
  NSObject *v21;
  xpc_object_t v22;
  id v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  int v28;
  _BYTE *v29;
  void *v30;
  void *v31;
  void *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD v37[5];
  unsigned __int16 v38;
  char v39;
  unsigned __int16 v40;
  _QWORD v41[4];
  id v42;
  uint64_t *v43;
  _QWORD v44[2];
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char v48;
  _BYTE v49[12];
  __int16 v50;
  _BYTE *v51;
  char v52;
  _BYTE buf[24];
  _QWORD v54[2];

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1000239F0(value, "kCBMsgArgName");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = sub_1002C3A5C(value, "kCBMsgArgServiceUUID");
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = sub_1002C3A5C(value, "kCBMsgArgSDPRecordData");
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v8;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 2112;
    v54[0] = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "handleAddServiceToSDP: %@ with name: %@ record: %@ to SDP", buf, 0x20u);
  }
  if (!v10)
  {
    if (!v8)
      goto LABEL_24;
    v45 = 0;
    v46 = &v45;
    v47 = 0x2020000000;
    v48 = 0;
    v44[0] = 0;
    v44[1] = 0;
    sub_10003415C((uint64_t)v44, a1 + 216);
    v15 = *(void **)(a1 + 280);
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472;
    v41[2] = sub_100276B84;
    v41[3] = &unk_1009209B0;
    v16 = v8;
    v42 = v16;
    v43 = &v45;
    objc_msgSend(v15, "enumerateKeysAndObjectsUsingBlock:", v41);
    v17 = qword_100999860;
    if (*((_BYTE *)v46 + 24))
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006D612C();
      v18 = 15;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_INFO))
      {
        sub_1000340DC(*(_QWORD *)(a1 + 128), (uint64_t)buf);
        v19 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)v49 = 138412546;
        *(_QWORD *)&v49[4] = v16;
        v50 = 2082;
        v51 = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Adding service %@ for session \"%{public}s\"", v49, 0x16u);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      v40 = 0;
      v39 = 0;
      sub_100043758(&v39);
      v20 = sub_1001E3B68(&v40);
      sub_10004339C(&v39);
      v21 = qword_100999860;
      if (v20)
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_1006D60CC();
        v18 = 4;
      }
      else
      {
        v24 = os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT);
        if (v24)
        {
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = v40;
          *(_WORD *)&buf[8] = 2112;
          *(_QWORD *)&buf[10] = v16;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "psm: 0x%x assigned to service: %@", buf, 0x12u);
        }
        v26 = sub_100275D2C(v24, v25, v16, v40);
        v27 = qword_100999860;
        if ((_DWORD)v26)
        {
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
          {
            v28 = v40;
            sub_1000340DC(*(_QWORD *)(a1 + 128), (uint64_t)v49);
            v29 = v49;
            if (v52 < 0)
              v29 = *(_BYTE **)v49;
            *(_DWORD *)buf = 138413058;
            *(_QWORD *)&buf[4] = v16;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v28;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v26;
            LOWORD(v54[0]) = 2082;
            *(_QWORD *)((char *)v54 + 2) = v29;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Successfully added service uuid %@ with psm: 0x%x, srh: 0x%X for session \"%{public}s\"", buf, 0x22u);
            if (v52 < 0)
              operator delete(*(void **)v49);
          }
          v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v40));
          v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObject:forKey:](NSMutableDictionary, "dictionaryWithObject:forKey:", v16));
          v31 = *(void **)(a1 + 280);
          v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v26));
          objc_msgSend(v31, "setObject:forKeyedSubscript:", v30, v32);

          v33 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
          {
            v34 = *(_QWORD *)(a1 + 280);
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v34;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "currently published services in sdp: %@", buf, 0xCu);
          }
          v35 = sub_1000419F4();
          v37[0] = _NSConcreteStackBlock;
          v37[1] = 3221225472;
          v37[2] = sub_100276C78;
          v37[3] = &unk_100920960;
          v37[4] = a1;
          v38 = v40;
          sub_100023D84(v35, v37);
          sub_100043728(&v39);

          goto LABEL_23;
        }
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_1006D60A0();
        v18 = 14;
      }
      sub_100043728(&v39);
    }
    v22 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v22, "kCBMsgArgResult", v18);
    v23 = objc_retainAutorelease(v16);
    xpc_dictionary_set_data(v22, "kCBMsgArgServiceUUID", objc_msgSend(v23, "bytes"), (size_t)objc_msgSend(v23, "length"));
    sub_10005E138(a1, 46, v22, 1);

LABEL_23:
    sub_100034234((uint64_t)v44);
    _Block_object_dispose(&v45, 8);
    goto LABEL_24;
  }
  v12 = sub_100275EB0(a1, v10);
  reply = xpc_dictionary_create_reply(xdict);
  v14 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgServiceHandle", v12);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v14);
    xpc_release(v14);
  }
LABEL_24:

}

void sub_100271CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;

  sub_100043728(&a18);

  sub_100034234((uint64_t)&a25);
  _Block_object_dispose(&a27, 8);

  _Unwind_Resume(a1);
}

void sub_100271D94(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v4;
  void *v5;
  int64_t int64;
  NSObject *v7;
  void *v8;
  id v9;
  int v10;
  NSObject *v11;
  void **v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  NSObject *v18;
  void **v19;
  _QWORD v20[6];
  void *__p[2];
  char v22;
  char v23;
  _QWORD v24[4];
  id v25;
  __int128 *p_buf;
  void **v27;
  void *v28[2];
  uint64_t v29;
  __int16 v30;
  _QWORD v31[2];
  uint8_t v32[4];
  id v33;
  __int16 v34;
  int v35;
  __int16 v36;
  void **v37;
  __int128 buf;
  uint64_t v39;
  int v40;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v4 = sub_1002C3A5C(value, "kCBMsgArgServiceUUID");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  int64 = xpc_dictionary_get_int64(value, "kCBMsgArgServiceHandle");
  v31[0] = 0;
  v31[1] = 0;
  sub_10003415C((uint64_t)v31, a1 + 216);
  if (v5)
  {
    v7 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "remove service: %@ from SDP", (uint8_t *)&buf, 0xCu);
    }
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v39 = 0x2020000000;
    v40 = 0;
    v28[0] = 0;
    v28[1] = v28;
    v29 = 0x2020000000;
    v30 = 0;
    v8 = *(void **)(a1 + 280);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100276CFC;
    v24[3] = &unk_100920A00;
    v9 = v5;
    v25 = v9;
    p_buf = &buf;
    v27 = v28;
    objc_msgSend(v8, "enumerateKeysAndObjectsUsingBlock:", v24);
    if (*(_DWORD *)(*((_QWORD *)&buf + 1) + 24))
    {
      v23 = 0;
      sub_100043758(&v23);
      v10 = sub_1002467B8(*(_DWORD *)(*((_QWORD *)&buf + 1) + 24));
      sub_10004339C(&v23);
      v11 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000340DC(*(_QWORD *)(a1 + 128), (uint64_t)__p);
        if (v22 >= 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        *(_DWORD *)v32 = 138412802;
        v33 = v9;
        v34 = 1024;
        v35 = v10;
        v36 = 2082;
        v37 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Removed service uuid %@ with status 0x%x  for session \"%{public}s\"", v32, 0x1Cu);
        if (v22 < 0)
          operator delete(__p[0]);
      }
      v13 = sub_1000419F4();
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_100276E8C;
      v20[3] = &unk_100919528;
      v20[4] = v28;
      v20[5] = a1;
      sub_100023D84(v13, v20);
      sub_100043728(&v23);
    }

    _Block_object_dispose(v28, 8);
    _Block_object_dispose(&buf, 8);
  }
  else if ((_DWORD)int64)
  {
    v14 = *(void **)(a1 + 280);
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", int64));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v15));
    LOBYTE(v14) = v16 == 0;

    if ((v14 & 1) != 0)
    {
      v17 = 414;
    }
    else
    {
      LOBYTE(buf) = 0;
      sub_100043758(&buf);
      v17 = sub_1002467B8(int64);
      sub_10004339C(&buf);
      sub_100043728(&buf);
    }
    v18 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(*(_QWORD *)(a1 + 128), (uint64_t)v28);
      v19 = v29 >= 0 ? v28 : (void **)v28[0];
      LODWORD(buf) = 67109634;
      DWORD1(buf) = int64;
      WORD4(buf) = 1024;
      *(_DWORD *)((char *)&buf + 10) = v17;
      HIWORD(buf) = 2082;
      v39 = (uint64_t)v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Removed service handle 0x%X with status 0x%X  for session \"%{public}s\"", (uint8_t *)&buf, 0x18u);
      if (SHIBYTE(v29) < 0)
        operator delete(v28[0]);
    }
  }
  sub_100034234((uint64_t)v31);

}

void sub_10027215C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  void *v31;

  sub_100034234((uint64_t)&a31);

  _Unwind_Resume(a1);
}

uint64_t sub_1002721EC(uint64_t a1)
{
  void *v2;
  _QWORD v4[5];
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 216);
  v2 = *(void **)(a1 + 280);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100276EEC;
  v4[3] = &unk_100920A48;
  v4[4] = a1;
  objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v4);
  objc_msgSend(*(id *)(a1 + 280), "removeAllObjects");
  return sub_100034234((uint64_t)v5);
}

void sub_10027226C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100034234(v1 - 32);
  _Unwind_Resume(a1);
}

void sub_100272280(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  uint8_t buf[4];
  _BYTE v14[14];
  __int16 v15;
  uint64_t v16;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v3 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v11 = sub_100023B7C(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgRFCOMMChannelID");
  v12 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)v14 = v11;
    *(_WORD *)&v14[4] = 2112;
    *(_QWORD *)&v14[6] = v4;
    v15 = 2048;
    v16 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "handleOpenRFCOMMChannel failed with result 0x%x, identifier: %@, rfcommChannelID: %lld", buf, 0x1Cu);
  }

}

void sub_10027242C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100272444(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint8_t buf[4];
  uint64_t v13;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v3 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_100023B7C(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgRFCOMMChannelID");
  v11 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "handleCloseRFCOMMChannel rfcommChannelID: %lld", buf, 0xCu);
  }

}

void sub_100272574(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10027258C(int a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  uint8_t buf[4];
  _BYTE v14[14];
  __int16 v15;
  uint64_t v16;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v3 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v11 = sub_100023B7C(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgRFCOMMChannelID");
  v12 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)v14 = v11;
    *(_WORD *)&v14[4] = 2112;
    *(_QWORD *)&v14[6] = v4;
    v15 = 2048;
    v16 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "handleRFCOMMPortConfiguration failed with result 0x%x, identifier: %@, rfcommChannelID: %lld", buf, 0x1Cu);
  }

}

void sub_100272774(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10027278C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value;
  id v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t reply;
  void *v9;
  id v10;

  value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  v5 = sub_1002C39FC(value, "kCBMsgArgDeviceUUID");
  v10 = (id)objc_claimAutoreleasedReturnValue(v5);
  if (v10)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100920B88);
    v6 = sub_1000589DC((uint64_t)off_1009778C0, v10, 0);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100920BA8);
    v7 = sub_10006D488((uint64_t)off_1009778E0, v6, 0);
    if (v7)
    {
      if (qword_100977A78 != -1)
        dispatch_once(&qword_100977A78, &stru_100920BC8);
      LODWORD(v7) = sub_100496DBC((uint64_t)off_100977A70, v7);
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  reply = xpc_dictionary_create_reply(xdict);
  v9 = reply;
  if (reply)
  {
    xpc_dictionary_set_int64(reply, "kCBMsgArgConnectedServices", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v9);
    xpc_release(v9);
  }

}

void sub_1002728E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_100272904(uint64_t a1, xpc_object_t original)
{
  xpc_object_t reply;
  void *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  int v8;
  char v9;
  void *bytes;
  size_t length;
  uint8_t buf[4];
  int v13;

  reply = xpc_dictionary_create_reply(original);
  if (reply)
  {
    v4 = reply;
    bytes = 0;
    length = 0;
    v5 = malloc_type_malloc(0x3E80uLL, 0x1A12BF70uLL);
    if (v5)
    {
      v6 = v5;
      bytes = v5;
      length = 0x200003E803E80;
      v9 = 0;
      sub_100043758(&v9);
      if (!sub_100248604((uint64_t)&bytes))
      {
        v7 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          v8 = *(unsigned __int16 *)bytes;
          *(_DWORD *)buf = 67109120;
          v13 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending sdp record state (%d records)", buf, 8u);
        }
        xpc_dictionary_set_data(v4, "kCBMsgArgSDPRecordData", bytes, WORD2(length));
      }
      sub_10004339C(&v9);
      free(v6);
      sub_100043728(&v9);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v4);
    xpc_release(v4);
  }
}

void sub_100272A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_100272A68()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_1006D6158(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t sub_100272AA8(uint64_t a1, unsigned int a2)
{
  return (a2 < 0x3D) & (0x1010006008000080uLL >> a2);
}

BOOL sub_100272ACC(uint64_t a1, __int16 a2)
{
  return (a2 & 0xFFFE) == 8;
}

uint64_t sub_100272ADC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::ios_base *v5;

  v2 = a1 + 8;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = v4;
  v5 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_100272BA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::ostream::~ostream(v2, v3 + 8);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

void sub_100272BC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unsigned int v7;
  void *v8;
  void *__p[2];
  uint64_t v10;

  v2 = *(unsigned __int8 *)(a1 + 84);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(unsigned __int8 *)(a1 + 85);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100920AE8);
  v6 = off_100978168;
  v7 = *(_DWORD *)(v3 + 40);
  v8 = *(void **)(a1 + 32);
  if (*(char *)(v3 + 79) < 0)
  {
    sub_10003430C(__p, *(void **)(v3 + 56), *(_QWORD *)(v3 + 64));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v3 + 56);
    v10 = *(_QWORD *)(v3 + 72);
  }
  *(_QWORD *)(v3 + 128) = sub_1002DFD6C((uint64_t)v6, v3 + 144, v7, v8, (uint64_t)__p, *(_DWORD *)(a1 + 80), *(void **)(a1 + 40), (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24), (v4 != 0) | (unint64_t)(v2 << 8) | (v5 << 32));
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void sub_100272CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100272CFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a1 + 8;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf(v3);
  std::ios::~ios(a1 + 112);
  return a1;
}

void sub_100272D80(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  sub_100272DF8(a1);
  sub_1002721EC(a1);
  if (*(_QWORD *)(a1 + 128))
  {
    v2 = sub_1000419F4();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100272F58;
    v3[3] = &unk_100917378;
    v3[4] = a1;
    sub_100023D84(v2, v3);
    *(_QWORD *)(a1 + 128) = 0;
  }
}

void sub_100272DF8(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v1 = a1 + 176;
  if (*(_QWORD *)(a1 + 176))
  {
    if (qword_100977D80 != -1)
      dispatch_once(&qword_100977D80, &stru_100920BE8);
    v3 = off_100977D78;
    v4 = *(std::__shared_weak_count **)(a1 + 184);
    v15 = *(_QWORD *)(a1 + 176);
    v16 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v7 = sub_1004C0EF4((uint64_t)v3, &v15);
    v8 = v16;
    if (v16)
    {
      v9 = (unint64_t *)&v16->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (qword_100977D80 != -1)
      dispatch_once(&qword_100977D80, &stru_100920BE8);
    sub_1004C1014(off_100977D78, v7);
    v14 = 0uLL;
    sub_100274874(v1, &v14);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_100272F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10009F88C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100272F58(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_100920B08);
  sub_10006A01C(qword_10097AA58, *(_QWORD *)(v1 + 128));
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100920AE8);
  return sub_100019A7C((uint64_t)off_100978168, *(_QWORD *)(v1 + 128), 0);
}

void sub_100272FE4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  int v4;

  if (a3 - 2 >= 3)
  {
    if (a3)
      v4 = 0;
    else
      v4 = 4;
    if (a3 == 1)
      v3 = 5;
    else
      v3 = v4;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 136);
  }
  sub_1004B13DC(a1, v3, a3);
}

void sub_100273014(uint64_t a1, uint64_t a2, unsigned int a3)
{
  sub_100272FE4(a1 - 144, a2, a3);
}

void sub_10027301C(uint64_t a1, uint64_t a2, int a3)
{
  sub_1004B1604(a1, a3);
}

void sub_100273024(uint64_t a1, uint64_t a2, int a3)
{
  sub_1004B1604(a1 - 144, a3);
}

void sub_100273030(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned __int8 *v4;
  id v5;
  void *v6;
  xpc_object_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD v11[2];

  v8 = 0;
  v9 = 0;
  v10 = 0;
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_100920B68);
  sub_10006CA88((uint64_t)off_100978148, &v8);
  v2 = v8;
  v3 = v9;
  if (v8 != v9)
  {
    do
    {
      v4 = (unsigned __int8 *)*v2;
      if (sub_10043FC5C(*v2) || !*(_BYTE *)(a1 + 48))
      {
        v11[0] = 0;
        v11[1] = 0;
        if (qword_1009778C8 != -1)
          dispatch_once(&qword_1009778C8, &stru_100920B88);
        sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)v4[128] << 40) | ((unint64_t)v4[129] << 32) | ((unint64_t)v4[130] << 24) | ((unint64_t)v4[131] << 16) | ((unint64_t)v4[132] << 8) | v4[133], 1u, 0, 0, 0, (unsigned __int8 *)v11);
        v5 = sub_100030DF4((const unsigned __int8 *)v11);
        v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
        v7 = sub_100273218(v6);

        xpc_array_append_value(*(xpc_object_t *)(a1 + 40), v7);
        xpc_release(v7);
      }
      ++v2;
    }
    while (v2 != v3);
    v2 = v8;
  }
  if (v2)
  {
    v9 = v2;
    operator delete(v2);
  }
}

void sub_1002731DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

xpc_object_t sub_100273218(void *a1)
{
  id v1;
  xpc_object_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  const char *v12;
  const char *p_string;
  id v14;
  void *v15;
  void *v16;
  unsigned int v17;
  _BYTE bytes[6];
  char *string;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD __dst[5];
  uint64_t v25;
  _DWORD v26[3];
  unsigned int value;
  unsigned int value_4;
  unsigned __int8 uuid[8];
  uint64_t v30;
  uint64_t v31;

  v1 = a1;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v1;
  v4 = v3;
  if (v3)
  {
    *(_QWORD *)uuid = 0;
    v30 = 0;
    objc_msgSend(v3, "getUUIDBytes:", uuid);
    xpc_dictionary_set_uuid(v2, "kCBMsgArgDeviceUUID", uuid);
  }

  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100920B88);
  v5 = sub_1000589DC((uint64_t)off_1009778C0, v4, 0);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100920BA8);
  v6 = sub_10006D488((uint64_t)off_1009778E0, v5, 0);
  v7 = v6;
  if (v6)
  {
    *(_QWORD *)uuid = 0;
    v30 = 0;
    v31 = 0;
    sub_10043F6EC(v6, (uint64_t)uuid);
    if (SHIBYTE(v31) < 0)
    {
      if (!v30)
        goto LABEL_14;
      v8 = *(unsigned __int8 **)uuid;
    }
    else
    {
      if (!HIBYTE(v31))
        goto LABEL_14;
      v8 = uuid;
    }
    xpc_dictionary_set_string(v2, "kCBMsgArgName", (const char *)v8);
LABEL_14:
    v9 = sub_10043F854(v7);
    xpc_dictionary_set_int64(v2, "kCBMsgArgDeviceType", v9);
    value_4 = 0;
    if (sub_10043FA40(v7, &value_4))
      xpc_dictionary_set_int64(v2, "kCBMsgArgClassOfDevice", value_4);
    v10 = sub_10043E93C((unsigned __int8 *)v7);
    xpc_dictionary_set_int64(v2, "kCBMsgArgPairingState", v10);
    v11 = sub_10043FB64(v7);
    xpc_dictionary_set_int64(v2, "kCBMsgArgRssi", v11);
    xpc_dictionary_set_int64(v2, "kCBMsgArgInternalState", 2 * *(unsigned __int8 *)(v7 + 1324));
    value = 0;
    memset(v26, 0, sizeof(v26));
    if (sub_100444BF0(v7, &value, &v26[2], &v26[1], v26))
    {
      xpc_dictionary_set_int64(v2, "kCBMsgArgVIDSource", value);
      xpc_dictionary_set_int64(v2, "kCBMsgArgVID", v26[2]);
      xpc_dictionary_set_int64(v2, "kCBMsgArgPID", v26[1]);
      xpc_dictionary_set_int64(v2, "kCBMsgArgVersion", v26[0]);
    }
    *(_OWORD *)&__dst[1] = 0uLL;
    v25 = 0;
    if (*(char *)(v7 + 415) < 0)
    {
      sub_10003430C(&__dst[1], *(void **)(v7 + 392), *(_QWORD *)(v7 + 400));
    }
    else
    {
      *(_OWORD *)&__dst[1] = *(_OWORD *)(v7 + 392);
      v25 = *(_QWORD *)(v7 + 408);
    }
    if (SHIBYTE(v25) < 0)
    {
      if (!*(_QWORD *)&__dst[3])
        goto LABEL_27;
      v12 = *(const char **)&__dst[1];
    }
    else
    {
      if (!HIBYTE(v25))
        goto LABEL_27;
      v12 = (const char *)&__dst[1];
    }
    xpc_dictionary_set_string(v2, "kCBMsgArgModelIdentifier", v12);
LABEL_27:
    __dst[0] = 0;
    if (sub_1004466D8(v7, __dst))
      xpc_dictionary_set_int64(v2, "kCBMsgArgAppleFeatureBitMask", __dst[0]);
    v23 = 0;
    if (sub_100446790(v7, &v23))
      xpc_dictionary_set_int64(v2, "kCBMsgArgExtendedAppleFeatureBitMask", HIDWORD(v23) | ((unint64_t)v23 << 32));
    string = 0;
    v21 = 0;
    v22 = 0;
    sub_10046E9BC((unsigned __int8 *)(v7 + 128), &string);
    if (SHIBYTE(v22) < 0)
    {
      if (v21)
      {
        p_string = string;
        goto LABEL_36;
      }
    }
    else if (HIBYTE(v22))
    {
      p_string = (const char *)&string;
LABEL_36:
      xpc_dictionary_set_string(v2, "kCBMsgArgAddressString", p_string);
    }
    bytes[0] = BYTE5(v5);
    bytes[1] = BYTE4(v5);
    bytes[2] = BYTE3(v5);
    bytes[3] = BYTE2(v5);
    bytes[4] = BYTE1(v5);
    bytes[5] = v5;
    xpc_dictionary_set_data(v2, "kCBAdvDataDeviceAddress", bytes, 6uLL);
    v14 = sub_100453478(v7);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    if (objc_msgSend(v15, "count"))
    {
      v16 = (void *)sub_1004B10A4(v15);
      xpc_dictionary_set_value(v2, "kCBMsgArgServices", v16);
      xpc_release(v16);
    }
    xpc_dictionary_set_BOOL(v2, "kCBMsgArgIsConnectedOverUSB", *(_BYTE *)(v7 + 1288));
    if (sub_1004512E8(v7))
    {
      v17 = sub_1004512E8(v7);
      xpc_dictionary_set_int64(v2, "kCBMsgArgColorID", v17);
    }

    if (SHIBYTE(v22) < 0)
      operator delete(string);
    if (SHIBYTE(v25) < 0)
      operator delete(*(void **)&__dst[1]);
    if (SHIBYTE(v31) < 0)
      operator delete(*(void **)uuid);
  }

  return v2;
}

void sub_100273690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  uint64_t v24;

  if (*(char *)(v24 - 57) < 0)
    operator delete(*(void **)(v24 - 80));

  _Unwind_Resume(a1);
}

void sub_100273740(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  int v12;

  v2 = *(_QWORD *)(a1 + 48);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100920AE8);
  sub_1002E30E4((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(void **)(a1 + 40));
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100920AE8);
  v3 = sub_10000A1A4((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), 2u);
  v4 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(v3 + 88);
    v6 = *(unsigned __int8 *)(a1 + 56);
    v7 = 136315650;
    v8 = "handleConnectPeerMsg_block_invoke";
    v9 = 2114;
    v10 = v5;
    v11 = 1024;
    v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s: Setting didRequestPairing for Application %{public}@ to %d", (uint8_t *)&v7, 0x1Cu);
  }
  *(_BYTE *)(v3 + 208) = *(_BYTE *)(a1 + 56);
}

void sub_100273890(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100920AE8);
  sub_1002E4E90((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(void **)(a1 + 32), *(_QWORD *)(a1 + 48) != 0, 1, 0);
}

void sub_1002738FC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v9;
  __int16 v10;
  __int16 v11;
  uint8_t buf[16];
  __int16 v13;

  switch(a2)
  {
    case 0:
      v5 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        v13 = 0;
        v6 = "Bluetooth discoveryStatus: scan started";
        v7 = (uint8_t *)&v13;
        goto LABEL_13;
      }
      break;
    case 1:
      v9 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Bluetooth discoveryStatus: scan stopped", buf, 2u);
      }
      sub_100273A78(a5);
      break;
    case 2:
      v5 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        v11 = 0;
        v6 = "Bluetooth discoveryStatus: query started";
        v7 = (uint8_t *)&v11;
        goto LABEL_13;
      }
      break;
    case 3:
      v5 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        v10 = 0;
        v6 = "Bluetooth discoveryStatus: query stopped";
        v7 = (uint8_t *)&v10;
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
      }
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006D61C8();
      break;
  }
}

void sub_100273A78(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  int v7;

  v2 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 192);
    v4 = *(unsigned __int8 *)(a1 + 193);
    v5[0] = 67109376;
    v5[1] = v3;
    v6 = 1024;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "restartInquiry: continuous? %d, already scanning? %d", (uint8_t *)v5, 0xEu);
  }
  if (*(_BYTE *)(a1 + 193))
  {
    if (*(_BYTE *)(a1 + 192))
    {
      *(_BYTE *)(a1 + 193) = 0;
      sub_100273E00(a1, 1);
    }
  }
}

void sub_100273B58(uint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v8;
  id v9;
  void *v10;
  xpc_object_t v11;
  NSObject *v12;
  void **v13;
  const char *v14;
  void **v15;
  void *__p[2];
  uint64_t v17;
  uint8_t buf[4];
  void **v19;
  _QWORD v20[2];

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100920BA8);
  v8 = (unsigned __int8 *)sub_10046F6C0((uint64_t)off_1009778E0, a3);
  __p[0] = 0;
  __p[1] = 0;
  v17 = 0;
  sub_10043F78C((uint64_t)v8, (uint64_t)__p);
  v20[0] = 0;
  v20[1] = 0;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100920B88);
  sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)v8[128] << 40) | ((unint64_t)v8[129] << 32) | ((unint64_t)v8[130] << 24) | ((unint64_t)v8[131] << 16) | ((unint64_t)v8[132] << 8) | v8[133], 1u, 0, 0, 0, (unsigned __int8 *)v20);
  v9 = sub_100030DF4((const unsigned __int8 *)v20);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = sub_100273218(v10);

  if (!a2)
  {
    sub_10005E138(a5, 44, v11, 1);
    v12 = qword_100999860;
    if (!os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
    v15 = __p;
    if (v17 < 0)
      v15 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v19 = v15;
    v14 = "Bluetooth discoveryEvent: device found: %s";
    goto LABEL_15;
  }
  if (a2 == 2)
  {
    sub_10005E138(a5, 45, v11, 1);
    v12 = qword_100999860;
    if (!os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
    v13 = __p;
    if (v17 < 0)
      v13 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v19 = v13;
    v14 = "Bluetooth discoveryEvent: device changed: %s";
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v14, buf, 0xCu);
    goto LABEL_19;
  }
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    sub_1006D6228();
  xpc_release(v11);
LABEL_19:
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
}

void sub_100273DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100273E00(uint64_t a1, int a2, uint64_t a3, void *a4, int a5, int a6)
{
  id v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint8_t buf[4];
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;

  v11 = a4;
  v12 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(unsigned __int8 *)(a1 + 193);
    *(_DWORD *)buf = 67109632;
    v37 = a2;
    v38 = 1024;
    v39 = v13;
    v40 = 1024;
    v41 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "startInquiry: continuous? %d, already scanning? %d, duplicates to be reported? %d", buf, 0x14u);
  }
  if (!*(_BYTE *)(a1 + 193))
  {
    objc_storeStrong((id *)(a1 + 200), a4);
    *(_DWORD *)(a1 + 208) = a5;
    sub_100274110((uint64_t *)a1);
    v14 = *(_QWORD *)(a1 + 176);
    if (v14)
    {
      if (a6)
      {
        v15 = qword_100999860;
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "startInquiry: Enabling duplicate reporting.", buf, 2u);
          v14 = *(_QWORD *)(a1 + 176);
        }
        sub_1004BDA68(v14);
        *(_BYTE *)(a1 + 212) = 1;
      }
      if (a2)
      {
        if (qword_100977D80 != -1)
          dispatch_once(&qword_100977D80, &stru_100920BE8);
        v16 = off_100977D78;
        v17 = *(std::__shared_weak_count **)(a1 + 184);
        v34 = *(_QWORD *)(a1 + 176);
        v35 = v17;
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
        }
        v20 = sub_1004C1908((uint64_t)v16, &v34, 1u, -1);
        v21 = v35;
        if (v35)
        {
          v22 = (unint64_t *)&v35->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        if (v20)
          goto LABEL_4;
        *(_BYTE *)(a1 + 192) = 1;
      }
      else
      {
        if (qword_100977D80 != -1)
          dispatch_once(&qword_100977D80, &stru_100920BE8);
        v24 = off_100977D78;
        v25 = *(std::__shared_weak_count **)(a1 + 184);
        v32 = *(_QWORD *)(a1 + 176);
        v33 = v25;
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        v28 = sub_1004C1908((uint64_t)v24, &v32, 0, -1);
        v29 = v33;
        if (v33)
        {
          v30 = (unint64_t *)&v33->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        *(_BYTE *)(a1 + 192) = 0;
        if (v28)
          goto LABEL_4;
      }
      *(_BYTE *)(a1 + 193) = 1;
      goto LABEL_4;
    }
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1006D6288();
  }
LABEL_4:

}

void sub_1002740DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_10009F88C((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t *sub_100274110(uint64_t *result)
{
  uint64_t **v1;
  uint64_t v2;
  void *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t v14;

  v1 = (uint64_t **)(result + 22);
  if (!result[22])
  {
    v2 = (uint64_t)result;
    v14 = 0;
    if (qword_100977D80 != -1)
      dispatch_once(&qword_100977D80, &stru_100920BE8);
    v3 = off_100977D78;
    v4 = sub_100022AE4(*(_QWORD *)(v2 + 128));
    sub_1004C0B94((uint64_t)v3, v4, &v14, &v12);
    v5 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (qword_100977D80 != -1)
      dispatch_once(&qword_100977D80, &stru_100920BE8);
    sub_1004C0E3C((uint64_t)off_100977D78, v14, &v11);
    sub_100274874((uint64_t)v1, &v11);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
    if (*((_QWORD *)&v11 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    result = *v1;
    if (*v1)
    {
      *(_QWORD *)&v11 = sub_1002738FC;
      *((_QWORD *)&v11 + 1) = sub_100273B58;
      return (uint64_t *)sub_1004BCEBC(result, v14, (uint64_t *)&v11, v2);
    }
  }
  return result;
}

void sub_10027427C(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  void *v9;
  NSObject *v10;
  id v11;
  void *v12;
  unint64_t v13;
  unint64_t i;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  _QWORD v26[2];
  _BYTE v27[24];
  _QWORD v28[2];

  if (a2)
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    sub_10043F6EC((uint64_t)a2, (uint64_t)&v22);
    if (SHIBYTE(v24) < 0)
    {
      v4 = v22;
      if (!v22)
      {
        v17 = 0;
        goto LABEL_33;
      }
    }
    else
    {
      v4 = &v22;
    }
    v28[0] = 0;
    v28[1] = 0;
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100920B88);
    sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133], 1u, 0, 0, 0, (unsigned __int8 *)v28);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4));
    if (v5)
    {
      v6 = sub_100030DF4((const unsigned __int8 *)v28);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      v8 = (id)v7;
      if (v7)
      {
        v25[0] = CFSTR("kCBMsgArgDeviceUUID");
        v25[1] = CFSTR("kCBMsgArgName");
        v26[0] = v7;
        v26[1] = v5;
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v26, v25, 2));
        sub_10005DF3C(a1, 45, v9);

        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
          sub_1006D63C0();
      }
      else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        sub_1006D6360();
      }
    }
    else
    {
      v10 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      {
        v11 = sub_100030DF4((const unsigned __int8 *)v28);
        v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        sub_1006D6314(v12, (uint64_t)v27, v10);
      }
      v8 = objc_alloc_init((Class)NSMutableString);
      v13 = HIBYTE(v24);
      if (v24 < 0)
        v13 = v23;
      if (v13)
      {
        for (i = 0; i < v15; ++i)
        {
          objc_msgSend(v8, "appendFormat:", CFSTR("%X "), *((unsigned __int8 *)v4 + i));
          v15 = HIBYTE(v24);
          if (v24 < 0)
            v15 = v23;
        }
      }
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006D62B4();
      if (qword_10097AA70 != -1)
        dispatch_once(&qword_10097AA70, &stru_100920C08);
      v16 = qword_10097AA68;
      sub_100091AE8(v20, "XpcClassicConnection::deviceNameUpdated");
      sub_100091AE8(__p, "Unparseable name change");
      sub_10047C59C(0.0, v16, (uint64_t *)v20, (uint64_t *)__p);
      if (v19 < 0)
        operator delete(__p[0]);
      if (v21 < 0)
        operator delete(v20[0]);
    }

    if (SHIBYTE(v24) < 0)
    {
      v17 = v22;
LABEL_33:
      operator delete(v17);
    }
  }
}

void sub_1002745C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;

  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100274658(uint64_t a1, unsigned __int8 *a2)
{
  sub_10027427C(a1 - 144, a2);
}

void sub_100274660(uint64_t a1, uint64_t a2)
{
  BOOL v5;
  uint64_t v6;
  _QWORD v7[6];
  void *__p;
  char v9;

  if (a2)
  {
    sub_10043F6EC(a2, (uint64_t)&__p);
    v5 = v9 < 0 && __p == 0;
    if (v9 < 0)
    {
      operator delete(__p);
      if (v5)
        return;
    }
    else if (v5)
    {
      return;
    }
    v6 = sub_1000419F4();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100274704;
    v7[3] = &unk_100918090;
    v7[4] = a1;
    v7[5] = a2;
    sub_100041A34(v6, v7);
  }
}

void sub_100274704(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  id v4;
  void *v5;
  void *v6;
  xpc_object_t v7;
  NSObject *v8;
  _QWORD v9[3];
  _BYTE v10[24];
  _QWORD v11[2];

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100920B88);
  v11[0] = 0;
  v11[1] = 0;
  v3 = *(unsigned __int8 **)(a1 + 40);
  sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)v3[128] << 40) | ((unint64_t)v3[129] << 32) | ((unint64_t)v3[130] << 24) | ((unint64_t)v3[131] << 16) | ((unint64_t)v3[132] << 8) | v3[133], 1u, 0, 0, 0, (unsigned __int8 *)v11);
  v4 = sub_100030DF4((const unsigned __int8 *)v11);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = v5;
  if (v5)
  {
    v7 = sub_100273218(v5);
    sub_10005E138(v2, 45, v7, 1);
  }
  else
  {
    v8 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(*(_QWORD *)(a1 + 40), v9);
      sub_1006D642C((char *)v9, (uint64_t)v10, v8);
    }
  }

}

void sub_100274850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10027486C(uint64_t a1, uint64_t a2)
{
  sub_100274660(a1 - 144, a2);
}

uint64_t sub_100274874(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_1002748D8(uint64_t a1, uint64_t a2, _BOOL4 a3)
{
  xpc_object_t v5;
  NSObject *v6;
  _QWORD *v7;
  _DWORD v8[2];
  __int16 v9;
  _QWORD *v10;

  v5 = xpc_dictionary_create(0, 0, 0);
  v6 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (_QWORD *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v7 = (_QWORD *)*v7;
    v8[0] = 67109378;
    v8[1] = a3;
    v9 = 2082;
    v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending 'connectable state' event with state \"%d\" to session \"%{public}s\"", (uint8_t *)v8, 0x12u);
  }
  xpc_dictionary_set_BOOL(v5, "kCBMsgArgConnectableState", a3);
  sub_10005E138(a1, 6, v5, 1);
}

void sub_1002749DC(uint64_t a1, uint64_t a2, _BOOL4 a3)
{
  sub_1002748D8(a1 - 144, a2, a3);
}

void sub_1002749E4(uint64_t a1, uint64_t a2, _BOOL4 a3)
{
  xpc_object_t v5;
  NSObject *v6;
  _QWORD *v7;
  _DWORD v8[2];
  __int16 v9;
  _QWORD *v10;

  v5 = xpc_dictionary_create(0, 0, 0);
  v6 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (_QWORD *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v7 = (_QWORD *)*v7;
    v8[0] = 67109378;
    v8[1] = a3;
    v9 = 2082;
    v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending 'discoverable state' event with state \"%d\" to session \"%{public}s\"", (uint8_t *)v8, 0x12u);
  }
  xpc_dictionary_set_BOOL(v5, "kCBMsgArgDiscoverableState", a3);
  sub_10005E138(a1, 6, v5, 1);
}

void sub_100274AE8(uint64_t a1, uint64_t a2, _BOOL4 a3)
{
  sub_1002749E4(a1 - 144, a2, a3);
}

void sub_100274AF0(uint64_t a1, uint64_t a2, _BOOL4 a3)
{
  xpc_object_t v5;
  NSObject *v6;
  _QWORD *v7;
  _DWORD v8[2];
  __int16 v9;
  _QWORD *v10;

  v5 = xpc_dictionary_create(0, 0, 0);
  v6 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (_QWORD *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v7 = (_QWORD *)*v7;
    v8[0] = 67109378;
    v8[1] = a3;
    v9 = 2082;
    v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending 'inquiry state' event with state \"%d\" to session \"%{public}s\"", (uint8_t *)v8, 0x12u);
  }
  xpc_dictionary_set_BOOL(v5, "kCBMsgArgInquiryState", a3);
  sub_10005E138(a1, 6, v5, 1);
}

void sub_100274BF4(uint64_t a1, uint64_t a2, _BOOL4 a3)
{
  sub_100274AF0(a1 - 144, a2, a3);
}

void sub_100274BFC(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *v4;
  int v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)(v2 + 56);
    if (*(char *)(v2 + 79) < 0)
      v4 = (_QWORD *)*v4;
    v5 = 136446210;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to register pairing agent", (uint8_t *)&v5, 0xCu);
  }
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100920AE8);
  sub_1002E28B0((uint64_t)off_100978168, *(_QWORD *)(v2 + 128), *(unsigned __int8 *)(a1 + 40));
}

void sub_100274CF4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)(v1 + 56);
    if (*(char *)(v1 + 79) < 0)
      v3 = (_QWORD *)*v3;
    v4 = 136446210;
    v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to unregister pairing agent", (uint8_t *)&v4, 0xCu);
  }
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100920AE8);
  sub_10006ED08((uint64_t)off_100978168, *(_QWORD *)(v1 + 128));
}

void sub_100274DDC(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned __int8 *v4;
  id v5;
  void *v6;
  xpc_object_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD v11[2];

  v8 = 0;
  v9 = 0;
  v10 = 0;
  if (qword_100978150 != -1)
    dispatch_once(&qword_100978150, &stru_100920B68);
  sub_10006CA88((uint64_t)off_100978148, &v8);
  v2 = v8;
  v3 = v9;
  if (v8 != v9)
  {
    do
    {
      v4 = (unsigned __int8 *)*v2;
      v11[0] = 0;
      v11[1] = 0;
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100920B88);
      sub_10003F924((uint64_t)off_1009778C0, ((unint64_t)v4[128] << 40) | ((unint64_t)v4[129] << 32) | ((unint64_t)v4[130] << 24) | ((unint64_t)v4[131] << 16) | ((unint64_t)v4[132] << 8) | v4[133], 1u, 0, 0, 0, (unsigned __int8 *)v11);
      v5 = sub_100030DF4((const unsigned __int8 *)v11);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      v7 = sub_100273218(v6);

      xpc_array_append_value(*(xpc_object_t *)(a1 + 40), v7);
      xpc_release(v7);
      ++v2;
    }
    while (v2 != v3);
    v2 = v8;
  }
  if (v2)
  {
    v9 = v2;
    operator delete(v2);
  }
}

void sub_100274F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100274FAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void (***v5)(_QWORD, void *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 uu[16];

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_100920B08);
  v3 = qword_10097AA58;
  v4 = *(_QWORD *)(v2 + 128);
  v5 = (void (***)(_QWORD, void *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(v2 + 152);
  v6 = *(_DWORD *)(v2 + 40);
  v7 = *(unsigned __int16 *)(a1 + 48);
  v8 = *(unsigned __int16 *)(a1 + 56);
  sub_100030BCC(uu, *(_QWORD *)(a1 + 32));
  sub_1003D1FB4(v3, v4, v5, v6, v7, v8, 0, 0, 0, uu, 0, 0);
}

void sub_1002750A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 uu[16];

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_100920B08);
  v3 = qword_10097AA58;
  v4 = *(_QWORD *)(v2 + 128);
  v5 = *(unsigned __int16 *)(a1 + 48);
  sub_100030BCC(uu, *(_QWORD *)(a1 + 32));
  sub_1003D3578(v3, v4, v5, uu);
}

void sub_100275154(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  void *v7;
  void *v8;
  void *v9;
  xpc_object_t v10;
  id v11;
  char v12;
  _QWORD v13[6];
  __int16 v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint8_t buf[8];
  uint8_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;

  v6 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a2;
    LOWORD(v21) = 1024;
    *(_DWORD *)((char *)&v21 + 2) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Classic Channel published callback PSM : %u result : %d", buf, 0xEu);
  }
  *(_QWORD *)buf = 0;
  v21 = buf;
  v22 = 0x3032000000;
  v23 = sub_10006254C;
  v24 = sub_100062360;
  v25 = 0;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 216);
  v7 = *(void **)(a1 + 280);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100275438;
  v13[3] = &unk_1009208C8;
  v14 = a2;
  v13[4] = buf;
  v13[5] = &v16;
  objc_msgSend(v7, "enumerateKeysAndObjectsUsingBlock:", v13);
  if (*((_QWORD *)v21 + 5))
  {
    if (a3)
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006D6494();
      v12 = 0;
      sub_100043758(&v12);
      sub_1002467B8(*((_DWORD *)v17 + 6));
      sub_10004339C(&v12);
      v8 = *(void **)(a1 + 280);
      v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v17 + 6)));
      objc_msgSend(v8, "removeObjectForKey:", v9);

      sub_100043728(&v12);
    }
    v10 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v10, "kCBMsgArgResult", a3);
    v11 = objc_msgSend(objc_retainAutorelease(*((id *)v21 + 5)), "bytes");
    xpc_dictionary_set_data(v10, "kCBMsgArgServiceUUID", v11, (size_t)objc_msgSend(*((id *)v21 + 5), "length"));
    sub_10005E138(a1, 46, v10, 1);
  }
  sub_100034234((uint64_t)v15);
  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(buf, 8);

}

void sub_1002753D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  uint64_t v27;

  sub_100043728(&a12);
  sub_100034234((uint64_t)&a20);
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);

  _Unwind_Resume(a1);
}

void sub_100275438(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  __int128 v11;
  __int16 v12;

  v7 = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100275504;
  v9[3] = &unk_1009208A0;
  v12 = *(_WORD *)(a1 + 48);
  v11 = *(_OWORD *)(a1 + 32);
  v10 = v7;
  v8 = v7;
  objc_msgSend(a3, "enumerateKeysAndObjectsUsingBlock:", v9);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    *a4 = 1;

}

void sub_1002754E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_100275504(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  int v8;
  id v9;

  v9 = a2;
  v7 = a3;
  v8 = *(unsigned __int16 *)(a1 + 56);
  if (objc_msgSend(v9, "intValue") == v8)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "intValue");
    *a4 = 1;
  }

}

void sub_10027559C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002755B4(uint64_t a1, int a2, int a3)
{
  sub_100275154(a1 - 152, a2, a3);
}

void sub_1002755BC(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  void *v7;
  NSObject *v8;
  int v9;
  void *v10;
  void *v11;
  _QWORD v12[6];
  __int16 v13;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint8_t v19[4];
  int v20;
  uint8_t buf[8];
  uint8_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;

  v6 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a2;
    LOWORD(v22) = 1024;
    *(_DWORD *)((char *)&v22 + 2) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Classic Channel unpublished callback PSM : %u, result : %d", buf, 0xEu);
  }
  *(_QWORD *)buf = 0;
  v22 = buf;
  v23 = 0x3032000000;
  v24 = sub_10006254C;
  v25 = sub_100062360;
  v26 = 0;
  v15 = 0;
  v16 = &v15;
  v17 = 0x2020000000;
  v18 = 0;
  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 216);
  v7 = *(void **)(a1 + 280);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100275854;
  v12[3] = &unk_1009208C8;
  v13 = a2;
  v12[4] = buf;
  v12[5] = &v15;
  objc_msgSend(v7, "enumerateKeysAndObjectsUsingBlock:", v12);
  if (*((_QWORD *)v22 + 5))
  {
    v8 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *((_DWORD *)v16 + 6);
      *(_DWORD *)v19 = 67109120;
      v20 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Classic Channel unpublished removing SRH 0x%X", v19, 8u);
    }
    v19[0] = 0;
    sub_100043758(v19);
    sub_1002467B8(*((_DWORD *)v16 + 6));
    sub_10004339C(v19);
    v10 = *(void **)(a1 + 280);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)v16 + 6)));
    objc_msgSend(v10, "removeObjectForKey:", v11);

    sub_100043728(v19);
  }
  sub_100034234((uint64_t)v14);
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(buf, 8);

}

void sub_1002757F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  va_list va1;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v15 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);

  sub_100043728(va2);
  sub_100034234((uint64_t)va);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_100275854(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  id v8;
  _QWORD v9[4];
  id v10;
  __int128 v11;
  __int16 v12;

  v7 = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100275920;
  v9[3] = &unk_1009208A0;
  v12 = *(_WORD *)(a1 + 48);
  v11 = *(_OWORD *)(a1 + 32);
  v10 = v7;
  v8 = v7;
  objc_msgSend(a3, "enumerateKeysAndObjectsUsingBlock:", v9);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    *a4 = 1;

}

void sub_100275904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_100275920(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  int v8;
  id v9;

  v9 = a2;
  v7 = a3;
  v8 = *(unsigned __int16 *)(a1 + 56);
  if (objc_msgSend(v9, "intValue") == v8)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(a1 + 32), "intValue");
    *a4 = 1;
  }

}

void sub_1002759B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002759D0(uint64_t a1, int a2, int a3)
{
  sub_1002755BC(a1 - 152, a2, a3);
}

void sub_1002759D8(uint64_t a1, void *a2, int a3, unsigned int a4, int a5, BOOL a6, int a7)
{
  id v13;
  NSObject *v14;
  xpc_object_t v15;
  id v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  int v22;

  v13 = a2;
  v14 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v18 = __PAIR64__(a3, 67109888);
    LOWORD(v19) = 1024;
    *(_DWORD *)((char *)&v19 + 2) = a4;
    HIWORD(v19) = 1024;
    v20 = a5;
    v21 = 1024;
    v22 = a7;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Classic Channel connected callback : result: 0x%x, psm: 0x%x, cid: 0x%x, sock: 0x%x", (uint8_t *)&v18, 0x1Au);
  }
  v15 = xpc_dictionary_create(0, 0, 0);
  v16 = v13;
  v17 = v16;
  if (v16)
  {
    v18 = 0;
    v19 = 0;
    objc_msgSend(v16, "getUUIDBytes:", &v18);
    xpc_dictionary_set_uuid(v15, "kCBMsgArgDeviceUUID", (const unsigned __int8 *)&v18);
  }

  xpc_dictionary_set_int64(v15, "kCBMsgArgResult", a3);
  xpc_dictionary_set_int64(v15, "kCBMsgArgPSM", a4);
  xpc_dictionary_set_fd(v15, "kCBMsgArgSocket", a7);
  xpc_dictionary_set_BOOL(v15, "kCBMsgArgIsIncoming", a6);
  sub_10005E138(a1, 23, v15, 1);

}

void sub_100275B74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100275B98(uint64_t a1, void *a2, int a3, unsigned int a4, int a5, BOOL a6, int a7)
{
  sub_1002759D8(a1 - 152, a2, a3, a4, a5, a6, a7);
}

void sub_100275BA0(uint64_t a1, void *a2, int a3, unsigned int a4, int a5)
{
  id v9;
  NSObject *v10;
  xpc_object_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v9 = a2;
  v10 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v14) = 67109632;
    HIDWORD(v14) = a3;
    LOWORD(v15) = 1024;
    *(_DWORD *)((char *)&v15 + 2) = a4;
    HIWORD(v15) = 1024;
    v16 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Classic Channel disconnected callback result : %d, psm : %u, cid = %u", (uint8_t *)&v14, 0x14u);
  }
  v11 = xpc_dictionary_create(0, 0, 0);
  v12 = v9;
  v13 = v12;
  if (v12)
  {
    v14 = 0;
    v15 = 0;
    objc_msgSend(v12, "getUUIDBytes:", &v14);
    xpc_dictionary_set_uuid(v11, "kCBMsgArgDeviceUUID", (const unsigned __int8 *)&v14);
  }

  xpc_dictionary_set_int64(v11, "kCBMsgArgResult", a3);
  xpc_dictionary_set_int64(v11, "kCBMsgArgPSM", a4);
  sub_10005E138(a1, 24, v11, 1);

}

void sub_100275D00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100275D24(uint64_t a1, void *a2, int a3, unsigned int a4, int a5)
{
  sub_100275BA0(a1 - 152, a2, a3, a4, a5);
}

uint64_t sub_100275D2C(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  id v5;
  id v6;
  __int16 v7;
  id v8;
  unsigned __int8 v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  unsigned int v15;
  _OWORD v16[2];

  v5 = a3;
  memset(v16, 0, sizeof(v16));
  v15 = 0;
  byte_100991A58 = 1;
  word_100991A5A = 2;
  dword_100991A60 = a4;
  if (objc_msgSend(v5, "length") == (id)2)
  {
    v6 = objc_msgSend(objc_retainAutorelease(v5), "bytes");
    v7 = 2;
  }
  else
  {
    v8 = objc_msgSend(v5, "length");
    v6 = objc_msgSend(objc_retainAutorelease(v5), "bytes");
    if (v8 == (id)4)
      v7 = 4;
    else
      v7 = 16;
  }
  v9 = atomic_load((unsigned __int8 *)&qword_100991A78);
  if ((v9 & 1) == 0)
  {
    v13 = (uint64_t)v6;
    if (__cxa_guard_acquire(&qword_100991A78))
    {
      byte_100991A68 = 3;
      word_100991A6A = v7;
      qword_100991A70 = v13;
      __cxa_guard_release(&qword_100991A78);
    }
  }
  *(_QWORD *)&v16[0] = &unk_100920918;
  WORD4(v16[0]) = 3;
  v14 = 0;
  sub_100043758(&v14);
  v10 = sub_1002465CC((uint64_t)v16, (int *)&v15);
  sub_10004339C(&v14);
  if (v10)
  {
    v11 = 0;
    v15 = 0;
  }
  else
  {
    v11 = v15;
  }
  sub_100043728(&v14);

  return v11;
}

void sub_100275E80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100275EB0(uint64_t a1, void *a2)
{
  id v2;
  NSObject *v3;
  void *v4;
  id v5;
  id v6;
  size_t v7;
  NSObject *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _BYTE *v14;
  uint64_t v15;
  id v16;
  char *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *i;
  void *v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  _BOOL4 v27;
  NSObject *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  int v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v43;
  void *v44;
  unsigned __int8 v45;
  NSObject *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  NSObject *v52;
  uint64_t v53;
  void *v55;
  id v56;
  void *v58;
  _QWORD v59[5];
  __int16 v60;
  uint8_t v61;
  char v62[15];
  uint8_t v63;
  char v64[15];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  unsigned __int16 *v73;
  uint64_t v74;
  uint8_t v75[4];
  int v76;
  __int128 v77;
  uint8_t v78[128];
  uint8_t buf[16];
  __int128 v80;

  v2 = a2;
  v3 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "addServiceDataToLocalSDP: %@", buf, 0xCu);
  }
  v4 = v2;
  if (v2)
  {
    if (objc_msgSend(v2, "length"))
    {
      v73 = 0;
      v74 = 0;
      *(_OWORD *)buf = 0u;
      v80 = 0u;
      v72 = 0;
      v56 = v2;
      v5 = objc_retainAutorelease(v2);
      if (!objc_msgSend(v5, "bytes")
        || !objc_msgSend(v5, "length")
        || (HIBYTE(v74) = 0,
            v6 = objc_retainAutorelease(v5),
            v73 = (unsigned __int16 *)objc_msgSend(v6, "bytes"),
            LOWORD(v74) = (unsigned __int16)objc_msgSend(v6, "length"),
            WORD1(v74) = (unsigned __int16)objc_msgSend(v6, "length"),
            !v73)
        || !(_WORD)v74
        || (BYTE6(v74) = 1, *(_DWORD *)((char *)&v74 + 2) = (unsigned __int16)v74, (unsigned __int16)v74 <= 1u))
      {
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Daemon/Server/XpcClassicConnection.mm");
      }
      v7 = *v73;
      WORD2(v74) = 2;
      v8 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v77) = 67109376;
        DWORD1(v77) = v7;
        WORD4(v77) = 1024;
        *(_DWORD *)((char *)&v77 + 10) = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "addServiceDataToLocalSDP: Number of attributes: %d, 0x%x", (uint8_t *)&v77, 0xEu);
      }
      v9 = (char *)malloc_type_calloc(v7, 0x18uLL, 0x10F20406C095635uLL);
      if (v9)
      {
        if ((_DWORD)v7)
        {
          LODWORD(v10) = 0;
          while (1)
          {
            if (HIBYTE(v74))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Daemon/Server/XpcClassicConnection.mm", 1544, "uint32_t XpcClassicConnection::addServiceDataToLocalSDP(NSData *__strong)");
LABEL_95:
              sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Daemon/Server/XpcClassicConnection.mm");
            }
            if (WORD1(v74) - WORD2(v74) <= 1 || BYTE6(v74) != 1)
              goto LABEL_95;
            v11 = *(unsigned __int16 *)((char *)v73 + WORD2(v74));
            WORD2(v74) += 2;
            v12 = &v9[24 * (unsigned __int16)v10];
            *(_WORD *)v12 = v11;
            if ((sub_1002C40C8((uint64_t *)&v73, (uint64_t)(v12 + 8)) & 1) == 0)
              break;
            if (v11 <= 8 && ((1 << v11) & 0x165) != 0)
            {
              LOWORD(v7) = v7 - 1;
              LODWORD(v10) = v10 - 1;
            }
            LODWORD(v10) = v10 + 1;
            if ((unsigned __int16)v10 >= (unsigned __int16)v7)
              goto LABEL_25;
          }
          v29 = qword_100999860;
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
            sub_1006D66E8(v11, v29, v30, v31, v32, v33, v34, v35);
          v4 = v56;
          if ((_WORD)v10)
          {
            v36 = v9 + 8;
            v10 = (unsigned __int16)v10;
            do
            {
              sub_1002C3FB4(v36);
              v36 += 24;
              --v10;
            }
            while (v10);
          }
          free(v9);
          goto LABEL_61;
        }
LABEL_25:
        *(_QWORD *)buf = v9;
        *(_WORD *)&buf[8] = v7;
        *(_QWORD *)&v80 = 0;
        WORD4(v80) = 0;
        v71 = 0;
        v14 = sub_100043758(&v71);
        if ((_WORD)v7)
        {
          v15 = 0;
          v16 = 0;
          while (1)
          {
            v17 = &v9[24 * v15];
            if (*(_WORD *)v17 == 1)
            {
              v69 = *(_OWORD *)v17;
              v70 = *((_QWORD *)v17 + 2);
              v18 = sub_1002768C0((uint64_t)v14, (uint64_t)&v69);
              v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

              if (!objc_msgSend(v19, "count"))
              {
                if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
                  sub_1006D660C();
                v25 = 0;
                v16 = v19;
                goto LABEL_87;
              }
              v67 = 0u;
              v68 = 0u;
              v65 = 0u;
              v66 = 0u;
              v16 = v19;
              v20 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v65, v78, 16);
              if (v20)
              {
                v21 = *(_QWORD *)v66;
                while (2)
                {
                  for (i = 0; i != v20; i = (char *)i + 1)
                  {
                    if (*(_QWORD *)v66 != v21)
                      objc_enumerationMutation(v16);
                    v23 = *(void **)(*((_QWORD *)&v65 + 1) + 8 * (_QWORD)i);
                    if ((unint64_t)objc_msgSend(v23, "length") > 4)
                    {
                      v28 = qword_100999860;
                      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
                        sub_1006D66B4(&v63, v64, v28);
                    }
                    else
                    {
                      *(_WORD *)v75 = 0;
                      v24 = objc_retainAutorelease(v23);
                      v25 = sub_10024436C(*(_DWORD *)objc_msgSend(v24, "bytes"), v75);
                      v26 = qword_100999860;
                      v27 = os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR);
                      if ((_DWORD)v25)
                      {
                        if (v27)
                          sub_1006D6638();

                        goto LABEL_87;
                      }
                      if (v27)
                      {
                        LODWORD(v77) = 138412290;
                        *(_QWORD *)((char *)&v77 + 4) = v24;
                        _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "New service being added for %@", (uint8_t *)&v77, 0xCu);
                      }
                    }
                  }
                  v20 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v65, v78, 16);
                  if (v20)
                    continue;
                  break;
                }
              }

            }
            if (++v15 == (unsigned __int16)v7)
              goto LABEL_63;
          }
        }
        v16 = 0;
LABEL_63:
        v37 = sub_1002465CC((uint64_t)buf, (int *)&v72);
        sub_10004339C(&v71);
        v38 = qword_100999860;
        if (v37)
        {
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
            sub_1006D65AC();
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v77) = 67109120;
            DWORD1(v77) = v72;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "addServiceDataToLocalSDP: SRH 0x%X", (uint8_t *)&v77, 8u);
          }
          v77 = 0uLL;
          sub_10003415C((uint64_t)&v77, a1 + 216);
          v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
          if ((_WORD)v7)
          {
            v39 = (unsigned __int16)v7;
            v40 = (uint64_t)(v9 + 8);
            do
            {
              v41 = *(unsigned __int16 *)(v40 - 8);
              if (v41 == 13 || v41 == 4)
              {
                v43 = sub_100276A24(a1, v40);
                if ((_DWORD)v43)
                {
                  v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v43));
                  v45 = objc_msgSend(v58, "containsObject:", v44);

                  if ((v45 & 1) == 0)
                  {
                    v46 = qword_100999860;
                    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)v75 = 67109120;
                      v76 = v43;
                      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "addServiceDataToLocalSDP: publishing PSM %d", v75, 8u);
                    }
                    v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v43));
                    objc_msgSend(v58, "addObject:", v47);

                    if (v16)
                    {
                      v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "firstObject"));
                      v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", v43));
                      v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithObject:forKey:](NSMutableDictionary, "dictionaryWithObject:forKey:", v55, v48));
                      v50 = *(void **)(a1 + 280);
                      v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v72));
                      objc_msgSend(v50, "setObject:forKeyedSubscript:", v49, v51);

                    }
                    else
                    {
                      v52 = qword_100999860;
                      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
                        sub_1006D6578(&v61, v62, v52);
                    }
                    v53 = sub_1000419F4();
                    v59[0] = _NSConcreteStackBlock;
                    v59[1] = 3221225472;
                    v59[2] = sub_100276B00;
                    v59[3] = &unk_100920960;
                    v59[4] = a1;
                    v60 = v43;
                    sub_100023D84(v53, v59);
                  }
                }
              }
              v40 += 24;
              --v39;
            }
            while (v39);
          }

          sub_100034234((uint64_t)&v77);
        }
        v25 = v72;
LABEL_87:

        sub_100043728(&v71);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
          sub_1006D654C();
        v25 = 0;
      }
      v4 = v56;
      goto LABEL_89;
    }
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1006D6520();
  }
  else if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
  {
    sub_1006D64F4();
  }
LABEL_61:
  v25 = 0;
LABEL_89:

  return v25;
}

void sub_1002767EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  void *v45;

  sub_100034234((uint64_t)&a45);

  sub_100043728(&a40);
  _Unwind_Resume(a1);
}

id sub_1002768C0(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  __int128 *i;
  void *v6;
  void *v7;
  __int128 v9;
  __int128 v10;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  if (*(_WORD *)a2 == 1 && *(_BYTE *)(a2 + 8) == 6)
  {
    v4 = *(unsigned __int16 *)(a2 + 10);
    if (*(_WORD *)(a2 + 10))
    {
      for (i = *(__int128 **)(a2 + 16); ; ++i)
      {
        v9 = *i;
        if (v9 == 3)
          break;
        if (!--v4)
          return v3;
      }
      if (WORD1(v9) == 16)
      {
        v10 = **((_OWORD **)&v9 + 1);
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v10, 16));
        objc_msgSend(v3, "addObject:", v6);

      }
      else
      {
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", (char *)&v9 + 8, 4));
        objc_msgSend(v3, "addObject:", v7);

      }
    }
  }
  return v3;
}

void sub_1002769E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100276A24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  _BOOL4 v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;

  if (*(_BYTE *)a2 == 6)
  {
    v11 = xmmword_10073CEB0;
    if (*(_WORD *)(a2 + 2))
    {
      v4 = 0;
      v5 = 1;
      do
      {
        if (*(_BYTE *)(*(_QWORD *)(a2 + 8) + v4) == 6)
        {
          LODWORD(result) = sub_100276A24(a1, *(_QWORD *)(a2 + 8) + v4);
          if ((_DWORD)result)
            return (unsigned __int16)result;
          v7 = *(unsigned __int16 *)(a2 + 2);
        }
        else
        {
          v8 = sub_1002C5144(*(_QWORD *)(a2 + 8) + v4, (uint64_t)&v11);
          v7 = *(unsigned __int16 *)(a2 + 2);
          v9 = !v8 || v5 >= v7;
          if (!v9)
          {
            v10 = *(_QWORD *)(a2 + 8) + v4;
            if (*(_BYTE *)(v10 + 16) == 1)
            {
              LODWORD(result) = *(_DWORD *)(v10 + 24);
              return (unsigned __int16)result;
            }
          }
        }
        v4 += 16;
        v9 = v5++ >= v7;
      }
      while (!v9);
    }
  }
  LOWORD(result) = 0;
  return (unsigned __int16)result;
}

void sub_100276B00(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_100920B08);
  sub_1003D0ADC(qword_10097AA58, *(_QWORD *)(v2 + 128), v2 + 152, *(_DWORD *)(v2 + 40), *(_WORD *)(a1 + 40), 0, 0, 0, 0, 0, 0, 0);
}

void sub_100276B84(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v7;
  uint64_t v8;
  _QWORD v9[4];
  id v10;
  uint64_t v11;

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100276C30;
  v9[3] = &unk_100920988;
  v7 = *(id *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v10 = v7;
  v11 = v8;
  objc_msgSend(a3, "enumerateKeysAndObjectsUsingBlock:", v9);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    *a4 = 1;

}

void sub_100276C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

id sub_100276C30(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a3, "isEqualToData:", *(_QWORD *)(a1 + 32));
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_100276C78(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_100920B08);
  sub_1003D0ADC(qword_10097AA58, *(_QWORD *)(v2 + 128), v2 + 152, *(_DWORD *)(v2 + 40), *(_WORD *)(a1 + 40), 0, 0, 0, 0, 0, 0, 0);
}

void sub_100276CFC(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  _QWORD v13[4];
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  v7 = a2;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100276DE8;
  v13[3] = &unk_1009209D8;
  v8 = *(id *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v14 = v8;
  v16 = v9;
  v10 = v7;
  v11 = *(_QWORD *)(a1 + 48);
  v12 = v10;
  v15 = v10;
  v17 = v11;
  objc_msgSend(a3, "enumerateKeysAndObjectsUsingBlock:", v13);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    *a4 = 1;

}

void sub_100276DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_100276DE8(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7;
  id v8;

  v8 = a2;
  v7 = a3;
  if (objc_msgSend(v7, "isEqualToData:", *(_QWORD *)(a1 + 32)))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(a1 + 40), "intValue");
    *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = (unsigned __int16)objc_msgSend(v8, "intValue");
    *a4 = 1;
  }

}

void sub_100276E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_100276E8C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_100920B08);
  sub_1003D18EC((_QWORD *)qword_10097AA58, *(_QWORD *)(v2 + 128), *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

void sub_100276EEC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100276F88;
  v8[3] = &unk_100920A28;
  v9 = v5;
  v10 = v6;
  v7 = v5;
  objc_msgSend(a3, "enumerateKeysAndObjectsUsingBlock:", v8);

}

void sub_100276F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_100276F88(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  void **v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  char v16;
  uint8_t buf[4];
  id v18;
  __int16 v19;
  void **v20;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD *)(a1 + 40);
  v16 = 0;
  sub_100043758(&v16);
  LODWORD(a1) = sub_1002467B8((int)objc_msgSend(*(id *)(a1 + 32), "intValue"));
  sub_10004339C(&v16);
  if (!(_DWORD)a1)
  {
    v8 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(*(_QWORD *)(v7 + 128), (uint64_t)__p);
      if (v15 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      *(_DWORD *)buf = 138412546;
      v18 = v6;
      v19 = 2082;
      v20 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Successfully removed service uuid %@  for session \"%{public}s\"", buf, 0x16u);
      if (v15 < 0)
        operator delete(__p[0]);
    }
    v10 = sub_1000419F4();
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100277158;
    v11[3] = &unk_100918868;
    v13 = v7;
    v12 = v5;
    sub_100041A34(v10, v11);

  }
  sub_100043728(&v16);

}

void sub_100277118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;

  sub_100043728(&a21);

  _Unwind_Resume(a1);
}

void sub_100277158(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_10097AA60 != -1)
    dispatch_once(&qword_10097AA60, &stru_100920B08);
  sub_1003D18EC((_QWORD *)qword_10097AA58, *(_QWORD *)(v2 + 128), (unsigned __int16)objc_msgSend(*(id *)(a1 + 32), "intValue"));
}

void sub_1002771D4(uint64_t a1, void *a2, int a3, unsigned int a4, unsigned int a5, int a6, _BOOL4 a7, int a8)
{
  id v15;
  NSObject *v16;
  xpc_object_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  _BOOL4 v32;
  __int16 v33;
  int v34;

  v15 = a2;
  v16 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v26) = 67110400;
    HIDWORD(v26) = a3;
    LOWORD(v27) = 1024;
    *(_DWORD *)((char *)&v27 + 2) = a4;
    HIWORD(v27) = 1024;
    v28 = a5;
    v29 = 1024;
    v30 = a6;
    v31 = 1024;
    v32 = a7;
    v33 = 1024;
    v34 = a8;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "RFCOMM Channel connected: result: 0x%x, rfcommChannelID: 0x%x, frameSize: 0x%x, link handle: 0x%x, incoming?: %d, sock: 0x%x", (uint8_t *)&v26, 0x26u);
  }
  v17 = xpc_dictionary_create(0, 0, 0);
  v18 = v15;
  v19 = v18;
  if (v18)
  {
    v26 = 0;
    v27 = 0;
    objc_msgSend(v18, "getUUIDBytes:", &v26);
    xpc_dictionary_set_uuid(v17, "kCBMsgArgDeviceUUID", (const unsigned __int8 *)&v26);
  }

  xpc_dictionary_set_int64(v17, "kCBMsgArgResult", a3);
  xpc_dictionary_set_int64(v17, "kCBMsgArgRFCOMMChannelID", a4);
  xpc_dictionary_set_int64(v17, "kCBMsgArgMTU", a5);
  xpc_dictionary_set_BOOL(v17, "kCBMsgArgIsIncoming", a7);
  xpc_dictionary_set_fd(v17, "kCBMsgArgSocket", a8);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100920B88);
  v20 = sub_1000589DC((uint64_t)off_1009778C0, v19, 0);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100920BA8);
  v21 = sub_10006D488((uint64_t)off_1009778E0, v20, 0);
  if (v21)
  {
    v22 = sub_100453660(v21, a4);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    v24 = v23;
    if (v23)
    {
      v25 = objc_retainAutorelease(v23);
      xpc_dictionary_set_data(v17, "kCBMsgArgServiceUUID", objc_msgSend(v25, "bytes"), (size_t)objc_msgSend(v25, "length"));
    }

  }
  sub_10005E138(a1, 56, v17, 1);

}

void sub_100277470(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002774AC(uint64_t a1, void *a2, int a3, unsigned int a4, unsigned int a5, int a6, _BOOL4 a7, int a8)
{
  sub_1002771D4(a1 - 160, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1002774B4(uint64_t a1, void *a2, int a3, unsigned int a4, int a5)
{
  id v9;
  NSObject *v10;
  xpc_object_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v9 = a2;
  v10 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v14) = 67109632;
    HIDWORD(v14) = a3;
    LOWORD(v15) = 1024;
    *(_DWORD *)((char *)&v15 + 2) = a4;
    HIWORD(v15) = 1024;
    v16 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "RFCOMM Channel disconnected: result: 0x%x, rfcommChannelID: 0x%x, link handle: 0x%x", (uint8_t *)&v14, 0x14u);
  }
  v11 = xpc_dictionary_create(0, 0, 0);
  v12 = v9;
  v13 = v12;
  if (v12)
  {
    v14 = 0;
    v15 = 0;
    objc_msgSend(v12, "getUUIDBytes:", &v14);
    xpc_dictionary_set_uuid(v11, "kCBMsgArgDeviceUUID", (const unsigned __int8 *)&v14);
  }

  xpc_dictionary_set_int64(v11, "kCBMsgArgResult", a3);
  xpc_dictionary_set_int64(v11, "kCBMsgArgRFCOMMChannelID", a4);
  sub_10005E138(a1, 57, v11, 1);

}

void sub_100277614(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_100277638(uint64_t a1, void *a2, int a3, unsigned int a4, int a5)
{
  sub_1002774B4(a1 - 160, a2, a3, a4, a5);
}

char *sub_100277640(uint64_t a1, int a2)
{
  return off_1009204D0[a2];
}

void sub_100277668(id a1)
{
  operator new();
}

void sub_1002776A8()
{
  operator delete();
}

void sub_1002776CC(id a1)
{
  operator new();
}

void sub_10027770C()
{
  operator delete();
}

void sub_100277730(id a1)
{
  operator new();
}

void sub_100277770()
{
  operator delete();
}

void sub_100277794(id a1)
{
  operator new();
}

void sub_1002777D4()
{
  operator delete();
}

void sub_1002777F8(id a1)
{
  operator new();
}

void sub_100277838()
{
  operator delete();
}

void sub_10027785C(id a1)
{
  operator new();
}

void sub_10027789C()
{
  operator delete();
}

void sub_1002778C0(id a1)
{
  operator new();
}

void sub_100277900()
{
  operator delete();
}

void sub_100277924(id a1)
{
  operator new();
}

void sub_100277964()
{
  operator delete();
}

void sub_100277988(id a1)
{
  operator new();
}

void sub_1002779C8()
{
  operator delete();
}

void sub_1002779EC(id a1)
{
  operator new();
}

void sub_100277A2C()
{
  operator delete();
}

void sub_100277A50(id a1)
{
  operator new();
}

void sub_100277A90(id a1)
{
  operator new();
}

void sub_100277AD0()
{
  operator delete();
}

void sub_100277AF4(id a1)
{
  operator new();
}

void sub_100277B34()
{
  operator delete();
}

uint64_t sub_100277B58(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = (_QWORD *)sub_10048D2F0(a1, "AACPService", 0x80000);
  *v2 = off_100920C78;
  sub_1000160D0(v2 + 41);
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100920D88);
  v3 = off_100977A80;
  *(_QWORD *)(a1 + 424) = off_100977A80;
  sub_10048D5B0(a1, (uint64_t)v3);
  return a1;
}

void sub_100277BF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 408) = v6;
    operator delete(v6);
  }
  sub_100069BDC(v2);
  sub_10048D3E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100277C2C(_QWORD *a1)
{
  void *v2;

  *a1 = off_100920C78;
  v2 = (void *)a1[50];
  if (v2)
  {
    a1[51] = v2;
    operator delete(v2);
  }
  sub_100069BDC(a1 + 41);
  return sub_10048D3E0((uint64_t)a1);
}

void sub_100277C74(_QWORD *a1)
{
  sub_100277C2C(a1);
  operator delete();
}

uint64_t sub_100277C98(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "AACPService start", v4, 2u);
  }
  return sub_10048D760(a1);
}

uint64_t sub_100277D08(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "AACPService stop", v4, 2u);
  }
  return sub_10048DA54(a1);
}

uint64_t sub_100277D78(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v8 = unk_100920D68;
  if (sub_100444790(a2))
  {
    if (sub_100442444(a2, &v8, 4u))
      v4 = 4;
    else
      v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_DWORD *)(a1 + 32);
  v9 = 0;
  sub_10004AD30((uint64_t)&v9);
  *(_QWORD *)&v7 = (int)v9;
  *((_QWORD *)&v7 + 1) = SWORD2(v9);
  return sub_1004415B0(a2, v5, v4, &v7, 0);
}

BOOL sub_100277E1C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  _BOOL8 result;
  __int128 v6;

  v6 = unk_100920D78;
  *a3 = 0;
  result = sub_100444790(a2);
  if (result)
  {
    result = sub_100442444(a2, &v6, 4u);
    if (result)
      *a3 = 1;
  }
  return result;
}

void sub_100277E80(_QWORD *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  NSObject *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v4 = (uint64_t *)a1[50];
  v5 = (uint64_t *)a1[51];
  if (v4 == v5)
  {
LABEL_5:
    v7 = a1[52];
    if ((unint64_t)v5 >= v7)
    {
      v9 = v5 - v4;
      if ((unint64_t)(v9 + 1) >> 61)
        abort();
      v10 = v7 - (_QWORD)v4;
      v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)sub_10007ABA0((uint64_t)(a1 + 52), v12);
      else
        v13 = 0;
      v15 = (uint64_t *)&v13[8 * v9];
      v16 = &v13[8 * v12];
      *v15 = a2;
      v8 = v15 + 1;
      v18 = (char *)a1[50];
      v17 = (char *)a1[51];
      if (v17 != v18)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *--v15 = v19;
        }
        while (v17 != v18);
        v17 = (char *)a1[50];
      }
      a1[50] = v15;
      a1[51] = v8;
      a1[52] = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v5 = a2;
      v8 = v5 + 1;
    }
    a1[51] = v8;
  }
  else
  {
    v6 = (_QWORD *)a1[50];
    while (*v6 != a2)
    {
      if (++v6 == v5)
        goto LABEL_5;
    }
    v14 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D6750(a2, v14);
  }
}

BOOL sub_100277FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  BOOL v7;

  v3 = *(_QWORD *)(a1 + 400);
  v2 = *(_QWORD *)(a1 + 408);
  if (v3 == v2)
    return 0;
  v4 = v3 + 8;
  do
  {
    v5 = *(_QWORD *)(v4 - 8);
    result = v5 == a2;
    v7 = v5 == a2 || v4 == v2;
    v4 += 8;
  }
  while (!v7);
  return result;
}

_QWORD *sub_100277FD4(_QWORD *result, uint64_t a2)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int64_t v8;

  v3 = (char *)result[50];
  v2 = (char *)result[51];
  if (v3 != v2)
  {
    v4 = result;
    v5 = 0;
    while (*(_QWORD *)&v3[v5] != a2)
    {
      v5 += 8;
      if (&v3[v5] == v2)
        return result;
    }
    v6 = &v3[v5];
    v7 = &v3[v5 + 8];
    v8 = v2 - v7;
    if (v2 != v7)
      result = memmove(&v3[v5], v7, v2 - v7);
    v4[51] = &v6[v8];
  }
  return result;
}

uint64_t sub_10027804C()
{
  return 1;
}

uint64_t sub_100278054()
{
  return 1;
}

uint64_t sub_10027805C()
{
  return 0;
}

char *sub_100278064@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[31] < 0)
    return (char *)sub_10003430C((_BYTE *)a2, *((void **)result + 1), *((_QWORD *)result + 2));
  *(_OWORD *)a2 = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 3);
  return result;
}

void sub_100278090(uint64_t a1, uint64_t a2, _WORD *a3)
{
  *a3 = 0;
}

uint64_t sub_100278098()
{
  return 1;
}

void sub_1002780A4(id a1)
{
  operator new();
}

void sub_1002780E4()
{
  operator delete();
}

uint64_t sub_100278108(uint64_t a1)
{
  sub_100056BAC(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_100278130(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];

  v2 = (_QWORD *)sub_100278350(a1, 24);
  *v2 = off_100920DB8;
  v2[32] = &off_100920E90;
  v2[33] = off_100920EA8;
  v2[34] = off_100920ED0;
  v2[35] = &off_100920F00;
  v2[36] = off_100920F18;
  v2[37] = off_100920F48;
  v2[43] = 0;
  v2[44] = 0;
  v2[42] = 0;
  v2[38] = 0;
  v2[39] = 0;
  sub_1000160D0(v2 + 45);
  *(_WORD *)(a1 + 428) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 440) = CFSTR("XZ");
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_DWORD *)(a1 + 480) = 1065353216;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = -1;
  *(_QWORD *)(a1 + 512) = -1;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 536) = a1 + 544;
  sub_1002A1ED8((_QWORD *)(a1 + 560));
  sub_1000160D0(a1 + 648);
  *(_BYTE *)(a1 + 328) = 0;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 288);
  v3 = sub_10034FE84();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, a1 + 256);
  v4 = sub_100475960();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002783DC;
  v6[3] = &unk_100917378;
  v6[4] = a1;
  sub_100041A34(v4, v6);
  *(_BYTE *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 528) = 255;
  return a1;
}

void sub_1002782BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  uint64_t v6;
  void *v7;

  sub_10027842C(v3);
  sub_10001A82C(v1 + 536, *v4);
  v6 = *(_QWORD *)(v1 + 488);
  *(_QWORD *)(v1 + 488) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
  sub_1002A4BEC(v1 + 448);

  sub_100069BDC(v2);
  v7 = *(void **)(v1 + 336);
  if (v7)
  {
    *(_QWORD *)(v1 + 344) = v7;
    operator delete(v7);
  }
  sub_100278464(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100278350(uint64_t a1, int a2)
{
  *(_QWORD *)a1 = off_100921340;
  sub_1000160D0(a1 + 16);
  *(_DWORD *)(a1 + 80) = 0;
  sub_1000160D0(a1 + 88);
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_DWORD *)(a1 + 248) = a2;
  return a1;
}

void sub_1002783C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100069BDC(v1);
  _Unwind_Resume(a1);
}

void sub_1002783DC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100921B98);
  sub_1005D458C((uint64_t)off_10097AB00, v1 + 296);
}

uint64_t sub_10027842C(uint64_t a1)
{
  void *v2;

  sub_100069BDC(a1 + 24);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_100278464(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = off_100921340;
  sub_10001A82C(a1 + 224, *(_QWORD **)(a1 + 232));
  v2 = *(void **)(a1 + 200);
  if (v2)
  {
    *(_QWORD *)(a1 + 208) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 176);
  if (v3)
  {
    *(_QWORD *)(a1 + 184) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 152);
  if (v4)
  {
    *(_QWORD *)(a1 + 160) = v4;
    operator delete(v4);
  }
  sub_100069BDC(a1 + 88);
  sub_100069BDC(a1 + 16);
  return a1;
}

uint64_t sub_1002784DC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  NSObject *v9;
  void **v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint8_t buf[4];
  void **v24;

  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_100921BB8);
  if (sub_1004B9DC4((uint64_t)off_100977B38))
  {
    v2 = (void *)MGCopyAnswer(CFSTR("ProductVersion"), 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "componentsSeparatedByString:", CFSTR(".")));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectAtIndexedSubscript:", 0));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v4));

    if (objc_msgSend(v5, "isEqualToString:", off_10097AA78))
    {
      v20 = 0;
      v21 = 0;
      v22 = 0;
      if (qword_100978150 != -1)
        dispatch_once(&qword_100978150, &stru_100921BD8);
      sub_10006CA88((uint64_t)off_100978148, &v20);
      v6 = v20;
      v7 = v21;
      if (v20 != v21)
      {
        do
        {
          v8 = *v6;
          if (sub_100442118(*v6, 14))
          {
            v9 = qword_1009997D0;
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043E5F8(v8, __p);
              v10 = v19 >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)buf = 136446210;
              v24 = v10;
              _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Migrating double tap settings for device %{public}s", buf, 0xCu);
              if (v19 < 0)
                operator delete(__p[0]);
            }
            v11 = sub_1004459D0(v8);
            sub_100445A14(v8, v11 | (v11 << 8));
          }
          ++v6;
        }
        while (v6 != v7);
        v6 = v20;
      }
      if (v6)
      {
        v21 = v6;
        operator delete(v6);
      }
    }

  }
  v12 = sub_1000438A4();
  if ((sub_1003312CC(v12, 2u) & 1) == 0)
    *(_QWORD *)(a1 + 528) &= ~2uLL;
  v13 = sub_1000438A4();
  if ((sub_1003312CC(v13, 3u) & 1) == 0)
    *(_QWORD *)(a1 + 528) &= ~4uLL;
  v14 = sub_1000438A4();
  if ((sub_1003312CC(v14, 0) & 1) == 0)
    *(_QWORD *)(a1 + 528) &= ~8uLL;
  v15 = sub_1000438A4();
  if ((sub_1003312CC(v15, 5u) & 1) == 0)
    *(_QWORD *)(a1 + 528) &= ~0x10uLL;
  v16 = sub_1000438A4();
  if ((sub_1003312CC(v16, 6u) & 1) == 0)
    *(_QWORD *)(a1 + 528) &= ~0x20uLL;
  sub_1000438A4();
  if (sub_100331654())
    *(_QWORD *)(a1 + 528) |= 0x100uLL;
  LOBYTE(v20) = 0;
  sub_100043758(&v20);
  sub_1000E12C0((uint64_t)off_100920F78);
  sub_100043728(&v20);
  return 0;
}

void sub_1002787F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;
  void *v20;
  void *v21;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t sub_100278878(uint64_t result)
{
  *(_BYTE *)(result + 328) = 1;
  return result;
}

uint64_t sub_100278884(uint64_t result)
{
  *(_BYTE *)(result + 40) = 1;
  return result;
}

uint64_t sub_100278890(uint64_t result)
{
  *(_BYTE *)(result + 328) = 0;
  return result;
}

uint64_t sub_100278898(uint64_t result)
{
  *(_BYTE *)(result + 40) = 0;
  return result;
}

void sub_1002788A0(uint64_t a1, void *a2, int a3, int a4, int a5)
{
  id v10;
  NSObject *v11;
  uint64_t *v12;
  uint64_t *i;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  void **v23;
  void *__p[2];
  char v25;
  uint64_t v26;
  uint8_t buf[4];
  _BYTE v28[14];
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;

  v10 = a2;
  v11 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138544130;
    *(_QWORD *)v28 = v10;
    *(_WORD *)&v28[8] = 1024;
    *(_DWORD *)&v28[10] = a3;
    v29 = 1024;
    v30 = a4;
    v31 = 1024;
    v32 = a5;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "AACPClient::locationUpdate - country: %{public}@, CC: %u, LEFlag: %u, HDRFlag: %u", buf, 0x1Eu);
  }
  objc_storeStrong((id *)(a1 + 440), a2);
  v12 = *(uint64_t **)(a1 + 336);
  for (i = *(uint64_t **)(a1 + 344); v12 != i; ++v12)
  {
    v14 = *v12;
    if (*v12)
    {
      v15 = *(_DWORD *)(v14 + 80) - 8212;
      v16 = v15 > 0x10;
      v17 = (1 << v15) & 0x116A1;
      if (!v16 && v17 != 0)
      {
        v19 = *(_QWORD *)v14;
        if (*(_QWORD *)v14)
        {
          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v14 + 768) + 176))(*(_QWORD *)(v14 + 768)) == 1)
          {
            v26 = -256;
            v20 = sub_10034FE84();
            (*(void (**)(uint64_t, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)v20 + 16))(v20, *(_QWORD *)(a1 + 440), &v26, *(unsigned int *)(*v12 + 80));
            v21 = sub_100278B44(a1, v19, (uint64_t)&v26);
            if (v21)
            {
              v22 = qword_1009997D0;
              if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
              {
                sub_10043E5F8(v19, __p);
                v23 = __p;
                if (v25 < 0)
                  v23 = (void **)__p[0];
                *(_DWORD *)buf = 67109634;
                *(_DWORD *)v28 = a3;
                *(_WORD *)&v28[4] = 2082;
                *(_QWORD *)&v28[6] = v23;
                v29 = 1024;
                v30 = v21;
                _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to set country code (%u) for device %{public}s with result %u", buf, 0x18u);
                if (v25 < 0)
                  operator delete(__p[0]);
              }
            }
          }
        }
      }
    }
  }

}

void sub_100278B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

uint64_t sub_100278B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
    {
      if (**(_QWORD **)i == a2)
      {
        v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)i + 768) + 104))(*(_QWORD *)(*(_QWORD *)i + 768), a2, a3);
        goto LABEL_9;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, v9);
    sub_1006D680C();
  }
  v7 = 312;
LABEL_9:
  sub_100034234((uint64_t)v10);
  return v7;
}

void sub_100278C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100278C64(uint64_t a1, void *a2, int a3, int a4, int a5)
{
  sub_1002788A0(a1 - 256, a2, a3, a4, a5);
}

uint64_t sub_100278C6C(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Register AACP Profile", v4, 2u);
  }
  if (qword_10097AB18 != -1)
    dispatch_once(&qword_10097AB18, &stru_100921BF8);
  sub_1002A1F24(qword_10097AB10 + 120, a1 + 280);
  return 0;
}

uint64_t sub_100278D14(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Deregister AACP profile", v4, 2u);
  }
  if (qword_10097AB18 != -1)
    dispatch_once(&qword_10097AB18, &stru_100921BF8);
  sub_100069060(qword_10097AB10 + 120, a1 + 280);
  return 0;
}

uint64_t sub_100278DBC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  _QWORD *i;
  _QWORD *v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  uint8_t buf[24];

  v4 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v5 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "disconnecting %{public}s", buf, 0xCu);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  *(_OWORD *)buf = 0uLL;
  sub_10003415C((uint64_t)buf, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD **)(a1 + 336); i != *(_QWORD **)(a1 + 344); ++i)
    {
      v7 = (_QWORD *)*i;
      if (*(_QWORD *)*i == a2)
      {
        sub_1002A4F2C((uint64_t **)(a1 + 536), a2 + 128);
        v8 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v7[96] + 136))(v7[96], a2);
        goto LABEL_15;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, __p);
    sub_1006D680C();
  }
  v8 = 312;
LABEL_15:
  sub_100034234((uint64_t)buf);
  return v8;
}

void sub_100278F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100278F60(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;

  v3 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v4 = v10 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "connecting to %{public}s", buf, 0xCu);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  v8 = 0;
  sub_100043758(&v8);
  v5 = sub_1000E137C((unsigned __int8 *)(a2 + 128), (uint64_t)off_100920F78);
  sub_10004339C(&v8);
  if ((_DWORD)v5 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, __p);
    sub_1006D6858();
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v6 = sub_1004A35C0((uint64_t)off_100977A50, v5, 10000);
  sub_100043728(&v8);
  return v6;
}

void sub_1002790E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_100043728(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100279104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
    {
      if (**(_QWORD **)i == a2)
      {
        v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)i + 768) + 88))(*(_QWORD *)(*(_QWORD *)i + 768), a2, a3);
        goto LABEL_9;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, v9);
    sub_1006D680C();
  }
  v7 = 312;
LABEL_9:
  sub_100034234((uint64_t)v10);
  return v7;
}

void sub_100279204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100279224(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
    {
      if (**(_QWORD **)i == a2)
      {
        v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)i + 768) + 56))(*(_QWORD *)(*(_QWORD *)i + 768), a2);
        goto LABEL_9;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, v7);
    sub_1006D680C();
  }
  v5 = 312;
LABEL_9:
  sub_100034234((uint64_t)v8);
  return v5;
}

void sub_100279314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100279334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  uint64_t v11;
  _QWORD v13[3];
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
    {
      if (**(_QWORD **)i == a2)
      {
        v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)i + 768)
                                                                                    + 64))(*(_QWORD *)(*(_QWORD *)i + 768), a2, a3, a4, a5);
        goto LABEL_9;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, v13);
    sub_1006D680C();
  }
  v11 = 312;
LABEL_9:
  sub_100034234((uint64_t)v14);
  return v11;
}

void sub_10027944C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10027946C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
    {
      if (**(_QWORD **)i == a2)
      {
        v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)i + 768) + 72))(*(_QWORD *)(*(_QWORD *)i + 768), a2, a3);
        goto LABEL_9;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, v9);
    sub_1006D680C();
  }
  v7 = 312;
LABEL_9:
  sub_100034234((uint64_t)v10);
  return v7;
}

void sub_10027956C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10027958C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  uint64_t v11;
  _QWORD v13[3];
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
    {
      if (**(_QWORD **)i == a2)
      {
        v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)i + 768)
                                                                                    + 16))(*(_QWORD *)(*(_QWORD *)i + 768), a2, a3, a4, a5);
        goto LABEL_9;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, v13);
    sub_1006D680C();
  }
  v11 = 312;
LABEL_9:
  sub_100034234((uint64_t)v14);
  return v11;
}

void sub_1002796A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002796C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  void **v11;
  uint64_t i;
  uint64_t v13;
  void *__p[2];
  char v16;
  uint8_t buf[24];

  v10 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v11 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "send device info message to %{public}s", buf, 0xCu);
    if (v16 < 0)
      operator delete(__p[0]);
  }
  *(_OWORD *)buf = 0uLL;
  sub_10003415C((uint64_t)buf, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
    {
      if (**(_QWORD **)i == a2)
      {
        v13 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)i + 768)
                                                                                    + 144))(*(_QWORD *)(*(_QWORD *)i + 768), a2, a3, a4, a5);
        goto LABEL_15;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, __p);
    sub_1006D680C();
  }
  v13 = 312;
LABEL_15:
  sub_100034234((uint64_t)buf);
  return v13;
}

void sub_10027985C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10027987C(uint64_t a1, uint64_t a2, unsigned int a3, const void *a4)
{
  NSObject *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void **v17;

  if (!*(_BYTE *)(a1 + 328))
    return 111;
  v8 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v9 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "send setRemoteDeviceName to %{public}s", buf, 0xCu);
    if (v15 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  if (sub_1000E27D4((unsigned __int8 *)(a2 + 128), 1, a3, a4)
    && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D691C();
  }
  v10 = sub_1000E1E34((unsigned __int8 *)(a2 + 128), 255);
  sub_10004339C(__p);
  if ((_DWORD)v10 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D68BC();
  v11 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 328))(v11))
    sub_100279A90(a1, a2);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v12 = sub_1004A35C0((uint64_t)off_100977A50, v10, 10000);
  sub_100043728(__p);
  return v12;
}

void sub_100279A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100279A90(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  NSNumber *v6;
  void *v7;
  NSNumber *v8;
  void *v9;
  NSNumber *v10;
  void *v11;
  NSNumber *v12;
  void *v13;
  NSNumber *v14;
  void *v15;
  NSNumber *v16;
  void *v17;
  NSNumber *v18;
  void *v19;
  NSNumber *v20;
  void *v21;
  uint64_t v23;
  void **v24;
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;

  v4 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 328))(v4))
    return 17;
  v5 = objc_alloc_init((Class)NSMutableDictionary);
  if (sub_10027F3E0(a1, a2))
  {
    v6 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_10044F5D0(a2));
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    objc_msgSend(v5, "setObject:forKey:", v7, CFSTR("kCfgMicSide"));

    v8 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_10044F614(a2));
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    objc_msgSend(v5, "setObject:forKey:", v9, CFSTR("kCfgInEarMode"));

    v10 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_1004459D0(a2));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    objc_msgSend(v5, "setObject:forKey:", v11, CFSTR("kCfgDoubleTap"));

    if ((sub_100442118(a2, 29) & 1) != 0 || sub_10044FE34(a2, 128))
    {
      v12 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_10044F8E4(a2));
      v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      objc_msgSend(v5, "setObject:forKey:", v13, CFSTR("kCfgDoubleClickInt"));

    }
    if (sub_100442118(a2, 30))
    {
      v14 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_10044F8A0(a2));
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      objc_msgSend(v5, "setObject:forKey:", v15, CFSTR("kCfgClickHold"));

    }
    if ((sub_100442118(a2, 30) & 1) != 0 || sub_10044FE34(a2, 128))
    {
      v16 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_10044F928(a2));
      v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      objc_msgSend(v5, "setObject:forKey:", v17, CFSTR("kCfgClickHoldInt"));

    }
    if (sub_100442118(a2, 28))
    {
      v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_10044F74C(a2));
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      objc_msgSend(v5, "setObject:forKey:", v19, CFSTR("kCfgListenModeCfgs"));

    }
    if (sub_100442118(a2, 16) && sub_100442118(a2, 1))
    {
      v20 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", sub_10044F96C(a2));
      v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      objc_msgSend(v5, "setObject:forKey:", v21, CFSTR("kCfgOneBudANCMode"));
    }
    else
    {
      if (!sub_100442118(a2, 16) || !sub_100442118(a2, 15))
      {
LABEL_21:
        v23 = sub_10034FCFC();
        sub_10046E9BC((unsigned __int8 *)(a2 + 128), v27);
        sub_10043F6EC(a2, (uint64_t)__p);
        if (v26 >= 0)
          v24 = __p;
        else
          v24 = (void **)__p[0];
        (*(void (**)(uint64_t, void **, id, void **))(*(_QWORD *)v23 + 120))(v23, v27, v5, v24);
        if (v26 < 0)
          operator delete(__p[0]);
        if (v28 < 0)
          operator delete(v27[0]);
        goto LABEL_28;
      }
      v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
      objc_msgSend(v5, "setObject:forKey:", v21, CFSTR("kCfgOneBudANCMode"));
    }

    goto LABEL_21;
  }
LABEL_28:

  return 0;
}

void sub_100279E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

uint64_t sub_100279E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  NSObject *v17;
  _QWORD **v18;
  _QWORD *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  int v23;
  int v24;
  NSObject *v25;
  int v26;
  NSObject *v27;
  NSObject *v28;
  int v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  NSObject *v38;
  _BOOL8 v39;
  NSObject *v40;
  NSObject *v41;
  int v42;
  NSObject *v43;
  NSObject *v44;
  NSObject *v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t i;
  NSObject *v49;
  _BOOL8 v50;
  void **v51;
  _BOOL8 v53;
  const char *v54;
  int v55;
  void **v56;
  void **v57;
  void **v58;
  const char *v59;
  const char *v60;
  int v61;
  void **v62;
  void **v63;
  void **v64;
  char v65;
  NSObject *v66;
  _BOOL4 v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  NSObject *v72;
  uint64_t v73;
  void *__p[2];
  char v75;
  void *v76[2];
  char v77;
  _QWORD v78[2];
  _QWORD v79[5];
  void *v80[2];
  char v81;
  _BYTE buf[14];
  _BYTE v83[6];
  void **v84;
  _BYTE v85[10];
  __int16 v86;
  const char *v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  _BOOL4 v93;
  _BYTE v94[24];

  if (*(_BYTE *)(a1 + 328))
  {
    if (a5)
    {
      switch((int)a3)
      {
        case 1:
          v10 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Set Mic Mode to value 0x%08X", buf, 8u);
          }
          v11 = sub_10003BE44();
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 328))(v11) & 1) == 0)
          {
            v12 = sub_10003BE44();
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 384))(v12))
              goto LABEL_98;
          }
          v13 = 0;
          v14 = sub_10044F5D0(a2) != a4;
          v15 = v14;
          goto LABEL_151;
        case 5:
          v17 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Set Button Send Mode: %d", buf, 8u);
          }
          if ((_DWORD)a4 == 1 && !*(_QWORD *)(a1 + 488))
            sub_10027B26C();
          goto LABEL_98;
        case 13:
          v76[0] = 0;
          v76[1] = 0;
          sub_10003415C((uint64_t)v76, a1 + 360);
          if (!a2)
            goto LABEL_130;
          v18 = *(_QWORD ***)(a1 + 336);
          while (2)
          {
            if (v18 == *(_QWORD ***)(a1 + 344))
            {
LABEL_130:
              if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
              {
                sub_10043E5F8(a2, buf);
                sub_1006D680C();
              }
              v16 = 312;
              goto LABEL_133;
            }
            v19 = *v18;
            if (**v18 != a2)
            {
              ++v18;
              continue;
            }
            break;
          }
          if (sub_10044F96C(a2) == 2 && ((_DWORD)a4 == 4 || (_DWORD)a4 == 2))
          {
            if (sub_100442118(a2, 1))
            {
              if (sub_10044F614(a2))
              {
                v70 = *((unsigned __int8 *)v19 + 8);
                if (*((_BYTE *)v19 + 8) || *((_BYTE *)v19 + 9))
                {
                  v71 = qword_1009997D0;
                  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
                    sub_1006D6A48(v70, (uint64_t)v19, v71);
                  v16 = 11;
LABEL_133:
                  v51 = v76;
                  goto LABEL_111;
                }
              }
            }
          }
          v72 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "Set ListeningMode device setting: %d", buf, 8u);
          }
          sub_10044DD14(a2, a4);
          sub_100034234((uint64_t)v76);
          v15 = 0;
          v14 = 1;
          v13 = 1;
LABEL_151:
          v46 = a5 != 3;
          if (a5 != 3 && v14)
            sub_100279A90(a1, a2);
          v68 = !v15;
          if ((a5 & 0xFFFFFFFE) != 2)
            v68 = 1;
          if ((v68 & 1) == 0)
          {
            v69 = sub_10006BBEC();
            v79[0] = _NSConcreteStackBlock;
            v79[1] = 3221225472;
            v79[2] = sub_10027B400;
            v79[3] = &unk_100917378;
            v79[4] = a2;
            sub_100041A34(v69, v79);
            v15 = 1;
          }
LABEL_99:
          v47 = sub_10003BE44();
          if ((v13 & v46 & (*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 344))(v47)) == 1)
            sub_100279A90(a1, a2);
          v78[0] = 0;
          v78[1] = 0;
          sub_10003415C((uint64_t)v78, a1 + 360);
          if (a2)
          {
            for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
            {
              if (**(_QWORD **)i == a2)
              {
                v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)i + 768)
                                                                                   + 24))(*(_QWORD *)(*(_QWORD *)i + 768), a2, a3, a4);
                v49 = qword_1009997D0;
                if ((_DWORD)v16)
                  goto LABEL_109;
                v53 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
                if (v53)
                {
                  v54 = sub_10027B454(v53, a3);
                  sub_10027B480(a1, a3, a4, v76);
                  v55 = v77;
                  v56 = (void **)v76[0];
                  sub_10043E5F8(a2, v80);
                  v57 = v76;
                  if (v55 < 0)
                    v57 = v56;
                  v58 = v80;
                  if (v81 < 0)
                    v58 = (void **)v80[0];
                  if (a5 > 4)
                    v59 = "Unknown";
                  else
                    v59 = off_100921FE8[a5 - 1];
                  *(_DWORD *)buf = 136448002;
                  *(_QWORD *)&buf[4] = v54;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)v83 = a3;
                  *(_WORD *)&v83[4] = 2082;
                  v84 = v57;
                  *(_WORD *)v85 = 2082;
                  *(_QWORD *)&v85[2] = v58;
                  v86 = 2082;
                  v87 = v59;
                  v88 = 1024;
                  v89 = v13;
                  v90 = 1024;
                  v91 = v14;
                  v92 = 1024;
                  v93 = v15;
                  _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Sent %{public}s (control cmd 0x%02X) as %{public}s to %{public}s, reqType = %{public}s, magnet from watch = %d, magnet to watch = %d, cloud sync = %d", buf, 0x42u);
                  if (v81 < 0)
                    operator delete(v80[0]);
                  if (v77 < 0)
                    operator delete(v76[0]);
                  v16 = 0;
                }
                goto LABEL_110;
              }
            }
          }
          v49 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
          {
            sub_10043E5F8(a2, v76);
            sub_1006D69D4((char *)v76, (uint64_t)v94, (uint64_t)v49, buf);
            v49 = *(NSObject **)buf;
          }
          v16 = 312;
LABEL_109:
          v50 = os_log_type_enabled(v49, OS_LOG_TYPE_ERROR);
          if (v50)
          {
            v60 = sub_10027B454(v50, a3);
            sub_10027B480(a1, a3, a4, v80);
            v61 = v81;
            v62 = (void **)v80[0];
            sub_10043E5F8(a2, __p);
            v63 = v80;
            if (v61 < 0)
              v63 = v62;
            if (v75 >= 0)
              v64 = __p;
            else
              v64 = (void **)__p[0];
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = v60;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)v83 = a3;
            *(_WORD *)&v83[4] = 2082;
            v84 = v63;
            *(_WORD *)v85 = 2082;
            *(_QWORD *)&v85[2] = v64;
            v86 = 1024;
            LODWORD(v87) = v16;
            _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "Failed to send %{public}s (control cmd 0x%02X) as %{public}s to %{public}s, error %d", buf, 0x2Cu);
            if (v75 < 0)
              operator delete(__p[0]);
            if (v81 < 0)
              operator delete(v80[0]);
          }
LABEL_110:
          v51 = (void **)v78;
LABEL_111:
          sub_100034234((uint64_t)v51);
          break;
        case 20:
          v20 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Set SingleClickMode device setting: %d", buf, 8u);
          }
          sub_10044E0C4(a2, a4);
          goto LABEL_98;
        case 21:
          v21 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Set DoubleClickMode device setting: %d", buf, 8u);
          }
          sub_10044E134(a2, a4);
          goto LABEL_98;
        case 22:
          v22 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67110400;
            *(_DWORD *)&buf[4] = WORD1(a4);
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = WORD1(a4);
            *(_WORD *)v83 = 1024;
            *(_DWORD *)&v83[2] = BYTE1(a4);
            LOWORD(v84) = 1024;
            *(_DWORD *)((char *)&v84 + 2) = BYTE1(a4);
            HIWORD(v84) = 1024;
            *(_DWORD *)v85 = a4;
            *(_WORD *)&v85[4] = 1024;
            *(_DWORD *)&v85[6] = a4;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Set ClickHoldMode device setting: extra %u (0x%04X), left %u (0x%02X), right %u (0x%02X)", buf, 0x26u);
          }
          v23 = sub_100442118(a2, 38);
          v15 = (v23 & 1) == 0 && sub_10044F8A0(a2) != a4;
          sub_10044E1A4(a2, a4);
          goto LABEL_149;
        case 23:
          v24 = sub_100442118(a2, 43);
          v25 = qword_1009997D0;
          if (a5 == 3 && v24)
          {
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
              sub_1006D6AC0();
            return 17;
          }
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Set DoubleClickInterval device setting: %d", buf, 8u);
          }
          v23 = sub_100442118(a2, 43);
          sub_10044E26C(a2, a4);
          goto LABEL_140;
        case 24:
          v26 = sub_100442118(a2, 43);
          v27 = qword_1009997D0;
          if (a5 == 3 && v26)
          {
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
              sub_1006D6AEC();
            return 17;
          }
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Set ClickHoldInterval device setting: %d", buf, 8u);
          }
          v23 = sub_100442118(a2, 43);
          sub_10044E2DC(a2, a4);
LABEL_140:
          v13 = 0;
          v15 = 0;
          goto LABEL_150;
        case 26:
          v28 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Set ListeningModeConfigs device setting: %d", buf, 8u);
          }
          v15 = sub_10044F74C(a2) != a4;
          sub_10044DEA8(a2, a4);
          v13 = 0;
          v14 = 1;
          goto LABEL_151;
        case 27:
          v29 = sub_100442118(a2, 43);
          if (a5 - 3 <= 1 && v29)
          {
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
              sub_1006D6B18();
            return 17;
          }
          v65 = sub_100442118(a2, 15);
          v66 = qword_1009997D0;
          v67 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
          if ((v65 & 1) != 0)
          {
            if (v67)
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Don't set OneBudANCMode device setting for this device right now", buf, 2u);
            }
            goto LABEL_98;
          }
          if (v67)
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Set OneBudANCMode device setting: %d", buf, 8u);
          }
          v23 = sub_100442118(a2, 43);
          v15 = (v23 & 1) == 0 && sub_10044F96C(a2) != a4;
          v73 = sub_10044E34C(a2, a4);
          sub_10027B12C(v73, a2);
LABEL_149:
          v13 = 0;
LABEL_150:
          v14 = v23 ^ 1;
          goto LABEL_151;
        case 28:
          v30 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Set CrownRotationDirection: %d", buf, 8u);
          }
          sub_10044E3BC(a2, a4);
          goto LABEL_98;
        case 30:
          v31 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Set AutoAnswerMode: %d", buf, 8u);
          }
          sub_10044E400(a2, a4);
          goto LABEL_98;
        case 31:
          v32 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Set Chime Volume: %d", buf, 8u);
          }
          sub_10044E444(a2, a4);
          goto LABEL_98;
        case 35:
          v33 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Set VolumeSwipeInterval device setting : VolumeSwipeInterval value %d", buf, 8u);
          }
          sub_10044E53C(a2, a4);
          goto LABEL_98;
        case 36:
          v34 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Set Call Management Config to value 0x%08X", buf, 8u);
          }
          sub_10044E674(a2, a4);
          goto LABEL_98;
        case 37:
          v35 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Set VolumeSwipeMode device setting : VolumeSwipeMode value %d", buf, 8u);
          }
          sub_10044E4CC(a2, a4);
          goto LABEL_98;
        case 38:
          v36 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Set Adaptive Volume Config to value 0x%08X", buf, 8u);
          }
          sub_10044E5AC(a2, a4);
          if (qword_100977E00 != -1)
            dispatch_once(&qword_100977E00, &stru_100921C18);
          sub_1003E4EB4((_QWORD *)qword_100977DF8, a2, a4);
          goto LABEL_98;
        case 39:
          v37 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Set Software Mute config to 0x%08X", buf, 8u);
          }
          sub_10044E734(a2, a4);
          goto LABEL_98;
        case 40:
          v38 = qword_1009997D0;
          v39 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
          if (v39)
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Set Conversation Detect config to 0x%08X", buf, 8u);
          }
          sub_10027B2D0(v39, a2, a4);
          sub_10044E7DC(a2, a4);
          if (qword_1009778D8 != -1)
            dispatch_once(&qword_1009778D8, &stru_100921C38);
          sub_100422400((uint64_t)off_1009778D0, a2);
          goto LABEL_98;
        case 41:
          v40 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Set SSL to 0x%08X", buf, 8u);
          }
          sub_10044E884(a2, a4);
          goto LABEL_98;
        case 46:
          v41 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Set AutoANC Strength to 0x%08X", buf, 8u);
          }
          sub_10044E970(a2, a4);
          goto LABEL_98;
        case 48:
          v42 = sub_100442118(a2, 31);
          v43 = qword_1009997D0;
          if (!v42)
          {
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
              sub_1006D6B44();
            return 11;
          }
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Set HRM enable / disable state to 0x%08X", buf, 8u);
          }
          sub_10044EA18(a2, a4);
LABEL_98:
          v14 = 0;
          v13 = 0;
          v15 = 0;
          v46 = a5 != 3;
          goto LABEL_99;
        case 49:
          v44 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Set In Case Tone config to 0x%08X", buf, 8u);
          }
          sub_10044E92C(a2, a4);
          goto LABEL_98;
        case 50:
          v45 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Set Siri Multitone config to 0x%08X", buf, 8u);
          }
          sub_10044EAC0(a2, a4);
          goto LABEL_98;
        default:
          goto LABEL_98;
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
        sub_1006D69A8();
      return 3;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D697C();
    return 111;
  }
  return v16;
}

void sub_10027B000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_100034234((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_10027B12C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;

  v3 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(a2, (uint64_t)__p);
    if (v10 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Notify one bud ANC mode change for device \"%s\"", buf, 0xCu);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  v5 = sub_100475960();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10029B19C;
  v8[3] = &unk_100917378;
  v8[4] = a2;
  sub_100041A34(v5, v8);
  v6 = sub_1004759E0();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10029B200;
  v7[3] = &unk_100917378;
  v7[4] = a2;
  sub_100041A34(v6, v7);
}

void sub_10027B26C()
{
  operator new();
}

void sub_10027B2AC()
{
  operator delete();
}

void sub_10027B2D0(uint64_t a1, uint64_t a2, int a3)
{
  char v4;
  NSObject *v5;
  _BOOL4 v6;
  _DWORD v7[2];

  v4 = sub_1004414B4(a2);
  v5 = qword_1009997D0;
  v6 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
  if ((v4 & 1) != 0)
  {
    if (v6)
    {
      v7[0] = 67109120;
      v7[1] = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Notify conversation awareness changed \"%i\"", (uint8_t *)v7, 8u);
    }
    if (qword_100991A90 != -1)
      dispatch_once(&qword_100991A90, &stru_1009211E8);
    notify_set_state(dword_100991A98, a3 == 1);
    notify_post("com.apple.bluetoothd.conversationAwarenessValueChanged");
  }
  else if (v6)
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Notify of conversation awareness change ignored as Adaptive Controls Share Sheet not yet shown.", (uint8_t *)v7, 2u);
  }
}

uint64_t sub_10027B400(uint64_t a1)
{
  if (qword_100977A68 != -1)
    dispatch_once(&qword_100977A68, &stru_100921C58);
  return sub_100466A3C((uint64_t)off_100977A60, *(_QWORD *)(a1 + 32), 4097);
}

const char *sub_10027B454(uint64_t a1, int a2)
{
  if ((a2 - 1) > 0x31)
    return "unknown";
  else
    return off_100921E58[(char)(a2 - 1)];
}

_QWORD *sub_10027B480@<X0>(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  const char *v5;
  const char *v6;
  BOOL v7;
  uint64_t v8;
  char **v9;
  char *v10;
  const char *v11;
  const char *v12;
  int v13;
  const char *v14;
  BOOL v15;
  char **v16;
  char __str[16];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  *(_OWORD *)__str = 0u;
  v19 = 0u;
  switch(a2)
  {
    case 1:
      if (a3 > 2u)
        goto LABEL_29;
      v8 = (char)a3;
      v9 = off_1009220C8;
      goto LABEL_9;
    case 4:
      v10 = "Off";
      switch((__int16)a3)
      {
        case 0:
          return sub_100091AE8(a4, v10);
        case 1:
          v10 = "Siri";
          break;
        case 2:
          v10 = "Play/Pause";
          break;
        case 3:
          v10 = "Next Track";
          break;
        case 4:
          v10 = "Prev Track";
          break;
        default:
          if ((unsigned __int16)a3 == 15)
            v10 = "unknown-cloud";
          else
            v10 = "unknown";
          break;
      }
      return sub_100091AE8(a4, v10);
    case 6:
      v11 = "owned";
      v12 = "not owned";
      goto LABEL_22;
    case 8:
      v5 = "unknown";
      v13 = a3;
      v14 = "secondary";
      v15 = a3 == 2;
      v6 = "primary";
      goto LABEL_32;
    case 10:
      v5 = "unknown";
      v13 = a3;
      v14 = "Enabled";
      v15 = a3 == 2;
      v6 = "Disabled";
      goto LABEL_32;
    case 11:
      snprintf(__str, 0x100uLL, "%u ms");
      return sub_100091AE8(a4, __str);
    case 12:
      if (BYTE1(a3) <= 4u)
        __asm { BR              X11 }
      goto LABEL_46;
    case 13:
      if (a3 - 1 > 3)
        goto LABEL_29;
      v10 = off_100922118[a3 - 1];
      return sub_100091AE8(a4, v10);
    case 18:
    case 27:
    case 30:
    case 32:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 48:
    case 49:
    case 50:
      v5 = "unknown";
      v6 = "Disabled";
      if (a3 == 1)
        v5 = "Enabled";
      v7 = a3 == 2;
      goto LABEL_35;
    case 19:
      v11 = "Enabled";
      v12 = "Disabled";
LABEL_22:
      if (a3)
        v10 = (char *)v11;
      else
        v10 = (char *)v12;
      return sub_100091AE8(a4, v10);
    case 20:
    case 21:
      LOBYTE(v8) = a3 - 1;
      if ((a3 - 1) > 6u)
        goto LABEL_29;
      v8 = (char)v8;
      v9 = off_1009221B0;
LABEL_9:
      v10 = v9[v8];
      return sub_100091AE8(a4, v10);
    case 22:
LABEL_46:
      snprintf(__str, 0x100uLL, "%s for left bud and %s for right bud (value 0x%X)");
      return sub_100091AE8(a4, __str);
    case 23:
      if (a3 > 2)
        goto LABEL_29;
      v16 = off_100922200;
      goto LABEL_41;
    case 24:
      if (a3 <= 2)
      {
        v16 = off_100922218;
        goto LABEL_41;
      }
LABEL_29:
      v10 = "unknown";
      break;
    case 26:
      v10 = (char *)sub_10029B318(a1, a3);
      return sub_100091AE8(a4, v10);
    case 28:
      v5 = "unknown";
      v13 = a3;
      v14 = "Front-to-Back";
      v15 = a3 == 2;
      v6 = "Back-to-Front";
LABEL_32:
      if (v15)
        v5 = v14;
      v7 = v13 == 1;
LABEL_35:
      if (v7)
        v10 = (char *)v6;
      else
        v10 = (char *)v5;
      return sub_100091AE8(a4, v10);
    case 34:
      if (a3 > 2)
      {
        v10 = "Invalid";
      }
      else
      {
        v16 = off_1009221E8;
LABEL_41:
        v10 = v16[a3];
      }
      break;
    case 36:
      if ((a3 & 0xF) != 0)
        snprintf(__str, 0x100uLL, "Version: %u, endCallStatus: %s, endCall: %s, muteControlStatus: %s, muteControl: %s");
      else
        snprintf(__str, 0x100uLL, "Version: %u, endCallStatus: %s, endCall: %s");
      return sub_100091AE8(a4, __str);
    case 46:
      snprintf(__str, 0x100uLL, "%u");
      return sub_100091AE8(a4, __str);
    default:
      snprintf(__str, 0x100uLL, "0x%08X");
      return sub_100091AE8(a4, __str);
  }
  return sub_100091AE8(a4, v10);
}

uint64_t sub_10027BA18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
    {
      if (**(_QWORD **)i == a2)
      {
        v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)i + 768) + 96))(*(_QWORD *)(*(_QWORD *)i + 768), a2, a3);
        goto LABEL_9;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, v9);
    sub_1006D680C();
  }
  v7 = 312;
LABEL_9:
  sub_100034234((uint64_t)v10);
  return v7;
}

void sub_10027BB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10027BB38(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  NSObject *v8;
  _BOOL8 v9;
  const char *v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD v16[2];
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 360);
  v8 = qword_1009997D0;
  v9 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    v10 = sub_10027B454(v9, a2);
    *(_DWORD *)buf = 136446722;
    v18 = v10;
    v19 = 1024;
    v20 = a2;
    v21 = 1024;
    v22 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "broadcastControlCommand: %{public}s (control cmd 0x%02X), value %d", buf, 0x18u);
  }
  v12 = *(uint64_t ***)(a1 + 336);
  v11 = *(uint64_t ***)(a1 + 344);
  v13 = 1;
  while (v12 != v11)
  {
    v14 = *v12;
    if (*v12)
    {
      if (*v14)
      {
        v13 = sub_100279E6C(a1, *v14, a2, a3, a4);
        v11 = *(uint64_t ***)(a1 + 344);
      }
    }
    ++v12;
  }
  sub_100034234((uint64_t)v16);
  return v13;
}

void sub_10027BC70(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10027BC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD v14[2];
  uint8_t buf[4];
  int v16;
  __int16 v17;
  int v18;

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 360);
  v8 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v16 = a2;
    v17 = 1024;
    v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "broadcastCustomMsg: type: %u, len: %u", buf, 0xEu);
  }
  v10 = *(uint64_t ***)(a1 + 336);
  v9 = *(uint64_t ***)(a1 + 344);
  v11 = 1;
  while (v10 != v9)
  {
    v12 = *v10;
    if (*v10)
    {
      if (*v12)
      {
        v11 = sub_10027958C(a1, *v12, a2, a3, a4);
        v9 = *(uint64_t ***)(a1 + 344);
      }
    }
    ++v10;
  }
  sub_100034234((uint64_t)v14);
  return v11;
}

void sub_10027BDB4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10027BDD0(double a1)
{
  if (a1 == 8000.0)
    return 1;
  if (a1 == 16000.0)
    return 2;
  if (a1 == 24000.0)
    return 3;
  if (a1 == 44100.0)
    return 4;
  if (a1 == 48000.0)
    return 5;
  return 0;
}

uint64_t sub_10027BE48(uint64_t a1)
{
  NSObject *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t v10[16];
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 360);
  v2 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "getStreamingDevice: no connected devices", v10, 2u);
  }
  v3 = *(uint64_t ***)(a1 + 336);
  v4 = *(uint64_t ***)(a1 + 344);
  while (1)
  {
    if (v3 == v4)
    {
      v7 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v10 = 0;
        v8 = "getA2DPStreamingDevice: no connected devices";
        goto LABEL_10;
      }
LABEL_11:
      v6 = 0;
      goto LABEL_12;
    }
    v5 = *v3;
    if (*v3)
    {
      v6 = *v5;
      if (*v5)
        break;
    }
    ++v3;
  }
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100921C18);
  if ((sub_1003DA184((_QWORD *)qword_100977DF8, v6) & 1) == 0)
  {
    v7 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      v8 = "getA2DPStreamingDevice: no A2DP stream";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, v10, 2u);
    }
    goto LABEL_11;
  }
LABEL_12:
  sub_100034234((uint64_t)v11);
  return v6;
}

void sub_10027BFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10027BFB4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  NSObject *v9;
  void **v10;
  const char *v11;
  void *__p[2];
  char v13;
  int v14;
  __int16 v15;
  uint8_t buf[4];
  void **v17;
  __int16 v18;
  const char *v19;

  v15 = 0;
  v14 = 0;
  if ((char)a2[23] < 0)
    a2 = *(unsigned __int8 **)a2;
  if (!sub_10006D80C((uint64_t)&v14, a2))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D6B70();
    return 1;
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  LODWORD(__p[0]) = v14;
  WORD2(__p[0]) = v15;
  v5 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v6 = v5;
  if (v5)
  {
    v7 = sub_10044FD68(v5);
    sub_10044EF08(v6, a3);
  }
  else
  {
    v7 = 0;
  }
  if (!sub_100481CB4(a1) || v7 == (_DWORD)a3)
    return 1;
  v9 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10046E9BC((unsigned __int8 *)&v14, __p);
    v10 = (void **)__p[0];
    v11 = "doesn't own";
    if (v13 >= 0)
      v10 = __p;
    if ((_DWORD)a3)
      v11 = "owns";
    *(_DWORD *)buf = 136315394;
    v17 = v10;
    v18 = 2082;
    v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Telling device \"%s\" that this source %{public}s the connection", buf, 0x16u);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return sub_100279E6C(a1, v6, 6, a3, 1u);
}

uint64_t sub_10027C1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v9;
  _QWORD v11[3];
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
    {
      if (**(_QWORD **)i == a2)
      {
        v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)i + 768) + 112))(*(_QWORD *)(*(_QWORD *)i + 768), a2, a3, a4);
        goto LABEL_9;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, v11);
    sub_1006D680C();
  }
  v9 = 312;
LABEL_9:
  sub_100034234((uint64_t)v12);
  return v9;
}

void sub_10027C2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10027C2D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v9;
  _QWORD v11[3];
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
    {
      if (**(_QWORD **)i == a2)
      {
        v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)i + 768) + 120))(*(_QWORD *)(*(_QWORD *)i + 768), a2, a3, a4);
        goto LABEL_9;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, v11);
    sub_1006D6B9C();
  }
  v9 = 312;
LABEL_9:
  sub_100034234((uint64_t)v12);
  return v9;
}

void sub_10027C3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10027C3FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
    {
      if (**(_QWORD **)i == a2)
      {
        v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)i + 768) + 128))(*(_QWORD *)(*(_QWORD *)i + 768), a2, a3);
        goto LABEL_9;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, v9);
    sub_1006D6BE8();
  }
  v7 = 312;
LABEL_9:
  sub_100034234((uint64_t)v10);
  return v7;
}

void sub_10027C4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10027C51C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6)
{
  NSObject *v12;
  void **v13;
  uint64_t v14;
  int v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void *__p[2];
  char v24;
  uint8_t buf[4];
  _BYTE v26[10];
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;

  v12 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v13 = v24 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)v26 = v13;
    *(_WORD *)&v26[8] = 1024;
    v27 = a3;
    v28 = 1024;
    v29 = a4;
    v30 = 1024;
    v31 = a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "send setup command to %{public}s, setupType -> %d, opType -> %d, pldLen -> %d", buf, 0x1Eu);
    if (v24 < 0)
      operator delete(__p[0]);
  }
  if ((_DWORD)a3 != 1)
  {
    v19 = qword_1009997D0;
    if (!os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      goto LABEL_15;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v26 = a3;
    v16 = "Unsupported setup type = %d";
    v17 = v19;
    v18 = 8;
    goto LABEL_14;
  }
  if (a5 >= 2)
  {
    if (!a6)
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/aacp/AACPClient.mm");
    v14 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *a6;
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v26 = a4;
      *(_WORD *)&v26[4] = 1024;
      *(_DWORD *)&v26[6] = v15;
      v16 = "send seal setup operation opType = %d result = %d";
      v17 = v14;
      v18 = 14;
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v16, buf, v18);
    }
  }
LABEL_15:
  __p[0] = 0;
  __p[1] = 0;
  sub_10003415C((uint64_t)__p, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
    {
      if (**(_QWORD **)i == a2)
      {
        v21 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16 *))(**(_QWORD **)(*(_QWORD *)i + 768) + 152))(*(_QWORD *)(*(_QWORD *)i + 768), a2, a3, a4, a5, a6);
        goto LABEL_23;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, buf);
    sub_1006D6C34();
  }
  v21 = 312;
LABEL_23:
  sub_100034234((uint64_t)__p);
  return v21;
}

void sub_10027C7B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10027C7D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, const void *a6)
{
  _QWORD *i;
  _QWORD *v13;
  NSObject *v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  NSObject *v18;
  _BYTE *v19;
  uint64_t v20;
  char v22;
  _QWORD v23[2];
  char v24;
  _BYTE __p[12];
  char v26;
  _BYTE buf[12];
  __int16 v28;
  char *v29;
  __int16 v30;
  unsigned int v31;
  char v32;
  _BYTE v33[6];

  if (!*(_BYTE *)(a1 + 328))
    return 111;
  bzero(&v32, 0x3E7uLL);
  v24 = 0;
  v23[0] = 0;
  v23[1] = 0;
  sub_10003415C((uint64_t)v23, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD **)(a1 + 336); i != *(_QWORD **)(a1 + 344); ++i)
    {
      v13 = (_QWORD *)*i;
      if (*(_QWORD *)*i == a2)
        goto LABEL_8;
    }
  }
  v13 = 0;
LABEL_8:
  v14 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v15 = v26 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v15;
    v16 = a4 == 1 ? "Audio Arbitration" : "Unknown";
    v28 = 2082;
    v29 = v16;
    v30 = 1024;
    v31 = a5;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Send relay message to %{public}s, relayMessageType -> %{public}s, relayMessageLen -> %d", buf, 0x1Cu);
    if (v26 < 0)
      operator delete(*(void **)__p);
  }
  if (a5 < 0x3E7)
  {
    if (v13)
    {
      if (a4 == 1)
      {
        v22 = 0;
        sub_100043758(&v22);
        if (!sub_100185E9C(a2 + 128, &v24) && v24 == 2)
        {
          v18 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(a2, buf);
            v19 = v30 >= 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)__p = 136446210;
            *(_QWORD *)&__p[4] = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Unsniff ACL link with %{public}s for TiPi audio arbitration message", __p, 0xCu);
            if (SHIBYTE(v30) < 0)
              operator delete(*(void **)buf);
          }
          sub_100187584(a2 + 128);
        }
        sub_10004339C(&v22);
        sub_100043728(&v22);
      }
      v32 = a4;
      memcpy(v33, a6, a5);
      buf[0] = 0;
      sub_100043758(buf);
      v20 = sub_1000E2070((unsigned __int8 *)(a2 + 128), a3, (unsigned __int16)(a5 + 1), &v32);
      sub_10004339C(buf);
      if ((_DWORD)v20 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
        sub_1006D6D38();
      if (qword_100977A58 != -1)
        dispatch_once(&qword_100977A58, &stru_100921B78);
      v17 = sub_1004A35C0((uint64_t)off_100977A50, v20, 10000);
      sub_100043728(buf);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(a2, buf);
        sub_1006D6CEC();
      }
      v17 = 312;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D6C80();
    v17 = 3;
  }
  sub_100034234((uint64_t)v23);
  return v17;
}

void sub_10027CB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, char a13)
{
  sub_100043728(&a12);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10027CB9C(uint64_t a1, uint64_t a2, int a3, int *a4, unsigned int a5)
{
  _QWORD **v10;
  _QWORD **v11;
  _QWORD *v12;
  NSObject *v13;
  void **v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  void *__p[2];
  char v22;
  uint8_t buf[4];
  void **v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  unsigned int v28;

  if (!*(_BYTE *)(a1 + 328))
    return 111;
  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 360);
  if (a2)
  {
    v10 = *(_QWORD ***)(a1 + 336);
    v11 = *(_QWORD ***)(a1 + 344);
    while (v10 != v11)
    {
      v12 = *v10;
      if (**v10 == a2)
        goto LABEL_8;
      ++v10;
    }
  }
  v12 = 0;
LABEL_8:
  v13 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    if (v22 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    v15 = "Unknown";
    if (a3 == 2)
      v15 = "Legacy Triangle";
    *(_DWORD *)buf = 136446722;
    v24 = v14;
    if (a3 == 1)
      v16 = "TiPi";
    else
      v16 = v15;
    v25 = 2082;
    v26 = v16;
    v27 = 1024;
    v28 = a5;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Send update request for connection priority list to %{public}s, reqType -> %{public}s, numOfConn -> %d", buf, 0x1Cu);
    if (v22 < 0)
      operator delete(__p[0]);
  }
  if (a5 < 3)
  {
    if (v12)
    {
      if (!sub_100442118(a2, 32) || (v17 = sub_10027CE94((uint64_t)v12, a3, a4, a5), !(_DWORD)v17))
      {
        buf[0] = 0;
        sub_100043758(buf);
        v18 = sub_1000E2260((unsigned __int8 *)(a2 + 128), a5, (uint64_t)a4);
        sub_10004339C(buf);
        if ((_DWORD)v18 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
          sub_1006D6E04();
        if (qword_100977A58 != -1)
          dispatch_once(&qword_100977A58, &stru_100921B78);
        v17 = sub_1004A35C0((uint64_t)off_100977A50, v18, 10000);
        sub_100043728(buf);
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      {
        sub_10043E5F8(a2, buf);
        sub_1006D6CEC();
      }
      v17 = 312;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D6D98();
    v17 = 3;
  }
  sub_100034234((uint64_t)v20);
  return v17;
}

void sub_10027CE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10027CE94(uint64_t a1, int a2, int *a3, int a4)
{
  NSObject *v7;
  NSObject *v9;
  void **v10;
  int v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **p_p;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  void *v25;
  void *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  _WORD *v47;
  _WORD *v48;
  char *v49;
  int v50;
  __int16 v51;
  _QWORD v52[5];
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  void *__p;
  __int16 v59;
  uint64_t v60;
  char v61;
  uint8_t buf[4];
  void **v63;
  __int16 v64;
  uint64_t v65;

  v57 = a2;
  if (a2 == 2)
  {
    v9 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(*(_QWORD *)a1, &__p);
      v10 = v61 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136446210;
      v63 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Request Legacy Triangle connection priority list update for device %{public}s", buf, 0xCu);
      if (v61 < 0)
        operator delete(__p);
    }
LABEL_24:
    v27 = *(char **)(a1 + 680);
    if (v27 != *(char **)(a1 + 688))
      *(_QWORD *)(a1 + 688) = v27;
    if (a4)
    {
      v28 = 0;
      v29 = (_QWORD *)(a1 + 696);
      do
      {
        v30 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          v38 = sub_10025304C((uint64_t)a3 + 6 * v28, v31, v32, v33, v34, v35, v36, v37);
          LODWORD(__p) = 67109378;
          HIDWORD(__p) = v28;
          v59 = 2080;
          v60 = v38;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Address of source [%d] in connection priority list update is \"%s\"", (uint8_t *)&__p, 0x12u);
          v27 = *(char **)(a1 + 688);
        }
        v39 = (int *)((char *)a3 + 6 * v28);
        LODWORD(__p) = *v39;
        WORD2(__p) = *((_WORD *)v39 + 2);
        if ((unint64_t)v27 >= *v29)
        {
          v41 = *(_QWORD *)(a1 + 680);
          v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v27[-v41] >> 1);
          v43 = v42 + 1;
          if (v42 + 1 > 0x2AAAAAAAAAAAAAAALL)
            abort();
          if (0x5555555555555556 * ((*v29 - v41) >> 1) > v43)
            v43 = 0x5555555555555556 * ((*v29 - v41) >> 1);
          if (0xAAAAAAAAAAAAAAABLL * ((*v29 - v41) >> 1) >= 0x1555555555555555)
            v44 = 0x2AAAAAAAAAAAAAAALL;
          else
            v44 = v43;
          if (v44)
            v45 = (char *)sub_1002A6D18(a1 + 696, v44);
          else
            v45 = 0;
          v46 = &v45[6 * v42];
          *(_DWORD *)v46 = (_DWORD)__p;
          *((_WORD *)v46 + 2) = WORD2(__p);
          v47 = *(_WORD **)(a1 + 688);
          v48 = *(_WORD **)(a1 + 680);
          v49 = v46;
          if (v47 != v48)
          {
            do
            {
              v50 = *(_DWORD *)(v47 - 3);
              v47 -= 3;
              v51 = v47[2];
              *(_DWORD *)(v49 - 6) = v50;
              v49 -= 6;
              *((_WORD *)v49 + 2) = v51;
            }
            while (v47 != v48);
            v47 = *(_WORD **)(a1 + 680);
          }
          *(_QWORD *)(a1 + 680) = v49;
          v27 = v46 + 6;
          *(_QWORD *)(a1 + 688) = v46 + 6;
          *(_QWORD *)(a1 + 696) = &v45[6 * v44];
          if (v47)
            operator delete(v47);
        }
        else
        {
          v40 = *v39;
          *((_WORD *)v27 + 2) = *((_WORD *)v39 + 2);
          *(_DWORD *)v27 = v40;
          v27 += 6;
        }
        *(_QWORD *)(a1 + 688) = v27;
        ++v28;
      }
      while (v28 != a4);
    }
    sub_1002A6D5C((_QWORD *)(a1 + 632), &v57);
    return 0;
  }
  if (a2 == 1)
  {
    v7 = qword_1009997D0;
    if (*(_BYTE *)(a1 + 618))
    {
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
        sub_1006D6EC4();
      return 17;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(*(_QWORD *)a1, &__p);
      v11 = v61;
      v12 = (void **)__p;
      v20 = sub_10025304C((uint64_t)a3 + 6, v13, v14, v15, v16, v17, v18, v19);
      p_p = &__p;
      if (v11 < 0)
        p_p = v12;
      *(_DWORD *)buf = 136446466;
      v63 = p_p;
      v64 = 2080;
      v65 = v20;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Request TiPi connection priority list update for device %{public}s, TiPi source addr = \"%s\"", buf, 0x16u);
      if (v61 < 0)
        operator delete(__p);
    }
    v55 = *a3;
    v56 = *((_WORD *)a3 + 2);
    v53 = *(int *)((char *)a3 + 6);
    v54 = *((_WORD *)a3 + 5);
    *(_BYTE *)(a1 + 618) = 1;
    sub_10027F6BC(a1, (uint64_t)&v55, (uint64_t)&v53);
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_100921C98);
    v22 = *(_QWORD *)a1;
    v23 = sub_10027F8E0(a1);
    sub_10027F83C(v23, v22, v23);
    v52[0] = _NSConcreteStackBlock;
    v52[1] = 3221225472;
    v52[2] = sub_10029C0DC;
    v52[3] = &unk_100921208;
    v52[4] = a1;
    v24 = objc_claimAutoreleasedReturnValue(+[NSTimer timerWithTimeInterval:repeats:block:](NSTimer, "timerWithTimeInterval:repeats:block:", 0, v52, 2.0));
    v25 = *(void **)(a1 + 624);
    *(_QWORD *)(a1 + 624) = v24;

    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](NSRunLoop, "mainRunLoop"));
    objc_msgSend(v26, "addTimer:forMode:", *(_QWORD *)(a1 + 624), NSDefaultRunLoopMode);

    goto LABEL_24;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D6E64();
  return 3;
}

void sub_10027D348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10027D378(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[6];

  v4 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 328))(v4) & 1) != 0)
  {
    if (qword_10097AB28 != -1)
      dispatch_once(&qword_10097AB28, &stru_100921CB8);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10027D448;
    v5[3] = &unk_100918090;
    v5[4] = a1;
    v5[5] = a2;
    sub_10048D538((uint64_t)off_10097AB20, v5);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D6EF0();
  }
}

uint64_t sub_10027D448(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  const __CFDictionary *v15;
  __CFUserNotification *v16;
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *Main;
  uint8_t v20[8];
  _QWORD v21[2];
  _QWORD v22[5];
  _QWORD v23[5];

  v2 = *(_QWORD *)(a1 + 32);
  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, v2 + 360);
  if (!*(_QWORD *)(v2 + 304))
  {
    v3 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "GAPA showCannotVerifyAlert", v20, 2u);
    }
    *(_QWORD *)(v2 + 312) = *(_QWORD *)(a1 + 40);
    v4 = sub_100355F10(CFSTR("GAPA_BT_SETTINGS_ALERT_HEADER"), CFSTR("Cannot Verify AirPods"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = sub_100355F10(CFSTR("GAPA_BT_SETTINGS_ALERT_MESSAGE"), CFSTR("These headphones could not be verified as genuine Apple AirPods. Would you like to connect anyway?"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = sub_100355F10(CFSTR("GAPA_BT_SETTINGS_ALERT_LEARNMORE"), CFSTR("Learn More"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = sub_100355F10(CFSTR("GAPA_BT_SETTINGS_ALERT_PAIRANYWAY"), CFSTR("Connect Anyway"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = sub_100355F10(CFSTR("GAPA_BT_SETTINGS_ALERT_CANCEL"), CFSTR("Cancel"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v22[0] = kCFUserNotificationAlertHeaderKey;
    v22[1] = kCFUserNotificationAlertMessageKey;
    v23[0] = v5;
    v23[1] = v7;
    v22[2] = kCFUserNotificationAlternateButtonTitleKey;
    v22[3] = kCFUserNotificationOtherButtonTitleKey;
    v23[2] = v9;
    v23[3] = v11;
    v22[4] = kCFUserNotificationDefaultButtonTitleKey;
    v23[4] = v13;
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v23, v22, 5));
    v15 = (const __CFDictionary *)objc_msgSend(v14, "mutableCopy");

    v16 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 3uLL, 0, v15);
    *(_QWORD *)(v2 + 304) = v16;
    RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v16, (CFUserNotificationCallBack)sub_10027D73C, 0);
    if (RunLoopSource)
    {
      Main = CFRunLoopGetMain();
      CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopCommonModes);
      CFRelease(RunLoopSource);
    }
    else
    {
      CFUserNotificationCancel(*(CFUserNotificationRef *)(v2 + 304));
      CFRelease(*(CFTypeRef *)(v2 + 304));
      *(_QWORD *)(v2 + 304) = 0;
    }

  }
  return sub_100034234((uint64_t)v21);
}

void sub_10027D6C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  va_list va;

  va_start(va, a2);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10027D73C(uint64_t a1, uint64_t a2)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  sub_10027D78C((uint64_t)off_100977A80, a2, a2);
}

void sub_10027D78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[6];

  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10027D81C;
  v5[3] = &unk_100918090;
  v5[4] = a1;
  v5[5] = a3;
  sub_10048D538((uint64_t)off_10097AB20, v5);
}

uint64_t sub_10027D81C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD v13[2];
  uint8_t buf[4];
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 32);
  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, v2 + 360);
  v3 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 134217984;
    v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "GAPA user responded to cannot verify alert %ld", buf, 0xCu);
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
  {
    v10 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "GAPA cancelButton", buf, 2u);
    }
    sub_100447CA8(*(_QWORD *)(v2 + 312), 0, 1799);
    if (qword_100978150 != -1)
      dispatch_once(&qword_100978150, &stru_100921BD8);
    sub_1005B8744((uint64_t)off_100978148, *(unsigned __int8 **)(v2 + 312));
    goto LABEL_26;
  }
  if (v5 == 2)
  {
    v11 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "GAPA pairAnywayButton", buf, 2u);
    }
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_100921CD8);
    sub_100499FC8((uint64_t)off_100977A70, *(_QWORD *)(v2 + 312), -1);
    goto LABEL_26;
  }
  if (v5 != 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D6F1C();
    goto LABEL_26;
  }
  v6 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "GAPA learnMoreButton", buf, 2u);
  }
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100921CD8);
  sub_100499FC8((uint64_t)off_100977A70, *(_QWORD *)(v2 + 312), -1);
  v7 = objc_msgSend(objc_alloc((Class)NSURL), "initWithString:", CFSTR("https://support.apple.com/kb/HT213102"));
  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
    objc_msgSend(v8, "openURL:withOptions:", v7, 0);

    v9 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "GAPA user sent to URL", buf, 2u);
    }

LABEL_26:
    CFRelease(*(CFTypeRef *)(v2 + 304));
    *(_QWORD *)(v2 + 304) = 0;
    *(_QWORD *)(v2 + 312) = 0;
    return sub_100034234((uint64_t)v13);
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D6F80();
  return sub_100034234((uint64_t)v13);
}

void sub_10027DB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  v11 = v10;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10027DB8C(int a1, _QWORD *__s)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  int64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  char *v13;
  int v14;
  void *v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v2 = qword_1009993D0;
  if ((_UNKNOWN *)qword_1009993D0 == &unk_1009993D8)
    return 0;
  v4 = *((unsigned __int8 *)__s + 23);
  while (1)
  {
    v5 = __s;
    v6 = v4;
    if ((v4 & 0x80) != 0)
    {
      v5 = (_QWORD *)*__s;
      v6 = __s[1];
    }
    v7 = *(char *)(v2 + 55);
    v8 = v7 >= 0 ? (unsigned __int8 *)(v2 + 32) : *(unsigned __int8 **)(v2 + 32);
    v9 = v7 >= 0 ? *(unsigned __int8 *)(v2 + 55) : *(_QWORD *)(v2 + 40);
    if (!v9)
      return *(unsigned int *)(v2 + 56);
    if (v6 >= v9)
    {
      v13 = (char *)v5 + v6;
      v14 = *v8;
      v15 = v5;
      do
      {
        v16 = v6 - v9;
        if (v16 == -1)
          break;
        v17 = (char *)memchr(v15, v14, v16 + 1);
        if (!v17)
          break;
        v18 = v17;
        if (!memcmp(v17, v8, v9))
        {
          if (v18 == v13 || v18 - (char *)v5 == -1)
            break;
          return *(unsigned int *)(v2 + 56);
        }
        v15 = v18 + 1;
        v6 = v13 - (v18 + 1);
      }
      while (v6 >= v9);
    }
    v10 = *(_QWORD **)(v2 + 8);
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = (_QWORD *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = *(_QWORD **)(v2 + 16);
        v12 = *v11 == v2;
        v2 = (uint64_t)v11;
      }
      while (!v12);
    }
    v2 = (uint64_t)v11;
    if (v11 == (_QWORD *)&unk_1009993D8)
      return 0;
  }
}

void sub_10027DCC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  const __CFString *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__dst[2];
  uint64_t v16;
  int v17;
  __int16 v18;
  id v19;
  void *__p[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24[2];
  uint64_t v25;
  int v26;
  __int16 v27;
  _QWORD v28[2];
  int v29;
  _QWORD v30[2];
  int v31;

  v26 = *(_DWORD *)(a2 + 128);
  v27 = *(_WORD *)(a2 + 132);
  v24[0] = 0;
  v24[1] = 0;
  v25 = 0;
  v5 = sub_1004491B4(a2, 0xAu, v24);
  v22 = 0;
  v23 = 0;
  if ((a3 & 2) != 0 && sub_10027DF9C(v5, (_DWORD *)a2))
    v6 = sub_100455B34((_DWORD *)a2, (_DWORD *)&v23 + 1, &v23, (_DWORD *)&v22 + 1, &v22);
  else
    v6 = sub_100444BF0(a2, (_DWORD *)&v23 + 1, &v23, (_DWORD *)&v22 + 1, &v22);
  if (*(char *)(a2 + 1495) < 0)
  {
    v6 = sub_10003430C(__p, *(void **)(a2 + 1472), *(_QWORD *)(a2 + 1480));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 1472);
    v21 = *(_QWORD *)(a2 + 1488);
  }
  v7 = sub_10027DB8C(v6, __p);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  v19 = 0;
  if (v7 > 3)
    v8 = CFSTR("Unknown");
  else
    v8 = (const __CFString *)*((_QWORD *)&off_100922008 + (int)v7);
  NSAppendPrintF_safe(&v19, "%@", v8);
  v9 = v19;
  v30[0] = 0;
  v30[1] = 0;
  v31 = 0;
  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  sub_10044B488(a2, (uint64_t)v30);
  sub_10044B4BC(a2, (uint64_t)v28);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v30, 20));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v28, 20));
  v12 = sub_100065478();
  v17 = v26;
  v18 = v27;
  v14 = HIDWORD(v22);
  v13 = v23;
  if (SHIBYTE(v25) < 0)
  {
    sub_10003430C(__dst, v24[0], (unint64_t)v24[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v24;
    v16 = v25;
  }
  (*(void (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t, void **, id, void *, void *))(*(_QWORD *)v12 + 360))(v12, &v17, a3, v13, v14, __dst, v9, v10, v11);
  if (SHIBYTE(v16) < 0)
    operator delete(__dst[0]);

  if (SHIBYTE(v25) < 0)
    operator delete(v24[0]);
}

void sub_10027DF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10027DF9C(uint64_t a1, _DWORD *a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_100444BF0((uint64_t)a2, (_DWORD *)&v8 + 1, &v8, (_DWORD *)&v7 + 1, &v7);
  v3 = HIDWORD(v7);
  if (!HIDWORD(v7))
  {
    sub_100455B34(a2, (_DWORD *)&v8 + 1, &v8, (_DWORD *)&v7 + 1, &v7);
    v3 = HIDWORD(v7);
  }
  v4 = ((v3 - 8212) < 0x11) & (0x116A1u >> (v3 - 20));
  v5 = sub_100027F68();
  return v4 | (*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 744))(v5);
}

uint64_t sub_10027E034(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL4 v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  NSObject *v17;
  uint8_t *v18;
  void *__p[2];
  uint64_t v21;
  _QWORD v22[2];
  uint8_t v23[4];
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint8_t *v28;
  uint8_t buf[16];
  uint64_t v30;

  v22[0] = 0;
  v22[1] = 0;
  sub_10003415C((uint64_t)v22, a1 + 360);
  v6 = sub_100027F68();
  if (((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 712))(v6) & (a3 >> 9)) == 1)
  {
    v7 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "GAPA hide auth fail", buf, 2u);
    }
    sub_10027DCC8(a1, a2, a3 | 2);
  }
  else
  {
    v8 = sub_100447C64(a2);
    if ((v8 & 2) != 0)
    {
      v13 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Add new GAPA bits 0x%x", buf, 8u);
      }
      sub_100447CA8(a2, a3, a3);
    }
    else
    {
      v9 = sub_10027DF9C(v8, (_DWORD *)a2);
      v10 = a3 | 2;
      v11 = qword_1009997D0;
      v12 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
        if (v12)
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Zero device GAPA 0x%x", buf, 8u);
        }
        sub_100455B58(a2);
        sub_100445BAC(a2, 0, 0, 0, 0);
        sub_100445F58(a2, 0, 0);
        sub_100446234(a2, 0, 0);
        sub_10044F07C(a2);
      }
      else if (v12)
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Limited morph device GAPA 0x%x", buf, 8u);
      }
      sub_100447CA8(a2, v10, v10);
      sub_10027DCC8(a1, a2, v10);
      v15 = *(unsigned __int8 *)(a2 + 1427);
      memset(buf, 0, sizeof(buf));
      v30 = 0;
      if (*(char *)(a2 + 1495) < 0)
      {
        v14 = sub_10003430C(buf, *(void **)(a2 + 1472), *(_QWORD *)(a2 + 1480));
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)(a2 + 1472);
        v30 = *(_QWORD *)(a2 + 1488);
      }
      if (SHIBYTE(v30) < 0)
      {
        v14 = sub_10003430C(__p, *(void **)buf, *(unint64_t *)&buf[8]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)buf;
        v21 = v30;
      }
      v16 = sub_10027DB8C(v14, __p);
      if (SHIBYTE(v21) < 0)
        operator delete(__p[0]);
      v17 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        v18 = buf;
        if (v30 < 0)
          v18 = *(uint8_t **)buf;
        *(_DWORD *)v23 = 67109634;
        v24 = v15;
        v25 = 1024;
        v26 = v16;
        v27 = 2080;
        v28 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "GAPA alert control userConnected=%d, deviceStartSession=%d (%s)", v23, 0x18u);
      }
      if (v15 && v16 == 1)
        sub_10027D378(a1, a2);
      if (SHIBYTE(v30) < 0)
        operator delete(*(void **)buf);
    }
  }
  return sub_100034234((uint64_t)v22);
}

void sub_10027E3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_10027E3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  _BYTE *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  _BYTE *v19;
  void *v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  NSObject *v26;
  _BYTE *v27;
  uint64_t v28;
  NSObject *v29;
  _BYTE *v30;
  uint64_t v31;
  NSObject *v32;
  int v33;
  __int16 v34;
  __int16 v35;
  char v36;
  unsigned __int16 v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE buf[12];
  __int16 v41;
  int v42;
  char v43;
  _BYTE __p[14];
  _BYTE v45[6];
  _DWORD v46[5];

  if ((_os_feature_enabled_impl("BluetoothFeatures", "GAPA") & 1) == 0)
  {
    v13 = qword_1009997D0;
    if (!os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      return;
    sub_10043E5F8(a2, __p);
    if (v46[0] >= 0)
      v14 = __p;
    else
      v14 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v14;
    v10 = "GAPA non-auth disabled for \"%s\"";
LABEL_18:
    v11 = v13;
    v12 = 12;
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
    if (SHIBYTE(v46[0]) < 0)
      operator delete(*(void **)__p);
    return;
  }
  v4 = sub_100027F68();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 736))(v4) & 1) == 0)
  {
    v15 = qword_1009997D0;
    if (!os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)__p = 0;
    v16 = "GAPA non-auth is disabled by defaults write";
LABEL_25:
    v17 = v15;
    v18 = 2;
    goto LABEL_26;
  }
  v5 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 328))(v5) & 1) == 0)
  {
    v15 = qword_1009997D0;
    if (!os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)__p = 0;
    v16 = "GAPA non-auth is disabled for this OS";
    goto LABEL_25;
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) == 0)
  {
    v13 = qword_1009997D0;
    if (!os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      return;
    sub_10043E5F8(a2, __p);
    if (v46[0] >= 0)
      v19 = __p;
    else
      v19 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v19;
    v10 = "Device has not been unlocked (or device prefs not read yet) - disabling GAPA non-auth for %{public}s";
    goto LABEL_18;
  }
  v6 = sub_100447C64(a2);
  if (v6)
  {
    v7 = v6;
    v8 = qword_1009997D0;
    if (!os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      return;
    sub_10043E5F8(a2, __p);
    if (v46[0] >= 0)
      v9 = __p;
    else
      v9 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v9;
    v41 = 1024;
    v42 = v7;
    v10 = "Known GAPA result for \"%s\" cbGAPAFlags=0x%x non-auth not supported";
    v11 = v8;
    v12 = 18;
    goto LABEL_19;
  }
  v38 = 0;
  v39 = 0;
  sub_100444BF0(a2, (_DWORD *)&v39 + 1, &v39, (_DWORD *)&v38 + 1, &v38);
  if (!sub_1004420E0(a2)
    || (v20 = (void *)objc_claimAutoreleasedReturnValue(+[CBProductInfo productInfoWithProductID:](CBProductInfo, "productInfoWithProductID:", HIDWORD(v38))), v21 = ((unsigned __int16)objc_msgSend(v20, "flags") & 0x800) == 0, v20, v21))
  {
    v23 = qword_1009997D0;
    if (!os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)__p = 67109888;
    *(_DWORD *)&__p[4] = HIDWORD(v39);
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = v39;
    *(_WORD *)v45 = 1024;
    *(_DWORD *)&v45[2] = HIDWORD(v38);
    LOWORD(v46[0]) = 1024;
    *(_DWORD *)((char *)v46 + 2) = v38;
    v16 = "No GAPA non-auth for vidSrc=%d, vid=0x%x, pid=0x%x, version=%d";
    v17 = v23;
    v18 = 26;
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v16, __p, v18);
    return;
  }
  v24 = sub_10027DF9C(v22, (_DWORD *)a2);
  if (((v24 ^ 1 | sub_100442118(a2, 42)) & 1) != 0)
  {
    v25 = 0;
  }
  else
  {
    v26 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, buf);
      v27 = v43 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = v27;
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)v45 = HIDWORD(v38);
      *(_WORD *)&v45[4] = 1024;
      v46[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Invalid device configuration \"%s\" pid=0x%x deviceInfoGAPA=%d", __p, 0x18u);
      if (v43 < 0)
        operator delete(*(void **)buf);
    }
    v25 = 1024;
  }
  v37 = 0;
  v36 = 0;
  v35 = 0;
  if (sub_1004466F4(a2, &v37, &v36, &v35))
  {
    v28 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 720))(v28))
    {
      v37 = 1494;
      goto LABEL_50;
    }
    if (v37 != 76)
    {
LABEL_50:
      v29 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v30 = v46[0] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v30;
        v41 = 1024;
        v42 = v37;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "GAPA detect for \"%s\" is mfgName=0x%x", buf, 0x12u);
        if (SHIBYTE(v46[0]) < 0)
          operator delete(*(void **)__p);
      }
      v25 |= 4u;
    }
  }
  v31 = sub_100065478();
  v33 = *(_DWORD *)(a2 + 128);
  v34 = *(_WORD *)(a2 + 132);
  (*(void (**)(uint64_t, int *, _QWORD, _QWORD))(*(_QWORD *)v31 + 368))(v31, &v33, 0, 0);
  *(_QWORD *)__p = a2 + 128;
  sub_1002A5310((uint64_t **)(a1 + 536), a2 + 128, (uint64_t)&unk_100740F58, (_DWORD **)__p)[31] = 1;
  v32 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v25;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "GAPA non-auth detect is complete flags=0x%x", __p, 8u);
  }
  if (v25)
    sub_10027E034(a1, a2, v25);
  if (qword_100977A68 != -1)
    dispatch_once(&qword_100977A68, &stru_100921C58);
  sub_100466A3C((uint64_t)off_100977A60, a2, 4102);
}

void sub_10027EA24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_10027EA3C(uint64_t a1, uint64_t a2)
{
  return sub_1002A547C(a1 + 536, a2 + 128) == 1;
}

uint64_t sub_10027EA60(uint64_t a1, _DWORD *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t result;
  _BYTE *v15;
  const char *v16;
  uint64_t v17;
  _BOOL4 v18;
  _BYTE *v19;
  NSObject *v20;
  uint32_t v21;
  uint64_t v22;
  _BOOL4 v23;
  const char *v24;
  _BOOL4 v25;
  NSObject *v26;
  uint32_t v27;
  _BOOL4 v28;
  _BYTE *v29;
  int v30;
  _BOOL4 v31;
  _BYTE *v32;
  void *v33;
  _BOOL4 v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  int v38;
  NSObject *v39;
  _BYTE *v40;
  uint64_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;
  char v48;
  _BYTE __p[14];
  _BYTE v50[6];
  _DWORD v51[5];

  if ((_os_feature_enabled_impl("BluetoothFeatures", "GAPA") & 1) == 0)
  {
    v17 = qword_1009997D0;
    v18 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v18)
      return result;
    sub_10043E5F8((uint64_t)a2, __p);
    if (v51[0] >= 0)
      v19 = __p;
    else
      v19 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v19;
    v16 = "GAPA auth disabled for \"%s\"";
    goto LABEL_18;
  }
  v8 = sub_100027F68();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 728))(v8) & 1) == 0)
  {
    v22 = qword_1009997D0;
    v23 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v23)
      return result;
    *(_WORD *)__p = 0;
    v24 = "GAPA auth is disabled by defaults write";
    goto LABEL_25;
  }
  v9 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 328))(v9) & 1) == 0)
  {
    v22 = qword_1009997D0;
    v25 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v25)
      return result;
    *(_WORD *)__p = 0;
    v24 = "GAPA auth is disabled for this OS";
    goto LABEL_25;
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) == 0)
  {
    v17 = qword_1009997D0;
    v28 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v28)
      return result;
    sub_10043E5F8((uint64_t)a2, __p);
    if (v51[0] >= 0)
      v29 = __p;
    else
      v29 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v29;
    v16 = "Device has not been unlocked (or device prefs not read yet) - disabling GAPA auth for %{public}s";
LABEL_18:
    v20 = v17;
    v21 = 12;
    goto LABEL_19;
  }
  v10 = sub_100447C64((uint64_t)a2);
  if (v10)
  {
    v11 = v10;
    v12 = qword_1009997D0;
    v13 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v13)
      return result;
    sub_10043E5F8((uint64_t)a2, __p);
    if (v51[0] >= 0)
      v15 = __p;
    else
      v15 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1024;
    v47 = v11;
    v16 = "Known GAPA result for \"%s\" cbGAPAFlags=0x%x auth not supported";
    goto LABEL_40;
  }
  v30 = *(_DWORD *)(a3 + 600);
  if (!v30)
  {
    v43 = 0;
    v44 = 0;
    sub_100444BF0((uint64_t)a2, (_DWORD *)&v44 + 1, &v44, (_DWORD *)&v43 + 1, &v43);
    if (!sub_1004420E0((uint64_t)a2)
      || (v33 = (void *)objc_claimAutoreleasedReturnValue(+[CBProductInfo productInfoWithProductID:](CBProductInfo, "productInfoWithProductID:", HIDWORD(v43))), v34 = ((unsigned __int16)objc_msgSend(v33, "flags") & 0x800) == 0, v33, v34))
    {
      v35 = qword_1009997D0;
      v36 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (!v36)
        return result;
      *(_DWORD *)__p = 67109888;
      *(_DWORD *)&__p[4] = HIDWORD(v44);
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = v44;
      *(_WORD *)v50 = 1024;
      *(_DWORD *)&v50[2] = HIDWORD(v43);
      LOWORD(v51[0]) = 1024;
      *(_DWORD *)((char *)v51 + 2) = v43;
      v24 = "No GAPA auth for vidSrc=%d, vid=0x%x, pid=0x%x, version=%d";
      v26 = v35;
      v27 = 26;
LABEL_26:
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v24, __p, v27);
      return 0;
    }
    v37 = sub_100442118((uint64_t)a2, 42);
    if ((v37 & 1) != 0)
    {
      v38 = sub_10027DF9C(v37, a2);
      result = 1;
      if (v38 && (a4 & 1) == 0)
      {
        v39 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8((uint64_t)a2, buf);
          v40 = v48 >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)__p = 136315650;
          *(_QWORD *)&__p[4] = v40;
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)v50 = HIDWORD(v43);
          *(_WORD *)&v50[4] = 1024;
          v51[0] = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Invalid device configuration \"%s\" pid=0x%x isCertificateSupported=%d", __p, 0x18u);
          if (v48 < 0)
            operator delete(*(void **)buf);
        }
        v41 = sub_100027F68();
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 760))(v41) & 1) != 0)
          return 1;
        sub_10027E034(a1, (uint64_t)a2, 0x100u);
        return 0;
      }
      return result;
    }
    v22 = qword_1009997D0;
    v42 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v42)
      return result;
    *(_WORD *)__p = 0;
    v24 = "Accessory device does not support GAPA auth not supported";
LABEL_25:
    v26 = v22;
    v27 = 2;
    goto LABEL_26;
  }
  v12 = qword_1009997D0;
  v31 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v31)
  {
    sub_10043E5F8((uint64_t)a2, __p);
    if (v51[0] >= 0)
      v32 = __p;
    else
      v32 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v32;
    v46 = 1024;
    v47 = v30;
    v16 = "Invalid GAPA state for \"%s\" authState=%d auth not supported";
LABEL_40:
    v20 = v12;
    v21 = 18;
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v16, buf, v21);
    if (SHIBYTE(v51[0]) < 0)
      operator delete(*(void **)__p);
    return 0;
  }
  return result;
}

void sub_10027EFCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10027EFE4(uint64_t a1, uint64_t a2)
{
  _QWORD v4[6];

  if (*(_BYTE *)(a1 + 328))
  {
    if (qword_10097AB28 != -1)
      dispatch_once(&qword_10097AB28, &stru_100921CB8);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10027F07C;
    v4[3] = &unk_100918090;
    v4[4] = a1;
    v4[5] = a2;
    sub_10048D538((uint64_t)off_10097AB20, v4);
  }
}

void sub_10027F07C(uint64_t a1)
{
  sub_10027E3F4(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_10027F088(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  _QWORD **i;
  _QWORD *v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  const char *v25;
  int v26;
  NSObject *v28;
  _BOOL8 v30;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  void *__p[2];
  char v39;
  _QWORD v40[2];
  uint8_t buf[4];
  void **v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  const char *v46;

  if (!*(_BYTE *)(a1 + 328))
    return 111;
  if (!a2)
    return 8;
  v40[0] = 0;
  v40[1] = 0;
  sub_10003415C((uint64_t)v40, a1 + 360);
  for (i = *(_QWORD ***)(a1 + 336); i != *(_QWORD ***)(a1 + 344); ++i)
  {
    v11 = *i;
    if (**i == a2)
    {
      v13 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(a2, __p);
        v14 = v39;
        v15 = (void **)__p[0];
        v23 = sub_10025304C(a3, v16, v17, v18, v19, v20, v21, v22);
        v24 = __p;
        if (v14 < 0)
          v24 = v15;
        if ((a4 - 1) > 2)
          v25 = "Unknown";
        else
          v25 = off_100922028[a4 - 1];
        *(_DWORD *)buf = 136446722;
        v42 = v24;
        v43 = 2080;
        v44 = v23;
        v45 = 2082;
        v46 = v25;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "setDeviceStateOnPeerSrc: device %{public}s, peer source \"%s\", device state %{public}s", buf, 0x20u);
        if (v39 < 0)
          operator delete(__p[0]);
      }
      if ((a5 & 1) == 0)
      {
        v26 = sub_10027F3E0(a1, a2) ^ 1;
        if (a4 != 3)
          LOBYTE(v26) = 1;
        if ((v26 & 1) == 0
          && *(_DWORD *)a3 == dword_10097AAF8
          && *(unsigned __int16 *)(a3 + 4) == (unsigned __int16)word_10097AAFC)
        {
          v28 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "setDeviceStateOnPeerSrc: Triangle recovery begun; starting easy pairing agent first",
              buf,
              2u);
          }
          *((_BYTE *)v11 + 728) = 1;
          sub_10027F448(a1, v11);
        }
      }
      if (*(_DWORD *)a3 != dword_10097AAF8 || *(unsigned __int16 *)(a3 + 4) != (unsigned __int16)word_10097AAFC)
      {
        v36 = *(_DWORD *)a3;
        v37 = *(_WORD *)(a3 + 4);
        sub_10027F5A4((uint64_t)v11, (unsigned __int8 *)&v36, a4);
        LOWORD(v42) = 0;
        *(_DWORD *)buf = 0;
        if (qword_100977A58 != -1)
          dispatch_once(&qword_100977A58, &stru_100921B78);
        sub_1004A3424((uint64_t)off_100977A50, (uint64_t)buf);
        v34 = *(_DWORD *)buf;
        v35 = (__int16)v42;
        v32 = *(_DWORD *)a3;
        v33 = *(_WORD *)(a3 + 4);
        sub_10027F6BC((uint64_t)v11, (uint64_t)&v34, (uint64_t)&v32);
        v30 = sub_10027F8E0((uint64_t)v11);
        sub_10027F83C(v30, a2, v30);
      }
      v12 = 0;
      goto LABEL_40;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D6FAC();
  v12 = 312;
LABEL_40:
  sub_100034234((uint64_t)v40);
  return v12;
}

void sub_10027F3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
    operator delete(__p);
  sub_100034234((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_10027F3E0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;

  if (!*(_BYTE *)(a1 + 430))
    return 0;
  if (*(_BYTE *)(a1 + 424))
  {
    v2 = 0;
    if (!a2)
      return 0;
  }
  else
  {
    v3 = 0;
    do
    {
      v4 = v3;
      if (v3 == 5)
        break;
      ++v3;
    }
    while (!*(_BYTE *)(a1 + 425 + v4));
    v2 = v4 > 4;
    if (!a2)
      return 0;
  }
  if (v2 || *(_BYTE *)(a2 + 952))
    return 0;
  return sub_100442118(a2, 12);
}

void sub_10027F448(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  void **v7;
  NSObject *v8;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;

  sub_10029B264(a2);
  v4 = *a2;
  if ((sub_10027F3E0(a1, *a2) & 1) != 0)
  {
    v5 = a2[6];
    if (v5)
    {
      v6 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v4, __p);
        if (v10 >= 0)
          v7 = __p;
        else
          v7 = (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        v12 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "startEasyPairAgent: starting easy pair agent for %{public}s", buf, 0xCu);
        if (v10 < 0)
          operator delete(__p[0]);
      }
      sub_10026DA6C(v5);
    }
  }
  else
  {
    v8 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "startEasyPairAgent: Cannot use magnet link", (uint8_t *)__p, 2u);
    }
  }
}

char *sub_10027F5A4(uint64_t a1, unsigned __int8 *a2, int a3)
{
  NSObject *v6;
  void **v7;
  char *result;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;
  __int16 v13;
  int v14;

  v6 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10046E9BC(a2, __p);
    if (v10 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v12 = v7;
    v13 = 1024;
    v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "fSrcConnMap Setting %{public}s to %d", buf, 0x12u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  __p[0] = a2;
  result = sub_1002A5310((uint64_t **)(a1 + 704), (uint64_t)a2, (uint64_t)&unk_100740F58, (_DWORD **)__p);
  result[31] = a3;
  return result;
}

void sub_10027F6BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  BOOL v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const char *v27;
  int v28;
  __int16 v29;
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  const char *v35;

  v29 = 0;
  v28 = 0;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  sub_1004A3424((uint64_t)off_100977A50, (uint64_t)&v28);
  v6 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 609) = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 605) = v6;
  LOWORD(v6) = *(_WORD *)(a3 + 4);
  *(_DWORD *)(a1 + 611) = *(_DWORD *)a3;
  *(_WORD *)(a1 + 615) = v6;
  v8 = v28 != *(_DWORD *)a3 || v29 != *(_WORD *)(a3 + 4);
  *(_BYTE *)(a1 + 617) = v8;
  v9 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    v17 = sub_10025304C(a2, v10, v11, v12, v13, v14, v15, v16);
    v25 = sub_10025304C(a3, v18, v19, v20, v21, v22, v23, v24);
    v26 = *(unsigned __int8 *)(a1 + 617);
    *(_DWORD *)buf = 136446722;
    v31 = v17;
    if (v26)
      v27 = "Yes";
    else
      v27 = "No";
    v32 = 2082;
    v33 = v25;
    v34 = 2080;
    v35 = v27;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Set source addresses in TiPi, primaryAddr \"%{public}s\", tipiAddr \"%{public}s\", is_primary = \"%s\" ", buf, 0x20u);
  }
}

uint64_t sub_10027F83C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  char v9;
  _QWORD v10[5];
  char v11;

  v5 = sub_100475960();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1002A1D40;
  v10[3] = &unk_100918888;
  v10[4] = a2;
  v11 = a3;
  sub_100041A34(v5, v10);
  v6 = sub_1004759E0();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002A1D94;
  v8[3] = &unk_100918888;
  v8[4] = a2;
  v9 = a3;
  sub_100041A34(v6, v8);
  return 0;
}

BOOL sub_10027F8E0(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int v5;
  __int16 v6;

  if (*(_BYTE *)(a1 + 617))
    v2 = (int *)(a1 + 611);
  else
    v2 = (int *)(a1 + 605);
  v5 = *v2;
  v6 = *((_WORD *)v2 + 2);
  v3 = sub_1002A4F7C(a1 + 704, (uint64_t)&v5);
  return a1 + 712 != v3 && *(_BYTE *)(v3 + 31) == 1;
}

uint64_t sub_10027F958(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 520);
}

uint64_t sub_10027F960(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  _BOOL8 v7;
  const char *v8;
  int v10;
  const char *v11;

  v6 = qword_1009997D0;
  v7 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    v8 = "Legacy Connection";
    if (a3)
      v8 = "TiPi Connection";
    v10 = 136446210;
    v11 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Notify Connection update: %{public}s", (uint8_t *)&v10, 0xCu);
  }
  sub_10027F83C(v7, a2, a3);
  *(_BYTE *)(a1 + 520) = a3;
  return 0;
}

uint64_t sub_10027FA3C(uint64_t a1, uint64_t a2)
{
  _QWORD **i;
  uint64_t v5;
  uint64_t v7;
  char v8;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  sub_10003415C((uint64_t)v9, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD ***)(a1 + 336); i != *(_QWORD ***)(a1 + 344); ++i)
    {
      if (**i == a2)
      {
        v8 = 0;
        sub_100043758(&v8);
        v7 = sub_1000E3624((unsigned __int8 *)(a2 + 128));
        sub_10004339C(&v8);
        if ((_DWORD)v7 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
          sub_1006D7004();
        if (qword_100977A58 != -1)
          dispatch_once(&qword_100977A58, &stru_100921B78);
        v5 = sub_1004A35C0((uint64_t)off_100977A50, v7, 10000);
        sub_100043728(&v8);
        goto LABEL_9;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D6FD8();
  v5 = 312;
LABEL_9:
  sub_100034234((uint64_t)v9);
  return v5;
}

void sub_10027FB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10027FB94(int a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  NSObject *v9;
  void **v10;
  unint64_t v11;
  __int128 v12;
  char *v13;
  void *__p[2];
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint8_t buf[4];
  void **v20;
  __int16 v21;
  int v22;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  sub_100472B98((uint64_t)off_1009778E0, a1, (void **)&v16);
  v4 = v16;
  v5 = v17;
  if (v16 != v17)
  {
    while (1)
    {
      v6 = *v4;
      if ((sub_100442118(*v4, 3) & 1) == 0)
      {
LABEL_24:
        v4 = v16;
        goto LABEL_25;
      }
      __p[0] = 0;
      __p[1] = 0;
      v15 = 0;
      sub_1004491B4(v6, 3u, __p);
      v7 = HIBYTE(v15);
      v8 = SHIBYTE(v15);
      if (v15 < 0)
        v7 = (unint64_t)__p[1];
      if (v7 >= 2)
        break;
      if (v15 < 0)
        goto LABEL_9;
LABEL_10:
      if (++v4 == v5)
        goto LABEL_24;
    }
    v9 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (void **)__p[0];
      if (v8 >= 0)
        v10 = __p;
      *(_DWORD *)buf = 136446466;
      v20 = v10;
      v21 = 1024;
      v22 = a1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "getCaseSerialNumbersForAppleProductId: Retrieved serial number %{public}s belonging to pId %u", buf, 0x12u);
    }
    v11 = *(_QWORD *)(a2 + 8);
    if (v11 >= *(_QWORD *)(a2 + 16))
    {
      v13 = sub_1002A553C((char **)a2, (__int128 *)__p);
    }
    else
    {
      if (SHIBYTE(v15) < 0)
      {
        sub_10003430C(*(_BYTE **)(a2 + 8), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        v12 = *(_OWORD *)__p;
        *(_QWORD *)(v11 + 16) = v15;
        *(_OWORD *)v11 = v12;
      }
      v13 = (char *)(v11 + 24);
      *(_QWORD *)(a2 + 8) = v11 + 24;
    }
    *(_QWORD *)(a2 + 8) = v13;
    if ((v15 & 0x8000000000000000) == 0)
      goto LABEL_10;
LABEL_9:
    operator delete(__p[0]);
    goto LABEL_10;
  }
LABEL_25:
  if (v4)
  {
    v17 = v4;
    operator delete(v4);
  }
}

void sub_10027FDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18)
{
  _QWORD *v18;
  uint64_t v19;

  v18[1] = v19;
  if (a16 < 0)
    operator delete(__p);
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  a17 = v18;
  sub_100091BF8((void ***)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_10027FE1C(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
    {
      if (**(_QWORD **)i == a2)
      {
        v5 = *(unsigned int *)(*(_QWORD *)i + 16);
        goto LABEL_8;
      }
    }
  }
  v5 = 3;
LABEL_8:
  sub_100034234((uint64_t)v7);
  return v5;
}

uint64_t sub_10027FE94(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  _BYTE *v5;
  int v6;
  int *v7;
  uint64_t v8;
  int v9;
  _BOOL4 v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  int v15;
  const char *v16;

  if (*a2)
  {
    if (*a2 != 1)
      goto LABEL_20;
    v4 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 384))(v4))
    {
      v5 = a2 + 5;
      if (a2[5] != 2)
      {
        v6 = *(_DWORD *)(a1 + 512);
        if (v6 == -1)
        {
          v7 = (int *)(a1 + 512);
          notify_register_check("com.apple.audioaccessoryd.MuteEducationalCard", v7);
          v6 = *v7;
        }
        notify_set_state(v6, 1uLL);
        notify_post("com.apple.audioaccessoryd.MuteEducationalCard");
        goto LABEL_13;
      }
    }
    else
    {
      v8 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 424))(v8))
      {
        v5 = a2 + 5;
        if (a2[5] != 2)
        {
LABEL_13:
          *v5 = 2;
          v9 = 1;
LABEL_14:
          if (a2[6])
            v10 = a2[4] == 0;
          else
            v10 = 1;
          if (v10 | v9)
          {
            a2[6] = 2;
            a2[4] = 3;
            goto LABEL_19;
          }
          goto LABEL_20;
        }
      }
    }
    v9 = 0;
    goto LABEL_14;
  }
  if (!a2[2])
  {
    a2[2] = 2;
LABEL_19:
    v11 = 1;
    goto LABEL_21;
  }
LABEL_20:
  v11 = 0;
LABEL_21:
  v12 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    v13 = "No";
    if ((_DWORD)v11)
      v13 = "Yes";
    v15 = 136315138;
    v16 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Call Management: shouldSendDefault %s", (uint8_t *)&v15, 0xCu);
  }
  return v11;
}

void sub_100280058(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  void **v13;
  void *__p[2];
  char v15;
  _DWORD v16[2];
  uint8_t buf[4];
  void **v18;

  *(_DWORD *)((char *)v16 + 3) = 0;
  v16[0] = 0;
  if ((a4 & 0xF) == 1)
  {
    LOBYTE(v16[0]) = 1;
    HIBYTE(v16[0]) = a4 >> 4;
    LOBYTE(v16[1]) = BYTE1(a4) & 0xF;
    BYTE1(v16[1]) = (unsigned __int16)a4 >> 12;
    BYTE2(v16[1]) = BYTE2(a4) & 0xF;
  }
  else if ((a4 & 0xF) == 0)
  {
    LOBYTE(v16[0]) = 0;
    BYTE1(v16[0]) = a4 >> 4;
    BYTE2(v16[0]) = BYTE1(a4) & 0xF;
    HIBYTE(v16[0]) = a4 >> 4;
    LOBYTE(v16[1]) = BYTE1(a4) & 0xF;
  }
  if (sub_10027FE94(a1, v16))
  {
    v7 = v16[0] | ((unint64_t)(LOWORD(v16[1]) | (BYTE2(v16[1]) << 16)) << 32);
    v8 = (v16[0] >> 20) & 0xF0 | (v7 >> 24) & 0xF00 | (v7 >> 28) & 0xF000 | (LOWORD(v16[1]) | (BYTE2(v16[1]) << 16)) & 0xF0000 | 1;
    v9 = (v16[0] >> 4) & 0xF0 | (v16[0] >> 8) & 0xF00;
    if (LOBYTE(v16[0]))
      v9 = 0;
    if (LOBYTE(v16[0]) == 1)
      v10 = v8;
    else
      v10 = v9;
    v11 = sub_100279E6C(a1, a2, 36, v10, 2u);
    v12 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10027B480(a1, a3, v10, __p);
      v13 = v15 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v18 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Call Management: sending default %{public}s", buf, 0xCu);
      if (v15 < 0)
        operator delete(__p[0]);
    }
    if (v11 == 1 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D7064();
  }
}

uint64_t sub_10028026C(uint64_t a1)
{
  int v2;
  int *v3;

  v2 = *(_DWORD *)(a1 + 508);
  if (v2 == -1)
  {
    v3 = (int *)(a1 + 508);
    notify_register_check("com.apple.audioaccessoryd.MuteState", (int *)(a1 + 508));
    v2 = *v3;
  }
  notify_set_state(v2, 1uLL);
  return notify_post("com.apple.audioaccessoryd.MuteState");
}

uint64_t sub_1002802BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  sub_10044DD14(a2, a3);
  v6 = sub_100481CB4(a1);
  if ((_DWORD)v6)
  {
    v6 = sub_100279E6C(a1, a2, 13, a3, 2u);
    v7 = v6;
  }
  else
  {
    v7 = 1;
  }
  sub_100280330(v6, a2);
  return v7;
}

void sub_100280330(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;

  v3 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(a2, (uint64_t)__p);
    if (v10 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Notify listen mode change for device \"%s\"", buf, 0xCu);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  v5 = sub_100475960();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10029AF14;
  v8[3] = &unk_100917378;
  v8[4] = a2;
  sub_100041A34(v5, v8);
  v6 = sub_1004759E0();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10029AF78;
  v7[3] = &unk_100917378;
  v7[4] = a2;
  sub_100041A34(v6, v7);
}

void sub_100280470(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  const char *v7;
  _BYTE *v8;
  const char *v9;
  NSObject *v10;
  char *v11;
  _BYTE *v12;
  unsigned __int8 v13;
  _BYTE __p[12];
  __int16 v15;
  _BYTE *v16;
  char v17;
  _BYTE buf[12];
  __int16 v19;
  _BYTE *v20;
  __int16 v21;
  const char *v22;

  v3 = sub_1002806C8(a1, a2);
  v13 = v3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
  {
    v4 = sub_10034D650();
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v4 + 864))(v4, a2, &v13);
    sub_10044DB70(a2, v13, v5 != 0);
    v6 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      if (v13)
        v7 = "enabled";
      else
        v7 = "disabled";
      sub_10043E5F8(a2, __p);
      if (v17 >= 0)
        v8 = __p;
      else
        v8 = *(_BYTE **)__p;
      v9 = "Success";
      *(_DWORD *)buf = 136315650;
      if (v5)
        v9 = "Error";
      *(_QWORD *)&buf[4] = v7;
      v19 = 2082;
      v20 = v8;
      v21 = 2080;
      v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Device unlocked, initializing IED enable to %s for device %{public}s with read %s", buf, 0x20u);
      if (v17 < 0)
        operator delete(*(void **)__p);
    }
  }
  else
  {
    v10 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      v11 = v3 ? "enabled" : "disabled";
      sub_10043E5F8(a2, buf);
      v12 = v21 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = v11;
      v15 = 2082;
      v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device not unlocked yet (or device prefs not read yet), initializing IED enable to %s for device %{public}s", __p, 0x16u);
      if (SHIBYTE(v21) < 0)
        operator delete(*(void **)buf);
    }
    sub_10044DB70(a2, v3, 0);
  }
}

uint64_t sub_1002806C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void **v5;
  const char *v6;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  void **v11;
  __int16 v12;
  const char *v13;

  if (!a2)
    return 0;
  v3 = 1;
  if ((sub_100442118(a2, 1) & 1) == 0)
    v3 = sub_100442118(a2, 15);
  v4 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_INFO))
  {
    sub_10043E5F8(a2, __p);
    v5 = (void **)__p[0];
    v6 = "false";
    if (v9 >= 0)
      v5 = __p;
    if ((_DWORD)v3)
      v6 = "true";
    *(_DWORD *)buf = 136446466;
    v11 = v5;
    v12 = 2082;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "In Ear detection support state for %{public}s is %{public}s", buf, 0x16u);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  return v3;
}

uint64_t sub_1002807F8(uint64_t a1, uint64_t a2)
{
  _QWORD **i;
  uint64_t v5;
  unsigned int v7;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD ***)(a1 + 336); i != *(_QWORD ***)(a1 + 344); ++i)
    {
      if (**i == a2)
      {
        v7 = 0;
        sub_100280470(a1, a2);
        v5 = sub_10034D650();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)v5 + 848))(v5, a2, &v7))
          sub_100279E6C(a1, a2, 12, v7, 1u);
        return sub_100034234((uint64_t)v8);
      }
    }
  }
  return sub_100034234((uint64_t)v8);
}

void sub_1002808A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002808BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v9;
  _QWORD v11[3];
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
    {
      if (**(_QWORD **)i == a2)
      {
        v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)i + 768) + 80))(*(_QWORD *)(*(_QWORD *)i + 768), a2, a3, a4);
        goto LABEL_9;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, v11);
    sub_1006D680C();
  }
  v9 = 312;
LABEL_9:
  sub_100034234((uint64_t)v12);
  return v9;
}

void sub_1002809C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002809E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  uint64_t v7;
  _QWORD v9[3];
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
    {
      if (**(_QWORD **)i == a2)
      {
        v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)i + 768) + 160))(*(_QWORD *)(*(_QWORD *)i + 768), a2, a3);
        goto LABEL_9;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, v9);
    sub_1006D680C();
  }
  v7 = 312;
LABEL_9:
  sub_100034234((uint64_t)v10);
  return v7;
}

void sub_100280AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100280B04(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
    {
      if (**(_QWORD **)i == a2)
      {
        v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)i + 768) + 168))(*(_QWORD *)(*(_QWORD *)i + 768), a2);
        goto LABEL_9;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(a2, v7);
    sub_1006D680C();
  }
  v5 = 312;
LABEL_9:
  sub_100034234((uint64_t)v8);
  return v5;
}

void sub_100280BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100280C14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  char v15;
  uint8_t buf[4];
  int v17;

  v15 = 0;
  v4 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 352))(v4))
  {
    v5 = 1;
LABEL_17:
    v15 = v5;
    goto LABEL_18;
  }
  v6 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 360))(v6))
  {
    v5 = 2;
    goto LABEL_17;
  }
  v7 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 368))(v7))
  {
    v5 = 3;
    goto LABEL_17;
  }
  v8 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 384))(v8))
  {
    v5 = 16;
    goto LABEL_17;
  }
  v9 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 376))(v9))
  {
    v5 = 32;
    goto LABEL_17;
  }
  v10 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 336))(v10))
  {
    v5 = 48;
    goto LABEL_17;
  }
  v11 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 400))(v11))
  {
    v5 = 49;
    goto LABEL_17;
  }
  v12 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 424))(v12))
  {
    v5 = 64;
    goto LABEL_17;
  }
  v5 = 0;
LABEL_18:
  v13 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "sendSourceType %d", buf, 8u);
  }
  return sub_1002796C4(a1, a2, 2, 1, (uint64_t)&v15);
}

uint64_t sub_100280DC4(uint64_t result, uint64_t a2)
{
  _QWORD v2[5];
  char v3;

  v3 = 0;
  memset(&v2[2], 0, 24);
  if (a2)
  {
    v2[0] = 0;
    v2[1] = 0;
    sub_10003415C((uint64_t)v2, result + 360);
    sub_100281810();
  }
  return result;
}

void sub_100281770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_100043728(&a13);
  sub_100034234((uint64_t)&a19);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100281810()
{
  operator new();
}

void sub_10028195C()
{
  operator delete();
}

BOOL sub_100281980(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  NSObject *v4;
  _BOOL8 result;
  int v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  int v14;

  if (a2)
  {
    v9 = 0;
    v10 = 0;
    sub_100444BF0(a2, (_DWORD *)&v10 + 1, &v10, (_DWORD *)&v9 + 1, &v9);
    v2 = HIDWORD(v9);
    v3 = HIDWORD(v9) == 8194 || HIDWORD(v9) == 8207;
    if (v3
      || (v6 = v9, HIDWORD(v9) == 8195) && v9 > 0x767
      || HIDWORD(v9) == 8197 && v9 > 0x76F
      || HIDWORD(v9) == 8198 && v9 > 0x768
      || HIDWORD(v9) == 8201 && v9 >= 0x240)
    {
      v4 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        v12 = v2;
        v13 = 1024;
        v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "AACP Config Jitter Buffer is supported. pid: %x, version: %x", buf, 0xEu);
      }
      return 1;
    }
    else
    {
      v7 = qword_1009997D0;
      v8 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v8)
      {
        *(_DWORD *)buf = 67109376;
        v12 = v2;
        v13 = 1024;
        v14 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "AACP Config Jitter Buffer is NOT supported. pid: %x, version: %x", buf, 0xEu);
        return 0;
      }
    }
  }
  else
  {
    result = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006D70DC();
      return 0;
    }
  }
  return result;
}

uint64_t sub_100281B5C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _QWORD **i;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  _BYTE *v24;
  int v25;
  _BYTE *v26;
  const char *v27;
  NSObject *v28;
  _BYTE *v29;
  int v30;
  int v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  NSObject *v40;
  _BYTE *v41;
  NSObject *v42;
  uint32_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  void *v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  NSObject *v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  NSObject *v64;
  _BYTE *v65;
  _QWORD *v66;
  uint64_t v67;
  NSObject *v68;
  const char *v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  NSObject *v77;
  _BOOL8 v78;
  const char *v79;
  uint64_t v80;
  _QWORD handler[6];
  _QWORD v82[2];
  _BYTE buf[12];
  __int16 v84;
  const char *v85;
  char v86;
  _BYTE __p[22];
  __int16 v88;
  int v89;

  v82[0] = 0;
  v82[1] = 0;
  sub_10003415C((uint64_t)v82, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD ***)(a1 + 336); ; ++i)
    {
      if (i == *(_QWORD ***)(a1 + 344))
        goto LABEL_6;
      v9 = *i;
      if (**i == a2)
        break;
    }
    if (a4)
    {
      v10 = sub_10044F5D0(a2);
      v11 = sub_100279E6C(a1, a2, 1, v10, 1u);
      if (sub_1002806C8(v11, a2) && *((_DWORD *)v9 + 20) != 8208)
      {
        if (sub_10044F614(a2))
          v12 = 2;
        else
          v12 = 1;
        sub_100279E6C(a1, a2, 10, v12, 1u);
      }
      v13 = sub_10044FD68(a2);
      sub_100279E6C(a1, a2, 6, v13, 1u);
      if (sub_100442118(a2, 29) && (sub_100442118(a2, 43) & 1) == 0)
      {
        v14 = sub_10044F8E4(a2);
        sub_100279E6C(a1, a2, 23, v14, 1u);
      }
      if (sub_100442118(a2, 30))
      {
        if ((sub_100442118(a2, 38) & 1) == 0)
        {
          v15 = sub_10044F8A0(a2);
          sub_100279E6C(a1, a2, 22, v15, 1u);
          if ((sub_100442118(a2, 43) & 1) == 0)
          {
            v16 = sub_10044F928(a2);
            sub_100279E6C(a1, a2, 24, v16, 1u);
          }
        }
      }
      if (sub_100442118(a2, 28))
      {
        v17 = sub_10044F74C(a2);
        sub_100279E6C(a1, a2, 26, v17, 1u);
      }
      if (sub_10044FF54(a2, 0x15u) == 1 && sub_10044FD24(a2))
      {
        v18 = sub_10044FD24(a2);
        sub_100279E6C(a1, a2, 50, v18, 1u);
      }
    }
    if (sub_100442118(a2, 16) && sub_100442118(a2, 1) && (sub_100442118(a2, 43) & 1) == 0)
    {
      if (a4)
      {
        v20 = sub_10044F96C(a2);
        sub_100279E6C(a1, a2, 27, v20, 1u);
      }
    }
    else if (sub_100442118(a2, 16) && sub_100442118(a2, 15))
    {
      v19 = sub_10044E34C(a2, 1);
      sub_10027B12C(v19, a2);
    }
    if (sub_100442118(a2, 32) && !sub_10044F658(a2))
    {
      if (a4)
      {
        v28 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(a2, buf);
          if (v86 >= 0)
            v29 = buf;
          else
            v29 = *(_BYTE **)buf;
          v30 = sub_100442118(a2, 32);
          v31 = sub_10044F658(a2);
          v32 = "No";
          *(_DWORD *)__p = 136446722;
          *(_QWORD *)&__p[4] = v29;
          if (v30)
            v32 = "Yes";
          *(_WORD *)&__p[12] = 2080;
          *(_QWORD *)&__p[14] = v32;
          v88 = 1024;
          v89 = v31;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%{public}s Initialize setSmartRouteMode via connection Tipi Support = %s current SR Mode =%d", __p, 0x1Cu);
          if (v86 < 0)
            operator delete(*(void **)buf);
        }
        sub_10044D524(a2, 1);
      }
    }
    else if (sub_10044FE34(a2, 64))
    {
      v21 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 792))(v21, 1))
      {
        if (!sub_10044F6C4(a2))
        {
          v22 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(a2, __p);
            v23 = SHIBYTE(v88);
            v24 = *(_BYTE **)__p;
            v25 = sub_10044FE34(a2, 64);
            v26 = __p;
            v27 = "No";
            if (v23 < 0)
              v26 = v24;
            if (v25)
              v27 = "Yes";
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = v26;
            v84 = 2080;
            v85 = v27;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%{public}s Initialize Spatial Audio via connection Spatial support = %s", buf, 0x16u);
            if (SHIBYTE(v88) < 0)
              operator delete(*(void **)__p);
          }
          sub_10044D9DC(a2, 1);
        }
      }
    }
    v33 = sub_10003BE44();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 328))(v33) & 1) != 0
      || (v34 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 384))(v34) & 1) != 0)
      || (v35 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 424))(v35)))
    {
      if (sub_100442118(a2, 14))
      {
        if (qword_1009778E8 != -1)
          dispatch_once(&qword_1009778E8, &stru_100921C78);
        if ((sub_100471484((uint64_t)off_1009778E0) & 1) != 0)
        {
          v36 = sub_1004459D0(a2);
          v37 = sub_100442118(a2, 22);
          v38 = sub_100282EAC(v37, a2, v36, v37);
          if (v36 != (_DWORD)v38)
            sub_100445A14(a2, v38);
          sub_100279E6C(a1, a2, 12, v38, 1u);
          v39 = *((_DWORD *)v9 + 20);
          if (v39 == 8208)
          {
            if (!sub_10044F9F4(a2))
            {
              sub_10044E400(a2, 1);
              sub_100279E6C(a1, a2, 30, 1, 1u);
            }
            v39 = *((_DWORD *)v9 + 20);
          }
          if ((v39 == 8202 || (sub_10044FE34(a2, 32) & 1) != 0 || *((_DWORD *)v9 + 20) == 8223)
            && !sub_10044F9B0(a2))
          {
            sub_10044E3BC(a2, 1);
            sub_100279E6C(a1, a2, 28, 1, 1u);
          }
        }
        else
        {
          v40 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(a2, __p);
            v41 = v88 >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = v41;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Device has not been unlocked (or device prefs not read yet) - disabling double tap on %{public}s", buf, 0xCu);
            if (SHIBYTE(v88) < 0)
              operator delete(*(void **)__p);
          }
          sub_100279E6C(a1, a2, 12, 0, 1u);
          *(_DWORD *)__p = 0;
          v42 = *(NSObject **)(sub_10006BBEC() + 8);
          handler[0] = _NSConcreteStackBlock;
          handler[1] = 3221225472;
          handler[2] = sub_100282D80;
          handler[3] = &unk_1009210B8;
          handler[4] = a1;
          handler[5] = a2;
          v43 = notify_register_dispatch("com.apple.mobile.keybagd.first_unlock", (int *)__p, v42, handler);
          v44 = qword_1009997D0;
          if (v43)
          {
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
              sub_1006D7134();
          }
          else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Successfully registered for MKB first unlock notification", buf, 2u);
          }
        }
        sub_10027958C(a1, a2, 32, 0, 0);
      }
    }
    if (a4)
    {
      if (sub_100442118(a2, 32))
      {
        v45 = sub_10044F658(a2);
        if ((_DWORD)v45)
          sub_100279E6C(a1, a2, 32, v45, 1u);
      }
    }
    v46 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46))
    {
      v47 = *((_DWORD *)v9 + 20) - 8194;
      if (v47 > 0xE || ((1 << v47) & 0x409B) == 0)
      {
        v73 = sub_100027F68();
        v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 832))(v73);
        sub_100279E6C(a1, a2, 34, v74, 1u);
      }
    }
    v48 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48))
    {
      v49 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v49 + 328))(v49))
      {
        v50 = *((_DWORD *)v9 + 20) - 8212;
        if (v50 <= 0x10 && ((1 << v50) & 0x116A1) != 0)
        {
          LOBYTE(v80) = 0;
          v51 = sub_100027F68();
          sub_100091AE8(__p, "A2DP");
          sub_100091AE8(buf, "AdaptiveEQEnable");
          (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t *))(*(_QWORD *)v51 + 72))(v51, __p, buf, &v80);
          if (v86 < 0)
            operator delete(*(void **)buf);
          if (SHIBYTE(v88) < 0)
            operator delete(*(void **)__p);
          v52 = v80;
          v53 = malloc_type_malloc(0x10uLL, 0xCC5E79CAuLL);
          v54 = v53;
          v55 = 0.0;
          if (v52)
            v55 = 1.0;
          *v53 = 514;
          *((_DWORD *)v53 + 2) = 1677721850;
          *((float *)v53 + 3) = v55;
          sub_10027958C(a1, a2, 1, 16, (uint64_t)v53);
          free(v54);
        }
      }
    }
    v56 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56))
    {
      v57 = sub_10003BE44();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v57 + 328))(v57))
      {
        v58 = *((_DWORD *)v9 + 20) - 8217;
        if (v58 <= 7 && ((1 << v58) & 0xA5) != 0)
        {
          LOBYTE(v80) = 0;
          v59 = sub_100027F68();
          sub_100091AE8(__p, "AutomaticIEDKey");
          sub_100091AE8(buf, "DefaultAutoIEDOff");
          (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t *))(*(_QWORD *)v59 + 72))(v59, __p, buf, &v80);
          if (v86 < 0)
            operator delete(*(void **)buf);
          if (SHIBYTE(v88) < 0)
            operator delete(*(void **)__p);
          v60 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__p = 67109120;
            *(_DWORD *)&__p[4] = v80;
            _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "internalSetupAACP: Defaults write value to set Automatic Ear Detection off upon every connection = %d", __p, 8u);
          }
          if ((_BYTE)v80)
            sub_10044DB70(a2, 0, 1);
        }
      }
    }
    v61 = *((_DWORD *)v9 + 20) - 8212;
    if (v61 <= 0x10 && ((1 << v61) & 0x116A1) != 0)
    {
      if (a3)
      {
        LOBYTE(v80) = 0;
        memset((char *)&v80 + 1, 255, 7);
        v62 = sub_10034FE84();
        (*(void (**)(uint64_t, _QWORD, uint64_t *, _QWORD))(*(_QWORD *)v62 + 16))(v62, *(_QWORD *)(a1 + 440), &v80, *((unsigned int *)v9 + 20));
        v63 = sub_100278B44(a1, a2, (uint64_t)&v80);
        if (v63)
        {
          v64 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
          {
            v75 = *(_QWORD *)(a1 + 440);
            sub_10043E5F8(a2, buf);
            v76 = v86 >= 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)__p = 138412802;
            *(_QWORD *)&__p[4] = v75;
            *(_WORD *)&__p[12] = 2082;
            *(_QWORD *)&__p[14] = v76;
            v88 = 1024;
            v89 = v63;
            _os_log_error_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "Failed to set country codes for country %@ for device %{public}s with result %u", __p, 0x1Cu);
            if (v86 < 0)
              operator delete(*(void **)buf);
          }
        }
      }
    }
    if (qword_100977A68 != -1)
      dispatch_once(&qword_100977A68, &stru_100921C58);
    v65 = off_100977A60;
    if (!sub_10045D35C()
      || !v65[240]
      || *(_BYTE *)(a2 + 980)
      || *(_BYTE *)(a2 + 981)
      || (sub_100447C64(a2) & 2) != 0)
    {
      goto LABEL_133;
    }
    if (qword_100977A68 != -1)
      dispatch_once(&qword_100977A68, &stru_100921C58);
    if ((sub_10045E940((uint64_t)off_100977A60, a2) & 1) != 0)
    {
LABEL_133:
      if (qword_100977A68 != -1)
        dispatch_once(&qword_100977A68, &stru_100921C58);
      if (!sub_10045D35C())
        goto LABEL_144;
      if (qword_100977A68 != -1)
        dispatch_once(&qword_100977A68, &stru_100921C58);
      if ((sub_10045E940((uint64_t)off_100977A60, a2) & 1) != 0)
        goto LABEL_144;
      *(_QWORD *)__p = 0;
      *(_QWORD *)&__p[8] = 0;
      buf[0] = 0;
      *(_DWORD *)&buf[1] = *(_DWORD *)(a2 + 128);
      *(_WORD *)&buf[5] = *(_WORD *)(a2 + 132);
      if (qword_1009778B8 != -1)
        dispatch_once(&qword_1009778B8, &stru_100921D38);
      if ((sub_1006A12D8(qword_1009778B0, buf, __p) & 1) != 0)
        goto LABEL_144;
      if (qword_1009778E8 == -1)
      {
LABEL_143:
        sub_10047200C((uint64_t)off_1009778E0, a2);
LABEL_144:
        if (qword_100977A68 != -1)
          dispatch_once(&qword_100977A68, &stru_100921C58);
        v66 = sub_10045E8B4((uint64_t)off_100977A60, a2);
        v67 = (uint64_t)v66;
        if (v66 && *((_BYTE *)v66 + 112) == 2)
        {
          v68 = qword_100999870;
          if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043F6EC(a2, (uint64_t)__p);
            v69 = v88 >= 0 ? __p : *(const char **)__p;
            *(_DWORD *)buf = 141558275;
            *(_QWORD *)&buf[4] = 1752392040;
            v84 = 2081;
            v85 = v69;
            _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Sending magic keys 'again' to device %{private, mask.hash}s", buf, 0x16u);
            if (SHIBYTE(v88) < 0)
              operator delete(*(void **)__p);
          }
          if (qword_100977A68 != -1)
            dispatch_once(&qword_100977A68, &stru_100921C58);
          sub_100460584((uint64_t)off_100977A60, v67);
          sub_1002830C8(v70, (unsigned __int8 *)a2);
        }
        if (qword_100977A68 != -1)
          dispatch_once(&qword_100977A68, &stru_100921C58);
        sub_10046B5D0((uint64_t)off_100977A60, a2);
        if (sub_10027F3E0(a1, a2))
        {
          sub_10027F448(a1, v9);
        }
        else
        {
          v71 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__p = 0;
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "internalSetupAACP: Conditions not met for easy pairing", __p, 2u);
          }
        }
        if (*(_BYTE *)(a1 + 520))
          *(_BYTE *)(a1 + 520) = 0;
        return sub_100034234((uint64_t)v82);
      }
    }
    else
    {
      v77 = qword_100999870;
      v78 = os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT);
      if (v78)
      {
        sub_10043F6EC(a2, (uint64_t)__p);
        v79 = v88 >= 0 ? __p : *(const char **)__p;
        *(_DWORD *)buf = 141558275;
        *(_QWORD *)&buf[4] = 1752392040;
        v84 = 2081;
        v85 = v79;
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "Sending magic keys and renaming device %{private, mask.hash}s", buf, 0x16u);
        if (SHIBYTE(v88) < 0)
          operator delete(*(void **)__p);
      }
      sub_1002830C8(v78, (unsigned __int8 *)a2);
      if (qword_1009778E8 == -1)
        goto LABEL_143;
    }
    dispatch_once(&qword_1009778E8, &stru_100921C78);
    goto LABEL_143;
  }
LABEL_6:
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D7108();
  return sub_100034234((uint64_t)v82);
}

void sub_100282B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_100034234((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100282C08(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];
  _QWORD v9[5];
  void *__p[2];
  char v11;
  uint8_t buf[4];
  void **v13;

  v3 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(a2, (uint64_t)__p);
    v4 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Notify in ear status change for device \"%s\"", buf, 0xCu);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  v5 = sub_100475960();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10029AE4C;
  v9[3] = &unk_100917378;
  v9[4] = a2;
  sub_100041A34(v5, v9);
  v6 = sub_1004759E0();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10029AEB0;
  v8[3] = &unk_100917378;
  v8[4] = a2;
  sub_100041A34(v6, v8);
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_100921C38);
  return sub_100421AA0((uint64_t)off_1009778D0, a2);
}

void sub_100282D80(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[6];
  uint8_t buf[4];
  int v8;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = MKBDeviceUnlockedSinceBoot();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received MKB first unlock notification. MKBDeviceUnlockedSinceBoot returns : %d", buf, 8u);
  }
  if (MKBDeviceUnlockedSinceBoot() != 1
    && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_FAULT))
  {
    sub_1006D7194();
  }
  v4 = sub_10006BBEC();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100282EA0;
  v6[3] = &unk_100918090;
  v5 = *(_QWORD *)(a1 + 40);
  v6[4] = v2;
  v6[5] = v5;
  sub_100475CEC(v4, 2000, v6);
}

uint64_t sub_100282EA0(uint64_t a1)
{
  return sub_1002807F8(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t sub_100282EAC(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int v6;
  NSObject *v8;
  void **v9;
  int v10;
  unsigned __int8 v11;
  NSObject *v12;
  const char *v13;
  int v14;
  NSObject *v15;
  const char *v16;
  void *__p;
  __int16 v19;
  const char *v20;
  char v21;
  uint8_t buf[4];
  void **v23;

  if (a4)
    LOBYTE(v6) = 3;
  else
    LOBYTE(v6) = 1;
  if (a3 == 0xFFFF)
  {
    v8 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(a2, &__p);
      v9 = v21 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136446210;
      v23 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Setting double tap for %{public}s for first time", buf, 0xCu);
      if (v21 < 0)
        operator delete(__p);
    }
    v10 = 255;
  }
  else
  {
    v10 = a3;
    v11 = a3;
    if (a3 < 5u)
      goto LABEL_17;
  }
  v12 = qword_1009997D0;
  v11 = v6;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    v13 = "Siri";
    if (a4)
      v13 = "Next Track";
    LODWORD(__p) = 67109378;
    HIDWORD(__p) = v10;
    v19 = 2082;
    v20 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Right double tap was %d, now %{public}s", (uint8_t *)&__p, 0x12u);
    v11 = v6;
  }
LABEL_17:
  v14 = BYTE1(a3);
  if (BYTE1(a3) < 5u)
  {
    v6 = a3 >> 8;
  }
  else
  {
    v15 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      v16 = "Siri";
      if (a4)
        v16 = "Next Track";
      LODWORD(__p) = 67109378;
      HIDWORD(__p) = v14;
      v19 = 2082;
      v20 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Left double tap was %d, now %{public}s", (uint8_t *)&__p, 0x12u);
    }
  }
  return v11 | (v6 << 8);
}

uint64_t sub_1002830C8(uint64_t a1, unsigned __int8 *a2)
{
  _OWORD *v3;
  _OWORD *v4;
  _OWORD *v5;
  void *v6;
  __objc2_class *v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  void **v11;
  int v12;
  void **v13;
  NSObject *v14;
  int v15;
  void **v16;
  int v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *__p[2];
  char v25;
  uint8_t buf[4];
  void **v27;
  __int16 v28;
  int v29;
  void *v30[2];
  void *v31[2];
  void *v32[2];
  uint64_t v33;
  void *v34;

  v31[0] = (void *)1048592;
  v32[0] = (void *)1052672;
  v30[0] = (void *)1048584;
  v3 = malloc_type_malloc(0x10uLL, 0x50325CBCuLL);
  v30[1] = v3;
  v4 = malloc_type_malloc(0x10uLL, 0x8008C188uLL);
  v31[1] = v4;
  v5 = malloc_type_malloc(0x10uLL, 0xFBECE67FuLL);
  v32[1] = v5;
  v33 = 401408;
  v6 = malloc_type_malloc(6uLL, 0x7A9FD17BuLL);
  v34 = v6;
  if (qword_100977A68 != -1)
    dispatch_once(&qword_100977A68, &stru_100921C58);
  v7 = &OBJC_METACLASS___BTVCLinkAdvertiseSet;
  if (sub_1004615D4((uint64_t)off_100977A60, (uint64_t)a2, v3, v4))
  {
    v8 = 0;
    goto LABEL_32;
  }
  v9 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8((uint64_t)a2, __p);
    v10 = v25;
    v11 = (void **)__p[0];
    v12 = sub_10043E93C(a2);
    v13 = __p;
    if (v10 < 0)
      v13 = v11;
    *(_DWORD *)buf = 136446466;
    v27 = v13;
    v28 = 1024;
    v29 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Updating magic keys to device %{public}s, paired %d", buf, 0x12u);
    if (v25 < 0)
      operator delete(__p[0]);
    v7 = &OBJC_METACLASS___BTVCLinkAdvertiseSet;
  }
  if (sub_10043E93C(a2) && sub_100442118((uint64_t)a2, 19))
  {
    if (qword_100977A68 != -1)
      dispatch_once(&qword_100977A68, &stru_100921C58);
    v8 = sub_1004619F4((uint64_t)off_100977A60, v5, (uint64_t)v6);
  }
  else
  {
    v8 = 1;
  }
  v14 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8((uint64_t)a2, __p);
    v15 = v25;
    v16 = (void **)__p[0];
    v17 = sub_10043E93C(a2);
    v18 = __p;
    if (v15 < 0)
      v18 = v16;
    *(_DWORD *)buf = 136446466;
    v27 = v18;
    v28 = 1024;
    v29 = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Get magic key from cloud for device %{public}s is %d", buf, 0x12u);
    if (v25 < 0)
    {
      operator delete(__p[0]);
      if ((_DWORD)v8)
        goto LABEL_22;
LABEL_26:
      v20 = 0;
      v21 = 0xF00000000;
      do
      {
        v22 = *((_BYTE *)v5 + v20);
        *((_BYTE *)v5 + v20) = *((_BYTE *)v5 + (v21 >> 32));
        *((_BYTE *)v5 + (v21 >> 32)) = v22;
        ++v20;
        v21 -= 0x100000000;
      }
      while (v20 != 8);
      if (qword_100977A88 != -1)
        dispatch_once(&qword_100977A88, &stru_100921C98);
      v8 = 0;
      v19 = 4;
      goto LABEL_31;
    }
  }
  if (!(_DWORD)v8)
    goto LABEL_26;
LABEL_22:
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  v19 = 2;
LABEL_31:
  sub_10027C2D4((uint64_t)v7[67].superclass, (uint64_t)a2, v19, (uint64_t)v30);
LABEL_32:
  free(v30[1]);
  free(v31[1]);
  free(v32[1]);
  free(v34);
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  sub_10027C3FC((uint64_t)v7[67].superclass, (uint64_t)a2, 5);
  return v8;
}

void sub_1002834A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002834CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  void **v5;
  const char *v6;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  void **v13;
  __int16 v14;
  const char *v15;

  if (!a2)
    return 0;
  v3 = sub_10044F614(a2);
  v4 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_INFO))
  {
    sub_10043E5F8(a2, __p);
    if (v9 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    v6 = "Disabled";
    v11 = "In Ear detection";
    *(_DWORD *)buf = 136446722;
    if ((_DWORD)v3)
      v6 = "Enabled";
    v12 = 2082;
    v13 = v5;
    v14 = 2082;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%{public}s for %{public}s is %{public}s", buf, 0x20u);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  return v3;
}

uint64_t sub_1002835F4(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  void **v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  const char *v22;
  const char *v23;
  void **v24;
  const char *v25;
  uint64_t v26;
  _QWORD v28[2];
  void *__p[2];
  char v30;
  uint8_t buf[4];
  void **v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  const char *v38;

  v28[0] = 0;
  v28[1] = 0;
  v8 = sub_10003415C((uint64_t)v28, a1 + 360);
  if (a2)
  {
    v9 = *(_QWORD **)(a1 + 336);
    v10 = *(_QWORD **)(a1 + 344);
    while (v9 != v10)
    {
      v11 = (_QWORD *)*v9;
      if (*(_QWORD *)*v9 == a2)
      {
        v14 = sub_100283838(v8, *((unsigned __int8 *)v11 + 8));
        *a3 = v14;
        *a4 = sub_100283838(v14, *((unsigned __int8 *)v11 + 9));
        v15 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_INFO))
        {
          sub_10043E5F8(a2, __p);
          v16 = v30;
          v17 = (void **)__p[0];
          v18 = *a3;
          v19 = *a4;
          v20 = sub_10044F614(a2);
          v21 = v20;
          v22 = sub_10028385C(v20, v19);
          v23 = sub_10028385C((uint64_t)v22, v18);
          v24 = __p;
          if (v16 < 0)
            v24 = v17;
          *(_DWORD *)buf = 136446978;
          v32 = v24;
          v25 = "yes";
          v33 = 2082;
          v34 = v23;
          if (!v21)
            v25 = "no";
          v35 = 2082;
          v36 = v22;
          v37 = 2080;
          v38 = v25;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "getInEarStatus: %{public}s primary %{public}s, secondary %{public}s, IED enabled: %s", buf, 0x2Au);
          if (v30 < 0)
            operator delete(__p[0]);
        }
        v26 = 0;
        goto LABEL_19;
      }
      ++v9;
    }
  }
  *a3 = 3;
  *a4 = 3;
  v12 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    if (a2)
    {
      sub_10043E5F8(a2, buf);
      sub_1006D720C();
    }
    else
    {
      sub_1006D71CC((uint64_t)__p, v12, v13);
    }
  }
  v26 = 312;
LABEL_19:
  sub_100034234((uint64_t)v28);
  return v26;
}

void sub_100283800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100283838(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xC)
    return 3;
  else
    return dword_10073D010[(char)a2];
}

const char *sub_10028385C(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xC)
    return "unknown";
  else
    return off_100922040[(char)a2];
}

uint64_t sub_100283884(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t i;
  uint64_t v7;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  void **v13;
  int v14;
  const char *v15;
  const char *v16;
  void *__p[2];
  char v18;
  _QWORD v19[2];
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  const char *v23;

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
    {
      if (**(_QWORD **)i == a2)
      {
        v9 = *(unsigned __int8 *)(*(_QWORD *)i + 10);
        if (v9 == 2)
          v10 = 2;
        else
          v10 = 3;
        if (v9 == 1)
          v11 = 1;
        else
          v11 = v10;
        *a3 = v11;
        v12 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_INFO))
        {
          sub_10043F6EC(a2, (uint64_t)__p);
          if (v18 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          v14 = *(unsigned __int8 *)a3;
          v15 = "unknown";
          if (v14 == 2)
            v15 = "right";
          if (v14 == 1)
            v16 = "left";
          else
            v16 = v15;
          *(_DWORD *)buf = 136315394;
          v21 = v13;
          v22 = 2082;
          v23 = v16;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "getPrimaryBudSide: primary bud side of \"%s\" is %{public}s", buf, 0x16u);
          if (v18 < 0)
            operator delete(__p[0]);
        }
        v7 = 0;
        goto LABEL_11;
      }
    }
    *a3 = 3;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a2, __p);
      sub_1006D7284();
    }
  }
  else
  {
    *a3 = 3;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D7258();
  }
  v7 = 312;
LABEL_11:
  sub_100034234((uint64_t)v19);
  return v7;
}

void sub_100283A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

const char *sub_100283A98(uint64_t a1, int a2)
{
  const char *v2;

  v2 = "unknown";
  if (a2 == 2)
    v2 = "right";
  if (a2 == 1)
    return "left";
  else
    return v2;
}

void sub_100283AC4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  void *v11;
  _BOOL4 v12;
  _BOOL4 v13;
  NSObject *v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  char v19;
  int v20;
  int *v21;
  NSObject *v22;
  const void *v23;
  char v24;
  _BYTE buf[12];
  __int16 v26;
  int v27;
  char v28;
  _BYTE __p[12];
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;

  v3 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100921CF8);
  v4 = sub_1000589DC((uint64_t)off_1009778C0, v3, 0);
  *(_BYTE *)(a1 + 424) = BYTE5(v4);
  *(_BYTE *)(a1 + 425) = BYTE4(v4);
  *(_BYTE *)(a1 + 426) = BYTE3(v4);
  *(_BYTE *)(a1 + 427) = BYTE2(v4);
  *(_BYTE *)(a1 + 428) = BYTE1(v4);
  *(_BYTE *)(a1 + 429) = v4;
  v24 = 0;
  sub_100043758(&v24);
  v5 = (unsigned __int8 *)(a1 + 432);
  v6 = sub_1000F2500(((unint64_t)*(unsigned __int8 *)(a1 + 424) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 425) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 426) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 427) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 428) << 8) | *(unsigned __int8 *)(a1 + 429), (_BYTE *)(a1 + 432));
  sub_10004339C(&v24);
  v7 = qword_1009997D0;
  if (v6 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "CL get version failed with status %d", __p, 8u);
    v7 = qword_1009997D0;
  }
  v8 = a1 + 424;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    sub_10046E9BC((unsigned __int8 *)(a1 + 424), __p);
    v9 = v33 >= 0 ? __p : *(_BYTE **)__p;
    v10 = *v5;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v9;
    v26 = 1024;
    v27 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Magnet link connected with device \"%s\" with version %d", buf, 0x12u);
    if (SHIBYTE(v33) < 0)
      operator delete(*(void **)__p);
  }
  v23 = 0;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100921D58);
  v11 = off_1009778A0;
  sub_100030BCC(__p, v3);
  v12 = sub_100623C54((uint64_t)v11, __p, &v23);
  if (v23)
    v13 = v12;
  else
    v13 = 0;
  if (!v13)
    goto LABEL_25;
  sub_10006D81C(&v24);
  v14 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10046E9BC((unsigned __int8 *)(a1 + 424), buf);
    v15 = v28 >= 0 ? buf : *(_BYTE **)buf;
    v16 = *v5;
    v17 = sub_1000F409C(v23);
    v18 = sub_1000F3FC8(v23);
    *(_DWORD *)__p = 136315906;
    *(_QWORD *)&__p[4] = v15;
    v30 = 1024;
    v31 = v16;
    v32 = 1024;
    v33 = v17;
    v34 = 1024;
    v35 = v18;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "device \"%s\" with version %d  (peerIsPhone=%d peerIsWatch=%d)", __p, 0x1Eu);
    if (v28 < 0)
      operator delete(*(void **)buf);
  }
  v19 = sub_1000F4170(v23);
  sub_10004339C(&v24);
  if ((v19 & 1) == 0)
  {
    v22 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Magnet link up between two devices that do not support EasyPairing", __p, 2u);
    }
    *(_WORD *)(v8 + 4) = 0;
    *(_DWORD *)v8 = 0;
  }
  else
  {
LABEL_25:
    *(_BYTE *)(a1 + 430) = 1;
    sub_100283EF4(a1);
    v20 = *(_DWORD *)(a1 + 516);
    if (v20 == -1)
    {
      v21 = (int *)(a1 + 516);
      notify_register_check("com.apple.bluetooth.magnet", v21);
      v20 = *v21;
    }
    notify_set_state(v20, 1uLL);
    notify_post("com.apple.bluetooth.magnet");
  }
  sub_100043728(&v24);

}

void sub_100283EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  sub_100043728(&a13);

  _Unwind_Resume(a1);
}

uint64_t sub_100283EF4(uint64_t a1)
{
  uint64_t **v2;
  uint64_t **v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  sub_10003415C((uint64_t)v5, a1 + 360);
  v3 = *(uint64_t ***)(a1 + 336);
  v2 = *(uint64_t ***)(a1 + 344);
  while (v3 != v2)
  {
    if (*v3)
    {
      sub_10027F448(a1, *v3);
      v2 = *(uint64_t ***)(a1 + 344);
    }
    ++v3;
  }
  return sub_100034234((uint64_t)v5);
}

void sub_100283F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100283F6C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  id v6;
  void *v7;
  NSObject *v9;
  id v10;
  id v11;
  uint64_t *i;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  __int16 v18;
  uint8_t buf[32];
  _BYTE v20[24];

  v3 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100921CF8);
  v4 = sub_1000589DC((uint64_t)off_1009778C0, v3, 0);
  LOBYTE(v17) = BYTE5(v4);
  BYTE1(v17) = BYTE4(v4);
  BYTE2(v17) = BYTE3(v4);
  HIBYTE(v17) = BYTE2(v4);
  LOBYTE(v18) = BYTE1(v4);
  HIBYTE(v18) = v4;
  v5 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    v6 = sub_100021770(v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "magnet link disconnected with device \"%@\"", buf, 0xCu);

  }
  if (v17 == *(_DWORD *)(a1 + 424) && v18 == *(_WORD *)(a1 + 428))
  {
    *(_BYTE *)(a1 + 432) = 0;
    *(_DWORD *)(a1 + 424) = 0;
    *(_DWORD *)(a1 + 427) = 0;
    *(_OWORD *)buf = 0uLL;
    sub_10003415C((uint64_t)buf, a1 + 360);
    for (i = *(uint64_t **)(a1 + 336); i != *(uint64_t **)(a1 + 344); ++i)
    {
      v13 = (_QWORD *)*i;
      v14 = *(_QWORD *)*i;
      sub_100284234(*i);
      if (v14 && !sub_10027F8E0((uint64_t)v13))
      {
        v20[0] = 0;
        sub_100043758(v20);
        sub_1000E23BC((unsigned __int8 *)(v14 + 128), (uint64_t)&v17, 2);
        sub_10004339C(v20);
        *((_BYTE *)v13 + 728) = 0;
        sub_100043728(v20);
      }
    }
    sub_100034234((uint64_t)buf);
  }
  else
  {
    v9 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    {
      v10 = sub_100021770(v4);
      v11 = (id)objc_claimAutoreleasedReturnValue(v10);
      sub_10046E9BC((unsigned __int8 *)(a1 + 424), buf);
      sub_1006D72D0(v11, (char *)buf, (uint64_t)v20, v9);
    }
  }
  v15 = *(_DWORD *)(a1 + 516);
  if (v15 == -1)
  {
    v16 = (int *)(a1 + 516);
    notify_register_check("com.apple.bluetooth.magnet", v16);
    v15 = *v16;
  }
  notify_set_state(v15, 0);
  notify_post("com.apple.bluetooth.magnet");

}

void sub_1002841D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_100284234(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 48);
  if (result)
  {
    sub_10026DA68(result);
    operator delete();
  }
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_100284274(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t i;
  uint64_t v8;
  int v9;
  __int16 v10;
  _QWORD v11[2];

  result = sub_10027F3E0(a1, a2);
  if ((_DWORD)result)
  {
    v11[0] = 0;
    v11[1] = 0;
    sub_10003415C((uint64_t)v11, a1 + 360);
    if (a2)
    {
      for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
      {
        if (**(_QWORD **)i == a2)
        {
          v8 = *(_QWORD *)(*(_QWORD *)i + 48);
          if (v8)
          {
            v9 = *(_DWORD *)(a2 + 128);
            v10 = *(_WORD *)(a2 + 132);
            sub_10026DE78(v8, a1 + 424, (unsigned __int8 *)&v9, a3);
          }
          return sub_100034234((uint64_t)v11);
        }
      }
    }
    return sub_100034234((uint64_t)v11);
  }
  return result;
}

void sub_100284318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10028432C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t i;
  uint64_t v8;
  int v9;
  __int16 v10;
  _QWORD v11[2];

  result = sub_10027F3E0(a1, a2);
  if ((_DWORD)result)
  {
    v11[0] = 0;
    v11[1] = 0;
    sub_10003415C((uint64_t)v11, a1 + 360);
    if (a2)
    {
      for (i = *(_QWORD *)(a1 + 336); i != *(_QWORD *)(a1 + 344); i += 8)
      {
        if (**(_QWORD **)i == a2)
        {
          v8 = *(_QWORD *)(*(_QWORD *)i + 48);
          if (v8)
          {
            v9 = *(_DWORD *)(a2 + 128);
            v10 = *(_WORD *)(a2 + 132);
            sub_10026E324(v8, a1 + 424, (uint64_t)&v9, a3);
          }
          return sub_100034234((uint64_t)v11);
        }
      }
    }
    return sub_100034234((uint64_t)v11);
  }
  return result;
}

void sub_1002843D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002843E4(uint64_t a1, uint64_t a2)
{
  _QWORD *i;
  _QWORD *v5;
  NSObject *v6;
  void **v7;
  unint64_t v8;
  char *v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  const char *v15;
  _BYTE *v16;
  void *v17;
  NSObject *v18;
  int v19;
  char *v20;
  char *v21;
  void **v22;
  int v23;
  uint64_t v24;
  _BYTE *v25;
  void **v26;
  uint64_t v27;
  uint64_t v29;
  _BYTE *v30;
  NSObject *v31;
  int v32;
  char *v33;
  char *v34;
  void **v35;
  int v36;
  uint64_t v37;
  _BYTE *v38;
  void **v39;
  uint64_t v40;
  _BYTE *v41;
  _QWORD v42[2];
  char v43;
  _QWORD v44[2];
  char v45;
  int v46;
  __int16 v47;
  char v48;
  _QWORD v49[2];
  char v50;
  _QWORD v51[2];
  char v52;
  void *v53[2];
  char v54;
  _QWORD v55[5];
  void *__p[2];
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  uint64_t (*v59)();
  void *v60;
  _BYTE v61[5];
  __int16 v62;
  _QWORD v63[2];
  _BYTE v64[22];
  char v65;
  _BYTE buf[12];
  __int16 v67;
  char *v68;
  __int16 v69;
  void **v70;
  __int16 v71;
  int v72;

  v63[0] = 0;
  v63[1] = 0;
  sub_10003415C((uint64_t)v63, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD **)(a1 + 336); i != *(_QWORD **)(a1 + 344); ++i)
    {
      v5 = (_QWORD *)*i;
      if (*(_QWORD *)*i == a2)
        goto LABEL_7;
    }
  }
  v5 = 0;
LABEL_7:
  v6 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v7 = v57 >= 0 ? __p : (void **)__p[0];
    v8 = *(char *)(a1 + 431);
    v9 = v8 > 3 ? "Unknown" : off_1009220A8[v8];
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v7;
    v67 = 2080;
    v68 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Easy unpair request for device %{public}s; Unpair Initiator: %s",
      buf,
      0x16u);
    if (SHIBYTE(v57) < 0)
      operator delete(__p[0]);
  }
  __p[0] = 0;
  __p[1] = __p;
  v58 = sub_10006255C;
  v59 = nullsub_18;
  v60 = &unk_10083E079;
  v11 = (_DWORD *)(a2 + 128);
  v10 = *(_DWORD *)(a2 + 128);
  v57 = 0x3812000000;
  v61[0] = 0;
  v62 = 0;
  *(_DWORD *)&v61[1] = v10;
  v62 = *(_WORD *)(a2 + 132);
  v12 = sub_1000419F4();
  v55[0] = _NSConcreteStackBlock;
  v55[1] = 3221225472;
  v55[2] = sub_100284D14;
  v55[3] = &unk_1009193E8;
  v55[4] = __p;
  sub_100041A34(v12, v55);
  v13 = *(unsigned __int8 *)(a1 + 431);
  if ((v13 | 2) == 3)
  {
    v14 = qword_1009997D0;
    if (!os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      goto LABEL_57;
    sub_10043E5F8(a2, buf);
    v15 = "user-switch";
    if (v13 == 1)
      v15 = "cloud";
    v16 = v69 >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v64 = 136315394;
    *(_QWORD *)&v64[4] = v15;
    *(_WORD *)&v64[12] = 2082;
    *(_QWORD *)&v64[14] = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Skip easy unpair request from %s: %{public}s", v64, 0x16u);
    if ((SHIBYTE(v69) & 0x80000000) == 0)
      goto LABEL_57;
    v17 = *(void **)buf;
    goto LABEL_25;
  }
  if (!v5)
  {
    if (sub_10043F65C(a2, 0x80000u) != 4 || !sub_10027F3E0(a1, a2) || *(_BYTE *)(a1 + 431))
      goto LABEL_57;
    v31 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10046E9BC((unsigned __int8 *)(a1 + 424), v64);
      v32 = v65;
      v33 = *(char **)v64;
      sub_10043E5F8(a2, v53);
      v34 = v64;
      if (v32 < 0)
        v34 = v33;
      if (v54 >= 0)
        v35 = v53;
      else
        v35 = (void **)v53[0];
      v36 = *(unsigned __int8 *)(a1 + 432);
      *(_DWORD *)buf = 141558787;
      *(_QWORD *)&buf[4] = 1752392040;
      v67 = 2081;
      v68 = v34;
      v69 = 2082;
      v70 = v35;
      v71 = 1024;
      v72 = v36;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Sending Easy Unpair request to device %{private, mask.hash}s for device %{public}s with version %d", buf, 0x26u);
      if (v54 < 0)
        operator delete(v53[0]);
      if (v65 < 0)
        operator delete(*(void **)v64);
    }
    LODWORD(v53[0]) = *v11;
    WORD2(v53[0]) = *(_WORD *)(a2 + 132);
    *(_QWORD *)v64 = 0;
    *(_QWORD *)&v64[8] = 0;
    if (*(unsigned __int8 *)(a1 + 432) < 5u)
    {
      v40 = sub_10034FCFC();
      sub_10046E9BC((unsigned __int8 *)v53, v49);
      sub_10043F6EC(a2, (uint64_t)buf);
      if (v69 >= 0)
        v41 = buf;
      else
        v41 = *(_BYTE **)buf;
      (*(void (**)(uint64_t, _QWORD *, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v40 + 104))(v40, v49, v41, v64, 16);
      if (SHIBYTE(v69) < 0)
        operator delete(*(void **)buf);
      if ((v50 & 0x80000000) == 0)
        goto LABEL_57;
      v39 = (void **)v49;
    }
    else
    {
      v37 = sub_10034FCFC();
      sub_10046E9BC((unsigned __int8 *)v53, v51);
      sub_10043F6EC(a2, (uint64_t)buf);
      if (v69 >= 0)
        v38 = buf;
      else
        v38 = *(_BYTE **)buf;
      (*(void (**)(uint64_t, _QWORD *, _BYTE *, _BYTE *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v37 + 112))(v37, v51, v38, v64, 16, 0, 0);
      if (SHIBYTE(v69) < 0)
        operator delete(*(void **)buf);
      if ((v52 & 0x80000000) == 0)
        goto LABEL_57;
      v39 = (void **)v51;
    }
    v17 = *v39;
LABEL_25:
    operator delete(v17);
LABEL_57:
    v27 = 0;
    *(_BYTE *)(a1 + 431) = 0;
    goto LABEL_58;
  }
  if (*(_BYTE *)(a1 + 328))
  {
    v48 = 0;
    sub_100043758(&v48);
    v47 = 0;
    v46 = 0;
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100921B78);
    sub_1004A3424((uint64_t)off_100977A50, (uint64_t)&v46);
    sub_10004339C(&v48);
    sub_100279334(a1, a2, (uint64_t)&v46, 0, 0);
    if (sub_10027F3E0(a1, a2))
      sub_100279334(a1, a2, a1 + 424, 0, 0);
    *((_BYTE *)v5 + 12) = 1;
    sub_10027946C(a1, a2, (uint64_t)&v46);
    if (!sub_10027F3E0(a1, a2)
      || *(_BYTE *)(a1 + 431) && (*(_BYTE *)(a1 + 431) != 1 || *(unsigned __int8 *)(a1 + 432) > 9u))
    {
      goto LABEL_70;
    }
    v18 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10046E9BC((unsigned __int8 *)(a1 + 424), v64);
      v19 = v65;
      v20 = *(char **)v64;
      sub_10043E5F8(a2, v53);
      v21 = v64;
      if (v19 < 0)
        v21 = v20;
      if (v54 >= 0)
        v22 = v53;
      else
        v22 = (void **)v53[0];
      v23 = *(unsigned __int8 *)(a1 + 432);
      *(_DWORD *)buf = 141558787;
      *(_QWORD *)&buf[4] = 1752392040;
      v67 = 2081;
      v68 = v21;
      v69 = 2082;
      v70 = v22;
      v71 = 1024;
      v72 = v23;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Sending Easy Unpair request to device %{private, mask.hash}s for device %{public}s with version %d", buf, 0x26u);
      if (v54 < 0)
        operator delete(v53[0]);
      if (v65 < 0)
        operator delete(*(void **)v64);
    }
    LODWORD(v53[0]) = *v11;
    WORD2(v53[0]) = *(_WORD *)(a2 + 132);
    *(_QWORD *)v64 = 0;
    *(_QWORD *)&v64[8] = 0;
    if (*(unsigned __int8 *)(a1 + 432) < 5u)
    {
      v29 = sub_10034FCFC();
      sub_10046E9BC((unsigned __int8 *)v53, v42);
      sub_10043F6EC(a2, (uint64_t)buf);
      if (v69 >= 0)
        v30 = buf;
      else
        v30 = *(_BYTE **)buf;
      (*(void (**)(uint64_t, _QWORD *, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v29 + 104))(v29, v42, v30, v64, 16);
      if (SHIBYTE(v69) < 0)
        operator delete(*(void **)buf);
      if ((v43 & 0x80000000) == 0)
        goto LABEL_70;
      v26 = (void **)v42;
    }
    else
    {
      v24 = sub_10034FCFC();
      sub_10046E9BC((unsigned __int8 *)v53, v44);
      sub_10043F6EC(a2, (uint64_t)buf);
      if (v69 >= 0)
        v25 = buf;
      else
        v25 = *(_BYTE **)buf;
      (*(void (**)(uint64_t, _QWORD *, _BYTE *, _BYTE *, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v24 + 112))(v24, v44, v25, v64, 16, 0, 0);
      if (SHIBYTE(v69) < 0)
        operator delete(*(void **)buf);
      if ((v45 & 0x80000000) == 0)
        goto LABEL_70;
      v26 = (void **)v44;
    }
    operator delete(*v26);
LABEL_70:
    *(_BYTE *)(a1 + 431) = 0;
    sub_100043728(&v48);
    v27 = 1;
    goto LABEL_58;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D7350();
  v27 = 0;
LABEL_58:
  _Block_object_dispose(__p, 8);
  sub_100034234((uint64_t)v63);
  return v27;
}

void sub_100284BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  if (*(char *)(v45 - 105) < 0)
    operator delete(*(void **)(v45 - 128));
  if (a30 < 0)
    operator delete(__p);
  _Block_object_dispose(&a45, 8);
  sub_100034234(v45 - 176);
  _Unwind_Resume(a1);
}

const char *sub_100284CEC(uint64_t a1, unsigned int a2)
{
  if (a2 > 3)
    return "Unknown";
  else
    return off_1009220A8[(char)a2];
}

uint64_t sub_100284D14(uint64_t a1)
{
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_100921D78);
  sub_1006840C4((uint64_t)off_100977FA8, (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48));
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100921D38);
  return sub_10069E810(qword_1009778B0, (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48));
}

uint64_t sub_100284DAC(uint64_t a1, uint64_t a2)
{
  uint64_t **i;
  _QWORD v6[2];

  v6[0] = 0;
  v6[1] = 0;
  sub_10003415C((uint64_t)v6, a1 + 360);
  if (a2)
  {
    for (i = *(uint64_t ***)(a1 + 336); i != *(uint64_t ***)(a1 + 344); ++i)
    {
      if (**i == a2)
      {
        sub_10027F448(a1, *i);
        return sub_100034234((uint64_t)v6);
      }
    }
  }
  return sub_100034234((uint64_t)v6);
}

void sub_100284E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100284E30(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _QWORD **i;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD ***)(a1 + 336); i != *(_QWORD ***)(a1 + 344); ++i)
    {
      if (**i == a2)
      {
        v9 = sub_100279E6C(a1, a2, 1, a3, a4);
        goto LABEL_7;
      }
    }
  }
  v9 = 312;
LABEL_7:
  v10 = sub_10044D45C(a2, a3);
  sub_100282C08(v10, a2);
  sub_100034234((uint64_t)v12);
  return v9;
}

void sub_100284EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100284EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD **i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;
  _QWORD v17[2];

  sub_100445A14(a2, a3);
  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD ***)(a1 + 336); i != *(_QWORD ***)(a1 + 344); ++i)
    {
      if (**i == a2)
      {
        if ((_DWORD)a3)
        {
          sub_100279E6C(a1, a2, 7, 0, 2u);
          v13 = 4;
          v14 = a3;
        }
        else
        {
          v14 = 0xFFFFFFFFLL;
          v13 = 7;
        }
        v7 = sub_100279E6C(a1, a2, v13, v14, 2u);
        goto LABEL_7;
      }
    }
  }
  v7 = 1;
LABEL_7:
  v8 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 328))(v8) & 1) != 0
    || (v9 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 384))(v9) & 1) != 0)
    || (v10 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 424))(v10)))
  {
    sub_100279A90(a1, a2);
    if (qword_100977A68 != -1)
      dispatch_once(&qword_100977A68, &stru_100921C58);
    sub_100466A3C((uint64_t)off_100977A60, a2, 4097);
    v15[0] = 0;
    v15[1] = 0;
    v16 = 0;
    sub_10047D35C((uint64_t)v15, 4, a2);
    LODWORD(v16) = a3;
    HIDWORD(v16) = a3;
    v11 = sub_100065478();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 56))(v11, v15);
  }
  sub_100034234((uint64_t)v17);
  return v7;
}

void sub_10028507C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100285094(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  int v10;
  _QWORD **i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  unint64_t v19;
  _QWORD v20[2];

  if (!sub_100442118(a2, 14))
    return 11;
  v10 = sub_1004459D0(a2);
  sub_100445A14(a2, a4 | (a3 << 8));
  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD ***)(a1 + 336); i != *(_QWORD ***)(a1 + 344); ++i)
    {
      if (**i == a2)
      {
        v12 = sub_100279E6C(a1, a2, 12, a4 | (a3 << 8), 2u);
        goto LABEL_9;
      }
    }
  }
  v12 = 1;
LABEL_9:
  v13 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 328))(v13) & 1) != 0
    || (v14 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 384))(v14) & 1) != 0)
    || (v15 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 424))(v15)))
  {
    sub_100279A90(a1, a2);
    if (v10 != 0xFFFF && a5 == 2 && v10 != (a4 | (a3 << 8)))
    {
      if (qword_100977A68 != -1)
        dispatch_once(&qword_100977A68, &stru_100921C58);
      sub_100466A3C((uint64_t)off_100977A60, a2, 4097);
    }
    v18[0] = 0;
    v18[1] = 0;
    v19 = 0;
    sub_10047D35C((uint64_t)v18, 4, a2);
    v19 = __PAIR64__(a3, a4);
    v16 = sub_100065478();
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v16 + 56))(v16, v18);
  }
  sub_100034234((uint64_t)v20);
  return v12;
}

void sub_10028524C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100285264(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  unsigned __int16 v8;
  char v9;
  NSObject *v10;
  void **v11;
  const char *v12;
  uint64_t v13;
  _QWORD *i;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v25;
  void *__p[2];
  char v27;
  uint8_t buf[4];
  void **v29;
  __int16 v30;
  const char *v31;

  if (*(_BYTE *)(a1 + 328))
  {
    if (a3)
      v8 = -1;
    else
      v8 = -3;
    v9 = sub_10044F614(a2);
    v10 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F6EC(a2, (uint64_t)__p);
      v11 = (void **)__p[0];
      v12 = "Disabled";
      if (v27 >= 0)
        v11 = __p;
      if (a3)
        v12 = "Enabled";
      *(_DWORD *)buf = 136315394;
      v29 = v11;
      v30 = 2080;
      v31 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Set InEarDetection for device \"%s\", InEarDetection = \"%s\"", buf, 0x16u);
      if (v27 < 0)
        operator delete(__p[0]);
    }
    v13 = sub_10044DB70(a2, a3, 1);
    sub_100285558(v13, a2);
    __p[0] = 0;
    __p[1] = 0;
    sub_10003415C((uint64_t)__p, a1 + 360);
    if (a2)
    {
      for (i = *(_QWORD **)(a1 + 336); i != *(_QWORD **)(a1 + 344); ++i)
      {
        v15 = (_QWORD *)*i;
        if (*(_QWORD *)*i == a2)
        {
          sub_1002808BC(a1, a2, 0xFFFFLL, v8);
          if (a3)
            v25 = 2;
          else
            v25 = 1;
          v17 = sub_100279E6C(a1, a2, 10, v25, a4);
          if ((a3 & 1) != 0)
          {
            v16 = 0;
          }
          else
          {
            *((_BYTE *)v15 + 8) = 0;
            if (*((_BYTE *)v15 + 9) != 3)
              *((_BYTE *)v15 + 9) = 0;
            v16 = 1;
          }
          goto LABEL_18;
        }
      }
    }
    v16 = 0;
    v17 = 312;
LABEL_18:
    sub_100034264((uint64_t)__p);
    v18 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 328))(v18))
      sub_100279A90(a1, a2);
    v19 = sub_10003BE44();
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 328))(v19);
    if ((v20 & 1) != 0
      || (v21 = sub_10003BE44(), v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 384))(v21),
                                 (v20 & 1) != 0)
      || (v22 = sub_10003BE44(), v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 424))(v22), (_DWORD)v20))
    {
      if ((v16 & 1) != 0)
      {
        if (a4 != 2)
          goto LABEL_35;
      }
      else
      {
        v23 = v9;
        if (a4 != 2)
          v23 = 1;
        if ((v23 & 1) != 0 || (a3 & 1) == 0)
          goto LABEL_36;
      }
      if (qword_100977A68 != -1)
        dispatch_once(&qword_100977A68, &stru_100921C58);
      v20 = sub_100466A3C((uint64_t)off_100977A60, a2, 4097);
    }
    if (!v16)
    {
LABEL_36:
      sub_100034234((uint64_t)__p);
      return v17;
    }
LABEL_35:
    sub_100282C08(v20, a2);
    goto LABEL_36;
  }
  return 111;
}

void sub_10028553C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100285558(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  uint64_t v5;
  _QWORD v7[5];
  void *__p[2];
  char v9;
  uint8_t buf[4];
  void **v11;

  v3 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(a2, (uint64_t)__p);
    v4 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Notify in ear enabled change for device \"%s\"", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  v5 = sub_100475960();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10029AFDC;
  v7[3] = &unk_100917378;
  v7[4] = a2;
  sub_100041A34(v5, v7);
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100921C18);
  sub_1003E40E8((_QWORD *)qword_100977DF8, a2);
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_100921C38);
  return sub_100421AD4((uint64_t)off_1009778D0, a2);
}

uint64_t sub_1002856DC(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  _BYTE *v7;
  unsigned __int8 **i;
  unsigned __int8 *v9;
  NSObject *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _BYTE *v16;
  int v17;
  NSObject *v18;
  _BYTE *v19;
  _QWORD v21[2];
  _BYTE buf[12];
  __int16 v23;
  int v24;
  char v25;
  _BYTE __p[14];
  _BYTE v27[6];
  int v28;

  v6 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v7 = v28 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v7;
    v23 = 1024;
    v24 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received primary bud side notification for device %{public}s, with bud side = %d from other end of magnet", buf, 0x12u);
    if (SHIBYTE(v28) < 0)
      operator delete(*(void **)__p);
  }
  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 360);
  if (a2)
  {
    for (i = *(unsigned __int8 ***)(a1 + 336); i != *(unsigned __int8 ***)(a1 + 344); ++i)
    {
      v9 = *i;
      if (*(_QWORD *)*i == a2)
      {
        v9[11] = a3;
        v10 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          v11 = v9[10];
          v12 = v9[9];
          *(_DWORD *)__p = 67109632;
          *(_DWORD *)&__p[4] = a3;
          *(_WORD *)&__p[8] = 1024;
          *(_DWORD *)&__p[10] = v11;
          *(_WORD *)v27 = 1024;
          *(_DWORD *)&v27[2] = v12;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Primary bud info over magnet link -> %d, current connection primary bud info -> %d, current connection secondary bud in ear status -> %d", __p, 0x14u);
        }
        v13 = sub_10003BE44();
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 344))(v13))
          break;
        v14 = 0;
        if (a3 != 3 && v9[10] != a3)
        {
          if (v9[9] != 3)
            break;
          v15 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(a2, buf);
            v16 = v25 >= 0 ? buf : *(_BYTE **)buf;
            v17 = v9[10];
            *(_DWORD *)__p = 136446722;
            *(_QWORD *)&__p[4] = v16;
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)v27 = v17;
            *(_WORD *)&v27[4] = 1024;
            v28 = a3;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Info update from Magnet, Primary bud side  for device %{public}s seen locally is different from that of companion, we see  %d, and companion sees %d. Requesting connected bud to go secondary", __p, 0x18u);
            if (v25 < 0)
              operator delete(*(void **)buf);
          }
          v14 = sub_100279E6C(a1, a2, 8, 2, 1u);
          v18 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(a2, __p);
            v19 = v28 >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Schedule reconnection to W1 device after LSTO (5 seconds) on Gizmo, device addr : %s", buf, 0xCu);
            if (SHIBYTE(v28) < 0)
              operator delete(*(void **)__p);
          }
          *(_DWORD *)__p = *(_DWORD *)(a2 + 128);
          *(_WORD *)&__p[4] = *(_WORD *)(a2 + 132);
          if (qword_100977A78 != -1)
            dispatch_once(&qword_100977A78, &stru_100921CD8);
          sub_1004989D8((uint64_t)off_100977A70, __p);
        }
        goto LABEL_34;
      }
    }
  }
  v14 = 0;
LABEL_34:
  sub_100034234((uint64_t)v21);
  return v14;
}

void sub_100285A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100285A58(uint64_t a1, uint64_t a2)
{
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  _QWORD v21[2];
  uint8_t buf[4];
  uint64_t v23;

  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, a1 + 360);
  if (a2)
  {
    for (i = *(uint64_t **)(a1 + 336); i != *(uint64_t **)(a1 + 344); ++i)
    {
      v5 = *i;
      if (*(_QWORD *)*i == a2)
      {
        if (sub_10027F8E0(*i))
        {
          v9 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            if (*(_BYTE *)(v5 + 617))
              v17 = v5 + 611;
            else
              v17 = v5 + 605;
            v19 = *(_DWORD *)v17;
            v20 = *(_WORD *)(v17 + 4);
            v18 = sub_10025304C((uint64_t)&v19, v10, v11, v12, v13, v14, v15, v16);
            *(_DWORD *)buf = 136446210;
            v23 = v18;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Peer source \"%{public}s\" is currently connected in TiPi, skip connection stealing", buf, 0xCu);
          }
          v6 = 17;
        }
        else
        {
          if (sub_10027F3E0(a1, a2))
          {
            sub_10027F448(a1, (uint64_t *)v5);
            v6 = 0;
            goto LABEL_9;
          }
          v6 = 1;
        }
        goto LABEL_7;
      }
    }
  }
  v6 = 7;
LABEL_7:
  v7 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v23) = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "reformTriangle: Conditions not met for easy pairing, result %d", buf, 8u);
  }
LABEL_9:
  sub_100034234((uint64_t)v21);
  return v6;
}

void sub_100285C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100285C20(uint64_t a1)
{
  return a1 + 560;
}

void sub_100285C28(uint64_t a1)
{
  NSObject *v1;
  uint64_t **v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  __int128 *v6;
  unint64_t v8;
  int v9;
  NSObject *v10;
  __int128 *v11;
  _BOOL8 v12;
  unsigned __int8 v13;
  const char *v14;
  NSObject *v15;
  int v16;
  const char *v17;
  unsigned int v18;
  int v19;
  NSObject *v20;
  _QWORD *v21;
  const char *v22;
  _BYTE *v23;
  NSObject *v24;
  unsigned int v25;
  char *v26;
  _BYTE *v27;
  NSObject *v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  NSObject *v32;
  int v33;
  const char *v34;
  char *v35;
  _BYTE *v36;
  NSObject *v37;
  _BOOL4 v38;
  const char *v39;
  uint8_t buf[8];
  uint64_t **v42;
  uint64_t v43;
  _BYTE v44[12];
  __int16 v45;
  const char *v46;
  char v47;
  uint8_t v48[4];
  const char *v49;
  __int16 v50;
  _BYTE *v51;
  __int128 v52;
  uint64_t v53;

  v1 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: ----------------- AACP connections ------------------", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v42 = 0;
  v43 = 0;
  sub_10001FE6C(buf, a1 + 336);
  v2 = *(uint64_t ***)buf;
  if (*(uint64_t ***)buf != v42)
  {
    while (1)
    {
      v3 = **v2;
      v4 = *((_DWORD *)*v2 + 20);
      v5 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v3, &v52);
        v6 = &v52;
        if (v53 < 0)
          v6 = (__int128 *)v52;
        *(_DWORD *)v44 = 136446466;
        *(_QWORD *)&v44[4] = v6;
        v45 = 1024;
        LODWORD(v46) = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: Device %{public}s (pId 0x%04X)", v44, 0x12u);
        if (SHIBYTE(v53) < 0)
          operator delete((void *)v52);
      }
      if ((v4 - 8194) > 0xE || ((1 << (v4 - 2)) & 0x409B) == 0)
      {
        v37 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          v38 = sub_10044936C(v3);
          v39 = "no";
          if (v38)
            v39 = "yes";
          LODWORD(v52) = 136446210;
          *(_QWORD *)((char *)&v52 + 4) = v39;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "statedump:   Dev-fused: %{public}s", (uint8_t *)&v52, 0xCu);
        }
      }
      v52 = 0uLL;
      v53 = 0;
      sub_1004491B4(v3, 0xAu, &v52);
      v8 = HIBYTE(v53);
      v9 = SHIBYTE(v53);
      if (v53 < 0)
        v8 = *((_QWORD *)&v52 + 1);
      v10 = qword_1009997D0;
      if (v8 >= 2 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        v11 = (__int128 *)v52;
        if (v9 >= 0)
          v11 = &v52;
        *(_DWORD *)v44 = 136446210;
        *(_QWORD *)&v44[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:   Firmware version: %{public}s", v44, 0xCu);
        v10 = qword_1009997D0;
      }
      v12 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v12)
      {
        v13 = sub_10044F5D0(v3);
        v14 = "unknown";
        if (v13 <= 2u)
          v14 = off_1009220C8[(char)v13];
        *(_DWORD *)v44 = 136446466;
        *(_QWORD *)&v44[4] = "Mic mode";
        v45 = 2082;
        v46 = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:   %{public}s: %{public}s", v44, 0x16u);
      }
      if (sub_1002806C8(v12, v3))
      {
        v15 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          v16 = sub_10044F614(v3);
          *(_DWORD *)v44 = 136446466;
          v17 = "Disabled";
          if (v16)
            v17 = "Enabled";
          *(_QWORD *)&v44[4] = "In Ear detection";
          v45 = 2082;
          v46 = v17;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump:   %{public}s: %{public}s", v44, 0x16u);
        }
      }
      if ((sub_100442118(v3, 30) & 1) != 0)
        break;
      if ((sub_100442118(v3, 14) & 1) != 0)
      {
        v19 = 12;
        goto LABEL_33;
      }
      if ((v4 - 8194) < 0xF && ((0x409Bu >> (v4 - 2)) & 1) != 0)
      {
        v19 = 4;
LABEL_33:
        v18 = sub_1004459D0(v3);
LABEL_34:
        v20 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          v21 = sub_10027B480(a1, v19, v18, v44);
          v22 = sub_10027B454((uint64_t)v21, v19);
          v23 = v47 >= 0 ? v44 : *(_BYTE **)v44;
          *(_DWORD *)v48 = 136446466;
          v49 = v22;
          v50 = 2082;
          v51 = v23;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "statedump:   %{public}s: %{public}s", v48, 0x16u);
          if (v47 < 0)
            operator delete(*(void **)v44);
        }
      }
      if ((sub_100442118(v3, 16) & 1) != 0 || sub_100442118(v3, 17))
      {
        v24 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          v25 = sub_10044F708(v3) - 1;
          v26 = "unknown";
          if (v25 <= 3)
            v26 = off_100922118[v25];
          sub_100091AE8(v44, v26);
          if (v47 >= 0)
            v27 = v44;
          else
            v27 = *(_BYTE **)v44;
          *(_DWORD *)v48 = 136446466;
          v49 = "Listen mode";
          v50 = 2082;
          v51 = v27;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump:   %{public}s: %{public}s", v48, 0x16u);
          if (v47 < 0)
            operator delete(*(void **)v44);
        }
      }
      if (sub_100442118(v3, 28))
      {
        v28 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          v29 = sub_10044F74C(v3);
          v30 = (char *)sub_10029B318(v29, v29);
          sub_100091AE8(v44, v30);
          v31 = v47 >= 0 ? v44 : *(_BYTE **)v44;
          *(_DWORD *)v48 = 136446466;
          v49 = "Listening Mode Configs";
          v50 = 2082;
          v51 = v31;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "statedump:   %{public}s: %{public}s", v48, 0x16u);
          if (v47 < 0)
            operator delete(*(void **)v44);
        }
      }
      if (sub_100442118(v3, 16))
      {
        if (sub_100442118(v3, 1))
        {
          v32 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            v33 = sub_10044F96C(v3);
            v34 = "unknown";
            if (v33 == 1)
              v34 = "Enabled";
            if (v33 == 2)
              v35 = "Disabled";
            else
              v35 = (char *)v34;
            sub_100091AE8(v44, v35);
            if (v47 >= 0)
              v36 = v44;
            else
              v36 = *(_BYTE **)v44;
            *(_DWORD *)v48 = 136446466;
            v49 = "One Bud ANC Mode";
            v50 = 2082;
            v51 = v36;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump:   %{public}s: %{public}s", v48, 0x16u);
            if (v47 < 0)
              operator delete(*(void **)v44);
          }
        }
      }
      if (SHIBYTE(v53) < 0)
        operator delete((void *)v52);
      if (++v2 == v42)
      {
        v2 = *(uint64_t ***)buf;
        goto LABEL_81;
      }
    }
    v18 = sub_10044F8A0(v3);
    v19 = 22;
    goto LABEL_34;
  }
LABEL_81:
  if (v2)
  {
    v42 = v2;
    operator delete(v2);
  }
}

void sub_1002862FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  _Unwind_Resume(exception_object);
}

id sub_100286360(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void **v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  void *v23;
  void *__p[2];
  char v25;

  v3 = atomic_load((unsigned __int8 *)&qword_100991A88);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_100991A88))
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSCharacterSet alphanumericCharacterSet](NSCharacterSet, "alphanumericCharacterSet"));
    qword_100991A80 = objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "invertedSet"));

    __cxa_guard_release(&qword_100991A88);
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v4 = (void *)sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s"), sub_10025304C(a2, v5, v6, v7, v8, v9, v10, v11));
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "stringByReplacingOccurrencesOfString:withString:", CFSTR(":"), &stru_100941758));

  v15 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15))
  {
    if (v4)
    {
      sub_10043F6EC((uint64_t)v4, (uint64_t)__p);
      if (v25 >= 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16));
      if (v25 < 0)
        operator delete(__p[0]);
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "componentsSeparatedByCharactersInSet:", qword_100991A80));
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "componentsJoinedByString:", &stru_100941758));

      if ((unint64_t)objc_msgSend(v19, "length") < 0x41)
      {
        v4 = v19;
      }
      else
      {
        v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "substringToIndex:", 64));

        v4 = (void *)v20;
      }
    }
    v21 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@_%@"), v14, v4));

  }
  else
  {
    v21 = v14;
  }

  return v21;
}

void sub_100286590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  __cxa_guard_abort(&qword_100991A88);
  _Unwind_Resume(a1);
}

id sub_1002865F8(uint64_t a1, uint64_t a2)
{
  id v2;
  void *v3;
  void *v4;

  v2 = sub_100286360(a1, a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("/private/var/mobile/Library/Logs/Bluetooth/AccessoryVersionInfo_%@.txt"), v3));

  return v4;
}

void sub_100286650(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_100286660(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4)
{
  NSObject *v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  unsigned int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void **v19;

  v4 = qword_1009997D0;
  if (*(_BYTE *)(a1 + 328))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F6EC(a2, (uint64_t)__p);
      v8 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109635;
      v15 = a4;
      v16 = 2160;
      v17 = 1752392040;
      v18 = 2081;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "sendSmartRoutingInformation: Sending SR 2.0 info of length %u to %{private, mask.hash}s", buf, 0x1Cu);
      if (v13 < 0)
        operator delete(__p[0]);
    }
    buf[0] = 0;
    sub_100043758(buf);
    v9 = sub_1000E3848((unsigned __int8 *)(a2 + 128), a3, a4);
    sub_10004339C(buf);
    if ((_DWORD)v9 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D73A8();
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100921B78);
    v10 = sub_1004A35C0((uint64_t)off_100977A50, v9, 10000);
    sub_100043728(buf);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D737C();
    return 111;
  }
  return v10;
}

void sub_100286828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100286844(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4)
{
  NSObject *v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  unsigned int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void **v19;

  v4 = qword_1009997D0;
  if (*(_BYTE *)(a1 + 328))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F6EC(a2, (uint64_t)__p);
      v8 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109635;
      v15 = a4;
      v16 = 2160;
      v17 = 1752392040;
      v18 = 2081;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "sendConversationDetectMessage: Sending CD Message of length %u to %{private, mask.hash}s", buf, 0x1Cu);
      if (v13 < 0)
        operator delete(__p[0]);
    }
    buf[0] = 0;
    sub_100043758(buf);
    v9 = sub_1000E397C((unsigned __int8 *)(a2 + 128), a3, a4);
    sub_10004339C(buf);
    if ((_DWORD)v9 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D7434();
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100921B78);
    v10 = sub_1004A35C0((uint64_t)off_100977A50, v9, 10000);
    sub_100043728(buf);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D7408();
    return 111;
  }
  return v10;
}

void sub_100286A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100286A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  void **v18;

  v3 = qword_1009997D0;
  if (*(_BYTE *)(a1 + 328))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F6EC(a2, (uint64_t)__p);
      v6 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 134218499;
      v14 = a3;
      v15 = 2160;
      v16 = 1752392040;
      v17 = 2081;
      v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "sendFeatureProxCardStatusUpdate: Sending prox card status bitmask 0x%02llX to %{private, mask.hash}s", buf, 0x20u);
      if (v12 < 0)
        operator delete(__p[0]);
    }
    v7 = sub_1004414B4(a2);
    sub_100441444(a2, v7 | a3);
    buf[0] = 0;
    sub_100043758(buf);
    v8 = sub_1000E3F90((unsigned __int8 *)(a2 + 128), a3);
    sub_10004339C(buf);
    if ((_DWORD)v8 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D74C0();
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100921B78);
    v9 = sub_1004A35C0((uint64_t)off_100977A50, v8, 10000);
    sub_100043728(buf);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D7494();
    return 111;
  }
  return v9;
}

void sub_100286BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100286C18(uint64_t a1, uint64_t a2, unsigned int a3, const void *a4)
{
  NSObject *v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  unsigned int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void **v19;

  v4 = qword_1009997D0;
  if (*(_BYTE *)(a1 + 328))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F6EC(a2, (uint64_t)__p);
      v8 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109635;
      v15 = a3;
      v16 = 2160;
      v17 = 1752392040;
      v18 = 2081;
      v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "sendSourceContextMessage: Sending source context message of length %u to %{private, mask.hash}s", buf, 0x1Cu);
      if (v13 < 0)
        operator delete(__p[0]);
    }
    buf[0] = 0;
    sub_100043758(buf);
    v9 = sub_1000E4038((unsigned __int8 *)(a2 + 128), a3, a4);
    sub_10004339C(buf);
    if ((_DWORD)v9 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D754C();
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100921B78);
    v10 = sub_1004A35C0((uint64_t)off_100977A50, v9, 10000);
    sub_100043728(buf);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D7520();
    return 111;
  }
  return v10;
}

void sub_100286DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100286DFC(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  _QWORD **i;
  uint64_t v9;
  uint64_t v11;
  NSObject *v12;
  int v13;
  _QWORD v14[2];
  uint8_t buf[32];
  _BYTE v16[24];

  if (*(_BYTE *)(a1 + 328))
  {
    v14[0] = 0;
    v14[1] = 0;
    sub_10003415C((uint64_t)v14, a1 + 360);
    if (a2)
    {
      for (i = *(_QWORD ***)(a1 + 336); i != *(_QWORD ***)(a1 + 344); ++i)
      {
        if (**i == a2)
        {
          v16[0] = 0;
          sub_100043758(v16);
          v11 = sub_1000E3C54((unsigned __int8 *)(a2 + 128), a3, a4);
          sub_10004339C(v16);
          v12 = qword_1009997D0;
          if ((_DWORD)v11)
          {
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
              sub_1006D75D8();
          }
          else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            v13 = *a4;
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "sendAdaptiveVolumeMessage: message sent of subtype %u", buf, 8u);
          }
          if (qword_100977A58 != -1)
            dispatch_once(&qword_100977A58, &stru_100921B78);
          v9 = sub_1004A35C0((uint64_t)off_100977A50, v11, 10000);
          sub_100043728(v16);
          goto LABEL_10;
        }
      }
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a2, buf);
      sub_1006D6CEC();
    }
    v9 = 312;
LABEL_10:
    sub_100034234((uint64_t)v14);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D75AC();
    return 111;
  }
  return v9;
}

void sub_100286FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10028702C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  _QWORD **i;
  uint64_t v9;
  uint64_t v11;
  NSObject *v12;
  int v13;
  _QWORD v14[2];
  uint8_t buf[32];
  _BYTE v16[24];

  if (*(_BYTE *)(a1 + 328))
  {
    v14[0] = 0;
    v14[1] = 0;
    sub_10003415C((uint64_t)v14, a1 + 360);
    if (a2)
    {
      for (i = *(_QWORD ***)(a1 + 336); i != *(_QWORD ***)(a1 + 344); ++i)
      {
        if (**i == a2)
        {
          v16[0] = 0;
          sub_100043758(v16);
          v11 = sub_1000E4198((unsigned __int8 *)(a2 + 128), a3, a4);
          sub_10004339C(v16);
          v12 = qword_1009997D0;
          if ((_DWORD)v11)
          {
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
              sub_1006D7664();
          }
          else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            v13 = *a4;
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "sendPMEConfigMessage: message sent of subtype %u", buf, 8u);
          }
          if (qword_100977A58 != -1)
            dispatch_once(&qword_100977A58, &stru_100921B78);
          v9 = sub_1004A35C0((uint64_t)off_100977A50, v11, 10000);
          sub_100043728(v16);
          goto LABEL_10;
        }
      }
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a2, buf);
      sub_1006D6CEC();
    }
    v9 = 312;
LABEL_10:
    sub_100034234((uint64_t)v14);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D7638();
    return 111;
  }
  return v9;
}

void sub_10028722C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10028725C(uint64_t a1, uint64_t a2, unsigned int a3, const void *a4)
{
  _QWORD **i;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD v13[2];

  if (*(_BYTE *)(a1 + 328))
  {
    v13[0] = 0;
    v13[1] = 0;
    sub_10003415C((uint64_t)v13, a1 + 360);
    if (a2)
    {
      for (i = *(_QWORD ***)(a1 + 336); i != *(_QWORD ***)(a1 + 344); ++i)
      {
        if (**i == a2)
        {
          LOBYTE(v12[0]) = 0;
          sub_100043758(v12);
          v11 = sub_1000E3D88((unsigned __int8 *)(a2 + 128), a3, a4);
          sub_10004339C(v12);
          if ((_DWORD)v11 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
            sub_1006D76F0();
          if (qword_100977A58 != -1)
            dispatch_once(&qword_100977A58, &stru_100921B78);
          v9 = sub_1004A35C0((uint64_t)off_100977A50, v11, 10000);
          sub_100043728(v12);
          goto LABEL_10;
        }
      }
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a2, v12);
      sub_1006D6CEC();
    }
    v9 = 312;
LABEL_10:
    sub_100034234((uint64_t)v13);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D76C4();
    return 111;
  }
  return v9;
}

void sub_100287414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100287444(uint64_t a1, unsigned int a2)
{
  char v2;
  void *v3;
  uint64_t v4;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%d%c%d"), (a2 >> 20) & 0xF, (HIWORD(a2) & 0xF) + 65, (unsigned __int16)a2 >> 4));
  if ((v2 & 0xF) != 0)
  {
    v4 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@%c"), v3, v2 & 0xF | 0x60u));

    v3 = (void *)v4;
  }
  return v3;
}

void sub_1002874D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002874E8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void *__p[2];
  char v18;
  uint8_t buf[4];
  void **v20;
  __int16 v21;
  uint64_t v22;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v4 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v5 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(v4, (uint64_t)__p);
    v6 = v18;
    v7 = (void **)__p[0];
    v15 = sub_10025304C(a2, v8, v9, v10, v11, v12, v13, v14);
    v16 = __p;
    if (v6 < 0)
      v16 = v7;
    *(_DWORD *)buf = 136315394;
    v20 = v16;
    v21 = 2080;
    v22 = v15;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "AACP Connection attempt by device \"%s\", addr \"%s\",", buf, 0x16u);
    if (v18 < 0)
      operator delete(__p[0]);
  }
  sub_1004816DC(a1, v4);
}

void sub_100287640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100287664(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  NSObject *v9;
  _BOOL4 v10;
  _BYTE *v11;
  int v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE v24[12];
  __int16 v25;
  int v26;
  char v27;
  _BYTE __p[12];
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  *(_DWORD *)__p = *(_DWORD *)a2;
  *(_WORD *)&__p[4] = *(_WORD *)(a2 + 4);
  v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v9 = qword_1009997D0;
  v10 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)a4)
  {
    if (v10)
    {
      sub_10043F6EC(v8, (uint64_t)__p);
      v11 = v31 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)v24 = 136315394;
      *(_QWORD *)&v24[4] = v11;
      v25 = 1024;
      v26 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "connection to device \"%s\" failed... reason %d", v24, 0x12u);
      if (SHIBYTE(v31) < 0)
        operator delete(*(void **)__p);
    }
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100921B78);
    v12 = sub_1004A35C0((uint64_t)off_100977A50, a4, 20000);
    sub_10048183C(a1, v8, v12);
  }
  if (v10)
  {
    sub_10043F6EC(v8, (uint64_t)v24);
    v13 = v27;
    v14 = *(_BYTE **)v24;
    v22 = sub_10025304C(a2, v15, v16, v17, v18, v19, v20, v21);
    v23 = v24;
    *(_DWORD *)__p = 136315906;
    if (v13 < 0)
      v23 = v14;
    *(_QWORD *)&__p[4] = v23;
    v29 = 2080;
    v30 = v22;
    v31 = 1024;
    v32 = a3;
    v33 = 1024;
    v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Connection succeeded to device \"%s\", addr \"%s\", mtu %d, result %d", __p, 0x22u);
    if (v27 < 0)
      operator delete(*(void **)v24);
  }
  sub_10048183C(a1, v8, 0);
}

void sub_1002878BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002878E0(_QWORD *a1, unsigned __int8 *a2, int a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **i;
  uint64_t *v9;
  NSObject *v10;
  void **v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v14[7];
  void *__p[2];
  char v16;
  _QWORD v17[2];
  uint8_t buf[4];
  void **v19;
  __int16 v20;
  int v21;

  v5 = ((unint64_t)*a2 << 40) | ((unint64_t)a2[1] << 32) | ((unint64_t)a2[2] << 24) | ((unint64_t)a2[3] << 16) | ((unint64_t)a2[4] << 8) | a2[5];
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  v6 = sub_10006D488((uint64_t)off_1009778E0, v5, 1);
  if (v6)
  {
    v7 = v6;
    sub_10044EF08(v6, 0);
    v17[0] = 0;
    v17[1] = 0;
    sub_10003415C((uint64_t)v17, (uint64_t)(a1 + 45));
    for (i = (uint64_t **)a1[42]; i != (uint64_t **)a1[43]; ++i)
    {
      v9 = *i;
      if (**i == v7)
        goto LABEL_9;
    }
    v9 = 0;
LABEL_9:
    v10 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT)
      && ((sub_10043F6EC(v7, (uint64_t)__p), v16 >= 0) ? (v11 = __p) : (v11 = (void **)__p[0]),
          *(_DWORD *)buf = 136315394,
          v19 = v11,
          v20 = 1024,
          v21 = a3,
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "disconnecting \"%s\", reason = %d", buf, 0x12u), v16 < 0))
    {
      operator delete(__p[0]);
      if (v9)
      {
LABEL_15:
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9[96] + 176))(v9[96]) == 1)
        {
          sub_10048257C((uint64_t)a1, v7, 0);
          sub_100287BAC(a1, v9);
        }
LABEL_22:
        if (a3 == 734 || a3 == 708)
        {
          v13 = sub_10006BBEC();
          v14[0] = _NSConcreteStackBlock;
          v14[1] = 3221225472;
          v14[2] = sub_100287D10;
          v14[3] = &unk_1009210D8;
          v14[4] = a1;
          v14[5] = v7;
          v14[6] = v5;
          sub_100475CEC(v13, 5000, v14);
        }
        sub_100034234((uint64_t)v17);
        return;
      }
    }
    else if (v9)
    {
      goto LABEL_15;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    {
      sub_10043F6EC(v7, (uint64_t)__p);
      sub_1006D77DC();
    }
    goto LABEL_22;
  }
  v12 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D7750(v5, v12);
}

void sub_100287B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100287BAC(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v4 = (char *)result[42];
  v5 = (char *)result[43];
  v6 = v4;
  if (v4 != v5)
  {
    while ((uint64_t *)*v6 != a2)
    {
      if (++v6 == (_QWORD *)v5)
      {
        v6 = (_QWORD *)result[43];
        break;
      }
    }
  }
  if (v6 != (_QWORD *)v5)
  {
    v7 = *a2;
    v8 = v5 - (char *)(v6 + 1);
    if (v5 != (char *)(v6 + 1))
      memmove(v6, v6 + 1, v5 - (char *)(v6 + 1));
    v3[43] = (char *)v6 + v8;
    sub_10029ACFC(a2);
    sub_100294C28(v9, (uint64_t)a2);
    sub_1002964DC(v10, (uint64_t)a2);
    if (qword_100978180 != -1)
      dispatch_once(&qword_100978180, &stru_100921D18);
    sub_1003C3240(qword_100978178, v7 + 128);
    sub_10029B76C((uint64_t)a2);
    operator delete();
  }
  if (v4 == v5)
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100921C78);
    sub_100069060((uint64_t)off_1009778E0 + 240, (uint64_t)(v3 + 34));
    result = (_QWORD *)v3[61];
    v3[61] = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 64))(result);
  }
  return result;
}

void sub_100287D10(uint64_t *a1)
{
  id v2;
  id v3;
  NSObject *v4;
  void **v5;
  uint64_t v6;
  void *__p[2];
  uint64_t v8;
  void *v9[2];
  uint64_t v10;
  uint8_t buf[4];
  void **v12;

  if (sub_10027F3E0(a1[4], a1[5]))
  {
    v9[0] = 0;
    v9[1] = 0;
    v10 = 0;
    v2 = sub_100649588(a1[6]);
    v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v2));
    sub_100091AE8(v9, (char *)objc_msgSend(v3, "UTF8String"));

    v4 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v9;
      if (v10 < 0)
        v5 = (void **)v9[0];
      *(_DWORD *)buf = 136315138;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Notifying Phone/Watch of unexpected disconnection from device addr %s", buf, 0xCu);
    }
    v6 = sub_10034FCFC();
    if (SHIBYTE(v10) < 0)
    {
      sub_10003430C(__p, v9[0], (unint64_t)v9[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v9;
      v8 = v10;
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 136))(v6, __p);
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v10) < 0)
      operator delete(v9[0]);
  }
}

void sub_100287E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100287EB4(uint64_t result, uint64_t a2, int a3, __int16 a4)
{
  uint64_t v5;
  uint64_t *v6;
  _QWORD v7[2];

  if (a3 == 30 && (a4 & 0x8000) == 0)
  {
    v5 = result;
    v7[0] = 0;
    v7[1] = 0;
    sub_10003415C((uint64_t)v7, result + 360);
    v6 = sub_100287F54(v5, a2);
    if (v6)
    {
      sub_100287F98(v6);
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    {
      sub_1006D7828();
    }
    return sub_100034234((uint64_t)v7);
  }
  return result;
}

void sub_100287F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100287F54(uint64_t a1, uint64_t a2)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t *result;
  uint64_t v5;
  int v6;
  int v7;

  if (a2)
  {
    v2 = *(uint64_t ***)(a1 + 336);
    v3 = *(uint64_t ***)(a1 + 344);
    while (v2 != v3)
    {
      result = *v2;
      v5 = **v2;
      v6 = *(_DWORD *)(v5 + 128);
      v7 = *(unsigned __int16 *)(v5 + 132);
      if (v6 == *(_DWORD *)a2 && v7 == *(unsigned __int16 *)(a2 + 4))
        return result;
      ++v2;
    }
  }
  return 0;
}

uint64_t sub_100287F98(_QWORD *a1)
{
  uint64_t v2;
  uint64_t *v3;
  const void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  uint8_t v19;
  _BYTE v20[15];
  _QWORD v21[2];
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;

  v21[0] = 0;
  v21[1] = 0;
  sub_10003415C((uint64_t)v21, (uint64_t)(a1 + 55));
  v2 = a1[54];
  if (v2)
  {
    v3 = (uint64_t *)a1[53];
    v4 = (const void **)v3[2];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = v3[1];
    *(_QWORD *)v3[1] = v5;
    a1[54] = v2 - 1;
    operator delete(v3);
    v6 = *(unsigned __int8 *)v4;
    if (v6 <= 0x1F)
    {
      v7 = a1[v6 + 20];
      if (v7)
      {
        if (*(_BYTE *)(v7 + 97))
        {
          v18 = 0;
          sub_100043758(&v18);
          v8 = sub_1000E29A4((unsigned __int8 *)(*a1 + 128), *(unsigned __int8 *)v4, *((unsigned __int16 *)v4 + 1), v4[1]);
          sub_10004339C(&v18);
          if (v8)
          {
            v9 = qword_1009997D0;
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              v23 = v8;
              _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "sendEASessionPacket: error %d", buf, 8u);
            }
            if (v4[1])
              operator delete[]();
            operator delete();
          }
          if (*((unsigned __int16 *)v4 + 1) >= 3u)
          {
            v13 = qword_1009997D0;
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
            {
              v14 = (unsigned __int8 *)v4[1];
              v15 = *v14;
              v16 = v14[1];
              LODWORD(v14) = v14[2];
              v17 = a1[54];
              *(_DWORD *)buf = 67109888;
              v23 = v15;
              v24 = 1024;
              v25 = v16;
              v26 = 1024;
              v27 = (int)v14;
              v28 = 2048;
              v29 = v17;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "sendEASessionPacket: Packet start %02X %02X %02X; %lu remaining",
                buf,
                0x1Eu);
            }
          }
          if (v4[1])
            operator delete[]();
          operator delete();
        }
      }
    }
    v10 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D7854(&v19, v20, v10);
    if (v4[1])
      operator delete[]();
    operator delete();
  }
  v11 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "sendEASessionPacket: No more packets to send", buf, 2u);
  }
  return sub_100034234((uint64_t)v21);
}

void sub_1002882A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002882D4(uint64_t a1, _DWORD *a2, _BYTE *a3)
{
  int v4;
  NSObject *v5;
  _BOOL4 v6;
  int v7;
  _DWORD v8[2];

  v4 = sub_10027DF9C(a1, a2);
  v5 = qword_1009997D0;
  v6 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      v7 = *a3;
      v8[0] = 67109120;
      v8[1] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "GAPA device remove all %d AACP capabilities", (uint8_t *)v8, 8u);
    }
    *a3 = 0;
  }
  else if (v6)
  {
    LOWORD(v8[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "GAPA device remove limited AACP capabilities", (uint8_t *)v8, 2u);
  }
}

uint64_t sub_1002883C0(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  _DWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  NSObject *v10;
  _BOOL8 v11;
  uint8_t *v12;
  unsigned int v13;
  unint64_t v14;
  int *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  NSObject *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint8_t *v26;
  NSObject *v27;
  int v28;
  NSObject *v29;
  uint8_t *v30;
  int v31;
  NSObject *v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v37;
  NSObject *v38;
  int v39;
  uint64_t v41;
  char v42;
  _QWORD v43[5];
  _QWORD v44[5];
  _QWORD v45[2];
  unsigned __int8 v46;
  uint8_t v47[8];
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  char v52;
  uint8_t buf[4];
  uint8_t *v54;
  __int16 v55;
  int v56;

  v46 = a3;
  v45[0] = 0;
  v45[1] = 0;
  sub_10003415C((uint64_t)v45, a1 + 360);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  *(_DWORD *)v47 = *(_DWORD *)a2;
  *(_WORD *)&v47[4] = *(_WORD *)(a2 + 4);
  v7 = (_DWORD *)sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)v47, 1);
  v8 = sub_100287F54(a1, a2);
  if (v7 && v8)
  {
    v41 = (uint64_t)v8;
    v9 = sub_100447C64((uint64_t)v7);
    if ((v9 & 2) != 0)
      sub_1002882D4(v9, v7, &v46);
    v10 = qword_1009997D0;
    v11 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      sub_10043E5F8((uint64_t)v7, v47);
      if (v52 >= 0)
        v12 = v47;
      else
        v12 = *(uint8_t **)v47;
      v13 = v46;
      *(_DWORD *)buf = 136446466;
      v54 = v12;
      v55 = 1024;
      v56 = v46;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "capabilitiesResponseEvent: device %{public}s response: numCaps = %d", buf, 0x12u);
      if (v52 < 0)
        operator delete(*(void **)v47);
      if (v13)
        goto LABEL_14;
    }
    else
    {
      v13 = v46;
      if (v46)
      {
LABEL_14:
        v14 = 0;
        v42 = 0;
        v15 = (int *)(a4 + 1);
        while (1)
        {
          v16 = *((unsigned __int8 *)v15 - 1);
          if (v16 <= 0x3F)
          {
            switch(*((_BYTE *)v15 - 1))
            {
              case 1:
              case 2:
                v17 = *(unsigned __int8 *)v15;
                break;
              case 4:
                v17 = *v15;
                break;
              case 5:
                v17 = *v15;
                v18 = 5;
                goto LABEL_104;
              case 6:
                v17 = *v15;
                v18 = 6;
                goto LABEL_104;
              case 7:
                v17 = *v15;
                v18 = 7;
                goto LABEL_104;
              case 8:
                v17 = *v15;
                if ((*v15 & 1) != 0)
                  *(_BYTE *)(v41 + 152) = 1;
                goto LABEL_18;
              case 9:
              case 0xC:
              case 0xF:
              case 0x11:
              case 0x12:
              case 0x14:
                goto LABEL_17;
              case 0xA:
                v17 = *(unsigned __int8 *)v15;
                if ((v17 & 1) != 0)
                {
                  if (qword_100977E00 != -1)
                    dispatch_once(&qword_100977E00, &stru_100921C18);
                  sub_1003E4C28((_QWORD *)qword_100977DF8, (uint64_t)v7, 1);
                }
                goto LABEL_18;
              case 0xB:
                v17 = *(unsigned __int8 *)v15;
                if ((v17 & 1) != 0)
                {
                  v23 = sub_100475960();
                  v44[0] = _NSConcreteStackBlock;
                  v44[1] = 3221225472;
                  v44[2] = sub_100288E2C;
                  v44[3] = &unk_100917378;
                  v44[4] = v7;
                  sub_100041A34(v23, v44);
                }
                goto LABEL_18;
              case 0xD:
                v17 = *(unsigned __int8 *)v15;
                if ((v17 & 1) != 0)
                {
                  v24 = sub_100475960();
                  v43[0] = _NSConcreteStackBlock;
                  v43[1] = 3221225472;
                  v43[2] = sub_100288E80;
                  v43[3] = &unk_100917378;
                  v43[4] = v7;
                  sub_100041A34(v24, v43);
                }
                goto LABEL_18;
              case 0x10:
                v17 = *(unsigned __int8 *)v15;
                if (*(_BYTE *)v15)
                {
                  v25 = qword_1009997D0;
                  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
                  {
                    sub_10043E5F8((uint64_t)v7, v47);
                    v26 = v47;
                    if (v52 < 0)
                      v26 = *(uint8_t **)v47;
                    *(_DWORD *)buf = 136446210;
                    v54 = v26;
                    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "capabilitiesResponseEvent: Requested case information from device %{public}s", buf, 0xCu);
                    if (v52 < 0)
                      operator delete(*(void **)v47);
                  }
                  sub_100280B04(a1, (uint64_t)v7);
                }
                v42 = 1;
                goto LABEL_18;
              case 0x15:
                v17 = *(unsigned __int8 *)v15;
                v18 = 21;
                goto LABEL_104;
              case 0x16:
                v17 = *(unsigned __int8 *)v15;
                v18 = 22;
                goto LABEL_104;
              case 0x17:
                v17 = *(unsigned __int8 *)v15;
                v18 = 23;
                goto LABEL_104;
              case 0x18:
                v17 = *(unsigned __int8 *)v15;
                v18 = 24;
                goto LABEL_104;
              case 0x20:
                v17 = *(unsigned __int8 *)v15;
                if ((v17 & 1) != 0)
                {
                  if (qword_100977E00 != -1)
                    dispatch_once(&qword_100977E00, &stru_100921C18);
                  sub_1003E4CA8((_QWORD *)qword_100977DF8, (uint64_t)v7, 1);
                }
                goto LABEL_18;
              case 0x30:
                v17 = *v15;
                v18 = 48;
                goto LABEL_104;
              default:
                goto LABEL_96;
            }
            goto LABEL_105;
          }
          if (*((unsigned __int8 *)v15 - 1) <= 0x8Fu)
          {
            if (*((unsigned __int8 *)v15 - 1) > 0x5Fu)
            {
              if (v16 == 96)
              {
                v17 = *(unsigned __int8 *)v15;
                v18 = 96;
LABEL_104:
                sub_10044F4A8((uint64_t)v7, v18, v17);
                goto LABEL_105;
              }
              if (v16 != 128)
              {
LABEL_96:
                v29 = qword_1009997D0;
                if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
                {
                  sub_10043E5F8((uint64_t)v7, v47);
                  v30 = v47;
                  if (v52 < 0)
                    v30 = *(uint8_t **)v47;
                  v31 = *((unsigned __int8 *)v15 - 1);
                  *(_DWORD *)buf = 136446466;
                  v54 = v30;
                  v55 = 1024;
                  v56 = v31;
                  _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Warning: capabilitiesResponseEvent: device %{public}s unexpected response capId = %d", buf, 0x12u);
                  if (v52 < 0)
                    operator delete(*(void **)v47);
                }
                v17 = 0;
                goto LABEL_105;
              }
              v17 = *(unsigned __int8 *)v15;
              if ((v17 & 1) != 0)
              {
                v19 = qword_1009997D0;
                if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
                {
                  sub_10043E5F8((uint64_t)v7, v47);
                  v20 = v47;
                  if (v52 < 0)
                    v20 = *(uint8_t **)v47;
                  *(_DWORD *)buf = 136446210;
                  v54 = v20;
                  _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "capabilitiesResponseEvent: Setting double click & click and hold intervals for device %{public}s", buf, 0xCu);
                  if (v52 < 0)
                    operator delete(*(void **)v47);
                }
                if ((sub_100442118((uint64_t)v7, 29) & 1) == 0 && (sub_100442118((uint64_t)v7, 43) & 1) == 0)
                {
                  v21 = sub_10044F8E4((uint64_t)v7);
                  sub_100279E6C(a1, (uint64_t)v7, 23, v21, 1u);
                }
                if ((sub_100442118((uint64_t)v7, 30) & 1) == 0 && (sub_100442118((uint64_t)v7, 43) & 1) == 0)
                {
                  v22 = sub_10044F928((uint64_t)v7);
                  sub_100279E6C(a1, (uint64_t)v7, 24, v22, 1u);
                }
              }
            }
            else if (v16 == 64)
            {
LABEL_17:
              v17 = *(unsigned __int8 *)v15;
            }
            else
            {
              if (v16 != 80)
                goto LABEL_96;
              v17 = *(unsigned __int8 *)v15;
              if (v17 == 2)
              {
                if (qword_100977E00 != -1)
                  dispatch_once(&qword_100977E00, &stru_100921C18);
                sub_1003E4EFC((_QWORD *)qword_100977DF8, (uint64_t)v7, 1);
                v17 = 2;
              }
            }
          }
          else
          {
            if (*((unsigned __int8 *)v15 - 1) > 0xAFu)
            {
              switch(v16)
              {
                case 0xB0u:
                  v17 = *(unsigned __int8 *)v15;
                  if (v17 == 1)
                  {
                    *(_DWORD *)buf = 4;
                    if (qword_100977E00 != -1)
                      dispatch_once(&qword_100977E00, &stru_100921C18);
                    sub_1003E4D58((_QWORD *)qword_100977DF8, (uint64_t)v7, (int *)buf);
                    v27 = qword_1009997D0;
                    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)v47 = 67109120;
                      *(_DWORD *)&v47[4] = *(_DWORD *)buf;
                      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "capabilitiesResponseEvent: supportedListening modes: %u", v47, 8u);
                    }
                    v28 = *((unsigned __int8 *)v15 - 1);
                  }
                  else
                  {
                    v28 = 176;
                  }
                  sub_10044F258((uint64_t)v7, v28, v17 != 0);
                  v18 = *((unsigned __int8 *)v15 - 1);
                  break;
                case 0xE0u:
                  v17 = *(unsigned __int8 *)v15;
                  v18 = 224;
                  break;
                case 0xF0u:
                  v17 = *(unsigned __int8 *)v15;
                  v18 = 240;
                  break;
                default:
                  goto LABEL_96;
              }
              goto LABEL_104;
            }
            if (v16 == 144)
            {
              v17 = *(unsigned __int8 *)v15;
              if ((v17 & 1) != 0)
              {
                if (qword_100977E00 != -1)
                  dispatch_once(&qword_100977E00, &stru_100921C18);
                sub_1003E4E28((_QWORD *)qword_100977DF8, (uint64_t)v7, 1);
              }
            }
            else
            {
              if (v16 != 160)
                goto LABEL_96;
              v17 = *(unsigned __int8 *)v15;
              if (v17 == 1)
              {
                if (qword_100977E00 != -1)
                  dispatch_once(&qword_100977E00, &stru_100921C18);
                v17 = 1;
                sub_1003E4CF0((_QWORD *)qword_100977DF8, (uint64_t)v7, 1);
              }
            }
          }
LABEL_18:
          sub_10044F258((uint64_t)v7, *((unsigned __int8 *)v15 - 1), v17 != 0);
LABEL_105:
          v32 = qword_1009997D0;
          v11 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
          if (v11)
          {
            v33 = *((unsigned __int8 *)v15 - 1);
            *(_DWORD *)v47 = 67109632;
            *(_DWORD *)&v47[4] = v14;
            v48 = 1024;
            v49 = v33;
            v50 = 1024;
            v51 = v17;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "capabilitiesResponseEvent: index %d, capId %d, capInfo %d", v47, 0x14u);
          }
          ++v14;
          v15 = (int *)((char *)v15 + 5);
          if (v14 >= v13)
            goto LABEL_111;
        }
      }
    }
    v42 = 0;
LABEL_111:
    sub_100288ED4(v11, (uint64_t)v7);
    if ((v42 & 1) == 0)
    {
      if (sub_10044F614((uint64_t)v7))
        v34 = 0xFFFFLL;
      else
        v34 = 65533;
      sub_1002808BC(a1, (uint64_t)v7, 0xFFFFLL, v34);
    }
    v35 = *(unsigned __int8 *)(v41 + 604);
    v36 = v35 & 1;
    v37 = (v35 >> 1) & 1;
    v38 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      if (v36)
        v39 = v37;
      else
        v39 = 0;
      *(_DWORD *)v47 = 67109376;
      *(_DWORD *)&v47[4] = v39;
      v48 = 1024;
      v49 = v36;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "GAPA capabilitiesResponseEvent newlyPaired=%d invokeNow=%d", v47, 0xEu);
    }
    if (v36)
    {
      *(_BYTE *)(v41 + 604) = 0;
      sub_100289110(a1, v41, 1, v37);
    }
  }
  return sub_100034234((uint64_t)v45);
}

void sub_100288D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_100034234((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_100288E2C(uint64_t a1)
{
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100921D98);
  return sub_1004CFFDC((uint64_t)off_10097AA38, *(_QWORD *)(a1 + 32), 1);
}

uint64_t sub_100288E80(uint64_t a1)
{
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100921D98);
  return sub_1004D0064((uint64_t)off_10097AA38, *(_QWORD *)(a1 + 32), 1);
}

uint64_t sub_100288ED4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  void **v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  char v11;
  uint8_t buf[4];
  void **v13;

  sub_10044F1D0(a2);
  if (qword_1009778D8 != -1)
    dispatch_once(&qword_1009778D8, &stru_100921C38);
  sub_100422CD0((uint64_t)off_1009778D0, a2);
  result = sub_10044FE34(a2, 64);
  if ((_DWORD)result)
  {
    v4 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting up spatial audio", (uint8_t *)__p, 2u);
    }
    if (qword_100977E00 != -1)
      dispatch_once(&qword_100977E00, &stru_100921C18);
    sub_1003E4F64((_QWORD *)qword_100977DF8, a2, 1);
    v11 = 0;
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100921C78);
    result = sub_100471484((uint64_t)off_1009778E0);
    if ((_DWORD)result)
    {
      v5 = sub_10034D650();
      result = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v5 + 1208))(v5, a2, &v11);
      if ((_DWORD)result)
      {
        v6 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(a2, __p);
          if (v10 >= 0)
            v7 = __p;
          else
            v7 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v13 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Initialize spatial audio to true for %{public}s", buf, 0xCu);
          if (v10 < 0)
            operator delete(__p[0]);
        }
        CFPreferencesSetAppValue(CFSTR("spatial-audio-accessory-feature"), kCFBooleanTrue, CFSTR("com.apple.springboard"));
        CFPreferencesAppSynchronize(CFSTR("com.apple.springboard"));
        v8 = sub_10034D650();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 1216))(v8, a2, 1);
      }
    }
  }
  return result;
}

void sub_100289110(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unsigned int v5;
  BOOL v6;
  int v7;
  uint64_t v10;
  uint64_t v11;
  CFNullRef v12;
  uint64_t v13;
  uint64_t Endpoint;
  NSObject *v15;
  void **v16;
  void **v17;
  CFStringRef v18;
  uint64_t Connection;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  const __CFString *v31;
  CFIndex Length;
  uint64_t v33;
  CFDictionaryRef v34;
  CFNumberRef v35;
  NSObject *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  NSMutableArray *v46;
  id v47;
  id v48;
  NSObject *v49;
  void *v50;
  void *v51;
  NSObject *v52;
  void *v53;
  void *v54;
  NSObject *v55;
  void *v56;
  void *v57;
  NSObject *v58;
  id v59;
  NSObject *v60;
  void *v61;
  uint64_t v62;
  NSObject *v63;
  CFNumberRef v64;
  CFNumberRef v65;
  uint64_t v66;
  int v67;
  NSObject *v68;
  __CFArray *Mutable;
  CFNumberRef v70;
  NSObject *v71;
  _BYTE *v72;
  void *v73;
  NSObject *v74;
  NSObject *v75;
  int v76;
  NSObject *v77;
  uint8_t *v78;
  uint64_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  id v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  int v96;
  int v97;
  __int16 v98;
  _QWORD v99[5];
  _QWORD v100[5];
  _QWORD v101[6];
  _BYTE __p[12];
  __int16 v103;
  int v104;
  char v105;
  _BYTE valuePtr[12];
  __int16 v107;
  _BYTE v108[14];
  __int16 v109;
  uint64_t v110;
  uint8_t buf[32];
  __int128 v112;
  uint64_t v113;
  void *keys[4];
  __int128 v115;
  uint64_t v116;

  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D7888();
    return;
  }
  v5 = *(_DWORD *)(a2 + 80) - 8194;
  v6 = v5 > 0xE;
  v7 = (1 << v5) & 0x409B;
  if (!v6 && v7 != 0)
    return;
  v91 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return;
  if (!*(_QWORD *)(a2 + 128))
  {
    sub_10046E9BC((unsigned __int8 *)(v91 + 128), keys);
    if (SHIBYTE(keys[2]) >= 0)
      v17 = keys;
    else
      v17 = (void **)keys[0];
    v18 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v17, 0x8000100u);
    if (SHIBYTE(keys[2]) < 0)
      operator delete(keys[0]);
    if (!v18)
    {
      v74 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
        sub_1006D78B4(v91, v74);
      return;
    }
    Connection = acc_transportClient_createConnection(2, v18);
    if (!Connection)
    {
      v75 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
        sub_1006D793C(v91, v75);
      CFRelease(v18);
      return;
    }
    *(_QWORD *)(a2 + 128) = Connection;
    CFRelease(v18);
  }
  if (*(_BYTE *)(a2 + 152))
  {
    v10 = 0;
    while (1)
    {
      v11 = *(_QWORD *)(a2 + 160 + v10);
      if (v11)
      {
        v12 = *(CFNullRef *)(v11 + 24);
        if (v12)
          break;
      }
      v10 += 8;
      if (v10 == 256)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
          sub_1006D7B3C();
        v12 = kCFNull;
        break;
      }
    }
    v13 = *(_QWORD *)(a2 + 128);
    v101[0] = _NSConcreteStackBlock;
    v101[1] = 3221225472;
    v101[2] = sub_100294FE0;
    v101[3] = &unk_100921128;
    v101[4] = a1;
    v101[5] = v91;
    Endpoint = acc_transportClient_createEndpoint(v13, 2, 9, v12, v101, 0);
    v15 = qword_1009997D0;
    if (Endpoint)
    {
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v91, keys);
        v16 = SHIBYTE(keys[2]) >= 0 ? keys : (void **)keys[0];
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v16;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = Endpoint;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "publishAccRemoteFirmware: device %{public}s endpoint = %@", buf, 0x16u);
        if (SHIBYTE(keys[2]) < 0)
          operator delete(keys[0]);
      }
      *(_QWORD *)(a2 + 136) = Endpoint;
      *(_BYTE *)(a2 + 152) = 0;
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    {
      sub_1006D7AB4(v91, v15);
    }
  }
  v20 = 0;
  v89 = kCFACCProperties_Endpoint_EA_SessionOpen;
  v87 = (void *)kCFACCInfo_Name;
  v86 = (void *)kCFACCInfo_Manufacturer;
  v85 = (void *)kCFACCInfo_Model;
  v84 = (void *)kCFACCInfo_SerialNumber;
  v83 = kCFACCInfo_HardwareVersion;
  v21 = kCFACCInfo_FirmwareVersionActive;
  v22 = kCFACCInfo_FirmwareVersionPending;
  v23 = kCFACCProperties_Endpoint_EA_MatchAction;
  while (1)
  {
    v24 = *(_QWORD **)(a2 + 8 * v20 + 160);
    if (v24)
    {
      if (!v24[11])
        break;
    }
LABEL_50:
    if (++v20 == 32)
    {
      if (!a3)
        return;
      v40 = *(_QWORD *)(a2 + 192);
      if (v40)
      {
        v41 = *(_QWORD *)(v40 + 88);
        if (v41)
        {
          v42 = sub_10003BE44();
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 328))(v42) & 1) != 0
            || (v43 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 384))(v43) & 1) != 0)
            || (v44 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v44 + 424))(v44)))
          {
            *(_DWORD *)buf = 0;
            v45 = (void *)acc_transportClient_createEndpoint(*(_QWORD *)(a2 + 128), 2, 13, CFSTR("none"), &stru_1009211A8, 0);
            v46 = objc_opt_new(NSMutableArray);
            v47 = *(id *)(v40 + 64);
            v48 = *(id *)(v40 + 72);
            v90 = *(id *)(v40 + 24);
            if ((unint64_t)objc_msgSend(v47, "length") >= 2)
            {
              v49 = qword_1009997D0;
              if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(keys[0]) = 141558275;
                *(void **)((char *)keys + 4) = (void *)1752392040;
                WORD2(keys[1]) = 2113;
                *(void **)((char *)&keys[1] + 6) = v47;
                _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "publishAccRemoteFirmware: Left bud serial %{private, mask.hash}@", (uint8_t *)keys, 0x16u);
              }
              v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 2));
              v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", v50, kCFACCProperties_Endpoint_AACP_CertificateInfo_Type, v47, kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial, 0));
              -[NSMutableArray addObject:](v46, "addObject:", v51);

            }
            if ((unint64_t)objc_msgSend(v48, "length") >= 2)
            {
              v52 = qword_1009997D0;
              if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(keys[0]) = 141558275;
                *(void **)((char *)keys + 4) = (void *)1752392040;
                WORD2(keys[1]) = 2113;
                *(void **)((char *)&keys[1] + 6) = v48;
                _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "publishAccRemoteFirmware: Right bud serial %{private, mask.hash}@", (uint8_t *)keys, 0x16u);
              }
              v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 3));
              v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", v53, kCFACCProperties_Endpoint_AACP_CertificateInfo_Type, v48, kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial, 0));
              -[NSMutableArray addObject:](v46, "addObject:", v54);

            }
            if (!-[NSMutableArray count](v46, "count") && (unint64_t)objc_msgSend(v90, "length") >= 2)
            {
              v55 = qword_1009997D0;
              if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(keys[0]) = 141558275;
                *(void **)((char *)keys + 4) = (void *)1752392040;
                WORD2(keys[1]) = 2113;
                *(void **)((char *)&keys[1] + 6) = v90;
                _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "publishAccRemoteFirmware: Single tethered serial %{private, mask.hash}@", (uint8_t *)keys, 0x16u);
              }
              v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", 1));
              v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", v56, kCFACCProperties_Endpoint_AACP_CertificateInfo_Type, v90, kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial, 0));
              -[NSMutableArray addObject:](v46, "addObject:", v57);

              *(_DWORD *)buf = 1;
            }
            v58 = qword_1009997D0;
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(keys[0]) = 141558275;
              *(void **)((char *)keys + 4) = (void *)1752392040;
              WORD2(keys[1]) = 2113;
              *(void **)((char *)&keys[1] + 6) = v46;
              _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "publishAccRemoteFirmware: Dictionary %{private, mask.hash}@", (uint8_t *)keys, 0x16u);
            }
            if (v45)
            {
              v59 = -[NSMutableArray count](v46, "count");
              v60 = qword_1009997D0;
              if (v59)
              {
                if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
                {
                  v61 = *(void **)(a2 + 128);
                  LODWORD(keys[0]) = 138543618;
                  *(void **)((char *)keys + 4) = v45;
                  WORD2(keys[1]) = 2114;
                  *(void **)((char *)&keys[1] + 6) = v61;
                  _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "publishAccRemoteFirmware: Creating certificate endpoint %{public}@ for %{public}@", (uint8_t *)keys, 0x16u);
                }
                *(_QWORD *)(a2 + 144) = v45;
                *(_DWORD *)valuePtr = 0;
                *(_DWORD *)valuePtr = sub_10044FE34(v91, 9);
                v62 = sub_100027F68();
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v62 + 752))(v62))
                  *(_DWORD *)valuePtr = 0;
                v63 = qword_1009997D0;
                if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(keys[0]) = 67109120;
                  HIDWORD(keys[0]) = *(_DWORD *)valuePtr;
                  _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "publishAccRemoteFirmware: isCertificateSupported %d", (uint8_t *)keys, 8u);
                }
                v64 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, valuePtr);
                acc_transportClient_setPropertyForEndpointWithUUID(kCFACCProperties_Endpoint_AACP_CertificateSupported, v64, v45);
                *(_DWORD *)__p = a4;
                v65 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, __p);
                acc_transportClient_setPropertyForEndpointWithUUID(kCFACCProperties_Endpoint_AACP_FirstConnectionAfterPair, v65, v45);
                acc_transportClient_setPropertyForEndpointWithUUID(kCFACCProperties_Endpoint_AACP_CertificateSerial, v46, v45);
                if (sub_10027EA60(a1, (_DWORD *)v91, a2, *(_DWORD *)valuePtr != 0))
                {
                  *(_DWORD *)(a2 + 600) = 1;
                  v66 = sub_100065478();
                  v97 = *(_DWORD *)(v91 + 128);
                  v98 = *(_WORD *)(v91 + 132);
                  (*(void (**)(uint64_t, int *, uint64_t, _QWORD))(*(_QWORD *)v66 + 368))(v66, &v97, 1, 0);
                  v96 = 3;
                  if (qword_100977A88 != -1)
                    dispatch_once(&qword_100977A88, &stru_100921C98);
                  v88 = v47;
                  sub_100283884((uint64_t)off_100977A80, v91, &v96);
                  v67 = *(_DWORD *)buf;
                  if (!*(_DWORD *)buf)
                  {
                    if (v96 == 1)
                      v67 = 2;
                    else
                      v67 = 3;
                    *(_DWORD *)buf = v67;
                  }
                  v68 = qword_1009997D0;
                  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(keys[0]) = 67109120;
                    HIDWORD(keys[0]) = v67;
                    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "publishAccRemoteFirmware GAPA_AUTH_SUPPORTED for this connection certificateInfoType=%d", (uint8_t *)keys, 8u);
                  }
                  Mutable = CFArrayCreateMutable(0, 0, 0);
                  v47 = v88;
                  v70 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, buf);
                  CFArrayAppendValue(Mutable, v70);
                  acc_transportClient_setPropertyForEndpointWithUUID(kCFACCProperties_Endpoint_AudioProduct_AuthSupported, Mutable, v45);
                  CFRelease(v70);
                  CFArrayRemoveAllValues(Mutable);
                  CFRelease(Mutable);
                }
                v95[0] = _NSConcreteStackBlock;
                v95[1] = 3221225472;
                v95[2] = sub_100295AD8;
                v95[3] = &unk_1009211C8;
                v95[4] = a1;
                v95[5] = v91;
                acc_transportClient_setEndpointPropertyDidChangeHandler(v95, kCFACCProperties_Endpoint_AudioProduct_AuthChallenge);
                v94[0] = _NSConcreteStackBlock;
                v94[1] = 3221225472;
                v94[2] = sub_10029600C;
                v94[3] = &unk_1009211C8;
                v94[4] = a1;
                v94[5] = v91;
                acc_transportClient_setEndpointPropertyDidChangeHandler(v94, kCFACCProperties_Endpoint_AudioProduct_AuthState);
                v93[0] = _NSConcreteStackBlock;
                v93[1] = 3221225472;
                v93[2] = sub_1002962F8;
                v93[3] = &unk_1009211C8;
                v93[4] = a1;
                v93[5] = v91;
                acc_transportClient_setEndpointPropertyDidChangeHandler(v93, kCFACCProperties_Endpoint_AACP_CertificateRequired);
                CFRelease(v64);
                CFRelease(v65);
              }
              else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
              {
                sub_10043E5F8(v91, keys);
                sub_1006D7A68();
              }
              CFRelease(v45);
            }
            else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
            {
              sub_10043E5F8(v91, keys);
              sub_1006D7A1C();
            }

          }
          acc_transportClient_setPropertyForConnectionWithUUID(kCFACCProperties_Connection_EndpointUUIDForAccessoryInfo, v41, *(_QWORD *)(a2 + 128));
          v76 = acc_transportClient_publishConnection(*(_QWORD *)(a2 + 128));
          v77 = qword_1009997D0;
          if (v76)
          {
            if (!os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
              return;
            sub_10043E5F8(v91, buf);
            if ((buf[23] & 0x80u) == 0)
              v78 = buf;
            else
              v78 = *(uint8_t **)buf;
            v79 = *(_QWORD *)(a2 + 128);
            *(_DWORD *)valuePtr = 136446466;
            *(_QWORD *)&valuePtr[4] = v78;
            v107 = 2112;
            *(_QWORD *)v108 = v79;
            _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "publishAccRemoteFirmware: Published connection for device %{public}s, connection %@", valuePtr, 0x16u);
LABEL_119:
            if (((char)buf[23] & 0x80000000) == 0)
              return;
            v73 = *(void **)buf;
LABEL_121:
            operator delete(v73);
            return;
          }
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
          {
            sub_10043E5F8(v91, buf);
            if ((buf[23] & 0x80u) == 0)
              v80 = buf;
            else
              v80 = *(uint8_t **)buf;
            v81 = *(_QWORD *)(a2 + 128);
            *(_DWORD *)valuePtr = 136446466;
            *(_QWORD *)&valuePtr[4] = v80;
            v107 = 2112;
            *(_QWORD *)v108 = v81;
            _os_log_error_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "publishAccRemoteFirmware: Failed to publish connection for device %{public}s, connection %@", valuePtr, 0x16u);
            goto LABEL_119;
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
        {
          sub_1006D79F0();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      {
        sub_1006D79C4();
      }
      return;
    }
  }
  v116 = 0;
  v115 = 0u;
  memset(keys, 0, sizeof(keys));
  v113 = 0;
  v112 = 0u;
  memset(buf, 0, sizeof(buf));
  v25 = *(_QWORD *)(a2 + 128);
  v26 = v24[7];
  v100[0] = _NSConcreteStackBlock;
  v100[1] = 3221225472;
  v100[2] = sub_1002951FC;
  v100[3] = &unk_100921148;
  v100[4] = a1;
  v27 = acc_transportClient_createEndpoint(v25, 2, 7, v26, v100, 0);
  if (v27)
  {
    v99[0] = _NSConcreteStackBlock;
    v99[1] = 3221225472;
    v99[2] = sub_10029574C;
    v99[3] = &unk_100921168;
    v99[4] = a1;
    acc_transportClient_setEndpointPropertyDidChangeHandler(v99, v89);
    v24[11] = v27;
    v28 = v24 + 11;
    keys[0] = v87;
    keys[1] = v86;
    keys[2] = v85;
    keys[3] = v84;
    *(_QWORD *)&v115 = v83;
    *((_QWORD *)&v115 + 1) = v21;
    v116 = v22;
    v29 = v24[2];
    v30 = v24[3];
    *(_QWORD *)buf = *v24;
    *(_QWORD *)&buf[8] = v29;
    *(_QWORD *)&buf[16] = v24[1];
    *(_QWORD *)&buf[24] = v30;
    *((_QWORD *)&v112 + 1) = v24[10];
    v31 = (const __CFString *)v24[5];
    *(_QWORD *)&v112 = v24[6];
    Length = CFStringGetLength(v31);
    v33 = 5;
    if (!Length)
      v33 = 4;
    v113 = v24[v33];
    v34 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)buf, 7, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    acc_transportClient_setAccessoryInfo(*v28, v34);
    v35 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, v24 + 12);
    acc_transportClient_setPropertyForEndpointWithUUID(v23, v35, *v28);
    v36 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v91, __p);
      v37 = __p;
      if (v105 < 0)
        v37 = *(_BYTE **)__p;
      v38 = *(_QWORD *)(a2 + 128);
      v39 = v24[11];
      *(_DWORD *)valuePtr = 136446978;
      *(_QWORD *)&valuePtr[4] = v37;
      v107 = 1024;
      *(_DWORD *)v108 = v20;
      *(_WORD *)&v108[4] = 2112;
      *(_QWORD *)&v108[6] = v38;
      v109 = 2112;
      v110 = v39;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "publishAccRemoteFirmware: Created EA endpoint for device %{public}s (index %d), connection %@, endpoint %@", valuePtr, 0x26u);
      if (v105 < 0)
        operator delete(*(void **)__p);
    }
    CFRelease(v34);
    CFRelease(v35);
    goto LABEL_50;
  }
  v71 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_10043E5F8(v91, valuePtr);
    v72 = v108[9] >= 0 ? valuePtr : *(_BYTE **)valuePtr;
    *(_DWORD *)__p = 136446466;
    *(_QWORD *)&__p[4] = v72;
    v103 = 1024;
    v104 = v20;
    _os_log_error_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "publishAccRemoteFirmware: Failed to create CoreAccessories EA endpoint for device %{public}s (index %d)", __p, 0x12u);
    if ((v108[9] & 0x80000000) != 0)
    {
      v73 = *(void **)valuePtr;
      goto LABEL_121;
    }
  }
}

void sub_10028A124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void sub_10028A1D8(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  NSObject *v12;
  NSObject *v13;
  void **v14;
  unsigned int v15;
  void *__p[2];
  char v17;
  _QWORD v18[2];
  uint8_t buf[4];
  void **v20;
  __int16 v21;
  int v22;

  LODWORD(v5) = a3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  if (v8)
  {
    v18[0] = 0;
    v18[1] = 0;
    sub_10003415C((uint64_t)v18, a1 + 360);
    v9 = *(uint64_t ***)(a1 + 336);
    v10 = *(uint64_t ***)(a1 + 344);
    while (v9 != v10)
    {
      v11 = *v9;
      if (**v9 == v8)
      {
        v13 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043F6EC(v8, (uint64_t)__p);
          v14 = v17 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136315394;
          v20 = v14;
          v21 = 1024;
          v22 = v5;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "received battery info from device \"%s\" num reports = %d", buf, 0x12u);
          if (v17 < 0)
            operator delete(__p[0]);
        }
        if ((_DWORD)v5)
        {
          v5 = v5;
          do
          {
            v15 = a4[3] - 5;
            if (v15 >= 0xFFFFFFFE)
              sub_10028A418((uint64_t)v11, *a4);
            sub_10028A5E0(v11, a4, v15 < 0xFFFFFFFE);
            a4 += 5;
            --v5;
          }
          while (v5);
        }
        goto LABEL_23;
      }
      ++v9;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D7BF0();
LABEL_23:
    sub_100034234((uint64_t)v18);
  }
  else
  {
    v12 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D7B68(v12);
  }
}

void sub_10028A3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028A418(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  NSObject *v15;
  void **v16;
  void *__p[2];
  char v18;
  uint8_t buf[4];
  void **v20;

  v4 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10029B98C(a2, __p);
    v5 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "destroy battery info \"%{public}s\"", buf, 0xCu);
    if (v18 < 0)
      operator delete(__p[0]);
  }
  v8 = *(_QWORD *)(a1 + 32);
  v7 = a1 + 32;
  v6 = v8;
  if (v8)
  {
    v9 = (uint64_t **)(v7 - 8);
    v10 = v7;
    do
    {
      v11 = *(unsigned __int8 *)(v6 + 32);
      v12 = v11 >= a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v6;
      else
        v13 = (uint64_t *)(v6 + 8);
      if (v12)
        v10 = v6;
      v6 = *v13;
    }
    while (*v13);
    if (v10 != v7 && *(unsigned __int8 *)(v10 + 32) <= a2)
    {
      v14 = *(_QWORD *)(v10 + 40);
      if (v14)
      {
        v15 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_10029B98C(a2, __p);
          if (v18 >= 0)
            v16 = __p;
          else
            v16 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v20 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "battery instance for \"%s\" found. Destroying...", buf, 0xCu);
          if (v18 < 0)
            operator delete(__p[0]);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      sub_1000040CC(v9, (uint64_t *)v10);
      operator delete((void *)v10);
    }
  }
}

BOOL sub_10028A5E0(uint64_t *a1, char *a2, int a3)
{
  uint64_t v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  NSObject *v13;
  void **v14;
  int v15;
  const char *v16;
  const char *v17;
  NSObject *v18;
  void **v19;
  int v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unsigned __int8 v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  void *v41;
  _BOOL4 v42;
  int v43;
  uint64_t v44;
  int v46;
  uint64_t v47;
  void *__p[2];
  char v49;
  _BYTE buf[28];
  __int16 v51;
  const char *v52;

  v6 = a1[4];
  v7 = (uint64_t **)(a1 + 3);
  if (!v6)
    goto LABEL_12;
  v8 = *a2;
  v9 = a1 + 4;
  do
  {
    v10 = *(unsigned __int8 *)(v6 + 32);
    v11 = v10 >= v8;
    if (v10 >= v8)
      v12 = (uint64_t *)v6;
    else
      v12 = (uint64_t *)(v6 + 8);
    if (v11)
      v9 = (uint64_t *)v6;
    v6 = *v12;
  }
  while (*v12);
  if (v9 == a1 + 4 || v8 < *((unsigned __int8 *)v9 + 32))
  {
LABEL_12:
    v13 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10029B98C(*a2, __p);
      if (v49 >= 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      v15 = a2[2];
      if (a2[3] == 1)
        v16 = "Yes";
      else
        v16 = "No";
      if (a2[3])
        v17 = "No";
      else
        v17 = "Yes";
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v15;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v16;
      v51 = 2082;
      v52 = v17;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Create Battery for \"%{public}s\" battery, battery level %d, charging = \"%{public}s\" fully charged = \"%{public}s\"", buf, 0x26u);
      if (v49 < 0)
        operator delete(__p[0]);
    }
    sub_10034FF90();
  }
  v18 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10029B98C(v8, __p);
    if (v49 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    v20 = a2[2];
    v21 = "No";
    if (a2[3] == 1)
      v22 = "Yes";
    else
      v22 = "No";
    if (!a2[3])
      v21 = "Yes";
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = v19;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v20;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v22;
    v51 = 2082;
    v52 = v21;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Update Battery for \"%{public}s\" battery, battery level %d, charging = \"%s\" fully charged = \"%{public}s\"", buf, 0x26u);
    if (v49 < 0)
      operator delete(__p[0]);
  }
  v23 = v9[5];
  if (!v23)
  {
    v25 = 0;
    goto LABEL_76;
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 48))(v9[5], a2[2]);
  if (a2[3])
    v24 = a2[3] == 1;
  else
    v24 = 2;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 64))(v23, v24);
  sub_10029B9C0(a1, *a2, buf);
  if ((buf[23] & 0x80000000) != 0)
  {
    v26 = *(_QWORD *)&buf[8];
    operator delete(*(void **)buf);
    if (!v26)
      goto LABEL_47;
LABEL_45:
    *(_QWORD *)buf = a2;
    v27 = sub_1002A6C58(v7, (unsigned __int8 *)a2, (uint64_t)&unk_100740F58, (_BYTE **)buf)[5];
    sub_10029B9C0(a1, *a2, buf);
    (*(void (**)(uint64_t *, _BYTE *))(*v27 + 72))(v27, buf);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    goto LABEL_47;
  }
  if (buf[23])
    goto LABEL_45;
LABEL_47:
  v25 = 0;
  v28 = a2[3];
  if (v28 >= 3)
    v29 = 0;
  else
    v29 = 0x20103u >> (8 * v28);
  v30 = *a2;
  switch(*a2)
  {
    case 1:
      v31 = sub_100447694((unsigned int *)*a1, 1);
      v32 = a2[2];
      if (v31 == v32)
        goto LABEL_61;
      sub_100447A38(*a1, v32, 1);
      goto LABEL_63;
    case 2:
      v35 = sub_100447694((unsigned int *)*a1, 2);
      v36 = a2[2];
      if (v35 == v36)
        goto LABEL_61;
      sub_100447A38(*a1, v36, 2);
      goto LABEL_63;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_66;
    case 4:
      v37 = sub_100447694((unsigned int *)*a1, 4);
      v38 = a2[2];
      if (v37 == v38)
        goto LABEL_61;
      sub_100447A38(*a1, v38, 4);
      goto LABEL_63;
    case 8:
      v39 = sub_100447694((unsigned int *)*a1, 8);
      v40 = a2[2];
      if (v39 == v40)
        goto LABEL_61;
      sub_100447A38(*a1, v40, 8);
      goto LABEL_63;
    default:
      if (v30 != 16)
        goto LABEL_66;
      v33 = sub_100447694((unsigned int *)*a1, 16);
      v34 = a2[2];
      if (v33 == v34)
      {
LABEL_61:
        v25 = 0;
      }
      else
      {
        sub_100447A38(*a1, v34, 16);
LABEL_63:
        v25 = 1;
      }
      if (sub_100447B60(*a1, v29, v30))
        v25 = 1;
LABEL_66:
      LODWORD(__p[0]) = 0;
      v47 = 0;
      v46 = 0;
      sub_100444BF0(*a1, __p, (_DWORD *)&v47 + 1, &v47, &v46);
      v41 = (void *)objc_claimAutoreleasedReturnValue(+[CBProductInfo productInfoWithProductID:](CBProductInfo, "productInfoWithProductID:", v47));
      if ((objc_msgSend(v41, "flags") & 0x100000) == 0 || HIDWORD(v47) != 76)
      {

LABEL_73:
        if (a3)
        {
          sub_10029BA94((uint64_t)a1, *a2, buf);
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v23 + 24))(v23, buf);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        goto LABEL_76;
      }
      v42 = *a2 == 8;

      if (v42)
        v25 = 0;
      if (!v42)
        goto LABEL_73;
LABEL_76:
      memset(buf, 0, 24);
      v43 = a2[3];
      sub_10047D35C((uint64_t)buf, 3, 0);
      *(_DWORD *)&buf[16] = v43;
      v44 = sub_100065478();
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v44 + 56))(v44, buf);
      return v25 != 0;
  }
}

void sub_10028AE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10028AE94(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned __int8 **i;
  unsigned __int8 *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  _BYTE *v18;
  const char *v19;
  const char *v20;
  int v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint8_t *v27;
  _QWORD v28[2];
  _BYTE __p[12];
  char v30;
  uint8_t buf[24];
  const char *v32;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  *(_DWORD *)buf = *(_DWORD *)a2;
  *(_WORD *)&buf[4] = *(_WORD *)(a2 + 4);
  v6 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  if (v6)
  {
    v28[0] = 0;
    v28[1] = 0;
    sub_10003415C((uint64_t)v28, a1 + 360);
    for (i = *(unsigned __int8 ***)(a1 + 336); i != *(unsigned __int8 ***)(a1 + 344); ++i)
    {
      v8 = *i;
      if (*(_QWORD *)*i == v6)
      {
        v10 = sub_10044F614(v6);
        if ((v10 & 1) != 0)
        {
          v11 = sub_100283838(v10, *a3);
          v12 = v11;
          v13 = sub_100283838(v11, a3[1]);
          v14 = v8[10];
          if (v14 == 1)
            v15 = 2;
          else
            v15 = 1;
          v16 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v6, __p);
            v18 = v30 >= 0 ? __p : *(_BYTE **)__p;
            v19 = sub_10028385C(v17, v12);
            v20 = sub_10028385C((uint64_t)v19, v13);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = v18;
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v19;
            *(_WORD *)&buf[22] = 2082;
            v32 = v20;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "received in-ear state update from device %{public}s primary bud state = %{public}s, secondary bud state = %{public}s", buf, 0x20u);
            if (v30 < 0)
              operator delete(*(void **)__p);
          }
          v21 = v8[8];
          v22 = v12 != v21;
          if (v12 != v21)
          {
            v8[8] = v12;
            memset(buf, 0, sizeof(buf));
            sub_10047D35C((uint64_t)buf, 2, v6);
            *(_DWORD *)&buf[16] = v14;
            *(_DWORD *)&buf[20] = v12;
            v23 = sub_100065478();
            (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v23 + 56))(v23, buf);
          }
          if (v13 != v8[9])
          {
            v8[9] = v13;
            memset(buf, 0, sizeof(buf));
            sub_10047D35C((uint64_t)buf, 2, v6);
            *(_DWORD *)&buf[16] = v15;
            *(_DWORD *)&buf[20] = v13;
            v24 = sub_100065478();
            (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v24 + 56))(v24, buf);
            v22 = 1;
          }
          sub_100034264((uint64_t)v28);
          if (v22)
            sub_100282C08(v25, v6);
        }
        else
        {
          v26 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v6, buf);
            v27 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
            *(_DWORD *)__p = 136446210;
            *(_QWORD *)&__p[4] = v27;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Ignoring in-ear status update from device %{public}s that's disabled for tracking in-ear detection", __p, 0xCu);
            if ((char)buf[23] < 0)
              operator delete(*(void **)buf);
          }
        }
        goto LABEL_10;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D7CA4();
LABEL_10:
    sub_100034234((uint64_t)v28);
  }
  else
  {
    v9 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D7C1C(v9);
  }
}

void sub_10028B1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10028B214(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  _BYTE **v7;
  _BYTE **v8;
  _BYTE *v9;
  NSObject *v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  _BYTE *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  int v19;
  int v20;
  BOOL v21;
  const char *v22;
  const char *v23;
  int v24;
  _BOOL4 v25;
  uint64_t v26;
  NSObject *v27;
  _BYTE *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  NSObject *v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  NSObject *v36;
  _BYTE *v37;
  int v38;
  NSObject *v39;
  _BYTE *v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  NSObject *v51;
  _BYTE *v52;
  uint64_t v53;
  void *v54[2];
  char v55;
  void *v56[2];
  char v57;
  _QWORD v58[2];
  _BYTE __p[18];
  char v60;
  _BYTE buf[14];
  _BYTE v62[10];
  const char *v63;
  __int16 v64;
  const char *v65;
  __int16 v66;
  const char *v67;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  *(_DWORD *)buf = *(_DWORD *)a2;
  *(_WORD *)&buf[4] = *(_WORD *)(a2 + 4);
  v6 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  if (v6)
  {
    v58[0] = 0;
    v58[1] = 0;
    sub_10003415C((uint64_t)v58, a1 + 360);
    v7 = *(_BYTE ***)(a1 + 336);
    v8 = *(_BYTE ***)(a1 + 344);
    if (v7 == v8)
    {
LABEL_7:
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
        sub_1006D7D58();
    }
    else
    {
      while (1)
      {
        v9 = *v7;
        if (*(_QWORD *)*v7 == v6)
          break;
        if (++v7 == v8)
          goto LABEL_7;
      }
      v11 = *a3;
      if (v11 == 2)
        v12 = 2;
      else
        v12 = 3;
      if (v11 == 1)
        v13 = 1;
      else
        v13 = v12;
      v14 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v6, __p);
        if (v60 >= 0)
          v15 = __p;
        else
          v15 = *(_BYTE **)__p;
        v16 = "unknown";
        if (v13 == 2)
          v16 = "right";
        if (v13 == 1)
          v17 = "left";
        else
          v17 = v16;
        v18 = "Yes";
        v19 = *(unsigned __int8 *)(a1 + 430);
        v20 = a3[3];
        v21 = a3[2] == 0;
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = v15;
        v22 = "not";
        if (v21)
          v18 = "No";
        if (v19)
          v22 = "is";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)v62 = v17;
        v23 = "disabled";
        *(_WORD *)&v62[8] = 2082;
        v63 = v18;
        v64 = 2082;
        v65 = v22;
        if (v20)
          v23 = "enabled";
        v66 = 2082;
        v67 = v23;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "received role state from device %{public}s, primary bud side is \"%{public}s\", secondary connected = %{public}s, magnet %{public}s connected, quickdisconnect %{public}s", buf, 0x34u);
        if (v60 < 0)
          operator delete(*(void **)__p);
      }
      v24 = v9[10];
      v25 = v13 != v24;
      if (v13 != v24)
        v9[10] = v13;
      if (!a3[2] && sub_10044F614(v6) && v9[9] != 3)
      {
        v9[9] = 3;
        v25 = 1;
      }
      sub_100034264((uint64_t)v58);
      if (v25)
      {
        sub_100282C08(v26, v6);
        if (sub_10027F3E0(a1, v6))
        {
          v27 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            sub_10046E9BC((unsigned __int8 *)(v6 + 128), buf);
            v28 = v62[9] >= 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)__p = 67109378;
            *(_DWORD *)&__p[4] = v13;
            *(_WORD *)&__p[8] = 2082;
            *(_QWORD *)&__p[10] = v28;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Sending current primary bud side as %d to other end of magnet link for device %{public}s", __p, 0x12u);
            if ((v62[9] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          v29 = sub_10034FCFC();
          v30 = (unsigned __int8 *)(v6 + 128);
          sub_10046E9BC((unsigned __int8 *)(v6 + 128), v56);
          (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v29 + 144))(v29, v56, v13);
          if (v57 < 0)
            operator delete(v56[0]);
          v31 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            v32 = v9[11];
            v33 = v9[9];
            *(_DWORD *)buf = 67109632;
            *(_DWORD *)&buf[4] = v32;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v13;
            *(_WORD *)v62 = 1024;
            *(_DWORD *)&v62[2] = v33;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Primary bud info over magnet link before -> %d, primary bud info from Headset -> %d, current connection secondary bud in ear status -> %d", buf, 0x14u);
          }
          v34 = sub_10003BE44();
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 344))(v34)
            || (v35 = v9[11], v35 == 3)
            || v13 == v35
            || v9[9] != 3)
          {
            if (sub_10027F8E0((uint64_t)v9))
            {
              v41 = qword_1009997D0;
              if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
              {
                if (v9[617])
                  v49 = v9 + 611;
                else
                  v49 = v9 + 605;
                *(_DWORD *)__p = *(_DWORD *)v49;
                *(_WORD *)&__p[4] = *((_WORD *)v49 + 2);
                v50 = sub_10025304C((uint64_t)__p, v42, v43, v44, v45, v46, v47, v48);
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = v50;
                _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Peer source \"%{public}s\" is currently connected in TiPi, skip connection stealing", buf, 0xCu);
              }
            }
            else if (a3[3] && sub_10028B98C((uint64_t)v9))
            {
              v51 = qword_1009997D0;
              if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
              {
                sub_10043E5F8(v6, buf);
                v52 = v62[9] >= 0 ? buf : *(_BYTE **)buf;
                *(_DWORD *)__p = 136446210;
                *(_QWORD *)&__p[4] = v52;
                _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Sending message to Phone/Watch to connect to device %{public}s", __p, 0xCu);
                if ((v62[9] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
              }
              v53 = sub_10034FCFC();
              sub_10046E9BC(v30, v54);
              (*(void (**)(uint64_t, void **, BOOL))(*(_QWORD *)v53 + 128))(v53, v54, a3[3] != 0);
              if (v55 < 0)
                operator delete(v54[0]);
            }
          }
          else
          {
            v36 = qword_1009997D0;
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043E5F8(v6, __p);
              v37 = v60 >= 0 ? __p : *(_BYTE **)__p;
              v38 = v9[11];
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = v37;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)v62 = v38;
              *(_WORD *)&v62[4] = 1024;
              *(_DWORD *)&v62[6] = v13;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Info update from Headset, Primary bud side  for device %{public}s seen locally is different from that of companion, we see  %d, and companion sees %d. Requesting connected Bud to be secondary", buf, 0x18u);
              if (v60 < 0)
                operator delete(*(void **)__p);
            }
            sub_100279E6C(a1, v6, 8, 2, 1u);
            v39 = qword_1009997D0;
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
            {
              sub_10043E5F8(v6, buf);
              v40 = v62[9] >= 0 ? buf : *(_BYTE **)buf;
              *(_DWORD *)__p = 136446210;
              *(_QWORD *)&__p[4] = v40;
              _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Schedule reconnection to W1 device after LSTO (5 seconds) on Gizmo, device : %{public}s", __p, 0xCu);
              if ((v62[9] & 0x80000000) != 0)
                operator delete(*(void **)buf);
            }
            *(_DWORD *)buf = *(_DWORD *)v30;
            *(_WORD *)&buf[4] = *(_WORD *)(v6 + 132);
            if (qword_100977A78 != -1)
              dispatch_once(&qword_100977A78, &stru_100921CD8);
            sub_1004989D8((uint64_t)off_100977A70, buf);
          }
        }
      }
    }
    sub_100034234((uint64_t)v58);
  }
  else
  {
    v10 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D7CD0(v10);
  }
}

void sub_10028B928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_100034234((uint64_t)&a21);
  _Unwind_Resume(a1);
}

BOOL sub_10028B98C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 344))(v2) & 1) != 0 || *(_BYTE *)(a1 + 728))
    return 1;
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return !*((_BYTE *)off_100977A80 + 520) && !sub_10027F8E0(a1) && sub_10044F658(*(_QWORD *)a1) != 1;
}

uint64_t sub_10028BA28(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *i;
  _QWORD *v11;
  NSObject *v12;
  char *v13;
  int v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  void *__p[2];
  char v27;
  _QWORD v28[2];
  uint8_t buf[4];
  char *v30;
  __int16 v31;
  void **v32;
  __int16 v33;
  uint64_t v34;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v30) = *(_WORD *)(a2 + 4);
  result = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v9 = result;
  if (result)
  {
    v28[0] = 0;
    v28[1] = 0;
    sub_10003415C((uint64_t)v28, a1 + 360);
    for (i = *(_QWORD **)(a1 + 336); i != *(_QWORD **)(a1 + 344); ++i)
    {
      v11 = (_QWORD *)*i;
      if (*(_QWORD *)*i == v9)
        goto LABEL_9;
    }
    v11 = 0;
LABEL_9:
    v12 = qword_1009997D0;
    if (!os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      goto LABEL_16;
    v13 = a4 == 1 ? "Pair success" : "Pair failed";
    sub_10043F6EC(v9, (uint64_t)__p);
    v14 = v27;
    v15 = (void **)__p[0];
    v23 = sub_10025304C(a3, v16, v17, v18, v19, v20, v21, v22);
    v24 = __p;
    *(_DWORD *)buf = 136446722;
    if (v14 < 0)
      v24 = v15;
    v30 = v13;
    v31 = 2080;
    v32 = v24;
    v33 = 2080;
    v34 = v23;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "received easy pair response \"%{public}s\" from device \"%s\", for address \"%s\" ", buf, 0x20u);
    if (v27 < 0)
    {
      operator delete(__p[0]);
      if (v11)
      {
LABEL_17:
        v25 = v11[6];
        if (v25)
        {
          *(_DWORD *)buf = *(_DWORD *)a2;
          LOWORD(v30) = *(_WORD *)(a2 + 4);
          LODWORD(__p[0]) = *(_DWORD *)a3;
          WORD2(__p[0]) = *(_WORD *)(a3 + 4);
          sub_10026E324(v25, (uint64_t)buf, (uint64_t)__p, a4 != 1);
        }
      }
    }
    else
    {
LABEL_16:
      if (v11)
        goto LABEL_17;
    }
    return sub_100034234((uint64_t)v28);
  }
  return result;
}

void sub_10028BC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_10028BC64(uint64_t a1, uint64_t a2, unint64_t a3, int a4, int a5)
{
  uint64_t result;
  uint64_t v11;
  _QWORD **v12;
  _QWORD **v13;
  _QWORD *v14;
  unint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  _BOOL8 v27;
  unsigned __int8 v28[6];
  _QWORD v29[2];
  uint8_t buf[4];
  uint64_t v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  const char *v35;
  int v36;
  __int16 v37;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  result = sub_10006D488((uint64_t)off_1009778E0, a2, 1);
  if (result)
  {
    v11 = result;
    v29[0] = 0;
    v29[1] = 0;
    sub_10003415C((uint64_t)v29, a1 + 360);
    v12 = *(_QWORD ***)(a1 + 336);
    v13 = *(_QWORD ***)(a1 + 344);
    while (v12 != v13)
    {
      v14 = *v12;
      if (**v12 == v11)
      {
        v15 = sub_100225368(a3);
        v36 = v15;
        v37 = WORD2(v15);
        v16 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          v24 = sub_10025304C((uint64_t)&v36, v17, v18, v19, v20, v21, v22, v23);
          v25 = "Connected";
          if (!a4)
            v25 = "Disconnected";
          *(_DWORD *)buf = 136446722;
          v31 = v24;
          v32 = 2082;
          v33 = v25;
          if (a5 == 1)
            v26 = "Source";
          else
            v26 = "UTP";
          v34 = 2082;
          v35 = v26;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Received connection state info : target addr = \"%{public}s\", connState %{public}s, connType = \"%{public}s\" ", buf, 0x20u);
        }
        if (a5 == 1)
        {
          v28[0] = BYTE5(a3);
          v28[1] = BYTE4(a3);
          v28[2] = BYTE3(a3);
          v28[3] = BYTE2(a3);
          v28[4] = BYTE1(a3);
          v28[5] = a3;
          sub_10027F5A4((uint64_t)v14, v28, a4);
          v27 = sub_10027F8E0((uint64_t)v14);
          sub_10027F83C(v27, v11, v27);
        }
        return sub_100034234((uint64_t)v29);
      }
      ++v12;
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(v11, buf);
      sub_1006D7D84();
    }
    return sub_100034234((uint64_t)v29);
  }
  return result;
}

void sub_10028BE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028BEBC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  NSObject *v8;
  void **v9;
  void **v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  _QWORD v16[2];
  void *v17[2];
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  uint8_t buf[4];
  void **v22;
  __int16 v23;
  void **v24;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  v7 = sub_10006D488((uint64_t)off_1009778E0, a2, 1);
  __p[0] = 0;
  __p[1] = 0;
  v20 = 0;
  sub_100091AE8(__p, "");
  if (a4 == 2)
  {
    sub_100091AE8(v17, "streaming A2DP");
  }
  else if (a4 == 1)
  {
    sub_100091AE8(v17, "streaming SCO");
  }
  else if (a4)
  {
    sub_100091AE8(v17, "in unknown state");
  }
  else
  {
    sub_100091AE8(v17, "stopped streaming");
  }
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = *(_OWORD *)v17;
  v20 = v18;
  v8 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(v7, (uint64_t)v17);
    if (v18 >= 0)
      v9 = v17;
    else
      v9 = (void **)v17[0];
    v10 = __p;
    if (v20 < 0)
      v10 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v22 = v9;
    v23 = 2080;
    v24 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received device %s stream state info: %s", buf, 0x16u);
    if (SHIBYTE(v18) < 0)
      operator delete(v17[0]);
  }
  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 360);
  if (v7)
  {
    v11 = *(_QWORD **)(a1 + 336);
    v12 = *(_QWORD **)(a1 + 344);
    while (v11 != v12)
    {
      v13 = (_QWORD *)*v11;
      if (*(_QWORD *)*v11 == v7)
      {
        if (*((_DWORD *)v13 + 4) != a4)
        {
          if (qword_1009778D8 != -1)
            dispatch_once(&qword_1009778D8, &stru_100921C38);
          sub_100421C00((uint64_t)off_1009778D0, v7, a4);
        }
        v14 = 0;
        *((_DWORD *)v13 + 4) = a4;
        goto LABEL_28;
      }
      ++v11;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_10043F6EC(v7, (uint64_t)v17);
    sub_1006D7E1C();
  }
  v14 = 1;
LABEL_28:
  sub_100034264((uint64_t)v16);
  if ((v14 & 1) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    {
      sub_10043F6EC(v7, (uint64_t)buf);
      sub_1006D7DD0();
    }
  }
  else
  {
    sub_10028C210(v15, v7, a4);
  }
  sub_100034234((uint64_t)v16);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

void sub_10028C1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_100034234((uint64_t)&a10);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10028C210(uint64_t a1, uint64_t a2, char a3)
{
  NSObject *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];
  char v10;
  _QWORD v11[5];
  char v12;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;

  v5 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_INFO))
  {
    sub_10043F6EC(a2, (uint64_t)__p);
    if (v14 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Notify stream state change for device \"%s\"", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  v7 = sub_100475960();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10029B02C;
  v11[3] = &unk_100918888;
  v11[4] = a2;
  v12 = a3;
  sub_100041A34(v7, v11);
  v8 = sub_1004759E0();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10029B080;
  v9[3] = &unk_100918888;
  v9[4] = a2;
  v10 = a3;
  sub_100041A34(v8, v9);
}

uint64_t sub_10028C35C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  unsigned __int8 *v9;
  unsigned __int8 ***i;
  unsigned __int8 **v11;
  NSObject *v12;
  const char *v13;
  int v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  int v25;
  uint64_t v26;
  int v27;
  void *__p[2];
  char v29;
  _QWORD v30[2];
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  void **v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v32) = *(_WORD *)(a2 + 4);
  result = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v9 = (unsigned __int8 *)result;
  if (result)
  {
    v30[0] = 0;
    v30[1] = 0;
    sub_10003415C((uint64_t)v30, a1 + 360);
    for (i = *(unsigned __int8 ****)(a1 + 336); i != *(unsigned __int8 ****)(a1 + 344); ++i)
    {
      v11 = *i;
      if (**i == v9)
        goto LABEL_9;
    }
    v11 = 0;
LABEL_9:
    v12 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      if (a4)
        v13 = "paired";
      else
        v13 = "not paired";
      sub_10043F6EC((uint64_t)v9, (uint64_t)__p);
      v14 = v29;
      v15 = (void **)__p[0];
      v23 = sub_10025304C(a3, v16, v17, v18, v19, v20, v21, v22);
      v24 = __p;
      v25 = *((unsigned __int8 *)v11 + 12);
      if (v14 < 0)
        v24 = v15;
      *(_DWORD *)buf = 136446978;
      v32 = v13;
      v33 = 2080;
      v34 = v24;
      v35 = 2080;
      v36 = v23;
      v37 = 1024;
      v38 = v25;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "received triangle status response \"%{public}s\" from device \"%s\", for address \"%s\", easy unpairing? - %d", buf, 0x26u);
      if (v29 < 0)
        operator delete(__p[0]);
    }
    else if (!v11)
    {
      return sub_100034234((uint64_t)v30);
    }
    *((_BYTE *)v11 + 84) = a4;
    if (*((_BYTE *)v11 + 12))
    {
      *((_BYTE *)v11 + 12) = 0;
      if (qword_100978150 != -1)
        dispatch_once(&qword_100978150, &stru_100921BD8);
      sub_1005B8A08((uint64_t)off_100978148, v9, 2u);
    }
    else
    {
      v26 = (uint64_t)v11[6];
      if (v26)
      {
        *(_DWORD *)buf = *(_DWORD *)a2;
        LOWORD(v32) = *(_WORD *)(a2 + 4);
        LODWORD(__p[0]) = *(_DWORD *)a3;
        WORD2(__p[0]) = *(_WORD *)(a3 + 4);
        if (a4)
          v27 = 2;
        else
          v27 = 1;
        sub_10026DE78(v26, (uint64_t)buf, (unsigned __int8 *)__p, v27);
      }
    }
    return sub_100034234((uint64_t)v30);
  }
  return result;
}

void sub_10028C5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_10028C604(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned __int8 *v8;
  unsigned __int8 ***i;
  int v10;
  _BYTE *v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t *k;
  NSObject *v16;
  int v17;
  int v18;
  _BYTE *v19;
  int v20;
  char v21;
  _QWORD *v23;
  uint64_t v24;
  NSObject *v25;
  _BYTE *v26;
  void *v27;
  NSObject *v28;
  _BYTE *v29;
  _BYTE *v30;
  _QWORD *v32;
  uint64_t v33;
  NSObject *v34;
  _BYTE *v35;
  void *v36;
  NSObject *v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t *j;
  NSObject *v41;
  int v42;
  int v43;
  _BYTE *v44;
  int v45;
  uint64_t v48;
  int v49;
  NSObject *v50;
  _BYTE *v51;
  void *v52;
  NSObject *v53;
  uint64_t v56;
  int v57;
  NSObject *v58;
  _BOOL4 v59;
  _BYTE *v60;
  void *v61;
  uint64_t v62;
  _BYTE *v63;
  NSObject *v64;
  const char *v65;
  uint32_t v66;
  _BYTE *v67;
  unsigned int v68;
  _BYTE *v69;
  _BYTE *v70;
  _BOOL4 v72;
  _QWORD v73[2];
  unsigned __int8 v74[8];
  _BYTE buf[14];
  _BYTE v76[10];
  int v77;
  _BYTE __p[12];
  __int16 v79;
  _BYTE *v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;

  LODWORD(v5) = a3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  *(_DWORD *)buf = *(_DWORD *)a2;
  *(_WORD *)&buf[4] = *(_WORD *)(a2 + 4);
  v8 = (unsigned __int8 *)sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  *(_DWORD *)&v74[3] = 0;
  *(_DWORD *)v74 = 0;
  v85 = 0;
  v86 = 0;
  v84 = 0uLL;
  v82 = 0;
  v83 = 0;
  v73[0] = 0;
  v73[1] = 0;
  sub_10003415C((uint64_t)v73, a1 + 360);
  if (v8)
  {
    for (i = *(unsigned __int8 ****)(a1 + 336); ; ++i)
    {
      if (i == *(unsigned __int8 ****)(a1 + 344))
        return sub_100034234((uint64_t)v73);
      if (**i == v8)
        break;
    }
    if ((_DWORD)v5 && a4)
    {
      v10 = v8[952];
      if (qword_100977A68 != -1)
        dispatch_once(&qword_100977A68, &stru_100921C58);
      v11 = off_100977A60;
      if (sub_10045D35C())
      {
        v72 = v11[240] != 0;
        if (v10)
          goto LABEL_23;
      }
      else
      {
        v72 = 0;
        if (v10)
          goto LABEL_23;
      }
      if (v8[980])
      {
        if (qword_100977A68 != -1)
          dispatch_once(&qword_100977A68, &stru_100921C58);
        if ((v72 & sub_10045E940((uint64_t)off_100977A60, (uint64_t)v8) & 1) == 0)
          goto LABEL_23;
        goto LABEL_22;
      }
      if (v72)
      {
LABEL_22:
        if (v8[981])
          goto LABEL_23;
        v74[0] = 0;
        *(_DWORD *)&v74[1] = *(_DWORD *)a2;
        *(_WORD *)&v74[5] = *(_WORD *)(a2 + 4);
        if (qword_100977FB0 != -1)
          dispatch_once(&qword_100977FB0, &stru_100921D78);
        sub_1006844B8((uint64_t)off_100977FA8, ((unint64_t)v74[1] << 40) | ((unint64_t)v74[2] << 32) | ((unint64_t)v74[3] << 24) | ((unint64_t)v74[4] << 16) | ((unint64_t)v74[5] << 8) | v74[6] | ((unint64_t)v74[0] << 48), (uint64_t)&v85);
        if (qword_1009778B8 != -1)
          dispatch_once(&qword_1009778B8, &stru_100921D38);
        sub_1006A12D8(qword_1009778B0, v74, &v84);
        v5 = v5;
        for (j = (uint64_t *)(a4 + 8); ; j += 2)
        {
          v41 = qword_100999870;
          if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
          {
            v42 = *((unsigned __int16 *)j - 4);
            v43 = *((unsigned __int16 *)j - 3);
            sub_10043F6EC((uint64_t)v8, (uint64_t)__p);
            v44 = v81 >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 67109634;
            *(_DWORD *)&buf[4] = v42;
            *(_WORD *)&buf[8] = 1024;
            *(_DWORD *)&buf[10] = v43;
            *(_WORD *)v76 = 2080;
            *(_QWORD *)&v76[2] = v44;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "received Key update with keyType = %x, keyLength = %d  from device\"%s\" ", buf, 0x18u);
            if (v81 < 0)
              operator delete(*(void **)__p);
          }
          v45 = *((unsigned __int16 *)j - 4);
          if (v45 == 1)
            break;
LABEL_142:
          if (v45 != 4)
            goto LABEL_171;
          if (*(_QWORD *)*j == v82 && *(_QWORD *)(*j + 8) == v83)
          {
            v62 = qword_100999870;
            if (!os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
              goto LABEL_171;
            sub_10043F6EC((uint64_t)v8, (uint64_t)buf);
            v63 = buf;
            if (v76[9] < 0)
              v63 = *(_BYTE **)buf;
            *(_DWORD *)__p = 136315138;
            *(_QWORD *)&__p[4] = v63;
            v64 = v62;
            v65 = " Received invalid Enc key from %s";
            v66 = 12;
            goto LABEL_186;
          }
          if (qword_100977A68 != -1)
            dispatch_once(&qword_100977A68, &stru_100921C58);
          sub_100462050((uint64_t)off_100977A60, (uint64_t)v8, (_QWORD *)*j);
          if (v85 == *(_QWORD *)*j && v86 == *(_QWORD *)(*j + 8))
            goto LABEL_171;
          if (qword_100977FB0 != -1)
            dispatch_once(&qword_100977FB0, &stru_100921D78);
          sub_10066DE10((uint64_t)off_100977FA8, v74, *j);
          v56 = sub_10034D508();
          v57 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)v56 + 88))(v56, v8, 3, *j);
          v58 = qword_100999870;
          v59 = os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR);
          if (v57)
          {
            if (!v59)
              goto LABEL_171;
            sub_10043F6EC((uint64_t)v8, (uint64_t)__p);
            v60 = v81 >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 141558531;
            *(_QWORD *)&buf[4] = 1752392040;
            *(_WORD *)&buf[12] = 2081;
            *(_QWORD *)v76 = v60;
            *(_WORD *)&v76[8] = 1024;
            v77 = v57;
            _os_log_error_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "Failed to store encryption key to storage for device %{private, mask.hash}s with error %d", buf, 0x1Cu);
            if ((v81 & 0x80000000) == 0)
              goto LABEL_171;
            v61 = *(void **)__p;
            goto LABEL_188;
          }
          if (v59)
          {
            sub_10043F6EC((uint64_t)v8, (uint64_t)buf);
            v70 = buf;
            if (v76[9] < 0)
              v70 = *(_BYTE **)buf;
            *(_DWORD *)__p = 141558275;
            *(_QWORD *)&__p[4] = 1752392040;
            v79 = 2081;
            v80 = v70;
            v64 = v58;
            v65 = "Successfully stored encryption key to storage for device %{private, mask.hash}s ";
            v66 = 22;
LABEL_186:
            _os_log_error_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, v65, __p, v66);
            if ((v76[9] & 0x80000000) != 0)
            {
              v61 = *(void **)buf;
LABEL_188:
              operator delete(v61);
            }
          }
LABEL_171:
          if (*((_WORD *)j - 4) == 256)
          {
            v68 = *(_DWORD *)*j;
            if (qword_100977A68 != -1)
              dispatch_once(&qword_100977A68, &stru_100921C58);
            sub_1004624D8((uint64_t)off_100977A60, (uint64_t)v8, v68);
          }
          if (!--v5)
            return sub_100034234((uint64_t)v73);
        }
        if (*(_QWORD *)*j == v82 && *(_QWORD *)(*j + 8) == v83)
        {
          v53 = qword_100999870;
          if (!os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
            goto LABEL_141;
          sub_10043F6EC((uint64_t)v8, (uint64_t)buf);
          v69 = buf;
          if (v76[9] < 0)
            v69 = *(_BYTE **)buf;
          *(_DWORD *)__p = 136315138;
          *(_QWORD *)&__p[4] = v69;
          _os_log_error_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, " Received invalid IRK from %s", __p, 0xCu);
        }
        else
        {
          if (qword_100977A68 != -1)
            dispatch_once(&qword_100977A68, &stru_100921C58);
          sub_100461CE4((uint64_t)off_100977A60, (uint64_t)v8, (_OWORD *)*j);
          if ((_QWORD)v84 == *(_QWORD *)*j && *((_QWORD *)&v84 + 1) == *(_QWORD *)(*j + 8))
            goto LABEL_141;
          if (qword_1009778B8 != -1)
            dispatch_once(&qword_1009778B8, &stru_100921D38);
          sub_100694CF4(qword_1009778B0, v74, *j);
          v48 = sub_10034D508();
          v49 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)v48 + 88))(v48, v8, 2, *j);
          v50 = qword_100999870;
          if (v49)
          {
            if (!os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
              goto LABEL_141;
            sub_10043F6EC((uint64_t)v8, (uint64_t)__p);
            v51 = v81 >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 141558531;
            *(_QWORD *)&buf[4] = 1752392040;
            *(_WORD *)&buf[12] = 2081;
            *(_QWORD *)v76 = v51;
            *(_WORD *)&v76[8] = 1024;
            v77 = v49;
            _os_log_error_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "Failed to store IRK to storage for device %{private, mask.hash}s with error %d", buf, 0x1Cu);
            if ((v81 & 0x80000000) == 0)
              goto LABEL_141;
            v52 = *(void **)__p;
            goto LABEL_182;
          }
          if (!os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_INFO))
          {
LABEL_141:
            v45 = *((unsigned __int16 *)j - 4);
            goto LABEL_142;
          }
          sub_10043F6EC((uint64_t)v8, (uint64_t)buf);
          v67 = buf;
          if (v76[9] < 0)
            v67 = *(_BYTE **)buf;
          *(_DWORD *)__p = 141558275;
          *(_QWORD *)&__p[4] = 1752392040;
          v79 = 2081;
          v80 = v67;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "Successfully stored IRK to storage for device %{private, mask.hash}s ", __p, 0x16u);
        }
        if ((v76[9] & 0x80000000) != 0)
        {
          v52 = *(void **)buf;
LABEL_182:
          operator delete(v52);
          goto LABEL_141;
        }
        goto LABEL_141;
      }
LABEL_23:
      v74[0] = 0;
      *(_DWORD *)&v74[1] = *(_DWORD *)a2;
      *(_WORD *)&v74[5] = *(_WORD *)(a2 + 4);
      if (qword_1009778B8 != -1)
        dispatch_once(&qword_1009778B8, &stru_100921D38);
      v12 = sub_1006A12D8(qword_1009778B0, v74, &v84);
      v13 = 0;
      v14 = v5;
      for (k = (uint64_t *)(a4 + 8); ; k += 2)
      {
        v16 = qword_100999870;
        if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
        {
          v17 = *((unsigned __int16 *)k - 4);
          v18 = *((unsigned __int16 *)k - 3);
          sub_10043F6EC((uint64_t)v8, (uint64_t)__p);
          v19 = __p;
          if (v81 < 0)
            v19 = *(_BYTE **)__p;
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&buf[4] = v17;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v18;
          *(_WORD *)v76 = 2080;
          *(_QWORD *)&v76[2] = v19;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Device received non-magic Key update with keyType = %x, keyLength = %d from device\"%s\" ", buf, 0x18u);
          if (v81 < 0)
            operator delete(*(void **)__p);
        }
        v20 = *((unsigned __int16 *)k - 4);
        v21 = v20 == 1 ? v12 : 1;
        if ((v21 & 1) == 0)
          break;
LABEL_66:
        if (v20 != 4)
          goto LABEL_97;
        if (v85 == *(_QWORD *)*k && v86 == *(_QWORD *)(*k + 8))
        {
          v34 = qword_100999870;
          if (!os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
            goto LABEL_97;
          sub_10043F6EC((uint64_t)v8, (uint64_t)buf);
          v35 = buf;
          if (v76[9] < 0)
            v35 = *(_BYTE **)buf;
          *(_DWORD *)__p = 136315138;
          *(_QWORD *)&__p[4] = v35;
          _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "Receive invalid non-magic Enc Key from %s", __p, 0xCu);
          if ((v76[9] & 0x80000000) == 0)
            goto LABEL_97;
          v36 = *(void **)buf;
          goto LABEL_90;
        }
        if (qword_100977FB0 != -1)
          dispatch_once(&qword_100977FB0, &stru_100921D78);
        sub_10066DE10((uint64_t)off_100977FA8, v74, *k);
        if (v10)
        {
          v32 = (_QWORD *)sub_10034D508();
          v33 = 14;
LABEL_83:
          v13 = (*(uint64_t (**)(void))(*v32 + 8 * v33))();
          goto LABEL_84;
        }
        if (!v72 || v8[981])
          goto LABEL_82;
        if (v8[980])
        {
          if (qword_100977A68 != -1)
            dispatch_once(&qword_100977A68, &stru_100921C58);
          if ((sub_10045E940((uint64_t)off_100977A60, (uint64_t)v8) & 1) == 0)
          {
LABEL_82:
            v32 = (_QWORD *)sub_10034D508();
            v33 = 11;
            goto LABEL_83;
          }
        }
LABEL_84:
        v37 = qword_100999870;
        if (!v13)
        {
          if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_INFO))
          {
            sub_10043F6EC((uint64_t)v8, (uint64_t)buf);
            v39 = buf;
            if (v76[9] < 0)
              v39 = *(_BYTE **)buf;
            *(_DWORD *)__p = 141558275;
            *(_QWORD *)&__p[4] = 1752392040;
            v79 = 2081;
            v80 = v39;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "Successfully stored non-magic Enc Key to storage for device %{private, mask.hash}s ", __p, 0x16u);
            if ((v76[9] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          v13 = 0;
          goto LABEL_97;
        }
        if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
        {
          sub_10043F6EC((uint64_t)v8, (uint64_t)__p);
          v38 = __p;
          if (v81 < 0)
            v38 = *(_BYTE **)__p;
          *(_DWORD *)buf = 141558531;
          *(_QWORD *)&buf[4] = 1752392040;
          *(_WORD *)&buf[12] = 2081;
          *(_QWORD *)v76 = v38;
          *(_WORD *)&v76[8] = 1024;
          v77 = v13;
          _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Failed to store non-magic Enc Key to storage for device %{private, mask.hash}s with error %d", buf, 0x1Cu);
          if (v81 < 0)
          {
            v36 = *(void **)__p;
LABEL_90:
            operator delete(v36);
          }
        }
LABEL_97:
        if (!--v14)
          return sub_100034234((uint64_t)v73);
      }
      if ((_QWORD)v84 == *(_QWORD *)*k && *((_QWORD *)&v84 + 1) == *(_QWORD *)(*k + 8))
      {
        v25 = qword_100999870;
        if (!os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
          goto LABEL_65;
        sub_10043F6EC((uint64_t)v8, (uint64_t)buf);
        v26 = buf;
        if (v76[9] < 0)
          v26 = *(_BYTE **)buf;
        *(_DWORD *)__p = 136315138;
        *(_QWORD *)&__p[4] = v26;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Received invalid non-magic key from %s", __p, 0xCu);
        if ((v76[9] & 0x80000000) == 0)
          goto LABEL_65;
        v27 = *(void **)buf;
        goto LABEL_58;
      }
      if (qword_1009778B8 != -1)
        dispatch_once(&qword_1009778B8, &stru_100921D38);
      sub_100694CF4(qword_1009778B0, v74, *k);
      if (v10)
      {
        v23 = (_QWORD *)sub_10034D508();
        v24 = 14;
      }
      else
      {
        if (v72 && !v8[981])
        {
          if (!v8[980])
            goto LABEL_52;
          if (qword_100977A68 != -1)
            dispatch_once(&qword_100977A68, &stru_100921C58);
          if ((sub_10045E940((uint64_t)off_100977A60, (uint64_t)v8) & 1) != 0)
            goto LABEL_52;
        }
        v23 = (_QWORD *)sub_10034D508();
        v24 = 11;
      }
      v13 = (*(uint64_t (**)(void))(*v23 + 8 * v24))();
LABEL_52:
      v28 = qword_100999870;
      if (!v13)
      {
        if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_INFO))
        {
          sub_10043F6EC((uint64_t)v8, (uint64_t)buf);
          v30 = buf;
          if (v76[9] < 0)
            v30 = *(_BYTE **)buf;
          *(_DWORD *)__p = 141558275;
          *(_QWORD *)&__p[4] = 1752392040;
          v79 = 2081;
          v80 = v30;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Successfully stored non-magic key to storage for device %{private, mask.hash}s ", __p, 0x16u);
          if ((v76[9] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        v13 = 0;
        goto LABEL_65;
      }
      if (!os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
        goto LABEL_65;
      sub_10043F6EC((uint64_t)v8, (uint64_t)__p);
      v29 = __p;
      if (v81 < 0)
        v29 = *(_BYTE **)__p;
      *(_DWORD *)buf = 141558531;
      *(_QWORD *)&buf[4] = 1752392040;
      *(_WORD *)&buf[12] = 2081;
      *(_QWORD *)v76 = v29;
      *(_WORD *)&v76[8] = 1024;
      v77 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Failed to store non-magic key to storage for device %{private, mask.hash}s with error %d", buf, 0x1Cu);
      if ((v81 & 0x80000000) == 0)
      {
LABEL_65:
        v20 = *((unsigned __int16 *)k - 4);
        goto LABEL_66;
      }
      v27 = *(void **)__p;
LABEL_58:
      operator delete(v27);
      goto LABEL_65;
    }
  }
  return sub_100034234((uint64_t)v73);
}

void sub_10028D4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10028D50C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  _QWORD **v12;
  _QWORD **v13;
  _QWORD *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  _QWORD v26[2];
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v28) = *(_WORD *)(a2 + 4);
  result = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v11 = result;
  if (result)
  {
    v26[0] = 0;
    v26[1] = 0;
    sub_10003415C((uint64_t)v26, a1 + 360);
    v12 = *(_QWORD ***)(a1 + 336);
    v13 = *(_QWORD ***)(a1 + 344);
    while (v12 != v13)
    {
      v14 = *v12;
      if (**v12 == v11)
        goto LABEL_9;
      ++v12;
    }
    v14 = 0;
LABEL_9:
    v15 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      v23 = sub_10025304C(a2, v16, v17, v18, v19, v20, v21, v22);
      *(_DWORD *)buf = 136315906;
      v28 = v23;
      v29 = 1024;
      v30 = a3;
      v31 = 1024;
      v32 = a4;
      v33 = 1024;
      v34 = a5;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Receive command status from device \"%s\", commandType = %d, result -> %d, reason -> %d", buf, 0x1Eu);
    }
    v24 = sub_100442118(v11, 32);
    if (a3 == 20)
      v25 = v24;
    else
      v25 = 0;
    if (v14)
    {
      if (v25)
        sub_10028D6D8((uint64_t)v14, a4, a5);
    }
    return sub_100034234((uint64_t)v26);
  }
  return result;
}

void sub_10028D6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10028D6D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v7;
  int v8;
  NSObject *v9;
  void **v10;
  void *v11;
  void *v12;
  void *__p[2];
  char v14;
  uint8_t buf[4];
  void **v16;

  v3 = *(_QWORD *)(a1 + 672);
  if (v3)
  {
    v7 = *(_QWORD *)(a1 + 664);
    v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 640) + ((v7 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v7 & 0x3FF));
    *(_QWORD *)(a1 + 672) = v3 - 1;
    *(_QWORD *)(a1 + 664) = v7 + 1;
    sub_1002A70F4(a1 + 632, 1);
    if (v8 == 1)
    {
      v9 = qword_1009997D0;
      if (*(_BYTE *)(a1 + 618))
      {
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(*(_QWORD *)a1, __p);
          v10 = v14 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          v16 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Acknowledgement request TiPi connection priority list update for device %{public}s", buf, 0xCu);
          if (v14 < 0)
            operator delete(__p[0]);
        }
        *(_BYTE *)(a1 + 618) = 0;
        if (qword_1009778D8 != -1)
          dispatch_once(&qword_1009778D8, &stru_100921C38);
        sub_100421BAC((uint64_t)off_1009778D0, *(_QWORD *)a1, 1, a2, a3);
        v11 = *(void **)(a1 + 624);
        if (v11)
        {
          objc_msgSend(v11, "invalidate");
          v12 = *(void **)(a1 + 624);
          *(_QWORD *)(a1 + 624) = 0;

        }
      }
      else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      {
        sub_1006D7E94();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D7E68();
  }
}

uint64_t sub_10028D8B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned __int16 v8;
  uint64_t v9;

  v8 = sub_10003F8C4(a4);
  v9 = sub_10003EB18(a4);
  return sub_10028D914(a1, a2, a3, v8, v9);
}

uint64_t sub_10028D914(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **i;
  _QWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t *j;
  NSObject *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t *k;
  uint64_t *v28;
  NSObject *v29;
  NSObject *v30;
  _BYTE *v31;
  int v32;
  NSObject *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  NSObject *v41;
  _BYTE *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int16 v47;
  _BYTE __p[12];
  __int16 v49;
  int v50;
  char v51;
  _BYTE buf[20];
  int v53;

  v47 = a4;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  *(_DWORD *)buf = *(_DWORD *)a2;
  *(_WORD *)&buf[4] = *(_WORD *)(a2 + 4);
  result = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v14 = result;
  if (result)
  {
    if (a3 <= 127)
    {
      if (a3 == 2 || a3 == 4)
        goto LABEL_66;
      if (a3 != 32)
      {
LABEL_26:
        v24 = qword_1009997D0;
        if (!os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          return sub_10028E798(a1 + 560, v14, a3);
        sub_10043E5F8(v14, __p);
        if (v51 >= 0)
          v25 = __p;
        else
          v25 = *(_BYTE **)__p;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = v25;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = a3;
        *(_WORD *)&buf[18] = 1024;
        v53 = a4;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Received custom message from %{public}s: type 0x%x, len %u", buf, 0x18u);
LABEL_31:
        if (v51 < 0)
          operator delete(*(void **)__p);
        return sub_10028E798(a1 + 560, v14, a3);
      }
      v15 = sub_10003BE44();
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 328))(v15) & 1) == 0)
      {
        v16 = sub_10003BE44();
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 384))(v16) & 1) == 0)
        {
          v17 = sub_10003BE44();
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 424))(v17))
            goto LABEL_66;
        }
      }
      v45 = 0;
      v46 = 0;
      sub_10003415C((uint64_t)&v45, a1 + 360);
      for (i = *(_QWORD ***)(a1 + 336); i != *(_QWORD ***)(a1 + 344); ++i)
      {
        v19 = *i;
        if (**i == v14)
        {
          v43 = *(_QWORD *)((char *)v19 + 85);
          v44 = *(_DWORD *)((char *)v19 + 93);
          if (!(*(unsigned __int16 *)((char *)&v43 + 3) | BYTE5(v43)))
          {
            *(_WORD *)((char *)&v43 + 3) = *(_WORD *)(a5 + 48);
            BYTE5(v43) = *(_BYTE *)(a5 + 50);
            LOWORD(v43) = *(_WORD *)(a5 + 36);
            BYTE2(v43) = *(_BYTE *)(a5 + 38);
            *(_WORD *)((char *)&v44 + 1) = *(_WORD *)(a5 + 54);
            HIBYTE(v44) = *(_BYTE *)(a5 + 56);
            if (100 * v43 + 10 * BYTE1(v43) + BYTE2(v43) >= 0x174
              && *((_DWORD *)v19 + 20) == 8194)
            {
              v30 = qword_1009997D0;
              if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
              {
                sub_10043E5F8(v14, buf);
                v31 = v53 >= 0 ? buf : *(_BYTE **)buf;
                v32 = *((_DWORD *)v19 + 20);
                *(_DWORD *)__p = 136446466;
                *(_QWORD *)&__p[4] = v31;
                v49 = 1024;
                v50 = v32;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Enabling enhanced double tap feature support on device %{public}s (pid = 0x%x)", __p, 0x12u);
                if (SHIBYTE(v53) < 0)
                  operator delete(*(void **)buf);
              }
              sub_1004467AC(v14, 14, 1);
            }
            v33 = qword_1009997D0;
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)&buf[4] = BYTE3(v43);
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = BYTE4(v43);
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&buf[16] = BYTE5(v43);
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "case F/W version from Headset  %d, %d, %d", buf, 0x14u);
              v33 = qword_1009997D0;
            }
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)&buf[4] = BYTE1(v44);
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = BYTE2(v44);
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&buf[16] = HIBYTE(v44);
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "case H/W version from Headset  %d, %d, %d", buf, 0x14u);
              v33 = qword_1009997D0;
            }
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              v34 = *(unsigned __int8 *)(a5 + 36);
              v35 = *(unsigned __int8 *)(a5 + 37);
              v36 = *(unsigned __int8 *)(a5 + 38);
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)&buf[4] = v34;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v35;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&buf[16] = v36;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Active Bud F/W version from Headset  %d, %d, %d", buf, 0x14u);
              v33 = qword_1009997D0;
            }
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              v37 = *(unsigned __int8 *)(a5 + 39);
              v38 = *(unsigned __int8 *)(a5 + 40);
              v39 = *(unsigned __int8 *)(a5 + 41);
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)&buf[4] = v37;
              *(_WORD *)&buf[8] = 1024;
              *(_DWORD *)&buf[10] = v38;
              *(_WORD *)&buf[14] = 1024;
              *(_DWORD *)&buf[16] = v39;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Pending Bud F/W version from Headset  %d, %d, %d", buf, 0x14u);
            }
            *(_QWORD *)((char *)v19 + 85) = v43;
            *(_DWORD *)((char *)v19 + 93) = v44;
            if (qword_10097AB38 != -1)
              dispatch_once(&qword_10097AB38, &stru_100921DB8);
            v40 = (*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)off_10097AB30 + 120))(off_10097AB30, *v19);
            if ((_DWORD)v40)
              sub_10028E0AC(v40, (uint64_t)v19);
          }
          sub_100034264((uint64_t)&v45);
          sub_100034234((uint64_t)&v45);
          goto LABEL_66;
        }
      }
    }
    else
    {
      if (a3 < 0x40000)
      {
        if (a3 != 128 && a3 != 1024)
          goto LABEL_26;
LABEL_66:
        if (qword_100978180 != -1)
          dispatch_once(&qword_100978180, &stru_100921D18);
        sub_1003C34BC(qword_100978178, (unsigned int *)a2, a3, v47, (int *)a5);
        return sub_10028E798(a1 + 560, v14, a3);
      }
      if (a3 != 0x40000)
      {
        if (a3 == 0x100000)
        {
          sub_1000DE158(a5, (unsigned __int16)(a4 - 2), v11, v12, v13);
          v21 = v20;
          if (v20 == 1)
          {
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = 0;
            v22 = sub_10003415C((uint64_t)buf, a1 + 360);
            for (j = *(uint64_t **)(a1 + 336); ; ++j)
            {
              if (j == *(uint64_t **)(a1 + 344))
              {
                v28 = (uint64_t *)buf;
                return sub_100034234((uint64_t)v28);
              }
              if (*(_QWORD *)*j == v14)
                break;
            }
            sub_10028E650(v22, *j, v14, &v47, a5);
            sub_100034234((uint64_t)buf);
          }
          v41 = qword_1009997D0;
          if (!os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEBUG))
            return sub_10028E798(a1 + 560, v14, a3);
          sub_10043E5F8(v14, __p);
          if (v51 >= 0)
            v42 = __p;
          else
            v42 = *(_BYTE **)__p;
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = v42;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v21;
          *(_WORD *)&buf[18] = 1024;
          v53 = v47;
          _os_log_debug_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "Received AACP_CUSTOM_MESSAGE_TYPE_SENSOR_WX message from %{public}s: protocol %u, len %u", buf, 0x18u);
          goto LABEL_31;
        }
        goto LABEL_26;
      }
      v45 = 0;
      v46 = 0;
      v26 = sub_10003415C((uint64_t)&v45, a1 + 360);
      for (k = *(uint64_t **)(a1 + 336); k != *(uint64_t **)(a1 + 344); ++k)
      {
        if (*(_QWORD *)*k == v14)
        {
          sub_10028E650(v26, *k, v14, &v47, a5);
          v29 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEBUG))
          {
            sub_10043E5F8(v14, buf);
            sub_1006D7EC0((uint64_t *)buf, &v47, __p, v29);
          }
          sub_100034234((uint64_t)&v45);
          return sub_10028E798(a1 + 560, v14, a3);
        }
      }
    }
    v28 = &v45;
    return sub_100034234((uint64_t)v28);
  }
  return result;
}

void sub_10028E078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10028E0AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  _BYTE *v5;
  const char *v6;
  CFStringRef v7;
  CFStringRef v8;
  CFStringRef v9;
  uint64_t Connection;
  const void *v11;
  uint64_t Endpoint;
  NSObject *v13;
  CFDictionaryRef v14;
  NSObject *v15;
  _BYTE *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  int v22;
  _BYTE buf[24];
  CFNullRef v24;
  CFStringRef v25;
  CFStringRef v26;
  CFNullRef v27;
  _BYTE __p[24];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t cStr;
  __int16 v36;

  if (a2)
  {
    if (*(_DWORD *)(a2 + 80) == 8194)
    {
      v3 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        v4 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043F6EC(v3, (uint64_t)__p);
          v5 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 141558275;
          *(_QWORD *)&buf[4] = 1752392040;
          *(_WORD *)&buf[12] = 2081;
          *(_QWORD *)&buf[14] = v5;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "publishW1RemoteFirmware: Publishing F/W version for \"%{private, mask.hash}s\"", buf, 0x16u);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        v36 = 0;
        cStr = 0;
        v34 = 0;
        v33 = 0;
        v21 = *(_QWORD *)(a2 + 85);
        v22 = *(_DWORD *)(a2 + 93);
        if (*(unsigned __int16 *)((char *)&v21 + 3) | BYTE5(v21))
        {
          sub_10046E9BC((unsigned __int8 *)(v3 + 128), __p);
          if (__p[23] >= 0)
            v6 = __p;
          else
            v6 = *(const char **)__p;
          v7 = CFStringCreateWithCString(kCFAllocatorDefault, v6, 0x8000100u);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          if (v7)
          {
            sprintf((char *)&cStr, "%d.%d.%d", BYTE3(v21), BYTE4(v21), BYTE5(v21));
            v8 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)&cStr, 0x8000100u);
            if (v8)
            {
              sprintf((char *)&v33, "%d.%d.%d", BYTE1(v22), BYTE2(v22), HIBYTE(v22));
              v9 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)&v33, 0x8000100u);
              if (v9)
              {
                Connection = acc_transportClient_createConnection(2, v7);
                v11 = (const void *)Connection;
                if (Connection)
                {
                  Endpoint = acc_transportClient_createEndpoint(Connection, 2, 1, 0, 0, 0);
                  v13 = qword_1009997D0;
                  if (Endpoint)
                  {
                    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)__p = 138412546;
                      *(_QWORD *)&__p[4] = v11;
                      *(_WORD *)&__p[12] = 2112;
                      *(_QWORD *)&__p[14] = Endpoint;
                      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "publishW1RemoteFirmware: connection %@ endpoint %@", __p, 0x16u);
                    }
                    *(_QWORD *)(a2 + 112) = v11;
                    *(_QWORD *)(a2 + 120) = Endpoint;
                    *(_QWORD *)__p = kCFACCInfo_Name;
                    *(_OWORD *)&__p[8] = __PAIR128__(kCFACCInfo_Model, kCFACCInfo_Manufacturer);
                    v29 = kCFACCInfo_SerialNumber;
                    v30 = kCFACCInfo_HardwareVersion;
                    v31 = kCFACCInfo_FirmwareVersionActive;
                    v32 = kCFACCInfo_FirmwareVersionPending;
                    *(_QWORD *)buf = CFSTR("AirPods Case");
                    *(_QWORD *)&buf[8] = CFSTR("Apple Inc");
                    *(_QWORD *)&buf[16] = CFSTR("A1602");
                    v24 = kCFNull;
                    v25 = v9;
                    v26 = v8;
                    v27 = kCFNull;
                    v14 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)__p, (const void **)buf, 7, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                    acc_transportClient_setAccessoryInfo(Endpoint, v14);
                    CFRelease(v14);
                    acc_transportClient_setPropertyForConnectionWithUUID(kCFACCProperties_Connection_HideFromUI, kCFNull, v11);
                    acc_transportClient_publishConnection(v11);
                    CFRelease(v7);
                    CFRelease(v8);
                    CFRelease(v9);
                  }
                  else
                  {
                    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
                      sub_1006D8188(v3, v13);
                    CFRelease(v11);
                    CFRelease(v9);
                    CFRelease(v8);
                    CFRelease(v7);
                  }
                }
                else
                {
                  v20 = qword_1009997D0;
                  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
                    sub_1006D8100(v3, v20);
                  CFRelease(v9);
                  CFRelease(v8);
                  CFRelease(v7);
                }
              }
              else
              {
                v19 = qword_1009997D0;
                if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
                  sub_1006D8078(v3, v19);
                CFRelease(v8);
                CFRelease(v7);
              }
            }
            else
            {
              v18 = qword_1009997D0;
              if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
                sub_1006D7FF0(v3, v18);
              CFRelease(v7);
            }
          }
          else
          {
            v17 = qword_1009997D0;
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
              sub_1006D7F68(v3, v17);
          }
        }
        else
        {
          v15 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043F6EC(v3, (uint64_t)__p);
            v16 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 141558275;
            *(_QWORD *)&buf[4] = 1752392040;
            *(_WORD *)&buf[12] = 2081;
            *(_QWORD *)&buf[14] = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Warning: publishW1RemoteFirmware: No case version info available for \"%{private, mask.hash}s\"", buf, 0x16u);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
          }
        }
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D7F3C();
  }
}

void sub_10028E62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10028E650(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, uint64_t a5)
{
  unsigned __int16 v9;
  int v10;
  NSObject *v11;
  _DWORD v12[2];

  if (*a4 >= 2u && (sub_10044FF54(a3, 0xE0u) != 2 || *(_DWORD *)(a2 + 16) != 1))
  {
    v9 = *a4 - 2;
    v10 = *(unsigned __int16 *)(a5 + v9);
    if (v10 != *(unsigned __int16 *)(a2 + 760))
    {
      v11 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        v12[0] = 67109120;
        v12[1] = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received new sensor data v2 JB: %u", (uint8_t *)v12, 8u);
      }
      *(_WORD *)(a2 + 760) = v10;
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_100921DD8);
      sub_10051C67C((uint64_t)off_100977A90, a3, v10);
    }
    *a4 = v9;
  }
}

uint64_t sub_10028E798(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t *v5;
  NSObject *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t buf[8];
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 24);
  v5 = *(unint64_t **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v11 = 106;
  }
  else
  {
    do
    {
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_100921DF8);
      if (sub_100021398(qword_100977B48, *v5))
      {
        v5 += 4;
      }
      else
      {
        v6 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: AACPDebugUtils, Invalid BTAccessoryManager handle - removing associated callbacks", buf, 2u);
        }
        v5 = (unint64_t *)sub_10029C78C(a1, (uint64_t)v5);
      }
    }
    while (v5 != *(unint64_t **)(a1 + 8));
    v7 = *(_QWORD *)a1;
    v8 = ((uint64_t)v5 - *(_QWORD *)a1) >> 5;
    *(_QWORD *)buf = 0;
    v15 = 0;
    v16 = 0;
    sub_1002A75A0((char *)buf, v7, (uint64_t)v5, v8);
    sub_100034264((uint64_t)v17);
    v9 = *(_QWORD *)buf;
    v10 = v15;
    if (*(_QWORD *)buf != v15)
    {
      do
      {
        if (qword_100977B50 != -1)
          dispatch_once(&qword_100977B50, &stru_100921DF8);
        sub_100021398(qword_100977B48, *(_QWORD *)v9);
        if (qword_1009778E8 != -1)
          dispatch_once(&qword_1009778E8, &stru_100921C78);
        sub_10046F750((uint64_t)off_1009778E0, *(_QWORD *)v9, a2);
        if ((a3 & ~*(_DWORD *)(v9 + 16)) == 0)
        {
          if (qword_10097AB48 != -1)
            dispatch_once(&qword_10097AB48, &stru_100921E18);
          operator new();
        }
        v9 += 32;
      }
      while (v9 != v10);
      v9 = *(_QWORD *)buf;
    }
    if (v9)
    {
      v15 = v9;
      operator delete((void *)v9);
    }
    v11 = 0;
  }
  sub_100034234((uint64_t)v17);
  return v11;
}

void sub_10028EA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_10028EAA8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  NSObject *v6;
  void **v7;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  void **v11;
  __int16 v12;
  int v13;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v5 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  v6 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(v5, (uint64_t)__p);
    if (v9 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v11 = v7;
    v12 = 1024;
    v13 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "received tap interval info from device \"%s\", tapInterval = %d", buf, 0x12u);
    if (v9 < 0)
      operator delete(__p[0]);
  }
}

void sub_10028EBE0(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD **i;
  NSObject *v11;
  NSObject *v12;
  _BOOL8 v13;
  int v14;
  void **v15;
  uint64_t v16;
  const char *v17;
  void **v18;
  BOOL v19;
  _BOOL4 v20;
  char v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  void *__p[2];
  char v28;
  void *v29[2];
  char v30;
  uint8_t buf[4];
  _BYTE v32[10];
  _BYTE v33[6];
  void **v34;
  __int16 v35;
  void **v36;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  *(_DWORD *)buf = *(_DWORD *)a2;
  *(_WORD *)v32 = *(_WORD *)(a2 + 4);
  v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v9 = v8;
  if (v8)
  {
    for (i = *(_QWORD ***)(a1 + 336); i != *(_QWORD ***)(a1 + 344); ++i)
    {
      if (**i == v8)
      {
        v12 = qword_1009997D0;
        v13 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
        if (v13)
        {
          sub_10027B480(a1, a3, a4, v29);
          v14 = v30;
          v15 = (void **)v29[0];
          sub_10043E5F8(v9, __p);
          if (v14 >= 0)
            v15 = v29;
          v17 = sub_10027B454(v16, a3);
          if (v28 >= 0)
            v18 = __p;
          else
            v18 = (void **)__p[0];
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)v32 = v17;
          *(_WORD *)&v32[8] = 1024;
          *(_DWORD *)v33 = a3;
          *(_WORD *)&v33[4] = 2082;
          v34 = v15;
          v35 = 2082;
          v36 = v18;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received %{public}s (control cmd 0x%02X) as %{public}s from device %{public}s", buf, 0x26u);
          if (v28 < 0)
            operator delete(__p[0]);
          if (v30 < 0)
            operator delete(v29[0]);
        }
        switch(a3)
        {
          case 6:
            v19 = a4 == 0;
            v20 = a4 != 0;
            v21 = v19;
            sub_10028F694(a1, v9, v21);
            sub_10044EF08(v9, v20);
            if (qword_1009778D8 != -1)
              goto LABEL_85;
            goto LABEL_78;
          case 10:
            sub_100285264(a1, v9, a4 != 1, 2u);
            if (qword_1009778D8 == -1)
              goto LABEL_78;
            goto LABEL_85;
          case 13:
            v23 = qword_1009997D0;
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)v32 = a4;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Set ListeningMode device setting : ListeningMode value %d", buf, 8u);
            }
            v24 = sub_10044DD14(v9, a4);
            sub_100280330(v24, v9);
            if (qword_1009778D8 == -1)
              goto LABEL_78;
            goto LABEL_85;
          case 22:
            v25 = qword_1009997D0;
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109888;
              *(_DWORD *)v32 = a4;
              *(_WORD *)&v32[4] = 1024;
              *(_DWORD *)&v32[6] = BYTE1(a4);
              *(_WORD *)v33 = 1024;
              *(_DWORD *)&v33[2] = BYTE2(a4);
              LOWORD(v34) = 1024;
              *(_DWORD *)((char *)&v34 + 2) = HIBYTE(a4);
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Received ClickHoldMode device setting: right 0x%02X, left 0x%02X, prevRight 0x%02X, prevLeft 0x%02X", buf, 0x1Au);
            }
            sub_10044E1A4(v9, a4);
            if (qword_1009778D8 == -1)
              goto LABEL_78;
            goto LABEL_85;
          case 23:
            sub_10044E26C(v9, a4);
            if (qword_1009778D8 != -1)
              dispatch_once(&qword_1009778D8, &stru_100921C38);
            sub_100422BC4((uint64_t)off_1009778D0, v9, 16, (uint64_t)"Double Click Interval");
            return;
          case 24:
            sub_10044E2DC(v9, a4);
            if (qword_1009778D8 != -1)
              dispatch_once(&qword_1009778D8, &stru_100921C38);
            sub_100422BC4((uint64_t)off_1009778D0, v9, 18, (uint64_t)"Click and Hold Interval");
            return;
          case 27:
            sub_10044E34C(v9, a4);
            if (qword_1009778D8 != -1)
              dispatch_once(&qword_1009778D8, &stru_100921C38);
            sub_100422BC4((uint64_t)off_1009778D0, v9, 21, (uint64_t)"One Bud ANC Mode");
            return;
          case 28:
            sub_10044E3BC(v9, a4);
            if (qword_1009778D8 == -1)
              goto LABEL_78;
            goto LABEL_85;
          case 30:
            sub_10044E400(v9, a4);
            if (qword_1009778D8 == -1)
              goto LABEL_78;
            goto LABEL_85;
          case 31:
            sub_10044E444(v9, a4);
            if (qword_1009778D8 != -1)
              dispatch_once(&qword_1009778D8, &stru_100921C38);
            sub_100422400((uint64_t)off_1009778D0, v9);
            if (qword_1009778D8 != -1)
              dispatch_once(&qword_1009778D8, &stru_100921C38);
            sub_100422BC4((uint64_t)off_1009778D0, v9, 17, (uint64_t)"Chime Volume");
            return;
          case 35:
            sub_10044E53C(v9, a4);
            if (qword_1009778D8 != -1)
              dispatch_once(&qword_1009778D8, &stru_100921C38);
            sub_100422BC4((uint64_t)off_1009778D0, v9, 20, (uint64_t)"Volume Swipe Interval");
            return;
          case 36:
            v26 = qword_1009997D0;
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)v32 = a4;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Prox Card Status: Received Call Management: 0x%x", buf, 8u);
            }
            sub_10044E674(v9, a4);
            sub_100280058(a1, v9, 36, a4);
            if (qword_1009778D8 == -1)
              goto LABEL_78;
            goto LABEL_85;
          case 37:
            sub_10044E4CC(v9, a4);
            if (qword_1009778D8 != -1)
              dispatch_once(&qword_1009778D8, &stru_100921C38);
            sub_100422BC4((uint64_t)off_1009778D0, v9, 19, (uint64_t)"Volume Swipe Mode");
            return;
          case 38:
            sub_10044E5AC(v9, a4);
            if (qword_100977E00 != -1)
              dispatch_once(&qword_100977E00, &stru_100921C18);
            sub_1003E4EB4((_QWORD *)qword_100977DF8, v9, a4);
            if (qword_1009778D8 == -1)
              goto LABEL_78;
            goto LABEL_85;
          case 39:
            sub_10044E734(v9, a4);
            sub_10028026C(a1);
            if (qword_1009778D8 == -1)
              goto LABEL_78;
            goto LABEL_85;
          case 40:
            sub_10027B2D0(v13, v9, a4);
            sub_10044E7DC(v9, a4);
            if (qword_1009778D8 == -1)
              goto LABEL_78;
            goto LABEL_85;
          case 41:
            sub_10044E884(v9, a4);
            if (qword_1009778D8 == -1)
              goto LABEL_78;
LABEL_85:
            dispatch_once(&qword_1009778D8, &stru_100921C38);
LABEL_78:
            sub_100422400((uint64_t)off_1009778D0, v9);
            break;
          case 46:
            sub_10044E970(v9, a4);
            break;
          case 48:
            sub_10044EA18(v9, a4);
            break;
          case 49:
            sub_10044E92C(v9, a4);
            if (qword_1009778D8 != -1)
              dispatch_once(&qword_1009778D8, &stru_100921C38);
            sub_100422BC4((uint64_t)off_1009778D0, v9, 24, (uint64_t)"In Case Tone");
            break;
          case 50:
            sub_10044EAC0(v9, a4);
            break;
          default:
            v22 = qword_1009997D0;
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)v32 = a3;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Unsupported control type = %d", buf, 8u);
            }
            break;
        }
        return;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D8298();
  }
  else
  {
    v11 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D8210(v11);
  }
}

void sub_10028F5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10028F694(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD **i;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t v11[16];
  _QWORD v12[5];
  char v13;
  _QWORD v14[5];
  char v15;
  _QWORD v16[2];

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD ***)(a1 + 336); i != *(_QWORD ***)(a1 + 344); ++i)
    {
      if (**i == a2)
      {
        v8 = sub_100475960();
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = sub_1002A1C98;
        v14[3] = &unk_100918888;
        v14[4] = a2;
        v15 = a3;
        sub_100041A34(v8, v14);
        v9 = sub_1004759E0();
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_1002A1CEC;
        v12[3] = &unk_100918888;
        v12[4] = a2;
        v13 = a3;
        sub_100041A34(v9, v12);
        goto LABEL_9;
      }
    }
  }
  v7 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "setHijackAudioRoute unable to find AACP connection", v11, 2u);
  }
LABEL_9:
  sub_100034234((uint64_t)v16);
  return 0;
}

void sub_10028F7C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100034234(v1 - 64);
  _Unwind_Resume(a1);
}

uint64_t sub_10028F7D8(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned __int8 *a5)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  size_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint64_t v20;
  int v21;
  id v22;
  id v23;
  const char *v24;
  _BOOL4 v25;
  NSObject *v26;
  _BYTE *v27;
  NSObject *v28;
  id v29;
  id v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  _OWORD *v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  int64x2_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t i;
  _OWORD *v53;
  __int128 v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  __int128 v64;
  int64x2_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char v70;
  NSObject *v71;
  void *v72;
  id v73;
  int v74;
  unint64_t v75;
  NSObject *v76;
  int v77;
  __int128 *v78;
  _BOOL4 v79;
  __int128 *v80;
  int v81;
  const char *v82;
  unint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  id v88;
  const char *v89;
  _QWORD *v90;
  FILE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  _BOOL4 v100;
  const char *v101;
  unint64_t v102;
  uint64_t v103;
  int64_t v104;
  uint64_t v105;
  int64_t v106;
  char *v107;
  unint64_t v108;
  size_t v109;
  NSObject *v110;
  int *v111;
  _QWORD *v112;
  uint64_t v113;
  NSObject *v114;
  uint8_t *v115;
  uint64_t v116;
  _BOOL4 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  uint64_t *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  _QWORD *v128;
  id v129;
  unsigned __int8 *v130;
  uint64_t v131;
  std::string v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136[24];
  _QWORD v137[5];
  char v138[24];
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 *v142[3];
  __int128 *v143[3];
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int128 *v147;
  __int128 *v148;
  uint64_t v149;
  _QWORD v150[3];
  __int128 v151;
  uint64_t v152;
  uint8_t buf[32];
  _BYTE v154[40];

  v130 = a5;
  LODWORD(v129) = a3;
  v131 = a1;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  *(_DWORD *)v154 = *(_DWORD *)a2;
  v128 = (_QWORD *)a2;
  *(_WORD *)&v154[4] = *(_WORD *)(a2 + 4);
  result = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)v154, 1);
  v8 = result;
  if (!result)
    return result;
  v150[0] = 0;
  v150[1] = 0;
  v9 = sub_10003415C((uint64_t)v150, v131 + 360);
  v10 = *(_QWORD **)(v131 + 336);
  v11 = *(_QWORD **)(v131 + 344);
  if (v10 == v11)
  {
LABEL_7:
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(v8, v154);
      sub_1006D82C4();
    }
    return sub_100034234((uint64_t)v150);
  }
  while (1)
  {
    v12 = (_QWORD *)*v10;
    if (*(_QWORD *)*v10 == v8)
      break;
    if (++v10 == v11)
      goto LABEL_7;
  }
  if (((_DWORD)v129 - 3) <= 0xFFFFFFFD)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D8310();
    return sub_100034234((uint64_t)v150);
  }
  v123 = &v119;
  v13 = byte_10073D00C[v129];
  __chkstk_darwin(v9, v13 << 8);
  bzero(&v119 - 32 * v13, v14);
  if ((int)v13 + 2 > a4)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D8370();
    return sub_100034234((uint64_t)v150);
  }
  if (*v130 > 0x1Fu)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D83D0();
    return sub_100034234((uint64_t)v150);
  }
  v125 = *v130;
  v16 = 0;
  v124 = (char *)(&v119 - 32 * v13 + 320);
  v120 = v13;
  if (v13 <= 1)
    v17 = 1;
  else
    v17 = v13;
  v126 = v17;
  v127 = (char *)(&v119 - 32 * v13);
  v18 = 2;
  *(_QWORD *)&v15 = 136446466;
  v122 = v15;
  *(_QWORD *)&v15 = 67109632;
  v121 = v15;
  while (1)
  {
    while (1)
    {
      if ((unsigned __int16)v18 >= a4)
      {
        v28 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v154 = v121;
          *(_DWORD *)&v154[4] = v16;
          *(_WORD *)&v154[8] = 1024;
          *(_DWORD *)&v154[10] = (unsigned __int16)v18;
          *(_WORD *)&v154[14] = 1024;
          *(_DWORD *)&v154[16] = a4;
          _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "versionInfoEvent: Reached end of strings in version info, count %d, %d >= %d", v154, 0x14u);
        }
        v127[256 * v16] = 0;
        goto LABEL_43;
      }
      v19 = (const char *)&v130[(unsigned __int16)v18];
      if (v16 != 10)
        break;
      v20 = atoi(v19);
      v21 = v20;
      v22 = sub_100287444(v20, v20);
      v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v22));
      v24 = (const char *)objc_msgSend(v23, "UTF8String");
      v25 = v125 == 4;
      strcpy(v124, v24);

      v18 += strlen(v19) + 1;
      if (!v25)
        goto LABEL_43;
      sub_10044B3C0(v8, v21);
      v26 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v8, v154);
        v27 = v154;
        if (v154[23] < 0)
          v27 = *(_BYTE **)v154;
        *(_DWORD *)buf = v122;
        *(_QWORD *)&buf[4] = v124;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Identification - Apple Audio Device firmware version of %{public}s for device %{public}s received.", buf, 0x16u);
        if ((v154[23] & 0x80000000) != 0)
          operator delete(*(void **)v154);
      }
      sub_100440984(v8);
      v16 = 11;
      if (v126 == 11)
        goto LABEL_46;
    }
    if (strlen(v19) != 1 || *v19 != 48)
      break;
    v127[256 * v16] = 0;
    v18 += 2;
LABEL_43:
    if (++v16 == v126)
    {
      v33 = v125;
      if ((_DWORD)v125 == 13)
      {
        sub_100091AE8(&v132, v124);
        sub_1004494EC(v8, &v132);
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v132.__r_.__value_.__l.__data_);
        LODWORD(v129) = 0;
      }
      else
      {
        if ((_DWORD)v125 == 4)
        {
LABEL_46:
          memset(buf, 0, 24);
          v147 = 0;
          v148 = 0;
          v149 = 0;
          sub_100448DAC(v8, (uint64_t)&v147);
          v144 = 0;
          v145 = 0;
          v146 = 0;
          sub_1002A46F4((char *)&v144, v147, v148, 0xAAAAAAAAAAAAAAABLL * (((char *)v148 - (char *)v147) >> 3));
          v34 = v120;
          if (0xAAAAAAAAAAAAAAABLL * ((v145 - v144) >> 3) < 4)
          {
            LODWORD(v121) = 0;
          }
          else
          {
            if (*(char *)(v144 + 95) < 0)
              v35 = *(_QWORD *)(v144 + 80);
            else
              v35 = *(unsigned __int8 *)(v144 + 95);
            LODWORD(v121) = v35 > 1;
          }
          *(_QWORD *)v154 = &v144;
          sub_100091BF8((void ***)v154);
          sub_100091AE8(&v151, "");
          v36 = *(_OWORD **)&buf[8];
          if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
          {
            v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
            v39 = v38 + 1;
            if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3) > v39)
              v39 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3) >= 0x555555555555555)
              v40 = 0xAAAAAAAAAAAAAAALL;
            else
              v40 = v39;
            *(_QWORD *)&v154[32] = &buf[16];
            if (v40)
              v41 = (char *)sub_1002A479C((uint64_t)&buf[16], v40);
            else
              v41 = 0;
            v42 = &v41[24 * v38];
            v43 = v151;
            *((_QWORD *)v42 + 2) = v152;
            *(_OWORD *)v42 = v43;
            v152 = 0;
            v151 = 0uLL;
            v45 = *(_QWORD *)buf;
            v44 = *(_QWORD *)&buf[8];
            if (*(_QWORD *)&buf[8] == *(_QWORD *)buf)
            {
              v48 = vdupq_n_s64(*(unint64_t *)&buf[8]);
              v46 = &v41[24 * v38];
            }
            else
            {
              v46 = &v41[24 * v38];
              do
              {
                v47 = *(_OWORD *)(v44 - 24);
                *((_QWORD *)v46 - 1) = *(_QWORD *)(v44 - 8);
                *(_OWORD *)(v46 - 24) = v47;
                v46 -= 24;
                *(_QWORD *)(v44 - 16) = 0;
                *(_QWORD *)(v44 - 8) = 0;
                *(_QWORD *)(v44 - 24) = 0;
                v44 -= 24;
              }
              while (v44 != v45);
              v48 = *(int64x2_t *)buf;
            }
            v49 = v42 + 24;
            *(_QWORD *)buf = v46;
            *(_QWORD *)&buf[8] = v42 + 24;
            *(int64x2_t *)&v154[8] = v48;
            v50 = *(_QWORD *)&buf[16];
            *(_QWORD *)&buf[16] = &v41[24 * v40];
            *(_QWORD *)&v154[24] = v50;
            *(_QWORD *)v154 = v48.i64[0];
            sub_1002A56A4((uint64_t)v154);
            *(_QWORD *)&buf[8] = v49;
            if (SHIBYTE(v152) < 0)
              operator delete((void *)v151);
          }
          else
          {
            v37 = v151;
            *(_QWORD *)(*(_QWORD *)&buf[8] + 16) = v152;
            *v36 = v37;
            *(_QWORD *)&buf[8] = (char *)v36 + 24;
          }
          if (((_DWORD)v129 - 1) <= 1)
          {
            if (v34 <= 2)
              v51 = 2;
            else
              v51 = v34;
            for (i = 1; i != v51; ++i)
            {
              sub_100091AE8(&v151, &v127[256 * i]);
              v53 = *(_OWORD **)&buf[8];
              if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
              {
                v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
                v56 = v55 + 1;
                if (v55 + 1 > 0xAAAAAAAAAAAAAAALL)
                  abort();
                if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3) > v56)
                  v56 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3) >= 0x555555555555555)
                  v57 = 0xAAAAAAAAAAAAAAALL;
                else
                  v57 = v56;
                *(_QWORD *)&v154[32] = &buf[16];
                if (v57)
                  v58 = (char *)sub_1002A479C((uint64_t)&buf[16], v57);
                else
                  v58 = 0;
                v59 = &v58[24 * v55];
                v60 = v151;
                *((_QWORD *)v59 + 2) = v152;
                *(_OWORD *)v59 = v60;
                v152 = 0;
                v151 = 0uLL;
                v62 = *(_QWORD *)buf;
                v61 = *(_QWORD *)&buf[8];
                if (*(_QWORD *)&buf[8] == *(_QWORD *)buf)
                {
                  v65 = vdupq_n_s64(*(unint64_t *)&buf[8]);
                  v63 = &v58[24 * v55];
                }
                else
                {
                  v63 = &v58[24 * v55];
                  do
                  {
                    v64 = *(_OWORD *)(v61 - 24);
                    *((_QWORD *)v63 - 1) = *(_QWORD *)(v61 - 8);
                    *(_OWORD *)(v63 - 24) = v64;
                    v63 -= 24;
                    *(_QWORD *)(v61 - 16) = 0;
                    *(_QWORD *)(v61 - 8) = 0;
                    *(_QWORD *)(v61 - 24) = 0;
                    v61 -= 24;
                  }
                  while (v61 != v62);
                  v65 = *(int64x2_t *)buf;
                }
                v66 = v59 + 24;
                *(_QWORD *)buf = v63;
                *(_QWORD *)&buf[8] = v59 + 24;
                *(int64x2_t *)&v154[8] = v65;
                v67 = *(_QWORD *)&buf[16];
                *(_QWORD *)&buf[16] = &v58[24 * v57];
                *(_QWORD *)&v154[24] = v67;
                *(_QWORD *)v154 = v65.i64[0];
                sub_1002A56A4((uint64_t)v154);
                *(_QWORD *)&buf[8] = v66;
                if (SHIBYTE(v152) < 0)
                  operator delete((void *)v151);
              }
              else
              {
                v54 = v151;
                *(_QWORD *)(*(_QWORD *)&buf[8] + 16) = v152;
                *v53 = v54;
                *(_QWORD *)&buf[8] = (char *)v53 + 24;
              }
            }
          }
          memset(v143, 0, sizeof(v143));
          sub_1002A46F4((char *)v143, *(__int128 **)buf, *(__int128 **)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3));
          v68 = v127;
          memset(v142, 0, sizeof(v142));
          v69 = sub_1002A46F4((char *)v142, v147, v148, 0xAAAAAAAAAAAAAAABLL * (((char *)v148 - (char *)v147) >> 3));
          v70 = sub_100290D5C((uint64_t)v69, v143, v142);
          *(_QWORD *)v154 = v142;
          sub_100091BF8((void ***)v154);
          *(_QWORD *)v154 = v143;
          sub_100091BF8((void ***)v154);
          if ((v70 & 1) == 0)
          {
            v71 = qword_1009997D0;
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v154 = 0;
              _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "versionInfoEvent: New version information received", v154, 2u);
            }
            v72 = (void *)objc_claimAutoreleasedReturnValue(+[CBProductInfo productInfoWithProductID:](CBProductInfo, "productInfoWithProductID:", *((unsigned int *)v12 + 20)));
            v73 = objc_msgSend(v72, "flags");
            v74 = v121;
            if ((v73 & 0x100000) == 0)
              v74 = 1;
            if (v74 == 1)
            {

              goto LABEL_111;
            }
            v139 = 0;
            v140 = 0;
            v141 = 0;
            sub_1002A46F4((char *)&v139, *(__int128 **)buf, *(__int128 **)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3));
            if (0xAAAAAAAAAAAAAAABLL * ((v140 - v139) >> 3) < 4)
            {
              *(_QWORD *)v154 = &v139;
              sub_100091BF8((void ***)v154);

LABEL_111:
              v68 = v127;
            }
            else
            {
              if (*(char *)(v139 + 95) < 0)
                v75 = *(_QWORD *)(v139 + 80);
              else
                v75 = *(unsigned __int8 *)(v139 + 95);
              v117 = v75 > 1;
              *(_QWORD *)v154 = &v139;
              sub_100091BF8((void ***)v154);

              v68 = v127;
              if (v117)
              {
                v118 = sub_1000419F4();
                v137[0] = _NSConcreteStackBlock;
                v137[1] = 3321888768;
                v137[2] = sub_100290F90;
                v137[3] = &unk_1009210F8;
                v137[4] = v8;
                memset(v138, 0, sizeof(v138));
                sub_1002A46F4(v138, *(__int128 **)buf, *(__int128 **)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3));
                sub_100041A34(v118, v137);
                *(_QWORD *)v154 = v138;
                sub_100091BF8((void ***)v154);
              }
            }
            memset(v136, 0, sizeof(v136));
            sub_1002A46F4(v136, *(__int128 **)buf, *(__int128 **)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3));
            sub_100448E60(v8, (uint64_t)v136);
            *(_QWORD *)v154 = v136;
            sub_100091BF8((void ***)v154);
            sub_100448DAC(v8, (uint64_t)buf);
          }
          if (qword_100977A68 != -1)
            dispatch_once(&qword_100977A68, &stru_100921C58);
          sub_1004675F4((uint64_t)off_100977A60, v8);
          v76 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v8, &v151);
            v77 = SHIBYTE(v152);
            v78 = (__int128 *)v151;
            v79 = sub_10044936C(v8);
            v80 = &v151;
            v81 = *((_DWORD *)v12 + 20);
            if (v77 < 0)
              v80 = v78;
            v82 = "no";
            *(_DWORD *)v154 = 136446978;
            *(_QWORD *)&v154[4] = v80;
            *(_WORD *)&v154[12] = 2082;
            if (v79)
              v82 = "yes";
            *(_QWORD *)&v154[14] = v82;
            *(_WORD *)&v154[22] = 1024;
            *(_DWORD *)&v154[24] = v81;
            *(_WORD *)&v154[28] = 2082;
            *(_QWORD *)&v154[30] = v124;
            _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "versionInfoEvent: Device %{public}s dev-fused: %{public}s pId: 0x%x FW version: %{public}s", v154, 0x26u);
            if (SHIBYTE(v152) < 0)
              operator delete((void *)v151);
          }
          if (strlen(v68 + 768) <= 1)
          {
            v133 = 0;
            v134 = 0;
            v135 = 0;
            sub_1002A46F4((char *)&v133, *(__int128 **)buf, *(__int128 **)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3));
            if (0xAAAAAAAAAAAAAAABLL * ((v134 - v133) >> 3) < 4
              || (*(char *)(v133 + 95) < 0 ? (v83 = *(_QWORD *)(v133 + 80)) : (v83 = *(unsigned __int8 *)(v133 + 95)),
                  v83 < 2))
            {
              v84 = "?";
            }
            else
            {
              v84 = (const char *)(*(_QWORD *)buf + 72);
              if (*(char *)(*(_QWORD *)buf + 95) < 0)
                v84 = *(const char **)v84;
            }
            snprintf(v68 + 768, 0x100uLL, "%s", v84);
            *(_QWORD *)v154 = &v133;
            sub_100091BF8((void ***)v154);
          }
          v85 = sub_100027F68();
          v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 160))(v85);
          if ((_DWORD)v86)
          {
            v87 = sub_1002865F8(v86, (uint64_t)v128);
            v88 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v87));
            v89 = (const char *)objc_msgSend(v88, "UTF8String");
            v90 = v127;
            v91 = fopen(v89, "w");
            if (v91)
            {
              fwrite("App Version Info Collected from Accessory Device\n\n", 0x32uLL, 1uLL, v91);
              fwrite("New Features Enabled: 1\n", 0x18uLL, 1uLL, v91);
              v99 = (const char *)sub_10025304C((uint64_t)v128, v92, v93, v94, v95, v96, v97, v98);
              fprintf(v91, "Device Bluetooth Address: %s\n", v99);
              fprintf(v91, "Device Product ID: %d\n", *((_DWORD *)v12 + 20));
              v100 = sub_10044936C(v8);
              v129 = v88;
              v101 = "Prod-fused";
              if (v100)
                v101 = "Dev-fused";
              fprintf(v91, "Fusing: %s\n\n", v101);
              v102 = 0;
              v103 = 8 * v126;
              do
              {
                v104 = strlen((const char *)v90);
                if (v102 == 32 && (v106 = v104, v104 >= 20))
                {
                  __chkstk_darwin(v104, v105);
                  v107 = (char *)&v119 - ((v106 + 9) & 0xFFFFFFFFFFFFFFF0);
                  if (v108 >= 4)
                    v109 = v106 - 9;
                  else
                    v109 = 0;
                  bzero(v107 + 3, v109);
                  *(_WORD *)v107 = *(_WORD *)((char *)v90 + 3);
                  v107[2] = *((_BYTE *)v90 + 5);
                  v107[3] = 46;
                  *((_WORD *)v107 + 2) = *((_WORD *)v90 + 3);
                  v107[6] = *((_BYTE *)v90 + 8);
                  v107[7] = 46;
                  *((_WORD *)v107 + 4) = *(_WORD *)((char *)v90 + 9);
                  v107[10] = *((_BYTE *)v90 + 11);
                  v107[11] = 126;
                  memcpy(v107 + 12, (char *)v90 + 19, v106 - 19);
                  v107[v106 - 7] = 0;
                  fprintf(v91, "%s: %s (%s)\n", off_10097AAA0[0], (const char *)&v119 - ((v106 + 9) & 0xFFFFFFFFFFFFFFF0), (const char *)v90);
                }
                else
                {
                  fprintf(v91, "%s: %s\n", off_10097AA80[v102 / 8], (const char *)v90);
                }
                v102 += 8;
                v90 += 32;
              }
              while (v103 != v102);
              fclose(v91);
              v88 = v129;
            }
            else
            {
              v110 = qword_1009997D0;
              if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
              {
                v111 = __error();
                sub_1006D84C8((uint64_t)v88, v111, (uint64_t)&v151, v110);
              }
            }

          }
          if (qword_1009778C8 != -1)
            dispatch_once(&qword_1009778C8, &stru_100921CF8);
          sub_100660F00();
          *(_QWORD *)v154 = &v147;
          sub_100091BF8((void ***)v154);
          *(_QWORD *)v154 = buf;
          sub_100091BF8((void ***)v154);
          LODWORD(v129) = 1;
        }
        else
        {
          LODWORD(v129) = 0;
        }
        v33 = v125;
      }
      v112 = &v12[v33];
      v113 = v112[20];
      v128 = v112 + 20;
      if (v113)
      {
        v114 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(v8, buf);
          v115 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          v116 = v12[16];
          *(_DWORD *)v154 = 136446722;
          *(_QWORD *)&v154[4] = v115;
          *(_WORD *)&v154[12] = 1024;
          *(_DWORD *)&v154[14] = v33;
          *(_WORD *)&v154[18] = 2112;
          *(_QWORD *)&v154[20] = v116;
          _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "versionInfoEvent: Overwriting already existing version info for device %{public}s (index = %d); destroying o"
            "ld CoreAcc connection %@",
            v154,
            0x1Cu);
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
        }
        sub_1002A21E8(v113);
        operator delete();
      }
      operator new();
    }
  }
  if ((v16 - 11) <= 1)
  {
    v29 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", v19);
    v30 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "UUIDString")));
    v31 = (const char *)objc_msgSend(v30, "UTF8String");
    strcpy(&v127[256 * v16], v31);

    v18 += 17;
    goto LABEL_43;
  }
  if (strnlen(v19, 0x100uLL) < 0x100)
  {
    v32 = strcpy(&v127[256 * v16], v19);
    v18 += strlen(v32) + 1;
    goto LABEL_43;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D8518();
  return sub_100034234((uint64_t)v150);
}

void sub_100290BC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 144) = v1;
  sub_100091BF8((void ***)(v2 - 144));
  *(_QWORD *)(v2 - 216) = v2 - 256;
  sub_100091BF8((void ***)(v2 - 216));
  *(_QWORD *)(v2 - 256) = v2 - 176;
  sub_100091BF8((void ***)(v2 - 256));
  sub_100034234(v2 - 232);
  _Unwind_Resume(a1);
}

BOOL sub_100290CFC(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v4;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) <= a3)
    return 0;
  if (!a3)
    return 1;
  v3 = *a2 + 24 * a3;
  if (*(char *)(v3 + 23) < 0)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = *(unsigned __int8 *)(v3 + 23);
  return v4 > 1;
}

uint64_t sub_100290D5C(uint64_t a1, __int128 **a2, __int128 **a3)
{
  __int128 *v5;
  __int128 *v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;

  v5 = *a2;
  v6 = a2[1];
  if ((char *)v6 - (char *)v5 != (char *)a3[1] - (char *)*a3)
    return 0;
  if (v6 == v5)
    return 1;
  v8 = 0;
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v5) >> 3);
  while (1)
  {
    if (v8)
    {
      v25 = 0;
      v26 = 0;
      v27 = 0;
      sub_1002A46F4((char *)&v25, v5, v6, v9);
      if (0xAAAAAAAAAAAAAAABLL * ((v26 - v25) >> 3) <= v8
        || ((v10 = v25 + 24 * v8, *(char *)(v10 + 23) < 0)
          ? (v11 = *(_QWORD *)(v10 + 8))
          : (v11 = *(unsigned __int8 *)(v10 + 23)),
            v11 < 2))
      {
        v22 = 0;
        v23 = 0;
        v24 = 0;
        sub_1002A46F4((char *)&v22, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
        if (0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 3) <= v8)
        {
          v28 = (void **)&v22;
          sub_100091BF8(&v28);
          v28 = (void **)&v25;
          sub_100091BF8(&v28);
          goto LABEL_32;
        }
        v12 = v22 + 24 * v8;
        if (*(char *)(v12 + 23) < 0)
          v13 = *(_QWORD *)(v12 + 8);
        else
          v13 = *(unsigned __int8 *)(v12 + 23);
        v28 = (void **)&v22;
        sub_100091BF8(&v28);
        v28 = (void **)&v25;
        sub_100091BF8(&v28);
        if (v13 <= 1)
          goto LABEL_32;
      }
      else
      {
        v28 = (void **)&v25;
        sub_100091BF8(&v28);
      }
      v14 = (unsigned __int8 *)*a2 + 24 * v8;
      v15 = (uint64_t)*a3 + 24 * v8;
      v16 = v14[23];
      if ((v16 & 0x80u) == 0)
        v17 = v14[23];
      else
        v17 = *((_QWORD *)v14 + 1);
      v18 = *(unsigned __int8 *)(v15 + 23);
      v19 = (char)v18;
      if ((v18 & 0x80u) != 0)
        v18 = *(_QWORD *)(v15 + 8);
      if (v17 != v18)
        return 0;
      if (v19 >= 0)
        v20 = (unsigned __int8 *)*a3 + 24 * v8;
      else
        v20 = *(unsigned __int8 **)v15;
      if ((v16 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v14, v20, *((_QWORD *)v14 + 1)))
          return 0;
        goto LABEL_32;
      }
      if (v14[23])
        break;
    }
LABEL_32:
    ++v8;
    v5 = *a2;
    v6 = a2[1];
    v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)*a2) >> 3);
    if (v9 <= v8)
      return 1;
  }
  while (*v14 == *v20)
  {
    ++v14;
    ++v20;
    if (!--v16)
      goto LABEL_32;
  }
  return 0;
}

void sub_100290F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a13;
  sub_100091BF8(&a16);
  _Unwind_Resume(a1);
}

void sub_100290F90(uint64_t a1)
{
  unsigned __int8 *v2;
  _BOOL4 v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  int v11;
  _QWORD *v12;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0;
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_100921D78);
  v2 = *(unsigned __int8 **)(a1 + 32);
  v3 = sub_1006844B8((uint64_t)off_100977FA8, ((unint64_t)v2[128] << 40) | ((unint64_t)v2[129] << 32) | ((unint64_t)v2[130] << 24) | ((unint64_t)v2[131] << 16) | ((unint64_t)v2[132] << 8) | v2[133], (uint64_t)v13);
  v4 = qword_1009997D0;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 40);
      v6 = (_QWORD *)(v5 + 72);
      if (*(char *)(v5 + 95) < 0)
        v6 = (_QWORD *)*v6;
      v11 = 136315138;
      v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "versionInfoEvent: Setting key for %s", (uint8_t *)&v11, 0xCu);
    }
    if (qword_100977FB0 != -1)
      dispatch_once(&qword_100977FB0, &stru_100921D78);
    v7 = *(_QWORD *)(a1 + 40);
    v8 = (_QWORD *)(v7 + 72);
    if (*(char *)(v7 + 95) < 0)
      v8 = (_QWORD *)*v8;
    v9 = off_100977FA8;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
    sub_100683FE8((uint64_t)v9, v10, (uint64_t)v13);

  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D8578();
  }
}

void sub_100291140(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *sub_100291158(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = a1 + 40;
  *(_QWORD *)(v2 + 16) = 0;
  return sub_1002A46F4((char *)v2, *(__int128 **)(a2 + 40), *(__int128 **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3));
}

void sub_100291180(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_100091BF8(&v1);
}

void sub_1002911A8(uint64_t a1, int *a2, unsigned int a3, unsigned int a4, const UInt8 *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD **i;
  NSObject *v13;
  uint64_t v14;
  CFDataRef v15;
  NSObject *v16;
  NSObject *v17;
  int v18;
  __int16 v19;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  v18 = *a2;
  v19 = *((_WORD *)a2 + 2);
  v10 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v18, 1);
  if (v10)
  {
    v11 = v10;
    for (i = *(_QWORD ***)(a1 + 336); ; ++i)
    {
      if (i == *(_QWORD ***)(a1 + 344))
      {
        v13 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
          sub_1006D85A4(v11, v13);
        return;
      }
      if (**i == v10)
        break;
    }
    if (a3 <= 0x1F && (v14 = (*i)[a3 + 20]) != 0 && *(_BYTE *)(v14 + 97) && *(_QWORD *)(v14 + 88))
    {
      v15 = CFDataCreate(kCFAllocatorDefault, a5, a4);
      if ((acc_transportClient_processIncomingData(v15, *(_QWORD *)(v14 + 88)) & 1) != 0
        || (v16 = qword_1009997D0, !os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR)))
      {
        if (!v15)
          return;
        goto LABEL_17;
      }
      sub_1006D86AC(v11, v16);
      if (v15)
LABEL_17:
        CFRelease(v15);
    }
    else
    {
      v17 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
        sub_1006D8628(v11, v17);
    }
  }
}

void sub_100291348(uint64_t a1, uint64_t a2, unsigned int a3, const UInt8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  _QWORD *v11;
  NSObject *v12;
  NSObject *v13;
  void **v14;
  CFDataRef v15;
  NSObject *v16;
  void *__p[2];
  char v18;
  uint8_t buf[4];
  unsigned int v20;
  __int16 v21;
  void **v22;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  if (v8)
  {
    v9 = v8;
    for (i = *(_QWORD **)(a1 + 336); ; ++i)
    {
      if (i == *(_QWORD **)(a1 + 344))
      {
        v12 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
          sub_1006D8730(v9, v12);
        return;
      }
      v11 = (_QWORD *)*i;
      if (*(_QWORD *)*i == v8)
        break;
    }
    v13 = qword_1009997D0;
    if (v11[17])
    {
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v9, __p);
        if (v18 >= 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        *(_DWORD *)buf = 67109378;
        v20 = a3;
        v21 = 2082;
        v22 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "authenticationDataEvent: Processing %d bytes received from device %{public}s", buf, 0x12u);
        if (v18 < 0)
          operator delete(__p[0]);
      }
      v15 = CFDataCreate(kCFAllocatorDefault, a4, a3);
      if ((acc_transportClient_processIncomingData(v15, v11[17]) & 1) != 0
        || (v16 = qword_1009997D0, !os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR)))
      {
        if (!v15)
          return;
        goto LABEL_21;
      }
      sub_1006D8838(v9, v16);
      if (v15)
LABEL_21:
        CFRelease(v15);
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    {
      sub_1006D87B4(v9, v13);
    }
  }
}

void sub_100291570(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void **v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  _BYTE v21[10];
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  *(_DWORD *)buf = *(_DWORD *)a2;
  *(_WORD *)v21 = *(_WORD *)(a2 + 4);
  v11 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  if (v11)
  {
    v12 = v11;
    v13 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F6EC(v12, (uint64_t)__p);
      v14 = v19 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)v21 = v14;
      *(_WORD *)&v21[8] = 1024;
      v22 = a3;
      v23 = 1024;
      v24 = a4;
      v25 = 1024;
      v26 = a5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "received setup command from device \"%s\", setupType = %d, opType = %d, pldLen = %d", buf, 0x1Eu);
      if (v19 < 0)
        operator delete(__p[0]);
    }
    if (a3 == 1)
    {
      if (a5 >= 2)
      {
        if (!a6)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/aacp/AACPClient.mm");
        v15 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          v16 = *a6;
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)v21 = a4;
          *(_WORD *)&v21[4] = 1024;
          *(_DWORD *)&v21[6] = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "received seal setup operation opType = %d result = %d", buf, 0xEu);
        }
      }
      if (qword_1009778D8 != -1)
        dispatch_once(&qword_1009778D8, &stru_100921C38);
      sub_100421AE0(off_1009778D0, v12, 1, a4, a5, a6);
    }
    else
    {
      v17 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v21 = a3;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Unsupported setup type = %d", buf, 8u);
      }
    }
  }
}

void sub_1002917F0(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  char v15;
  __int16 v16;
  int v17;
  __int16 v18;
  char v19;
  uint64_t v20;
  int v21;
  char *v22;
  uint64_t v23;
  std::string __p;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  int v39;
  __int16 v40;
  const char *v41;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v27) = *(_WORD *)(a2 + 4);
  v5 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  if (v5)
  {
    v6 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *a3;
      v8 = *(unsigned __int16 *)(a3 + 1);
      v9 = *(_DWORD *)(a3 + 3);
      v10 = *(unsigned __int16 *)(a3 + 7);
      v11 = a3[9];
      v12 = *(_QWORD *)(a3 + 10);
      v13 = *(_DWORD *)(a3 + 18);
      v14 = *(const char **)(a3 + 22);
      if (!v14)
        v14 = "";
      *(_DWORD *)buf = 67110914;
      v27 = v7;
      v28 = 1024;
      v29 = v8;
      v30 = 1024;
      v31 = v9;
      v32 = 1024;
      v33 = v10;
      v34 = 1024;
      v35 = v11;
      v36 = 2048;
      v37 = v12;
      v38 = 1024;
      v39 = v13;
      v40 = 2082;
      v41 = v14;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "caseInfoResponseEvent: messageVersion = %u, vendorID = %u, productID = %u, vendorIDSource = %u, caseColor = %u, caseVersion = %llu, reserved = %u, caseName = %{public}s", buf, 0x3Au);
    }
    v15 = *a3;
    v16 = *(_WORD *)(a3 + 1);
    v17 = *(_DWORD *)(a3 + 3);
    v18 = *(_WORD *)(a3 + 7);
    v19 = a3[9];
    v20 = *(_QWORD *)(a3 + 10);
    v21 = *(_DWORD *)(a3 + 18);
    if (*(_QWORD *)(a3 + 22))
      v22 = *(char **)(a3 + 22);
    else
      v22 = "";
    sub_100091AE8(&__p, v22);
    sub_10044965C(v5, v15, v16, v17, v18, v19, v20, v21, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (sub_10044F614(v5))
      v23 = 0xFFFFLL;
    else
      v23 = 65533;
    sub_1002808BC(a1, v5, 0xFFFFLL, v23);
    if (qword_100977A68 != -1)
      dispatch_once(&qword_100977A68, &stru_100921C58);
    sub_1004688F8((uint64_t)off_100977A60, v5);
  }
}

void sub_100291A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100291A70(uint64_t a1, uint64_t a2, int a3, int a4, char *a5)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  v15 = *(_DWORD *)a2;
  LOWORD(v16) = *(_WORD *)(a2 + 4);
  v9 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v15, 1);
  if (v9)
  {
    v10 = v9;
    v11 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *a5;
      v15 = 67109632;
      v16 = a3;
      v17 = 1024;
      v18 = a4;
      v19 = 1024;
      v20 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "deviceInfoEvent: devInfoType = %u, devInfoLen = %u, devInfoData=%d", (uint8_t *)&v15, 0x14u);
    }
    if (a3 == 1)
    {
      v13 = sub_1004513F0(v10, *a5);
      sub_100291C00(v13, v10);
    }
    else
    {
      v14 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        v15 = 67109120;
        v16 = a3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Unsupported device info type = %d", (uint8_t *)&v15, 8u);
      }
    }
  }
}

void sub_100291C00(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];
  _QWORD v8[5];
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;

  v3 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043F6EC(a2, (uint64_t)__p);
    if (v10 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Notify EU region bit change for device \"%s\"", buf, 0xCu);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  v5 = sub_100475960();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10029B0D4;
  v8[3] = &unk_100917378;
  v8[4] = a2;
  sub_100041A34(v5, v8);
  v6 = sub_1004759E0();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10029B138;
  v7[3] = &unk_100917378;
  v7[4] = a2;
  sub_100041A34(v6, v7);
}

uint64_t sub_100291D40(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, unsigned __int8 *a5)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;

  v9 = *a5;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  v22 = *(_DWORD *)a2;
  LOWORD(v23) = *(_WORD *)(a2 + 4);
  result = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v22, 1);
  if (result)
  {
    v11 = result;
    v12 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      v20 = sub_10025304C(a2, v13, v14, v15, v16, v17, v18, v19);
      v21 = "Unknown";
      v22 = 136315650;
      v23 = v20;
      if ((_DWORD)v9 == 1)
        v21 = "Audio Arbitration";
      v24 = 2080;
      v25 = v21;
      v26 = 1024;
      v27 = a4 - 1;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Receive relay message from device \"%s\", relayMessageType -> %s, relayMessageLen -> %d", (uint8_t *)&v22, 0x1Cu);
    }
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_100921C38);
    return sub_100421AE4((uint64_t)off_1009778D0, v11, a3, v9, (unsigned __int16)(a4 - 1), (uint64_t)(a5 + 1));
  }
  return result;
}

uint64_t sub_100291EE4(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, char *a7, unsigned int a8, char *__src)
{
  uint64_t v17;
  _QWORD **v18;
  _QWORD **v19;
  _QWORD *v20;
  NSObject *v21;
  NSObject *v22;
  char *v23;
  void *__p[2];
  uint64_t v26;
  _QWORD v27[2];
  uint8_t buf[4];
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  char *v37;
  __int16 v38;
  unsigned int v39;

  v27[0] = 0;
  v27[1] = 0;
  sub_10003415C((uint64_t)v27, a1 + 360);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v29) = *(_WORD *)(a2 + 4);
  v17 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  if (!v17 || (v18 = *(_QWORD ***)(a1 + 336), v19 = *(_QWORD ***)(a1 + 344), v18 == v19))
  {
LABEL_7:
    v21 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      if (a7[23] < 0)
        a7 = *(char **)a7;
      *(_DWORD *)buf = 67110402;
      v29 = a3;
      v30 = 1024;
      v31 = a4;
      v32 = 1024;
      v33 = a5;
      v34 = 1024;
      v35 = a6;
      v36 = 2080;
      v37 = a7;
      v38 = 1024;
      v39 = a8;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "AACPClient::getCertificatesResponseEvent (not handled, connection is gone) - certSeqNum == %d, responseInfo == %d, endpointType == %d, serialNumberLength == %d, serialNumber == %s, certificateLength == %d", buf, 0x2Au);
    }
  }
  else
  {
    while (1)
    {
      v20 = *v18;
      if (**v18 == v17)
        break;
      if (++v18 == v19)
        goto LABEL_7;
    }
    v22 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      v23 = a7;
      if (a7[23] < 0)
        v23 = *(char **)a7;
      *(_DWORD *)buf = 67110402;
      v29 = a3;
      v30 = 1024;
      v31 = a4;
      v32 = 1024;
      v33 = a5;
      v34 = 1024;
      v35 = a6;
      v36 = 2080;
      v37 = v23;
      v38 = 1024;
      v39 = a8;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "AACPClient::getCertificatesResponseEvent - certSeqNum == %d, responseInfo == %d, endpointType == %d, serialNumberLength == %d, serialNumber == %s, certificateLength == %d", buf, 0x2Au);
    }
    if (a7[23] < 0)
    {
      sub_10003430C(__p, *(void **)a7, *((_QWORD *)a7 + 1));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a7;
      v26 = *((_QWORD *)a7 + 2);
    }
    sub_1002921BC((uint64_t)v20, (int *)a2, a3, a4, a5, a6, (int)__p, a8, __src);
    if (SHIBYTE(v26) < 0)
      operator delete(__p[0]);
  }
  return sub_100034234((uint64_t)v27);
}

void sub_100292184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  sub_100034234((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1002921BC(uint64_t a1, int *a2, int a3, int a4, int a5, int a6, int a7, unsigned int a8, char *__src)
{
  int v14;
  uint64_t v15;
  int v17;
  __int16 v18;
  _QWORD v19[2];

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 536);
  if (*(_BYTE *)(a1 + 528))
  {
    v14 = *(_DWORD *)(a1 + 532);
    goto LABEL_3;
  }
  if (a3)
  {
    v14 = *(_DWORD *)(a1 + 532);
    if (v14 != -1)
    {
LABEL_3:
      if (v14 == a3)
      {
        if (!a3)
          operator new();
        sub_1002A4510(*(_QWORD *)(*(_QWORD *)(a1 + 512) - 8), *(char **)(*(_QWORD *)(*(_QWORD *)(a1 + 512) - 8) + 8), __src, &__src[a8], a8);
        switch(a4)
        {
          case 2:
            *(_BYTE *)(a1 + 528) = 0;
            *(_DWORD *)(a1 + 532) = -1;
            sub_10029BD5C(a1);
            v15 = sub_100065478();
            v17 = *a2;
            v18 = *((_WORD *)a2 + 2);
            (*(void (**)(uint64_t, int *, uint64_t, _QWORD))(*(_QWORD *)v15 + 368))(v15, &v17, 3, 0);
            break;
          case 1:
            *(_BYTE *)(a1 + 528) = 1;
            *(_DWORD *)(a1 + 532) = 0;
            break;
          case 0:
            *(_BYTE *)(a1 + 528) = 0;
            ++*(_DWORD *)(a1 + 532);
            break;
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      {
        sub_1006D88E8();
      }
      goto LABEL_19;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D88BC();
LABEL_19:
  sub_100034264((uint64_t)v19);
  return sub_100034234((uint64_t)v19);
}

void sub_100292478(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  operator delete();
}

uint64_t sub_1002924CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  NSObject *v11;
  void *__p;
  void *v14;
  _BYTE *v15;
  _QWORD v16[2];
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  int v20;

  v16[0] = 0;
  v16[1] = 0;
  sub_10003415C((uint64_t)v16, a1 + 360);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  LODWORD(__p) = *(_DWORD *)a2;
  WORD2(__p) = *(_WORD *)(a2 + 4);
  v7 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&__p, 1);
  if (a4 == 1)
  {
    v8 = *(_BYTE **)a3;
    if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 == 1)
    {
      v9 = v7;
      v10 = operator new(3uLL);
      v14 = v10 + 3;
      v15 = v10 + 3;
      *(_WORD *)v10 = 0;
      v10[2] = 0;
      __p = v10;
      v11 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        v18 = 1;
        v19 = 1024;
        v20 = 1;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "AACPClient::getGyroInformationMessageEvent - received gyroInfoDataLength: %lu, gyroInfoVersion: %u", buf, 0x12u);
        v8 = *(_BYTE **)a3;
      }
      *v10 = 1;
      v10[1] = (*v8 & 4) != 0;
      v10[2] = *v8 & 1;
      sub_10044133C(v9, (char **)&__p);
      if (__p)
      {
        v14 = __p;
        operator delete(__p);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    {
      sub_1006D8948();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D89AC();
  }
  return sub_100034234((uint64_t)v16);
}

void sub_1002926CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100292704(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4, unsigned int a5, _QWORD *a6)
{
  void *v9;
  double v10;
  double v11;
  unsigned int v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  int v36;
  __int16 v37;
  _OWORD v38[2];
  _QWORD v39[2];
  uint8_t buf[4];
  unsigned int v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  void *v47;

  v39[0] = 0;
  v39[1] = 0;
  sub_10003415C((uint64_t)v39, a1 + 360);
  if (a3 < 2)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(v9, "timeIntervalSince1970");
    v11 = v10;

    v12 = (61681 * a5) >> 20;
    v13 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v41 = (61681 * a5) >> 20;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "AACPClient::getBTEventHistoryListMessageEvent - Last %u BT Events \n", buf, 8u);
    }
    if (a5 >= 0x11)
    {
      v14 = 0;
      if (v12 <= 1)
        v15 = 1;
      else
        v15 = v12;
      v16 = v15 + 16 * v15;
      v17 = 1;
      while (v14 + 17 <= (unint64_t)a5)
      {
        memset(v38, 0, 17);
        v18 = *a6 + v14;
        v19 = *(_BYTE *)(v18 + 16);
        v38[0] = *(_OWORD *)v18;
        LOBYTE(v38[1]) = v19;
        v37 = 0;
        v36 = 0;
        v20 = sub_10004C878((uint64_t)&v36, (uint64_t)v38 + 8, 6uLL);
        v21 = sub_1002929F8(v11, v20, a4, *(unint64_t *)&v38[0]);
        v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
        v23 = sub_100292AF0((uint64_t)v22, BYTE14(v38[0]), *(unsigned __int16 *)((char *)v38 + 15));
        v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        v32 = sub_10025304C((uint64_t)&v36, v25, v26, v27, v28, v29, v30, v31);
        v33 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109891;
          v41 = v17;
          v42 = 2112;
          v43 = v22;
          v44 = 2081;
          v45 = v32;
          v46 = 2112;
          v47 = v24;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "BTEventHistory: %2d. Time: %@, BT Addr: %{private}s, Event: %@", buf, 0x26u);
        }

        v14 += 17;
        ++v17;
        if (v16 == v14)
          return sub_100034234((uint64_t)v39);
      }
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
        sub_1006D8A6C();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D8A0C();
  }
  return sub_100034234((uint64_t)v39);
}

void sub_1002929B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1002929F8(double a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  id v4;
  id v5;
  void *v6;
  void *v7;

  v4 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSince1970:", a1 - (double)a3 / 1000000.0 + (double)a4 / 1000000.0);
  v5 = objc_alloc_init((Class)NSDateFormatter);
  objc_msgSend(v5, "setDateFormat:", CFSTR("yyyy-MM-dd HH:mm:ss.SSS zzz"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "stringFromDate:", v4));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@"), v6));

  return v7;
}

void sub_100292AC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id sub_100292AF0(uint64_t a1, unsigned int a2, unsigned int a3)
{
  NSString *v3;
  uint64_t v5;

  switch(a2)
  {
    case 1u:
      if (a3 == 2)
      {
        v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Connect,        Direction: Source initiated, Status %u"), 2, v5);
      }
      else if (a3 == 1)
      {
        v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Connect,        Direction: Accessory initiated, Status %u"), 1, v5);
      }
      else
      {
        v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Connect,        Invalid direction: %u"), a3, v5);
      }
      break;
    case 2u:
      v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Disconnect,     Reason: %u"), a3, v5);
      break;
    case 3u:
      v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Pairing,        Status: %u"), a3, v5);
      break;
    case 4u:
      v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unpairing,      Status: %u"), a3, v5);
      break;
    case 5u:
      v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("UTP Connect,    Status: %u"), a3, v5);
      break;
    case 6u:
      v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("UTP Disconnect, Reason: %u"), a3, v5);
      break;
    case 7u:
      v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("LE Connect,     Status: %u"), a3, v5);
      break;
    case 8u:
      v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("LE Disconnect,  Reason: %u"), a3, v5);
      break;
    case 9u:
      v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Connect,        Accessory Initiated, Status: %u"), a3, v5);
      break;
    case 0xAu:
      v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Connect,        Source Initiated, Status: %u"), a3, v5);
      break;
    default:
      v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Unknown: %X,    Status: %u"), a2, a3);
      break;
  }
  return (id)objc_claimAutoreleasedReturnValue(v3);
}

uint64_t sub_100292CA8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void **v8;
  void *__p[2];
  char v11;
  _QWORD v12[2];
  uint8_t buf[4];
  void **v14;
  __int16 v15;
  int v16;

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 360);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  v5 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
  if (v5)
  {
    v6 = a3[1] - *a3;
    v7 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v5, __p);
      v8 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v14 = v8;
      v15 = 1024;
      v16 = (unsigned __int16)v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Conversation Detect Message Received from device \"%{public}s\", len -> %u", buf, 0x12u);
      if (v11 < 0)
        operator delete(__p[0]);
    }
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_100921C38);
    sub_100421B54(off_1009778D0, v5, (unsigned __int16)v6, *a3);
  }
  return sub_100034234((uint64_t)v12);
}

void sub_100292E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100292E74(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 **a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  void *v20;
  NSObject *v21;
  _QWORD v23[2];
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  v23[0] = 0;
  v23[1] = 0;
  sub_10003415C((uint64_t)v23, a1 + 360);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v25) = *(_WORD *)(a2 + 4);
  v7 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v8 = (uint64_t)*a4;
  v9 = **a4;
  if (v9 == 1)
  {
    v13 = *(unsigned __int8 *)(v8 + 1);
    v14 = *(unsigned __int8 *)(v8 + 2);
    v15 = *(unsigned __int8 *)(v8 + 3);
    v16 = *(unsigned __int16 *)(v8 + 4);
    v17 = *(unsigned __int16 *)(v8 + 6);
    v18 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67110144;
      v25 = v13;
      v26 = 1024;
      v27 = v14;
      v28 = 1024;
      v29 = v15;
      v30 = 1024;
      v31 = v16;
      v32 = 1024;
      v33 = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "AACPClient::adaptiveVolumeMessageRecvEvent: setAdaptiveVolumeRequestTargets media: %u, telephony: %u, voiceCommand: %u, rampUpRate: %u ms, rampDownRate: %u ms", buf, 0x20u);
    }
    v19 = sub_10029316C(a1, v13 | (v14 << 8) | (v15 << 16) | (v16 << 24) | (v17 << 40));
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    if (qword_100977E00 != -1)
      dispatch_once(&qword_100977E00, &stru_100921C18);
    sub_1003E4430((_QWORD *)qword_100977DF8, v7, v20);

  }
  else if (v9 == 4)
  {
    v10 = *(unsigned __int8 *)(v8 + 1);
    v11 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(unsigned __int8 *)(v8 + 2);
      *(_DWORD *)buf = 67109376;
      v25 = v10;
      v26 = 1024;
      v27 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "AACPClient::adaptiveVolumeMessageRecvEvent: setDRC mode: %u, version: %u", buf, 0xEu);
    }
    if (qword_100977E00 != -1)
      dispatch_once(&qword_100977E00, &stru_100921C18);
    sub_1003E44B4((_QWORD *)qword_100977DF8, v7, v10 == 1);
  }
  else
  {
    v21 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "AACPClient::adaptiveVolumeMessageRecvEvent: invalid message type", buf, 2u);
    }
  }
  return sub_100034234((uint64_t)v23);
}

void sub_10029313C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_10029316C(uint64_t a1, unint64_t a2)
{
  id v3;
  double v4;
  void *v5;
  double v6;
  void *v7;
  double v8;
  void *v9;
  double v10;
  void *v11;
  double v12;
  void *v13;
  _QWORD v15[2];

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 360);
  v3 = objc_alloc_init((Class)NSMutableDictionary);
  *(float *)&v4 = (float)a2 / 100.0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4));
  objc_msgSend(v3, "setObject:forKey:", v5, CFSTR("kCBMsgArgParamAutoVolumeMediaTarget"));
  *(float *)&v6 = (float)BYTE1(a2) / 100.0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v6));
  objc_msgSend(v3, "setObject:forKey:", v7, CFSTR("kCBMsgArgParamAutoVolumeTelephonyTarget"));
  *(float *)&v8 = (float)BYTE2(a2) / 100.0;
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v8));
  objc_msgSend(v3, "setObject:forKey:", v9, CFSTR("kCBMsgArgParamAutoVolumeVoiceTarget"));
  *(float *)&v10 = (float)(unsigned __int16)(a2 >> 24);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v10));
  objc_msgSend(v3, "setObject:forKey:", v11, CFSTR("kCBMsgArgParamAutoVolumeRampUpRate"));
  *(float *)&v12 = (float)(unsigned __int16)(HIDWORD(a2) >> 8);
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v12));
  objc_msgSend(v3, "setObject:forKey:", v13, CFSTR("kCBMsgArgParamAutoVolumeRampDownRate"));

  sub_100034234((uint64_t)v15);
  return v3;
}

void sub_1002932FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v15 = v12;

  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10029335C()
{
  JUMPOUT(0x100293348);
}

void sub_100293364()
{
  JUMPOUT(0x10029334CLL);
}

uint64_t sub_10029336C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  NSObject *v6;
  _QWORD v8[2];
  uint8_t buf[4];
  uint64_t v10;

  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 360);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v10) = *(_WORD *)(a2 + 4);
  v5 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v6 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Prox Card Status: Received Prox Card Features: 0x%llx", buf, 0xCu);
  }
  sub_100441444(v5, a3);
  return sub_100034234((uint64_t)v8);
}

void sub_10029348C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002934AC(uint64_t a1, uint64_t a2, int a3, unsigned __int8 **a4)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;

  switch(a3)
  {
    case 0:
      v6 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        v7 = (*a4)[8];
        v8 = (char)(*a4)[7];
        v9 = (*a4)[6];
        v10 = (*a4)[5];
        v11 = (*a4)[4];
        v12 = (*a4)[3];
        v13 = *(unsigned __int16 *)(*a4 + 1);
        v14 = **a4;
        v35 = 67110912;
        v36 = v14;
        v37 = 1024;
        v38 = v13;
        v39 = 1024;
        v40 = v12;
        v41 = 1024;
        v42 = v11;
        v43 = 1024;
        v44 = v10;
        v45 = 1024;
        v46 = v9;
        v47 = 1024;
        v48 = v8;
        v49 = 1024;
        v50 = v7;
        v15 = "PerfStats: Connection Record | Direction: %u, Baseband time: %u, BBFC Scan Req Received: %u, Num 2.4G conn"
              "ections: %u, Num hrb connections: %u, UTP state: %u, RSSI: %u, Audio state: %u";
        v16 = v6;
        v17 = 50;
        goto LABEL_13;
      }
      break;
    case 1:
      v19 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        v20 = *(unsigned __int16 *)(*a4 + 9);
        v21 = *(unsigned __int16 *)(*a4 + 7);
        v22 = *(unsigned __int16 *)(*a4 + 5);
        v23 = *(unsigned __int16 *)(*a4 + 3);
        v24 = *(unsigned __int16 *)(*a4 + 1);
        v25 = **a4;
        v35 = 67110400;
        v36 = v25;
        v37 = 1024;
        v38 = v24;
        v39 = 1024;
        v40 = v23;
        v41 = 1024;
        v42 = v22;
        v43 = 1024;
        v44 = v21;
        v45 = 1024;
        v46 = v20;
        v15 = "PerfStats: Boot time Record | Boot type: %u, Boot time total: %u, Boot time end: %u, Boot time nvram init:"
              " %u, Boot time core loading: %u, UTP setup time: %u";
        v16 = v19;
        v17 = 38;
        goto LABEL_13;
      }
      break;
    case 2:
      v26 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        v27 = *((unsigned __int16 *)*a4 + 3);
        v28 = *((unsigned __int16 *)*a4 + 2);
        v29 = *((unsigned __int16 *)*a4 + 1);
        v30 = *(unsigned __int16 *)*a4;
        v35 = 67109888;
        v36 = v30;
        v37 = 1024;
        v38 = v29;
        v39 = 1024;
        v40 = v28;
        v41 = 1024;
        v42 = v27;
        v15 = "PerfStats: A2dp Record | AM setup: %u, DSP setup: %u, UTP config: %u, Snoop setup: %u";
        goto LABEL_12;
      }
      break;
    case 3:
      v26 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        v31 = *((unsigned __int16 *)*a4 + 3);
        v32 = *((unsigned __int16 *)*a4 + 2);
        v33 = *((unsigned __int16 *)*a4 + 1);
        v34 = *(unsigned __int16 *)*a4;
        v35 = 67109888;
        v36 = v34;
        v37 = 1024;
        v38 = v33;
        v39 = 1024;
        v40 = v32;
        v41 = 1024;
        v42 = v31;
        v15 = "PerfStats: Sco Record | AM setup: %u, DSP setup: %u, UTP config: %u, Snoop setup: %u";
LABEL_12:
        v16 = v26;
        v17 = 26;
        goto LABEL_13;
      }
      break;
    default:
      v18 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        v35 = 67109120;
        v36 = a3;
        v15 = "Invalid subtype %d";
        v16 = v18;
        v17 = 8;
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v35, v17);
      }
      break;
  }
}

uint64_t sub_1002937A4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  _QWORD v11[2];
  unsigned __int8 v12[16];

  v11[0] = 0;
  v11[1] = 0;
  sub_10003415C((uint64_t)v11, a1 + 360);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100921CF8);
  sub_10065A6B4((uint64_t)off_1009778C0, a2, v12);
  v7 = sub_100030DF4(v12);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = sub_10034FCFC();
  (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(_QWORD *)v9 + 192))(v9, v8, a3, a4);

  return sub_100034234((uint64_t)v11);
}

void sub_100293888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002938B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  NSObject *v9;
  void **v10;
  void *__p[2];
  char v13;
  _QWORD v14[2];
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  int v18;

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 360);
  if (sub_100287F54(a1, a2))
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100921C78);
    LODWORD(__p[0]) = *(_DWORD *)a2;
    WORD2(__p[0]) = *(_WORD *)(a2 + 4);
    v6 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
    if (v6)
    {
      v7 = a3[2];
      v8 = *a3;
      v9 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v6, __p);
        if (v13 >= 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        *(_DWORD *)buf = 136446466;
        v16 = v10;
        v17 = 1024;
        v18 = (unsigned __int16)(v7 - v8);
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Multimodal Context Message Received from device \"%{public}s\", len -> %u", buf, 0x12u);
        if (v13 < 0)
          operator delete(__p[0]);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D8A98();
  }
  return sub_100034234((uint64_t)v14);
}

void sub_100293A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100293A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  void **v11;
  void *__p[2];
  char v14;
  _QWORD v15[2];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  void **v19;
  __int16 v20;
  int v21;

  v15[0] = 0;
  v15[1] = 0;
  sub_10003415C((uint64_t)v15, a1 + 360);
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  *(_DWORD *)buf = *(_DWORD *)a2;
  LOWORD(v17) = *(_WORD *)(a2 + 4);
  v6 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  if (v6)
  {
    v7 = (unsigned __int8 *)*a4;
    v8 = a4[1] - *a4;
    v9 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *v7;
      sub_10043E5F8(v6, __p);
      v11 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 67109634;
      v17 = v10;
      v18 = 2082;
      v19 = v11;
      v20 = 1024;
      v21 = (unsigned __int16)v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PME Config Message, subtype %d received from device \"%{public}s\", len -> %u", buf, 0x18u);
      if (v14 < 0)
        operator delete(__p[0]);
    }
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_100921C38);
    sub_10041ECF0((uint64_t)off_1009778D0, v6, (unsigned __int16)v8, *a4);
  }
  return sub_100034234((uint64_t)v15);
}

void sub_100293C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100293C54(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  void *__p;
  _BYTE *v38;
  _QWORD v39[2];
  uint8_t buf[4];
  int v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;

  v39[0] = 0;
  v39[1] = 0;
  sub_10003415C((uint64_t)v39, a1 + 360);
  v8 = sub_100287F54(a1, a2);
  v9 = qword_1009997D0;
  if (v8)
  {
    v34 = a2;
    v35 = v8;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (a4[1] - *a4) >> 3;
      *(_DWORD *)buf = 67109376;
      v41 = a3;
      v42 = 2048;
      v43 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "tipiTableEvent: Setting state %d and table of size %zu", buf, 0x12u);
    }
    v36 = a3;
    v12 = *a4;
    v11 = a4[1];
    if (v11 != *a4)
    {
      v13 = 0;
      v14 = qword_1009997D0;
      do
      {
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          v22 = sub_10025304C(v12 + 8 * v13, v15, v16, v17, v18, v19, v20, v21);
          v23 = *a4 + 8 * v13;
          v24 = *(unsigned __int8 *)(v23 + 6);
          LODWORD(v23) = *(unsigned __int8 *)(v23 + 7);
          *(_DWORD *)buf = 67109891;
          v41 = v13 + 1;
          v42 = 2081;
          v43 = v22;
          v44 = 1024;
          v45 = v24;
          v46 = 1024;
          v47 = v23;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "tipiTableEvent:   Entry %d: addr %{private}s, connectionStatus %u, stateFlags 0x%02x", buf, 0x1Eu);
          v14 = qword_1009997D0;
          ++v13;
          v12 = *a4;
          v11 = a4[1];
        }
        else
        {
          ++v13;
        }
      }
      while (v13 < (v11 - v12) >> 3);
    }
    *((_BYTE *)v35 + 729) = v36;
    sub_10001FE6C(&__p, (uint64_t)a4);
    if (v35 + 92 != (uint64_t *)&__p)
      sub_1002A7150((char *)v35 + 736, (char *)__p, (uint64_t)v38, (v38 - (_BYTE *)__p) >> 3);
    if (__p)
    {
      v38 = __p;
      operator delete(__p);
    }
    sub_100034264((uint64_t)v39);
    v25 = objc_alloc_init((Class)CBDevice);
    v26 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v34, 6);
    objc_msgSend(v25, "setBtAddressData:", v26);

    v27 = objc_alloc_init((Class)NSMutableArray);
    v29 = *a4;
    v28 = a4[1];
    while (v29 != v28)
    {
      v30 = objc_alloc_init((Class)CBDevice);
      v31 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v29, 6);
      objc_msgSend(v30, "setBtAddressData:", v31);

      objc_msgSend(v30, "setTipiConnectionStatus:", *(unsigned __int8 *)(v29 + 6));
      objc_msgSend(v30, "setTipiState:", *(unsigned __int8 *)(v29 + 7));
      objc_msgSend(v27, "addObject:", v30);

      v28 = a4[1];
      v29 += 8;
    }
    objc_msgSend(v25, "setTipiDevices:", v27);
    v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v32, "postNotificationName:object:userInfo:", CFSTR("com.apple.bluetooth.TipiChanged"), v25, 0);

  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D8AC4();
  }
  return sub_100034234((uint64_t)v39);
}

void sub_100293F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p)
    operator delete(__p);
  sub_100034234((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100294024(uint64_t a1, uint64_t a2, int a3, unsigned __int8 **a4)
{
  uint64_t v8;
  NSObject *v9;
  void **v10;
  void *__p[2];
  char v13;
  _QWORD v14[2];
  uint8_t buf[4];
  void **v16;
  __int16 v17;
  int v18;

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 360);
  if (sub_100287F54(a1, a2))
  {
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100921C78);
    LODWORD(__p[0]) = *(_DWORD *)a2;
    WORD2(__p[0]) = *(_WORD *)(a2 + 4);
    v8 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)__p, 1);
    if (v8)
    {
      if (qword_100977A98 != -1)
        dispatch_once(&qword_100977A98, &stru_100921DD8);
      sub_10051C6EC((uint64_t)off_100977A90, v8, **a4);
      v9 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(v8, __p);
        v10 = v13 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446466;
        v16 = v10;
        v17 = 1024;
        v18 = a3;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sensor Streaming Config Message received from device \"%{public}s\", version -> %u", buf, 0x12u);
        if (v13 < 0)
          operator delete(__p[0]);
      }
      if (qword_1009778D8 != -1)
        dispatch_once(&qword_1009778D8, &stru_100921C38);
      sub_100421B58((uint64_t)off_1009778D0, v8);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D8AF0();
  }
  return sub_100034234((uint64_t)v14);
}

void sub_10029424C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100294270(uint64_t a1, uint64_t a2, const UInt8 *a3, unsigned int a4, int a5, int a6)
{
  NSObject *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  CFDataRef v17;
  __CFDictionary *Mutable;
  CFNumberRef v19;
  __CFArray *v20;
  int v21;
  NSObject *v22;
  uint8_t v23[8];
  int v24;
  __int16 v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  unsigned int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  const UInt8 *v39;

  v12 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68159234;
    v27 = 6;
    v28 = 2096;
    v29 = a2;
    v30 = 1024;
    v31 = a5;
    v32 = 1024;
    v33 = a6;
    v34 = 1024;
    v35 = a4;
    v36 = 1040;
    v37 = 72;
    v38 = 2096;
    v39 = a3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received GAPA signature response from %.6P version=%u endpointType=%u dataLen=%u data=%.72P", buf, 0x34u);
  }
  v13 = sub_100287F54(a1, a2);
  if (v13)
  {
    v14 = v13;
    v15 = *v13;
    if (*v13)
    {
      *((_DWORD *)v13 + 150) = 3;
      v16 = sub_100065478();
      v24 = *(_DWORD *)(v15 + 128);
      v25 = *(_WORD *)(v15 + 132);
      (*(void (**)(uint64_t, int *, uint64_t, _QWORD))(*(_QWORD *)v16 + 368))(v16, &v24, 5, 0);
      v17 = CFDataCreate(kCFAllocatorDefault, a3, a4);
      Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFDictionaryAddValue(Mutable, kCFACCProperties_Endpoint_AudioProduct_AuthData, v17);
      *(_DWORD *)buf = a6;
      v19 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, buf);
      CFDictionaryAddValue(Mutable, kCFACCProperties_Endpoint_AudioProduct_AuthInfoType, v19);
      v20 = CFArrayCreateMutable(0, 0, 0);
      CFArrayAppendValue(v20, Mutable);
      v21 = acc_transportClient_setPropertyForEndpointWithUUID(kCFACCProperties_Endpoint_AudioProduct_AuthResponse, v20, v14[18]);
      v22 = qword_1009997D0;
      if (v21)
      {
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v23 = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "gapaResponseEvent: Published kCFACCProperties_Endpoint_AudioProduct_AuthResponse", v23, 2u);
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      {
        sub_1006D8BE4();
      }
      CFArrayRemoveAllValues(v20);
      CFRelease(v20);
      CFRelease(Mutable);
      CFRelease(v17);
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    {
      sub_1006D8B80();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D8B1C();
  }
}

void sub_10029454C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v7[10];

  if (a3 == 4098)
  {
    v7[8] = v3;
    v7[9] = v4;
    if (qword_10097AB28 != -1)
      dispatch_once(&qword_10097AB28, &stru_100921CB8);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1002945E8;
    v7[3] = &unk_100918090;
    v7[4] = a1;
    v7[5] = a2;
    sub_10048D538((uint64_t)off_10097AB20, v7);
  }
}

uint64_t sub_1002945E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *i;
  _QWORD *v5;
  std::string *v6;
  int v7;
  void *v8;
  unsigned __int8 v9;
  size_t v10;
  const void *p_p;
  void *v12;
  void **v13;
  size_t v14;
  BOOL v15;
  BOOL v16;
  size_t v17;
  void *v18;
  int v19;
  void **v20;
  void **v21;
  size_t v22;
  uint64_t v23;
  unsigned __int16 v24;
  int v25;
  std::string v27;
  void *__p;
  size_t v29;
  unsigned __int8 v30;
  _QWORD v31[2];
  void *__dst[2];
  uint64_t v33;

  v2 = *(_QWORD *)(a1 + 32);
  v31[0] = 0;
  v31[1] = 0;
  sub_10003415C((uint64_t)v31, v2 + 360);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    for (i = *(_QWORD **)(v2 + 336); ; ++i)
    {
      if (i == *(_QWORD **)(v2 + 344))
        return sub_100034234((uint64_t)v31);
      v5 = (_QWORD *)*i;
      if (*(_QWORD *)*i == v3)
        break;
    }
    sub_10043F6EC(v3, (uint64_t)&__p);
    v6 = (std::string *)(v5 + 7);
    if (*((char *)v5 + 79) < 0)
    {
      sub_10003430C(__dst, (void *)v5[7], v5[8]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v33 = v5[9];
    }
    v7 = SHIBYTE(v33);
    v8 = __dst[0];
    v9 = v30;
    if ((v30 & 0x80u) == 0)
      v10 = v30;
    else
      v10 = v29;
    if ((v30 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v33 >= 0)
      v12 = (void *)HIBYTE(v33);
    else
      v12 = __dst[1];
    if (v33 >= 0)
      v13 = __dst;
    else
      v13 = (void **)__dst[0];
    if ((unint64_t)v12 >= v10)
      v14 = v10;
    else
      v14 = (size_t)v12;
    v15 = memcmp(p_p, v13, v14) == 0;
    v16 = v12 == (void *)v10 && v15;
    if (v7 < 0)
    {
      operator delete(v8);
      if ((v30 & 0x80) == 0)
      {
LABEL_29:
        if (v16)
          return sub_100034234((uint64_t)v31);
LABEL_33:
        sub_10043F6EC(*(_QWORD *)(a1 + 40), (uint64_t)&__p);
        if ((v30 & 0x80u) == 0)
          v17 = v30;
        else
          v17 = v29;
        v18 = malloc_type_malloc(v17, 0xF5D704F0uLL);
        if ((char)v30 < 0)
          operator delete(__p);
        sub_10043F6EC(*(_QWORD *)(a1 + 40), (uint64_t)&__p);
        v19 = (char)v30;
        v20 = (void **)__p;
        sub_10043F6EC(*(_QWORD *)(a1 + 40), (uint64_t)__dst);
        if (v19 >= 0)
          v21 = &__p;
        else
          v21 = v20;
        if (v33 >= 0)
          v22 = HIBYTE(v33);
        else
          v22 = (size_t)__dst[1];
        memcpy(v18, v21, v22);
        if (SHIBYTE(v33) < 0)
          operator delete(__dst[0]);
        if ((char)v30 < 0)
          operator delete(__p);
        v23 = *(_QWORD *)(a1 + 40);
        sub_10043F6EC(v23, (uint64_t)&__p);
        v24 = v30;
        if ((v30 & 0x80u) != 0)
          v24 = v29;
        v25 = sub_10027987C(v2, v23, v24, v18);
        if ((char)v30 < 0)
          operator delete(__p);
        if (v25 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
        {
          sub_10043F6EC(*(_QWORD *)(a1 + 40), (uint64_t)&__p);
          sub_1006D8C10();
        }
        sub_10043F6EC(*(_QWORD *)(a1 + 40), (uint64_t)&v27);
        std::string::operator=(v6, &v27);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
        free(v18);
        return sub_100034234((uint64_t)v31);
      }
    }
    else if ((v9 & 0x80) == 0)
    {
      goto LABEL_29;
    }
    operator delete(__p);
    if (v16)
      return sub_100034234((uint64_t)v31);
    goto LABEL_33;
  }
  return sub_100034234((uint64_t)v31);
}

void sub_1002948AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_100034234((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_100294914(uint64_t a1, uint64_t a2, int a3)
{
  sub_10029454C(a1 - 272, a2, a3);
}

void sub_10029491C(uint64_t a1, int a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  char *v6;
  void **v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  uint8_t buf[4];
  void **v14;

  if (a2)
    v3 = 1;
  else
    v3 = 2;
  v4 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "unknown";
    if (v3 == 1)
      v5 = "Enabled";
    if (v3 == 2)
      v6 = "Disabled";
    else
      v6 = (char *)v5;
    sub_100091AE8(__p, v6);
    if (v12 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "VoiceTriggerSetting changed to %{public}s", buf, 0xCu);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  v8 = *(uint64_t ***)(a1 + 336);
  v9 = *(uint64_t ***)(a1 + 344);
  while (v8 != v9)
  {
    v10 = **v8;
    if (!*(_BYTE *)(v10 + 952))
      sub_100279E6C(a1, v10, 18, v3, 2u);
    ++v8;
  }
}

void sub_100294A60(uint64_t a1, int a2)
{
  sub_10029491C(a1 - 280, a2);
}

void sub_100294A68(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  id *v8;
  id *v9;
  uint64_t v10;
  _BYTE buf[24];

  v3 = a2;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_1005C5C20(&v8);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_100921B98);
  if (sub_1005D4818((uint64_t)off_10097AB00))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D8C74();
  }
  else
  {
    v4 = sub_1005C5DCC(&v8, v3);
    if (v9 == v4)
    {
      *(_DWORD *)(a1 + 500) = 0;
    }
    else
    {
      v5 = *((_DWORD *)v4 + 4);
      *(_DWORD *)(a1 + 500) = v5;
      v6 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        if ((v5 - 1) > 6)
          v7 = "unknown";
        else
          v7 = off_1009220E0[v5 - 1];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Call status is now %s", buf, 0xCu);
      }
    }
  }
  *(_QWORD *)buf = &v8;
  sub_10026BD18((void ***)buf);

}

void sub_100294BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  void *v13;

  a13 = (void **)&a10;
  sub_10026BD18(&a13);

  _Unwind_Resume(a1);
}

void sub_100294C20(uint64_t a1, void *a2)
{
  sub_100294A68(a1 - 296, a2);
}

void sub_100294C28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _BYTE *v9;
  _BYTE __p[12];
  __int16 v11;
  _BYTE *v12;
  char v13;
  _BYTE buf[12];
  __int16 v15;
  _BYTE *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  if (a2)
  {
    if (*(_DWORD *)(a2 + 80) == 8194)
    {
      v3 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        v4 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043F6EC(v3, (uint64_t)__p);
          v5 = v13 >= 0 ? __p : *(_BYTE **)__p;
          v6 = *(_QWORD *)(a2 + 112);
          v7 = *(_QWORD *)(a2 + 120);
          *(_DWORD *)buf = 141558787;
          *(_QWORD *)&buf[4] = 1752392040;
          v15 = 2081;
          v16 = v5;
          v17 = 2112;
          v18 = v6;
          v19 = 2112;
          v20 = v7;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "unPublishW1RemoteFirmware: Un-Publishing F/W version for \"%{private, mask.hash}s\" (connection %@ endpoint %@)", buf, 0x2Au);
          if (v13 < 0)
            operator delete(*(void **)__p);
        }
        if ((unsigned __int16)(*(_QWORD *)(a2 + 85) >> 24) | ((unsigned __int16)WORD2(*(_QWORD *)(a2 + 85)) >> 8))
        {
          if (*(_QWORD *)(a2 + 112))
          {
            if ((acc_transportClient_destroyConnection() & 1) == 0
              && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
            {
              sub_1006D8CCC();
            }
            CFRelease(*(CFTypeRef *)(a2 + 120));
            *(_QWORD *)(a2 + 120) = 0;
            CFRelease(*(CFTypeRef *)(a2 + 112));
            *(_QWORD *)(a2 + 112) = 0;
          }
        }
        else
        {
          v8 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043F6EC(v3, (uint64_t)buf);
            v9 = v17 >= 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)__p = 141558275;
            *(_QWORD *)&__p[4] = 1752392040;
            v11 = 2081;
            v12 = v9;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: unPublishW1RemoteFirmware: No case version info available for \"%{private, mask.hash}s\"", __p, 0x16u);
            if (SHIBYTE(v17) < 0)
              operator delete(*(void **)buf);
          }
        }
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D8CA0();
  }
}

BOOL sub_100294E7C(uint64_t a1, uint64_t *a2, _QWORD *a3, CFStringRef theString2, const __CFString *a5)
{
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;

  v8 = sub_100294F70(a1, theString2);
  *a2 = v8;
  if (!v8)
  {
    result = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_1006D8CF8();
    return 0;
  }
  if (CFStringCompare(a5, *(CFStringRef *)(v8 + 144), 0))
  {
    result = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    sub_1006D8DC0();
    return 0;
  }
  v10 = *(_QWORD *)*a2;
  *a3 = v10;
  if (v10)
    return 1;
  result = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_1006D8D5C();
    return 0;
  }
  return result;
}

uint64_t sub_100294F70(uint64_t a1, CFStringRef theString2)
{
  uint64_t *i;
  uint64_t *v4;
  uint64_t v6;
  const __CFString *v7;

  if (theString2)
  {
    v4 = *(uint64_t **)(a1 + 336);
    for (i = *(uint64_t **)(a1 + 344); v4 != i; ++v4)
    {
      v6 = *v4;
      if (*v4)
      {
        v7 = *(const __CFString **)(v6 + 128);
        if (v7)
        {
          if (CFStringCompare(v7, theString2, 0) == kCFCompareEqualTo)
            return v6;
          i = *(uint64_t **)(a1 + 344);
        }
      }
    }
  }
  return 0;
}

uint64_t sub_100294FE0(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFData *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 Length;
  const UInt8 *BytePtr;
  int v13;
  NSObject *v14;
  void **v15;
  void *__p[2];
  char v18;
  char v19;
  _QWORD v20[2];
  uint8_t buf[4];
  void **v22;
  __int16 v23;
  int v24;

  v8 = *(_QWORD *)(a1 + 32);
  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, v8 + 360);
  v9 = sub_100294F70(v8, a2);
  if (v9)
  {
    v10 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
    {
      if (CFStringCompare(a3, *(CFStringRef *)(v9 + 136), 0))
      {
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
          sub_1006D8E94();
      }
      else
      {
        v19 = 0;
        sub_100043758(&v19);
        Length = CFDataGetLength(a4);
        BytePtr = CFDataGetBytePtr(a4);
        v13 = sub_1000E2B68((unsigned __int8 *)(v10 + 128), Length, BytePtr);
        sub_10004339C(&v19);
        v14 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(*(_QWORD *)(a1 + 40), __p);
          v15 = v18 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136446466;
          v22 = v15;
          v23 = 1024;
          v24 = v13;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "publishAccRemoteFirmware auth data: Data sent to device %{public}s, status %d", buf, 0x12u);
          if (v18 < 0)
            operator delete(__p[0]);
        }
        sub_100043728(&v19);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D8E30();
  }
  return sub_100034234((uint64_t)v20);
}

void sub_1002951C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100043728(&a15);
  sub_100034234((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1002951FC(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFData *a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int Length;
  NSObject *v15;
  void **v17;
  const char *v18;
  void **v19;
  void *__p[2];
  char v21;
  _QWORD v22[2];
  uint8_t buf[4];
  void **v24;
  __int16 v25;
  const __CFString *v26;
  __int16 v27;
  int v28;

  v7 = *(_QWORD *)(a1 + 32);
  v22[0] = 0;
  v22[1] = 0;
  sub_10003415C((uint64_t)v22, v7 + 360);
  v8 = (uint64_t *)sub_100294F70(v7, a2);
  v9 = v8;
  if (v8)
  {
    v10 = *v8;
    if (*v8)
    {
      v11 = sub_10029546C(v7, a2, a3);
      v12 = v11;
      if (v11 <= 0x1F && (v13 = v9[v11 + 20]) != 0 && *(_QWORD *)(v13 + 88))
      {
        if (*(_BYTE *)(v13 + 97))
        {
          Length = CFDataGetLength(a4);
          CFDataGetBytePtr(a4);
          sub_1002954E0(v9, v12, Length);
          return sub_100034234((uint64_t)v22);
        }
        v15 = qword_1009997D0;
        if (!os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
          return sub_100034234((uint64_t)v22);
        sub_10043E5F8(v10, __p);
        if (v21 >= 0)
          v17 = __p;
        else
          v17 = (void **)__p[0];
        *(_DWORD *)buf = 136446722;
        v24 = v17;
        v25 = 2112;
        v26 = a3;
        v27 = 1024;
        v28 = v12;
        v18 = "publishAccRemoteFirmware EA data: EA session currently closed on device %{public}s for endpoint %@ index %d";
      }
      else
      {
        v15 = qword_1009997D0;
        if (!os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
          return sub_100034234((uint64_t)v22);
        sub_10043E5F8(v10, __p);
        if (v21 >= 0)
          v19 = __p;
        else
          v19 = (void **)__p[0];
        *(_DWORD *)buf = 136446722;
        v24 = v19;
        v25 = 2112;
        v26 = a3;
        v27 = 1024;
        v28 = v12;
        v18 = "publishAccRemoteFirmware EA data: device %{public}s has no endpoint %@ (index = %d)";
      }
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, v18, buf, 0x1Cu);
      if (v21 < 0)
        operator delete(__p[0]);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D8F00();
  }
  return sub_100034234((uint64_t)v22);
}

void sub_100295440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10029546C(uint64_t a1, const __CFString *a2, const __CFString *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFString *v8;

  LOBYTE(v3) = -1;
  if (a2 && a3)
  {
    v5 = sub_100294F70(a1, a2);
    if (v5)
    {
      v3 = 0;
      v6 = v5 + 160;
      while (1)
      {
        v7 = *(_QWORD *)(v6 + 8 * v3);
        if (v7)
        {
          v8 = *(const __CFString **)(v7 + 88);
          if (v8)
          {
            if (CFStringCompare(a3, v8, 0) == kCFCompareEqualTo)
              break;
          }
        }
        if (++v3 == 32)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      LOBYTE(v3) = -1;
    }
  }
  return v3;
}

uint64_t sub_1002954E0(uint64_t *a1, int a2, int a3)
{
  NSObject *v6;
  void **v7;
  uint64_t v8;
  uint64_t v10;
  void *__p[2];
  char v12;
  _QWORD v13[2];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void **v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, (uint64_t)(a1 + 55));
  v10 = a1[54];
  if (a3)
    operator new();
  sub_100034264((uint64_t)v13);
  if (!v10)
  {
    v6 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_INFO))
    {
      sub_10043F6EC(*a1, (uint64_t)__p);
      if (v12 >= 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      v8 = a1[54];
      *(_DWORD *)buf = 67110147;
      v15 = 0;
      v16 = 2160;
      v17 = 1752392040;
      v18 = 2081;
      v19 = v7;
      v20 = 1024;
      v21 = a2;
      v22 = 2048;
      v23 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "addEASessionData: Queueing %d bytes for \"%{private, mask.hash}s\" (index %d), queue size now %lu", buf, 0x2Cu);
      if (v12 < 0)
        operator delete(__p[0]);
    }
    sub_100287F98(a1);
  }
  return sub_100034234((uint64_t)v13);
}

void sub_100295708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10029574C(uint64_t a1, const __CFString *a2, uint64_t a3, const __CFBoolean *a4, uint64_t a5, const __CFString *a6)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  NSObject *v16;
  void **v17;
  int v18;
  NSObject *v19;
  NSObject *v20;
  void **v22;
  void **v23;
  char v24;
  void *__p[2];
  char v26;
  _QWORD v27[2];
  uint8_t buf[4];
  void **v29;
  __int16 v30;
  const __CFString *v31;
  __int16 v32;
  unsigned int v33;
  __int16 v34;
  _BOOL4 v35;

  v9 = *(_QWORD *)(a1 + 32);
  v27[0] = 0;
  v27[1] = 0;
  sub_10003415C((uint64_t)v27, v9 + 360);
  v10 = (uint64_t *)sub_100294F70(v9, a6);
  v11 = v10;
  if (v10)
  {
    v12 = *v10;
    if (*v10)
    {
      v13 = sub_10029546C(v9, a6, a2);
      v14 = v13;
      if (v13 <= 0x1F && (v15 = v11[v13 + 20]) != 0 && *(_QWORD *)(v15 + 88))
      {
        v16 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          sub_10043E5F8(v12, __p);
          v17 = v26 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136446978;
          v29 = v17;
          v30 = 2112;
          v31 = a2;
          v32 = 1024;
          v33 = v14;
          v34 = 1024;
          v35 = kCFBooleanFalse != a4;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "publishAccRemoteFirmware EA property: Switching EA session for device %{public}s endpoint %@ index %d: enable = %d", buf, 0x22u);
          if (v26 < 0)
            operator delete(__p[0]);
        }
        *(_BYTE *)(v15 + 97) = kCFBooleanFalse != a4;
        v24 = 0;
        sub_100043758(&v24);
        v18 = sub_1000E2914((unsigned __int8 *)(v12 + 128), v14, kCFBooleanFalse != a4);
        sub_10004339C(&v24);
        sub_100034264((uint64_t)v27);
        if (v18)
        {
          v19 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
          {
            sub_10043E5F8(v12, __p);
            if (v26 >= 0)
              v23 = __p;
            else
              v23 = (void **)__p[0];
            *(_DWORD *)buf = 136446978;
            v29 = v23;
            v30 = 2112;
            v31 = a2;
            v32 = 1024;
            v33 = v14;
            v34 = 1024;
            v35 = v18;
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "publishAccRemoteFirmware EA property: Error sending EA session switch for device %{public}s endpoint %@ index %d: %d", buf, 0x22u);
            if (v26 < 0)
              operator delete(__p[0]);
          }
        }
        sub_100043728(&v24);
      }
      else
      {
        v20 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
        {
          sub_10043E5F8(v12, __p);
          v22 = v26 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136446722;
          v29 = v22;
          v30 = 2112;
          v31 = a2;
          v32 = 1024;
          v33 = v14;
          _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "publishAccRemoteFirmware EA property: device %{public}s has no endpoint %@ (index = %d)", buf, 0x1Cu);
          if (v26 < 0)
            operator delete(__p[0]);
        }
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D8F64();
  }
  return sub_100034234((uint64_t)v27);
}

void sub_100295A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100295AD8(uint64_t a1, const __CFString *a2, uint64_t a3, const void *a4, uint64_t a5, const __CFString *a6)
{
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  CFTypeID v14;
  const void *ValueAtIndex;
  CFTypeID v16;
  const __CFDictionary *v17;
  const __CFDictionary *v18;
  const void *v19;
  const void *Value;
  CFTypeID v21;
  const __CFData *v22;
  const __CFData *v23;
  const UInt8 *BytePtr;
  unsigned __int16 Length;
  unsigned __int8 *v26;
  NSObject *v27;
  _BOOL8 v28;
  int v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  const void *v34;
  int v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  uint8_t buf[4];
  _BYTE v42[20];
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  const UInt8 *v48;

  v11 = *(_QWORD *)(a1 + 32);
  v40[0] = 0;
  v40[1] = 0;
  sub_10003415C((uint64_t)v40, v11 + 360);
  v12 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)v42 = a3;
    *(_WORD *)&v42[8] = 2112;
    *(_QWORD *)&v42[10] = a4;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "publishAccRemoteFirmware acc_transportClient_setEndpointPropertyDidChangeHandler GAPA handler property=%@ value=%@", buf, 0x16u);
  }
  if (a4)
  {
    v38 = 0;
    v39 = 0;
    if (sub_100294E7C(v11, &v39, &v38, a6, a2))
    {
      v13 = v39;
      if (*(_DWORD *)(v39 + 600) == 1)
      {
        v14 = CFGetTypeID(a4);
        if (v14 == CFArrayGetTypeID())
        {
          if (CFArrayGetCount((CFArrayRef)a4) == 1)
          {
            ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a4, 0);
            v16 = CFGetTypeID(ValueAtIndex);
            if (v16 == CFDictionaryGetTypeID())
            {
              v17 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a4, 0);
              v18 = v17;
              if (v17)
              {
                v19 = (const void *)kCFACCProperties_Endpoint_AudioProduct_AuthData;
                Value = CFDictionaryGetValue(v17, kCFACCProperties_Endpoint_AudioProduct_AuthData);
                v21 = CFGetTypeID(Value);
                if (v21 == CFDataGetTypeID())
                {
                  v22 = (const __CFData *)CFDictionaryGetValue(v18, v19);
                  v23 = v22;
                  if (v22)
                  {
                    BytePtr = CFDataGetBytePtr(v22);
                    Length = CFDataGetLength(v23);
                    v26 = (unsigned __int8 *)(v38 + 128);
                    v27 = qword_1009997D0;
                    v28 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT);
                    if (v28)
                    {
                      *(_DWORD *)buf = 68158978;
                      *(_DWORD *)v42 = 6;
                      *(_WORD *)&v42[4] = 2096;
                      *(_QWORD *)&v42[6] = v26;
                      *(_WORD *)&v42[14] = 1024;
                      *(_DWORD *)&v42[16] = 1;
                      v43 = 1024;
                      v44 = Length;
                      v45 = 1040;
                      v46 = 32;
                      v47 = 2096;
                      v48 = BytePtr;
                      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Send gapa auth challenge to wx %.6P version=%u (%hu bytes) %.32P", buf, 0x2Eu);
                    }
                    v29 = sub_100295F90(v28, v26, BytePtr, Length, 1);
                    v30 = qword_1009997D0;
                    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 67109120;
                      *(_DWORD *)v42 = v29;
                      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "publishAccRemoteFirmware GAPA handler: BT_AACP_CLIENT_GAPASendChallenge result %d", buf, 8u);
                    }
                    *(_DWORD *)(v13 + 600) = 2;
                    v31 = sub_100065478();
                    v32 = *(_QWORD *)(a1 + 40);
                    v36 = *(_DWORD *)(v32 + 128);
                    v37 = *(_WORD *)(v32 + 132);
                    (*(void (**)(uint64_t, int *, uint64_t, _QWORD))(*(_QWORD *)v31 + 368))(v31, &v36, 4, 0);
                  }
                  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
                  {
                    sub_1006D9020();
                  }
                }
                else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
                {
                  v34 = CFDictionaryGetValue(v18, v19);
                  CFGetTypeID(v34);
                  CFDataGetTypeID();
                  sub_1006D904C();
                }
              }
              else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
              {
                sub_1006D8FF4();
              }
            }
            else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
            {
              v33 = CFArrayGetValueAtIndex((CFArrayRef)a4, 0);
              CFGetTypeID(v33);
              CFDictionaryGetTypeID();
              sub_1006D9084();
            }
          }
          else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
          {
            sub_1006D90BC();
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
        {
          CFGetTypeID(a4);
          CFArrayGetTypeID();
          sub_1006D9120();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      {
        sub_1006D9158();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D8FC8();
  }
  return sub_100034234((uint64_t)v40);
}

void sub_100295F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100295F90(uint64_t a1, unsigned __int8 *a2, const void *a3, unsigned int a4, char a5)
{
  uint64_t v9;
  char v11;

  v11 = 0;
  sub_100043758(&v11);
  v9 = sub_1000E3678(a2, a3, a4, a5);
  sub_100043728(&v11);
  return v9;
}

void sub_100295FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10029600C(uint64_t a1, const __CFString *a2, uint64_t a3, const void *a4, uint64_t a5, const __CFString *a6)
{
  uint64_t v11;
  NSObject *v12;
  CFTypeID v13;
  _BOOL4 v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  __int16 v23;
  uint64_t v24;
  char valuePtr;
  _QWORD v26[2];
  _BYTE buf[12];
  __int16 v28;
  const void *v29;

  v11 = *(_QWORD *)(a1 + 32);
  v26[0] = 0;
  v26[1] = 0;
  sub_10003415C((uint64_t)v26, v11 + 360);
  v12 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    *(_QWORD *)&buf[4] = a3;
    v28 = 2112;
    v29 = a4;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "publishAccRemoteFirmware acc_transportClient_setEndpointPropertyDidChangeHandler GAPA auth result property=%@ value=%@", buf, 0x16u);
  }
  v13 = CFGetTypeID(a4);
  if (v13 == CFNumberGetTypeID())
  {
    valuePtr = 0;
    CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt8Type, &valuePtr);
    v14 = valuePtr != 0;
    v15 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 696))(v15))
    {
      v16 = qword_1009997D0;
      v14 = 1;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 1;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Override GAPA authResult=%d", buf, 8u);
      }
    }
    v17 = sub_100027F68();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 704))(v17))
    {
      v18 = qword_1009997D0;
      v14 = 0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Override GAPA authResult=%d", buf, 8u);
        v14 = 0;
      }
    }
    *(_QWORD *)buf = 0;
    v24 = 0;
    if (sub_100294E7C(v11, (uint64_t *)buf, &v24, a6, a2))
    {
      *(_DWORD *)(*(_QWORD *)buf + 600) = 4;
      v19 = sub_100065478();
      v20 = *(_QWORD *)(a1 + 40);
      v22 = *(_DWORD *)(v20 + 128);
      v23 = *(_WORD *)(v20 + 132);
      (*(void (**)(uint64_t, int *, uint64_t, _QWORD))(*(_QWORD *)v19 + 368))(v19, &v22, 6, 0);
      if (v14)
      {
        sub_100447CA8(v24, 1, 1);
        sub_10027DCC8(v11, *(_QWORD *)(a1 + 40), 1);
      }
      else
      {
        sub_10027E034(v11, v24, 0x200u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    CFGetTypeID(a4);
    CFNumberGetTypeID();
    sub_1006D91B8();
  }
  return sub_100034234((uint64_t)v26);
}

void sub_1002962CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002962F8(uint64_t a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFString *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  __int16 v18;
  char v19;
  _QWORD v20[2];
  uint8_t buf[4];
  int v22;

  v9 = *(_QWORD *)(a1 + 32);
  v20[0] = 0;
  v20[1] = 0;
  sub_10003415C((uint64_t)v20, v9 + 360);
  v10 = sub_100294F70(v9, a6);
  if (v10)
  {
    v11 = *(_QWORD *)v10;
    if (*(_QWORD *)v10)
    {
      if (CFStringCompare(a2, *(CFStringRef *)(v10 + 144), 0))
      {
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
          sub_1006D9254();
      }
      else
      {
        v19 = 0;
        sub_100043758(&v19);
        v12 = sub_1000E35D0((unsigned __int8 *)(v11 + 128));
        sub_10004339C(&v19);
        v13 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          v22 = v12;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "publishAccRemoteFirmware cert required handler: BT_AACP_CLIENT_GetCertificates result %d", buf, 8u);
        }
        v14 = sub_100065478();
        v15 = *(_QWORD *)(a1 + 40);
        v17 = *(_DWORD *)(v15 + 128);
        v18 = *(_WORD *)(v15 + 132);
        (*(void (**)(uint64_t, int *, uint64_t, _QWORD))(*(_QWORD *)v14 + 368))(v14, &v17, 2, 0);
        sub_100043728(&v19);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D91F0();
  }
  return sub_100034234((uint64_t)v20);
}

void sub_1002964A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002964DC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  void **v10;
  uint64_t i;
  uint64_t v12;
  const void *v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  void **v21;

  if (a2)
  {
    v3 = *(_DWORD *)(a2 + 80) - 8194;
    v4 = v3 > 0xE;
    v5 = (1 << v3) & 0x409B;
    if (v4 || v5 == 0)
    {
      v7 = *(_QWORD *)a2;
      if (*(_QWORD *)a2)
      {
        v8 = *(_QWORD *)(a2 + 128);
        if (v8)
        {
          v9 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043F6EC(v7, (uint64_t)__p);
            if (v15 >= 0)
              v10 = __p;
            else
              v10 = (void **)__p[0];
            *(_DWORD *)buf = 138412803;
            v17 = v8;
            v18 = 2160;
            v19 = 1752392040;
            v20 = 2081;
            v21 = v10;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "unPublishAccRemoteFirmware: Un-Publishing connection %@ and all endpoints for \"%{private, mask.hash}s\"", buf, 0x20u);
            if (v15 < 0)
              operator delete(__p[0]);
            v8 = *(_QWORD *)(a2 + 128);
          }
          if (!acc_transportClient_destroyConnection(v8)
            && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
          {
            sub_1006D92EC();
          }
          for (i = 0; i != 256; i += 8)
          {
            v12 = *(_QWORD *)(a2 + 160 + i);
            if (v12)
            {
              sub_1002A21E8(v12);
              operator delete();
            }
          }
          CFRelease(*(CFTypeRef *)(a2 + 128));
          *(_QWORD *)(a2 + 128) = 0;
          v13 = *(const void **)(a2 + 136);
          if (v13)
          {
            CFRelease(v13);
            *(_QWORD *)(a2 + 136) = 0;
          }
        }
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D92C0();
  }
}

uint64_t sub_1002966C8(uint64_t a1, uint64_t a2, char *a3, size_t a4, char *a5, size_t a6, char *a7, size_t a8, char *a9, size_t a10, char *a11, size_t a12, char *a13, size_t a14, char *a15, size_t a16)
{
  uint64_t **v22;
  uint64_t **v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v27;
  NSObject *v28;
  void **v29;
  int v30;
  int v31;
  int v32;
  size_t v33;
  size_t v34;
  BOOL v35;
  char *__dst;
  size_t v38;
  size_t v39;
  void *__p[2];
  char v42;
  _QWORD v43[2];
  uint64_t v44;
  _BYTE buf[12];
  __int16 v46;
  void **v47;

  v43[1] = 0;
  v44 = a2;
  v43[0] = 0;
  sub_10003415C((uint64_t)v43, a1 + 360);
  v22 = *(uint64_t ***)(a1 + 336);
  v23 = *(uint64_t ***)(a1 + 344);
  if (v22 == v23)
  {
LABEL_9:
    v27 = 7;
  }
  else
  {
    v38 = a6;
    v39 = a8;
    while (1)
    {
      v24 = (unsigned __int8 *)*v22;
      v25 = **v22;
      if (v25)
      {
        if ((_DWORD)v44 == *(_DWORD *)(v25 + 128) && WORD2(v44) == *(unsigned __int16 *)(v25 + 132))
          break;
      }
      if (++v22 == v23)
        goto LABEL_9;
    }
    __dst = a5;
    v28 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043F6EC(v25, (uint64_t)__p);
      v29 = __p;
      if (v42 < 0)
        v29 = (void **)__p[0];
      *(_DWORD *)buf = 141558275;
      *(_QWORD *)&buf[4] = 1752392040;
      v46 = 2081;
      v47 = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, " Returning F/W version for \"%{private, mask.hash}s\"", buf, 0x16u);
      if (v42 < 0)
        operator delete(__p[0]);
    }
    v30 = v24[88];
    v31 = v24[89];
    v32 = v24[90];
    *(_WORD *)&buf[8] = 0;
    *(_QWORD *)buf = 0;
    sprintf(buf, "%d.%d.%d", v30, v31, v32);
    if (a14 < 0xA)
      goto LABEL_23;
    strlcpy(a13, buf, a14);
    v33 = v39;
    sub_10046E9BC((unsigned __int8 *)(v25 + 128), __p);
    if (v42 < 0)
    {
      v34 = strlen((const char *)__p[0]) + 1;
      operator delete(__p[0]);
      v35 = v34 > a4;
      v33 = v39;
      if (v35)
      {
LABEL_23:
        v27 = 5;
        goto LABEL_24;
      }
    }
    else if (strlen((const char *)__p) + 1 > a4)
    {
      goto LABEL_23;
    }
    strlcpy(a3, "AirPods Case", a4);
    if (v38 < 0xD)
      goto LABEL_23;
    strlcpy(__dst, "AirPods Case", v38);
    if (a10 < 6)
      goto LABEL_23;
    strlcpy(a9, "A1602", a10);
    if (v33 < 0xA)
      goto LABEL_23;
    strlcpy(a7, "Apple Inc", v33);
    if (a16 >= 2)
      strlcpy(a15, " ", a16);
    if (a12 >= 2)
      strlcpy(a11, " ", a12);
    v27 = 0;
  }
LABEL_24:
  sub_100034234((uint64_t)v43);
  return v27;
}

void sub_1002969B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002969DC(uint64_t a1, uint64_t a2)
{
  _QWORD **v3;
  _QWORD **v4;
  void *v5;
  void *p_p;
  id v7;
  void *i;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  unsigned __int8 v13;
  NSObject *v14;
  void *v15;
  _OWORD *v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  int64x2_t v28;
  char *v29;
  char *v30;
  id v31;
  char *v32;
  char *v33;
  _OWORD *v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  int64x2_t v46;
  char *v47;
  char *v48;
  id v49;
  char *v50;
  char *v51;
  _OWORD *v52;
  __int128 v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  __int128 v63;
  int64x2_t v64;
  char *v65;
  char *v66;
  id v67;
  char *v68;
  char *v69;
  _OWORD *v70;
  __int128 v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  __int128 v81;
  int64x2_t v82;
  char *v83;
  char *v84;
  id v85;
  char *v86;
  char *v87;
  _OWORD *v88;
  __int128 v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  __int128 v99;
  int64x2_t v100;
  char *v101;
  char *v102;
  id v103;
  char *v104;
  char *v105;
  _OWORD *v106;
  __int128 v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  __int128 v117;
  int64x2_t v118;
  char *v119;
  char *v120;
  id v121;
  char *v122;
  char *v123;
  _OWORD *v124;
  __int128 v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  __int128 v135;
  int64x2_t v136;
  char *v137;
  char *v138;
  _OWORD *v139;
  __int128 v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  __int128 v150;
  int64x2_t v151;
  char *v152;
  char *v153;
  _OWORD *v154;
  __int128 v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  __int128 v165;
  int64x2_t v166;
  char *v167;
  char *v168;
  _OWORD *v169;
  __int128 v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  __int128 v180;
  int64x2_t v181;
  char *v182;
  char *v183;
  id v184;
  char *v185;
  char *v186;
  _OWORD *v187;
  __int128 v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  char *v192;
  char *v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  __int128 v198;
  int64x2_t v199;
  char *v200;
  char *v201;
  NSObject *v202;
  void *v203;
  void *v205;
  id obj;
  uint64_t v207;
  void *v208;
  id v209;
  _QWORD v211[3];
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  _QWORD v216[2];
  void *__p;
  int64x2_t v218;
  char *v219;
  char **v220;
  __int128 v221;
  uint64_t v222;
  int64x2_t buf;
  char *v224;
  _BYTE v225[128];

  v216[0] = 0;
  v216[1] = 0;
  sub_10003415C((uint64_t)v216, a1 + 360);
  if (a2)
  {
    v3 = *(_QWORD ***)(a1 + 336);
    v4 = *(_QWORD ***)(a1 + 344);
    if (v3 != v4)
    {
      while (**v3 != a2)
      {
        if (++v3 == v4)
          return sub_100034234((uint64_t)v216);
      }
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[EAAccessoryManager sharedAccessoryManager](EAAccessoryManager, "sharedAccessoryManager"));
      v205 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "connectedAccessories"));

      sub_10046E9BC((unsigned __int8 *)(a2 + 128), &__p);
      if (v218.i8[15] >= 0)
        p_p = &__p;
      else
        p_p = __p;
      v208 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p));
      if (v218.i8[15] < 0)
        operator delete(__p);
      v212 = 0u;
      v213 = 0u;
      v214 = 0u;
      v215 = 0u;
      obj = v205;
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v212, v225, 16);
      if (v7)
      {
        v207 = *(_QWORD *)v213;
        do
        {
          v209 = v7;
          for (i = 0; i != v209; i = (char *)i + 1)
          {
            if (*(_QWORD *)v213 != v207)
              objc_enumerationMutation(obj);
            v9 = *(void **)(*((_QWORD *)&v212 + 1) + 8 * (_QWORD)i);
            v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "macAddress"));
            v11 = objc_msgSend(v10, "isEqualToString:", v208);

            if ((v11 & 1) != 0)
            {
              v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "name"));
              v13 = objc_msgSend(v12, "hasSuffix:", CFSTR("Case"));

              if ((v13 & 1) == 0)
              {
                v14 = qword_1009997D0;
                if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
                {
                  sub_10043E5F8(a2, &__p);
                  v15 = &__p;
                  if (v218.i8[15] < 0)
                    v15 = __p;
                  buf.i32[0] = 136446210;
                  *(uint64_t *)((char *)buf.i64 + 4) = (uint64_t)v15;
                  _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "getVersionInfoFromWiAP: saving ExternalAccessory information for %{public}s", (uint8_t *)&buf, 0xCu);
                  if (v218.i8[15] < 0)
                    operator delete(__p);
                }
                buf = 0uLL;
                v224 = 0;
                sub_100091AE8(&v221, "");
                v16 = (_OWORD *)buf.i64[1];
                if (buf.i64[1] >= (unint64_t)v224)
                {
                  v18 = 0xAAAAAAAAAAAAAAABLL * ((buf.i64[1] - buf.i64[0]) >> 3);
                  v19 = v18 + 1;
                  if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
                    abort();
                  if (0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3) > v19)
                    v19 = 0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v224[-buf.i64[0]] >> 3) >= 0x555555555555555)
                    v20 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v20 = v19;
                  v220 = &v224;
                  if (v20)
                    v21 = (char *)sub_1002A479C((uint64_t)&v224, v20);
                  else
                    v21 = 0;
                  v22 = &v21[24 * v18];
                  v23 = v221;
                  *((_QWORD *)v22 + 2) = v222;
                  *(_OWORD *)v22 = v23;
                  v222 = 0;
                  v221 = 0uLL;
                  v24 = buf.i64[1];
                  v25 = buf.i64[0];
                  if (buf.i64[1] == buf.i64[0])
                  {
                    v28 = vdupq_n_s64(buf.u64[1]);
                    v26 = &v21[24 * v18];
                  }
                  else
                  {
                    v26 = &v21[24 * v18];
                    do
                    {
                      v27 = *(_OWORD *)(v24 - 24);
                      *((_QWORD *)v26 - 1) = *(_QWORD *)(v24 - 8);
                      *(_OWORD *)(v26 - 24) = v27;
                      v26 -= 24;
                      *(_QWORD *)(v24 - 16) = 0;
                      *(_QWORD *)(v24 - 8) = 0;
                      *(_QWORD *)(v24 - 24) = 0;
                      v24 -= 24;
                    }
                    while (v24 != v25);
                    v28 = buf;
                  }
                  v29 = v22 + 24;
                  buf.i64[0] = (uint64_t)v26;
                  buf.i64[1] = (uint64_t)(v22 + 24);
                  v218 = v28;
                  v30 = v224;
                  v224 = &v21[24 * v20];
                  v219 = v30;
                  __p = (void *)v28.i64[0];
                  sub_1002A56A4((uint64_t)&__p);
                  buf.i64[1] = (uint64_t)v29;
                  if (SHIBYTE(v222) < 0)
                    operator delete((void *)v221);
                }
                else
                {
                  v17 = v221;
                  *(_QWORD *)(buf.i64[1] + 16) = v222;
                  *v16 = v17;
                  buf.i64[1] = (uint64_t)v16 + 24;
                }
                v31 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "modelNumber")));
                v32 = (char *)objc_msgSend(v31, "UTF8String");
                if (v32)
                  v33 = v32;
                else
                  v33 = "";
                sub_100091AE8(&v221, v33);
                v34 = (_OWORD *)buf.i64[1];
                if (buf.i64[1] >= (unint64_t)v224)
                {
                  v36 = 0xAAAAAAAAAAAAAAABLL * ((buf.i64[1] - buf.i64[0]) >> 3);
                  v37 = v36 + 1;
                  if (v36 + 1 > 0xAAAAAAAAAAAAAAALL)
                    abort();
                  if (0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3) > v37)
                    v37 = 0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v224[-buf.i64[0]] >> 3) >= 0x555555555555555)
                    v38 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v38 = v37;
                  v220 = &v224;
                  if (v38)
                    v39 = (char *)sub_1002A479C((uint64_t)&v224, v38);
                  else
                    v39 = 0;
                  v40 = &v39[24 * v36];
                  v41 = v221;
                  *((_QWORD *)v40 + 2) = v222;
                  *(_OWORD *)v40 = v41;
                  v222 = 0;
                  v221 = 0uLL;
                  v42 = buf.i64[1];
                  v43 = buf.i64[0];
                  if (buf.i64[1] == buf.i64[0])
                  {
                    v46 = vdupq_n_s64(buf.u64[1]);
                    v44 = &v39[24 * v36];
                  }
                  else
                  {
                    v44 = &v39[24 * v36];
                    do
                    {
                      v45 = *(_OWORD *)(v42 - 24);
                      *((_QWORD *)v44 - 1) = *(_QWORD *)(v42 - 8);
                      *(_OWORD *)(v44 - 24) = v45;
                      v44 -= 24;
                      *(_QWORD *)(v42 - 16) = 0;
                      *(_QWORD *)(v42 - 8) = 0;
                      *(_QWORD *)(v42 - 24) = 0;
                      v42 -= 24;
                    }
                    while (v42 != v43);
                    v46 = buf;
                  }
                  v47 = v40 + 24;
                  buf.i64[0] = (uint64_t)v44;
                  buf.i64[1] = (uint64_t)(v40 + 24);
                  v218 = v46;
                  v48 = v224;
                  v224 = &v39[24 * v38];
                  v219 = v48;
                  __p = (void *)v46.i64[0];
                  sub_1002A56A4((uint64_t)&__p);
                  buf.i64[1] = (uint64_t)v47;
                  if (SHIBYTE(v222) < 0)
                    operator delete((void *)v221);
                }
                else
                {
                  v35 = v221;
                  *(_QWORD *)(buf.i64[1] + 16) = v222;
                  *v34 = v35;
                  v222 = 0;
                  v221 = 0uLL;
                  buf.i64[1] = (uint64_t)v34 + 24;
                }

                v49 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "manufacturer")));
                v50 = (char *)objc_msgSend(v49, "UTF8String");
                if (v50)
                  v51 = v50;
                else
                  v51 = "";
                sub_100091AE8(&v221, v51);
                v52 = (_OWORD *)buf.i64[1];
                if (buf.i64[1] >= (unint64_t)v224)
                {
                  v54 = 0xAAAAAAAAAAAAAAABLL * ((buf.i64[1] - buf.i64[0]) >> 3);
                  v55 = v54 + 1;
                  if (v54 + 1 > 0xAAAAAAAAAAAAAAALL)
                    abort();
                  if (0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3) > v55)
                    v55 = 0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v224[-buf.i64[0]] >> 3) >= 0x555555555555555)
                    v56 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v56 = v55;
                  v220 = &v224;
                  if (v56)
                    v57 = (char *)sub_1002A479C((uint64_t)&v224, v56);
                  else
                    v57 = 0;
                  v58 = &v57[24 * v54];
                  v59 = v221;
                  *((_QWORD *)v58 + 2) = v222;
                  *(_OWORD *)v58 = v59;
                  v222 = 0;
                  v221 = 0uLL;
                  v60 = buf.i64[1];
                  v61 = buf.i64[0];
                  if (buf.i64[1] == buf.i64[0])
                  {
                    v64 = vdupq_n_s64(buf.u64[1]);
                    v62 = &v57[24 * v54];
                  }
                  else
                  {
                    v62 = &v57[24 * v54];
                    do
                    {
                      v63 = *(_OWORD *)(v60 - 24);
                      *((_QWORD *)v62 - 1) = *(_QWORD *)(v60 - 8);
                      *(_OWORD *)(v62 - 24) = v63;
                      v62 -= 24;
                      *(_QWORD *)(v60 - 16) = 0;
                      *(_QWORD *)(v60 - 8) = 0;
                      *(_QWORD *)(v60 - 24) = 0;
                      v60 -= 24;
                    }
                    while (v60 != v61);
                    v64 = buf;
                  }
                  v65 = v58 + 24;
                  buf.i64[0] = (uint64_t)v62;
                  buf.i64[1] = (uint64_t)(v58 + 24);
                  v218 = v64;
                  v66 = v224;
                  v224 = &v57[24 * v56];
                  v219 = v66;
                  __p = (void *)v64.i64[0];
                  sub_1002A56A4((uint64_t)&__p);
                  buf.i64[1] = (uint64_t)v65;
                  if (SHIBYTE(v222) < 0)
                    operator delete((void *)v221);
                }
                else
                {
                  v53 = v221;
                  *(_QWORD *)(buf.i64[1] + 16) = v222;
                  *v52 = v53;
                  v222 = 0;
                  v221 = 0uLL;
                  buf.i64[1] = (uint64_t)v52 + 24;
                }

                v67 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "serialNumber")));
                v68 = (char *)objc_msgSend(v67, "UTF8String");
                if (v68)
                  v69 = v68;
                else
                  v69 = "";
                sub_100091AE8(&v221, v69);
                v70 = (_OWORD *)buf.i64[1];
                if (buf.i64[1] >= (unint64_t)v224)
                {
                  v72 = 0xAAAAAAAAAAAAAAABLL * ((buf.i64[1] - buf.i64[0]) >> 3);
                  v73 = v72 + 1;
                  if (v72 + 1 > 0xAAAAAAAAAAAAAAALL)
                    abort();
                  if (0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3) > v73)
                    v73 = 0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v224[-buf.i64[0]] >> 3) >= 0x555555555555555)
                    v74 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v74 = v73;
                  v220 = &v224;
                  if (v74)
                    v75 = (char *)sub_1002A479C((uint64_t)&v224, v74);
                  else
                    v75 = 0;
                  v76 = &v75[24 * v72];
                  v77 = v221;
                  *((_QWORD *)v76 + 2) = v222;
                  *(_OWORD *)v76 = v77;
                  v222 = 0;
                  v221 = 0uLL;
                  v78 = buf.i64[1];
                  v79 = buf.i64[0];
                  if (buf.i64[1] == buf.i64[0])
                  {
                    v82 = vdupq_n_s64(buf.u64[1]);
                    v80 = &v75[24 * v72];
                  }
                  else
                  {
                    v80 = &v75[24 * v72];
                    do
                    {
                      v81 = *(_OWORD *)(v78 - 24);
                      *((_QWORD *)v80 - 1) = *(_QWORD *)(v78 - 8);
                      *(_OWORD *)(v80 - 24) = v81;
                      v80 -= 24;
                      *(_QWORD *)(v78 - 16) = 0;
                      *(_QWORD *)(v78 - 8) = 0;
                      *(_QWORD *)(v78 - 24) = 0;
                      v78 -= 24;
                    }
                    while (v78 != v79);
                    v82 = buf;
                  }
                  v83 = v76 + 24;
                  buf.i64[0] = (uint64_t)v80;
                  buf.i64[1] = (uint64_t)(v76 + 24);
                  v218 = v82;
                  v84 = v224;
                  v224 = &v75[24 * v74];
                  v219 = v84;
                  __p = (void *)v82.i64[0];
                  sub_1002A56A4((uint64_t)&__p);
                  buf.i64[1] = (uint64_t)v83;
                  if (SHIBYTE(v222) < 0)
                    operator delete((void *)v221);
                }
                else
                {
                  v71 = v221;
                  *(_QWORD *)(buf.i64[1] + 16) = v222;
                  *v70 = v71;
                  v222 = 0;
                  v221 = 0uLL;
                  buf.i64[1] = (uint64_t)v70 + 24;
                }

                v85 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firmwareRevisionActive")));
                v86 = (char *)objc_msgSend(v85, "UTF8String");
                if (v86)
                  v87 = v86;
                else
                  v87 = "";
                sub_100091AE8(&v221, v87);
                v88 = (_OWORD *)buf.i64[1];
                if (buf.i64[1] >= (unint64_t)v224)
                {
                  v90 = 0xAAAAAAAAAAAAAAABLL * ((buf.i64[1] - buf.i64[0]) >> 3);
                  v91 = v90 + 1;
                  if (v90 + 1 > 0xAAAAAAAAAAAAAAALL)
                    abort();
                  if (0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3) > v91)
                    v91 = 0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v224[-buf.i64[0]] >> 3) >= 0x555555555555555)
                    v92 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v92 = v91;
                  v220 = &v224;
                  if (v92)
                    v93 = (char *)sub_1002A479C((uint64_t)&v224, v92);
                  else
                    v93 = 0;
                  v94 = &v93[24 * v90];
                  v95 = v221;
                  *((_QWORD *)v94 + 2) = v222;
                  *(_OWORD *)v94 = v95;
                  v222 = 0;
                  v221 = 0uLL;
                  v96 = buf.i64[1];
                  v97 = buf.i64[0];
                  if (buf.i64[1] == buf.i64[0])
                  {
                    v100 = vdupq_n_s64(buf.u64[1]);
                    v98 = &v93[24 * v90];
                  }
                  else
                  {
                    v98 = &v93[24 * v90];
                    do
                    {
                      v99 = *(_OWORD *)(v96 - 24);
                      *((_QWORD *)v98 - 1) = *(_QWORD *)(v96 - 8);
                      *(_OWORD *)(v98 - 24) = v99;
                      v98 -= 24;
                      *(_QWORD *)(v96 - 16) = 0;
                      *(_QWORD *)(v96 - 8) = 0;
                      *(_QWORD *)(v96 - 24) = 0;
                      v96 -= 24;
                    }
                    while (v96 != v97);
                    v100 = buf;
                  }
                  v101 = v94 + 24;
                  buf.i64[0] = (uint64_t)v98;
                  buf.i64[1] = (uint64_t)(v94 + 24);
                  v218 = v100;
                  v102 = v224;
                  v224 = &v93[24 * v92];
                  v219 = v102;
                  __p = (void *)v100.i64[0];
                  sub_1002A56A4((uint64_t)&__p);
                  buf.i64[1] = (uint64_t)v101;
                  if (SHIBYTE(v222) < 0)
                    operator delete((void *)v221);
                }
                else
                {
                  v89 = v221;
                  *(_QWORD *)(buf.i64[1] + 16) = v222;
                  *v88 = v89;
                  v222 = 0;
                  v221 = 0uLL;
                  buf.i64[1] = (uint64_t)v88 + 24;
                }

                v103 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firmwareRevisionPending")));
                v104 = (char *)objc_msgSend(v103, "UTF8String");
                if (v104)
                  v105 = v104;
                else
                  v105 = "";
                sub_100091AE8(&v221, v105);
                v106 = (_OWORD *)buf.i64[1];
                if (buf.i64[1] >= (unint64_t)v224)
                {
                  v108 = 0xAAAAAAAAAAAAAAABLL * ((buf.i64[1] - buf.i64[0]) >> 3);
                  v109 = v108 + 1;
                  if (v108 + 1 > 0xAAAAAAAAAAAAAAALL)
                    abort();
                  if (0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3) > v109)
                    v109 = 0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v224[-buf.i64[0]] >> 3) >= 0x555555555555555)
                    v110 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v110 = v109;
                  v220 = &v224;
                  if (v110)
                    v111 = (char *)sub_1002A479C((uint64_t)&v224, v110);
                  else
                    v111 = 0;
                  v112 = &v111[24 * v108];
                  v113 = v221;
                  *((_QWORD *)v112 + 2) = v222;
                  *(_OWORD *)v112 = v113;
                  v222 = 0;
                  v221 = 0uLL;
                  v114 = buf.i64[1];
                  v115 = buf.i64[0];
                  if (buf.i64[1] == buf.i64[0])
                  {
                    v118 = vdupq_n_s64(buf.u64[1]);
                    v116 = &v111[24 * v108];
                  }
                  else
                  {
                    v116 = &v111[24 * v108];
                    do
                    {
                      v117 = *(_OWORD *)(v114 - 24);
                      *((_QWORD *)v116 - 1) = *(_QWORD *)(v114 - 8);
                      *(_OWORD *)(v116 - 24) = v117;
                      v116 -= 24;
                      *(_QWORD *)(v114 - 16) = 0;
                      *(_QWORD *)(v114 - 8) = 0;
                      *(_QWORD *)(v114 - 24) = 0;
                      v114 -= 24;
                    }
                    while (v114 != v115);
                    v118 = buf;
                  }
                  v119 = v112 + 24;
                  buf.i64[0] = (uint64_t)v116;
                  buf.i64[1] = (uint64_t)(v112 + 24);
                  v218 = v118;
                  v120 = v224;
                  v224 = &v111[24 * v110];
                  v219 = v120;
                  __p = (void *)v118.i64[0];
                  sub_1002A56A4((uint64_t)&__p);
                  buf.i64[1] = (uint64_t)v119;
                  if (SHIBYTE(v222) < 0)
                    operator delete((void *)v221);
                }
                else
                {
                  v107 = v221;
                  *(_QWORD *)(buf.i64[1] + 16) = v222;
                  *v106 = v107;
                  v222 = 0;
                  v221 = 0uLL;
                  buf.i64[1] = (uint64_t)v106 + 24;
                }

                v121 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "hardwareRevision")));
                v122 = (char *)objc_msgSend(v121, "UTF8String");
                if (v122)
                  v123 = v122;
                else
                  v123 = "";
                sub_100091AE8(&v221, v123);
                v124 = (_OWORD *)buf.i64[1];
                if (buf.i64[1] >= (unint64_t)v224)
                {
                  v126 = 0xAAAAAAAAAAAAAAABLL * ((buf.i64[1] - buf.i64[0]) >> 3);
                  v127 = v126 + 1;
                  if (v126 + 1 > 0xAAAAAAAAAAAAAAALL)
                    abort();
                  if (0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3) > v127)
                    v127 = 0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v224[-buf.i64[0]] >> 3) >= 0x555555555555555)
                    v128 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v128 = v127;
                  v220 = &v224;
                  if (v128)
                    v129 = (char *)sub_1002A479C((uint64_t)&v224, v128);
                  else
                    v129 = 0;
                  v130 = &v129[24 * v126];
                  v131 = v221;
                  *((_QWORD *)v130 + 2) = v222;
                  *(_OWORD *)v130 = v131;
                  v222 = 0;
                  v221 = 0uLL;
                  v132 = buf.i64[1];
                  v133 = buf.i64[0];
                  if (buf.i64[1] == buf.i64[0])
                  {
                    v136 = vdupq_n_s64(buf.u64[1]);
                    v134 = &v129[24 * v126];
                  }
                  else
                  {
                    v134 = &v129[24 * v126];
                    do
                    {
                      v135 = *(_OWORD *)(v132 - 24);
                      *((_QWORD *)v134 - 1) = *(_QWORD *)(v132 - 8);
                      *(_OWORD *)(v134 - 24) = v135;
                      v134 -= 24;
                      *(_QWORD *)(v132 - 16) = 0;
                      *(_QWORD *)(v132 - 8) = 0;
                      *(_QWORD *)(v132 - 24) = 0;
                      v132 -= 24;
                    }
                    while (v132 != v133);
                    v136 = buf;
                  }
                  v137 = v130 + 24;
                  buf.i64[0] = (uint64_t)v134;
                  buf.i64[1] = (uint64_t)(v130 + 24);
                  v218 = v136;
                  v138 = v224;
                  v224 = &v129[24 * v128];
                  v219 = v138;
                  __p = (void *)v136.i64[0];
                  sub_1002A56A4((uint64_t)&__p);
                  buf.i64[1] = (uint64_t)v137;
                  if (SHIBYTE(v222) < 0)
                    operator delete((void *)v221);
                }
                else
                {
                  v125 = v221;
                  *(_QWORD *)(buf.i64[1] + 16) = v222;
                  *v124 = v125;
                  v222 = 0;
                  v221 = 0uLL;
                  buf.i64[1] = (uint64_t)v124 + 24;
                }

                sub_100091AE8(&v221, "");
                v139 = (_OWORD *)buf.i64[1];
                if (buf.i64[1] >= (unint64_t)v224)
                {
                  v141 = 0xAAAAAAAAAAAAAAABLL * ((buf.i64[1] - buf.i64[0]) >> 3);
                  v142 = v141 + 1;
                  if (v141 + 1 > 0xAAAAAAAAAAAAAAALL)
                    abort();
                  if (0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3) > v142)
                    v142 = 0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v224[-buf.i64[0]] >> 3) >= 0x555555555555555)
                    v143 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v143 = v142;
                  v220 = &v224;
                  if (v143)
                    v144 = (char *)sub_1002A479C((uint64_t)&v224, v143);
                  else
                    v144 = 0;
                  v145 = &v144[24 * v141];
                  v146 = v221;
                  *((_QWORD *)v145 + 2) = v222;
                  *(_OWORD *)v145 = v146;
                  v222 = 0;
                  v221 = 0uLL;
                  v147 = buf.i64[1];
                  v148 = buf.i64[0];
                  if (buf.i64[1] == buf.i64[0])
                  {
                    v151 = vdupq_n_s64(buf.u64[1]);
                    v149 = &v144[24 * v141];
                  }
                  else
                  {
                    v149 = &v144[24 * v141];
                    do
                    {
                      v150 = *(_OWORD *)(v147 - 24);
                      *((_QWORD *)v149 - 1) = *(_QWORD *)(v147 - 8);
                      *(_OWORD *)(v149 - 24) = v150;
                      v149 -= 24;
                      *(_QWORD *)(v147 - 16) = 0;
                      *(_QWORD *)(v147 - 8) = 0;
                      *(_QWORD *)(v147 - 24) = 0;
                      v147 -= 24;
                    }
                    while (v147 != v148);
                    v151 = buf;
                  }
                  v152 = v145 + 24;
                  buf.i64[0] = (uint64_t)v149;
                  buf.i64[1] = (uint64_t)(v145 + 24);
                  v218 = v151;
                  v153 = v224;
                  v224 = &v144[24 * v143];
                  v219 = v153;
                  __p = (void *)v151.i64[0];
                  sub_1002A56A4((uint64_t)&__p);
                  buf.i64[1] = (uint64_t)v152;
                  if (SHIBYTE(v222) < 0)
                    operator delete((void *)v221);
                }
                else
                {
                  v140 = v221;
                  *(_QWORD *)(buf.i64[1] + 16) = v222;
                  *v139 = v140;
                  buf.i64[1] = (uint64_t)v139 + 24;
                }
                sub_100091AE8(&v221, "");
                v154 = (_OWORD *)buf.i64[1];
                if (buf.i64[1] >= (unint64_t)v224)
                {
                  v156 = 0xAAAAAAAAAAAAAAABLL * ((buf.i64[1] - buf.i64[0]) >> 3);
                  v157 = v156 + 1;
                  if (v156 + 1 > 0xAAAAAAAAAAAAAAALL)
                    abort();
                  if (0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3) > v157)
                    v157 = 0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v224[-buf.i64[0]] >> 3) >= 0x555555555555555)
                    v158 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v158 = v157;
                  v220 = &v224;
                  if (v158)
                    v159 = (char *)sub_1002A479C((uint64_t)&v224, v158);
                  else
                    v159 = 0;
                  v160 = &v159[24 * v156];
                  v161 = v221;
                  *((_QWORD *)v160 + 2) = v222;
                  *(_OWORD *)v160 = v161;
                  v222 = 0;
                  v221 = 0uLL;
                  v162 = buf.i64[1];
                  v163 = buf.i64[0];
                  if (buf.i64[1] == buf.i64[0])
                  {
                    v166 = vdupq_n_s64(buf.u64[1]);
                    v164 = &v159[24 * v156];
                  }
                  else
                  {
                    v164 = &v159[24 * v156];
                    do
                    {
                      v165 = *(_OWORD *)(v162 - 24);
                      *((_QWORD *)v164 - 1) = *(_QWORD *)(v162 - 8);
                      *(_OWORD *)(v164 - 24) = v165;
                      v164 -= 24;
                      *(_QWORD *)(v162 - 16) = 0;
                      *(_QWORD *)(v162 - 8) = 0;
                      *(_QWORD *)(v162 - 24) = 0;
                      v162 -= 24;
                    }
                    while (v162 != v163);
                    v166 = buf;
                  }
                  v167 = v160 + 24;
                  buf.i64[0] = (uint64_t)v164;
                  buf.i64[1] = (uint64_t)(v160 + 24);
                  v218 = v166;
                  v168 = v224;
                  v224 = &v159[24 * v158];
                  v219 = v168;
                  __p = (void *)v166.i64[0];
                  sub_1002A56A4((uint64_t)&__p);
                  buf.i64[1] = (uint64_t)v167;
                  if (SHIBYTE(v222) < 0)
                    operator delete((void *)v221);
                }
                else
                {
                  v155 = v221;
                  *(_QWORD *)(buf.i64[1] + 16) = v222;
                  *v154 = v155;
                  buf.i64[1] = (uint64_t)v154 + 24;
                }
                sub_100091AE8(&v221, "");
                v169 = (_OWORD *)buf.i64[1];
                if (buf.i64[1] >= (unint64_t)v224)
                {
                  v171 = 0xAAAAAAAAAAAAAAABLL * ((buf.i64[1] - buf.i64[0]) >> 3);
                  v172 = v171 + 1;
                  if (v171 + 1 > 0xAAAAAAAAAAAAAAALL)
                    abort();
                  if (0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3) > v172)
                    v172 = 0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v224[-buf.i64[0]] >> 3) >= 0x555555555555555)
                    v173 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v173 = v172;
                  v220 = &v224;
                  if (v173)
                    v174 = (char *)sub_1002A479C((uint64_t)&v224, v173);
                  else
                    v174 = 0;
                  v175 = &v174[24 * v171];
                  v176 = v221;
                  *((_QWORD *)v175 + 2) = v222;
                  *(_OWORD *)v175 = v176;
                  v222 = 0;
                  v221 = 0uLL;
                  v177 = buf.i64[1];
                  v178 = buf.i64[0];
                  if (buf.i64[1] == buf.i64[0])
                  {
                    v181 = vdupq_n_s64(buf.u64[1]);
                    v179 = &v174[24 * v171];
                  }
                  else
                  {
                    v179 = &v174[24 * v171];
                    do
                    {
                      v180 = *(_OWORD *)(v177 - 24);
                      *((_QWORD *)v179 - 1) = *(_QWORD *)(v177 - 8);
                      *(_OWORD *)(v179 - 24) = v180;
                      v179 -= 24;
                      *(_QWORD *)(v177 - 16) = 0;
                      *(_QWORD *)(v177 - 8) = 0;
                      *(_QWORD *)(v177 - 24) = 0;
                      v177 -= 24;
                    }
                    while (v177 != v178);
                    v181 = buf;
                  }
                  v182 = v175 + 24;
                  buf.i64[0] = (uint64_t)v179;
                  buf.i64[1] = (uint64_t)(v175 + 24);
                  v218 = v181;
                  v183 = v224;
                  v224 = &v174[24 * v173];
                  v219 = v183;
                  __p = (void *)v181.i64[0];
                  sub_1002A56A4((uint64_t)&__p);
                  buf.i64[1] = (uint64_t)v182;
                  if (SHIBYTE(v222) < 0)
                    operator delete((void *)v221);
                }
                else
                {
                  v170 = v221;
                  *(_QWORD *)(buf.i64[1] + 16) = v222;
                  *v169 = v170;
                  buf.i64[1] = (uint64_t)v169 + 24;
                }
                v184 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "firmwareRevision")));
                v185 = (char *)objc_msgSend(v184, "UTF8String");
                if (v185)
                  v186 = v185;
                else
                  v186 = "";
                sub_100091AE8(&v221, v186);
                v187 = (_OWORD *)buf.i64[1];
                if (buf.i64[1] >= (unint64_t)v224)
                {
                  v189 = 0xAAAAAAAAAAAAAAABLL * ((buf.i64[1] - buf.i64[0]) >> 3);
                  v190 = v189 + 1;
                  if (v189 + 1 > 0xAAAAAAAAAAAAAAALL)
                    abort();
                  if (0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3) > v190)
                    v190 = 0x5555555555555556 * ((uint64_t)&v224[-buf.i64[0]] >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v224[-buf.i64[0]] >> 3) >= 0x555555555555555)
                    v191 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v191 = v190;
                  v220 = &v224;
                  if (v191)
                    v192 = (char *)sub_1002A479C((uint64_t)&v224, v191);
                  else
                    v192 = 0;
                  v193 = &v192[24 * v189];
                  v194 = v221;
                  *((_QWORD *)v193 + 2) = v222;
                  *(_OWORD *)v193 = v194;
                  v222 = 0;
                  v221 = 0uLL;
                  v195 = buf.i64[1];
                  v196 = buf.i64[0];
                  if (buf.i64[1] == buf.i64[0])
                  {
                    v199 = vdupq_n_s64(buf.u64[1]);
                    v197 = &v192[24 * v189];
                  }
                  else
                  {
                    v197 = &v192[24 * v189];
                    do
                    {
                      v198 = *(_OWORD *)(v195 - 24);
                      *((_QWORD *)v197 - 1) = *(_QWORD *)(v195 - 8);
                      *(_OWORD *)(v197 - 24) = v198;
                      v197 -= 24;
                      *(_QWORD *)(v195 - 16) = 0;
                      *(_QWORD *)(v195 - 8) = 0;
                      *(_QWORD *)(v195 - 24) = 0;
                      v195 -= 24;
                    }
                    while (v195 != v196);
                    v199 = buf;
                  }
                  v200 = v193 + 24;
                  buf.i64[0] = (uint64_t)v197;
                  buf.i64[1] = (uint64_t)(v193 + 24);
                  v218 = v199;
                  v201 = v224;
                  v224 = &v192[24 * v191];
                  v219 = v201;
                  __p = (void *)v199.i64[0];
                  sub_1002A56A4((uint64_t)&__p);
                  buf.i64[1] = (uint64_t)v200;
                  if (SHIBYTE(v222) < 0)
                    operator delete((void *)v221);
                }
                else
                {
                  v188 = v221;
                  *(_QWORD *)(buf.i64[1] + 16) = v222;
                  *v187 = v188;
                  v222 = 0;
                  v221 = 0uLL;
                  buf.i64[1] = (uint64_t)v187 + 24;
                }

                memset(v211, 0, sizeof(v211));
                sub_1002A46F4((char *)v211, (__int128 *)buf.i64[0], (__int128 *)buf.i64[1], 0xAAAAAAAAAAAAAAABLL * ((buf.i64[1] - buf.i64[0]) >> 3));
                sub_100448E60(a2, (uint64_t)v211);
                __p = v211;
                sub_100091BF8((void ***)&__p);
                if (qword_100977A68 != -1)
                  dispatch_once(&qword_100977A68, &stru_100921C58);
                sub_1004675F4((uint64_t)off_100977A60, a2);
                v202 = qword_1009997D0;
                if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
                {
                  sub_10043E5F8(a2, &__p);
                  v203 = &__p;
                  if (v218.i8[15] < 0)
                    v203 = __p;
                  LODWORD(v221) = 136446210;
                  *(_QWORD *)((char *)&v221 + 4) = v203;
                  _os_log_impl((void *)&_mh_execute_header, v202, OS_LOG_TYPE_DEFAULT, "Identification - Device %{public}s is a W1 device. Setting Firmware Version to 1 for Identification hash purposes.", (uint8_t *)&v221, 0xCu);
                  if (v218.i8[15] < 0)
                    operator delete(__p);
                }
                sub_10044B3C0(a2, 1);
                sub_100440984(a2);
                __p = &buf;
                sub_100091BF8((void ***)&__p);
              }
            }
          }
          v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v212, v225, 16);
        }
        while (v7);
      }

    }
  }
  return sub_100034234((uint64_t)v216);
}

void sub_100297C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,char a47)
{

  sub_100034234((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_100297E98()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100297F28()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100297FD0()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100298070()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100298110()
{
  operator delete();
}

void sub_100298134()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100298214()
{
  operator delete();
}

void sub_100298238()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100298318()
{
  operator delete();
}

void sub_10029833C()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_1002983E0()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100298484(unsigned __int8 *a1, unsigned __int8 *a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  _QWORD v20[6];
  char v21;
  char v22;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = *a2;
  v11 = a2[1];
  v12 = a2[2];
  v13 = a2[3];
  v14 = a2[4];
  v15 = a2[5];
  if (qword_10097AB28 != -1)
  {
    v18 = a3;
    v19 = a4;
    v16 = a1[5];
    v17 = a1[4];
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
    v9 = v16;
    v8 = v17;
    a3 = v18;
    a4 = v19;
  }
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1002985A4;
  v20[3] = &unk_1009186D0;
  v20[4] = (v4 << 40) | (v5 << 32) | (v6 << 24) | (v7 << 16) | (v8 << 8) | v9;
  v20[5] = (v10 << 40) | (v11 << 32) | (v12 << 24) | (v13 << 16) | (v14 << 8) | v15;
  v21 = a3;
  v22 = a4;
  sub_10048D538((uint64_t)off_10097AB20, v20);
}

uint64_t sub_1002985A4(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_10028BC64((uint64_t)off_100977A80, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49));
}

void sub_1002985FC(unsigned __int8 *a1, unsigned __int8 *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD v18[6];
  int v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  if (qword_10097AB28 != -1)
  {
    v17 = a3;
    v15 = a1[4];
    v16 = a1[5];
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
    v7 = v15;
    v8 = v16;
    a3 = v17;
  }
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100298718;
  v18[3] = &unk_1009180B0;
  v18[4] = (v3 << 40) | (v4 << 32) | (v5 << 24) | (v6 << 16) | (v7 << 8) | v8;
  v18[5] = (v9 << 40) | (v10 << 32) | (v11 << 24) | (v12 << 16) | (v13 << 8) | v14;
  v19 = a3;
  sub_10048D538((uint64_t)off_10097AB20, v18);
}

void sub_100298718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  sub_10028BEBC((uint64_t)off_100977A80, *(_QWORD *)(a1 + 32), a3, *(_DWORD *)(a1 + 48));
}

void sub_10029876C()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100298820()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_1002988D4()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100298974()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100298A14()
{
  operator delete();
}

void sub_100298A38()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100298AF0()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100298BD4()
{
  operator delete();
}

void sub_100298BF8()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100298C98()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100298D40()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100298E24()
{
  operator delete();
}

void sub_100298E48()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100298F2C()
{
  operator delete();
}

void sub_100298F50()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_10029902C()
{
  operator delete();
}

void sub_100299050()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100299144()
{
  operator delete();
}

void sub_100299168()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_1002991F0()
{
  operator delete();
}

void sub_100299214()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100299304()
{
  operator delete();
}

void sub_100299328()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100299400()
{
  operator delete();
}

void sub_100299424()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_10029950C()
{
  operator delete();
}

void sub_100299530()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100299610()
{
  operator delete();
}

void sub_100299634()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100299718()
{
  operator delete();
}

void sub_10029973C()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_1002997DC()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100299874()
{
  operator delete();
}

void sub_100299898()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100299994()
{
  operator delete();
}

void sub_1002999B8()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100299AAC()
{
  operator delete();
}

void sub_100299AD0()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100299BAC()
{
  operator delete();
}

void sub_100299BD0()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100299CB0()
{
  operator delete();
}

void sub_100299CD4()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100299DBC()
{
  operator delete();
}

void sub_100299DE0()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100299EC4()
{
  operator delete();
}

void sub_100299EE8()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_100299FD0()
{
  operator delete();
}

void sub_100299FF4()
{
  if (qword_10097AB28 != -1)
    dispatch_once(&qword_10097AB28, &stru_100921CB8);
  operator new();
}

void sub_10029A0D8()
{
  operator delete();
}

void sub_10029A0FC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  NSObject *v8;
  void **v9;
  uint64_t v10;
  NSObject *v11;
  void **v12;
  uint64_t v13;
  void *v14[2];
  char v15;
  void *__p[2];
  char v17;
  uint8_t buf[4];
  void **v19;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  v6 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)a3, 1);
  if (*(_DWORD *)a2 == *(_DWORD *)(a1 + 424) && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)(a1 + 428))
  {
    if (sub_10027F3E0(a1, v6))
    {
      v11 = qword_100999870;
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
      {
        sub_10046E9BC(a3, __p);
        v12 = v17 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v19 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "sending pair status request to magnet for device \"%s\"", buf, 0xCu);
        if (v17 < 0)
          operator delete(__p[0]);
      }
      v13 = sub_10034FCFC();
      sub_10046E9BC(a3, v14);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 88))(v13, v14);
      if (v15 < 0)
        operator delete(v14[0]);
    }
  }
  else
  {
    v8 = qword_100999870;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
    {
      sub_10046E9BC((unsigned __int8 *)a2, __p);
      v9 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "sending pair status request to AACP device \"%s\"", buf, 0xCu);
      if (v17 < 0)
        operator delete(__p[0]);
    }
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100921C78);
    v10 = sub_1004704A8((uint64_t)off_1009778E0, a2, 1);
    sub_10027946C(a1, v10, (uint64_t)a3);
  }
}

void sub_10029A354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10029A378(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  sub_10029A0FC(a1 - 264, a2, a3);
}

void sub_10029A380(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  NSObject *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  void **v17;
  int v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void **v24;
  void *v25[2];
  char v26;
  _QWORD v27[2];
  char v28;
  void *__p[2];
  char v30;
  uint8_t buf[4];
  void **v32;
  __int16 v33;
  int v34;

  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100921C78);
  v10 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)a3, 1);
  if (*(_DWORD *)a2 != *(_DWORD *)(a1 + 424) || *(unsigned __int16 *)(a2 + 4) != *(unsigned __int16 *)(a1 + 428))
  {
    if (*(_BYTE *)(a1 + 328))
    {
      v12 = qword_100999870;
      if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
      {
        sub_10046E9BC((unsigned __int8 *)a2, __p);
        v13 = v30 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v32 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "sending store link key request to AACP device \"%s\"", buf, 0xCu);
        if (v30 < 0)
          operator delete(__p[0]);
      }
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_100921C78);
      v14 = sub_1004704A8((uint64_t)off_1009778E0, a2, 1);
      sub_100279334(a1, v14, (uint64_t)a3, a5, a4);
    }
    return;
  }
  v15 = v10;
  if (!sub_10027F3E0(a1, v10))
    return;
  v16 = qword_100999870;
  if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
  {
    sub_10046E9BC(a3, __p);
    v17 = v30 >= 0 ? __p : (void **)__p[0];
    v18 = *(unsigned __int8 *)(a1 + 432);
    *(_DWORD *)buf = 136315394;
    v32 = v17;
    v33 = 1024;
    v34 = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "sending store link key request to magnet link for device \"%s\" with version %d", buf, 0x12u);
    if (v30 < 0)
      operator delete(__p[0]);
  }
  if (*(unsigned __int8 *)(a1 + 432) < 5u)
  {
    v23 = sub_10034FCFC();
    sub_10046E9BC(a3, v25);
    sub_10043F6EC(v15, (uint64_t)__p);
    if (v30 >= 0)
      v24 = __p;
    else
      v24 = (void **)__p[0];
    (*(void (**)(uint64_t, void **, void **, uint64_t, uint64_t))(*(_QWORD *)v23 + 104))(v23, v25, v24, a4, a5);
    if (v30 < 0)
      operator delete(__p[0]);
    if (v26 < 0)
    {
      v22 = v25[0];
      goto LABEL_40;
    }
  }
  else
  {
    *(_DWORD *)buf = 0;
    sub_10043FA40(v15, buf);
    v19 = sub_10034FCFC();
    sub_10046E9BC(a3, v27);
    v20 = __p;
    sub_10043F6EC(v15, (uint64_t)__p);
    if (v30 < 0)
      v20 = (void **)__p[0];
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_100921CD8);
    v21 = sub_100498AC8((uint64_t)off_100977A70, v15);
    (*(void (**)(uint64_t, _QWORD *, void **, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v19 + 112))(v19, v27, v20, a4, a5, v21, *(unsigned int *)buf);
    if (v30 < 0)
      operator delete(__p[0]);
    if (v28 < 0)
    {
      v22 = (void *)v27[0];
LABEL_40:
      operator delete(v22);
    }
  }
}

void sub_10029A714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_10029A77C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  sub_10029A380(a1 - 264, a2, a3, a4, a5);
}

void sub_10029A784(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  NSObject *v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  void **v10;
  uint64_t v13;
  _QWORD **v14;
  _QWORD **v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int *v21;
  int *v22;
  unsigned __int8 *v23;
  NSObject *v24;
  _BYTE *v25;
  uint64_t v26;
  NSObject *v27;
  void **v28;
  int v29;
  _BOOL4 v30;
  void *v31[2];
  char v32;
  char v33;
  int v34;
  __int16 v35;
  void *v36[2];
  char v37;
  uint8_t v38[4];
  _BYTE *v39;
  void *__p[2];
  char v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  _BYTE buf[22];

  if (a4 == 2)
  {
    v6 = qword_100999870;
    if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_ERROR))
    {
      sub_10046E9BC((unsigned __int8 *)a2, v42);
      v7 = SHIBYTE(v46);
      v8 = *(_BYTE **)v42;
      sub_10046E9BC(a3, __p);
      v9 = v42;
      if (v7 < 0)
        v9 = v8;
      if (v41 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v9;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v10;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "easy pair failed between devices \"%s\" and \"%s\"", buf, 0x16u);
      if (v41 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v46) < 0)
        operator delete(*(void **)v42);
    }
  }
  else
  {
    if (*(_DWORD *)a2 == *(_DWORD *)(a1 + 424) && *(unsigned __int16 *)(a2 + 4) == *(unsigned __int16 *)(a1 + 428))
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_100921C78);
    }
    else
    {
      if (qword_1009778E8 != -1)
        dispatch_once(&qword_1009778E8, &stru_100921C78);
      a3 = (unsigned __int8 *)a2;
    }
    v13 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)a3, 1);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    sub_10003415C((uint64_t)buf, a1 + 360);
    if (v13)
    {
      v14 = *(_QWORD ***)(a1 + 336);
      v15 = *(_QWORD ***)(a1 + 344);
      if (v14 != v15)
      {
        while (1)
        {
          v16 = *v14;
          if (**v14 == v13)
            break;
          if (++v14 == v15)
            goto LABEL_56;
        }
        v17 = sub_10003BE44();
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 328))(v17))
        {
          if (sub_10027F3E0(a1, v13))
          {
            sub_100279A90(a1, v13);
            v18 = sub_10034FCFC();
            sub_10046E9BC((unsigned __int8 *)(v13 + 128), v36);
            (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v18 + 144))(v18, v36, *((unsigned __int8 *)v16 + 10));
            if (v37 < 0)
              operator delete(v36[0]);
          }
        }
        if (sub_10027F3E0(a1, v13) && sub_10028B98C((uint64_t)v16))
        {
          v35 = 0;
          v34 = 0;
          memset(__p, 0, 12);
          if (qword_100977A58 != -1)
            dispatch_once(&qword_100977A58, &stru_100921B78);
          sub_1004A3424((uint64_t)off_100977A50, (uint64_t)&v34);
          v19 = sub_10003BE44();
          v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 328))(v19);
          v21 = &v34;
          if (v20)
            v22 = &v34;
          else
            v22 = (int *)(a1 + 424);
          if (v20)
            v21 = (int *)(a1 + 424);
          LODWORD(__p[0]) = *v22;
          WORD2(__p[0]) = *((_WORD *)v22 + 2);
          *(_DWORD *)((char *)__p + 6) = *v21;
          WORD1(__p[1]) = *((_WORD *)v21 + 2);
          if (sub_100442118(v13, 32))
            sub_10027CE94((uint64_t)v16, 2, (int *)__p, 2);
          v33 = 0;
          sub_100043758(&v33);
          v23 = (unsigned __int8 *)(v13 + 128);
          sub_1000E2260((unsigned __int8 *)(v13 + 128), 2u, (uint64_t)__p);
          sub_10004339C(&v33);
          v24 = qword_100999870;
          if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(v13, v42);
            v25 = v46 >= 0 ? v42 : *(_BYTE **)v42;
            *(_DWORD *)v38 = 136446210;
            v39 = v25;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Sending message to Phone/Watch to connect to %{public}s", v38, 0xCu);
            if (SHIBYTE(v46) < 0)
              operator delete(*(void **)v42);
          }
          v26 = sub_10034FCFC();
          sub_10046E9BC(v23, v31);
          (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v26 + 128))(v26, v31, 0);
          if (v32 < 0)
            operator delete(v31[0]);
          sub_100043728(&v33);
        }
        else
        {
          v27 = qword_100999870;
          if (os_log_type_enabled((os_log_t)qword_100999870, OS_LOG_TYPE_DEFAULT))
          {
            v28 = __p;
            sub_10043E5F8(v13, __p);
            if (v41 < 0)
              v28 = (void **)__p[0];
            v29 = sub_10027F3E0(a1, v13);
            v30 = sub_10028B98C((uint64_t)v16);
            *(_DWORD *)v42 = 136446722;
            *(_QWORD *)&v42[4] = v28;
            v43 = 1024;
            v44 = v29;
            v45 = 1024;
            v46 = v30;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Not establishing triangle with %{public}s (magnet check %d, triangle check %d)", v42, 0x18u);
            if (v41 < 0)
              operator delete(__p[0]);
          }
        }
        *((_BYTE *)v16 + 728) = 0;
      }
    }
LABEL_56:
    sub_100034234((uint64_t)buf);
  }
}

void sub_10029AC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  sub_100043728(&a18);
  sub_100034234(v40 - 80);
  _Unwind_Resume(a1);
}

void sub_10029ACF4(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  sub_10029A784(a1 - 264, a2, a3, a4);
}

void sub_10029ACFC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = (uint64_t)(a1 + 3);
  v3 = (_QWORD *)a1[3];
  v4 = a1 + 4;
  if (v3 != a1 + 4)
  {
    do
    {
      v5 = v3[5];
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  if (a1[5])
  {
    sub_10001A82C(v2, (_QWORD *)a1[4]);
    a1[4] = 0;
    a1[5] = 0;
    a1[3] = v4;
  }
}

BOOL sub_10029AD9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL8 v7;
  BOOL v8;
  _QWORD v10[2];
  int v11;
  unsigned __int16 v12;

  v11 = a2;
  v12 = WORD2(a2);
  v10[0] = 0;
  v10[1] = 0;
  sub_10003415C((uint64_t)v10, a1 + 360);
  v4 = *(_QWORD *)(a1 + 336);
  v3 = *(_QWORD *)(a1 + 344);
  if (v4 == v3)
  {
    v7 = 0;
  }
  else
  {
    v5 = v4 + 8;
    do
    {
      v6 = *(_DWORD *)(**(_QWORD **)(v5 - 8) + 128) ^ v11 | *(unsigned __int16 *)(**(_QWORD **)(v5 - 8) + 132) ^ v12;
      v7 = v6 == 0;
      if (v6)
        v8 = v5 == v3;
      else
        v8 = 1;
      v5 += 8;
    }
    while (!v8);
  }
  sub_100034234((uint64_t)v10);
  return v7;
}

void sub_10029AE38(id a1)
{
  notify_register_check("com.apple.bluetoothd.conversationAwarenessValueChanged", &dword_100991A98);
}

uint64_t sub_10029AE4C(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 32))
  {
    v1 = result;
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_100921D98);
    return sub_1004E3EE8((uint64_t)off_10097AA38, *(_QWORD *)(v1 + 32));
  }
  return result;
}

uint64_t sub_10029AEB0(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 32))
  {
    v1 = result;
    if (qword_100977E00 != -1)
      dispatch_once(&qword_100977E00, &stru_100921C18);
    return sub_1003E3FD8((_QWORD *)qword_100977DF8, *(_QWORD *)(v1 + 32));
  }
  return result;
}

uint64_t sub_10029AF14(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 32))
  {
    v1 = result;
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_100921D98);
    return sub_1004E3FE8((uint64_t)off_10097AA38, *(_QWORD *)(v1 + 32));
  }
  return result;
}

uint64_t sub_10029AF78(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 32))
  {
    v1 = result;
    if (qword_100977E00 != -1)
      dispatch_once(&qword_100977E00, &stru_100921C18);
    return sub_1003E41A8((_QWORD *)qword_100977DF8, *(_QWORD *)(v1 + 32));
  }
  return result;
}

uint64_t sub_10029AFDC(uint64_t a1)
{
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100921D98);
  return sub_1004E4030((uint64_t)off_10097AA38, *(_QWORD *)(a1 + 32));
}

uint64_t sub_10029B02C(uint64_t a1)
{
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100921D98);
  return sub_1004E40A8((uint64_t)off_10097AA38, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_10029B080(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100921C18);
  return sub_1003E4168((_QWORD *)qword_100977DF8, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_10029B0D4(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 32))
  {
    v1 = result;
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_100921D98);
    return sub_1004E40E0((uint64_t)off_10097AA38, *(_QWORD *)(v1 + 32));
  }
  return result;
}

uint64_t sub_10029B138(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 32))
  {
    v1 = result;
    if (qword_100977E00 != -1)
      dispatch_once(&qword_100977E00, &stru_100921C18);
    return sub_1003E41F8((_QWORD *)qword_100977DF8, *(_QWORD *)(v1 + 32));
  }
  return result;
}

uint64_t sub_10029B19C(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 32))
  {
    v1 = result;
    if (qword_10097AA40 != -1)
      dispatch_once(&qword_10097AA40, &stru_100921D98);
    return sub_1004E4128((uint64_t)off_10097AA38, *(_QWORD *)(v1 + 32));
  }
  return result;
}

uint64_t sub_10029B200(uint64_t result)
{
  uint64_t v1;

  if (*(_QWORD *)(result + 32))
  {
    v1 = result;
    if (qword_100977E00 != -1)
      dispatch_once(&qword_100977E00, &stru_100921C18);
    return sub_1003E4248((_QWORD *)qword_100977DF8, *(_QWORD *)(v1 + 32));
  }
  return result;
}

_QWORD *sub_10029B264(_QWORD *result)
{
  uint64_t v1;
  int v2;
  __int16 v3;

  if (!result[6])
  {
    v1 = *result;
    v2 = *(_DWORD *)(*result + 128);
    v3 = *(_WORD *)(v1 + 132);
    operator new();
  }
  return result;
}

void sub_10029B2F4()
{
  operator delete();
}

const char *sub_10029B318(uint64_t a1, int a2)
{
  if ((a2 - 1) > 0xE)
    return "unknown";
  else
    return off_100922138[a2 - 1];
}

uint64_t sub_10029B340(uint64_t a1, uint64_t a2, int a3)
{
  std::string *v6;
  uint64_t *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _QWORD v17[5];
  int v18;
  uint64_t v19;
  std::string __str;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 50529027;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_DWORD *)(a1 + 16) = 3;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = (std::string *)(a1 + 56);
  *(_BYTE *)(a1 + 84) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  v7 = (uint64_t *)(a1 + 104);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 416) = a1 + 416;
  *(_QWORD *)(a1 + 424) = a1 + 416;
  *(_QWORD *)(a1 + 432) = 0;
  sub_1000160D0(a1 + 440);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  sub_1000160D0(a1 + 536);
  *(_BYTE *)(a1 + 618) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_BYTE *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_QWORD *)(a1 + 704) = a1 + 712;
  *(_WORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 752) = 0;
  *(_QWORD *)(a1 + 744) = 0;
  if ((sub_10044F614(a2) & 1) == 0)
    *(_WORD *)(a1 + 8) = 0;
  memset(&__str, 0, sizeof(__str));
  v8 = sub_10034D650();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v8 + 32))(v8, a2, &__str))
    std::string::operator=(v6, &__str);
  v19 = 0;
  v9 = (_DWORD *)(a1 + 80);
  v18 = 0;
  if (!sub_100444BF0(a2, (_DWORD *)&v19 + 1, &v19, (_DWORD *)(a1 + 80), &v18))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
      sub_1006D9318();
    *v9 = 0;
  }
  v10 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 328))(v10) & 1) != 0
    || (v11 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 384))(v11)))
  {
    v12 = *v9 - 8194;
    if (v12 <= 0xE && ((1 << v12) & 0x409B) != 0)
    {
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_10029B71C;
      v17[3] = &unk_100921208;
      v17[4] = a2;
      v13 = objc_claimAutoreleasedReturnValue(+[NSTimer timerWithTimeInterval:repeats:block:](NSTimer, "timerWithTimeInterval:repeats:block:", 0, v17, 10.0));
      v14 = (void *)*v7;
      *v7 = v13;

      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](NSRunLoop, "mainRunLoop"));
      objc_msgSend(v15, "addTimer:forMode:", *v7, NSDefaultRunLoopMode);

    }
  }
  *(_DWORD *)(a1 + 93) = 0;
  *(_QWORD *)(a1 + 85) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_WORD *)(a1 + 760) = -1;
  if (a3)
    operator new();
  sub_10029B928(a1);
  *(_BYTE *)(a1 + 528) = 1;
  *(_DWORD *)(a1 + 532) = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return a1;
}

void sub_10029B63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD **v28;
  uint64_t v29;
  void *v30;
  void *v32;
  void *v33;
  void *v34;

  if (a25 < 0)
    operator delete(__p);
  v32 = *(void **)(v25 + 736);
  if (v32)
  {
    *(_QWORD *)(v25 + 744) = v32;
    operator delete(v32);
  }
  sub_10001A82C(v29, *(_QWORD **)(v25 + 712));
  v33 = *(void **)(v25 + 680);
  if (v33)
  {
    *(_QWORD *)(v25 + 688) = v33;
    operator delete(v33);
  }
  sub_1002A4270((_QWORD *)(v25 + 632));

  sub_100069BDC(a11);
  v34 = *(void **)(v25 + 504);
  if (v34)
  {
    *(_QWORD *)(v25 + 512) = v34;
    operator delete(v34);
  }
  sub_100069BDC(a12);
  sub_10002074C(v27);

  if (*(char *)(v25 + 79) < 0)
    operator delete(*a10);
  sub_10001A82C(v26, *v28);
  _Unwind_Resume(a1);
}

uint64_t sub_10029B71C(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_1002969DC((uint64_t)off_100977A80, *(_QWORD *)(a1 + 32));
}

uint64_t sub_10029B76C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;

  objc_msgSend(*(id *)(a1 + 104), "invalidate");
  v2 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;

  v3 = *(void **)(a1 + 624);
  if (v3)
  {
    objc_msgSend(v3, "invalidate");
    v4 = *(void **)(a1 + 624);
    *(_QWORD *)(a1 + 624) = 0;

  }
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    sub_10026DA68(v5);
    goto LABEL_5;
  }
  while (1)
  {
    v6 = *(_QWORD *)(a1 + 432);
    if (!v6)
      break;
    v7 = *(uint64_t **)(a1 + 424);
    v8 = v7[2];
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = v7[1];
    *(_QWORD *)v7[1] = v9;
    *(_QWORD *)(a1 + 432) = v6 - 1;
    operator delete(v7);
    if (v8)
    {
      if (*(_QWORD *)(v8 + 8))
        operator delete[]();
LABEL_5:
      operator delete();
    }
  }
  v10 = *(_QWORD *)(a1 + 768);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  sub_10029B928(a1);
  v11 = *(void **)(a1 + 736);
  if (v11)
  {
    *(_QWORD *)(a1 + 744) = v11;
    operator delete(v11);
  }
  sub_10001A82C(a1 + 704, *(_QWORD **)(a1 + 712));
  v12 = *(void **)(a1 + 680);
  if (v12)
  {
    *(_QWORD *)(a1 + 688) = v12;
    operator delete(v12);
  }
  sub_1002A4270((_QWORD *)(a1 + 632));

  sub_100069BDC(a1 + 536);
  v13 = *(void **)(a1 + 504);
  if (v13)
  {
    *(_QWORD *)(a1 + 512) = v13;
    operator delete(v13);
  }
  sub_100069BDC(a1 + 440);
  sub_10002074C((_QWORD *)(a1 + 416));

  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  sub_10001A82C(a1 + 24, *(_QWORD **)(a1 + 32));
  return a1;
}

uint64_t sub_10029B928(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;

  v1 = result;
  v2 = *(uint64_t **)(result + 504);
  v3 = *(uint64_t **)(result + 512);
  if (v2 != v3)
  {
    do
    {
      result = *v2;
      if (*v2)
      {
        sub_1002A4350(result);
        operator delete();
      }
      ++v2;
    }
    while (v2 != v3);
    v2 = *(uint64_t **)(v1 + 504);
  }
  *(_QWORD *)(v1 + 512) = v2;
  return result;
}

_QWORD *sub_10029B98C@<X0>(char a1@<W1>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((a1 - 1) > 7u)
    v2 = "Other";
  else
    v2 = off_100922268[(char)(a1 - 1)];
  return sub_100091AE8(a2, v2);
}

void sub_10029B9C0(uint64_t *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string v6;

  if (a2 == 4)
  {
    sub_10043F6EC(*a1, (uint64_t)&v6);
    v4 = std::string::append(&v6, " 🅛");
  }
  else
  {
    if (a2 != 2)
    {
      sub_100091AE8(a3, "");
      return;
    }
    sub_10043F6EC(*a1, (uint64_t)&v6);
    v4 = std::string::append(&v6, " 🅡");
  }
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  a3[2] = *((_QWORD *)&v4->__r_.__value_.__l + 2);
  *(_OWORD *)a3 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_10029BA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10029BA94(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  __CFString *v8;
  void **v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  void **v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  __int128 v18;
  __int128 v19;
  void *__p[2];
  uint64_t v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  void **v25;

  if (a2 != 8)
  {
    sub_10043F6EC(*(_QWORD *)a1, (uint64_t)a3);
    return;
  }
  v5 = CFSTR("AIRPODS_CASE");
  if (*(_DWORD *)(a1 + 80) == 8203)
    v5 = CFSTR("POWERBEATS_PRO_CASE");
  v6 = v5;
  if (*(_DWORD *)(a1 + 80) == 8203)
    v7 = CFSTR("Powerbeats Pro Case");
  else
    v7 = CFSTR("AirPods Case");
  v8 = v7;
  v21 = 0;
  v19 = 0u;
  *(_OWORD *)__p = 0u;
  v18 = 0u;
  sub_100091AE8(__p, "");
  if (sub_1004495CC(*(_QWORD *)a1, (uint64_t)&v18))
  {
    if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
      v9 = __p;
      if (HIBYTE(v21) <= 1u)
        goto LABEL_20;
LABEL_14:
      v10 = objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v9, +[NSString defaultCStringEncoding](NSString, "defaultCStringEncoding", v18, v19)));

      v8 = (__CFString *)v10;
      v11 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_DWORD *)(a1 + 80);
        if (v21 >= 0)
          v13 = __p;
        else
          v13 = (void **)__p[0];
        *(_DWORD *)buf = 67109378;
        v23 = v12;
        v24 = 2082;
        v25 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Case for buds with productId = %d reports case name %{public}s", buf, 0x12u);
      }
      v14 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString uppercaseString](v8, "uppercaseString"));
      v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), CFSTR("_")));

      v6 = (__CFString *)v15;
      goto LABEL_20;
    }
    if (__p[1] > (void *)1)
    {
      v9 = (void **)__p[0];
      goto LABEL_14;
    }
  }
LABEL_20:
  v16 = sub_100355F10(v6, v8);
  v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(v16));
  sub_100091AE8(a3, (char *)objc_msgSend(v17, "UTF8String"));

  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);

}

void sub_10029BD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;

  if (a18 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_10029BD5C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  NSObject *v9;
  int v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  NSObject *v17;
  id v18;
  NSMutableArray *v19;
  uint8_t buf[4];
  id v21;

  if (*(_QWORD *)(a1 + 128))
  {
    if (*(_QWORD *)(a1 + 144))
    {
      if (*(_QWORD *)(a1 + 512) == *(_QWORD *)(a1 + 504))
      {
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
          sub_1006D942C();
      }
      else
      {
        v19 = objc_opt_new(NSMutableArray);
        v3 = *(uint64_t **)(a1 + 504);
        v2 = *(uint64_t **)(a1 + 512);
        if (v3 != v2)
        {
          v4 = kCFACCProperties_Endpoint_AACP_CertificateInfo_Type;
          v5 = kCFACCProperties_Endpoint_AACP_CertificateInfo_Serial;
          v6 = kCFACCProperties_Endpoint_AACP_CertificateInfo_Data;
          do
          {
            v7 = *v3;
            if (*(char *)(*v3 + 47) < 0)
              v8 = *(_QWORD *)(v7 + 32);
            else
              v8 = *(unsigned __int8 *)(*v3 + 47);
            if (v8 > 1)
            {
              v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(v7 + 48)));
              v12 = (_QWORD *)(v7 + 24);
              if (*(char *)(v7 + 47) < 0)
                v12 = (_QWORD *)*v12;
              v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
              v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", *(_QWORD *)v7, *(_QWORD *)(v7 + 8) - *(_QWORD *)v7));
              v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", v11, v4, v13, v5, v14, v6, 0));
              -[NSMutableArray addObject:](v19, "addObject:", v15);

            }
            else
            {
              v9 = qword_1009997D0;
              if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
              {
                v10 = *(unsigned __int8 *)(v7 + 48);
                *(_DWORD *)buf = 67109120;
                LODWORD(v21) = v10;
                _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "dispatchCertificates: Cert of type %d lacks serial number", buf, 8u);
              }
            }
            ++v3;
          }
          while (v3 != v2);
        }
        v16 = acc_transportClient_setPropertyForEndpointWithUUID(kCFACCProperties_Endpoint_AACP_CertificateList, v19, *(_QWORD *)(a1 + 144));
        v17 = qword_1009997D0;
        if (v16)
        {
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            v18 = -[NSMutableArray count](v19, "count");
            *(_DWORD *)buf = 134217984;
            v21 = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "dispatchCertificates: Published %lu certificates", buf, 0xCu);
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
        {
          sub_1006D9458((uint64_t)buf, (uint64_t)-[NSMutableArray count](v19, "count"), v17);
        }
        sub_10029B928(a1);
        *(_BYTE *)(a1 + 528) = 1;
        *(_DWORD *)(a1 + 532) = 0;

      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    {
      sub_1006D9400();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D93D4();
  }
}

void sub_10029C084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_10029C0DC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D9494(v2, v3, v4);
  *(_BYTE *)(v1 + 618) = 0;
}

uint64_t sub_10029C124(_QWORD *a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5)
{
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  NSObject *v19;
  int v20;
  _BOOL4 v21;
  NSObject *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  NSObject *v31;
  _BOOL4 v33;
  _QWORD v34[2];
  _QWORD v35[2];
  uint8_t buf[8];
  uint64_t v37;
  int v38;
  uint64_t v39;

  v35[0] = 0;
  v35[1] = 0;
  sub_10003415C((uint64_t)v35, (uint64_t)(a1 + 45));
  if (*(_DWORD *)(a5 + 16))
  {
    v10 = *(_DWORD *)(a5 + 20);
    v12 = (uint64_t *)a1[42];
    v11 = (uint64_t *)a1[43];
    if (v11 == v12)
    {
      v27 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v10 == -1;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Warning: registerCustomDataCallback: No AACP connection (isFromDE = %d)", buf, 8u);
      }
      v28 = 312;
      goto LABEL_53;
    }
    LODWORD(v13) = 0;
    v14 = 0;
    do
    {
      v16 = *v12++;
      v15 = (uint64_t *)v16;
      v17 = *(_DWORD *)(v16 + 80);
      if (v17 >= v13)
        v14 = v15;
      if (v17 <= v13)
        v13 = v13;
      else
        v13 = v17;
    }
    while (v12 != v11);
    v33 = v10 == -1;
    if (qword_100978180 != -1)
      dispatch_once(&qword_100978180, &stru_100921D18);
    v18 = sub_1003C2EB8(qword_100978178);
    if (v18)
    {
      if (v10 != -1)
        goto LABEL_50;
      if (qword_100978180 != -1)
        dispatch_once(&qword_100978180, &stru_100921D18);
      if (!sub_1003C3220(qword_100978178))
      {
LABEL_50:
        v31 = qword_1009997D0;
        if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v10 == -1;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Warning: registerCustomDataCallback: Logging already ongoing (isFromDE = %d)", buf, 8u);
        }
        v28 = 10;
        goto LABEL_53;
      }
      if (v14)
      {
        if (qword_100978180 != -1)
          dispatch_once(&qword_100978180, &stru_100921D18);
        sub_1003C3110(qword_100978178, *v14);
      }
      v19 = qword_1009997D0;
      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "registerCustomDataCallback: Replacing sysdiagnose callback with DE callback", buf, 2u);
      }
    }
    v20 = v18 ^ 1;
    *(_QWORD *)(a5 + 8) = v13;
    v21 = v33;
  }
  else
  {
    v22 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "registerCustomDataCallback: Registering client type %d", buf, 8u);
    }
    v21 = 0;
    v14 = 0;
    v20 = 0;
  }
  v34[0] = 0;
  v34[1] = 0;
  sub_10003415C((uint64_t)v34, (uint64_t)(a1 + 81));
  v23 = *a4;
  v24 = (_QWORD *)a1[70];
  v25 = a1[71];
  v37 = *a4;
  if (v24 != (_QWORD *)v25)
  {
    while (*v24 != a2 || v37 != v24[1])
    {
      v24 += 4;
      if (v24 == (_QWORD *)v25)
        goto LABEL_33;
    }
  }
  if (v24 == (_QWORD *)v25)
  {
LABEL_33:
    *(_QWORD *)buf = a2;
    v37 = v23;
    v38 = a3;
    v39 = a5;
    if (v25 >= a1[72])
    {
      v26 = sub_1002A7254(a1 + 70, (uint64_t)buf);
    }
    else
    {
      *(_QWORD *)v25 = a2;
      *(_QWORD *)(v25 + 8) = v23;
      *(_DWORD *)(v25 + 16) = a3;
      v26 = v25 + 32;
      *(_QWORD *)(v25 + 24) = a5;
    }
    a1[71] = v26;
  }
  if (v14)
    v29 = v20;
  else
    v29 = 0;
  if (v29 == 1)
  {
    v30 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "registerCustomDataCallback: Calling triggerAccessoryLogRetrieval (isFromDE = %d)", buf, 8u);
    }
    if (qword_100978180 != -1)
      dispatch_once(&qword_100978180, &stru_100921D18);
    sub_1003C2818(qword_100978178, *v14, v21);
  }
  sub_100034234((uint64_t)v34);
  v28 = 0;
LABEL_53:
  sub_100034234((uint64_t)v35);
  return v28;
}

void sub_10029C568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10029C598(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + 560;
  v5 = sub_1002A74A0(*(_QWORD *)(a1 + 560), *(_QWORD *)(a1 + 568), a2, *a3);
  sub_1002A743C(v4, v5, *(_QWORD *)(a1 + 568));
  return 0;
}

uint64_t sub_10029C5E4(uint64_t a1)
{
  *(_QWORD *)a1 = off_100921238;
  free(*(void **)(a1 + 64));
  return a1;
}

void sub_10029C618(uint64_t a1)
{
  *(_QWORD *)a1 = off_100921238;
  free(*(void **)(a1 + 64));
  operator delete();
}

void sub_10029C65C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  _QWORD *v8;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  v8 = off_100977A80;
  if (sub_10029C73C(a1, *(_QWORD *)(a1 + 40)) && sub_10029C73C(a1, *(_QWORD *)(a1 + 48)) && v8[70] != v8[71])
  {
    sub_100424570(a2, a3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), a4);
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
  {
    sub_1006D9504();
  }
}

BOOL sub_10029C73C(uint64_t a1, unint64_t a2)
{
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100921DF8);
  return sub_10050AB38(qword_100977B48, a2);
}

uint64_t sub_10029C78C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = a2;
  if (a2 + 32 != v2)
  {
    v4 = a2;
    v3 = a2;
    do
    {
      v5 = *(_QWORD *)(v3 + 32);
      v3 += 32;
      v6 = *(_QWORD *)(v4 + 40);
      *(_QWORD *)v4 = v5;
      *(_QWORD *)(v4 + 8) = v6;
      *(_DWORD *)(v4 + 16) = *(_DWORD *)(v4 + 48);
      *(_QWORD *)(v4 + 24) = *(_QWORD *)(v4 + 56);
      v7 = v4 + 64;
      v4 = v3;
    }
    while (v7 != v2);
  }
  *(_QWORD *)(a1 + 8) = v3;
  return a2;
}

uint64_t sub_10029C7E0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned __int8 *a5)
{
  uint64_t v9;
  NSObject *v10;
  void **v11;
  uint64_t v12;
  void **v13;
  void *__p[2];
  char v16;
  char v17;
  uint8_t buf[4];
  void **v19;
  __int16 v20;
  unsigned int v21;
  __int16 v22;
  unsigned int v23;
  __int16 v24;
  int v25;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  if (!*((_BYTE *)off_100977A80 + 328))
    return 111;
  v17 = 0;
  sub_100043758(&v17);
  v9 = sub_1000E2430((unsigned __int8 *)(a2 + 128), a3, a4, a5);
  sub_10004339C(&v17);
  v10 = qword_1009997D0;
  if ((_DWORD)v9)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a2, __p);
      if (v16 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      *(_DWORD *)buf = 136446978;
      v19 = v11;
      v20 = 1024;
      v21 = a3;
      v22 = 1024;
      v23 = a4;
      v24 = 1024;
      v25 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to send custom message to %{public}s: type 0x%x, len %u, error %u", buf, 0x1Eu);
      goto LABEL_16;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    if (v16 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    *(_DWORD *)buf = 136446722;
    v19 = v13;
    v20 = 1024;
    v21 = a3;
    v22 = 1024;
    v23 = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Sent custom message to %{public}s: type 0x%x, len %u", buf, 0x18u);
LABEL_16:
    if (v16 < 0)
      operator delete(__p[0]);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v12 = sub_1004A35C0((uint64_t)off_100977A50, v9, 10000);
  sub_100043728(&v17);
  return v12;
}

void sub_10029CA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_100043728(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10029CA40(uint64_t a1, uint64_t a2, char a3, int a4)
{
  NSObject *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  void **v15;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  if (!*((_BYTE *)off_100977A80 + 328))
    return 111;
  v7 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v8 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "send control command message to %{public}s", buf, 0xCu);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v9 = sub_1000E1F2C((unsigned __int8 *)(a2 + 128), a3, a4);
  sub_10004339C(__p);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v10 = sub_1004A35C0((uint64_t)off_100977A50, v9, 10000);
  sub_100043728(__p);
  return v10;
}

void sub_10029CBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029CBF8(uint64_t a1, uint64_t a2, char *a3)
{
  NSObject *v5;
  void **v6;
  _BYTE *v7;
  char v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  void **v18;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  if (!*((_BYTE *)off_100977A80 + 328))
    return 111;
  v5 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v6 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "send set country code message to %{public}s", buf, 0xCu);
    if (v16 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v7 = operator new(1uLL);
  v8 = *a3;
  *v7 = *a3;
  v9 = operator new(2uLL);
  v9[1] = a3[1];
  *v9 = v8;
  operator delete(v7);
  v10 = operator new(4uLL);
  v10[2] = a3[2];
  *(_WORD *)v10 = *(_WORD *)v9;
  operator delete(v9);
  v10[3] = a3[3];
  v11 = operator new(8uLL);
  v11[4] = a3[4];
  *(_DWORD *)v11 = *(_DWORD *)v10;
  operator delete(v10);
  v11[5] = a3[5];
  *((_WORD *)v11 + 3) = *((_WORD *)a3 + 3);
  v12 = sub_1000E3534((unsigned __int8 *)(a2 + 128), v11, 8u);
  sub_10004339C(__p);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v13 = sub_1004A35C0((uint64_t)off_100977A50, v12, 10000);
  operator delete(v11);
  sub_100043728(__p);
  return v13;
}

void sub_10029CE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029CE70(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4)
{
  NSObject *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  void **v15;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  if (!*((_BYTE *)off_100977A80 + 328))
    return 111;
  v7 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v8 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "send set notification filter message to %{public}s", buf, 0xCu);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v9 = sub_1000E1FF8((unsigned __int8 *)(a2 + 128), a3, a4);
  sub_10004339C(__p);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v10 = sub_1004A35C0((uint64_t)off_100977A50, v9, 10000);
  sub_100043728(__p);
  return v10;
}

void sub_10029D00C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029D028(uint64_t a1, uint64_t a2, char a3)
{
  NSObject *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  void **v13;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  if (!*((_BYTE *)off_100977A80 + 328))
    return 111;
  v5 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v6 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "send get capabilities message to %{public}s", buf, 0xCu);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v7 = sub_1000E1DE0((unsigned __int8 *)(a2 + 128), a3);
  sub_10004339C(__p);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v8 = sub_1004A35C0((uint64_t)off_100977A50, v7, 10000);
  sub_100043728(__p);
  return v8;
}

void sub_10029D1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029D1D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  void **v15;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  if (!*((_BYTE *)off_100977A80 + 328))
    return 111;
  v5 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v6 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 134218242;
    v13 = a3;
    v14 = 2082;
    v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Send source feature capabilities mask 0x%llx message to %{public}s", buf, 0x16u);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v7 = sub_1000E3EE8((unsigned __int8 *)(a2 + 128), a3);
  sub_10004339C(__p);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v8 = sub_1004A35C0((uint64_t)off_100977A50, v7, 10000);
  sub_100043728(__p);
  return v8;
}

void sub_10029D368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029D384(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  void **v11;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  if (!*((_BYTE *)off_100977A80 + 328))
    return 111;
  v3 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v4 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "send request case info message to %{public}s", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v5 = sub_1000E2E08((unsigned __int8 *)(a2 + 128));
  sub_10004339C(__p);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v6 = sub_1004A35C0((uint64_t)off_100977A50, v5, 10000);
  sub_100043728(__p);
  return v6;
}

void sub_10029D508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029D524(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  void **v11;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  if (!*((_BYTE *)off_100977A80 + 328))
    return 111;
  v3 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v4 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "query stream state info message to %{public}s", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v5 = sub_1000E1FAC((unsigned __int8 *)(a2 + 128));
  sub_10004339C(__p);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v6 = sub_1004A35C0((uint64_t)off_100977A50, v5, 10000);
  sub_100043728(__p);
  return v6;
}

void sub_10029D6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029D6C4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const void *a5)
{
  NSObject *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void **v17;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  if (!*((_BYTE *)off_100977A80 + 328))
    return 111;
  v9 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v10 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v17 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "send easy pair req message to %{public}s", buf, 0xCu);
    if (v15 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v11 = sub_1000E21BC((unsigned __int8 *)(a2 + 128), a3, a4, a5);
  sub_10004339C(__p);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v12 = sub_1004A35C0((uint64_t)off_100977A50, v11, 10000);
  sub_100043728(__p);
  return v12;
}

void sub_10029D868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029D884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  void **v13;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  if (!*((_BYTE *)off_100977A80 + 328))
    return 111;
  v5 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v6 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "send easy pair req message to %{public}s", buf, 0xCu);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v7 = sub_1000E2350((unsigned __int8 *)(a2 + 128), a3);
  sub_10004339C(__p);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v8 = sub_1004A35C0((uint64_t)off_100977A50, v7, 10000);
  sub_100043728(__p);
  return v8;
}

void sub_10029DA10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029DA2C(uint64_t a1, uint64_t a2, char a3)
{
  NSObject *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  void **v13;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  if (!*((_BYTE *)off_100977A80 + 328))
    return 111;
  v5 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v6 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "send get battery info message to %{public}s", buf, 0xCu);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v7 = sub_1000E1E34((unsigned __int8 *)(a2 + 128), a3);
  sub_10004339C(__p);
  if ((_DWORD)v7 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D9530();
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v8 = sub_1004A35C0((uint64_t)off_100977A50, v7, 10000);
  sub_100043728(__p);
  return v8;
}

void sub_10029DBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029DC00(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  void **v11;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  if (!*((_BYTE *)off_100977A80 + 328))
    return 111;
  v3 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v4 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "send get in ear state info message to %{public}s", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v5 = sub_1000E1E94((unsigned __int8 *)(a2 + 128));
  sub_10004339C(__p);
  if ((_DWORD)v5 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D9590();
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v6 = sub_1004A35C0((uint64_t)off_100977A50, v5, 10000);
  sub_100043728(__p);
  return v6;
}

void sub_10029DDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029DDC4(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  void **v11;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  if (!*((_BYTE *)off_100977A80 + 328))
    return 111;
  v3 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v4 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "send get role state info message to %{public}s", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v5 = sub_1000E1EE0((unsigned __int8 *)(a2 + 128));
  sub_10004339C(__p);
  if ((_DWORD)v5 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D95F0();
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v6 = sub_1004A35C0((uint64_t)off_100977A50, v5, 10000);
  sub_100043728(__p);
  return v6;
}

void sub_10029DF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029DF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  void **v13;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  if (!*((_BYTE *)off_100977A80 + 328))
    return 111;
  v5 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v6 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "send time stamp message to %{public}s", buf, 0xCu);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v7 = sub_1000E2638((unsigned __int8 *)(a2 + 128), a3);
  sub_10004339C(__p);
  if ((_DWORD)v7 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D9650();
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v8 = sub_1004A35C0((uint64_t)off_100977A50, v7, 10000);
  sub_100043728(__p);
  return v8;
}

void sub_10029E140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029E15C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  NSObject *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  void **v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  if (!*((_BYTE *)off_100977A80 + 328))
    return 111;
  v7 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v8 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446722;
    v15 = v8;
    v16 = 1024;
    v17 = a3;
    v18 = 1024;
    v19 = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "notify session state to %{public}s, sesssionType -> %d, sessionState -> %d", buf, 0x18u);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  buf[0] = 0;
  sub_100043758(buf);
  v9 = sub_1000E2AE8((unsigned __int8 *)(a2 + 128), a3, a4);
  sub_10004339C(buf);
  if ((_DWORD)v9 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D96B0();
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v10 = sub_1004A35C0((uint64_t)off_100977A50, v9, 10000);
  sub_100043728(buf);
  return v10;
}

void sub_10029E330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029E34C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  NSObject *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  void **v15;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  if (!*((_BYTE *)off_100977A80 + 328))
    return 111;
  v7 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v8 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "send keys to %{public}s", buf, 0xCu);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v9 = sub_1000E31F0((unsigned __int8 *)(a2 + 128), a3, a4);
  if ((_DWORD)v9 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D9710();
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v10 = sub_1004A35C0((uint64_t)off_100977A50, v9, 10000);
  sub_100043728(__p);
  return v10;
}

void sub_10029E504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029E520(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  void **v13;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  if (!*((_BYTE *)off_100977A80 + 328))
    return 111;
  v5 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v6 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "request keys from %{public}s", buf, 0xCu);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v7 = sub_1000E2F9C((unsigned __int8 *)(a2 + 128), a3);
  if ((_DWORD)v7 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D9770();
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v8 = sub_1004A35C0((uint64_t)off_100977A50, v7, 10000);
  sub_100043728(__p);
  return v8;
}

void sub_10029E6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029E6EC(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v9;
  uint8_t buf[4];
  void **v11;

  v3 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    v4 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "send disconnect message to %{public}s", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  LOBYTE(__p[0]) = 0;
  sub_100043758(__p);
  v5 = sub_1000E17E0((unsigned __int8 *)(a2 + 128));
  sub_10004339C(__p);
  if ((_DWORD)v5 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D97D0();
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v6 = sub_1004A35C0((uint64_t)off_100977A50, v5, 10000);
  sub_100043728(__p);
  return v6;
}

void sub_10029E854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10029E870(uint64_t a1, uint64_t a2, int a3, unsigned int a4, const void *a5)
{
  uint64_t v9;
  NSObject *v10;
  void **v11;
  uint64_t v12;
  void **v13;
  void *__p[2];
  char v16;
  char v17;
  uint8_t buf[4];
  void **v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unsigned int v23;
  __int16 v24;
  int v25;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  if (!*((_BYTE *)off_100977A80 + 328))
    return 111;
  v17 = 0;
  sub_100043758(&v17);
  v9 = sub_1000E2E5C((unsigned __int8 *)(a2 + 128), a3, a4, a5);
  sub_10004339C(&v17);
  v10 = qword_1009997D0;
  if ((_DWORD)v9)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    {
      sub_10043E5F8(a2, __p);
      if (v16 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      *(_DWORD *)buf = 136446978;
      v19 = v11;
      v20 = 1024;
      v21 = a3;
      v22 = 1024;
      v23 = a4;
      v24 = 1024;
      v25 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to send device info to %{public}s: type 0x%x, len %u, error %u", buf, 0x1Eu);
      goto LABEL_16;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    if (v16 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    *(_DWORD *)buf = 136446722;
    v19 = v13;
    v20 = 1024;
    v21 = a3;
    v22 = 1024;
    v23 = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Sent device info to %{public}s: type 0x%x, len %u", buf, 0x18u);
LABEL_16:
    if (v16 < 0)
      operator delete(__p[0]);
  }
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v12 = sub_1004A35C0((uint64_t)off_100977A50, v9, 10000);
  sub_100043728(&v17);
  return v12;
}

void sub_10029EAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_100043728(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_10029EAD0(uint64_t a1, uint64_t a2, char a3, char a4, unsigned int a5, const void *a6)
{
  uint64_t v11;
  uint64_t v12;
  char v14;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  if (!*((_BYTE *)off_100977A80 + 328))
    return 111;
  v14 = 0;
  sub_100043758(&v14);
  v11 = sub_1000E2C94((unsigned __int8 *)(a2 + 128), a3, a4, a5, a6);
  sub_10004339C(&v14);
  if ((_DWORD)v11 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D9830();
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100921B78);
  v12 = sub_1004A35C0((uint64_t)off_100977A50, v11, 10000);
  sub_100043728(&v14);
  return v12;
}

void sub_10029EC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10029EC14(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v3;

  v3 = sub_1000E31F8(a2, 1001, (uint64_t)off_100920F78, a3);
  if ((_DWORD)v3 && os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D9890();
  return v3;
}

uint64_t sub_10029EC78(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4)
{
  uint64_t v7;
  uint64_t v8;
  __int16 v10;
  char v11;
  __int16 v12;

  sub_100280470(a1, a2);
  sub_1004806E0(a3, 3);
  sub_1004806E0(a3, 2);
  sub_10048071C(a3, 1);
  sub_1004806E0(a3, 16);
  sub_1004806E0(a3, 2);
  sub_10048071C(a3, 2);
  v12 = 0;
  v11 = 0;
  v10 = 0;
  v7 = sub_1001DCC5C((unsigned __int16)*a4, &v10, &v12, &v11);
  if (!(_DWORD)v7)
  {
    sub_1004806E0(a3, 1);
    sub_1004806E0(a3, 7);
    sub_10048071C(a3, *a4);
    sub_10048071C(a3, v10);
    sub_10048071C(a3, v12);
    sub_1004806E0(a3, v11);
    if (!_os_feature_enabled_impl("BluetoothFeatures", "ConnectionSetup"))
      return v7;
    v8 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 184))(v8))
    {
      sub_1004806E0(a3, 25);
      sub_1004806E0(a3, 0);
    }
LABEL_9:
    sub_1004806E0(a3, 26);
    sub_1004806E0(a3, 8);
    sub_1004807BC(a3, *(_QWORD *)(a1 + 528));
    return v7;
  }
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    sub_1006D98BC();
  if ((_os_feature_enabled_impl("BluetoothFeatures", "ConnectionSetup") & 1) != 0)
    goto LABEL_9;
  return v7;
}

uint64_t sub_10029EE18(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v5;
  unsigned int v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int16 v13;
  __int16 v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  unsigned __int16 v20;
  unsigned __int16 v22;
  uint8_t v23;
  char v24[7];
  int *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  unsigned int v29;
  __int16 v30;
  unsigned int v31;

  v5 = sub_10003F8C4(a2 + 8) - *(_DWORD *)(a2 + 24);
  v25 = 0;
  v6 = v5 << 16;
  if (v5 << 16 >= 1)
  {
    v7 = 0;
    v8 = 0;
    v22 = 0;
    v20 = 4;
    while (1)
    {
      v9 = (char)sub_100480558(a2);
      if (v9 < 0)
      {
        v10 = sub_1004805A4(a2);
        v5 = HIWORD(v6) - 3;
      }
      else
      {
        v10 = sub_100480558(a2);
        LOWORD(v5) = v5 - 2;
      }
      v11 = v9 & 0x7F;
      if (v11 > 0xF)
      {
        if (v11 == 16)
        {
          if (v10 != 2)
            goto LABEL_23;
          v8 = sub_1004805A4(a2);
        }
        else
        {
          if (v11 != 18)
          {
LABEL_21:
            v16 = qword_1009997D0;
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              v27 = v9 & 0x7F;
              _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "parseAACPDescriptor Key not recognized %d", buf, 8u);
            }
LABEL_23:
            v12 = v10;
            v13 = v10;
LABEL_24:
            if (v13)
            {
              v17 = qword_1009997D0;
              if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109632;
                v27 = v11;
                v28 = 1024;
                v29 = v12;
                v30 = 1024;
                v31 = v10;
                _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "parseAACPDescriptor Key:%d Dumped %d of %d bytes ", buf, 0x14u);
              }
              sub_100480664(a2, v13);
            }
            goto LABEL_28;
          }
          if (v10 != 2)
            goto LABEL_23;
          v20 = sub_1004805A4(a2);
        }
      }
      else
      {
        if (v11 == 1)
        {
          v12 = v10;
          v13 = v10;
          if (v10 >= 7)
          {
            v14 = sub_1004805A4(a2);
            sub_1004805A4(a2);
            v7 = sub_1004805A4(a2);
            sub_100480558(a2);
            buf[0] = 0;
            sub_100043758(buf);
            if (sub_1001DB044(a4, (uint64_t *)&v25) || !sub_1001E3CCC(v25))
            {
              v15 = qword_1009997D0;
              if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
                sub_1006D98E8(&v23, v24, v15);
            }
            else
            {
              *(_WORD *)(sub_1001E3CCC(v25) + 8) = v14;
              *(_WORD *)(sub_1001E3CCC(v25) + 32) = v7;
              v7 -= 4;
              sub_1001177C0(v7, v20, a4);
            }
            sub_10004339C(buf);
            sub_100043728(buf);
            v12 = (unsigned __int16)(v10 - 7);
            v13 = v10 - 7;
          }
          goto LABEL_24;
        }
        if (v11 != 3)
          goto LABEL_21;
        if (v10 != 2)
          goto LABEL_23;
        v22 = sub_1004805A4(a2);
      }
LABEL_28:
      v5 = (__int16)v5 - v10;
      v6 = v5 << 16;
      if (v5 << 16 <= 0)
        goto LABEL_34;
    }
  }
  v22 = 0;
  v8 = 0;
  v7 = 0;
LABEL_34:
  buf[0] = 0;
  sub_100043758(buf);
  sub_1000E34E0(v8, v22, v7, (unsigned __int8 *)(a3 + 128));
  sub_10004339C(buf);
  sub_100043728(buf);
  return 0;
}

void sub_10029F19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

const __CFString *sub_10029F1BC(unsigned int a1)
{
  if (a1 > 0xC)
    return CFSTR("UNKNOWN");
  else
    return off_1009222A8[(char)a1];
}

uint64_t sub_10029F1E4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  int v6;
  int v7;
  __int128 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned __int16 v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  size_t v24;
  void *v25;
  NSObject *v26;
  unsigned int v27;
  NSObject *v28;
  NSObject *v29;
  __int16 v30;
  unsigned int v31;
  _BYTE *v32;
  int v33;
  unsigned int v34;
  NSObject *v35;
  _BOOL8 v36;
  const char *v37;
  int v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  int v42;
  NSObject *v43;
  NSObject *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  const __CFString *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  _BYTE *v64;
  void *v65;
  void *v66;
  void *v67;
  NSObject *v68;
  _BYTE *v69;
  NSObject *v70;
  const __CFString *v71;
  void *v72;
  const __CFString *v73;
  void *v74;
  NSObject *v75;
  NSObject *v76;
  unint64_t v77;
  unsigned __int8 *v78;
  int v79;
  void *v80;
  void *v81;
  void *v82;
  NSObject *v83;
  void *v84;
  void *v85;
  NSObject *v86;
  NSObject *v87;
  NSObject *v88;
  _QWORD *v89;
  __int128 v91;
  void *v93;
  _BOOL4 v94;
  int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  _BYTE __p[19];
  char v101;
  _OWORD v102[3];
  _BYTE buf[20];
  _BYTE *v104;
  __int16 v105;
  _BYTE *v106;
  _BYTE v107[22];
  char v108;

  v5 = a4;
  v6 = sub_10003F8C4(a2 + 8);
  v7 = *(_DWORD *)(a2 + 24);
  memset(v102, 0, sizeof(v102));
  if (qword_10097AB58 != -1)
    dispatch_once(&qword_10097AB58, &stru_100921E38);
  v93 = v5;
  if (*(_DWORD *)(sub_100608214((uint64_t)off_10097AB50, a3 + 128) + 32) < 5u)
  {
    v94 = 0;
  }
  else
  {
    if (qword_10097AB58 != -1)
      dispatch_once(&qword_10097AB58, &stru_100921E38);
    v94 = sub_1006083EC((uint64_t)off_10097AB50) > 4;
  }
  LOWORD(v98) = v6 - v7;
  v9 = (v6 - v7) << 16;
  if (v9 >= 1)
  {
    *(_QWORD *)&v8 = 136446466;
    v91 = v8;
    while (2)
    {
      v10 = (char)sub_100480558(a2);
      if (v10 < 0)
      {
        v97 = sub_1004805A4(a2);
        v11 = HIWORD(v9) - 3;
      }
      else
      {
        v97 = sub_100480558(a2);
        LOWORD(v11) = v98 - 2;
      }
      v12 = (__int16)v11;
      v98 = (__int16)v11 - v97;
      if ((__int16)v11 >= (int)v97)
      {
        v13 = v10 & 0x7F;
        v96 = v13;
        switch(v13)
        {
          case 19:
            v14 = _os_feature_enabled_impl("BluetoothFeatures", "ConnectionSetup");
            if (v97 > 3)
              v15 = v14;
            else
              v15 = 0;
            if ((v94 & v15) == 1)
            {
              v16 = v97;
              do
              {
                v17 = sub_1004805A4(a2);
                v18 = a2;
                v19 = sub_1004805A4(a2);
                v20 = v19;
                if (v17 == 9)
                {
                  v27 = (unsigned __int16)v19 / 5u;
                  v28 = qword_1009997D0;
                  if ((unsigned __int16)v19 % 5u)
                  {
                    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 67109120;
                      *(_DWORD *)&buf[4] = v20;
                      _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Invalid control command length: %u", buf, 8u);
                    }
                  }
                  else
                  {
                    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_INFO))
                    {
                      sub_10043E5F8(a3, buf);
                      v32 = buf;
                      if (SBYTE3(v104) < 0)
                        v32 = *(_BYTE **)buf;
                      *(_DWORD *)v107 = 67109378;
                      *(_DWORD *)&v107[4] = v27;
                      *(_WORD *)&v107[8] = 2082;
                      *(_QWORD *)&v107[10] = v32;
                      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "parseAACPSetupComplete rcvd %u control commands from device %{public}s", v107, 0x12u);
                      if (SBYTE3(v104) < 0)
                        operator delete(*(void **)buf);
                    }
                    if (v20)
                    {
                      v33 = sub_100480558(a2);
                      v34 = sub_100480608(a2);
                      v35 = qword_1009997D0;
                      v36 = os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEBUG);
                      if (v36)
                      {
                        v37 = sub_10027B454(v36, v33);
                        sub_10027B480(a1, v33, v34, v107);
                        v38 = v108;
                        v39 = *(_BYTE **)v107;
                        sub_10043E5F8(a3, __p);
                        v40 = v107;
                        if (v38 < 0)
                          v40 = v39;
                        v41 = __p;
                        if (v101 < 0)
                          v41 = *(_BYTE **)__p;
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = v37;
                        *(_WORD *)&buf[12] = 1024;
                        *(_DWORD *)&buf[14] = v33;
                        *(_WORD *)&buf[18] = 2082;
                        v104 = v40;
                        v105 = 2082;
                        v106 = v41;
                        _os_log_debug_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "parseAACPSetupComplete rcvd control command: %{public}s (control cmd 0x%02X) as %{public}s from device %{public}s", buf, 0x26u);
                        if (v101 < 0)
                          operator delete(*(void **)__p);
                        if (v108 < 0)
                          operator delete(*(void **)v107);
                      }
                      operator new();
                    }
                  }
                }
                else
                {
                  if (v17 == 46)
                  {
                    v21 = sub_100480558(a2);
                    v22 = sub_100480558(a2);
                    v23 = sub_100480558(a2);
                    v24 = 8 * v23;
                    v25 = sub_100114588(v24);
                    sub_100480520(v18, v25, v24);
                    v26 = qword_1009997D0;
                    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)buf = 67109888;
                      *(_DWORD *)&buf[4] = v21;
                      *(_WORD *)&buf[8] = 1024;
                      *(_DWORD *)&buf[10] = v22;
                      *(_WORD *)&buf[14] = 1024;
                      *(_DWORD *)&buf[16] = v23;
                      LOWORD(v104) = 1024;
                      *(_DWORD *)((char *)&v104 + 2) = v20;
                      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "parseAACPSetupComplete rcvd tipi table with version %u, audioState %u, sourceCount %u, length %u", buf, 0x1Au);
                    }
                    operator new();
                  }
                  v29 = qword_1009997D0;
                  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 67109376;
                    *(_DWORD *)&buf[4] = v17;
                    *(_WORD *)&buf[8] = 1024;
                    *(_DWORD *)&buf[10] = v20;
                    _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "parseAACPSetupComplete unhandled AACP Opcode %u, opcodeLength %u", buf, 0xEu);
                  }
                  sub_100480664(a2, v20);
                }
                v30 = v16 - v20;
                v16 = v16 - v20 - 4;
                v31 = (unsigned __int16)(v30 - 4);
              }
              while (v31 > 3);
            }
            else
            {
              v31 = v97;
              v16 = v97;
            }
            goto LABEL_103;
          case 20:
            v31 = v97;
            v16 = v97;
            if (v97 != 19)
              goto LABEL_103;
            v44 = qword_1009997D0;
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "parseAACPSetupComplete FC_AACP_AIRPODS_INFO received", buf, 2u);
            }
            memset(__p, 0, sizeof(__p));
            sub_100480520(a2, __p, 0x13uLL);
            v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)__p));
            objc_msgSend(v93, "setObject:forKeyedSubscript:", v45, CFSTR("AirpodsTimeSinceBoot"));

            v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)&__p[2]));
            objc_msgSend(v93, "setObject:forKeyedSubscript:", v46, CFSTR("ConnectionTimeHRB"));

            v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", __p[11]));
            objc_msgSend(v93, "setObject:forKeyedSubscript:", v47, CFSTR("NumberConnections24G"));

            v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", __p[12]));
            objc_msgSend(v93, "setObject:forKeyedSubscript:", v48, CFSTR("NumberConnectionsHRB"));

            v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", __p[13]));
            objc_msgSend(v93, "setObject:forKeyedSubscript:", v49, CFSTR("NumberConnectionsLE"));

            v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", __p[14]));
            objc_msgSend(v93, "setObject:forKeyedSubscript:", v50, CFSTR("NumberConnectionsSCO"));

            v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", __p[15]));
            objc_msgSend(v93, "setObject:forKeyedSubscript:", v51, CFSTR("NumberAOSLinks"));

            v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", __p[16]));
            objc_msgSend(v93, "setObject:forKeyedSubscript:", v52, CFSTR("UtpConnected"));

            v53 = CFSTR("UNKNOWN");
            if ((unint64_t)__p[17] < 5)
              v53 = off_100922310[__p[17]];
            objc_msgSend(v93, "setObject:forKeyedSubscript:", v53, CFSTR("AudioState"), v91);
            v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", __p[18]));
            objc_msgSend(v93, "setObject:forKeyedSubscript:", v54, CFSTR("PendingCrashReport"));

            if (!__p[10])
              goto LABEL_107;
            objc_msgSend(v93, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("BBFCStatusSink"));
            v62 = sub_10025304C((uint64_t)&__p[4], v55, v56, v57, v58, v59, v60, v61);
            v63 = qword_1009997D0;
            if (!os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
              goto LABEL_107;
            sub_10043E5F8(a3, buf);
            v64 = buf;
            if (SBYTE3(v104) < 0)
              v64 = *(_BYTE **)buf;
            *(_DWORD *)v107 = v91;
            *(_QWORD *)&v107[4] = v64;
            *(_WORD *)&v107[12] = 2082;
            *(_QWORD *)&v107[14] = v62;
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "BB FastConnect seen by %{public}s BT Addr: %{public}s", v107, 0x16u);
            if ((SBYTE3(v104) & 0x80000000) == 0)
              goto LABEL_107;
            v65 = *(void **)buf;
            goto LABEL_72;
          case 21:
            v31 = v97;
            v16 = v97;
            if (v97 != 4)
              goto LABEL_103;
            *(_DWORD *)__p = 0;
            sub_100480520(a2, __p, 4uLL);
            v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)__p));
            objc_msgSend(v93, "setObject:forKeyedSubscript:", v66, CFSTR("BasebandDuration"));

            v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", *(unsigned __int16 *)&__p[2]));
            objc_msgSend(v93, "setObject:forKeyedSubscript:", v67, CFSTR("BasebandDurationTotal"));

            v68 = qword_1009997D0;
            if (!os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
              goto LABEL_107;
            sub_10043E5F8(a3, v107);
            v69 = v107;
            if (v108 < 0)
              v69 = *(_BYTE **)v107;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = v69;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = *(unsigned __int16 *)__p;
            *(_WORD *)&buf[18] = 1024;
            LODWORD(v104) = *(unsigned __int16 *)&__p[2];
            _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "FastConnect Incoming Baseband time for %{public}s took %u ms Total Baseband %u ms", buf, 0x18u);
            if ((v108 & 0x80000000) == 0)
              goto LABEL_107;
            v65 = *(void **)v107;
LABEL_72:
            operator delete(v65);
            goto LABEL_107;
          case 22:
            v31 = v97;
            v16 = v97;
            if (v97 != 2)
              goto LABEL_103;
            v70 = qword_1009997D0;
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_INFO, "parseAACPSetupComplete FC_AACP_BUD_INEAR_STATE received", buf, 2u);
            }
            *(_WORD *)v107 = 0;
            sub_100480520(a2, v107, 2uLL);
            v71 = sub_10029F1BC(v107[0]);
            v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
            objc_msgSend(v93, "setObject:forKeyedSubscript:", v72, CFSTR("InEarStatusPrimary"));

            v73 = sub_10029F1BC(v107[1]);
            v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
            objc_msgSend(v93, "setObject:forKeyedSubscript:", v74, CFSTR("InEarStatusSecondary"));

            if ((v94 & _os_feature_enabled_impl("BluetoothFeatures", "ConnectionSetup")) == 1)
              operator new();
            goto LABEL_107;
          case 23:
            v31 = v97;
            v16 = v97;
            if (v97 != 4)
              goto LABEL_103;
            v75 = qword_1009997D0;
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_INFO, "parseAACPSetupComplete FC_AACP_ROLE_STATE received", buf, 2u);
            }
            *(_DWORD *)v107 = 0;
            sub_100480520(a2, v107, 4uLL);
            if ((v94 & _os_feature_enabled_impl("BluetoothFeatures", "ConnectionSetup")) == 1)
              operator new();
            goto LABEL_107;
          case 24:
            if (v97 - 6 > 0xA)
              goto LABEL_101;
            v76 = qword_1009997D0;
            if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_INFO, "parseAACPSetupComplete FC_AACP_BATTERY_STATE received", buf, 2u);
            }
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = 0;
            sub_100480520(a2, buf, v97);
            if (buf[0])
            {
              v77 = 0;
              v78 = &buf[3];
              do
              {
                v79 = *(v78 - 2);
                switch(*(v78 - 2))
                {
                  case 1u:
                  case 4u:
                    v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *v78));
                    objc_msgSend(v93, "setObject:forKeyedSubscript:", v80, CFSTR("BatteryLevelPrimary"));

                    break;
                  case 2u:
                    v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *v78));
                    objc_msgSend(v93, "setObject:forKeyedSubscript:", v84, CFSTR("BatteryLevelSecondary"));

                    break;
                  case 3u:
                  case 5u:
                  case 6u:
                  case 7u:
                    goto LABEL_92;
                  case 8u:
                    v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *v78));
                    objc_msgSend(v93, "setObject:forKeyedSubscript:", v85, CFSTR("BatteryLevelCase"));

                    break;
                  default:
                    if (v79 == 16)
                    {
                      v81 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *v78));
                      objc_msgSend(v93, "setObject:forKeyedSubscript:", v81, CFSTR("BatteryLevelPrimary"));

                      v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *v78));
                      objc_msgSend(v93, "setObject:forKeyedSubscript:", v82, CFSTR("BatteryLevelSecondary"));

                    }
                    else
                    {
LABEL_92:
                      v83 = qword_1009997D0;
                      if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)v107 = 67109120;
                        *(_DWORD *)&v107[4] = v79;
                        _os_log_error_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "parseAACPDescriptor unknown battery id %d", v107, 8u);
                      }
                    }
                    break;
                }
                v78 += 5;
                ++v77;
              }
              while (v77 < buf[0]);
            }
            if ((v94 & _os_feature_enabled_impl("BluetoothFeatures", "ConnectionSetup")) == 1)
              operator new();
            goto LABEL_107;
          default:
            if (v13 != 4)
            {
              v86 = qword_1009997D0;
              if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = v13;
                _os_log_error_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_ERROR, "parseAACPSetupComplete Key not recognized %d", buf, 8u);
              }
LABEL_101:
              v31 = v97;
              v16 = v97;
LABEL_103:
              if (v16)
              {
                v87 = qword_1009997D0;
                if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 67109632;
                  *(_DWORD *)&buf[4] = v96;
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v31;
                  *(_WORD *)&buf[14] = 1024;
                  *(_DWORD *)&buf[16] = v97;
                  _os_log_error_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_ERROR, "parseAACPSetupComplete Key:%d Dumped %d of %d bytes ", buf, 0x14u);
                }
                sub_100480664(a2, v16);
              }
              goto LABEL_107;
            }
            v31 = v97;
            v16 = v97;
            if (v97 != 2)
              goto LABEL_103;
            v42 = sub_1004805A4(a2);
            if (v42)
            {
              v43 = qword_1009997D0;
              if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = v42;
                _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "parseAACPSetupComplete AACP status %d", buf, 8u);
              }
            }
LABEL_107:
            v9 = v98 << 16;
            if ((int)(v98 << 16) <= 0)
              goto LABEL_111;
            continue;
        }
      }
      break;
    }
    v88 = qword_1009997D0;
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v97;
      _os_log_error_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, "parseAACPSetupComplete not enough data remaining %d for %d", buf, 0xEu);
    }
  }
LABEL_111:
  if ((v94 & _os_feature_enabled_impl("BluetoothFeatures", "ConnectionSetup")) == 1)
  {
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEBUG))
    {
      sub_10043E5F8(a3, buf);
      sub_1006D991C();
    }
    v99 = a3 + 128;
    *(_QWORD *)__p = &v99;
    v89 = sub_1002A572C(a1 + 448, &v99, (uint64_t)&unk_100740F58, (_QWORD **)__p);
    sub_1002A071C(v89 + 3, v102);
  }
  sub_1002A6638(v102);

  return 0;
}

void sub_1002A0410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  void *v39;

  sub_1002A6638(&a39);

  _Unwind_Resume(a1);
}

void sub_1002A061C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1002A7718(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1002A06A0(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_1002A7A2C((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 9));
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  else
    v7 = *v6 + 8 * (v4 & 0x1FF);
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4096;
  *(_QWORD *)(v7 - 8) = *a2;
  v8 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v4 - 1;
  *(_QWORD *)(a1 + 40) = v8;
}

_QWORD *sub_1002A071C(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;

  if (a1 != a2)
  {
    v4 = a2[4];
    v5 = a2[1];
    v6 = a2[2];
    v7 = (char **)(v5 + 8 * (v4 >> 9));
    if (v6 == v5)
    {
      v8 = 0;
      v11 = 0;
      v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
    }
    else
    {
      v8 = &(*v7)[8 * (v4 & 0x1FF)];
      v9 = a2[5] + v4;
      v10 = (char *)(v5 + 8 * (v9 >> 9));
      v11 = (char *)(*(_QWORD *)v10 + 8 * (v9 & 0x1FF));
    }
    sub_1002A7D3C(a1, v7, v8, v10, v11);
  }
  return a1;
}

uint64_t sub_1002A07AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _BOOL8 v23;
  _BOOL4 v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  NSObject *v34;
  void *p_p;
  int v36;
  int v37;
  const char *v38;
  __int16 v39;
  char *v40;
  int64_t v41;
  _QWORD *v42;
  char v43;
  _QWORD *v44;
  char *v45;
  int64_t v46;
  void *__p;
  unsigned int *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  void *v54[2];
  __int128 v55;
  _BYTE v56[22];
  __int16 v57;
  int v58;
  uint8_t buf[16];
  __int128 v60;

  sub_100280470(a1, a2);
  sub_1004806E0(a3, 19);
  *(_OWORD *)v54 = 0u;
  v55 = 0u;
  sub_1004806B4((uint64_t)v54, 0);
  sub_10048071C((uint64_t)v54, 15);
  sub_10048071C((uint64_t)v54, 4);
  if (a2)
  {
    if (sub_10044F614(a2))
      v6 = -1;
    else
      v6 = -3;
  }
  else
  {
    v6 = 122;
  }
  sub_10048071C((uint64_t)v54, 0xFFFF);
  sub_10048071C((uint64_t)v54, v6 & 0xFFFE);
  v53[0] = 0;
  v53[1] = 0;
  sub_10003415C((uint64_t)v53, a1 + 360);
  if (qword_10097AB58 != -1)
    dispatch_once(&qword_10097AB58, &stru_100921E38);
  v7 = sub_100608214((uint64_t)off_10097AB50, a2 + 128);
  v8 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_DWORD *)(v7 + 32);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "composeAACPConfigure: remote fcVersion %u", buf, 8u);
  }
  if (*(_DWORD *)(v7 + 32) >= 5u && _os_feature_enabled_impl("BluetoothFeatures", "ConnectionSetup"))
  {
    sub_10048071C((uint64_t)v54, 9);
    *(_OWORD *)buf = 0u;
    v60 = 0u;
    sub_1004806B4((uint64_t)buf, 0);
    v10 = sub_10003BE44();
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 344))(v10);
    if ((_DWORD)v11 && sub_100281980(v11, a2))
    {
      sub_1004806E0((uint64_t)buf, 11);
      v12 = 500;
    }
    else
    {
      v13 = sub_10003BE44();
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 328))(v13) & 1) == 0
        && (v14 = sub_10003BE44(), !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 336))(v14))
        || !sub_100442118(a2, 13)
        || (v15 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 720))(v15) & 1) != 0))
      {
LABEL_21:
        v16 = sub_10003BE44();
        v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 720))(v16);
        if ((_DWORD)v17 && sub_100281980(v17, a2))
        {
          sub_1004806E0((uint64_t)buf, 11);
          sub_10048076C((uint64_t)buf, 0x1F4u);
        }
        v18 = *(unsigned __int8 *)(a2 + 952);
        v19 = *(unsigned __int8 *)(a2 + 968);
        sub_1004806E0((uint64_t)buf, 19);
        if (v19)
          v20 = 2;
        else
          v20 = 1;
        sub_10048076C((uint64_t)buf, v20);
        if (sub_100442118(a2, 22))
        {
          sub_1004806E0((uint64_t)buf, 18);
          if (qword_10097AB18 != -1)
            dispatch_once(&qword_10097AB18, &stru_100921BF8);
          if (((v19 == 0) & sub_1002CC08C(qword_10097AB10)) != 0)
            v21 = 1;
          else
            v21 = 2;
          sub_10048076C((uint64_t)buf, v21);
        }
        if (v18)
          goto LABEL_72;
        sub_1004806E0((uint64_t)buf, 1);
        v22 = sub_10044F5D0(a2);
        sub_10048076C((uint64_t)buf, v22);
        v51 = 0;
        v52 = 0;
        v23 = sub_100444BF0(a2, (_DWORD *)&v52 + 1, &v52, (_DWORD *)&v51 + 1, &v51);
        v24 = v23;
        if (sub_1002806C8(v23, a2) && HIDWORD(v51) != 8208 && v24)
        {
          sub_1004806E0((uint64_t)buf, 10);
          if (sub_10044F614(a2))
            v25 = 2;
          else
            v25 = 1;
          sub_10048076C((uint64_t)buf, v25);
        }
        sub_1004806E0((uint64_t)buf, 6);
        v26 = sub_10044FD68(a2);
        sub_10048076C((uint64_t)buf, v26);
        if (sub_100442118(a2, 29) && (sub_100442118(a2, 43) & 1) == 0)
        {
          sub_1004806E0((uint64_t)buf, 23);
          v27 = sub_10044F8E4(a2);
          sub_10048076C((uint64_t)buf, v27);
        }
        if (sub_100442118(a2, 30))
        {
          if ((sub_100442118(a2, 38) & 1) == 0)
          {
            sub_1004806E0((uint64_t)buf, 22);
            v28 = sub_10044F8A0(a2);
            sub_10048076C((uint64_t)buf, v28);
            if ((sub_100442118(a2, 43) & 1) == 0)
            {
              sub_1004806E0((uint64_t)buf, 24);
              v29 = sub_10044F928(a2);
              sub_10048076C((uint64_t)buf, v29);
            }
          }
        }
        if (sub_100442118(a2, 28))
        {
          sub_1004806E0((uint64_t)buf, 26);
          v30 = sub_10044F74C(a2);
          sub_10048076C((uint64_t)buf, v30);
        }
        if (sub_100442118(a2, 16)
          && sub_100442118(a2, 1)
          && (sub_100442118(a2, 43) & 1) == 0)
        {
          sub_1004806E0((uint64_t)buf, 27);
          v31 = sub_10044F96C(a2);
          sub_10048076C((uint64_t)buf, v31);
        }
        if (sub_10044FF54(a2, 0x15u) == 1 && sub_10044FD24(a2))
        {
          sub_1004806E0((uint64_t)buf, 50);
          v32 = sub_10044FD24(a2);
          sub_10048076C((uint64_t)buf, v32);
        }
        if (!sub_100442118(a2, 32))
          goto LABEL_72;
        v33 = sub_10044F658(a2);
        if (v33)
        {
          sub_1004806E0((uint64_t)buf, 32);
        }
        else
        {
          v34 = qword_1009997D0;
          if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
          {
            sub_10043E5F8(a2, &__p);
            if (v50 >= 0)
              p_p = &__p;
            else
              p_p = __p;
            v36 = sub_100442118(a2, 32);
            v37 = sub_10044F658(a2);
            v38 = "No";
            *(_DWORD *)v56 = 136446722;
            *(_QWORD *)&v56[4] = p_p;
            if (v36)
              v38 = "Yes";
            *(_WORD *)&v56[12] = 2080;
            *(_QWORD *)&v56[14] = v38;
            v57 = 1024;
            v58 = v37;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%{public}s Initialize setSmartRouteMode via connection Tipi Support = %s current SR Mode =%d", v56, 0x1Cu);
            if (v50 < 0)
              operator delete(__p);
          }
          if (!sub_10044D524(a2, 1))
            goto LABEL_72;
          sub_1004806E0((uint64_t)buf, 32);
          v33 = 1;
        }
        sub_10048076C((uint64_t)buf, v33);
LABEL_72:
        sub_10003994C(v56, *(const void **)&buf[8], v60 - *(_QWORD *)&buf[8]);
        v39 = sub_10003F8C4((uint64_t)v56);
        sub_10048071C((uint64_t)v54, v39);
        *(_QWORD *)v56 = &off_100918258;
        if (*(_QWORD *)&v56[8])
          sub_100056AAC(*(unsigned int **)&v56[8]);
        sub_10003994C(v56, *(const void **)&buf[8], v60 - *(_QWORD *)&buf[8]);
        v40 = (char *)sub_10003EB18((uint64_t)v56);
        sub_10003994C(&__p, *(const void **)&buf[8], v60 - *(_QWORD *)&buf[8]);
        v41 = sub_10003F8C4((uint64_t)&__p);
        sub_1004806C4((uint64_t)v54, v40, v41);
        __p = &off_100918258;
        if (v49)
          sub_100056AAC(v49);
        *(_QWORD *)v56 = &off_100918258;
        if (*(_QWORD *)&v56[8])
          sub_100056AAC(*(unsigned int **)&v56[8]);
        if (*(_QWORD *)&buf[8])
        {
          *(_QWORD *)&v60 = *(_QWORD *)&buf[8];
          operator delete(*(void **)&buf[8]);
        }
        goto LABEL_80;
      }
      sub_1004806E0((uint64_t)buf, 11);
      v12 = 150;
    }
    sub_10048076C((uint64_t)buf, v12);
    goto LABEL_21;
  }
LABEL_80:
  sub_100034264((uint64_t)v53);
  v42 = sub_10003994C(buf, v54[1], v55 - (unint64_t)v54[1]);
  v43 = sub_10003F8C4((uint64_t)v42);
  sub_1004806E0(a3, v43);
  *(_QWORD *)buf = &off_100918258;
  if (*(_QWORD *)&buf[8])
    sub_100056AAC(*(unsigned int **)&buf[8]);
  v44 = sub_10003994C(buf, v54[1], v55 - (unint64_t)v54[1]);
  v45 = (char *)sub_10003EB18((uint64_t)v44);
  sub_10003994C(v56, v54[1], v55 - (unint64_t)v54[1]);
  v46 = sub_10003F8C4((uint64_t)v56);
  sub_1004806C4(a3, v45, v46);
  *(_QWORD *)v56 = &off_100918258;
  if (*(_QWORD *)&v56[8])
    sub_100056AAC(*(unsigned int **)&v56[8]);
  *(_QWORD *)buf = &off_100918258;
  if (*(_QWORD *)&buf[8])
    sub_100056AAC(*(unsigned int **)&buf[8]);
  sub_100034234((uint64_t)v53);
  if (v54[1])
  {
    *(void **)&v55 = v54[1];
    operator delete(v54[1]);
  }
  return 0;
}

void sub_1002A0F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  void *v27;

  v27 = *(void **)(v25 - 88);
  if (v27)
  {
    *(_QWORD *)(v25 - 80) = v27;
    operator delete(v27);
  }
  sub_100034234((uint64_t)&a18);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002A109C(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;

  v4 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(a2, __p);
    if (v7 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fast Connect AACP Report Connection attempt for %{public}s", buf, 0xCu);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  sub_1004816DC(a1, a2);
}

void sub_1002A1194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  uint8_t buf[8];
  uint64_t v9;

  v6 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Fast Connect AACP Setup Complete result %d", buf, 8u);
  }
  *(_QWORD *)buf = 0;
  v9 = 0;
  sub_10003415C((uint64_t)buf, a1 + 360);
  if (qword_10097AB58 != -1)
    dispatch_once(&qword_10097AB58, &stru_100921E38);
  sub_100608214((uint64_t)off_10097AB50, a2 + 128);
  sub_100034264((uint64_t)buf);
  if ((_DWORD)a3)
  {
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100921B78);
    v7 = sub_1004A35C0((uint64_t)off_100977A50, a3, 20000);
    sub_10048183C(a1, a2, v7);
  }
  sub_10048183C(a1, a2, 0);
}

void sub_1002A13D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A13F8(_QWORD *a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t **i;
  uint64_t *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  _QWORD *v19[3];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _QWORD v23[2];
  _QWORD v24[3];

  v23[0] = 0;
  v23[1] = 0;
  sub_10003415C((uint64_t)v23, (uint64_t)(a1 + 45));
  if (a2)
  {
    for (i = (uint64_t **)a1[42]; i != (uint64_t **)a1[43]; ++i)
    {
      v9 = *i;
      if (**i == a2)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9[96] + 176))(v9[96]) == 1)
          sub_100287BAC(a1, v9);
        break;
      }
    }
  }
  v10 = _os_feature_enabled_impl("BluetoothFeatures", "ConnectionSetup") ^ 1;
  if (!a4)
    LOBYTE(v10) = 1;
  if ((v10 & 1) == 0)
  {
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    v11 = a1 + 56;
    v24[0] = a2 + 128;
    v19[0] = v24;
    v12 = sub_1002A572C((uint64_t)v11, v24, (uint64_t)&unk_100740F58, v19);
    sub_1002A5A18((uint64_t)&v20, v12 + 3);
    if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEBUG))
    {
      sub_10043E5F8(a2, v19);
      sub_1006D9960();
    }
    if ((_QWORD)v21 != *((_QWORD *)&v20 + 1))
    {
      v13 = (_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * ((unint64_t)v22 >> 9));
      v14 = (_QWORD *)(*v13 + 8 * (v22 & 0x1FF));
      v15 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + (((*((_QWORD *)&v22 + 1) + (_QWORD)v22) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*((_QWORD *)&v22 + 1) + v22) & 0x1FF);
      while (v14 != (_QWORD *)v15)
      {
        if (*v14)
          (*(void (**)(_QWORD))(*(_QWORD *)*v14 + 8))(*v14);
        if ((_QWORD *)((char *)++v14 - *v13) == (_QWORD *)4096)
        {
          v16 = (_QWORD *)v13[1];
          ++v13;
          v14 = v16;
        }
      }
    }
    v18 = a2 + 128;
    sub_1002A66CC(v11, &v18);
    sub_1002A6638(&v20);
  }
  LOBYTE(v20) = 0;
  sub_100043758(&v20);
  sub_1000E34AC((unsigned __int8 *)(a2 + 128), a3);
  sub_100043728(&v20);
  return sub_100034234((uint64_t)v23);
}

void sub_1002A1628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_1002A6638((uint64_t *)va);
  sub_100034234((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1002A1670(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  int v5;
  const char *v6;

  v4 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 136315138;
    v6 = sub_10059E6B4(a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Playback state is now %s", (uint8_t *)&v5, 0xCu);
  }
  *(_DWORD *)(a1 + 496) = a2;
}

uint64_t sub_1002A1728(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v6;
  int v7;
  void **v8;
  void **v9;
  void **v10;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  void **v23;

  v18 = *a3;
  v19 = *((_WORD *)a3 + 2);
  v16 = *(_DWORD *)(a2 + 128);
  v17 = *(_WORD *)(a2 + 132);
  v6 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    sub_10046E9BC((unsigned __int8 *)&v18, v14);
    v7 = v15;
    v8 = (void **)v14[0];
    sub_10046E9BC((unsigned __int8 *)&v16, __p);
    v9 = v14;
    if (v7 < 0)
      v9 = v8;
    if (v13 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    v21 = v9;
    v22 = 2080;
    v23 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "passLinkKeyRequest sending store linkkey request to accessory  \"%s\" and phone  \"%s\"", buf, 0x16u);
    if (v13 < 0)
      operator delete(__p[0]);
    if (v15 < 0)
      operator delete(v14[0]);
  }
  (*(void (**)(uint64_t, int *, int *, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, &v16, &v18, a4, 16);
  return 0;
}

void sub_1002A188C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A18B0(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD **i;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12[16];
  _QWORD v13[5];
  char v14;
  _QWORD v15[5];
  char v16;
  _QWORD v17[2];

  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD ***)(a1 + 336); i != *(_QWORD ***)(a1 + 344); ++i)
    {
      if (**i == a2)
      {
        v10 = sub_100475960();
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        v15[2] = sub_1002A19FC;
        v15[3] = &unk_100918888;
        v15[4] = a2;
        v16 = a3;
        sub_100041A34(v10, v15);
        v11 = sub_1004759E0();
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472;
        v13[2] = sub_1002A1A50;
        v13[3] = &unk_100918888;
        v13[4] = a2;
        v14 = a3;
        sub_100041A34(v11, v13);
        v8 = 0;
        goto LABEL_9;
      }
    }
  }
  v7 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "setAllowsAutoRoute unable to find AACP connection", v12, 2u);
  }
  v8 = 312;
LABEL_9:
  sub_100034234((uint64_t)v17);
  return v8;
}

void sub_1002A19E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100034234(v1 - 64);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A19FC(uint64_t a1)
{
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100921D98);
  return sub_1004E507C((uint64_t)off_10097AA38, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1002A1A50(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100921C18);
  return sub_1003E6200((_QWORD *)qword_100977DF8, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1002A1AA4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD **i;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12[16];
  _QWORD v13[5];
  char v14;
  _QWORD v15[5];
  char v16;
  _QWORD v17[2];

  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 360);
  if (a2)
  {
    for (i = *(_QWORD ***)(a1 + 336); i != *(_QWORD ***)(a1 + 344); ++i)
    {
      if (**i == a2)
      {
        v10 = sub_100475960();
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472;
        v15[2] = sub_1002A1BF0;
        v15[3] = &unk_100918888;
        v15[4] = a2;
        v16 = a3;
        sub_100041A34(v10, v15);
        v11 = sub_1004759E0();
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472;
        v13[2] = sub_1002A1C44;
        v13[3] = &unk_100918888;
        v13[4] = a2;
        v14 = a3;
        sub_100041A34(v11, v13);
        v8 = 0;
        goto LABEL_9;
      }
    }
  }
  v7 = qword_1009997D0;
  if (os_log_type_enabled((os_log_t)qword_1009997D0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "setAudioRouteHidden unable to find AACP connection", v12, 2u);
  }
  v8 = 312;
LABEL_9:
  sub_100034234((uint64_t)v17);
  return v8;
}

void sub_1002A1BDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100034234(v1 - 64);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A1BF0(uint64_t a1)
{
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100921D98);
  return sub_1004E51C4((uint64_t)off_10097AA38, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1002A1C44(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100921C18);
  return sub_1003E6364((_QWORD *)qword_100977DF8, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1002A1C98(uint64_t a1)
{
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100921D98);
  return sub_1004E530C((uint64_t)off_10097AA38, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1002A1CEC(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100921C18);
  return sub_1003E64C8((_QWORD *)qword_100977DF8, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1002A1D40(uint64_t a1)
{
  if (qword_10097AA40 != -1)
    dispatch_once(&qword_10097AA40, &stru_100921D98);
  return sub_1004E536C((uint64_t)off_10097AA38, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_1002A1D94(uint64_t a1)
{
  if (qword_100977E00 != -1)
    dispatch_once(&qword_100977E00, &stru_100921C18);
  return sub_1003E654C((_QWORD *)qword_100977DF8, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_1002A1DEC()
{
  operator delete();
}

uint64_t sub_1002A1E00()
{
  return 1;
}

void sub_1002A1E0C(uint64_t a1)
{
  sub_1002A4454(a1);
  operator delete();
}

uint64_t sub_1002A1E30()
{
  return 3;
}

uint64_t sub_1002A1E38()
{
  return 1;
}

uint64_t sub_1002A1E40()
{
  return 0;
}

uint64_t sub_1002A1E48()
{
  return 0;
}

uint64_t sub_1002A1E78(unint64_t *a1)
{
  uint64_t result;

  result = sub_10029C73C((uint64_t)a1, a1[2]);
  if ((_DWORD)result)
    return (*(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40))(a1, a1[2], a1[3], a1[4]);
  return result;
}

uint64_t sub_1002A1EC0()
{
  return 1;
}

uint64_t sub_1002A1EC8()
{
  return 1;
}

uint64_t sub_1002A1ED0()
{
  return 0;
}

_QWORD *sub_1002A1ED8(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_1000160D0(a1 + 3);
  return a1;
}

void sub_1002A1F08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002A1F24(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_1002A1FAC(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1002A1FAC(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1002A21B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A21E8(uint64_t a1)
{
  uint64_t i;
  const void *v3;
  const void *v4;

  for (i = 0; i != 88; i += 8)
  {
    v3 = *(const void **)(a1 + i);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + i) = 0;
    }
  }
  v4 = *(const void **)(a1 + 88);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 88) = 0;
  }
  return a1;
}

void sub_1002A223C()
{
  operator delete();
}

void sub_1002A2250(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  sub_1002874E8(off_100977A80, a1 + 10);
}

void sub_1002A22A4()
{
  operator delete();
}

void sub_1002A22B8(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  sub_100287664((uint64_t)off_100977A80, a1 + 10, *(unsigned __int16 *)(a1 + 16), *(unsigned int *)(a1 + 20));
}

void sub_1002A2314()
{
  operator delete();
}

void sub_1002A2328(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  sub_1002878E0(off_100977A80, (unsigned __int8 *)(a1 + 10), *(_DWORD *)(a1 + 16));
}

uint64_t sub_1002A237C(uint64_t a1, int *a2, unsigned __int16 *a3, unsigned int a4, int a5)
{
  int v5;
  int v7;
  uint64_t v8;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_100921450;
  v5 = *a2;
  *(_WORD *)(a1 + 14) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 10) = v5;
  *(_DWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 24) = 0;
  if (!a3)
    goto LABEL_12;
  if (a4 != 1)
  {
    if (a4)
    {
      v7 = *a3;
      *(_WORD *)(a1 + 16) = v7;
      if (v7 == 30)
      {
        if (a4 >= 4)
        {
          v8 = a3[1];
LABEL_10:
          *(_QWORD *)(a1 + 24) = v8;
          return a1;
        }
LABEL_9:
        v8 = 0;
        goto LABEL_10;
      }
      return a1;
    }
LABEL_12:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/aacp/AACPClient.mm");
  }
  if (*(_WORD *)(a1 + 16) == 30)
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/aacp/AACPClient.mm", 7421, "BT::AACPSendEvent::AACPSendEvent(OI_BD_ADDR *, uint8_t *, uint16_t, OI_STATUS)");
    goto LABEL_9;
  }
  return a1;
}

void sub_1002A2454()
{
  operator delete();
}

uint64_t sub_1002A2468(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_100287EB4((uint64_t)off_100977A80, a1 + 10, *(unsigned __int16 *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

_QWORD *sub_1002A24C0(_QWORD *result)
{
  *result = off_100921488;
  if (result[3])
    operator delete[]();
  return result;
}

void sub_1002A2508(_QWORD *a1)
{
  *a1 = off_100921488;
  if (a1[3])
    operator delete[]();
  operator delete();
}

uint64_t sub_1002A2560(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_1002883C0((uint64_t)off_100977A80, a1 + 10, *(_BYTE *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

_QWORD *sub_1002A25B8(_QWORD *result)
{
  *result = off_1009214C0;
  if (result[3])
    operator delete[]();
  return result;
}

void sub_1002A2600(_QWORD *a1)
{
  *a1 = off_1009214C0;
  if (a1[3])
    operator delete[]();
  operator delete();
}

void sub_1002A2658(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  sub_10028A1D8((uint64_t)off_100977A80, a1 + 10, *(unsigned __int8 *)(a1 + 16), *(char **)(a1 + 24));
}

void sub_1002A26B4()
{
  operator delete();
}

void sub_1002A26C8(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  sub_10028AE94((uint64_t)off_100977A80, a1 + 10, (unsigned __int8 *)(a1 + 16));
}

void sub_1002A2720()
{
  operator delete();
}

void sub_1002A2734(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  sub_10028B214((uint64_t)off_100977A80, a1 + 10, (unsigned __int8 *)(a1 + 16));
}

void sub_1002A278C()
{
  operator delete();
}

uint64_t sub_1002A27A0(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_10028BA28((uint64_t)off_100977A80, a1 + 10, a1 + 16, *(unsigned __int8 *)(a1 + 22));
}

void sub_1002A27FC()
{
  operator delete();
}

uint64_t sub_1002A2810(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_10028C35C((uint64_t)off_100977A80, a1 + 10, a1 + 16, *(unsigned __int8 *)(a1 + 22));
}

void sub_1002A286C()
{
  operator delete();
}

void sub_1002A2880()
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
}

void sub_1002A28A8(uint64_t a1, int *a2, char a3, uint64_t a4, char a5)
{
  int v5;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_100921610;
  v5 = *a2;
  *(_WORD *)(a1 + 14) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 10) = v5;
  *(_BYTE *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 32) = a5;
  operator new[]();
}

void sub_1002A2990(uint64_t a1)
{
  sub_1002A2A10(a1);
  operator delete();
}

uint64_t sub_1002A29B4(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_10028C604((uint64_t)off_100977A80, a1 + 10, *(unsigned __int8 *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_1002A2A10(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;

  *(_QWORD *)result = off_100921610;
  if (*(_BYTE *)(result + 16))
  {
    v1 = 0;
    v2 = 8;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(result + 24) + v2))
        operator delete[]();
      ++v1;
      v2 += 16;
    }
    while (v1 < *(unsigned __int8 *)(result + 16));
  }
  if (*(_QWORD *)(result + 24))
    operator delete[]();
  return result;
}

void sub_1002A2AA8()
{
  operator delete();
}

uint64_t sub_1002A2ABC(unsigned __int16 *a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_10028D50C((uint64_t)off_100977A80, (uint64_t)(a1 + 5), a1[8], a1[9], a1[10]);
}

_QWORD *sub_1002A2B18(_QWORD *result)
{
  *result = off_100921680;
  if (result[3])
    operator delete[]();
  return result;
}

void sub_1002A2B60(_QWORD *a1)
{
  *a1 = off_100921680;
  if (a1[3])
    operator delete[]();
  operator delete();
}

uint64_t sub_1002A2BB8(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_10028D914((uint64_t)off_100977A80, a1 + 10, *(_DWORD *)(a1 + 20), *(unsigned __int16 *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

void sub_1002A2C18()
{
  operator delete();
}

void sub_1002A2C2C(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  sub_10028EAA8(a1, a1 + 10, *(_DWORD *)(a1 + 16));
}

void sub_1002A2C7C()
{
  operator delete();
}

void sub_1002A2C90(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  sub_10028EBE0((uint64_t)off_100977A80, a1 + 10, *(unsigned __int8 *)(a1 + 16), *(_DWORD *)(a1 + 20));
}

_QWORD *sub_1002A2CE8(_QWORD *result)
{
  *result = off_100921728;
  if (result[3])
    operator delete[]();
  return result;
}

void sub_1002A2D30(_QWORD *a1)
{
  *a1 = off_100921728;
  if (a1[3])
    operator delete[]();
  operator delete();
}

uint64_t sub_1002A2D88(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_10028F7D8((uint64_t)off_100977A80, a1 + 10, *(unsigned __int8 *)(a1 + 16), *(unsigned __int16 *)(a1 + 18), *(unsigned __int8 **)(a1 + 24));
}

_QWORD *sub_1002A2DE4(_QWORD *result)
{
  *result = off_100921760;
  if (result[3])
    operator delete[]();
  return result;
}

void sub_1002A2E2C(_QWORD *a1)
{
  *a1 = off_100921760;
  if (a1[3])
    operator delete[]();
  operator delete();
}

void sub_1002A2E84(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  sub_1002911A8((uint64_t)off_100977A80, (int *)(a1 + 10), *(unsigned __int8 *)(a1 + 16), *(unsigned __int16 *)(a1 + 18), *(const UInt8 **)(a1 + 24));
}

_QWORD *sub_1002A2EE0(_QWORD *result)
{
  *result = off_100921798;
  if (result[3])
    operator delete[]();
  return result;
}

void sub_1002A2F28(_QWORD *a1)
{
  *a1 = off_100921798;
  if (a1[3])
    operator delete[]();
  operator delete();
}

void sub_1002A2F80(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  sub_100291348((uint64_t)off_100977A80, a1 + 10, *(unsigned __int16 *)(a1 + 16), *(const UInt8 **)(a1 + 24));
}

_QWORD *sub_1002A2FD8(_QWORD *result)
{
  *result = off_1009217D0;
  if (result[3])
    operator delete[]();
  return result;
}

void sub_1002A3020(_QWORD *a1)
{
  *a1 = off_1009217D0;
  if (a1[3])
    operator delete[]();
  operator delete();
}

void sub_1002A3078(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  sub_100291570(a1, a1 + 10, *(unsigned __int8 *)(a1 + 16), *(unsigned __int8 *)(a1 + 17), *(unsigned __int16 *)(a1 + 18), *(unsigned __int16 **)(a1 + 24));
}

uint64_t sub_1002A30D0(uint64_t a1, int *a2, __int128 *a3)
{
  int v4;
  __int128 v5;
  const char *v6;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_100921808;
  v4 = *a2;
  *(_WORD *)(a1 + 14) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 10) = v4;
  v5 = *a3;
  *(_OWORD *)(a1 + 30) = *(__int128 *)((char *)a3 + 14);
  *(_OWORD *)(a1 + 16) = v5;
  v6 = *(const char **)((char *)a3 + 22);
  if (v6)
  {
    strlen(v6);
    operator new[]();
  }
  return a1;
}

_QWORD *sub_1002A3174(_QWORD *result)
{
  *result = off_100921808;
  if (result[6])
    operator delete[]();
  return result;
}

void sub_1002A31BC(_QWORD *a1)
{
  *a1 = off_100921808;
  if (a1[6])
    operator delete[]();
  operator delete();
}

void sub_1002A3214(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  sub_1002917F0((uint64_t)off_100977A80, a1 + 10, (unsigned __int8 *)(a1 + 16));
}

_QWORD *sub_1002A3268(_QWORD *result)
{
  *result = off_100921840;
  if (result[3])
    operator delete[]();
  return result;
}

void sub_1002A32B0(_QWORD *a1)
{
  *a1 = off_100921840;
  if (a1[3])
    operator delete[]();
  operator delete();
}

uint64_t sub_1002A3308(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_100291D40(a1, a1 + 10, (unsigned int *)(a1 + 16), *(unsigned __int16 *)(a1 + 22), *(unsigned __int8 **)(a1 + 24));
}

void sub_1002A335C(uint64_t a1, int *a2, char a3, char a4, char a5, char a6, char *__s, __int16 a8, void *__src)
{
  int v11;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_100921878;
  v11 = *a2;
  *(_WORD *)(a1 + 14) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 10) = v11;
  *(_BYTE *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 17) = a4;
  *(_BYTE *)(a1 + 18) = a5;
  *(_BYTE *)(a1 + 19) = a6;
  sub_100091AE8((_QWORD *)(a1 + 24), __s);
  *(_WORD *)(a1 + 48) = a8;
  operator new[]();
}

void sub_1002A33FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1002A341C(uint64_t a1)
{
  sub_1002A3544(a1);
  operator delete();
}

void sub_1002A3440(uint64_t a1)
{
  void *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  void *__p[2];
  uint64_t v8;

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  v2 = off_100977A80;
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a1 + 17);
  v5 = *(unsigned __int8 *)(a1 + 18);
  v6 = *(unsigned __int8 *)(a1 + 19);
  if (*(char *)(a1 + 47) < 0)
  {
    sub_10003430C(__p, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 40);
  }
  sub_100291EE4((uint64_t)v2, a1 + 10, v3, v4, v5, v6, (char *)__p, *(unsigned __int16 *)(a1 + 48), *(char **)(a1 + 56));
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
}

void sub_1002A3528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A3544(uint64_t a1)
{
  *(_QWORD *)a1 = off_100921878;
  if (*(_QWORD *)(a1 + 56))
    operator delete[]();
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

_QWORD *sub_1002A359C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1009218B0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1002A35D8(_QWORD *a1)
{
  void *v2;

  *a1 = off_1009218B0;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_1002A3624(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_1002924CC((uint64_t)off_100977A80, a1 + 10, a1 + 16, *(unsigned __int8 *)(a1 + 40));
}

char *sub_1002A367C(_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    abort();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

_QWORD *sub_1002A36B8(_QWORD *a1)
{
  void *v2;

  *a1 = off_1009218E8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1002A36F4(_QWORD *a1)
{
  void *v2;

  *a1 = off_1009218E8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_1002A3740(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_100292CA8((uint64_t)off_100977A80, a1 + 10, (_QWORD *)(a1 + 16));
}

_QWORD *sub_1002A3794(_QWORD *a1)
{
  void *v2;

  *a1 = off_100921920;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1002A37D0(_QWORD *a1)
{
  void *v2;

  *a1 = off_100921920;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_1002A381C(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_100292E74((uint64_t)off_100977A80, a1 + 10, 0, (unsigned __int8 **)(a1 + 24));
}

void sub_1002A3878()
{
  operator delete();
}

uint64_t sub_1002A388C(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_10029336C((uint64_t)off_100977A80, a1 + 10, *(_QWORD *)(a1 + 16));
}

uint64_t sub_1002A38E0(uint64_t a1, int *a2, int a3, uint64_t a4)
{
  int v5;
  char *v7;
  char *v8;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_100921990;
  v5 = *a2;
  *(_WORD *)(a1 + 14) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 10) = v5;
  *(_BYTE *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  switch(a3)
  {
    case 0:
      v7 = (char *)operator new(9uLL);
      *(_QWORD *)v7 = *(_QWORD *)a4;
      v7[8] = *(_BYTE *)(a4 + 8);
      v8 = v7 + 9;
      goto LABEL_5;
    case 1:
      v7 = (char *)operator new(0xBuLL);
      *(_QWORD *)v7 = *(_QWORD *)a4;
      *(_DWORD *)(v7 + 7) = *(_DWORD *)(a4 + 7);
      v8 = v7 + 11;
      goto LABEL_5;
    case 2:
    case 3:
      v7 = (char *)operator new(8uLL);
      *(_QWORD *)v7 = *(_QWORD *)a4;
      v8 = v7 + 8;
LABEL_5:
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = v8;
      *(_QWORD *)(a1 + 40) = v8;
      break;
    default:
      return a1;
  }
  return a1;
}

_QWORD *sub_1002A39B4(_QWORD *a1)
{
  void *v2;

  *a1 = off_100921990;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1002A39F0(_QWORD *a1)
{
  void *v2;

  *a1 = off_100921990;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_1002A3A3C(uint64_t a1, uint64_t a2)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  sub_1002934AC(a1, a2, *(unsigned __int8 *)(a1 + 16), (unsigned __int8 **)(a1 + 24));
}

_QWORD *sub_1002A3A88(_QWORD *a1)
{
  void *v2;

  *a1 = off_1009219C8;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1002A3AC4(_QWORD *a1)
{
  void *v2;

  *a1 = off_1009219C8;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_1002A3B10(uint64_t a1, uint64_t a2)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_100292704((uint64_t)off_100977A80, a2, *(unsigned __int8 *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int16 *)(a1 + 32), (_QWORD *)(a1 + 40));
}

_QWORD *sub_1002A3B6C(_QWORD *result)
{
  *result = off_100921A00;
  if (result[2])
    operator delete[]();
  return result;
}

void sub_1002A3BB4(_QWORD *a1)
{
  *a1 = off_100921A00;
  if (a1[2])
    operator delete[]();
  operator delete();
}

void sub_1002A3C0C(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  sub_100294270((uint64_t)off_100977A80, a1 + 10, *(const UInt8 **)(a1 + 16), *(unsigned __int16 *)(a1 + 24), *(unsigned __int8 *)(a1 + 26), *(unsigned __int8 *)(a1 + 27));
}

_QWORD *sub_1002A3C6C(_QWORD *result)
{
  *result = off_100921A38;
  if (result[3])
    operator delete[]();
  return result;
}

void sub_1002A3CB4(_QWORD *a1)
{
  *a1 = off_100921A38;
  if (a1[3])
    operator delete[]();
  operator delete();
}

uint64_t sub_1002A3D0C(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_1002937A4((uint64_t)off_100977A80, (unsigned __int8 *)(a1 + 10), *(unsigned __int16 *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

_QWORD *sub_1002A3D64(_QWORD *a1)
{
  void *v2;

  *a1 = off_100921A70;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1002A3DA0(_QWORD *a1)
{
  void *v2;

  *a1 = off_100921A70;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_1002A3DEC(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_1002938B0((uint64_t)off_100977A80, a1 + 10, (int *)(a1 + 16));
}

_QWORD *sub_1002A3E40(_QWORD *a1)
{
  void *v2;

  *a1 = off_100921AA8;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1002A3E7C(_QWORD *a1)
{
  void *v2;

  *a1 = off_100921AA8;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_1002A3EC8(uint64_t a1)
{
  void *v2;
  int v3;
  void *__p[3];

  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  v2 = off_100977A80;
  v3 = *(unsigned __int8 *)(a1 + 16);
  sub_10001FE6C(__p, a1 + 24);
  sub_100293C54((uint64_t)v2, a1 + 10, v3, (uint64_t *)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1002A3F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_1002A3F78(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    abort();
  result = (char *)sub_10007ABA0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_QWORD *sub_1002A3FB4(_QWORD *a1)
{
  void *v2;

  *a1 = off_100921AE0;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1002A3FF0(_QWORD *a1)
{
  void *v2;

  *a1 = off_100921AE0;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_1002A403C(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_100293A78((uint64_t)off_100977A80, a1 + 10, 0, (uint64_t *)(a1 + 24));
}

_QWORD *sub_1002A4094(_QWORD *a1)
{
  void *v2;

  *a1 = off_100921B18;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1002A40D0(_QWORD *a1)
{
  void *v2;

  *a1 = off_100921B18;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_1002A411C(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  return sub_100294024((uint64_t)off_100977A80, a1 + 10, *(unsigned __int8 *)(a1 + 16), (unsigned __int8 **)(a1 + 24));
}

_QWORD *sub_1002A4174(_QWORD *result)
{
  *result = &off_100921B50;
  if (result[3])
    operator delete[]();
  return result;
}

void sub_1002A41BC(_QWORD *a1)
{
  *a1 = &off_100921B50;
  if (a1[3])
    operator delete[]();
  operator delete();
}

void sub_1002A4214(uint64_t a1)
{
  if (qword_100977A88 != -1)
    dispatch_once(&qword_100977A88, &stru_100921C98);
  sub_100291A70((uint64_t)off_100977A80, a1 + 10, *(unsigned __int16 *)(a1 + 16), *(unsigned __int16 *)(a1 + 18), *(char **)(a1 + 24));
}

uint64_t sub_1002A4270(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_1002A4304((uint64_t)a1);
}

uint64_t sub_1002A4304(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t sub_1002A4350(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1002A4390(uint64_t a1, int a2, __int128 *a3, unsigned int a4, char *__src, char a6)
{
  char *v10;
  __int128 v11;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003430C((_BYTE *)(a1 + 24), *(void **)a3, *((_QWORD *)a3 + 1));
    v10 = *(char **)(a1 + 8);
  }
  else
  {
    v10 = 0;
    v11 = *a3;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 24) = v11;
  }
  *(_BYTE *)(a1 + 48) = a6;
  sub_1002A4510(a1, v10, __src, &__src[a4], a4);
  return a1;
}

void sub_1002A4420(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A4454(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_100920DB8;
  *(_QWORD *)(a1 + 256) = &off_100920E90;
  *(_QWORD *)(a1 + 264) = off_100920EA8;
  *(_QWORD *)(a1 + 272) = off_100920ED0;
  *(_QWORD *)(a1 + 280) = &off_100920F00;
  *(_QWORD *)(a1 + 288) = off_100920F18;
  *(_QWORD *)(a1 + 296) = off_100920F48;
  sub_100069BDC(a1 + 648);
  sub_100069BDC(a1 + 584);
  v2 = *(void **)(a1 + 560);
  if (v2)
  {
    *(_QWORD *)(a1 + 568) = v2;
    operator delete(v2);
  }
  sub_10001A82C(a1 + 536, *(_QWORD **)(a1 + 544));
  v3 = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 488) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
  sub_1002A4BEC(a1 + 448);

  sub_100069BDC(a1 + 360);
  v4 = *(void **)(a1 + 336);
  if (v4)
  {
    *(_QWORD *)(a1 + 344) = v4;
    operator delete(v4);
  }
  return sub_100278464(a1);
}

char *sub_1002A4510(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  char *v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      abort();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = v15;
      v17 = (char *)operator new(v15);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v27 = &v13[(_QWORD)v17];
    memcpy(&v13[(_QWORD)v17], __src, a5);
    v28 = &v13[(_QWORD)v17];
    v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(_QWORD)v17 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(char **)(a1 + 8);
      v28 = v17;
    }
    v30 = &v27[a5];
    v31 = &v17[v29];
    if (v10 != v5)
      memmove(v30, v5, v10 - v5);
    v32 = *(char **)a1;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = &v30[v10 - v5];
    *(_QWORD *)(a1 + 16) = v31;
    if (v32)
      operator delete(v32);
    return v27;
  }
  v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v19 = &__src[a5];
    v21 = *(char **)(a1 + 8);
LABEL_17:
    v22 = &v5[a5];
    v23 = &v21[-a5];
    v24 = v21;
    if (&v21[-a5] < v10)
    {
      v25 = &v10[a5] - v21;
      v24 = v21;
      do
      {
        v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&v5[a5], v5, v21 - v22);
    if (v19 != __src)
      memmove(v5, __src, v19 - __src);
    return v5;
  }
  v19 = &__src[v18];
  v20 = a4 - &__src[v18];
  if (a4 != &__src[v18])
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  v21 = &v10[v20];
  *(_QWORD *)(a1 + 8) = &v10[v20];
  if (v18 >= 1)
    goto LABEL_17;
  return v5;
}

char *sub_1002A46F4(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_1002A4750(result, a4);
    result = sub_1002A47E0((int)v6 + 16, a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_1002A4748(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_1002A4750(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    abort();
  result = (char *)sub_1002A479C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_1002A479C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_10007ABD4();
  return operator new(24 * a2);
}

char *sub_1002A47E0(int a1, __int128 *a2, __int128 *a3, char *__dst)
{
  __int128 *v6;
  __int128 v7;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_10003430C(__dst, *(void **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)__dst + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)__dst = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      __dst += 24;
    }
    while (v6 != a3);
  }
  return __dst;
}

uint64_t sub_1002A4850(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      sub_1002A48CC((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1002A48B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100056BAC(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002A48CC(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;
  const void **v10;

  v9 = 0;
  v10 = 0;
  v6 = (uint64_t **)sub_1002A4958(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1002A4AF0((uint64_t)a1, a4, v8);
    sub_100004078(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

const void **sub_1002A4958(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || sub_100091A80((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (sub_100091A80((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return (const void **)sub_10001F574((uint64_t)a1, a3, a5);
  }
  if (sub_100091A80((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_100091A80((uint64_t)(a1 + 2), a5, v15 + 4))
        return (const void **)sub_10001F574((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

_BYTE *sub_1002A4AF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  _BYTE *result;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  result = v7 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_10003430C(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_DWORD *)v7 + 14) = *(_DWORD *)(a2 + 24);
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_1002A4B84(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1002A4BA0(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1002A4BA0(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_1002A4BEC(uint64_t a1)
{
  void *v2;

  sub_1002A4C24(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1002A4C24(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1002A6638(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_1002A4C60(id a1)
{
  operator new();
}

void sub_1002A4CA0()
{
  operator delete();
}

void sub_1002A4CC4(id a1)
{
  operator new();
}

void sub_1002A4D04()
{
  operator delete();
}

void sub_1002A4D28(id a1)
{
  operator new();
}

void sub_1002A4E40()
{
  operator delete();
}

void sub_1002A4E64(id a1)
{
  operator new();
}

void sub_1002A4EA4()
{
  operator delete();
}

void sub_1002A4EC8(id a1)
{
  operator new();
}

void sub_1002A4F08()
{
  operator delete();
}

uint64_t sub_1002A4F2C(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_1002A4F7C((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_1000040CC(a1, v3);
  operator delete(v4);
  return 1;
}

uint64_t sub_1002A4F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v4 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 8;
  v3 = v4;
  if (!v4)
    return v2;
  v5 = v2;
  do
  {
    v6 = bswap32(*(_DWORD *)(v3 + 25));
    v7 = bswap32(*(_DWORD *)a2);
    if (v6 != v7)
      goto LABEL_7;
    v6 = bswap32(*(unsigned __int16 *)(v3 + 29)) >> 16;
    v8 = bswap32(*(unsigned __int16 *)(a2 + 4));
    if (v6 != HIWORD(v8))
    {
      v7 = HIWORD(v8);
LABEL_7:
      if (v6 < v7)
        v9 = -1;
      else
        v9 = 1;
      goto LABEL_10;
    }
    v9 = 0;
LABEL_10:
    v10 = v9 < 0;
    if (v9 >= 0)
      v11 = (uint64_t *)v3;
    else
      v11 = (uint64_t *)(v3 + 8);
    if (!v10)
      v5 = v3;
    v3 = *v11;
  }
  while (*v11);
  if (v5 == v2)
    return v2;
  v12 = bswap32(*(_DWORD *)a2);
  v13 = bswap32(*(_DWORD *)(v5 + 25));
  if (v12 != v13)
    goto LABEL_20;
  v12 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16;
  v14 = bswap32(*(unsigned __int16 *)(v5 + 29));
  if (v12 != HIWORD(v14))
  {
    v13 = HIWORD(v14);
LABEL_20:
    v15 = v12 < v13 ? -1 : 1;
    if (v15 < 0)
      return v2;
  }
  return v5;
}

void sub_1002A5054(id a1)
{
  operator new();
}

void sub_1002A5094()
{
  operator delete();
}

void sub_1002A50B8(id a1)
{
  operator new();
}

void sub_1002A50F8()
{
  operator delete();
}

void sub_1002A511C(id a1)
{
  operator new();
}

void sub_1002A515C()
{
  operator delete();
}

void sub_1002A5180(id a1)
{
  operator new();
}

void sub_1002A51C0()
{
  operator delete();
}

void sub_1002A51E4(id a1)
{
  operator new();
}

void sub_1002A5224()
{
  operator delete();
}

void sub_1002A5248(id a1)
{
  operator new();
}

void sub_1002A5288()
{
  operator delete();
}

void sub_1002A52AC(id a1)
{
  operator new();
}

void sub_1002A52EC()
{
  operator delete();
}

char *sub_1002A5310(uint64_t **a1, uint64_t a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t **v8;
  __int16 v9;
  uint64_t v11;

  v11 = 0;
  v6 = sub_1002A53A4((uint64_t)a1, &v11, a2);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x20uLL);
    v9 = *((_WORD *)*a4 + 2);
    *(_DWORD *)(v7 + 25) = **a4;
    *(_WORD *)(v7 + 29) = v9;
    v7[31] = 0;
    sub_100004078(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_1002A53A4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    while (1)
    {
      v6 = v4;
      v7 = bswap32(*(_DWORD *)a3);
      v8 = bswap32(*(_DWORD *)((char *)v6 + 25));
      if (v7 != v8)
        goto LABEL_8;
      v7 = bswap32(*(unsigned __int16 *)(a3 + 4)) >> 16;
      v9 = bswap32(*(unsigned __int16 *)((char *)v6 + 29));
      if (v7 == HIWORD(v9))
      {
LABEL_12:
        v11 = bswap32(*(_DWORD *)((char *)v6 + 25));
        v12 = bswap32(*(_DWORD *)a3);
        if (v11 == v12)
        {
          v11 = bswap32(*(unsigned __int16 *)((char *)v6 + 29)) >> 16;
          v13 = bswap32(*(unsigned __int16 *)(a3 + 4));
          if (v11 == HIWORD(v13))
            goto LABEL_22;
          v12 = HIWORD(v13);
        }
        if (v11 < v12)
          v14 = -1;
        else
          v14 = 1;
        if ((v14 & 0x80000000) == 0)
          goto LABEL_22;
        result = v6 + 1;
        v4 = (uint64_t *)v6[1];
        if (!v4)
          goto LABEL_22;
      }
      else
      {
        v8 = HIWORD(v9);
LABEL_8:
        if (v7 < v8)
          v10 = -1;
        else
          v10 = 1;
        if ((v10 & 0x80000000) == 0)
          goto LABEL_12;
        v4 = (uint64_t *)*v6;
        result = v6;
        if (!*v6)
          goto LABEL_22;
      }
    }
  }
  v6 = result;
LABEL_22:
  *a2 = v6;
  return result;
}

uint64_t sub_1002A547C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    result = 1;
    while (1)
    {
      v4 = bswap32(*(_DWORD *)a2);
      v5 = bswap32(*(_DWORD *)((char *)v2 + 25));
      if (v4 == v5)
      {
        v4 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16;
        v6 = bswap32(*(unsigned __int16 *)((char *)v2 + 29));
        if (v4 == HIWORD(v6))
          break;
        v5 = HIWORD(v6);
      }
      v7 = v4 < v5 ? -1 : 1;
      if ((v7 & 0x80000000) == 0)
        break;
LABEL_19:
      v2 = (uint64_t *)*v2;
      if (!v2)
        return 0;
    }
    v8 = bswap32(*(_DWORD *)((char *)v2 + 25));
    v9 = bswap32(*(_DWORD *)a2);
    if (v8 == v9)
    {
      v8 = bswap32(*(unsigned __int16 *)((char *)v2 + 29)) >> 16;
      v10 = bswap32(*(unsigned __int16 *)(a2 + 4));
      if (v8 == HIWORD(v10))
      {
        v11 = 0;
LABEL_17:
        if ((v11 & 0x80000000) == 0)
          return result;
        ++v2;
        goto LABEL_19;
      }
      v9 = HIWORD(v10);
    }
    if (v8 < v9)
      v11 = -1;
    else
      v11 = 1;
    goto LABEL_17;
  }
  return 0;
}

char *sub_1002A553C(char **a1, __int128 *a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  char *v19;
  char *v20;
  char *v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v2 = *a1;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v4;
  v25 = v7;
  if (v10)
    v11 = (char *)sub_1002A479C(v7, v10);
  else
    v11 = 0;
  v12 = &v11[24 * v3];
  v22 = v11;
  v23.i64[0] = (uint64_t)v12;
  v23.i64[1] = (uint64_t)v12;
  v24 = &v11[24 * v10];
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C(v12, *(void **)a2, *((_QWORD *)a2 + 1));
    v14 = (char *)v23.i64[1];
    v12 = (char *)v23.i64[0];
  }
  else
  {
    v13 = *a2;
    *((_QWORD *)v12 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v12 = v13;
    v14 = &v11[24 * v3];
  }
  v16 = *a1;
  v15 = (unint64_t)a1[1];
  if ((char *)v15 == *a1)
  {
    v18 = vdupq_n_s64(v15);
  }
  else
  {
    do
    {
      v17 = *(_OWORD *)(v15 - 24);
      *((_QWORD *)v12 - 1) = *(_QWORD *)(v15 - 8);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 24;
      *(_QWORD *)(v15 - 16) = 0;
      *(_QWORD *)(v15 - 8) = 0;
      *(_QWORD *)(v15 - 24) = 0;
      v15 -= 24;
    }
    while ((char *)v15 != v16);
    v18 = *(int64x2_t *)a1;
  }
  v19 = v14 + 24;
  *a1 = v12;
  a1[1] = v14 + 24;
  v23 = v18;
  v20 = a1[2];
  a1[2] = v24;
  v24 = v20;
  v22 = (char *)v18.i64[0];
  sub_1002A56A4((uint64_t)&v22);
  return v19;
}

void sub_1002A5690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002A56A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A56A4(uint64_t a1)
{
  sub_1002A56D8(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1002A56D8(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

_QWORD *sub_1002A572C(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  uint64_t v27;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v11 = v8 % v9;
    }
    else
    {
      v11 = v8 & (v9 - 1);
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v11)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    v11 = 0;
  }
  v15 = a1 + 16;
  v27 = 0;
  v16 = (char *)operator new(0x48uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v8;
  *((_QWORD *)v16 + 2) = **a4;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  LOBYTE(v27) = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_1000B678C(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v11 = v8 % v9;
      else
        v11 = v8;
    }
    else
    {
      v11 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v15;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9)
          v24 %= v9;
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v13 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_1002A59D4((uint64_t)v26, 0);
  return v13;
}

void sub_1002A59BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002A59D4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_1002A59D4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1002A6638(v2 + 3);
    operator delete(v2);
  }
}

uint64_t sub_1002A5A18(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char *)(v5 + 8 * (v4 >> 9));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 9));
  }
  else
  {
    v8 = (uint64_t *)(*(_QWORD *)v7 + 8 * (v4 & 0x1FF));
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 9));
    v11 = (uint64_t *)(*(_QWORD *)v10 + 8 * (v9 & 0x1FF));
  }
  sub_1002A5AC0((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_1002A5AAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002A4304(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002A5AC0(_QWORD *a1, char *a2, uint64_t *a3, char *a4, uint64_t *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = (((uint64_t)a5 - *(_QWORD *)a4) >> 3) + ((a4 - a2) << 6) - (((uint64_t)a3 - *(_QWORD *)a2) >> 3);
  return sub_1002A5AF4(a1, a2, a3, v5);
}

_QWORD *sub_1002A5AF4(_QWORD *a1, _QWORD *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD v23[2];

  v8 = a1[1];
  v9 = a1[2];
  if (v9 == v8)
    v10 = 0;
  else
    v10 = ((v9 - v8) << 6) - 1;
  v11 = a1[5] + a1[4];
  v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_1002A5C24(a1, a4 - v12);
    v8 = a1[1];
    v9 = a1[2];
    v11 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v8 + 8 * (v11 >> 9));
  if (v9 == v8)
    v14 = 0;
  else
    v14 = *v13 + 8 * (v11 & 0x1FF);
  v23[0] = v8 + 8 * (v11 >> 9);
  v23[1] = v14;
  result = sub_1002A6178((uint64_t)v23, a4);
  if (v14 != v16)
  {
    v17 = a1[5];
    do
    {
      if (v13 == result)
        v18 = v16;
      else
        v18 = *v13 + 4096;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = (_QWORD *)v14;
        do
        {
          v20 = *a3++;
          *v19++ = v20;
          if ((uint64_t *)((char *)a3 - *a2) == (uint64_t *)4096)
          {
            v21 = (uint64_t *)a2[1];
            ++a2;
            a3 = v21;
          }
        }
        while (v19 != (_QWORD *)v18);
      }
      v17 += (v18 - v14) >> 3;
      if (v13 == result)
        break;
      v22 = v13[1];
      ++v13;
      v14 = v22;
    }
    while (v22 != v16);
    a1[5] = v17;
  }
  return result;
}

void sub_1002A5C24(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((v5 & 0x1FF) != 0)
    v6 = (v5 >> 9) + 1;
  else
    v6 = v5 >> 9;
  v7 = a1[4];
  if (v6 >= v7 >> 9)
    v8 = v7 >> 9;
  else
    v8 = v6;
  if (v6 <= v7 >> 9)
  {
    for (a1[4] = v7 - (v8 << 9); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10007ABA0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_1002A61DC(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_1002A62F0((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 511;
          else
            v64 = 512;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 9);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10007ABA0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10007ABA0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 9;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_1002A640C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10007ABA0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1002A6520((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1002A6138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1002A6178(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 3);
    if (v4 < 1)
      result -= (unint64_t)(511 - v4) >> 9;
    else
      result += (unint64_t)v4 >> 9;
  }
  return result;
}

void sub_1002A61DC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)sub_10007ABA0(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void sub_1002A62F0(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)sub_10007ABA0(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_1002A640C(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_10007ABA0(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_1002A6520(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_10007ABA0(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t sub_1002A6638(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_1002A4304((uint64_t)a1);
}

uint64_t sub_1002A66CC(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)sub_1002A6718(a1, a2);
  if (result)
  {
    sub_1002A6804(a1, (_QWORD *)result, (uint64_t)v4);
    sub_1002A59D4((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

_QWORD *sub_1002A6718(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *sub_1002A6804@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1002A6938(id a1)
{
  operator new();
}

void sub_1002A6978()
{
  operator delete();
}

void sub_1002A699C(id a1)
{
  operator new();
}

void sub_1002A69DC()
{
  operator delete();
}

void sub_1002A6A00(id a1)
{
  operator new();
}

void sub_1002A6A40()
{
  operator delete();
}

void sub_1002A6A64(id a1)
{
  operator new();
}

void sub_1002A6AA4()
{
  operator delete();
}

void sub_1002A6AC8(id a1)
{
  operator new();
}

void sub_1002A6B08()
{
  operator delete();
}

void sub_1002A6B2C(id a1)
{
  operator new();
}

void sub_1002A6B6C()
{
  operator delete();
}

void sub_1002A6B90(id a1)
{
  operator new();
}

void sub_1002A6BD0()
{
  operator delete();
}

void sub_1002A6BF4(id a1)
{
  operator new();
}

void sub_1002A6C34()
{
  operator delete();
}

uint64_t **sub_1002A6C58(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _BYTE **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _BYTE *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[32] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    sub_100004078(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *sub_1002A6D18(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAAABLL)
    sub_10007ABD4();
  return operator new(6 * a2);
}

void sub_1002A6D5C(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1002A6DE0(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1002A6DE0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10007ABA0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1002A61DC(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_1002A62F0((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10007ABA0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10007ABA0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_1002A640C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002A6520((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1002A70A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1002A70F4(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x400)
    a2 = 1;
  if (v2 < 0x800)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

char *sub_1002A7150(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      abort();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1002A3F78(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t sub_1002A7254(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = *a1;
  v3 = (a1[1] - *a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = v8 - v2;
  if (v9 >> 4 > v4)
    v4 = v9 >> 4;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
    v10 = 0x7FFFFFFFFFFFFFFLL;
  else
    v10 = v4;
  v20 = v7;
  v11 = (char *)sub_1002A7408(v7, v10);
  v12 = &v11[32 * v3];
  __p = v11;
  v17 = v12;
  v19 = &v11[32 * v13];
  *(_QWORD *)v12 = *(_QWORD *)a2;
  *((_QWORD *)v12 + 1) = *(_QWORD *)(a2 + 8);
  *((_DWORD *)v12 + 4) = *(_DWORD *)(a2 + 16);
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a2 + 24);
  v18 = v12 + 32;
  sub_1002A737C(a1, &__p);
  v14 = a1[1];
  if (v18 != v17)
    v18 += (v17 - v18 + 31) & 0xFFFFFFFFFFFFFFE0;
  if (__p)
    operator delete(__p);
  return v14;
}

void sub_1002A7344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1002A737C(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 24) = *(_QWORD *)(v2 + v5 - 24);
      *(_DWORD *)(v6 - 16) = *(_DWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *sub_1002A7408(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_10007ABD4();
  return operator new(32 * a2);
}

uint64_t sub_1002A743C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 != a3)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = a2;
    if (a3 != v3)
    {
      v5 = 32 * ((a3 - a2) >> 5);
      v4 = a2;
      do
      {
        v6 = *(_QWORD *)(v4 + v5 + 8);
        *(_QWORD *)v4 = *(_QWORD *)(v4 + v5);
        *(_QWORD *)(v4 + 8) = v6;
        *(_DWORD *)(v4 + 16) = *(_DWORD *)(v4 + v5 + 16);
        *(_QWORD *)(v4 + 24) = *(_QWORD *)(v4 + v5 + 24);
        v4 += 32;
      }
      while (v4 + v5 != v3);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a2;
}

uint64_t sub_1002A74A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;

  if (result != a2)
  {
    while (*(_QWORD *)result != a3 || a4 != *(_QWORD *)(result + 8))
    {
      result += 32;
      if (result == a2)
        return a2;
    }
  }
  if (result == a2)
    return a2;
  for (i = result + 32; i != a2; i += 32)
  {
    if (*(_QWORD *)i != a3 || a4 != *(_QWORD *)(i + 8))
    {
      *(_QWORD *)result = *(_QWORD *)i;
      *(_QWORD *)(result + 8) = *(_QWORD *)(i + 8);
      *(_DWORD *)(result + 16) = *(_DWORD *)(i + 16);
      *(_QWORD *)(result + 24) = *(_QWORD *)(i + 24);
      result += 32;
    }
  }
  return result;
}

void sub_1002A753C(id a1)
{
  operator new();
}

void sub_1002A757C()
{
  operator delete();
}

char *sub_1002A75A0(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;

  if (a4)
  {
    v6 = result;
    result = sub_1002A7614(result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *(_QWORD *)v7 = *(_QWORD *)a2;
      *(_QWORD *)(v7 + 8) = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(v7 + 16) = *(_DWORD *)(a2 + 16);
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(a2 + 24);
      v7 += 32;
      a2 += 32;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

char *sub_1002A7614(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    abort();
  result = (char *)sub_1002A7408((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void sub_1002A7650(id a1)
{
  operator new();
}

void sub_1002A7690()
{
  operator delete();
}

void sub_1002A76B4(id a1)
{
  operator new();
}

void sub_1002A76F4()
{
  operator delete();
}

void sub_1002A7718(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10007ABA0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1002A61DC(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_1002A62F0((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10007ABA0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10007ABA0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_1002A640C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002A6520((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1002A79E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1002A7A2C(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = v3 - v2;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = ((v3 - v2) << 6) - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x200)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_10007ABA0(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0x1000uLL);
      sub_1002A640C(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_10007ABA0((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 256;
      else
        v40 = (uint64_t)a1[4] + 512;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0x1000uLL);
        sub_1002A61DC(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0x1000uLL);
      }
      sub_1002A62F0((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 256;
      else
        v35 = (uint64_t)a1[4] + 512;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 512;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_1002A62F0((uint64_t)a1, &__p);
  }
}

void sub_1002A7CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_1002A7D3C(_QWORD *a1, char **a2, char *a3, char *a4, char *a5)
{
  unint64_t v5;

  if (a5 == a3)
    v5 = 0;
  else
    v5 = ((uint64_t)&a5[-*(_QWORD *)a4] >> 3) + ((a4 - (char *)a2) << 6) - ((a3 - *a2) >> 3);
  return sub_1002A7D70(a1, a2, a3, v5);
}

_QWORD *sub_1002A7D70(_QWORD *a1, char **a2, char *a3, unint64_t a4)
{
  unint64_t v7;
  char *v8;
  char **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char **v18;
  char *v19;
  char **v20;
  char *v21;
  _QWORD v22[2];
  char *v23;
  uint64_t v24;

  v20 = a2;
  v21 = a3;
  v7 = a1[5];
  if (v7 >= a4)
  {
    v14 = a1[1];
    v15 = (char *)(v14 + 8 * (a1[4] >> 9));
    if (a1[2] == v14)
      v16 = 0;
    else
      v16 = *(_QWORD *)v15 + 8 * (a1[4] & 0x1FFLL);
    v22[0] = a2;
    v22[1] = a3;
    v18 = (char **)sub_1002A6178((uint64_t)v22, a4);
    v23 = v15;
    v24 = v16;
    sub_1002A7F8C(a2, a3, v18, v19, (uint64_t)&v23);
    return (_QWORD *)sub_1002A7E94((uint64_t)a1, v23, v24);
  }
  else
  {
    v9 = (char **)sub_1002A6178((uint64_t)&v20, v7);
    v10 = (uint64_t *)v8;
    v11 = a1[1];
    if (a1[2] == v11)
      v12 = 0;
    else
      v12 = *(_QWORD *)(v11 + 8 * (a1[4] >> 9)) + 8 * (a1[4] & 0x1FFLL);
    v23 = (char *)(v11 + 8 * (a1[4] >> 9));
    v24 = v12;
    sub_1002A7F8C(v20, v21, v9, v8, (uint64_t)&v23);
    return sub_1002A5AF4(a1, v9, v10, a4 - a1[5]);
  }
}

uint64_t sub_1002A7E94(uint64_t result, char *a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 32);
  v5 = v4 + *(_QWORD *)(result + 40);
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = (char *)(v6 + 8 * (v5 >> 9));
  if (v7 == v6)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8 + 8 * (v5 & 0x1FF);
  if (v9 != a3)
  {
    v10 = ((v9 - *(_QWORD *)v8) >> 3) + ((v8 - a2) << 6);
    v11 = a3 - *(_QWORD *)a2;
    v12 = v10 - (v11 >> 3);
    if (v12 >= 1)
    {
      v13 = (char *)(v6 + 8 * (v4 >> 9));
      if (v7 == v6)
        v14 = 0;
      else
        v14 = *(_QWORD *)v13 + 8 * (*(_QWORD *)(result + 32) & 0x1FFLL);
      v16[0] = v13;
      v16[1] = v14;
      if (v14 == a3)
        v15 = 0;
      else
        v15 = (v11 >> 3) + ((a2 - v13) << 6) - ((v14 - *(_QWORD *)v13) >> 3);
      sub_1002A6178((uint64_t)v16, v15);
      v3[5] -= v12;
      do
        result = sub_1002A8114(v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

double sub_1002A7F8C(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  char **v8;
  char *v9;
  char *v10;
  void **v11;
  char *v12;
  double result;
  char *v14;
  __int128 v15;

  if (a1 == a3)
  {
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
    v10 = __src;
  }
  else
  {
    v8 = a1 + 1;
    sub_1002A8058(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      v9 = *v8++;
      sub_1002A8058(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    v10 = *a3;
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
  }
  sub_1002A8058(v10, v12, a4, v11, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_1002A8058@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  void **v6;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 3 >= v11 >> 3 ? v11 >> 3 : (a3 - v9) >> 3;
      if (v12)
        __src = (char *)memmove(__dst, v9, 8 * v12);
      v9 += 8 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

uint64_t sub_1002A8114(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 6) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200)
    a2 = 1;
  if (v5 < 0x400)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_1002A8194(uint64_t a1@<X1>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(float *)a1 = a3;
  *(_QWORD *)(a1 + 4) = a2;
}

void sub_1002A81CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  operator delete(__p);
}

void sub_1002A81D4(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10043E5F8(a1, (uint64_t *)va);
}

uint64_t sub_1002A81EC(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)result = a4;
  *(_QWORD *)(result + 4) = a2;
  *(_WORD *)(result + 12) = 2048;
  *(_QWORD *)(result + 14) = a3;
  return result;
}

void sub_1002A8204(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  sub_10043E5F8(0, (uint64_t *)va);
}

uint64_t sub_1002A8214(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  return sub_10043F6EC(a1, (uint64_t)va);
}

void sub_1002A8220(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0xEu);
}

void sub_1002A8234(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xEu);
}

_QWORD *sub_1002A8258(_QWORD *result, uint64_t a2, uint64_t a3, float a4)
{
  int v4;
  _QWORD *v5;

  if (v4 >= 0)
    v5 = result;
  else
    v5 = (_QWORD *)*result;
  *(float *)a2 = a4;
  *(_QWORD *)(a2 + 4) = a3;
  *(_WORD *)(a2 + 12) = 2081;
  *(_QWORD *)(a2 + 14) = v5;
  return result;
}

void sub_1002A827C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x12u);
}

void sub_1002A82D0(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_debug_impl(a1, a4, OS_LOG_TYPE_DEBUG, a2, a3, 0x16u);
}

void sub_1002A82EC()
{
  void *v0;
  uint64_t i;
  const void *v2[3];
  int v3;
  _QWORD v4[3];
  int v5;
  _QWORD v6[3];
  int v7;

  v0 = objc_autoreleasePoolPush();
  sub_100091AE8(v2, "com.apple.Preferences");
  v3 = 1;
  sub_100091AE8(v4, "com.apple.SharingViewService");
  v5 = 2;
  sub_100091AE8(v6, "com.apple.HeadphoneProxService");
  v7 = 3;
  sub_1002A4850((uint64_t)&qword_1009993D0, v2, 3);
  for (i = 0; i != -12; i -= 4)
  {
    if (SHIBYTE(v6[i + 2]) < 0)
      operator delete((void *)v6[i]);
  }
  __cxa_atexit((void (*)(void *))sub_100278108, &qword_1009993D0, (void *)&_mh_execute_header);
  objc_autoreleasePoolPop(v0);
}

void sub_1002A8404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 0;
  while (1)
  {
    if (*(char *)(v10 + v12 + 87) < 0)
      operator delete(*(void **)(v10 + v12 + 64));
    v12 -= 32;
    if (v12 == -96)
      _Unwind_Resume(exception_object);
  }
}

_QWORD *sub_1002A8468(_QWORD *a1, uint64_t a2)
{
  __CFDictionary *Mutable;

  *a1 = off_100922348;
  a1[1] = a2;
  a1[2] = 0;
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  a1[3] = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("Power Source State"), CFSTR("Battery Power"));
  return a1;
}

uint64_t sub_1002A84D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_100922348;
  CFRelease(*(CFTypeRef *)(a1 + 24));
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    IOPSReleasePowerSource(v3, v2);
  return a1;
}

void sub_1002A851C(uint64_t a1)
{
  sub_1002A84D8(a1);
  operator delete();
}

void sub_1002A8540(uint64_t *a1)
{
  void *__p[2];
  char v3;

  sub_10043F6EC(a1[1], (uint64_t)__p);
  (*(void (**)(uint64_t *, void **))(*a1 + 24))(a1, __p);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1002A8594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A85B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a1 + 16);
  v4 = a1 + 16;
  if (!v5)
  {
    IOPSCreatePowerSource(v4);
    sub_1002A8680(a1);
  }
  sub_1002A87A0(a1, a2);
  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a1 + 24);
    v9 = 138412290;
    v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Publishing remote battery report %@", (uint8_t *)&v9, 0xCu);
  }
  return IOPSSetPowerSourceDetails(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

void sub_1002A8680(uint64_t a1)
{
  CFNumberRef v2;
  void **v3;
  CFStringRef v4;
  void *__p[2];
  char v6;
  int valuePtr;

  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Type"), CFSTR("Accessory Source"));
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Transport Type"), CFSTR("Bluetooth"));
  valuePtr = 100;
  v2 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Max Capacity"), v2);
  CFRelease(v2);
  sub_10046E9BC((unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 128), __p);
  if (v6 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  v4 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v3, 0x8000100u);
  if (v6 < 0)
    operator delete(__p[0]);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Accessory Identifier"), v4);
  CFRelease(v4);
}

void sub_1002A8784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002A87A0(uint64_t a1, uint64_t *a2)
{
  CFStringRef v3;
  const void *Value;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  int v8;
  const __CFString *v9;
  __int16 v10;
  char valuePtr;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  void *__p[2];
  uint64_t v17;

  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)a2 + 23))
      goto LABEL_7;
LABEL_6:
    v3 = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)a2, 0x8000100u);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Name"), v3);
    CFRelease(v3);
    goto LABEL_8;
  }
  if (a2[1])
  {
    a2 = (uint64_t *)*a2;
    goto LABEL_6;
  }
LABEL_7:
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Name"));
LABEL_8:
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("Part Identifier"));
  v17 = 0;
  v15 = 0u;
  *(_OWORD *)__p = 0u;
  v14 = 0u;
  sub_100091AE8(__p, "");
  v12 = 0;
  v13 = 0;
  if (sub_100444BF0(*(_QWORD *)(a1 + 8), (_DWORD *)&v13 + 1, &v13, (_DWORD *)&v12 + 1, &v12))
  {
    valuePtr = BYTE4(v13);
    v10 = v13;
    v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt8Type, &valuePtr);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Vendor ID Source"), v5);
    CFRelease(v5);
    v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, &v10);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Vendor ID"), v6);
    CFRelease(v6);
    v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, (char *)&v12 + 4);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Product ID"), v7);
    CFRelease(v7);
  }
  else
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Vendor ID Source"));
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Vendor ID"));
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Product ID"));
  }
  v8 = sub_10043F854(*(_QWORD *)(a1 + 8));
  if (v8 != 16)
  {
    if (v8 == 19)
    {
      v9 = CFSTR("Speaker");
      goto LABEL_16;
    }
    if (v8 != 20)
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Accessory Category"));
      goto LABEL_18;
    }
  }
  v9 = CFSTR("Headphone");
LABEL_16:
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Accessory Category"), v9);
LABEL_18:
  if (Value && CFEqual(Value, CFSTR("Case")))
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Accessory Category"), CFSTR("Audio Battery Case"));
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
}

void sub_1002A89FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002A8A24(uint64_t a1, const char *a2)
{
  CFStringRef v3;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v3 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Group Identifier"), v3);
  CFRelease(v3);
}

void sub_1002A8A84(uint64_t a1, const char *a2)
{
  CFStringRef v3;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v3 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Part Name"), v3);
  CFRelease(v3);
}

void sub_1002A8AE4(uint64_t a1, unsigned int a2)
{
  const void *v2;

  if (a2 > 4)
    v2 = 0;
  else
    v2 = *(&off_100922398 + (int)a2);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Part Identifier"), v2);
}

void sub_1002A8B10(uint64_t a1, int a2)
{
  CFNumberRef v3;
  int valuePtr;

  valuePtr = a2;
  v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Current Capacity"), v3);
  CFRelease(v3);
}

const __CFNumber *sub_1002A8B70(uint64_t a1, void *a2)
{
  const __CFNumber *result;

  result = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 24), CFSTR("Current Capacity"));
  if (result)
    return (const __CFNumber *)(CFNumberGetValue(result, kCFNumberIntType, a2) != 0);
  return result;
}

void sub_1002A8BB4(uint64_t a1, int a2)
{
  const void **v3;
  __CFDictionary *v4;
  const __CFString *v5;

  v3 = (const void **)&kCFBooleanTrue;
  if (a2 != 1)
    v3 = (const void **)&kCFBooleanFalse;
  v4 = *(__CFDictionary **)(a1 + 24);
  if (a2 == 1)
    v5 = CFSTR("AC Power");
  else
    v5 = CFSTR("Battery Power");
  CFDictionarySetValue(v4, CFSTR("Is Charging"), *v3);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), CFSTR("Power Source State"), v5);
}

uint64_t sub_1002A8C20()
{
  uint64_t v0;

  if (qword_100991AA8 != -1)
    dispatch_once(&qword_100991AA8, &stru_1009223C0);
  if (!byte_100991AA0)
    return 0;
  v0 = mach_absolute_time();
  kdebug_trace(730005508, v0, 0, 0, 0);
  return v0;
}

uint64_t sub_1002A8C9C()
{
  uint64_t v0;

  if (qword_100991AA8 != -1)
    dispatch_once(&qword_100991AA8, &stru_1009223C0);
  if (!byte_100991AA0)
    return 0;
  v0 = mach_absolute_time();
  kdebug_trace(730005512, v0, 0, 0, 0);
  return v0;
}

void sub_1002A8D18(uint64_t a1)
{
  if (qword_100991AA8 != -1)
    dispatch_once(&qword_100991AA8, &stru_1009223C0);
  if (byte_100991AA0)
  {
    if ((unint64_t)(a1 - 3) <= 3)
      kdebug_trace((4 * (a1 - 3) + 730005516), 0, 0, 0, 0);
  }
}

void sub_1002A8D9C(uint64_t a1)
{
  uint64_t v2;

  if (qword_100991AA8 != -1)
    dispatch_once(&qword_100991AA8, &stru_1009223C0);
  if (byte_100991AA0)
  {
    v2 = 730005532;
    if (a1 != 7)
    {
      if (a1 != 8)
        return;
      v2 = 730005536;
    }
    kdebug_trace(v2, 0, 0, 0, 0);
  }
}

void sub_1002A8E24(uint64_t a1)
{
  if (qword_100991AA8 != -1)
    dispatch_once(&qword_100991AA8, &stru_1009223C0);
  if (byte_100991AA0)
  {
    if ((unint64_t)(a1 - 9) <= 3)
      kdebug_trace((4 * (a1 - 9) + 730005540), 0, 0, 0, 0);
  }
}

void sub_1002A8EA8(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *__p[2];
  char v8;

  v5 = a3;
  if (qword_100991AA8 != -1)
    dispatch_once(&qword_100991AA8, &stru_1009223C0);
  if (byte_100991AA0)
  {
    if (a2)
    {
      sub_1000340DC(a2, (uint64_t)__p);
      a2 = sub_100417910((uint64_t)__p);
      if (v8 < 0)
        operator delete(__p[0]);
    }
    v6 = objc_msgSend(v5, "hash");
    if ((unint64_t)(a1 - 17) < 4)
      kdebug_trace((4 * (a1 - 17) + 730005572), a2, v6, 0, 0);
  }

}

void sub_1002A8F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1002A8FA4(id a1)
{
  uint64_t v1;
  void *__p[2];
  char v3;
  void *v4[2];
  char v5;

  v1 = sub_100027F68();
  sub_100091AE8(v4, "Signposts");
  sub_100091AE8(__p, "Enabled");
  (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v1 + 72))(v1, v4, __p, &byte_100991AA0);
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
}

void sub_1002A902C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

pthread_cond_t *sub_1002A9060(pthread_cond_t *a1)
{
  if (pthread_cond_init(a1, 0) && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
    sub_1006D9C0C();
  return a1;
}

pthread_cond_t *sub_1002A90C4(pthread_cond_t *a1)
{
  return sub_1002A9060(a1);
}

pthread_cond_t *sub_1002A90CC(pthread_cond_t *a1)
{
  if (pthread_cond_destroy(a1) && os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
    sub_1006D9C0C();
  return a1;
}

void sub_1002A9130(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  if (pthread_cond_wait(a1, a2))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006D9C0C();
  }
}

void sub_1002A9180(pthread_cond_t *a1, pthread_mutex_t **a2)
{
  sub_1002A9130(a1, *a2);
}

void sub_1002A9188(pthread_cond_t *a1)
{
  if (pthread_cond_signal(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_FAULT))
      sub_1006D9C0C();
  }
}

uint64_t sub_1002A91D8(uint64_t a1, char *__s1, char a3)
{
  *(_QWORD *)a1 = off_1009223F0;
  *(_QWORD *)(a1 + 8) = strdup(__s1);
  *(_BYTE *)(a1 + 16) = a3;
  sub_100016014((pthread_mutex_t *)(a1 + 24));
  *(_QWORD *)(a1 + 88) = 0;
  return a1;
}

uint64_t sub_1002A9224(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009223F0;
  free(*(void **)(a1 + 8));
  sub_100069B7C((pthread_mutex_t *)(a1 + 24));
  return a1;
}

void sub_1002A9268(pthread_t *a1)
{
  pthread_t *v2;
  uint64_t v3;

  v2 = a1 + 3;
  v3 = 0;
  sub_100034188((uint64_t)&v2);
  sub_10011EAC8(a1 + 11, (void *(__cdecl *)(void *))sub_1002A92DC, a1);
  if ((_BYTE)v3)
    sub_100034264((uint64_t)&v2);
}

void sub_1002A92C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a10)
    sub_100034264((uint64_t)&a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002A92DC(uint64_t a1)
{
  sub_1002A9304(a1);
  return 0;
}

BOOL sub_1002A92F4(uint64_t a1, integer_t a2, integer_t a3, int a4, int a5)
{
  return sub_10011EB94(*(_opaque_pthread_t **)(a1 + 88), a2, a3, a4, a5);
}

BOOL sub_1002A92FC(uint64_t a1, int a2)
{
  return sub_10011EB64(*(_opaque_pthread_t **)(a1 + 88), a2);
}

uint64_t sub_1002A9304(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;
  const char *v4;

  v2 = (pthread_mutex_t *)(a1 + 24);
  sub_1000341E4((pthread_mutex_t *)(a1 + 24));
  sub_1000342BC(v2);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = *(const char **)(a1 + 8);
  if (v4)
    sub_10011EC38(v4);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  return 0;
}

void sub_1002A93E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002A9460(uint64_t a1)
{
  *(_QWORD *)a1 = off_100922418;
  *(_QWORD *)(a1 + 8) = off_1009224B8;
  *(_QWORD *)(a1 + 16) = off_100922568;
  *(_QWORD *)(a1 + 24) = off_100922598;
  *(_QWORD *)(a1 + 32) = off_1009225D8;
  *(_QWORD *)(a1 + 40) = &off_100922608;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 62) = 0;
  *(_QWORD *)(a1 + 64) = &stru_100941758;
  *(_BYTE *)(a1 + 72) = 1;
  sub_1000160D0(a1 + 80);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  return a1;
}

void sub_1002A94F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002A9508(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_100922860);
  sub_1002B4110((uint64_t)off_100978128 + 80, a1);
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100922880);
  sub_10061F358((uint64_t)off_1009778A0, a1 + 8, 0);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_1009228A0);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 32);
  v2 = sub_10034FE84();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, a1 + 40);
  *(_WORD *)(a1 + 57) = 0;
  return result;
}

void sub_1002A95F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _BOOL8 v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[5];
  _QWORD v12[5];
  unsigned __int8 v13;
  char v14;
  char v15;
  char v16;
  void *__p[2];
  char v18;
  unsigned __int8 v19;
  uint8_t buf[8];
  char v21;

  *(_DWORD *)(a1 + 228) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  v19 = 1;
  v2 = sub_100027F68();
  sub_100091AE8(buf, "Magnet");
  sub_100091AE8(__p, "AllowPeripheralModeSupport");
  (*(void (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(_QWORD *)v2 + 72))(v2, buf, __p, &v19);
  if (v18 < 0)
    operator delete(__p[0]);
  if (v21 < 0)
    operator delete(*(void **)buf);
  v16 = 0;
  v3 = sub_100027F68();
  sub_100091AE8(buf, "Magnet");
  sub_100091AE8(__p, "EnableAutomaticPairing");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v3 + 72))(v3, buf, __p, &v16);
  if (v18 < 0)
    operator delete(__p[0]);
  if (v21 < 0)
    operator delete(*(void **)buf);
  v15 = 0;
  v4 = sub_100027F68();
  sub_100091AE8(buf, "Magnet");
  sub_100091AE8(__p, "ForceERTMOnNonReliablePipes");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v4 + 72))(v4, buf, __p, &v15);
  if (v18 < 0)
    operator delete(__p[0]);
  if (v21 < 0)
    operator delete(*(void **)buf);
  if (v15)
  {
    v5 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Forcing ERTM on non reliable pipe", buf, 2u);
      v6 = v15 != 0;
    }
    else
    {
      v6 = 1;
    }
    sub_1000F3F98(v6);
  }
  v7 = sub_1000419F4();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002A9FF0;
  v12[3] = &unk_100920960;
  v12[4] = a1;
  v13 = v19;
  v14 = v16;
  sub_100023D84(v7, v12);
  v8 = qword_100999838;
  if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v19;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Initialized ScalablePipe. Peripheral Support: %d", buf, 8u);
  }
  v9 = sub_100038E50();
  sub_100260C8C(v9 + 368, a1 + 16);
  v10 = sub_100475960();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1002AAEC8;
  v11[3] = &unk_100917378;
  v11[4] = a1;
  sub_100023D84(v10, v11);
}

void sub_1002A98CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 57) < 0)
    operator delete(*(void **)(v26 - 80));
  _Unwind_Resume(exception_object);
}

void sub_1002A9918(uint64_t a1, int a2, uint64_t a3, char a4)
{
  int v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[6];
  char v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  int v20;

  v8 = sub_100173D68(a1);
  v9 = qword_100999838;
  if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    v18 = a1;
    v19 = 1024;
    v20 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Scalable pipe transport has been upgraded handle:%p p:0x%4x", buf, 0x12u);
  }
  if (a2 == 1)
  {
    v10 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_FAULT))
      sub_1006D9C6C(v10, v11, v12);
  }
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100922940);
  *(_DWORD *)buf = *(_DWORD *)a3;
  LOWORD(v18) = *(_WORD *)(a3 + 4);
  v13 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)buf, 1);
  v14 = sub_1000419F4();
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1002AFE5C;
  v15[3] = &unk_10091FF68;
  v16 = a4;
  v15[4] = a1;
  v15[5] = v13;
  sub_100041A34(v14, v15);
}

void sub_1002A9AA8(uint64_t a1, int a2, int a3)
{
  int v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;

  v6 = sub_100173D68(a1);
  v7 = qword_100999838;
  if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 136446978;
    v10 = sub_1002B0000(a2);
    v11 = 1024;
    v12 = a3;
    v13 = 2048;
    v14 = a1;
    v15 = 1024;
    v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Scalable pipe transport has been downgraded to %{public}s - average transmit throughput was %ukbps, handle %p p:0x%4x", (uint8_t *)&v9, 0x22u);
  }
  v8 = sub_1000419F4();
  sub_100041A34(v8, &stru_100922670);
}

void sub_1002A9BA0(uint64_t a1, char a2, char a3, char a4)
{
  uint64_t v8;
  _QWORD v9[5];
  int v10;
  int v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;

  v15 = 0;
  sub_10011344C((_DWORD *)&v15 + 1, (__darwin_suseconds_t *)&v15);
  v8 = sub_1000419F4();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1002B0500;
  v9[3] = &unk_100922690;
  v9[4] = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v10 = HIDWORD(v15);
  v11 = v15;
  sub_100041A34(v8, v9);
}

void sub_1002A9C38()
{
  sub_1000419F4();
  operator new();
}

void sub_1002A9CE0()
{
  sub_1000419F4();
  operator new();
}

void sub_1002A9D90(unsigned __int8 *a1, int a2, int a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD v11[5];
  int v12;
  int v13;
  int v14;
  char v15;
  uint8_t buf[15];
  char v17;

  v17 = 0;
  if (sub_10019AC00((uint64_t)a1))
  {
    v8 = ((unint64_t)a1[49] << 40) | ((unint64_t)a1[50] << 32) | ((unint64_t)a1[51] << 24) | ((unint64_t)a1[52] << 16) | ((unint64_t)a1[53] << 8) | a1[54] | ((unint64_t)a1[48] << 48);
LABEL_5:
    sub_1000F2500(v8, &v17);
    goto LABEL_6;
  }
  if (sub_10019AB28((uint64_t)a1))
  {
    v8 = ((unint64_t)a1[48] << 40) | ((unint64_t)a1[49] << 32) | ((unint64_t)a1[50] << 24) | ((unint64_t)a1[51] << 16) | ((unint64_t)a1[52] << 8) | a1[53];
    goto LABEL_5;
  }
  v10 = qword_100999838;
  if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Invalid handle in error metric CB", buf, 2u);
  }
LABEL_6:
  v9 = sub_1000419F4();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1002B0930;
  v11[3] = &unk_1009226D0;
  v11[4] = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = v17;
  sub_100041A34(v9, v11);
}

void sub_1002A9EF0(uint64_t a1, int a2, __int16 a3)
{
  NSObject *v6;
  uint64_t v7;
  _QWORD v8[5];
  __int16 v9;
  __int16 v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  uint64_t v14;

  v6 = qword_100999838;
  if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v12 = a2;
    v13 = 2048;
    v14 = a1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "AP wakeup by pipe 0x%04x handle %p", buf, 0x12u);
  }
  v7 = sub_1000419F4();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002B0DD8;
  v8[3] = &unk_1009173C0;
  v8[4] = a1;
  v9 = a2;
  v10 = a3;
  sub_100041A34(v7, v8);
}

_BYTE *sub_1002A9FF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  _BOOL4 v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  _BOOL8 v25;
  NSObject *v26;
  _BOOL8 v27;
  uint64_t v28;
  NSObject *v29;
  int v30;
  NSObject *v31;
  _BOOL8 v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  void *v40;
  int v41;
  int v42;
  int v43;
  NSObject *v44;
  char *v45;
  int64_t v46;
  void **v47;
  _QWORD *v48;
  _QWORD *v49;
  BOOL v50;
  _QWORD *v52;
  void *v53[2];
  char v54;
  _QWORD v55[2];
  _OWORD v56[3];
  void (*v57)(uint64_t, int, __int16);
  int v58;
  unsigned __int8 v59;
  unsigned int v60;
  unsigned int v61;
  __int16 v62;
  __int16 v63;
  unsigned __int8 v64;
  char v65;
  _BYTE __p[12];
  __int16 v67;
  void **v68;
  __int16 v69;
  int v70;
  __int128 buf;
  __int128 v72;
  void (*v73)();

  v2 = *(_QWORD *)(a1 + 32);
  v65 = 0;
  sub_100043758(&v65);
  if (!sub_100225224())
    return sub_100043728(&v65);
  v3 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3))
    return sub_100043728(&v65);
  if (sub_1000EFA88(*(_BYTE *)(a1 + 40), *(_BYTE *)(a1 + 41)))
  {
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
      sub_1006D9D64();
    return sub_100043728(&v65);
  }
  v64 = 0;
  v63 = 0;
  v62 = 0;
  v60 = 0;
  v61 = -84;
  v59 = 0;
  v58 = 0;
  v4 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4))
    v5 = 10;
  else
    v5 = 0;
  v58 = v5;
  v6 = sub_100027F68();
  sub_100091AE8(&buf, "Magnet");
  sub_100091AE8(__p, "DisableClassic");
  (*(void (**)(uint64_t, __int128 *, _BYTE *, unsigned __int8 *))(*(_QWORD *)v6 + 72))(v6, &buf, __p, &v64);
  if (SHIBYTE(v69) < 0)
    operator delete(*(void **)__p);
  if (SBYTE7(v72) < 0)
    operator delete((void *)buf);
  v7 = sub_100027F68();
  sub_100091AE8(&buf, "Magnet");
  sub_100091AE8(__p, "EnableAWDL");
  (*(void (**)(uint64_t, __int128 *, _BYTE *, char *))(*(_QWORD *)v7 + 72))(v7, &buf, __p, (char *)&v63 + 1);
  if (SHIBYTE(v69) < 0)
    operator delete(*(void **)__p);
  if (SBYTE7(v72) < 0)
    operator delete((void *)buf);
  v8 = sub_100027F68();
  sub_100091AE8(&buf, "Magnet");
  sub_100091AE8(__p, "HistorySize");
  (*(void (**)(uint64_t, __int128 *, _BYTE *, int *))(*(_QWORD *)v8 + 88))(v8, &buf, __p, &v58);
  if (SHIBYTE(v69) < 0)
    operator delete(*(void **)__p);
  if (SBYTE7(v72) < 0)
    operator delete((void *)buf);
  v9 = sub_100027F68();
  sub_100091AE8(&buf, "Magnet");
  sub_100091AE8(__p, "AssertUpgrade");
  (*(void (**)(uint64_t, __int128 *, _BYTE *, __int16 *))(*(_QWORD *)v9 + 72))(v9, &buf, __p, &v63);
  if (SHIBYTE(v69) < 0)
    operator delete(*(void **)__p);
  if (SBYTE7(v72) < 0)
    operator delete((void *)buf);
  v10 = sub_100027F68();
  sub_100091AE8(&buf, "Magnet");
  sub_100091AE8(__p, "DisableFlush");
  (*(void (**)(uint64_t, __int128 *, _BYTE *, char *))(*(_QWORD *)v10 + 72))(v10, &buf, __p, (char *)&v62 + 1);
  if (SHIBYTE(v69) < 0)
    operator delete(*(void **)__p);
  if (SBYTE7(v72) < 0)
    operator delete((void *)buf);
  v11 = sub_100027F68();
  sub_100091AE8(&buf, "Magnet");
  sub_100091AE8(__p, "EnablePerPacketLogging");
  (*(void (**)(uint64_t, __int128 *, _BYTE *, __int16 *))(*(_QWORD *)v11 + 72))(v11, &buf, __p, &v62);
  if (SHIBYTE(v69) < 0)
    operator delete(*(void **)__p);
  if (SBYTE7(v72) < 0)
    operator delete((void *)buf);
  v12 = sub_100027F68();
  sub_100091AE8(&buf, "Magnet");
  sub_100091AE8(__p, "RSSIMinSwitchThreshold");
  (*(void (**)(uint64_t, __int128 *, _BYTE *, unsigned int *))(*(_QWORD *)v12 + 88))(v12, &buf, __p, &v61);
  if (SHIBYTE(v69) < 0)
    operator delete(*(void **)__p);
  if (SBYTE7(v72) < 0)
    operator delete((void *)buf);
  v13 = sub_100027F68();
  sub_100091AE8(&buf, "Magnet");
  sub_100091AE8(__p, "ForceMaxLatency");
  (*(void (**)(uint64_t, __int128 *, _BYTE *, unsigned int *))(*(_QWORD *)v13 + 128))(v13, &buf, __p, &v60);
  if (SHIBYTE(v69) < 0)
    operator delete(*(void **)__p);
  if (SBYTE7(v72) < 0)
    operator delete((void *)buf);
  v14 = sub_100027F68();
  sub_100091AE8(&buf, "Magnet");
  sub_100091AE8(__p, "enableTSEverywhere");
  (*(void (**)(uint64_t, __int128 *, _BYTE *, unsigned __int8 *))(*(_QWORD *)v14 + 72))(v14, &buf, __p, &v59);
  if (SHIBYTE(v69) < 0)
    operator delete(*(void **)__p);
  if (SBYTE7(v72) < 0)
    operator delete((void *)buf);
  if (HIBYTE(v63) && os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
    sub_1006D9D38();
  v15 = v64;
  if (v64)
  {
    v16 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "User forced disable Classic transport !", (uint8_t *)&buf, 2u);
      v15 = v64;
    }
    else
    {
      v15 = 1;
    }
  }
  v17 = v15 == 0;
  v18 = HIBYTE(v63);
  sub_100049F50();
  v19 = qword_100999838;
  if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = v61;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "rssiThreshold = %d", (uint8_t *)&buf, 8u);
  }
  sub_100173E4C(v61);
  if ((_BYTE)v63)
  {
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
      sub_1006D9D0C();
    v20 = 200;
  }
  else
  {
    v20 = 0;
  }
  sub_1000ED770(v20, 0, 0);
  v21 = v17 | (2 * v18);
  if (v21)
  {
    v56[0] = *(_OWORD *)&off_100922610;
    v56[1] = *(_OWORD *)&off_100922620;
    v56[2] = *(_OWORD *)&off_100922630;
    v57 = sub_1002A9EF0;
    if (sub_100170758(v21, (uint64_t)v56))
    {
      if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
        sub_1006D9CE0();
      return sub_100043728(&v65);
    }
  }
  else
  {
    v22 = sub_1000438A4();
    if (sub_1003335A8(v22))
      sub_1000F0404();
    v23 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Warning: Transport switching disabled by defaults write", (uint8_t *)&buf, 2u);
    }
  }
  if (HIBYTE(v62))
  {
    v24 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Disabling L2CAP flush on Isoch endpoint !", (uint8_t *)&buf, 2u);
      v25 = HIBYTE(v62) != 0;
    }
    else
    {
      v25 = 1;
    }
    sub_1001767B8(v25);
  }
  if ((_BYTE)v62)
  {
    v26 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "User forced enable per packet logging", (uint8_t *)&buf, 2u);
      v27 = (_BYTE)v62 != 0;
    }
    else
    {
      v27 = 1;
    }
    sub_1000EDB44(v27);
  }
  v28 = v60;
  if (v60)
  {
    v29 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v28;
      _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "User forced enable ForceMaxLatency=%u", (uint8_t *)&buf, 8u);
      v28 = v60;
    }
    sub_1000F4674(v28);
  }
  v30 = v59;
  if (v59)
  {
    v31 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v30;
      _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "User forced enable forceTSEverywhere=%d", (uint8_t *)&buf, 8u);
      v32 = v59 != 0;
    }
    else
    {
      v32 = 1;
    }
    sub_1000F4680(v32);
  }
  v33 = sub_1000438A4();
  (*(void (**)(uint64_t))(*(_QWORD *)v33 + 3296))(v33);
  *(_BYTE *)(v2 + 56) = 1;
  v55[0] = 0;
  v55[1] = 0;
  sub_10003415C((uint64_t)v55, v2 + 80);
  v34 = *(_QWORD **)(v2 + 144);
  v52 = (_QWORD *)(v2 + 152);
  if (v34 != (_QWORD *)(v2 + 152))
  {
    do
    {
      v35 = v34[5];
      v36 = *(char **)(v35 + 32);
LABEL_84:
      v37 = *(char **)(v35 + 40);
      while (v36 != v37)
      {
        v38 = *(unsigned __int8 **)v36;
        v73 = sub_1002AADBC;
        buf = *(_OWORD *)&off_100922648;
        v72 = *(_OWORD *)&off_100922658;
        if ((char)v38[23] < 0)
        {
          v40 = *(void **)v38;
          v39 = *((_QWORD *)v38 + 1);
        }
        else
        {
          LODWORD(v39) = v38[23];
          v40 = v38;
        }
        v41 = *((_DWORD *)v38 + 7);
        if ((v41 - 1) > 3)
          v42 = 1;
        else
          v42 = dword_10073D4A0[v41 - 1];
        v43 = sub_1000F2578(v40, (v39 + 1), *((_DWORD *)v38 + 6), v42, v38[36], v38[37], v38[38], v41 == 4, &buf);
        if (!v43)
        {
          v36 += 8;
          goto LABEL_84;
        }
        v44 = qword_100999838;
        if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
        {
          if ((char)v38[23] < 0)
            v38 = *(unsigned __int8 **)v38;
          sub_1000340DC(v34[4], (uint64_t)v53);
          v47 = v53;
          if (v54 < 0)
            v47 = (void **)v53[0];
          *(_DWORD *)__p = 136446722;
          *(_QWORD *)&__p[4] = v38;
          v67 = 2082;
          v68 = v47;
          v69 = 1024;
          v70 = v43;
          _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "Failed to re-register endpoint \"%{public}s\" after power cycle, for session \"%{public}s\" with result %{bluetooth:OI_STATUS}u", __p, 0x1Cu);
          if (v54 < 0)
            operator delete(v53[0]);
        }
        v45 = *(char **)(v35 + 40);
        v46 = v45 - (v36 + 8);
        if (v45 != v36 + 8)
          memmove(v36, v36 + 8, v45 - (v36 + 8));
        v37 = &v36[v46];
        *(_QWORD *)(v35 + 40) = &v36[v46];
      }
      v48 = (_QWORD *)v34[1];
      if (v48)
      {
        do
        {
          v49 = v48;
          v48 = (_QWORD *)*v48;
        }
        while (v48);
      }
      else
      {
        do
        {
          v49 = (_QWORD *)v34[2];
          v50 = *v49 == (_QWORD)v34;
          v34 = v49;
        }
        while (!v50);
      }
      v34 = v49;
    }
    while (v49 != v52);
  }
  sub_100034234((uint64_t)v55);
  return sub_100043728(&v65);
}

void sub_1002AAA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  sub_100043728(&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_1002AAADC()
{
  return 1;
}

void sub_1002AAAE4(uint64_t a1, __int16 a2)
{
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100922840);
  sub_1002B2F50((_QWORD *)qword_10097AB60, a2);
  sub_100221568(a1);
  sub_1000419F4();
  operator new();
}

void sub_1002AABE8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete();
}

void sub_1002AAC30()
{
  sub_1000419F4();
  operator new();
}

void sub_1002AAD3C(int a1, const void *a2, unsigned int a3, __int16 a4, int a5)
{
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100922840);
  sub_1002B3380(qword_10097AB60, a1, a2, a3, a4, a5);
}

void sub_1002AADBC()
{
  sub_1000419F4();
  operator new();
}

void sub_1002AAE80(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete();
}

uint64_t sub_1002AAEC8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_1009228C0);
  sub_1005D458C((uint64_t)off_10097AB00, v1 + 24);
  return sub_1002AAF20(v1);
}

uint64_t sub_1002AAF20(uint64_t a1)
{
  uint64_t (***v2)(_QWORD);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id *v7;
  void *v8;
  unsigned int v9;
  NSObject *v10;
  id v11;
  int v13;
  id v14;

  sub_1000438A4();
  if (sub_100333630())
  {
    v2 = (uint64_t (***)(_QWORD))sub_10034FE84();
    v3 = (**v2)(v2);
    v4 = objc_claimAutoreleasedReturnValue(v3);
  }
  else
  {
    if (qword_10097AB08 != -1)
      dispatch_once(&qword_10097AB08, &stru_1009228C0);
    v5 = sub_1005D4858((uint64_t)off_10097AB00);
    v4 = objc_claimAutoreleasedReturnValue(v5);
  }
  v6 = (void *)v4;
  v8 = *(void **)(a1 + 64);
  v7 = (id *)(a1 + 64);
  v9 = objc_msgSend(v8, "isEqualToString:", v4);
  if ((v9 & 1) == 0)
  {
    objc_storeStrong(v7, v6);
    v10 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *v7;
      v13 = 138543362;
      v14 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Updated country code: %{public}@", (uint8_t *)&v13, 0xCu);
    }
  }

  return v9 ^ 1;
}

void sub_1002AB068(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1002AB080(uint64_t a1)
{
  sub_1002A95F0(a1 - 32);
}

void sub_1002AB088(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD v8[5];
  _QWORD v9[5];
  uint8_t buf[16];

  v2 = qword_100999838;
  if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ScalablePipe::stackWillStop enter", buf, 2u);
  }
  v3 = sub_100475960();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1002AB1C0;
  v9[3] = &unk_100917378;
  v9[4] = a1;
  sub_100023D84(v3, v9);
  v4 = sub_10034FE84();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a1 + 40);
  v5 = sub_100038E50();
  sub_1002B43D4(v5 + 368, a1 + 16);
  v6 = sub_1000419F4();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002AB210;
  v8[3] = &unk_100917378;
  v8[4] = a1;
  sub_100023D84(v6, v8);
  v7 = qword_100999838;
  if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "ScalablePipe::stackWillStop exit", buf, 2u);
  }
}

void sub_1002AB1C0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10097AB08 != -1)
    dispatch_once(&qword_10097AB08, &stru_1009228C0);
  sub_1005D4648((uint64_t)off_10097AB00, v1 + 24);
}

_BYTE *sub_1002AB210(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  BOOL v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD v39[2];
  char v40;
  _BYTE v41[128];

  v1 = *(_QWORD *)(a1 + 32);
  v40 = 0;
  sub_100043758(&v40);
  if (sub_100225224())
  {
    v2 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2))
    {
      sub_10017194C();
      sub_1000F0360();
      sub_10004339C(&v40);
      *(_BYTE *)(v1 + 56) = 0;
      v39[0] = 0;
      v39[1] = 0;
      sub_10003415C((uint64_t)v39, v1 + 80);
      v3 = *(_QWORD **)(v1 + 144);
      v33 = (_QWORD *)(v1 + 144);
      v4 = (_QWORD *)(v1 + 152);
      if (v3 != (_QWORD *)(v1 + 152))
      {
        v32 = (_QWORD *)(v1 + 152);
        do
        {
          v5 = v3[5];
          v7 = *(uint64_t **)(v5 + 32);
          v6 = *(uint64_t **)(v5 + 40);
          v34 = v6;
          while (v7 != v6)
          {
            v8 = v1;
            v9 = *v7;
            v37 = 0u;
            v38 = 0u;
            v35 = 0u;
            v36 = 0u;
            v10 = *(id *)(v9 + 40);
            v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
            if (v11)
            {
              v12 = *(_QWORD *)v36;
              do
              {
                for (i = 0; i != v11; i = (char *)i + 1)
                {
                  if (*(_QWORD *)v36 != v12)
                    objc_enumerationMutation(v10);
                  v14 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i);
                  v15 = sub_1002B5578();
                  sub_1002B888C(v15, (__int16)objc_msgSend(v14, "pipeHandle"));
                }
                v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
              }
              while (v11);
            }

            v1 = v8;
            objc_msgSend(*(id *)(v9 + 40), "removeAllObjects");
            ++v7;
            v6 = v34;
          }
          v16 = (_QWORD *)v3[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (_QWORD *)v3[2];
              v18 = *v17 == (_QWORD)v3;
              v3 = v17;
            }
            while (!v18);
          }
          v3 = v17;
          v4 = v32;
        }
        while (v17 != v32);
        v3 = (_QWORD *)*v33;
      }
      if (v3 != v4)
      {
        do
        {
          v19 = v3[5];
          if (*(_BYTE *)(v19 + 56))
          {
            sub_1002B4480(v19);
            operator delete();
          }
          v20 = (_QWORD *)v3[1];
          if (v20)
          {
            do
            {
              v21 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v21 = (_QWORD *)v3[2];
              v18 = *v21 == (_QWORD)v3;
              v3 = v21;
            }
            while (!v18);
          }
          v3 = v21;
        }
        while (v21 != v4);
      }
      v23 = *(unint64_t **)(v1 + 168);
      v22 = *(unint64_t **)(v1 + 176);
      while (v23 != v22)
      {
        v24 = (_QWORD *)*v4;
        if (*v4)
        {
          v25 = *v23;
          v26 = v4;
          do
          {
            v27 = v24[4];
            v28 = v27 >= v25;
            if (v27 >= v25)
              v29 = v24;
            else
              v29 = v24 + 1;
            if (v28)
              v26 = v24;
            v24 = (_QWORD *)*v29;
          }
          while (*v29);
          if (v26 != v4 && v25 >= v26[4])
          {
            v30 = *(_QWORD *)v26[5];
            if (v30)
            {
              (*(void (**)(uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v30 + 24))(v30, v23 + 1, 1);
              v22 = *(unint64_t **)(v1 + 176);
            }
          }
        }
        v23 += 6;
      }
      sub_1002B4EA4((uint64_t *)(v1 + 168));
      *(_QWORD *)(v1 + 200) = *(_QWORD *)(v1 + 192);
      sub_100034234((uint64_t)v39);
    }
  }
  return sub_100043728(&v40);
}

void sub_1002AB574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_100043728(&a27);
  _Unwind_Resume(a1);
}

void sub_1002AB5C0(uint64_t a1)
{
  sub_1002AB088(a1 - 32);
}

uint64_t sub_1002AB5C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  NSObject *v13;
  NSObject *v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *__p[2];
  char v22;
  _DWORD buf[3];
  __int16 v24;
  uint64_t v25;

  v8 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 88))(v8) & 1) != 0)
  {
    v9 = *(_QWORD **)(a1 + 144);
    if (v9 == (_QWORD *)(a1 + 152))
    {
LABEL_10:
      v20 = 0;
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_1009228E0);
      if (!sub_10000A378(qword_100977B48, a4))
      {
        __p[0] = 0;
        __p[1] = 0;
        sub_10003415C((uint64_t)__p, a1 + 80);
        v15 = qword_100999838;
        if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a4 + 23) >= 0)
            v16 = a4;
          else
            v16 = *(_QWORD *)a4;
          buf[0] = 136446210;
          *(_QWORD *)&buf[1] = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Registering scalable pipe session \"%{public}s\"", (uint8_t *)buf, 0xCu);
        }
        if (qword_100977B50 != -1)
          dispatch_once(&qword_100977B50, &stru_1009228E0);
        v19 = sub_1000229D8((_QWORD *)qword_100977B48, v20);
        operator new();
      }
      if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
        sub_1006D9D90();
    }
    else
    {
      while (*(_QWORD *)v9[5] != a2)
      {
        v10 = (_QWORD *)v9[1];
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD *)v9[2];
            v12 = *v11 == (_QWORD)v9;
            v9 = v11;
          }
          while (!v12);
        }
        v9 = v11;
        if (v11 == (_QWORD *)(a1 + 152))
          goto LABEL_10;
      }
      v13 = qword_100999838;
      if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
      {
        sub_1000340DC(v9[4], (uint64_t)__p);
        v17 = v22 >= 0 ? __p : (void **)__p[0];
        v18 = *(char *)(a3 + 23) >= 0 ? a3 : *(_QWORD *)a3;
        buf[0] = 136446466;
        *(_QWORD *)&buf[1] = v17;
        v24 = 2082;
        v25 = v18;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Duplicate check-in message from session \"%{public}s\" in application \"%{public}s\"", (uint8_t *)buf, 0x16u);
        if (v22 < 0)
          operator delete(__p[0]);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
  {
    sub_1006D9DF4();
  }
  return 0;
}

void sub_1002AB928()
{
  operator delete();
}

uint64_t sub_1002AB964(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  BOOL v8;
  uint64_t v9;
  NSObject *v10;
  void **v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *__p[2];
  char v23;
  _QWORD v24[2];
  uint8_t buf[4];
  void **v26;

  v24[0] = 0;
  v24[1] = 0;
  sub_10003415C((uint64_t)v24, a1 + 80);
  v4 = *(uint64_t **)(a1 + 144);
  if (v4 != (uint64_t *)(a1 + 152))
  {
    while (1)
    {
      v5 = v4[5];
      if (*(_QWORD *)v5 == a2)
        break;
      v6 = (uint64_t *)v4[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v4[2];
          v8 = *v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
      if (v7 == (uint64_t *)(a1 + 152))
        return sub_100034234((uint64_t)v24);
    }
    v9 = v4[4];
    v10 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(v9, (uint64_t)__p);
      v11 = v23 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      v26 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Unregistering scalable pipe session \"%{public}s\"", buf, 0xCu);
      if (v23 < 0)
        operator delete(__p[0]);
    }
    v12 = *(unsigned __int8 *)(v5 + 57);
    v13 = *(_QWORD **)(a1 + 168);
    v14 = *(_QWORD *)(a1 + 176);
    while (v13 != (_QWORD *)v14)
    {
      if (v9 == *v13)
      {
        sub_1002B4EF0((uint64_t)__p, (uint64_t)(v13 + 6), v14, (uint64_t)v13);
        v14 = v15;
        for (i = *(_QWORD *)(a1 + 176); i != v14; i -= 48)
        {
          if (*(char *)(i - 17) < 0)
            operator delete(*(void **)(i - 40));
        }
        *(_QWORD *)(a1 + 176) = v14;
      }
      else
      {
        v13 += 6;
      }
    }
    v17 = *(uint64_t **)(v5 + 32);
    if (*(uint64_t **)(v5 + 40) == v17)
      goto LABEL_38;
    *(_BYTE *)(v5 + 56) = 1;
    *(_QWORD *)v5 = 0;
    do
    {
      v18 = *v17;
      if (!*(_BYTE *)(*v17 + 39) && !sub_1002ABC94(a1, v9, (const void **)*v17))
      {
        v19 = *(uint64_t **)(v5 + 40);
        v20 = (char *)v19 - (char *)(v17 + 1);
        if (v19 != v17 + 1)
          memmove(v17, v17 + 1, (char *)v19 - (char *)(v17 + 1));
        *(_QWORD *)(v5 + 40) = (char *)v17 + v20;

        if (*(char *)(v18 + 23) < 0)
          operator delete(*(void **)v18);
        operator delete();
      }
      ++v17;
    }
    while (v17 != *(uint64_t **)(v5 + 40));
    if (v17 == *(uint64_t **)(v5 + 32))
    {
LABEL_38:
      sub_1000040CC((uint64_t **)(a1 + 144), v4);
      operator delete(v4);
      sub_1002B4480(v5);
      operator delete();
    }
    if (v12)
      sub_1002ABED4(a1);
  }
  return sub_100034234((uint64_t)v24);
}

void sub_1002ABC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002ABC94(uint64_t a1, uint64_t a2, const void **a3)
{
  NSObject *v6;
  const void *v7;
  _BYTE *v8;
  const void *v9;
  const void *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  NSObject *v16;
  _BYTE __p[12];
  __int16 v19;
  int v20;
  char v21;
  uint8_t buf[4];
  const void *v23;
  __int16 v24;
  _BYTE *v25;

  v6 = qword_100999838;
  if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
  {
    v7 = a3;
    if (*((char *)a3 + 23) < 0)
      v7 = *a3;
    sub_1000340DC(a2, (uint64_t)__p);
    if (v21 >= 0)
      v8 = __p;
    else
      v8 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136446466;
    v23 = v7;
    v24 = 2082;
    v25 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Unregistering endpoint \"%{public}s\" on session \"%{public}s\"", buf, 0x16u);
    if (v21 < 0)
      operator delete(*(void **)__p);
  }
  if (*(_BYTE *)(a1 + 56))
  {
    *((_BYTE *)a3 + 39) = 1;
    buf[0] = 0;
    sub_100043758(buf);
    if (*((char *)a3 + 23) < 0)
    {
      v10 = *a3;
      v9 = a3[1];
    }
    else
    {
      LODWORD(v9) = *((unsigned __int8 *)a3 + 23);
      v10 = a3;
    }
    v12 = (_DWORD)v9 + 1;
    v13 = *((_DWORD *)a3 + 7) - 1;
    if (v13 > 3)
      v14 = 1;
    else
      v14 = dword_10073D4A0[v13];
    v15 = sub_1000F3054(v10, v12, *((unsigned int *)a3 + 6), v14);
    if (v15)
    {
      v16 = qword_100999838;
      if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_FAULT))
      {
        if (*((char *)a3 + 23) < 0)
          a3 = (const void **)*a3;
        *(_DWORD *)__p = 136446466;
        *(_QWORD *)&__p[4] = a3;
        v19 = 1024;
        v20 = v15;
        _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Couldn't unregister valid endpoint \"%{public}s\" with result %{bluetooth:OI_STATUS}u", __p, 0x12u);
      }
      v11 = 0;
    }
    else
    {
      v11 = 10;
    }
    sub_100043728(buf);
  }
  else
  {
    if (objc_msgSend((id)a3[5], "count") && os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_FAULT))
      sub_1006D9E58();
    return 0;
  }
  return v11;
}

void sub_1002ABEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

void sub_1002ABED4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  void **v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  void **v13;

  if (*(_BYTE *)(a1 + 56))
  {
    v1 = *(_QWORD **)(a1 + 144);
    v2 = (_QWORD *)(a1 + 152);
    if (v1 != (_QWORD *)(a1 + 152))
    {
      do
      {
        v3 = v1[5];
        if (*(_BYTE *)(v3 + 57))
        {
          if (!*(_BYTE *)(v3 + 56))
            return;
          v4 = v1[4];
          v5 = qword_100999838;
          if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
          {
            sub_1000340DC(v4, (uint64_t)__p);
            v6 = v11 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 136446210;
            v13 = v6;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Session %{public}s has link requirements but it's zombied", buf, 0xCu);
            if (v11 < 0)
              operator delete(__p[0]);
          }
        }
        v7 = (_QWORD *)v1[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v1[2];
            v9 = *v8 == (_QWORD)v1;
            v1 = v8;
          }
          while (!v9);
        }
        v1 = v8;
      }
      while (v8 != v2);
    }
    LOBYTE(__p[0]) = 0;
    sub_100043758(__p);
    sub_1000EDAC8();
    sub_100043728(__p);
  }
}

void sub_1002AC048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002AC064(uint64_t a1, unint64_t a2, _QWORD *a3, int a4, unsigned int a5, int a6, int a7, int a8, char a9)
{
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  char v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  int v41;
  char v42;
  unint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  int v50;
  int v51;
  BOOL v52;
  _QWORD *v53;
  unsigned __int8 v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unsigned __int8 **v58;
  unsigned __int8 **v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  int v66;
  _QWORD *v67;
  _QWORD *v68;
  NSObject *v69;
  unsigned int v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  int v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  NSObject *v81;
  void *v82;
  void *v83;
  _BYTE *v84;
  NSObject *v85;
  _BYTE *v86;
  _QWORD *v87;
  unint64_t v88;
  __int128 v89;
  uint64_t v90;
  char *v91;
  int v92;
  _QWORD *v93;
  int v94;
  _QWORD *v95;
  _QWORD *v96;
  const char *v97;
  _BYTE *v98;
  const char *v99;
  const char *v100;
  const char *v101;
  const char *v102;
  int v103;
  void *v104;
  int v105;
  int v106;
  NSObject *v107;
  int v108;
  _QWORD *v109;
  _QWORD *v110;
  void **v111;
  const void *v112;
  size_t v113;
  uint64_t v114;
  int v115;
  int v116;
  unsigned int v117;
  int v118;
  int v119;
  _QWORD *v120;
  void *v122[2];
  char v123;
  char v124;
  _QWORD v125[2];
  _BYTE buf[22];
  __int16 v127;
  int v128;
  _BYTE __p[32];
  _BYTE v130[20];
  __int16 v131;
  const char *v132;
  __int16 v133;
  const char *v134;
  __int16 v135;
  const char *v136;

  v125[0] = 0;
  v125[1] = 0;
  sub_10003415C((uint64_t)v125, a1 + 80);
  v17 = (_QWORD *)(a1 + 152);
  v16 = *(_QWORD **)(a1 + 152);
  if (!v16)
    goto LABEL_222;
  v18 = (_QWORD *)(a1 + 152);
  do
  {
    v19 = v16[4];
    v20 = v19 >= a2;
    if (v19 >= a2)
      v21 = v16;
    else
      v21 = v16 + 1;
    if (v20)
      v18 = v16;
    v16 = (_QWORD *)*v21;
  }
  while (*v21);
  if (v18 == v17 || v18[4] > a2)
  {
LABEL_222:
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_FAULT))
    {
      sub_1000340DC(a2, (uint64_t)__p);
      sub_1006D9EC8();
    }
LABEL_14:
    v22 = 1;
    goto LABEL_15;
  }
  v24 = *((unsigned __int8 *)a3 + 23);
  if ((v24 & 0x80u) != 0)
    v24 = a3[1];
  if (!v24)
  {
    v22 = 5;
    goto LABEL_15;
  }
  if (a5 == 4)
  {
    sub_1000340DC(a2, (uint64_t)__p);
    v25 = __p[23];
    v26 = __p[23];
    v27 = *(_BYTE **)__p;
    if (__p[23] < 0)
      v25 = *(_QWORD *)&__p[8];
    else
      v27 = __p;
    if (v25 >= 0x1F)
      v25 = 31;
    if (!v25)
      goto LABEL_60;
    v28 = &v27[v25];
    v29 = v27;
    v30 = v28;
    do
    {
      if (*v29 == 99)
      {
        v31 = &_mh_execute_header.magic + 1;
        while (v31 != 31)
        {
          if (&v29[v31] == v28)
            goto LABEL_37;
          v32 = v29[v31];
          v33 = aComAppleSharin_0[v31++];
          if (v32 != v33)
            goto LABEL_28;
        }
        v30 = v29;
      }
LABEL_28:
      ++v29;
    }
    while (v29 != v28);
    if (v30 == v28 || v30 != v27)
      goto LABEL_60;
    v34 = *((unsigned __int8 *)a3 + 23);
    if ((v34 & 0x80u) == 0)
      v35 = a3;
    else
      v35 = (_BYTE *)*a3;
    if ((v34 & 0x80u) != 0)
      v34 = a3[1];
    if (v34 >= 0x1D)
      v34 = 29;
    if (!v34)
      goto LABEL_60;
LABEL_37:
    v36 = &v35[v34];
    v37 = v35;
    v38 = v36;
    do
    {
      if (*v37 == 99)
      {
        v39 = &_mh_execute_header.magic + 1;
        while (v39 != 29)
        {
          if (&v37[v39] == v36)
            goto LABEL_57;
          v40 = v37[v39];
          v41 = aComAppleSharin_1[v39++];
          if (v40 != v41)
            goto LABEL_49;
        }
        v38 = v37;
      }
LABEL_49:
      ++v37;
    }
    while (v37 != v36);
LABEL_57:
    if (v38 != v36 && v38 == v35)
    {
      v42 = 1;
    }
    else
    {
LABEL_60:
      sub_1000340DC(a2, (uint64_t)buf);
      v43 = HIBYTE(v127);
      if (v127 >= 0)
        v44 = buf;
      else
        v44 = *(_BYTE **)buf;
      if (v127 < 0)
        v43 = *(_QWORD *)&buf[8];
      v45 = 15;
      if (v43 < 0xF)
        v45 = v43;
      v46 = &v44[v45];
      if (v45)
      {
        v47 = v44;
        v48 = &v44[v45];
        do
        {
          if (*v47 == 99)
          {
            v49 = &_mh_execute_header.magic + 1;
            while (v49 != 15)
            {
              if (&v47[v49] == v46)
                goto LABEL_79;
              v50 = v47[v49];
              v51 = aComAppleLeapp[v49++];
              if (v50 != v51)
                goto LABEL_70;
            }
            v48 = v47;
          }
LABEL_70:
          ++v47;
        }
        while (v47 != v46);
      }
      else
      {
        v48 = v44;
      }
LABEL_79:
      v52 = v48 != v46 && v48 == v44;
      v42 = v52;
      if (SHIBYTE(v127) < 0)
        operator delete(*(void **)buf);
      v26 = __p[23];
    }
    if (v26 < 0)
      operator delete(*(void **)__p);
    if ((v42 & 1) == 0)
    {
      v85 = qword_100999838;
      if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
      {
        sub_1000340DC(a2, (uint64_t)__p);
        v86 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        v87 = *((char *)a3 + 23) >= 0 ? a3 : (_QWORD *)*a3;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v86;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v87;
        _os_log_error_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "session %{public}s name %{public}s is not allowed to use PipeEndpointPriorityHighLeOnly", buf, 0x16u);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      goto LABEL_14;
    }
  }
  v117 = a5;
  v116 = a6;
  v118 = a7;
  v119 = a8;
  v53 = *(_QWORD **)(a1 + 144);
  if (v53 == v17)
  {
LABEL_119:
    v69 = qword_100999838;
    v70 = v117;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
    {
      if (v117 < 5 && ((0x17u >> v117) & 1) != 0)
      {
        v71 = (&off_1009229C0)[v117];
      }
      else if (v117 == 3)
      {
        v71 = "isochronous";
      }
      else
      {
        v71 = "unknown";
      }
      v93 = a3;
      v94 = *((char *)a3 + 23);
      v95 = (_QWORD *)*v93;
      sub_1000340DC(a2, (uint64_t)buf);
      if (v94 >= 0)
        v96 = v93;
      else
        v96 = v95;
      v97 = "client";
      if (a4 == 1)
        v97 = "server";
      *(_DWORD *)__p = 136448002;
      *(_QWORD *)&__p[4] = v71;
      if (a4 == 2)
        v97 = "peer-to-peer";
      if (v127 >= 0)
        v98 = buf;
      else
        v98 = *(_BYTE **)buf;
      v99 = "No ";
      *(_WORD *)&__p[12] = 2082;
      *(_QWORD *)&__p[14] = v97;
      v100 = "";
      if (v118)
        v99 = "";
      *(_WORD *)&__p[22] = 2082;
      *(_QWORD *)&__p[24] = v96;
      v101 = "NO";
      if (v119)
        v100 = "NO";
      *(_WORD *)v130 = 2082;
      *(_QWORD *)&v130[2] = v98;
      v102 = "Socket";
      if (v116)
        v102 = "Skywalk";
      *(_WORD *)&v130[10] = 2082;
      *(_QWORD *)&v130[12] = v99;
      v131 = 2082;
      v132 = v100;
      v70 = v117;
      v133 = 2082;
      v134 = v102;
      if (v117 == 4)
        v101 = "YES";
      v135 = 2082;
      v136 = v101;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "Registering %{public}s priority %{public}s endpoint \"%{public}s\" for session \"%{public}s\" %{public}sencryption required, %{public}sERTM, with %{public}s transport, staOnLe:%{public}s.", __p, 0x52u);
      a3 = v93;
      if (SHIBYTE(v127) < 0)
        operator delete(*(void **)buf);
    }
    if (*(_BYTE *)(a1 + 56))
    {
      v124 = 0;
      sub_100043758(&v124);
      *(_OWORD *)__p = *(_OWORD *)&off_100922648;
      *(_OWORD *)&__p[16] = *(_OWORD *)&off_100922658;
      *(_QWORD *)v130 = sub_1002AADBC;
      v103 = *((unsigned __int8 *)a3 + 23);
      if ((v103 & 0x80u) == 0)
        v104 = a3;
      else
        v104 = (void *)*a3;
      if ((v103 & 0x80u) != 0)
        v103 = *((_DWORD *)a3 + 2);
      if (v70 - 1 > 3)
        v105 = 1;
      else
        v105 = dword_10073D4A0[v70 - 1];
      v106 = sub_1000F2578(v104, (v103 + 1), a4, v105, v118, v119, a9, v70 == 4, (__int128 *)__p);
      if (v106)
      {
        v107 = qword_100999838;
        if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
        {
          v108 = *((char *)a3 + 23);
          v109 = (_QWORD *)*a3;
          sub_1000340DC(a2, (uint64_t)v122);
          v110 = v108 >= 0 ? a3 : v109;
          v111 = v123 >= 0 ? v122 : (void **)v122[0];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = v110;
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v111;
          v127 = 1024;
          v128 = v106;
          _os_log_error_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_ERROR, "Failed to register endpoint \"%{public}s\" for session \"%{public}s\" with result %{bluetooth:OI_STATUS}u", buf, 0x1Cu);
          if (v123 < 0)
            operator delete(v122[0]);
        }
        sub_100043728(&v124);
        goto LABEL_14;
      }
      sub_100043728(&v124);
    }
    operator new();
  }
  v54 = *((_BYTE *)a3 + 23);
  v115 = (char)v54;
  v113 = a3[1];
  v114 = v54;
  if ((v54 & 0x80u) == 0)
    v55 = *((unsigned __int8 *)a3 + 23);
  else
    v55 = a3[1];
  v112 = (const void *)*a3;
  if ((v54 & 0x80u) == 0)
    v56 = (unsigned __int8 *)a3;
  else
    v56 = (unsigned __int8 *)*a3;
  v120 = a3;
LABEL_99:
  v57 = v53[5];
  v59 = *(unsigned __int8 ***)(v57 + 32);
  v58 = *(unsigned __int8 ***)(v57 + 40);
  while (1)
  {
    if (v59 == v58)
    {
      v67 = (_QWORD *)v53[1];
      if (v67)
      {
        do
        {
          v68 = v67;
          v67 = (_QWORD *)*v67;
        }
        while (v67);
      }
      else
      {
        do
        {
          v68 = (_QWORD *)v53[2];
          v52 = *v68 == (_QWORD)v53;
          v53 = v68;
        }
        while (!v52);
      }
      v53 = v68;
      a3 = v120;
      if (v68 == v17)
        goto LABEL_119;
      goto LABEL_99;
    }
    v60 = *v59;
    v61 = (*v59)[23];
    v62 = (v61 & 0x80u) == 0 ? (*v59)[23] : *((_QWORD *)*v59 + 1);
    if (v62 == v55)
      break;
LABEL_112:
    ++v59;
  }
  if ((v61 & 0x80) == 0)
  {
    if (!(*v59)[23])
      goto LABEL_125;
    v63 = v56;
    v64 = *v59;
    while (*v64 == *v63)
    {
      ++v64;
      ++v63;
      if (!--v61)
        goto LABEL_125;
    }
    goto LABEL_112;
  }
  v65 = v55;
  v66 = memcmp(*(const void **)v60, v56, *((_QWORD *)*v59 + 1));
  v55 = v65;
  if (v66)
    goto LABEL_112;
LABEL_125:
  if (!v60[39])
  {
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
    {
      sub_1000340DC(v53[4], (uint64_t)__p);
      sub_1006D9F14();
    }
    goto LABEL_166;
  }
  v72 = *(_QWORD *)(a1 + 168);
  v73 = *(_QWORD *)(a1 + 176);
  v74 = v115;
  if (v72 == v73)
  {
LABEL_141:
    v81 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_INFO))
    {
      v82 = (void *)*v120;
      sub_1000340DC(v53[4], (uint64_t)__p);
      if (v115 >= 0)
        v83 = v120;
      else
        v83 = v82;
      if (__p[23] >= 0)
        v84 = __p;
      else
        v84 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v83;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v84;
      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_INFO, "Delaying registration of endpoint \"%{public}s\" as it is currently being unregistered by session \"%{public}s\"", buf, 0x16u);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v74 = *((_BYTE *)v120 + 23);
    }
    *(_QWORD *)__p = a2;
    if (v74 < 0)
    {
      sub_10003430C(&__p[8], (void *)*v120, v120[1]);
    }
    else
    {
      *(_OWORD *)&__p[8] = *(_OWORD *)v120;
      *(_QWORD *)&__p[24] = v120[2];
    }
    *(_DWORD *)v130 = a4;
    *(_DWORD *)&v130[4] = v117;
    *(_DWORD *)&v130[8] = v116;
    v130[12] = v118;
    v130[13] = v119;
    v130[14] = a9;
    v88 = *(_QWORD *)(a1 + 176);
    if (v88 >= *(_QWORD *)(a1 + 184))
    {
      v91 = sub_1002B4F84((char **)(a1 + 168), (uint64_t)__p);
      v92 = __p[31];
      *(_QWORD *)(a1 + 176) = v91;
      if (v92 < 0)
        operator delete(*(void **)&__p[8]);
    }
    else
    {
      *(_QWORD *)v88 = *(_QWORD *)__p;
      v89 = *(_OWORD *)&__p[8];
      *(_QWORD *)(v88 + 24) = *(_QWORD *)&__p[24];
      *(_OWORD *)(v88 + 8) = v89;
      memset(&__p[8], 0, 24);
      v90 = *(_QWORD *)&v130[7];
      *(_QWORD *)(v88 + 32) = *(_QWORD *)v130;
      *(_QWORD *)(v88 + 39) = v90;
      *(_QWORD *)(a1 + 176) = v88 + 48;
    }
    v22 = 10;
    goto LABEL_15;
  }
  while (2)
  {
    v75 = *(unsigned __int8 *)(v72 + 31);
    v76 = (char)v75;
    if ((v75 & 0x80u) != 0)
      v75 = *(_QWORD *)(v72 + 16);
    if (v55 != v75)
    {
LABEL_140:
      v72 += 48;
      if (v72 == v73)
        goto LABEL_141;
      continue;
    }
    break;
  }
  if (v76 >= 0)
    v77 = (unsigned __int8 *)(v72 + 8);
  else
    v77 = *(unsigned __int8 **)(v72 + 8);
  if (v115 < 0)
  {
    v79 = v55;
    v80 = memcmp(v112, v77, v113);
    v55 = v79;
    if (!v80)
    {
      if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
        goto LABEL_165;
      goto LABEL_166;
    }
    goto LABEL_140;
  }
  if (v115)
  {
    v78 = 0;
    while (*((unsigned __int8 *)v120 + v78) == v77[v78])
    {
      if (v114 == ++v78)
      {
        if (!os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
          goto LABEL_166;
        goto LABEL_165;
      }
    }
    goto LABEL_140;
  }
  if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
  {
LABEL_165:
    sub_1000340DC(*(_QWORD *)v72, (uint64_t)__p);
    sub_1006D9F58();
  }
LABEL_166:
  v22 = 103;
LABEL_15:
  sub_100034234((uint64_t)v125);
  return v22;
}

void sub_1002ACC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,int a34,__int16 a35,char a36,char a37,int a38,__int16 a39,char a40,char a41)
{
  sub_100034234((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_1002ACCF0(_QWORD *a1, unint64_t a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t i;
  unsigned __int8 **v24;
  unsigned __int8 **v25;
  char v26;
  uint64_t v27;
  char *v28;
  char *v29;
  signed __int8 v30;
  uint64_t v31;
  char *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  NSObject *v35;
  int v36;
  char *v37;
  char *v38;
  void **v39;
  NSObject *v40;
  void **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t j;
  NSObject *v45;
  void **v46;
  unsigned __int8 **v47;
  int64_t v48;
  void *__p[2];
  char v50;
  _QWORD v51[2];
  uint8_t buf[4];
  char *v53;
  __int16 v54;
  void **v55;

  v51[0] = 0;
  v51[1] = 0;
  sub_10003415C((uint64_t)v51, (uint64_t)(a1 + 10));
  v6 = (_QWORD *)a1[19];
  if (!v6)
    goto LABEL_98;
  v7 = a1 + 19;
  do
  {
    v8 = v6[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = v6;
    v6 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == a1 + 19 || v7[4] > a2)
  {
LABEL_98:
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_FAULT))
    {
      sub_1000340DC(a2, (uint64_t)__p);
      sub_1006D9EC8();
    }
LABEL_14:
    v11 = 1;
    goto LABEL_15;
  }
  v13 = v7[5];
  v14 = a1[21];
  v15 = a1[22];
  if (v14 != v15)
  {
    v16 = a3[23];
    v18 = *(char **)a3;
    v17 = *((_QWORD *)a3 + 1);
    if ((v16 & 0x80u) == 0)
      v19 = a3[23];
    else
      v19 = *((_QWORD *)a3 + 1);
    do
    {
      if (*(_QWORD *)v14 == a2)
      {
        v20 = *(unsigned __int8 *)(v14 + 31);
        v21 = (char)v20;
        if ((v20 & 0x80u) != 0)
          v20 = *(_QWORD *)(v14 + 16);
        if (v19 == v20)
        {
          if (v21 >= 0)
            v22 = (unsigned __int8 *)(v14 + 8);
          else
            v22 = *(unsigned __int8 **)(v14 + 8);
          if ((v16 & 0x80) == 0)
          {
            if ((_DWORD)v16)
            {
              for (i = 0; i != v16; ++i)
              {
                if (a3[i] != v22[i])
                  goto LABEL_34;
              }
              v40 = qword_100999838;
              if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
              {
LABEL_64:
                sub_1000340DC(a2, (uint64_t)__p);
                if (v50 >= 0)
                  v41 = __p;
                else
                  v41 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                v53 = a3;
                v54 = 2082;
                v55 = v41;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Unregistering pending endpoint \"%{public}s\" on session \"%{public}s\"", buf, 0x16u);
                if (v50 < 0)
                  operator delete(__p[0]);
                v15 = a1[22];
              }
            }
            else
            {
              v40 = qword_100999838;
              if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
                goto LABEL_64;
            }
            goto LABEL_70;
          }
          if (!memcmp(v18, v22, v17))
          {
            v40 = qword_100999838;
            if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
            {
              a3 = *(char **)a3;
              goto LABEL_64;
            }
LABEL_70:
            sub_1002B4EF0((uint64_t)__p, v14 + 48, v15, v14);
            v43 = v42;
            for (j = a1[22]; j != v43; j -= 48)
            {
              if (*(char *)(j - 17) < 0)
                operator delete(*(void **)(j - 40));
            }
            v11 = 0;
            a1[22] = v43;
            goto LABEL_15;
          }
        }
      }
LABEL_34:
      v14 += 48;
    }
    while (v14 != v15);
  }
  v24 = *(unsigned __int8 ***)(v13 + 32);
  v25 = *(unsigned __int8 ***)(v13 + 40);
  if (v24 == v25)
  {
LABEL_54:
    v35 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
    {
      v36 = a3[23];
      v37 = *(char **)a3;
      sub_1000340DC(a2, (uint64_t)__p);
      v38 = v36 >= 0 ? a3 : v37;
      v39 = v50 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v53 = v38;
      v54 = 2082;
      v55 = v39;
      _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "Unable to unregister endpoint \"%{public}s\" on session \"%{public}s\" as it wasn't registered", buf, 0x16u);
      if (v50 < 0)
        operator delete(__p[0]);
    }
    goto LABEL_14;
  }
  v26 = a3[23];
  if (v26 >= 0)
    v27 = a3[23];
  else
    v27 = *((_QWORD *)a3 + 1);
  if (v26 >= 0)
    v28 = a3;
  else
    v28 = *(char **)a3;
  while (1)
  {
    v29 = (char *)*v24;
    v30 = (*v24)[23];
    if (v30 >= 0)
      v31 = (*v24)[23];
    else
      v31 = *((_QWORD *)*v24 + 1);
    if (v31 != v27)
      goto LABEL_53;
    if (((*v24)[23] & 0x80) != 0)
      break;
    if (!(*v24)[23])
      goto LABEL_76;
    v32 = v28;
    v33 = *v24;
    v34 = (*v24)[23];
    while (*v33 == *v32)
    {
      ++v33;
      ++v32;
      if (!--v34)
        goto LABEL_76;
    }
LABEL_53:
    if (++v24 == v25)
      goto LABEL_54;
  }
  if (memcmp(*(const void **)v29, v28, *((_QWORD *)*v24 + 1)))
    goto LABEL_53;
LABEL_76:
  if (v29[39])
  {
    v45 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
    {
      if (v30 < 0)
        v29 = *(char **)v29;
      sub_1000340DC(a2, (uint64_t)__p);
      if (v50 >= 0)
        v46 = __p;
      else
        v46 = (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      v53 = v29;
      v54 = 2082;
      v55 = v46;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Endpoint \"%{public}s\" on session \"%{public}s\" is already being unregistered", buf, 0x16u);
      if (v50 < 0)
        operator delete(__p[0]);
    }
    v11 = 10;
  }
  else
  {
    v11 = sub_1002ABC94((uint64_t)a1, a2, (const void **)v29);
    if (!(_DWORD)v11)
    {
      v47 = *(unsigned __int8 ***)(v13 + 40);
      v48 = (char *)v47 - (char *)(v24 + 1);
      if (v47 != v24 + 1)
        memmove(v24, v24 + 1, (char *)v47 - (char *)(v24 + 1));
      *(_QWORD *)(v13 + 40) = (char *)v24 + v48;

      if (v29[23] < 0)
        operator delete(*(void **)v29);
      operator delete();
    }
  }
LABEL_15:
  sub_100034234((uint64_t)v51);
  return v11;
}

void sub_1002AD210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002AD240(uint64_t a1, unint64_t a2, void *a3, int a4, int a5, int a6, void *a7)
{
  id v13;
  id v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  NSObject *v22;
  void **v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  __int16 v28;
  void *v29;
  __int16 v30;
  void *v31;
  NSObject *v32;
  id v33;
  void **v34;
  void *v35;
  int v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43[2];
  char v44;
  _BYTE v45[12];
  __int16 v46;
  void **v47;
  void *__p[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint8_t buf[1032];

  v13 = a3;
  v14 = a7;
  if (*(_BYTE *)(a1 + 56))
  {
    v17 = *(_QWORD **)(a1 + 152);
    v16 = (_QWORD *)(a1 + 152);
    v15 = v17;
    if (!v17)
      goto LABEL_53;
    v18 = v16;
    do
    {
      v19 = v15[4];
      v20 = v19 >= a2;
      if (v19 >= a2)
        v21 = v15;
      else
        v21 = v15 + 1;
      if (v20)
        v18 = v15;
      v15 = (_QWORD *)*v21;
    }
    while (*v21);
    if (v18 != v16 && v18[4] <= a2)
    {
      v22 = qword_100999838;
      if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000340DC(a2, (uint64_t)__p);
        v23 = (SBYTE7(v49) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = v23;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v13;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = a4;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = a5;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = a6;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is requesting %{public}@ link requirements of %d pps, %d Bps input, %d Bps output", buf, 0x28u);
        if (SBYTE7(v49) < 0)
          operator delete(__p[0]);
      }
      *(_BYTE *)(v18[5] + 57) = a4 != 0;
      v36 = objc_msgSend(v14, "isEqualToString:", CFSTR("com.apple.private.alloy.siri.proxy"));
      if (objc_msgSend(v14, "isEqualToString:", CFSTR("metrics")))
      {
        v24 = qword_100999838;
        if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Metrics!", buf, 2u);
        }
        if (qword_10097AB68 != -1)
          dispatch_once(&qword_10097AB68, &stru_100922840);
        v25 = qword_10097AB60;
        v26 = sub_1000419F4();
        *(_QWORD *)buf = _NSConcreteStackBlock;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = sub_1002B10C0;
        *(_QWORD *)&buf[24] = &unk_100917378;
        *(_QWORD *)&buf[32] = v25;
        sub_100041A34(v26, buf);
      }
      memcpy(buf, "clientname", 0x400uLL);
      v40 = 0;
      v41 = 0;
      v42 = 0;
      sub_1000340DC(a2, (uint64_t)&v40);
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v27 = objc_retainAutorelease(v14);
      sub_100091AE8(&v37, (char *)objc_msgSend(v27, "UTF8String"));
      *(_OWORD *)__p = 0u;
      v49 = 0u;
      v50 = 0u;
      v51 = 0u;
      LOBYTE(__p[0]) = 4;
      v28 = HIBYTE(v39);
      if (v39 >= 0)
      {
        v29 = &v37;
      }
      else
      {
        v28 = v38;
        v29 = v37;
      }
      WORD1(__p[0]) = v28;
      __p[1] = v29;
      LOBYTE(v49) = 4;
      v30 = HIBYTE(v42);
      if (v42 < 0)
        v30 = v41;
      v31 = &v40;
      if (v42 < 0)
        v31 = v40;
      WORD1(v49) = v30;
      *((_QWORD *)&v49 + 1) = v31;
      LOBYTE(v50) = 1;
      WORD1(v50) = 4;
      DWORD2(v50) = a5;
      LOBYTE(v51) = 1;
      WORD1(v51) = 4;
      DWORD2(v51) = a4;
      sub_1001141C0("Magnet", (const char *)buf, __p, 4);
      v32 = qword_100999838;
      if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
      {
        v33 = objc_msgSend(objc_retainAutorelease(v27), "UTF8String");
        sub_1000340DC(a2, (uint64_t)v43);
        v34 = v44 >= 0 ? v43 : (void **)v43[0];
        *(_DWORD *)v45 = 136446466;
        *(_QWORD *)&v45[4] = v33;
        v46 = 2082;
        v47 = v34;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Magnet clientname %{public}s: %{public}s", v45, 0x16u);
        if (v44 < 0)
          operator delete(v43[0]);
      }
      *(_QWORD *)v45 = 0;
      if (qword_1009778A8 != -1)
        dispatch_once(&qword_1009778A8, &stru_100922880);
      v35 = off_1009778A0;
      sub_100030BCC(v43, v13);
      if (sub_100623C54((uint64_t)v35, (unsigned __int8 *)v43, v45))
      {
        LOBYTE(v43[0]) = 0;
        sub_100043758(v43);
        sub_1000ED78C(*(uint64_t *)v45, a4, a5, a6, v36);
        sub_100043728(v43);
      }
      else if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
      {
        sub_1006D9F9C();
      }
      if (SHIBYTE(v39) < 0)
        operator delete(v37);
      if (SHIBYTE(v42) < 0)
        operator delete(v40);
    }
    else
    {
LABEL_53:
      if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_FAULT))
      {
        sub_1000340DC(a2, (uint64_t)buf);
        sub_1006D9EC8();
      }
    }
  }

}

void sub_1002AD720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v22;
  void *v23;

  sub_100043728(&a22);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);

  _Unwind_Resume(a1);
}

void sub_1002AD798(uint64_t a1, unint64_t a2, void *a3, int a4, int a5, int a6)
{
  id v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  NSObject *v19;
  void **v20;
  void *v21;
  char v22;
  void *__p[2];
  char v24;
  uint8_t buf[4];
  void **v26;
  __int16 v27;
  id v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;

  v11 = a3;
  if (*(_BYTE *)(a1 + 56))
  {
    v14 = *(_QWORD **)(a1 + 152);
    v13 = (_QWORD *)(a1 + 152);
    v12 = v14;
    if (!v14)
      goto LABEL_31;
    v15 = v13;
    do
    {
      v16 = v12[4];
      v17 = v16 >= a2;
      if (v16 >= a2)
        v18 = v12;
      else
        v18 = v12 + 1;
      if (v17)
        v15 = v12;
      v12 = (_QWORD *)*v18;
    }
    while (*v18);
    if (v15 != v13 && v15[4] <= a2)
    {
      v19 = qword_100999838;
      if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000340DC(a2, (uint64_t)__p);
        v20 = v24 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136447234;
        v26 = v20;
        v27 = 2114;
        v28 = v11;
        v29 = 1024;
        v30 = a4;
        v31 = 1024;
        v32 = a5;
        v33 = 1024;
        v34 = a6;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is requesting %{public}@ link requirements of latency %d ms, %d Bps input, %d Bps output", buf, 0x28u);
        if (v24 < 0)
          operator delete(__p[0]);
      }
      *(_BYTE *)(v15[5] + 57) = a4 != 0;
      v22 = 0;
      sub_100043758(&v22);
      __p[0] = 0;
      if (qword_1009778A8 != -1)
        dispatch_once(&qword_1009778A8, &stru_100922880);
      v21 = off_1009778A0;
      sub_100030BCC(buf, v11);
      if (sub_100623C54((uint64_t)v21, buf, __p))
      {
        sub_1000EDA38((uint64_t)__p[0], a4, a5, a6);
      }
      else if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
      {
        sub_1006D9F9C();
      }
      sub_100043728(&v22);
    }
    else
    {
LABEL_31:
      if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_FAULT))
      {
        sub_1000340DC(a2, (uint64_t)buf);
        sub_1006D9EC8();
      }
    }
  }

}

void sub_1002AD9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void *v13;

  sub_100043728(&a13);

  _Unwind_Resume(a1);
}

id sub_1002ADA2C(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *i;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  void *j;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[2];
  _BYTE v23[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v22[0] = 0;
  v22[1] = 0;
  sub_10003415C((uint64_t)v22, a1 + 80);
  v3 = *(_QWORD **)(a1 + 144);
  v4 = (_QWORD *)(a1 + 152);
  if (v3 != (_QWORD *)(a1 + 152))
  {
    do
    {
      v5 = v3[5];
      for (i = *(uint64_t **)(v5 + 32); i != *(uint64_t **)(v5 + 40); ++i)
      {
        v7 = *i;
        v20 = 0u;
        v21 = 0u;
        v18 = 0u;
        v19 = 0u;
        v8 = *(id *)(v7 + 40);
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
        if (v9)
        {
          v10 = *(_QWORD *)v19;
          do
          {
            for (j = 0; j != v9; j = (char *)j + 1)
            {
              if (*(_QWORD *)v19 != v10)
                objc_enumerationMutation(v8);
              v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v18 + 1)
                                                                                 + 8 * (_QWORD)j), "identifier"));
              objc_msgSend(v2, "addObject:", v12);

            }
            v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v23, 16);
          }
          while (v9);
        }

      }
      v13 = (_QWORD *)v3[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v3[2];
          v15 = *v14 == (_QWORD)v3;
          v3 = v14;
        }
        while (!v15);
      }
      v3 = v14;
    }
    while (v14 != v4);
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allObjects"));
  sub_100034234((uint64_t)v22);

  return v16;
}

void sub_1002ADBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  sub_100034234((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_1002ADC34(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned __int8 v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD v29[2];
  unsigned __int8 v30[16];
  _BYTE v31[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v29[0] = 0;
  v29[1] = 0;
  sub_10003415C((uint64_t)v29, a1 + 80);
  v3 = *(_QWORD **)(a1 + 144);
  v21 = (_QWORD *)(a1 + 152);
  if (v3 != (_QWORD *)(a1 + 152))
  {
    do
    {
      v4 = v3[5];
      v5 = *(_QWORD **)(v4 + 32);
      v22 = v4;
      while (v5 != *(_QWORD **)(v4 + 40))
      {
        v23 = v5;
        v6 = *v5;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v7 = *(id *)(v6 + 40);
        v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
        if (v8)
        {
          v9 = *(_QWORD *)v26;
          while (2)
          {
            v10 = 0;
            do
            {
              if (*(_QWORD *)v26 != v9)
                objc_enumerationMutation(v7);
              v11 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v10);
              v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "identifier", v21));
              v13 = objc_msgSend(v2, "containsObject:", v12);

              if ((v13 & 1) == 0)
              {
                v24 = 0;
                if (qword_1009778A8 != -1)
                  dispatch_once(&qword_1009778A8, &stru_100922880);
                v14 = off_1009778A0;
                v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "identifier"));
                sub_100030BCC(v30, v15);
                LODWORD(v14) = sub_100623C54((uint64_t)v14, v30, &v24);

                if ((_DWORD)v14)
                {
                  if (sub_100221568(v24))
                  {

                    v19 = 1;
                    goto LABEL_25;
                  }
                }
              }
              v10 = (char *)v10 + 1;
            }
            while (v8 != v10);
            v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
            if (v8)
              continue;
            break;
          }
        }

        v4 = v22;
        v5 = v23 + 1;
      }
      v16 = (_QWORD *)v3[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v3[2];
          v18 = *v17 == (_QWORD)v3;
          v3 = v17;
        }
        while (!v18);
      }
      v3 = v17;
    }
    while (v17 != v21);
  }
  v19 = 0;
LABEL_25:
  sub_100034234((uint64_t)v29);

  return v19;
}

void sub_1002ADE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a13);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1002ADEE4(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  std::string *p_p;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  void *v21;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  std::string __p;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[2];
  _BYTE v33[128];

  v3 = a2;
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v32[0] = 0;
  v32[1] = 0;
  sub_10003415C((uint64_t)v32, a1 + 80);
  v4 = *(_QWORD **)(a1 + 144);
  v24 = (_QWORD *)(a1 + 152);
  if (v4 != (_QWORD *)(a1 + 152))
  {
    do
    {
      v5 = v4[5];
      v6 = *(_QWORD **)(v5 + 32);
      v25 = v5;
      while (1)
      {
        v26 = v6;
        if (v6 == *(_QWORD **)(v5 + 40))
          break;
        v7 = *v6;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v8 = *(id *)(v7 + 40);
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
        if (v9)
        {
          v10 = *(_QWORD *)v29;
          while (2)
          {
            for (i = 0; i != v9; i = (char *)i + 1)
            {
              if (*(_QWORD *)v29 != v10)
                objc_enumerationMutation(v8);
              v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1)
                                                                                 + 8 * (_QWORD)i), "identifier"));
              v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "UUIDString"));
              v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString"));
              v15 = objc_msgSend(v13, "isEqualToString:", v14);

              if (v15)
              {
                sub_10050945C(v4[4], &__p);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_p = &__p;
                else
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p));
                objc_msgSend(v23, "addObject:", v17);

                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);

                goto LABEL_19;
              }
            }
            v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
            if (v9)
              continue;
            break;
          }
        }

        v5 = v25;
        v6 = v26 + 1;
      }
LABEL_19:
      v18 = (_QWORD *)v4[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v4[2];
          v20 = *v19 == (_QWORD)v4;
          v4 = v19;
        }
        while (!v20);
      }
      v4 = v19;
    }
    while (v19 != v24);
  }
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "allObjects"));
  sub_100034234((uint64_t)v32);

  return v21;
}

void sub_1002AE154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;

  sub_100034234((uint64_t)&a28);

  _Unwind_Resume(a1);
}

void sub_1002AE1EC(_BYTE *a1, uint64_t a2, char a3)
{
  NSObject *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL4 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  int v26;
  int v27;
  const char *v28;
  NSObject *v29;
  uint32_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int16 v38;
  uint8_t buf[4];
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;

  v38 = 0;
  v37 = 0;
  sub_1002AE5F4((uint64_t)a1, a1 + 57, &v38, &v37, (_BYTE *)&v38 + 1);
  if (a1[57])
  {
    v6 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ePA disabled by defaults write", buf, 2u);
    }
    return;
  }
  sub_1000438A4();
  v7 = sub_100331900();
  if (!(_DWORD)v7)
  {
    sub_1000438A4();
    if (!sub_100331960())
      return;
    v17 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Enable increased Tx power for Marconi2", buf, 2u);
    }
    v18 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v18 + 192))(v18, a2, 2, 0, 30, 10);
    goto LABEL_20;
  }
  v8 = a1 + 61;
  sub_1002AE870(v7, a1 + 61);
  v9 = sub_10003BE44();
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 160))(v9);
  if ((_DWORD)v10)
  {
    v11 = qword_100999838;
    v12 = os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT);
    v13 = HIBYTE(v38);
    if (v12)
    {
      v14 = *v8;
      *(_DWORD *)buf = 67109376;
      v40 = HIBYTE(v38);
      v41 = 1024;
      v42 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Enabling ePABF on HDR magnet (available >= 4378B1/4378B3), policy: %#x, RSSI threshold: %d dBm", buf, 0xEu);
    }
    v15 = sub_1000438A4();
    v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v15 + 136))(v15, 0, a2, v13, *v8, 0, 0);
    sub_1002AE9D8(v16, a2, 1);
    goto LABEL_20;
  }
  v19 = a1 + 59;
  v20 = a1 + 60;
  sub_1002AEB68(v10, a3, a1 + 59, a1 + 60);
  sub_1002AEBC8((uint64_t)a1);
  sub_1000438A4();
  v21 = sub_100331ADC();
  v22 = a1[60];
  v23 = qword_100999838;
  v24 = os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT);
  v25 = HIBYTE(v38);
  if (v21 == v22)
  {
    if (v24)
    {
      v26 = *v8;
      v27 = 25 * *v19;
      *(_DWORD *)buf = 67109888;
      v40 = HIBYTE(v38);
      v41 = 1024;
      v42 = v26;
      v43 = 1024;
      v44 = v27;
      v45 = 1024;
      v46 = 25 * v21;
      v28 = "Enabling ePA, policy: %#x, Threshold: %d dBm, Tx power high: %d, low: %d";
      v29 = v23;
      v30 = 26;
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v28, buf, v30);
    }
  }
  else if (v24)
  {
    v31 = *v8;
    v32 = 25 * *v19;
    *(_DWORD *)buf = 67110144;
    v40 = HIBYTE(v38);
    v41 = 1024;
    v42 = v31;
    v43 = 1024;
    v44 = v32;
    v45 = 1024;
    v46 = 25 * v22;
    v47 = 1024;
    v48 = 25 * v21;
    v28 = "Enabling ePA, policy: %#x, Threshold: %d dBm, Tx power high: %d, medium: %d, low (unused): %d";
    v29 = v23;
    v30 = 32;
    goto LABEL_18;
  }
  v33 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v33 + 112))(v33, a2, 3, v25, *v19, *v20, *v8);
  v34 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 128))(v34, 1);
  v35 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v35 + 112))(v35, a2, 4, v25, *v19, *v20, *v8);
  v36 = sub_1000438A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 128))(v36, 1);
LABEL_20:
  if (qword_100977A78 != -1)
    dispatch_once(&qword_100977A78, &stru_100922900);
  sub_100497FB4((uint64_t)off_100977A70, a2, 0xFFFFFFFFLL, 0, 702, 0);
}

void sub_1002AE5F4(uint64_t a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  void *__p[2];
  char v15;
  uint8_t buf[8];
  char v17;
  char v18;
  __int16 v19;

  v19 = 0;
  v18 = 0;
  v9 = sub_100027F68();
  sub_100091AE8(buf, "ePA");
  sub_100091AE8(__p, "DisableMagnetEPA");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v9 + 72))(v9, buf, __p, (char *)&v19 + 1);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(*(void **)buf);
  v10 = sub_100027F68();
  sub_100091AE8(buf, "ePA");
  sub_100091AE8(__p, "DisableReTxEPA");
  (*(void (**)(uint64_t, uint8_t *, void **, __int16 *))(*(_QWORD *)v10 + 72))(v10, buf, __p, &v19);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(*(void **)buf);
  v11 = sub_100027F68();
  sub_100091AE8(buf, "ePA");
  sub_100091AE8(__p, "DisableThresholdEPA");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v11 + 72))(v11, buf, __p, &v18);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(*(void **)buf);
  *a2 = HIBYTE(v19);
  *a3 = v19;
  *a4 = v18;
  *a5 = 3;
  if (*a3)
  {
    *a5 = 1;
    v12 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Warning: Disabling ePA for retransmission policy through defaults write", buf, 2u);
    }
  }
  if (*a4)
  {
    *a5 &= ~1u;
    v13 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Warning: Disabling threshold based ePA policy through defaults write", buf, 2u);
    }
  }
}

void sub_1002AE82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1002AE870(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  NSObject *v6;
  void *__p[2];
  char v8;
  int v9;
  uint8_t buf[8];
  char v11;

  v9 = 0;
  v3 = sub_100027F68();
  sub_100091AE8(buf, "ePA");
  sub_100091AE8(__p, "ePAThreshold");
  v4 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v3 + 88))(v3, buf, __p, &v9);
  if (v8 < 0)
    operator delete(__p[0]);
  if ((v11 & 0x80000000) == 0)
  {
    if (v4)
      goto LABEL_5;
LABEL_8:
    *a2 = -69;
    return;
  }
  operator delete(*(void **)buf);
  if (!v4)
    goto LABEL_8;
LABEL_5:
  v5 = v9;
  *a2 = v9;
  v6 = qword_100999838;
  if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: Setting user defined ePA threshold to %d dBm through defaults write", buf, 8u);
  }
}

void sub_1002AE99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002AE9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  const char *v23;
  uint8_t *v24;
  __int16 v26;
  __int16 v27;
  uint8_t buf[2];
  __int16 v29;

  v5 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 384))(v5))
    return 0;
  v6 = sub_100027F68();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 392))(v6))
    return 0;
  v7 = qword_100999838;
  v8 = os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)a3)
  {
    if (!v8)
      goto LABEL_9;
    v29 = 0;
    v9 = "Enabling ePA/beamforming VSE Logging for Magnet";
    v10 = (uint8_t *)&v29;
  }
  else
  {
    if (!v8)
      goto LABEL_9;
    *(_WORD *)buf = 0;
    v9 = "Disabling ePA/beamforming VSE Logging for Magnet";
    v10 = buf;
  }
  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v9, v10, 2u);
LABEL_9:
  v11 = sub_1000438A4();
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v11 + 136))(v11, 2, a2, a3, 0, 0, 0);
  v13 = qword_100999838;
  if (!(_DWORD)v12)
  {
    v22 = os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_INFO);
    if ((_DWORD)a3)
    {
      if (v22)
      {
        v27 = 0;
        v23 = "Beamforming VSE Logging enabled for Magnet";
        v24 = (uint8_t *)&v27;
LABEL_20:
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, v23, v24, 2u);
      }
    }
    else if (v22)
    {
      v26 = 0;
      v23 = "Beamforming VSE Logging disabled for Magnet";
      v24 = (uint8_t *)&v26;
      goto LABEL_20;
    }
    return 0;
  }
  v14 = v12;
  v15 = os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR);
  if ((_DWORD)a3)
  {
    if (v15)
      sub_1006D9FC8(v14, v13, v16, v17, v18, v19, v20, v21);
  }
  else if (v15)
  {
    sub_1006DA02C(v14, v13, v16, v17, v18, v19, v20, v21);
  }
  return v14;
}

uint64_t sub_1002AEB68(uint64_t a1, char a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t result;

  sub_1000438A4();
  *a3 = sub_100331C58();
  sub_1000438A4();
  *a4 = sub_100331ADC();
  sub_1000438A4();
  result = sub_100331ABC();
  if ((_DWORD)result)
  {
    if ((a2 & 1) == 0)
    {
      sub_1000438A4();
      result = sub_100331E84();
      *a4 = result;
    }
  }
  return result;
}

uint64_t sub_1002AEBC8(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_BYTE *)(result + 57))
  {
    v1 = result;
    v2 = *(unsigned __int8 *)(result + 58);
    v3 = sub_1000438A4();
    if (v2)
      v4 = 5;
    else
      v4 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v3 + 88))(v3, 3, v4, *(unsigned __int8 *)(v1 + 59), *(unsigned __int8 *)(v1 + 60), *(char *)(v1 + 61));
    v5 = sub_1000438A4();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v5 + 88))(v5, 4, v4, *(unsigned __int8 *)(v1 + 59), *(unsigned __int8 *)(v1 + 60), *(char *)(v1 + 61));
  }
  return result;
}

void sub_1002AEC4C(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD v8[5];
  int v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 == 1)
  {
    v10 = v3;
    v11 = v4;
    v7 = sub_1000419F4();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1002AECBC;
    v8[3] = &unk_1009173C0;
    v8[4] = a1;
    v9 = a3;
    sub_100041A34(v7, v8);
  }
}

_QWORD *sub_1002AECBC(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v1 = result[4];
  v2 = *(_QWORD **)(v1 + 144);
  v3 = (_QWORD *)(v1 + 152);
  if (v2 != (_QWORD *)(v1 + 152))
  {
    v4 = result;
    do
    {
      result = *(_QWORD **)v2[5];
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*result + 40))(result, v2[4], *((unsigned int *)v4 + 10));
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  return result;
}

void sub_1002AED4C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  if (sub_1002AAF20(a1))
  {
    v2 = sub_1000419F4();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1002AEDB4;
    v3[3] = &unk_100917378;
    v3[4] = a1;
    sub_100041A34(v2, v3);
  }
}

void sub_1002AEDB4(uint64_t a1)
{
  sub_1002AEDBC(*(_QWORD *)(a1 + 32));
}

void sub_1002AEDBC(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint8_t buf[4];
  uint64_t v16;
  _BYTE v17[128];

  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = sub_1002ADA2C(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v17, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v12;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v3);
        v7 = *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v6);
        v10 = 0;
        if (qword_1009778A8 != -1)
          dispatch_once(&qword_1009778A8, &stru_100922880);
        v8 = off_1009778A0;
        sub_100030BCC(buf, v7);
        if (sub_100623C54((uint64_t)v8, buf, &v10))
        {
          sub_1002B2E24(a1, v10);
        }
        else
        {
          v9 = qword_100999838;
          if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138543362;
            v16 = v7;
            _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Could not get handle from uuid %{public}@", buf, 0xCu);
          }
        }
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v17, 16);
    }
    while (v4);
  }

}

void sub_1002AEF78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002AEFA0(uint64_t a1)
{
  sub_1002AED4C(a1 - 24);
}

void sub_1002AEFA8(uint64_t a1, void *a2, int a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint8_t buf[4];
  id v19;

  v5 = a2;
  if (!a3 && *(_BYTE *)(a1 + 56))
  {
    v17 = 0;
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100922880);
    v6 = off_1009778A0;
    sub_100030BCC(buf, v5);
    if (sub_100623C54((uint64_t)v6, buf, &v17))
    {
      v16 = 0;
      sub_100043758(&v16);
      if (!sub_100221568(v17))
      {
        v7 = qword_100999838;
        if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          v19 = v5;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Initiating pipe capability exchange with device \"%{public}@\"", buf, 0xCu);
        }
        v8 = sub_1000F0D40(v17);
        if ((_DWORD)v8)
        {
          v9 = qword_100999838;
          if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
            sub_1006DA090(v8, v9, v10, v11, v12, v13, v14, v15);
        }
      }
      sub_100043728(&v16);
    }
    else if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
    {
      sub_1006DA0F4();
    }
  }

}

void sub_1002AF13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  void *v12;

  sub_100043728(&a12);

  _Unwind_Resume(a1);
}

void sub_1002AF16C(uint64_t a1, void *a2, int a3)
{
  sub_1002AEFA8(a1 - 8, a2, a3);
}

void sub_1002AF174(uint64_t a1, void *a2, int a3, int a4, int a5, int a6)
{
  id v11;
  NSObject *v12;
  uint64_t v13;
  id v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;
  int v18;
  int v19;
  char v20;
  char v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;

  v11 = a2;
  v12 = qword_100999838;
  if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109888;
    v23 = a3;
    v24 = 1024;
    v25 = a4;
    v26 = 1024;
    v27 = a5;
    v28 = 1024;
    v29 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "CL Ready in ScalablePipe peerVersion:%d peerFeatures:%x localVersion:%d localFeatures:%x", buf, 0x1Au);
  }
  v13 = sub_1000419F4();
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1002AF2EC;
  v15[3] = &unk_100918840;
  v17 = a1;
  v14 = v11;
  v16 = v14;
  v20 = a3;
  v21 = a5;
  v18 = a4;
  v19 = a6;
  sub_100041A34(v13, v15);

}

void sub_1002AF2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1002AF2EC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  char v8;
  const void *v9;
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  int v13;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100922880);
  v9 = 0;
  v3 = off_1009778A0;
  sub_100030BCC(buf, *(_QWORD *)(a1 + 32));
  if (sub_100623C54((uint64_t)v3, buf, &v9))
  {
    v8 = 0;
    sub_100043758(&v8);
    v4 = sub_1000F4170(v9);
    if (sub_1000F4260(v9))
      *((_BYTE *)v9 + 32) = 1;
    sub_10004339C(&v8);
    v5 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      v11 = v6;
      v12 = 1024;
      v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "device %{public}@ companionLink=%d", buf, 0x12u);
    }
    if (v4)
    {
      v7 = qword_100999838;
      if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "This is a companion link, pre-taggine with HasTS", buf, 2u);
      }
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100922920);
      sub_100658A4C((uint64_t)off_1009778C0, *(void **)(a1 + 32));
    }
    sub_100043728(&v8);
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100922920);
  sub_10066010C((uint64_t)off_1009778C0, *(void **)(a1 + 32), *(_BYTE *)(a1 + 56), *(_DWORD *)(a1 + 48));
  *(_BYTE *)(v2 + 224) = *(_BYTE *)(a1 + 57);
  *(_DWORD *)(v2 + 228) = *(_DWORD *)(a1 + 52);
}

void sub_1002AF510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_100043728(&a12);
  _Unwind_Resume(a1);
}

void sub_1002AF530(uint64_t a1, void *a2, int a3, int a4, int a5, int a6)
{
  sub_1002AF174(a1 - 8, a2, a3, a4, a5, a6);
}

void sub_1002AF538(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *i;
  uint64_t *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *j;
  void *v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[2];
  _BYTE v31[128];

  v5 = a2;
  v30[0] = 0;
  v30[1] = 0;
  sub_10003415C((uint64_t)v30, a1 + 80);
  v6 = *(_QWORD **)(a1 + 144);
  v23 = (_QWORD *)(a1 + 152);
  if (v6 != (_QWORD *)(a1 + 152))
  {
    do
    {
      v24 = v6;
      v7 = (uint64_t *)v6[5];
      if (*v7)
      {
        for (i = (_QWORD *)v7[4]; i != (_QWORD *)v7[5]; i = v25 + 1)
        {
          v25 = i;
          v9 = (uint64_t *)*i;
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          v10 = (id)v9[5];
          v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
          if (v11)
          {
            v12 = *(_QWORD *)v27;
            do
            {
              for (j = 0; j != v11; j = (char *)j + 1)
              {
                if (*(_QWORD *)v27 != v12)
                  objc_enumerationMutation(v10);
                v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1)
                                                                                   + 8 * (_QWORD)j), "identifier"));
                v15 = objc_msgSend(v5, "isEqual:", v14);

                if (v15)
                {
                  v16 = v9;
                  if (*((char *)v9 + 23) < 0)
                    v16 = (uint64_t *)*v9;
                  v17 = *v7;
                  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16));
                  (*(void (**)(uint64_t, void *, id, uint64_t))(*(_QWORD *)v17 + 48))(v17, v18, v5, a3);

                }
              }
              v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
            }
            while (v11);
          }

        }
      }
      v19 = v24;
      v20 = (_QWORD *)v24[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v19[2];
          v22 = *v21 == (_QWORD)v19;
          v19 = v21;
        }
        while (!v22);
      }
      v6 = v21;
    }
    while (v21 != v23);
  }
  sub_100034234((uint64_t)v30);

}

void sub_1002AF74C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002AF798(uint64_t a1, void *a2, uint64_t a3)
{
  sub_1002AF538(a1 - 8, a2, a3);
}

void sub_1002AF7A0(uint64_t a1, void *a2, int a3, int a4)
{
  id v6;
  void *v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;

  v6 = a2;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100922880);
  v10 = 0;
  v7 = off_1009778A0;
  sub_100030BCC(buf, v6);
  if (sub_100623C54((uint64_t)v7, buf, &v10))
  {
    v8 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_INFO))
    {
      v9 = "high";
      if (a3)
        v9 = "low";
      *(_DWORD *)buf = 67109378;
      v12 = a4;
      v13 = 2082;
      v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "RSSI threshold crossed with RSSI=%d, crossed %{public}s threshold", buf, 0x12u);
    }
    buf[0] = 0;
    sub_100043758(buf);
    sub_100172C38(v10, a4);
    sub_100043728(buf);
  }

}

void sub_1002AF8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  sub_100043728(va);

  _Unwind_Resume(a1);
}

uint64_t sub_1002AF920()
{
  return 1;
}

uint64_t sub_1002AF928()
{
  return 1;
}

void sub_1002AF930(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002AF990;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100023D84(v2, v3);
}

uint64_t sub_1002AF990(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(result + 32);
  if (*(_BYTE *)(v1 + 62))
  {
    v2 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "System will sleep, disabling asymmetric peripheral latency", v4, 2u);
    }
    v3 = sub_1000438A4();
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 816))(v3, 0);
    *(_BYTE *)(v1 + 62) = 0;
  }
  return result;
}

void sub_1002AFA18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];

  v1 = a1 - 16;
  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002AF990;
  v3[3] = &unk_100917378;
  v3[4] = v1;
  sub_100023D84(v2, v3);
}

void sub_1002AFA78(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002AFAD8;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

void sub_1002AFAD8(uint64_t a1)
{
  uint64_t v1;
  id v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 62))
  {
    v2 = sub_1002ADA2C(*(_QWORD *)(a1 + 32));
    v6 = (id)objc_claimAutoreleasedReturnValue(v2);
    if (objc_msgSend(v6, "count"))
    {
      v3 = sub_1002ADC34(v1);

      if (v3)
      {
        v4 = qword_100999838;
        if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Peripheral connection exists, enabling asymmetric peripheral latency", buf, 2u);
        }
        v5 = sub_1000438A4();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 816))(v5, 1);
        *(_BYTE *)(v1 + 62) = 1;
      }
    }
    else
    {

    }
  }
}

void sub_1002AFBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002AFBCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];

  v1 = a1 - 16;
  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002AFAD8;
  v3[3] = &unk_100917378;
  v3[4] = v1;
  sub_100041A34(v2, v3);
}

void sub_1002AFC2C(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(a1 + 216))
  {
    v1 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_FAULT))
      sub_1006DA154(v1, v2, v3);
  }
  sub_10034FFF8();
}

uint64_t sub_1002AFD30(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  int v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 216);
  if (v1)
  {
    v3 = qword_1009998D8;
    if (!os_log_type_enabled((os_log_t)qword_1009998D8, OS_LOG_TYPE_DEFAULT)
      || (v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1),
          v7 = 136446210,
          v8 = v4,
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Destroying %{public}s", (uint8_t *)&v7, 0xCu), (v1 = *(_QWORD *)(a1 + 216)) != 0))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    }
    *(_QWORD *)(a1 + 216) = 0;
  }
  else
  {
    v5 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "fUpgradeAssertion was NULL when trying to deassert", (uint8_t *)&v7, 2u);
    }
  }
  return sub_1000EDB38(0);
}

void sub_1002AFE5C()
{
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100922840);
  sub_1002AFC2C(qword_10097AB60);
}

const char *sub_1002B0000(int a1)
{
  const char *result;

  if (a1 > 15)
  {
    switch(a1)
    {
      case 16:
        return "USB";
      case 17:
        return "AWDL";
      case 18:
        return "NAN";
      default:
        return "Unknown";
    }
  }
  else
  {
    result = "Invalid Transport";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "Bluetooth LE";
        break;
      case 2:
        result = "Bluetooth Classic";
        break;
      case 3:
        result = "WL";
        break;
      default:
        return "Unknown";
    }
  }
  return result;
}

void sub_1002B00A4(id a1)
{
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100922840);
  sub_1002AFD30(qword_10097AB60);
  sub_1000EDB38(0);
}

void sub_1002B00EC(uint64_t a1, char a2, int a3, int a4, int a5, int a6)
{
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  void *v25[2];
  char v26;
  void *__p[2];
  char v28;
  void *v29[2];
  char v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v32 = 0;
  v33 = 0;
  sub_10047D368(&v32, 14);
  BYTE4(v32) = a2;
  v33 = 0;
  v31 = 0;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100922880);
  v12 = sub_100624724((uint64_t)off_1009778A0, a1);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  if (v13)
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100922920);
    v14 = sub_100656C60((uint64_t)off_1009778C0, v13);
    if (v14)
      v33 = a6 / 1000 + 1000 * a5 - v14;
    if (sub_100065478())
    {
      v15 = sub_100065478();
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 40))(v15, &v32);
    }
    v16 = sub_100027F68();
    sub_100091AE8(v29, "Magnet");
    sub_100091AE8(__p, "EnableRSSIHistory");
    (*(void (**)(uint64_t, void **, void **, __int16 *))(*(_QWORD *)v16 + 72))(v16, v29, __p, &v31);
    if (v28 < 0)
      operator delete(__p[0]);
    if (v30 < 0)
      operator delete(v29[0]);
    if ((_BYTE)v31)
    {
      v17 = sub_1000438A4();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 824))(v17, a1, 1, 1);
    }
    v18 = sub_100027F68();
    sub_100091AE8(v29, "Magnet");
    sub_100091AE8(__p, "EnableRSSIMonitoring");
    (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v18 + 72))(v18, v29, __p, (char *)&v31 + 1);
    if (v28 < 0)
      operator delete(__p[0]);
    if (v30 < 0)
      operator delete(v29[0]);
    if (HIBYTE(v31))
    {
      v19 = sub_1000438A4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 832))(v19, a1, 1);
    }
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100922920);
    if ((sub_100658AD4((uint64_t)off_1009778C0, v13) & 1) != 0)
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100922920);
      v20 = off_1009778C0;
      sub_100091AE8(v25, "_CTKD_");
      v21 = sub_10000628C((uint64_t)v20, v13, (uint64_t)v25);
      v22 = v21;
      if (v26 < 0)
      {
        operator delete(v25[0]);
        if ((v22 & 1) != 0)
        {
LABEL_37:
          if (qword_10097AB78 != -1)
            dispatch_once(&qword_10097AB78, &stru_1009229A0);
          if (a3)
            v23 = 8000;
          else
            v23 = 3000;
          if (a4)
            v24 = 2000;
          else
            v24 = 1000;
          sub_1006B6A50(qword_10097AB70, v23, v24);
          goto LABEL_46;
        }
      }
      else if ((v21 & 1) != 0)
      {
        goto LABEL_37;
      }
      if (qword_1009778B8 == -1)
      {
LABEL_36:
        sub_100694904(qword_1009778B0, v13, 0);
        goto LABEL_37;
      }
    }
    else
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100922920);
      sub_100658A4C((uint64_t)off_1009778C0, v13);
      if (qword_1009778B8 == -1)
        goto LABEL_36;
    }
    dispatch_once(&qword_1009778B8, &stru_100922980);
    goto LABEL_36;
  }
LABEL_46:

}

void sub_1002B049C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1002B0500(uint64_t a1)
{
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100922840);
  sub_1002B00EC(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), *(unsigned __int8 *)(a1 + 50), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44));
}

void sub_1002B0558(char a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, unsigned int a7, unsigned int a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = a3;
  v21 = a4;
  v11 = a5;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v12 = a7;
  v13 = a8;
  sub_10047D368(&v17, 15);
  BYTE4(v17) = a1;
  DWORD2(v17) = a2;
  v18 = 0uLL;
  *(_QWORD *)&v19 = v11;
  DWORD2(v19) = a6;
  *(_QWORD *)&v20 = v12;
  *((_QWORD *)&v20 + 1) = v13;
  *(_QWORD *)&v18 = sub_100258988((uint64_t)&v22);
  *((_QWORD *)&v18 + 1) = sub_100258988((uint64_t)&v21);
  if (sub_100065478())
  {
    v14 = sub_100065478();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 40))(v14, &v17);
  }
  v15 = sub_1002B5578();
  sub_1002BAF4C(v15);
  v16 = sub_1000419F4();
  sub_100041A34(v16, &stru_1009226B0);
}

void sub_1002B062C(id a1)
{
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100922840);
  sub_1002AFD30(qword_10097AB60);
}

uint64_t sub_1002B066C(unsigned int a1, char a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, unsigned int a7, unint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a4;
  v22 = a3;
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v10 = a1;
  v11 = a5;
  v12 = a7;
  v13 = 1000 * (int)a8 + ((int)(a8 >> 16) >> 16);
  sub_10047D368(&v16, 16);
  *((_QWORD *)&v16 + 1) = v10;
  LOBYTE(v17) = a2;
  *((_QWORD *)&v17 + 1) = 0;
  *(_QWORD *)&v18 = 0;
  *((_QWORD *)&v18 + 1) = v11;
  LODWORD(v19) = a6;
  *((_QWORD *)&v19 + 1) = v12;
  v20 = v13;
  *((_QWORD *)&v17 + 1) = sub_100258988((uint64_t)&v22);
  *(_QWORD *)&v18 = sub_100258988((uint64_t)&v21);
  result = sub_100065478();
  if (result)
  {
    v15 = sub_100065478();
    return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 40))(v15, &v16);
  }
  return result;
}

void sub_1002B0738(uint64_t a1, int a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uuid_t uu;

  v17 = 0;
  v18 = 0;
  sub_10047D368(&v17, 17);
  HIDWORD(v17) = a2;
  v18 = __PAIR64__(a4, a3);
  if (sub_100065478())
  {
    v10 = sub_100065478();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 40))(v10, &v17);
  }
  v11 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 344))(v11) & 1) == 0 && (a4 == 723 || a4 == 705))
  {
    v12 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
      sub_1006DA280(a5, v12);
    if (a5)
    {
      memset(uu, 0, sizeof(uu));
      uuid_clear(uu);
      if (qword_1009778A8 != -1)
        dispatch_once(&qword_1009778A8, &stru_100922880);
      if (sub_10061E090((uint64_t)off_1009778A0, a1, uu) && !uuid_is_null(uu))
      {
        v13 = qword_100999838;
        if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
          sub_1006DA1C8(uu, v13);
        if (qword_1009778B8 != -1)
          dispatch_once(&qword_1009778B8, &stru_100922980);
        v14 = qword_1009778B0;
        v15 = sub_100030DF4(uu);
        v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        sub_100694904(v14, v16, 1);

      }
      else if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
      {
        sub_1006DA254();
      }
    }
  }
}

void sub_1002B0918(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002B0930(uint64_t a1)
{
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100922840);
  sub_1002B0738(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));
}

uint64_t sub_1002B0984(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  void *j;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  id v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  void **v29;
  void *v30;
  void **v31;
  uint64_t v32;
  _QWORD *v35;
  uint64_t (**v36)();
  unsigned int *v37;
  uint64_t (**v38)();
  unsigned int *v39;
  std::string v40;
  std::string v41;
  std::string v42;
  void *__p[2];
  std::string::size_type v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[2];
  _BYTE v50[128];

  v49[0] = 0;
  v49[1] = 0;
  sub_10003415C((uint64_t)v49, a1 + 80);
  v5 = *(_QWORD **)(a1 + 144);
  v35 = (_QWORD *)(a1 + 152);
  if (v5 != (_QWORD *)(a1 + 152))
  {
    do
    {
      v6 = v5[5];
      for (i = *(uint64_t **)(v6 + 32); i != *(uint64_t **)(v6 + 40); ++i)
      {
        v8 = *i;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v9 = *(id *)(v8 + 40);
        v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v45, v50, 16);
        if (v10)
        {
          v11 = *(_QWORD *)v46;
          while (2)
          {
            for (j = 0; j != v10; j = (char *)j + 1)
            {
              if (*(_QWORD *)v46 != v11)
                objc_enumerationMutation(v9);
              v13 = *(void **)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)j);
              if (objc_msgSend(v13, "pipeHandle") == a3)
              {
                sub_10050945C(v5[4], &v40);
                v18 = std::string::append(&v40, "(");
                v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
                v41.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v19;
                v18->__r_.__value_.__l.__size_ = 0;
                v18->__r_.__value_.__r.__words[2] = 0;
                v18->__r_.__value_.__r.__words[0] = 0;
                v20 = *(char *)(v8 + 23);
                if (v20 >= 0)
                  v21 = (const std::string::value_type *)v8;
                else
                  v21 = *(const std::string::value_type **)v8;
                if (v20 >= 0)
                  v22 = *(unsigned __int8 *)(v8 + 23);
                else
                  v22 = *(_QWORD *)(v8 + 8);
                v23 = std::string::append(&v41, v21, v22);
                v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
                v42.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v24;
                v23->__r_.__value_.__l.__size_ = 0;
                v23->__r_.__value_.__r.__words[2] = 0;
                v23->__r_.__value_.__r.__words[0] = 0;
                v25 = std::string::append(&v42, ")");
                v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
                v44 = v25->__r_.__value_.__r.__words[2];
                *(_OWORD *)__p = v26;
                v25->__r_.__value_.__l.__size_ = 0;
                v25->__r_.__value_.__r.__words[2] = 0;
                v25->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v42.__r_.__value_.__l.__data_);
                if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v41.__r_.__value_.__l.__data_);
                if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v40.__r_.__value_.__l.__data_);
                v27 = sub_10005D5A4();
                v28 = SHIBYTE(v44);
                v29 = (void **)__p[0];
                v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "identifier"));
                if (v28 >= 0)
                  v31 = __p;
                else
                  v31 = v29;
                v38 = &off_100918258;
                v39 = 0;
                (*(void (**)(uint64_t, uint64_t, void **, void *, uint64_t (***)()))(*(_QWORD *)v27 + 40))(v27, 4, v31, v30, &v38);
                v38 = &off_100918258;
                if (v39)
                  sub_100056AAC(v39);

                if (SHIBYTE(v44) < 0)
                  operator delete(__p[0]);
                goto LABEL_44;
              }
            }
            v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v45, v50, 16);
            if (v10)
              continue;
            break;
          }
        }

      }
      v14 = (_QWORD *)v5[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v5[2];
          v16 = *v15 == (_QWORD)v5;
          v5 = v15;
        }
        while (!v16);
      }
      v5 = v15;
    }
    while (v15 != v35);
  }
  sub_100034264((uint64_t)v49);
  if (a2)
  {
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100922880);
    v17 = sub_100624724((uint64_t)off_1009778A0, a2);
    v9 = (id)objc_claimAutoreleasedReturnValue(v17);
  }
  else
  {
    v9 = 0;
  }
  v32 = sub_10005D5A4();
  v36 = &off_100918258;
  v37 = 0;
  (*(void (**)(uint64_t, uint64_t, const char *, id, uint64_t (***)()))(*(_QWORD *)v32 + 40))(v32, 4, "com.apple.bluetoothd", v9, &v36);
  v36 = &off_100918258;
  if (v37)
    sub_100056AAC(v37);
LABEL_44:

  return sub_100034234((uint64_t)v49);
}

void sub_1002B0D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned int *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  void *v52;

  if (a13)
    sub_100056AAC(a13);

  sub_100034234((uint64_t)&a52);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B0DD8(uint64_t a1)
{
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100922840);
  return sub_1002B0984(qword_10097AB60, *(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

void sub_1002B0E30(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_1000419F4();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002B0E90;
  v3[3] = &unk_100917378;
  v3[4] = a1;
  sub_100041A34(v2, v3);
}

_BYTE *sub_1002B0E90(_BYTE *result)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t buf[4];
  int v17;

  if (!*(_BYTE *)(*((_QWORD *)result + 4) + 56))
    return result;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  v12 = 0;
  v11 = 0;
  v10 = 0;
  sub_100043758(&v10);
  sub_100173BC8((_DWORD *)&v15 + 1, &v15, (_DWORD *)&v14 + 1, &v14, &v13, 0, 0, 0, &v11);
  sub_10004339C(&v10);
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  sub_10047D368(&v6, 18);
  BYTE4(v6) = HIDWORD(v15) != 0;
  *((_QWORD *)&v6 + 1) = v15;
  *(_QWORD *)&v7 = HIDWORD(v14);
  *((_QWORD *)&v7 + 1) = (HIDWORD(v14) - v15);
  LODWORD(v8) = v14;
  *((_QWORD *)&v8 + 1) = v13;
  if ((_DWORD)v14)
    v1 = (HIDWORD(v14) - (v15 + v13)) / v14;
  else
    v1 = 0;
  *(_QWORD *)&v9 = v1;
  if (!HIDWORD(v15))
    goto LABEL_9;
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_1009228A0);
  if (!sub_1004A83AC((uint64_t)off_100977A50, v11, &v12))
  {
    v4 = v12;
    *((_QWORD *)&v9 + 1) = v12;
    v2 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v17 = v4;
      v3 = "LE Rssi %d";
      goto LABEL_13;
    }
  }
  else
  {
LABEL_9:
    *((_QWORD *)&v9 + 1) = 0;
    v2 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v17 = BYTE4(v6);
      v3 = "LE Rssi read with link connected = %d";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, buf, 8u);
    }
  }
  if (sub_100065478())
  {
    v5 = sub_100065478();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v5 + 40))(v5, &v6);
  }
  return sub_100043728(&v10);
}

void sub_1002B10A0(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1002B10C0(_BYTE *result)
{
  NSObject *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t i;
  int v18;
  BOOL v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  _BYTE *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t buf[16];
  _OWORD v36[7];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[80];
  _BYTE __dst[80];
  _BYTE v47[96];
  int v48;
  _BYTE v49[96];
  int v50;
  _BYTE v51[96];
  int v52;
  _BYTE v53[96];
  int v54;

  if (*(_BYTE *)(*((_QWORD *)result + 4) + 56))
  {
    v33 = 0;
    v34 = 0;
    v31 = 0;
    v32 = 0;
    v30 = 0;
    v29 = 0;
    v54 = 0;
    memset(v53, 0, sizeof(v53));
    v52 = 0;
    memset(v51, 0, sizeof(v51));
    v50 = 0;
    memset(v49, 0, sizeof(v49));
    v48 = 0;
    memset(v47, 0, sizeof(v47));
    memset(__dst, 0, sizeof(__dst));
    memset(v45, 0, sizeof(v45));
    v28 = 0;
    sub_100043758(&v28);
    sub_1001732B4((_DWORD *)&v34 + 1, &v34, (_DWORD *)&v33 + 1, (_DWORD *)&v32 + 1, &v33, __dst, (uint64_t)v53, (uint64_t)v51, &v32, (_DWORD *)&v31 + 1, &v31, &v30, (_DWORD *)&v30 + 1, v45, (uint64_t)v49, (uint64_t)v47, &v29);
    sub_10004339C(&v28);
    v1 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67111424;
      *(_DWORD *)&buf[4] = HIDWORD(v34);
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v34;
      *(_WORD *)&buf[14] = 1024;
      LODWORD(v36[0]) = HIDWORD(v33);
      WORD2(v36[0]) = 1024;
      *(_DWORD *)((char *)v36 + 6) = HIDWORD(v32);
      WORD5(v36[0]) = 1024;
      HIDWORD(v36[0]) = v33;
      LOWORD(v36[1]) = 1024;
      *(_DWORD *)((char *)&v36[1] + 2) = v32;
      WORD3(v36[1]) = 1024;
      DWORD2(v36[1]) = HIDWORD(v31);
      WORD6(v36[1]) = 1024;
      *(_DWORD *)((char *)&v36[1] + 14) = v31;
      WORD1(v36[2]) = 1024;
      DWORD1(v36[2]) = HIDWORD(v30);
      WORD4(v36[2]) = 1024;
      *(_DWORD *)((char *)&v36[2] + 10) = v30;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Stats fetched successfully : lePhy : %d, cumTx : %u, cumRx : %u, coexDen : %x, durationInMs : %u, classicPhy : %d,\t\t\t\t\t\t   cumTx : %u, cumRx : %u, durationInMs : %u, coexDen : %u", buf, 0x3Eu);
    }
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    *(_OWORD *)buf = 0u;
    memset(v36, 0, sizeof(v36));
    v3 = v34;
    v2 = HIDWORD(v34);
    v26 = HIDWORD(v33);
    v4 = v32;
    v23 = HIDWORD(v32);
    v24 = v33;
    v6 = v31;
    v5 = HIDWORD(v31);
    v8 = v30;
    v7 = HIDWORD(v30);
    v9 = v29;
    sub_10047D368(buf, 24);
    v10 = 0;
    v11 = 0;
    *(_DWORD *)&buf[4] = v2;
    *(_DWORD *)&buf[8] = v3;
    memset((char *)v36 + 8, 0, 96);
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    *(_DWORD *)&buf[12] = v26;
    *(_QWORD *)&v36[0] = __PAIR64__(v23, v24);
    *((_QWORD *)&v36[6] + 1) = __PAIR64__(v5, v4);
    *(_QWORD *)&v37 = __PAIR64__(v7, v6);
    DWORD2(v37) = v8;
    v44 = v9;
    do
    {
      v12 = 0;
      v13 = 0;
      v25 = v10;
      v27 = &v53[v10];
      v14 = &v51[v10];
      v15 = &v49[v10];
      v16 = &v47[v10];
      do
      {
        if (v27[v13])
        {
          v4 = v4 & 0xFFFFFFFF00000000 | v27[v13];
          sub_1002B1538((uint64_t)buf, 1, 0);
        }
        if (v14[v13])
        {
          v3 = v3 & 0xFFFFFFFF00000000 | v14[v13];
          sub_1002B1538((uint64_t)buf, 1, 1);
        }
        if (v15[v13])
        {
          v2 = v2 & 0xFFFFFFFF00000000 | v15[v13];
          sub_1002B1538((uint64_t)buf, 2, 0);
        }
        if (v16[v13])
        {
          v9 = v9 & 0xFFFFFFFF00000000 | v16[v13];
          sub_1002B1538((uint64_t)buf, 2, 1);
        }
        ++v13;
        v12 += (uint64_t)&_mh_execute_header;
      }
      while (v13 != 10);
      ++v11;
      v10 = v25 + 10;
    }
    while (v11 != 10);
    for (i = 0; i != 80; i += 4)
    {
      v18 = __dst[i + 2];
      if (*(_WORD *)&__dst[i])
        v19 = 0;
      else
        v19 = v18 == 0;
      if (!v19)
        sub_1002B18D8(buf, 1, *(unsigned __int16 *)&__dst[i], (char)v18);
      v20 = v45[i + 2];
      if (*(_WORD *)&v45[i])
        v21 = 0;
      else
        v21 = v20 == 0;
      if (!v21)
        sub_1002B18D8(buf, 2, *(unsigned __int16 *)&v45[i], (char)v20);
    }
    if (sub_100065478())
    {
      v22 = sub_100065478();
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v22 + 40))(v22, buf);
    }
    sub_1002B4714(buf);
    return sub_100043728(&v28);
  }
  return result;
}

void sub_1002B1500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int16 a21,char a22,char a23)
{
  sub_100043728(&a23);
  _Unwind_Resume(a1);
}

void sub_1002B1538(uint64_t a1, int a2, int a3)
{
  if (a2 == 2)
  {
    if (a3 == 1)
      operator new();
    if (!a3)
      operator new();
  }
  else if (a2 == 1)
  {
    if (a3 == 1)
      operator new();
    if (!a3)
      operator new();
  }
}

void sub_1002B18D8(_QWORD *a1, int a2, int a3, int a4)
{
  unint64_t v7;
  char *v8;
  _DWORD *v9;
  unint64_t v10;
  char *v11;
  _DWORD *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  unint64_t v28;
  char *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  char *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  int v51;
  char *v52;
  char *v53;
  int v54;

  if (a2 == 2)
  {
    v10 = a1[29];
    v11 = (char *)a1[28];
    if ((unint64_t)v11 >= v10)
    {
      v19 = (char *)a1[27];
      v20 = (v11 - v19) >> 2;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62)
        goto LABEL_70;
      v22 = v10 - (_QWORD)v19;
      if (v22 >> 1 > v21)
        v21 = v22 >> 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        v24 = (char *)sub_1002B46E0((uint64_t)(a1 + 29), v23);
        v19 = (char *)a1[27];
        v11 = (char *)a1[28];
      }
      else
      {
        v24 = 0;
      }
      v37 = &v24[4 * v20];
      v38 = &v24[4 * v23];
      *(_DWORD *)v37 = a4;
      v12 = v37 + 4;
      while (v11 != v19)
      {
        v39 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v37 - 1) = v39;
        v37 -= 4;
      }
      a1[27] = v37;
      a1[28] = v12;
      a1[29] = v38;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_DWORD *)v11 = a4;
      v12 = v11 + 4;
    }
    v40 = a1[26];
    a1[28] = v12;
    v41 = (char *)a1[25];
    if ((unint64_t)v41 >= v40)
    {
      v43 = (char *)a1[24];
      v44 = (v41 - v43) >> 2;
      v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 62)
        goto LABEL_70;
      v46 = v40 - (_QWORD)v43;
      if (v46 >> 1 > v45)
        v45 = v46 >> 1;
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
        v47 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v47 = v45;
      if (v47)
      {
        v48 = (char *)sub_1002B46E0((uint64_t)(a1 + 26), v47);
        v43 = (char *)a1[24];
        v41 = (char *)a1[25];
      }
      else
      {
        v48 = 0;
      }
      v52 = &v48[4 * v44];
      v53 = &v48[4 * v47];
      *(_DWORD *)v52 = a3;
      v42 = v52 + 4;
      while (v41 != v43)
      {
        v54 = *((_DWORD *)v41 - 1);
        v41 -= 4;
        *((_DWORD *)v52 - 1) = v54;
        v52 -= 4;
      }
      a1[24] = v52;
      a1[25] = v42;
      a1[26] = v53;
      if (v43)
        operator delete(v43);
    }
    else
    {
      *(_DWORD *)v41 = a3;
      v42 = v41 + 4;
    }
    a1[25] = v42;
  }
  else if (a2 == 1)
  {
    v7 = a1[14];
    v8 = (char *)a1[13];
    if ((unint64_t)v8 >= v7)
    {
      v13 = (char *)a1[12];
      v14 = (v8 - v13) >> 2;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62)
        goto LABEL_70;
      v16 = v7 - (_QWORD)v13;
      if (v16 >> 1 > v15)
        v15 = v16 >> 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
        v17 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        v18 = (char *)sub_1002B46E0((uint64_t)(a1 + 14), v17);
        v13 = (char *)a1[12];
        v8 = (char *)a1[13];
      }
      else
      {
        v18 = 0;
      }
      v25 = &v18[4 * v14];
      v26 = &v18[4 * v17];
      *(_DWORD *)v25 = a4;
      v9 = v25 + 4;
      while (v8 != v13)
      {
        v27 = *((_DWORD *)v8 - 1);
        v8 -= 4;
        *((_DWORD *)v25 - 1) = v27;
        v25 -= 4;
      }
      a1[12] = v25;
      a1[13] = v9;
      a1[14] = v26;
      if (v13)
        operator delete(v13);
    }
    else
    {
      *(_DWORD *)v8 = a4;
      v9 = v8 + 4;
    }
    v28 = a1[11];
    a1[13] = v9;
    v29 = (char *)a1[10];
    if ((unint64_t)v29 < v28)
    {
      *(_DWORD *)v29 = a3;
      v30 = v29 + 4;
LABEL_61:
      a1[10] = v30;
      return;
    }
    v31 = (char *)a1[9];
    v32 = (v29 - v31) >> 2;
    v33 = v32 + 1;
    if (!((unint64_t)(v32 + 1) >> 62))
    {
      v34 = v28 - (_QWORD)v31;
      if (v34 >> 1 > v33)
        v33 = v34 >> 1;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
        v35 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      if (v35)
      {
        v36 = (char *)sub_1002B46E0((uint64_t)(a1 + 11), v35);
        v31 = (char *)a1[9];
        v29 = (char *)a1[10];
      }
      else
      {
        v36 = 0;
      }
      v49 = &v36[4 * v32];
      v50 = &v36[4 * v35];
      *(_DWORD *)v49 = a3;
      v30 = v49 + 4;
      while (v29 != v31)
      {
        v51 = *((_DWORD *)v29 - 1);
        v29 -= 4;
        *((_DWORD *)v49 - 1) = v51;
        v49 -= 4;
      }
      a1[9] = v49;
      a1[10] = v30;
      a1[11] = v50;
      if (v31)
        operator delete(v31);
      goto LABEL_61;
    }
LABEL_70:
    abort();
  }
}

uint64_t sub_1002B1BCC(_QWORD *a1, const void **a2)
{
  _QWORD *v4;
  char v5;
  const void *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 **v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  const void *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  id v19;
  NSObject *v20;
  unsigned __int8 *v21;
  unsigned __int8 **v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  unsigned __int8 *v28;
  const void *v29;
  const void *v30;
  int v31;
  unsigned __int8 *v32;
  const void **v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  BOOL v39;
  _QWORD *v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t i;
  unsigned __int8 *v48;
  _QWORD *v49;
  _QWORD v50[2];
  uint8_t buf[4];
  unsigned __int8 *v52;

  v50[0] = 0;
  v50[1] = 0;
  sub_10003415C((uint64_t)v50, (uint64_t)(a1 + 10));
  v4 = (_QWORD *)a1[18];
  v49 = a1 + 19;
  if (v4 != a1 + 19)
  {
    v5 = *((_BYTE *)a2 + 23);
    if (v5 >= 0)
      v6 = (const void *)*((unsigned __int8 *)a2 + 23);
    else
      v6 = a2[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a2;
    else
      v7 = (unsigned __int8 *)*a2;
    do
    {
      v8 = v4[5];
      v9 = *(unsigned __int8 ***)(v8 + 32);
      v10 = *(unsigned __int8 ***)(v8 + 40);
      while (v9 != v10)
      {
        v11 = *v9;
        v12 = (*v9)[23];
        if ((v12 & 0x80u) == 0)
          v13 = (const void *)(*v9)[23];
        else
          v13 = (const void *)*((_QWORD *)*v9 + 1);
        if (v13 == v6)
        {
          if ((v12 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v11, v7, *((_QWORD *)*v9 + 1)))
            {
LABEL_29:
              if (!v11[39] && os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_FAULT))
                sub_1006DA390();
              v19 = objc_msgSend(*((id *)v11 + 5), "count");
              v20 = qword_100999838;
              if (v19 && os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_FAULT))
              {
                if (*((char *)a2 + 23) >= 0)
                  v48 = (unsigned __int8 *)a2;
                else
                  v48 = (unsigned __int8 *)*a2;
                *(_DWORD *)buf = 136446210;
                v52 = v48;
                _os_log_fault_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Endpoint \"%{public}s\" has been unregistered with pipes remaining!", buf, 0xCu);
                v20 = qword_100999838;
              }
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
              {
                if (*((char *)a2 + 23) >= 0)
                  v21 = (unsigned __int8 *)a2;
                else
                  v21 = (unsigned __int8 *)*a2;
                *(_DWORD *)buf = 136446210;
                v52 = v21;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Successfully unregistered endpoint \"%{public}s\"", buf, 0xCu);
              }
              v22 = *(unsigned __int8 ***)(v8 + 40);
              v23 = (char *)v22 - (char *)(v9 + 1);
              if (v22 != v9 + 1)
                memmove(v9, v9 + 1, (char *)v22 - (char *)(v9 + 1));
              *(_QWORD *)(v8 + 40) = (char *)v9 + v23;

              if ((char)v11[23] < 0)
                operator delete(*(void **)v11);
              operator delete();
            }
          }
          else
          {
            if (!(*v9)[23])
              goto LABEL_29;
            v14 = v7;
            v15 = *v9;
            while (*v15 == *v14)
            {
              ++v15;
              ++v14;
              if (!--v12)
                goto LABEL_29;
            }
          }
        }
        ++v9;
      }
      v16 = (_QWORD *)v4[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v4[2];
          v18 = *v17 == (_QWORD)v4;
          v4 = v17;
        }
        while (!v18);
      }
      v4 = v17;
    }
    while (v17 != v49);
  }
  v24 = a1[21];
  v25 = a1[22];
  if (v24 == v25)
    return sub_100034234((uint64_t)v50);
  v26 = *((unsigned __int8 *)a2 + 23);
  v28 = (unsigned __int8 *)*a2;
  v27 = (size_t)a2[1];
  if ((v26 & 0x80u) == 0)
    v29 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v29 = a2[1];
  while (1)
  {
    v30 = (const void *)*(unsigned __int8 *)(v24 + 31);
    v31 = (char)v30;
    if ((char)v30 < 0)
      v30 = *(const void **)(v24 + 16);
    if (v29 != v30)
      goto LABEL_61;
    v32 = v31 >= 0 ? (unsigned __int8 *)(v24 + 8) : *(unsigned __int8 **)(v24 + 8);
    if ((v26 & 0x80) != 0)
      break;
    if (!(_DWORD)v26)
      goto LABEL_63;
    v33 = a2;
    v34 = v26;
    while (*(unsigned __int8 *)v33 == *v32)
    {
      v33 = (const void **)((char *)v33 + 1);
      ++v32;
      if (!--v34)
        goto LABEL_63;
    }
LABEL_61:
    v24 += 48;
    if (v24 == v25)
      return sub_100034234((uint64_t)v50);
  }
  if (memcmp(v28, v32, v27))
    goto LABEL_61;
LABEL_63:
  v35 = (_QWORD *)*v49;
  if (!*v49)
    goto LABEL_74;
  v36 = *(_QWORD *)v24;
  v37 = a1 + 19;
  do
  {
    v38 = v35[4];
    v39 = v38 >= v36;
    if (v38 >= v36)
      v40 = v35;
    else
      v40 = v35 + 1;
    if (v39)
      v37 = v35;
    v35 = (_QWORD *)*v40;
  }
  while (*v40);
  if (v37 != v49 && v36 >= v37[4])
  {
    v42 = sub_1002AC064((uint64_t)a1, v36, (_QWORD *)(v24 + 8), *(_DWORD *)(v24 + 32), *(_DWORD *)(v24 + 36), *(_DWORD *)(v24 + 40), *(unsigned __int8 *)(v24 + 44), 0, 0);
    v43 = *(_QWORD *)v37[5];
    if (v43)
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v43 + 24))(v43, v24 + 8, v42);
  }
  else
  {
LABEL_74:
    v41 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_FAULT))
      sub_1006DA318(a2, v26 >> 7, v41);
  }
  sub_1002B4EF0((uint64_t)buf, v24 + 48, a1[22], v24);
  v45 = v44;
  for (i = a1[22]; i != v45; i -= 48)
  {
    if (*(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  a1[22] = v45;
  return sub_100034234((uint64_t)v50);
}

void sub_1002B20FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002B212C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5, unsigned int a6, int a7)
{
  id v10;
  void *v11;
  id v12;
  unsigned __int8 *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned __int8 **v20;
  unsigned __int8 **v21;
  unsigned __int8 *v22;
  signed __int8 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  const char *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  void *v37;
  PipeMapping *v38;
  NSObject *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  BOOL v45;
  unsigned __int8 *v46;
  char *v47;
  unsigned __int8 *v48;
  char *v49;
  BOOL v50;
  char v51;
  void *v52;
  PipeMapping *v53;
  NSObject *v54;
  unsigned __int8 *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  id v61;
  void *v62;
  _BOOL4 v63;
  uint64_t v64;
  id v65;
  void *v66;
  int v67;
  NSObject *v68;
  uint64_t v69;
  NSObject *v70;
  int v71;
  NSObject *v72;
  NSObject *v73;
  NSObject *v74;
  NSObject *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  const char *v82;
  void *v84;
  int v85;
  unsigned int v89;
  unsigned __int8 v90;
  _QWORD v91[2];
  _QWORD v92[2];
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  unsigned __int16 v96;
  _QWORD v97[2];
  uuid_t uu;
  uint8_t buf[56];

  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100922880);
  v10 = sub_100624724((uint64_t)off_1009778A0, a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v96 = 2031;
  v84 = v11;
  if (!v11)
  {
    v70 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a3;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a5;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = a6;
      _os_log_error_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "Connection manager wasn't tracking a device for connection handle %p, pipeID 0x%x, type %d, priority %d", buf, 0x1Eu);
    }
    buf[0] = 0;
    sub_100043758(buf);
    v71 = sub_10021F3D0(a2);
    sub_10004339C(buf);
    if (v71)
    {
      if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
        sub_1006DA3F4();
      v79 = sub_100027F68();
      sub_100576500(v79, 1);
    }
    sub_100043728(buf);
    goto LABEL_120;
  }
  if (a7)
  {
    memset(buf, 0, sizeof(buf));
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100922880);
    sub_1006167B8((uint64_t)off_1009778A0, v11, (uint64_t)buf);
    if (*(_QWORD *)buf)
    {
      v12 = objc_alloc((Class)NSString);
      if ((a4[23] & 0x80u) == 0)
        v13 = a4;
      else
        v13 = *(unsigned __int8 **)a4;
      v14 = objc_msgSend(v12, "initWithUTF8String:", v13);
      v15 = objc_msgSend(*(id *)&buf[8], "mutableCopy");
      if ((objc_msgSend(v15, "containsObject:", v14) & 1) == 0)
        objc_msgSend(v15, "addObject:", v14);
      objc_storeStrong((id *)&buf[8], v15);
      if (qword_1009778A8 != -1)
        dispatch_once(&qword_1009778A8, &stru_100922880);
      v16 = off_1009778A0;
      v92[0] = *(id *)buf;
      v92[1] = *(id *)&buf[8];
      v93 = *(_OWORD *)&buf[16];
      v94 = *(_OWORD *)&buf[32];
      v95 = *(_QWORD *)&buf[48];
      sub_1006168D8((uint64_t)v16, v11, (uint64_t)v92);

    }
  }
  v91[0] = 0;
  v91[1] = 0;
  v17 = a1;
  sub_10003415C((uint64_t)v91, a1 + 80);
  v18 = *(_QWORD **)(a1 + 144);
  if (v18 == (_QWORD *)(a1 + 152))
    goto LABEL_98;
  v80 = (int)(a6 - 1);
  v81 = a3;
  do
  {
    v19 = (_QWORD *)v18[5];
    v20 = (unsigned __int8 **)v19[4];
    v21 = (unsigned __int8 **)v19[5];
    while (v20 != v21)
    {
      v22 = *v20;
      v23 = (*v20)[23];
      if (v23 >= 0)
        v24 = (*v20)[23];
      else
        v24 = *((_QWORD *)*v20 + 1);
      v25 = a4[23];
      v26 = (char)v25;
      if ((v25 & 0x80u) != 0)
        v25 = *((_QWORD *)a4 + 1);
      if (v24 != v25)
        goto LABEL_91;
      if (v26 >= 0)
        v27 = a4;
      else
        v27 = *(unsigned __int8 **)a4;
      if (((*v20)[23] & 0x80) != 0)
      {
        if (memcmp(*(const void **)v22, v27, *((_QWORD *)*v20 + 1)))
          goto LABEL_91;
      }
      else if ((*v20)[23])
      {
        v28 = *v20;
        v29 = (*v20)[23];
        while (*v28 == *v27)
        {
          ++v28;
          ++v27;
          if (!--v29)
            goto LABEL_37;
        }
        goto LABEL_91;
      }
LABEL_37:
      if (v22[39])
      {
        v72 = qword_100999838;
        v11 = v84;
        if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
        {
          if (v23 < 0)
            v22 = *(unsigned __int8 **)v22;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v22;
          _os_log_error_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_ERROR, "Ignoring pipe event as endpoint \"%{public}s\" is pending deletion", buf, 0xCu);
        }
        goto LABEL_117;
      }
      v90 = 0;
      v89 = 0;
      v11 = v84;
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100922920);
      sub_10066019C((uint64_t)off_1009778C0, v84, &v90, &v89);
      if ((v89 & 0x100) != 0)
        v30 = 1;
      else
        v30 = 3;
      if ((v89 & 0x80) != 0)
        v31 = 2;
      else
        v31 = v30;
      v85 = v31;
      v32 = *((_DWORD *)v22 + 8);
      if ((v32 - 1) >= 2)
      {
        *(_DWORD *)uu = 0;
        v36 = sub_1002B5578();
        if (sub_1002B675C(v36, a2, a3, *((unsigned int *)v19 + 15), (uint64_t)uu, a6, v22[37]))
        {
          v73 = qword_100999838;
          if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
          {
            if ((a4[23] & 0x80u) == 0)
              v76 = a4;
            else
              v76 = *(unsigned __int8 **)a4;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = v76;
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v84;
            _os_log_error_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "Failed to register pipe for endpoint \"%{public}s\" on device \"%{public}@\"", buf, 0x16u);
          }
          goto LABEL_117;
        }
        v37 = (void *)*((_QWORD *)v22 + 5);
        v38 = -[PipeMapping initWithIdentifier:handle:]([PipeMapping alloc], "initWithIdentifier:handle:", v84, a3);
        objc_msgSend(v37, "addObject:", v38);

        v39 = qword_100999838;
        if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
        {
          if ((a4[23] & 0x80u) == 0)
            v40 = a4;
          else
            v40 = *(unsigned __int8 **)a4;
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = a3;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = v40;
          *(_WORD *)&buf[18] = 2114;
          *(_QWORD *)&buf[20] = v84;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = a6;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Successfully created pipe 0x%04X to endpoint \"%{public}s\" on device \"%{public}@\" with priority %d", buf, 0x22u);
        }
        v17 = a1;
        if (*v19)
          (**(void (***)(_QWORD, unsigned __int8 *, void *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t))*v19)(*v19, a4, v84, a5, a6, *(unsigned int *)uu, v22[37], v90, __PAIR64__(v85, v89));
      }
      else
      {
        if (v32 == 1)
          v33 = "skywalk";
        else
          v33 = "networkrelay";
        if (v32 == 2 && (_os_feature_enabled_impl("terminus", "BluetoothPacketParser") & 1) == 0)
        {
          v75 = qword_100999838;
          if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_FAULT))
          {
            if ((a4[23] & 0x80u) == 0)
              v78 = a4;
            else
              v78 = *(unsigned __int8 **)a4;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = v33;
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v78;
            *(_WORD *)&buf[22] = 2114;
            *(_QWORD *)&buf[24] = v84;
            _os_log_fault_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_FAULT, "Failed to register %{public}s pipe for endpoint \"%{public}s\" on device \"%{public}@\" due to missing feature", buf, 0x20u);
          }
          goto LABEL_117;
        }
        memset(uu, 0, sizeof(uu));
        v97[0] = 0;
        v97[1] = 0;
        objc_msgSend(v84, "getUUIDBytes:", v97);
        v82 = v33;
        if (*((_DWORD *)v22 + 8) == 2)
        {
          uuid_clear(uu);
          v34 = sub_1002B5578();
          v35 = sub_1002B6B70(v34, a2, a3, a6, &v96, v22[37], 1, (uint64_t)v97);
        }
        else
        {
          v41 = sub_1002B5578();
          v42 = *((_DWORD *)v19 + 15);
          v43 = v22[37];
          v44 = a4[23];
          v45 = (v44 & 0x80u) != 0;
          if ((v44 & 0x80u) != 0)
            v44 = *((_QWORD *)a4 + 1);
          if (v45)
            v46 = *(unsigned __int8 **)a4;
          else
            v46 = a4;
          v47 = (char *)&v46[v44];
          if (v44 >= 8)
          {
            v48 = v46;
            do
            {
              v49 = (char *)memchr(v48, 116, v44 - 7);
              if (!v49)
                break;
              if (*(_QWORD *)v49 == 0x73756E696D726574)
                goto LABEL_73;
              v48 = (unsigned __int8 *)(v49 + 1);
              v44 = v47 - (char *)v48;
            }
            while (v47 - (char *)v48 > 7);
          }
          v49 = v47;
LABEL_73:
          v50 = v49 == v47 || v49 - (char *)v46 == -1;
          v51 = !v50;
          a3 = v81;
          v11 = v84;
          v35 = sub_1002B7B20(v41, a2, v81, v42, (uint64_t)uu, a6, &v96, v43 != 0, v51);
          v17 = a1;
        }
        if (v35)
        {
          v74 = qword_100999838;
          if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_ERROR))
          {
            if ((a4[23] & 0x80u) == 0)
              v77 = a4;
            else
              v77 = *(unsigned __int8 **)a4;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = v82;
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v77;
            *(_WORD *)&buf[22] = 2114;
            *(_QWORD *)&buf[24] = v11;
            _os_log_error_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "Failed to register %{public}s pipe for endpoint \"%{public}s\" on device \"%{public}@\"", buf, 0x20u);
          }
LABEL_117:
          sub_1002B2D8C(v17, v81);
          goto LABEL_119;
        }
        v52 = (void *)*((_QWORD *)v22 + 5);
        v53 = -[PipeMapping initWithIdentifier:handle:]([PipeMapping alloc], "initWithIdentifier:handle:", v11, a3);
        objc_msgSend(v52, "addObject:", v53);

        v54 = qword_100999838;
        if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
        {
          v55 = *(unsigned __int8 **)a4;
          if ((a4[23] & 0x80u) == 0)
            v55 = a4;
          if (v80 > 3)
            v56 = 1;
          else
            v56 = dword_10073D4A0[v80];
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = v82;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = a3;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v55;
          *(_WORD *)&buf[28] = 2114;
          *(_QWORD *)&buf[30] = v11;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = a6;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v56;
          *(_WORD *)&buf[50] = 1024;
          *(_DWORD *)&buf[52] = v96;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Successfully created %{public}s pipe 0x%04X to endpoint \"%{public}s\" on device \"%{public}@\"  with priority [%d, stack %d] and MTU=%d", buf, 0x38u);
        }
        v17 = a1;
        if (*v19)
          (*(void (**)(_QWORD, unsigned __int8 *, void *, _QWORD, _QWORD, unsigned __int8 *, _QWORD, _QWORD, unint64_t))(*(_QWORD *)*v19 + 8))(*v19, a4, v11, a5, a6, uu, v22[37], v90, __PAIR64__(v85, v89));
      }
      sub_1002B2E24(v17, a2);
      v57 = sub_1000438A4();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v57 + 976))(v57, a2, 1, 1);
      v58 = sub_1000438A4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v58 + 568))(v58, 1, 1);
      v21 = (unsigned __int8 **)v19[5];
LABEL_91:
      ++v20;
    }
    v59 = (_QWORD *)v18[1];
    if (v59)
    {
      do
      {
        v60 = v59;
        v59 = (_QWORD *)*v59;
      }
      while (v59);
    }
    else
    {
      do
      {
        v60 = (_QWORD *)v18[2];
        v50 = *v60 == (_QWORD)v18;
        v18 = v60;
      }
      while (!v50);
    }
    v18 = v60;
  }
  while (v60 != (_QWORD *)(a1 + 152));
LABEL_98:
  v11 = v84;
  sub_1002B2D8C(v17, a3);
  sub_100034264((uint64_t)v91);
  v61 = sub_1002ADA2C(a1);
  v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
  v63 = objc_msgSend(v62, "count") == (id)1;

  if (v63)
  {
    v64 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64 + 864))(v64, 1, 1);
  }
  if (!*(_BYTE *)(a1 + 62))
  {
    v65 = sub_1002ADA2C(a1);
    v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
    if (objc_msgSend(v66, "count"))
    {
      v67 = sub_1002ADC34(a1);

      if (v67)
      {
        v68 = qword_100999838;
        if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_INFO, "Peripheral connection exists, enabling asymmetric peripheral latency", buf, 2u);
        }
        v69 = sub_1000438A4();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v69 + 816))(v69, 1);
        *(_BYTE *)(a1 + 62) = 1;
      }
    }
    else
    {

    }
  }
LABEL_119:
  sub_100034234((uint64_t)v91);
LABEL_120:

}

void sub_1002B2CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_100034234((uint64_t)&a27);

  _Unwind_Resume(a1);
}

_BYTE *sub_1002B2D8C(uint64_t a1, int a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int64_t v9;
  char v11;

  v11 = 0;
  sub_100043758(&v11);
  v5 = *(char **)(a1 + 192);
  v4 = *(char **)(a1 + 200);
  if (v5 != v4)
  {
    v6 = 0;
    while (*(unsigned __int16 *)&v5[v6] != a2)
    {
      v6 += 2;
      if (&v5[v6] == v4)
        return sub_100043728(&v11);
    }
    v7 = &v5[v6];
    v8 = &v5[v6 + 2];
    v9 = v4 - v8;
    if (v4 != v8)
      memmove(&v5[v6], v8, v4 - v8);
    *(_QWORD *)(a1 + 200) = &v7[v9];
  }
  return sub_100043728(&v11);
}

uint64_t sub_1002B2E24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  NSObject *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint8_t v11[13];
  char v12;
  unsigned __int8 v13;
  char v14;

  v14 = 0;
  v13 = 1;
  v12 = 1;
  v4 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 120))(v4) & 1) != 0 || (sub_1000438A4(), sub_100333630()))
  {
    v5 = sub_10034FE84();
    result = (*(uint64_t (**)(uint64_t, _QWORD, char *, unsigned __int8 *, char *))(*(_QWORD *)v5 + 8))(v5, *(_QWORD *)(a1 + 64), &v14, &v13, &v12);
    if (v13 != *(unsigned __int8 *)(a1 + 72))
    {
      *(_BYTE *)(a1 + 72) = v13;
      v7 = qword_100999838;
      if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Updating power settings for BlackMagick", v11, 2u);
      }
      v8 = sub_1000438A4();
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 968))(v8, a2, v13);
    }
  }
  else
  {
    v9 = objc_msgSend(*(id *)(a1 + 64), "isEqualToString:", CFSTR("us"));
    v10 = sub_1000438A4();
    return (*(uint64_t (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v10 + 968))(v10, a2, v9 != 0);
  }
  return result;
}

void sub_1002B2F50(_QWORD *a1, __int16 a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  _WORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;

  v4 = (uint64_t)(a1 + 26);
  v5 = a1[26];
  v6 = (char *)a1[25];
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)a1[24];
    v9 = v6 - v8;
    if (v6 - v8 <= -3)
      abort();
    v10 = v9 >> 1;
    v11 = v5 - (_QWORD)v8;
    if (v11 <= (v9 >> 1) + 1)
      v12 = v10 + 1;
    else
      v12 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      v14 = (char *)sub_1002B54AC(v4, v13);
      v8 = (char *)a1[24];
      v6 = (char *)a1[25];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v10];
    v16 = &v14[2 * v13];
    *(_WORD *)v15 = a2;
    v7 = v15 + 2;
    while (v6 != v8)
    {
      v17 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v15 - 1) = v17;
      v15 -= 2;
    }
    a1[24] = v15;
    a1[25] = v7;
    a1[26] = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_WORD *)v6 = a2;
    v7 = v6 + 2;
  }
  a1[25] = v7;
}

uint64_t sub_1002B3024(uint64_t a1, int a2, unsigned int a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t **i;
  uint64_t *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *j;
  void *v12;
  id v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  id v25;
  void *v26;
  _BOOL4 v27;
  uint64_t v28;
  _QWORD *v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _QWORD v37[2];
  uint8_t buf[4];
  unsigned int v39;
  __int16 v40;
  uint64_t *v41;
  __int16 v42;
  void *v43;
  _BYTE v44[128];

  v37[0] = 0;
  v37[1] = 0;
  sub_10003415C((uint64_t)v37, a1 + 80);
  v4 = *(_QWORD **)(a1 + 144);
  if (v4 != (_QWORD *)(a1 + 152))
  {
    do
    {
      v31 = v4;
      v5 = (uint64_t *)v4[5];
      for (i = (uint64_t **)v5[4]; i != (uint64_t **)v5[5]; ++i)
      {
        v7 = *i;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v8 = (id)v7[5];
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v33, v44, 16);
        if (v9)
        {
          v10 = *(_QWORD *)v34;
          while (2)
          {
            for (j = 0; j != v9; j = (char *)j + 1)
            {
              if (*(_QWORD *)v34 != v10)
                objc_enumerationMutation(v8);
              v12 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * (_QWORD)j);
              if (objc_msgSend(v12, "pipeHandle") == a2)
              {
                v14 = qword_100999838;
                if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
                {
                  v15 = objc_msgSend(v12, "pipeHandle");
                  v16 = v7;
                  if (*((char *)v7 + 23) < 0)
                    v16 = (uint64_t *)*v7;
                  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "identifier"));
                  *(_DWORD *)buf = 67109634;
                  v39 = v15;
                  v40 = 2082;
                  v41 = v16;
                  v42 = 2114;
                  v43 = v17;
                  _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Destroying pipe 0x%04x from endpoint \"%{public}s\" on device \"%{public}@\"", buf, 0x1Cu);

                }
                v18 = sub_1002B5578();
                sub_1002B888C(v18, (__int16)objc_msgSend(v12, "pipeHandle"));
                v19 = *v5;
                if (*v5)
                {
                  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "identifier"));
                  (*(void (**)(uint64_t, uint64_t *, void *, _QWORD))(*(_QWORD *)v19 + 16))(v19, v7, v20, a3);

                }
                v13 = v12;

                if (v13)
                  objc_msgSend((id)v7[5], "removeObject:", v13);
                goto LABEL_21;
              }
            }
            v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v33, v44, 16);
            if (v9)
              continue;
            break;
          }
        }

        v13 = 0;
LABEL_21:

      }
      v21 = v31;
      v22 = (_QWORD *)v31[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v21[2];
          v24 = *v23 == (_QWORD)v21;
          v21 = v23;
        }
        while (!v24);
      }
      v4 = v23;
    }
    while (v23 != (_QWORD *)(a1 + 152));
  }
  sub_100034264((uint64_t)v37);
  v25 = sub_1002ADA2C(a1);
  v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
  v27 = objc_msgSend(v26, "count") == 0;

  if (v27)
  {
    v28 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 864))(v28, 2, 1);
  }
  return sub_100034234((uint64_t)v37);
}

void sub_1002B3328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  va_list va;

  va_start(va, a17);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1002B3380(uint64_t a1, int a2, const void *a3, unsigned int a4, __int16 a5, int a6)
{
  unsigned __int16 *v11;
  unsigned __int16 *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  __int16 v17;
  __int16 v18;
  uint8_t buf[8];

  v12 = *(unsigned __int16 **)(a1 + 192);
  v11 = *(unsigned __int16 **)(a1 + 200);
  if (v12 != v11)
  {
    while (*v12 != a2)
    {
      if (++v12 == v11)
      {
        v12 = *(unsigned __int16 **)(a1 + 200);
        break;
      }
    }
  }
  if (v12 != v11)
  {
    v13 = qword_100999838;
    if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Queueing initial data on pipe 0x%04x as the scalable pipe hasn't finished registration", buf, 8u);
    }
    sub_1000419F4();
    operator new();
  }
  v14 = sub_1002B5578();
  sub_1002B9008(v14, a2, a3, a4, a5, 1, a6);
  if (a6)
  {
    v15 = sub_1000419F4();
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1002B35C4;
    v16[3] = &unk_100918130;
    v17 = a2;
    v18 = a4;
    sub_100041A34(v15, v16);
  }
}

void sub_1002B3574()
{
  operator delete();
}

uint64_t sub_1002B35C4(uint64_t a1)
{
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100922840);
  return sub_1002B0984(qword_10097AB60, 0, *(unsigned __int16 *)(a1 + 32));
}

void sub_1002B361C(uint64_t a1, void *a2, int a3, int a4, int a5)
{
  id v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD v12[5];
  uint8_t buf[4];
  id v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;

  v9 = a2;
  v10 = qword_100999838;
  if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138544130;
    v14 = v9;
    v15 = 1024;
    v16 = a3;
    v17 = 1024;
    v18 = a4;
    v19 = 1024;
    v20 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CountryCode callback: %{public}@ %d %d %d", buf, 0x1Eu);
  }
  if (sub_1002AAF20(a1))
  {
    v11 = sub_1000419F4();
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1002B3760;
    v12[3] = &unk_100917378;
    v12[4] = a1;
    sub_100041A34(v11, v12);
  }

}

void sub_1002B3748(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002B3760(uint64_t a1)
{
  sub_1002AEDBC(*(_QWORD *)(a1 + 32));
}

void sub_1002B3768(uint64_t a1, void *a2, int a3, int a4, int a5)
{
  sub_1002B361C(a1 - 40, a2, a3, a4, a5);
}

void sub_1002B3770(uint64_t a1, int a2)
{
  NSObject *v2;
  _QWORD v3[6];
  _QWORD v4[3];
  int v5;

  v4[0] = 0;
  v4[1] = v4;
  v4[2] = 0x2020000000;
  v5 = a2;
  v2 = *(NSObject **)(a1 + 48);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002B37EC;
  v3[3] = &unk_100919528;
  v3[4] = v4;
  v3[5] = a1;
  dispatch_async(v2, v3);
  _Block_object_dispose(v4, 8);
}

void sub_1002B37EC(uint64_t a1)
{
  sub_1002B3800(*(_QWORD *)(a1 + 40), (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
}

void sub_1002B3800(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;

  v4 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 312))(v4))
  {
    if (!*(_BYTE *)(a1 + 56))
    {
      v10 = qword_100999838;
      if (!os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
        return;
      v20 = 0;
      v11 = "Stack is not ready, cannot update power source";
      v12 = (uint8_t *)&v20;
      goto LABEL_13;
    }
    if (*a2 == 2)
    {
      *(_BYTE *)(a1 + 58) = 1;
      if (*(_QWORD *)(a1 + 216))
      {
        v5 = *(unsigned __int8 *)(a1 + 59);
        v6 = *(unsigned __int8 *)(a1 + 60);
        v7 = *(char *)(a1 + 61);
        v8 = sub_1000438A4();
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 88))(v8, 3, 0, v5, v6, v7);
        v9 = sub_1000438A4();
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 88))(v9, 4, 0, v5, v6, v7);
        v10 = qword_100999838;
        if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
        {
          v19 = 0;
          v11 = "Wireless charging started: PCAP limits bypassed";
          v12 = (uint8_t *)&v19;
LABEL_13:
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, v12, 2u);
        }
      }
    }
    else if (*(_BYTE *)(a1 + 58))
    {
      *(_BYTE *)(a1 + 58) = 0;
      if (*(_QWORD *)(a1 + 216))
      {
        v13 = *(unsigned __int8 *)(a1 + 59);
        v14 = *(unsigned __int8 *)(a1 + 60);
        v15 = *(char *)(a1 + 61);
        v16 = sub_1000438A4();
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 88))(v16, 3, 0, v13, v14, v15);
        v17 = sub_1000438A4();
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 88))(v17, 4, 0, v13, v14, v15);
        v10 = qword_100999838;
        if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
        {
          v18 = 0;
          v11 = "Wireless charging stopped: PCAP limits enforced";
          v12 = (uint8_t *)&v18;
          goto LABEL_13;
        }
      }
    }
  }
}

uint64_t sub_1002B39D8(uint64_t result, _BYTE *a2, _DWORD *a3)
{
  *a2 = *(_BYTE *)(result + 224);
  *a3 = *(_DWORD *)(result + 228);
  return result;
}

uint64_t sub_1002B39EC(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  NSObject *v4;
  _BYTE *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  _QWORD *i;
  uint64_t *v10;
  NSObject *v11;
  uint64_t *v12;
  int v13;
  const char *v14;
  BOOL v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  id v22;
  id v23;
  uint64_t v24;
  void *j;
  NSObject *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _QWORD v43[2];
  _BYTE v44[128];
  _BYTE buf[12];
  __int16 v46;
  uint64_t v47;
  char v48;
  uint8_t v49[4];
  _BYTE *v50;

  v2 = qword_100999838;
  if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ LE Scalable Pipes -------------------", buf, 2u);
    v2 = qword_100999838;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Registered Sessions:", buf, 2u);
  }
  v43[0] = 0;
  v43[1] = 0;
  sub_10003415C((uint64_t)v43, a1 + 80);
  v3 = *(_QWORD **)(a1 + 144);
  v35 = (_QWORD *)(a1 + 152);
  if (v3 != (_QWORD *)(a1 + 152))
  {
    do
    {
      v37 = v3[5];
      v4 = qword_100999838;
      if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000340DC(v3[4], (uint64_t)buf);
        v5 = buf;
        if (v48 < 0)
          v5 = *(_BYTE **)buf;
        *(_DWORD *)v49 = 136446210;
        v50 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: \"%{public}s\"", v49, 0xCu);
        if (v48 < 0)
          operator delete(*(void **)buf);
        v4 = qword_100999838;
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v6 = "Yes";
        if (!*(_BYTE *)(v37 + 56))
          v6 = "No";
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:    Zombied: %{public}s", buf, 0xCu);
        v4 = qword_100999838;
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v7 = "Yes";
        if (!*(_BYTE *)(v37 + 57))
          v7 = "No";
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v7;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:    Link requirement:  %{public}s", buf, 0xCu);
        v4 = qword_100999838;
      }
      v36 = v3;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:    Endpoints:", buf, 2u);
      }
      v8 = v37;
      for (i = *(_QWORD **)(v37 + 32); i != *(_QWORD **)(v8 + 40); i = v38 + 1)
      {
        v10 = (uint64_t *)*i;
        v11 = qword_100999838;
        if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
        {
          v12 = v10;
          if (*((char *)v10 + 23) < 0)
            v12 = (uint64_t *)*v10;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:       \"%{public}s\"", buf, 0xCu);
          v11 = qword_100999838;
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v13 = *((_DWORD *)v10 + 6);
          v14 = "client";
          if (v13 == 1)
            v14 = "server";
          v15 = v13 == 2;
          v16 = "peer-to-peer";
          if (!v15)
            v16 = v14;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v16;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:          Type: %{public}s", buf, 0xCu);
          v11 = qword_100999838;
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v17 = *((int *)v10 + 7);
          if (v17 < 5 && ((0x17u >> v17) & 1) != 0)
          {
            v18 = (&off_1009229C0)[v17];
          }
          else
          {
            v15 = (_DWORD)v17 == 3;
            v18 = "unknown";
            if (v15)
              v18 = "isochronous";
          }
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v18;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:          Priority: %{public}s", buf, 0xCu);
          v11 = qword_100999838;
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v19 = "Yes";
          if (!*((_BYTE *)v10 + 39))
            v19 = "No";
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v19;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:          Zombied: %{public}s", buf, 0xCu);
          v11 = qword_100999838;
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v20 = "Non-";
          if (!*((_BYTE *)v10 + 37))
            v20 = "";
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v20;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:          %{public}sReliable Pipe", buf, 0xCu);
          v11 = qword_100999838;
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          v21 = "NO";
          if (*((_DWORD *)v10 + 7) == 4)
            v21 = "YES";
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v21;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:          LE Only: %{public}s", buf, 0xCu);
          v11 = qword_100999838;
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:          Connected devices:", buf, 2u);
        }
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v22 = (id)v10[5];
        v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
        v38 = i;
        if (v23)
        {
          v24 = *(_QWORD *)v40;
          do
          {
            for (j = 0; j != v23; j = (char *)j + 1)
            {
              if (*(_QWORD *)v40 != v24)
                objc_enumerationMutation(v22);
              v26 = qword_100999838;
              if (os_log_type_enabled((os_log_t)qword_100999838, OS_LOG_TYPE_DEFAULT))
              {
                v27 = v10;
                if (*((char *)v10 + 23) < 0)
                  v27 = (uint64_t *)*v10;
                v28 = *(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)j);
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v46 = 2114;
                v47 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "statedump:             \"%{public}s\"; %{public}@",
                  buf,
                  0x16u);
              }
            }
            v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v39, v44, 16);
          }
          while (v23);
        }

        v8 = v37;
      }
      v29 = v36;
      v30 = (_QWORD *)v36[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v29[2];
          v15 = *v31 == (_QWORD)v29;
          v29 = v31;
        }
        while (!v15);
      }
      v3 = v31;
    }
    while (v31 != v35);
  }
  v32 = sub_1002B5578();
  nullsub_90(v32, v33);
  return sub_100034234((uint64_t)v43);
}

void sub_1002B40A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B40F4()
{
  return 1;
}

void sub_1002B4110(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_1002B4198(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1002B4198(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1002B439C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002B43D4(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  int64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8)
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    *(_QWORD *)(a1 + 16) = &v5[v6];
    sub_10007AA30(a1 + 8);
    if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 16))
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 8))(*(_QWORD *)(a1 + 32), a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

uint64_t sub_1002B4480(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v3 = *(uint64_t **)(a1 + 32);
  v2 = *(uint64_t **)(a1 + 40);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {

        if (*(char *)(v4 + 23) < 0)
          operator delete(*(void **)v4);
        operator delete();
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 32);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_1002B4520(_QWORD *__dst, __int128 *a2, int a3, int a4, int a5, char a6, char a7, char a8)
{
  __int128 v15;
  uint64_t v16;
  void *v17;

  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v15 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v15;
  }
  *((_DWORD *)__dst + 6) = a3;
  *((_DWORD *)__dst + 7) = a4;
  *((_DWORD *)__dst + 8) = a5;
  *((_BYTE *)__dst + 36) = a6;
  *((_BYTE *)__dst + 37) = a7;
  *((_BYTE *)__dst + 38) = a8;
  *((_BYTE *)__dst + 39) = 0;
  __dst[5] = 0;
  v16 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v17 = (void *)__dst[5];
  __dst[5] = v16;

  return __dst;
}

void sub_1002B45D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void sub_1002B45FC()
{
  operator delete();
}

void sub_1002B4610(uint64_t a1)
{
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100922840);
  sub_1002B0558(*(_BYTE *)(a1 + 10), *(_DWORD *)(a1 + 12), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44));
}

void sub_1002B466C()
{
  operator delete();
}

uint64_t sub_1002B4680(uint64_t a1)
{
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100922840);
  return sub_1002B066C(*(unsigned __int8 *)(a1 + 10), *(_BYTE *)(a1 + 11), *(_QWORD *)(a1 + 12), *(_QWORD *)(a1 + 20), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(_QWORD *)(a1 + 40));
}

void *sub_1002B46E0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_10007ABD4();
  return operator new(4 * a2);
}

_QWORD *sub_1002B4714(_QWORD *a1)
{
  _QWORD *i;
  _QWORD *j;
  _QWORD *k;
  _QWORD *m;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  for (i = (_QWORD *)a1[3]; i != (_QWORD *)a1[4]; ++i)
  {
    if (*i)
      operator delete();
  }
  for (j = (_QWORD *)a1[6]; j != (_QWORD *)a1[7]; ++j)
  {
    if (*j)
      operator delete();
  }
  for (k = (_QWORD *)a1[18]; k != (_QWORD *)a1[19]; ++k)
  {
    if (*k)
      operator delete();
  }
  for (m = (_QWORD *)a1[21]; m != (_QWORD *)a1[22]; ++m)
  {
    if (*m)
      operator delete();
  }
  v6 = (void *)a1[27];
  if (v6)
  {
    a1[28] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[24];
  if (v7)
  {
    a1[25] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[21];
  if (v8)
  {
    a1[22] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[18];
  if (v9)
  {
    a1[19] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[12];
  if (v10)
  {
    a1[13] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[9];
  if (v11)
  {
    a1[10] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[6];
  if (v12)
  {
    a1[7] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[3];
  if (v13)
  {
    a1[4] = v13;
    operator delete(v13);
  }
  return a1;
}

uint64_t sub_1002B487C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100922770;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1002B48B8(uint64_t a1)
{
  *(_QWORD *)a1 = off_100922770;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  operator delete();
}

uint64_t sub_1002B4904(uint64_t a1)
{
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100922840);
  return sub_1002B1BCC((_QWORD *)qword_10097AB60, (const void **)(a1 + 16));
}

uint64_t sub_1002B4954(uint64_t a1, uint64_t a2, __int16 a3, __int128 *a4, int a5, int a6, char a7)
{
  uint64_t v11;
  __int128 v12;
  int v13;
  int v14;

  *(_WORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1009227A8;
  *(_QWORD *)(a1 + 16) = a2;
  *(_WORD *)(a1 + 24) = a3;
  v11 = a1 + 32;
  if (*((char *)a4 + 23) < 0)
  {
    sub_10003430C((_BYTE *)v11, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v12 = *a4;
    *(_QWORD *)(v11 + 16) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v11 = v12;
  }
  *(_BYTE *)(a1 + 64) = a7;
  if (a6 == 6)
    v13 = 2;
  else
    v13 = 3;
  if (a6 == 2)
    v14 = 1;
  else
    v14 = v13;
  if (a6 == 1)
    v14 = 0;
  *(_DWORD *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 60) = v14;
  return a1;
}

uint64_t sub_1002B49F4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009227A8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_1002B4A30(uint64_t a1)
{
  *(_QWORD *)a1 = off_1009227A8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  operator delete();
}

void sub_1002B4A7C(uint64_t a1)
{
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100922840);
  sub_1002B212C(qword_10097AB60, *(_QWORD *)(a1 + 16), *(unsigned __int16 *)(a1 + 24), (unsigned __int8 *)(a1 + 32), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), *(unsigned __int8 *)(a1 + 64));
}

void sub_1002B4AE0()
{
  operator delete();
}

uint64_t sub_1002B4AF4(uint64_t a1)
{
  if (qword_10097AB68 != -1)
    dispatch_once(&qword_10097AB68, &stru_100922840);
  return sub_1002B3024(qword_10097AB60, *(unsigned __int16 *)(a1 + 10), *(_DWORD *)(a1 + 12));
}

_QWORD *sub_1002B4B48(_QWORD *a1)
{
  unsigned int *v2;

  *a1 = &off_100922818;
  a1[2] = &off_100918258;
  v2 = (unsigned int *)a1[3];
  if (v2)
    sub_100056AAC(v2);
  return a1;
}

void sub_1002B4B8C(_QWORD *a1)
{
  unsigned int *v1;

  *a1 = &off_100922818;
  a1[2] = &off_100918258;
  v1 = (unsigned int *)a1[3];
  if (v1)
    sub_100056AAC(v1);
  operator delete();
}

void sub_1002B4BE0(uint64_t a1)
{
  uint64_t v2;
  int v3;
  const void *v4;
  size_t v5;

  v2 = sub_1002B5578();
  v3 = *(unsigned __int16 *)(a1 + 10);
  v4 = (const void *)sub_10003EB18(a1 + 16);
  v5 = sub_10003F8C4(a1 + 16);
  sub_1002B9008(v2, v3, v4, v5, *(_WORD *)(a1 + 32), 0, *(_BYTE *)(a1 + 34));
}

void sub_1002B4C4C(id a1)
{
  operator new();
}

void sub_1002B4C8C()
{
  operator delete();
}

void sub_1002B4CB0(id a1)
{
  operator new();
}

void sub_1002B4CF0()
{
  operator delete();
}

void sub_1002B4D14(id a1)
{
  operator new();
}

void sub_1002B4D54()
{
  operator delete();
}

void sub_1002B4D78(id a1)
{
  operator new();
}

void sub_1002B4DB8()
{
  operator delete();
}

void sub_1002B4DDC(id a1)
{
  operator new();
}

void sub_1002B4E1C()
{
  operator delete();
}

void sub_1002B4E40(id a1)
{
  operator new();
}

void sub_1002B4E80()
{
  operator delete();
}

void sub_1002B4EA4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  a1[1] = v2;
}

uint64_t sub_1002B4EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void **v7;
  __int128 v8;
  uint64_t v9;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_QWORD *)a4 = *(_QWORD *)v5;
      v7 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0)
        operator delete(*v7);
      v8 = *(_OWORD *)(v5 + 8);
      *(_QWORD *)(a4 + 24) = *(_QWORD *)(v5 + 24);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v5 + 31) = 0;
      *(_BYTE *)(v5 + 8) = 0;
      v9 = *(_QWORD *)(v5 + 32);
      *(_QWORD *)(a4 + 39) = *(_QWORD *)(v5 + 39);
      *(_QWORD *)(a4 + 32) = v9;
      a4 += 48;
      v5 += 48;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

char *sub_1002B4F84(char **a1, uint64_t a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  uint64_t v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;

  v2 = *a1;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v2) >> 4);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x2AAAAAAAAAAAAAALL)
    v10 = 0x555555555555555;
  else
    v10 = v4;
  v28 = v7;
  if (v10)
    v11 = (char *)sub_1002B50E8(v7, v10);
  else
    v11 = 0;
  v25 = 0;
  v26.i64[0] = 0;
  v12 = &v11[48 * v3];
  v13 = &v11[48 * v10];
  v27 = v13;
  *(_QWORD *)v12 = *(_QWORD *)a2;
  v14 = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v12 + 3) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(v12 + 8) = v14;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v15 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(v12 + 39) = *(_QWORD *)(a2 + 39);
  *((_QWORD *)v12 + 4) = v15;
  v16 = v12 + 48;
  v26.i64[1] = (uint64_t)(v12 + 48);
  v18 = *a1;
  v17 = (unint64_t)a1[1];
  if ((char *)v17 == *a1)
  {
    v22 = vdupq_n_s64(v17);
  }
  else
  {
    do
    {
      v19 = *(_QWORD *)(v17 - 48);
      v17 -= 48;
      *((_QWORD *)v12 - 6) = v19;
      v12 -= 48;
      v20 = *(_OWORD *)(v17 + 8);
      *((_QWORD *)v12 + 3) = *(_QWORD *)(v17 + 24);
      *(_OWORD *)(v12 + 8) = v20;
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 8) = 0;
      v21 = *(_QWORD *)(v17 + 32);
      *(_QWORD *)(v12 + 39) = *(_QWORD *)(v17 + 39);
      *((_QWORD *)v12 + 4) = v21;
    }
    while ((char *)v17 != v18);
    v22 = *(int64x2_t *)a1;
    v16 = (char *)v26.i64[1];
    v13 = v27;
  }
  *a1 = v12;
  a1[1] = v16;
  v26 = v22;
  v23 = a1[2];
  a1[2] = v13;
  v27 = v23;
  v25 = v22.i64[0];
  sub_1002B512C((uint64_t)&v25);
  return v16;
}

void *sub_1002B50E8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    sub_10007ABD4();
  return operator new(48 * a2);
}

uint64_t sub_1002B512C(uint64_t a1)
{
  sub_1002B5160(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1002B5160(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 48;
      *(_QWORD *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 17) < 0)
      {
        operator delete(*(void **)(v2 - 40));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_1002B51B4(id a1)
{
  operator new();
}

void sub_1002B51F4()
{
  operator delete();
}

void sub_1002B5218(id a1)
{
  operator new();
}

void sub_1002B5258()
{
  operator delete();
}

void sub_1002B527C(id a1)
{
  operator new();
}

void sub_1002B52BC()
{
  operator delete();
}

void sub_1002B52E0(id a1)
{
  operator new();
}

void sub_1002B53F8()
{
  operator delete();
}

void sub_1002B541C(id a1)
{
  operator new();
}

void sub_1002B545C()
{
  operator delete();
}

void sub_1002B5480(id a1)
{
  operator new();
}

void *sub_1002B54AC(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    sub_10007ABD4();
  return operator new(2 * a2);
}

void sub_1002B54DC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

void sub_1002B54E8(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x16u);
}

void sub_1002B54F8(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_1002B5524(uint64_t a1)
{
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100922B38);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1);
}

uint64_t sub_1002B5578()
{
  if (qword_100991AB0 != -1)
    dispatch_once(&qword_100991AB0, &stru_1009229E8);
  return qword_1009993E8;
}

void sub_1002B55B8(id a1)
{
  operator new();
}

void sub_1002B55F8()
{
  operator delete();
}

uint64_t sub_1002B561C(uint64_t a1)
{
  _BYTE *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  _BYTE *v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  unsigned int v23;
  void *__p[2];
  char v25;
  unsigned int v26;
  _BYTE buf[64];
  pthread_attr_t __attr;

  *(_QWORD *)a1 = &off_100922A18;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 140) = 0;
  v2 = (_BYTE *)(a1 + 140);
  *(_DWORD *)(a1 + 136) = 0;
  qword_1009993E8 = a1;
  memset(&__attr, 0, sizeof(__attr));
  pthread_attr_init(&__attr);
  pthread_attr_set_qos_class_np(&__attr, QOS_CLASS_USER_INTERACTIVE, 0);
  v3 = dispatch_pthread_root_queue_create(0, 0, &__attr, &stru_100922A48);
  pthread_attr_destroy(&__attr);
  *(_QWORD *)(a1 + 8) = dispatch_queue_create_with_target_V2("com.apple.MobileBluetooth.Pipe", 0, v3);
  dispatch_release(v3);
  v4 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4))
  {
    v26 = 0;
    v5 = sub_100027F68();
    sub_100091AE8(buf, "Pipe");
    sub_100091AE8(__p, "TxSlotSize");
    (*(void (**)(uint64_t, _BYTE *, void **, unsigned int *))(*(_QWORD *)v5 + 128))(v5, buf, __p, &v26);
    if (v25 < 0)
      operator delete(__p[0]);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v6 = v26;
    if (v26)
    {
      v7 = qword_100999868;
      if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Setting custom Skywalk TxSlotSize to %llu", buf, 0xCu);
      }
    }
    else
    {
      v6 = 32;
    }
    v23 = 0;
    v9 = sub_100027F68();
    sub_100091AE8(buf, "Pipe");
    sub_100091AE8(__p, "RxSlotSize");
    (*(void (**)(uint64_t, _BYTE *, void **, unsigned int *))(*(_QWORD *)v9 + 128))(v9, buf, __p, &v23);
    if (v25 < 0)
      operator delete(__p[0]);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v8 = v23;
    if (v23)
    {
      v10 = qword_100999868;
      if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Setting custom Skywalk RxSlotSize to %llu", buf, 0xCu);
      }
    }
    else
    {
      v8 = 32;
    }
    v11 = sub_100027F68();
    sub_100091AE8(buf, "Magnet");
    sub_100091AE8(__p, "EnableCrossLayerLogs");
    (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v11 + 72))(v11, buf, __p, a1 + 138);
    if (v25 < 0)
      operator delete(__p[0]);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (*(_BYTE *)(a1 + 138))
    {
      v12 = qword_100999868;
      if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
        sub_1006DA44C(v12);
    }
    v13 = sub_100027F68();
    sub_100091AE8(buf, "Magnet");
    sub_100091AE8(__p, "EnableSkywalkDataLogs");
    v14 = (_BYTE *)(a1 + 139);
    (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v13 + 72))(v13, buf, __p, a1 + 139);
    if (v25 < 0)
      operator delete(__p[0]);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (*v14)
    {
      v15 = qword_100999868;
      if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "Enable";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}s Skywalk data logs", buf, 0xCu);
      }
    }
    v16 = sub_100027F68();
    sub_100091AE8(buf, "Magnet");
    sub_100091AE8(__p, "EnableSkywalkDataCRC");
    (*(void (**)(uint64_t, _BYTE *, void **, _BYTE *))(*(_QWORD *)v16 + 72))(v16, buf, __p, v2);
    if (v25 < 0)
      operator delete(__p[0]);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (*v2)
    {
      v17 = qword_100999868;
      if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_DEFAULT))
      {
        if (*v14)
          v18 = "Enable";
        else
          v18 = "Disable";
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "Enable";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}s Skywalk data logs CRC, %{public}s fSkywalkDataLogs", buf, 0x16u);
      }
    }
  }
  else
  {
    v6 = 32;
    v8 = 32;
  }
  v19 = os_nexus_controller_create();
  *(_QWORD *)(a1 + 112) = v19;
  v20 = qword_100999868;
  if (v19)
  {
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = 2048;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = 1;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = 1;
      *(_WORD *)&buf[32] = 2048;
      *(_QWORD *)&buf[34] = v6;
      *(_WORD *)&buf[42] = 2048;
      *(_QWORD *)&buf[44] = v8;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Creating nexus with NEXUS_ATTR_SLOT_BUF_SIZE: %llu, NEXUS_ATTR_RX_RINGS: %llu, NEXUS_ATTR_TX_RINGS: %llu, NEXUS_ATTR_TX_SLOTS: %llu, NEXUS_ATTR_RX_SLOTS: %llu", buf, 0x34u);
    }
    v21 = os_nexus_attr_create();
    os_nexus_attr_set(v21, 4, 2048);
    os_nexus_attr_set(v21, 1, 1);
    os_nexus_attr_set(v21, 0, 1);
    os_nexus_attr_set(v21, 2, v6);
    os_nexus_attr_set(v21, 3, v8);
    strcpy(buf, "com.apple.bluetooth.Pipe");
    memset(&buf[25], 0, 39);
    os_nexus_controller_register_provider(*(_QWORD *)(a1 + 112), buf, 0, v21, a1 + 120);
    os_nexus_attr_destroy(v21);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
  {
    sub_1006DA420();
  }
  return a1;
}

void sub_1002B5C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002B5D5C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_100922A18;
  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
  {
    os_nexus_controller_deregister_provider(v2, a1 + 120);
    os_nexus_controller_destroy(*(_QWORD *)(a1 + 112));
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 8));
  sub_10001A82C(a1 + 88, *(_QWORD **)(a1 + 96));
  sub_10001A82C(a1 + 64, *(_QWORD **)(a1 + 72));
  sub_1002BB6B8(a1 + 40, *(_QWORD **)(a1 + 48));
  sub_10001A82C(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

void sub_1002B5DD8(_Unwind_Exception *a1)
{
  _QWORD **v1;

  sub_10001A82C((uint64_t)(v1 + 11), v1[12]);
  sub_10001A82C((uint64_t)(v1 + 8), v1[9]);
  sub_1002BB6B8((uint64_t)(v1 + 5), v1[6]);
  sub_10001A82C((uint64_t)(v1 + 2), v1[3]);
  _Unwind_Resume(a1);
}

void sub_1002B5E18(uint64_t a1)
{
  sub_1002B5D5C(a1);
  operator delete();
}

uint64_t sub_1002B5E3C(uint64_t a1, int a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, int a7, char a8)
{
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  _QWORD v26[8];
  int v27;
  int v28;
  __int16 v29;
  char v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;

  if (!a6)
  {
    v15 = qword_100999868;
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
      sub_1006DA4C8(v15, v16, v17, v18, v19, v20, v21, v22);
  }
  v31 = 0;
  v32 = &v31;
  v33 = 0x2020000000;
  v34 = 0;
  v23 = *(NSObject **)(a1 + 8);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_1002B5F38;
  v26[3] = &unk_100922A70;
  v29 = a4;
  v26[4] = &v31;
  v26[5] = a1;
  v27 = a2;
  v28 = a7;
  v30 = a8;
  v26[6] = a3;
  v26[7] = a6;
  dispatch_sync(v23, v26);
  v24 = *((unsigned int *)v32 + 6);
  _Block_object_dispose(&v31, 8);
  return v24;
}

void sub_1002B5F38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  int v9;
  int v10;
  NSObject *v11;
  dispatch_source_t v12;
  NSObject *v13;
  dispatch_source_t v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  _QWORD block[4];
  int v20;
  _QWORD v21[5];
  _QWORD v22[5];
  int v23;
  _QWORD v24[5];
  _QWORD handler[5];
  int v26;
  uint64_t v27;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    goto LABEL_12;
  v4 = *(unsigned __int16 *)(a1 + 72);
  v5 = v2 + 24;
  do
  {
    v6 = *(unsigned __int16 *)(v3 + 32);
    v7 = v6 >= v4;
    if (v6 >= v4)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 + 24 && v4 >= *(unsigned __int16 *)(v5 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
      sub_1006DA694();
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v18 = 103;
  }
  else
  {
LABEL_12:
    v27 = 0;
    if (socketpair(1, 1, 0, (int *)&v27))
    {
      if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
        sub_1006DA620();
    }
    else
    {
      v9 = v27;
      v10 = fcntl(v27, 3, 0);
      fcntl(v9, 4, v10 | 4u);
      v11 = dispatch_group_create();
      v12 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, v9, 0, *(dispatch_queue_t *)(v2 + 8));
      if (v12)
      {
        v13 = v12;
        v14 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_write, v9, 0, *(dispatch_queue_t *)(v2 + 8));
        if (v14)
        {
          v15 = v14;
          handler[0] = _NSConcreteStackBlock;
          handler[1] = 3221225472;
          handler[2] = sub_1002B6340;
          handler[3] = &unk_1009173C0;
          handler[4] = v2;
          v26 = v9;
          dispatch_source_set_event_handler(v13, handler);
          dispatch_group_enter(v11);
          v24[0] = _NSConcreteStackBlock;
          v24[1] = 3221225472;
          v24[2] = sub_1002B64E8;
          v24[3] = &unk_100917378;
          v24[4] = v11;
          dispatch_source_set_cancel_handler(v13, v24);
          v22[0] = _NSConcreteStackBlock;
          v22[1] = 3221225472;
          v22[2] = sub_1002B64F0;
          v22[3] = &unk_1009173C0;
          v22[4] = v2;
          v23 = v9;
          dispatch_source_set_event_handler(v15, v22);
          dispatch_group_enter(v11);
          v21[0] = _NSConcreteStackBlock;
          v21[1] = 3221225472;
          v21[2] = sub_1002B674C;
          v21[3] = &unk_100917378;
          v21[4] = v11;
          dispatch_source_set_cancel_handler(v15, v21);
          dispatch_resume(v13);
          v16 = *(NSObject **)(v2 + 8);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1002B6754;
          block[3] = &unk_100918130;
          v20 = v9;
          dispatch_group_notify(v11, v16, block);
          dispatch_release(v11);
          operator new();
        }
        if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
          sub_1006DA5AC();
        dispatch_release(v13);
      }
      else if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
      {
        sub_1006DA538();
      }
    }
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v18 = 4;
  }
  *(_DWORD *)(v17 + 24) = v18;
}

void sub_1002B6314()
{
  operator delete();
}

void sub_1002B6340(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    v4 = *(_DWORD *)(a1 + 40);
    v5 = v2 + 72;
    do
    {
      v6 = *(_DWORD *)(v3 + 28);
      v7 = v6 < v4;
      if (v6 >= v4)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (!v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 != v2 + 72 && v4 >= *(_DWORD *)(v5 + 28))
    {
      v9 = *(_QWORD *)(v2 + 24);
      if (!v9)
        goto LABEL_28;
      v10 = *(unsigned __int16 *)(v5 + 32);
      v11 = v2 + 24;
      do
      {
        v12 = *(unsigned __int16 *)(v9 + 32);
        v13 = v12 >= v10;
        if (v12 >= v10)
          v14 = (uint64_t *)v9;
        else
          v14 = (uint64_t *)(v9 + 8);
        if (v13)
          v11 = v9;
        v9 = *v14;
      }
      while (*v14);
      if (v11 != v2 + 24 && v10 >= *(unsigned __int16 *)(v11 + 32))
      {
        sub_1002B6428((_BYTE *)v2, v10, *(_QWORD *)(v11 + 40));
      }
      else
      {
LABEL_28:
        if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
          sub_1006DA6F8();
      }
    }
  }
}

void sub_1002B6428(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  int v4;
  NSObject *v5;
  _DWORD v6[2];

  v4 = a2;
  if ((sub_1002BA164(a1, a2, a3) & 1) == 0)
  {
    v5 = qword_100999868;
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_INFO))
    {
      v6[0] = 67109120;
      v6[1] = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Stack is now full on pipe 0x%04x - stopping read source", (uint8_t *)v6, 8u);
    }
    sub_1002BB3F8(a3, 1);
  }
}

void sub_1002B64E8(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1002B64F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    v4 = *(_DWORD *)(a1 + 40);
    v5 = v2 + 72;
    do
    {
      v6 = *(_DWORD *)(v3 + 28);
      v7 = v6 < v4;
      if (v6 >= v4)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (!v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 != v2 + 72 && v4 >= *(_DWORD *)(v5 + 28))
    {
      v9 = *(_QWORD *)(v2 + 24);
      if (!v9)
        goto LABEL_28;
      v10 = *(unsigned __int16 *)(v5 + 32);
      v11 = v2 + 24;
      do
      {
        v12 = *(unsigned __int16 *)(v9 + 32);
        v13 = v12 >= v10;
        if (v12 >= v10)
          v14 = (uint64_t *)v9;
        else
          v14 = (uint64_t *)(v9 + 8);
        if (v13)
          v11 = v9;
        v9 = *v14;
      }
      while (*v14);
      if (v11 != v2 + 24 && v10 >= *(unsigned __int16 *)(v11 + 32))
      {
        sub_1002B65D8(v2, v10, *(_QWORD *)(v11 + 40));
      }
      else
      {
LABEL_28:
        if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
          sub_1006DA6F8();
      }
    }
  }
}

void sub_1002B65D8(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint8_t buf[4];
  int v18;

  v6 = (_QWORD *)(a3 + 168);
  if (*(_QWORD *)(a3 + 168)
    || (v9 = qword_100999868, os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
    && !sub_1006DA758(v9, v6, v10, v11, v12, v13, v14, v15))
  {
    v7 = (uint64_t)(v6 - 5);
    while (1)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 136) + ((*(_QWORD *)(a3 + 160) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (*(_QWORD *)(a3 + 160) & 0x1FFLL));
      if (!sub_1002B93B8(a1, a2, a3, (unsigned __int8 *)(v8 + 19), *(_QWORD *)(v8 + 8), *(unsigned __int16 *)(v8 + 16), *(unsigned __int8 *)(v8 + 18)))break;
      free((void *)v8);
      *(int64x2_t *)(a3 + 160) = vaddq_s64(*(int64x2_t *)(a3 + 160), (int64x2_t)xmmword_10073D4C0);
      sub_1002BB5F8(v7, 1);
      if (!*(_QWORD *)(a3 + 168))
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v16 = qword_100999868;
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      v18 = a2;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Socket queue is now empty on pipe 0x%04x - stopping write source", buf, 8u);
    }
    dispatch_suspend(*(dispatch_object_t *)(a3 + 192));
  }
}

void sub_1002B674C(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1002B6754(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

uint64_t sub_1002B675C(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, int a6, char a7)
{
  return sub_1002B5E3C(a1, 0, a2, a3, a5, a5, a6, a7);
}

uint64_t sub_1002B6778(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5, int *a6, int a7)
{
  NSObject *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD v34[2];
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;

  v14 = qword_100999868;
  if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *a6;
    v34[0] = 67110144;
    v34[1] = a3;
    v35 = 1024;
    v36 = a4;
    v37 = 1024;
    v38 = a5;
    v39 = 1024;
    v40 = v16;
    v41 = 1024;
    v42 = a7;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "cid:%d pid:%d outMTU:%d sock:%d priority:%d", (uint8_t *)v34, 0x20u);
  }
  v17 = sub_1002B5E3C(a1, 1, a2, a3, v15, (uint64_t)a6, a7, 0);
  if (!(_DWORD)v17)
  {
    v20 = *(_QWORD *)(a1 + 24);
    v19 = a1 + 24;
    v18 = v20;
    if (!v20)
      goto LABEL_15;
    v21 = v19;
    do
    {
      v22 = *(unsigned __int16 *)(v18 + 32);
      v23 = v22 >= a3;
      if (v22 >= a3)
        v24 = (uint64_t *)v18;
      else
        v24 = (uint64_t *)(v18 + 8);
      if (v23)
        v21 = v18;
      v18 = *v24;
    }
    while (*v24);
    if (v21 == v19 || *(unsigned __int16 *)(v21 + 32) > a3)
    {
LABEL_15:
      v25 = qword_100999868;
      if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
        sub_1006DA7E4(v25, v26, v27, v28, v29, v30, v31, v32);
      v21 = v19;
    }
    *(_WORD *)(*(_QWORD *)(v21 + 40) + 376) = a5;
  }
  return v17;
}

BOOL sub_1002B690C(uint64_t *a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  return !a1 || !*a1 || sub_1002B6938(*a1, a1[1], a2, a3, a4);
}

BOOL sub_1002B6938(uint64_t a1, unsigned __int16 a2, uint64_t a3, unint64_t a4, unint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;

  v7 = *(_QWORD *)(a1 + 24);
  v5 = a1 + 24;
  v6 = v7;
  if (v7)
  {
    v8 = v5;
    do
    {
      v9 = *(unsigned __int16 *)(v6 + 32);
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = (uint64_t *)v6;
      else
        v11 = (uint64_t *)(v6 + 8);
      if (v10)
        v8 = v6;
      v6 = *v11;
    }
    while (*v11);
    if (v8 != v5 && *(unsigned __int16 *)(v8 + 32) <= a2)
      return sub_1002BAB58(v5, a2, *(_QWORD *)(v8 + 40), a3, a4, a5);
  }
  if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
    sub_1006DA854();
  return 0;
}

void sub_1002B69E0(uint64_t *a1)
{
  if (a1)
  {
    if (*a1)
    {
      sub_1002B6A40(*a1, a1[1]);
    }
    else if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
    {
      sub_1006DA8B8();
    }
  }
}

void sub_1002B6A40(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  int64x2_t *i;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    goto LABEL_20;
  v5 = a1 + 24;
  do
  {
    v6 = *(unsigned __int16 *)(v3 + 32);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 24 && *(unsigned __int16 *)(v5 + 32) <= a2)
  {
    for (i = *(int64x2_t **)(v5 + 40); i[10].i64[1]; sub_1002BB5F8((uint64_t)i[8].i64, 1))
    {
      v10 = *(_QWORD *)(*(_QWORD *)(i[8].i64[1] + (((unint64_t)i[10].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (i[10].i64[0] & 0x1FF));
      if (!sub_1002B93B8(a1, a2, (uint64_t)i, (unsigned __int8 *)(v10 + 19), *(_QWORD *)(v10 + 8), *(unsigned __int16 *)(v10 + 16), *(unsigned __int8 *)(v10 + 18)))break;
      free((void *)v10);
      i[10] = vaddq_s64(i[10], (int64x2_t)xmmword_10073D4C0);
    }
  }
  else
  {
LABEL_20:
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
      sub_1006DA8E4();
  }
}

uint64_t sub_1002B6B70(uint64_t a1, uint64_t a2, int a3, int a4, _WORD *a5, char a6, char a7, uint64_t a8)
{
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  _QWORD v20[9];
  int v21;
  __int16 v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint8_t buf[4];
  int v30;

  v25 = 0;
  v26 = &v25;
  v27 = 0x2020000000;
  v28 = 0;
  v16 = qword_100999868;
  if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v30 = a3;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Registering networkrelay pipe for pipeID:0x%4x", buf, 8u);
  }
  *a5 = 0;
  v17 = *(NSObject **)(a1 + 8);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1002B6CD4;
  v20[3] = &unk_100922A98;
  v22 = a3;
  v20[4] = &v25;
  v20[5] = a1;
  v21 = a4;
  v20[6] = a8;
  v20[7] = a2;
  v23 = a7;
  v20[8] = a5;
  v24 = a6;
  dispatch_sync(v17, v20);
  v18 = *((unsigned int *)v26 + 6);
  _Block_object_dispose(&v25, 8);
  return v18;
}

void sub_1002B6CD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  signed int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  signed int v13;
  BOOL v14;
  uint64_t *v15;
  signed int v16;
  uint64_t v17;
  uint64_t v18;
  signed int v19;
  BOOL v20;
  uint64_t *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t *v26;
  NSObject *v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD handler[5];
  int v41;
  _BYTE buf[12];
  __int16 v43;
  int v44;
  uuid_t v45;
  unsigned __int8 src[8];
  uint64_t v47;
  uuid_t dst;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    goto LABEL_12;
  v4 = *(unsigned __int16 *)(a1 + 76);
  v5 = v2 + 24;
  do
  {
    v6 = *(unsigned __int16 *)(v3 + 32);
    v7 = v6 >= v4;
    if (v6 >= v4)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 + 24 && v4 >= *(unsigned __int16 *)(v5 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
      sub_1006DAA80();
    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v31 = 103;
  }
  else
  {
LABEL_12:
    v9 = arc4random_uniform(0xFFFFFFFF);
    v41 = v9;
    v11 = (uint64_t *)(v2 + 72);
    v10 = *(_QWORD *)(v2 + 72);
    if (v10)
    {
      v12 = v2 + 72;
      do
      {
        v13 = *(_DWORD *)(v10 + 28);
        v14 = v13 < v9;
        if (v13 >= v9)
          v15 = (uint64_t *)v10;
        else
          v15 = (uint64_t *)(v10 + 8);
        if (!v14)
          v12 = v10;
        v10 = *v15;
      }
      while (*v15);
      if ((uint64_t *)v12 != v11 && v9 >= *(_DWORD *)(v12 + 28))
      {
        do
        {
          v16 = arc4random_uniform(0xFFFFFFFF);
          v17 = *v11;
          if (!*v11)
            break;
          v18 = v2 + 72;
          do
          {
            v19 = *(_DWORD *)(v17 + 28);
            v20 = v19 < v16;
            if (v19 >= v16)
              v21 = (uint64_t *)v17;
            else
              v21 = (uint64_t *)(v17 + 8);
            if (!v20)
              v18 = v17;
            v17 = *v21;
          }
          while (*v21);
        }
        while ((uint64_t *)v18 != v11 && v16 >= *(_DWORD *)(v18 + 28));
        v41 = v16;
      }
    }
    v22 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v2 + 8));
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1002B7488;
    handler[3] = &unk_100917378;
    handler[4] = v22;
    dispatch_source_set_event_handler(v22, handler);
    memset(dst, 0, sizeof(dst));
    uuid_copy(dst, *(const unsigned __int8 **)(a1 + 48));
    v23 = sub_10000C5B8(v2 + 88, dst);
    if (v2 + 96 == v23)
    {
      v25 = 0;
    }
    else
    {
      v24 = *(_QWORD *)(v23 + 48);
      v25 = *(_WORD *)(v23 + 56);
      if (v24)
        goto LABEL_38;
    }
    v24 = NRBluetoothPacketParserCreate(*(_QWORD *)(a1 + 48), *(_QWORD *)(v2 + 8));
    if (v24)
    {
LABEL_38:
      *(_QWORD *)buf = dst;
      v26 = sub_1002BB884((uint64_t **)(v2 + 88), dst, (uint64_t)&unk_100740F58, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)buf);
      v26[6] = v24;
      *((_WORD *)v26 + 28) = v25 + 1;
      v27 = qword_100999868;
      if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_DEFAULT))
      {
        v28 = *(_DWORD *)(a1 + 72);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v24;
        v43 = 1024;
        v44 = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "created networkrelay parser (%p) for pipe priority: %u", buf, 0x12u);
      }
      v39 = 0;
      v29 = *(_DWORD *)(a1 + 72);
      if (v29 >= 4)
        LOBYTE(v29) = 0;
      NRBluetoothPacketParserGetSlotCount(v24, v29, (char *)&v39 + 2, &v39);
      *(_QWORD *)src = 0;
      v47 = 0;
      memset(v45, 0, sizeof(v45));
      uuid_copy(v45, src);
      operator new();
    }
    v32 = qword_100999868;
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
      sub_1006DA948(a1 + 48, v32, v33, v34, v35, v36, v37, v38);
    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v31 = 124;
  }
  *(_DWORD *)(v30 + 24) = v31;
}

void sub_1002B742C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a18 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(exception_object);
}

void sub_1002B7488(uint64_t a1)
{
  NSObject *v1;
  _DWORD *context;
  _DWORD *v3;
  NSObject *v4;
  int v5;
  __uint64_t v6;
  _QWORD *v7;
  void (*v8)(_QWORD);
  _DWORD v9[2];

  v1 = *(NSObject **)(a1 + 32);
  context = dispatch_get_context(v1);
  if (context)
  {
    v3 = context;
    sub_1002B75A0((uint64_t)context, 0);
    v4 = qword_100999868;
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_INFO))
    {
      v5 = v3[66];
      v9[0] = 67109120;
      v9[1] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "TIMER: flushing %u held up packets", (uint8_t *)v9, 8u);
    }
    if (v3[66])
    {
      v6 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
      v3[66] = 0;
      *((_QWORD *)v3 + 41) = v6;
      v7 = (_QWORD *)*((_QWORD *)v3 + 2);
      if (v7)
      {
        v8 = (void (*)(_QWORD))v7[2];
        if (v8)
          v8(*v7);
      }
    }
  }
  else
  {
    dispatch_suspend(v1);
  }
}

void sub_1002B75A0(uint64_t a1, int a2)
{
  unint64_t v3;
  unint64_t v4;
  int64_t v5;
  int v6;
  NSObject *v7;
  dispatch_time_t v8;
  NSObject *v9;
  const char *v10;
  int v11;
  unint64_t v12;
  NSObject *v13;
  int v14;
  int v15;
  _BYTE v16[14];
  __int16 v17;
  unint64_t v18;
  __int16 v19;
  unint64_t v20;

  v3 = *(_QWORD *)(a1 + 304);
  v4 = 2 * v3;
  if (2 * v3 >= 0x1312D00)
    v4 = 20000000;
  if (v4 <= 0xF4240)
    v5 = 1000000;
  else
    v5 = v4;
  v6 = *(unsigned __int8 *)(a1 + 344);
  if (a2)
  {
    v7 = *(NSObject **)(a1 + 336);
    v8 = dispatch_time(0, v5);
    dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
    if (!*(_BYTE *)(a1 + 344))
    {
      *(_BYTE *)(a1 + 344) = 1;
      dispatch_resume(*(dispatch_object_t *)(a1 + 336));
    }
    v9 = qword_100999868;
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_INFO))
    {
      v10 = "RE-ARMED";
      if (!v6)
        v10 = "ARMED";
      v11 = *(_DWORD *)(a1 + 276);
      v12 = *(_QWORD *)(a1 + 304) / 0xF4240uLL;
      v15 = 136446978;
      *(_QWORD *)v16 = v10;
      *(_WORD *)&v16[8] = 1024;
      *(_DWORD *)&v16[10] = v11;
      v17 = 2048;
      v18 = v12;
      v19 = 2048;
      v20 = v5 / 0xF4240uLL;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%{public}s: lenAvg %u, ivalAvg %llu ms, deadline %llu ms", (uint8_t *)&v15, 0x26u);
    }
  }
  else if (*(_BYTE *)(a1 + 344))
  {
    v13 = qword_100999868;
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_INFO))
    {
      v14 = *(_DWORD *)(a1 + 276);
      v15 = 67109376;
      *(_DWORD *)v16 = v14;
      *(_WORD *)&v16[4] = 2048;
      *(_QWORD *)&v16[6] = v3 / 0xF4240;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "DISARMED: lenAvg %u, ivalAvg %llu ms", (uint8_t *)&v15, 0x12u);
    }
    *(_BYTE *)(a1 + 344) = 0;
    dispatch_suspend(*(dispatch_object_t *)(a1 + 336));
  }
}

void sub_1002B77B0(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t **v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t *v16;
  NSObject *v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  uint8_t buf[8];
  uint64_t v25;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v5 = (uint64_t **)(a1 + 16);
    v6 = a1 + 24;
    do
    {
      v7 = *(unsigned __int16 *)(v3 + 32);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t *)v3;
      else
        v9 = (uint64_t *)(v3 + 8);
      if (v8)
        v6 = v3;
      v3 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 24 && *(unsigned __int16 *)(v6 + 32) <= a2)
    {
      v10 = *(_QWORD *)(v6 + 40);
      v11 = *(_QWORD *)(a1 + 72);
      v12 = *(_DWORD *)(v10 + 200);
      if (!v11)
        goto LABEL_25;
      v13 = a1 + 72;
      do
      {
        v14 = *(_DWORD *)(v11 + 28);
        v15 = v14 < v12;
        if (v14 >= v12)
          v16 = (uint64_t *)v11;
        else
          v16 = (uint64_t *)(v11 + 8);
        if (!v15)
          v13 = v11;
        v11 = *v16;
      }
      while (*v16);
      if (v13 == a1 + 72 || v12 < *(_DWORD *)(v13 + 28))
      {
LABEL_25:
        v17 = qword_100999868;
        if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = a2;
          _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Wasn't tracking a server socket for pipe 0x%04x", buf, 8u);
          v12 = *(_DWORD *)(v10 + 200);
        }
      }
      *(_DWORD *)buf = v12;
      sub_1002BBADC(a1 + 64, (int *)buf);
      sub_1000040CC(v5, (uint64_t *)v6);
      operator delete((void *)v6);
      if (*(_DWORD *)(v10 + 368) == 3)
      {
        v18 = *(_QWORD *)(v10 + 112);
        *(_BYTE *)(a1 + 137) = 0;
        if (qword_100977B40 != -1)
          dispatch_once(&qword_100977B40, &stru_100922B58);
        sub_1004BA6AC(off_100977B38, 0);
        LOBYTE(v23) = 0;
        sub_100043758(&v23);
        v19 = sub_10019AC00(v18);
        sub_10004339C(&v23);
        if (v19)
        {
          v20 = sub_1000438A4();
          v21 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v20 + 80))(v20, *(unsigned int *)(v18 + 57) | ((unint64_t)*(unsigned __int16 *)(v18 + 61) << 32), 0, 8, 0, 0, 1, 0);
          v22 = qword_100999868;
          if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v21;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Untag iso link as high priority with result %d", buf, 8u);
          }
        }
        sub_100043728(&v23);
      }
      *(_QWORD *)buf = 0;
      v25 = 0;
      uuid_copy(buf, (const unsigned __int8 *)(v10 + 400));
      sub_1002BB258(v10);
      operator delete();
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
    sub_1006DAAE4();
}

void sub_1002B7B00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100043728(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B7B20(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6, _WORD *a7, char a8, char a9)
{
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  _QWORD block[9];
  int v22;
  int v23;
  __int16 v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  int v34;

  v27 = 0;
  v28 = &v27;
  v29 = 0x2020000000;
  v30 = 0;
  v17 = qword_100999868;
  if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v32 = a3;
    v33 = 1024;
    v34 = a4;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Registering skywalk pipe for pipeID:0x%4x pid:%d", buf, 0xEu);
  }
  if (*(_QWORD *)(a1 + 112))
  {
    *a7 = 0;
    v18 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002B7CA8;
    block[3] = &unk_100922AF0;
    v24 = a3;
    block[4] = &v27;
    block[5] = a1;
    v22 = a4;
    v23 = a6;
    v25 = a9;
    block[6] = a2;
    block[7] = a7;
    v26 = a8;
    block[8] = a5;
    dispatch_sync(v18, block);
    v19 = *((unsigned int *)v28 + 6);
  }
  else
  {
    v19 = 114;
  }
  _Block_object_dispose(&v27, 8);
  return v19;
}

void sub_1002B7CA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t extended;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  _QWORD v24[5];
  _QWORD v25[6];
  _QWORD v26[5];
  int v27;
  _QWORD v28[5];
  _QWORD handler[5];
  int v30;
  _DWORD handle[3];
  uint64_t v32;
  _QWORD block[5];
  unsigned __int8 v34[16];
  uuid_t dst;
  unsigned __int8 src[8];
  uint64_t v37;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    goto LABEL_12;
  v4 = *(unsigned __int16 *)(a1 + 80);
  v5 = v2 + 24;
  do
  {
    v6 = *(unsigned __int16 *)(v3 + 32);
    v7 = v6 >= v4;
    if (v6 >= v4)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 + 24 && v4 >= *(unsigned __int16 *)(v5 + 32))
  {
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
      sub_1006DAD20();
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v10 = 103;
  }
  else
  {
LABEL_12:
    *(_QWORD *)src = 0;
    v37 = 0;
    if (!os_nexus_controller_alloc_provider_instance(*(_QWORD *)(v2 + 112), v2 + 120, src))
    {
      v11 = *(_QWORD *)(v2 + 112);
      v12 = getpid();
      os_nexus_controller_bind_provider_instance(v11, src, 1, v12, 0, 0, 0, 1);
      v13 = os_nexus_controller_bind_provider_instance(*(_QWORD *)(v2 + 112), src, 0, *(unsigned int *)(a1 + 72), 0, 0, 0, 1);
      v14 = os_channel_attr_create(v13);
      os_channel_attr_set(v14, 7, 1);
      extended = os_channel_create_extended(src, 1, 0, 0xFFFFFFFFLL, v14);
      if (!extended)
      {
        v16 = qword_100999868;
        if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
          sub_1006DAC94(v16);
      }
      *(_QWORD *)&handle[1] = 0;
      v32 = 0;
      os_channel_attr_get(v14, 2, &v32);
      os_channel_attr_get(v14, 3, &handle[1]);
      os_channel_attr_destroy(v14);
      handle[0] = os_channel_get_fd(extended);
      v17 = dispatch_group_create();
      v18 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, handle[0], 0, *(dispatch_queue_t *)(v2 + 8));
      if (v18)
      {
        v19 = v18;
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_1002B8548;
        handler[3] = &unk_1009173C0;
        handler[4] = v2;
        v30 = handle[0];
        dispatch_source_set_event_handler(v18, handler);
        dispatch_group_enter(v17);
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472;
        v28[2] = sub_1002B8630;
        v28[3] = &unk_100917378;
        v28[4] = v17;
        dispatch_source_set_cancel_handler(v19, v28);
        v20 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_write, handle[0], 0, *(dispatch_queue_t *)(v2 + 8));
        if (v20)
        {
          v21 = v20;
          v26[0] = _NSConcreteStackBlock;
          v26[1] = 3221225472;
          v26[2] = sub_1002B8638;
          v26[3] = &unk_1009173C0;
          v26[4] = v2;
          v27 = handle[0];
          dispatch_source_set_event_handler(v20, v26);
          dispatch_group_enter(v17);
          v25[0] = _NSConcreteStackBlock;
          v25[1] = 3221225472;
          v25[2] = sub_1002B8720;
          v25[3] = &unk_100918090;
          v25[4] = extended;
          v25[5] = v17;
          dispatch_source_set_cancel_handler(v21, v25);
          dispatch_resume(v19);
          memset(dst, 0, sizeof(dst));
          uuid_copy(dst, src);
          v22 = *(NSObject **)(v2 + 8);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3321888768;
          block[2] = sub_1002B8748;
          block[3] = &unk_100922AB8;
          block[4] = v2;
          uuid_copy(v34, dst);
          dispatch_group_notify(v17, v22, block);
          dispatch_release(v17);
          v23 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v2 + 8));
          v24[0] = _NSConcreteStackBlock;
          v24[1] = 3221225472;
          v24[2] = sub_1002B876C;
          v24[3] = &unk_100917378;
          v24[4] = v23;
          dispatch_source_set_event_handler(v23, v24);
          operator new();
        }
        if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
          sub_1006DABBC();
        dispatch_release(v19);
      }
      else if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
      {
        sub_1006DAB48();
      }
    }
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v10 = 4;
  }
  *(_DWORD *)(v9 + 24) = v10;
}

void sub_1002B84EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a18 < 0)
    operator delete(__p);
  if (a55 < 0)
    operator delete(a50);
  _Unwind_Resume(exception_object);
}

void sub_1002B8548(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    v4 = *(_DWORD *)(a1 + 40);
    v5 = v2 + 72;
    do
    {
      v6 = *(_DWORD *)(v3 + 28);
      v7 = v6 < v4;
      if (v6 >= v4)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (!v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 != v2 + 72 && v4 >= *(_DWORD *)(v5 + 28))
    {
      v9 = *(_QWORD *)(v2 + 24);
      if (!v9)
        goto LABEL_28;
      v10 = *(unsigned __int16 *)(v5 + 32);
      v11 = v2 + 24;
      do
      {
        v12 = *(unsigned __int16 *)(v9 + 32);
        v13 = v12 >= v10;
        if (v12 >= v10)
          v14 = (uint64_t *)v9;
        else
          v14 = (uint64_t *)(v9 + 8);
        if (v13)
          v11 = v9;
        v9 = *v14;
      }
      while (*v14);
      if (v11 != v2 + 24 && v10 >= *(unsigned __int16 *)(v11 + 32))
      {
        sub_1002B6428((_BYTE *)v2, v10, *(_QWORD *)(v11 + 40));
      }
      else
      {
LABEL_28:
        if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
          sub_1006DA6F8();
      }
    }
  }
}

void sub_1002B8630(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1002B8638(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 72);
  if (v3)
  {
    v4 = *(_DWORD *)(a1 + 40);
    v5 = v2 + 72;
    do
    {
      v6 = *(_DWORD *)(v3 + 28);
      v7 = v6 < v4;
      if (v6 >= v4)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (!v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 != v2 + 72 && v4 >= *(_DWORD *)(v5 + 28))
    {
      v9 = *(_QWORD *)(v2 + 24);
      if (!v9)
        goto LABEL_28;
      v10 = *(unsigned __int16 *)(v5 + 32);
      v11 = v2 + 24;
      do
      {
        v12 = *(unsigned __int16 *)(v9 + 32);
        v13 = v12 >= v10;
        if (v12 >= v10)
          v14 = (uint64_t *)v9;
        else
          v14 = (uint64_t *)(v9 + 8);
        if (v13)
          v11 = v9;
        v9 = *v14;
      }
      while (*v14);
      if (v11 != v2 + 24 && v10 >= *(unsigned __int16 *)(v11 + 32))
      {
        sub_1002B65D8(v2, v10, *(_QWORD *)(v11 + 40));
      }
      else
      {
LABEL_28:
        if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
          sub_1006DA6F8();
      }
    }
  }
}

void sub_1002B8720(uint64_t a1)
{
  os_channel_destroy(*(_QWORD *)(a1 + 32));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1002B8748(uint64_t a1)
{
  return os_nexus_controller_free_provider_instance(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 112), a1 + 40);
}

void sub_1002B875C(uint64_t a1, uint64_t a2)
{
  uuid_copy((unsigned __int8 *)(a1 + 40), (const unsigned __int8 *)(a2 + 40));
}

void sub_1002B876C(uint64_t a1)
{
  NSObject *v1;
  _QWORD *context;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  __uint64_t v7;
  _DWORD v8[2];

  v1 = *(NSObject **)(a1 + 32);
  context = dispatch_get_context(v1);
  if (context)
  {
    v3 = context;
    sub_1002B75A0((uint64_t)context, 0);
    v4 = v3[28];
    if (v4)
    {
      v5 = qword_100999868;
      if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_INFO))
      {
        v6 = *((_DWORD *)v3 + 66);
        v8[0] = 67109120;
        v8[1] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "TIMER: flushing %u held up packets", (uint8_t *)v8, 8u);
      }
      if (*((_DWORD *)v3 + 66))
      {
        v7 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
        *((_DWORD *)v3 + 66) = 0;
        v3[41] = v7;
        os_channel_sync(v4, 0);
      }
    }
  }
  else
  {
    dispatch_suspend(v1);
  }
}

void sub_1002B888C(uint64_t a1, __int16 a2)
{
  NSObject *v2;
  _QWORD v3[5];
  __int16 v4;

  v2 = *(NSObject **)(a1 + 8);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002B88E8;
  v3[3] = &unk_100920960;
  v3[4] = a1;
  v4 = a2;
  dispatch_sync(v2, v3);
}

void sub_1002B88E8(uint64_t a1)
{
  sub_1002B77B0(*(_QWORD *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

uint64_t sub_1002B88F8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2 == (_QWORD *)(a1 + 24))
    return 0;
  while (1)
  {
    v3 = v2[5];
    if (*(_QWORD *)(v3 + 112) == a2 && *(_DWORD *)(v3 + 368) == 3)
      break;
    v4 = (_QWORD *)v2[1];
    if (v4)
    {
      do
      {
        v5 = v4;
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v5 = (_QWORD *)v2[2];
        v6 = *v5 == (_QWORD)v2;
        v2 = v5;
      }
      while (!v6);
    }
    v2 = v5;
    if (v5 == (_QWORD *)(a1 + 24))
      return 0;
  }
  return 1;
}

uint64_t sub_1002B896C(uint64_t a1, __int128 *a2, const void *a3, unsigned __int8 a4)
{
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;

  v16 = 0;
  sub_100043758(&v16);
  v7 = sub_1000F2184(a2, a3, a4);
  if ((_DWORD)v7)
  {
    v8 = qword_100999868;
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
      sub_1006DAD84(v7, v8, v9, v10, v11, v12, v13, v14);
    v7 = 1;
  }
  sub_100043728(&v16);
  return v7;
}

void sub_1002B8A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B8A14(uint64_t a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t *v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;

  v19 = a3;
  v20 = a2;
  v3 = (_QWORD *)(a1 + 48);
  v4 = *(_QWORD **)(a1 + 48);
  v5 = (uint64_t **)(a1 + 40);
  if (v4)
  {
    v6 = v3;
    do
    {
      v7 = v4[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = v4;
      else
        v9 = v4 + 1;
      if (v8)
        v6 = v4;
      v4 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v6 != v3 && v6[4] <= a2)
    {
      v12 = (_QWORD *)v6[6];
      v10 = v6 + 6;
      v11 = v12;
      if (v12)
      {
        v13 = v10;
        do
        {
          v14 = v11[4];
          v15 = v14 >= a3;
          if (v14 >= a3)
            v16 = v11;
          else
            v16 = v11 + 1;
          if (v15)
            v13 = v11;
          v11 = (_QWORD *)*v16;
        }
        while (*v16);
        if (v13 != v10 && v13[4] <= a3)
          return 15;
      }
    }
  }
  v21 = &v20;
  v17 = sub_1002BBB54(v5, &v20, (uint64_t)&unk_100740F58, (uint64_t **)&v21);
  sub_10000F7A0((uint64_t **)v17 + 5, &v19, (uint64_t *)&v19);
  return 0;
}

uint64_t sub_1002B8AEC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t *v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;

  v5 = *(_QWORD **)(a1 + 48);
  v3 = (_QWORD *)(a1 + 48);
  v4 = v5;
  if (!v5)
    return 16;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (v8)
      v6 = v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3)
    return 16;
  if (v6[4] > a2)
    return 16;
  v12 = (_QWORD *)v6[6];
  v10 = v6 + 6;
  v11 = v12;
  if (!v12)
    return 16;
  v13 = v10;
  v14 = v11;
  do
  {
    v15 = v14[4];
    v16 = v15 >= a3;
    if (v15 >= a3)
      v17 = v14;
    else
      v17 = v14 + 1;
    if (v16)
      v13 = v14;
    v14 = (_QWORD *)*v17;
  }
  while (*v17);
  if (v13 == v10 || v13[4] > a3)
    return 16;
  v19 = v10;
  do
  {
    v20 = v11[4];
    v21 = v20 >= a3;
    if (v20 >= a3)
      v22 = v11;
    else
      v22 = v11 + 1;
    if (v21)
      v19 = v11;
    v11 = (_QWORD *)*v22;
  }
  while (*v22);
  if (v19 == v10 || v19[4] > a3)
    v19 = v10;
  sub_1000040CC((uint64_t **)v10 - 1, v19);
  operator delete(v19);
  return 0;
}

void sub_1002B8BD8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, char a5)
{
  if (qword_100991AB0 != -1)
    dispatch_once(&qword_100991AB0, &stru_1009229E8);
  sub_1002B8C48(qword_1009993E8, a1, a2, a3, a5);
}

void sub_1002B8C48(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, char a5)
{
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v11[4];
  id v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a3, a4));
  v9 = sub_1000419F4();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1002B8D1C;
  v11[3] = &unk_100922B18;
  v13 = a1;
  v14 = a2;
  v10 = v8;
  v12 = v10;
  v15 = a5;
  sub_100041A34(v9, v11);

}

void sub_1002B8CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1002B8D1C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  _QWORD *v8;
  void (***v9)(_QWORD, void *, _QWORD, _QWORD);
  id v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  uuid_t uu;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD **)(v1 + 40);
  v3 = (_QWORD *)(v1 + 48);
  if (v2 != (_QWORD *)(v1 + 48))
  {
    do
    {
      if (v2[4] == *(_QWORD *)(a1 + 48))
      {
        v8 = (_QWORD *)v2[5];
        if (v8 != v2 + 6)
        {
          do
          {
            v9 = (void (***)(_QWORD, void *, _QWORD, _QWORD))v8[4];
            memset(uu, 0, sizeof(uu));
            uuid_clear(uu);
            if (qword_1009778A8 != -1)
              dispatch_once(&qword_1009778A8, &stru_100922B78);
            if (sub_10061E090((uint64_t)off_1009778A0, *(_QWORD *)(a1 + 48), uu))
            {
              v10 = sub_100030DF4(uu);
              v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
              (**v9)(v9, v11, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 56));

            }
            v12 = (_QWORD *)v8[1];
            if (v12)
            {
              do
              {
                v13 = v12;
                v12 = (_QWORD *)*v12;
              }
              while (v12);
            }
            else
            {
              do
              {
                v13 = (_QWORD *)v8[2];
                v7 = *v13 == (_QWORD)v8;
                v8 = v13;
              }
              while (!v7);
            }
            v8 = v13;
          }
          while (v13 != v2 + 6);
        }
      }
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
}

void sub_1002B8EBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002B8ED4(uint64_t a1, int a2, const void *a3, size_t a4, uint64_t a5, char a6)
{
  _QWORD *v11;
  NSObject *v12;
  int v13;
  size_t v14;
  __int16 v15;
  int v16;

  v11 = malloc_type_malloc(a4 + 24, 0x744BC97EuLL);
  v12 = qword_100999868;
  if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_INFO))
  {
    v13 = 134218240;
    v14 = a4;
    v15 = 1024;
    v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Received %zu bytes on pipe id:%04X", (uint8_t *)&v13, 0x12u);
  }
  *(_WORD *)v11 = a2;
  v11[1] = a4;
  *((_BYTE *)v11 + 18) = a6;
  memcpy((char *)v11 + 19, a3, a4);
  sub_10000A0C8(21, 0);
  dispatch_async_f(*(dispatch_queue_t *)(a1 + 8), v11, (dispatch_function_t)sub_1002B8FF8);
}

void sub_1002B8FF8(unsigned __int16 *a1)
{
  sub_1002B911C(qword_1009993E8, a1);
}

void sub_1002B9008(uint64_t a1, int a2, const void *a3, size_t a4, __int16 a5, int a6, char a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v14 = malloc_type_malloc(a4 + 24, 0xB9B72F0DuLL);
  *(_WORD *)v14 = a2;
  v14[1] = a4;
  *((_WORD *)v14 + 8) = a5;
  *((_BYTE *)v14 + 18) = a7;
  memcpy((char *)v14 + 19, a3, a4);
  v15 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15))
  {
    v16 = sub_1000438A4();
    if ((sub_1003335A8(v16) & 1) == 0)
    {
      if (a6)
      {
        sub_1000F1C84(a2);
      }
      else
      {
        v17 = 0;
        sub_100043758(&v17);
        sub_1000F1C84(a2);
        sub_10004339C(&v17);
        sub_100043728(&v17);
      }
    }
  }
  dispatch_async_f(*(dispatch_queue_t *)(a1 + 8), v14, (dispatch_function_t)sub_1002B8FF8);
}

void sub_1002B9108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

void sub_1002B911C(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  void *__p[2];
  char v14;
  unsigned __int16 *v15;
  uint8_t buf[8];
  char v17;

  v15 = a2;
  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (!v3)
      goto LABEL_35;
    v4 = *a2;
    v5 = a1 + 24;
    do
    {
      v6 = *(unsigned __int16 *)(v3 + 32);
      v7 = v6 >= v4;
      if (v6 >= v4)
        v8 = (uint64_t *)v3;
      else
        v8 = (uint64_t *)(v3 + 8);
      if (v7)
        v5 = v3;
      v3 = *v8;
    }
    while (*v8);
    if (v5 == a1 + 24 || v4 < *(unsigned __int16 *)(v5 + 32))
    {
LABEL_35:
      if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
        sub_1006DAE14();
      goto LABEL_28;
    }
    v10 = *(_QWORD *)(v5 + 40);
    if (*(_QWORD *)(v10 + 168))
    {
      sub_1002BBCC0((_QWORD *)(v10 + 128), &v15);
    }
    else
    {
      if (sub_1002B93B8(a1, v4, *(_QWORD *)(v5 + 40), (unsigned __int8 *)a2 + 19, *((_QWORD *)a2 + 1), a2[8], *((unsigned __int8 *)a2 + 18)))
      {
LABEL_28:
        free(a2);
        return;
      }
      v11 = qword_100999868;
      if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_INFO))
      {
        v12 = *a2;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Socket is now full on pipe 0x%04x - starting write source", buf, 8u);
      }
      sub_1002BBCC0((_QWORD *)(v10 + 128), &v15);
      if (!*(_QWORD *)(v10 + 8))
        dispatch_resume(*(dispatch_object_t *)(v10 + 192));
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
      sub_1006DADE8();
    if (qword_10097AA70 != -1)
      dispatch_once(&qword_10097AA70, &stru_100922B98);
    v9 = qword_10097AA68;
    sub_100091AE8(buf, "Magnet");
    sub_100091AE8(__p, "receivedDataFromStackDispatched");
    sub_10047C59C(0.0, v9, (uint64_t *)buf, (uint64_t *)__p);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
      operator delete(*(void **)buf);
  }
}

void sub_1002B937C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002B93B8(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5, int a6, unsigned int a7)
{
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t next_slot;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t packet;
  uint64_t next_buflet;
  void *object_address;
  __int16 v35;
  unsigned int data_limit;
  size_t v37;
  NSObject *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  NSObject *v43;
  ssize_t v44;
  unint64_t v45;
  uint64_t v46;
  __uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  unsigned __int8 *v52;
  int v53;
  char v54;
  char v55[15];
  char v56;
  char v57[15];
  char v58;
  char v59[15];
  char v60;
  char v61[15];
  char v62;
  char v63[15];
  uint8_t v64[4];
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint8_t buf[32];
  __int128 v79;
  __int128 v80;

  if (*(_BYTE *)(a1 + 139))
    sub_1002B9C7C(a1, a4, a5, a6, 1, *(unsigned __int8 *)(a1 + 140));
  if (*(_QWORD *)(a3 + 8))
    return sub_1002B9A70(a1, 0, a3, (uint64_t)a4, a5, 0, a7);
  if (a7)
  {
    v15 = qword_100999868;
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "WakeUpState=1. Waking up packet", buf, 2u);
    }
  }
  v16 = *(_QWORD *)(a3 + 224);
  if (!v16)
  {
    v42 = a5 - *(_QWORD *)(a3 + 176);
    sub_10000A0C8(22, 0);
    v43 = qword_100999868;
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = a5;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a2;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "Writing %zu bytes to pipe %#06x", buf, 0x12u);
    }
    v44 = write(*(_DWORD *)(a3 + 200), &a4[*(_QWORD *)(a3 + 176)], v42);
    if (v44 == -1)
    {
      if (*__error() != 35 && os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
        sub_1006DAE74();
      return 0;
    }
    else
    {
      v45 = *(_QWORD *)(a3 + 176) + v44;
      if (v45 >= a5)
      {
        *(_QWORD *)(a3 + 176) = 0;
        return 1;
      }
      else
      {
        v46 = 0;
        *(_QWORD *)(a3 + 176) = v45;
      }
    }
    return v46;
  }
  v53 = a6;
  v79 = 0u;
  v80 = 0u;
  memset(buf, 0, sizeof(buf));
  v17 = *(_QWORD *)(a3 + 232);
  if (!v17)
  {
    v18 = qword_100999868;
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
      sub_1006DAFDC(v18, v19, v20, v21, v22, v23, v24, v25);
  }
  next_slot = os_channel_get_next_slot(v17, 0, buf);
  v27 = *(_QWORD *)(a3 + 176);
  v76 = 0;
  v77 = 0;
  v49 = a5 - v27;
  if (a5 == v27)
    goto LABEL_56;
  v28 = next_slot;
  v48 = v16;
  if (next_slot)
  {
    v51 = a1;
    v52 = a4;
    v29 = a5 - v27;
    v30 = v53;
    v50 = a7;
    while (1)
    {
      v31 = *(_QWORD *)(a3 + 176);
      ++*(_DWORD *)(a3 + 264);
      packet = os_channel_slot_get_packet(v17, v28);
      next_buflet = os_packet_get_next_buflet(packet, 0);
      if (!next_buflet && os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
        sub_1006DAFB4(&v62, v63);
      object_address = (void *)os_buflet_get_object_address(next_buflet);
      LOWORD(v76) = v30;
      BYTE2(v76) = a7;
      LOWORD(v77) = v30;
      os_packet_set_flow_uuid(packet, &v76);
      v35 = *(_WORD *)&buf[2];
      if (v29 < *(unsigned __int16 *)&buf[2])
        v35 = v29;
      *(_WORD *)&buf[2] = v35;
      data_limit = os_buflet_get_data_limit(next_buflet);
      LOWORD(v37) = data_limit;
      if (data_limit >= 0x10000 && os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
        sub_1006DAF8C(&v60, v61);
      if (v29 >= (unsigned __int16)v37)
        v37 = (unsigned __int16)v37;
      else
        v37 = v29;
      if ((unsigned __int16)os_buflet_set_data_length(next_buflet, v37)
        && os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
      {
        sub_1006DAF64(&v58, v59);
      }
      if ((unsigned __int16)os_packet_finalize(packet)
        && os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
      {
        sub_1006DAF3C(&v56, v57);
      }
      if ((_DWORD)v37 != *(unsigned __int16 *)&buf[2]
        && os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
      {
        sub_1006DAF14(&v54, v55);
      }
      memcpy(object_address, &v52[v31], v37);
      *(_QWORD *)(a3 + 176) = v37 + v31;
      os_channel_set_slot_properties(v17, v28, buf);
      v30 = v53;
      if (*(_BYTE *)(v51 + 138))
      {
        v38 = qword_1009998A0;
        if (os_log_type_enabled((os_log_t)qword_1009998A0, OS_LOG_TYPE_DEFAULT))
        {
          v39 = byte_1009998A8++;
          *(_DWORD *)v64 = 67110400;
          v65 = 20;
          v66 = 1024;
          v67 = 60;
          v68 = 1024;
          v69 = v53;
          v70 = 1024;
          v71 = v53;
          v72 = 1024;
          v73 = v37;
          v74 = 1024;
          v75 = v39;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "27 {curProtocol: %hhu, nextProtocol: %hhu, curSeqnStart: %hu, curSeqnEnd: %hu, curLen: %hu, logSeqn: %hhu}", v64, 0x26u);
        }
      }
      v29 -= v37;
      v40 = os_channel_get_next_slot(v17, v28, buf);
      if (!v29)
        break;
      v41 = v28;
      v28 = v40;
      LOBYTE(a7) = v50;
      if (!v40)
        goto LABEL_47;
    }
    os_channel_advance_slot(v17, v28);
    v16 = v48;
LABEL_56:
    *(_QWORD *)(a3 + 176) = 0;
    v46 = 1;
    goto LABEL_57;
  }
  v41 = 0;
LABEL_47:
  v16 = v48;
  if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
  {
    sub_1006DAEE8();
    if (!v41)
      goto LABEL_50;
    goto LABEL_49;
  }
  if (v41)
LABEL_49:
    os_channel_advance_slot(v17, v41);
LABEL_50:
  v46 = 0;
LABEL_57:
  v47 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  if (sub_1002B9BA4(a3, v47, v49) || !(_DWORD)v46)
  {
    *(_DWORD *)(a3 + 264) = 0;
    *(_QWORD *)(a3 + 328) = v47;
    sub_1002B75A0(a3, 0);
    os_channel_sync(v16, 0);
  }
  else
  {
    sub_1002B75A0(a3, 1);
  }
  return v46;
}

_BYTE *sub_1002B9A18()
{
  char v1;

  v1 = 0;
  sub_100043758(&v1);
  sub_1000EF638((uint64_t)sub_1002B8BD8, 0);
  return sub_100043728(&v1);
}

void sub_1002B9A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_100043728(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B9A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unsigned int a7)
{
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __uint64_t v18;
  void (*v19)(_QWORD);
  uint64_t (*v21)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v8 = *(_QWORD *)(a3 + 176);
  v9 = *(_QWORD **)(a3 + 16);
  v10 = a5 - v8;
  if (a5 == v8)
  {
LABEL_14:
    *(_QWORD *)(a3 + 176) = 0;
    v17 = 1;
    goto LABEL_15;
  }
  v13 = a7;
  v14 = a5 - v8;
  do
  {
    ++*(_DWORD *)(a3 + 264);
    if (v14 >= a5)
      v15 = a5;
    else
      v15 = v14;
    v21 = 0;
    if (!v9)
    {
      v16 = 0;
LABEL_10:
      v17 = 1;
      goto LABEL_11;
    }
    v16 = v9[1];
    if (!v16)
      goto LABEL_10;
    v17 = ((uint64_t (*)(_QWORD, uint64_t, unint64_t, _QWORD, uint64_t, _QWORD))v16)(*v9, a4 + v8, v15, &v21, v13, 0);
    v16 = (uint64_t)v21;
LABEL_11:
    v8 += v16;
    *(_QWORD *)(a3 + 176) = v8;
    v14 -= v16;
  }
  while ((_DWORD)v17 && v14);
  if (!v14)
    goto LABEL_14;
LABEL_15:
  v18 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  if (sub_1002B9BA4(a3, v18, v10) || !(_DWORD)v17)
  {
    *(_DWORD *)(a3 + 264) = 0;
    *(_QWORD *)(a3 + 328) = v18;
    sub_1002B75A0(a3, 0);
    if (v9)
    {
      v19 = (void (*)(_QWORD))v9[2];
      if (v19)
        v19(*v9);
    }
  }
  else
  {
    sub_1002B75A0(a3, 1);
  }
  return v17;
}

BOOL sub_1002B9BA4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(unsigned int *)(a1 + 276);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)(a1 + 304);
    if (v4)
      v5 = *(_QWORD *)(a1 + 328) == 0;
    else
      v5 = 1;
    if (*(_DWORD *)(a1 + 368) == 3)
      return 1;
    a3 = (a3 - v3 + (v3 << *(_DWORD *)(a1 + 280))) >> *(_DWORD *)(a1 + 280);
  }
  else
  {
    if (*(_DWORD *)(a1 + 368) == 3)
      return 1;
    v4 = *(_QWORD *)(a1 + 304);
    v5 = 1;
  }
  *(_DWORD *)(a1 + 276) = a3;
  v6 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = a2;
  if (v4)
    v7 = (unint64_t)(a2 - v4 - v6 + (v4 << *(_DWORD *)(a1 + 312))) >> *(_DWORD *)(a1 + 312);
  else
    v7 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 304) = v7;
  if (!v5
    && v7 <= *(_QWORD *)(a1 + 296)
    && *(_DWORD *)(a1 + 272) < a3
    && *(_DWORD *)(a1 + 264) < *(_DWORD *)(a1 + 256))
  {
    return (unint64_t)(a2 - *(_QWORD *)(a1 + 328)) > *(_QWORD *)(a1 + 320);
  }
  return 1;
}

void sub_1002B9C7C(uint64_t a1, unsigned __int8 *a2, unint64_t a3, int a4, int a5, int a6)
{
  const char *v10;
  os_log_t *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  os_log_t *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  int v28;
  const char *v29;
  uint8_t buf[4];
  _BYTE v32[14];
  __int16 v33;
  char *v34;
  char v35;
  _BYTE v36[7];

  bzero(v36, 0x3E9FuLL);
  v10 = "ToSocket:";
  if (!a5)
    v10 = "ToStack:";
  v29 = v10;
  v11 = (os_log_t *)&qword_100999868;
  if (a3 <= 4 && a5 == 1)
  {
    if (a6)
    {
      v12 = qword_100999868;
      if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
        sub_1006DB04C(a3, v12, v13, v14, v15, v16, v17, v18);
    }
  }
  v35 = 0;
  v28 = a3;
  if (a3)
  {
    v19 = 0;
    v20 = a3 - 1;
    if (a3 - 1 >= 0x3E9F)
      v20 = 16031;
    v21 = v20 + 1;
    v22 = -1;
    v23 = 449;
    do
    {
      sprintf(&v35, "%s%02x", &v35, *a2);
      if (a6)
        v22 = dword_10073D510[(*a2 ^ v22)] ^ (v22 >> 8);
      if (!(v23 + 450 * (v19 / 0x1C2)))
      {
        v24 = v11;
        v25 = *v11;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)v32 = a4;
          *(_WORD *)&v32[4] = 2080;
          *(_QWORD *)&v32[6] = v29;
          v33 = 2080;
          v34 = &v35;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "SkwData:%05u:=%s %s ", buf, 0x1Cu);
        }
        v35 = 0;
        v11 = v24;
      }
      ++a2;
      --v23;
      ++v19;
      --v21;
    }
    while (v21);
  }
  else
  {
    v22 = -1;
  }
  v26 = *v11;
  if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)v32 = a4;
    *(_WORD *)&v32[4] = 2080;
    *(_QWORD *)&v32[6] = v29;
    v33 = 2080;
    v34 = &v35;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "SkwData:%05u:=%s %s ", buf, 0x1Cu);
    v26 = *v11;
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v32 = v28;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Got packet: size=%u  ", buf, 8u);
  }
  if (a6)
  {
    v27 = *v11;
    if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v32 = v29;
      *(_WORD *)&v32[8] = 1024;
      *(_DWORD *)&v32[10] = a4;
      v33 = 1024;
      LODWORD(v34) = v22;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%s:Seq=%02u CRC value:0x%08x  ", buf, 0x18u);
    }
  }
}

void sub_1002B9FC0(void *context)
{
  dispatch_async_f(*(dispatch_queue_t *)(qword_1009993E8 + 8), (void *)context, (dispatch_function_t)sub_1002B9FE0);
}

void sub_1002B9FE0(unsigned __int16 a1)
{
  sub_1002B9FF4(qword_1009993E8, a1);
}

void sub_1002B9FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  void (*v12)(_QWORD);
  NSObject *v13;
  uint8_t v14[16];
  uint8_t buf[16];

  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    goto LABEL_27;
  v5 = a1 + 24;
  do
  {
    v6 = *(unsigned __int16 *)(v3 + 32);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 24 && *(unsigned __int16 *)(v5 + 32) <= a2)
  {
    v9 = *(_QWORD *)(v5 + 40);
    v10 = qword_100999868;
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Stack is ready for more data", buf, 2u);
    }
    if (*(_QWORD *)(v9 + 8))
    {
      v11 = *(_QWORD *)(v9 + 24);
      if (v11)
      {
        v12 = *(void (**)(_QWORD))(v11 + 16);
        if (v12)
          v12(*(_QWORD *)(v11 + 24));
      }
    }
    else if (sub_1002BA164(a1, a2, v9))
    {
      v13 = qword_100999868;
      if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Starting the read source for the pipe", v14, 2u);
      }
      sub_1002BB3F8(v9, 0);
    }
  }
  else
  {
LABEL_27:
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
      sub_1006DB0B0();
  }
}

uint64_t sub_1002BA164(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t next_slot;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t packet;
  uint64_t next_buflet;
  unsigned int data_offset;
  uint64_t object_address;
  unsigned int data_length;
  unsigned int v26;
  NSObject *v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  int v33;
  int v34;
  NSObject *v35;
  int v36;
  int v37;
  int v38;
  _BOOL4 v39;
  NSObject *v40;
  int v41;
  uint64_t v42;
  int v43;
  NSObject *v44;
  const char *v45;
  int v46;
  uint64_t v47;
  int v48;
  ssize_t v49;
  unsigned __int16 v50;
  unsigned __int8 *v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  NSObject *v56;
  NSObject *v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  __int16 v67;
  unsigned int v68;
  unsigned __int16 v69;
  char v71;
  char v72;
  char v73[15];
  char v74;
  char v75[15];
  char v76;
  char v77[11];
  unsigned int v78;
  uint8_t buf[8];
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;
  __int16 v84;
  int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  size_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _BYTE v100[2570];

  bzero(v100, 0xA0AuLL);
  v5 = *(_QWORD *)(a3 + 224);
  v78 = 0;
  v68 = a2;
  v66 = v5;
  if (!v5)
  {
    while (1)
    {
      *(_QWORD *)buf = v100;
      LODWORD(v94) = 2570;
      v37 = *(_DWORD *)(a3 + 372);
      if (v37 == 2)
        break;
      if (v37 == 1)
      {
        if (*(unsigned __int16 *)(a3 + 376) >= 0xA0Au)
          v46 = 2570;
        else
          v46 = *(unsigned __int16 *)(a3 + 376);
        LODWORD(v94) = v46;
        v47 = qword_100999868;
        if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_DEFAULT))
        {
          v48 = *(_DWORD *)(a3 + 364);
          LODWORD(v96) = 67109376;
          DWORD1(v96) = v46;
          WORD4(v96) = 1024;
          *(_DWORD *)((char *)&v96 + 10) = v48;
          v44 = v47;
          v45 = "MAX buffer size for the L2CAP Channel is %d getWriteBufferUsed=%d";
LABEL_74:
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, v45, (uint8_t *)&v96, 0xEu);
        }
        goto LABEL_75;
      }
      if (v37)
      {
        v39 = 0;
        v38 = 0;
      }
      else
      {
        v76 = 0;
        sub_100043758(&v76);
        v38 = sub_100176770(*(_QWORD *)(a3 + 112), buf, (int *)&v94);
        sub_10004339C(&v76);
        v39 = v38 == 0;
        if (v38)
        {
          v40 = qword_100999868;
          if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v96) = 67109632;
            DWORD1(v96) = a2;
            WORD4(v96) = 1024;
            *(_DWORD *)((char *)&v96 + 10) = v38;
            HIWORD(v96) = 1024;
            LODWORD(v97) = v94;
            _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "Failed to get a buffer from the stack for pipe 0x%04x with result %{bluetooth:OI_STATUS}u, default size %d", (uint8_t *)&v96, 0x14u);
          }
        }
        sub_100043728(&v76);
      }
LABEL_77:
      v49 = read(*(_DWORD *)(a3 + 200), *(void **)buf, v94);
      v50 = v49;
      if (v49 < 1)
      {
        if (v49)
        {
          if (*__error() == 35)
          {
            if (v39)
            {
              LOBYTE(v96) = 0;
              sub_100043758(&v96);
              sub_1001767B4(*(void **)buf);
              sub_10004339C(&v96);
              sub_100043728(&v96);
            }
            return 1;
          }
          if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
            sub_1006DB178();
        }
        else
        {
          v58 = qword_100999868;
          if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
            sub_1006DB114(a2, v58, v59, v60, v61, v62, v63, v64);
        }
        if (v39)
        {
          LOBYTE(v96) = 0;
          sub_100043758(&v96);
          sub_1001767B4(*(void **)buf);
          sub_10004339C(&v96);
          sub_100043728(&v96);
        }
        return 0;
      }
      if (a1[139])
      {
        v51 = *(unsigned __int8 **)buf;
        v52 = v94;
        v53 = sub_1001EEB34(a2);
        sub_1002B9C7C(v53, v51, v52, v53, 0, a1[140]);
      }
      v76 = 0;
      sub_100043758(&v76);
      v54 = *(_DWORD *)(a3 + 372);
      if (v54 == 2)
      {
        v55 = sub_10023E874((uint64_t)sub_1002B9FC0, a2, *(char **)buf, v50);
      }
      else if (v54 == 1)
      {
        v55 = sub_1001DBF20((uint64_t)sub_1002B9FC0, a2, 0, *(char **)buf, v50);
      }
      else
      {
        if (v54)
          goto LABEL_87;
        v55 = sub_1000F1F44((uint64_t)sub_1002B9FC0, *(__int128 **)(a3 + 112), a2, *(char **)buf, v50, v39);
      }
      v38 = v55;
LABEL_87:
      sub_10004339C(&v76);
      if (v38)
      {
        if (v38 != 412)
        {
          v56 = qword_100999868;
          if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v96) = 67109376;
            DWORD1(v96) = a2;
            WORD4(v96) = 1024;
            *(_DWORD *)((char *)&v96 + 10) = v38;
            _os_log_error_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "Failed to transmit data from socket on pipe 0x%04x with result %{bluetooth:OI_STATUS}u", (uint8_t *)&v96, 0xEu);
          }
        }
      }
      sub_100043728(&v76);
      if (v38 != 412)
        return 0;
    }
    if (*(unsigned __int16 *)(a3 + 376) >= 0xA0Au)
      v41 = 2570;
    else
      v41 = *(unsigned __int16 *)(a3 + 376);
    LODWORD(v94) = v41;
    v42 = qword_100999868;
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_DEFAULT))
    {
      v43 = *(_DWORD *)(a3 + 364);
      LODWORD(v96) = 67109376;
      DWORD1(v96) = v41;
      WORD4(v96) = 1024;
      *(_DWORD *)((char *)&v96 + 10) = v43;
      v44 = v42;
      v45 = "MAX buffer size for the RFCOMM Channel is %d getWriteBufferUsed=%d";
      goto LABEL_74;
    }
LABEL_75:
    v39 = 0;
    v38 = 0;
    a2 = v68;
    goto LABEL_77;
  }
  v6 = *(_QWORD *)(a3 + 240);
  if (!v6)
  {
    v7 = qword_100999868;
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
      sub_1006DB278(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  next_slot = os_channel_get_next_slot(v6, 0, &v96);
  v16 = 0;
  v67 = 0;
  v69 = 0;
  v94 = 0;
  v95 = 0;
  while (1)
  {
    if (*(_DWORD *)(a3 + 372) && os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
      sub_1006DB250(&v76, v77);
    if (next_slot)
    {
      v17 = 0;
      while (1)
      {
        v18 = next_slot;
        v19 = *(_DWORD *)(a3 + 364);
        if (*(_DWORD *)(a3 + 360) - v19 < WORD1(v96))
          goto LABEL_37;
        if (v19)
          v20 = *(_DWORD *)(a3 + 368) == 3;
        else
          v20 = 0;
        if (v20)
        {
          v28 = next_slot;
          goto LABEL_36;
        }
        packet = os_channel_slot_get_packet(v6, next_slot);
        next_buflet = os_packet_get_next_buflet(packet, 0);
        if (!next_buflet && os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
          sub_1006DB228(&v74, v75);
        data_offset = os_buflet_get_data_offset(next_buflet);
        object_address = os_buflet_get_object_address(next_buflet);
        data_length = os_buflet_get_data_length(next_buflet);
        os_packet_get_flow_uuid(packet, &v94);
        v26 = WORD1(v96);
        if (*(_DWORD *)(a3 + 368) == 3
          && WORD1(v96) >= 0x2A4u
          && (v27 = qword_100999868, os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT)))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v26;
          _os_log_fault_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "Payload length %d exceeds supported MTU for isoch channel", buf, 8u);
          v26 = WORD1(v96);
          if (data_length)
          {
LABEL_26:
            if (data_length)
            {
              sub_1002BACAC(a3, (const void *)(object_address + data_offset), data_length);
            }
            else if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
            {
              sub_1006DB1F4(&v72, v73);
            }
            goto LABEL_30;
          }
        }
        else if (data_length)
        {
          goto LABEL_26;
        }
        if (!v26)
          goto LABEL_26;
        sub_1002BACAC(a3, (const void *)v97, v26);
LABEL_30:
        if (!v17)
          v17 = (unsigned __int16)v95;
        next_slot = os_channel_get_next_slot(v6, v18, &v96);
        v16 = v18;
        if (!next_slot)
        {
          v28 = 0;
          v16 = v18;
          goto LABEL_36;
        }
      }
    }
    v28 = 0;
    v17 = 0;
LABEL_36:
    v19 = *(_DWORD *)(a3 + 364);
    v18 = v28;
LABEL_37:
    v29 = v19 == 0;
    if (!v19)
      goto LABEL_96;
    v71 = 0;
    sub_100043758(&v71);
    v30 = sub_100176664(*(_QWORD *)(a3 + 112), (int *)&v78);
    if ((_DWORD)v30 && (_DWORD)v30 != 5007)
      v78 = 1015;
    v31 = *(_DWORD *)(a3 + 364);
    if (v78 >= v31)
      v32 = v31;
    else
      v32 = v78;
    if (!*(_BYTE *)(a3 + 378))
    {
      v30 = sub_1001EEB34(a2);
      v69 = v30;
    }
    if (a1[139])
      sub_1002B9C7C(v30, *(unsigned __int8 **)(a3 + 352), v32, v69, 0, a1[140]);
    v33 = sub_1000F1F44((uint64_t)sub_1002B9FC0, *(__int128 **)(a3 + 112), a2, *(char **)(a3 + 352), (unsigned __int16)v32, 0);
    if (!*(_BYTE *)(a3 + 378))
      v67 = sub_1001EEB34(a2);
    sub_10004339C(&v71);
    if (a1[138])
    {
      v34 = (unsigned __int16)v95;
      v35 = qword_1009998A0;
      if (os_log_type_enabled((os_log_t)qword_1009998A0, OS_LOG_TYPE_DEFAULT))
      {
        v36 = byte_1009998A8++;
        *(_DWORD *)buf = 67110912;
        *(_DWORD *)&buf[4] = 20;
        v80 = 1024;
        v81 = 60;
        v82 = 1024;
        v83 = v17;
        v84 = 1024;
        v85 = v34;
        v86 = 1024;
        v87 = (unsigned __int16)v32;
        v88 = 1024;
        v89 = v69;
        v90 = 1024;
        v91 = (unsigned __int16)(v67 - 1);
        v92 = 1024;
        v93 = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "28 {curProtocol: %hhu, prevProtocol: %hhu, prevSeqnStart: %hu, prevSeqnEnd: %hu, prevLen: %hu, curSeqNStart: %hu, curSeqnEnd:%hu, logSeqn: %hhu}", buf, 0x32u);
      }
    }
    ++*(_DWORD *)(a3 + 268);
    if (v33 != 412)
      break;
    sub_1002BAE00(a3, v32);
    LODWORD(a2) = v68;
    sub_100043728(&v71);
    next_slot = v18;
  }
  if (v33)
  {
    v57 = qword_100999868;
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v68;
      v80 = 1024;
      v81 = v33;
      _os_log_error_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "Failed to transmit data from socket on pipe 0x%04x with result %{bluetooth:OI_STATUS}u", buf, 0xEu);
    }
  }
  else
  {
    sub_1002BAE00(a3, v32);
  }
  sub_100043728(&v71);
LABEL_96:
  if (v16)
    os_channel_advance_slot(v6, v16);
  if (*(_DWORD *)(a3 + 368) == 3
    || *(_DWORD *)(a3 + 268) >= *(_DWORD *)(a3 + 260)
    || os_channel_available_slot_count(v6) <= 1)
  {
    *(_DWORD *)(a3 + 268) = 0;
    os_channel_sync(v66, 1);
  }
  return v29;
}

void sub_1002BAB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_100043728(&a43);
  _Unwind_Resume(a1);
}

BOOL sub_1002BAB58(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t *a6)
{
  int v11;
  BOOL v12;
  unsigned int v13;
  int v14;
  char v16;
  unsigned int v17;

  *a6 = 0;
  while (1)
  {
    v17 = 0;
    v16 = 0;
    sub_100043758(&v16);
    v11 = sub_100176664(*(_QWORD *)(a3 + 112), (int *)&v17);
    if (v11)
      v12 = v11 == 5007;
    else
      v12 = 1;
    if (!v12)
      v17 = 1015;
    v13 = v17 >= a5 - *a6 ? a5 - *a6 : v17;
    v14 = sub_1000F1F44((uint64_t)sub_1002B9FC0, *(__int128 **)(a3 + 112), a2, (char *)(a4 + *a6), (unsigned __int16)v13, 0);
    sub_10004339C(&v16);
    *a6 += v13;
    if (v14 != 412)
      break;
    sub_100043728(&v16);
    if (*a6 >= a5)
      return v14 == 412;
  }
  if (v14 && os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
    sub_1006DB2E8();
  sub_100043728(&v16);
  return v14 == 412;
}

void sub_1002BAC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12)
{
  sub_100043728(&a12);
  _Unwind_Resume(a1);
}

void *sub_1002BACAC(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v3;
  int v4;
  void *result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  os_log_t v12;
  os_log_t v13;
  uint64_t v14;

  v3 = *(unsigned int *)(a1 + 364);
  if (v3 + a3 > *(unsigned int *)(a1 + 360))
  {
    v7 = sub_100027F68();
    sub_100576510(v7, 1);
    v8 = _os_log_pack_size(12);
    v9 = (char *)&v14 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v10 = __error();
    v11 = _os_log_pack_fill(v9, v8, *v10, &_mh_execute_header, "Assertion failed: %{public}s");
    *(_DWORD *)v11 = 136446210;
    *(_QWORD *)(v11 + 4) = "fWriteBufferUsed + length <= fWriteBufferSize";
    v12 = os_log_create("com.apple.bluetooth", "CBCrash");
    if (v12)
      v13 = v12;
    else
      v13 = (os_log_t)&_os_log_default;
    qword_10097BA60 = os_log_pack_send_and_compose(v9, v13, 16, 0, 0);
    abort_with_payload(18, 2, v9, v8, qword_10097BA60, 0);
  }
  v4 = a3;
  result = memcpy((void *)(*(_QWORD *)(a1 + 352) + v3), a2, a3);
  *(_DWORD *)(a1 + 364) += v4;
  return result;
}

void *sub_1002BAE00(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v3;
  void *result;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  os_log_t v11;
  os_log_t v12;
  uint64_t v13;

  v2 = *(unsigned int *)(a1 + 364);
  if (v2 < a2)
  {
    v6 = sub_100027F68();
    sub_100576510(v6, 1);
    v7 = _os_log_pack_size(12);
    v8 = (char *)&v13 - ((__chkstk_darwin() + 15) & 0xFFFFFFFFFFFFFFF0);
    v9 = __error();
    v10 = _os_log_pack_fill(v8, v7, *v9, &_mh_execute_header, "Assertion failed: %{public}s");
    *(_DWORD *)v10 = 136446210;
    *(_QWORD *)(v10 + 4) = "fWriteBufferUsed >= length";
    v11 = os_log_create("com.apple.bluetooth", "CBCrash");
    if (v11)
      v12 = v11;
    else
      v12 = (os_log_t)&_os_log_default;
    qword_10097BA60 = os_log_pack_send_and_compose(v8, v12, 16, 0, 0);
    abort_with_payload(18, 2, v8, v7, qword_10097BA60, 0);
  }
  v3 = a2;
  result = memmove(*(void **)(a1 + 352), (const void *)(*(_QWORD *)(a1 + 352) + a2), v2 - a2);
  *(_DWORD *)(a1 + 364) -= v3;
  return result;
}

void sub_1002BAF4C(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002BAFA4;
  block[3] = &unk_100917378;
  block[4] = a1;
  dispatch_sync(v1, block);
}

_BYTE *sub_1002BAFA4(_BYTE *result)
{
  uint64_t v1;
  char v2;

  v1 = *((_QWORD *)result + 4);
  if (*(_BYTE *)(v1 + 136))
  {
    *(_BYTE *)(v1 + 136) = 0;
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_ERROR))
      sub_1006DB360();
    v2 = 0;
    sub_100043758(&v2);
    return sub_100043728(&v2);
  }
  return result;
}

uint64_t sub_1002BB014(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 112) = a3;
  *(_BYTE *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = a5;
  *(_QWORD *)(a1 + 192) = a6;
  *(_DWORD *)(a1 + 200) = a4;
  *(_DWORD *)(a1 + 204) = a7;
  uuid_clear((unsigned __int8 *)(a1 + 208));
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 368) = a8;
  *(_DWORD *)(a1 + 372) = a2;
  *(_BYTE *)(a1 + 378) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  uuid_clear((unsigned __int8 *)(a1 + 400));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  return a1;
}

void sub_1002BB0A4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1002A6638(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002BB0BC(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *src, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12, char a13)
{
  size_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)a1 = a13;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 112) = a3;
  *(_BYTE *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = a7;
  *(_QWORD *)(a1 + 192) = a8;
  *(_DWORD *)(a1 + 200) = a6;
  *(_DWORD *)(a1 + 204) = a6;
  uuid_copy((unsigned __int8 *)(a1 + 208), src);
  *(_QWORD *)(a1 + 224) = a5;
  *(_DWORD *)(a1 + 248) = a10;
  *(_DWORD *)(a1 + 252) = a11;
  *(_QWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 276) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = a9;
  *(_BYTE *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 368) = a12;
  *(_DWORD *)(a1 + 372) = a2;
  *(_BYTE *)(a1 + 378) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  uuid_clear((unsigned __int8 *)(a1 + 400));
  if (*(_DWORD *)(a1 + 368) == 3)
    v16 = 675;
  else
    v16 = 4096;
  dispatch_set_context(*(dispatch_object_t *)(a1 + 336), (void *)a1);
  if (a5)
  {
    v17 = os_channel_ring_id(a5, 0);
    *(_QWORD *)(a1 + 232) = os_channel_tx_ring(a5, v17);
    v18 = os_channel_ring_id(a5, 2);
    *(_QWORD *)(a1 + 240) = os_channel_rx_ring(a5, v18);
  }
  *(uint32x2_t *)(a1 + 256) = vshr_n_u32(*(uint32x2_t *)(a1 + 248), 1uLL);
  *(_QWORD *)(a1 + 320) = 250000000;
  *(_DWORD *)(a1 + 272) = 2496;
  *(_QWORD *)(a1 + 296) = 20000000;
  *(_DWORD *)(a1 + 280) = 2;
  *(_DWORD *)(a1 + 312) = 2;
  *(_QWORD *)(a1 + 352) = malloc_type_malloc(v16, 0x9FDFA2DuLL);
  *(_DWORD *)(a1 + 360) = v16;
  *(_DWORD *)(a1 + 364) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_BYTE *)(a1 + 108) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void sub_1002BB23C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1002A6638(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002BB258(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  void *v6;

  if (*(_QWORD *)(a1 + 8))
  {
    NRBluetoothPacketParserResetContext();
    *(_QWORD *)(a1 + 8) = 0;
  }
  v2 = *(NSObject **)(a1 + 184);
  if (v2)
  {
    dispatch_source_cancel(v2);
    if (*(_BYTE *)(a1 + 120))
      dispatch_resume(*(dispatch_object_t *)(a1 + 184));
    dispatch_release(*(dispatch_object_t *)(a1 + 184));
  }
  v3 = *(NSObject **)(a1 + 192);
  if (v3)
  {
    dispatch_source_cancel(v3);
    if (!*(_QWORD *)(a1 + 168))
      dispatch_resume(*(dispatch_object_t *)(a1 + 192));
    dispatch_release(*(dispatch_object_t *)(a1 + 192));
  }
  v4 = *(NSObject **)(a1 + 336);
  if (v4)
  {
    dispatch_set_context(v4, 0);
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 336));
    if (!*(_BYTE *)(a1 + 344))
    {
      *(_BYTE *)(a1 + 344) = 1;
      dispatch_resume(*(dispatch_object_t *)(a1 + 336));
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 336));
    *(_BYTE *)(a1 + 344) = 0;
    *(_QWORD *)(a1 + 336) = 0;
  }
  if (*(_QWORD *)(a1 + 224))
  {
    *(_OWORD *)(a1 + 268) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 288) = 0;
    *(_DWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 328) = 0;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 204);
    if (v5 != -1)
    {
      close(v5);
      *(_DWORD *)(a1 + 204) = -1;
    }
  }
  while (*(_QWORD *)(a1 + 168))
  {
    free(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + ((*(_QWORD *)(a1 + 160) >> 6) & 0x3FFFFFFFFFFFFF8))
                  + 8 * (*(_QWORD *)(a1 + 160) & 0x1FFLL)));
    *(int64x2_t *)(a1 + 160) = vaddq_s64(*(int64x2_t *)(a1 + 160), (int64x2_t)xmmword_10073D4C0);
    sub_1002BB5F8(a1 + 128, 1);
  }
  v6 = *(void **)(a1 + 352);
  if (v6)
  {
    free(v6);
    *(_QWORD *)(a1 + 352) = 0;
  }
  sub_1002A6638((_QWORD *)(a1 + 128));
  return a1;
}

void sub_1002BB3E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002A6638((_QWORD *)(v1 + 128));
  _Unwind_Resume(a1);
}

void sub_1002BB3F8(uint64_t a1, int a2)
{
  char v2;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BYTE v21[12];
  __int16 v22;
  unint64_t v23;

  v2 = a2;
  if (*(unsigned __int8 *)(a1 + 120) == a2)
  {
    v4 = qword_100999868;
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_FAULT))
      sub_1006DB38C(v4, v5, v6, v7, v8, v9, v10, v11);
  }
  *(_BYTE *)(a1 + 120) = v2;
  if ((v2 & 1) != 0)
  {
    v12 = qword_100999868;
    if (os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Read Source Suspend", v21, 2u);
    }
    dispatch_suspend(*(dispatch_object_t *)(a1 + 184));
    *(_QWORD *)v21 = 0;
    sub_10004AD30((uint64_t)v21);
    v13 = *(__int16 *)&v21[4];
    *(_QWORD *)(a1 + 384) = *(int *)v21;
    *(_QWORD *)(a1 + 392) = v13;
  }
  else
  {
    *(_QWORD *)v21 = 0;
    sub_10004AD30((uint64_t)v21);
    v14 = 1000 * (*(int *)v21 - *(_QWORD *)(a1 + 384)) - *(_QWORD *)(a1 + 392) + *(__int16 *)&v21[4];
    v15 = v14 >> 3;
    v16 = v14 / 0x3E8;
    v17 = v14 % 0x3E8;
    dispatch_resume(*(dispatch_object_t *)(a1 + 184));
    v18 = qword_100999868;
    if (v15 < 0x271)
    {
      if (!os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_INFO))
        return;
      *(_DWORD *)v21 = 134218240;
      *(_QWORD *)&v21[4] = v16;
      v22 = 2048;
      v23 = v17;
      v19 = v18;
      v20 = OS_LOG_TYPE_INFO;
    }
    else
    {
      if (!os_log_type_enabled((os_log_t)qword_100999868, OS_LOG_TYPE_DEFAULT))
        return;
      *(_DWORD *)v21 = 134218240;
      *(_QWORD *)&v21[4] = v16;
      v22 = 2048;
      v23 = v17;
      v19 = v18;
      v20 = OS_LOG_TYPE_DEFAULT;
    }
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Read Source Resume.  Suspended for %lld.%03lld seconds", v21, 0x16u);
  }
}

uint64_t sub_1002BB5F8(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x200)
    a2 = 1;
  if (v2 < 0x400)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

void sub_1002BB654(id a1)
{
  operator new();
}

void sub_1002BB694()
{
  operator delete();
}

void sub_1002BB6B8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1002BB6B8(a1, *a2);
    sub_1002BB6B8(a1, a2[1]);
    sub_10001A82C((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

uint64_t **sub_1002BB704(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _WORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[16] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    sub_100004078(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **sub_1002BB7C4(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((_WORD *)v11 + 16) = 0;
    sub_100004078(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *sub_1002BB884(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t **v6;
  uint64_t *result;
  unsigned __int8 *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_10000DC28((uint64_t)a1, &v9, uu1);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1002BB924((uint64_t)a1, a4, v8);
    sub_100004078(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_1002BB924(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (unsigned __int8 *)operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((_QWORD *)v6 + 6) = 0;
  *((_WORD *)v6 + 28) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1002BB988(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1002BB9A0(id a1)
{
  operator new();
}

void sub_1002BBAB8()
{
  operator delete();
}

uint64_t sub_1002BBADC(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 28);
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28))
    return 0;
  sub_1000040CC((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t *sub_1002BBB54(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[7] = 0;
    v11[6] = 0;
    v11[4] = v12;
    v11[5] = (uint64_t)(v11 + 6);
    sub_100004078(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_1002BBC1C(id a1)
{
  operator new();
}

void sub_1002BBC5C()
{
  operator delete();
}

void sub_1002BBC80(id a1)
{
  operator new();
}

void sub_1002BBCC0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1002BBD44(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_1002BBD44(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10007ABA0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_1002A61DC(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_1002A62F0((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10007ABA0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10007ABA0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_1002A640C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002A6520((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1002BC00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1002BC058(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xEu);
}

void sub_1002BC084(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, a5, 2u);
}

uint64_t sub_1002BC0CC(uint64_t a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = sub_1002A91D8(a1, a2, 1);
  *(_QWORD *)v3 = off_100922BE0;
  *(_BYTE *)(v3 + 96) = 0;
  mach_timebase_info((mach_timebase_info_t)(v3 + 100));
  v4 = 20000000 * (unint64_t)*(unsigned int *)(a1 + 104) / *(unsigned int *)(a1 + 100);
  *(_QWORD *)(a1 + 112) = v4;
  *(_QWORD *)(a1 + 120) = v4;
  return a1;
}

void sub_1002BC124(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1002A9224(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_1002BC144(uint64_t a1, uint64_t a2)
{
  return (unint64_t)*(unsigned int *)(a1 + 100) * a2 / *(unsigned int *)(a1 + 104) / 0xF4240;
}

void sub_1002BC16C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  void *__p[2];
  char v9;
  uint8_t buf[8];
  char v11;
  char v12;

  v2 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "AudioSendThread starting", buf, 2u);
  }
  sub_1002A92FC(a1, 63);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  v12 = 0;
  v3 = sub_100027F68();
  sub_100091AE8(buf, "A2DP");
  sub_100091AE8(__p, "DisableDiagnosingLoop");
  v4 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(_QWORD *)v3 + 72))(v3, buf, __p, &v12);
  if (v12)
    v5 = v4;
  else
    v5 = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
  {
    operator delete(*(void **)buf);
    if (!v5)
      goto LABEL_14;
  }
  else if (!v5)
  {
    goto LABEL_14;
  }
  v6 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "DiagnosingAudioLoop for A2DP disabled by defaults write -  No AudioSendThread overwait / overrun reporting", buf, 2u);
  }
LABEL_14:
  sub_1002BC330(a1, 1);
  v7 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "AudioSendThread stopping", buf, 2u);
  }
}

void sub_1002BC2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002BC330(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8_t buf[4];
  int v16;

  v4 = mach_absolute_time();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  if ((_DWORD)result)
  {
    do
    {
      if (a2)
      {
        if (*(_BYTE *)(a1 + 96))
        {
          v6 = v4;
        }
        else
        {
          v6 = mach_absolute_time();
          if (v6 >= *(_QWORD *)(a1 + 112) + v4)
          {
            v7 = qword_1009997E0;
            v8 = v6 - v4;
            if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
            {
              v14 = v8 * *(unsigned int *)(a1 + 100) / *(unsigned int *)(a1 + 104) / 0xF4240;
              *(_DWORD *)buf = 67109120;
              v16 = v14;
              _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "AudioSendThread overrun (%u ms)", buf, 8u);
            }
            kdebug_trace(730022148, v8 * *(unsigned int *)(a1 + 100) / *(unsigned int *)(a1 + 104) / 0xF4240, 0, 0, 0);
          }
        }
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
        v10 = mach_absolute_time();
        v4 = v10;
        if (*(_BYTE *)(a1 + 96))
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, (v10 - v6) * *(unsigned int *)(a1 + 100) / *(unsigned int *)(a1 + 104) / 0xF4240);
        if (v4 >= v9 + v6 + *(_QWORD *)(a1 + 120))
        {
          v11 = qword_1009997E0;
          v12 = v4 - v6;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
          {
            v13 = v12 * *(unsigned int *)(a1 + 100) / *(unsigned int *)(a1 + 104) / 0xF4240;
            *(_DWORD *)buf = 67109120;
            v16 = v13;
            _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "AudioSendThread overwait (%u ms)", buf, 8u);
          }
          kdebug_trace(730022152, v12 * *(unsigned int *)(a1 + 100) / *(unsigned int *)(a1 + 104) / 0xF4240, 0, 0, 0);
        }
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    }
    while ((result & 1) != 0);
  }
  return result;
}

uint64_t sub_1002BC5A0(uint64_t a1, char *a2)
{
  uint64_t result;

  result = sub_1002BC0CC(a1, a2);
  *(_QWORD *)result = off_100922C58;
  *(_BYTE *)(result + 144) = 0;
  return result;
}

BOOL sub_1002BC5C4(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  int v5;
  const char *v6;

  *(_QWORD *)(a1 + 128) = mach_absolute_time();
  v2 = 1000
     * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1)
     * (unint64_t)*(unsigned int *)(a1 + 104)
     / *(unsigned int *)(a1 + 100);
  *(_QWORD *)(a1 + 136) = v2;
  *(_BYTE *)(a1 + 144) = 1;
  if (HIDWORD(v2))
  {
    v3 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
    {
      v5 = 136446210;
      v6 = "fAudioInterval <= UINT32_MAX";
      _os_log_fault_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v5, 0xCu);
      v2 = *(_QWORD *)(a1 + 136);
    }
  }
  return sub_1002A92F4(a1, v2, v2 >> 2, v2 >> 2, 0);
}

uint64_t sub_1002BC6D4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 128) + *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v2;
  mach_wait_until(v2);
  return *(_QWORD *)(a1 + 136);
}

uint64_t sub_1002BC704(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

void sub_1002BC70C(uint64_t a1, char a2)
{
  NSObject *v4;
  uint8_t v5[16];

  v4 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setThreadStarted", v5, 2u);
  }
  *(_BYTE *)(a1 + 144) = a2;
}

uint64_t sub_1002BC784(uint64_t a1, char *a2, int a3)
{
  uint64_t v5;

  v5 = sub_1002BC0CC(a1, a2);
  *(_QWORD *)v5 = off_100922CD0;
  *(_BYTE *)(v5 + 144) = 0;
  *(_BYTE *)(v5 + 168) = a3;
  if (a3)
    *(_QWORD *)(a1 + 152) = dispatch_semaphore_create(0);
  return a1;
}

uint64_t sub_1002BC7D0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 168);
}

uint64_t sub_1002BC7D8(uint64_t a1)
{
  *(_QWORD *)a1 = off_100922CD0;
  if (*(_BYTE *)(a1 + 168))
    dispatch_release(*(dispatch_object_t *)(a1 + 152));
  return sub_1002A9224(a1);
}

uint64_t sub_1002BC81C(uint64_t a1)
{
  unint64_t v2;
  NSObject *v3;
  uint64_t result;
  int v5;
  const char *v6;

  *(_QWORD *)(a1 + 128) = mach_absolute_time();
  v2 = 1000
     * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1)
     * (unint64_t)*(unsigned int *)(a1 + 104)
     / *(unsigned int *)(a1 + 100);
  *(_QWORD *)(a1 + 136) = v2;
  *(_BYTE *)(a1 + 144) = 1;
  if (HIDWORD(v2))
  {
    v3 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
    {
      v5 = 136446210;
      v6 = "fAudioInterval <= UINT32_MAX";
      _os_log_fault_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v5, 0xCu);
      v2 = *(_QWORD *)(a1 + 136);
    }
  }
  sub_1002A92F4(a1, v2, v2 >> 2, v2 >> 2, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  *(_QWORD *)(a1 + 160) = 1000 * result * (unint64_t)*(unsigned int *)(a1 + 104) / *(unsigned int *)(a1 + 100);
  if (*(_BYTE *)(a1 + 168))
    return sub_1002BC964(a1);
  return result;
}

uint64_t sub_1002BC964(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 168))
  {
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 152), 0xFFFFFFFFFFFFFFFFLL);
    v2 = a1 + 160;
  }
  else
  {
    v2 = a1 + 136;
    v3 = *(_QWORD *)(a1 + 128) + *(_QWORD *)(a1 + 136);
    *(_QWORD *)(v2 - 8) = v3;
    mach_wait_until(v3);
  }
  return *(_QWORD *)v2;
}

uint64_t sub_1002BC9B4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

void sub_1002BC9BC(uint64_t a1, char a2)
{
  NSObject *v4;
  uint8_t v5[16];

  v4 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setThreadStarted", v5, 2u);
  }
  *(_BYTE *)(a1 + 144) = a2;
}

intptr_t sub_1002BCA34(intptr_t result)
{
  if (*(_BYTE *)(result + 168))
    return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(result + 152));
  return result;
}

uint64_t sub_1002BCA54()
{
  return 0;
}

void sub_1002BCAFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1002BCBA0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)a1 = off_100922D48;
  *(_QWORD *)(a1 + 8) = off_100922DF0;
  *(_QWORD *)(a1 + 16) = &off_100922E20;
  *(_QWORD *)(a1 + 24) = off_100922E38;
  *(_QWORD *)(a1 + 32) = &off_100922E90;
  *(_QWORD *)(a1 + 40) = off_100922EA8;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 52) = 0;
  *(_BYTE *)(a1 + 54) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 10;
  *(_DWORD *)(a1 + 68) = 134742017;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 135) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 143) = 1;
  *(_QWORD *)(a1 + 144) = 0x800000000;
  *(_DWORD *)(a1 + 152) = 8;
  *(_WORD *)(a1 + 156) = -1;
  *(_BYTE *)(a1 + 158) = -1;
  *(_BYTE *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 164) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 21;
  *(_BYTE *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v2 = (_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 232) = a1 + 240;
  v3 = (_QWORD *)(a1 + 232);
  *(_DWORD *)(a1 + 259) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 263) = xmmword_10073D930;
  *(_WORD *)(a1 + 279) = 1280;
  sub_10001A82C(a1 + 232, 0);
  *v3 = v2;
  *(_QWORD *)(a1 + 248) = 0;
  *v2 = 0;
  sub_1002BCD38(a1);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
  return a1;
}

void sub_1002BCCFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  _QWORD **v5;
  void **v6;
  void *v8;
  void *v9;

  v6 = v3;
  sub_10001A82C(v2, *v5);
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 120) = v8;
    operator delete(v8);
  }
  v9 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 80) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void sub_1002BCD38(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  NSObject *v25;
  const char *v26;
  void *__p[2];
  char v28;
  char v29;
  _BYTE buf[12];
  char v31;

  if (_os_feature_enabled_impl("CoreWiFi", "Figaro5GTDD"))
  {
    v2 = qword_100999968;
    if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Warning: BandSwitchManager: CoreWifi Defaults right Figaro5GTDD is enabled", buf, 2u);
    }
  }
  v29 = 0;
  v3 = sub_100027F68();
  sub_100091AE8(buf, "Filippo");
  sub_100091AE8(__p, "ForceISM24");
  v4 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v3 + 72))(v3, buf, __p, &v29);
  if (v29)
    v5 = v4;
  else
    v5 = 0;
  if (v28 < 0)
    operator delete(__p[0]);
  if ((v31 & 0x80000000) == 0)
  {
    if (!v5)
      goto LABEL_12;
    goto LABEL_11;
  }
  operator delete(*(void **)buf);
  if (v5)
LABEL_11:
    *(_DWORD *)(a1 + 152) = 0;
LABEL_12:
  v6 = sub_100027F68();
  sub_100091AE8(buf, "Filippo");
  sub_100091AE8(__p, "ForceUnii1");
  v7 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v6 + 72))(v6, buf, __p, &v29);
  if (v29)
    v8 = v7;
  else
    v8 = 0;
  if (v28 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
  {
    operator delete(*(void **)buf);
    if (v8)
      goto LABEL_19;
  }
  else if (v8)
  {
LABEL_19:
    v9 = 1;
    goto LABEL_68;
  }
  v10 = sub_100027F68();
  sub_100091AE8(buf, "Filippo");
  sub_100091AE8(__p, "ForceUnii3");
  v11 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v10 + 72))(v10, buf, __p, &v29);
  if (v29)
    v12 = v11;
  else
    v12 = 0;
  if (v28 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
  {
    operator delete(*(void **)buf);
    if (v12)
      goto LABEL_30;
  }
  else if (v12)
  {
LABEL_30:
    v9 = 2;
    goto LABEL_68;
  }
  v13 = sub_100027F68();
  sub_100091AE8(buf, "Filippo");
  sub_100091AE8(__p, "ForceUnii5a");
  v14 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v13 + 72))(v13, buf, __p, &v29);
  if (v29)
    v15 = v14;
  else
    v15 = 0;
  if (v28 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
  {
    operator delete(*(void **)buf);
    if (v15)
      goto LABEL_39;
  }
  else if (v15)
  {
LABEL_39:
    v9 = 4;
    goto LABEL_68;
  }
  v16 = sub_100027F68();
  sub_100091AE8(buf, "Filippo");
  sub_100091AE8(__p, "ForceUnii5b");
  v17 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v16 + 72))(v16, buf, __p, &v29);
  if (v29)
    v18 = v17;
  else
    v18 = 0;
  if (v28 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
  {
    operator delete(*(void **)buf);
    if (v18)
      goto LABEL_48;
  }
  else if (v18)
  {
LABEL_48:
    v9 = 5;
    goto LABEL_68;
  }
  v19 = sub_100027F68();
  sub_100091AE8(buf, "Filippo");
  sub_100091AE8(__p, "ForceUnii5c");
  v20 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v19 + 72))(v19, buf, __p, &v29);
  if (v29)
    v21 = v20;
  else
    v21 = 0;
  if (v28 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
    operator delete(*(void **)buf);
  if (v21)
  {
    v9 = 6;
  }
  else
  {
    v22 = sub_100027F68();
    sub_100091AE8(buf, "Filippo");
    sub_100091AE8(__p, "ForceUnii5d");
    v23 = (*(uint64_t (**)(uint64_t, _BYTE *, void **, char *))(*(_QWORD *)v22 + 72))(v22, buf, __p, &v29);
    if (v29)
      v24 = v23;
    else
      v24 = 0;
    if (v28 < 0)
      operator delete(__p[0]);
    if (v31 < 0)
      operator delete(*(void **)buf);
    if (!v24)
    {
      v9 = *(_DWORD *)(a1 + 152);
      if (v9 == 8)
        return;
      goto LABEL_69;
    }
    v9 = 7;
  }
LABEL_68:
  *(_DWORD *)(a1 + 152) = v9;
LABEL_69:
  v25 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    if (v9 > 7)
      v26 = "Unknown BSM Band Code";
    else
      v26 = off_100922FF8[v9];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Warning: BandSwitchManager: Defaults write ForceUnii is enabled for UNII %s", buf, 0xCu);
  }
  *(_BYTE *)(a1 + 144) = 1;
}

void sub_1002BD1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1002BD258(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  int v3;
  const char *v4;

  sub_1002BD304(a1 + 104, a2);
  v2 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 136315138;
    v4 = "void BT::BandSwitchManager::addEventListener(BandSwitchManagerListener *)";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v3, 0xCu);
  }
}

void sub_1002BD304(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_1002C3148(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1002BD38C(os_unfair_lock_s *a1, char a2)
{
  NSObject *v2;
  _QWORD v3[4];
  char v4;
  uint8_t buf[4];
  const char *v6;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002BD528;
  v3[3] = &unk_100922EC8;
  v4 = a2;
  sub_1002BD46C(a1 + 26, v3);
  v2 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v6 = "virtual void BT::BandSwitchManager::notifyHRBEnabled(BOOL)";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
}

void sub_1002BD46C(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002BD500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002BD528(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 8))(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002BD540(os_unfair_lock_s *a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[5];
  uint8_t buf[4];
  const char *v5;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002BD620;
  v3[3] = &unk_100922EE8;
  v3[4] = a2;
  sub_1002BD46C(a1 + 26, v3);
  v2 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v5 = "virtual void BT::BandSwitchManager::notifyBandSwitched(Device *)";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
}

uint64_t sub_1002BD620(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32));
}

void sub_1002BD638(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t v7[8];
  _QWORD v8[5];

  if (sub_1002BD7B0())
  {
    v2 = sub_10034FE84();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 48))(v2, a1 + 16);
    if (qword_1009778E8 != -1)
      dispatch_once(&qword_1009778E8, &stru_100922F08);
    sub_10007A76C((uint64_t)off_1009778E0 + 240, a1 + 40);
    if (qword_100977A58 != -1)
      dispatch_once(&qword_100977A58, &stru_100922F28);
    sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 8);
    v3 = sub_100016B48();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 128))(v3, a1 + 24);
    v4 = sub_100038E50();
    sub_100260F7C(v4 + 288, a1 + 32);
    if ((_os_feature_enabled_impl("CoreWiFi", "Figaro5GTDD") & 1) == 0)
    {
      v5 = sub_10006BBEC();
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_1002BD888;
      v8[3] = &unk_100917378;
      v8[4] = a1;
      sub_100041A34(v5, v8);
    }
  }
  else
  {
    v6 = qword_100999968;
    if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Did not init as Chipset isn't supported", v7, 2u);
    }
  }
}

uint64_t sub_1002BD7B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;
  char v7;

  v7 = 0;
  v0 = sub_100027F68();
  sub_100091AE8(v5, "Device");
  sub_100091AE8(__p, "EnableHRB");
  (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v0 + 72))(v0, v5, __p, &v7);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  v1 = sub_1000438A4();
  LODWORD(result) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 2496))(v1);
  if (v7)
    return 1;
  else
    return result;
}

void sub_1002BD854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002BD888(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int v4;
  int v5;
  char v6;
  __int16 v7;
  __int16 v8;

  v1 = *(_QWORD *)(a1 + 32);
  v8 = 0;
  v7 = 0;
  v6 = 0;
  v5 = 0;
  v2 = sub_100038E50();
  result = (*(uint64_t (**)(uint64_t, char *, __int16 *, char *, __int16 *, char *, int *))(*(_QWORD *)v2 + 48))(v2, (char *)&v8 + 1, &v8, (char *)&v7 + 1, &v7, &v6, &v5);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(v1 + 160) = v7;
    if (HIBYTE(v8))
    {
      v4 = 1;
    }
    else if ((_BYTE)v8)
    {
      v4 = 2;
    }
    else
    {
      if (!HIBYTE(v7))
      {
        *(_DWORD *)(v1 + 164) = 0;
        return result;
      }
      v4 = 3;
    }
    *(_DWORD *)(v1 + 164) = v4;
  }
  return result;
}

void sub_1002BD928(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[5];
  _QWORD v5[5];
  int v6;

  v2 = sub_10006BBEC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002C0D14;
  v5[3] = &unk_1009173C0;
  v5[4] = a1;
  v6 = 0;
  sub_100041A34(v2, v5);
  v3 = sub_10006BBEC();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002BD9C0;
  v4[3] = &unk_100917378;
  v4[4] = a1;
  sub_100041A34(v3, v4);
}

void sub_1002BD9C0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  _QWORD v4[5];
  int v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v4[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Update Bands after Stack Start", (uint8_t *)v4, 2u);
  }
  v3 = sub_10006BBEC();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002C0D14;
  v4[3] = &unk_1009173C0;
  v4[4] = v1;
  v5 = 3;
  sub_100041A34(v3, v4);
}

void sub_1002BDA6C(uint64_t a1)
{
  sub_1002BD928(a1 - 8);
}

void sub_1002BDA74(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];
  int v4;

  v2 = sub_10006BBEC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002C0D14;
  v3[3] = &unk_1009173C0;
  v3[4] = a1;
  v4 = 1;
  sub_100041A34(v2, v3);
}

void sub_1002BDADC(uint64_t a1)
{
  sub_1002BDA74(a1 - 8);
}

const char *sub_1002BDAE4(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x15)
    return "BandSwitchManager: Unknown BSM Event";
  else
    return off_100922F48[a2];
}

uint64_t sub_1002BDB08(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  _BOOL4 v5;
  uint64_t result;
  const char *v7;
  NSObject *v8;
  _BOOL4 v9;
  NSObject *v10;
  int v11;
  const char *v12;

  v2 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 136315138;
    v12 = "BOOL BT::BandSwitchManager::BSMHRBEnablementConditionsMet()";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Entering %s", (uint8_t *)&v11, 0xCu);
  }
  sub_1002BDD70(a1);
  v3 = *(_QWORD *)(a1 + 56);
  if (!v3 || !*(_BYTE *)(a1 + 52) || !*(_BYTE *)(a1 + 53) || *(_BYTE *)(a1 + 54))
  {
    v4 = qword_100999968;
    v5 = os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v5)
      return result;
    LOWORD(v11) = 0;
    v7 = "BandSwitchManager: BSM isn't ready to enable HRB yet";
    goto LABEL_9;
  }
  if (*(_BYTE *)(a1 + 144))
  {
    v8 = qword_100999968;
    if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: BandSwitchManager: HRB conditions met by overriding, due to defaults rights flag forceHRB being set!", (uint8_t *)&v11, 2u);
    }
    *(_BYTE *)(a1 + 69) = *(_DWORD *)(a1 + 152);
    return 1;
  }
  if (*(_BYTE *)(v3 + 1364)
    && *(_BYTE *)(v3 + 1366)
    && !*(_BYTE *)(a1 + 136)
    && *(unsigned __int8 *)(a1 + 68) >= 2u
    && *(_BYTE *)(a1 + 69)
    && *(_BYTE *)(a1 + 143)
    && !*(_BYTE *)(a1 + 142)
    && !*(_BYTE *)(a1 + 137)
    && !*(_BYTE *)(a1 + 141)
    && !*(_BYTE *)(a1 + 138)
    && !*(_BYTE *)(a1 + 139)
    && *(_BYTE *)(a1 + 145)
    && !*(_BYTE *)(a1 + 140)
    && (*(_DWORD *)(a1 + 164) < 2u || !*(_BYTE *)(a1 + 160)))
  {
    v10 = qword_100999968;
    if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: HRB conditions met", (uint8_t *)&v11, 2u);
    }
    return 1;
  }
  v4 = qword_100999968;
  v9 = os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v9)
  {
    LOWORD(v11) = 0;
    v7 = "BandSwitchManager: HRB conditions are not met";
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v11, 2u);
    return 0;
  }
  return result;
}

void sub_1002BDD70(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  _BOOL4 v5;
  _BYTE *v6;
  int v7;
  const char *v8;
  const char *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _BYTE *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  const char *v32;
  int v33;
  unint64_t v34;
  const char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  const char *v41;
  int v42;
  uint64_t v43;
  const char *v44;
  _BYTE buf[12];
  char v46;
  uint8_t v47[4];
  _BYTE *v48;

  v2 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "---------- BandSwitchManager START DUMP STATE ----------", buf, 2u);
  }
  v3 = *(_QWORD *)(a1 + 56);
  v4 = qword_100999968;
  v5 = os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT);
  if (!v3)
  {
    if (!v5)
      goto LABEL_26;
    *(_WORD *)buf = 0;
    v10 = "BandSwitchManager: Device is NULL";
    v11 = v4;
    v12 = 2;
    goto LABEL_25;
  }
  if (v5)
  {
    sub_10043E5F8(v3, buf);
    if (v46 >= 0)
      v6 = buf;
    else
      v6 = *(_BYTE **)buf;
    *(_DWORD *)v47 = 136446210;
    v48 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device                     : %{public}s", v47, 0xCu);
    if (v46 < 0)
      operator delete(*(void **)buf);
    v4 = qword_100999968;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 1364);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "AoS State                  : %d", buf, 8u);
    v4 = qword_100999968;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 1366))
      v8 = "Yes";
    else
      v8 = "No";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "AllowedBandSet             : %s", buf, 0xCu);
    v4 = qword_100999968;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 1365))
      v9 = "HRB";
    else
      v9 = "2.4Ghz";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v9;
    v10 = "CurrentFrequency           : %s";
    v11 = v4;
    v12 = 12;
LABEL_25:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
  }
LABEL_26:
  v13 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(unsigned __int8 *)(a1 + 52);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Stack State                : %d", buf, 8u);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(unsigned __int8 *)(a1 + 53);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Location Update Complete   : %d", buf, 8u);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(unsigned __int8 *)(a1 + 54);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Band Update Pending        : %d", buf, 8u);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(unsigned __int8 *)(a1 + 136);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v17;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Debounce Enabled           : %d", buf, 8u);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Debounce Retry Value       : %d", buf, 8u);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v19 = *(unsigned __int8 *)(a1 + 68);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v19;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Allowed Band               : 0x%X", buf, 8u);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v20 = *(unsigned __int8 *)(a1 + 69);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v20;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Current Band               : 0x%X", buf, 8u);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v21 = *(unsigned __int8 *)(a1 + 137);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "AWDL State                 : %d", buf, 8u);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v22 = *(unsigned __int8 *)(a1 + 138);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Low Wi-Fi Rate             : %d", buf, 8u);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v23 = *(unsigned __int8 *)(a1 + 139);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v23;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "AWDL RTG State             : %d", buf, 8u);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v24 = *(unsigned __int8 *)(a1 + 141);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Nan State                  : %d", buf, 8u);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v25 = *(unsigned __int8 *)(a1 + 142);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v25;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Host 5GHz AP State         : %d", buf, 8u);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v26 = *(unsigned __int8 *)(a1 + 140);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v26;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "UWB 5Ghz                   : %d", buf, 8u);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    sub_100021AE4(a1 + 160);
    if (v46 >= 0)
      v27 = buf;
    else
      v27 = *(_BYTE **)buf;
    *(_DWORD *)v47 = 136315138;
    v48 = v27;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "WiFiState                  : %s", v47, 0xCu);
    if (v46 < 0)
      operator delete(*(void **)buf);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v28 = *(unsigned __int8 *)(a1 + 143);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v28;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "HRB Requested              : %d", buf, 8u);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v29 = *(unsigned __int8 *)(a1 + 145);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v29;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Suffucient BW for BT       : %d", buf, 8u);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v30 = *(unsigned __int8 *)(a1 + 146);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v30;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Wi-Fi BW GT Max            : %d", buf, 8u);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v31 = *(int *)(a1 + 148);
    if (v31 > 8)
      v32 = "Unknown BSM Band Code";
    else
      v32 = off_100923098[v31];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v32;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Wi-Fi Current Band         : %s", buf, 0xCu);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v33 = ((*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2) + 1;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v33;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Num Bands Available        : %d", buf, 8u);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v34 = *(char *)(a1 + 69);
    if (v34 > 8)
      v35 = "Unknown BSM Band Code";
    else
      v35 = off_100923098[v34];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v35;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Current Selected HRB Band  : %s", buf, 0xCu);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v36 = *(_DWORD *)(a1 + 96);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v36;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Current HRB Band Idx       : %d", buf, 8u);
    v13 = qword_100999968;
  }
  v37 = *(_QWORD *)(a1 + 72);
  v38 = *(_QWORD *)(a1 + 80);
  if (v38 != v37)
  {
    v39 = 0;
    do
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v40 = *(int *)(v37 + 4 * v39);
        v41 = "Unknown BSM Band Code";
        if (v40 <= 8)
          v41 = off_100923098[v40];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v41;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "           %s ", buf, 0xCu);
        v13 = qword_100999968;
        v37 = *(_QWORD *)(a1 + 72);
        v38 = *(_QWORD *)(a1 + 80);
      }
      ++v39;
    }
    while (v39 < (v38 - v37) >> 2);
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "BSM_BAND_CODE_ISM24";
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "           %s ", buf, 0xCu);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v42 = _os_feature_enabled_impl("CoreWiFi", "Figaro5GTDD");
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v42;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "HRBTDD Allowed             : %d", buf, 8u);
    v13 = qword_100999968;
  }
  if (*(_BYTE *)(a1 + 144) && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "ForceHRB                   : On", buf, 2u);
    v13 = qword_100999968;
  }
  v43 = *(int *)(a1 + 152);
  if ((_DWORD)v43 != 8 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    if (v43 > 7)
      v44 = "Unknown BSM Band Code";
    else
      v44 = off_100922FF8[v43];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v44;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Force UNII for band        : %s", buf, 0xCu);
    v13 = qword_100999968;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "---------- BandSwitchManager END DUMP STATE ----------", buf, 2u);
  }
}

uint64_t sub_1002BE8D8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  _BOOL4 v5;
  uint64_t result;
  NSObject *v7;
  int v8;
  const char *v9;

  v2 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 136315138;
    v9 = "BOOL BT::BandSwitchManager::BSMHRBDebounceConditionsMet()";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Entering %s", (uint8_t *)&v8, 0xCu);
  }
  sub_1002BDD70(a1);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 && *(_BYTE *)(v3 + 1364) && !*(_BYTE *)(v3 + 1365))
  {
    v7 = qword_100999968;
    if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: HRB Debounce conditions met", (uint8_t *)&v8, 2u);
    }
    return 1;
  }
  else
  {
    v4 = qword_100999968;
    v5 = os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v5)
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: HRB Debounce conditions are not met", (uint8_t *)&v8, 2u);
      return 0;
    }
  }
  return result;
}

void sub_1002BEA34(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL4 v4;
  int v5;
  const char *v6;
  const char *v7;
  int v8;
  _QWORD *v9;
  _BOOL8 v10;
  const char *v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  const char *v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;

  v2 = *(_QWORD *)(a1 + 184);
  v3 = qword_100999968;
  v4 = os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT);
  if (!v2)
  {
    if (!v4)
      return;
    *(_WORD *)buf = 0;
    v16 = "BandSwitchManager: No Metrics to display";
    goto LABEL_27;
  }
  if (v4)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "---------- BandSwitchManager START DUMP LAST SESSION METRICS ----------", buf, 2u);
    v3 = qword_100999968;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)buf = 67109120;
    LODWORD(v18) = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Session PID                : 0x%X", buf, 8u);
    v3 = qword_100999968;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(const char **)(a1 + 192);
    *(_DWORD *)buf = 134217984;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Session Duration           : %llu", buf, 0xCu);
    v3 = qword_100999968;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(const char **)(a1 + 208);
    *(_DWORD *)buf = 134217984;
    v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "HRB Duration                : %llu", buf, 0xCu);
    v3 = qword_100999968;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(a1 + 228);
    *(_DWORD *)buf = 67109120;
    LODWORD(v18) = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Band Code                  : 0x%X", buf, 8u);
    v3 = qword_100999968;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Downswitch Reason", buf, 2u);
    v3 = qword_100999968;
  }
  v9 = *(_QWORD **)(a1 + 232);
  if (v9 != (_QWORD *)(a1 + 240))
  {
    do
    {
      v10 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
      if (v10)
      {
        v11 = sub_1002BDAE4(v10, *((_DWORD *)v9 + 7));
        v12 = *((unsigned __int16 *)v9 + 16);
        *(_DWORD *)buf = 136315394;
        v18 = v11;
        v19 = 1024;
        v20 = v12;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s                         : %d", buf, 0x12u);
        v3 = qword_100999968;
      }
      v13 = (_QWORD *)v9[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v9[2];
          v15 = *v14 == (_QWORD)v9;
          v9 = v14;
        }
        while (!v15);
      }
      v9 = v14;
    }
    while (v14 != (_QWORD *)(a1 + 240));
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v16 = "---------- BandSwitchManager END DUMP LAST SESSION METRICS ----------";
LABEL_27:
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v16, buf, 2u);
  }
}

uint64_t sub_1002BED5C(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  uint64_t result;
  NSObject *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  NSObject *v14;
  int v15;
  const char *v16;
  __int16 v17;
  const char *v18;

  switch(a2)
  {
    case 0u:
      v4 = *(_DWORD *)(a1 + 48);
      if (v4)
        goto LABEL_5;
      return 0;
    case 1u:
      v4 = *(_DWORD *)(a1 + 48);
LABEL_5:
      if (v4 > 4 || ((1 << v4) & 0x19) == 0)
        goto LABEL_18;
      v7 = qword_100999968;
      if (!os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
        goto LABEL_45;
      v8 = "Unknown BSM State";
      v9 = "Unknown BSM State";
      if (v4 <= 4)
        v9 = off_100923070[v4];
      if (a2 == 1)
        v8 = "BSM_STATE_IDLE";
      if (!a2)
        v8 = "BSM_STATE_OFF";
      v15 = 136446466;
      v16 = v9;
      v17 = 2082;
      v18 = v8;
      goto LABEL_44;
    case 2u:
      v4 = *(_DWORD *)(a1 + 48);
LABEL_18:
      if (v4 != 1)
        goto LABEL_23;
      v7 = qword_100999968;
      if (!os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
        goto LABEL_45;
      if (a2 > 2)
        v10 = "Unknown BSM State";
      else
        v10 = off_100923038[a2];
      v15 = 136446466;
      v16 = "BSM_STATE_IDLE";
      v17 = 2082;
      v18 = v10;
      goto LABEL_44;
    case 3u:
      v4 = *(_DWORD *)(a1 + 48);
LABEL_23:
      if (v4 != 2)
        goto LABEL_28;
      v7 = qword_100999968;
      if (!os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
        goto LABEL_45;
      if (a2 > 3)
        v11 = "Unknown BSM State";
      else
        v11 = off_100923050[a2];
      v15 = 136446466;
      v16 = "BSM_STATE_ANALYZE";
      v17 = 2082;
      v18 = v11;
      goto LABEL_44;
    case 4u:
      v4 = *(_DWORD *)(a1 + 48);
LABEL_28:
      if ((v4 & 0xFFFFFFFE) != 2)
        goto LABEL_37;
      v7 = qword_100999968;
      if (!os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
        goto LABEL_45;
      v12 = "Unknown BSM State";
      v13 = "BSM_STATE_ANALYZE";
      if (v4 != 2)
        v13 = "Unknown BSM State";
      if (v4 == 3)
        v13 = "BSM_STATE_CONFIGURE";
      if (a2 <= 4)
        v12 = off_100923070[a2];
      v15 = 136446466;
      v16 = v13;
      v17 = 2082;
      v18 = v12;
LABEL_44:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: %{public}s -> %{public}s", (uint8_t *)&v15, 0x16u);
LABEL_45:
      result = 0;
      *(_DWORD *)(a1 + 48) = a2;
      return result;
    default:
LABEL_37:
      v14 = qword_100999968;
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_FAULT))
        sub_1006DB404(a1, a2, v14);
      return 1;
  }
}

void sub_1002BF080(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v7[6];
  char v8;

  if (a3)
  {
    v6 = sub_10006BBEC();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1002BF0F8;
    v7[3] = &unk_10091FF68;
    v7[4] = a1;
    v7[5] = a3;
    v8 = a2;
    sub_100041A34(v6, v7);
  }
}

void sub_1002BF0F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  void *p_p;
  uint64_t v7;
  int v8;
  void *__p;
  uint64_t v10;
  void (*v11)(uint64_t);
  void *v12;
  uint64_t v13;
  int v14;
  uint8_t buf[4];
  void *v16;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 56);
  if (v3 && *(_BYTE *)(v3 + 1364) && *(_QWORD *)(a1 + 40) != v3 && *(_BYTE *)(a1 + 48))
  {
    if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_ERROR))
      sub_1006DB514();
    return;
  }
  v4 = *(_QWORD *)(a1 + 40);
  if (v4 != v3)
  {
    v5 = qword_100999968;
    if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(v4, &__p);
      if (SHIBYTE(v11) >= 0)
        p_p = &__p;
      else
        p_p = __p;
      *(_DWORD *)buf = 136446210;
      v16 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: AoS update on new device %{public}s.", buf, 0xCu);
      if (SHIBYTE(v11) < 0)
        operator delete(__p);
      v4 = *(_QWORD *)(a1 + 40);
    }
    *(_QWORD *)(v2 + 56) = v4;
    v3 = v4;
  }
  if (!v3)
  {
    if (!*(_BYTE *)(a1 + 48))
    {
LABEL_22:
      v7 = sub_10006BBEC();
      __p = _NSConcreteStackBlock;
      v10 = 3221225472;
      v11 = sub_1002C0D14;
      v12 = &unk_1009173C0;
      v13 = v2;
      v8 = 5;
LABEL_25:
      v14 = v8;
      sub_100041A34(v7, &__p);
      return;
    }
LABEL_24:
    v7 = sub_10006BBEC();
    __p = _NSConcreteStackBlock;
    v10 = 3221225472;
    v11 = sub_1002C0D14;
    v12 = &unk_1009173C0;
    v13 = v2;
    v8 = 4;
    goto LABEL_25;
  }
  if (*(_BYTE *)(v3 + 1364))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_ERROR))
        sub_1006DB4E8();
      return;
    }
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 48))
    goto LABEL_24;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_ERROR))
    sub_1006DB4BC();
}

void sub_1002BF330(uint64_t a1, void *a2, char a3, char a4, char a5, char a6, char a7)
{
  id v13;
  uint64_t v14;
  id v15;
  _QWORD v16[4];
  id v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v13 = a2;
  v14 = sub_10006BBEC();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1002BF418;
  v16[3] = &unk_1009197C8;
  v18 = a1;
  v15 = v13;
  v17 = v15;
  v19 = a3;
  v20 = a4;
  v21 = a5;
  v22 = a6;
  v23 = a7;
  sub_100041A34(v14, v16);

}

void sub_1002BF3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1002BF418(uint64_t a1)
{
  _BYTE *v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD v13[5];
  _BYTE buf[24];
  void *v15;
  _BYTE v16[12];

  v2 = *(_BYTE **)(a1 + 40);
  v3 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(unsigned __int8 *)(a1 + 48);
    v6 = *(unsigned __int8 *)(a1 + 49);
    v7 = *(unsigned __int8 *)(a1 + 50);
    v8 = *(unsigned __int8 *)(a1 + 51);
    v9 = *(unsigned __int8 *)(a1 + 52);
    *(_DWORD *)buf = 138544642;
    *(_QWORD *)&buf[4] = v4;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v5;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v6;
    LOWORD(v15) = 1024;
    *(_DWORD *)((char *)&v15 + 2) = v7;
    HIWORD(v15) = 1024;
    *(_DWORD *)v16 = v8;
    *(_WORD *)&v16[4] = 1024;
    *(_DWORD *)&v16[6] = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BandSwitchManager::locationUpdate - country: %{public}@, ISM 2.4 CC: %u, LEFlag: %u, UNII-1 CC: %u, UNII-3 CC: %u, UNII-5 CC: %u", buf, 0x2Au);
  }
  v2[156] = *(_BYTE *)(a1 + 50);
  v2[157] = *(_BYTE *)(a1 + 51);
  v2[158] = *(_BYTE *)(a1 + 52);
  v2[53] = 0;
  v10 = sub_10006BBEC();
  *(_QWORD *)buf = _NSConcreteStackBlock;
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = sub_1002C0D14;
  v15 = &unk_1009173C0;
  *(_QWORD *)v16 = v2;
  *(_DWORD *)&v16[8] = 2;
  sub_100041A34(v10, buf);
  if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", CFSTR("KR")))
    v11 = 22;
  else
    v11 = 5;
  v2[275] = v11;
  v12 = sub_10006BBEC();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1002BF5C4;
  v13[3] = &unk_100917378;
  v13[4] = v2;
  sub_100475CEC(v12, 1000, v13);
}

void sub_1002BF5C4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  _QWORD v4[5];
  int v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v4[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Update Bands after Location Update", (uint8_t *)v4, 2u);
  }
  v3 = sub_10006BBEC();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002C0D14;
  v4[3] = &unk_1009173C0;
  v4[4] = v1;
  v5 = 3;
  sub_100041A34(v3, v4);
}

void sub_1002BF670(uint64_t a1, void *a2, char a3, char a4, char a5, char a6, char a7)
{
  sub_1002BF330(a1 - 16, a2, a3, a4, a5, a6, a7);
}

BOOL sub_1002BF678(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  return v1 && *(_BYTE *)(v1 + 1365) != 0;
}

void sub_1002BF698(uint64_t a1, unsigned int a2)
{
  sub_1002BED5C(a1, 1u);
  if (a2 == 1)
  {
    sub_1002BF6EC(a1);
  }
  else
  {
    if (!a2)
      *(_BYTE *)(a1 + 52) = 1;
    sub_1002BF780(a1, a2);
  }
}

void sub_1002BF6EC(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  *(_BYTE *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 70) = 2056;
  *(_DWORD *)(a1 + 64) = 10;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 54) = 1;
  *(_BYTE *)(a1 + 145) = 1;
  sub_1002C03B8(a1);
  v1 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: ---------- BSM State Machine Shutdown ----------", v2, 2u);
  }
}

void sub_1002BF780(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  __uint64_t v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  __uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t buf[4];
  __uint64_t v18;

  sub_1002BED5C(a1, 2u);
  if (a2 <= 3 && a2 != 1)
  {
    sub_1002BFB40(a1, a2);
    return;
  }
  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_ERROR))
      sub_1006DB540();
    if (a2 != 6)
      goto LABEL_29;
    goto LABEL_18;
  }
  switch(a2)
  {
    case 6u:
LABEL_18:
      v11 = qword_100999968;
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Debounce Expired", buf, 2u);
      }
      *(_BYTE *)(a1 + 136) = 0;
      goto LABEL_29;
    case 5u:
      v12 = qword_100999968;
      if (!*(_BYTE *)(v4 + 1364) && os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Received AoS End when AoS was already disabled.", buf, 2u);
        v4 = *(_QWORD *)(a1 + 56);
        v12 = qword_100999968;
      }
      *(_BYTE *)(v4 + 1364) = 0;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v18) = 1;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Resetting hrbClassificationBands VSC with value 0x%x", buf, 8u);
      }
      v13 = sub_1000438A4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 1400))(v13, 1, 1);
      v14 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) - *(_QWORD *)(a1 + 184);
      *(_QWORD *)(a1 + 192) = v14;
      *(_BYTE *)(a1 + 136) = 0;
      v9 = qword_100999968;
      if (!os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
        goto LABEL_29;
      *(_DWORD *)buf = 134217984;
      v18 = v14;
      v10 = "BandSwitchManager: Ending AoS Session. Duration was 0x%llX nSec";
      break;
    case 4u:
      v5 = qword_100999968;
      if (*(_BYTE *)(v4 + 1364) && os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Received AoS Start when AoS was already enabled.", buf, 2u);
        v4 = *(_QWORD *)(a1 + 56);
        v5 = qword_100999968;
      }
      *(_BYTE *)(v4 + 1364) = 1;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(unsigned __int8 *)(a1 + 68);
        *(_DWORD *)buf = 67109120;
        LODWORD(v18) = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Sending hrbClassificationBands VSC with value 0x%X", buf, 8u);
      }
      v7 = sub_1000438A4();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 1400))(v7, *(unsigned __int8 *)(a1 + 68), 1);
      v15 = 0;
      v16 = 0;
      sub_100444BF0(*(_QWORD *)(a1 + 56), (_DWORD *)&v16 + 1, &v16, (_DWORD *)&v15 + 1, &v15);
      sub_1002C03B8(a1);
      *(_DWORD *)(a1 + 176) = HIDWORD(v15);
      v8 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
      *(_QWORD *)(a1 + 184) = v8;
      *(_WORD *)(a1 + 70) = 2056;
      v9 = qword_100999968;
      if (!os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
        goto LABEL_29;
      *(_DWORD *)buf = 134217984;
      v18 = v8;
      v10 = "BandSwitchManager: Starting AoS Session at 0x%llX nSec";
      break;
    default:
      goto LABEL_29;
  }
  _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 0xCu);
LABEL_29:
  if ((sub_1002C0450(a1, a2) & 1) == 0)
    sub_1002C0604(a1);
}

void sub_1002BFB40(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  char *v29;
  char *v30;
  char **v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  int v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  int v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  int *v68;
  uint64_t v69;
  int v70;
  int v71;
  NSObject *v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unint64_t v80;
  int v81;
  _DWORD v82[2];

  sub_1002BED5C(a1, 3u);
  if (a2 == 3)
  {
    if (*(_BYTE *)(a1 + 53) && *(_BYTE *)(a1 + 54))
    {
      v16 = qword_100999968;
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Sending hrbAllowedBands VSC", (uint8_t *)v82, 2u);
      }
      v17 = sub_1000438A4();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v17 + 1392))(v17, *(unsigned __int8 *)(a1 + 68), 1);
      v18 = qword_100999968;
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Sending HRB BE blocking VSC", (uint8_t *)v82, 2u);
      }
      v19 = sub_1000438A4();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 1504))(v19, 6, a1 + 263, a1 + 269, a1 + 275, 1);
      *(_BYTE *)(a1 + 54) = 0;
    }
    goto LABEL_132;
  }
  if (a2 != 2)
  {
    if (!a2)
    {
      v4 = qword_100999968;
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Configuring Retry delay", (uint8_t *)v82, 2u);
      }
      sub_1002C0670(a1);
      v5 = qword_100999968;
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Sending hrbControl VSC", (uint8_t *)v82, 2u);
      }
      v6 = sub_1000438A4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 1384))(v6, 1, 1);
      *(_BYTE *)(a1 + 54) = 1;
      v7 = qword_100999968;
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Sending Initial hrbAllowedBands VSC", (uint8_t *)v82, 2u);
      }
      v8 = sub_1000438A4();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 1392))(v8, *(unsigned __int8 *)(a1 + 68), 1);
      v9 = qword_100999968;
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
      {
        v82[0] = 67109120;
        v82[1] = 1;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Resetting hrbClassificationBands VSC with value 0x%x", (uint8_t *)v82, 8u);
      }
      v10 = sub_1000438A4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 1400))(v10, 1, 1);
      v11 = qword_100999968;
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Sending Initial HRB BE blocking VSC", (uint8_t *)v82, 2u);
      }
      v12 = sub_1000438A4();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 1504))(v12, 6, a1 + 263, a1 + 269, a1 + 275, 1);
    }
    goto LABEL_132;
  }
  v13 = (void **)(a1 + 72);
  v14 = *(char **)(a1 + 72);
  *(_BYTE *)(a1 + 68) = 1;
  *(_QWORD *)(a1 + 80) = v14;
  if (*(unsigned __int8 *)(a1 + 156) != 255)
  {
    v15 = *(_QWORD *)(a1 + 88);
    *(_BYTE *)(a1 + 68) = 3;
    *(_BYTE *)(a1 + 256) = 1;
    if ((unint64_t)v14 >= v15)
    {
      v20 = v15 - (_QWORD)v14;
      v21 = (uint64_t)(v15 - (_QWORD)v14) >> 1;
      if (v21 <= 1)
        v21 = 1;
      if (v20 >= 0x7FFFFFFFFFFFFFFCLL)
        v22 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      v23 = sub_1002B46E0(a1 + 88, v22);
      v24 = *(char **)(a1 + 72);
      v25 = *(char **)(a1 + 80);
      v27 = &v23[v26];
      *v23 = 1;
      v14 = (char *)(v23 + 1);
      while (v25 != v24)
      {
        v28 = *((_DWORD *)v25 - 1);
        v25 -= 4;
        *--v23 = v28;
      }
      *(_QWORD *)(a1 + 72) = v23;
      *(_QWORD *)(a1 + 80) = v14;
      *(_QWORD *)(a1 + 88) = v27;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *(_DWORD *)v14 = 1;
      v14 += 4;
    }
    *(_QWORD *)(a1 + 80) = v14;
  }
  if (*(unsigned __int8 *)(a1 + 157) != 255)
  {
    *(_BYTE *)(a1 + 68) |= 4u;
    *(_BYTE *)(a1 + 257) = 1;
    v29 = *(char **)(a1 + 72);
    v82[0] = 2;
    sub_1002C07F0(a1 + 72, v29, v82);
    v14 = *(char **)(a1 + 80);
  }
  if (*(unsigned __int8 *)(a1 + 158) != 255)
  {
    v31 = (char **)(a1 + 88);
    v30 = *(char **)(a1 + 88);
    *(_DWORD *)(a1 + 259) = 16843009;
    if (v14 >= v30)
    {
      v33 = (char *)*v13;
      v34 = (v14 - (_BYTE *)*v13) >> 2;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 62)
        abort();
      v36 = v30 - v33;
      if (v36 >> 1 > v35)
        v35 = v36 >> 1;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        v38 = (char *)sub_1002B46E0(a1 + 88, v37);
        v33 = *(char **)(a1 + 72);
        v14 = *(char **)(a1 + 80);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[4 * v34];
      v30 = &v38[4 * v37];
      *(_DWORD *)v39 = 4;
      v32 = v39 + 4;
      while (v14 != v33)
      {
        v40 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *((_DWORD *)v39 - 1) = v40;
        v39 -= 4;
      }
      *(_QWORD *)(a1 + 72) = v39;
      *(_QWORD *)(a1 + 80) = v32;
      *(_QWORD *)(a1 + 88) = v30;
      if (v33)
      {
        operator delete(v33);
        v30 = *v31;
      }
    }
    else
    {
      *(_DWORD *)v14 = 4;
      v32 = v14 + 4;
    }
    *(_QWORD *)(a1 + 80) = v32;
    if (v32 >= v30)
    {
      v42 = (char *)*v13;
      v43 = (v32 - (_BYTE *)*v13) >> 2;
      v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 62)
        abort();
      v45 = v30 - v42;
      if (v45 >> 1 > v44)
        v44 = v45 >> 1;
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
        v46 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v46 = v44;
      if (v46)
      {
        v47 = (char *)sub_1002B46E0(a1 + 88, v46);
        v42 = *(char **)(a1 + 72);
        v32 = *(char **)(a1 + 80);
      }
      else
      {
        v47 = 0;
      }
      v48 = &v47[4 * v43];
      v30 = &v47[4 * v46];
      *(_DWORD *)v48 = 5;
      v41 = v48 + 4;
      while (v32 != v42)
      {
        v49 = *((_DWORD *)v32 - 1);
        v32 -= 4;
        *((_DWORD *)v48 - 1) = v49;
        v48 -= 4;
      }
      *(_QWORD *)(a1 + 72) = v48;
      *(_QWORD *)(a1 + 80) = v41;
      *(_QWORD *)(a1 + 88) = v30;
      if (v42)
      {
        operator delete(v42);
        v30 = *v31;
      }
    }
    else
    {
      *(_DWORD *)v32 = 5;
      v41 = v32 + 4;
    }
    *(_QWORD *)(a1 + 80) = v41;
    if (v41 >= v30)
    {
      v51 = (char *)*v13;
      v52 = (v41 - (_BYTE *)*v13) >> 2;
      v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 62)
        abort();
      v54 = v30 - v51;
      if (v54 >> 1 > v53)
        v53 = v54 >> 1;
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
        v55 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v55 = v53;
      if (v55)
      {
        v56 = (char *)sub_1002B46E0(a1 + 88, v55);
        v51 = *(char **)(a1 + 72);
        v41 = *(char **)(a1 + 80);
      }
      else
      {
        v56 = 0;
      }
      v57 = &v56[4 * v52];
      v30 = &v56[4 * v55];
      *(_DWORD *)v57 = 6;
      v50 = v57 + 4;
      while (v41 != v51)
      {
        v58 = *((_DWORD *)v41 - 1);
        v41 -= 4;
        *((_DWORD *)v57 - 1) = v58;
        v57 -= 4;
      }
      *(_QWORD *)(a1 + 72) = v57;
      *(_QWORD *)(a1 + 80) = v50;
      *(_QWORD *)(a1 + 88) = v30;
      if (v51)
      {
        operator delete(v51);
        v30 = *v31;
      }
    }
    else
    {
      *(_DWORD *)v41 = 6;
      v50 = v41 + 4;
    }
    *(_QWORD *)(a1 + 80) = v50;
    if (v50 >= v30)
    {
      v59 = (char *)*v13;
      v60 = (v50 - (_BYTE *)*v13) >> 2;
      v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 62)
        abort();
      v62 = v30 - v59;
      if (v62 >> 1 > v61)
        v61 = v62 >> 1;
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
        v63 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v63 = v61;
      if (v63)
      {
        v64 = (char *)sub_1002B46E0(a1 + 88, v63);
        v59 = *(char **)(a1 + 72);
        v50 = *(char **)(a1 + 80);
      }
      else
      {
        v64 = 0;
      }
      v65 = &v64[4 * v60];
      v66 = &v64[4 * v63];
      *(_DWORD *)v65 = 7;
      v14 = v65 + 4;
      while (v50 != v59)
      {
        v67 = *((_DWORD *)v50 - 1);
        v50 -= 4;
        *((_DWORD *)v65 - 1) = v67;
        v65 -= 4;
      }
      *(_QWORD *)(a1 + 72) = v65;
      *(_QWORD *)(a1 + 80) = v14;
      *(_QWORD *)(a1 + 88) = v66;
      if (v59)
        operator delete(v59);
    }
    else
    {
      *(_DWORD *)v50 = 7;
      v14 = v50 + 4;
    }
    *(_QWORD *)(a1 + 80) = v14;
    *(_BYTE *)(a1 + 68) |= 0xF0u;
  }
  *(_DWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 69) = 1;
  v68 = *(int **)(a1 + 72);
  if (v68 == (int *)v14)
  {
    v70 = *(_DWORD *)(a1 + 152);
  }
  else
  {
    v69 = 0;
    v70 = *(_DWORD *)(a1 + 152);
    do
    {
      v71 = *v68++;
      if (v71 == v70)
        ++v69;
    }
    while (v68 != (int *)v14);
    if (v69)
    {
LABEL_114:
      *(_BYTE *)(a1 + 69) = v70;
      *(_BYTE *)(a1 + 144) = 1;
      v72 = qword_100999968;
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: fDebugForceUNIIBand set to a band to a supported band", (uint8_t *)v82, 2u);
      }
      goto LABEL_119;
    }
  }
  if (v70 != 8)
  {
    if (v70)
    {
      v73 = qword_100999968;
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v82[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: fDebugForceUNIIBand set to a band that is not supported, ignoring fDebugForceUNIIBand", (uint8_t *)v82, 2u);
      }
      *(_BYTE *)(a1 + 144) = 0;
      goto LABEL_119;
    }
    goto LABEL_114;
  }
LABEL_119:
  v74 = *(_QWORD *)(a1 + 72);
  v75 = *(_QWORD *)(a1 + 80);
  v76 = *(_DWORD *)(a1 + 148);
  v77 = v75 - v74;
  if (v75 != v74)
  {
    v78 = 0;
    v79 = 0;
    v80 = v77 >> 2;
    while (1)
    {
      v81 = *(_DWORD *)(v74 + 4 * v78);
      if (v76 != v81)
        break;
      if (!*(_BYTE *)(a1 + 146))
      {
        v81 = *(_DWORD *)(a1 + 148);
        break;
      }
      v78 = ++v79;
      if (v80 <= v79)
        goto LABEL_127;
    }
    *(_BYTE *)(a1 + 69) = v81;
    *(_DWORD *)(a1 + 96) = v79;
  }
LABEL_127:
  *(_WORD *)(a1 + 53) = 257;
  *(_BYTE *)(a1 + 145) = v76 != *(unsigned __int8 *)(a1 + 69) || v76 == 1 || !*(_BYTE *)(a1 + 146);
LABEL_132:
  if ((sub_1002C0450(a1, a2) & 1) == 0)
    sub_1002C0604(a1);
}

void sub_1002C03B8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = (_QWORD *)(a1 + 240);
  v1 = *(_QWORD **)(a1 + 240);
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 228) = 8;
  sub_10001A82C(a1 + 232, v1);
  *(v2 - 1) = v2;
  *v2 = 0;
  v2[1] = 0;
  v3 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Session Metrics cleared", v4, 2u);
  }
}

uint64_t sub_1002C0450(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL4 v12;
  const char *v13;
  uint8_t *v14;
  _BOOL4 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  uint8_t buf[2];

  v4 = *(_QWORD *)(a1 + 56);
  if (!v4)
  {
    if ((sub_1002BDB08(a1) & 1) != 0)
    {
LABEL_9:
      v7 = qword_100999968;
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v8 = "BandSwitchManager: ---------- Switch from ISM to HRB ----------";
        v9 = buf;
        goto LABEL_11;
      }
LABEL_12:
      v10 = 1;
LABEL_21:
      sub_1002C098C(a1, a2, v10);
      return 1;
    }
    goto LABEL_16;
  }
  v5 = *(unsigned __int8 *)(v4 + 1365);
  if ((sub_1002BDB08(a1) & 1) == 0)
  {
    if (v5)
    {
      v11 = qword_100999968;
      v12 = os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT);
      v10 = 0;
      if (!v12)
        goto LABEL_21;
      v17 = 0;
      v13 = "BandSwitchManager: ---------- Switch from HRB to ISM ----------";
      v14 = (uint8_t *)&v17;
LABEL_20:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v13, v14, 2u);
      v10 = 0;
      goto LABEL_21;
    }
LABEL_16:
    if ((*(unsigned __int8 *)(a1 + 71) | 8) == 8)
      return 0;
    v11 = qword_100999968;
    v15 = os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT);
    v10 = 0;
    if (!v15)
      goto LABEL_21;
    v16 = 0;
    v13 = "BandSwitchManager: ---------- Switch from HRB in progress to ISM ----------";
    v14 = (uint8_t *)&v16;
    goto LABEL_20;
  }
  if (!v5)
    goto LABEL_9;
  result = 0;
  if (a2 <= 0x13 && ((1 << a2) & 0xC8000) != 0)
  {
    v7 = qword_100999968;
    if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
    {
      v18 = 0;
      v8 = "BandSwitchManager: ---------- Change from HRB to HRB ----------";
      v9 = (uint8_t *)&v18;
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, v9, 2u);
      goto LABEL_12;
    }
    goto LABEL_12;
  }
  return result;
}

void sub_1002C0604(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  sub_1002BED5C(a1, 1u);
  v1 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: ---------- BSM State Machine END ----------", v2, 2u);
  }
}

void sub_1002C0670(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  void *__p[2];
  char v6;
  int v7;
  uint8_t buf[8];
  char v9;

  v7 = 0;
  v2 = sub_100027F68();
  sub_100091AE8(buf, "BSM");
  sub_100091AE8(__p, "DebounceOverride");
  (*(void (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v2 + 128))(v2, buf, __p, &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(*(void **)buf);
  v3 = v7;
  if ((v7 - 1) > 0x77)
  {
    if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_ERROR))
      sub_1006DB56C();
  }
  else
  {
    *(_DWORD *)(a1 + 64) = v7;
    v4 = qword_100999968;
    if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Overriding Debounce value to %d seconds", buf, 8u);
    }
  }
}

void sub_1002C07B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

char *sub_1002C07F0(uint64_t a1, char *__src, _DWORD *a3)
{
  char *v4;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v7 = a1 + 16;
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v14 = *(_BYTE **)a1;
    v15 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 2) + 1;
    if (v15 >> 62)
      abort();
    v16 = (__src - v14) >> 2;
    v17 = v8 - (_QWORD)v14;
    if (v17 >> 1 > v15)
      v15 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    v25 = v7;
    if (v18)
      v19 = (char *)sub_1002B46E0(v7, v18);
    else
      v19 = 0;
    __p = v19;
    v22 = &v19[4 * v16];
    v23 = v22;
    v24 = &v19[4 * v18];
    sub_1002C344C(&__p, a3);
    v4 = sub_1002C3558((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22)
      v23 += (v22 - v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_DWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 4;
  }
  else
  {
    v10 = __src + 4;
    v11 = v6 - 4;
    v12 = v6;
    while (v11 < v6)
    {
      v13 = *(_DWORD *)v11;
      v11 += 4;
      *(_DWORD *)v12 = v13;
      v12 += 4;
    }
    *(_QWORD *)(a1 + 8) = v12;
    if (v6 != v10)
      memmove(&v6[-4 * ((v6 - v10) >> 2)], __src, v6 - v10);
    *(_DWORD *)v4 = *a3;
  }
  return v4;
}

void sub_1002C0954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002C098C(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  const char *v9;
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  const char *v13;
  int v14;
  NSObject *v15;
  NSObject *v16;
  const char *v17;
  int v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;

  sub_1002BED5C(a1, 4u);
  v6 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    v7 = "2.4Ghz";
    if ((_DWORD)a3 == 1)
      v7 = "HRB";
    v18 = 136315138;
    v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Switching band to %s", (uint8_t *)&v18, 0xCu);
  }
  if ((_DWORD)a3 == 1)
  {
    a3 = *(unsigned __int8 *)(a1 + 69);
    *(_BYTE *)(a1 + 228) = a3;
  }
  else
  {
    if (*(_DWORD *)(a1 + 224) != 6)
      *(_DWORD *)(a1 + 224) = a2;
    if ((_DWORD)a3)
      a3 = *(unsigned __int8 *)(a1 + 69);
  }
  v8 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    if (a3 > 8)
      v9 = "Unknown BSM Band Code";
    else
      v9 = off_100923098[(char)a3];
    v10 = *(char *)(a1 + 71);
    if (v10 > 8)
      v11 = "Unknown BSM Band Code";
    else
      v11 = off_100923098[v10];
    v12 = *(char *)(a1 + 70);
    if (v12 > 8)
      v13 = "Unknown BSM Band Code";
    else
      v13 = off_100923098[v12];
    v18 = 136315650;
    v19 = v9;
    v20 = 2080;
    v21 = v11;
    v22 = 2080;
    v23 = v13;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Band to Switch to %s, Band Switch under progress %s, Band Switch Queued %s", (uint8_t *)&v18, 0x20u);
  }
  *(_BYTE *)(a1 + 70) = a3;
  v14 = *(unsigned __int8 *)(a1 + 71);
  if (v14 != 8)
  {
    if ((_DWORD)a3 == v14)
    {
      *(_BYTE *)(a1 + 70) = 8;
      v16 = qword_100999968;
      if (!os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
        goto LABEL_32;
      LOWORD(v18) = 0;
      v17 = "BandSwitchManager: redundant Band Switch to the same band, Ignoring Bandswitch";
    }
    else
    {
      v16 = qword_100999968;
      if (!os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
        goto LABEL_32;
      LOWORD(v18) = 0;
      v17 = "BandSwitchManager: Band switch under progress for a different band, will wait for it to complete";
    }
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v18, 2u);
    goto LABEL_32;
  }
  *(_BYTE *)(a1 + 71) = a3;
  *(_BYTE *)(a1 + 70) = 8;
  v15 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v18) = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: No bandswitch in progress, starting one ASAP", (uint8_t *)&v18, 2u);
  }
  sub_1002C0C34(a1, *(_QWORD *)(a1 + 56) + 128, a3);
LABEL_32:
  sub_1002C0604(a1);
}

BOOL sub_1002C0C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint8_t v12[16];

  v6 = *(_DWORD *)(a1 + 48);
  if (v6 != 4 && !*(_BYTE *)(a1 + 147))
  {
    v7 = qword_100999968;
    if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_FAULT))
      sub_1006DB598(v6, v7, v8);
  }
  *(_BYTE *)(a1 + 147) = 0;
  v9 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Sending hrbChangeConnectionBand VSC", v12, 2u);
  }
  v10 = sub_1000438A4();
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 1424))(v10, a2, a3, 1) == 0;
}

void sub_1002C0D14(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL8 v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  int v8;
  const char *v9;
  __int16 v10;
  const char *v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = qword_100999968;
  v4 = os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    v5 = *(int *)(v2 + 48);
    if (v5 > 4)
      v6 = "Unknown BSM State";
    else
      v6 = off_100923070[v5];
    v7 = sub_1002BDAE4(v4, *(_DWORD *)(a1 + 40));
    v8 = 136446466;
    v9 = v6;
    v10 = 2082;
    v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: ---------- BSM State Machine START. Current State: %{public}s, Input Event: %{public}s ----------", (uint8_t *)&v8, 0x16u);
  }
  sub_1002BF698(v2, *(_DWORD *)(a1 + 40));
}

void sub_1002C0E04(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  _QWORD v7[6];
  char v8;

  v6 = sub_10006BBEC();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1002C0E78;
  v7[3] = &unk_10091FF68;
  v7[4] = a1;
  v7[5] = a2;
  v8 = a3;
  sub_100041A34(v6, v7);
}

void sub_1002C0E78(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __uint64_t v8;
  __uint64_t v9;
  uint64_t **v10;
  __uint64_t v11;
  NSObject *v12;
  unint64_t v13;
  _BYTE *v14;
  const char *v15;
  NSObject *v16;
  _BYTE *v17;
  const char *v18;
  NSObject *v19;
  unint64_t v20;
  const char *v21;
  unint64_t v22;
  const char *v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  int v27;
  __int16 v28;
  _BYTE __p[12];
  __int16 v30;
  const char *v31;
  char v32;
  _BYTE buf[12];
  __int16 v34;
  const char *v35;
  __int16 v36;
  unint64_t v37;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(int **)(a1 + 40);
  v4 = *((_WORD *)v2 + 2);
  v27 = *v2;
  v28 = v4;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100922F08);
  v5 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v27, 1);
  if (v5)
  {
    v6 = v5;
    v7 = *(unsigned __int8 *)(a1 + 48);
    if (*(_QWORD *)(v3 + 56) != v5)
    {
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_ERROR))
        sub_1006DB670();
      *(_QWORD *)(v3 + 56) = v6;
    }
    sub_100455A8C(v6, v7 != 1);
    v8 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
    if (v7 == 1)
    {
      v9 = v8 - *(_QWORD *)(v3 + 200);
      *(_QWORD *)(v3 + 200) = 0;
      *(_QWORD *)(v3 + 208) = v9;
      *(_QWORD *)buf = v3 + 224;
      v10 = sub_1002BB7C4((uint64_t **)(v3 + 232), (int *)(v3 + 224), (uint64_t)&unk_100740F58, (_DWORD **)buf);
      ++*((_WORD *)v10 + 16);
      if (*(_DWORD *)(v3 + 224) == 5)
        sub_1002BEA34(v3);
      *(_DWORD *)(v3 + 224) = 21;
    }
    else
    {
      *(_QWORD *)(v3 + 200) = v8;
    }
    if (*(_QWORD *)(v3 + 216))
    {
      v11 = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
      v12 = qword_100999968;
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
      {
        v13 = (v11 - *(_QWORD *)(v3 + 216)) / 0xF4240;
        sub_10043E5F8(*(_QWORD *)(v3 + 56), __p);
        if (v32 >= 0)
          v14 = __p;
        else
          v14 = *(_BYTE **)__p;
        v15 = "2.4Ghz";
        *(_DWORD *)buf = 136446722;
        if (v7 != 1)
          v15 = "HRB";
        *(_QWORD *)&buf[4] = v14;
        v34 = 2080;
        v35 = v15;
        v36 = 2048;
        v37 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: ---------- BSM HRB band changed. Device %{public}s Frequency %s ----------(%llu ms)", buf, 0x20u);
        if (v32 < 0)
          operator delete(*(void **)__p);
      }
      *(_QWORD *)(v3 + 216) = 0;
    }
    else
    {
      v16 = qword_100999968;
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
      {
        sub_10043E5F8(*(_QWORD *)(v3 + 56), buf);
        v17 = *(_BYTE **)buf;
        v18 = "2.4Ghz";
        if (v36 >= 0)
          v17 = buf;
        if (v7 != 1)
          v18 = "HRB";
        *(_DWORD *)__p = 136446466;
        *(_QWORD *)&__p[4] = v17;
        v30 = 2080;
        v31 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: ---------- BSM HRB band changed. Device %{public}s Frequency %s ----------(Not initiated by BSM)", __p, 0x16u);
        if (SHIBYTE(v36) < 0)
          operator delete(*(void **)buf);
      }
    }
    sub_1002C1364(v3);
    (**(void (***)(uint64_t, _QWORD))v3)(v3, *(_QWORD *)(v3 + 56));
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v3 + 8))(v3, v7 != 1);
    v19 = qword_100999968;
    if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(char *)(v3 + 71);
      if (v20 > 8)
        v21 = "Unknown BSM Band Code";
      else
        v21 = off_100923098[v20];
      v22 = *(char *)(v3 + 70);
      if (v22 > 8)
        v23 = "Unknown BSM Band Code";
      else
        v23 = off_100923098[v22];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v21;
      v34 = 2080;
      v35 = v23;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Completed BandSwitch to %s and pending %s", buf, 0x16u);
    }
    v24 = *(unsigned __int8 *)(v3 + 70);
    if ((_DWORD)v24 == 8)
    {
      *(_BYTE *)(v3 + 71) = 8;
      *(_BYTE *)(v3 + 147) = 0;
    }
    else
    {
      v25 = qword_100999968;
      if (*(_BYTE *)(v3 + 136))
      {
        if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Debounce timer is enabled, will not band switch", buf, 2u);
          v25 = qword_100999968;
        }
        *(_WORD *)(v3 + 70) = 2056;
        v24 = 8;
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        if (v24 > 8)
          v26 = "Unknown BSM Band Code";
        else
          v26 = off_100923098[(char)v24];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Starting pending BandSwitch to %s", buf, 0xCu);
        v24 = *(unsigned __int8 *)(v3 + 70);
      }
      *(_BYTE *)(v3 + 71) = v24;
      *(_BYTE *)(v3 + 147) = 1;
      sub_1002C0C34(v3, *(_QWORD *)(v3 + 56) + 128, v24);
      *(_BYTE *)(v3 + 70) = 8;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_FAULT))
  {
    sub_1006DB638();
  }
}

void sub_1002C1364(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[5];
  uint8_t buf[4];
  int v8;

  if (sub_1002BE8D8(a1))
  {
    *(_BYTE *)(a1 + 136) = 1;
    v2 = qword_100999968;
    if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)buf = 67109120;
      v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: AoS enabled on 2.4. Debounce for %d seconds", buf, 8u);
    }
    v4 = sub_10006BBEC();
    v5 = (1000 * *(_DWORD *)(a1 + 64));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1002C1A68;
    v6[3] = &unk_100917378;
    v6[4] = a1;
    sub_100475CEC(v4, v5, v6);
  }
}

void sub_1002C1460(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v8;
  _QWORD v9[6];
  char v10;
  char v11;

  v8 = sub_10006BBEC();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1002C14DC;
  v9[3] = &unk_1009186D0;
  v9[4] = a1;
  v9[5] = a2;
  v10 = a4;
  v11 = a3;
  sub_100041A34(v8, v9);
}

void sub_1002C14DC(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  NSObject *v6;
  void **v7;
  int v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  void *__p[2];
  char v21;
  int v22;
  __int16 v23;
  _BYTE buf[32];
  uint64_t v25;
  int v26;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(int **)(a1 + 40);
  v4 = *((_WORD *)v2 + 2);
  v22 = *v2;
  v23 = v4;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100922F08);
  v5 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v22, 1);
  v6 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    sub_10043E5F8(v5, __p);
    v7 = v21 >= 0 ? __p : (void **)__p[0];
    v8 = *(unsigned __int8 *)(a1 + 48);
    v9 = *(_BYTE *)(a1 + 49) == 1 ? "2.4Ghz" : "HRB";
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v8;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: HRB band change for device %{public}s failed status:%d. Current band is still %s", buf, 0x1Cu);
    if (v21 < 0)
      operator delete(__p[0]);
  }
  *(_WORD *)(v3 + 70) = 2056;
  if (*(_BYTE *)(a1 + 49) != 1)
  {
    *(_BYTE *)(v3 + 145) = 0;
    v10 = *(int *)(v3 + 96);
    v11 = *(_QWORD *)(v3 + 72);
    v12 = *(_QWORD *)(v3 + 80) - v11;
    v13 = v12 >> 2;
    v14 = v10 + 1;
    if (v12 >> 2 <= (unint64_t)(v10 + 1))
      v15 = v10 + 1;
    else
      v15 = v12 >> 2;
    while (1)
    {
      if (v13 <= v14)
      {
        v16 = v15;
        goto LABEL_23;
      }
      v16 = v14;
      v17 = *(_DWORD *)(v11 + 4 * v14);
      if (*(_DWORD *)(v3 + 148) != v17)
        break;
      ++v14;
      if (!*(_BYTE *)(v3 + 146))
      {
        v17 = *(_DWORD *)(v3 + 148);
        break;
      }
    }
    *(_BYTE *)(v3 + 69) = v17;
    *(_DWORD *)(v3 + 96) = v16;
    *(_BYTE *)(v3 + 145) = 1;
    v18 = qword_100999968;
    if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Sufficient Bandwidth for HRB TDD in band %d", buf, 8u);
      v13 = (uint64_t)(*(_QWORD *)(v3 + 80) - *(_QWORD *)(v3 + 72)) >> 2;
    }
LABEL_23:
    if (v13 == v16)
      *(_DWORD *)(v3 + 96) = -1;
    v19 = sub_10006BBEC();
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_1002C0D14;
    *(_QWORD *)&buf[24] = &unk_1009173C0;
    v25 = v3;
    v26 = 19;
    sub_100041A34(v19, buf);
  }
}

void sub_1002C176C(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD v5[5];
  int v6;

  if (a2)
  {
    v4 = sub_10006BBEC();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1002C17E8;
    v5[3] = &unk_1009173C0;
    v5[4] = a1;
    v6 = a2;
    sub_100041A34(v4, v5);
  }
  else
  {
    *(_QWORD *)(a1 + 216) = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW);
  }
}

void sub_1002C17E8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  uint64_t v5;
  _QWORD v6[5];
  int v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a1 + 40);
    LODWORD(v6[0]) = 67109120;
    HIDWORD(v6[0]) = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: ---------- BSM Change Band VSC Failed status:%d, switching to ISM band----------", (uint8_t *)v6, 8u);
  }
  *(_BYTE *)(v2 + 145) = 0;
  *(_WORD *)(v2 + 70) = 2056;
  v5 = sub_10006BBEC();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002C0D14;
  v6[3] = &unk_1009173C0;
  v6[4] = v2;
  v7 = 19;
  sub_100041A34(v5, v6);
}

void sub_1002C18E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[6];

  v4 = sub_10006BBEC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002C194C;
  v5[3] = &unk_100918090;
  v5[4] = a1;
  v5[5] = a2;
  sub_100041A34(v4, v5);
}

void sub_1002C194C(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  _QWORD v10[5];
  int v11;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(int **)(a1 + 40);
  v3 = *((_WORD *)v1 + 2);
  v8 = *v1;
  v9 = v3;
  if (qword_1009778E8 != -1)
    dispatch_once(&qword_1009778E8, &stru_100922F08);
  v4 = sub_1004704A8((uint64_t)off_1009778E0, (uint64_t)&v8, 1);
  if (v4)
  {
    v5 = v4;
    if (*(_QWORD *)(v2 + 56) != v4)
    {
      v6 = qword_100999968;
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_ERROR))
        sub_1006DB69C(v5, v6);
      *(_QWORD *)(v2 + 56) = v5;
      sub_100455A8C(v5, 0);
      v5 = *(_QWORD *)(v2 + 56);
      *(_BYTE *)(v5 + 1364) = 0;
    }
    *(_BYTE *)(v5 + 1366) = 1;
    v7 = sub_10006BBEC();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1002C0D14;
    v10[3] = &unk_1009173C0;
    v10[4] = v2;
    v11 = 16;
    sub_100041A34(v7, v10);
  }
}

void sub_1002C1A68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];
  int v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_10006BBEC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1002C0D14;
  v3[3] = &unk_1009173C0;
  v3[4] = v1;
  v4 = 6;
  sub_100041A34(v2, v3);
}

void sub_1002C1AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[6];

  v4 = sub_10006BBEC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002C1B34;
  v5[3] = &unk_100918090;
  v5[4] = a1;
  v5[5] = a2;
  sub_100041A34(v4, v5);
}

void sub_1002C1B34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t **v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t *v8;
  uint8_t buf[8];
  char v10;
  uint8_t v11[4];
  uint8_t *v12;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  if (v1 == *(_QWORD *)(v2 + 56))
  {
    if (*(_BYTE *)(v1 + 1365))
    {
      if (*(_QWORD *)(v2 + 184))
        *(_QWORD *)(v2 + 192) = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) - *(_QWORD *)(v2 + 184);
      *(_QWORD *)(v2 + 208) = clock_gettime_nsec_np(_CLOCK_MONOTONIC_RAW) - *(_QWORD *)(v2 + 200);
      *(_DWORD *)v11 = 7;
      *(_QWORD *)buf = v11;
      v4 = sub_1002BB7C4((uint64_t **)(v2 + 232), (int *)v11, (uint64_t)&unk_100740F58, (_DWORD **)buf);
      ++*((_WORD *)v4 + 16);
      *(_QWORD *)(v2 + 200) = 0;
      sub_100455A8C(*(_QWORD *)(a1 + 40), 0);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 8))(v2, 0);
      v1 = *(_QWORD *)(a1 + 40);
    }
    *(_BYTE *)(v1 + 1364) = 0;
    v5 = qword_100999968;
    if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = 1;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Resetting hrbClassificationBands VSC with value 0x%x", buf, 8u);
    }
    v6 = sub_1000438A4();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 1400))(v6, 1, 1);
    *(_BYTE *)(v2 + 143) = 1;
    *(_BYTE *)(v2 + 136) = 0;
    sub_1002BEA34(v2);
    v7 = qword_100999968;
    if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
    {
      sub_10043E5F8(*(_QWORD *)(v2 + 56), buf);
      if (v10 >= 0)
        v8 = buf;
      else
        v8 = *(uint8_t **)buf;
      *(_DWORD *)v11 = 136446210;
      v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Discarding reference to %{public}s as it disconnected", v11, 0xCu);
      if (v10 < 0)
        operator delete(*(void **)buf);
    }
    *(_QWORD *)(v2 + 56) = 0;
  }
}

void sub_1002C1D34(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = a1 - 40;
  v4 = sub_10006BBEC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002C1B34;
  v5[3] = &unk_100918090;
  v5[4] = v3;
  v5[5] = a2;
  sub_100041A34(v4, v5);
}

void sub_1002C1D98(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  if ((_os_feature_enabled_impl("CoreWiFi", "Figaro5GTDD") & 1) == 0)
  {
    v4 = sub_10006BBEC();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1002C1E18;
    v5[3] = &unk_100918888;
    v5[4] = a1;
    v6 = a2;
    sub_100041A34(v4, v5);
  }
}

void sub_1002C1E18(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  _QWORD v4[5];
  int v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v1 + 137) != v2)
  {
    *(_BYTE *)(v1 + 137) = v2;
    v3 = sub_10006BBEC();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1002C0D14;
    v4[3] = &unk_1009173C0;
    v4[4] = v1;
    v5 = 8;
    sub_100041A34(v3, v4);
  }
}

void sub_1002C1E94(uint64_t a1, char a2)
{
  sub_1002C1D98(a1 - 24, a2);
}

void sub_1002C1E9C(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_10006BBEC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002C1F04;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_1002C1F04(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  _QWORD v4[5];
  int v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v1 + 138) != v2)
  {
    *(_BYTE *)(v1 + 138) = v2;
    v3 = sub_10006BBEC();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1002C0D14;
    v4[3] = &unk_1009173C0;
    v4[4] = v1;
    v5 = 9;
    sub_100041A34(v3, v4);
  }
}

void sub_1002C1F80(uint64_t a1, char a2)
{
  sub_1002C1E9C(a1 - 24, a2);
}

void sub_1002C1F88(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_10006BBEC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002C1FF0;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_1002C1FF0(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  _QWORD v4[5];
  int v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v1 + 139) != v2)
  {
    *(_BYTE *)(v1 + 139) = v2;
    v3 = sub_10006BBEC();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1002C0D14;
    v4[3] = &unk_1009173C0;
    v4[4] = v1;
    v5 = 10;
    sub_100041A34(v3, v4);
  }
}

void sub_1002C206C(uint64_t a1, char a2)
{
  sub_1002C1F88(a1 - 24, a2);
}

void sub_1002C2074(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_10006BBEC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002C20DC;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_1002C20DC(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  _QWORD v4[5];
  int v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v1 + 140) != v2)
  {
    *(_BYTE *)(v1 + 140) = v2;
    v3 = sub_10006BBEC();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1002C0D14;
    v4[3] = &unk_1009173C0;
    v4[4] = v1;
    v5 = 11;
    sub_100041A34(v3, v4);
  }
}

void sub_1002C2158(uint64_t a1, char a2)
{
  sub_1002C2074(a1 - 24, a2);
}

void sub_1002C2160(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  if ((_os_feature_enabled_impl("CoreWiFi", "Figaro5GTDD") & 1) == 0)
  {
    v4 = sub_10006BBEC();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1002C21E0;
    v5[3] = &unk_100918888;
    v5[4] = a1;
    v6 = a2;
    sub_100041A34(v4, v5);
  }
}

void sub_1002C21E0(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  _QWORD v4[5];
  int v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v1 + 141) != v2)
  {
    *(_BYTE *)(v1 + 141) = v2;
    v3 = sub_10006BBEC();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1002C0D14;
    v4[3] = &unk_1009173C0;
    v4[4] = v1;
    v5 = 12;
    sub_100041A34(v3, v4);
  }
}

void sub_1002C225C(uint64_t a1, char a2)
{
  sub_1002C2160(a1 - 24, a2);
}

void sub_1002C2264(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_10006BBEC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002C22CC;
  v5[3] = &unk_100918888;
  v5[4] = a1;
  v6 = a2;
  sub_100041A34(v4, v5);
}

void sub_1002C22CC(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  _QWORD v4[5];
  int v5;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v1 + 142) != v2)
  {
    *(_BYTE *)(v1 + 142) = v2;
    v3 = sub_10006BBEC();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1002C0D14;
    v4[3] = &unk_1009173C0;
    v4[4] = v1;
    v5 = 13;
    sub_100041A34(v3, v4);
  }
}

void sub_1002C2348(uint64_t a1, char a2)
{
  sub_1002C2264(a1 - 24, a2);
}

void sub_1002C2350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v7[7];

  if ((_os_feature_enabled_impl("CoreWiFi", "Figaro5GTDD") & 1) == 0)
  {
    v6 = sub_10006BBEC();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1002C23DC;
    v7[3] = &unk_1009210D8;
    v7[4] = a1;
    v7[5] = a2;
    v7[6] = a3;
    sub_100041A34(v6, v7);
  }
}

void sub_1002C23DC(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  _QWORD v5[5];
  int v6;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (unsigned __int8 *)(v1 + 160);
  v3 = (unsigned __int8 *)(a1 + 40);
  if (*(_DWORD *)(v1 + 164) != *(_DWORD *)(a1 + 44)
    || *v2 != *v3
    || *(unsigned __int8 *)(v1 + 168) != *(unsigned __int8 *)(a1 + 48))
  {
    *(_OWORD *)v2 = *(_OWORD *)v3;
    v4 = sub_10006BBEC();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1002C0D14;
    v5[3] = &unk_1009173C0;
    v5[4] = v1;
    v6 = 14;
    sub_100041A34(v4, v5);
  }
}

void sub_1002C2484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1002C2350(a1 - 32, a2, a3);
}

void sub_1002C248C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[6];

  v4 = sub_10006BBEC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002C24F0;
  v5[3] = &unk_100918090;
  v5[4] = a1;
  v5[5] = a2;
  sub_100041A34(v4, v5);
}

void sub_1002C24F0(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  unint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  int v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  int v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  int v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  int v78;
  char *v79;
  char *v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  int v85;
  NSObject *v86;
  const char *v87;
  int v88;
  NSObject *v89;
  const char *v90;
  const char *v91;
  uint64_t v92;
  _BYTE v93[32];
  uint64_t v94;
  int v95;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(int **)(a1 + 40);
  v3 = *v1;
  *(_DWORD *)(v2 + 259) = *(int *)((char *)v1 + 3);
  *(_DWORD *)(v2 + 256) = v3;
  v4 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(v2 + 256);
    v6 = *(unsigned __int8 *)(v2 + 257);
    v7 = *(unsigned __int8 *)(v2 + 258);
    v8 = *(unsigned __int8 *)(v2 + 259);
    v9 = *(unsigned __int8 *)(v2 + 260);
    v10 = *(unsigned __int8 *)(v2 + 261);
    v11 = *(unsigned __int8 *)(v2 + 262);
    *(_DWORD *)v93 = 67110656;
    *(_DWORD *)&v93[4] = v5;
    *(_WORD *)&v93[8] = 1024;
    *(_DWORD *)&v93[10] = v6;
    *(_WORD *)&v93[14] = 1024;
    *(_DWORD *)&v93[16] = v7;
    *(_WORD *)&v93[20] = 1024;
    *(_DWORD *)&v93[22] = v8;
    *(_WORD *)&v93[26] = 1024;
    *(_DWORD *)&v93[28] = v9;
    LOWORD(v94) = 1024;
    *(_DWORD *)((char *)&v94 + 2) = v10;
    HIWORD(v94) = 1024;
    v95 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Allowed channels array - unii1 %d, unii3 %d, unii4 %d, unii5a %d, unii5b %d, unii5c %d, unii5d %d", v93, 0x2Cu);
  }
  v12 = *(char *)(v2 + 69);
  v13 = *(char **)(v2 + 72);
  *(_QWORD *)(v2 + 80) = v13;
  if (*(_BYTE *)(v2 + 257) && *(unsigned __int8 *)(v2 + 157) != 255)
  {
    v14 = *(_QWORD *)(v2 + 88);
    if ((unint64_t)v13 >= v14)
    {
      v15 = v14 - (_QWORD)v13;
      v16 = v15 >> 1;
      if ((unint64_t)(v15 >> 1) <= 1)
        v16 = 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
        v17 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v18 = sub_1002B46E0(v2 + 88, v17);
      v19 = *(char **)(v2 + 72);
      v20 = *(char **)(v2 + 80);
      v22 = &v18[v21];
      *v18 = 2;
      v13 = (char *)(v18 + 1);
      while (v20 != v19)
      {
        v23 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *--v18 = v23;
      }
      *(_QWORD *)(v2 + 72) = v18;
      *(_QWORD *)(v2 + 80) = v13;
      *(_QWORD *)(v2 + 88) = v22;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_DWORD *)v13 = 2;
      v13 += 4;
    }
    *(_QWORD *)(v2 + 80) = v13;
  }
  if (*(_BYTE *)(v2 + 256) && *(unsigned __int8 *)(v2 + 156) != 255)
  {
    v24 = *(_QWORD *)(v2 + 88);
    if ((unint64_t)v13 >= v24)
    {
      v26 = *(char **)(v2 + 72);
      v27 = (v13 - v26) >> 2;
      v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 62)
        abort();
      v29 = v24 - (_QWORD)v26;
      if (v29 >> 1 > v28)
        v28 = v29 >> 1;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
        v30 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v30 = v28;
      if (v30)
      {
        v31 = (char *)sub_1002B46E0(v2 + 88, v30);
        v26 = *(char **)(v2 + 72);
        v13 = *(char **)(v2 + 80);
      }
      else
      {
        v31 = 0;
      }
      v32 = &v31[4 * v27];
      v33 = &v31[4 * v30];
      *(_DWORD *)v32 = 1;
      v25 = v32 + 4;
      while (v13 != v26)
      {
        v34 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v32 - 1) = v34;
        v32 -= 4;
      }
      *(_QWORD *)(v2 + 72) = v32;
      *(_QWORD *)(v2 + 80) = v25;
      *(_QWORD *)(v2 + 88) = v33;
      if (v26)
        operator delete(v26);
    }
    else
    {
      *(_DWORD *)v13 = 1;
      v25 = v13 + 4;
    }
    *(_QWORD *)(v2 + 80) = v25;
    v13 = v25;
  }
  if (*(_BYTE *)(v2 + 259) && *(unsigned __int8 *)(v2 + 158) != 255)
  {
    v35 = *(_QWORD *)(v2 + 88);
    if ((unint64_t)v13 >= v35)
    {
      v37 = *(char **)(v2 + 72);
      v38 = (v13 - v37) >> 2;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 62)
        abort();
      v40 = v35 - (_QWORD)v37;
      if (v40 >> 1 > v39)
        v39 = v40 >> 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
        v41 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
      {
        v42 = (char *)sub_1002B46E0(v2 + 88, v41);
        v37 = *(char **)(v2 + 72);
        v13 = *(char **)(v2 + 80);
      }
      else
      {
        v42 = 0;
      }
      v43 = &v42[4 * v38];
      v44 = &v42[4 * v41];
      *(_DWORD *)v43 = 4;
      v36 = v43 + 4;
      while (v13 != v37)
      {
        v45 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v43 - 1) = v45;
        v43 -= 4;
      }
      *(_QWORD *)(v2 + 72) = v43;
      *(_QWORD *)(v2 + 80) = v36;
      *(_QWORD *)(v2 + 88) = v44;
      if (v37)
        operator delete(v37);
    }
    else
    {
      *(_DWORD *)v13 = 4;
      v36 = v13 + 4;
    }
    *(_QWORD *)(v2 + 80) = v36;
    v13 = v36;
  }
  if (*(_BYTE *)(v2 + 260) && *(unsigned __int8 *)(v2 + 158) != 255)
  {
    v46 = *(_QWORD *)(v2 + 88);
    if ((unint64_t)v13 >= v46)
    {
      v48 = *(char **)(v2 + 72);
      v49 = (v13 - v48) >> 2;
      v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 62)
        abort();
      v51 = v46 - (_QWORD)v48;
      if (v51 >> 1 > v50)
        v50 = v51 >> 1;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
        v52 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (v52)
      {
        v53 = (char *)sub_1002B46E0(v2 + 88, v52);
        v48 = *(char **)(v2 + 72);
        v13 = *(char **)(v2 + 80);
      }
      else
      {
        v53 = 0;
      }
      v54 = &v53[4 * v49];
      v55 = &v53[4 * v52];
      *(_DWORD *)v54 = 5;
      v47 = v54 + 4;
      while (v13 != v48)
      {
        v56 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v54 - 1) = v56;
        v54 -= 4;
      }
      *(_QWORD *)(v2 + 72) = v54;
      *(_QWORD *)(v2 + 80) = v47;
      *(_QWORD *)(v2 + 88) = v55;
      if (v48)
        operator delete(v48);
    }
    else
    {
      *(_DWORD *)v13 = 5;
      v47 = v13 + 4;
    }
    *(_QWORD *)(v2 + 80) = v47;
    v13 = v47;
  }
  if (*(_BYTE *)(v2 + 261) && *(unsigned __int8 *)(v2 + 158) != 255)
  {
    v57 = *(_QWORD *)(v2 + 88);
    if ((unint64_t)v13 >= v57)
    {
      v59 = *(char **)(v2 + 72);
      v60 = (v13 - v59) >> 2;
      v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 62)
        abort();
      v62 = v57 - (_QWORD)v59;
      if (v62 >> 1 > v61)
        v61 = v62 >> 1;
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
        v63 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v63 = v61;
      if (v63)
      {
        v64 = (char *)sub_1002B46E0(v2 + 88, v63);
        v59 = *(char **)(v2 + 72);
        v13 = *(char **)(v2 + 80);
      }
      else
      {
        v64 = 0;
      }
      v65 = &v64[4 * v60];
      v66 = &v64[4 * v63];
      *(_DWORD *)v65 = 6;
      v58 = v65 + 4;
      while (v13 != v59)
      {
        v67 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v65 - 1) = v67;
        v65 -= 4;
      }
      *(_QWORD *)(v2 + 72) = v65;
      *(_QWORD *)(v2 + 80) = v58;
      *(_QWORD *)(v2 + 88) = v66;
      if (v59)
        operator delete(v59);
    }
    else
    {
      *(_DWORD *)v13 = 6;
      v58 = v13 + 4;
    }
    *(_QWORD *)(v2 + 80) = v58;
    v13 = v58;
  }
  if (*(_BYTE *)(v2 + 262) && *(unsigned __int8 *)(v2 + 158) != 255)
  {
    v68 = *(_QWORD *)(v2 + 88);
    if ((unint64_t)v13 >= v68)
    {
      v70 = *(char **)(v2 + 72);
      v71 = (v13 - v70) >> 2;
      v72 = v71 + 1;
      if ((unint64_t)(v71 + 1) >> 62)
        abort();
      v73 = v68 - (_QWORD)v70;
      if (v73 >> 1 > v72)
        v72 = v73 >> 1;
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
        v74 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v74 = v72;
      if (v74)
      {
        v75 = (char *)sub_1002B46E0(v2 + 88, v74);
        v70 = *(char **)(v2 + 72);
        v13 = *(char **)(v2 + 80);
      }
      else
      {
        v75 = 0;
      }
      v76 = &v75[4 * v71];
      v77 = &v75[4 * v74];
      *(_DWORD *)v76 = 7;
      v69 = v76 + 4;
      while (v13 != v70)
      {
        v78 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v76 - 1) = v78;
        v76 -= 4;
      }
      *(_QWORD *)(v2 + 72) = v76;
      *(_QWORD *)(v2 + 80) = v69;
      *(_QWORD *)(v2 + 88) = v77;
      if (v70)
        operator delete(v70);
    }
    else
    {
      *(_DWORD *)v13 = 7;
      v69 = v13 + 4;
    }
    *(_QWORD *)(v2 + 80) = v69;
    v13 = v69;
  }
  v79 = *(char **)(v2 + 72);
  v80 = v13;
  if (v79 != v13)
  {
    v80 = *(char **)(v2 + 72);
    while (*(_DWORD *)v80 != *(unsigned __int8 *)(v2 + 69))
    {
      v80 += 4;
      if (v80 == v13)
      {
        v80 = v13;
        break;
      }
    }
  }
  if (v80 == v13)
  {
    v81 = *(unsigned __int8 *)(v2 + 145);
    *(_BYTE *)(v2 + 145) = 0;
    if (v13 != v79)
    {
      v82 = 0;
      v83 = 0;
      v84 = *(_DWORD *)(v2 + 148);
      while (1)
      {
        v85 = *(_DWORD *)&v79[4 * v82];
        if (v85 != v84)
          break;
        if (!*(_BYTE *)(v2 + 146))
          goto LABEL_127;
        v82 = ++v83;
        if ((v13 - v79) >> 2 <= (unint64_t)v83)
          goto LABEL_132;
      }
      LOBYTE(v84) = v85;
LABEL_127:
      *(_BYTE *)(v2 + 69) = v84;
      *(_DWORD *)(v2 + 96) = v83;
      *(_BYTE *)(v2 + 145) = 1;
      v86 = qword_100999968;
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
      {
        if (v84 > 8u)
          v87 = "Unknown BSM Band Code";
        else
          v87 = off_100923098[(char)v84];
        *(_DWORD *)v93 = 136315138;
        *(_QWORD *)&v93[4] = v87;
        _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Channel map update - Sufficient Bandwidth for HRB TDD in band %s", v93, 0xCu);
      }
    }
LABEL_132:
    v88 = *(unsigned __int8 *)(v2 + 69);
    if (v88 != v12 || v81 != *(unsigned __int8 *)(v2 + 145))
    {
      v89 = qword_100999968;
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
      {
        if (v12 > 8)
          v90 = "Unknown BSM Band Code";
        else
          v90 = off_100923098[v12];
        if ((char)v88 > 8)
          v91 = "Unknown BSM Band Code";
        else
          v91 = off_100923098[(char)v88];
        *(_DWORD *)v93 = 136315394;
        *(_QWORD *)&v93[4] = v90;
        *(_WORD *)&v93[12] = 2080;
        *(_QWORD *)&v93[14] = v91;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "BandSwitchManager change channel map: ---------- Changing HRB Bands from %s to %s ----------", v93, 0x16u);
      }
      v92 = sub_10006BBEC();
      *(_QWORD *)v93 = _NSConcreteStackBlock;
      *(_QWORD *)&v93[8] = 3221225472;
      *(_QWORD *)&v93[16] = sub_1002C0D14;
      *(_QWORD *)&v93[24] = &unk_1009173C0;
      v94 = v2;
      v95 = 15;
      sub_100041A34(v92, v93);
    }
  }
  else
  {
    *(_DWORD *)(v2 + 96) = (unint64_t)(v80 - v79) >> 2;
  }
}

void sub_1002C2CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[6];

  v3 = a1 - 24;
  v4 = sub_10006BBEC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002C24F0;
  v5[3] = &unk_100918090;
  v5[4] = v3;
  v5[5] = a2;
  sub_100041A34(v4, v5);
}

void sub_1002C2D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD v8[7];

  v7 = sub_10006BBEC();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002C2D9C;
  v8[3] = &unk_1009210D8;
  v8[4] = a1;
  v8[5] = a4;
  v8[6] = a3;
  sub_100041A34(v7, v8);
}

void sub_1002C2D9C(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  NSObject *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  _BYTE v26[24];
  void *v27;
  _BYTE v28[12];

  v1 = a1[4];
  v2 = *(_DWORD *)(v1 + 148);
  v3 = v2;
  v4 = a1[5] - 1;
  if (v4 <= 9 && ((0x3D3u >> v4) & 1) != 0)
  {
    v3 = dword_10073D948[v4];
    *(_DWORD *)(v1 + 148) = v3;
  }
  v5 = a1[6];
  *(_BYTE *)(v1 + 146) = v5 > 0x28;
  v6 = *(unsigned __int8 *)(v1 + 145);
  v7 = *(char *)(v1 + 69);
  v8 = qword_100999968;
  if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
  {
    if (v2 > 8)
      v9 = "Unknown BSM Band Code";
    else
      v9 = off_100923098[v2];
    if (v3 > 8)
      v10 = "Unknown BSM Band Code";
    else
      v10 = off_100923098[v3];
    if (v7 > 8)
      v11 = "Unknown BSM Band Code";
    else
      v11 = off_100923098[v7];
    *(_DWORD *)v26 = 136315906;
    *(_QWORD *)&v26[4] = v9;
    *(_WORD *)&v26[12] = 2080;
    *(_QWORD *)&v26[14] = v10;
    *(_WORD *)&v26[22] = 2048;
    v27 = (void *)v5;
    *(_WORD *)v28 = 2080;
    *(_QWORD *)&v28[2] = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Wi-Fi switched from %s to %s and BW %lluMHz with HRB band %s", v26, 0x2Au);
  }
  *(_BYTE *)(v1 + 145) = 0;
  if (*(_BYTE *)(v1 + 144))
  {
    v12 = qword_100999968;
    if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Wi-Fi band change ignored because forced UNII band is set", v26, 2u);
    }
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 72);
    v13 = *(_QWORD *)(v1 + 80);
    v15 = v13 - v14;
    if (v13 == v14)
    {
LABEL_23:
      v21 = 0;
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v18 = v15 >> 2;
      v19 = *(_DWORD *)(v1 + 148);
      while (1)
      {
        v20 = *(_DWORD *)(v14 + 4 * v16);
        if (v20 != v19)
          break;
        if (!*(_BYTE *)(v1 + 146))
          goto LABEL_25;
        v16 = ++v17;
        if (v18 <= v17)
          goto LABEL_23;
      }
      LOBYTE(v19) = v20;
LABEL_25:
      *(_BYTE *)(v1 + 69) = v19;
      *(_DWORD *)(v1 + 96) = v17;
      v21 = 1;
      *(_BYTE *)(v1 + 145) = 1;
      v22 = qword_100999968;
      if (os_log_type_enabled((os_log_t)qword_100999968, OS_LOG_TYPE_DEFAULT))
      {
        if (v19 > 8u)
          v23 = "Unknown BSM Band Code";
        else
          v23 = off_100923098[(char)v19];
        if (v7 > 8)
          v24 = "Unknown BSM Band Code";
        else
          v24 = off_100923098[v7];
        *(_DWORD *)v26 = 136315394;
        *(_QWORD *)&v26[4] = v23;
        *(_WORD *)&v26[12] = 2080;
        *(_QWORD *)&v26[14] = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "BandSwitchManager: Sufficient Bandwidth for HRB TDD in band %s and previous HRB %s", v26, 0x16u);
        v21 = *(unsigned __int8 *)(v1 + 145);
      }
    }
    if (v6 != v21 || *(unsigned __int8 *)(v1 + 69) != v7)
    {
      v25 = sub_10006BBEC();
      *(_QWORD *)v26 = _NSConcreteStackBlock;
      *(_QWORD *)&v26[8] = 3221225472;
      *(_QWORD *)&v26[16] = sub_1002C0D14;
      v27 = &unk_1009173C0;
      *(_QWORD *)v28 = v1;
      *(_DWORD *)&v28[8] = 18;
      sub_100041A34(v25, v26);
    }
  }
}

void sub_1002C30B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[7];

  v6 = a1 - 24;
  v7 = sub_10006BBEC();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002C2D9C;
  v8[3] = &unk_1009210D8;
  v8[4] = v6;
  v8[5] = a4;
  v8[6] = a3;
  sub_100041A34(v7, v8);
}

char *sub_1002C3148(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1002C334C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002C3384(id a1)
{
  operator new();
}

void sub_1002C33C4()
{
  operator delete();
}

void sub_1002C33E8(id a1)
{
  operator new();
}

void sub_1002C3428()
{
  operator delete();
}

void sub_1002C344C(_QWORD *a1, _DWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 1;
      v17 = (char *)sub_1002B46E0(a1[4], v16);
      v19 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
      v20 = (int *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFFCLL];
        v22 = 4 * (v21 >> 2);
        v23 = &v17[v16 & 0xFFFFFFFFFFFFFFFCLL];
        do
        {
          v24 = *v20++;
          *(_DWORD *)v23 = v24;
          v23 += 4;
          v22 -= 4;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[4 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 2;
      v8 = v6 >> 2 < -1;
      v9 = (v6 >> 2) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-4 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-4 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[4 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
    }
  }
  *(_DWORD *)v4 = *a2;
  a1[2] = v4 + 4;
}

char *sub_1002C3558(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void sub_1002C361C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0x16u);
}

uint64_t sub_1002C3628(void *a1, _BYTE *a2)
{
  NSObject *v4;
  uint64_t result;
  char value;

  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_int64)
  {
    value = xpc_int64_get_value(a1);
    result = 0;
    *a2 = value;
  }
  else
  {
    v4 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1006DB888(a1, v4);
    return 3;
  }
  return result;
}

uint64_t sub_1002C36A4(void *a1, _WORD *a2)
{
  NSObject *v4;
  uint64_t result;
  __int16 value;

  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_int64)
  {
    value = xpc_int64_get_value(a1);
    result = 0;
    *a2 = value;
  }
  else
  {
    v4 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1006DB888(a1, v4);
    return 3;
  }
  return result;
}

uint64_t sub_1002C3720(void *a1, int64_t *a2)
{
  NSObject *v4;
  uint64_t result;
  int64_t value;

  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_int64)
  {
    value = xpc_int64_get_value(a1);
    result = 0;
    *a2 = value;
  }
  else
  {
    v4 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1006DB888(a1, v4);
    return 3;
  }
  return result;
}

uint64_t sub_1002C379C(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t (**v5)();
  unsigned int *v6;

  v5 = &off_100918258;
  v6 = 0;
  v3 = sub_100023A7C(a1, (uint64_t)&v5);
  if (!(_DWORD)v3)
  {
    if (sub_10003F8C4((uint64_t)&v5) == 6)
    {
      sub_1000455DC((uint64_t)&v5, a2, 6uLL);
      v3 = 0;
    }
    else
    {
      v3 = 3;
    }
  }
  v5 = &off_100918258;
  if (v6)
    sub_100056AAC(v6);
  return v3;
}

void sub_1002C3824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  if (a10)
    sub_100056AAC(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C3840(void *a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD applier[5];

  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_array)
  {
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 3221225472;
    applier[2] = sub_1002C38F8;
    applier[3] = &unk_100923110;
    applier[4] = a2;
    if (xpc_array_apply(a1, applier))
      return 0;
    else
      return 3;
  }
  else
  {
    v4 = qword_100999860;
    if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
      sub_1006DB9D8(a1, v4);
    return 3;
  }
}

BOOL sub_1002C38F8(uint64_t a1, uint64_t a2, void *a3)
{
  int v4;
  uint64_t v5;
  _WORD *v6;
  unint64_t v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;
  __int16 v20;

  v20 = 0;
  v4 = sub_1002C36A4(a3, &v20);
  if (!v4)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = *(_WORD **)(v5 + 8);
    v7 = *(_QWORD *)(v5 + 16);
    if ((unint64_t)v6 >= v7)
    {
      v9 = *(_WORD **)v5;
      v10 = (uint64_t)v6 - *(_QWORD *)v5;
      if (v10 <= -3)
        abort();
      v11 = v10 >> 1;
      v12 = v7 - (_QWORD)v9;
      if (v12 <= (v10 >> 1) + 1)
        v13 = v11 + 1;
      else
        v13 = v12;
      if (v12 >= 0x7FFFFFFFFFFFFFFELL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
      {
        v15 = (char *)sub_1002B54AC(v5 + 16, v14);
        v9 = *(_WORD **)v5;
        v6 = *(_WORD **)(v5 + 8);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[2 * v11];
      v17 = &v15[2 * v14];
      *(_WORD *)v16 = v20;
      v8 = v16 + 2;
      while (v6 != v9)
      {
        v18 = *--v6;
        *((_WORD *)v16 - 1) = v18;
        v16 -= 2;
      }
      *(_QWORD *)v5 = v16;
      *(_QWORD *)(v5 + 8) = v8;
      *(_QWORD *)(v5 + 16) = v17;
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v6 = v20;
      v8 = v6 + 1;
    }
    *(_QWORD *)(v5 + 8) = v8;
  }
  return v4 == 0;
}

id sub_1002C39FC(void *a1, const char *a2)
{
  xpc_object_t value;
  void *v3;

  value = xpc_dictionary_get_value(a1, a2);
  if (value)
  {
    v3 = value;
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_uuid)
      value = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDBytes:", xpc_uuid_get_bytes(v3));
    else
      value = 0;
  }
  return value;
}

id sub_1002C3A5C(void *a1, const char *a2)
{
  xpc_object_t value;
  void *v3;
  const void *bytes_ptr;
  NSData *v5;

  value = xpc_dictionary_get_value(a1, a2);
  if (value)
  {
    v3 = value;
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_data)
    {
      bytes_ptr = xpc_data_get_bytes_ptr(v3);
      v5 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", bytes_ptr, xpc_data_get_length(v3));
      value = (xpc_object_t)objc_claimAutoreleasedReturnValue(v5);
    }
    else
    {
      value = 0;
    }
  }
  return value;
}

id sub_1002C3AD4(void *a1, const char *a2)
{
  xpc_object_t value;
  void *v3;
  NSNumber *v4;

  value = xpc_dictionary_get_value(a1, a2);
  if (value)
  {
    v3 = value;
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_int64)
    {
      v4 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", xpc_int64_get_value(v3));
      value = (xpc_object_t)objc_claimAutoreleasedReturnValue(v4);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006DBAAC();
      value = 0;
    }
  }
  return value;
}

uint64_t sub_1002C3B60(void *a1, const char *a2)
{
  uint64_t result;
  void *v3;

  result = (uint64_t)xpc_dictionary_get_value(a1, a2);
  if (result)
  {
    v3 = (void *)result;
    if (xpc_get_type((xpc_object_t)result) == (xpc_type_t)&_xpc_type_int64)
    {
      return xpc_int64_get_value(v3) != 0;
    }
    else if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_BOOL)
    {
      return xpc_BOOL_get_value(v3);
    }
    else
    {
      result = os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        sub_1006DBB10();
        return 0;
      }
    }
  }
  return result;
}

id sub_1002C3C04(void *a1, const char *a2)
{
  xpc_object_t value;
  id v3;
  void *v4;
  size_t i;
  xpc_object_t v6;
  void *v7;
  const void *bytes_ptr;
  NSData *v9;
  void *v10;

  value = xpc_dictionary_get_value(a1, a2);
  v3 = value;
  if (value)
  {
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      for (i = 0; ; ++i)
      {
        if (i >= xpc_array_get_count(v3))
        {
          v3 = v4;
          goto LABEL_16;
        }
        v6 = xpc_array_get_value(v3, i);
        v7 = v6;
        if (!v6)
          break;
        if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_data)
          break;
        bytes_ptr = xpc_data_get_bytes_ptr(v7);
        v9 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", bytes_ptr, xpc_data_get_length(v7));
        v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        if (!v10)
          break;
        objc_msgSend(v4, "addObject:", v10);

      }
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006DBC04();
      v3 = 0;
LABEL_16:

    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006DBBA0();
      v3 = 0;
    }
  }
  return v3;
}

void sub_1002C3D74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1002C3D94(void *a1, const char *a2)
{
  xpc_object_t value;
  id v3;
  void *v4;
  size_t i;
  xpc_object_t v6;
  void *v7;
  void *v8;
  const void *bytes_ptr;
  NSData *v10;
  id v11;

  value = xpc_dictionary_get_value(a1, a2);
  v3 = value;
  if (value)
  {
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      for (i = 0; ; ++i)
      {
        if (i >= xpc_array_get_count(v3))
        {
          v3 = v4;
          goto LABEL_18;
        }
        v6 = xpc_array_get_value(v3, i);
        v7 = v6;
        if (v6 && xpc_get_type(v6) == (xpc_type_t)&_xpc_type_data)
        {
          bytes_ptr = xpc_data_get_bytes_ptr(v7);
          v10 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", bytes_ptr, xpc_data_get_length(v7));
          v8 = (void *)objc_claimAutoreleasedReturnValue(v10);
        }
        else
        {
          v8 = 0;
        }
        v11 = objc_msgSend(v8, "mutableCopy");

        if (!v11)
          break;
        objc_msgSend(v4, "addObject:", v11);

      }
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006DBC04();
      v3 = 0;
LABEL_18:

    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006DBBA0();
      v3 = 0;
    }
  }
  return v3;
}

void sub_1002C3F1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002C3F48(id a1)
{
  operator new();
}

void sub_1002C3F88()
{
  operator delete();
}

xpc_type_t sub_1002C3FAC(xpc_object_t object)
{
  return xpc_get_type(object);
}

void sub_1002C3FB4(_BYTE *a1)
{
  int v2;
  void *v3;
  void **v4;
  size_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  switch(*a1)
  {
    case 1:
    case 2:
      v2 = *((unsigned __int16 *)a1 + 1);
      if (v2 == 16 || v2 == 8)
        goto LABEL_7;
      goto LABEL_20;
    case 3:
      if (*((_WORD *)a1 + 1) == 16)
      {
LABEL_7:
        v4 = (void **)(a1 + 8);
        goto LABEL_19;
      }
      goto LABEL_20;
    case 4:
    case 8:
      v4 = (void **)(a1 + 8);
      v3 = (void *)*((_QWORD *)a1 + 1);
      v5 = *((unsigned __int16 *)a1 + 1);
      goto LABEL_18;
    case 6:
      if (!*((_WORD *)a1 + 1))
        goto LABEL_16;
      v6 = 0;
      v7 = 0;
      do
      {
        sub_1002C3FB4(*((_QWORD *)a1 + 1) + v6);
        ++v7;
        v8 = *((unsigned __int16 *)a1 + 1);
        v6 += 16;
      }
      while (v7 < v8);
      goto LABEL_15;
    case 7:
      if (*((_WORD *)a1 + 1))
      {
        v9 = 0;
        v10 = 0;
        do
        {
          sub_1002C3FB4(*((_QWORD *)a1 + 1) + v9);
          ++v10;
          v8 = *((unsigned __int16 *)a1 + 1);
          v9 += 16;
        }
        while (v10 < v8);
LABEL_15:
        v5 = 16 * v8;
      }
      else
      {
LABEL_16:
        v5 = 0;
      }
      v4 = (void **)(a1 + 8);
      v3 = (void *)*((_QWORD *)a1 + 1);
LABEL_18:
      bzero(v3, v5);
LABEL_19:
      free(*v4);
LABEL_20:
      bzero(a1, 0x10uLL);
      return;
    default:
      goto LABEL_20;
  }
}

uint64_t sub_1002C40C8(uint64_t *a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  size_t v8;
  unsigned __int16 v9;
  _QWORD *v10;
  uint64_t v11;
  __int16 v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  int v35;
  size_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD v46[2];
  __int16 v47;
  int v48;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 336, "BOOL BT::BT_DataElement_Extract(OI_BYTE_STREAM *, BT_DATAELEM *)");
    goto LABEL_75;
  }
  v3 = *((unsigned __int16 *)a1 + 5);
  v4 = *((unsigned __int16 *)a1 + 6);
  if (v3 <= v4 || *((_BYTE *)a1 + 14) != 1)
LABEL_75:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
  v6 = *a1;
  *((_WORD *)a1 + 6) = v4 + 1;
  v7 = *(unsigned __int8 *)(v6 + v4);
  *(_BYTE *)a2 = v7;
  if ((int)(v3 - (v4 + 1)) <= 1)
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
  v8 = *(unsigned __int16 *)(v6 + v4 + 1);
  *(_WORD *)(a2 + 2) = v8;
  v9 = v4 + 3;
  *((_WORD *)a1 + 6) = v4 + 3;
  switch(v7)
  {
    case 0:
      return 1;
    case 1:
      if ((_DWORD)v8 != 16)
      {
        if ((_DWORD)v8 == 8)
        {
          v10 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
          *(_QWORD *)(a2 + 8) = v10;
          if (*((_BYTE *)a1 + 14) != 1)
            goto LABEL_85;
          if (*((_BYTE *)a1 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 347, "BOOL BT::BT_DataElement_Extract(OI_BYTE_STREAM *, BT_DATAELEM *)");
            goto LABEL_85;
          }
          v11 = *((unsigned __int16 *)a1 + 6);
          if ((unint64_t)*((unsigned __int16 *)a1 + 5) - v11 <= 7)
LABEL_85:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT"
                                   "_DataElements.cpp");
          goto LABEL_17;
        }
        if ((int)(v3 - v9) <= 3)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
        goto LABEL_67;
      }
      v27 = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
      *(_QWORD *)(a2 + 8) = v27;
      if (*((_BYTE *)a1 + 14) != 1)
        goto LABEL_91;
      if (*((_BYTE *)a1 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 350, "BOOL BT::BT_DataElement_Extract(OI_BYTE_STREAM *, BT_DATAELEM *)");
        goto LABEL_91;
      }
      v28 = *((unsigned __int16 *)a1 + 6);
      if ((unint64_t)*((unsigned __int16 *)a1 + 5) - v28 <= 0xF)
LABEL_91:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
      goto LABEL_63;
    case 2:
      if ((_DWORD)v8 != 16)
      {
        if ((_DWORD)v8 == 8)
        {
          v10 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
          *(_QWORD *)(a2 + 8) = v10;
          if (*((_BYTE *)a1 + 14) == 1)
          {
            if (*((_BYTE *)a1 + 15))
            {
              sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 359, "BOOL BT::BT_DataElement_Extract(OI_BYTE_STREAM *, BT_DATAELEM *)");
            }
            else
            {
              v11 = *((unsigned __int16 *)a1 + 6);
              if ((unint64_t)*((unsigned __int16 *)a1 + 5) - v11 > 7)
              {
LABEL_17:
                *v10 = *(_QWORD *)(*a1 + v11);
                v12 = *((_WORD *)a1 + 6) + 8;
                goto LABEL_68;
              }
            }
          }
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
        }
        if ((int)(v3 - v9) <= 3)
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
        goto LABEL_67;
      }
      v27 = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
      *(_QWORD *)(a2 + 8) = v27;
      if (*((_BYTE *)a1 + 14) != 1)
        goto LABEL_94;
      if (*((_BYTE *)a1 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 362, "BOOL BT::BT_DataElement_Extract(OI_BYTE_STREAM *, BT_DATAELEM *)");
      }
      else
      {
        v28 = *((unsigned __int16 *)a1 + 6);
        if ((unint64_t)*((unsigned __int16 *)a1 + 5) - v28 > 0xF)
          goto LABEL_63;
      }
LABEL_94:
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
    case 3:
      if ((_DWORD)v8 == 16)
      {
        v27 = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
        *(_QWORD *)(a2 + 8) = v27;
        if (*((_BYTE *)a1 + 14) == 1)
        {
          if (*((_BYTE *)a1 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 371, "BOOL BT::BT_DataElement_Extract(OI_BYTE_STREAM *, BT_DATAELEM *)");
          }
          else
          {
            v28 = *((unsigned __int16 *)a1 + 6);
            if (*((unsigned __int16 *)a1 + 5) - (int)v28 > 15)
            {
LABEL_63:
              *v27 = *(_OWORD *)(*a1 + v28);
              v12 = *((_WORD *)a1 + 6) + 16;
              goto LABEL_68;
            }
          }
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
      }
      if ((int)(v3 - v9) <= 3)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
LABEL_67:
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(v6 + (unsigned __int16)(v4 + 3));
      v12 = *((_WORD *)a1 + 6) + 4;
LABEL_68:
      *((_WORD *)a1 + 6) = v12;
      return 1;
    case 4:
      v13 = malloc_type_malloc(v8, 0x100004077774924uLL);
      *(_QWORD *)(a2 + 8) = v13;
      if (*((_BYTE *)a1 + 14) != 1
        || ((v14 = v13, v15 = *a1, v16 = *((unsigned __int16 *)a1 + 6), !*((_BYTE *)a1 + 15))
          ? (v17 = *((unsigned __int16 *)a1 + 5) - (_DWORD)v16)
          : (sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 379, "BOOL BT::BT_DataElement_Extract(OI_BYTE_STREAM *, BT_DATAELEM *)"), v17 = 0), v36 = *(unsigned __int16 *)(a2 + 2), v17 < (int)v36))
      {
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
      }
      goto LABEL_55;
    case 5:
      if (v3 <= v9)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
      *((_WORD *)a1 + 6) = v4 + 4;
      *(_BYTE *)(a2 + 8) = *(_BYTE *)(v6 + (unsigned __int16)(v4 + 3)) != 0;
      return 1;
    case 6:
      result = (uint64_t)malloc_type_malloc(16 * v8, 0x10F2040C8FBA5E1uLL);
      *(_QWORD *)(a2 + 8) = result;
      if (!result)
        return result;
      if (!*(_WORD *)(a2 + 2))
        return 0;
      v29 = 0;
      v30 = 0;
      do
      {
        if ((sub_1002C40C8(a1, *(_QWORD *)(a2 + 8) + v29) & 1) == 0)
        {
          v45 = sub_100027F68();
          sub_100576500(v45, 1);
        }
        ++v30;
        v31 = *(unsigned __int16 *)(a2 + 2);
        v29 += 16;
      }
      while (v30 < v31);
      return (_DWORD)v31 != 0;
    case 7:
      result = (uint64_t)malloc_type_malloc(16 * v8, 0x10F2040C8FBA5E1uLL);
      *(_QWORD *)(a2 + 8) = result;
      if (!result)
        return result;
      if (!*(_WORD *)(a2 + 2))
        return 0;
      v32 = 0;
      v33 = 0;
      while ((sub_1002C40C8(a1, *(_QWORD *)(a2 + 8) + v32) & 1) != 0)
      {
        ++v33;
        v31 = *(unsigned __int16 *)(a2 + 2);
        v32 += 16;
        if (v33 >= v31)
          return (_DWORD)v31 != 0;
      }
      v37 = qword_100999848;
      result = os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        sub_1006DBCD0(v37, v38, v39, v40, v41, v42, v43, v44);
        return 0;
      }
      return result;
    case 8:
      v34 = malloc_type_malloc(v8, 0x100004077774924uLL);
      *(_QWORD *)(a2 + 8) = v34;
      if (*((_BYTE *)a1 + 14) != 1
        || ((v14 = v34, v15 = *a1, v16 = *((unsigned __int16 *)a1 + 6), !*((_BYTE *)a1 + 15))
          ? (v35 = *((unsigned __int16 *)a1 + 5) - (_DWORD)v16)
          : (sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 424, "BOOL BT::BT_DataElement_Extract(OI_BYTE_STREAM *, BT_DATAELEM *)"), v35 = 0), v36 = *(unsigned __int16 *)(a2 + 2), v35 < (int)v36))
      {
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
      }
LABEL_55:
      memmove(v14, (const void *)(v15 + v16), v36);
      v12 = *((_WORD *)a1 + 6) + *(_WORD *)(a2 + 2);
      goto LABEL_68;
    default:
      v18 = qword_100999848;
      if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
      {
        v46[0] = 67109376;
        v46[1] = v7;
        v47 = 1024;
        v48 = v9;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "SDP data element extraction error with type 0x%x, bytestream pos %d", (uint8_t *)v46, 0xEu);
        v18 = qword_100999848;
      }
      result = os_log_type_enabled(v18, OS_LOG_TYPE_FAULT);
      if (!(_DWORD)result)
        return result;
      sub_1006DBC5C(v18, v20, v21, v22, v23, v24, v25, v26);
      return 0;
  }
}

BOOL sub_1002C4898(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  unsigned __int16 v9;
  int v10;
  _BOOL8 result;
  int v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  const void *v17;
  int v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD v51[2];
  __int16 v52;
  int v53;

  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 439, "BOOL BT::BT_DataElement_Serialize(OI_BYTE_STREAM *, BT_DATAELEM *)");
    goto LABEL_84;
  }
  v3 = *((unsigned __int16 *)a1 + 6);
  if (*((unsigned __int16 *)a1 + 5) <= v3 || *((_BYTE *)a1 + 14) != 2)
LABEL_84:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
  v5 = *a2;
  v6 = *a1;
  *((_WORD *)a1 + 6) = v3 + 1;
  *(_BYTE *)(v6 + v3) = v5;
  if (*((_BYTE *)a1 + 15))
  {
    sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 440, "BOOL BT::BT_DataElement_Serialize(OI_BYTE_STREAM *, BT_DATAELEM *)");
    goto LABEL_86;
  }
  v7 = *((unsigned __int16 *)a1 + 6);
  if (*((unsigned __int16 *)a1 + 5) - (int)v7 <= 1 || *((_BYTE *)a1 + 14) != 2)
LABEL_86:
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
  *(_BYTE *)(*a1 + v7) = a2[2];
  *(_BYTE *)(*a1 + *((unsigned __int16 *)a1 + 6) + 1) = a2[3];
  v8 = *((_WORD *)a1 + 6);
  v9 = v8 + 2;
  *((_WORD *)a1 + 6) = v8 + 2;
  v10 = *a2;
  result = 1;
  switch(*a2)
  {
    case 0u:
      return result;
    case 1u:
      v12 = *((unsigned __int16 *)a2 + 1);
      if (v12 != 16)
      {
        if (v12 == 8)
        {
          if (*((_BYTE *)a1 + 15))
          {
            sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 450, "BOOL BT::BT_DataElement_Serialize(OI_BYTE_STREAM *, BT_DATAELEM *)");
            goto LABEL_96;
          }
          v13 = v9;
          if (*((unsigned __int16 *)a1 + 5) - (unint64_t)v9 <= 7 || *((_BYTE *)a1 + 14) != 2)
LABEL_96:
            sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT"
                                   "_DataElements.cpp");
          goto LABEL_19;
        }
        if (*((_BYTE *)a1 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 454, "BOOL BT::BT_DataElement_Serialize(OI_BYTE_STREAM *, BT_DATAELEM *)");
          goto LABEL_102;
        }
        if (*((unsigned __int16 *)a1 + 5) - v9 <= 3 || *((_BYTE *)a1 + 14) != 2)
LABEL_102:
          sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
LABEL_75:
        *(_BYTE *)(*a1 + v9) = *((_DWORD *)a2 + 2);
        *(_BYTE *)(*a1 + *((unsigned __int16 *)a1 + 6) + 1) = BYTE1(*((_DWORD *)a2 + 2));
        *(_BYTE *)(*a1 + *((unsigned __int16 *)a1 + 6) + 2) = *((_WORD *)a2 + 5);
        *(_BYTE *)(*a1 + *((unsigned __int16 *)a1 + 6) + 3) = a2[11];
        v15 = *((_WORD *)a1 + 6) + 4;
        goto LABEL_76;
      }
      if (*((_BYTE *)a1 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 452, "BOOL BT::BT_DataElement_Serialize(OI_BYTE_STREAM *, BT_DATAELEM *)");
        goto LABEL_100;
      }
      if (*((unsigned __int16 *)a1 + 5) - (unint64_t)v9 <= 0xF || *((_BYTE *)a1 + 14) != 2)
LABEL_100:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
      goto LABEL_71;
    case 2u:
      v14 = *((unsigned __int16 *)a2 + 1);
      if (v14 == 16)
      {
        if (*((_BYTE *)a1 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 462, "BOOL BT::BT_DataElement_Serialize(OI_BYTE_STREAM *, BT_DATAELEM *)");
        }
        else if (*((unsigned __int16 *)a1 + 5) - (unint64_t)v9 > 0xF && *((_BYTE *)a1 + 14) == 2)
        {
LABEL_71:
          *(_OWORD *)(*a1 + v9) = *(_OWORD *)*((_QWORD *)a2 + 1);
          v15 = *((_WORD *)a1 + 6) + 16;
          goto LABEL_76;
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
      }
      if (v14 != 8)
      {
        if (*((_BYTE *)a1 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 464, "BOOL BT::BT_DataElement_Serialize(OI_BYTE_STREAM *, BT_DATAELEM *)");
        }
        else if (*((unsigned __int16 *)a1 + 5) - v9 > 3 && *((_BYTE *)a1 + 14) == 2)
        {
          goto LABEL_75;
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
      }
      if (*((_BYTE *)a1 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 460, "BOOL BT::BT_DataElement_Serialize(OI_BYTE_STREAM *, BT_DATAELEM *)");
        goto LABEL_98;
      }
      v13 = v9;
      if (*((unsigned __int16 *)a1 + 5) - (unint64_t)v9 <= 7 || *((_BYTE *)a1 + 14) != 2)
LABEL_98:
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
LABEL_19:
      *(_QWORD *)(*a1 + v13) = **((_QWORD **)a2 + 1);
      v15 = *((_WORD *)a1 + 6) + 8;
LABEL_76:
      *((_WORD *)a1 + 6) = v15;
      return result;
    case 3u:
      if (*((_WORD *)a2 + 1) != 16)
      {
        if (*((_BYTE *)a1 + 15))
        {
          sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 472, "BOOL BT::BT_DataElement_Serialize(OI_BYTE_STREAM *, BT_DATAELEM *)");
        }
        else if (*((unsigned __int16 *)a1 + 5) - v9 > 3 && *((_BYTE *)a1 + 14) == 2)
        {
          goto LABEL_75;
        }
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
      }
      if (*((_BYTE *)a1 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 470, "BOOL BT::BT_DataElement_Serialize(OI_BYTE_STREAM *, BT_DATAELEM *)");
      }
      else if (*((unsigned __int16 *)a1 + 5) - (unint64_t)(unsigned __int16)(v8 + 2) > 0xF
             && *((_BYTE *)a1 + 14) == 2)
      {
        goto LABEL_71;
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
    case 4u:
      v16 = *a1;
      v17 = (const void *)*((_QWORD *)a2 + 1);
      if (*((_BYTE *)a1 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 477, "BOOL BT::BT_DataElement_Serialize(OI_BYTE_STREAM *, BT_DATAELEM *)");
        v18 = 0;
      }
      else
      {
        v18 = *((unsigned __int16 *)a1 + 5) - v9;
      }
      v34 = *((unsigned __int16 *)a2 + 1);
      if (v18 < (int)v34 || *((_BYTE *)a1 + 14) != 2)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
      goto LABEL_58;
    case 5u:
      if (*((_BYTE *)a1 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 481, "BOOL BT::BT_DataElement_Serialize(OI_BYTE_STREAM *, BT_DATAELEM *)");
      }
      else if (*((unsigned __int16 *)a1 + 5) > v9 && *((_BYTE *)a1 + 14) == 2)
      {
        v19 = a2[8];
        v20 = *a1;
        *((_WORD *)a1 + 6) = v8 + 3;
        *(_BYTE *)(v20 + (unsigned __int16)(v8 + 2)) = v19;
        return result;
      }
      sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
    case 6u:
      if (!*((_WORD *)a2 + 1))
        return result;
      v21 = 0;
      v22 = 0;
      while ((sub_1002C4898(a1, *((_QWORD *)a2 + 1) + v21) & 1) != 0)
      {
        ++v22;
        v21 += 16;
        if (v22 >= *((unsigned __int16 *)a2 + 1))
          return 1;
      }
      v35 = qword_100999848;
      result = os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      sub_1006DBD00(v35, v36, v37, v38, v39, v40, v41, v42);
      return 0;
    case 7u:
      if (!*((_WORD *)a2 + 1))
        return result;
      v23 = 0;
      v24 = 0;
      while ((sub_1002C4898(a1, *((_QWORD *)a2 + 1) + v23) & 1) != 0)
      {
        ++v24;
        v23 += 16;
        if (v24 >= *((unsigned __int16 *)a2 + 1))
          return 1;
      }
      v43 = qword_100999848;
      result = os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_1006DBD30(v43, v44, v45, v46, v47, v48, v49, v50);
        return 0;
      }
      return result;
    case 8u:
      v16 = *a1;
      v17 = (const void *)*((_QWORD *)a2 + 1);
      if (*((_BYTE *)a1 + 15))
      {
        sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp", 506, "BOOL BT::BT_DataElement_Serialize(OI_BYTE_STREAM *, BT_DATAELEM *)");
        v25 = 0;
      }
      else
      {
        v25 = *((unsigned __int16 *)a1 + 5) - v9;
      }
      v34 = *((unsigned __int16 *)a2 + 1);
      if (v25 < (int)v34 || *((_BYTE *)a1 + 14) != 2)
        sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/BT_DataElements.cpp");
LABEL_58:
      memmove((void *)(v16 + v9), v17, v34);
      *((_WORD *)a1 + 6) += *((_WORD *)a2 + 1);
      return 1;
    default:
      v26 = qword_100999848;
      if (os_log_type_enabled((os_log_t)qword_100999848, OS_LOG_TYPE_ERROR))
      {
        v51[0] = 67109376;
        v51[1] = v10;
        v52 = 1024;
        v53 = v9;
        _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Serialization: invalid SDP element type of 0x%x, bytestream pos %d", (uint8_t *)v51, 0xEu);
        v26 = qword_100999848;
      }
      result = os_log_type_enabled(v26, OS_LOG_TYPE_FAULT);
      if (!result)
        return result;
      sub_1006DBC5C(v26, v27, v28, v29, v30, v31, v32, v33);
      return 0;
  }
}

BOOL sub_1002C5144(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_BYTE *)a1 != 3 || *(_BYTE *)a2 != 3)
    return 0;
  v2 = *(unsigned __int16 *)(a1 + 2);
  if (v2 != 2)
  {
    if (v2 == 16)
    {
      if (*(_WORD *)(a2 + 2) == 16)
      {
        v6 = *(uint64_t **)(a1 + 8);
        v7 = *(uint64_t **)(a2 + 8);
        v9 = *v6;
        v8 = v6[1];
        v11 = *v7;
        v10 = v7[1];
        return v9 == v11 && v8 == v10;
      }
      v3 = *(_DWORD *)(a2 + 8);
      v4 = *(uint64_t **)(a1 + 8);
      goto LABEL_15;
    }
    if (v2 != 4)
      return 0;
  }
  v3 = *(_DWORD *)(a1 + 8);
  if (*(_WORD *)(a2 + 2) == 16)
  {
    v4 = *(uint64_t **)(a2 + 8);
LABEL_15:
    v15 = v3 | 0x10000000000000;
    v13 = *v4;
    v14 = v4[1];
    return v13 == v15 && v14 == 0xFB349B5F80000080;
  }
  return v3 == *(_DWORD *)(a2 + 8);
}

uint64_t sub_1002C5240(_BYTE *a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  void *v6;
  _OWORD *v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;

  bzero(a1, 0x10uLL);
  *((_WORD *)a1 + 1) = *(_WORD *)(a2 + 2);
  *a1 = *(_BYTE *)a2;
  switch(*(_BYTE *)a2)
  {
    case 0:
      return 1;
    case 1:
    case 2:
      v4 = *(unsigned __int16 *)(a2 + 2);
      if (v4 == 16)
        goto LABEL_7;
      if (v4 != 8)
        goto LABEL_8;
      v5 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
      *((_QWORD *)a1 + 1) = v5;
      *v5 = **(_QWORD **)(a2 + 8);
      return 1;
    case 3:
      if (*(_WORD *)(a2 + 2) == 16)
      {
LABEL_7:
        v7 = malloc_type_malloc(0x10uLL, 0x1000040451B5BE8uLL);
        *((_QWORD *)a1 + 1) = v7;
        *v7 = *(_OWORD *)*(_QWORD *)(a2 + 8);
      }
      else
      {
LABEL_8:
        *((_DWORD *)a1 + 2) = *(_DWORD *)(a2 + 8);
      }
      return 1;
    case 4:
    case 8:
      v6 = malloc_type_malloc(*(unsigned __int16 *)(a2 + 2), 0x100004077774924uLL);
      *((_QWORD *)a1 + 1) = v6;
      memcpy(v6, *(const void **)(a2 + 8), *(unsigned __int16 *)(a2 + 2));
      return 1;
    case 5:
      a1[8] = *(_BYTE *)(a2 + 8);
      return 1;
    case 6:
      result = (uint64_t)malloc_type_malloc(16 * *(unsigned __int16 *)(a2 + 2), 0x10F2040C8FBA5E1uLL);
      *((_QWORD *)a1 + 1) = result;
      if (!result)
        return result;
      if (*(_WORD *)(a2 + 2))
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        do
        {
          if ((sub_1002C5240(*((_QWORD *)a1 + 1) + 16 * v11, *(_QWORD *)(a2 + 8) + v9) & 1) == 0)
          {
            --*((_WORD *)a1 + 1);
            --v11;
          }
          ++v10;
          ++v11;
          v9 += 16;
        }
        while (v10 < *(unsigned __int16 *)(a2 + 2));
      }
      break;
    case 7:
      result = (uint64_t)malloc_type_malloc(16 * *(unsigned __int16 *)(a2 + 2), 0x10F2040C8FBA5E1uLL);
      *((_QWORD *)a1 + 1) = result;
      if (!result)
        return result;
      if (*(_WORD *)(a2 + 2))
      {
        v12 = 0;
        v13 = 0;
        do
        {
          if ((sub_1002C5240(*((_QWORD *)a1 + 1) + v12, *(_QWORD *)(a2 + 8) + v12) & 1) == 0)
            --*((_WORD *)a1 + 1);
          ++v13;
          v12 += 16;
        }
        while (v13 < *(unsigned __int16 *)(a2 + 2));
      }
      break;
    default:
      return 0;
  }
  return *((_WORD *)a1 + 1) != 0;
}

os_log_t *sub_1002C5464(os_log_t *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = os_log_create("com.apple.bluetooth", "BTAudio");
  return a1;
}

BOOL sub_1002C54A0(uint64_t a1, uint64_t a2)
{
  const char *v3;
  size_t v4;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = off_10097AB90;
  *(_QWORD *)(a1 + 16) = a2 + (strlen(off_10097AB90) & 0xFFFFFFFFFFFFFFF8) + 56;
  v4 = strlen(v3);
  return strncmp((const char *)(a2 + 41), v3, v4) == 0;
}

uint64_t sub_1002C5510(uint64_t result)
{
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

unint64_t sub_1002C5518(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
  {
    if (!*(_BYTE *)(v1 + 40))
      return atomic_load((unint64_t *)(v1 + 24));
    *(_QWORD *)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
    v2 = atomic_load((unint64_t *)(v1 + 24));
    v3 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 24);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - v2, v3));
    v5 = *(_QWORD *)(a1 + 8);
    *(_BYTE *)(v5 + 40) = 0;
    atomic_store(0, (unint64_t *)(v5 + 32));
    v1 = *(_QWORD *)(a1 + 8);
    if (v1)
      return atomic_load((unint64_t *)(v1 + 24));
  }
  else if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
  {
    sub_1006DBD60();
  }
  return 0;
}

void *sub_1002C55B0(uint64_t a1, char *__dst, size_t a3)
{
  size_t *v5;
  size_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  void *result;
  size_t v14;

  v5 = *(size_t **)(a1 + 8);
  v6 = v5[1];
  v7 = *v5;
  v8 = v6 + a3;
  v9 = *v5 - v6;
  if (a3 - v9 >= v6)
    v10 = v6;
  else
    v10 = a3 - v9;
  if (v8 >= v7)
    v11 = v9;
  else
    v11 = a3;
  result = memcpy(__dst, (const void *)(v6 + *(_QWORD *)(a1 + 16)), v11);
  if (v8 >= v7 && v10 != 0)
    result = memcpy(&__dst[v11], *(const void **)(a1 + 16), v10);
  if (v8 >= v7)
    v14 = v10;
  else
    v14 = v8;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = v14;
  return result;
}

unint64_t sub_1002C5648(uint64_t a1, char *a2, size_t *a3, size_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;

  v6 = a1 + 8;
  v5 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)(v5[1] + 2) > *v5)
  {
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
      sub_1006DBD8C();
    return 0;
  }
  v7 = v5[1];
  v8 = *(unsigned __int16 *)(v7 + *(_QWORD *)(a1 + 16));
  if (!*(_WORD *)(v7 + *(_QWORD *)(a1 + 16)))
    return 0;
  if (v8 >= a4)
    v8 = a4;
  *a3 = v8;
  v10 = v8 & 1;
  v11 = v8 + v10 + 2;
  v12 = atomic_load(v5 + 3);
  if (v11 > v12)
  {
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
      sub_1006DBDB8((uint64_t)a3, v6);
    return 0;
  }
  v14 = *(_QWORD **)(a1 + 8);
  v14[1] += 2;
  v14[1] %= *v14;
  sub_1002C55B0(a1, a2, *a3);
  v15 = *(_QWORD **)(a1 + 8);
  if (v10)
    v15[1] = (unint64_t)(v15[1] + 1) % *v15;
  v16 = v15 + 4;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  return v11;
}

size_t sub_1002C5784(uint64_t a1, char *a2, size_t a3)
{
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v6 = sub_1002C5518(a1);
  if (!v6)
    return 0;
  if (v6 < a3)
    a3 = v6;
  sub_1002C55B0(a1, a2, a3);
  v7 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 24);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - a3, v7));
  return a3;
}

unint64_t sub_1002C57F4(uint64_t a1, char *a2, size_t a3)
{
  unint64_t result;
  unint64_t *v7;
  unint64_t v8;
  size_t v9;

  result = sub_1002C5518(a1);
  if (result)
  {
    v9 = 0;
    result = sub_1002C5648(a1, a2, &v9, a3);
    if (result)
    {
      v7 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 24);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - result, v7));
      return v9;
    }
  }
  return result;
}

BOOL sub_1002C5868(uint64_t a1, char *a2, size_t *a3, size_t a4, char *a5, size_t *a6, size_t a7)
{
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;

  v14 = sub_1002C5518(a1);
  if (v14)
  {
    v15 = sub_1002C5648(a1, a2, a3, a4);
    v16 = sub_1002C5648(a1, a5, a6, a7);
    v17 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 24);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - (v16 + v15), v17));
  }
  return v14 != 0;
}

BOOL sub_1002C5910(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;
  unint64_t v6;

  v3 = a1 + 8;
  v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    if (*((_BYTE *)v2 + 40))
      return 0;
    v5 = *v2;
    v6 = atomic_load((unint64_t *)v2 + 3);
    if (v5 + ~v6 >= a2)
    {
      return 1;
    }
    else
    {
      if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
        sub_1006DBE60(v3);
      result = 0;
      *(_BYTE *)(*(_QWORD *)v3 + 40) = 1;
    }
  }
  else
  {
    result = os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_1006DBE34();
      return 0;
    }
  }
  return result;
}

void sub_1002C59C8(uint64_t a1, __int16 a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(unint64_t **)(a1 + 8);
  v3 = v2[2];
  v4 = *v2;
  if (v3 + 2 <= *v2)
  {
    *(_WORD *)(v3 + *(_QWORD *)(a1 + 16)) = a2;
    v2[2] = (v3 + 2) % v4;
  }
  else if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
  {
    sub_1006DBEDC();
  }
}

void *sub_1002C5A2C(uint64_t a1, char *a2, size_t a3)
{
  size_t *v6;
  size_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  void *result;
  size_t v15;

  v6 = *(size_t **)(a1 + 8);
  v7 = v6[2];
  v8 = *v6;
  v9 = v7 + a3;
  v10 = *v6 - v7;
  v11 = a3 - v10;
  if (v7 + a3 >= *v6)
    v12 = *v6 - v7;
  else
    v12 = a3;
  result = memcpy((void *)(v7 + *(_QWORD *)(a1 + 16)), a2, v12);
  if (v9 >= v8 && a3 != v10)
    result = memcpy(*(void **)(a1 + 16), &a2[v12], v11);
  if (v9 >= v8)
    v15 = v11;
  else
    v15 = v9;
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) = v15;
  return result;
}

void sub_1002C5AC4(uint64_t a1, char **a2, size_t *a3, uint64_t a4, __int16 a5, uint64_t a6)
{
  char *v11;
  char *v12;
  size_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;

  sub_1002C59C8(a1, a5);
  for (; a4; --a4)
  {
    v12 = *a2++;
    v11 = v12;
    v13 = *a3++;
    sub_1002C5A2C(a1, v11, v13);
  }
  v14 = *(_QWORD **)(a1 + 8);
  if (a6)
  {
    v14[2] += a6;
    v14[2] %= *v14;
  }
  v15 = v14 + 4;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
}

size_t sub_1002C5B60(uint64_t a1, char *a2, unint64_t a3)
{
  size_t v3;
  unint64_t *v6;
  unint64_t v7;

  v3 = a3;
  if (!sub_1002C5910(a1, a3))
    return 0;
  sub_1002C5A2C(a1, a2, v3);
  v6 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 24);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + v3, v6));
  return v3;
}

unint64_t sub_1002C5BCC(uint64_t a1, char *a2, size_t a3)
{
  __int16 v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  size_t v10;
  char *v11;

  v3 = a3;
  v10 = a3;
  v11 = a2;
  v5 = a3 & 1;
  v6 = a3 + v5 + 2;
  if (!sub_1002C5910(a1, v6))
    return 0;
  sub_1002C5AC4(a1, &v11, &v10, 1, v3, v5);
  v7 = (unint64_t *)(*(_QWORD *)(a1 + 8) + 24);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + v6, v7));
  return v6;
}

unint64_t sub_1002C5C58(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    return atomic_load((unint64_t *)(v1 + 32));
  else
    return 0;
}

void sub_1002C5C88(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD v10[5];
  _QWORD v11[5];
  uint8_t buf[4];
  _QWORD *v13;

  v4 = qword_100999860;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v5 = (_QWORD *)*v5;
    *(_DWORD *)buf = 136315138;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "XpcMBFrameworkConnection::handleDisconnection name:%s", buf, 0xCu);
  }
  *(_BYTE *)(a1 + 160) = 0;
  v6 = *(_QWORD **)(a1 + 128);
  if (v6 != (_QWORD *)(a1 + 136))
  {
    do
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)v6[4] + 8))(v6[4], *(_QWORD *)(a1 + 16), a2);
      if (qword_10097AB48 != -1)
        dispatch_once(&qword_10097AB48, &stru_100923190);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1002C5EA0;
      v11[3] = &unk_100917378;
      v11[4] = v6 + 4;
      sub_100509320((uint64_t)off_10097AB40, v11);
      v7 = (_QWORD *)v6[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v6[2];
          v9 = *v8 == (_QWORD)v6;
          v6 = v8;
        }
        while (!v9);
      }
      v6 = v8;
    }
    while (v8 != (_QWORD *)(a1 + 136));
  }
  if (qword_10097AB48 != -1)
    dispatch_once(&qword_10097AB48, &stru_100923190);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1002C5EBC;
  v10[3] = &unk_100917378;
  v10[4] = a1;
  sub_100509320((uint64_t)off_10097AB40, v10);
}

uint64_t sub_1002C5EA0(uint64_t a1)
{
  uint64_t result;

  result = **(_QWORD **)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

void sub_1002C5EBC(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 16));
}

void sub_1002C5EC8(uint64_t a1, char *string, void *a3, int a4)
{
  size_t v8;
  xpc_object_t v9;
  xpc_object_t object[2];
  char *keys[2];

  *(_OWORD *)keys = *(_OWORD *)&off_100923180;
  object[0] = xpc_string_create(string);
  object[1] = a3;
  if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_DEBUG))
    sub_1006DC008();
  if (a3)
    v8 = 2;
  else
    v8 = 1;
  v9 = xpc_dictionary_create((const char *const *)keys, object, v8);
  sub_1002C5FD8(a1, (uint64_t)string, v9);
  xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), v9);
  xpc_release(v9);
  xpc_release(object[0]);
  if (a3)
  {
    if (a4)
      xpc_release(a3);
  }
}

void sub_1002C5FD8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  NSObject *v9;
  _QWORD *v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  _QWORD *v15;
  __int16 v16;
  int count;
  __int16 v18;
  char *v19;

  v6 = sub_100027F68();
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 448))(v6);
  if (a3 && v7)
  {
    if (xpc_get_type(a3) == (xpc_type_t)&_xpc_type_error)
    {
      v11 = qword_100999860;
      if (os_log_type_enabled((os_log_t)qword_100999860, OS_LOG_TYPE_ERROR))
        sub_1006DC088(v11);
    }
    else
    {
      v8 = xpc_copy_description(a3);
      v9 = qword_100999988;
      if (os_log_type_enabled((os_log_t)qword_100999988, OS_LOG_TYPE_DEFAULT))
      {
        v10 = (_QWORD *)(a1 + 56);
        if (*(char *)(a1 + 79) < 0)
          v10 = (_QWORD *)*v10;
        v12 = 136446978;
        v13 = a2;
        v14 = 2082;
        v15 = v10;
        v16 = 1024;
        count = xpc_dictionary_get_count(a3);
        v18 = 2080;
        v19 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Msg:\"%{public}s\", Session:\"%{public}s\", Count:%d, xpc_copy_description(args): %s ", (uint8_t *)&v12, 0x26u);
      }
      free(v8);
    }
  }
}

uint64_t sub_1002C613C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100923160;
  sub_10001A82C(a1 + 128, *(_QWORD **)(a1 + 136));
  return sub_100008708(a1);
}

void sub_1002C6170(uint64_t a1)
{
  *(_QWORD *)a1 = off_100923160;
  sub_10001A82C(a1 + 128, *(_QWORD **)(a1 + 136));
  sub_100008708(a1);
  operator delete();
}

uint64_t *sub_1002C61B8(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t **v7;
  unint64_t v8;

  v4 = a1 + 1;
  v5 = a1[1];
  v6 = *a2;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v6 >= v8)
          break;
        v5 = *v7;
        v4 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= v6)
        return (uint64_t *)v7;
      v5 = v7[1];
      if (!v5)
      {
        v4 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    a3[4] = v6;
    sub_100004078(a1, (uint64_t)v7, v4, a3);
  }
  return a3;
}

uint64_t sub_1002C6244(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_10001A82C(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_10001A82C(*(_QWORD *)a1, v2);
  }
  return a1;
}

void sub_1002C6298(id a1)
{
  operator new();
}

void sub_1002C62D8()
{
  operator delete();
}

void sub_1002C62FC(id a1)
{
  operator new();
}

void sub_1002C633C()
{
  operator delete();
}

uint64_t *sub_1002C6360(uint64_t *a1, unsigned __int8 a2, char a3)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;

  v6 = malloc_type_malloc(0x101uLL, 0x46874C2AuLL);
  *((_BYTE *)a1 + 16) = a2;
  if (v6)
  {
    *a1 = (uint64_t)v6;
    *((_WORD *)a1 + 4) = 257;
    *((_WORD *)a1 + 7) = 2;
    *(_DWORD *)((char *)a1 + 10) = 65793;
    *v6 = a2;
    if (*((_BYTE *)a1 + 15))
    {
      sub_10025240C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualController/BTVirtualHciPacket.mm", 27, "BT::BTVirtualHCIEventPacket::BTVirtualHCIEventPacket(uint8_t, uint8_t)");
    }
    else
    {
      v7 = *((unsigned __int16 *)a1 + 6);
      if (*((unsigned __int16 *)a1 + 5) > v7 && *((_BYTE *)a1 + 14) == 2)
      {
        v8 = *a1;
        *((_WORD *)a1 + 6) = v7 + 1;
        *(_BYTE *)(v8 + v7) = a3;
        return a1;
      }
    }
    sub_1001494E0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/VirtualCon"
                           "troller/BTVirtualHciPacket.mm");
  }
  v9 = qword_100999980;
  if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_ERROR))
    sub_1006DC0C8(a2, v9);
  return a1;
}

void sub_1002C64B8(id a1)
{
  NSObject *v1;
  BTVCLinkClient *v2;
  void *v3;
  int v4;
  const char *v5;

  v1 = qword_100999980;
  if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 136315138;
    v5 = "+[BTVCLinkClient btvcLinkClient]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v4, 0xCu);
  }
  v2 = objc_alloc_init(BTVCLinkClient);
  v3 = (void *)qword_100991AC0;
  qword_100991AC0 = (uint64_t)v2;

}

void sub_1002C6798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_1002C690C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_1002C6B54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

id sub_1002C6B98(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "btvcBonjourLinkDidUpdateState:", *(_QWORD *)(a1 + 40));
}

void sub_1002C6DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  objc_sync_exit(v9);
  _Unwind_Resume(a1);
}

id sub_1002C6E20(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "btvcBonjourLink:didStartAdvertisingType:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1002C7040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

id sub_1002C7090(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "btvcBonjourLink:didStopAdvertisingType:withError:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

void sub_1002C727C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  objc_sync_exit(v9);
  _Unwind_Resume(a1);
}

id sub_1002C72C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "btvcBonjourLink:didDeferAdvertisingType:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1002C74E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

id sub_1002C7534(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "btvcBonjourLink:didFailToStartAdvertisingOfType:withError:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

void sub_1002C7720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  objc_sync_exit(v9);
  _Unwind_Resume(a1);
}

id sub_1002C7768(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "btvcBonjourLink:didStartScanningForType:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1002C7988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

id sub_1002C79D8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "btvcBonjourLink:didFailToStartScanningForType:WithError:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

void sub_1002C7C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, id obj)
{
  void *v14;

  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

id sub_1002C7CC4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "btvcBonjourLink:didDiscoverType:withData:fromPeer:peerInfo:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void sub_1002C7EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;

  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

id sub_1002C7F34(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "btvcBonjourLink:didLosePeer:type:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_1002C8188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
  void *v11;
  void *v12;

  objc_sync_exit(v11);
  _Unwind_Resume(a1);
}

id sub_1002C81E0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "btvcBonjourLink:didConnectToPeer:transport:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 56));
}

void sub_1002C8428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  objc_sync_exit(v12);
  _Unwind_Resume(a1);
}

id sub_1002C8480(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "btvcBonjourLink:didDisconnectFromPeer:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_1002C86F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;

  objc_sync_exit(v13);
  _Unwind_Resume(a1);
}

id sub_1002C8750(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "btvcBonjourLink:didSendData:toPeer:error:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void sub_1002C8998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;

  objc_sync_exit(v12);
  _Unwind_Resume(a1);
}

id sub_1002C89F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "btvcBonjourLink:didReceiveData:fromPeer:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

uint64_t sub_1002C8A3C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1009232C8;
  *(_QWORD *)(a1 + 8) = off_1009233C0;
  v2 = a1 + 88;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  sub_10026C3D0(a1 + 88, a1 + 8, "com.apple.BTServer.cloudpairing", 0);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  sub_10026C40C(v2);
  return a1;
}

void sub_1002C8AAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  sub_10026C408(v2);
  v4 = *(void **)(v1 + 24);
  if (v4)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_1002C8ADC(_QWORD *a1)
{
  void *v2;

  *a1 = off_1009232C8;
  a1[1] = off_1009233C0;
  a1[4] = a1[3];
  sub_10026C408((uint64_t)(a1 + 11));
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1002C8B30(_QWORD *a1)
{
  sub_1002C8ADC(a1);
  operator delete();
}

uint64_t sub_1002C8B54(uint64_t a1)
{
  NSObject *v2;
  xpc_object_t v3;
  uint8_t v5[16];

  v2 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending get master key message to cloudkit", v5, 2u);
  }
  v3 = xpc_dictionary_create(0, 0, 0);
  sub_10026C614(a1 + 88, "getMasterKey", v3, 0);
  return 1;
}

uint64_t sub_1002C8BE8(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "launchCloudPairing", v4, 2u);
  }
  sub_10026C614(a1 + 88, "Start", 0, 0);
  return 1;
}

uint64_t sub_1002C8C6C(uint64_t a1)
{
  NSObject *v2;
  xpc_object_t v3;
  uint8_t v5[16];

  v2 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "getDeviceInfoList", v5, 2u);
  }
  v3 = xpc_dictionary_create(0, 0, 0);
  sub_10026C614(a1 + 88, "getAccessoryKey", v3, 0);
  return 1;
}

void sub_1002C8D00(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  xpc_object_t v6;
  int v7;
  const char *v8;

  v4 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "logged-out";
    if (a2)
      v5 = "logged-in";
    v7 = 136446210;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Account login Status changed %{public}s", (uint8_t *)&v7, 0xCu);
  }
  v6 = xpc_dictionary_create(0, 0, 0);
  sub_10026C614(a1 + 88, "getSignInStatus", v6, 0);
}

void sub_1002C8DEC(uint64_t a1, uint64_t a2, void **a3)
{
  NSObject *v6;
  void *v7;
  uint64_t v8;
  void *__p[2];
  void *v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  void *v16;

  v6 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = a3;
    if (*((char *)a3 + 23) < 0)
      v7 = *a3;
    *(_DWORD *)buf = 67109635;
    v12 = a2;
    v13 = 2160;
    v14 = 1752392040;
    v15 = 2081;
    v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sign in status changed came from cloudkit, status = %d, loginID = %{private, mask.hash}s", buf, 0x1Cu);
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_10;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003430C(__p, *a3, (unint64_t)a3[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v10 = a3[2];
  }
  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v8 + 16))(v8, a2, __p);
  if (SHIBYTE(v10) < 0)
  {
    operator delete(__p[0]);
    if ((a2 & 1) != 0)
      return;
  }
  else
  {
LABEL_10:
    if ((a2 & 1) != 0)
      return;
  }
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
}

void sub_1002C8F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C8F5C(uint64_t a1, int a2)
{
  uint64_t result;
  BOOL v3;

  *(_BYTE *)(a1 + 80) = a2;
  result = *(_QWORD *)(a1 + 16);
  if (result)
    v3 = a2 == 0;
  else
    v3 = 1;
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t sub_1002C8F80()
{
  uint64_t v0;

  v0 = sub_10034FDA0();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 32))(v0);
}

void sub_1002C8F9C(uint64_t a1)
{
  xpc_object_t v2;

  v2 = xpc_dictionary_create(0, 0, 0);
  sub_10026C614(a1 + 88, "readOldContainer", v2, 0);
}

uint64_t sub_1002C8FDC(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;
  NSObject *v4;
  uint8_t v5[16];
  uint8_t buf[16];

  v2 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Re-upgradeToManatee, this should be called after Identity is Lost", buf, 2u);
  }
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    if (*(_OWORD *)(a1 + 48) == 0 || *(_OWORD *)(a1 + 64) == 0)
    {
      v4 = qword_1009997F8;
      if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v5 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "No Master or Hint Key Found generate new ones", v5, 2u);
      }
      sub_1002C90C8(a1);
      result = *(_QWORD *)(a1 + 16);
    }
    *(_BYTE *)(a1 + 80) = 1;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

void sub_1002C90C8(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "==============Generate New Keys=============", v3, 2u);
  }
  arc4random_buf((void *)(a1 + 48), 0x10uLL);
  arc4random_buf((void *)(a1 + 64), 0x10uLL);
}

void sub_1002C9148(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  __int128 v8;
  NSObject *v9;
  NSObject *v10;
  dispatch_time_t v11;
  _QWORD *v12;
  NSObject *v13;
  __int128 v14;
  void (***v15)(_QWORD, uint64_t, uint64_t);
  _QWORD v16[5];
  _QWORD block[5];
  _QWORD v18[5];
  uint8_t buf[4];
  _QWORD v20[3];
  __int128 v21;
  __int128 v22;

  v6 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v20[0] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received length %zu", buf, 0xCu);
  }
  v7 = *a2;
  if (v7 != 2)
  {
    v10 = qword_1009997F8;
    if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_ERROR))
      sub_1006DC1F0(v7, v10);
    v11 = dispatch_time(0, 30000000000);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1002C9490;
    v18[3] = &unk_100917378;
    v18[4] = a1;
    v12 = v18;
    goto LABEL_13;
  }
  if (a3 != 33)
  {
    v13 = qword_1009997F8;
    if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_ERROR))
      sub_1006DC180(a3, v13);
    v11 = dispatch_time(0, 30000000000);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002C9548;
    block[3] = &unk_100917378;
    block[4] = a1;
    v12 = block;
    goto LABEL_13;
  }
  v8 = *(_OWORD *)(a2 + 1);
  v21 = *(_OWORD *)(a2 + 17);
  v22 = v8;
  if (v8 == 0)
  {
    v9 = qword_1009997F8;
    if (v21 != 0)
      goto LABEL_16;
    if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_ERROR))
      sub_1006DC154();
    v11 = dispatch_time(0, 30000000000);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1002C9550;
    v16[3] = &unk_100917378;
    v16[4] = a1;
    v12 = v16;
LABEL_13:
    dispatch_after(v11, (dispatch_queue_t)&_dispatch_main_q, v12);
    return;
  }
  v9 = qword_1009997F8;
LABEL_16:
  v14 = v21;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 64) = v14;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68157954;
    LODWORD(v20[0]) = 16;
    WORD2(v20[0]) = 2096;
    *(_QWORD *)((char *)v20 + 6) = a1 + 48;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Acc Master Key:%.16P", buf, 0x12u);
    v9 = qword_1009997F8;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68157954;
    LODWORD(v20[0]) = 16;
    WORD2(v20[0]) = 2096;
    *(_QWORD *)((char *)v20 + 6) = a1 + 64;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Acc Master Hint:%.16P", buf, 0x12u);
  }
  v15 = *(void (****)(_QWORD, uint64_t, uint64_t))(a1 + 16);
  if (v15)
    (**v15)(v15, a1 + 48, a1 + 64);
}

void sub_1002C9490(uint64_t a1)
{
  sub_1002C9498(*(_QWORD *)(a1 + 32));
}

void sub_1002C9498(uint64_t a1)
{
  xpc_object_t v2;
  __int128 v3;
  char bytes;
  __int128 v5;
  __int128 v6;

  v2 = xpc_dictionary_create(0, 0, 0);
  bytes = 2;
  sub_1002C90C8(a1);
  v3 = *(_OWORD *)(a1 + 64);
  v5 = *(_OWORD *)(a1 + 48);
  v6 = v3;
  xpc_dictionary_set_data(v2, "kMasterKeyBlob", &bytes, 0x21uLL);
  sub_10026C614(a1 + 88, "writeMasterKey", v2, 0);
}

void sub_1002C9548(uint64_t a1)
{
  sub_1002C9498(*(_QWORD *)(a1 + 32));
}

void sub_1002C9550(uint64_t a1)
{
  sub_1002C9498(*(_QWORD *)(a1 + 32));
}

void sub_1002C9558(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD block[5];

  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_ERROR))
    sub_1006DC264();
  v2 = dispatch_time(0, 30000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002C95F8;
  block[3] = &unk_100917378;
  block[4] = a1;
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_1002C95F8(uint64_t a1)
{
  sub_1002C9498(*(_QWORD *)(a1 + 32));
}

void sub_1002C9600(_QWORD *a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD v12[2];

  if (a2 && a3 > 1)
  {
    v6 = a2[1];
    v7 = v6 | (*a2 << 8);
    v8 = qword_1009997F8;
    if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
    {
      v12[0] = 67109120;
      v12[1] = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received Device info for %d devices", (uint8_t *)v12, 8u);
    }
    if (a3 - 2 >= 152 * (unint64_t)v7)
    {
      a1[4] = a1[3];
      if (v7)
      {
        v9 = malloc_type_malloc(152 * v7, 0x10000401CC6BE04uLL);
        memcpy(v9, a2 + 2, 152 * v7);
        v10 = a1[2];
        if (v10)
          (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v10 + 8))(v10, v9, v6);
        if (v9)
          free(v9);
      }
      else
      {
        v11 = a1[2];
        if (v11)
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 8))(v11, 0, 0);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_ERROR))
    {
      sub_1006DC2BC();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_ERROR))
  {
    sub_1006DC290();
  }
}

uint64_t sub_1002C97BC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t result;
  int v7;
  const char *v8;

  v4 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "not reachable";
    if ((_DWORD)a2)
      v5 = "reachable";
    v7 = 136446210;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "reachability Status is %{public}s", (uint8_t *)&v7, 0xCu);
  }
  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, a2);
  return result;
}

uint64_t sub_1002C9898(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t result;
  int v7;
  const char *v8;

  v4 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "fail";
    if ((_DWORD)a2)
      v5 = "success";
    v7 = 136446210;
    v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device info uploaded status from cloudkit with status = %{public}s", (uint8_t *)&v7, 0xCu);
  }
  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a2);
  return result;
}

uint64_t sub_1002C9974(uint64_t a1, uint64_t a2, unsigned int a3)
{
  NSObject *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  size_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v49[9];
  uint64_t v50;

  v6 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v49[0]) = 67109120;
    DWORD1(v49[0]) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Upload Magic pairing device info to cloud for %d devices", (uint8_t *)v49, 8u);
  }
  v7 = *(char **)(a1 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  if (a3)
  {
    v8 = 0;
    v9 = (_QWORD *)(a1 + 40);
    v10 = a3;
    do
    {
      v11 = *(char **)(a1 + 24);
      if (v11 != v7)
      {
        v12 = 0;
        v13 = a2 + 152 * v8;
        while (1)
        {
          v14 = &v11[v12];
          v49[6] = *(_OWORD *)&v11[v12 + 96];
          v49[7] = *(_OWORD *)&v11[v12 + 112];
          v49[8] = *(_OWORD *)&v11[v12 + 128];
          v50 = *(_QWORD *)&v11[v12 + 144];
          v49[2] = *(_OWORD *)&v11[v12 + 32];
          v49[3] = *(_OWORD *)&v11[v12 + 48];
          v49[4] = *(_OWORD *)&v11[v12 + 64];
          v49[5] = *(_OWORD *)&v11[v12 + 80];
          v49[0] = *(_OWORD *)&v11[v12];
          v49[1] = *(_OWORD *)&v11[v12 + 16];
          if (LODWORD(v49[0]) == *(_DWORD *)v13 && WORD2(v49[0]) == *(unsigned __int16 *)(v13 + 4))
            break;
          v12 += 152;
          if (&v11[v12] == v7)
            goto LABEL_16;
        }
        v16 = v7 - (v14 + 152);
        if (v16)
          memmove(&v11[v12], v14 + 152, v16);
        v7 = &v14[v16];
        *(_QWORD *)(a1 + 32) = v7;
      }
LABEL_16:
      v17 = a2 + 152 * v8;
      if ((unint64_t)v7 >= *v9)
      {
        v25 = *(_QWORD *)(a1 + 24);
        v26 = 0x86BCA1AF286BCA1BLL * ((uint64_t)&v7[-v25] >> 3);
        v27 = v26 + 1;
        if (v26 + 1 > 0x1AF286BCA1AF286)
          abort();
        if (0xD79435E50D79436 * ((*v9 - v25) >> 3) > v27)
          v27 = 0xD79435E50D79436 * ((*v9 - v25) >> 3);
        if (0x86BCA1AF286BCA1BLL * ((*v9 - v25) >> 3) >= 0xD79435E50D7943)
          v28 = 0x1AF286BCA1AF286;
        else
          v28 = v27;
        if (v28)
          v29 = (char *)sub_1002CB804(a1 + 40, v28);
        else
          v29 = 0;
        v30 = &v29[152 * v26];
        v31 = *(_OWORD *)(v17 + 16);
        *(_OWORD *)v30 = *(_OWORD *)v17;
        *((_OWORD *)v30 + 1) = v31;
        v32 = *(_OWORD *)(v17 + 32);
        v33 = *(_OWORD *)(v17 + 48);
        v34 = *(_OWORD *)(v17 + 80);
        *((_OWORD *)v30 + 4) = *(_OWORD *)(v17 + 64);
        *((_OWORD *)v30 + 5) = v34;
        *((_OWORD *)v30 + 2) = v32;
        *((_OWORD *)v30 + 3) = v33;
        v35 = *(_OWORD *)(v17 + 96);
        v36 = *(_OWORD *)(v17 + 112);
        v37 = *(_OWORD *)(v17 + 128);
        *((_QWORD *)v30 + 18) = *(_QWORD *)(v17 + 144);
        *((_OWORD *)v30 + 7) = v36;
        *((_OWORD *)v30 + 8) = v37;
        *((_OWORD *)v30 + 6) = v35;
        v39 = *(char **)(a1 + 24);
        v38 = *(char **)(a1 + 32);
        v40 = v30;
        if (v38 != v39)
        {
          do
          {
            v41 = *(_OWORD *)(v38 - 152);
            *(_OWORD *)(v40 - 136) = *(_OWORD *)(v38 - 136);
            *(_OWORD *)(v40 - 152) = v41;
            v42 = *(_OWORD *)(v38 - 120);
            v43 = *(_OWORD *)(v38 - 104);
            v44 = *(_OWORD *)(v38 - 88);
            *(_OWORD *)(v40 - 72) = *(_OWORD *)(v38 - 72);
            *(_OWORD *)(v40 - 88) = v44;
            *(_OWORD *)(v40 - 104) = v43;
            *(_OWORD *)(v40 - 120) = v42;
            v45 = *(_OWORD *)(v38 - 56);
            v46 = *(_OWORD *)(v38 - 40);
            v47 = *(_OWORD *)(v38 - 24);
            *((_QWORD *)v40 - 1) = *((_QWORD *)v38 - 1);
            *(_OWORD *)(v40 - 24) = v47;
            *(_OWORD *)(v40 - 40) = v46;
            *(_OWORD *)(v40 - 56) = v45;
            v40 -= 152;
            v38 -= 152;
          }
          while (v38 != v39);
          v38 = *(char **)(a1 + 24);
        }
        v7 = v30 + 152;
        *(_QWORD *)(a1 + 24) = v40;
        *(_QWORD *)(a1 + 32) = v30 + 152;
        *(_QWORD *)(a1 + 40) = &v29[152 * v28];
        if (v38)
          operator delete(v38);
      }
      else
      {
        v18 = *(_OWORD *)(v17 + 16);
        *(_OWORD *)v7 = *(_OWORD *)v17;
        *((_OWORD *)v7 + 1) = v18;
        v19 = *(_OWORD *)(v17 + 32);
        v20 = *(_OWORD *)(v17 + 48);
        v21 = *(_OWORD *)(v17 + 80);
        *((_OWORD *)v7 + 4) = *(_OWORD *)(v17 + 64);
        *((_OWORD *)v7 + 5) = v21;
        *((_OWORD *)v7 + 2) = v19;
        *((_OWORD *)v7 + 3) = v20;
        v22 = *(_OWORD *)(v17 + 96);
        v23 = *(_OWORD *)(v17 + 112);
        v24 = *(_OWORD *)(v17 + 128);
        *((_QWORD *)v7 + 18) = *(_QWORD *)(v17 + 144);
        *((_OWORD *)v7 + 7) = v23;
        *((_OWORD *)v7 + 8) = v24;
        *((_OWORD *)v7 + 6) = v22;
        v7 += 152;
      }
      *(_QWORD *)(a1 + 32) = v7;
      ++v8;
    }
    while (v8 != v10);
  }
  sub_1002C9CC8((_DWORD *)a1);
  return 1;
}

void sub_1002C9CC8(_DWORD *a1)
{
  xpc_object_t v2;
  size_t v3;
  _BYTE *v4;
  NSObject *v5;
  unint64_t v6;
  char *v7;
  int v8;
  char *v9;
  _DWORD v10[2];
  __int16 v11;
  unint64_t v12;

  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = ((a1[8] - a1[6]) | 2u) & 0xFFFALL;
  v4 = malloc_type_malloc(v3, 0x42774671uLL);
  *v4 = (unsigned __int16)(-13797 * ((a1[8] - a1[6]) >> 3)) >> 8;
  v4[1] = 27 * ((a1[8] - a1[6]) >> 3);
  (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 128))(a1);
  v5 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*((_QWORD *)a1 + 4) - *((_QWORD *)a1 + 3)) >> 3);
    v10[0] = 67109376;
    v10[1] = v3 - 2;
    v11 = 2048;
    v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Size deviceinfo Blob is %d for %lu of devices", (uint8_t *)v10, 0x12u);
  }
  v7 = (char *)*((_QWORD *)a1 + 3);
  if (v7 != *((char **)a1 + 4))
  {
    v8 = 2;
    do
    {
      memmove(&v4[(unsigned __int16)v8], v7, 0x98uLL);
      v8 += 152;
      v7 += 152;
    }
    while (v7 != *((char **)a1 + 4));
  }
  xpc_dictionary_set_data(v2, "kDeviceInfoBlob", v4, v3);
  if (*((_QWORD *)a1 + 4) == *((_QWORD *)a1 + 3))
    v9 = "deleteAllAccessories";
  else
    v9 = "writeAccessoryKey";
  sub_10026C614((uint64_t)(a1 + 22), v9, v2, 0);
  free(v4);
}

void sub_1002C9EB4(uint64_t a1, void **a2, void **a3)
{
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *__p[2];
  void *v11;
  void *__dst[2];
  void *v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  void *v17;

  v6 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = a2;
    if (*((char *)a2 + 23) < 0)
      v7 = *a2;
    v8 = a3;
    if (*((char *)a3 + 23) < 0)
      v8 = *a3;
    *(_DWORD *)buf = 136315394;
    v15 = v7;
    v16 = 2080;
    v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Update local device %s with nickname %s", buf, 0x16u);
  }
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_10003430C(__dst, *a2, (unint64_t)a2[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a2;
      v13 = a2[2];
    }
    if (*((char *)a3 + 23) < 0)
    {
      sub_10003430C(__p, *a3, (unint64_t)a3[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      v11 = a3[2];
    }
    (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v9 + 48))(v9, __dst, __p);
    if (SHIBYTE(v11) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v13) < 0)
      operator delete(__dst[0]);
  }
}

void sub_1002CA020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002CA05C(uint64_t a1, void **a2)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  void *__p[2];
  void *v8;
  uint8_t buf[4];
  void *v10;

  v4 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a2;
    if (*((char *)a2 + 23) < 0)
      v5 = *a2;
    *(_DWORD *)buf = 136315138;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Remove nickname for local device %s", buf, 0xCu);
  }
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_10003430C(__p, *a2, (unint64_t)a2[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      v8 = a2[2];
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 56))(v6, __p);
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
}

void sub_1002CA16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void sub_1002CA190(uint64_t a1, unsigned __int16 *a2, unint64_t a3)
{
  unsigned int v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;
  _BOOL4 v8;
  int v9;
  unsigned int v10;
  __int16 v11;
  unsigned int v12;

  if (a2 && a3 > 1)
  {
    v4 = __rev16(*a2);
    v5 = (27 * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3)) | ((0x86BCA1AF286BCA1BLL
                                                                                                 * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3)) >> 8);
    v6 = qword_1009997F8;
    if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 67109376;
      v10 = (unsigned __int16)v5;
      v11 = 1024;
      v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "localDevice %d devices cloud numDevices %d", (uint8_t *)&v9, 0xEu);
    }
    v7 = qword_1009997F8;
    v8 = os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT);
    if (v4 == (unsigned __int16)v5)
    {
      if (v8)
      {
        v9 = 67109120;
        v10 = v4;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received Device info for %d devices matches what we have locally", (uint8_t *)&v9, 8u);
      }
    }
    else
    {
      if (v8)
      {
        v9 = 67109120;
        v10 = v4;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received Device info for %d devices does not match what we have so write back to cloud", (uint8_t *)&v9, 8u);
      }
      sub_1002C9CC8((_DWORD *)a1);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_ERROR))
  {
    sub_1006DC290();
  }
}

uint64_t sub_1002CA348()
{
  return 1;
}

uint64_t sub_1002CA350()
{
  return 1;
}

uint64_t sub_1002CA358(_QWORD *a1, uint64_t a2)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  uint64_t v11;
  int v14;
  uint64_t v15;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_1002CA488, CFSTR("com.apple.bluetooth.cloudpairing.fetch"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  if (a2)
    v5 = a1[2] == 0;
  else
    v5 = 0;
  v6 = v5;
  if (v5)
  {
    a1[2] = a2;
    v7 = qword_1009997F8;
    if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 134217984;
      v15 = a2;
      v8 = "Registered listener = %p";
      v9 = v7;
      v10 = 12;
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v14, v10);
    }
  }
  else
  {
    v11 = qword_1009997F8;
    if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14) = 0;
      v8 = "failed to registe fListener";
      v9 = v11;
      v10 = 2;
      goto LABEL_13;
    }
  }
  return v6;
}

void sub_1002CA488(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  xpc_object_t v4;
  uint8_t v5[16];

  v3 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received notification for cloudpairing push\n", v5, 2u);
  }
  v4 = xpc_dictionary_create(0, 0, 0);
  sub_10026C614(a2 + 88, "getAccessoryKey", v4, 0);
}

BOOL sub_1002CA518(_QWORD *a1, uint64_t a2)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v5;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, CFSTR("com.apple.bluetooth.cloudpairing.fetch"), 0);
  v5 = a1[2];
  if (v5 == a2)
    a1[2] = 0;
  return v5 == a2;
}

void sub_1002CA568(uint64_t a1)
{
  _QWORD v1[5];

  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_1002CA5C0;
  v1[3] = &unk_100917378;
  v1[4] = a1;
  sub_10026C4B8(a1 + 88, v1);
}

uint64_t sub_1002CA5C0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 216))(result);
  return result;
}

void sub_1002CA5D8(uint64_t a1)
{
  NSObject *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint8_t v14[4];
  __int128 v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[16];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[4];
  __int128 v27;
  uint64_t v28;

  v2 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "==============Start Dump MagicPairing structure in cloud=============", buf, 2u);
    v2 = qword_1009997F8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Number of devices in list %lu", buf, 0xCu);
  }
  v4 = sub_100027F68();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4) & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 24);
    for (i = qword_1009997F8; v5 != *(_QWORD *)(a1 + 32); v5 += 152)
    {
      v7 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)buf = *(_OWORD *)v5;
      v23 = v7;
      v8 = *(_OWORD *)(v5 + 32);
      v9 = *(_OWORD *)(v5 + 48);
      v10 = *(_OWORD *)(v5 + 80);
      v26[0] = *(_OWORD *)(v5 + 64);
      v26[1] = v10;
      v24 = v8;
      v25 = v9;
      v11 = *(_OWORD *)(v5 + 96);
      v12 = *(_OWORD *)(v5 + 112);
      v13 = *(_OWORD *)(v5 + 128);
      v28 = *(_QWORD *)(v5 + 144);
      v26[3] = v12;
      v27 = v13;
      v26[2] = v11;
      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v14 = 67110400;
        LODWORD(v15) = buf[0];
        WORD2(v15) = 1024;
        *(_DWORD *)((char *)&v15 + 6) = buf[1];
        WORD5(v15) = 1024;
        HIDWORD(v15) = buf[2];
        v16 = 1024;
        v17 = buf[3];
        v18 = 1024;
        v19 = buf[4];
        v20 = 1024;
        v21 = buf[5];
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device Address: %02x-%02x-%02x-%02x-%02x-%02x", v14, 0x26u);
        i = qword_1009997F8;
      }
      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v14 = 136315138;
        *(_QWORD *)&v15 = (char *)v26 + 10;
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device Name : %s", v14, 0xCu);
        i = qword_1009997F8;
      }
      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v14 = 67109120;
        LODWORD(v15) = *(_DWORD *)((char *)&v24 + 6);
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device Ratchet %x", v14, 8u);
        i = qword_1009997F8;
      }
      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v14 = 67109120;
        LODWORD(v15) = *(_DWORD *)((char *)&v27 + 10);
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device supported services %x", v14, 8u);
        i = qword_1009997F8;
      }
      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v14 = 68157954;
        LODWORD(v15) = 16;
        WORD2(v15) = 2096;
        *(_QWORD *)((char *)&v15 + 6) = (char *)&v24 + 10;
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device IRK: %.16P", v14, 0x12u);
        i = qword_1009997F8;
      }
      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v14 = 68157954;
        LODWORD(v15) = 16;
        WORD2(v15) = 2096;
        *(_QWORD *)((char *)&v15 + 6) = (char *)&v25 + 10;
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device EncKey:%.16P", v14, 0x12u);
        i = qword_1009997F8;
      }
      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v14 = 68157954;
        LODWORD(v15) = 16;
        WORD2(v15) = 2096;
        *(_QWORD *)((char *)&v15 + 6) = (char *)&v23 + 6;
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device Hint:%.16P", v14, 0x12u);
        i = qword_1009997F8;
      }
      if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v14 = 68157954;
        LODWORD(v15) = 16;
        WORD2(v15) = 2096;
        *(_QWORD *)((char *)&v15 + 6) = &buf[6];
        _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "Device AccKey:%.16P", v14, 0x12u);
        i = qword_1009997F8;
      }
    }
  }
  else
  {
    i = qword_1009997F8;
  }
  if (os_log_type_enabled(i, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, i, OS_LOG_TYPE_DEFAULT, "==============End Dump MagicPairing structure in cloud=============", buf, 2u);
  }
}

void sub_1002CAA74(uint64_t a1)
{
  NSObject *v2;
  dispatch_time_t v3;
  _QWORD block[5];
  uint8_t buf[16];

  v2 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Fetching Account status from Cloud pairing", buf, 2u);
  }
  v3 = dispatch_time(0, 30000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1002CAB30;
  block[3] = &unk_100917378;
  block[4] = a1;
  dispatch_after(v3, (dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_1002CAB30(uint64_t a1)
{
  uint64_t v1;
  xpc_object_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = xpc_dictionary_create(0, 0, 0);
  sub_10026C614(v1 + 88, "getSignInStatus", v2, 0);
}

void sub_1002CAB70(uint64_t a1, uint64_t a2, unsigned int a3, _OWORD *a4, _OWORD *a5)
{
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  size_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  char *v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  NSObject *v54;
  size_t v55;
  _BYTE *v56;
  NSObject *v57;
  unint64_t v58;
  char *v59;
  int v60;
  __int128 v61;
  _OWORD *v62;
  _OWORD *v64;
  xpc_object_t xdict;
  _BYTE buf[48];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  if (*a4 == 0 || *a5 == 0)
  {
    v54 = qword_1009997F8;
    if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "upgradeDeviceToManatee Empty Master or Hint Key", buf, 2u);
      v54 = qword_1009997F8;
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68157954;
      *(_DWORD *)&buf[4] = 16;
      *(_WORD *)&buf[8] = 2096;
      *(_QWORD *)&buf[10] = a4;
      _os_log_error_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "upgradeDeviceToManatee Acc Master Key:%.16P", buf, 0x12u);
      v54 = qword_1009997F8;
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      sub_1006DC31C((uint64_t)a5, v54);
  }
  else
  {
    v8 = a1 + 48;
    *(_OWORD *)(a1 + 48) = *a4;
    v64 = (_OWORD *)(a1 + 64);
    *(_OWORD *)(a1 + 64) = *a5;
    v9 = qword_1009997F8;
    v62 = (_OWORD *)(a1 + 48);
    if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      *(_DWORD *)&buf[4] = 16;
      *(_WORD *)&buf[8] = 2096;
      *(_QWORD *)&buf[10] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "upgradeDeviceToManatee Acc Master Key:%.16P", buf, 0x12u);
      v9 = qword_1009997F8;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68157954;
      *(_DWORD *)&buf[4] = 16;
      *(_WORD *)&buf[8] = 2096;
      *(_QWORD *)&buf[10] = v64;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "upgradeDeviceToManatee Acc Master Hint:%.16P", buf, 0x12u);
    }
    xdict = xpc_dictionary_create(0, 0, 0);
    v10 = qword_1009997F8;
    if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "upgradeDeviceToManatee Upload Magic pairing device info to cloud for %d devices", buf, 8u);
    }
    v11 = *(char **)(a1 + 24);
    *(_QWORD *)(a1 + 32) = v11;
    if (a3)
    {
      v12 = 0;
      v13 = (_QWORD *)(a1 + 40);
      v14 = a3;
      do
      {
        v15 = *(char **)(a1 + 24);
        if (v15 != v11)
        {
          v16 = 0;
          v17 = a2 + 152 * v12;
          while (1)
          {
            v18 = &v15[v16];
            v71 = *(_OWORD *)&v15[v16 + 96];
            v72 = *(_OWORD *)&v15[v16 + 112];
            v73 = *(_OWORD *)&v15[v16 + 128];
            v74 = *(_QWORD *)&v15[v16 + 144];
            *(_OWORD *)&buf[32] = *(_OWORD *)&v15[v16 + 32];
            v68 = *(_OWORD *)&v15[v16 + 48];
            v69 = *(_OWORD *)&v15[v16 + 64];
            v70 = *(_OWORD *)&v15[v16 + 80];
            *(_OWORD *)buf = *(_OWORD *)&v15[v16];
            *(_OWORD *)&buf[16] = *(_OWORD *)&v15[v16 + 16];
            if (*(_DWORD *)buf == *(_DWORD *)v17 && *(unsigned __int16 *)&buf[4] == *(unsigned __int16 *)(v17 + 4))
              break;
            v16 += 152;
            if (&v15[v16] == v11)
              goto LABEL_22;
          }
          v20 = v11 - (v18 + 152);
          if (v20)
            memmove(&v15[v16], v18 + 152, v20);
          v11 = &v18[v20];
          *(_QWORD *)(a1 + 32) = v11;
        }
LABEL_22:
        v21 = a2 + 152 * v12;
        if ((unint64_t)v11 >= *v13)
        {
          v29 = *(_QWORD *)(a1 + 24);
          v30 = 0x86BCA1AF286BCA1BLL * ((uint64_t)&v11[-v29] >> 3);
          v31 = v30 + 1;
          if (v30 + 1 > 0x1AF286BCA1AF286)
            abort();
          if (0xD79435E50D79436 * ((*v13 - v29) >> 3) > v31)
            v31 = 0xD79435E50D79436 * ((*v13 - v29) >> 3);
          if (0x86BCA1AF286BCA1BLL * ((*v13 - v29) >> 3) >= 0xD79435E50D7943)
            v32 = 0x1AF286BCA1AF286;
          else
            v32 = v31;
          if (v32)
            v33 = (char *)sub_1002CB804(a1 + 40, v32);
          else
            v33 = 0;
          v34 = &v33[152 * v30];
          v35 = *(_OWORD *)(v21 + 16);
          *(_OWORD *)v34 = *(_OWORD *)v21;
          *((_OWORD *)v34 + 1) = v35;
          v36 = *(_OWORD *)(v21 + 32);
          v37 = *(_OWORD *)(v21 + 48);
          v38 = *(_OWORD *)(v21 + 80);
          *((_OWORD *)v34 + 4) = *(_OWORD *)(v21 + 64);
          *((_OWORD *)v34 + 5) = v38;
          *((_OWORD *)v34 + 2) = v36;
          *((_OWORD *)v34 + 3) = v37;
          v39 = *(_OWORD *)(v21 + 96);
          v40 = *(_OWORD *)(v21 + 112);
          v41 = *(_OWORD *)(v21 + 128);
          *((_QWORD *)v34 + 18) = *(_QWORD *)(v21 + 144);
          *((_OWORD *)v34 + 7) = v40;
          *((_OWORD *)v34 + 8) = v41;
          *((_OWORD *)v34 + 6) = v39;
          v43 = *(char **)(a1 + 24);
          v42 = *(char **)(a1 + 32);
          v44 = v34;
          if (v42 != v43)
          {
            do
            {
              v45 = *(_OWORD *)(v42 - 152);
              *(_OWORD *)(v44 - 136) = *(_OWORD *)(v42 - 136);
              *(_OWORD *)(v44 - 152) = v45;
              v46 = *(_OWORD *)(v42 - 120);
              v47 = *(_OWORD *)(v42 - 104);
              v48 = *(_OWORD *)(v42 - 88);
              *(_OWORD *)(v44 - 72) = *(_OWORD *)(v42 - 72);
              *(_OWORD *)(v44 - 88) = v48;
              *(_OWORD *)(v44 - 104) = v47;
              *(_OWORD *)(v44 - 120) = v46;
              v49 = *(_OWORD *)(v42 - 56);
              v50 = *(_OWORD *)(v42 - 40);
              v51 = *(_OWORD *)(v42 - 24);
              *((_QWORD *)v44 - 1) = *((_QWORD *)v42 - 1);
              *(_OWORD *)(v44 - 24) = v51;
              *(_OWORD *)(v44 - 40) = v50;
              *(_OWORD *)(v44 - 56) = v49;
              v44 -= 152;
              v42 -= 152;
            }
            while (v42 != v43);
            v42 = *(char **)(a1 + 24);
          }
          v11 = v34 + 152;
          *(_QWORD *)(a1 + 24) = v44;
          *(_QWORD *)(a1 + 32) = v34 + 152;
          *(_QWORD *)(a1 + 40) = &v33[152 * v32];
          if (v42)
            operator delete(v42);
        }
        else
        {
          v22 = *(_OWORD *)(v21 + 16);
          *(_OWORD *)v11 = *(_OWORD *)v21;
          *((_OWORD *)v11 + 1) = v22;
          v23 = *(_OWORD *)(v21 + 32);
          v24 = *(_OWORD *)(v21 + 48);
          v25 = *(_OWORD *)(v21 + 80);
          *((_OWORD *)v11 + 4) = *(_OWORD *)(v21 + 64);
          *((_OWORD *)v11 + 5) = v25;
          *((_OWORD *)v11 + 2) = v23;
          *((_OWORD *)v11 + 3) = v24;
          v26 = *(_OWORD *)(v21 + 96);
          v27 = *(_OWORD *)(v21 + 112);
          v28 = *(_OWORD *)(v21 + 128);
          *((_QWORD *)v11 + 18) = *(_QWORD *)(v21 + 144);
          *((_OWORD *)v11 + 7) = v27;
          *((_OWORD *)v11 + 8) = v28;
          *((_OWORD *)v11 + 6) = v26;
          v11 += 152;
        }
        *(_QWORD *)(a1 + 32) = v11;
        ++v12;
      }
      while (v12 != v14);
      v52 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      LOWORD(v52) = (_WORD)v11;
    }
    v55 = ((_WORD)v11 - (_WORD)v52) & 0xFFF8 | 2u;
    v56 = malloc_type_malloc(v55, 0x86654511uLL);
    *v56 = (unsigned __int16)(-13797 * ((*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 24)) >> 3)) >> 8;
    v56[1] = 27 * ((*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 24)) >> 3);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    v57 = qword_1009997F8;
    if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
    {
      v58 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v55 - 2;
      *(_WORD *)&buf[8] = 2048;
      *(_QWORD *)&buf[10] = v58;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "upgradeDeviceToManatee Size deviceinfo Blob is %d for %lu of devices", buf, 0x12u);
    }
    v59 = *(char **)(a1 + 24);
    if (v59 != *(char **)(a1 + 32))
    {
      v60 = 2;
      do
      {
        memmove(&v56[(unsigned __int16)v60], v59, 0x98uLL);
        v60 += 152;
        v59 += 152;
      }
      while (v59 != *(char **)(a1 + 32));
    }
    xpc_dictionary_set_data(xdict, "kDeviceInfoBlob", v56, v55);
    buf[0] = 2;
    v61 = *a4;
    *v62 = *a4;
    *v64 = *a5;
    *(_OWORD *)&buf[1] = v61;
    *(_OWORD *)&buf[17] = *a5;
    xpc_dictionary_set_data(xdict, "kMasterKeyBlob", buf, 0x21uLL);
    if (*(_BYTE *)(a1 + 80))
      sub_10026C614(a1 + 88, "upgradeToManatee", xdict, 0);
    free(v56);
  }
}

void sub_1002CB240(_QWORD *a1, const char *a2, void *a3)
{
  NSObject *v6;
  _BOOL8 v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  xpc_object_t value;
  size_t length;
  NSObject *v13;
  xpc_object_t v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  unsigned int v18;
  NSObject *v19;
  unint64_t v20;
  unint64_t v21;
  dispatch_time_t v22;
  _BOOL8 v23;
  uint64_t v24;
  _BOOL8 v25;
  const char *string;
  NSObject *v27;
  uint64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *__p[2];
  char v34;
  __int16 buffer;
  _QWORD block[5];
  uint8_t buf[40];

  v6 = qword_1009997F8;
  if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received %{public}s message from CloudKit", buf, 0xCu);
  }
  if (!strcmp(a2, "MasterKeysAvailable"))
  {
    value = xpc_dictionary_get_value(a3, "kMasterKeyBlob");
    length = xpc_data_get_length(value);
    v13 = qword_1009997F8;
    if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = length;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Client Received length %zu", buf, 0xCu);
    }
    if (value && length == 33)
    {
      memset(buf, 0, 33);
      if (xpc_data_get_bytes(value, buf, 0, 0x21uLL) == 33)
      {
        (*(void (**)(_QWORD *, uint8_t *, uint64_t))(*a1 + 88))(a1, buf, 33);
      }
      else if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_ERROR))
      {
        sub_1006DC3C8();
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_ERROR))
        sub_1006DC39C();
      v22 = dispatch_time(0, 30000000000);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1002CB7EC;
      block[3] = &unk_100917378;
      block[4] = a1;
      dispatch_after(v22, (dispatch_queue_t)&_dispatch_main_q, block);
    }
  }
  else if (!strcmp(a2, "DeviceInfoAvailable"))
  {
    v14 = xpc_dictionary_get_value(a3, "kDeviceInfoBlob");
    v15 = xpc_data_get_length(v14);
    if (v14 && (v16 = v15, v15 > 1))
    {
      buffer = 0;
      if (xpc_data_get_bytes(v14, &buffer, 0, 2uLL) == 2)
      {
        v17 = HIBYTE(buffer);
        v18 = HIBYTE(buffer) | (buffer << 8);
        v19 = qword_1009997F8;
        if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v18;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "XPC Received Device info for %d devices", buf, 8u);
        }
        v20 = v16 - 2;
        v21 = 152 * v18;
        if (v20 >= v21)
        {
          a1[4] = a1[3];
          if (v18)
          {
            v30 = malloc_type_malloc(152 * v18, 0x10000401CC6BE04uLL);
            if (xpc_data_get_bytes(v14, v30, 2uLL, 152 * v18) != v21)
              goto LABEL_50;
            v31 = a1[2];
            if (v31)
              (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v31 + 8))(v31, v30, v17);
            if (v30)
LABEL_50:
              free(v30);
          }
          else
          {
            v32 = a1[2];
            if (v32)
              (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v32 + 8))(v32, 0, 0);
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_ERROR))
        {
          sub_1006DC3F4();
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_ERROR))
    {
      sub_1006DC290();
    }
  }
  else if (!strcmp(a2, "OnlineStatusChanged"))
  {
    v23 = xpc_dictionary_get_BOOL(a3, "kOnlineStatus");
    v24 = a1[2];
    if (v24)
      (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v24 + 24))(v24, v23);
  }
  else if (!strcmp(a2, "SignInStatusChanged"))
  {
    v25 = xpc_dictionary_get_BOOL(a3, "kSignInStatus");
    string = xpc_dictionary_get_string(a3, "kSignInAppleID");
    v27 = qword_1009997F8;
    if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109635;
      *(_DWORD *)&buf[4] = v25;
      *(_WORD *)&buf[8] = 2160;
      *(_QWORD *)&buf[10] = 1752392040;
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = string;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Sign in status changed came from cloudkit, status = %d with loginID: %{private, mask.hash}s", buf, 0x1Cu);
    }
    v28 = a1[2];
    if (v28)
    {
      v29 = string ? (char *)string : "";
      sub_100091AE8(__p, v29);
      (*(void (**)(uint64_t, _BOOL8, void **))(*(_QWORD *)v28 + 16))(v28, v25, __p);
      if (v34 < 0)
        operator delete(__p[0]);
    }
  }
  else if (!strcmp(a2, "DeviceInfoUploadStatus"))
  {
    v7 = xpc_dictionary_get_BOOL(a3, "kUploadStatus");
    v8 = qword_1009997F8;
    if (os_log_type_enabled((os_log_t)qword_1009997F8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = "fail";
      if (v7)
        v9 = "success";
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Device info uploaded status from cloudkit with status = %{public}s", buf, 0xCu);
    }
    v10 = a1[2];
    if (v10)
      (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v10 + 32))(v10, v7);
  }
}

void sub_1002CB7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002CB7EC(uint64_t a1)
{
  sub_1002C9498(*(_QWORD *)(a1 + 32));
}

void sub_1002CB7F4(uint64_t a1, const char *a2, void *a3)
{
  sub_1002CB240((_QWORD *)(a1 - 8), a2, a3);
}

void *sub_1002CB804(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287)
    sub_10007ABD4();
  return operator new(152 * a2);
}

uint64_t sub_1002CB864(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  uint64_t v11;
  char v13;
  uint8_t buf[4];
  const char *v15;

  *(_QWORD *)(a1 + 8) = &off_100923410;
  v2 = a1 + 8;
  *(_QWORD *)(a1 + 16) = &off_100923428;
  v3 = a1 + 16;
  *(_QWORD *)a1 = off_1009233E8;
  sub_1000160D0(a1 + 24);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_BYTE *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v4 = sub_100038E50();
  sub_1002CC504(v4 + 608, a1);
  v5 = sub_100038E50();
  sub_1002CC7F4(v5 + 648, v2);
  v13 = 0;
  v6 = sub_100038E50();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v6 + 104))(v6, &v13);
  if (v13)
  {
    v7 = sub_1002CBA5C();
    *(_BYTE *)(a1 + 112) = v7;
    v8 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      v9 = "disabled";
      if (v7)
        v9 = "enabled";
      *(_DWORD *)buf = 136315138;
      v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "VoiceTrigger state is initially %s", buf, 0xCu);
    }
  }
  else
  {
    v10 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device not unlocked yet, deferring VoiceTrigger read", buf, 2u);
    }
    v11 = sub_100038E50();
    sub_1002CCAE4(v11 + 448, v3);
  }
  return a1;
}

void sub_1002CBA24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD **v3;
  void **v4;
  void *v6;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 136) = v6;
    operator delete(v6);
  }
  sub_10001A82C((uint64_t)(v3 - 1), *v3);
  sub_100069BDC(v2);
  _Unwind_Resume(a1);
}

id sub_1002CBA5C()
{
  void *v0;
  id v1;

  if (!sub_1004F9548())
    return 0;
  v0 = (void *)objc_claimAutoreleasedReturnValue(+[VTPreferences sharedPreferences](VTPreferences, "sharedPreferences"));
  v1 = objc_msgSend(v0, "voiceTriggerEnabled");

  return v1;
}

void sub_1002CBAA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CBABC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD v14[2];
  char v15;
  unint64_t v16;

  v16 = a2;
  v15 = 0;
  v4 = sub_100038E50();
  v5 = 0;
  if (!(*(unsigned int (**)(uint64_t, char *))(*(_QWORD *)v4 + 136))(v4, &v15))
  {
    if (v15)
      v5 = 1;
    else
      v5 = 2;
    v14[0] = 0;
    v14[1] = 0;
    sub_10003415C((uint64_t)v14, a1 + 24);
    v8 = *(_QWORD **)(a1 + 96);
    v7 = (_QWORD *)(a1 + 96);
    v6 = v8;
    if (!v8)
      goto LABEL_16;
    v9 = v7;
    do
    {
      v10 = v6[4];
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = v6;
      else
        v12 = v6 + 1;
      if (v11)
        v9 = v6;
      v6 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 == v7 || v9[4] > a2)
LABEL_16:
      operator new();
    sub_100034234((uint64_t)v14);
  }
  return v5;
}

void sub_1002CBBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002CBBD4(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  const std::string::value_type *v6;
  _OWORD *v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  _OWORD *v11;
  BOOL v12;
  std::string __p;
  _QWORD v14[2];
  std::string v15;
  __int128 buf;
  uint64_t v17;

  memset(&v15, 0, sizeof(v15));
  v4 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "disabled";
    if (a2)
      v5 = "enabled";
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "APLSIRI support has changed to %{public}s", (uint8_t *)&buf, 0xCu);
  }
  if (a2)
    v6 = "\r\n+APLSIRI:1\r\n";
  else
    v6 = "\r\n+APLSIRI:2\r\n";
  std::string::assign(&v15, v6);
  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 24);
  buf = 0uLL;
  v17 = 0;
  sub_1002CCDD4((uint64_t *)&buf, a1 + 88);
  sub_100034264((uint64_t)v14);
  v7 = (_OWORD *)buf;
  if ((__int128 *)buf != (__int128 *)((char *)&buf + 8))
  {
    do
    {
      if (qword_10097AA40 != -1)
        dispatch_once(&qword_10097AA40, &stru_100923450);
      v8 = off_10097AA38;
      v9 = **((_QWORD **)v7 + 5);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        sub_10003430C(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
      else
        __p = v15;
      sub_1004DE2D8((uint64_t)v8, v9, (char *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v10 = (_QWORD *)*((_QWORD *)v7 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_OWORD *)*((_QWORD *)v7 + 2);
          v12 = *(_QWORD *)v11 == (_QWORD)v7;
          v7 = v11;
        }
        while (!v12);
      }
      v7 = v11;
    }
    while (v11 != (__int128 *)((char *)&buf + 8));
  }
  sub_10001A82C((uint64_t)&buf, *((_QWORD **)&buf + 1));
  sub_100034234((uint64_t)v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_1002CBDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,_QWORD *a24)
{
  sub_10001A82C((uint64_t)&a23, a24);
  sub_100034234((uint64_t)&a15);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1002CBE58(uint64_t a1)
{
  int v2;

  v2 = sub_1002CBA5C();
  sub_1002CBE80(a1, v2);
}

void sub_1002CBE80(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  _QWORD v6[4];
  char v7;
  uint8_t buf[4];
  const char *v9;

  if (*(unsigned __int8 *)(a1 + 112) != a2)
  {
    v4 = qword_100999808;
    if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
    {
      v5 = "disabled";
      if (a2)
        v5 = "enabled";
      *(_DWORD *)buf = 136315138;
      v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "VoiceTrigger status changed to %s", buf, 0xCu);
    }
    *(_BYTE *)(a1 + 112) = a2;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1002CC074;
    v6[3] = &unk_100923430;
    v7 = a2;
    sub_1002CBFB8((os_unfair_lock_s *)(a1 + 120), v6);
  }
}

void sub_1002CBF90(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = a1 - 8;
  v2 = sub_1002CBA5C();
  sub_1002CBE80(v1, v2);
}

void sub_1002CBFB8(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CC04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CC074(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_1002CC08C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 112);
}

uint64_t sub_1002CC094(uint64_t a1, unint64_t a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 24);
  v8 = *(_QWORD **)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  v6 = v8;
  if (v8)
  {
    v9 = v7;
    do
    {
      v10 = v6[4];
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = v6;
      else
        v12 = v6 + 1;
      if (v11)
        v9 = v6;
      v6 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 != v7 && v9[4] <= a2)
      *(_DWORD *)(v9[5] + 8) = a3;
  }
  return sub_100034234((uint64_t)v14);
}

uint64_t sub_1002CC124(uint64_t a1, unint64_t a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD v14[2];

  v14[0] = 0;
  v14[1] = 0;
  sub_10003415C((uint64_t)v14, a1 + 24);
  v8 = *(_QWORD **)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  v6 = v8;
  if (v8)
  {
    v9 = v7;
    do
    {
      v10 = v6[4];
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = v6;
      else
        v12 = v6 + 1;
      if (v11)
        v9 = v6;
      v6 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 != v7 && v9[4] <= a2)
      *(_DWORD *)(v9[5] + 12) = a3;
  }
  return sub_100034234((uint64_t)v14);
}

uint64_t sub_1002CC1B4(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 24);
  v6 = *(_QWORD **)(a1 + 96);
  v5 = (_QWORD *)(a1 + 96);
  v4 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = v5;
  do
  {
    v8 = v4[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v9)
      v7 = v4;
    v4 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != v5 && v7[4] <= a2)
    v11 = *(unsigned int *)(v7[5] + 8);
  else
LABEL_12:
    v11 = 0;
  sub_100034234((uint64_t)v13);
  return v11;
}

uint64_t sub_1002CC244(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 24);
  v6 = *(_QWORD **)(a1 + 96);
  v5 = (_QWORD *)(a1 + 96);
  v4 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = v5;
  do
  {
    v8 = v4[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v9)
      v7 = v4;
    v4 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != v5 && v7[4] <= a2)
    v11 = *(unsigned int *)(v7[5] + 12);
  else
LABEL_12:
    v11 = 0;
  sub_100034234((uint64_t)v13);
  return v11;
}

BOOL sub_1002CC2D4(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _BOOL8 v11;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0;
  sub_10003415C((uint64_t)v13, a1 + 24);
  v6 = *(_QWORD **)(a1 + 96);
  v5 = (_QWORD *)(a1 + 96);
  v4 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = v5;
  do
  {
    v8 = v4[4];
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = v4;
    else
      v10 = v4 + 1;
    if (v9)
      v7 = v4;
    v4 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == v5 || v7[4] > a2)
LABEL_12:
    v7 = v5;
  v11 = v7 != v5;
  sub_100034234((uint64_t)v13);
  return v11;
}

uint64_t sub_1002CC360(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 24);
  if (a2)
  {
    v6 = *(_QWORD **)(a1 + 96);
    v5 = (uint64_t *)(a1 + 96);
    v4 = v6;
    if (v6)
    {
      v7 = v5;
      do
      {
        v8 = v4[4];
        v9 = v8 >= a2;
        if (v8 >= a2)
          v10 = v4;
        else
          v10 = v4 + 1;
        if (v9)
          v7 = v4;
        v4 = (_QWORD *)*v10;
      }
      while (*v10);
      if (v7 != v5 && v7[4] <= a2)
      {
        if (v7[5])
          operator delete();
        sub_1000040CC((uint64_t **)v5 - 1, v7);
        operator delete(v7);
      }
    }
  }
  return sub_100034234((uint64_t)v12);
}

void sub_1002CC41C(uint64_t a1)
{
  int v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  int v6;
  const char *v7;

  v2 = sub_1002CBA5C();
  sub_1002CBE80(a1, v2);
  v3 = qword_100999808;
  if (os_log_type_enabled((os_log_t)qword_100999808, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 112))
      v4 = "enabled";
    else
      v4 = "disabled";
    v6 = 136315138;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Device is now unlocked, read VoiceTrigger setting as %s", (uint8_t *)&v6, 0xCu);
  }
  v5 = sub_100038E50();
  sub_1002B43D4(v5 + 448, a1 + 16);
}

void sub_1002CC4F8(uint64_t a1)
{
  sub_1002CC41C(a1 - 16);
}

void sub_1002CC504(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_1002CC5B8(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1002CC5B8(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1002CC7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002CC7F4(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_1002CC8A8(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1002CC8A8(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1002CCAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002CCAE4(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  v6 = *(char **)(a1 + 8);
  while (*(_QWORD *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      v7 = a2;
      sub_1002CCB98(a1 + 8, v6, (char *)&v7);
      sub_10007AA30(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1002CCB98(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1002CCD9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1002CCDD4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002CCE28(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1002CCE10(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10001A82C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1002CCE28(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1002CCEAC(v5, v6, v4 + 4, (_OWORD *)v4 + 2);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1002CCEAC(uint64_t **a1, _QWORD *a2, unint64_t *a3, _OWORD *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v6 = (void **)sub_1002CCF34(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_100004078(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *sub_1002CCF34(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_1002CD0DC(id a1)
{
  operator new();
}

void sub_1002CD11C()
{
  operator delete();
}

uint64_t sub_1002CD140(uint64_t result)
{
  *(_QWORD *)result = &off_100923480;
  *(_QWORD *)(result + 8) = &off_100923658;
  *(_QWORD *)(result + 16) = &off_100923678;
  *(_QWORD *)(result + 24) = &off_100923698;
  *(_QWORD *)(result + 32) = &off_1009236B8;
  *(_QWORD *)(result + 40) = &off_1009236D8;
  *(_QWORD *)(result + 48) = &off_1009236F8;
  *(_QWORD *)(result + 56) = &off_100923718;
  *(_DWORD *)(result + 208) = 0;
  *(_QWORD *)(result + 64) = &off_100923738;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 224) = 0;
  *(_QWORD *)(result + 72) = &off_100923758;
  *(_QWORD *)(result + 232) = 0;
  *(_QWORD *)(result + 240) = result;
  *(_QWORD *)(result + 80) = &off_100923778;
  *(_QWORD *)(result + 88) = &off_100923798;
  *(_DWORD *)(result + 248) = 0;
  *(_QWORD *)(result + 96) = &off_1009237B8;
  *(_QWORD *)(result + 104) = &off_1009237D8;
  *(_QWORD *)(result + 112) = &off_1009237F8;
  *(_QWORD *)(result + 120) = &off_100923818;
  *(_QWORD *)(result + 256) = 0;
  *(_QWORD *)(result + 264) = 0;
  *(_QWORD *)(result + 128) = &off_100923838;
  *(_QWORD *)(result + 136) = &off_100923858;
  *(_QWORD *)(result + 144) = &off_100923878;
  *(_QWORD *)(result + 152) = &off_100923898;
  *(_QWORD *)(result + 272) = 0;
  *(_QWORD *)(result + 280) = result + 8;
  *(_QWORD *)(result + 160) = &off_1009238B8;
  *(_QWORD *)(result + 168) = &off_1009238D8;
  *(_QWORD *)(result + 176) = &off_1009238F8;
  *(_QWORD *)(result + 184) = &off_100923918;
  *(_QWORD *)(result + 192) = &off_100923938;
  *(_DWORD *)(result + 288) = 0;
  *(_QWORD *)(result + 200) = &off_100923958;
  *(_QWORD *)(result + 296) = 0;
  *(_QWORD *)(result + 304) = 0;
  *(_QWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 320) = result + 16;
  *(_DWORD *)(result + 328) = 0;
  *(_QWORD *)(result + 336) = 0;
  *(_QWORD *)(result + 344) = 0;
  *(_QWORD *)(result + 352) = 0;
  *(_QWORD *)(result + 360) = result + 24;
  *(_DWORD *)(result + 368) = 0;
  *(_QWORD *)(result + 376) = 0;
  *(_QWORD *)(result + 384) = 0;
  *(_QWORD *)(result + 392) = 0;
  *(_QWORD *)(result + 400) = result + 32;
  *(_DWORD *)(result + 408) = 0;
  *(_QWORD *)(result + 416) = 0;
  *(_QWORD *)(result + 424) = 0;
  *(_QWORD *)(result + 432) = 0;
  *(_QWORD *)(result + 440) = result + 40;
  *(_DWORD *)(result + 448) = 0;
  *(_QWORD *)(result + 456) = 0;
  *(_QWORD *)(result + 464) = 0;
  *(_QWORD *)(result + 472) = 0;
  *(_QWORD *)(result + 480) = result + 48;
  *(_DWORD *)(result + 488) = 0;
  *(_QWORD *)(result + 496) = 0;
  *(_QWORD *)(result + 504) = 0;
  *(_QWORD *)(result + 512) = 0;
  *(_QWORD *)(result + 520) = result + 56;
  *(_DWORD *)(result + 528) = 0;
  *(_QWORD *)(result + 544) = 0;
  *(_QWORD *)(result + 536) = 0;
  *(_QWORD *)(result + 552) = 0;
  *(_QWORD *)(result + 560) = result + 64;
  *(_DWORD *)(result + 568) = 0;
  *(_QWORD *)(result + 584) = 0;
  *(_QWORD *)(result + 576) = 0;
  *(_QWORD *)(result + 592) = 0;
  *(_QWORD *)(result + 600) = result + 72;
  *(_DWORD *)(result + 608) = 0;
  *(_QWORD *)(result + 624) = 0;
  *(_QWORD *)(result + 616) = 0;
  *(_QWORD *)(result + 632) = 0;
  *(_QWORD *)(result + 640) = result + 80;
  *(_DWORD *)(result + 648) = 0;
  *(_QWORD *)(result + 664) = 0;
  *(_QWORD *)(result + 656) = 0;
  *(_QWORD *)(result + 672) = 0;
  *(_QWORD *)(result + 680) = result + 88;
  *(_DWORD *)(result + 688) = 0;
  *(_QWORD *)(result + 704) = 0;
  *(_QWORD *)(result + 696) = 0;
  *(_QWORD *)(result + 712) = 0;
  *(_QWORD *)(result + 720) = result + 96;
  *(_DWORD *)(result + 728) = 0;
  *(_QWORD *)(result + 744) = 0;
  *(_QWORD *)(result + 736) = 0;
  *(_QWORD *)(result + 752) = 0;
  *(_QWORD *)(result + 760) = result + 104;
  *(_DWORD *)(result + 768) = 0;
  *(_QWORD *)(result + 784) = 0;
  *(_QWORD *)(result + 776) = 0;
  *(_QWORD *)(result + 792) = 0;
  *(_QWORD *)(result + 800) = result + 112;
  *(_DWORD *)(result + 808) = 0;
  *(_QWORD *)(result + 824) = 0;
  *(_QWORD *)(result + 816) = 0;
  *(_QWORD *)(result + 832) = 0;
  *(_QWORD *)(result + 840) = result + 120;
  *(_DWORD *)(result + 848) = 0;
  *(_QWORD *)(result + 864) = 0;
  *(_QWORD *)(result + 856) = 0;
  *(_QWORD *)(result + 872) = 0;
  *(_QWORD *)(result + 880) = result + 128;
  *(_DWORD *)(result + 888) = 0;
  *(_QWORD *)(result + 904) = 0;
  *(_QWORD *)(result + 896) = 0;
  *(_QWORD *)(result + 912) = 0;
  *(_QWORD *)(result + 920) = result + 136;
  *(_DWORD *)(result + 928) = 0;
  *(_QWORD *)(result + 944) = 0;
  *(_QWORD *)(result + 936) = 0;
  *(_QWORD *)(result + 952) = 0;
  *(_QWORD *)(result + 960) = result + 144;
  *(_DWORD *)(result + 968) = 0;
  *(_QWORD *)(result + 984) = 0;
  *(_QWORD *)(result + 976) = 0;
  *(_QWORD *)(result + 992) = 0;
  *(_QWORD *)(result + 1000) = result + 152;
  *(_DWORD *)(result + 1008) = 0;
  *(_QWORD *)(result + 1024) = 0;
  *(_QWORD *)(result + 1016) = 0;
  *(_QWORD *)(result + 1032) = 0;
  *(_QWORD *)(result + 1040) = result + 160;
  *(_DWORD *)(result + 1048) = 0;
  *(_QWORD *)(result + 1064) = 0;
  *(_QWORD *)(result + 1056) = 0;
  *(_QWORD *)(result + 1072) = 0;
  *(_QWORD *)(result + 1080) = result + 168;
  *(_DWORD *)(result + 1088) = 0;
  *(_QWORD *)(result + 1104) = 0;
  *(_QWORD *)(result + 1096) = 0;
  *(_QWORD *)(result + 1112) = 0;
  *(_QWORD *)(result + 1120) = result + 176;
  *(_DWORD *)(result + 1128) = 0;
  *(_QWORD *)(result + 1144) = 0;
  *(_QWORD *)(result + 1136) = 0;
  *(_QWORD *)(result + 1152) = 0;
  *(_QWORD *)(result + 1160) = result + 184;
  *(_DWORD *)(result + 1168) = 0;
  *(_QWORD *)(result + 1184) = 0;
  *(_QWORD *)(result + 1176) = 0;
  *(_QWORD *)(result + 1192) = 0;
  *(_QWORD *)(result + 1200) = result + 192;
  *(_DWORD *)(result + 1208) = 0;
  *(_QWORD *)(result + 1224) = 0;
  *(_QWORD *)(result + 1216) = 0;
  *(_QWORD *)(result + 1232) = 0;
  *(_QWORD *)(result + 1240) = result + 200;
  *(_DWORD *)(result + 1248) = 0;
  return result;
}

void sub_1002CD46C(os_unfair_lock_s *a1, void **a2)
{
  NSObject *v4;
  void *v5;
  _QWORD v6[4];
  __int128 __p;
  void *v8;
  uint8_t buf[4];
  void *v10;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a2;
    if (*((char *)a2 + 23) < 0)
      v5 = *a2;
    *(_DWORD *)buf = 136315138;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Hostname has been set to \"%s\"", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  v6[2] = sub_1002CD67C;
  v6[3] = &unk_100923968;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003430C(&__p, *a2, (unint64_t)a2[1]);
  }
  else
  {
    __p = *(_OWORD *)a2;
    v8 = a2[2];
  }
  sub_1002CD5C0(a1 + 52, v6);
  if (SHIBYTE(v8) < 0)
    operator delete((void *)__p);
}

void sub_1002CD59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  _Unwind_Resume(exception_object);
}

void sub_1002CD5C0(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CD654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1002CD67C(uint64_t a1, void (***a2)(_QWORD, void **))
{
  void *__p[2];
  uint64_t v4;

  if (*(char *)(a1 + 55) < 0)
  {
    sub_10003430C(__p, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 48);
  }
  (**a2)(a2, __p);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
}

void sub_1002CD6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1002CD70C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  __int128 v3;

  result = (_QWORD *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
    return sub_10003430C(result, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  v3 = *(_OWORD *)(a2 + 32);
  result[2] = *(_QWORD *)(a2 + 48);
  *(_OWORD *)result = v3;
  return result;
}

void sub_1002CD73C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void sub_1002CD750(os_unfair_lock_s *a1, int a2, int a3, int a4)
{
  NSObject *v8;
  const char *v9;
  _QWORD v10[4];
  char v11;
  char v12;
  char v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;

  v8 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = "disabled";
    *(_DWORD *)buf = 136446722;
    if (a2)
      v9 = "enabled";
    v15 = v9;
    v16 = 1024;
    v17 = a3;
    v18 = 1024;
    v19 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Tethering is now %{public}s with %u out of %u clients connected", buf, 0x18u);
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1002CD938;
  v10[3] = &unk_100923998;
  v11 = a2;
  v12 = a3;
  v13 = a4;
  sub_1002CD87C(a1 + 62, v10);
}

void sub_1002CD87C(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CD910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CD938(unsigned __int8 *a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  return (**a2)(a2, a1[32], a1[33], a1[34]);
}

void sub_1002CD958(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  void *p_p;
  _QWORD v6[4];
  __int128 v7;
  void *__p;
  char v9;
  __int128 v10;
  uint8_t buf[4];
  void *v12;

  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = a3;
  v4 = (id)qword_1009997E8;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_100021AE4((uint64_t)&v10);
    if (v9 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136446210;
    v12 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    if (v9 < 0)
      operator delete(__p);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002CDB50;
  v6[3] = &unk_1009239B8;
  v7 = v10;
  sub_1002CDA94(a1 + 72, v6);
}

void sub_1002CDA7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002CDA94(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CDB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CDB50(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void sub_1002CDB68(os_unfair_lock_s *a1, int a2)
{
  NSObject *v4;
  _QWORD v5[4];
  char v6;
  uint8_t buf[4];
  int v8;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Airplane Mode is now %d", buf, 8u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002CDD0C;
  v5[3] = &unk_1009239D8;
  v6 = a2;
  sub_1002CDC50(a1 + 82, v5);
}

void sub_1002CDC50(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CDCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CDD0C(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002CDD24(os_unfair_lock_s *a1, int a2)
{
  NSObject *v4;
  _QWORD v5[4];
  char v6;
  uint8_t buf[4];
  int v8;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Low Power Mode is now %d", buf, 8u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002CDE0C;
  v5[3] = &unk_1009239D8;
  v6 = a2;
  sub_1002CDC50(a1 + 82, v5);
}

uint64_t sub_1002CDE0C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 8))(a2, *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_1002CDE24(os_unfair_lock_s *a1, unsigned int a2, int a3)
{
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];
  unsigned int v12;
  int v13;
  __int128 buf;
  uint64_t v15;
  char v16;

  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    if (a2 >= 3)
    {
      v7 = "systemWillShutDown";
      if (a2 == 3)
        v7 = "systemWillPowerOn";
    }
    else
    {
      v7 = off_100923CC0[a2];
    }
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PowerManagement event: %{public}s", (uint8_t *)&buf, 0xCu);
  }
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v15 = 0x2020000000;
  v16 = 1;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1002CE060;
  v11[3] = &unk_100923A00;
  v11[4] = &buf;
  v12 = a2;
  v13 = a3;
  sub_1002CDFA4(a1 + 92, v11);
  if (a2 == 1)
  {
    v8 = sub_1000438A4();
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 3312))(v8);
  }
  v9 = *(unsigned __int8 *)(*((_QWORD *)&buf + 1) + 24);
  _Block_object_dispose(&buf, 8);
  return v9;
}

void sub_1002CDF8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1002CDFA4(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CE038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CE060(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  char v5;

  v2 = result;
  switch(*(_DWORD *)(result + 40))
  {
    case 0:
      result = (**(uint64_t (***)(uint64_t))a2)(a2);
      goto LABEL_7;
    case 1:
      v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8);
      goto LABEL_5;
    case 2:
      v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16);
LABEL_5:
      result = v3(a2);
      break;
    case 4:
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(unsigned int *)(result + 44));
LABEL_7:
      v4 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 8);
      if (*(_BYTE *)(v4 + 24))
        v5 = result;
      else
        v5 = 0;
      *(_BYTE *)(v4 + 24) = v5;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1002CE108(os_unfair_lock_s *a1, int a2)
{
  NSObject *v4;
  _QWORD v5[4];
  char v6;
  uint8_t buf[4];
  int v8;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "System keybag unlocked : %d", buf, 8u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002CE2AC;
  v5[3] = &unk_100923A20;
  v6 = a2;
  sub_1002CE1F0(a1 + 112, v5);
}

void sub_1002CE1F0(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CE284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CE2AC(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002CE2C4(os_unfair_lock_s *a1, char a2)
{
  _QWORD v2[4];
  char v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1002CE3D4;
  v2[3] = &unk_100923A40;
  v3 = a2;
  sub_1002CE318(a1 + 122, v2);
}

void sub_1002CE318(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CE3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CE3D4(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002CE3EC(os_unfair_lock_s *a1, int a2, int a3)
{
  NSObject *v6;
  const char *v7;
  _QWORD v8[4];
  char v9;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;

  v6 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v7 = "dis";
    if (a2)
      v7 = "";
    *(_DWORD *)buf = 67109378;
    v12 = a3;
    v13 = 2082;
    v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Battery capacity is now at %u%% (%{public}scharging)", buf, 0x12u);
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1002CE5BC;
  v8[3] = &unk_100923A60;
  v9 = a2;
  v10 = a3;
  sub_1002CE500(a1 + 102, v8);
}

void sub_1002CE500(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CE594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CE5BC(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32), *(unsigned __int8 *)(a1 + 33));
}

void sub_1002CE5D8(os_unfair_lock_s *a1, unsigned int a2)
{
  const char *v4;
  NSObject *v5;
  _QWORD v6[4];
  unsigned int v7;
  uint8_t buf[4];
  const char *v9;

  if (a2 > 2)
    v4 = "unknown";
  else
    v4 = off_100923CD8[a2];
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Power source is now %s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002CE79C;
  v6[3] = &unk_100923A80;
  v7 = a2;
  sub_1002CE6E0(a1 + 132, v6);
}

void sub_1002CE6E0(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CE774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CE79C(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned int *)(a1 + 32));
}

void sub_1002CE7B4(os_unfair_lock_s *a1, int a2)
{
  NSObject *v4;
  const char *v5;
  _QWORD v6[4];
  char v7;
  uint8_t buf[4];
  const char *v9;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "disabled";
    if (a2)
      v5 = "enabled";
    *(_DWORD *)buf = 136446210;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Siri is now %{public}s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002CE970;
  v6[3] = &unk_100923AC0;
  v7 = a2;
  sub_1002CE8B4(a1 + 152, v6);
}

void sub_1002CE8B4(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CE948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CE970(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002CE988(os_unfair_lock_s *a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Siri VoiceTrigger state changed", v3, 2u);
  }
  sub_1002CEA00(a1 + 162, &stru_100923B00);
}

void sub_1002CEA00(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CEA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1002CEABC(id a1, SiriVoiceTriggerListener *a2)
{
  ((void (*)(SiriVoiceTriggerListener *))*a2->var0)(a2);
}

void sub_1002CEACC(os_unfair_lock_s *a1, int a2)
{
  NSObject *v4;
  const char *v5;
  _QWORD v6[4];
  char v7;
  uint8_t buf[4];
  const char *v9;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "disabled";
    if (a2)
      v5 = "enabled";
    *(_DWORD *)buf = 136446210;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Carplay is now %{public}s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002CEC88;
  v6[3] = &unk_100923B20;
  v7 = a2;
  sub_1002CEBCC(a1 + 172, v6);
}

void sub_1002CEBCC(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CEC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CEC88(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002CECA0(os_unfair_lock_s *a1, int a2)
{
  NSObject *v4;
  const char *v5;
  _QWORD v6[4];
  char v7;
  uint8_t buf[4];
  const char *v9;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v5 = "off";
    if (a2)
      v5 = "on";
    *(_DWORD *)buf = 136446210;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Screen state is now %{public}s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002CEE5C;
  v6[3] = &unk_100923B40;
  v7 = a2;
  sub_1002CEDA0(a1 + 182, v6);
}

void sub_1002CEDA0(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CEE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CEE5C(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002CEE74(os_unfair_lock_s *a1, int a2)
{
  NSObject *v4;
  const char *v5;
  _QWORD v6[4];
  char v7;
  uint8_t buf[4];
  const char *v9;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v5 = "Closed";
    if (a2)
      v5 = "Lauched";
    *(_DWORD *)buf = 136446210;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "GarageBand is now %{public}s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002CF030;
  v6[3] = &unk_100923B60;
  v7 = a2;
  sub_1002CEF74(a1 + 222, v6);
}

void sub_1002CEF74(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CF008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CF030(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002CF048(os_unfair_lock_s *a1, int a2)
{
  NSObject *v4;
  const char *v5;
  _QWORD v6[4];
  char v7;
  uint8_t buf[4];
  const char *v9;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "off";
    if (a2)
      v5 = "on";
    *(_DWORD *)buf = 136446210;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Accessibility head tracking is now %{public}s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002CF204;
  v6[3] = &unk_100923B80;
  v7 = a2;
  sub_1002CF148(a1 + 232, v6);
}

void sub_1002CF148(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CF1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CF204(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002CF21C(os_unfair_lock_s *a1, int a2)
{
  NSObject *v4;
  const char *v5;
  _QWORD v6[4];
  char v7;
  uint8_t buf[4];
  const char *v9;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "Not Allowed";
    if (a2)
      v5 = "Allowed";
    *(_DWORD *)buf = 136446210;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Spatial Profile is now %{public}s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002CF3D8;
  v6[3] = &unk_100923BA0;
  v7 = a2;
  sub_1002CF31C(a1 + 252, v6);
}

void sub_1002CF31C(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CF3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CF3D8(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002CF3F0(os_unfair_lock_s *a1, int a2)
{
  NSObject *v4;
  const char *v5;
  _QWORD v6[4];
  char v7;
  uint8_t buf[4];
  const char *v9;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "Disabled";
    if (a2)
      v5 = "Enabled";
    *(_DWORD *)buf = 136446210;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HID 3pp LE to Low Latency is now %{public}s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002CF5AC;
  v6[3] = &unk_100923BC0;
  v7 = a2;
  sub_1002CF4F0(a1 + 262, v6);
}

void sub_1002CF4F0(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CF584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CF5AC(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002CF5C4(os_unfair_lock_s *a1, int a2)
{
  NSObject *v4;
  const char *v5;
  _QWORD v6[4];
  char v7;
  uint8_t buf[4];
  const char *v9;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_INFO))
  {
    v5 = "off";
    if (a2)
      v5 = "on";
    *(_DWORD *)buf = 136446210;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Keyboard is now %{public}s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002CF780;
  v6[3] = &unk_100923BE0;
  v7 = a2;
  sub_1002CF6C4(a1 + 202, v6);
}

void sub_1002CF6C4(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CF758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CF780(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002CF798(os_unfair_lock_s *a1, int a2)
{
  const char *v4;
  NSObject *v5;
  _QWORD v6[4];
  int v7;
  uint8_t buf[4];
  const char *v9;

  if ((a2 - 1) > 6)
    v4 = "unknown";
  else
    v4 = off_100923CF0[a2 - 1];
  v5 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Device orientation is now %s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002CF960;
  v6[3] = &unk_100923C00;
  v7 = a2;
  sub_1002CF8A4(a1 + 212, v6);
}

void sub_1002CF8A4(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CF938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CF960(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned int *)(a1 + 32));
}

void sub_1002CF978(os_unfair_lock_s *a1, int a2)
{
  NSObject *v4;
  _QWORD v5[4];
  char v6;
  uint8_t buf[4];
  int v8;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SystemSettingsModel::systemMonitor device lock state changed:%d", buf, 8u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002CFB1C;
  v5[3] = &unk_100923C20;
  v6 = a2;
  sub_1002CFA60(a1 + 272, v5);
}

void sub_1002CFA60(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CFAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CFB1C(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002CFB34(os_unfair_lock_s *a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SystemSettingsModel::systemMonitor first unlock", v3, 2u);
  }
  sub_1002CFBAC(a1 + 282, &stru_100923C60);
}

void sub_1002CFBAC(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CFC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1002CFC68(id a1, DeviceFirstUnlockedListener *a2)
{
  ((void (*)(DeviceFirstUnlockedListener *))*a2->var0)(a2);
}

void sub_1002CFC78(os_unfair_lock_s *a1, int a2)
{
  NSObject *v4;
  _QWORD v5[4];
  char v6;
  uint8_t buf[4];
  int v8;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SystemSettingsModel::systemMonitor game console mode changed:%d", buf, 8u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002CFE1C;
  v5[3] = &unk_100923C80;
  v6 = a2;
  sub_1002CFD60(a1 + 292, v5);
}

void sub_1002CFD60(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CFDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CFE1C(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_1002CFE34(os_unfair_lock_s *a1, int a2)
{
  NSObject *v4;
  _QWORD v5[4];
  int v6;
  uint8_t buf[4];
  int v8;

  v4 = qword_1009997E8;
  if (os_log_type_enabled((os_log_t)qword_1009997E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SystemSettingsModel::notifySmartCoverStateChanged Smart Cover State Changed:%d", buf, 8u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002CFFD8;
  v5[3] = &unk_100923CA0;
  v6 = a2;
  sub_1002CFF1C(a1 + 302, v5);
}

void sub_1002CFF1C(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002CFFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002CFFD8(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD))
{
  return (**a2)(a2, *(unsigned int *)(a1 + 32));
}

void sub_1002CFFF0(os_unfair_lock_s *a1, int a2)
{
  a1[312]._os_unfair_lock_opaque = a2;
  sub_1002CFE34(a1, a2);
}

uint64_t sub_1002CFFF8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1248);
}

void sub_1002D0118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)BTVCLinkAdvertiser;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1002D023C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002D02B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  void *v10;

  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_1002D03EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  objc_sync_exit(v21);
  _Unwind_Resume(a1);
}

void sub_1002D0420(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 32), *(id *)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = 0;

}

_BYTE *sub_1002D0464(uint64_t a1)
{
  _BYTE *result;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  result = *(_BYTE **)(a1 + 32);
  if (result[25])
    return objc_msgSend(result, "_restartIfNeeded:", 0);
  return result;
}

void sub_1002D05BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  objc_sync_exit(v21);
  _Unwind_Resume(a1);
}

void sub_1002D05F0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = 0;

  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 48), *(id *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 56);
  *(_QWORD *)(v4 + 56) = 0;

}

_BYTE *sub_1002D0634(uint64_t a1)
{
  _BYTE *result;

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  result = *(_BYTE **)(a1 + 32);
  if (result[25])
    return objc_msgSend(result, "_restartIfNeeded:", 0);
  return result;
}

id sub_1002D0720(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_activateWithCompletion:", *(_QWORD *)(a1 + 40));
}

void sub_1002D09FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1002D0AC8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_advertisingEnable:", *(unsigned __int8 *)(a1 + 40));
}

void sub_1002D0D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1002D0D38(uint64_t a1)
{
  id WeakRetained;
  NSObject *v2;
  int v3;
  const char *v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = qword_100999980;
  if (os_log_type_enabled((os_log_t)qword_100999980, OS_LOG_TYPE_DEFAULT))
  {
    v3 = 136315138;
    v4 = "-[BTVCLinkAdvertiser _advertisingEnable:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s _restartIfNeeded\n", (uint8_t *)&v3, 0xCu);
  }
  objc_msgSend(WeakRetained, "_restartIfNeeded:", 1);

}

void sub_1002D0DF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1002D0E68(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_invalidate");
}

void sub_1002D0FE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002D13F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002D1504(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002D1620(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002D1708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002D1834(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002D19AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1002D1A78(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_1002D1A88(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

uint64_t sub_1002D1A98(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v3;
  unsigned int v5;
  _OWORD v7[4];
  void *__p[2];
  __int128 v9;
  __int128 v10;
  _OWORD v11[9];
  uint64_t v12;

  LODWORD(v3) = a3;
  v12 = 0;
  v10 = 0u;
  memset(v11, 0, sizeof(v11));
  *(_OWORD *)__p = 0u;
  v9 = 0u;
  memset(v7, 0, sizeof(v7));
  sub_100272ADC((uint64_t)v7);
  if ((_DWORD)v3)
  {
    v3 = v3;
    do
    {
      *(_DWORD *)((char *)v7 + *(_QWORD *)(*(_QWORD *)&v7[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v7
                                                                                      + *(_QWORD *)(*(_QWORD *)&v7[0]
                                                                                                  - 24)
                                                                                      + 8) & 0xFFFFFFB5 | 8;
      v5 = *a2++;
      std::ostream::operator<<(v7, v5);
      --v3;
    }
    while (v3);
  }
  std::stringbuf::str((char *)v7 + 8);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v7 + 8);
  return std::ios::~ios(v11);
}

void sub_1002D1BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100272CFC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_1002D1BC4(uint64_t a1, int a2)
{
  id v3;
  void *v4;
  const __CFString *v5;
  int i;
  NSString *v7;
  void *v8;
  int v10;

  v3 = objc_alloc_init((Class)NSMutableString);
  v4 = v3;
  if (a2 == -1)
  {
    v5 = CFSTR("ALL");
    goto LABEL_5;
  }
  if (!a2)
  {
    v5 = CFSTR("NONE");
LABEL_5:
    objc_msgSend(v3, "appendString:", v5);
    return v4;
  }
  for (i = 0; i != 32; ++i)
  {
    if (((1 << i) & a2) != 0)
    {
      if (objc_msgSend(v4, "length"))
        objc_msgSend(v4, "appendString:", CFSTR(","));
      v10 = (1 << i) & a2;
      v7 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sub_100497E14(&v10));
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      objc_msgSend(v4, "appendString:", v8);

    }
  }
  return v4;
}

void sub_1002D1CB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1002D1CDC(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t i;
  uint64_t v6;
  const char *v7;
  void *v8;

  v3 = objc_alloc_init((Class)NSMutableString);
  v4 = v3;
  if (a2)
  {
    for (i = 0; i != 64; ++i)
    {
      v6 = (1 << i) & a2;
      if (v6)
      {
        if (objc_msgSend(v4, "length"))
          objc_msgSend(v4, "appendString:", CFSTR(","));
        v7 = "ContactSyncSettingsSupported";
        switch(v6)
        {
          case 1:
            break;
          case 2:
            v7 = "ContactSyncSettingsEnabled";
            break;
          case 3:
          case 5:
          case 6:
          case 7:
            goto LABEL_11;
          case 4:
            v7 = "RecentCallsSyncSettingsEnabled";
            break;
          case 8:
            v7 = "FavoritedSyncSettingsEnabled";
            break;
          default:
            if (v6 == 16)
            {
              v7 = "ContactSyncSettingsGranted";
            }
            else if (v6 == 32)
            {
              v7 = "MapSyncEnabled";
            }
            else
            {
LABEL_11:
              v7 = "Unknown";
            }
            break;
        }
        v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7));
        objc_msgSend(v4, "appendString:", v8);

      }
    }
  }
  else
  {
    objc_msgSend(v3, "appendString:", CFSTR("SyncSettingsCleared"));
  }
  return v4;
}

void sub_1002D1E30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *sub_1002D1E50(uint64_t a1, int a2)
{
  if (a2 <= 100)
  {
    if (a2 > 10)
    {
      if (a2 == 11)
        return CFSTR("CONNECTION_RESULT");
      if (a2 == 12)
        return CFSTR("DISCONNECTION_RESULT");
    }
    else
    {
      if (a2 == 1)
        return CFSTR("CONNECTION_ATTEMPT");
      if (a2 == 2)
        return CFSTR("DISCONNECTION_ATTEMPT");
    }
  }
  else if (a2 <= 200)
  {
    if (a2 == 101)
      return CFSTR("HANDSFREE_AUDIO_CONNECTED");
    if (a2 == 102)
      return CFSTR("HANDSFREE_AUDIO_DISCONNECTED");
  }
  else
  {
    switch(a2)
    {
      case 201:
        return CFSTR("A2DP_AUDIO_CONNECTED");
      case 202:
        return CFSTR("A2DP_AUDIO_DISCONNECTED");
      case 412:
        return CFSTR("HANDSFREE_AUDIO_CONNECTION_LOOPS");
    }
  }
  return CFSTR("Unknown");
}

uint64_t sub_1002D1F28(uint64_t result, int a2)
{
  int v2;

  *(_QWORD *)result = off_100923DC8;
  *(_BYTE *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 40) = a2;
  switch(a2)
  {
    case 0:
      v2 = 1536;
      goto LABEL_6;
    case 1:
      *(_DWORD *)(result + 24) = -1;
      operator new();
    case 2:
      v2 = 513;
      goto LABEL_6;
    case 3:
      v2 = 268435712;
      goto LABEL_6;
    case 4:
      v2 = 134217984;
LABEL_6:
      *(_DWORD *)(result + 24) = v2;
      *(_QWORD *)(result + 32) = 0;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1002D2010()
{
  operator delete();
}

_QWORD *sub_1002D2038(_QWORD *a1)
{
  ctu::TextConverter *v2;

  *a1 = off_100923DC8;
  v2 = (ctu::TextConverter *)a1[4];
  if (v2)
  {
    ctu::TextConverter::~TextConverter(v2);
    operator delete();
  }
  return a1;
}

void sub_1002D2088(_QWORD *a1)
{
  sub_1002D2038(a1);
  operator delete();
}

double sub_1002D20AC@<D0>(uint64_t a1@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  double result;
  int v6;
  std::string::size_type size;
  std::string *p_p;
  int v9;
  std::string __str;
  std::string __p;

  if (*(_DWORD *)(a1 + 24) == -1)
    sub_1002D2314(a1, a2, &__str);
  else
    sub_1002D21D8(a1, a2, &__str);
  result = *(double *)&__str.__r_.__value_.__l.__data_;
  __p = __str;
  if (*(_BYTE *)(a1 + 8))
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    v6 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (size)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      do
      {
        __str.__r_.__value_.__s.__data_[2] = 0;
        LOWORD(__str.__r_.__value_.__l.__data_) = 0;
        v9 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        snprintf((char *)&__str, 3uLL, "%02X", v9);
        std::string::append(a3, (const std::string::value_type *)&__str);
        --size;
      }
      while (size);
    }
    if (v6 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    result = *(double *)&__p.__r_.__value_.__l.__data_;
    *a3 = __p;
  }
  return result;
}

void sub_1002D21B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;
  int v3;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  if (v3 < 0)
    operator delete(v2);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1002D21D8@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, _QWORD *a3@<X8>)
{
  const __CFString *v5;
  CFIndex Length;
  unint64_t MaximumSizeForEncoding;
  uint64_t v8;
  unint64_t v9;
  size_t v11;
  uint64_t v12;
  UInt8 *v13;
  size_t v15;
  CFRange v16;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v5 = CFStringCreateWithCStringNoCopy(kCFAllocatorDefault, a2, 0x8000100u, kCFAllocatorNull);
  Length = CFStringGetLength(v5);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, *(_DWORD *)(a1 + 24));
  v9 = *(_QWORD *)(a1 + 16);
  if (MaximumSizeForEncoding <= v9 || v9 == 0)
    v11 = MaximumSizeForEncoding;
  else
    v11 = *(_QWORD *)(a1 + 16);
  __chkstk_darwin(MaximumSizeForEncoding, v8);
  v13 = (UInt8 *)&v15 - v12;
  bzero((char *)&v15 - v12, v11);
  v15 = 0;
  v16.length = CFStringGetLength(v5);
  v16.location = 0;
  CFStringGetBytes(v5, v16, *(_DWORD *)(a1 + 24), 0x20u, 0, v13, v11, (CFIndex *)&v15);
  CFRelease(v5);
  return sub_1002D236C(a3, v13, v15);
}

void sub_1002D2314(uint64_t a1@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v7 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const char **)a2;
    v7 = v6;
  }
  ctu::TextConverter::setSource(v5, a2, v7);
  if (*(_QWORD *)(a1 + 16))
    v8 = *(_QWORD *)(a1 + 16);
  else
    v8 = 0x7FFFFFFFLL;
  ctu::TextConverter::readChars(*(ctu::TextConverter **)(a1 + 32), v8, a3);
}

_QWORD *sub_1002D236C(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

_QWORD *sub_1002D2410(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_100923F10;
  sub_1000160D0(a1 + 1);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = off_100923EE0;
  *a1 = off_100923DE8;
  a1[13] = 0;
  a1[12] = a1 + 13;
  a1[14] = 0;
  v2 = objc_autoreleasePoolPush();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  objc_msgSend(v3, "setListener:", a1 + 11);

  objc_autoreleasePoolPop(v2);
  return a1;
}

void sub_1002D24C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  sub_1002D3488(v3, *(_QWORD **)(v1 + 104));
  *(_QWORD *)v1 = v5;
  sub_100069BDC(v2);
  _Unwind_Resume(a1);
}

void sub_1002D24F4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v6 = a3;
  v7 = a4;
  v8 = objc_autoreleasePoolPush();
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  objc_msgSend(v9, "launchApplication:restoringCentrals:peripherals:", v10, v6, v7);

  objc_autoreleasePoolPop(v8);
}

void sub_1002D2580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1002D25A8(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v4 = objc_autoreleasePoolPush();
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  objc_msgSend(v5, "updateApplicationAliveStatus:isAlive:", v6, a3);

  objc_autoreleasePoolPop(v4);
}

void sub_1002D2614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002D2634(uint64_t a1, uint64_t a2)
{
  void *v4;
  void **v5;
  void *v6;
  void *v7;
  void *__p[2];
  char v9;

  v4 = objc_autoreleasePoolPush();
  sub_100020A60(a1, a2, __p);
  if (v9 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5));
  if (v9 < 0)
    operator delete(__p[0]);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  objc_msgSend(v7, "setCentralBackgroundingSupported:", v6);

  objc_autoreleasePoolPop(v4);
}

void sub_1002D26EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1002D2720(uint64_t a1, uint64_t a2)
{
  void *v4;
  void **v5;
  void *v6;
  void *v7;
  void *__p[2];
  char v9;

  v4 = objc_autoreleasePoolPush();
  sub_100020A60(a1, a2, __p);
  if (v9 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5));
  if (v9 < 0)
    operator delete(__p[0]);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  objc_msgSend(v7, "setPeripheralBackgroundingSupported:", v6);

  objc_autoreleasePoolPop(v4);
}

void sub_1002D27D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t sub_1002D280C(uint64_t a1, const void **a2, int a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  _QWORD v15[6];
  int v16;
  _QWORD v17[2];

  v17[0] = 0;
  v17[1] = 0;
  sub_10003415C((uint64_t)v17, a1 + 8);
  v6 = sub_10001F2AC(a1 + 96, a2);
  if (a1 + 104 != v6)
  {
    if (*(_QWORD *)(a1 + 80))
    {
      v7 = *(_QWORD **)(v6 + 56);
      v8 = (_QWORD *)(v6 + 64);
      if (v7 != (_QWORD *)(v6 + 64))
      {
        do
        {
          v9 = v7[4];
          v10 = sub_1000419F4();
          v15[0] = _NSConcreteStackBlock;
          v15[1] = 3221225472;
          v15[2] = sub_1002D2934;
          v15[3] = &unk_1009180B0;
          v15[4] = a1;
          v15[5] = v9;
          v16 = a3;
          sub_100041A34(v10, v15);
          v11 = (_QWORD *)v7[1];
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (_QWORD *)v7[2];
              v13 = *v12 == (_QWORD)v7;
              v7 = v12;
            }
            while (!v13);
          }
          v7 = v12;
        }
        while (v12 != v8);
      }
    }
  }
  return sub_100034234((uint64_t)v17);
}

void sub_1002D291C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D2934(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 80) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 80), *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

uint64_t sub_1002D2950(uint64_t a1, const void **a2, int a3)
{
  return sub_1002D280C(a1 - 88, a2, a3);
}

uint64_t sub_1002D2958(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  void *v8;
  void *v9;
  void **v10;
  void *v11;
  void *__p[2];
  char v14;

  v8 = objc_autoreleasePoolPush();
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  sub_100020A60(a1, a2, __p);
  if (v14 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10));
  objc_msgSend(v9, "takeAssertionForProcess:duration:isUrgent:", v11, a3, a4);

  if (v14 < 0)
    operator delete(__p[0]);

  objc_autoreleasePoolPop(v8);
  return 1;
}

void sub_1002D2A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1002D2A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  void **v8;
  void *v9;
  void *__p[2];
  char v11;

  v6 = objc_autoreleasePoolPush();
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  sub_100020A60(a1, a2, __p);
  if (v11 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  objc_msgSend(v7, "showPowerAlert:forDenylistMode:validateBundle:", v9, a3, 1);

  if (v11 < 0)
    operator delete(__p[0]);

  objc_autoreleasePoolPop(v6);
}

void sub_1002D2B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1002D2B68(uint64_t a1, uint64_t *a2)
{
  void *v3;
  void *v4;
  uint64_t *v5;
  void *v6;

  v3 = objc_autoreleasePoolPush();
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  if (*((char *)a2 + 23) >= 0)
    v5 = a2;
  else
    v5 = (uint64_t *)*a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5));
  objc_msgSend(v4, "showPowerAlert:forDenylistMode:validateBundle:", v6, 0, 0);

  objc_autoreleasePoolPop(v3);
}

void sub_1002D2BEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002D2C08(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  void *v8;
  void *v9;
  void **v10;
  void *v11;
  void *__p[2];
  char v13;

  v7 = a3;
  v8 = objc_autoreleasePoolPush();
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  sub_100020A60(a1, a2, __p);
  if (v13 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10));
  objc_msgSend(v9, "showAppLaunchAlert:device:type:", v11, v7, a4);

  if (v13 < 0)
    operator delete(__p[0]);

  objc_autoreleasePoolPop(v8);
}

void sub_1002D2CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1002D2D24(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v6 = objc_autoreleasePoolPush();
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  objc_msgSend(v7, "showPairingAlert:type:passkey:", v8, a3, a4);

  objc_autoreleasePoolPop(v6);
}

void sub_1002D2D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002D2DB8()
{
  void *v0;
  void *v1;

  v0 = objc_autoreleasePoolPush();
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  objc_msgSend(v1, "showPairingAlert:type:passkey:", 0, 0, 0);

  objc_autoreleasePoolPop(v0);
}

void sub_1002D2E04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002D2E14(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;

  v4 = a2;
  v2 = objc_autoreleasePoolPush();
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  objc_msgSend(v3, "cancelPairingAlert:", v4);

  objc_autoreleasePoolPop(v2);
}

void sub_1002D2E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002D2E90(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;
  _QWORD v8[2];

  v3 = a2;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003415C((uint64_t)v8, a1 + 8);
  if (*(_QWORD *)(a1 + 72))
  {
    v4 = sub_1000419F4();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1002D2F6C;
    v5[3] = &unk_100918868;
    v7 = a1;
    v6 = v3;
    sub_100041A34(v4, v5);

  }
  sub_100034234((uint64_t)v8);

}

void sub_1002D2F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D2F6C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 72) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 72), *(_QWORD *)(a1 + 32));
}

void sub_1002D2F80(uint64_t a1, void *a2)
{
  sub_1002D2E90(a1 - 88, a2);
}

void sub_1002D2F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  void *v8;
  void *v9;
  id v10;

  v10 = a5;
  v8 = objc_autoreleasePoolPush();
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  objc_msgSend(v9, "displayAirWaveLaunchNotification:forProduct:reason:findMySerialNumber:", a2, a3, a4, v10);

  objc_autoreleasePoolPop(v8);
}

void sub_1002D300C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002D302C(uint64_t a1, uint64_t a2, unsigned int a3, void *a4, void *a5)
{
  id v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a4;
  v8 = a5;
  v9 = objc_autoreleasePoolPush();
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  objc_msgSend(v10, "showFoundAccessoryCrashAlert:productID:accessoryName:firmwareVersion:", a2 & 0xFFFFFFFFFFFFLL, a3, v11, v8);

  objc_autoreleasePoolPop(v9);
}

void sub_1002D30BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1002D30E0(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, void *a5)
{
  id v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v8 = a5;
  v9 = objc_autoreleasePoolPush();
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  objc_msgSend(v10, "showFoundAccessoryLogAlert:isCrash:pid:accessoryName:", v11, a3, a4, v8);

  objc_autoreleasePoolPop(v9);
}

void sub_1002D3170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1002D3194(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void *v7;
  void *v8;

  v7 = objc_autoreleasePoolPush();
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  objc_msgSend(v8, "showFileRadarNotification:reason:pid:", a2 & 0xFFFFFFFFFFFFLL, a3, a4);

  objc_autoreleasePoolPop(v7);
}

void sub_1002D31FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002D320C(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v6 = objc_autoreleasePoolPush();
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  objc_msgSend(v7, "openTapToRadarWithAccessoryLogs:reason:pid:", v8, a3, a4);

  objc_autoreleasePoolPop(v6);
}

void sub_1002D3280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1002D32A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v11 = objc_autoreleasePoolPush();
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[BTAppInteraction instance](BTAppInteraction, "instance"));
  v13 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", a3);
  v14 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", a4);
  v15 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", a5);
  v16 = objc_msgSend(objc_alloc((Class)NSString), "initWithUTF8String:", a6);
  objc_msgSend(v12, "btControllerTapToRadar:reason:cid:cname:cvers:", a2, v13, v14, v15, v16);

  objc_autoreleasePoolPop(v11);
}

void sub_1002D3388(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t sub_1002D33C8(uint64_t a1)
{
  *(_QWORD *)a1 = off_100923DE8;
  *(_QWORD *)(a1 + 88) = off_100923EE0;
  sub_1002D3488(a1 + 96, *(_QWORD **)(a1 + 104));
  *(_QWORD *)a1 = &off_100923F10;
  sub_100069BDC(a1 + 8);
  return a1;
}

void sub_1002D341C(uint64_t a1)
{
  *(_QWORD *)a1 = off_100923DE8;
  *(_QWORD *)(a1 + 88) = off_100923EE0;
  sub_1002D3488(a1 + 96, *(_QWORD **)(a1 + 104));
  *(_QWORD *)a1 = &off_100923F10;
  sub_100069BDC(a1 + 8);
  operator delete();
}

void sub_1002D3488(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1002D3488(a1, *a2);
    sub_1002D3488(a1, a2[1]);
    sub_1002D34D0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1002D34D0(uint64_t a1)
{
  sub_10001A82C(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1002D3510(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1002D34D0((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t **sub_1002D3554(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_10001FD34((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v8[4] = v9[4];
          sub_1002D36B4(v5, v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = sub_10001FD34((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)sub_1002C6244((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_100014DCC(v5, a2 + 4);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1002D36A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002C6244((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002D36B4(uint64_t **a1, uint64_t *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4])
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  sub_100004078(a1, (uint64_t)v3, v5, a2);
  return a2;
}

uint64_t sub_1002D3720(uint64_t a1, int a2)
{
  *(_QWORD *)a1 = &off_100923FE8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(_BYTE *)(a1 + 24) = 0;
  sub_1000160D0(a1 + 32);
  sub_1000160D0(a1 + 96);
  sub_1000160D0(a1 + 160);
  sub_1002F96B8(a1 + 224, a1);
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  sub_1002C5464((os_log_t *)(a1 + 288));
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  sub_1002C5464((os_log_t *)(a1 + 328));
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 389) = 0;
  *(_WORD *)(a1 + 397) = 2;
  return a1;
}

void sub_1002D37F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100069BDC(v3);
  sub_100069BDC(v2);
  sub_100069BDC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D383C(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &off_100923FE8;
  v2 = *(void **)(a1 + 272);
  if (v2)
    munmap(v2, *(_QWORD *)(a1 + 280));
  v3 = *(void **)(a1 + 312);
  if (v3)
    munmap(v3, *(_QWORD *)(a1 + 320));
  CFRelease(*(CFTypeRef *)(a1 + 16));
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  sub_1002F96E0(a1 + 224);
  sub_100069BDC(a1 + 160);
  sub_100069BDC(a1 + 96);
  sub_100069BDC(a1 + 32);
  return a1;
}

void sub_1002D38C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 391) < 0)
    operator delete(*(void **)(v1 + 368));
  sub_1002F96E0(v1 + 224);
  sub_100069BDC(v1 + 160);
  sub_100069BDC(v1 + 96);
  sub_100069BDC(v1 + 32);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D3904(unint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFBooleanRef v6;
  uint64_t v7;
  CFBooleanRef v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  _QWORD *v21;
  CFNumberRef v22;
  NSObject *v23;
  CFDictionaryRef Copy;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v35;
  uint64_t valuePtr;
  void *__p[2];
  char v38;
  _BYTE buf[22];
  char v40;

  v2 = sub_100027F68();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2) & 1) != 0
    || (v3 = sub_100027F68(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3)))
  {
    *((_BYTE *)a1 + 396) = 0;
    LOBYTE(valuePtr) = 0;
    v35 = 0;
    v4 = sub_100027F68();
    sub_100091AE8(buf, "BTAudioHALPlugin");
    sub_100091AE8(__p, "EnableAudioCaptures");
    (*(void (**)(uint64_t, _BYTE *, void **, uint64_t *))(*(_QWORD *)v4 + 72))(v4, buf, __p, &valuePtr);
    if (v38 < 0)
      operator delete(__p[0]);
    if (v40 < 0)
      operator delete(*(void **)buf);
    if ((_BYTE)valuePtr)
      sub_1002D3FC8((uint64_t)a1, "kBTAudioDebugEnableAudioCaptures", kCFBooleanTrue);
    v5 = sub_100027F68();
    sub_100091AE8(buf, "BTAudioHALPlugin");
    sub_100091AE8(__p, "BTAudioHALEnableAudioLogging");
    (*(void (**)(uint64_t, _BYTE *, void **, _BYTE *))(*(_QWORD *)v5 + 72))(v5, buf, __p, (_BYTE *)a1 + 396);
    if (v38 < 0)
      operator delete(__p[0]);
    if (v40 < 0)
      operator delete(*(void **)buf);
    if (*((_BYTE *)a1 + 396))
      v6 = kCFBooleanTrue;
    else
      v6 = kCFBooleanFalse;
    sub_1002D3FC8((uint64_t)a1, "kBTAudioDebugEnableAudioLogging", v6);
    v7 = sub_100027F68();
    sub_100091AE8(buf, "BTAudioHALPlugin");
    sub_100091AE8(__p, "BTAudioDebugEnableUWBSStereoTest");
    (*(void (**)(uint64_t, _BYTE *, void **, unsigned __int8 *))(*(_QWORD *)v7 + 72))(v7, buf, __p, &v35);
    if (v38 < 0)
      operator delete(__p[0]);
    if (v40 < 0)
      operator delete(*(void **)buf);
    if (v35)
      v8 = kCFBooleanTrue;
    else
      v8 = kCFBooleanFalse;
    sub_1002D3FC8((uint64_t)a1, "kBTAudioDebugEnableUWBSStereoTest", v8);
    v9 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v35;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "BTAudioDebugEnableUWBSStereoTest:%d", buf, 8u);
    }
  }
  if ((*(unsigned int (**)(unint64_t *))(*a1 + 112))(a1))
  {
    v10 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device supports Skywalk Path", buf, 2u);
    }
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](AudioDeviceManager, "sharedManager"));
    objc_msgSend(v11, "getAudioSkywalkProvider");

    if (!(*(uint64_t (**)(unint64_t *))(*a1 + 120))(a1))
    {
      v12 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
        sub_1006DC720(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    sub_10003415C((uint64_t)buf, (uint64_t)(a1 + 20));
    operator new();
  }
  LODWORD(valuePtr) = 0;
  if (qword_10097AC00 != -1)
    dispatch_once(&qword_10097AC00, &stru_100924138);
  if (sub_10059C6BC((uint64_t)off_10097ABF8, a1[45], (float *)&valuePtr)
    && *((_DWORD *)a1 + 2) == 1952539500)
  {
    v20 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v21 = a1 + 46;
      if (*((char *)a1 + 391) < 0)
        v21 = (_QWORD *)*v21;
      *(_DWORD *)buf = 134218242;
      *(double *)&buf[4] = *(float *)&valuePtr;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Received initial absolute volume of %f for device %{public}s before publishing", buf, 0x16u);
    }
    v22 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
    sub_1002D3FC8((uint64_t)a1, "kBTAudioMsgPropertyVolumeScalar", v22);
    CFRelease(v22);
    sub_1002D4BBC((uint64_t)a1, "kBTAudioMsgPropertyVolumeScalar", *(float *)&valuePtr);
  }
  __p[0] = 0;
  __p[1] = 0;
  sub_10003415C((uint64_t)__p, (uint64_t)(a1 + 4));
  v23 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Sending publish message", buf, 2u);
  }
  Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, (CFDictionaryRef)a1[2]);
  if (Copy)
  {
    sub_1002F9768((uint64_t)(a1 + 28), *((_DWORD *)a1 + 2), Copy);
    CFRelease(Copy);
    *((_BYTE *)a1 + 24) = 1;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v25 = sub_10003415C((uint64_t)buf, (uint64_t)(a1 + 20));
    *((_BYTE *)a1 + 398) = 1;
    sub_100034234(v25);
  }
  else
  {
    v26 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006DC6F0(v26, v27, v28, v29, v30, v31, v32, v33);
  }
  return sub_100034234((uint64_t)__p);
}

void sub_1002D3F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  uint64_t v28;

  sub_100034234(v28 - 80);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D3FC8(uint64_t a1, const char *a2, const void *a3)
{
  CFStringRef v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *value;
  _QWORD v19[2];

  v19[0] = 0;
  v19[1] = 0;
  sub_10003415C((uint64_t)v19, a1 + 32);
  v6 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  value = 0;
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 16), v6, (const void **)&value) && CFEqual(value, a3))
  {
    v7 = 0;
  }
  else
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), v6, a3);
    v7 = 1;
  }
  CFRelease(v6);
  v8 = sub_100027F68();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8))
  {
    v9 = (void *)_CFXPCCreateXPCObjectFromCFObject(*(_QWORD *)(a1 + 16));
    if (v9)
    {
      xpc_release(v9);
    }
    else
    {
      v10 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
        sub_1006DC788((uint64_t)a2, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  sub_100034234((uint64_t)v19);
  return v7;
}

void sub_1002D40D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D40F4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 152))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1002D4104(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 240))(*(_QWORD *)(a1 + 32));
}

void sub_1002D4114(uint64_t a1, float a2)
{
  sub_1002D4BBC(a1, "kBTAudioMsgPropertyVolumeScalar", a2);
}

uint64_t sub_1002D4120(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v6;

  v2 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)(a1 + 368);
    if (*(char *)(a1 + 391) < 0)
      v3 = (_QWORD *)*v3;
    LODWORD(v6) = 136446210;
    *(_QWORD *)((char *)&v6 + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Unpublishing audio device %{public}s", (uint8_t *)&v6, 0xCu);
  }
  v6 = 0uLL;
  sub_10003415C((uint64_t)&v6, a1 + 160);
  *(_BYTE *)(a1 + 398) = 0;
  sub_100034234((uint64_t)&v6);
  v6 = 0uLL;
  sub_10003415C((uint64_t)&v6, a1 + 160);
  v4 = *(_QWORD *)(a1 + 352);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_100034264((uint64_t)&v6);
  sub_1002F9E90(a1 + 224);
  return sub_100034234((uint64_t)&v6);
}

void sub_1002D422C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002D4248(uint64_t a1, uint64_t a2)
{
  sub_1002D4258(a1, "kBTAudioMsgPropertyDeviceAddress", a2);
}

void sub_1002D4258(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v5;
  CFStringRef v6;

  if (*(char *)(a3 + 23) >= 0)
    v5 = (const char *)a3;
  else
    v5 = *(const char **)a3;
  v6 = CFStringCreateWithCString(kCFAllocatorDefault, v5, 0x8000100u);
  sub_1002D4F78(a1, a2, v6);
  CFRelease(v6);
}

void sub_1002D42C0(uint64_t a1, const void **a2)
{
  size_t v4;
  std::string *v5;
  uint8x8_t v6;
  const void *v7;
  int16x8_t v8;
  std::string *v9;
  std::string::size_type v10;
  char v11;
  uint64_t v12;
  std::string::value_type __s[4];
  char v14;
  std::string v15;
  _QWORD v16[2];

  if (*((char *)a2 + 23) >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  memset(&v15, 0, sizeof(v15));
  v5 = &v15;
  sub_1002D6774((uint64_t)&v15, v4 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if (v4)
  {
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = *a2;
    memmove(v5, v7, v4);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 45;
  v6.i32[0] = *(_DWORD *)(a1 + 8);
  v8 = (int16x8_t)vmovl_u8(v6);
  *(int16x4_t *)v8.i8 = vrev64_s16(*(int16x4_t *)v8.i8);
  *(_DWORD *)__s = vmovn_s16(v8).u32[0];
  v14 = 0;
  v9 = std::string::append(&v15, __s);
  v10 = v9->__r_.__value_.__r.__words[0];
  v16[0] = v9->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
  v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 391) < 0)
    operator delete(*(void **)(a1 + 368));
  v12 = v16[0];
  *(_QWORD *)(a1 + 368) = v10;
  *(_QWORD *)(a1 + 376) = v12;
  *(_QWORD *)(a1 + 383) = *(_QWORD *)((char *)v16 + 7);
  *(_BYTE *)(a1 + 391) = v11;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  std::string::operator=((std::string *)(a1 + 232), (const std::string *)(a1 + 368));
  sub_1002D4258(a1, "kBTAudioMsgPropertyDeviceUID", a1 + 368);
}

void sub_1002D441C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D4440(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 360) = a2;
  return result;
}

void sub_1002D4448(uint64_t a1, uint64_t a2)
{
  sub_1002D4258(a1, "kBTAudioMsgPropertyName", a2);
}

void sub_1002D4458(uint64_t a1, const char *a2, CFUUIDBytes *a3)
{
  CFUUIDRef v5;

  v5 = CFUUIDCreateFromUUIDBytes(kCFAllocatorDefault, *a3);
  sub_1002D4F78(a1, a2, v5);
  CFRelease(v5);
}

uint64_t sub_1002D44AC(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;

  v2 = a2;
  if ((objc_msgSend(v2, "isEqualToString:", CFSTR("Audio/Video")) & 1) != 0)
  {
    v3 = 1;
  }
  else if ((objc_msgSend(v2, "isEqualToString:", CFSTR("PhoneCall")) & 1) != 0)
  {
    v3 = 2;
  }
  else if (objc_msgSend(v2, "isEqualToString:", CFSTR("VoiceCommand")))
  {
    v3 = 3;
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1002D4524(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1002D4534(uint64_t a1)
{
  return *(_QWORD *)(a1 + 272) != 0;
}

BOOL sub_1002D4544(uint64_t a1)
{
  return *(_QWORD *)(a1 + 312) != 0;
}

unint64_t sub_1002D4554(uint64_t a1)
{
  return sub_1002C5518(a1 + 288);
}

unint64_t sub_1002D455C(uint64_t a1)
{
  return sub_1002C5C58(a1 + 288);
}

size_t sub_1002D4564(uint64_t a1, char *a2, size_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 272))
  {
    v6 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
      sub_1006DC7EC(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  return sub_1002C5784(a1 + 288, a2, a3);
}

unint64_t sub_1002D45D0(uint64_t a1, char *a2, size_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 272))
  {
    v6 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
      sub_1006DC7EC(v6, v7, v8, v9, v10, v11, v12, v13);
  }
  return sub_1002C57F4(a1 + 288, a2, a3);
}

BOOL sub_1002D463C(uint64_t a1, char *a2, size_t *a3, size_t a4, char *a5, size_t *a6, size_t a7)
{
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!*(_QWORD *)(a1 + 272))
  {
    v14 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
      sub_1006DC7EC(v14, v15, v16, v17, v18, v19, v20, v21);
  }
  return sub_1002C5868(a1 + 288, a2, a3, a4, a5, a6, a7);
}

size_t sub_1002D46D8(uint64_t a1, char *a2, unint64_t a3, int a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  _QWORD v18[2];

  if (!*(_QWORD *)(a1 + 312))
  {
    v8 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT))
      sub_1006DC85C(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  v18[0] = 0;
  v18[1] = 0;
  sub_10003415C((uint64_t)v18, a1 + 96);
  v16 = sub_1002C5B60(a1 + 328, a2, a3);
  sub_1002D47A0(a1, a2, a3, a4);
  sub_100034234((uint64_t)v18);
  return v16;
}

void sub_1002D478C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002D47A0(uint64_t a1, const void *a2, size_t a3, int a4)
{
  int v5;
  const char *v6;
  const char *v7;
  const std::string::value_type *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  void **v14;
  void *__p[2];
  char v16;
  uint64_t (**v17)();
  unsigned int *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  std::string v22;
  uint64_t (**v23)();
  unsigned int *v24;

  if (a4)
  {
    v23 = 0;
    v24 = 0;
    sub_10003994C(&v23, a2, a3);
    memset(&v22, 0, sizeof(v22));
    v5 = *(_DWORD *)(a1 + 8);
    v6 = "AudioDeviceLEA";
    v7 = "AudioDeviceOther";
    if (v5 == 1953719151)
      v7 = "AudioDeviceSCO";
    if (v5 != 1953260897)
      v6 = v7;
    if (v5 == 1952539500)
      v8 = "AudioDeviceA2DP";
    else
      v8 = v6;
    std::string::assign(&v22, v8);
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[AudioDeviceManager sharedManager](AudioDeviceManager, "sharedManager"));
    v10 = v9;
    if (v9)
    {
      objc_msgSend(v9, "getClientBundleIDs");
    }
    else
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
    }

    v11 = sub_10005D5A4();
    v17 = &off_100918258;
    v18 = v24;
    if (v24)
      sub_10003C37C((uint64_t)v24);
    if (v21 >= 0)
      v12 = &v19;
    else
      v12 = v19;
    v13 = (_QWORD *)(a1 + 368);
    if (*(char *)(a1 + 391) < 0)
      v13 = (_QWORD *)*v13;
    sub_10043F6EC(*(_QWORD *)(a1 + 360), (uint64_t)__p);
    if (v16 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    (*(void (**)(uint64_t, uint64_t (***)(), uint64_t, void *, _QWORD *, void **))(*(_QWORD *)v11 + 32))(v11, &v17, 4, v12, v13, v14);
    if (v16 < 0)
      operator delete(__p[0]);
    v17 = &off_100918258;
    if (v18)
      sub_100056AAC(v18);
    if (SHIBYTE(v21) < 0)
      operator delete(v19);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    v23 = &off_100918258;
    if (v24)
      sub_100056AAC(v24);
  }
}

void sub_1002D4958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  uint64_t v30;
  unsigned int *v32;

  if (a29 < 0)
    operator delete(__p);
  *(_QWORD *)(v30 - 64) = &off_100918258;
  v32 = *(unsigned int **)(v30 - 56);
  if (v32)
    sub_100056AAC(v32);
  _Unwind_Resume(a1);
}

unint64_t sub_1002D49E4(uint64_t a1, char *a2, size_t a3, int a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];

  if (!*(_QWORD *)(a1 + 312)
    && (v8 = qword_1009997E0, os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT)))
  {
    sub_1006DC85C(v8, v9, v10, v11, v12, v13, v14, v15);
    if (a2)
      goto LABEL_4;
  }
  else if (a2)
  {
LABEL_4:
    v25[0] = 0;
    v25[1] = 0;
    sub_10003415C((uint64_t)v25, a1 + 96);
    v16 = sub_1002C5BCC(a1 + 328, a2, a3);
    sub_1002D47A0(a1, a2, a3, a4);
    sub_100034234((uint64_t)v25);
    return v16;
  }
  v17 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
    sub_1006DC8CC(a3, v17, v18, v19, v20, v21, v22, v23);
  return 0;
}

void sub_1002D4AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002D4AE4(uint64_t a1)
{
  sub_1002F9DF8(a1 + 224);
}

void sub_1002D4AEC(uint64_t a1, int a2)
{
  const void **v3;
  const void *v4;

  v3 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v3 = (const void **)&kCFBooleanFalse;
  v4 = *v3;
  sub_1002D3FC8(a1, "kBTAudioMsgPropertyTipiConnected", *v3);
  sub_1002F9B58(a1 + 224, (uint64_t)"kBTAudioMsgPropertyTipiConnected", v4);
}

void sub_1002D4B4C(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyVolumeIsAbsolute", *v2);
}

void sub_1002D4B74(uint64_t a1, const char *a2, int a3)
{
  const void **v3;

  v3 = (const void **)&kCFBooleanTrue;
  if (!a3)
    v3 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, a2, *v3);
}

void sub_1002D4B94(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyTipiSupported", *v2);
}

void sub_1002D4BBC(uint64_t a1, const char *a2, float a3)
{
  CFNumberRef v5;
  float valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
  sub_1002D3FC8(a1, a2, v5);
  sub_1002F9B58(a1 + 224, (uint64_t)a2, v5);
  CFRelease(v5);
}

void sub_1002D4C34(uint64_t a1, float a2)
{
  sub_1002D4BBC(a1, "kBTAudioMsgPropertyInputVolumeScalar", a2);
}

void sub_1002D4C40(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertySupportRemoteVolumeChange", *v2);
}

BOOL sub_1002D4C68(uint64_t a1, const char *a2, BOOL *a3)
{
  const __CFBoolean *v4;
  const __CFBoolean *v5;

  v4 = (const __CFBoolean *)sub_1002D598C(a1, a2);
  v5 = v4;
  if (v4)
    *a3 = CFBooleanGetValue(v4) != 0;
  return v5 != 0;
}

const __CFNumber *sub_1002D4CAC(uint64_t a1, void *a2)
{
  return sub_1002D4CBC(a1, "kBTAudioMsgPropertyProductID", a2);
}

const __CFNumber *sub_1002D4CBC(uint64_t a1, const char *a2, void *a3)
{
  const __CFNumber *result;

  result = (const __CFNumber *)sub_1002D598C(a1, a2);
  if (result)
    return (const __CFNumber *)(CFNumberGetValue(result, kCFNumberIntType, a3) != 0);
  return result;
}

const __CFNumber *sub_1002D4CF4(uint64_t a1, void *a2)
{
  return sub_1002D4D04(a1, "kBTAudioMsgPropertyVolumeScalar", a2);
}

const __CFNumber *sub_1002D4D04(uint64_t a1, const char *a2, void *a3)
{
  const __CFNumber *result;

  result = (const __CFNumber *)sub_1002D598C(a1, a2);
  if (result)
    return (const __CFNumber *)(CFNumberGetValue(result, kCFNumberFloatType, a3) != 0);
  return result;
}

void sub_1002D4D3C(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyLatency", a2);
}

void sub_1002D4D4C(uint64_t a1, const char *a2, int a3)
{
  CFNumberRef v5;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  sub_1002D4F78(a1, a2, v5);
  CFRelease(v5);
}

void sub_1002D4DB4(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyIsAppleAudioDevice", *v2);
}

void sub_1002D4DDC(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyInEarDetection", *v2);
}

void sub_1002D4E04(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyInEarEnabled", *v2);
}

void sub_1002D4E2C(uint64_t a1, int a2, int a3)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyInEarStatus", a2 | (a3 << 8));
}

void sub_1002D4E3C(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyPrimaryBudSide", a2);
}

void sub_1002D4E4C(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyFixedMicRole", a2);
}

void sub_1002D4E5C(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyRemoteStreamState", a2);
}

void sub_1002D4E6C(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyLocalStreamState", a2);
}

void sub_1002D4E7C(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 392) != a2)
  {
    *(_DWORD *)(a1 + 392) = a2;
    sub_1002D4D4C(a1, "kBTAudioMsgPropertyListenMode", a2);
  }
}

void sub_1002D4EA0(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyListenModeSupported", a2);
}

void sub_1002D4EB0(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyAllowSpatialAudio", *v2);
}

void sub_1002D4ED8(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyAccessHeadTrack", *v2);
}

void sub_1002D4F00(uint64_t a1, void *a2)
{
  CFStringRef Copy;
  __CFString *v4;

  v4 = a2;
  Copy = CFStringCreateCopy(kCFAllocatorDefault, v4);
  sub_1002D4F78(a1, "kBTAudioMsgPropertyForegroundApp", Copy);
  CFRelease(Copy);

}

void sub_1002D4F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002D4F78(uint64_t a1, const char *a2, const void *a3)
{
  if (sub_1002D3FC8(a1, a2, a3))
    sub_1002F9B58(a1 + 224, (uint64_t)a2, a3);
}

void sub_1002D4FC8(uint64_t a1, int a2, void *a3, int a4)
{
  id v7;
  NSObject *v8;
  const void **v9;
  __CFDictionary *Mutable;
  CFNumberRef v11;
  int valuePtr;
  uint8_t buf[4];
  id v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;

  valuePtr = a2;
  v7 = a3;
  v8 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    v14 = v7;
    v15 = 1024;
    v16 = a2;
    v17 = 1024;
    v18 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Update SpatialAudio App Based to BTHAL %@ Mode %d headTrack %d", buf, 0x18u);
  }
  if (a4)
    v9 = (const void **)&kCFBooleanTrue;
  else
    v9 = (const void **)&kCFBooleanFalse;
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(Mutable, CFSTR("kBTAudioMsgPropertySpatialBundleID"), v7);
  CFDictionaryAddValue(Mutable, CFSTR("kBTAudioMsgPropertySpatialMode"), v11);
  CFDictionaryAddValue(Mutable, CFSTR("kBTAudioMsgPropertyHeadTrack"), *v9);
  sub_1002D3FC8(a1, "kBTAudioMsgPropertySpatialAudioAppBasedMode", Mutable);
  sub_1002F9B58(a1 + 224, (uint64_t)"kBTAudioMsgPropertySpatialAudioAppBasedMode", Mutable);
  CFRelease(v11);
  CFRelease(Mutable);

}

void sub_1002D5170(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002D518C(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 397) != a2)
  {
    *(_BYTE *)(a1 + 397) = a2;
    sub_1002D4D4C(a1, "kBTAudioMsgPropertyOneBudANCMode", a2);
  }
}

void sub_1002D51B0(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyDOAPSupported", *v2);
}

void sub_1002D51D8(uint64_t a1, CFUUIDBytes *a2)
{
  sub_1002D4458(a1, "kBTAudioMsgPropertyDOAPUuid", a2);
}

void sub_1002D51E8(uint64_t a1, CFUUIDBytes *a2)
{
  sub_1002D4458(a1, "kBTAudioMsgPropertyDeviceUUID", a2);
}

void sub_1002D51F8(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyProductID", a2);
}

void sub_1002D5208(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyVersion", a2);
}

void sub_1002D5218(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyVendorID", a2);
}

void sub_1002D5228(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyLiveListenSupported", *v2);
}

void sub_1002D5250(uint64_t a1, float a2)
{
  sub_1002D525C(a1, "kBTAudioMsgPropertyDosimetrySensitivity", a2);
}

void sub_1002D525C(uint64_t a1, const char *a2, float a3)
{
  CFNumberRef v5;
  float valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloatType, &valuePtr);
  sub_1002D4F78(a1, a2, v5);
  CFRelease(v5);
}

void sub_1002D52C4(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertySupportedServices", a2);
}

void sub_1002D52D4(uint64_t a1, int **a2)
{
  CFMutableArrayRef Mutable;
  __CFArray *v5;
  int *v6;
  int v7;
  CFNumberRef v8;
  NSObject *v9;
  NSObject *v10;
  uint8_t v11[12];
  int valuePtr;
  uint8_t buf[16];

  Mutable = CFArrayCreateMutable(kCFAllocatorDefault, a2[1] - *a2, &kCFTypeArrayCallBacks);
  if (Mutable)
  {
    v5 = Mutable;
    v6 = *a2;
    while (v6 != a2[1])
    {
      v7 = *v6++;
      valuePtr = v7;
      v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &valuePtr);
      CFArrayAppendValue(v5, v8);
      CFRelease(v8);
    }
    v9 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "setDosimetryVolumeCurve set", v11, 2u);
    }
    sub_1002D4F78(a1, "kBTAudioMsgPropertyDosimetryVolumeCurve", v5);
    CFRelease(v5);
  }
  else
  {
    v10 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "setDosimetryVolumeCurve failed", buf, 2u);
    }
  }
}

void sub_1002D5428(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyEURegionBit", a2);
}

void sub_1002D5438(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyWSModeSupported", *v2);
}

void sub_1002D5460(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyWSModeEnabled", *v2);
}

void sub_1002D5488(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyWSIsGuestDevice", *v2);
}

void sub_1002D54B0(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyWSIsGuestNotInContactsDevice", *v2);
}

void sub_1002D54D8(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertySoftwareVolumeSupported", *v2);
}

void sub_1002D5500(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertySupportSpatialAudio", *v2);
}

void sub_1002D5528(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertySupportHighQualityBiDirectionalAudio", *v2);
}

void sub_1002D5550(uint64_t a1, void *a2)
{
  const __CFData *v3;
  CFDataRef Copy;
  const __CFData *v5;
  NSObject *v6;
  _DWORD v7[2];

  v3 = a2;
  if (v3)
    Copy = CFDataCreateCopy(kCFAllocatorDefault, v3);
  else
    Copy = (CFDataRef)objc_alloc_init((Class)NSData);
  v5 = Copy;
  if (Copy)
  {
    v6 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 67109120;
      v7[1] = CFDataGetLength(v5);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Spatial Profile Size %d", (uint8_t *)v7, 8u);
    }
    sub_1002D4F78(a1, "kBTAudioMsgPropertySoundProfile", v5);
    CFRelease(v5);
  }

}

void sub_1002D5658(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002D5674(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertySupportSoundProfile", *v2);
}

void sub_1002D569C(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyAdaptiveVolume", *v2);
}

void sub_1002D56C4(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyAdaptiveVolumeMode", a2);
}

void sub_1002D56D4(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyMuteControl", *v2);
}

void sub_1002D56FC(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyConversationDetect", *v2);
}

void sub_1002D5724(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyBudSideLoudnessEqControlSupported", *v2);
}

void sub_1002D574C(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyBudSideLoudnessEqEnabled", *v2);
}

void sub_1002D5774(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyDigitalCrownSupported", *v2);
}

void sub_1002D579C(uint64_t a1, int a2)
{
  const void **v3;
  const void *v4;

  v3 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v3 = (const void **)&kCFBooleanFalse;
  v4 = *v3;
  sub_1002D3FC8(a1, "kBTAudioMsgPropertyOwnershipHijack", *v3);
  sub_1002F9B58(a1 + 224, (uint64_t)"kBTAudioMsgPropertyOwnershipHijack", v4);
}

void sub_1002D57FC(uint64_t a1, int a2)
{
  const void **v3;
  const void *v4;

  v3 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v3 = (const void **)&kCFBooleanFalse;
  v4 = *v3;
  sub_1002D3FC8(a1, "kBTAudioMsgPropertyAllowAutoRoute", *v3);
  sub_1002F9B58(a1 + 224, (uint64_t)"kBTAudioMsgPropertyAllowAutoRoute", v4);
}

void sub_1002D585C(uint64_t a1, int a2)
{
  const void **v3;
  const void *v4;

  v3 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v3 = (const void **)&kCFBooleanFalse;
  v4 = *v3;
  sub_1002D3FC8(a1, "kBTAudioMsgPropertyIsHidden", *v3);
  sub_1002F9B58(a1 + 224, (uint64_t)"kBTAudioMsgPropertyIsHidden", v4);
}

void sub_1002D58BC(uint64_t a1, const char *a2, uint64_t a3)
{
  CFNumberRef v5;
  uint64_t valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, &valuePtr);
  sub_1002D4F78(a1, a2, v5);
  CFRelease(v5);
}

void sub_1002D5924(uint64_t a1, const char *a2, double a3)
{
  CFNumberRef v5;
  double valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
  sub_1002D4F78(a1, a2, v5);
  CFRelease(v5);
}

const void *sub_1002D598C(uint64_t a1, const char *a2)
{
  CFStringRef v4;
  const void *Value;
  _QWORD v7[2];

  v7[0] = 0;
  v7[1] = 0;
  sub_10003415C((uint64_t)v7, a1 + 32);
  v4 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v4);
  CFRelease(v4);
  sub_100034234((uint64_t)v7);
  return Value;
}

void sub_1002D5A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D5A20(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = 0;
  v4[1] = 0;
  sub_10003415C((uint64_t)v4, a1 + 160);
  v2 = *(unsigned __int8 *)(a1 + 398);
  sub_100034234((uint64_t)v4);
  return v2;
}

void sub_1002D5A64(uint64_t *a1, char *__s1, const __CFNumber *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *CStringPtr;
  _BOOL8 v14;
  NSObject *v15;
  const char *v16;
  std::string *p_valuePtr;
  void *v18;
  void *v19;
  int Count;
  CFIndex v21;
  uint64_t v22;
  const __CFNumber *ValueAtIndex;
  std::string::size_type size;
  std::string::size_type v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  int v33;
  const void *v34;
  uint64_t v35;
  int64_t v36;
  char *v37;
  void *v38;
  void *__dst;
  uint64_t v40;
  std::string __p;
  std::string valuePtr;
  CFBooleanRef BOOLean;
  void *value;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  std::string *v48;

  if (!strcmp(__s1, "kBTAudioMsgPropertyVolumeScalar"))
  {
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
    if (CFNumberGetValue(a3, kCFNumberFloatType, &valuePtr))
      (*(void (**)(uint64_t *, float))(*a1 + 208))(a1, *(float *)&valuePtr.__r_.__value_.__l.__data_);
  }
  else if (!strcmp(__s1, "kBTAudioMsgPropertyInputVolumeScalar"))
  {
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
    if (CFNumberGetValue(a3, kCFNumberFloatType, &valuePtr))
      (*(void (**)(uint64_t *, float))(*a1 + 216))(a1, *(float *)&valuePtr.__r_.__value_.__l.__data_);
  }
  else if (!strcmp(__s1, "kBTAudioMsgPropertyOwnershipStateChanged"))
  {
    BOOLean = 0;
    value = 0;
    memset(&valuePtr, 0, sizeof(valuePtr));
    sub_100091AE8(&valuePtr, "");
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("kBTAudioMsgPropertyOwnershipStateAddr"), (const void **)&value))
    {
      CStringPtr = CFStringGetCStringPtr((CFStringRef)value, 0x8000100u);
      std::string::assign(&valuePtr, CStringPtr);
    }
    if (CFDictionaryGetValueIfPresent(a3, CFSTR("kBTAudioMsgPropertyOwnershipState"), (const void **)&BOOLean))
      v14 = CFBooleanGetValue(BOOLean) != 0;
    else
      v14 = 0;
    v15 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v16 = "false";
      if (v14)
        v16 = "true";
      p_valuePtr = &valuePtr;
      if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446466;
      v46 = v16;
      v47 = 2082;
      v48 = p_valuePtr;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Got ownership state change of %{public}s for device %{public}s", buf, 0x16u);
    }
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_100924158);
    v18 = off_100977A80;
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
      sub_10003430C(&__p, valuePtr.__r_.__value_.__l.__data_, valuePtr.__r_.__value_.__l.__size_);
    else
      __p = valuePtr;
    sub_10027BFB4((uint64_t)v18, (unsigned __int8 *)&__p, v14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
    {
      v19 = (void *)valuePtr.__r_.__value_.__r.__words[0];
LABEL_63:
      operator delete(v19);
    }
  }
  else if (!strcmp(__s1, "kBTAudioMsgPropertyListenMode"))
  {
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
    CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
    if (qword_100977A88 != -1)
      dispatch_once(&qword_100977A88, &stru_100924158);
    sub_1002802BC((uint64_t)off_100977A80, a1[45], LODWORD(valuePtr.__r_.__value_.__l.__data_));
  }
  else
  {
    if (!strcmp(__s1, "kBTAudioMsgPropertyDosimetrySensitivity"))
    {
      LODWORD(valuePtr.__r_.__value_.__l.__data_) = 0;
      CFNumberGetValue(a3, kCFNumberFloat32Type, &valuePtr);
      sub_10045132C(a1[45], *(float *)&valuePtr.__r_.__value_.__l.__data_);
      return;
    }
    if (strcmp(__s1, "kBTAudioMsgPropertyDosimetryVolumeCurve"))
    {
      v6 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
        sub_1006DC930((uint64_t)__s1, v6, v7, v8, v9, v10, v11, v12);
      return;
    }
    Count = CFArrayGetCount(a3);
    memset(&valuePtr, 0, sizeof(valuePtr));
    if (Count <= 0)
    {
      v35 = a1[45];
      __dst = 0;
      v40 = 0;
      v38 = 0;
    }
    else
    {
      v21 = 0;
      v22 = Count;
      do
      {
        *(_DWORD *)buf = 0;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a3, v21);
        CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, buf);
        size = valuePtr.__r_.__value_.__l.__size_;
        if (valuePtr.__r_.__value_.__l.__size_ >= valuePtr.__r_.__value_.__r.__words[2])
        {
          v26 = (void *)valuePtr.__r_.__value_.__r.__words[0];
          v27 = (uint64_t)(valuePtr.__r_.__value_.__l.__size_ - valuePtr.__r_.__value_.__r.__words[0]) >> 2;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 62)
            abort();
          v29 = valuePtr.__r_.__value_.__r.__words[2] - valuePtr.__r_.__value_.__r.__words[0];
          if ((uint64_t)(valuePtr.__r_.__value_.__r.__words[2] - valuePtr.__r_.__value_.__r.__words[0]) >> 1 > v28)
            v28 = v29 >> 1;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
            v30 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
          {
            v31 = (char *)sub_1002B46E0((uint64_t)&valuePtr.__r_.__value_.__r.__words[2], v30);
            size = valuePtr.__r_.__value_.__l.__size_;
            v26 = (void *)valuePtr.__r_.__value_.__r.__words[0];
          }
          else
          {
            v31 = 0;
          }
          v32 = &v31[4 * v27];
          *(_DWORD *)v32 = *(_DWORD *)buf;
          v25 = (std::string::size_type)(v32 + 4);
          while ((void *)size != v26)
          {
            v33 = *(_DWORD *)(size - 4);
            size -= 4;
            *((_DWORD *)v32 - 1) = v33;
            v32 -= 4;
          }
          valuePtr.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
          valuePtr.__r_.__value_.__l.__size_ = v25;
          valuePtr.__r_.__value_.__r.__words[2] = (std::string::size_type)&v31[4 * v30];
          if (v26)
            operator delete(v26);
        }
        else
        {
          *(_DWORD *)valuePtr.__r_.__value_.__l.__size_ = *(_DWORD *)buf;
          v25 = size + 4;
        }
        valuePtr.__r_.__value_.__l.__size_ = v25;
        ++v21;
      }
      while (v21 != v22);
      v34 = (const void *)valuePtr.__r_.__value_.__r.__words[0];
      v35 = a1[45];
      __dst = 0;
      v40 = 0;
      v38 = 0;
      v36 = v25 - valuePtr.__r_.__value_.__r.__words[0];
      if (v25 != valuePtr.__r_.__value_.__r.__words[0])
      {
        sub_1002D65D4(&v38, v36 >> 2);
        v37 = (char *)__dst;
        memmove(__dst, v34, v36);
        __dst = &v37[4 * (v36 >> 2)];
      }
    }
    sub_100451478(v35, (uint64_t)&v38);
    if (v38)
    {
      __dst = v38;
      operator delete(v38);
    }
    v19 = (void *)valuePtr.__r_.__value_.__r.__words[0];
    if (valuePtr.__r_.__value_.__r.__words[0])
    {
      valuePtr.__r_.__value_.__l.__size_ = valuePtr.__r_.__value_.__r.__words[0];
      goto LABEL_63;
    }
  }
}

void sub_1002D5F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002D5FD4(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
    sub_1006DC994(a2, v3, v4, v5, v6, v7, v8, v9);
}

void sub_1002D601C(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
    sub_1006DC9F8(a2, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1002D6064(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];

  if (a1[34] && (v10 = qword_1009997E0, os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT)))
  {
    sub_1006DCACC(v10, v11, v12, v13, v14, v15, v16, v17);
    if (!a2)
      goto LABEL_6;
  }
  else if (!a2)
  {
    goto LABEL_6;
  }
  if (a3)
  {
    a1[34] = a2;
    a1[35] = a3;
    sub_1002C54A0((uint64_t)(a1 + 36), a2);
  }
LABEL_6:
  if (a1[39] && (v18 = qword_1009997E0, os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_FAULT)))
  {
    sub_1006DCA5C(v18, v19, v20, v21, v22, v23, v24, v25);
    if (!a4)
      goto LABEL_14;
  }
  else if (!a4)
  {
    goto LABEL_14;
  }
  if (a5)
  {
    a1[39] = a4;
    a1[40] = a5;
    sub_1002C54A0((uint64_t)(a1 + 41), a4);
    return (*(uint64_t (**)(_QWORD *))(*a1 + 184))(a1);
  }
LABEL_14:
  if (!(a2 | a4))
  {
    v28[0] = 0;
    v28[1] = 0;
    sub_10003415C((uint64_t)v28, (uint64_t)(a1 + 20));
    v26 = a1[44];
    if (v26)
      sub_1004C5FAC(v26);
    sub_100034264((uint64_t)v28);
    sub_100034234((uint64_t)v28);
  }
  return (*(uint64_t (**)(_QWORD *))(*a1 + 184))(a1);
}

void sub_1002D6184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002D6198(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1);
  v1 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Timed audio delivery speed modification completed", v2, 2u);
  }
}

uint64_t sub_1002D6208(uint64_t a1)
{
  uint64_t result;
  _QWORD v3[2];

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  if (*(_QWORD *)(a1 + 272) && *(_QWORD *)(a1 + 280))
  {
    sub_1002C5510(a1 + 288);
    result = munmap(*(void **)(a1 + 272), *(_QWORD *)(a1 + 280));
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
  }
  if (*(_QWORD *)(a1 + 312))
  {
    if (*(_QWORD *)(a1 + 320))
    {
      v3[0] = 0;
      v3[1] = 0;
      sub_10003415C((uint64_t)v3, a1 + 96);
      sub_1002C5510(a1 + 328);
      sub_100034264((uint64_t)v3);
      munmap(*(void **)(a1 + 312), *(_QWORD *)(a1 + 320));
      *(_QWORD *)(a1 + 312) = 0;
      *(_QWORD *)(a1 + 320) = 0;
      return sub_100034234((uint64_t)v3);
    }
  }
  return result;
}

void sub_1002D62A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D62BC(uint64_t a1, const char *a2, const void *a3)
{
  uint64_t result;

  result = sub_1002D3FC8(a1, a2, a3);
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, const char *, const void *))(*(_QWORD *)a1 + 160))(a1, a2, a3);
  return result;
}

uint64_t sub_1002D6318(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
}

uint64_t sub_1002D6328(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "audioPluginBiToUniTransition", v4, 2u);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 256))(a1);
}

uint64_t sub_1002D63A0(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  v2 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "audioPluginUniToBiTransition", v4, 2u);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
}

uint64_t sub_1002D6418(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
}

uint64_t sub_1002D6424(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
}

uint64_t sub_1002D6430(uint64_t a1)
{
  CFDictionaryRef Copy;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  if (*(_QWORD *)(a1 + 272) || *(_QWORD *)(a1 + 312))
    sub_1002D6208(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  v12[0] = 0;
  v12[1] = 0;
  sub_10003415C((uint64_t)v12, a1 + 32);
  Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, *(CFDictionaryRef *)(a1 + 16));
  if (Copy)
  {
    sub_1002F9768(a1 + 224, *(_DWORD *)(a1 + 8), Copy);
    CFRelease(Copy);
  }
  else
  {
    v3 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006DC6F0(v3, v4, v5, v6, v7, v8, v9, v10);
  }
  return sub_100034234((uint64_t)v12);
}

void sub_1002D64F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100034234((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002D6508(uint64_t a1)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "AudioDevice self deleting", v3, 2u);
  }
  if (a1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t sub_1002D6584(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
}

void sub_1002D6590(uint64_t a1, int a2)
{
  const void **v2;

  v2 = (const void **)&kCFBooleanTrue;
  if (!a2)
    v2 = (const void **)&kCFBooleanFalse;
  sub_1002D4F78(a1, "kBTAudioMsgPropertyIsGenuineAirPods", *v2);
}

uint64_t sub_1002D65B8()
{
  return 0;
}

char *sub_1002D65D4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    abort();
  result = (char *)sub_1002B46E0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void sub_1002D6610(id a1)
{
  operator new();
}

void sub_1002D6650()
{
  operator delete();
}

uint64_t sub_1002D6674(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)sub_100278350(a1, 8);
  *v2 = off_10093A190;
  v2[32] = off_10093A250;
  v2[33] = off_10093A278;
  v2[34] = &off_10093A2C0;
  sub_1000160D0(v2 + 35);
  *(_QWORD *)(a1 + 344) = a1 + 352;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  sub_1000160D0(a1 + 392);
  *(_QWORD *)(a1 + 456) = a1 + 464;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = a1 + 488;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 504) = a1 + 512;
  *(_QWORD *)(a1 + 512) = 0;
  *(_WORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  return a1;
}

void sub_1002D6730(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD **v8;

  v7 = v6;
  v8 = v4;
  sub_10001A82C(v7, *v5);
  sub_10001A82C(v3, *v8);
  sub_100069BDC(v2);
  sub_100278464(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D6774(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_1002D67F4(id a1)
{
  operator new();
}

void sub_1002D6834()
{
  operator delete();
}

uint64_t sub_1002D6858(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_1002D3720(a1, 1953260897);
  *v4 = &off_100924188;
  v4[50] = a2;
  v4[51] = 0;
  v4[52] = 0;
  v4[53] = 0;
  sub_1002D4B4C((uint64_t)v4, 1);
  return a1;
}

void sub_1002D68B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 416) = v4;
    operator delete(v4);
  }
  sub_1002D383C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D68D8(_QWORD *a1)
{
  void *v2;

  *a1 = &off_100924188;
  v2 = (void *)a1[51];
  if (v2)
  {
    a1[52] = v2;
    operator delete(v2);
  }
  return sub_1002D383C((uint64_t)a1);
}

void sub_1002D6918(_QWORD *a1)
{
  sub_1002D68D8(a1);
  operator delete();
}

void sub_1002D6940(uint64_t a1, uint64_t a2, CFNumberRef number)
{
  void (*v4)(void);
  int v5;
  int valuePtr;

  if ((_DWORD)a2 == 10)
  {
    v5 = 0;
    if (!CFNumberGetValue(number, kCFNumberIntType, &v5))
      return;
    v4 = *(void (**)(void))(**(_QWORD **)(a1 + 400) + 48);
    goto LABEL_7;
  }
  if ((_DWORD)a2 != 9)
  {
    sub_1002D5FD4(a1, a2);
    return;
  }
  valuePtr = 0;
  if (CFNumberGetValue(number, kCFNumberIntType, &valuePtr))
  {
    v4 = *(void (**)(void))(**(_QWORD **)(a1 + 400) + 40);
LABEL_7:
    v4();
  }
}

uint64_t sub_1002D69F0(uint64_t a1)
{
  return (***(uint64_t (****)(_QWORD, uint64_t))(a1 + 400))(*(_QWORD *)(a1 + 400), a1);
}

uint64_t sub_1002D6A04(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 400) + 8))(*(_QWORD *)(a1 + 400), a1);
}

uint64_t sub_1002D6A18(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 400) + 16))(*(_QWORD *)(a1 + 400), a1);
}

uint64_t sub_1002D6A2C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 400) + 32))(*(_QWORD *)(a1 + 400), a1);
}

uint64_t sub_1002D6A40(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 400) + 24))(*(_QWORD *)(a1 + 400), a1);
}

BOOL sub_1002D6A54(uint64_t a1)
{
  return sub_1002D4534(a1) || sub_1002D4544(a1);
}

uint64_t sub_1002D6A94(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 400) + 56))(*(_QWORD *)(a1 + 400), a1);
}

uint64_t *sub_1002D6AA8@<X0>(uint64_t **a1@<X1>, uint64_t **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v11[3];

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = *a1;
  v7 = a1[1];
  LOBYTE(v11[0]) = 0;
  std::__sort<std::__less<int,int> &,int *>(v6, v7, v11);
  v8 = *a2;
  v9 = a2[1];
  LOBYTE(v11[0]) = 0;
  std::__sort<std::__less<int,int> &,int *>(v8, v9, v11);
  return sub_1002D6E2C(*a1, a1[1], *a2, a2[1], (uint64_t)a3, v11);
}

void sub_1002D6B1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002D6B38(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  const void *v4;
  size_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __CFArray *Mutable;
  int *v11;
  int v12;
  CFNumberRef v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  void *__p;
  void *v18;
  uint64_t v19;

  v3 = (uint64_t **)(a1 + 408);
  if (*(_QWORD *)(a1 + 408) != *(_QWORD *)(a1 + 416))
  {
    __p = 0;
    v18 = 0;
    v19 = 0;
    sub_1002D70C0(&__p, a2);
    v14 = 0;
    v15 = 0;
    v16 = 0;
    sub_1002D6AA8(v3, (uint64_t **)&__p, &v14);
    v4 = *(const void **)(a1 + 408);
    v5 = *(_QWORD *)(a1 + 416) - (_QWORD)v4;
    v6 = v14;
    v7 = (uint64_t)v15;
    v8 = v15 - v14;
    if (v5 == v15 - v14)
    {
      v9 = memcmp(v4, v14, v5);
      if (v3 == (uint64_t **)&v14 || !v9)
        goto LABEL_10;
    }
    else if (v3 == (uint64_t **)&v14)
    {
LABEL_10:
      if (v6)
      {
        v15 = v6;
        operator delete(v6);
      }
      if (__p)
      {
        v18 = __p;
        operator delete(__p);
      }
      goto LABEL_14;
    }
    sub_1002D6FBC((char *)v3, v6, v7, v8 >> 2);
    v6 = v14;
    goto LABEL_10;
  }
  if (v3 != (uint64_t **)a2)
    sub_1002D6FBC((char *)(a1 + 408), *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
LABEL_14:
  Mutable = CFArrayCreateMutable(kCFAllocatorDefault, (uint64_t)(*(_QWORD *)(a1 + 416) - *(_QWORD *)(a1 + 408)) >> 2, &kCFTypeArrayCallBacks);
  v11 = *(int **)(a1 + 408);
  while (v11 != *(int **)(a1 + 416))
  {
    v12 = *v11++;
    LODWORD(__p) = v12;
    v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &__p);
    CFArrayAppendValue(Mutable, v13);
    CFRelease(v13);
  }
  sub_1002D4F78(a1, "kBTAudioMsgPropertySupportedCodecs", Mutable);
  CFRelease(Mutable);
}

void sub_1002D6CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_1002D6D00(uint64_t a1, uint64_t a2)
{
  sub_1002D58BC(a1, "kBTAudioMsgPropertyMaxPacketSize", a2);
}

void sub_1002D6D10(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyIsStereo", a2);
}

BOOL sub_1002D6D20(uint64_t a1, BOOL *a2)
{
  return sub_1002D4C68(a1, "kBTAudioMsgPropertyIsStereo", a2);
}

void sub_1002D6D30(uint64_t a1, int a2)
{
  sub_1002D4D4C(a1, "kBTAudioMsgPropertyDirection", a2);
}

const __CFNumber *sub_1002D6D40(uint64_t a1, void *a2)
{
  return sub_1002D4CBC(a1, "kBTAudioMsgPropertyDirection", a2);
}

void sub_1002D6D50(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertySupportsAudioMixing", a2);
}

void sub_1002D6D60(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyInputAudio", a2);
}

uint64_t sub_1002D6D70()
{
  return 0;
}

void sub_1002D6D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  int v5;
  uint64_t v6;

  v4 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 134217984;
    v6 = a3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "LEAAudioDevice readHandler called on data of size %lu", (uint8_t *)&v5, 0xCu);
  }
}

void sub_1002D6E18(uint64_t a1, int a2)
{
  sub_1002D4B74(a1, "kBTAudioMsgPropertyECNRIsEnabled", a2);
}

uint64_t *sub_1002D6E2C@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t **a6@<X8>)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;

  v11 = a5;
  if (result != a2)
  {
    v9 = a3;
    if (a3 != a4)
    {
      v10 = result;
      do
      {
        if (*(_DWORD *)v10 >= *(_DWORD *)v9)
        {
          if (*(_DWORD *)v9 >= *(_DWORD *)v10)
          {
            result = sub_1002D6ED4(&v11, v10);
            v10 = (uint64_t *)((char *)v10 + 4);
          }
          v9 = (uint64_t *)((char *)v9 + 4);
        }
        else
        {
          v10 = (uint64_t *)((char *)v10 + 4);
        }
      }
      while (v10 != a2 && v9 != a4);
      a5 = v11;
    }
  }
  *a6 = a2;
  a6[1] = a4;
  a6[2] = (uint64_t *)a5;
  return result;
}

uint64_t *sub_1002D6ED4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = *a1;
  v5 = *(_DWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      abort();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_1002B46E0((uint64_t)v6, v12);
      v8 = *(_DWORD **)v4;
      v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

char *sub_1002D6FBC(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      abort();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1002D65D4(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

_QWORD *sub_1002D70C0(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    sub_1002D65D4(a1, v5 >> 2);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

uint64_t sub_1002D7124(uint64_t a1, int a2)
{
  void **v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  _DWORD v11[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v4 = (void **)(a1 + 80);
  *(_QWORD *)a1 = &off_1009242A8;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 70) = 0;
  v5 = TSNullClockIdentifier;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 112;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  sub_1000160D0(a1 + 224);
  *(_BYTE *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 164) = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v6 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v11[0] = 67109120;
    v11[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine Instance created Accuracy=%d", (uint8_t *)v11, 8u);
  }
  v7 = objc_claimAutoreleasedReturnValue(+[TSClockManager sharedClockManager](TSClockManager, "sharedClockManager"));
  v8 = *v4;
  *v4 = (void *)v7;

  if (!*v4)
  {
    v9 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Warning: Audio Time Synchronization Shared Clock manager initialization failed", (uint8_t *)v11, 2u);
    }
  }
  *(_WORD *)(a1 + 76) = 0;
  return a1;
}

void sub_1002D72F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  _QWORD **v7;
  void *v9;
  std::__shared_weak_count *v10;

  sub_100069BDC(v5);
  sub_10001A82C(v4, *v7);
  sub_10009F88C(v3);
  v9 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 144) = v9;
    operator delete(v9);
  }
  sub_10001A82C(v2, *(_QWORD **)(v1 + 112));

  v10 = *(std::__shared_weak_count **)(v1 + 16);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D7368(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  unsigned __int8 v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  void *v20;
  std::__shared_weak_count *v21;
  __int128 v23;
  uint8_t buf[8];
  uint64_t v25;
  id v26;

  v2 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine Cleanup", buf, 2u);
  }
  sub_1002D7634(a1, 0, *(_DWORD *)(a1 + 164));
  v3 = *(_QWORD *)(a1 + 96);
  v4 = TSNullClockIdentifier;
  if (v3 == TSNullClockIdentifier)
  {
    v5 = 0;
  }
  else
  {
    v6 = *(void **)(a1 + 80);
    v26 = 0;
    v7 = objc_msgSend(v6, "removeUserFilteredClockWithIdentifier:error:", v3, &v26);
    v5 = v26;
    if ((v7 & 1) == 0)
    {
      v8 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: Audio Time Synchronization Shared Clock Engine cleanup Failed", buf, 2u);
      }
    }
  }
  *(_QWORD *)buf = 0;
  v25 = 0;
  sub_10003415C((uint64_t)buf, a1 + 224);
  v9 = *(_QWORD **)(a1 + 104);
  v10 = (_QWORD *)(a1 + 112);
  if (v9 != (_QWORD *)(a1 + 112))
  {
    do
    {
      if (v9[4])
        operator delete();
      v11 = (_QWORD *)v9[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v9[2];
          v13 = *v12 == (_QWORD)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != v10);
  }
  sub_10001A82C(a1 + 104, *(_QWORD **)(a1 + 112));
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = v10;
  *(_WORD *)(a1 + 76) = 0;
  v14 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;

  v15 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;

  *(_QWORD *)(a1 + 96) = v4;
  v23 = 0uLL;
  sub_100274874(a1 + 176, &v23);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v23) = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine Cleanup - Completed", (uint8_t *)&v23, 2u);
  }
  sub_100034234((uint64_t)buf);

  sub_100069BDC(a1 + 224);
  sub_10001A82C(a1 + 200, *(_QWORD **)(a1 + 208));
  sub_10009F88C(a1 + 176);
  v20 = *(void **)(a1 + 136);
  if (v20)
  {
    *(_QWORD *)(a1 + 144) = v20;
    operator delete(v20);
  }
  sub_10001A82C(a1 + 104, *(_QWORD **)(a1 + 112));

  v21 = *(std::__shared_weak_count **)(a1 + 16);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_1002D7614(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  sub_1006DCB3C(v1);
  _Unwind_Resume(a1);
}

void sub_1002D7634(uint64_t a1, char a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[6];
  int v6;
  char v7;

  v3 = *(_QWORD *)(a1 + 104);
  if (v3 == a1 + 112)
    v4 = 0;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1002D9F50;
  v5[3] = &unk_1009242E0;
  v5[4] = a1;
  v5[5] = v4;
  v7 = a2;
  v6 = a3;
  sub_1002D9E94((os_unfair_lock_s *)(a1 + 128), v5);
}

void sub_1002D76BC(uint64_t a1, unint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  NSObject *v13;
  uint64_t v14;
  void **v15;
  int v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  void *__p[2];
  char v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  int v28;

  v3 = (uint64_t **)(a1 + 104);
  v4 = *(uint64_t **)(a1 + 104);
  v5 = (uint64_t *)(a1 + 112);
  if (v4 != (uint64_t *)(a1 + 112))
  {
    do
    {
      if (*(_QWORD *)v4[4] == a2)
      {
        if (qword_100977B50 != -1)
          dispatch_once(&qword_100977B50, &stru_100924358);
        v10 = sub_1000229D8((_QWORD *)qword_100977B48, a2);
        v11 = v4[4];
        v8 = sub_1000040CC(v3, v4);
        operator delete(v4);
        v12 = *(_BYTE *)(a1 + 76) - 1;
        *(_BYTE *)(a1 + 76) = v12;
        v13 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          v14 = *(_QWORD *)(v11 + 8);
          if (v10)
          {
            sub_1000340DC(v10, (uint64_t)__p);
            v15 = __p;
            if (v22 < 0)
              v15 = (void **)__p[0];
            v16 = *(unsigned __int8 *)(a1 + 76);
            *(_DWORD *)buf = 134218498;
            v24 = v14;
            v25 = 2082;
            v26 = (const char *)v15;
            v27 = 1024;
            v28 = v16;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Audio Timesync: removeRemoteTimesyncSesssion  : Remote Timesync BTAddr = %llx] session= %{public}s mNumBTTimeSyncClient=%d", buf, 0x1Cu);
            if (v22 < 0)
              operator delete(__p[0]);
          }
          else
          {
            *(_DWORD *)buf = 134218498;
            v24 = v14;
            v25 = 2082;
            v26 = "(NULL)";
            v27 = 1024;
            v28 = v12;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Audio Timesync: removeRemoteTimesyncSesssion  : Remote Timesync BTAddr = %llx] session= %{public}s mNumBTTimeSyncClient=%d", buf, 0x1Cu);
          }
LABEL_20:
          operator delete();
        }
        if (v11)
          goto LABEL_20;
      }
      else
      {
        v7 = (uint64_t *)v4[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v4[2];
            v9 = *v8 == (_QWORD)v4;
            v4 = v8;
          }
          while (!v9);
        }
      }
      v4 = v8;
    }
    while (v8 != v5);
  }
  v17 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v18 = *(unsigned __int8 *)(a1 + 76);
    *(_DWORD *)buf = 67109120;
    LODWORD(v24) = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine un-Register : ref count %d ", buf, 8u);
  }
  if (!*(_BYTE *)(a1 + 76))
  {
    if (*(_BYTE *)(a1 + 77))
    {
      v19 = *(_QWORD *)(a1 + 192);
      if (v19)
      {
        sub_1002D8B88(a1, v19, 0, 0);
        sub_1002D8B88(a1, *(_QWORD *)(a1 + 192), 0, 1);
        sub_1002D8B88(a1, *(_QWORD *)(a1 + 192), 0, 2);
        v20 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine un-Register : No more reference counter should be freed by parent now", buf, 2u);
        }
      }
    }
  }
}

uint64_t sub_1002D7A10(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  _QWORD block[5];
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint8_t buf[16];
  _QWORD v23[2];

  v23[0] = 0;
  v23[1] = 0;
  sub_10003415C((uint64_t)v23, a1 + 224);
  if (*(_BYTE *)(a1 + 76))
  {
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(std::__shared_weak_count **)(a1 + 16);
    if (v8)
    {
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
    }
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_100924338);
    v12 = *((_QWORD *)off_100977A90 + 31);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_1002D7B78;
    block[3] = &unk_1009242B0;
    block[4] = v9;
    v18 = v8;
    if (v8)
    {
      v13 = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v19 = a3;
    v20 = a2;
    v21 = a4;
    dispatch_async(v12, block);
    if (v18)
      std::__shared_weak_count::__release_weak(v18);
    if (v8)
      std::__shared_weak_count::__release_weak(v8);
  }
  else
  {
    v15 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Audio Timesync: No Timesync clients, return", buf, 2u);
    }
  }
  return sub_100034234((uint64_t)v23);
}

void sub_1002D7B78(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 32);
      if (v5)
        sub_1002D7C1C(v5, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_DWORD *)(a1 + 64));
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1002D7C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10009F88C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D7C1C(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  _OWORD *v6;
  unint64_t v7;
  NSObject *v8;
  void *v9;
  unsigned __int8 v10;
  id v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t result;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint8_t v26[4];
  unsigned int v27;
  _BYTE buf[22];

  v6 = (_OWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 <= a2)
  {
    *v6 = *(_OWORD *)(a1 + 40);
    sub_1002DA610(a1, a2, a3);
    *(_QWORD *)(a1 + 40) = a3;
    *(_QWORD *)(a1 + 48) = a2;
    result = sub_1002D8408(a1);
    if ((result & 1) != 0)
    {
      if ((sub_1002DA4E4(a1, a3, *(_QWORD *)(a1 + 24)) & 1) == 0)
        sub_1002DA370((_QWORD *)a1, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 24));
    }
    else
    {
      if (!*(_QWORD *)(a1 + 32))
        goto LABEL_18;
      result = sub_1002DA4E4(a1, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 24));
      if (!(_DWORD)result || *(_QWORD *)(a1 + 40) <= *(_QWORD *)v6 || *(_QWORD *)(a1 + 48) <= *(_QWORD *)(a1 + 32))
        goto LABEL_18;
      sub_1002D9F74(a1);
      sub_1002DA2B0(a1, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24));
    }
    result = sub_1002DA2B0(a1, a2, a3);
LABEL_18:
    *(_DWORD *)(a1 + 72) = a4;
    return result;
  }
  v8 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: Audio Timesync: GPIO Toggle TS wrapped around Previous TS=%llu New TS=%llu", buf, 0x16u);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  sub_10003415C((uint64_t)buf, a1 + 224);
  if (*(_QWORD *)(a1 + 88))
  {
    sub_100034264((uint64_t)buf);
    v9 = *(void **)(a1 + 88);
    v25 = 0;
    v10 = objc_msgSend(v9, "resetSyncServiceWithError:", &v25);
    v11 = v25;
    if ((v10 & 1) == 0)
    {
      v12 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v13 = objc_msgSend(v11, "code");
        *(_DWORD *)v26 = 67109120;
        v27 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Warning: Audio Timesync: Timesync Reset Failed with status %x", v26, 8u);
      }
    }
    *v6 = 0u;
    v6[1] = 0u;

  }
  else
  {
    v17 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
      sub_1006DCBAC(v17, v18, v19, v20, v21, v22, v23, v24);
  }
  return sub_100034234((uint64_t)buf);
}

void sub_1002D7E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);

  sub_100034234((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002D7EA0(uint64_t a1, uint64_t a2, unint64_t a3, _BYTE *a4)
{
  uint64_t v8;
  NSObject *v9;
  void **v10;
  char v11;
  NSObject *v12;
  int v13;
  char v14;
  void *__p[2];
  char v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  const char *v21;

  if (a3)
  {
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100924358);
    v8 = sub_1000229D8((_QWORD *)qword_100977B48, a3);
    v9 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      if (v8)
      {
        sub_1000340DC(v8, (uint64_t)__p);
        if (v17 >= 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        *(_DWORD *)buf = 134218242;
        v19 = a2;
        v20 = 2082;
        v21 = (const char *)v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Registering Remote timesync : Remote Timesync BTAddr = %llx] session= %{public}s", buf, 0x16u);
        if (v17 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_DWORD *)buf = 134218242;
        v19 = a2;
        v20 = 2082;
        v21 = "(NULL)";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Registering Remote timesync : Remote Timesync BTAddr = %llx] session= %{public}s", buf, 0x16u);
      }
    }
    sub_1002D80C0(a1, a3, a2);
    v11 = *(_BYTE *)(a1 + 76);
  }
  else
  {
    v11 = *(_BYTE *)(a1 + 76) + 1;
    *(_BYTE *)(a1 + 76) = v11;
  }
  *a4 = v11;
  v12 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(unsigned __int8 *)(a1 + 76);
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine Register : ref count %d ", (uint8_t *)__p, 8u);
  }
  v14 = sub_1002D8408(a1);
  sub_1002D7634(a1, v14, *(_DWORD *)(a1 + 164));
  return 1;
}

void sub_1002D80C0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  NSObject *v12;
  void **v13;
  int v14;
  int v15;
  void *__p[2];
  char v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;

  v6 = *(_QWORD **)(a1 + 104);
  if (v6 == (_QWORD *)(a1 + 112))
LABEL_10:
    operator new();
  while (1)
  {
    v7 = (_QWORD *)v6[4];
    if (v7[1] == a3 && *v7 == a2)
      break;
    v8 = (_QWORD *)v6[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v6[2];
        v10 = *v9 == (_QWORD)v6;
        v6 = v9;
      }
      while (!v10);
    }
    v6 = v9;
    if (v9 == (_QWORD *)(a1 + 112))
      goto LABEL_10;
  }
  if (qword_100977B50 != -1)
    dispatch_once(&qword_100977B50, &stru_100924358);
  v11 = sub_1000229D8((_QWORD *)qword_100977B48, a2);
  v12 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    if (v11)
    {
      sub_1000340DC(v11, (uint64_t)__p);
      if (v17 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      v14 = *(unsigned __int8 *)(a1 + 76);
      *(_DWORD *)buf = 134218498;
      v19 = a3;
      v20 = 2082;
      v21 = (const char *)v13;
      v22 = 1024;
      v23 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Registering  BTAddr = %llx for already registered session= %{public}s dropping! mNumBTTimeSyncClient=%d", buf, 0x1Cu);
      if (v17 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v15 = *(unsigned __int8 *)(a1 + 76);
      *(_DWORD *)buf = 134218498;
      v19 = a3;
      v20 = 2082;
      v21 = "(NULL)";
      v22 = 1024;
      v23 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Registering  BTAddr = %llx for already registered session= %{public}s dropping! mNumBTTimeSyncClient=%d", buf, 0x1Cu);
    }
  }
}

uint64_t sub_1002D8408(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t result;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  void *v8;
  uint64_t v9;
  unsigned __int8 v10;
  id v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t v22[8];
  id v23;
  uint8_t buf[24];

  if (*(_BYTE *)(a1 + 160))
  {
    if (qword_100977A98 != -1)
      dispatch_once(&qword_100977A98, &stru_100924338);
    v2 = off_100977A90;
    v3 = mach_absolute_time();
    if (sub_10051DF38((uint64_t)v2, v3 - *(_QWORD *)(a1 + 40), 0) > 10.0)
    {
      v7 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Warning: Audio Timesync: GPIO Toggle stopped, releasing timesync resources", buf, 2u);
      }
      *(_OWORD *)buf = 0uLL;
      sub_10003415C((uint64_t)buf, a1 + 224);
      if (*(_QWORD *)(a1 + 80))
      {
        sub_100034264((uint64_t)buf);
        v8 = *(void **)(a1 + 80);
        v9 = *(_QWORD *)(a1 + 96);
        v23 = 0;
        v10 = objc_msgSend(v8, "removeUserFilteredClockWithIdentifier:error:", v9, &v23);
        v11 = v23;
        if ((v10 & 1) == 0)
        {
          v12 = qword_1009997E0;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v22 = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Warning: Audio Time Synchronization Shared Clock Engine cleanup Failed", v22, 2u);
          }
        }
        v13 = *(void **)(a1 + 88);
        *(_QWORD *)(a1 + 88) = 0;

        *(_QWORD *)(a1 + 96) = TSNullClockIdentifier;
        sub_1002DA1BC(a1, 0, 1);
        sub_100034234((uint64_t)buf);

      }
      else
      {
        v14 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
          sub_1006DCBDC(v14, v15, v16, v17, v18, v19, v20, v21);
        sub_100034234((uint64_t)buf);
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    result = *(_QWORD *)(a1 + 88);
    if (result)
    {
      sub_1002DA1BC(a1, objc_msgSend((id)result, "lockState") == 2, 1);
      v5 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_BYTE *)(a1 + 160))
          v6 = "Ready";
        else
          v6 = "Not Ready";
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine Lock State = %s", buf, 0xCu);
      }
      return *(_BYTE *)(a1 + 160) != 0;
    }
  }
  return result;
}

void sub_1002D8694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  sub_100034234((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_1002D86B4(uint64_t a1, uint64_t a2, unint64_t a3, _BYTE *a4)
{
  uint64_t v8;
  NSObject *v9;
  void **v10;
  NSObject *v11;
  int v12;
  uint64_t v14;
  NSObject *v15;
  void *__p[2];
  char v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  const char *v21;

  if (a3)
  {
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100924358);
    v8 = sub_1000229D8((_QWORD *)qword_100977B48, a3);
    sub_1002D894C(a1, a3, a2);
    v9 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      if (v8)
      {
        sub_1000340DC(v8, (uint64_t)__p);
        if (v17 >= 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        *(_DWORD *)buf = 134218242;
        v19 = a2;
        v20 = 2082;
        v21 = (const char *)v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Un Registering Remote timesync : Remote Timesync BTAddr = %llx] session= %{public}s", buf, 0x16u);
        if (v17 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_DWORD *)buf = 134218242;
        v19 = a2;
        v20 = 2082;
        v21 = "(NULL)";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Un Registering Remote timesync : Remote Timesync BTAddr = %llx] session= %{public}s", buf, 0x16u);
      }
    }
  }
  else
  {
    --*(_BYTE *)(a1 + 76);
  }
  *a4 = *(_BYTE *)(a1 + 76);
  v11 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(unsigned __int8 *)(a1 + 76);
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine un-Register : ref count %d ", (uint8_t *)__p, 8u);
  }
  if (!*(_BYTE *)(a1 + 76))
  {
    if (*(_BYTE *)(a1 + 77))
    {
      v14 = *(_QWORD *)(a1 + 192);
      if (v14)
      {
        sub_1002D8B88(a1, v14, 0, 0);
        sub_1002D8B88(a1, *(_QWORD *)(a1 + 192), 0, 1);
        sub_1002D8B88(a1, *(_QWORD *)(a1 + 192), 0, 2);
        v15 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine un-Register : No more reference counter should be freed by parent now", (uint8_t *)__p, 2u);
        }
      }
    }
  }
  return 1;
}

uint64_t sub_1002D894C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  NSObject *v14;
  void **v15;
  int v16;
  int v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;

  v6 = *(_QWORD **)(a1 + 104);
  result = a1 + 104;
  v5 = v6;
  if (v6 != (_QWORD *)(result + 8))
  {
    while (1)
    {
      v9 = (_QWORD *)v5[4];
      if (v9[1] == a3 && *v9 == a2)
        break;
      v10 = (_QWORD *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v5[2];
          v12 = *v11 == (_QWORD)v5;
          v5 = v11;
        }
        while (!v12);
      }
      v5 = v11;
      if (v11 == (_QWORD *)(result + 8))
        return result;
    }
    v20 = v5[4];
    --*(_BYTE *)(a1 + 76);
    sub_100015ECC(result, (unint64_t *)&v20);
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100924358);
    v13 = sub_1000229D8((_QWORD *)qword_100977B48, a2);
    v14 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      if (v13)
      {
        sub_1000340DC(v13, (uint64_t)__p);
        if (v19 >= 0)
          v15 = __p;
        else
          v15 = (void **)__p[0];
        v16 = *(unsigned __int8 *)(a1 + 76);
        *(_DWORD *)buf = 134218498;
        v22 = a3;
        v23 = 2082;
        v24 = (const char *)v15;
        v25 = 1024;
        v26 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Unregister Remote timesync Completed  : Remote Timesync BTAddr = %llx] session= %{public}s mNumBTTimeSyncClient=%d", buf, 0x1Cu);
        if (v19 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v17 = *(unsigned __int8 *)(a1 + 76);
        *(_DWORD *)buf = 134218498;
        v22 = a3;
        v23 = 2082;
        v24 = "(NULL)";
        v25 = 1024;
        v26 = v17;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Unregister Remote timesync Completed  : Remote Timesync BTAddr = %llx] session= %{public}s mNumBTTimeSyncClient=%d", buf, 0x1Cu);
      }
    }
    result = v20;
    if (v20)
      operator delete();
  }
  return result;
}

void sub_1002D8B88(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  int v13;
  const char *v14;
  unsigned int v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  int v36;
  NSObject *v37;
  uint32_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  NSObject *v43;
  uint64_t **v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  const char *v49;
  int v50;
  int v51;
  int v52;
  _BYTE buf[14];
  _BYTE v54[10];

  if (qword_100977B40 != -1)
    dispatch_once(&qword_100977B40, &stru_100924378);
  v8 = *((unsigned __int8 *)off_100977B38 + 198);
  if (a4)
  {
    if (a4 == 2)
    {
      v9 = *(_DWORD *)(a1 + 172);
      if (a3)
      {
        v10 = v9 + 1;
LABEL_12:
        *(_DWORD *)(a1 + 172) = v10;
        goto LABEL_13;
      }
      if (v9)
      {
        v10 = v9 - 1;
        goto LABEL_12;
      }
    }
LABEL_13:
    v11 = 2;
    goto LABEL_14;
  }
  if (*((_BYTE *)off_100977B38 + 198))
    v11 = 2;
  else
    v11 = *(_DWORD *)(a1 + 164);
LABEL_14:
  v12 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_DWORD *)(a1 + 164);
    v14 = "true";
    *(_DWORD *)buf = 67109634;
    if (!v8)
      v14 = "false";
    *(_DWORD *)&buf[4] = a3;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v13;
    *(_WORD *)v54 = 2080;
    *(_QWORD *)&v54[2] = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Trigger updateReferenceTimeStampHardWareTrigger %d Accuracy %d, HfpStreaming %s", buf, 0x18u);
  }
  *(_QWORD *)(a1 + 192) = a2;
  v15 = a4 - 1;
  if ((a4 - 1) < 2)
  {
    v16 = 3;
    if (v11 != 2)
    {
      if (v11 != 1)
      {
LABEL_84:
        v43 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          v44 = (uint64_t **)(a1 + 200);
          v52 = 1;
          *(_QWORD *)buf = &v52;
          v45 = *((_DWORD *)sub_1002DAB8C(v44, &v52, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8);
          v51 = 2;
          *(_QWORD *)buf = &v51;
          v46 = *((_DWORD *)sub_1002DAB8C(v44, &v51, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8);
          v50 = 3;
          *(_QWORD *)buf = &v50;
          v47 = *((_DWORD *)sub_1002DAB8C(v44, &v50, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&buf[4] = v45;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v46;
          *(_WORD *)v54 = 1024;
          *(_DWORD *)&v54[2] = v47;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Audio Timesync: States: SpatialHigh: %d, SpatialLow: %d, SensorLow: %d", buf, 0x14u);
        }
        return;
      }
      goto LABEL_51;
    }
    v11 = 3;
    goto LABEL_29;
  }
  if (!a4)
  {
    if (v11 == 1)
    {
      v16 = 1;
LABEL_51:
      if (a3)
      {
        v52 = 3;
        *(_QWORD *)buf = &v52;
        if (*((int *)sub_1002DAB8C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8) > 0
          || (v52 = 2,
              *(_QWORD *)buf = &v52,
              *((int *)sub_1002DAB8C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8) >= 1))
        {
          v31 = qword_1009997E0;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Start Spatial High, Low is running, stop it first", buf, 2u);
          }
          sub_1002D9764(a1, a2, 0, 2);
        }
        v52 = 1;
        *(_QWORD *)buf = &v52;
        if (*((int *)sub_1002DAB8C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8) < 1)
        {
          sub_1002D9764(a1, a2, 1, 1);
        }
        else
        {
          v32 = qword_1009997E0;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Start Spatial High, High is running, do nothing", buf, 2u);
          }
        }
        v35 = a1;
        v36 = v16;
LABEL_78:
        sub_1002D9A7C(v35, v36, 1);
        goto LABEL_84;
      }
      v52 = 1;
      *(_QWORD *)buf = &v52;
      if (*((int *)sub_1002DAB8C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8) <= 0)
      {
        v33 = qword_1009997E0;
        if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
          goto LABEL_84;
        *(_WORD *)buf = 0;
        v34 = "Audio Timesync: Stop Spatial High, No High is running, do nothing";
        goto LABEL_68;
      }
      sub_1002D9A7C(a1, v16, 0);
      v52 = 1;
      *(_QWORD *)buf = &v52;
      if (*((int *)sub_1002DAB8C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8) >= 1)
      {
        v33 = qword_1009997E0;
        if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
          goto LABEL_84;
        *(_WORD *)buf = 0;
        v34 = "Audio Timesync: Stop Spatial High, High is still running, do nothing";
LABEL_68:
        v37 = v33;
        v38 = 2;
        goto LABEL_83;
      }
      sub_1002D9764(a1, a2, 0, 1);
      v52 = 3;
      *(_QWORD *)buf = &v52;
      if (*((int *)sub_1002DAB8C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8) < 1)
        goto LABEL_84;
      v39 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Audio Timesync: After Stop Spatial High, Sensor Low exists, resume it", buf, 2u);
      }
      v40 = a1;
      v41 = a2;
      v42 = 1;
LABEL_93:
      sub_1002D9764(v40, v41, v42, 2);
      goto LABEL_84;
    }
    if (v11 == 2)
    {
LABEL_29:
      if (a3)
      {
        v52 = 1;
        *(_QWORD *)buf = &v52;
        if (*((int *)sub_1002DAB8C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8) <= 0
          && (v52 = 2,
              *(_QWORD *)buf = &v52,
              *((int *)sub_1002DAB8C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8) <= 0)
          && (v52 = 3,
              *(_QWORD *)buf = &v52,
              *((int *)sub_1002DAB8C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8) < 1))
        {
          sub_1002D9764(a1, a2, 1, 2);
        }
        else
        {
          v25 = qword_1009997E0;
          if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
          {
            if (v15 >= 2)
              v26 = "Spatial Low";
            else
              v26 = "Sensor Low";
            v52 = 1;
            *(_QWORD *)buf = &v52;
            if (*((int *)sub_1002DAB8C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8) <= 0)
            {
              v52 = 2;
              *(_QWORD *)buf = &v52;
              if (*((int *)sub_1002DAB8C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_100740F58, (unsigned int **)buf)
                   + 8) <= 0)
                v27 = "Sensor Low";
              else
                v27 = "Spatial Low";
            }
            else
            {
              v27 = "Spatial High";
            }
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v26;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)v54 = v27;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Start %s, %s is running, do nothing", buf, 0x16u);
          }
        }
        v35 = a1;
        v36 = v11;
        goto LABEL_78;
      }
      v52 = 2;
      *(_QWORD *)buf = &v52;
      if (*((int *)sub_1002DAB8C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8) <= 0)
      {
        v52 = 3;
        *(_QWORD *)buf = &v52;
        if (*((int *)sub_1002DAB8C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8) <= 0)
        {
          v48 = qword_1009997E0;
          if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
            goto LABEL_84;
          v49 = "Spatial Low";
          if (v15 < 2)
            v49 = "Sensor Low";
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v49;
          v34 = "Audio Timesync: Stop %s, not running, do nothing";
          v37 = v48;
          v38 = 12;
LABEL_83:
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, v34, buf, v38);
          goto LABEL_84;
        }
      }
      sub_1002D9A7C(a1, v11, 0);
      v52 = 1;
      *(_QWORD *)buf = &v52;
      if (*((int *)sub_1002DAB8C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8) > 0
        || (v52 = 2,
            *(_QWORD *)buf = &v52,
            *((int *)sub_1002DAB8C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8) > 0)
        || (v52 = 3,
            *(_QWORD *)buf = &v52,
            *((int *)sub_1002DAB8C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8) >= 1))
      {
        v28 = qword_1009997E0;
        if (!os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
          goto LABEL_84;
        if (v15 >= 2)
          v29 = "Spatial Low";
        else
          v29 = "Sensor Low";
        v52 = 1;
        *(_QWORD *)buf = &v52;
        if (*((int *)sub_1002DAB8C((uint64_t **)(a1 + 200), &v52, (uint64_t)&unk_100740F58, (unsigned int **)buf) + 8) <= 0)
        {
          if (sub_1002D9714(a1))
            v30 = "Spatial Low";
          else
            v30 = "Sensor Low";
        }
        else
        {
          v30 = "Spatial High";
        }
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v29;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)v54 = v30;
        v34 = "Audio Timesync: Stop %s, %s is running, do nothing";
        v37 = v28;
        v38 = 22;
        goto LABEL_83;
      }
      v40 = a1;
      v41 = a2;
      v42 = 0;
      goto LABEL_93;
    }
  }
  v17 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
    sub_1006DCC0C(v17, v18, v19, v20, v21, v22, v23, v24);
}

uint64_t sub_1002D9534(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  NSObject *v6;
  const char *v7;
  const char *v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;

  *a2 = TSNullClockIdentifier;
  v6 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 77))
      v7 = "Yes";
    else
      v7 = "No";
    v8 = " No";
    if (a3 && !sub_1002D9698(a1, a3))
      v8 = " Yes";
    v10 = 134218498;
    v11 = a3;
    v12 = 2080;
    v13 = v7;
    v14 = 2080;
    v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Request for TimesyncID, address = %llx Timesync Running=%s Registered ? %s", (uint8_t *)&v10, 0x20u);
  }
  if (!*(_BYTE *)(a1 + 77))
    return 0;
  if (!a3 || (result = sub_1002D9698(a1, a3), (_DWORD)result))
  {
    result = *(_QWORD *)(a1 + 88);
    if (result)
    {
      if (objc_msgSend((id)result, "lockState") == 2)
      {
        *a2 = *(_QWORD *)(a1 + 96);
        return 1;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002D9698(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char v3;
  BOOL v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = *(_QWORD **)(a1 + 104);
  if (v2 == (_QWORD *)(a1 + 112))
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    while (1)
    {
      v4 = *(_QWORD *)(v2[4] + 8) == a2;
      if (*(_QWORD *)(v2[4] + 8) == a2)
        break;
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v3 |= v4;
      v2 = v6;
      if (v6 == (_QWORD *)(a1 + 112))
        return v3 & 1;
    }
    v3 = 1;
  }
  return v3 & 1;
}

BOOL sub_1002D9714(uint64_t a1)
{
  int v2;
  unsigned int *v3;

  v2 = 2;
  v3 = (unsigned int *)&v2;
  return *((_DWORD *)sub_1002DAB8C((uint64_t **)(a1 + 200), &v2, (uint64_t)&unk_100740F58, &v3) + 8) > 0;
}

void sub_1002D9764(uint64_t a1, uint64_t a2, int a3, int a4)
{
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;

  if (a2)
  {
    if (a3)
    {
      if (a4 == 2)
      {
        v9 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v16) = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Start Low", (uint8_t *)&v16, 2u);
        }
        *(_DWORD *)(a1 + 168) = 1000;
        operator new();
      }
      if (a4 == 1)
      {
        v6 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v16) = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Start High", (uint8_t *)&v16, 2u);
        }
        *(_DWORD *)(a1 + 168) = 250;
        if (qword_100977A98 != -1)
          dispatch_once(&qword_100977A98, &stru_100924338);
        sub_10051F324((uint64_t)off_100977A90, a2, 1, 2, 2, 2);
      }
      v10 = a1;
      v11 = 1;
    }
    else
    {
      if (a4 == 2)
      {
        v12 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v16) = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Stop Low", (uint8_t *)&v16, 2u);
        }
        if (*(_QWORD *)(a1 + 176))
        {
          if (*(_BYTE *)(a1 + 77))
          {
            v16 = 0uLL;
            sub_100274874(a1 + 176, &v16);
            v13 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
            if (*((_QWORD *)&v16 + 1))
            {
              v14 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
              do
                v15 = __ldaxr(v14);
              while (__stlxr(v15 - 1, v14));
              if (!v15)
              {
                ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                std::__shared_weak_count::__release_weak(v13);
              }
            }
          }
        }
      }
      else if (a4 == 1)
      {
        v8 = qword_1009997E0;
        if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v16) = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Stop High", (uint8_t *)&v16, 2u);
        }
        if (*(_BYTE *)(a1 + 77))
        {
          if (qword_100977A98 != -1)
            dispatch_once(&qword_100977A98, &stru_100924338);
          sub_10051F324((uint64_t)off_100977A90, a2, 0, 2, 0, 0);
        }
      }
      *(_QWORD *)(a1 + 192) = 0;
      v10 = a1;
      v11 = 0;
    }
    sub_1002D9BEC(v10, v11);
  }
  else
  {
    v7 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Cannot update Time Sync state, invalid device", (uint8_t *)&v16, 2u);
    }
  }
}

uint64_t *sub_1002D9A7C(uint64_t a1, int a2, int a3)
{
  uint64_t **v4;
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *result;
  int v9;
  unsigned int *v10;

  v9 = a2;
  v4 = (uint64_t **)(a1 + 200);
  v10 = (unsigned int *)&v9;
  v5 = sub_1002DAB8C((uint64_t **)(a1 + 200), &v9, (uint64_t)&unk_100740F58, &v10);
  v6 = *((_DWORD *)v5 + 8);
  if (a3)
    v7 = v6 + 1;
  else
    v7 = v6 - 1;
  *((_DWORD *)v5 + 8) = v7;
  v10 = (unsigned int *)&v9;
  result = sub_1002DAB8C(v4, &v9, (uint64_t)&unk_100740F58, &v10);
  if (*((int *)result + 8) <= 0)
    return (uint64_t *)sub_1002BBADC((uint64_t)v4, &v9);
  return result;
}

void sub_1002D9B20(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  sub_1002DAE4C(&v2, a2);
}

uint64_t sub_1002D9B90(uint64_t a1)
{
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100924338);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, *((_QWORD *)off_100977A90 + 31));
}

void sub_1002D9BEC(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;

  if ((a2 & 1) == 0)
    sub_1002D9CB8(a1);
  *(_BYTE *)(a1 + 77) = a2;
  v4 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "Not Running";
    if (a2)
      v5 = "Running";
    v6 = 136446210;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Reference Timestamp status: %{public}s ", (uint8_t *)&v6, 0xCu);
  }
}

void sub_1002D9CB8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned __int8 v6;
  id v7;
  NSObject *v8;
  void *v9;
  uint8_t v10[8];
  id v11;
  uint8_t buf[16];

  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v2 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine Reset", buf, 2u);
  }
  sub_1002DA1BC(a1, 0, 1);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = TSNullClockIdentifier;
  if (v3 != TSNullClockIdentifier)
  {
    v5 = *(void **)(a1 + 80);
    v11 = 0;
    v6 = objc_msgSend(v5, "removeUserFilteredClockWithIdentifier:error:", v3, &v11);
    v7 = v11;
    if ((v6 & 1) == 0)
    {
      v8 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: Audio Time Synchronization Shared Clock Engine cleanup Failed", v10, 2u);
      }
    }

  }
  v9 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = v4;

}

void sub_1002D9DD4(uint64_t a1, uint64_t a2)
{
  char v3;

  sub_1002D9E0C(a1 + 128, a2);
  v3 = sub_1002D8408(a1);
  sub_1002D7634(a1, v3, *(_DWORD *)(a1 + 164));
}

void sub_1002D9E0C(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v5 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    v6 = a2;
    sub_1002DAFCC(a1 + 8, v4, (char *)&v6);
    sub_10007AA30(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1002D9E94(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(id, _QWORD);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  os_unfair_lock_lock(a1);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  sub_10001FE6C(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    v4 = v5;
  }
  if (v4)
  {
    v6 = v4;
    operator delete(v4);
  }

}

void sub_1002D9F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t sub_1002D9F50(uint64_t a1, uint64_t (***a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return (**a2)(a2, *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 52), *(unsigned int *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96));
}

uint64_t sub_1002D9F74(uint64_t a1)
{
  uint64_t v1;
  id v2;
  const char *v4;
  int64x2_t v5;
  void *v6;
  const char *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  unsigned int v15;
  const char *v16;
  id v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  id v22;

  if (*(_QWORD *)(a1 + 88))
  {
    v1 = 0;
    v2 = 0;
    goto LABEL_17;
  }
  v4 = *(const char **)(a1 + 96);
  if (v4 == (const char *)TSNullClockIdentifier)
  {
    v5 = vsubq_s64(*(int64x2_t *)(a1 + 40), *(int64x2_t *)(a1 + 24));
    *(int64x2_t *)(a1 + 56) = v5;
    v6 = *(void **)(a1 + 80);
    v18 = 0;
    v7 = (const char *)objc_msgSend(v6, "addUserFilteredClockWithMachInterval:domainInterval:usingFilterShift:isAdaptive:error:", *(_OWORD *)&v5, 4, 0, &v18);
    v2 = v18;
    *(_QWORD *)(a1 + 96) = v7;
    v8 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218242;
      v20 = v7;
      v21 = 2112;
      v22 = v2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine initializing ID %llu error %@", buf, 0x16u);
      v7 = *(const char **)(a1 + 96);
    }
    if (v7 == v4)
    {
      v9 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Warning: Audio Timesync: Timesync engine initialization failed", buf, 2u);
      }
      goto LABEL_16;
    }
  }
  else
  {
    v2 = 0;
    v7 = *(const char **)(a1 + 96);
  }
  v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "clockWithClockIdentifier:", v7));
  v12 = *(void **)(a1 + 88);
  v11 = (uint64_t *)(a1 + 88);
  *v11 = v10;

  v13 = (void *)*v11;
  if (!*v11)
  {
LABEL_16:
    v1 = 0;
    goto LABEL_17;
  }
  v14 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v15 = objc_msgSend(v13, "lockState");
    v16 = "Not Ready";
    if (v15 == 2)
      v16 = "Ready";
    *(_DWORD *)buf = 136315138;
    v20 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Timesync engine Ready Lock State = %s", buf, 0xCu);
  }
  v1 = 1;
LABEL_17:

  return v1;
}

void sub_1002DA1A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002DA1BC(uint64_t a1, int a2, int a3)
{
  int v4;
  NSObject *v6;
  const char *v7;
  int v8;
  const char *v9;

  if (*(unsigned __int8 *)(a1 + 160) != a2)
  {
    v4 = a2;
    *(_BYTE *)(a1 + 160) = a2;
    v6 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v7 = "Not Ready";
      if (v4)
        v7 = "Ready";
      v8 = 136315138;
      v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Notify Timesync State update: %s", (uint8_t *)&v8, 0xCu);
      LOBYTE(v4) = *(_BYTE *)(a1 + 160) != 0;
    }
    sub_1002D7634(a1, v4, a3);
  }
}

BOOL sub_1002DA2B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v5;
  NSObject *v6;
  id v8;

  v3 = *(void **)(a1 + 88);
  if (v3)
  {
    v8 = 0;
    objc_msgSend(v3, "addTimestampWithMachAbsolute:andDomainTime:error:", a3, a2, &v8);
    v5 = v8;
    if (v5)
    {
      v6 = qword_1009997E0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_ERROR))
        sub_1006DCC3C((uint64_t)v5, v6);
    }
    sub_1002DA1BC(a1, objc_msgSend(*(id *)(a1 + 88), "lockState") == 2, 1);

  }
  return v3 != 0;
}

void sub_1002DA360(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002DA370(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  float v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  unint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  double v21;

  v6 = a1[3];
  v7 = a1[4];
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100924338);
  v8 = sub_10051DF38((uint64_t)off_100977A90, a2 - a3, 0);
  v9 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v10 = a1[3];
    v11 = a1[7];
    v14 = 134218752;
    v15 = v10;
    v16 = 2048;
    v17 = a2;
    v18 = 2048;
    v19 = v11;
    v20 = 2048;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Missed GPIO toggles Missing  Host TS [%llu - %llu] expected approximate delta=%llu, actual delta=%f", (uint8_t *)&v14, 0x2Au);
  }
  if (v8 < 10.0 && v6 < a2)
  {
    do
    {
      v13 = a1[7];
      v6 += v13;
      if (v6 + v13 > a2)
        break;
      v7 += a1[8];
      sub_1002DA2B0((uint64_t)a1, v7, v6);
    }
    while (v6 < a2);
  }
}

uint64_t sub_1002DA4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  NSObject *v10;
  int v12;
  double v13;

  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100924338);
  v6 = a2 - a3;
  v7 = 1;
  v8 = sub_10051DF38((uint64_t)off_100977A90, v6, 1);
  if (!*(_DWORD *)(a1 + 172))
  {
    v9 = v8;
    if (v8 > (float)((float)*(unsigned int *)(a1 + 168) * 1.5))
    {
      v10 = qword_1009997E0;
      v7 = 0;
      if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
      {
        v12 = 134217984;
        v13 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Audio Timesync: GPIO Toggle more than expected delta=%f", (uint8_t *)&v12, 0xCu);
        return 0;
      }
    }
  }
  return v7;
}

void sub_1002DA610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  NSObject *v14;
  int v15;
  double v16;
  __int16 v17;
  double v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  _BYTE *v28;

  if ((unint64_t)(a2 - qword_100991AC8) >= 0x77359401)
    qword_100991AC8 = a2;
  if (sub_1002D8408(a1))
    v6 = objc_msgSend(*(id *)(a1 + 88), "convertFromDomainToMachAbsoluteTime:", a2);
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 32);
  if (sub_1002D8408(a1))
    v8 = objc_msgSend(*(id *)(a1 + 88), "convertFromDomainToMachAbsoluteTime:", v7);
  else
    v8 = 0;
  v9 = (double)(unint64_t)(a2 - *(_QWORD *)(a1 + 32)) / 1000.0;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100924338);
  v10 = sub_10051DF38((uint64_t)off_100977A90, v6 - v8, 2);
  if (v10 <= v9)
    v11 = v9 - v10;
  else
    v11 = v10 - v9;
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100924338);
  v12 = sub_10051DF38((uint64_t)off_100977A90, a3 - *(_QWORD *)(a1 + 24), 1);
  if (v11 >= 3000.0 || qword_100991AC8 == a2)
  {
    v14 = qword_1009997E0;
    if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 134219520;
      v16 = v9;
      v17 = 2048;
      v18 = v10;
      v19 = 2048;
      v20 = v11;
      v21 = 2048;
      v22 = v12;
      v23 = 2048;
      v24 = a2;
      v25 = 2048;
      v26 = a3;
      v27 = 2048;
      v28 = v6;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Audio Timesync: FW_prev_Diff = %.1fus, FWDiff_after_TS = %.1fus, delta_after_TS = %.1fus, last_event = %.1fms, fwTimestamp = %llu, hostTimestamp = %llu, Trans_FW_Timestamp = %llu", (uint8_t *)&v15, 0x48u);
    }
  }
}

uint64_t sub_1002DA850(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;

  v6 = sub_1002D8408(a1);
  if ((_DWORD)v6)
    *a3 = objc_msgSend(*(id *)(a1 + 88), "convertFromDomainToMachAbsoluteTime:", a2);
  return v6;
}

void sub_1002DA89C(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 176);
  v3 = *(std::__shared_weak_count **)(a1 + 184);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  if (v2)
    sub_1002D9B90(v2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1002DA92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10009F88C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1002DA940(uint64_t a1)
{
  return *(_QWORD *)(a1 + 176) != 0;
}

uint64_t sub_1002DA950(uint64_t a1, uint64_t a2, int a3, int a4)
{
  NSObject *v6;
  int v8;
  uint64_t v9;
  __int16 v10;
  int v11;

  *(_WORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_QWORD *)a1 = &off_100924310;
  *(_QWORD *)(a1 + 64) = a2;
  *(_DWORD *)(a1 + 72) = a3;
  *(_BYTE *)(a1 + 76) = a4;
  v6 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 134218240;
    v9 = a1;
    v10 = 1024;
    v11 = a4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Legacy Timesync Timed Event started (0x%p); Repeating Timer? %d",
      (uint8_t *)&v8,
      0x12u);
  }
  return a1;
}

_QWORD *sub_1002DAA34(_QWORD *a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  int v5;
  _QWORD *v6;

  *a1 = &off_100924310;
  v2 = qword_1009997E0;
  if (os_log_type_enabled((os_log_t)qword_1009997E0, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 134217984;
    v6 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Legacy Timesync Timed Event ended (0x%p)", (uint8_t *)&v5, 0xCu);
  }
  *a1 = off_100930398;
  sub_10009F88C((uint64_t)(a1 + 5));
  v3 = (std::__shared_weak_count *)a1[4];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void sub_1002DAB0C(_QWORD *a1)
{
  sub_1002DAA34(a1);
  operator delete();
}

void sub_1002DAB30(uint64_t a1)
{
  if (qword_100977A98 != -1)
    dispatch_once(&qword_100977A98, &stru_100924338);
  sub_100515E2C((uint64_t)off_100977A90, *(_QWORD *)(a1 + 64));
}

void (*sub_1002DAB80())(uint64_t a1)
{
  return sub_1004760A0;
}

uint64_t *sub_1002DAB8C(uint64_t **a1, int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    sub_100004078(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_1002DAC48(id a1)
{
  operator new();
}

void sub_1002DAC88()
{
  operator delete();
}

void sub_1002DACAC(id a1)
{
  operator new();
}

void sub_1002DACEC()
{
  operator delete();
}

void sub_1002DAD10(id a1)
{
  operator new();
}

void sub_1002DAE28()
{
  operator delete();
}

void sub_1002DAE4C(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1002DAEB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1002DAED8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void sub_1002DAF8C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1002DAFB0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

char *sub_1002DAFCC(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 3) + 1;
    if (v14 >> 61)
      abort();
    v15 = __src - v13;
    v16 = (__src - v13) >> 3;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 2 > v14)
      v14 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)sub_10007ABA0(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 2;
        v23 = (char *)sub_10007ABA0(v8, v22);
        v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_QWORD *)v20 = *(_QWORD *)v3;
    v28 = v20 + 8;
    v4 = sub_10007AADC((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_QWORD *)__src = *(_QWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 8;
  }
  else
  {
    v9 = __src + 8;
    v10 = v6 - 8;
    v11 = *(_QWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 8 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_QWORD *)v4 = *(_QWORD *)v3;
  }
  return v4;
}

void sub_1002DB1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002DB208(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *__p[2];
  char v21;
  int v22;
  uint8_t buf[8];
  char v24;

  *(_QWORD *)a1 = off_1009243E0;
  *(_QWORD *)(a1 + 8) = off_100924620;
  *(_QWORD *)(a1 + 16) = off_100924658;
  *(_QWORD *)(a1 + 24) = off_100924678;
  *(_QWORD *)(a1 + 32) = off_100924728;
  *(_QWORD *)(a1 + 40) = off_100924788;
  *(_QWORD *)(a1 + 48) = &off_1009247C8;
  *(_QWORD *)(a1 + 56) = off_1009247E0;
  *(_QWORD *)(a1 + 64) = off_100924828;
  *(_QWORD *)(a1 + 72) = off_100924848;
  *(_QWORD *)(a1 + 80) = &off_100924870;
  *(_QWORD *)(a1 + 88) = off_100924888;
  *(_QWORD *)(a1 + 96) = off_1009248B8;
  *(_QWORD *)(a1 + 104) = &off_1009248E0;
  *(_QWORD *)(a1 + 112) = off_1009248F8;
  *(_QWORD *)(a1 + 120) = &off_100924920;
  *(_QWORD *)(a1 + 128) = &off_100924938;
  *(_QWORD *)(a1 + 136) = off_100924950;
  *(_QWORD *)(a1 + 144) = &off_100924990;
  *(_QWORD *)(a1 + 152) = off_1009249A8;
  *(_QWORD *)(a1 + 160) = off_100924A20;
  *(_QWORD *)(a1 + 168) = &off_100924A48;
  *(_BYTE *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 178) = 0;
  *(_BYTE *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  v2 = a1 + 232;
  *(_DWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 256;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 372) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 400) = a1 + 408;
  *(_WORD *)(a1 + 424) = 256;
  *(_BYTE *)(a1 + 426) = 1;
  v22 = 0;
  v3 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "ConnectionGracePeriod");
  v4 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(_QWORD *)v3 + 88))(v3, buf, __p, &v22);
  if (v21 < 0)
    operator delete(__p[0]);
  if (v24 < 0)
  {
    operator delete(*(void **)buf);
    if (!v4)
      goto LABEL_13;
  }
  else if (!v4)
  {
    goto LABEL_13;
  }
  v5 = v22;
  v6 = qword_100999898;
  if (v22 >= (unsigned __int16)word_10097AC08)
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: Using override value (%d) for connection grace period", buf, 8u);
      LOWORD(v5) = v22;
    }
    word_10097AC08 = v5;
  }
  else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
  {
    sub_1006DCCB0();
  }
LABEL_13:
  v7 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v8 = *(void **)(v2 + 64);
  *(_QWORD *)(v2 + 64) = v7;

  v9 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v10 = *(void **)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v9;

  v11 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v12 = *(void **)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v11;

  mach_timebase_info((mach_timebase_info_t)(a1 + 184));
  v13 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v14 = *(void **)(a1 + 336);
  *(_QWORD *)(a1 + 336) = v13;

  v15 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v16 = *(void **)(a1 + 344);
  *(_QWORD *)(a1 + 344) = v15;

  v17 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v18 = *(void **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = v17;

  return a1;
}

void sub_1002DB530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v26;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  sub_1002F655C(v24 + 168, *(_QWORD **)(v21 + 408));
  sub_100091BF8((void ***)&a16);

  sub_100056BAC(v23, *(char **)(v21 + 280));
  sub_100010D8C(v22, *(_QWORD **)(v21 + 256));
  sub_10001A82C(v24 - 8, *(_QWORD **)(v21 + 232));
  v26 = *(void **)(v21 + 200);
  if (v26)
  {
    *(_QWORD *)(v21 + 208) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

void sub_1002DB60C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const __CFString *v15;
  uint64_t v16;
  void *v17;
  void *__p[2];
  char v19;
  int out_token;
  char v21;
  _BYTE buf[12];
  char v23;

  sub_1002DBCE4(a1);
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_100924BF0);
  sub_1002B4110((uint64_t)off_100978128 + 80, a1);
  if (qword_1009778F8 != -1)
    dispatch_once(&qword_1009778F8, &stru_100924C10);
  sub_10007AEA4(qword_1009778F0 + 40, a1 + 40);
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100924C30);
  sub_10061F358((uint64_t)off_1009778A0, a1 + 24, 0);
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_100924C50);
  sub_1000B5218((uint64_t)off_100977FA8 + 1872, a1 + 32);
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_100924C50);
  sub_1000B5218((uint64_t)off_100977FA8 + 1904, a1 + 32);
  v2 = sub_100069D20();
  sub_100575668(v2, a1 + 8);
  if (qword_10097AC18 != -1)
    dispatch_once(&qword_10097AC18, &stru_100924C70);
  sub_1003F22E0(qword_10097AC10, a1 + 56);
  v3 = sub_100069D20();
  sub_1005756AC(v3, a1 + 16);
  v4 = sub_100038E50();
  sub_1002CCAE4(v4 + 448, a1 + 80);
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100924C90);
  sub_100695F3C(qword_1009778B0, a1 + 64);
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100924C90);
  sub_100695F80((_QWORD *)qword_1009778B0, a1 + 72);
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100924CB0);
  sub_100668DE4((uint64_t)off_1009778C0, a1 + 168);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100924CD0);
  sub_1002609C8((uint64_t)off_100977A50 + 64, a1 + 88);
  if (qword_10097AC28 != -1)
    dispatch_once(&qword_10097AC28, &stru_100924CF0);
  sub_100484B48(qword_10097AC20, a1 + 96);
  if (qword_100977C30 != -1)
    dispatch_once(&qword_100977C30, &stru_100924D10);
  sub_1005FC26C((uint64_t)off_100977C28, a1 + 112);
  v5 = sub_10003BE44();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 384))(v5))
  {
    if (qword_100977898 != -1)
      dispatch_once(&qword_100977898, &stru_100924D30);
    sub_10007ABE0((uint64_t)off_100977890 + 64, a1 + 128);
    if (qword_100978150 != -1)
      dispatch_once(&qword_100978150, &stru_100924D50);
    sub_1005B40C8(off_100978148, a1 + 136);
    if (qword_100977A78 != -1)
      dispatch_once(&qword_100977A78, &stru_100924D70);
    sub_100494088(off_100977A70, a1 + 144);
    if (qword_1009778D8 != -1)
      dispatch_once(&qword_1009778D8, &stru_100924D90);
    sub_10041E160(off_1009778D0, a1 + 152);
    if (qword_10097AC38 != -1)
      dispatch_once(&qword_10097AC38, &stru_100924DB0);
    sub_10057A258((_QWORD *)qword_10097AC30, a1 + 160);
  }
  v6 = sub_100038E50();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 112))(v6, a1 + 312);
  if (*(_BYTE *)(a1 + 312))
  {
    v7 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "In buddy setup. Registering for buddy state change notifications.", buf, 2u);
    }
    v8 = sub_100038E50();
    sub_1002F5AF4(v8 + 488, a1 + 120);
  }
  v21 = 0;
  v9 = sub_100038E50();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v9 + 104))(v9, &v21);
  if (v21)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 416))(a1, 1);
  if (qword_100977A58 != -1)
    dispatch_once(&qword_100977A58, &stru_100924CD0);
  *(_BYTE *)(a1 + 179) = sub_1000261DC((uint64_t)off_100977A50);
  v10 = sub_100027F68();
  *(_BYTE *)(a1 + 372) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 792))(v10, a1 + 376);
  out_token = 0;
  v11 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "registering for TCC change notifications", buf, 2u);
  }
  v12 = sub_1000419F4();
  notify_register_dispatch("com.apple.tcc.access.changed", &out_token, *(dispatch_queue_t *)(v12 + 8), &stru_100924A58);
  v13 = sub_100027F68();
  sub_100091AE8(buf, "LE");
  sub_100091AE8(__p, "AppRestorationEnable");
  (*(void (**)(uint64_t, _BYTE *, void **, uint64_t))(*(_QWORD *)v13 + 72))(v13, buf, __p, a1 + 425);
  if (v19 < 0)
    operator delete(__p[0]);
  if (v23 < 0)
    operator delete(*(void **)buf);
  v14 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 425))
      v15 = CFSTR("Enabled");
    else
      v15 = CFSTR("Disabled");
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "AppRestorationEnable is %@ ", buf, 0xCu);
  }
  v16 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
  v17 = *(void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = v16;

}

void sub_1002DBCA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1002DBCE4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if (sub_100070BF0())
  {
    v2 = (void *)TCCAccessCopyBundleIdentifiersForService(kTCCServiceBluetoothAlways);
    v3 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v2));
    v4 = *(void **)(a1 + 336);
    *(_QWORD *)(a1 + 336) = v3;

    v5 = (void *)TCCAccessCopyBundleIdentifiersDisabledForService(kTCCServiceBluetoothAlways);
    v6 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v5));
    v7 = *(void **)(a1 + 344);
    *(_QWORD *)(a1 + 344) = v6;

    v8 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 336);
      v11 = 138543362;
      v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "BundleId's allowed to use BT:%{public}@", (uint8_t *)&v11, 0xCu);
      v8 = qword_100999898;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v10 = *(_QWORD *)(a1 + 344);
      v11 = 138543362;
      v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "BundleId's disallowed to use BT:%{public}@", (uint8_t *)&v11, 0xCu);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
  {
    sub_1006DCD10();
  }
}

void sub_1002DBE7C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1002DBE98(id a1, int a2)
{
  if (qword_100978170 != -1)
    dispatch_once(&qword_100978170, &stru_100924DD0);
  sub_1002DBED8((uint64_t)off_100978168);
}

void sub_1002DBED8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t *v21;
  unint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t **v29;
  id v30;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint8_t buf[8];
  unint64_t *v37;
  unint64_t *v38;
  uint8_t v39[128];
  uint8_t v40[4];
  void *v41;

  v2 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "TCC changed, lets figure out if one of our sessions needs to be removed", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v37 = 0;
  v38 = 0;
  v31 = objc_msgSend(*(id *)(a1 + 336), "copy");
  v30 = objc_msgSend(*(id *)(a1 + 344), "copy");
  sub_1002DBCE4(a1);
  sub_1002DC2D8(a1, v31, v30);
  v3 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(void **)(a1 + 344);
    *(_DWORD *)v40 = 138543362;
    v41 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "bundle ID's not allowed to use bluetooth %{public}@", v40, 0xCu);
  }
  v5 = *(_QWORD **)(a1 + 224);
  if (v5 != (_QWORD *)(a1 + 232))
  {
    v29 = &v38;
    do
    {
      v6 = (_QWORD *)v5[5];
      if (!v6[15] && v6[12])
      {
        v7 = v5[4];
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v8 = *(id *)(a1 + 344);
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v32, v39, 16);
        if (v9)
        {
          v10 = *(_QWORD *)v33;
          while (2)
          {
            for (i = 0; i != v9; i = (char *)i + 1)
            {
              if (*(_QWORD *)v33 != v10)
                objc_enumerationMutation(v8);
              v12 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * (_QWORD)i);
              if (objc_msgSend(v12, "isEqualToString:", v6[11], v29, v30))
              {
                v13 = qword_1009998F0;
                if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)v40 = 138543362;
                  v41 = v12;
                  _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Removing restorable bundle %{public}@ because user disabled TCC access to bluetooth", v40, 0xCu);
                }
                v14 = v37;
                if (v37 >= v38)
                {
                  v16 = ((uint64_t)v37 - *(_QWORD *)buf) >> 3;
                  if ((unint64_t)(v16 + 1) >> 61)
                    abort();
                  v17 = ((uint64_t)v38 - *(_QWORD *)buf) >> 2;
                  if (v17 <= v16 + 1)
                    v17 = v16 + 1;
                  if ((unint64_t)v38 - *(_QWORD *)buf >= 0x7FFFFFFFFFFFFFF8)
                    v18 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v18 = v17;
                  if (v18)
                    v19 = (char *)sub_10007ABA0((uint64_t)v29, v18);
                  else
                    v19 = 0;
                  v20 = &v19[8 * v16];
                  *(_QWORD *)v20 = v7;
                  v15 = (unint64_t *)(v20 + 8);
                  v22 = *(unint64_t **)buf;
                  v21 = v37;
                  if (v37 != *(unint64_t **)buf)
                  {
                    do
                    {
                      v23 = *--v21;
                      *((_QWORD *)v20 - 1) = v23;
                      v20 -= 8;
                    }
                    while (v21 != v22);
                    v21 = *(unint64_t **)buf;
                  }
                  *(_QWORD *)buf = v20;
                  v37 = v15;
                  v38 = (unint64_t *)&v19[8 * v18];
                  if (v21)
                    operator delete(v21);
                }
                else
                {
                  *v37 = v7;
                  v15 = v14 + 1;
                }
                v37 = v15;
                objc_msgSend(*(id *)(a1 + 296), "removeObject:", v6[11]);
                goto LABEL_37;
              }
            }
            v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v32, v39, 16);
            if (v9)
              continue;
            break;
          }
        }
LABEL_37:

      }
      v24 = (_QWORD *)v5[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v5[2];
          v26 = *v25 == (_QWORD)v5;
          v5 = v25;
        }
        while (!v26);
      }
      v5 = v25;
    }
    while (v25 != (_QWORD *)(a1 + 232));
  }
  v27 = *(unint64_t **)buf;
  v28 = v37;
  while (v27 != v28)
    sub_100019A7C(a1, *v27++, 1);

  if (*(_QWORD *)buf)
  {
    v37 = *(unint64_t **)buf;
    operator delete(*(void **)buf);
  }
}

void sub_1002DC278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1002DC2D8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  id v8;
  id v9;
  uint64_t v10;
  int v11;
  void *v12;
  void *v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  NSObject *v21;
  int v22;
  NSObject *v23;
  id v24;
  id v25;
  id obj;
  id obja;
  id v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  std::string __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint8_t buf[32];
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];

  v28 = a2;
  v29 = a3;
  v25 = objc_msgSend(*(id *)(a1 + 336), "mutableCopy");
  v24 = objc_msgSend(*(id *)(a1 + 344), "mutableCopy");
  if (objc_msgSend(v28, "count"))
    objc_msgSend(v25, "minusSet:", v28);
  if (objc_msgSend(v29, "count"))
    objc_msgSend(v24, "minusSet:", v29);
  v5 = objc_msgSend(v25, "mutableCopy");
  objc_msgSend(v5, "unionSet:", v24);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "anyObject"));

  if (v6)
  {
    v7 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BluetoothTCC changed", buf, 2u);
    }
    v8 = v5;
    if (objc_msgSend(v25, "count"))
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      obj = v25;
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
      if (v9)
      {
        v10 = *(_QWORD *)v36;
        v11 = 0xFFFF;
        do
        {
          v12 = 0;
          do
          {
            if (*(_QWORD *)v36 != v10)
              objc_enumerationMutation(obj);
            v13 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)v12);
            v14 = qword_100999898;
            if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138543362;
              *(_QWORD *)&buf[4] = v13;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "App %{public}@ bluetooth authorization changed", buf, 0xCu);
            }
            v15 = objc_msgSend(v29, "containsObject:", v13);
            if (v15)
              v11 = 1;
            v16 = qword_100999898;
            if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138544130;
              *(_QWORD *)&buf[4] = v13;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v15;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v11;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 0;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Push AWD stats for %{public}@: triggerLoc: %u, prevPermission: %u, currPermission: %u", buf, 0x1Eu);
            }
            v41 = 0u;
            v42 = 0u;
            memset(buf, 0, sizeof(buf));
            v5 = v8;
            sub_100091AE8(&__p, (char *)objc_msgSend(objc_retainAutorelease(v13), "UTF8String"));
            sub_1002F5DE4(buf, &__p, 0, v15, v11, 0, 0, 0, 0xFFFF);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (qword_10097AC48 != -1)
              dispatch_once(&qword_10097AC48, &stru_100924DF0);
            sub_10006544C(qword_10097AC40, (uint64_t)buf);
            if ((char)buf[31] < 0)
              operator delete(*(void **)&buf[8]);
            v12 = (char *)v12 + 1;
          }
          while (v9 != v12);
          v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v35, v43, 16);
        }
        while (v9);
      }
      else
      {
        v11 = 0xFFFF;
      }

    }
    else
    {
      v11 = 0xFFFF;
    }
    if (objc_msgSend(v24, "count"))
    {
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      obja = v24;
      v17 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
      if (v17)
      {
        v18 = *(_QWORD *)v31;
        do
        {
          v19 = 0;
          do
          {
            if (*(_QWORD *)v31 != v18)
              objc_enumerationMutation(obja);
            v20 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)v19);
            v21 = qword_100999898;
            if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138543362;
              *(_QWORD *)&buf[4] = v20;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "App %{public}@ bluetooth authorization changed", buf, 0xCu);
            }
            v22 = objc_msgSend(v28, "containsObject:", v20);
            if (v22)
              v11 = 0;
            v23 = qword_100999898;
            if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138544130;
              *(_QWORD *)&buf[4] = v20;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v22;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v11;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 1;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Push AWD stats for %{public}@: triggerLoc: %u, prevPermission: %u, currPermission: %u", buf, 0x1Eu);
            }
            v41 = 0u;
            v42 = 0u;
            memset(buf, 0, sizeof(buf));
            v5 = v8;
            sub_100091AE8(&__p, (char *)objc_msgSend(objc_retainAutorelease(v20), "UTF8String"));
            sub_1002F5DE4(buf, &__p, 0, v22, v11, 1, 0, 0, 0xFFFF);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (qword_10097AC48 != -1)
              dispatch_once(&qword_10097AC48, &stru_100924DF0);
            sub_10006544C(qword_10097AC40, (uint64_t)buf);
            if ((char)buf[31] < 0)
              operator delete(*(void **)&buf[8]);
            v19 = (char *)v19 + 1;
          }
          while (v17 != v19);
          v17 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v30, v39, 16);
        }
        while (v17);
      }

    }
  }

}

void sub_1002DC8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1002DC998(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v4 = sub_1000419F4();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002DCA48;
  v6[3] = &unk_100918868;
  v8 = a1;
  v5 = v3;
  v7 = v5;
  sub_100041A34(v4, v6);

}

void sub_1002DCA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1002DCA48(uint64_t a1)
{
  char v1;
  char v2;
  id v3;
  uint64_t v4;
  void *i;
  void *v6;
  uint64_t v7;
  unsigned __int8 v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  id v15;
  __int128 v16;
  _QWORD *v17;
  void *j;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  _BYTE *v22;
  void *v23;
  id v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id obj;
  id obja;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE buf[14];
  char v47;
  _BYTE v48[128];
  _BYTE v49[128];

  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v34 = *(_QWORD *)(a1 + 40);
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "elements"));
  v1 = 0;
  v2 = 0;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v49, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v43;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v43 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)i);
        v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
        v8 = objc_msgSend((id)v7, "isEqualToString:", CFSTR("com.apple.springboard.home-screen"));

        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
        LOBYTE(v7) = objc_msgSend(v9, "isEqualToString:", CFSTR("com.apple.lock-screen"));

        v2 |= v8;
        v1 |= v7;
      }
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v49, 16);
    }
    while (v3);
  }

  v10 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v2 & 1;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v1 & 1;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "springboardHomeScreenIsActive: %d\t deviceScreenIsLocked: %d", buf, 0xEu);
  }
  if (!(v1 & 1 | ((v2 & 1) == 0)))
  {
    v11 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "User is in SpringBoard and device is unlocked. Check TCC for backgrounded sessions", buf, 2u);
    }
    v12 = *(void **)(v34 + 360);
    if (v12)
    {
      v13 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Deregistering FrontBoard services", buf, 2u);
        v12 = *(void **)(v34 + 360);
      }
      objc_msgSend(v12, "invalidate");
      v14 = *(void **)(v34 + 360);
      *(_QWORD *)(v34 + 360) = 0;

    }
    if (objc_msgSend(*(id *)(v34 + 352), "count"))
    {
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      obja = *(id *)(v34 + 352);
      v15 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v38, v48, 16);
      if (v15)
      {
        v33 = *(_QWORD *)v39;
        v17 = (_QWORD *)(v34 + 232);
        *(_QWORD *)&v16 = 138543362;
        v32 = v16;
        do
        {
          v35 = v15;
          for (j = 0; j != v35; j = (char *)j + 1)
          {
            if (*(_QWORD *)v39 != v33)
              objc_enumerationMutation(obja);
            v19 = *(_QWORD **)(v34 + 224);
            if (v19 != v17)
            {
              v20 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)j);
              do
              {
                v21 = v19[5];
                sub_1000340DC(v19[4], (uint64_t)buf);
                if (v47 >= 0)
                  v22 = buf;
                else
                  v22 = *(_BYTE **)buf;
                v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22, v32));
                if (v47 < 0)
                  operator delete(*(void **)buf);
                v24 = objc_msgSend(v20, "isEqualToString:", v23);
                if ((_DWORD)v24 && !*(_BYTE *)(v21 + 38) && *(_BYTE *)(v21 + 24))
                {
                  v28 = sub_10006E9D0((uint64_t)v24, v21) ^ 1;
                  v29 = *(_QWORD *)(v21 + 120);
                  if (v29)
                  {
                    v31 = qword_100999898;
                    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = v32;
                      *(_QWORD *)&buf[4] = v23;
                      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Complete TCC for %{public}@", buf, 0xCu);
                      v29 = *(_QWORD *)(v21 + 120);
                    }
                    *(_BYTE *)(v21 + 38) = 1;
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 264))(v29, v28);

                    break;
                  }
                  v30 = qword_100999898;
                  if (*(_QWORD *)(v21 + 96))
                  {
                    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = v32;
                      *(_QWORD *)&buf[4] = v23;
                      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Launch application %{public}@ for TCC", buf, 0xCu);
                    }
                    sub_1003FCB1C((_QWORD *)v21, v28);
                  }
                  else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = v32;
                    *(_QWORD *)&buf[4] = v23;
                    _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Wait for %{public}@ to check-in again", buf, 0xCu);
                  }
                }

                v25 = (_QWORD *)v19[1];
                if (v25)
                {
                  do
                  {
                    v26 = v25;
                    v25 = (_QWORD *)*v25;
                  }
                  while (v25);
                }
                else
                {
                  do
                  {
                    v26 = (_QWORD *)v19[2];
                    v27 = *v26 == (_QWORD)v19;
                    v19 = v26;
                  }
                  while (!v27);
                }
                v19 = v26;
              }
              while (v26 != v17);
            }
          }
          v15 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", &v38, v48, 16);
        }
        while (v15);
      }

    }
  }
}

void sub_1002DCF78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1002DCFF0(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  const __CFString *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  void (***v13)(void);
  uint64_t v14;
  void (**v15)(void);
  _QWORD *v16;
  uint64_t v17;
  int v19;
  const __CFString *v20;
  __int16 v21;
  int v22;

  v6 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
      v7 = *(const __CFString **)(a2 + 88);
    else
      v7 = CFSTR("NONE");
    v19 = 138412546;
    v20 = v7;
    v21 = 1024;
    v22 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "AppManager::setAppSessionPowerState bundle:%@ power:%d", (uint8_t *)&v19, 0x12u);
  }
  v8 = *(_QWORD **)(a1 + 224);
  if (v8 != (_QWORD *)(a1 + 232))
  {
    while (v8[5] != a2)
    {
      v9 = (_QWORD *)v8[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v8[2];
          v11 = *v10 == (_QWORD)v8;
          v8 = v10;
        }
        while (!v11);
      }
      v8 = v10;
      if (v10 == (_QWORD *)(a1 + 232))
        return 3;
    }
    v12 = v8[4];
    if (v12)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 3)
      {
        if (!a3)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, v12);
        v13 = *(void (****)(void))(a2 + 216);
        if (v13)
        {
          if (*(_QWORD *)(a2 + 120) && *(_BYTE *)(a2 + 24))
          {
            v14 = sub_100069D20();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 40))(v14, v12, 5, 1);
            v13 = *(void (****)(void))(a2 + 216);
          }
          v15 = *v13;
LABEL_32:
          (*v15)();
          return 0;
        }
      }
      else
      {
        if (!a3)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, v12);
          if (qword_100978170 != -1)
            dispatch_once(&qword_100978170, &stru_100924DD0);
          sub_1002DD240((uint64_t)off_100978168);
        }
        v16 = *(_QWORD **)(a2 + 120);
        if (v16)
        {
          if (*(_BYTE *)(a2 + 24))
          {
            v17 = sub_100069D20();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 40))(v17, v12, 5, 1);
            v16 = *(_QWORD **)(a2 + 120);
          }
          v15 = (void (**)(void))(*v16 + 200);
          goto LABEL_32;
        }
      }
    }
  }
  return 3;
}

void sub_1002DD240(uint64_t a1)
{
  void *v1;
  _QWORD *v2;
  int v3;
  id *v4;
  uint64_t v5;
  id v6;
  id v7;
  void *i;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *j;
  uint64_t v14;
  void *v15;
  double v16;
  id v17;
  id v18;
  uint64_t v19;
  void *k;
  uint64_t v21;
  void *v22;
  unsigned __int8 v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  id v28;
  void *v29;
  id v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  NSObject *v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  BOOL v45;
  NSObject *v46;
  _BOOL4 v47;
  id v48;
  void *v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  id v57;
  void *v58;
  id v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  int v64;
  NSObject *v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  void *v70;
  NSObject *v71;
  uint64_t v72;
  NSObject *v73;
  const char *v74;
  uint32_t v75;
  uint64_t v76;
  void *v77;
  id v78;
  id v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  NSObject *v84;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  _QWORD v90[6];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  char v95;
  int v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint8_t v126[128];
  uint8_t buf[4];
  void *v128;
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;
  __int16 v133;
  int v134;
  __int16 v135;
  int v136;
  _BYTE v137[128];
  _BYTE v138[128];
  _BYTE v139[128];
  _BYTE v140[128];
  _BYTE v141[128];
  _BYTE v142[128];
  _BYTE v143[128];

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  if (*(_BYTE *)(a1 + 180))
  {
    v2 = *(_QWORD **)(a1 + 224);
    if (v2 != (_QWORD *)(a1 + 232))
    {
      while (1)
      {
        v86 = v2;
        v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v2[5] + 16))(v2[5]);
        v4 = (id *)v86[5];
        if (!v3)
          break;
        if ((*((unsigned int (**)(id *))*v4 + 2))(v4) == 1)
        {
          v5 = v86[5];
          v118 = 0u;
          v119 = 0u;
          v120 = 0u;
          v121 = 0u;
          v88 = v5;
          v6 = *(id *)(v5 + 216);
          v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v118, v142, 16);
          if (v7)
          {
            v87 = *(_QWORD *)v119;
            do
            {
              for (i = 0; i != v7; i = (char *)i + 1)
              {
                if (*(_QWORD *)v119 != v87)
                  objc_enumerationMutation(v6);
                v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v88 + 216), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v118 + 1) + 8 * (_QWORD)i)));
                v116 = 0u;
                v117 = 0u;
                v114 = 0u;
                v115 = 0u;
                v10 = v9;
                v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v114, v141, 16);
                if (v11)
                {
                  v12 = *(_QWORD *)v115;
                  do
                  {
                    for (j = 0; j != v11; j = (char *)j + 1)
                    {
                      if (*(_QWORD *)v115 != v12)
                        objc_enumerationMutation(v10);
                      v14 = *(_QWORD *)(*((_QWORD *)&v114 + 1) + 8 * (_QWORD)j);
                      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", v14));
                      objc_msgSend(v15, "timeIntervalSinceNow");
                      if (v16 >= -30.0)
                        objc_msgSend(v1, "addObject:", v14);

                    }
                    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v114, v141, 16);
                  }
                  while (v11);
                }

              }
              v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v118, v142, 16);
            }
            while (v7);
          }
LABEL_32:

        }
        v24 = v86;
        v25 = (_QWORD *)v86[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v24[2];
            v27 = *v26 == (_QWORD)v24;
            v24 = v26;
          }
          while (!v27);
        }
        v2 = v26;
        if (v26 == (_QWORD *)(a1 + 232))
          goto LABEL_39;
      }
      v17 = v4[31];
      v122 = 0u;
      v123 = 0u;
      v124 = 0u;
      v125 = 0u;
      v6 = v17;
      v18 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v122, v143, 16);
      if (v18)
      {
        v19 = *(_QWORD *)v123;
        do
        {
          for (k = 0; k != v18; k = (char *)k + 1)
          {
            if (*(_QWORD *)v123 != v19)
              objc_enumerationMutation(v6);
            v21 = *(_QWORD *)(*((_QWORD *)&v122 + 1) + 8 * (_QWORD)k);
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v21));
            v23 = objc_msgSend(v22, "opportunistic");

            if ((v23 & 1) == 0)
              objc_msgSend(v1, "addObject:", v21);
          }
          v18 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v122, v143, 16);
        }
        while (v18);
      }

      goto LABEL_32;
    }
LABEL_39:
    if (qword_10097AC18 != -1)
      dispatch_once(&qword_10097AC18, &stru_100924C70);
    v28 = sub_1003F50C8(qword_10097AC10);
    v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    objc_msgSend(v1, "addObjectsFromArray:", v29);

    v112 = 0u;
    v113 = 0u;
    v110 = 0u;
    v111 = 0u;
    if (qword_10097AA60 != -1)
      dispatch_once(&qword_10097AA60, &stru_100924ED0);
    v30 = sub_1003D38A4(qword_10097AA58);
    v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v110, v140, 16);
    if (v32)
    {
      v33 = *(_QWORD *)v111;
      do
      {
        v34 = 0;
        do
        {
          if (*(_QWORD *)v111 != v33)
            objc_enumerationMutation(v31);
          v35 = *(void **)(*((_QWORD *)&v110 + 1) + 8 * (_QWORD)v34);
          v109 = 0;
          if (qword_1009778A8 != -1)
            dispatch_once(&qword_1009778A8, &stru_100924C30);
          v36 = off_1009778A0;
          sub_100030BCC(buf, v35);
          if (sub_100623C54((uint64_t)v36, buf, &v109))
          {
            LOBYTE(v96) = 0;
            sub_100043758(&v96);
            if (sub_100221568(v109))
            {
              v37 = qword_100999898;
              if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 138543362;
                v128 = v35;
                _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "Skipping LE L2CAP device \"%{public}@\"", buf, 0xCu);
              }
              objc_msgSend(v1, "addObject:", v35);
            }
            sub_100043728(&v96);
          }
          v34 = (char *)v34 + 1;
        }
        while (v32 != v34);
        v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v110, v140, 16);
      }
      while (v32);
    }

    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    if (qword_10097AB68 != -1)
      dispatch_once(&qword_10097AB68, &stru_100924EF0);
    v38 = sub_1002ADA2C(qword_10097AB60);
    v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
    v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v105, v139, 16);
    if (v40)
    {
      v41 = *(_QWORD *)v106;
      do
      {
        v42 = 0;
        do
        {
          if (*(_QWORD *)v106 != v41)
            objc_enumerationMutation(v39);
          v43 = *(void **)(*((_QWORD *)&v105 + 1) + 8 * (_QWORD)v42);
          v109 = 0;
          if (qword_1009778A8 != -1)
            dispatch_once(&qword_1009778A8, &stru_100924C30);
          v44 = off_1009778A0;
          sub_100030BCC(buf, v43);
          if (sub_100623C54((uint64_t)v44, buf, &v109))
          {
            LOBYTE(v96) = 0;
            sub_100043758(&v96);
            if (sub_100221568(v109))
            {
              v45 = sub_1000F1174(v109);
              v46 = qword_100999898;
              v47 = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO);
              if (v45)
              {
                if (v47)
                {
                  *(_DWORD *)buf = 138543362;
                  v128 = v43;
                  _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "disconnecting device device \"%{public}@\" since its scalable pipes are idle", buf, 0xCu);
                }
              }
              else
              {
                if (v47)
                {
                  *(_DWORD *)buf = 138543362;
                  v128 = v43;
                  _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "Skipping scalable pipe device \"%{public}@\" since it is still active", buf, 0xCu);
                }
                objc_msgSend(v1, "addObject:", v43);
              }
            }
            sub_100043728(&v96);
          }
          v42 = (char *)v42 + 1;
        }
        while (v40 != v42);
        v40 = objc_msgSend(v39, "countByEnumeratingWithState:objects:count:", &v105, v139, 16);
      }
      while (v40);
    }

    if (qword_10097AC28 != -1)
      dispatch_once(&qword_10097AC28, &stru_100924CF0);
    v48 = sub_10048473C(qword_10097AC20);
    v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
    objc_msgSend(v1, "addObjectsFromArray:", v49);

    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100924C30);
    v50 = sub_1006245BC((uint64_t)off_1009778A0);
    v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
    v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v101, v138, 16);
    if (v52)
    {
      v53 = *(_QWORD *)v102;
      do
      {
        v54 = 0;
        do
        {
          if (*(_QWORD *)v102 != v53)
            objc_enumerationMutation(v51);
          v55 = *(_QWORD *)(*((_QWORD *)&v101 + 1) + 8 * (_QWORD)v54);
          if ((objc_msgSend(v1, "containsObject:", v55) & 1) == 0)
          {
            if (qword_1009778A8 != -1)
              dispatch_once(&qword_1009778A8, &stru_100924C30);
            v56 = off_1009778A0;
            sub_100030BCC(buf, v55);
            sub_100622358((uint64_t)v56, buf, 0);
          }
          v54 = (char *)v54 + 1;
        }
        while (v52 != v54);
        v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v101, v138, 16);
      }
      while (v52);
    }

    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100924C30);
    v57 = sub_100069E14((uint64_t)off_1009778A0);
    v58 = (void *)objc_claimAutoreleasedReturnValue(v57);
    v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v97, v137, 16);
    if (v59)
    {
      v60 = *(_QWORD *)v98;
      v89 = v58;
      do
      {
        v61 = 0;
        do
        {
          if (*(_QWORD *)v98 != v60)
            objc_enumerationMutation(v58);
          v62 = *(void **)(*((_QWORD *)&v97 + 1) + 8 * (_QWORD)v61);
          if ((objc_msgSend(v1, "containsObject:", v62) & 1) == 0)
          {
            if (qword_1009778A8 != -1)
              dispatch_once(&qword_1009778A8, &stru_100924C30);
            v63 = off_1009778A0;
            sub_100030BCC(buf, v62);
            if (sub_100069F78((uint64_t)v63, buf) == 1)
            {
              v96 = 0;
              sub_10011344C(&v96, 0);
              if (qword_1009778C8 != -1)
                dispatch_once(&qword_1009778C8, &stru_100924CB0);
              v64 = sub_100656B50((uint64_t)off_1009778C0, v62) + (unsigned __int16)word_10097AC08;
              v65 = qword_100999898;
              if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
              {
                v66 = v96;
                if (qword_1009778C8 != -1)
                  dispatch_once(&qword_1009778C8, &stru_100924CB0);
                v67 = sub_100656B50((uint64_t)off_1009778C0, v62);
                *(_DWORD *)buf = 138544386;
                v128 = v62;
                v129 = 1024;
                v130 = v64;
                v131 = 1024;
                v132 = v66;
                v133 = 1024;
                v134 = v67;
                v135 = 1024;
                v136 = (unsigned __int16)word_10097AC08;
                _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "Device \"%{public}@\" is unused, graceTime=%d curSecs=%d lastConnected=%d fConnectionGracePeriod=%d", buf, 0x24u);
              }
              v68 = v64 - v96;
              if (v64 >= v96)
              {
                v72 = qword_100999898;
                v58 = v89;
                if (!os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
                  goto LABEL_134;
                *(_DWORD *)buf = 138543618;
                v128 = v62;
                v129 = 1024;
                v130 = v68;
                v73 = v72;
                v74 = "Device \"%{public}@\" is unused, but is within the grace period for %d more seconds - skipping";
                v75 = 18;
LABEL_130:
                _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_INFO, v74, buf, v75);
                goto LABEL_134;
              }
              v69 = sub_10003BE44();
              v58 = v89;
              if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v69 + 344))(v69))
              {
                v109 = 0;
                if (qword_1009778A8 != -1)
                  dispatch_once(&qword_1009778A8, &stru_100924C30);
                v70 = off_1009778A0;
                sub_100030BCC(buf, v62);
                if (sub_100623C54((uint64_t)v70, buf, &v109))
                {
                  v95 = 0;
                  sub_100043758(&v95);
                  if (sub_1000F3970(v109))
                  {
                    if (qword_1009778B8 != -1)
                      dispatch_once(&qword_1009778B8, &stru_100924C90);
                    if (sub_100030864(qword_1009778B0, v62))
                    {
                      v71 = qword_100999898;
                      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
                      {
                        *(_DWORD *)buf = 138543362;
                        v128 = v62;
                        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_INFO, "Device \"%{public}@\" is unused, but is in the middle of pipe negotiaion - skipping", buf, 0xCu);
                      }
                      sub_100043728(&v95);
                      goto LABEL_134;
                    }
                  }
                  sub_100043728(&v95);
                }
              }
            }
            if (qword_1009778B8 != -1)
              dispatch_once(&qword_1009778B8, &stru_100924C90);
            if (sub_100699EA0(qword_1009778B0, v62))
            {
              v76 = qword_100999898;
              if (!os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_INFO))
                goto LABEL_134;
              *(_DWORD *)buf = 138543362;
              v128 = v62;
              v73 = v76;
              v74 = "Device \"%{public}@\" is unused, but is in the middle of pairing - skipping";
              v75 = 12;
              goto LABEL_130;
            }
            if (qword_1009778A8 != -1)
              dispatch_once(&qword_1009778A8, &stru_100924C30);
            v77 = off_1009778A0;
            sub_100030BCC(buf, v62);
            sub_100622358((uint64_t)v77, buf, 1u);
          }
LABEL_134:
          v61 = (char *)v61 + 1;
        }
        while (v59 != v61);
        v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v97, v137, 16);
      }
      while (v59);
    }

    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v78 = *(id *)(a1 + 328);
    v79 = objc_msgSend(v78, "countByEnumeratingWithState:objects:count:", &v91, v126, 16);
    if (v79)
    {
      v80 = *(_QWORD *)v92;
      do
      {
        v81 = 0;
        do
        {
          if (*(_QWORD *)v92 != v80)
            objc_enumerationMutation(v78);
          v82 = *(void **)(*((_QWORD *)&v91 + 1) + 8 * (_QWORD)v81);
          if ((objc_msgSend(v1, "containsObject:", v82) & 1) == 0)
          {
            if (qword_1009778C8 != -1)
              dispatch_once(&qword_1009778C8, &stru_100924CB0);
            v83 = sub_1000589DC((uint64_t)off_1009778C0, v82, 0);
            if (qword_100977A78 != -1)
              dispatch_once(&qword_100977A78, &stru_100924D70);
            v90[0] = _NSConcreteStackBlock;
            v90[1] = 3221225472;
            v90[2] = sub_1002EFCA8;
            v90[3] = &unk_100918868;
            v90[4] = v82;
            v90[5] = v83;
            sub_1004965EC((uint64_t)off_100977A70, v90);
          }
          v81 = (char *)v81 + 1;
        }
        while (v79 != v81);
        v79 = objc_msgSend(v78, "countByEnumeratingWithState:objects:count:", &v91, v126, 16);
      }
      while (v79);
    }

  }
  else
  {
    v84 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "Stack is shutting down, unused devices will be cleaned up", buf, 2u);
    }
  }

}

void sub_1002DE0D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1002DE254(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = *(_QWORD **)(a1 + 232);
  v2 = (_QWORD *)(a1 + 232);
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != v2 && v5[4] <= a2 && (v9 = v5[5]) != 0)
    return *(id *)(v9 + 192);
  else
    return 0;
}

id sub_1002DE2B8(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = *(_QWORD **)(a1 + 232);
  v2 = (_QWORD *)(a1 + 232);
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != v2 && v5[4] <= a2 && (v9 = v5[5]) != 0)
    return *(id *)(v9 + 200);
  else
    return 0;
}

id sub_1002DE31C(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = *(_QWORD **)(a1 + 232);
  v2 = (_QWORD *)(a1 + 232);
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != v2 && v5[4] <= a2 && (v9 = v5[5]) != 0)
    return *(id *)(v9 + 88);
  else
    return 0;
}

uint64_t sub_1002DE380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v5;
  int v6;
  __int128 v8;
  _OWORD *v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  _OWORD v13[2];
  _OWORD v14[2];

  if (!a2)
    return 3;
  if ((a4 & 0x100000000) != 0)
  {
    v8 = a5[1];
    v14[0] = *a5;
    v14[1] = v8;
    v9 = v14;
    v10 = a2;
    v11 = 0;
LABEL_10:
    sub_100409BB4(v10, v11, v9);
    return 0;
  }
  if ((a4 & 0x10000) != 0)
  {
    v12 = a5[1];
    v13[0] = *a5;
    v13[1] = v12;
    v9 = v13;
    v10 = a2;
    v11 = 1;
    goto LABEL_10;
  }
  if ((a4 & 0x1000000) != 0)
  {
    v5 = a2;
    v6 = 0;
    goto LABEL_14;
  }
  if ((a4 & 0x100) != 0)
  {
    v5 = a2;
    v6 = 1;
LABEL_14:
    sub_100409CC4(v5, v6);
  }
  return 0;
}

uint64_t sub_1002DE404(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, unsigned int a5, void *a6, uint64_t a7, unsigned int a8, void *a9, _DWORD *a10, _BYTE *a11, uint64_t a12, unsigned int a13, unsigned __int16 a14, void *a15)
{
  id v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void *v34;
  _QWORD *v35;
  BOOL v36;
  int v38;
  NSObject *v39;
  _BYTE *v40;
  const char *v41;
  NSObject *v42;
  _BYTE *v43;
  _BYTE *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  const char *v50;
  int v51;
  _BYTE *v52;
  _BYTE *v53;
  const char *v54;
  const char *v55;
  void *p_p;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  void **v61;
  void *v62;
  void **v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  __int128 v68;
  void *v69;
  void *v70;
  NSObject *v71;
  _BYTE *v72;
  NSObject *v73;
  int v74;
  __int128 v75;
  void *v76;
  NSObject *v77;
  _BYTE *v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  int v87;
  NSObject *v88;
  int v89;
  void *v90;
  void *v91;
  __int128 v92;
  id obj;
  id v97;
  id v98;
  uint64_t v100;
  uint64_t v101;
  id v102;
  _OWORD v103[2];
  void *__p;
  char v105;
  unint64_t v106;
  _QWORD v107[7];
  _OWORD v108[2];
  uint64_t v109;
  unsigned int v110;
  unsigned __int16 v111;
  _BYTE buf[32];
  _BYTE v113[10];
  __int16 v114;
  id v115;
  __int16 v116;
  void *v117;
  _BYTE v118[12];
  __int16 v119;
  id v120;
  char v121;

  v109 = a12;
  v110 = a13;
  v111 = a14;
  v97 = a2;
  obj = a6;
  v19 = a6;
  v102 = a9;
  v98 = a15;
  v100 = sub_100069D20();
  v21 = *(_QWORD **)(a1 + 224);
  v101 = a1;
  if (v21 == (_QWORD *)(a1 + 232))
  {
LABEL_24:
    v106 = 0;
    v30 = a7;
    if (*(char *)(a7 + 23) < 0)
    {
      v32 = *(char **)a7;
      v31 = *(_QWORD *)(a7 + 8);
    }
    else
    {
      v31 = *(unsigned __int8 *)(a7 + 23);
      v32 = (char *)a7;
    }
    if (v31 >= 20)
    {
      v33 = &v32[v31];
      v34 = v32;
      do
      {
        v35 = memchr(v34, 99, v31 - 19);
        if (!v35)
          break;
        v36 = *v35 == 0x6C7070612E6D6F63 && v35[1] == 0x6F7465756C622E65;
        if (v36 && *((_DWORD *)v35 + 4) == 1684567151)
          break;
        v34 = (char *)v35 + 1;
        v31 = v33 - (_BYTE *)v34;
      }
      while (v33 - (_BYTE *)v34 >= 20);
    }
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100924E10);
    if (sub_10000A378(qword_100977B48, a7))
    {
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
        sub_1006DCDEC();
      goto LABEL_100;
    }
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100924E10);
    v22 = sub_1000229D8((_QWORD *)qword_100977B48, v106);
    (**(void (***)(uint64_t, uint64_t, id, _QWORD))v100)(v100, v22, v19, a5);
    if (!(_BYTE)v109)
    {
LABEL_70:
      v45 = (*(uint64_t (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v100 + 48))(v100, v22, a8 == 0);
      if (BYTE1(v109))
        v46 = 0;
      else
        v46 = v45;
      if ((v46 & 1) != 0)
      {
        if (a8)
        {
          if (a8 != 1)
            goto LABEL_79;
          v47 = sub_100065478();
          v48 = 10;
        }
        else
        {
          v47 = sub_100065478();
          v48 = 9;
        }
        (*(void (**)(uint64_t, id, uint64_t))(*(_QWORD *)v47 + 632))(v47, v19, v48);
      }
LABEL_79:
      v49 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        if (a8)
          v50 = "peripheral";
        else
          v50 = "central";
        sub_1000340DC(v22, (uint64_t)v118);
        v51 = v121;
        v52 = *(_BYTE **)v118;
        sub_1002DF82C((unsigned __int8 *)&v109);
        v53 = v118;
        v54 = "on";
        if (v51 < 0)
          v53 = v52;
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = v50;
        if (v102)
          v55 = "on";
        else
          v55 = "off";
        if (!v46)
          v54 = "off";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v53;
        if (v105 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&buf[24] = v54;
        *(_WORD *)v113 = 2082;
        *(_QWORD *)&v113[2] = v55;
        v114 = 2114;
        v115 = v102;
        v116 = 2080;
        v117 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Registering %{public}s session \"%{public}s\" with backgrounding: %{public}s, persistence: %{public}s (CBSR) restoreID: %{public}@ %s", buf, 0x3Eu);
        if (v105 < 0)
          operator delete(__p);
        v30 = a7;
        if (v121 < 0)
          operator delete(*(void **)v118);
      }
      if (sub_1000126BC(v101, v22, v19, a8))
      {
        (*(void (**)(uint64_t, uint64_t, id))(*(_QWORD *)v100 + 8))(v100, v22, v19);
        if (qword_100977B50 == -1)
        {
LABEL_99:
          sub_10000B174(qword_100977B48, v106);
LABEL_100:
          v22 = 0;
          goto LABEL_101;
        }
LABEL_187:
        dispatch_once(&qword_100977B50, &stru_100924E10);
        goto LABEL_99;
      }
      if (qword_100978170 != -1)
        dispatch_once(&qword_100978170, &stru_100924DD0);
      v58 = sub_10000A1A4((uint64_t)off_100978168, v22, a8);
      v59 = v58;
      if (!v58)
      {
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
          sub_1006DCD68();
        (*(void (**)(uint64_t, uint64_t, id))(*(_QWORD *)v100 + 8))(v100, v22, v19);
        if (qword_100977B50 == -1)
          goto LABEL_99;
        goto LABEL_187;
      }
      *(_QWORD *)(v58 + 120) = a3;
      v60 = (void **)(v58 + 88);
      objc_storeStrong((id *)(v58 + 88), obj);
      if (qword_10097AC58 != -1)
        dispatch_once(&qword_10097AC58, &stru_100924E30);
      *(_BYTE *)(v59 + 128) = sub_10000903C(qword_10097AC50, v19);
      v61 = (void **)(v59 + 96);
      objc_storeStrong((id *)(v59 + 96), a9);
      if (!*(_BYTE *)(v101 + 425))
      {
        if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_ERROR))
          sub_1006DCDC0();
        v62 = *v61;
        *v61 = 0;

      }
      if (*v61)
        *(_BYTE *)(v101 + 178) = 1;
      *(_BYTE *)(v59 + 28) = (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v100 + 56))(v100, v22) != 32;
      *(_BYTE *)(v59 + 27) = BYTE2(v109);
      *(_WORD *)(v59 + 36) = *(_WORD *)((char *)&v109 + 3);
      *(_BYTE *)(v59 + 184) = BYTE6(v109);
      *(_WORD *)(v59 + 25) = v110;
      v63 = (void **)(v59 + 104);
      objc_storeStrong((id *)(v59 + 104), a2);
      *(_BYTE *)(v59 + 73) = 0;
      v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59);
      if ((_DWORD)v64 == 1)
      {
        v64 = _os_feature_enabled_impl("FindMy", "BA_Power_Off");
        if ((_DWORD)v64)
        {
          *(_BYTE *)(v59 + 264) = HIBYTE(v109);
        }
        else
        {
          v64 = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v64)
            sub_1006DCD94();
        }
      }
      if (!a8)
      {
        *(_BYTE *)(v59 + 382) = HIBYTE(v111);
        v75 = a4[1];
        v103[0] = *a4;
        v103[1] = v75;
        sub_1002DE380(v64, v59, v109, v110 | ((unint64_t)v111 << 32), v103);
      }
      if (*(char *)(v30 + 23) < 0)
        v30 = *(_QWORD *)v30;
      v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v30));
      sub_10000F858(v101, v59, v22, v76, BYTE5(v109), 0);
      v77 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000340DC(v22, (uint64_t)v118);
        v78 = v121 >= 0 ? v118 : *(_BYTE **)v118;
        v79 = *(unsigned __int8 *)(v101 + 179);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = v78;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = BYTE3(v109);
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = BYTE4(v109);
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v79;
        *(_WORD *)&buf[30] = 1024;
        *(_DWORD *)v113 = BYTE6(v109);
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" : needsRestrictedStateOperation = %d, overrideRestrictedState = %d , denylistMode = %d, receivesControllerBTClockEvents=%d ", buf, 0x24u);
        if (v121 < 0)
          operator delete(*(void **)v118);
      }
      if (!(BYTE1(v110) | HIBYTE(v110)))
      {
        if (BYTE3(v109))
        {
          if (qword_100978130 != -1)
            dispatch_once(&qword_100978130, &stru_100924BF0);
          v80 = sub_10002527C((uint64_t)off_100978128);
          if (v80 == 1)
          {
            *a11 = *(_BYTE *)(v101 + 179);
LABEL_175:
            *a10 = v80;
            v85 = sub_100027F68();
            sub_100091AE8(buf, "Sentinel");
            sub_100091AE8(v118, "LEConnection");
            v86 = (unsigned __int8 *)(v59 + 44);
            v87 = (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v85 + 72))(v85, buf, v118, v59 + 44);
            if (v121 < 0)
              operator delete(*(void **)v118);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
            if (v87)
            {
              v88 = qword_100999898;
              if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
              {
                v89 = *v86;
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = v89;
                _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "Sentinel LE Connection Enabled Override %d", buf, 8u);
              }
            }
            v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v101 + 320), "objectForKeyedSubscript:", *v60));
            v91 = v90;
            if (HIBYTE(v111) && (!v90 || (objc_msgSend(v90, "containsObject:", *v63) & 1) == 0))
              sub_1002DFC10(v101, *v60, *v63);

            goto LABEL_101;
          }
        }
        if (BYTE4(v109) || !*(_BYTE *)(v101 + 179))
        {
          if (qword_100978130 != -1)
            dispatch_once(&qword_100978130, &stru_100924BF0);
          v80 = sub_10002527C((uint64_t)off_100978128);
          goto LABEL_175;
        }
      }
      v80 = 0;
      goto LABEL_175;
    }
    if (qword_100978130 != -1)
      dispatch_once(&qword_100978130, &stru_100924BF0);
    v38 = sub_10002527C((uint64_t)off_100978128);
    if (v38)
    {
      if (!*(_BYTE *)(v101 + 179))
        goto LABEL_70;
      v39 = qword_100999898;
      if (!os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        goto LABEL_69;
      sub_1000340DC(v22, (uint64_t)buf);
      if (buf[23] >= 0)
        v40 = buf;
      else
        v40 = *(_BYTE **)buf;
      *(_DWORD *)v118 = 136446210;
      *(_QWORD *)&v118[4] = v40;
      v41 = "Bluetooth is in denylist mode - show LE_DENYLIST_ENABLED alert for \"%{public}s\"";
    }
    else
    {
      v39 = qword_100999898;
      if (!os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
LABEL_69:
        (*(void (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v100 + 24))(v100, v22, v38 != 0);
        goto LABEL_70;
      }
      sub_1000340DC(v22, (uint64_t)buf);
      if (buf[23] >= 0)
        v44 = buf;
      else
        v44 = *(_BYTE **)buf;
      *(_DWORD *)v118 = 136446210;
      *(_QWORD *)&v118[4] = v44;
      v41 = "Bluetooth is powered off - notifying session \"%{public}s\"";
    }
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, v41, v118, 0xCu);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    goto LABEL_69;
  }
  *(_QWORD *)&v20 = 136446466;
  v92 = v20;
  while (1)
  {
    v22 = v21[4];
    v23 = v21[5];
    if (*(_QWORD *)(v23 + 120) == a3)
    {
      v24 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_FAULT))
      {
        sub_1000340DC(v22, (uint64_t)buf);
        v29 = buf;
        if (buf[23] < 0)
          v29 = *(_BYTE **)buf;
        *(_DWORD *)v118 = v92;
        *(_QWORD *)&v118[4] = v29;
        v119 = 2114;
        v120 = v19;
        _os_log_fault_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Duplicate check-in message from session \"%{public}s\" in application \"%{public}@\"", v118, 0x16u);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
    }
    if ((objc_msgSend(*(id *)(v23 + 88), "isEqualToString:", v19, v92) & 1) != 0)
    {
      if (!*(_QWORD *)(v23 + 120) && *(_QWORD *)(v23 + 96))
      {
        v25 = qword_1009998F0;
        if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
        {
          v26 = *(_QWORD *)(v23 + 88);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Starting timer for a dead session to clean up leaked prior session for \"%{public}@\"", buf, 0xCu);
        }
        sub_1002DF540(a1, *(void **)(v23 + 88), 15);
      }
      if (objc_msgSend(*(id *)(v23 + 96), "isEqualToString:", v102)
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23) == a8)
      {
        break;
      }
    }
    v27 = (_QWORD *)v21[1];
    if (v27)
    {
      do
      {
        v28 = v27;
        v27 = (_QWORD *)*v27;
      }
      while (v27);
    }
    else
    {
      do
      {
        v28 = (_QWORD *)v21[2];
        v36 = *v28 == (_QWORD)v21;
        v21 = v28;
      }
      while (!v36);
    }
    v21 = v28;
    if (v28 == (_QWORD *)(a1 + 232))
      goto LABEL_24;
  }
  v42 = qword_1009998F0;
  if (*(_QWORD *)(v23 + 120))
  {
    if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_ERROR))
    {
      sub_1000340DC(v22, (uint64_t)v118);
      v43 = v121 >= 0 ? v118 : *(_BYTE **)v118;
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)&buf[4] = v102;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v43;
      *(_WORD *)&buf[22] = 2114;
      *(_QWORD *)&buf[24] = v19;
      _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Duplicate restore identifier \"%{public}@\" from session \"%{public}s\" in application \"%{public}@\"", buf, 0x20u);
      if (v121 < 0)
        operator delete(*(void **)v118);
    }
    goto LABEL_100;
  }
  v65 = a7;
  if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000340DC(v22, (uint64_t)v118);
    v66 = v121 >= 0 ? v118 : *(_BYTE **)v118;
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&buf[4] = a8;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = v66;
    *(_WORD *)&buf[18] = 2114;
    *(_QWORD *)&buf[20] = v19;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Restoring zombie'd session type %d \"%{public}s\" for application \"%{public}@\"", buf, 0x1Cu);
    if (v121 < 0)
      operator delete(*(void **)v118);
  }
  *(_QWORD *)(v23 + 120) = a3;
  v67 = sub_10050971C(v22, (const std::string *)a7);
  if (!a8)
  {
    v68 = a4[1];
    v108[0] = *a4;
    v108[1] = v68;
    sub_1002DE380(v67, v23, v109, v110 | ((unint64_t)v111 << 32), v108);
  }
  if (*(char *)(a7 + 23) < 0)
    v65 = *(_QWORD *)a7;
  v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v65));
  sub_10000F858(a1, v23, v22, v69, BYTE5(v109), 1);
  v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 304), "objectForKey:", v19));
  if (v70)
  {
    v71 = qword_1009998F0;
    if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(v22, (uint64_t)v118);
      v72 = v121 >= 0 ? v118 : *(_BYTE **)v118;
      *(_DWORD *)buf = 138543874;
      *(_QWORD *)&buf[4] = v102;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v72;
      *(_WORD *)&buf[22] = 2114;
      *(_QWORD *)&buf[24] = v19;
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "Restore identifier \"%{public}@\" from session \"%{public}s\" in application \"%{public}@\" found, canceling resurrectionTimer", buf, 0x20u);
      if (v121 < 0)
        operator delete(*(void **)v118);
    }
    dispatch_block_cancel(v70);
    objc_msgSend(*(id *)(v101 + 304), "removeObjectForKey:", v19);
    objc_msgSend(*(id *)(v101 + 296), "removeObject:", v19);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v101 + 16))(v101, v22);
  v73 = qword_1009998F0;
  if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "Ignore needsRestrictedStateOperation since restorable sessions are always apps", buf, 2u);
  }
  if (*(_BYTE *)(v101 + 179))
  {
    v74 = 0;
  }
  else
  {
    if (qword_100978130 != -1)
      dispatch_once(&qword_100978130, &stru_100924BF0);
    v74 = sub_10002527C((uint64_t)off_100978128);
  }
  *a10 = v74;
  v81 = sub_10003BE44();
  v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 384))(v81);
  if (*a10)
    v83 = v82;
  else
    v83 = 0;
  if (v83 == 1)
  {
    v84 = sub_1000419F4();
    v107[0] = _NSConcreteStackBlock;
    v107[1] = 3221225472;
    v107[2] = sub_1002DF770;
    v107[3] = &unk_1009210D8;
    v107[4] = v101;
    v107[5] = v22;
    v107[6] = v23;
    sub_100041A34(v84, v107);
  }

LABEL_101:
  return v22;
}

void sub_1002DF440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

void sub_1002DF540(uint64_t a1, void *a2, int a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  id v8;
  dispatch_block_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  void *v18;
  id v19;
  uint64_t v20;
  uint8_t buf[4];
  _QWORD v22[2];

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 304), "objectForKey:", v5));

  v7 = qword_1009998F0;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138543362;
      v22[0] = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Death Timer Already Exists For <%{public}@> Skipping", buf, 0xCu);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240450;
      LODWORD(v22[0]) = a3;
      WORD2(v22[0]) = 2114;
      *(_QWORD *)((char *)v22 + 6) = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Starting Resurrection Timer (%{public}d secs) for <%{public}@>", buf, 0x12u);
    }
    v15 = _NSConcreteStackBlock;
    v16 = 3221225472;
    v17 = sub_1002EF650;
    v18 = &unk_100918868;
    v20 = a1;
    v8 = v5;
    v19 = v8;
    v9 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, &v15);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 304), "objectForKey:", v8, v15, v16, v17, v18));
    v11 = v10;
    if (v10)
      dispatch_block_cancel(v10);
    v12 = *(void **)(a1 + 304);
    v13 = objc_retainBlock(v9);
    objc_msgSend(v12, "setObject:forKey:", v13, v8);

    v14 = sub_1000419F4();
    sub_100475CEC(v14, 1000 * a3, v9);

  }
}

void sub_1002DF72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1002DF770(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  NSObject *v10;
  __int16 v11[8];

  v1 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)(v1 + 232);
  v2 = (_QWORD *)(v1 + 232);
  v3 = v4;
  if (!v4)
    goto LABEL_12;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = v2;
  do
  {
    v7 = v3[4];
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = v3;
    else
      v9 = v3 + 1;
    if (v8)
      v6 = v3;
    v3 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 != v2 && v5 >= v6[4])
  {
    sub_1000690EC(*(_QWORD **)(a1 + 48));
  }
  else
  {
LABEL_12:
    v10 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Dropping enqueued messages as session has been terminated", (uint8_t *)v11, 2u);
    }
  }
}

uint64_t sub_1002DF82C(unsigned __int8 *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  uint64_t v31;
  _OWORD v33[4];
  void *__p[2];
  __int128 v35;
  __int128 v36;
  _OWORD v37[9];
  uint64_t v38;
  std::locale v39;

  v38 = 0;
  v36 = 0u;
  memset(v37, 0, sizeof(v37));
  *(_OWORD *)__p = 0u;
  v35 = 0u;
  memset(v33, 0, sizeof(v33));
  sub_100272ADC((uint64_t)v33);
  *(_DWORD *)((char *)v33 + *(_QWORD *)(*(_QWORD *)&v33[0] - 24) + 8) &= ~1u;
  sub_1002614D8(v33, (uint64_t)"AppManagerFlags ", 16);
  v2 = sub_1002614D8(v33, (uint64_t)"showPowerPrompt:", 16);
  v3 = (_QWORD *)std::ostream::operator<<(v2, *a1);
  sub_1002614D8(v3, (uint64_t)" ", 1);
  v4 = sub_1002614D8(v33, (uint64_t)"backgroundingDisabled:", 22);
  v5 = (_QWORD *)std::ostream::operator<<(v4, a1[1]);
  sub_1002614D8(v5, (uint64_t)" ", 1);
  v6 = sub_1002614D8(v33, (uint64_t)"programmaticPairing:", 20);
  v7 = (_QWORD *)std::ostream::operator<<(v6, a1[2]);
  sub_1002614D8(v7, (uint64_t)" ", 1);
  v8 = sub_1002614D8(v33, (uint64_t)"needsRestrictedStateOperation:", 30);
  v9 = (_QWORD *)std::ostream::operator<<(v8, a1[3]);
  sub_1002614D8(v9, (uint64_t)" ", 1);
  v10 = sub_1002614D8(v33, (uint64_t)"overrideRestrictedState:", 24);
  v11 = (_QWORD *)std::ostream::operator<<(v10, a1[4]);
  sub_1002614D8(v11, (uint64_t)" ", 1);
  v12 = sub_1002614D8(v33, (uint64_t)"tccExemptAppBundle:", 19);
  v13 = (_QWORD *)std::ostream::operator<<(v12, a1[5]);
  sub_1002614D8(v13, (uint64_t)" ", 1);
  v14 = sub_1002614D8(v33, (uint64_t)"receivesControllerBTClockEvents:", 32);
  v15 = (_QWORD *)std::ostream::operator<<(v14, a1[6]);
  sub_1002614D8(v15, (uint64_t)" ", 1);
  v16 = sub_1002614D8(v33, (uint64_t)"receivesOfflineADVDataRequests:", 31);
  v17 = (_QWORD *)std::ostream::operator<<(v16, a1[7]);
  sub_1002614D8(v17, (uint64_t)" ", 1);
  v18 = sub_1002614D8(v33, (uint64_t)"hasEntitlementBTCentralBackground:", 34);
  v19 = (_QWORD *)std::ostream::operator<<(v18, a1[8]);
  sub_1002614D8(v19, (uint64_t)" ", 1);
  v20 = sub_1002614D8(v33, (uint64_t)"deviceAccessForMediaSession:", 28);
  v21 = (_QWORD *)std::ostream::operator<<(v20, a1[9]);
  sub_1002614D8(v21, (uint64_t)" ", 1);
  v22 = sub_1002614D8(v33, (uint64_t)"deviceAccessForMediaExtensionSession:", 37);
  v23 = (_QWORD *)std::ostream::operator<<(v22, a1[10]);
  sub_1002614D8(v23, (uint64_t)" ", 1);
  v24 = sub_1002614D8(v33, (uint64_t)"deviceAccessPerAccessorySession:", 32);
  v25 = (_QWORD *)std::ostream::operator<<(v24, a1[11]);
  sub_1002614D8(v25, (uint64_t)" ", 1);
  v26 = sub_1002614D8(v33, (uint64_t)"deviceAccessPerAccessoryExtensionSession:", 41);
  v27 = (_QWORD *)std::ostream::operator<<(v26, a1[12]);
  sub_1002614D8(v27, (uint64_t)" ", 1);
  v28 = sub_1002614D8(v33, (uint64_t)"worksWithFindMyDevices:", 23);
  v29 = (_QWORD *)std::ostream::operator<<(v28, a1[13]);
  sub_1002614D8(v29, (uint64_t)" ", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(*(_QWORD *)&v33[0] - 24)));
  v30 = std::locale::use_facet(&v39, &std::ctype<char>::id);
  v31 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
  std::locale::~locale(&v39);
  std::ostream::put(v33, v31);
  std::ostream::flush(v33);
  std::stringbuf::str((char *)v33 + 8);
  if (SHIBYTE(v35) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf((char *)v33 + 8);
  return std::ios::~ios(v37);
}

void sub_1002DFBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 40));
  sub_100272CFC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1002DFC10(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  id v12;
  __int16 v13;
  void *v14;

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (v5 && v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 320), "objectForKeyedSubscript:", v5));
    if (v8)
    {
      v9 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));

      v8 = (void *)v9;
    }
    objc_msgSend(v8, "addObject:", v7);
    objc_msgSend(*(id *)(a1 + 320), "setObject:forKeyedSubscript:", v8, v5);
    v10 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 138543618;
      v12 = v5;
      v13 = 2112;
      v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Application %{public}@ for user %@ is interested in FindMy devices", (uint8_t *)&v11, 0x16u);
    }

  }
}

void sub_1002DFD44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1002DFD6C(uint64_t a1, uint64_t a2, unsigned int a3, void *a4, uint64_t a5, unsigned int a6, void *a7, _DWORD *a8, _BYTE *a9, uint64_t a10)
{
  id v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  _QWORD *v22;
  _QWORD *v23;
  _BYTE *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void *v28;
  _QWORD *v29;
  BOOL v30;
  int v32;
  NSObject *v33;
  _BYTE *v34;
  const char *v35;
  NSObject *v36;
  _BYTE *v37;
  const char *v38;
  _BYTE *v39;
  NSObject *v40;
  int v41;
  uint64_t v42;
  _BYTE *v43;
  int v44;
  NSObject *v45;
  const char *v46;
  void **v47;
  const char *v48;
  const char *v49;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  void **v54;
  int v55;
  __int128 v56;
  id obj;
  id v58;
  uint64_t v61;
  _BYTE *v62;
  id v63;
  void *v64[2];
  char v65;
  unint64_t v66;
  _QWORD v67[7];
  _BYTE __p[12];
  __int16 v69;
  _BYTE v70[10];
  const char *v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  id v75;
  _BYTE buf[12];
  __int16 v77;
  id v78;
  char v79;

  obj = a4;
  v15 = a4;
  v58 = a7;
  v63 = a7;
  v61 = sub_100069D20();
  v17 = *(_QWORD **)(a1 + 224);
  v62 = (_BYTE *)a1;
  v18 = (_QWORD *)(a1 + 232);
  if (v17 == v18)
  {
LABEL_23:
    v66 = 0;
    if (*(char *)(a5 + 23) < 0)
    {
      v26 = *(char **)a5;
      v25 = *(_QWORD *)(a5 + 8);
    }
    else
    {
      v25 = *(unsigned __int8 *)(a5 + 23);
      v26 = (char *)a5;
    }
    if (v25 >= 20)
    {
      v27 = &v26[v25];
      v28 = v26;
      do
      {
        v29 = memchr(v28, 99, v25 - 19);
        if (!v29)
          break;
        v30 = *v29 == 0x6C7070612E6D6F63 && v29[1] == 0x6F7465756C622E65;
        if (v30 && *((_DWORD *)v29 + 4) == 1684567151)
          break;
        v28 = (char *)v29 + 1;
        v25 = v27 - (_BYTE *)v28;
      }
      while (v27 - (_BYTE *)v28 >= 20);
    }
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100924E10);
    if (sub_10000A378(qword_100977B48, a5))
    {
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
        sub_1006DCDEC();
      goto LABEL_121;
    }
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100924E10);
    v19 = sub_1000229D8((_QWORD *)qword_100977B48, v66);
    if (!v19)
      goto LABEL_150;
    if (qword_100977B50 != -1)
      dispatch_once(&qword_100977B50, &stru_100924E10);
    if (!sub_10006C874(qword_100977B48, v19))
    {
LABEL_150:
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
        sub_1006DCF60();
      goto LABEL_121;
    }
    (**(void (***)(uint64_t, uint64_t, id, _QWORD))v61)(v61, v19, v15, a3);
    if ((a10 & 1) == 0)
    {
LABEL_94:
      if ((*(unsigned int (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v61 + 48))(v61, v19, a6 == 0))
      {
        v44 = 1;
        if (a6 != 1 || (a10 & 0x100) == 0)
          goto LABEL_100;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
        {
          sub_1000340DC(v19, (uint64_t)buf);
          sub_1006DCFC4();
        }
      }
      v44 = 0;
LABEL_100:
      v45 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000340DC(v19, (uint64_t)v64);
        v46 = "unknonw";
        if (a6 == 3)
          v46 = "classic";
        if (a6 == 1)
          v46 = "peripheral";
        if (!a6)
          v46 = "central";
        if (v65 >= 0)
          v47 = v64;
        else
          v47 = (void **)v64[0];
        *(_DWORD *)__p = 136447234;
        *(_QWORD *)&__p[4] = v46;
        v48 = "on";
        v69 = 2082;
        *(_QWORD *)v70 = v47;
        if (v44)
          v49 = "on";
        else
          v49 = "off";
        *(_WORD *)&v70[8] = 2082;
        v71 = v49;
        if (!v63)
          v48 = "off";
        v72 = 2082;
        v73 = v48;
        v74 = 2114;
        v75 = v63;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Registering %{public}s session \"%{public}s\" with backgrounding: %{public}s, persistence: %{public}s restoreID: %{public}@", __p, 0x34u);
        if (v65 < 0)
          operator delete(v64[0]);
      }
      if (!sub_1000126BC((uint64_t)v62, v19, v15, a6))
      {
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_100924DD0);
        v51 = sub_10000A1A4((uint64_t)off_100978168, v19, a6);
        v52 = v51;
        if (v51)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51) == 3)
            *(_QWORD *)(v52 + 216) = a2;
          objc_storeStrong((id *)(v52 + 88), obj);
          objc_storeStrong((id *)(v52 + 96), v58);
          if (*(_QWORD *)(v52 + 96))
            v62[178] = 1;
          *(_BYTE *)(v52 + 28) = (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 56))(v61, v19) != 32;
          *(_BYTE *)(v52 + 27) = BYTE2(a10) & 1;
          *(_BYTE *)(v52 + 36) = BYTE3(a10) & 1;
          *(_BYTE *)(v52 + 37) = BYTE4(a10) & 1;
        }
        v53 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000340DC(v19, (uint64_t)v64);
          v54 = v65 >= 0 ? v64 : (void **)v64[0];
          v55 = v62[179];
          *(_DWORD *)__p = 136446978;
          *(_QWORD *)&__p[4] = v54;
          v69 = 1024;
          *(_DWORD *)v70 = BYTE3(a10) & 1;
          *(_WORD *)&v70[4] = 1024;
          *(_DWORD *)&v70[6] = BYTE4(a10) & 1;
          LOWORD(v71) = 1024;
          *(_DWORD *)((char *)&v71 + 2) = v55;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" : needsRestrictedStateOperation = %d, overrideRestrictedState = %d , denylistMode = %d", __p, 0x1Eu);
          if (v65 < 0)
            operator delete(v64[0]);
        }
        if ((a10 & 0x1000000) != 0)
        {
          if (qword_100978130 != -1)
            dispatch_once(&qword_100978130, &stru_100924BF0);
          if (sub_10002527C((uint64_t)off_100978128) == 1)
          {
            *a9 = v62[179];
            *a8 = 1;
            goto LABEL_122;
          }
        }
        if ((a10 & 0x100000000) != 0 || !v62[179])
        {
          if (qword_100978130 != -1)
            dispatch_once(&qword_100978130, &stru_100924BF0);
          *a8 = sub_10002527C((uint64_t)off_100978128);
          goto LABEL_122;
        }
LABEL_144:
        *a8 = 0;
        goto LABEL_122;
      }
      (*(void (**)(uint64_t, uint64_t, id))(*(_QWORD *)v61 + 8))(v61, v19, v15);
      if (qword_100977B50 != -1)
        dispatch_once(&qword_100977B50, &stru_100924E10);
      sub_10000B174(qword_100977B48, v66);
LABEL_121:
      v19 = 0;
      goto LABEL_122;
    }
    if (qword_100978130 != -1)
      dispatch_once(&qword_100978130, &stru_100924BF0);
    v32 = sub_10002527C((uint64_t)off_100978128);
    if (v32)
    {
      if (!v62[179])
        goto LABEL_94;
      v33 = qword_100999898;
      if (!os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
        goto LABEL_93;
      sub_1000340DC(v19, (uint64_t)__p);
      if (v70[9] >= 0)
        v34 = __p;
      else
        v34 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v34;
      v35 = "Bluetooth is in denylist mode - show LE_DENYLIST_ENABLED alert for \"%{public}s\"";
    }
    else
    {
      v33 = qword_100999898;
      if (!os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
LABEL_93:
        (*(void (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v61 + 24))(v61, v19, v32 != 0);
        goto LABEL_94;
      }
      sub_1000340DC(v19, (uint64_t)__p);
      if (v70[9] >= 0)
        v43 = __p;
      else
        v43 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v43;
      v35 = "Bluetooth is powered off - notifying session \"%{public}s\"";
    }
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, v35, buf, 0xCu);
    if ((v70[9] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    goto LABEL_93;
  }
  *(_QWORD *)&v16 = 136446466;
  v56 = v16;
  while (1)
  {
    v19 = v17[4];
    v20 = v17[5];
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20) == 3)
    {
      if (*(_QWORD *)(v20 + 216) == a2)
      {
        v21 = qword_100999898;
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_FAULT))
        {
          sub_1000340DC(v19, (uint64_t)__p);
          v24 = __p;
          if (v70[9] < 0)
            v24 = *(_BYTE **)__p;
          *(_DWORD *)buf = v56;
          *(_QWORD *)&buf[4] = v24;
          v77 = 2114;
          v78 = v15;
          _os_log_fault_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Duplicate check-in message from session \"%{public}s\" in application \"%{public}@\"", buf, 0x16u);
          if ((v70[9] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
      }
      if ((objc_msgSend(*(id *)(v20 + 88), "isEqualToString:", v15, v56, obj, v58) & 1) != 0)
      {
        if (!*(_QWORD *)(v20 + 216) && *(_QWORD *)(v20 + 96))
          sub_1002DF540((uint64_t)v62, *(void **)(v20 + 88), 15);
        if (objc_msgSend(*(id *)(v20 + 96), "isEqualToString:", v63)
          && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20) == a6)
        {
          break;
        }
      }
    }
    v22 = (_QWORD *)v17[1];
    if (v22)
    {
      do
      {
        v23 = v22;
        v22 = (_QWORD *)*v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        v23 = (_QWORD *)v17[2];
        v30 = *v23 == (_QWORD)v17;
        v17 = v23;
      }
      while (!v30);
    }
    v17 = v23;
    if (v23 == v18)
      goto LABEL_23;
  }
  v36 = qword_100999898;
  if (*(_QWORD *)(v20 + 216))
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
    {
      sub_1000340DC(v19, (uint64_t)buf);
      v37 = v79 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)__p = 138543874;
      *(_QWORD *)&__p[4] = v63;
      v69 = 2082;
      *(_QWORD *)v70 = v37;
      *(_WORD *)&v70[8] = 2114;
      v71 = (const char *)v15;
      _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "(CBSR) Duplicate restore identifier \"%{public}@\" from session \"%{public}s\" in application \"%{public}@\"", __p, 0x20u);
      if (v79 < 0)
        operator delete(*(void **)buf);
    }
    goto LABEL_121;
  }
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000340DC(v19, (uint64_t)buf);
    v38 = "unknown";
    if (a6 == 3)
      v38 = "classic";
    if (a6 == 1)
      v38 = "peripheral";
    if (!a6)
      v38 = "central";
    *(_DWORD *)__p = 136446722;
    *(_QWORD *)&__p[4] = v38;
    if (v79 >= 0)
      v39 = buf;
    else
      v39 = *(_BYTE **)buf;
    v69 = 2082;
    *(_QWORD *)v70 = v39;
    *(_WORD *)&v70[8] = 2114;
    v71 = (const char *)v15;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "(CBSR) Restoring zombie'd %{public}s session \"%{public}s\" for application \"%{public}@\"", __p, 0x20u);
    if (v79 < 0)
      operator delete(*(void **)buf);
  }
  *(_QWORD *)(v20 + 216) = a2;
  sub_10050971C(v19, (const std::string *)a5);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v62 + 16))(v62, v19);
  v40 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__p = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Ignore needsRestrictedStateOperation since restorable sessions are always apps", __p, 2u);
  }
  if (v62[179])
    goto LABEL_144;
  if (qword_100978130 != -1)
    dispatch_once(&qword_100978130, &stru_100924BF0);
  v41 = sub_10002527C((uint64_t)off_100978128);
  *a8 = v41;
  if (v41)
  {
    v42 = sub_1000419F4();
    v67[0] = _NSConcreteStackBlock;
    v67[1] = 3221225472;
    v67[2] = sub_1002E0974;
    v67[3] = &unk_1009210D8;
    v67[4] = v62;
    v67[5] = v19;
    v67[6] = v20;
    sub_100041A34(v42, v67);
  }
LABEL_122:

  return v19;
}

void sub_1002E0914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1002E0974(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  NSObject *v10;
  __int16 v11[8];

  v1 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD **)(v1 + 232);
  v2 = (_QWORD *)(v1 + 232);
  v3 = v4;
  if (!v4)
    goto LABEL_12;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = v2;
  do
  {
    v7 = v3[4];
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = v3;
    else
      v9 = v3 + 1;
    if (v8)
      v6 = v3;
    v3 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 != v2 && v5 >= v6[4])
  {
    sub_1000690EC(*(_QWORD **)(a1 + 48));
  }
  else
  {
LABEL_12:
    v10 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Dropping enqueued messages as session has been terminated", (uint8_t *)v11, 2u);
    }
  }
}

uint64_t sub_1002E0A30(uint64_t a1, void *a2)
{
  id v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  BOOL v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t *v13;
  NSObject *v14;
  _BOOL4 v15;
  id v17;
  _BYTE buf[12];
  __int16 v19;
  int v20;

  v3 = a2;
  v17 = v3;
  v6 = *(uint64_t ***)(a1 + 248);
  v4 = (uint64_t **)(a1 + 248);
  v5 = v6;
  v7 = v4 + 1;
  if (v6 == v4 + 1)
  {
    v11 = 0;
  }
  else
  {
    while (!objc_msgSend(v5[4], "isEqualToString:", v3, v17))
    {
      v8 = v5[1];
      if (v8)
      {
        do
        {
          v9 = (uint64_t **)v8;
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (uint64_t **)v5[2];
          v10 = *v9 == (uint64_t *)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
      if (v9 == v7)
        goto LABEL_14;
    }
    v11 = (*((_DWORD *)v5 + 10) + 1);
    *((_DWORD *)v5 + 10) = v11;
    v12 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v13 = v5[4];
      *(_DWORD *)buf = 138543618;
      *(_QWORD *)&buf[4] = v13;
      v19 = 1024;
      v20 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Existing bundleID %{public}@ check-in before TCC, checkinTimes %d ", buf, 0x12u);
    }
  }
  if (v5 == v7)
  {
LABEL_14:
    *(_QWORD *)buf = &v17;
    v11 = 1;
    *((_DWORD *)sub_1002F6D4C(v4, (unint64_t *)&v17, (uint64_t)&unk_100740F58, (id **)buf) + 10) = 1;
    v14 = qword_100999898;
    v15 = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT);
    v3 = v17;
    if (v15)
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "New bundleID %{public}@ check-in before TCC, start tracking", buf, 0xCu);
      v3 = v17;
    }
  }

  return v11;
}

void sub_1002E0C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id sub_1002E0C24(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 336), "containsObject:", a2);
}

void sub_1002E0C30(uint64_t a1, void *a2)
{
  sub_1002DC998(*(_QWORD *)(a1 + 32), a2);
}

uint64_t sub_1002E0C38(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void **v8;
  void *__p[2];
  char v11;
  uint8_t buf[4];
  void **v13;

  v5 = sub_10000A1A4(a1, a2, 0);
  if (!v5)
    return 1;
  v6 = v5;
  v7 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000340DC(a2, (uint64_t)__p);
    if (v11 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Set session %{public}s needs private mode", buf, 0xCu);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a3);
  return 0;
}

void sub_1002E0D4C(uint64_t a1, void *a2)
{
  id v3;
  _BOOL4 v4;
  _BOOL4 v5;
  _QWORD *v6;
  _QWORD *v7;
  __int16 v8;
  __int16 v9;
  id *v10;
  void *v11;
  void *v12;
  unsigned __int16 v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _BOOL8 v17;
  void *v18;
  unsigned __int8 v19[16];

  v3 = a2;
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100924CB0);
  v4 = sub_10065DDF8((uint64_t)off_1009778C0, v3);
  v5 = v4;
  v6 = *(_QWORD **)(a1 + 224);
  v7 = (_QWORD *)(a1 + 232);
  if (v6 == (_QWORD *)(a1 + 232))
  {
    if (!v4)
      goto LABEL_27;
    v17 = 0;
    goto LABEL_21;
  }
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = (id *)v6[5];
    if (!(*((unsigned int (**)(id *))*v10 + 2))(v10))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10[31], "objectForKey:", v3));

      if (v11)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10[31], "objectForKeyedSubscript:", v3));
        v13 = (unsigned __int16)objc_msgSend(v12, "enableAutoReconnect");
        v9 += v13;
        v8 += v13 ^ 1;

      }
    }
    v14 = (_QWORD *)v6[1];
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = (_QWORD *)v6[2];
        v16 = *v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
    }
    v6 = v15;
  }
  while (v15 != v7);
  if (v8)
    v17 = 0;
  else
    v17 = v9 != 0;
  if (v5 != v17)
  {
LABEL_21:
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100924C30);
    v18 = off_1009778A0;
    sub_100030BCC(v19, v3);
    if (!sub_10062BC80((uint64_t)v18, v19, v17 ^ 1, v17, 255, 0, 0))
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100924CB0);
      sub_10065DCC4((uint64_t)off_1009778C0, v3, v17);
    }
  }
LABEL_27:

}

void sub_1002E0F68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E0FA0(uint64_t a1, void *a2)
{
  NSMutableSet *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  int v7;
  const char *v8;

  v2 = sub_1002F00DC(a1, a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = sub_1002F04D0((uint64_t)v3, v3);
  v5 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 136446210;
    v8 = sub_1002F04A8(v4);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "combinedLatencyForDevice returning %{public}s", (uint8_t *)&v7, 0xCu);
  }

  return v4;
}

void sub_1002E106C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E1084(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_10000A1A4(a1, a2, 1u);
  if (v4)
  {
    v5 = v4;
    sub_10040ADCC(v4, a2);
    if (*(_BYTE *)(v5 + 24))
    {
      if (*(_QWORD *)(v5 + 96))
        sub_10006F07C(a1);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
  {
    sub_1006DD03C();
  }
}

uint64_t sub_1002E1110(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;

  v5 = a2;
  v6 = a3;
  v7 = *(_QWORD **)(a1 + 224);
  v8 = (_QWORD *)(a1 + 232);
  if (v7 == v8)
  {
LABEL_10:
    v13 = 0;
  }
  else
  {
    while (1)
    {
      v9 = v7[5];
      if (objc_msgSend(*(id *)(v9 + 88), "isEqualToString:", v5))
      {
        if ((objc_msgSend(*(id *)(v9 + 96), "isEqualToString:", v6) & 1) != 0)
          break;
      }
      v10 = (_QWORD *)v7[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v7[2];
          v12 = *v11 == (_QWORD)v7;
          v7 = v11;
        }
        while (!v12);
      }
      v7 = v11;
      if (v11 == v8)
        goto LABEL_10;
    }
    v13 = 1;
  }

  return v13;
}

void sub_1002E11D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id sub_1002E11E8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v5 = *(_QWORD **)(a1 + 224);
  v6 = (_QWORD *)(a1 + 232);
  if (v5 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v5[5] + 16))(v5[5]);
      v8 = (_QWORD *)v5[5];
      if (v7)
      {
        if ((*(unsigned int (**)(_QWORD))(*v8 + 16))(v5[5]) == 1)
        {
          v8 = (_QWORD *)v5[5];
          if (sub_10040D88C((uint64_t)v8, (uint64_t)v3))
LABEL_7:
            objc_msgSend(v4, "addObject:", v8[11]);
        }
      }
      else if (sub_1002E0C24(v5[5], (uint64_t)v3))
      {
        goto LABEL_7;
      }
      v9 = (_QWORD *)v5[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v5[2];
          v11 = *v10 == (_QWORD)v5;
          v5 = v10;
        }
        while (!v11);
      }
      v5 = v10;
    }
    while (v10 != v6);
  }

  return v4;
}

void sub_1002E12F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E1314(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  _QWORD *v5;
  _BYTE *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;

  v3 = a2;
  v4 = *(_QWORD **)(a1 + 224);
  v5 = (_QWORD *)(a1 + 232);
  if (v4 == v5)
  {
LABEL_12:
    v10 = 0;
  }
  else
  {
    while (1)
    {
      v6 = (_BYTE *)v4[5];
      if (v6[28])
      {
        if (!(*(unsigned int (**)(_BYTE *))(*(_QWORD *)v6 + 16))(v6)
          && objc_msgSend(*(id *)(v4[5] + 88), "localizedStandardContainsString:", v3)
          && *(_DWORD *)(v4[5] + 376))
        {
          break;
        }
      }
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
      if (v8 == v5)
        goto LABEL_12;
    }
    v10 = 1;
  }

  return v10;
}

void sub_1002E13D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E13E8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  void **v6;
  const void *v7;
  int64_t v8;
  char *v9;
  void *v10;
  NSObject *v11;
  void **v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned int *v18;
  unsigned int *v19;
  __int16 v20;
  id v21;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v22;
  unsigned __int8 *v23;
  NSObject *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id obj;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *__dst;
  uint64_t v41;
  uint64_t (**v42)();
  unsigned int *v43;
  void *v44;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _QWORD v51[3];
  uuid_t uu;
  void *__p[2];
  __int128 v54;
  __int128 v55;
  void *v56[2];
  uint64_t v57;
  unsigned __int8 src[16];
  __int16 v59;
  __int128 buf;
  uint64_t v61;
  _BYTE v62[128];

  memset(v51, 0, sizeof(v51));
  v4 = sub_10000A1A4(a1, a2, 2u);
  if (!v4 && os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_FAULT))
    sub_1006DD158();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4) != 3)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4) == 1)
      {
        v5 = qword_1009998F0;
        if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000340DC(a2, (uint64_t)__p);
          v6 = (SBYTE7(v54) & 0x80u) == 0 ? __p : (void **)__p[0];
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Resurrecting Peripheral session: %{public}s", (uint8_t *)&buf, 0xCu);
          if (SBYTE7(v54) < 0)
            operator delete(__p[0]);
        }
        v42 = 0;
        v43 = 0;
        if (qword_100978170 != -1)
          dispatch_once(&qword_100978170, &stru_100924DD0);
        sub_1002E2058((uint64_t)off_100978168, a2, &v42);
        buf = 0uLL;
        v61 = 0;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        sub_1002E20DC(a1, a2, (void **)&buf, (uint64_t *)&v44);
        v57 = 0;
        v55 = 0u;
        *(_OWORD *)v56 = 0u;
        *(_OWORD *)__p = 0u;
        v54 = 0u;
        uuid_clear(uu);
        v39 = 0;
        __dst = 0;
        v41 = 0;
        v7 = (const void *)buf;
        v8 = *((_QWORD *)&buf + 1) - buf;
        if (*((_QWORD *)&buf + 1) != (_QWORD)buf)
        {
          sub_1002A3F78(&v39, v8 >> 3);
          v9 = (char *)__dst;
          memmove(__dst, v7, v8);
          __dst = &v9[8 * (v8 >> 3)];
        }
        v36 = 0;
        v37 = 0;
        v38 = 0;
        sub_1002F6350(&v36, (uint64_t)v44, (uint64_t)v45, 0x8E38E38E38E38E39 * ((v45 - (_BYTE *)v44) >> 1));
        sub_1002F5E90((uint64_t)__p, uu, 0, (uint64_t)&v39, (uint64_t *)&v36);
        if (v36)
        {
          v37 = v36;
          operator delete(v36);
        }
        v10 = v39;
        if (v39)
        {
          __dst = v39;
          operator delete(v39);
        }
        sub_10006F010((uint64_t)v10, v4, a2, 10, 0);
        (*(void (**)(_QWORD, void **, uint64_t (***)()))(**(_QWORD **)(v4 + 120) + 256))(*(_QWORD *)(v4 + 120), __p, &v42);
        if (v56[0])
        {
          v56[1] = v56[0];
          operator delete(v56[0]);
        }
        if (*((_QWORD *)&v54 + 1))
        {
          *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
          operator delete(*((void **)&v54 + 1));
        }
        if (v44)
        {
          v45 = (unsigned __int8 *)v44;
          operator delete(v44);
        }
        if ((_QWORD)buf)
        {
          *((_QWORD *)&buf + 1) = buf;
          operator delete((void *)buf);
        }
        v42 = &off_100918298;
        if (v43)
          sub_100056AAC(v43);
      }
      else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      {
        sub_1000340DC(a2, (uint64_t)__p);
        sub_1006DD10C();
      }
    }
  }
  else
  {
    v11 = qword_1009998F0;
    if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(a2, (uint64_t)__p);
      v12 = (SBYTE7(v54) & 0x80u) == 0 ? __p : (void **)__p[0];
      LODWORD(buf) = 136446210;
      *(_QWORD *)((char *)&buf + 4) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Resurrecting Central session: %{public}s", (uint8_t *)&buf, 0xCu);
      if (SBYTE7(v54) < 0)
        operator delete(__p[0]);
    }
    if (qword_100978170 != -1)
      dispatch_once(&qword_100978170, &stru_100924DD0);
    v34 = sub_1002E1EF8((uint64_t)off_100978168, a2);
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v54 = 0;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v33 = v4;
    obj = *(id *)(v4 + 336);
    v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v62, 16);
    if (v13)
    {
      v14 = *(_QWORD *)v48;
      do
      {
        v15 = 0;
        do
        {
          if (*(_QWORD *)v48 != v14)
            objc_enumerationMutation(obj);
          v16 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)v15);
          if ((sub_1002E1F6C(a1, a2, v16) & 1) != 0)
          {
            if (qword_1009778A8 != -1)
              dispatch_once(&qword_1009778A8, &stru_100924C30);
            v17 = off_1009778A0;
            sub_100030BCC(&buf, v16);
            sub_100069F08((uint64_t)v17, (unsigned __int8 *)&buf);
            buf = 0uLL;
            v61 = 0;
            if (qword_1009778F8 != -1)
              dispatch_once(&qword_1009778F8, &stru_100924C10);
            sub_1005DFB0C(qword_1009778F0, v16, (char **)&buf);
            v44 = 0;
            v45 = 0;
            v46 = 0;
            if (qword_1009778F8 != -1)
              dispatch_once(&qword_1009778F8, &stru_100924C10);
            sub_1005DFF9C(qword_1009778F0, a2, v16, (char **)&v42);
            v19 = (unsigned int *)v42;
            v18 = v43;
            if (v42 != (uint64_t (**)())v43)
            {
              do
              {
                v20 = *(_WORD *)v19;
                v21 = v16;
                sub_100030BCC(src, v21);
                v59 = v20;
                v22 = v45;
                if ((unint64_t)v45 >= v46)
                {
                  v23 = (unsigned __int8 *)sub_1002F6ED8((uint64_t *)&v44, (uint64_t)src);
                }
                else
                {
                  uuid_copy(v45, src);
                  *((_WORD *)v22 + 8) = v59;
                  v23 = v22 + 18;
                }
                v45 = v23;

                v19 = (unsigned int *)((char *)v19 + 2);
              }
              while (v19 != v18);
              v19 = (unsigned int *)v42;
            }
            if (v19)
            {
              v43 = v19;
              operator delete(v19);
            }
            operator new();
          }
          v24 = qword_100999898;
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf) = 138412290;
            *(_QWORD *)((char *)&buf + 4) = v16;
            _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Session cannot access device %@", (uint8_t *)&buf, 0xCu);
          }
          v15 = (char *)v15 + 1;
        }
        while (v15 != v13);
        v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v47, v62, 16);
      }
      while (v13);
    }

    sub_10006F010(v25, v33, a2, 10, 1);
    (*(void (**)(_QWORD, void **, uint64_t))(**(_QWORD **)(v33 + 120) + 248))(*(_QWORD *)(v33 + 120), __p, v34);
    v26 = (char *)__p[0];
    v27 = (char *)__p[1];
    while (v26 != v27)
    {
      v28 = *(_QWORD **)v26;
      v29 = *(_QWORD **)(*(_QWORD *)v26 + 24);
      v30 = *(_QWORD **)(*(_QWORD *)v26 + 32);
      if (v29 == v30)
        goto LABEL_71;
      do
      {
        if (*v29)
          (*(void (**)(_QWORD))(*(_QWORD *)*v29 + 8))(*v29);
        ++v29;
      }
      while (v29 != v30);
      v28 = *(_QWORD **)v26;
      if (*(_QWORD *)v26)
      {
LABEL_71:
        v31 = (void *)v28[6];
        if (v31)
        {
          v28[7] = v31;
          operator delete(v31);
        }
        v32 = (void *)v28[3];
        if (v32)
        {
          v28[4] = v32;
          operator delete(v32);
        }
        operator delete();
      }
      v26 += 8;
    }
    if (v34)
    {
      sub_100060EA8(v34);
      operator delete();
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  v44 = v51;
  sub_1002F6E10((void ***)&v44);
}

void sub_1002E1D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char *a51,uint64_t a52)
{
  a51 = &a46;
  sub_1002F6E10((void ***)&a51);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E1EF8(uint64_t a1, unint64_t a2)
{
  uint64_t v3;

  v3 = sub_10000A1A4(a1, a2, 0);
  if (!v3 || !*(_BYTE *)(v3 + 304))
    return 0;
  if (qword_100977FB0 != -1)
    dispatch_once(&qword_100977FB0, &stru_100924C50);
  return sub_1006791A0((uint64_t)off_100977FA8, a2);
}

uint64_t sub_1002E1F6C(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = a3;
  if (!a2)
    goto LABEL_16;
  v8 = *(_QWORD **)(a1 + 232);
  v7 = (_QWORD *)(a1 + 232);
  v6 = v8;
  if (v8)
  {
    v9 = v7;
    do
    {
      v10 = v6[4];
      v11 = v10 >= a2;
      if (v10 >= a2)
        v12 = v6;
      else
        v12 = v6 + 1;
      if (v11)
        v9 = v6;
      v6 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 != v7 && v9[4] <= a2)
    {
      v14 = v9[5];
      if (v14)
      {
        v13 = sub_100005134(v14, v5);
        goto LABEL_17;
      }
LABEL_16:
      v13 = 1;
      goto LABEL_17;
    }
  }
  v13 = 0;
LABEL_17:

  return v13;
}

void sub_1002E2008(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1002E2018(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_1002E2058@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;

  result = sub_10000A1A4(a1, a2, 1u);
  if (result && *(_BYTE *)(result + 226))
  {
    if (qword_100977C30 != -1)
      dispatch_once(&qword_100977C30, &stru_100924D10);
    return sub_1006000B8((uint64_t)off_100977C28, a2, a3);
  }
  else
  {
    *a3 = &off_100918298;
    a3[1] = 0;
  }
  return result;
}

void sub_1002E20DC(uint64_t a1, unint64_t a2, void **a3, uint64_t *a4)
{
  uint64_t v6;
  int v7;
  id v8;
  int v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  id obj;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uuid_t dst;
  __int16 v41;
  _BYTE v42[128];

  v6 = sub_10000A1A4(a1, a2, 1u);
  if (v6)
  {
    v7 = *(unsigned __int16 *)(v6 + 224);
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    obj = *(id *)(v6 + 216);
    v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
    if (!v8)
      goto LABEL_36;
    v9 = v7 << 16;
    v10 = *(_QWORD *)v37;
    while (1)
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v37 != v10)
          objc_enumerationMutation(obj);
        v12 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)v11);
        v33 = 0;
        v34 = 0;
        v35 = 0;
        v13 = objc_msgSend(v12, "unsignedShortValue");
        if (qword_10097AC18 != -1)
          dispatch_once(&qword_10097AC18, &stru_100924C70);
        *(_DWORD *)dst = v9 | v13;
        v14 = sub_1003F377C(qword_10097AC10, (int *)dst, &v33);
        v15 = v14;
        if (!v14)
          goto LABEL_31;
        v17 = (uint64_t *)a3[1];
        v16 = (unint64_t)a3[2];
        if ((unint64_t)v17 >= v16)
        {
          v19 = ((char *)v17 - (_BYTE *)*a3) >> 3;
          if ((unint64_t)(v19 + 1) >> 61)
            abort();
          v20 = v16 - (_QWORD)*a3;
          v21 = v20 >> 2;
          if (v20 >> 2 <= (unint64_t)(v19 + 1))
            v21 = v19 + 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          if (v22)
            v23 = (char *)sub_10007ABA0((uint64_t)(a3 + 2), v22);
          else
            v23 = 0;
          v24 = (uint64_t *)&v23[8 * v19];
          *v24 = v15;
          v18 = v24 + 1;
          v26 = (char *)*a3;
          v25 = (char *)a3[1];
          if (v25 != *a3)
          {
            do
            {
              v27 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *--v24 = v27;
            }
            while (v25 != v26);
            v25 = (char *)*a3;
          }
          *a3 = v24;
          a3[1] = v18;
          a3[2] = &v23[8 * v22];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *v17 = v14;
          v18 = v17 + 1;
        }
        a3[1] = v18;
        v28 = v33;
        if (v33 != v34)
        {
          do
          {
            v29 = *(_DWORD *)(v28 + 16);
            uuid_copy(dst, (const unsigned __int8 *)v28);
            v41 = v29 & 0x7FFF;
            v30 = a4[1];
            if (v30 >= a4[2])
            {
              v31 = sub_1002F6ED8(a4, (uint64_t)dst);
            }
            else
            {
              uuid_copy((unsigned __int8 *)a4[1], dst);
              *(_WORD *)(v30 + 16) = v41;
              v31 = v30 + 18;
              a4[1] = v30 + 18;
            }
            a4[1] = v31;
            v28 += 20;
          }
          while (v28 != v34);
LABEL_31:
          v28 = v33;
        }
        if (v28)
        {
          v34 = v28;
          operator delete((void *)v28);
        }
        v11 = (char *)v11 + 1;
      }
      while (v11 != v8);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v36, v42, 16);
      if (!v8)
      {
LABEL_36:

        return;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
    sub_1006DD184();
}

void sub_1002E23B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13)
{

  _Unwind_Resume(a1);
}

void sub_1002E240C(uint64_t a1, unint64_t a2)
{
  sub_1002E13E8(a1 - 16, a2);
}

void sub_1002E2414(uint64_t a1, unint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  NSObject *v15;
  _BYTE *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  _BYTE *v21;
  uint64_t v22;
  NSObject *v23;
  _BOOL4 v24;
  _BYTE *v25;
  _BYTE *v26;
  char v27;
  _BYTE __p[12];
  __int16 v29;
  int v30;
  char v31;
  _BYTE buf[12];
  char v33;

  v3 = *(_QWORD **)(a1 + 232);
  if (v3)
  {
    v7 = a1 + 232;
    do
    {
      v8 = v3[4];
      v9 = v8 >= a2;
      if (v8 >= a2)
        v10 = v3;
      else
        v10 = v3 + 1;
      if (v9)
        v7 = (uint64_t)v3;
      v3 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != a1 + 232)
    {
      v11 = *(_QWORD *)(v7 + 32);
      if (v11 <= a2)
      {
        v12 = (_QWORD *)sub_10000A1A4(a1, v11, 2u);
        if (!v12 && os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_FAULT))
          sub_1006DD1B0();
        v27 = 0;
        v13 = sub_100027F68();
        sub_100091AE8(buf, "LE");
        sub_100091AE8(__p, "PersistUserKilledApplications");
        (*(void (**)(uint64_t, _BYTE *, _BYTE *, char *))(*(_QWORD *)v13 + 72))(v13, buf, __p, &v27);
        if (v31 < 0)
          operator delete(*(void **)__p);
        if (v33 < 0)
          operator delete(*(void **)buf);
        if (a3 && (a3 != 1 || !v27))
          goto LABEL_58;
        v14 = (*(uint64_t (**)(_QWORD *))(*v12 + 40))(v12);
        if ((v14 & 1) != 0)
        {
          v15 = qword_1009998F0;
          if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
          {
            sub_1000340DC(a2, (uint64_t)buf);
            v16 = v33 >= 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)__p = 136446466;
            *(_QWORD *)&__p[4] = v16;
            v29 = 1024;
            v30 = a3;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" will be persisted, as it was performing long-term action.  Kill reason %d", __p, 0x12u);
            if (v33 < 0)
              operator delete(*(void **)buf);
          }
          if (qword_100977FB0 != -1)
            dispatch_once(&qword_100977FB0, &stru_100924C50);
          (**(void (***)(void *, unint64_t, uint64_t))off_100977FA8)(off_100977FA8, a2, 2);
        }
        v17 = qword_1009998F0;
        if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
        {
          v18 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 88);
          *(_DWORD *)buf = 138543362;
          *(_QWORD *)&buf[4] = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "appSessionTerminated:{isAlive: false, bundleId: \"%{public}@\"}", buf, 0xCu);
        }
        v19 = sub_100069D20();
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v19 + 72))(v19, *(_QWORD *)(*(_QWORD *)(v7 + 40) + 88), 0);
        if ((v14 & 1) == 0)
        {
LABEL_58:
          if ((*(unsigned int (**)(_QWORD *))(*v12 + 40))(v12))
          {
            v20 = qword_1009998F0;
            if (os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT))
            {
              sub_1000340DC(a2, (uint64_t)buf);
              v21 = v33 >= 0 ? buf : *(_BYTE **)buf;
              *(_DWORD *)__p = 136446466;
              *(_QWORD *)&__p[4] = v21;
              v29 = 1024;
              v30 = a3;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Removing restorable session \"%{public}s\" due to termination reason %d", __p, 0x12u);
              if (v33 < 0)
                operator delete(*(void **)buf);
            }
          }
          v22 = v12[15];
          v23 = qword_1009998F0;
          v24 = os_log_type_enabled((os_log_t)qword_1009998F0, OS_LOG_TYPE_DEFAULT);
          if (v22)
          {
            if (v24)
            {
              sub_1000340DC(a2, (uint64_t)buf);
              if (v33 >= 0)
                v25 = buf;
              else
                v25 = *(_BYTE **)buf;
              *(_DWORD *)__p = 136446210;
              *(_QWORD *)&__p[4] = v25;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "skipping session \"%{public}s\" as it is still alive", __p, 0xCu);
              if (v33 < 0)
                operator delete(*(void **)buf);
            }
          }
          else
          {
            if (v24)
            {
              sub_1000340DC(a2, (uint64_t)buf);
              v26 = v33 >= 0 ? buf : *(_BYTE **)buf;
              *(_DWORD *)__p = 136446210;
              *(_QWORD *)&__p[4] = v26;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "unregistering session \"%{public}s\" as it is not longer alive", __p, 0xCu);
              if (v33 < 0)
                operator delete(*(void **)buf);
            }
            sub_100019A7C(a1, a2, 1);
          }
        }
      }
    }
  }
}

void sub_1002E286C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_1002E28A8(uint64_t a1, unint64_t a2, int a3)
{
  sub_1002E2414(a1 - 16, a2, a3);
}

void sub_1002E28B0(uint64_t a1, unint64_t a2, int a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  NSObject *v12;
  void **v13;
  const char *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  unint64_t v20;
  void *__p[2];
  char v22;
  uint8_t buf[4];
  void **v24;
  __int16 v25;
  const char *v26;

  v6 = *(_QWORD **)(a1 + 232);
  v4 = (_QWORD *)(a1 + 232);
  v5 = v6;
  if (!v6)
    goto LABEL_38;
  v8 = v4;
  do
  {
    v9 = v5[4];
    v10 = v9 >= a2;
    if (v9 >= a2)
      v11 = v5;
    else
      v11 = v5 + 1;
    if (v10)
      v8 = v5;
    v5 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v8 != v4 && v8[4] <= a2)
  {
    v12 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000340DC(a2, (uint64_t)__p);
      v13 = (void **)__p[0];
      v14 = "disabled";
      if (v22 >= 0)
        v13 = __p;
      if (a3)
        v14 = "enabled";
      *(_DWORD *)buf = 136446466;
      v24 = v13;
      v25 = 2082;
      v26 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Registering pairing agent for session \"%{public}s\" with programmatic pairing %{public}s", buf, 0x16u);
      if (v22 < 0)
        operator delete(__p[0]);
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v8[5] + 16))(v8[5]) == 3)
    {
      v15 = v8[5];
      if (v15)
      {
        v17 = *(_QWORD *)(v15 + 224);
        v16 = (unint64_t *)(v15 + 224);
        if (v17)
        {
          if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
            sub_1006DD208();
        }
        else
        {
          __p[0] = 0;
          if (qword_100978150 != -1)
            dispatch_once(&qword_100978150, &stru_100924D50);
          v19 = off_100978148;
          v20 = sub_100022AE4(a2);
          if (sub_1005B2998(v19, v20, __p, v16)
            && os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
          {
            sub_1006DD1DC();
          }
        }
      }
    }
    else
    {
      if (a3)
        v18 = 2;
      else
        v18 = 1;
      *(_DWORD *)(v8[5] + 32) = v18;
    }
  }
  else
  {
LABEL_38:
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_FAULT))
      sub_1006DD068(a2);
  }
}

void sub_1002E2AF4(uint64_t a1, unint64_t a2, void *a3, char a4)
{
  id v7;

  v7 = a3;
  if (sub_1002E2B98(a1, a2))
  {
    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_100924C90);
    sub_100697378(qword_1009778B0, a2, v7, a4);
  }

}

void sub_1002E2B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL sub_1002E2B98(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  _BOOL8 result;
  NSObject *v11;

  v5 = *(_QWORD **)(a1 + 232);
  v3 = (_QWORD *)(a1 + 232);
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (v8)
      v6 = v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3 || v6[4] > a2)
  {
LABEL_12:
    result = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_FAULT);
    if (!result)
      return result;
    sub_1006DD068(a2);
    return 0;
  }
  if (*(_DWORD *)(v6[5] + 32) == 2)
    return 1;
  v11 = qword_100999898;
  result = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_1006DD234(a2, v11);
    return 0;
  }
  return result;
}

uint64_t sub_1002E2C64(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;

  v5 = a3;
  if (sub_1002E2B98(a1, a2))
  {
    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_100924C90);
    v6 = sub_100697030(qword_1009778B0, a2, v5);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_1002E2CF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E2D04(uint64_t a1, unint64_t a2, void *a3, int a4, unsigned int a5)
{
  id v9;

  v9 = a3;
  if (sub_1002E2B98(a1, a2))
  {
    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_100924C90);
    sub_1006966C0(qword_1009778B0, v9, a4, a5);
  }

}

void sub_1002E2D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002E2DAC(uint64_t a1, unint64_t a2, void *a3, int a4, uint64_t a5)
{
  id v9;

  v9 = a3;
  if (sub_1002E2B98(a1, a2))
  {
    if (qword_1009778B8 != -1)
      dispatch_once(&qword_1009778B8, &stru_100924C90);
    sub_100696A18(qword_1009778B0, a2, v9, a4, a5);
  }

}

void sub_1002E2E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002E2E58(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100924C90);
  sub_100694CF4(qword_1009778B0, a2, a3);
}

uint64_t sub_1002E2EB0(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1009778B8 != -1)
    dispatch_once(&qword_1009778B8, &stru_100924C90);
  return sub_10069E810(qword_1009778B0, a2);
}

void sub_1002E2F00(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;

  v5 = sub_10000A1A4(a1, a2, 0);
  if (v5)
  {
    v6 = v5;
    sub_1003FCFC0(v5, a2, a3);
    v7 = qword_100999898;
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(v6 + 88);
      v9 = 138543618;
      v10 = v8;
      v11 = 1024;
      v12 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "clearDuplicateFilterCache for session \"%{public}@\" type %d", (uint8_t *)&v9, 0x12u);
    }
  }
}

uint64_t sub_1002E2FD8(uint64_t a1, void *a2, int a3)
{
  id v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned __int16 v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v5 = a2;
  v6 = v5;
  if (v5
    && objc_msgSend(v5, "length")
    && (v7 = *(_QWORD **)(a1 + 224), v8 = (_QWORD *)(a1 + 232), v7 != (_QWORD *)(a1 + 232)))
  {
    v9 = 0;
    do
    {
      v10 = v7[5];
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10)
        && objc_msgSend(*(id *)(v10 + 88), "isEqualToString:", v6)
        && (!a3 || *(_BYTE *)(v10 + 129) != 32))
      {
        v9 += (unsigned __int16)objc_msgSend(*(id *)(v10 + 248), "count");
      }
      v11 = (_QWORD *)v7[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v7[2];
          v13 = *v12 == (_QWORD)v7;
          v7 = v12;
        }
        while (!v13);
      }
      v7 = v12;
    }
    while (v12 != v8);
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_1002E30CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E30E4(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  id *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  id *v24;
  unsigned __int8 v25;
  _BOOL4 v26;
  NSObject *v27;
  _BOOL8 v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  std::string *v35;
  id v36;
  int v37;
  uint64_t v38;
  __CFString *v39;
  id v40;
  id v41;
  NSObject *v42;
  _BOOL8 v43;
  int v44;
  std::string *v45;
  int v46;
  const char *v47;
  id v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned __int16 v52;
  NSObject *v53;
  int v54;
  std::string::size_type v55;
  int v56;
  std::string *v57;
  const __CFString *v58;
  const char *v59;
  id v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  NSObject *v68;
  _BYTE *v69;
  int v70;
  void *v71;
  NSObject *v72;
  _BOOL8 v73;
  std::string *v74;
  NSObject *v75;
  _BOOL8 v76;
  uint64_t v77;
  _BYTE *v78;
  _BOOL4 v79;
  void *v80;
  BOOL v81;
  void *v82;
  int v83;
  __CFString *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  id v88;
  id v89;
  _QWORD *v90;
  _QWORD v91[4];
  id v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  std::string *v98;
  _BYTE buf[62];
  __int16 v100;
  int v101;
  __int16 v102;
  int v103;
  __int16 v104;
  int v105;
  __int16 v106;
  unsigned int v107;
  std::string v108;
  _BYTE v109[128];

  v89 = a3;
  v87 = a2;
  v88 = a4;
  v7 = sub_10000A1A4(a1, a2, 2u);
  v8 = v7;
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      sub_1006DD2B4();
    goto LABEL_167;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  if (v9)
  {
    if (v9 == 3)
    {
      v10 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(v8 + 88);
        *(_DWORD *)buf = 138543618;
        *(_QWORD *)&buf[4] = v89;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "UN: connectDeviceForApp for classic  %{public}@ for %{public}@", buf, 0x16u);
      }
      sub_10040DB94(v8, a2, v89, v88);
    }
    else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
    {
      sub_1006DD2E0();
    }
    goto LABEL_167;
  }
  sub_1002A8EA8(17, a2, v89);
  v12 = *(_QWORD **)(a1 + 224);
  v90 = (_QWORD *)(a1 + 232);
  v85 = a1;
  v86 = v8;
  v13 = 0;
  if (v12 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v14 = (id *)v12[5];
      if (!(*((unsigned int (**)(id *))*v14 + 2))(v14)
        && objc_msgSend(v14[11], "isEqualToString:", *(_QWORD *)(v8 + 88)))
      {
        v96 = 0u;
        v97 = 0u;
        v94 = 0u;
        v95 = 0u;
        v15 = v14[31];
        v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v94, v109, 16);
        if (v16)
        {
          v17 = *(_QWORD *)v95;
          do
          {
            v18 = 0;
            do
            {
              if (*(_QWORD *)v95 != v17)
                objc_enumerationMutation(v15);
              v19 = *(_QWORD *)(*((_QWORD *)&v94 + 1) + 8 * (_QWORD)v18);
              if (qword_1009778A8 != -1)
                dispatch_once(&qword_1009778A8, &stru_100924C30);
              v20 = off_1009778A0;
              sub_100030BCC(buf, v19);
              v13 += sub_10061CDB8(v20, buf);
              v18 = (char *)v18 + 1;
            }
            while (v16 != v18);
            v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v94, v109, 16);
          }
          while (v16);
        }

        a1 = v85;
        v8 = v86;
      }
      v21 = (_QWORD *)v12[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v12[2];
          v23 = *v22 == (_QWORD)v12;
          v12 = v22;
        }
        while (!v23);
      }
      v12 = v22;
    }
    while (v22 != v90);
  }
  v24 = (id *)(v8 + 88);
  v25 = sub_1002E2FD8(a1, *(void **)(v8 + 88), 1);
  sub_10050945C(a2, (std::string *)buf);
  if (a1 + 280 == sub_10001F2AC(a1 + 272, (const void **)buf))
  {
    v26 = 1;
  }
  else
  {
    sub_10050945C(a2, &v108);
    v98 = &v108;
    v26 = v13 + 1 > *((unsigned __int8 *)sub_1002F7194((uint64_t **)(a1 + 272), (const void **)&v108.__r_.__value_.__l.__data_, (uint64_t)&unk_100740F58, (_OWORD **)&v98)+ 56);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
  }
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v26)
      goto LABEL_40;
  }
  else if (!v26)
  {
    goto LABEL_40;
  }
  sub_10050945C(v87, (std::string *)buf);
  v108.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  *((_BYTE *)sub_1002F7194((uint64_t **)(a1 + 272), (const void **)buf, (uint64_t)&unk_100740F58, &v108) + 56) = v13 + 1;
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
LABEL_40:
  if (qword_10097AC58 != -1)
    dispatch_once(&qword_10097AC58, &stru_100924E30);
  if (v13 >= sub_1006C0454(qword_10097AC50, *v24))
  {
    v27 = qword_100999898;
    v28 = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR);
    if (v28)
      sub_1006DD384((uint64_t *)(v8 + 88), v27, v29);
    if (*(_BYTE *)(v8 + 129) == 32)
    {
      v30 = 345;
LABEL_122:
      sub_1002E41CC(v28, v87, v8, v89, v30, v13);
      goto LABEL_167;
    }
    memset(buf, 0, 56);
    sub_100091AE8(&v108, (char *)objc_msgSend(*v24, "UTF8String"));
    sub_10047D540((uint64_t)buf, (__int128 *)&v108, *(_BYTE *)(v8 + 129), v89, v13, 345);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    if (qword_10097AC48 != -1)
      dispatch_once(&qword_10097AC48, &stru_100924DF0);
    sub_10006544C(qword_10097AC40, (uint64_t)buf);

    if ((buf[31] & 0x80000000) != 0)
      operator delete(*(void **)&buf[8]);
  }
  v31 = sub_10003BE44();
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 336))(v31) & 1) != 0
    || (v32 = sub_10003BE44(), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 344))(v32) & 1) != 0)
    || (v33 = sub_10003BE44(), (*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 424))(v33)))
  {
    if (*(_BYTE *)(v8 + 129) != 32 && !sub_1003FCEAC(v8))
    {
      v34 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000340DC(v87, (uint64_t)&v108);
        if ((v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = &v108;
        else
          v35 = (std::string *)v108.__r_.__value_.__r.__words[0];
        v36 = *v24;
        if (qword_10097AC58 != -1)
          dispatch_once(&qword_10097AC58, &stru_100924E30);
        v37 = sub_1006C03EC();
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = v35;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v89;
        *(_WORD *)&buf[22] = 2114;
        *(_QWORD *)&buf[24] = v36;
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v25;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v37;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Session %{public}s trying to connect to device %{public}@, total connections for bundleID %{public}@ = %d, max for this platform=%d", buf, 0x2Cu);
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v108.__r_.__value_.__l.__data_);
        v8 = v86;
      }
      if (qword_10097AC58 != -1)
        dispatch_once(&qword_10097AC58, &stru_100924E30);
      if (sub_1006C03EC() <= v25)
      {
        v75 = qword_100999898;
        v76 = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT);
        if (v76)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "Exceeded MAX connection limit", buf, 2u);
        }
        sub_1002E41CC(v76, v87, v8, v89, 309, 0);
        memset(buf, 0, 24);
        sub_100091AE8(buf, (char *)objc_msgSend(*v24, "UTF8String"));
        v77 = sub_10005D5A4();
        if (buf[23] >= 0)
          v78 = buf;
        else
          v78 = *(_BYTE **)buf;
        (*(void (**)(uint64_t, uint64_t, _BYTE *, id))(*(_QWORD *)v77 + 48))(v77, 1, v78, v89);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        goto LABEL_167;
      }
    }
  }
  v38 = sub_10003BE44();
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 336))(v38))
    goto LABEL_101;
  v39 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "clientBundleID"));
  if (objc_msgSend(v88, "connectionUseCase") == (id)327680)
  {
    if (!v39 || (v40 = -[__CFString length](v39, "length"), v41 = v39, !v40))
    {
      v42 = qword_100999898;
      v43 = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT);
      if (v43)
      {
        sub_1000340DC(v87, (uint64_t)&v108);
        v44 = SHIBYTE(v108.__r_.__value_.__r.__words[2]);
        v45 = (std::string *)v108.__r_.__value_.__r.__words[0];
        v46 = objc_msgSend(v88, "connectionUseCase");
        if (v44 >= 0)
          v45 = &v108;
        v47 = sub_100034394(v46);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = v45;
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v89;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&buf[24] = v47;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Session %{public}s trying to connect to device %{public}@ without providing client bundleID for useCase %{public}s", buf, 0x20u);
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v108.__r_.__value_.__l.__data_);
      }
      sub_1002E41CC(v43, v87, v8, v89, 346, 0);
      v48 = 0;
LABEL_133:

      goto LABEL_167;
    }
    goto LABEL_83;
  }
  if (*(_BYTE *)(v8 + 129) != 32)
  {
    v41 = *v24;
LABEL_83:
    v48 = v41;
    goto LABEL_84;
  }
  v48 = 0;
LABEL_84:
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100924C30);
  v84 = v39;
  v49 = sub_10062BA24((uint64_t)off_1009778A0, v48, 327680);
  v50 = sub_1002E2FD8(a1, v48, 1);
  if (qword_10097AC58 != -1)
    dispatch_once(&qword_10097AC58, &stru_100924E30);
  v51 = sub_1006C04C4(qword_10097AC50);
  v52 = v50 + v49;
  v53 = qword_100999898;
  v83 = v49;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000340DC(v87, (uint64_t)&v108);
    v54 = SHIBYTE(v108.__r_.__value_.__r.__words[2]);
    v55 = v108.__r_.__value_.__r.__words[0];
    v56 = objc_msgSend(v88, "connectionUseCase");
    if (v54 >= 0)
      v57 = &v108;
    else
      v57 = (std::string *)v55;
    if (v84)
      v58 = v84;
    else
      v58 = CFSTR("none");
    v59 = sub_100034394(v56);
    v60 = *v24;
    v61 = v52;
    *(_DWORD *)buf = 136448514;
    *(_QWORD *)&buf[4] = v57;
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v89;
    *(_WORD *)&buf[22] = 2112;
    *(_QWORD *)&buf[24] = v58;
    *(_WORD *)&buf[32] = 2080;
    *(_QWORD *)&buf[34] = v59;
    *(_WORD *)&buf[42] = 2112;
    *(_QWORD *)&buf[44] = v60;
    *(_WORD *)&buf[52] = 2112;
    *(_QWORD *)&buf[54] = v48;
    v100 = 1024;
    v101 = v83;
    v102 = 1024;
    v103 = v50;
    v104 = 1024;
    v105 = v52;
    v106 = 1024;
    v107 = v51;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Session %{public}s trying to connect to device %{public}@ clientBundleID %@ useCase %s session bundleID %@ thirdPartyBundleID %@ indirect %d direct %d all %d max %d ", buf, 0x56u);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    v8 = v86;
  }
  else
  {
    v61 = (unsigned __int16)(v50 + v49);
  }
  if (v51 <= v52)
  {
    v72 = qword_100999898;
    v73 = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT);
    if (v73)
    {
      sub_1000340DC(v87, (uint64_t)&v108);
      v74 = (v108.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v108
          : (std::string *)v108.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = v74;
      *(_WORD *)&buf[12] = 2114;
      *(_QWORD *)&buf[14] = v89;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v61;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v83;
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = v50;
      *(_WORD *)&buf[40] = 1024;
      *(_DWORD *)&buf[42] = v51;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "Session %{public}s trying to connect to device %{public}@ max num connections %d (indirect %d direct %d max allowed %d) reached ", buf, 0x2Eu);
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v108.__r_.__value_.__l.__data_);
    }
    sub_1002E41CC(v73, v87, v8, v89, 347, 0);
    v39 = v84;
    goto LABEL_133;
  }

  a1 = v85;
LABEL_101:
  if (objc_msgSend(v88, "hideFromBTSettings"))
  {
    if (qword_1009778C8 != -1)
      dispatch_once(&qword_1009778C8, &stru_100924CB0);
    sub_10065DE88((uint64_t)off_1009778C0, v89, (char)objc_msgSend(v88, "hideFromBTSettings"));
    v62 = *(_QWORD **)(a1 + 224);
    if (v62 != v90)
    {
      do
      {
        v63 = v62[4];
        v64 = (_QWORD *)v62[5];
        if (!(*(unsigned int (**)(_QWORD *))(*v64 + 16))(v64))
        {
          v65 = v64[15];
          if (v65)
            (*(void (**)(uint64_t, uint64_t, id, _QWORD))(*(_QWORD *)v65 + 56))(v65, v63, v89, 0);
        }
        v66 = (_QWORD *)v62[1];
        if (v66)
        {
          do
          {
            v67 = v66;
            v66 = (_QWORD *)*v66;
          }
          while (v66);
        }
        else
        {
          do
          {
            v67 = (_QWORD *)v62[2];
            v23 = *v67 == (_QWORD)v62;
            v62 = v67;
          }
          while (!v23);
        }
        v62 = v67;
      }
      while (v67 != v90);
    }
  }
  if (sub_1002E4458(a1, v87))
  {
    v68 = qword_100999898;
    v28 = os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT);
    if (v28)
    {
      sub_1000340DC(v87, (uint64_t)buf);
      v69 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      v70 = *(unsigned __int8 *)(a1 + 372);
      LODWORD(v108.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)v108.__r_.__value_.__r.__words + 4) = (std::string::size_type)v69;
      WORD2(v108.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v108.__r_.__value_.__r.__words[1] + 6) = v70;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Rejecting the custom Connection Scan for %{public}s for list type %d", (uint8_t *)&v108, 0x12u);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    v13 = 0;
    v30 = 343;
    goto LABEL_122;
  }
  if (*(_BYTE *)(v8 + 28))
  {
    v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v24, "lowercaseString"));
    if (objc_msgSend(v71, "hasPrefix:", CFSTR("com.apple.")))
    {

    }
    else
    {
      v79 = objc_msgSend(v88, "connectionUseCase") == 0;

      if (v79)
        objc_msgSend(v88, "setConnectionUseCase:", 23);
    }
  }
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100924CB0);
  sub_100659AEC((uint64_t)off_1009778C0, v89, objc_msgSend(v88, "initPHYs"));
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100924CB0);
  sub_100659C34((uint64_t)off_1009778C0, v89, objc_msgSend(v88, "PHYOptions"));
  if (qword_1009778C8 != -1)
    dispatch_once(&qword_1009778C8, &stru_100924CB0);
  sub_100659D88((uint64_t)off_1009778C0, v89, (uint64_t)objc_msgSend(v88, "enableControllerBTClockUpdates"));
  *(_BYTE *)(v8 + 184) = objc_msgSend(v88, "enableControllerBTClockUpdates");
  v80 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v8 + 248), "objectForKey:", v89));
  if (v80)
  {
    v81 = 1;
  }
  else
  {
    v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v8 + 256), "objectForKey:", v89));
    v81 = v82 != 0;

  }
  sub_1003FD8BC(v8, v87, v89, v88);
  if (!v81 && *(_BYTE *)(v8 + 28))
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEBUG))
    {
      sub_1000340DC(v87, (uint64_t)buf);
      sub_1006DD340();
    }
    sub_1002E4784((os_unfair_lock_s *)a1, v87, v89);
    if (objc_msgSend(v88, "ancsRequired"))
    {
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100924CB0);
      if (sub_100656AA4((uint64_t)off_1009778C0, v89))
        goto LABEL_163;
      if (qword_1009778C8 != -1)
        dispatch_once(&qword_1009778C8, &stru_100924CB0);
      if (sub_100005044((uint64_t)off_1009778C0, v89))
      {
LABEL_163:
        v91[0] = _NSConcreteStackBlock;
        v91[1] = 3221225472;
        v91[2] = sub_1002E481C;
        v91[3] = &unk_100924AA0;
        v93 = v8;
        v92 = v89;
        sub_1000092F4((os_unfair_lock_s *)(a1 + 192), v91);

      }
    }
  }
  sub_1002E0D4C(a1, v89);
  if (*(_BYTE *)(v8 + 24) && *(_QWORD *)(v8 + 96))
    sub_10006F07C(a1);
LABEL_167:

}

void sub_1002E4060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{

  _Unwind_Resume(a1);
}

void sub_1002E41CC(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, int a5, int a6)
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *__p[2];
  char v15;
  uint8_t buf[16];
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v10 = a4;
  sub_1002A8EA8(18, a2, v10);
  v11 = (uint64_t)sub_1002E0C24(a3, (uint64_t)v10);
  if ((v11 & 1) != 0 || (a5 - 341) <= 7 && ((1 << (a5 - 85)) & 0xF1) != 0 || a5 == 202)
  {
    sub_10006F010(v11, a3, a2, 10, 1);
    sub_1004041E0(a3, v10, a5);
    v12 = sub_10003BE44();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 344))(v12))
    {
      v13 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = CFAbsoluteTimeGetCurrent() + 5.0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Adding grace period fLastGattAssertionGraceInit %f", buf, 0xCu);
      }
      *(CFAbsoluteTime *)(a3 + 56) = CFAbsoluteTimeGetCurrent() + 5.0;
    }
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)buf = 0u;
    sub_100091AE8(__p, (char *)objc_msgSend(*(id *)(a3 + 88), "UTF8String"));
    sub_10047D540((uint64_t)buf, (__int128 *)__p, *(_BYTE *)(a3 + 129), v10, a6, a5);
    if (v15 < 0)
      operator delete(__p[0]);
    if (qword_10097AC48 != -1)
      dispatch_once(&qword_10097AC48, &stru_100924DF0);
    sub_10006544C(qword_10097AC40, (uint64_t)buf);

    if (SHIBYTE(v17) < 0)
      operator delete(*(void **)&buf[8]);
  }

}

void sub_1002E43D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E4420(uint64_t a1)
{

  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1002E4458(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  __int128 *v4;
  __int128 v5;
  unsigned __int8 v6;
  void *v7;
  char *v8;
  char v9;
  void **v10;
  int64_t v11;
  int64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  void *v17;
  uint64_t v18;
  char *v19;
  _BOOL8 v20;
  __int128 *v21;
  __int128 v22;
  unsigned __int8 v23;
  void *v24;
  char *p_p;
  char v26;
  void **v27;
  int64_t v28;
  int64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  void *v34;
  uint64_t v35;
  char *v36;
  __int128 *v39;
  __int128 *v40;
  void *__p;
  uint64_t v42;
  unsigned __int8 v43;
  void *__dst[2];
  uint64_t v45;

  v2 = a2;
  v3 = *(unsigned __int8 *)(a1 + 372);
  if (v3 == 2)
  {
    v21 = *(__int128 **)(a1 + 376);
    v40 = *(__int128 **)(a1 + 384);
    if (v21 == v40)
      return 0;
    while (1)
    {
      __dst[1] = 0;
      v45 = 0;
      __dst[0] = 0;
      if (*((char *)v21 + 23) < 0)
      {
        sub_10003430C(__dst, *(void **)v21, *((_QWORD *)v21 + 1));
      }
      else
      {
        v22 = *v21;
        v45 = *((_QWORD *)v21 + 2);
        *(_OWORD *)__dst = v22;
      }
      sub_1000340DC(v2, (uint64_t)&__p);
      v23 = v43;
      v24 = __p;
      if ((v43 & 0x80u) == 0)
        p_p = (char *)&__p;
      else
        p_p = (char *)__p;
      v26 = HIBYTE(v45);
      if (v45 >= 0)
        v27 = __dst;
      else
        v27 = (void **)__dst[0];
      if (v45 >= 0)
        v28 = HIBYTE(v45);
      else
        v28 = (int64_t)__dst[1];
      if (v28)
      {
        if ((v43 & 0x80u) == 0)
          v29 = v43;
        else
          v29 = v42;
        v30 = &p_p[v29];
        if (v29 >= v28)
        {
          v33 = *(unsigned __int8 *)v27;
          v34 = p_p;
          do
          {
            v35 = v29 - v28;
            if (v35 == -1)
              break;
            v36 = (char *)memchr(v34, v33, v35 + 1);
            if (!v36)
              break;
            v31 = v36;
            if (!memcmp(v36, v27, v28))
              goto LABEL_66;
            v34 = v31 + 1;
            v29 = v30 - (v31 + 1);
          }
          while (v29 >= v28);
          v31 = v30;
LABEL_66:
          v2 = a2;
        }
        else
        {
          v31 = &p_p[v29];
        }
        if (v31 == v30)
          v32 = -1;
        else
          v32 = v31 - p_p;
      }
      else
      {
        v32 = 0;
      }
      v20 = v32 != -1;
      if ((v23 & 0x80) != 0)
      {
        operator delete(v24);
        if ((v45 & 0x8000000000000000) == 0)
          goto LABEL_72;
      }
      else if ((v26 & 0x80) == 0)
      {
        goto LABEL_72;
      }
      operator delete(__dst[0]);
LABEL_72:
      if (v32 == -1)
      {
        v21 = (__int128 *)((char *)v21 + 24);
        if (v21 != v40)
          continue;
      }
      return v20;
    }
  }
  if (v3 != 1)
    return 0;
  v4 = *(__int128 **)(a1 + 376);
  v39 = *(__int128 **)(a1 + 384);
  if (v4 != v39)
  {
    while (1)
    {
      __dst[1] = 0;
      v45 = 0;
      __dst[0] = 0;
      if (*((char *)v4 + 23) < 0)
      {
        sub_10003430C(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
      }
      else
      {
        v5 = *v4;
        v45 = *((_QWORD *)v4 + 2);
        *(_OWORD *)__dst = v5;
      }
      sub_1000340DC(v2, (uint64_t)&__p);
      v6 = v43;
      v7 = __p;
      if ((v43 & 0x80u) == 0)
        v8 = (char *)&__p;
      else
        v8 = (char *)__p;
      v9 = HIBYTE(v45);
      if (v45 >= 0)
        v10 = __dst;
      else
        v10 = (void **)__dst[0];
      if (v45 >= 0)
        v11 = HIBYTE(v45);
      else
        v11 = (int64_t)__dst[1];
      if (v11)
      {
        if ((v43 & 0x80u) == 0)
          v12 = v43;
        else
          v12 = v42;
        v13 = &v8[v12];
        if (v12 >= v11)
        {
          v16 = *(unsigned __int8 *)v10;
          v17 = v8;
          do
          {
            v18 = v12 - v11;
            if (v18 == -1)
              break;
            v19 = (char *)memchr(v17, v16, v18 + 1);
            if (!v19)
              break;
            v14 = v19;
            if (!memcmp(v19, v10, v11))
              goto LABEL_29;
            v17 = v14 + 1;
            v12 = v13 - (v14 + 1);
          }
          while (v12 >= v11);
          v14 = v13;
LABEL_29:
          v2 = a2;
        }
        else
        {
          v14 = &v8[v12];
        }
        if (v14 == v13)
          v15 = -1;
        else
          v15 = v14 - v8;
      }
      else
      {
        v15 = 0;
      }
      v20 = v15 == -1;
      if ((v6 & 0x80) != 0)
      {
        operator delete(v7);
        if ((v45 & 0x8000000000000000) == 0)
          goto LABEL_35;
      }
      else if ((v9 & 0x80) == 0)
      {
        goto LABEL_35;
      }
      operator delete(__dst[0]);
LABEL_35:
      if (v15 == -1)
      {
        v4 = (__int128 *)((char *)v4 + 24);
        if (v4 != v39)
          continue;
      }
      return v20;
    }
  }
  return 1;
}

void sub_1002E4764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1002E4784(os_unfair_lock_s *a1, uint64_t a2, void *a3)
{
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002EBBBC;
  v6[3] = &unk_100924AA0;
  v7 = a3;
  v8 = a2;
  v5 = v7;
  sub_1000092F4(a1 + 48, v6);

}

void sub_1002E4804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E481C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 88), *(_QWORD *)(a1 + 32));
}

void sub_1002E4838(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  id *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  int v20;
  unsigned __int8 v21[24];

  v7 = a3;
  v8 = a4;
  v9 = sub_10000A1A4(a1, a2, 2u);
  if (!a2 || !v7 || (v10 = (id *)v9) == 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9))
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      sub_1006DD3F0();
    goto LABEL_7;
  }
  if (objc_msgSend(v8, "connectionUseCase")
    || (v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "useCaseList"))) != 0
    && (v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "useCaseList")),
        v14 = objc_msgSend(v13, "count"),
        v13,
        v12,
        v14))
  {
    if (qword_1009778A8 != -1)
      dispatch_once(&qword_1009778A8, &stru_100924C30);
    v11 = off_1009778A0;
    sub_100030BCC(v21, v7);
    if (sub_100069F08((uint64_t)v11, v21))
      sub_100400A4C((uint64_t)v10, a2, v7, v8);
  }
  else
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10[31], "objectForKey:", v7));

    if (v15)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10[31], "objectForKeyedSubscript:", v7));
      objc_msgSend(v16, "setOpportunistic:", objc_msgSend(v8, "opportunistic"));
      objc_msgSend(v10[31], "removeObjectForKey:", v7);
      sub_1003FD8BC((uint64_t)v10, a2, v7, v16);
      sub_1002DD240(a1);
      goto LABEL_19;
    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10[32], "objectForKey:", v7));

    if (v17)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10[32], "objectForKeyedSubscript:", v7));
      objc_msgSend(v16, "setOpportunistic:", objc_msgSend(v8, "opportunistic"));
      objc_msgSend(v10[32], "setObject:forKeyedSubscript:", v16, v7);
LABEL_19:

      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10[10], "objectForKey:", v7));
      if (v18)
      {
        if (qword_1009778A8 != -1)
          dispatch_once(&qword_1009778A8, &stru_100924C30);
        v19 = off_1009778A0;
        v20 = sub_1002E0FA0(a1, v7);
        sub_10061E160((uint64_t)v19, v7, v20, 0);
      }
      goto LABEL_7;
    }
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
    {
      sub_1000340DC(a2, (uint64_t)v21);
      sub_1006DD41C();
    }
  }
LABEL_7:

}

void sub_1002E4B38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1002E4B88(os_unfair_lock_s *a1, unint64_t a2, uint64_t a3, void *a4, int a5, int a6, unsigned int a7)
{
  id v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  _BOOL4 v18;
  void *v19;
  void *v20;
  BOOL v21;
  void *v22;
  int v23;
  int v24;
  void *v25;
  __int16 v26;
  uint64_t v27;

  v13 = a4;
  v14 = v13;
  if (a3 && a2 && v13)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3) == 3)
    {
      v15 = qword_100999898;
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(_QWORD *)(a3 + 88);
        v24 = 138543618;
        v25 = v14;
        v26 = 2114;
        v27 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "UN: disconnectDeviceForApp for classic  %{public}@ for %{public}@", (uint8_t *)&v24, 0x16u);
      }
      sub_10040E508(a3, a2, v14, a5);
    }
    else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3))
    {
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
        sub_1006DD4F0();
    }
    else
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a3 + 248), "objectForKey:", v14));
      if (v17)
      {
        v18 = 1;
      }
      else
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a3 + 256), "objectForKey:", v14));
        v18 = v19 != 0;

      }
      sub_1004011CC(a3, a2, v14, a5, a6, a7);
      if (v18 && *(_BYTE *)(a3 + 28))
      {
        if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEBUG))
        {
          sub_1000340DC(a2, (uint64_t)&v24);
          sub_1006DD4AC();
        }
        sub_1002E4784(a1, a2, v14);
      }
      if (*(_BYTE *)(a3 + 24) && *(_QWORD *)(a3 + 96))
        sub_10006F07C((uint64_t)a1);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a3 + 80), "objectForKey:", v14));
      v21 = v20 == 0;

      if (!v21)
      {
        if (qword_1009778A8 != -1)
          dispatch_once(&qword_1009778A8, &stru_100924C30);
        v22 = off_1009778A0;
        v23 = sub_1002E0FA0((uint64_t)a1, v14);
        sub_10061E160((uint64_t)v22, v14, v23, 0);
      }
      sub_1002E0D4C((uint64_t)a1, v14);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
  {
    sub_1006DD480();
  }

}

void sub_1002E4E68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E4E90(uint64_t a1, unint64_t a2, void *a3, int a4, int a5, unsigned int a6)
{
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  unint64_t v16;
  id v17;

  v17 = a3;
  if (a2)
  {
    v11 = *(_QWORD **)(a1 + 232);
    if (v11)
    {
      v12 = (_QWORD *)(a1 + 232);
      do
      {
        v13 = v11[4];
        v14 = v13 >= a2;
        if (v13 >= a2)
          v15 = v11;
        else
          v15 = v11 + 1;
        if (v14)
          v12 = v11;
        v11 = (_QWORD *)*v15;
      }
      while (*v15);
      if (v12 != (_QWORD *)(a1 + 232))
      {
        v16 = v12[4];
        if (v16 <= a2)
          sub_1002E4B88((os_unfair_lock_s *)a1, v16, v12[5], v17, a4, a5, a6);
      }
    }
  }

}

void sub_1002E4F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1002E4F54(uint64_t a1, void *a2, unsigned int a3)
{
  id v5;
  NSObject *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  int v13;
  id v14;

  v5 = a2;
  v6 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v13 = 138412290;
    v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Disconnecting device %@ for all apps", (uint8_t *)&v13, 0xCu);
  }
  v7 = *(_QWORD **)(a1 + 224);
  if (v7 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v8 = v7[4];
      v9 = v7[5];
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9)
        || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9) == 3)
      {
        sub_1002E4B88((os_unfair_lock_s *)a1, v8, v9, v5, 1, 0, a3);
      }
      v10 = (_QWORD *)v7[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v7[2];
          v12 = *v11 == (_QWORD)v7;
          v7 = v11;
        }
        while (!v12);
      }
      v7 = v11;
    }
    while (v11 != (_QWORD *)(a1 + 232));
  }

}

void sub_1002E50B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E50CC(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  id v7;
  uint64_t v8;
  id v9;

  v9 = a3;
  v7 = a4;
  v8 = sub_10000A1A4(a1, a2, 0);
  if (v8)
    sub_1003FD018(v8, a2, v9, v7);

}

void sub_1002E513C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E5154(uint64_t a1, unint64_t a2, void *a3, char a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a3;
  v8 = sub_10000A1A4(a1, a2, 0);
  if (v8)
    v9 = sub_100402A4C(v8, a2, v7, a4);
  else
    v9 = 12;

  return v9;
}

void sub_1002E51C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E51D0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  void *__p[2];
  uint64_t v14;

  __p[0] = 0;
  __p[1] = 0;
  v14 = 0;
  v5 = objc_retainAutorelease(a2);
  sub_100091AE8(__p, (char *)objc_msgSend(v5, "UTF8String"));
  v6 = *(_QWORD **)(a1 + 224);
  v7 = (_QWORD *)(a1 + 232);
  if (v6 != (_QWORD *)(a1 + 232))
  {
    do
    {
      v8 = (_QWORD *)v6[5];
      if (!(*(unsigned int (**)(_QWORD *))(*v8 + 16))(v8))
      {
        v9 = v8[15];
        if (v9)
          (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v9 + 240))(v9, __p, a3);
      }
      v10 = (_QWORD *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v6[2];
          v12 = *v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      v6 = v11;
    }
    while (v11 != v7);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);

}

void sub_1002E52BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E52E8(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _OWORD v15[2];
  int v16;

  v9 = a3;
  v10 = a5;
  v11 = sub_10000A1A4(a1, a2, 0);
  if (v11)
  {
    v12 = *(_OWORD *)(a4 + 16);
    v15[0] = *(_OWORD *)a4;
    v15[1] = v12;
    v16 = *(_DWORD *)(a4 + 32);
    v13 = sub_100402B90(v11, a2, v9, (uint64_t)v15, v10);
  }
  else
  {
    v13 = 12;
  }

  return v13;
}

void sub_1002E5388(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E539C(uint64_t a1, unint64_t a2, int a3, void *a4, int a5, uint64_t a6)
{
  id v11;
  uint64_t v12;
  uint64_t v13;

  v11 = a4;
  v12 = sub_10000A1A4(a1, a2, 0);
  if (v12)
    v13 = sub_100402C4C(v12, a2, a3, v11, a5, a6);
  else
    v13 = 12;

  return v13;
}

void sub_1002E5420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E5430(uint64_t a1, unint64_t a2, int a3, void *a4, uint64_t a5, __int128 *a6, uint64_t a7, void *a8)
{
  id v15;
  id v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v21[2];

  v15 = a4;
  v16 = a8;
  v17 = sub_10000A1A4(a1, a2, 0);
  if (v17)
  {
    v18 = a6[1];
    v21[0] = *a6;
    v21[1] = v18;
    v19 = sub_100402CF0(v17, a2, a3, v15, a5, v21, a7, v16);
  }
  else
  {
    v19 = 12;
  }

  return v19;
}

void sub_1002E54E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E54FC(uint64_t a1, unint64_t a2)
{
  if (sub_10000A1A4(a1, a2, 0))
    return sub_100402DCC();
  else
    return 12;
}

uint64_t sub_1002E5538(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a3;
  v6 = sub_10000A1A4(a1, a2, 0);
  if (v6)
    v7 = sub_100402E1C(v6, a2, v5);
  else
    v7 = 12;

  return v7;
}

void sub_1002E559C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E55AC(uint64_t a1, unint64_t a2, void *a3, __int128 *a4)
{
  id v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v12;
  _OWORD v13[2];

  v7 = a3;
  v8 = sub_10000A1A4(a1, a2, 0);
  if (v8)
  {
    v9 = a4[1];
    v12 = *a4;
    v13[0] = v9;
    *(_OWORD *)((char *)v13 + 10) = *(__int128 *)((char *)a4 + 26);
    v10 = sub_100402E98(v8, a2, v7, &v12);
  }
  else
  {
    v10 = 12;
  }

  return v10;
}

void sub_1002E5630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E5640(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a3;
  v6 = sub_10000A1A4(a1, a2, 0);
  if (v6)
    v7 = sub_100402F3C(v6, a2, v5);
  else
    v7 = 12;

  return v7;
}

void sub_1002E56A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E56B4(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a3;
  v6 = sub_10000A1A4(a1, a2, 0);
  if (v6)
    v7 = sub_100402FB8(v6, a2, v5);
  else
    v7 = 12;

  return v7;
}

void sub_1002E5718(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E5728(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v12[3];
  int v13;

  v7 = a3;
  v8 = sub_10000A1A4(a1, a2, 0);
  if (v8)
  {
    v9 = *(_OWORD *)(a4 + 16);
    v12[0] = *(_OWORD *)a4;
    v12[1] = v9;
    v12[2] = *(_OWORD *)(a4 + 32);
    v13 = *(_DWORD *)(a4 + 48);
    v10 = sub_100403034(v8, a2, v7, (uint64_t)v12);
  }
  else
  {
    v10 = 12;
  }

  return v10;
}

void sub_1002E57B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E57C4(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a3;
  v8 = sub_10000A1A4(a1, a2, 0);
  if (v8)
    v9 = sub_1004030E0(v8, a2, v7, a4);
  else
    v9 = 12;

  return v9;
}

void sub_1002E5830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E5840(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;

  v9 = a3;
  v10 = sub_10000A1A4(a1, a2, 0);
  if (v10)
    v11 = sub_10040316C(v10, a2, v9, a4, a5);
  else
    v11 = 12;

  return v11;
}

void sub_1002E58BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E58CC(uint64_t a1, unint64_t a2, void *a3, __int128 *a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  v7 = a3;
  v8 = sub_10000A1A4(a1, a2, 0);
  if (v8)
  {
    v11 = *a4;
    v12 = *((_QWORD *)a4 + 2);
    v9 = sub_100403200(v8, a2, v7, (uint64_t)&v11);
  }
  else
  {
    v9 = 12;
  }

  return v9;
}

void sub_1002E5950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E5960(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_10000A1A4(a1, a2, 0);
  if (v5)
    return sub_1004032A4(v5, a2, a3);
  else
    return 12;
}

uint64_t sub_1002E59A4(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11;
  uint64_t v12;
  uint64_t v13;

  v11 = a3;
  v12 = sub_10000A1A4(a1, a2, 0);
  if (v12)
    v13 = sub_1004032FC(v12, a2, v11, a4, a5, a6);
  else
    v13 = 12;

  return v13;
}

void sub_1002E5A28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E5A38(uint64_t a1, unint64_t a2)
{
  uint64_t v3;

  v3 = sub_10000A1A4(a1, a2, 0);
  if (v3)
    return sub_1004033A0(v3, a2);
  else
    return 12;
}

uint64_t sub_1002E5A74(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a3;
  v6 = sub_10000A1A4(a1, a2, 0);
  if (v6)
    v7 = sub_1004033F0(v6, a2, v5);
  else
    v7 = 12;

  return v7;
}

void sub_1002E5AD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E5AE8(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a3;
  v8 = sub_10000A1A4(a1, a2, 0);
  if (v8)
    v9 = sub_10040346C(v8, a2, v7, a4);
  else
    v9 = 12;

  return v9;
}

void sub_1002E5B54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E5B64(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  void *__p[2];
  uint64_t v12;

  v3 = sub_10000A1A4(a1, a2, 0);
  if (v3)
  {
    v4 = v3;
    if (*(_QWORD *)(v3 + 120))
    {
      v5 = *(_QWORD **)(a1 + 224);
      v6 = (_QWORD *)(a1 + 232);
      if (v5 != (_QWORD *)(a1 + 232))
      {
        do
        {
          v7 = v5[5];
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) && *(int *)(v7 + 376) >= 1)
          {
            __p[0] = 0;
            __p[1] = 0;
            v12 = 0;
            sub_100091AE8(__p, (char *)objc_msgSend(*(id *)(v7 + 88), "UTF8String"));
            (*(void (**)(_QWORD, void **, uint64_t))(**(_QWORD **)(v4 + 120) + 240))(*(_QWORD *)(v4 + 120), __p, 1);
            if (SHIBYTE(v12) < 0)
              operator delete(__p[0]);
          }
          v8 = (_QWORD *)v5[1];
          if (v8)
          {
            do
            {
              v9 = v8;
              v8 = (_QWORD *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              v9 = (_QWORD *)v5[2];
              v10 = *v9 == (_QWORD)v5;
              v5 = v9;
            }
            while (!v10);
          }
          v5 = v9;
        }
        while (v9 != v6);
      }
    }
  }
}

void sub_1002E5C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002E5C7C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned __int8 a8, char a9, char a10, char a11, unsigned __int8 a12, unsigned __int8 a13, char a14, char a15, int a16, int a17)
{
  id v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  __int16 v35;

  v24 = a3;
  v25 = sub_10000A1A4(a1, a2, 0);
  if (v25)
  {
    if (*(_BYTE *)(v25 + 304))
    {
      v26 = a15;
      v27 = a14;
      v28 = a13;
      v29 = a12;
      v30 = a11;
      v31 = a10;
      v32 = a9;
      if (qword_100977FC0 != -1)
      {
        dispatch_once(&qword_100977FC0, &stru_100924E50);
        v32 = a9;
        v31 = a10;
        v30 = a11;
        v29 = a12;
        v28 = a13;
        v27 = a14;
        v26 = a15;
      }
      HIBYTE(v35) = v31;
      LOBYTE(v35) = v32;
      v33 = sub_100582D18(qword_100977FB8, a2, v24, a4, a5, a6, a7, a8, v35, v30, v29, v28, v27, v26, a16, a17);
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
        sub_1006DD548();
      v33 = 17;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      sub_1006DD51C();
    v33 = 1;
  }

  return v33;
}

void sub_1002E5E34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E5E44(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v7;

  v7 = a3;
  if (sub_10000A1A4(a1, a2, 0))
  {
    if (qword_100977FC0 != -1)
      dispatch_once(&qword_100977FC0, &stru_100924E50);
    sub_100584478(qword_100977FB8, a2, v7, a4);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
  {
    sub_1006DD574();
  }

}

void sub_1002E5EFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E5F0C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = sub_10000A1A4(a1, a2, 1u);
  if (!v6)
    return 12;
  v7 = v6;
  result = sub_10040A624(v6, a2, a3);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(v7 + 24))
    {
      if (*(_QWORD *)(v7 + 96))
        sub_10006F07C(a1);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1002E5F7C(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = sub_10000A1A4(a1, a2, 1u);
  if (!v6)
    return 12;
  v7 = v6;
  result = sub_10040AAB4(v6, a2, a3);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(v7 + 24))
    {
      if (*(_QWORD *)(v7 + 96))
        sub_10006F07C(a1);
    }
    return 0;
  }
  return result;
}

_QWORD *sub_1002E5FEC(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  char *v4;
  char *v5;
  int64_t v6;

  v3 = result;
  v5 = (char *)result[13];
  v4 = (char *)result[14];
  if (v5 != v4)
  {
    while (*(_QWORD *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        v5 = (char *)result[14];
        break;
      }
    }
  }
  if (v5 != v4)
  {
    v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8)
      result = memmove(v5, v5 + 8, v4 - (v5 + 8));
    v3[14] = &v5[v6];
    if (a2)
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  }
  return result;
}

void sub_1002E6084(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  void **v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  int v20;

  v6 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000340DC(a2, (uint64_t)__p);
    v7 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446466;
    v18 = v7;
    v19 = 1024;
    v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "advertisingStoppedForSession session:%{public}s result:%d", buf, 0x12u);
    if (v16 < 0)
      operator delete(__p[0]);
  }
  if (a3 == 116)
  {
    v8 = *(_QWORD **)(a1 + 224);
    v9 = (_QWORD *)(a1 + 232);
    if (v8 != (_QWORD *)(a1 + 232))
    {
      while (1)
      {
        v11 = v8[4];
        v10 = v8[5];
        v12 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10) == 1 && v11 == a2;
        if (v12)
          break;
        v13 = (_QWORD *)v8[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v8[2];
            v12 = *v14 == (_QWORD)v8;
            v8 = v14;
          }
          while (!v12);
        }
        v8 = v14;
        if (v14 == v9)
          return;
      }
      sub_10040D5CC(v10);
    }
  }
}

void sub_1002E61FC(uint64_t a1, uint64_t a2, int a3)
{
  sub_1002E6084(a1 - 112, a2, a3);
}

uint64_t sub_1002E6204(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = sub_10000A1A4(a1, a2, 1u);
  if (!v6)
    return 12;
  v7 = v6;
  result = sub_10040B118(v6, a2, a3, *(_BYTE *)(v6 + 24));
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)(v7 + 24))
    {
      if (*(_QWORD *)(v7 + 96))
        sub_10006F07C(a1);
    }
    return 0;
  }
  return result;
}

void sub_1002E6278(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_10000A1A4(a1, a2, 1u);
  if (v4)
  {
    v5 = v4;
    sub_10040B928(v4, a2);
    if (*(_BYTE *)(v5 + 24))
    {
      if (*(_QWORD *)(v5 + 96))
        sub_10006F07C(a1);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
  {
    sub_1006DD5A0();
  }
}

uint64_t sub_1002E6304(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;

  v7 = a3;
  v8 = sub_10000A1A4(a1, a2, 2u);
  v9 = v8;
  if (v8)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) == 1;
    v11 = sub_10040C174(v9, a2, v7, a4, v10);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
      sub_1006DD5CC();
    v11 = 3;
  }

  return v11;
}

void sub_1002E63B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1002E63C8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;

  v4 = a3;
  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100924C30);
  v5 = sub_1006247E8((uint64_t)off_1009778A0, a2, v4);

  return v5;
}

void sub_1002E6434(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E6444(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6)
{
  uint64_t v11;

  v11 = sub_10000A1A4(a1, a2, 1u);
  if (v11)
  {
    sub_10040CDDC(v11, a2, a3, a4, a5, a6);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
  {
    sub_1006DD5F8();
  }
}

void sub_1002E64DC(uint64_t a1, unint64_t a2, void *a3, unsigned __int16 a4)
{
  id v7;
  uint64_t v8;

  v7 = a3;
  v8 = sub_10000A1A4(a1, a2, 1u);
  if (v8)
  {
    sub_10040CE64(v8, a2, v7, a4);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
  {
    sub_1006DD624();
  }

}

void sub_1002E6574(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E6584(uint64_t a1, unint64_t a2, void *a3, unsigned __int8 **a4, char a5)
{
  id v9;
  uint64_t v10;

  v9 = a3;
  v10 = sub_10000A1A4(a1, a2, 0);
  if (v10)
  {
    sub_100401E7C(v10, a2, v9, a4, a5);
  }
  else if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_ERROR))
  {
    sub_1006DD650();
  }

}

void sub_1002E661C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1002E662C()
{
  int v0;
  NSObject *v1;
  _DWORD v2[2];

  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100924C30);
  v0 = sub_10063E5C8((os_unfair_lock_s *)off_1009778A0);
  v1 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109120;
    v2[1] = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "pauseLeConnectionManager returned %d", (uint8_t *)v2, 8u);
  }
}

void sub_1002E6700()
{
  int v0;
  NSObject *v1;
  _DWORD v2[2];

  if (qword_1009778A8 != -1)
    dispatch_once(&qword_1009778A8, &stru_100924C30);
  v0 = sub_10063C498((uint64_t)off_1009778A0);
  v1 = qword_100999898;
  if (os_log_type_enabled((os_log_t)qword_100999898, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109120;
    v2[1] = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "resumeConnectionManager returned %d", (uint8_t *)v2, 8u);
  }
}

